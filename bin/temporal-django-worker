#!/bin/bash

set -e

cleanup() {
    echo "Stopping worker..."
    if kill -0 "$worker_pid" >/dev/null 2>&1; then
        kill -SIGTERM "$worker_pid"
    else
        echo "Worker process is not running."
    fi
}

trap cleanup SIGINT SIGTERM EXIT

python3 manage.py start_temporal_worker "$@" &

worker_pid=$!

# Run wait in a loop in case we trap SIGINT or SIGTERM.
# In both cases, wait will terminate early, potentially not waiting for graceful shutdown.
while wait $worker_pid
do
    status=$?
    # If we exit with SIGTERM, status will be 128 + 15.
    # If we exit with SIGINT, status will be 128 + 2.
    if [ $status -eq 143 ] || [ $status -eq 130 ]; then
        echo "Received signal $(($status - 128)), waiting for worker to finish"
    elif [ $status -eq 0 ]; then
        echo "Worker exited normally, terminating wait"
        break
    else
        echo "Worker exited with unexpected exit status $status, terminating wait"
        break
    fi
done

cleanup
