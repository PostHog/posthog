#!/bin/bash

# ============================================================================
# MinIO to SeaweedFS Migration Script for PostHog
# ============================================================================
# 
# IMPORTANT: This is an EXAMPLE migration script. Your environment may differ.
# 
# What this script does:
#   1. Backs up your existing MinIO data to a local directory
#   2. Provides step-by-step instructions for migrating to SeaweedFS
#   3. Preserves all your existing object storage data
#
# Prerequisites:
#   - MinIO Client (mc) installed - see installation instructions below
#   - Docker and docker-compose installed
#   - Sufficient disk space for the backup (check with: df -h)
#
# ⚠️  ALWAYS backup critical data before migration
# ============================================================================

set -euo pipefail  # Exit on error, undefined variables, and pipe failures

# ============================================================================
# Configuration - Modify these values to match your environment
# ============================================================================
MINIO_ENDPOINT="${MINIO_ENDPOINT:-http://localhost:19000}"
MINIO_ACCESS_KEY="${MINIO_ACCESS_KEY:-object_storage_root_user}"
MINIO_SECRET_KEY="${MINIO_SECRET_KEY:-object_storage_root_password}"
BUCKET_NAME="${BUCKET_NAME:-posthog}"
BACKUP_DIR="${BACKUP_DIR:-./minio-backup}"
ALIAS_NAME="minio-local"

# Color codes for better readability
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color
BOLD='\033[1m'

# ============================================================================
# Helper Functions
# ============================================================================

print_header() {
    echo ""
    echo -e "${BLUE}${BOLD}═══════════════════════════════════════════════════════════════${NC}"
    echo -e "${BLUE}${BOLD}  MinIO → SeaweedFS Migration Tool for PostHog${NC}"
    echo -e "${BLUE}${BOLD}═══════════════════════════════════════════════════════════════${NC}"
    echo ""
}

print_step() {
    local step_num=$1
    local message=$2
    echo ""
    echo -e "${GREEN}${BOLD}Step $step_num:${NC} $message"
    echo -e "${GREEN}────────────────────────────────────────${NC}"
}

print_error() {
    echo -e "${RED}${BOLD}✗ ERROR:${NC} $1" >&2
}

print_warning() {
    echo -e "${YELLOW}${BOLD}⚠ WARNING:${NC} $1"
}

print_success() {
    echo -e "${GREEN}${BOLD}✓${NC} $1"
}

print_info() {
    echo -e "${BLUE}ℹ${NC} $1"
}

check_prerequisites() {
    local missing_deps=()
    
    # Check for required commands
    command -v docker >/dev/null 2>&1 || missing_deps+=("docker")
    command -v docker-compose >/dev/null 2>&1 || missing_deps+=("docker-compose")
    command -v curl >/dev/null 2>&1 || missing_deps+=("curl")
    
    if [ ${#missing_deps[@]} -ne 0 ]; then
        print_error "Missing required dependencies: ${missing_deps[*]}"
        echo "Please install the missing dependencies and try again."
        exit 1
    fi
}

install_mc() {
    echo ""
    echo -e "${BOLD}MinIO Client (mc) Installation Instructions:${NC}"
    echo ""
    
    # Detect OS and provide specific instructions
    if [[ "$OSTYPE" == "darwin"* ]]; then
        echo "  For macOS (using Homebrew):"
        echo -e "    ${BLUE}brew install minio/stable/mc${NC}"
    elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
        echo "  For Linux (64-bit):"
        echo -e "    ${BLUE}curl -O https://dl.min.io/client/mc/release/linux-amd64/mc${NC}"
        echo -e "    ${BLUE}chmod +x mc${NC}"
        echo -e "    ${BLUE}sudo mv mc /usr/local/bin/${NC}"
    else
        echo "  For other systems, visit:"
        echo -e "    ${BLUE}https://min.io/docs/minio/linux/reference/minio-mc.html${NC}"
    fi
    echo ""
}

confirm_action() {
    local message=$1
    local response
    
    echo ""
    echo -e "${YELLOW}${BOLD}$message${NC}"
    read -p "Do you want to continue? (yes/no): " response
    
    case "$response" in
        [Yy]es|[Yy])
            return 0
            ;;
        *)
            echo "Migration cancelled by user."
            exit 0
            ;;
    esac
}

format_bytes() {
    local bytes=$1
    if [ $bytes -lt 1024 ]; then
        echo "${bytes}B"
    elif [ $bytes -lt 1048576 ]; then
        echo "$((bytes / 1024))KB"
    elif [ $bytes -lt 1073741824 ]; then
        echo "$((bytes / 1048576))MB"
    else
        echo "$((bytes / 1073741824))GB"
    fi
}

# ============================================================================
# Main Migration Process
# ============================================================================

print_header

echo "This tool will help you migrate your object storage from MinIO to SeaweedFS."
echo "Your data will be backed up locally before providing migration instructions."
echo ""
print_info "Current configuration:"
echo "  • Endpoint: $MINIO_ENDPOINT"
echo "  • Bucket: $BUCKET_NAME"
echo "  • Backup location: $BACKUP_DIR"

# Check basic prerequisites
check_prerequisites

# ============================================================================
# Step 1: Check MinIO Client
# ============================================================================
print_step "1" "Checking for MinIO Client (mc)"

if ! command -v mc &> /dev/null; then
    print_error "MinIO Client (mc) is not installed"
    install_mc
    exit 1
else
    print_success "MinIO Client found at: $(which mc)"
fi

# ============================================================================
# Step 2: Test MinIO Connectivity
# ============================================================================
print_step "2" "Testing MinIO connectivity"

echo "Checking connection to $MINIO_ENDPOINT..."

# Test HTTP connectivity
HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" "$MINIO_ENDPOINT" 2>/dev/null || echo "000")

if [[ "$HTTP_CODE" == "000" ]]; then
    print_error "Cannot reach MinIO at $MINIO_ENDPOINT"
    echo ""
    echo "Troubleshooting steps:"
    echo "  1. Check if MinIO is running:"
    echo -e "     ${BLUE}docker-compose ps objectstorage${NC}"
    echo "  2. Start MinIO if it's not running:"
    echo -e "     ${BLUE}docker-compose up -d objectstorage${NC}"
    echo "  3. Verify the endpoint URL is correct"
    exit 1
elif [[ "$HTTP_CODE" == "403" ]] || [[ "$HTTP_CODE" == "400" ]] || [[ "$HTTP_CODE" == "200" ]]; then
    print_success "MinIO is reachable"
else
    print_warning "Unexpected HTTP response code: $HTTP_CODE (continuing anyway)"
fi

# ============================================================================
# Step 3: Configure MinIO Client
# ============================================================================
print_step "3" "Configuring MinIO Client"

echo "Setting up connection alias '$ALIAS_NAME'..."

if ! mc alias set "$ALIAS_NAME" "$MINIO_ENDPOINT" "$MINIO_ACCESS_KEY" "$MINIO_SECRET_KEY" --api S3v4 2>/dev/null; then
    print_error "Failed to configure MinIO Client"
    echo ""
    echo "Please verify:"
    echo "  • Endpoint: $MINIO_ENDPOINT"
    echo "  • Access Key: $MINIO_ACCESS_KEY"
    echo "  • Secret Key: [hidden]"
    exit 1
fi

print_success "MinIO Client configured successfully"

# Test the connection
echo "Verifying credentials..."
if ! mc ls "$ALIAS_NAME" &>/dev/null; then
    print_error "Cannot authenticate with MinIO"
    echo "Please check your credentials and try again."
    exit 1
fi

print_success "Authentication successful"

# ============================================================================
# Step 4: Analyze Bucket Contents
# ============================================================================
print_step "4" "Analyzing bucket contents"

echo "Checking bucket '$BUCKET_NAME'..."

if ! mc ls "$ALIAS_NAME/$BUCKET_NAME" &>/dev/null; then
    print_info "Bucket '$BUCKET_NAME' does not exist or is empty"
    echo ""
    echo -e "${GREEN}${BOLD}No data migration needed!${NC}"
    echo ""
    echo "You can proceed directly to SeaweedFS:"
    echo "  1. Stop current services:"
    echo -e "     ${BLUE}docker-compose down${NC}"
    echo "  2. Start with SeaweedFS:"
    echo -e "     ${BLUE}docker-compose up -d${NC}"
    exit 0
fi

# Count and size objects
print_info "Calculating bucket statistics (this may take a moment)..."

OBJECT_COUNT=$(mc ls "$ALIAS_NAME/$BUCKET_NAME" --recursive 2>/dev/null | wc -l | tr -d ' ')
TOTAL_SIZE=$(mc du "$ALIAS_NAME/$BUCKET_NAME" --json 2>/dev/null | grep totalSize | tail -1 | grep -o '[0-9]*' || echo "0")

if [ "$OBJECT_COUNT" -eq 0 ]; then
    print_info "Bucket exists but contains no objects"
    echo ""
    echo -e "${GREEN}${BOLD}No data migration needed!${NC}"
    echo ""
    echo "You can proceed directly to SeaweedFS:"
    echo "  1. Stop current services:"
    echo -e "     ${BLUE}docker-compose down${NC}"
    echo "  2. Start with SeaweedFS:"
    echo -e "     ${BLUE}docker-compose up -d${NC}"
    exit 0
fi

echo ""
print_info "Bucket statistics:"
echo "  • Objects: $OBJECT_COUNT"
echo "  • Total size: $(format_bytes $TOTAL_SIZE)"

# Check available disk space
AVAILABLE_SPACE=$(df -k . | awk 'NR==2 {print $4}')
AVAILABLE_SPACE_BYTES=$((AVAILABLE_SPACE * 1024))

if [ "$TOTAL_SIZE" -gt "$AVAILABLE_SPACE_BYTES" ]; then
    print_error "Insufficient disk space for backup"
    echo "  • Required: $(format_bytes $TOTAL_SIZE)"
    echo "  • Available: $(format_bytes $AVAILABLE_SPACE_BYTES)"
    echo ""
    echo "Please free up disk space or change BACKUP_DIR to a location with more space."
    exit 1
fi

# ============================================================================
# Step 5: Confirm Backup
# ============================================================================
print_step "5" "Ready to backup data"

echo "Backup details:"
echo "  • Source: $ALIAS_NAME/$BUCKET_NAME"
echo "  • Destination: $BACKUP_DIR"
echo "  • Objects to backup: $OBJECT_COUNT"
echo "  • Total size: $(format_bytes $TOTAL_SIZE)"

confirm_action "This will create a local backup of all MinIO data."

# ============================================================================
# Step 6: Perform Backup
# ============================================================================
print_step "6" "Backing up data"

# Create backup directory
mkdir -p "$BACKUP_DIR"
print_success "Created backup directory: $BACKUP_DIR"

echo ""
echo "Starting backup process..."
echo "This may take several minutes depending on data size..."
echo ""

# Perform the backup with progress
if ! mc mirror "$ALIAS_NAME/$BUCKET_NAME" "$BACKUP_DIR" --overwrite; then
    print_error "Backup failed"
    echo "Please check the error messages above and try again."
    exit 1
fi

# Verify backup
FILE_COUNT=$(find "$BACKUP_DIR" -type f 2>/dev/null | wc -l | tr -d ' ')
BACKUP_SIZE=$(du -sb "$BACKUP_DIR" 2>/dev/null | cut -f1)

echo ""
print_success "Backup completed successfully!"
echo "  • Files backed up: $FILE_COUNT"
echo "  • Backup size: $(format_bytes $BACKUP_SIZE)"
echo "  • Location: $BACKUP_DIR"

# ============================================================================
# Migration Instructions
# ============================================================================
echo ""
echo -e "${BLUE}${BOLD}═══════════════════════════════════════════════════════════════${NC}"
echo -e "${BLUE}${BOLD}  Migration Instructions${NC}"
echo -e "${BLUE}${BOLD}═══════════════════════════════════════════════════════════════${NC}"

echo ""
echo -e "${BOLD}Your data has been safely backed up. Follow these steps to complete the migration:${NC}"
echo ""

echo -e "${GREEN}1. Stop current PostHog services:${NC}"
echo -e "   ${BLUE}docker-compose down${NC}"
echo ""

echo -e "${GREEN}2. Verify docker-compose.base.yml uses SeaweedFS:${NC}"
echo "   Check that the objectstorage service is configured for SeaweedFS"
echo ""

echo -e "${GREEN}3. Start SeaweedFS:${NC}"
echo -e "   ${BLUE}docker-compose -f docker-compose.hobby.yml up -d objectstorage${NC}"
echo ""

echo -e "${GREEN}4. Wait for SeaweedFS to initialize:${NC}"
echo -e "   ${BLUE}sleep 10${NC}"
echo ""

echo -e "${GREEN}5. Configure SeaweedFS and restore data:${NC}"
echo -e "   ${BLUE}# Configure mc for SeaweedFS (same endpoint/credentials)${NC}"
echo -e "   ${BLUE}mc alias set seaweedfs-local $MINIO_ENDPOINT $MINIO_ACCESS_KEY $MINIO_SECRET_KEY --api S3v4${NC}"
echo ""
echo -e "   ${BLUE}# Create bucket if needed${NC}"
echo -e "   ${BLUE}mc mb seaweedfs-local/$BUCKET_NAME --ignore-existing${NC}"
echo ""
echo -e "   ${BLUE}# Restore your data${NC}"
echo -e "   ${BLUE}mc mirror $BACKUP_DIR seaweedfs-local/$BUCKET_NAME --overwrite${NC}"
echo ""

echo -e "${GREEN}6. Verify the migration:${NC}"
echo -e "   ${BLUE}mc ls seaweedfs-local/$BUCKET_NAME --recursive | head -20${NC}"
echo ""

echo -e "${GREEN}7. Start all PostHog services:${NC}"
echo -e "   ${BLUE}docker-compose up -d${NC}"
echo ""

echo -e "${GREEN}8. Test PostHog functionality:${NC}"
echo "   • Open PostHog in your browser"
echo "   • Verify that recordings and other assets load correctly"
echo ""

echo -e "${BLUE}${BOLD}═══════════════════════════════════════════════════════════════${NC}"
echo -e "${BLUE}${BOLD}  Cleanup (After Verification)${NC}"
echo -e "${BLUE}${BOLD}═══════════════════════════════════════════════════════════════${NC}"
echo ""

echo -e "${YELLOW}After confirming everything works:${NC}"
echo ""
echo "1. Remove the backup:"
echo -e "   ${BLUE}rm -rf $BACKUP_DIR${NC}"
echo ""
echo "2. Remove old MinIO volumes (if applicable):"
echo -e "   ${BLUE}docker volume rm posthog_objectstorage-data${NC}"
echo ""
echo "3. Remove MinIO mc alias:"
echo -e "   ${BLUE}mc alias remove $ALIAS_NAME${NC}"
echo ""

print_success "Backup complete! Follow the instructions above to finish migration."