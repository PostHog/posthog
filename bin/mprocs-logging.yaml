procs:
    backend:
        shell: 'uv sync --active && bin/check_postgres_up && bin/check_kafka_clickhouse_up && ./bin/start-backend 2>&1 | tee -a "$MPROCS_LOG_DIR/backend.log"'

    celery-worker:
        shell: 'uv sync --active && bin/check_postgres_up && bin/check_kafka_clickhouse_up && ./bin/start-celery worker 2>&1 | tee -a "$MPROCS_LOG_DIR/celery-worker.log"'

    celery-beat:
        shell: 'uv sync --active && bin/check_postgres_up && bin/check_kafka_clickhouse_up && ./bin/start-celery beat 2>&1 | tee -a "$MPROCS_LOG_DIR/celery-beat.log"'

    plugin-server:
        shell: 'bin/check_postgres_up && bin/check_kafka_clickhouse_up && ./bin/plugin-server 2>&1 | tee -a "$MPROCS_LOG_DIR/plugin-server.log"'

    frontend:
        shell: './bin/start-frontend 2>&1 | tee -a "$MPROCS_LOG_DIR/frontend.log"'

    temporal-worker-general-purpose:
        shell: 'bin/check_kafka_clickhouse_up && bin/check_temporal_up && python manage.py start_temporal_worker --task-queue general-purpose-task-queue 2>&1 | tee -a "$MPROCS_LOG_DIR/temporal-worker-general-purpose.log"'

    temporal-worker-batch-exports:
        shell: 'bin/check_kafka_clickhouse_up && bin/check_temporal_up && python manage.py start_temporal_worker --task-queue batch-exports-task-queue --metrics-port 8002 2>&1 | tee -a "$MPROCS_LOG_DIR/temporal-worker-batch-exports.log"'

    temporal-worker-data-warehouse:
        shell: 'bin/check_kafka_clickhouse_up && bin/check_temporal_up && python manage.py start_temporal_worker --task-queue data-warehouse-task-queue --metrics-port 8003 2>&1 | tee -a "$MPROCS_LOG_DIR/temporal-worker-data-warehouse.log"'

    temporal-worker-data-warehouse-compaction:
        shell: 'bin/check_kafka_clickhouse_up && bin/check_temporal_up && python manage.py start_temporal_worker --task-queue data-warehouse-compaction-task-queue --metrics-port 8004 2>&1 | tee -a "$MPROCS_LOG_DIR/temporal-worker-data-warehouse-compaction.log"'

    temporal-worker-data-modeling:
        shell: 'bin/check_kafka_clickhouse_up && bin/check_temporal_up && python manage.py start_temporal_worker --task-queue data-modeling-task-queue --metrics-port 8005 2>&1 | tee -a "$MPROCS_LOG_DIR/temporal-worker-data-modeling.log"'

    temporal-worker-max-ai:
        shell: 'bin/check_kafka_clickhouse_up && bin/check_temporal_up && python manage.py start_temporal_worker --task-queue max-ai-task-queue --metrics-port 8006 2>&1 | tee -a "$MPROCS_LOG_DIR/temporal-worker-max-ai.log"'

    temporal-worker-tasks-agent:
        shell: 'bin/check_kafka_clickhouse_up && bin/check_temporal_up && python manage.py start_temporal_worker --task-queue tasks-task-queue --metrics-port 8007 2>&1 | tee -a "$MPROCS_LOG_DIR/temporal-worker-tasks-agent.log"'

    temporal-worker-billing:
        shell: 'bin/check_kafka_clickhouse_up && bin/check_temporal_up && python manage.py start_temporal_worker --task-queue billing-task-queue --metrics-port 8008 2>&1 | tee -a "$MPROCS_LOG_DIR/temporal-worker-billing.log"'

    temporal-worker-video-export:
        shell: 'bin/check_kafka_clickhouse_up && bin/check_temporal_up && python manage.py start_temporal_worker --task-queue video-export-task-queue --metrics-port 8009 2>&1 | tee -a "$MPROCS_LOG_DIR/temporal-worker-video-export.log"'

    dagster:
        shell: |
            bin/check_postgres_up && \
            bin/check_kafka_clickhouse_up && \
            (dagster dev --workspace $DAGSTER_HOME/workspace.yaml -p $DAGSTER_UI_PORT 2>&1 | tee -a "$MPROCS_LOG_DIR/dagster.log")

    docker-compose:
        shell: 'docker compose -f docker-compose.dev.yml up --pull always -d && docker compose -f docker-compose.dev.yml logs --tail=0 -f 2>&1 | tee -a "$MPROCS_LOG_DIR/docker-compose.log"'

    cyclotron-janitor:
        shell: |
            bin/check_postgres_up cyclotron && \
            bin/check_kafka_clickhouse_up && \
            (bin/start-rust-service cyclotron-janitor 2>&1 | tee -a "$MPROCS_LOG_DIR/cyclotron-janitor.log")

    cymbal:
        shell: |
            bin/check_postgres_up && \
            bin/check_kafka_clickhouse_up && \
            (bin/start-rust-service cymbal 2>&1 | tee -a "$MPROCS_LOG_DIR/cymbal.log")

    feature-flags:
        shell: |
            bin/check_postgres_up posthog && \
            (bin/start-rust-service feature-flags 2>&1 | tee -a "$MPROCS_LOG_DIR/feature-flags.log")

    property-defs-rs:
        shell: |
            bin/check_postgres_up && \
            bin/check_kafka_clickhouse_up && \
            (bin/start-rust-service property-defs-rs 2>&1 | tee -a "$MPROCS_LOG_DIR/property-defs-rs.log")

    capture:
        shell: |
            bin/check_postgres_up && \
            bin/check_kafka_clickhouse_up && \
            (bin/start-rust-service capture 2>&1 | tee -a "$MPROCS_LOG_DIR/capture.log")

    capture-replay:
        shell: |
            bin/check_postgres_up && \
            bin/check_kafka_clickhouse_up && \
            (bin/start-rust-service capture-replay 2>&1 | tee -a "$MPROCS_LOG_DIR/capture-replay.log")

    migrate-postgres:
        shell: 'bin/check_postgres_up && python manage.py migrate 2>&1 | tee -a "$MPROCS_LOG_DIR/migrate-postgres.log"'

    migrate-clickhouse:
        shell: 'bin/check_kafka_clickhouse_up && python manage.py migrate_clickhouse 2>&1 | tee -a "$MPROCS_LOG_DIR/migrate-clickhouse.log"'

    generate-demo-data:
        shell: |
            bin/check_postgres_up && \
            bin/check_kafka_clickhouse_up && \
            bin/check_dagster_graphql_up && \
            (./manage.py generate_demo_data 2>&1 | tee -a "$MPROCS_LOG_DIR/generate-demo-data.log")
        autostart: false

    storybook:
        shell: 'pnpm --filter=@posthog/storybook install && pnpm run storybook 2>&1 | tee -a "$MPROCS_LOG_DIR/storybook.log"'
        autostart: false

mouse_scroll_speed: 1
scrollback: 10000
