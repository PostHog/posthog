"""Generate shell completion scripts for hogli."""

import click
from hogli.core.manifest import get_manifest


def generate_bash_completion(cli_name: str = "hogli") -> str:
    """Generate bash completion script for hogli."""
    manifest = get_manifest()
    commands = " ".join(manifest.get_all_commands())

    return f"""# bash completion for {cli_name}
# Generated by hogli completion system

_hogli_completion() {{
    local cur prev words cword
    COMPREPLY=()
    cur="${"{COMP_WORDS[COMP_CWORD]}"}"
    prev="${"{COMP_WORDS[COMP_CWORD-1]}"}"

    local commands="{commands}"

    if [[ ${{cur}} == -* ]] ; then
        COMPREPLY=($(compgen -W '--help' -- ${{cur}}))
        return 0
    fi

    COMPREPLY=($(compgen -W "${{commands}}" -- ${{cur}}))
    return 0
}}

complete -o bashdefault -o default -o nospace -F _hogli_completion {cli_name}
"""


def generate_zsh_completion(cli_name: str = "hogli") -> str:
    """Generate zsh completion script for hogli."""
    manifest = get_manifest()
    commands = manifest.get_all_commands()

    # Build completion lines: "command\:name:description"
    # Escape colons in command names so zsh doesn't treat them as separators
    completion_lines = []
    for cmd in sorted(commands):
        # Get command config from manifest
        cmd_config = manifest.get_command_config(cmd)
        if not cmd_config:
            desc = ""
        else:
            desc = cmd_config.get("description", "")
            # Escape special characters for zsh
            desc = desc.replace("[", "\\[").replace("]", "\\]")
            desc = desc.replace("'", "\\'")

        # Escape colons in command name for zsh completion format
        escaped_cmd = cmd.replace(":", "\\:")
        completion_lines.append(f"'{escaped_cmd}:{desc}'")

    completions_str = "\n    ".join(completion_lines)

    return f"""#compdef hogli

# zsh completion for {cli_name}
# Generated from hogli manifest

_hogli() {{
  local -a commands

  commands=(
    {completions_str}
  )

  _describe 'hogli commands' commands
}}

_hogli
"""


def install_completion(shell: str = "bash") -> None:
    """Install shell completion for the specified shell."""
    if shell == "bash":
        completion_script = generate_bash_completion()
        click.echo(completion_script)
    elif shell == "zsh":
        completion_script = generate_zsh_completion()
        click.echo(completion_script)
    else:
        raise ValueError(f"Unsupported shell: {shell}")


if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser(description="Generate shell completion for hogli")
    parser.add_argument("--shell", choices=["bash", "zsh"], default="bash", help="Shell to generate completion for")
    args = parser.parse_args()

    install_completion(args.shell)
