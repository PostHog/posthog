
// Generated from HogQLParser.g4 by ANTLR 4.13.2


#include "HogQLParserVisitor.h"

#include "HogQLParser.h"


using namespace antlrcpp;

using namespace antlr4;

namespace {

struct HogQLParserStaticData final {
  HogQLParserStaticData(std::vector<std::string> ruleNames,
                        std::vector<std::string> literalNames,
                        std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  HogQLParserStaticData(const HogQLParserStaticData&) = delete;
  HogQLParserStaticData(HogQLParserStaticData&&) = delete;
  HogQLParserStaticData& operator=(const HogQLParserStaticData&) = delete;
  HogQLParserStaticData& operator=(HogQLParserStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag hogqlparserParserOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
std::unique_ptr<HogQLParserStaticData> hogqlparserParserStaticData = nullptr;

void hogqlparserParserInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (hogqlparserParserStaticData != nullptr) {
    return;
  }
#else
  assert(hogqlparserParserStaticData == nullptr);
#endif
  auto staticData = std::make_unique<HogQLParserStaticData>(
    std::vector<std::string>{
      "program", "declaration", "expression", "varDecl", "identifierList", 
      "statement", "returnStmt", "throwStmt", "catchBlock", "tryCatchStmt", 
      "ifStmt", "whileStmt", "forStmt", "forInStmt", "funcStmt", "varAssignment", 
      "exprStmt", "emptyStmt", "block", "kvPair", "kvPairList", "select", 
      "selectStmtWithParens", "subsequentSelectSetClause", "selectSetStmt", 
      "selectStmt", "withClause", "topClause", "fromClause", "arrayJoinClause", 
      "windowClause", "prewhereClause", "whereClause", "groupByClause", 
      "havingClause", "orderByClause", "projectionOrderByClause", "limitByClause", 
      "limitAndOffsetClause", "offsetOnlyClause", "settingsClause", "joinExpr", 
      "joinOp", "joinOpCross", "joinConstraintClause", "sampleClause", "limitExpr", 
      "orderExprList", "orderExpr", "ratioExpr", "settingExprList", "settingExpr", 
      "windowExpr", "winPartitionByClause", "winOrderByClause", "winFrameClause", 
      "winFrameExtend", "winFrameBound", "expr", "columnTypeExpr", "columnExprList", 
      "columnExpr", "columnLambdaExpr", "hogqlxChildElement", "hogqlxTagElement", 
      "hogqlxTagAttribute", "withExprList", "withExpr", "columnIdentifier", 
      "nestedIdentifier", "tableExpr", "tableFunctionExpr", "tableIdentifier", 
      "tableArgList", "databaseIdentifier", "floatingLiteral", "numberLiteral", 
      "literal", "interval", "keyword", "keywordForAlias", "alias", "identifier", 
      "enumValue", "placeholder", "string", "templateString", "stringContents", 
      "fullTemplateString", "stringContentsFull"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "'->'", "'*'", "'`'", 
      "'\\'", "':'", "','", "'||'", "'-'", "'$'", "'.'", "'=='", "'='", 
      "'>='", "'>'", "'#'", "'~*'", "'=~*'", "'{'", "'['", "'('", "'<='", 
      "'<'", "", "'!~*'", "'!~'", "'\\u003F.'", "'\\u003F\\u003F'", "'%'", 
      "'+'", "'\\u003F'", "'\"'", "'f''", "'F''", "'''", "'~'", "'=~'", 
      "'}'", "']'", "')'", "';'", "'/'", "'_'"
    },
    std::vector<std::string>{
      "", "ALL", "AND", "ANTI", "ANY", "ARRAY", "AS", "ASCENDING", "ASOF", 
      "BETWEEN", "BOTH", "BY", "CASE", "CAST", "CATCH", "COHORT", "COLLATE", 
      "CROSS", "CUBE", "CURRENT", "DATE", "DAY", "DESC", "DESCENDING", "DISTINCT", 
      "ELSE", "END", "EXCEPT", "EXTRACT", "FINAL", "FINALLY", "FIRST", "FN", 
      "FOLLOWING", "FOR", "FROM", "FULL", "FUN", "GROUP", "HAVING", "HOUR", 
      "ID", "IF", "ILIKE", "IN", "INF", "INNER", "INTERSECT", "INTERVAL", 
      "IS", "JOIN", "KEY", "LAST", "LEADING", "LEFT", "LET", "LIKE", "LIMIT", 
      "MINUTE", "MONTH", "NAN_SQL", "NOT", "NULL_SQL", "NULLS", "OFFSET", 
      "ON", "OR", "ORDER", "OUTER", "OVER", "PARTITION", "PRECEDING", "PREWHERE", 
      "QUARTER", "RANGE", "RETURN", "RIGHT", "ROLLUP", "ROW", "ROWS", "SAMPLE", 
      "SECOND", "SELECT", "SEMI", "SETTINGS", "SUBSTRING", "THEN", "THROW", 
      "TIES", "TIMESTAMP", "TO", "TOP", "TOTALS", "TRAILING", "TRIM", "TRUNCATE", 
      "TRY", "UNBOUNDED", "UNION", "USING", "WEEK", "WHEN", "WHERE", "WHILE", 
      "WINDOW", "WITH", "YEAR", "ESCAPE_CHAR_COMMON", "IDENTIFIER", "FLOATING_LITERAL", 
      "OCTAL_LITERAL", "DECIMAL_LITERAL", "HEXADECIMAL_LITERAL", "STRING_LITERAL", 
      "ARROW", "ASTERISK", "BACKQUOTE", "BACKSLASH", "COLON", "COMMA", "CONCAT", 
      "DASH", "DOLLAR", "DOT", "EQ_DOUBLE", "EQ_SINGLE", "GT_EQ", "GT", 
      "HASH", "IREGEX_SINGLE", "IREGEX_DOUBLE", "LBRACE", "LBRACKET", "LPAREN", 
      "LT_EQ", "LT", "NOT_EQ", "NOT_IREGEX", "NOT_REGEX", "NULL_PROPERTY", 
      "NULLISH", "PERCENT", "PLUS", "QUERY", "QUOTE_DOUBLE", "QUOTE_SINGLE_TEMPLATE", 
      "QUOTE_SINGLE_TEMPLATE_FULL", "QUOTE_SINGLE", "REGEX_SINGLE", "REGEX_DOUBLE", 
      "RBRACE", "RBRACKET", "RPAREN", "SEMICOLON", "SLASH", "UNDERSCORE", 
      "MULTI_LINE_COMMENT", "SINGLE_LINE_COMMENT", "WHITESPACE", "STRING_TEXT", 
      "STRING_ESCAPE_TRIGGER", "FULL_STRING_TEXT", "FULL_STRING_ESCAPE_TRIGGER"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,1,162,1337,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
  	2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,
  	7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,
  	7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,1,0,5,0,182,8,
  	0,10,0,12,0,185,9,0,1,0,1,0,1,1,1,1,3,1,191,8,1,1,2,1,2,1,3,1,3,1,3,1,
  	3,1,3,3,3,200,8,3,1,4,1,4,1,4,5,4,205,8,4,10,4,12,4,208,9,4,1,4,3,4,211,
  	8,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,225,8,5,1,6,1,
  	6,3,6,229,8,6,1,6,3,6,232,8,6,1,7,1,7,3,7,236,8,7,1,7,3,7,239,8,7,1,8,
  	1,8,1,8,1,8,1,8,3,8,246,8,8,1,8,1,8,3,8,250,8,8,1,8,1,8,1,9,1,9,1,9,5,
  	9,257,8,9,10,9,12,9,260,9,9,1,9,1,9,3,9,264,8,9,1,10,1,10,1,10,1,10,1,
  	10,1,10,1,10,3,10,273,8,10,1,11,1,11,1,11,1,11,1,11,1,11,3,11,281,8,11,
  	1,12,1,12,1,12,1,12,1,12,3,12,288,8,12,1,12,1,12,3,12,292,8,12,1,12,1,
  	12,1,12,1,12,3,12,298,8,12,1,12,1,12,1,12,3,12,303,8,12,1,13,1,13,1,13,
  	1,13,1,13,1,13,3,13,311,8,13,1,13,1,13,1,13,1,13,1,13,3,13,318,8,13,1,
  	14,1,14,1,14,1,14,3,14,324,8,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,
  	15,1,16,1,16,3,16,336,8,16,1,17,1,17,1,18,1,18,5,18,342,8,18,10,18,12,
  	18,345,9,18,1,18,1,18,1,19,1,19,1,19,1,19,1,20,1,20,1,20,5,20,356,8,20,
  	10,20,12,20,359,9,20,1,20,3,20,362,8,20,1,21,1,21,1,21,3,21,367,8,21,
  	1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,3,22,377,8,22,1,23,1,23,1,23,
  	1,23,1,23,1,23,1,23,1,23,3,23,387,8,23,1,23,1,23,1,24,1,24,5,24,393,8,
  	24,10,24,12,24,396,9,24,1,25,3,25,399,8,25,1,25,1,25,3,25,403,8,25,1,
  	25,3,25,406,8,25,1,25,1,25,3,25,410,8,25,1,25,3,25,413,8,25,1,25,3,25,
  	416,8,25,1,25,3,25,419,8,25,1,25,3,25,422,8,25,1,25,1,25,3,25,426,8,25,
  	1,25,1,25,3,25,430,8,25,1,25,3,25,433,8,25,1,25,3,25,436,8,25,1,25,3,
  	25,439,8,25,1,25,3,25,442,8,25,1,25,1,25,3,25,446,8,25,1,25,3,25,449,
  	8,25,1,26,1,26,1,26,1,27,1,27,1,27,1,27,3,27,458,8,27,1,28,1,28,1,28,
  	1,29,3,29,464,8,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,30,
  	1,30,1,30,1,30,1,30,1,30,1,30,1,30,5,30,483,8,30,10,30,12,30,486,9,30,
  	1,31,1,31,1,31,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,
  	3,33,502,8,33,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,36,1,36,1,36,1,36,
  	1,37,1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,3,38,524,8,38,1,38,1,38,
  	3,38,528,8,38,1,38,1,38,1,38,1,38,3,38,534,8,38,1,38,1,38,1,38,3,38,539,
  	8,38,1,39,1,39,1,39,1,40,1,40,1,40,1,41,1,41,1,41,3,41,550,8,41,1,41,
  	3,41,553,8,41,1,41,1,41,1,41,1,41,3,41,559,8,41,1,41,1,41,1,41,1,41,1,
  	41,1,41,3,41,567,8,41,1,41,1,41,1,41,1,41,5,41,573,8,41,10,41,12,41,576,
  	9,41,1,42,3,42,579,8,42,1,42,1,42,1,42,3,42,584,8,42,1,42,3,42,587,8,
  	42,1,42,3,42,590,8,42,1,42,1,42,3,42,594,8,42,1,42,1,42,3,42,598,8,42,
  	1,42,3,42,601,8,42,3,42,603,8,42,1,42,3,42,606,8,42,1,42,1,42,3,42,610,
  	8,42,1,42,1,42,3,42,614,8,42,1,42,3,42,617,8,42,3,42,619,8,42,3,42,621,
  	8,42,1,43,1,43,1,43,3,43,626,8,43,1,44,1,44,1,44,1,44,1,44,1,44,1,44,
  	1,44,1,44,3,44,637,8,44,1,45,1,45,1,45,1,45,3,45,643,8,45,1,46,1,46,1,
  	46,3,46,648,8,46,1,47,1,47,1,47,5,47,653,8,47,10,47,12,47,656,9,47,1,
  	48,1,48,3,48,660,8,48,1,48,1,48,3,48,664,8,48,1,48,1,48,3,48,668,8,48,
  	1,49,1,49,1,49,1,49,3,49,674,8,49,3,49,676,8,49,1,50,1,50,1,50,5,50,681,
  	8,50,10,50,12,50,684,9,50,1,51,1,51,1,51,1,51,1,52,3,52,691,8,52,1,52,
  	3,52,694,8,52,1,52,3,52,697,8,52,1,53,1,53,1,53,1,53,1,54,1,54,1,54,1,
  	54,1,55,1,55,1,55,1,56,1,56,1,56,1,56,1,56,1,56,3,56,716,8,56,1,57,1,
  	57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,3,57,730,8,57,1,
  	58,1,58,1,58,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,5,59,744,8,
  	59,10,59,12,59,747,9,59,1,59,3,59,750,8,59,1,59,1,59,1,59,1,59,1,59,1,
  	59,1,59,5,59,759,8,59,10,59,12,59,762,9,59,1,59,3,59,765,8,59,1,59,1,
  	59,1,59,1,59,1,59,1,59,1,59,5,59,774,8,59,10,59,12,59,777,9,59,1,59,3,
  	59,780,8,59,1,59,1,59,1,59,1,59,1,59,3,59,787,8,59,1,59,1,59,3,59,791,
  	8,59,1,60,1,60,1,60,5,60,796,8,60,10,60,12,60,799,9,60,1,60,3,60,802,
  	8,60,1,61,1,61,1,61,3,61,807,8,61,1,61,1,61,1,61,1,61,1,61,4,61,814,8,
  	61,11,61,12,61,815,1,61,1,61,3,61,820,8,61,1,61,1,61,1,61,1,61,1,61,1,
  	61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,
  	61,1,61,1,61,1,61,1,61,3,61,846,8,61,1,61,1,61,1,61,1,61,1,61,1,61,1,
  	61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,3,61,863,8,61,1,61,1,61,1,
  	61,1,61,3,61,869,8,61,1,61,3,61,872,8,61,1,61,3,61,875,8,61,1,61,1,61,
  	1,61,1,61,1,61,1,61,1,61,1,61,3,61,885,8,61,1,61,1,61,1,61,1,61,3,61,
  	891,8,61,1,61,3,61,894,8,61,1,61,3,61,897,8,61,1,61,1,61,1,61,1,61,1,
  	61,1,61,3,61,905,8,61,1,61,3,61,908,8,61,1,61,1,61,3,61,912,8,61,1,61,
  	3,61,915,8,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,
  	1,61,3,61,929,8,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,
  	1,61,1,61,1,61,1,61,1,61,3,61,946,8,61,1,61,1,61,1,61,3,61,951,8,61,1,
  	61,1,61,1,61,3,61,956,8,61,1,61,1,61,1,61,1,61,3,61,962,8,61,1,61,1,61,
  	1,61,1,61,1,61,3,61,969,8,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,
  	1,61,1,61,3,61,981,8,61,1,61,1,61,3,61,985,8,61,1,61,3,61,988,8,61,1,
  	61,1,61,1,61,1,61,1,61,1,61,1,61,3,61,997,8,61,1,61,1,61,1,61,1,61,1,
  	61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,3,61,1011,8,61,1,61,1,61,1,61,1,
  	61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,
  	61,1,61,3,61,1032,8,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,
  	61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,
  	61,1,61,1,61,1,61,3,61,1061,8,61,1,61,1,61,1,61,1,61,1,61,1,61,3,61,1069,
  	8,61,5,61,1071,8,61,10,61,12,61,1074,9,61,1,62,1,62,1,62,1,62,5,62,1080,
  	8,62,10,62,12,62,1083,9,62,1,62,3,62,1086,8,62,1,62,1,62,1,62,1,62,1,
  	62,5,62,1093,8,62,10,62,12,62,1096,9,62,1,62,3,62,1099,8,62,1,62,1,62,
  	3,62,1103,8,62,1,62,1,62,1,62,3,62,1108,8,62,1,63,1,63,1,63,1,63,1,63,
  	3,63,1115,8,63,1,64,1,64,1,64,5,64,1120,8,64,10,64,12,64,1123,9,64,1,
  	64,1,64,1,64,1,64,1,64,1,64,5,64,1131,8,64,10,64,12,64,1134,9,64,1,64,
  	1,64,5,64,1138,8,64,10,64,12,64,1141,9,64,1,64,1,64,1,64,1,64,1,64,3,
  	64,1148,8,64,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,3,
  	65,1161,8,65,1,66,1,66,1,66,5,66,1166,8,66,10,66,12,66,1169,9,66,1,66,
  	3,66,1172,8,66,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,3,67,
  	1184,8,67,1,68,1,68,1,68,1,68,3,68,1190,8,68,1,68,3,68,1193,8,68,1,69,
  	1,69,1,69,5,69,1198,8,69,10,69,12,69,1201,9,69,1,70,1,70,1,70,1,70,1,
  	70,1,70,1,70,1,70,1,70,3,70,1212,8,70,1,70,1,70,1,70,1,70,3,70,1218,8,
  	70,5,70,1220,8,70,10,70,12,70,1223,9,70,1,71,1,71,1,71,3,71,1228,8,71,
  	1,71,1,71,1,72,1,72,1,72,3,72,1235,8,72,1,72,1,72,1,73,1,73,1,73,5,73,
  	1242,8,73,10,73,12,73,1245,9,73,1,73,3,73,1248,8,73,1,74,1,74,1,75,1,
  	75,1,75,1,75,1,75,1,75,3,75,1258,8,75,3,75,1260,8,75,1,76,3,76,1263,8,
  	76,1,76,1,76,1,76,1,76,1,76,1,76,3,76,1271,8,76,1,77,1,77,1,77,3,77,1276,
  	8,77,1,78,1,78,1,79,1,79,1,80,1,80,1,81,1,81,3,81,1286,8,81,1,82,1,82,
  	1,82,3,82,1291,8,82,1,83,1,83,1,83,1,83,1,84,1,84,1,84,1,84,1,85,1,85,
  	3,85,1303,8,85,1,86,1,86,5,86,1307,8,86,10,86,12,86,1310,9,86,1,86,1,
  	86,1,87,1,87,1,87,1,87,1,87,3,87,1319,8,87,1,88,1,88,5,88,1323,8,88,10,
  	88,12,88,1326,9,88,1,88,1,88,1,89,1,89,1,89,1,89,1,89,3,89,1335,8,89,
  	1,89,0,3,82,122,140,90,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,
  	34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,
  	80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,
  	120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,
  	156,158,160,162,164,166,168,170,172,174,176,178,0,18,2,0,32,32,37,37,
  	2,0,18,18,77,77,2,0,46,46,54,54,3,0,1,1,4,4,8,8,4,0,1,1,3,4,8,8,83,83,
  	2,0,54,54,76,76,2,0,1,1,4,4,2,0,64,64,119,119,2,0,7,7,22,23,2,0,31,31,
  	52,52,2,0,74,74,79,79,3,0,10,10,53,53,93,93,2,0,43,43,56,56,1,0,110,111,
  	2,0,121,121,142,142,7,0,21,21,40,40,58,59,73,73,81,81,100,100,106,106,
  	19,0,1,13,15,20,22,26,28,29,31,31,33,36,38,39,41,44,46,46,48,54,56,57,
  	61,61,63,72,74,80,82,86,88,95,97,99,101,102,104,105,4,0,20,20,31,31,41,
  	41,51,51,1510,0,183,1,0,0,0,2,190,1,0,0,0,4,192,1,0,0,0,6,194,1,0,0,0,
  	8,201,1,0,0,0,10,224,1,0,0,0,12,226,1,0,0,0,14,233,1,0,0,0,16,240,1,0,
  	0,0,18,253,1,0,0,0,20,265,1,0,0,0,22,274,1,0,0,0,24,282,1,0,0,0,26,304,
  	1,0,0,0,28,319,1,0,0,0,30,328,1,0,0,0,32,333,1,0,0,0,34,337,1,0,0,0,36,
  	339,1,0,0,0,38,348,1,0,0,0,40,352,1,0,0,0,42,366,1,0,0,0,44,376,1,0,0,
  	0,46,386,1,0,0,0,48,390,1,0,0,0,50,398,1,0,0,0,52,450,1,0,0,0,54,453,
  	1,0,0,0,56,459,1,0,0,0,58,463,1,0,0,0,60,469,1,0,0,0,62,487,1,0,0,0,64,
  	490,1,0,0,0,66,493,1,0,0,0,68,503,1,0,0,0,70,506,1,0,0,0,72,510,1,0,0,
  	0,74,514,1,0,0,0,76,538,1,0,0,0,78,540,1,0,0,0,80,543,1,0,0,0,82,558,
  	1,0,0,0,84,620,1,0,0,0,86,625,1,0,0,0,88,636,1,0,0,0,90,638,1,0,0,0,92,
  	644,1,0,0,0,94,649,1,0,0,0,96,657,1,0,0,0,98,675,1,0,0,0,100,677,1,0,
  	0,0,102,685,1,0,0,0,104,690,1,0,0,0,106,698,1,0,0,0,108,702,1,0,0,0,110,
  	706,1,0,0,0,112,715,1,0,0,0,114,729,1,0,0,0,116,731,1,0,0,0,118,790,1,
  	0,0,0,120,792,1,0,0,0,122,955,1,0,0,0,124,1102,1,0,0,0,126,1114,1,0,0,
  	0,128,1147,1,0,0,0,130,1160,1,0,0,0,132,1162,1,0,0,0,134,1183,1,0,0,0,
  	136,1192,1,0,0,0,138,1194,1,0,0,0,140,1211,1,0,0,0,142,1224,1,0,0,0,144,
  	1234,1,0,0,0,146,1238,1,0,0,0,148,1249,1,0,0,0,150,1259,1,0,0,0,152,1262,
  	1,0,0,0,154,1275,1,0,0,0,156,1277,1,0,0,0,158,1279,1,0,0,0,160,1281,1,
  	0,0,0,162,1285,1,0,0,0,164,1290,1,0,0,0,166,1292,1,0,0,0,168,1296,1,0,
  	0,0,170,1302,1,0,0,0,172,1304,1,0,0,0,174,1318,1,0,0,0,176,1320,1,0,0,
  	0,178,1334,1,0,0,0,180,182,3,2,1,0,181,180,1,0,0,0,182,185,1,0,0,0,183,
  	181,1,0,0,0,183,184,1,0,0,0,184,186,1,0,0,0,185,183,1,0,0,0,186,187,5,
  	0,0,1,187,1,1,0,0,0,188,191,3,6,3,0,189,191,3,10,5,0,190,188,1,0,0,0,
  	190,189,1,0,0,0,191,3,1,0,0,0,192,193,3,122,61,0,193,5,1,0,0,0,194,195,
  	5,55,0,0,195,199,3,164,82,0,196,197,5,118,0,0,197,198,5,125,0,0,198,200,
  	3,4,2,0,199,196,1,0,0,0,199,200,1,0,0,0,200,7,1,0,0,0,201,206,3,164,82,
  	0,202,203,5,119,0,0,203,205,3,164,82,0,204,202,1,0,0,0,205,208,1,0,0,
  	0,206,204,1,0,0,0,206,207,1,0,0,0,207,210,1,0,0,0,208,206,1,0,0,0,209,
  	211,5,119,0,0,210,209,1,0,0,0,210,211,1,0,0,0,211,9,1,0,0,0,212,225,3,
  	12,6,0,213,225,3,14,7,0,214,225,3,18,9,0,215,225,3,20,10,0,216,225,3,
  	22,11,0,217,225,3,26,13,0,218,225,3,24,12,0,219,225,3,28,14,0,220,225,
  	3,30,15,0,221,225,3,36,18,0,222,225,3,32,16,0,223,225,3,34,17,0,224,212,
  	1,0,0,0,224,213,1,0,0,0,224,214,1,0,0,0,224,215,1,0,0,0,224,216,1,0,0,
  	0,224,217,1,0,0,0,224,218,1,0,0,0,224,219,1,0,0,0,224,220,1,0,0,0,224,
  	221,1,0,0,0,224,222,1,0,0,0,224,223,1,0,0,0,225,11,1,0,0,0,226,228,5,
  	75,0,0,227,229,3,4,2,0,228,227,1,0,0,0,228,229,1,0,0,0,229,231,1,0,0,
  	0,230,232,5,153,0,0,231,230,1,0,0,0,231,232,1,0,0,0,232,13,1,0,0,0,233,
  	235,5,87,0,0,234,236,3,4,2,0,235,234,1,0,0,0,235,236,1,0,0,0,236,238,
  	1,0,0,0,237,239,5,153,0,0,238,237,1,0,0,0,238,239,1,0,0,0,239,15,1,0,
  	0,0,240,249,5,14,0,0,241,242,5,133,0,0,242,245,3,164,82,0,243,244,5,118,
  	0,0,244,246,3,164,82,0,245,243,1,0,0,0,245,246,1,0,0,0,246,247,1,0,0,
  	0,247,248,5,152,0,0,248,250,1,0,0,0,249,241,1,0,0,0,249,250,1,0,0,0,250,
  	251,1,0,0,0,251,252,3,36,18,0,252,17,1,0,0,0,253,254,5,96,0,0,254,258,
  	3,36,18,0,255,257,3,16,8,0,256,255,1,0,0,0,257,260,1,0,0,0,258,256,1,
  	0,0,0,258,259,1,0,0,0,259,263,1,0,0,0,260,258,1,0,0,0,261,262,5,30,0,
  	0,262,264,3,36,18,0,263,261,1,0,0,0,263,264,1,0,0,0,264,19,1,0,0,0,265,
  	266,5,42,0,0,266,267,5,133,0,0,267,268,3,4,2,0,268,269,5,152,0,0,269,
  	272,3,10,5,0,270,271,5,25,0,0,271,273,3,10,5,0,272,270,1,0,0,0,272,273,
  	1,0,0,0,273,21,1,0,0,0,274,275,5,103,0,0,275,276,5,133,0,0,276,277,3,
  	4,2,0,277,278,5,152,0,0,278,280,3,10,5,0,279,281,5,153,0,0,280,279,1,
  	0,0,0,280,281,1,0,0,0,281,23,1,0,0,0,282,283,5,34,0,0,283,287,5,133,0,
  	0,284,288,3,6,3,0,285,288,3,30,15,0,286,288,3,4,2,0,287,284,1,0,0,0,287,
  	285,1,0,0,0,287,286,1,0,0,0,287,288,1,0,0,0,288,289,1,0,0,0,289,291,5,
  	153,0,0,290,292,3,4,2,0,291,290,1,0,0,0,291,292,1,0,0,0,292,293,1,0,0,
  	0,293,297,5,153,0,0,294,298,3,6,3,0,295,298,3,30,15,0,296,298,3,4,2,0,
  	297,294,1,0,0,0,297,295,1,0,0,0,297,296,1,0,0,0,297,298,1,0,0,0,298,299,
  	1,0,0,0,299,300,5,152,0,0,300,302,3,10,5,0,301,303,5,153,0,0,302,301,
  	1,0,0,0,302,303,1,0,0,0,303,25,1,0,0,0,304,305,5,34,0,0,305,306,5,133,
  	0,0,306,307,5,55,0,0,307,310,3,164,82,0,308,309,5,119,0,0,309,311,3,164,
  	82,0,310,308,1,0,0,0,310,311,1,0,0,0,311,312,1,0,0,0,312,313,5,44,0,0,
  	313,314,3,4,2,0,314,315,5,152,0,0,315,317,3,10,5,0,316,318,5,153,0,0,
  	317,316,1,0,0,0,317,318,1,0,0,0,318,27,1,0,0,0,319,320,7,0,0,0,320,321,
  	3,164,82,0,321,323,5,133,0,0,322,324,3,8,4,0,323,322,1,0,0,0,323,324,
  	1,0,0,0,324,325,1,0,0,0,325,326,5,152,0,0,326,327,3,36,18,0,327,29,1,
  	0,0,0,328,329,3,4,2,0,329,330,5,118,0,0,330,331,5,125,0,0,331,332,3,4,
  	2,0,332,31,1,0,0,0,333,335,3,4,2,0,334,336,5,153,0,0,335,334,1,0,0,0,
  	335,336,1,0,0,0,336,33,1,0,0,0,337,338,5,153,0,0,338,35,1,0,0,0,339,343,
  	5,131,0,0,340,342,3,2,1,0,341,340,1,0,0,0,342,345,1,0,0,0,343,341,1,0,
  	0,0,343,344,1,0,0,0,344,346,1,0,0,0,345,343,1,0,0,0,346,347,5,150,0,0,
  	347,37,1,0,0,0,348,349,3,4,2,0,349,350,5,118,0,0,350,351,3,4,2,0,351,
  	39,1,0,0,0,352,357,3,38,19,0,353,354,5,119,0,0,354,356,3,38,19,0,355,
  	353,1,0,0,0,356,359,1,0,0,0,357,355,1,0,0,0,357,358,1,0,0,0,358,361,1,
  	0,0,0,359,357,1,0,0,0,360,362,5,119,0,0,361,360,1,0,0,0,361,362,1,0,0,
  	0,362,41,1,0,0,0,363,367,3,48,24,0,364,367,3,50,25,0,365,367,3,128,64,
  	0,366,363,1,0,0,0,366,364,1,0,0,0,366,365,1,0,0,0,367,368,1,0,0,0,368,
  	369,5,0,0,1,369,43,1,0,0,0,370,377,3,50,25,0,371,372,5,133,0,0,372,373,
  	3,48,24,0,373,374,5,152,0,0,374,377,1,0,0,0,375,377,3,168,84,0,376,370,
  	1,0,0,0,376,371,1,0,0,0,376,375,1,0,0,0,377,45,1,0,0,0,378,387,5,27,0,
  	0,379,380,5,98,0,0,380,387,5,1,0,0,381,382,5,98,0,0,382,387,5,24,0,0,
  	383,387,5,47,0,0,384,385,5,47,0,0,385,387,5,24,0,0,386,378,1,0,0,0,386,
  	379,1,0,0,0,386,381,1,0,0,0,386,383,1,0,0,0,386,384,1,0,0,0,387,388,1,
  	0,0,0,388,389,3,44,22,0,389,47,1,0,0,0,390,394,3,44,22,0,391,393,3,46,
  	23,0,392,391,1,0,0,0,393,396,1,0,0,0,394,392,1,0,0,0,394,395,1,0,0,0,
  	395,49,1,0,0,0,396,394,1,0,0,0,397,399,3,52,26,0,398,397,1,0,0,0,398,
  	399,1,0,0,0,399,400,1,0,0,0,400,402,5,82,0,0,401,403,5,24,0,0,402,401,
  	1,0,0,0,402,403,1,0,0,0,403,405,1,0,0,0,404,406,3,54,27,0,405,404,1,0,
  	0,0,405,406,1,0,0,0,406,407,1,0,0,0,407,409,3,120,60,0,408,410,3,56,28,
  	0,409,408,1,0,0,0,409,410,1,0,0,0,410,412,1,0,0,0,411,413,3,58,29,0,412,
  	411,1,0,0,0,412,413,1,0,0,0,413,415,1,0,0,0,414,416,3,62,31,0,415,414,
  	1,0,0,0,415,416,1,0,0,0,416,418,1,0,0,0,417,419,3,64,32,0,418,417,1,0,
  	0,0,418,419,1,0,0,0,419,421,1,0,0,0,420,422,3,66,33,0,421,420,1,0,0,0,
  	421,422,1,0,0,0,422,425,1,0,0,0,423,424,5,105,0,0,424,426,7,1,0,0,425,
  	423,1,0,0,0,425,426,1,0,0,0,426,429,1,0,0,0,427,428,5,105,0,0,428,430,
  	5,92,0,0,429,427,1,0,0,0,429,430,1,0,0,0,430,432,1,0,0,0,431,433,3,68,
  	34,0,432,431,1,0,0,0,432,433,1,0,0,0,433,435,1,0,0,0,434,436,3,60,30,
  	0,435,434,1,0,0,0,435,436,1,0,0,0,436,438,1,0,0,0,437,439,3,70,35,0,438,
  	437,1,0,0,0,438,439,1,0,0,0,439,441,1,0,0,0,440,442,3,74,37,0,441,440,
  	1,0,0,0,441,442,1,0,0,0,442,445,1,0,0,0,443,446,3,76,38,0,444,446,3,78,
  	39,0,445,443,1,0,0,0,445,444,1,0,0,0,445,446,1,0,0,0,446,448,1,0,0,0,
  	447,449,3,80,40,0,448,447,1,0,0,0,448,449,1,0,0,0,449,51,1,0,0,0,450,
  	451,5,105,0,0,451,452,3,132,66,0,452,53,1,0,0,0,453,454,5,91,0,0,454,
  	457,5,111,0,0,455,456,5,105,0,0,456,458,5,88,0,0,457,455,1,0,0,0,457,
  	458,1,0,0,0,458,55,1,0,0,0,459,460,5,35,0,0,460,461,3,82,41,0,461,57,
  	1,0,0,0,462,464,7,2,0,0,463,462,1,0,0,0,463,464,1,0,0,0,464,465,1,0,0,
  	0,465,466,5,5,0,0,466,467,5,50,0,0,467,468,3,120,60,0,468,59,1,0,0,0,
  	469,470,5,104,0,0,470,471,3,164,82,0,471,472,5,6,0,0,472,473,5,133,0,
  	0,473,474,3,104,52,0,474,484,5,152,0,0,475,476,5,119,0,0,476,477,3,164,
  	82,0,477,478,5,6,0,0,478,479,5,133,0,0,479,480,3,104,52,0,480,481,5,152,
  	0,0,481,483,1,0,0,0,482,475,1,0,0,0,483,486,1,0,0,0,484,482,1,0,0,0,484,
  	485,1,0,0,0,485,61,1,0,0,0,486,484,1,0,0,0,487,488,5,72,0,0,488,489,3,
  	122,61,0,489,63,1,0,0,0,490,491,5,102,0,0,491,492,3,122,61,0,492,65,1,
  	0,0,0,493,494,5,38,0,0,494,501,5,11,0,0,495,496,7,1,0,0,496,497,5,133,
  	0,0,497,498,3,120,60,0,498,499,5,152,0,0,499,502,1,0,0,0,500,502,3,120,
  	60,0,501,495,1,0,0,0,501,500,1,0,0,0,502,67,1,0,0,0,503,504,5,39,0,0,
  	504,505,3,122,61,0,505,69,1,0,0,0,506,507,5,67,0,0,507,508,5,11,0,0,508,
  	509,3,94,47,0,509,71,1,0,0,0,510,511,5,67,0,0,511,512,5,11,0,0,512,513,
  	3,120,60,0,513,73,1,0,0,0,514,515,5,57,0,0,515,516,3,92,46,0,516,517,
  	5,11,0,0,517,518,3,120,60,0,518,75,1,0,0,0,519,520,5,57,0,0,520,523,3,
  	122,61,0,521,522,5,119,0,0,522,524,3,122,61,0,523,521,1,0,0,0,523,524,
  	1,0,0,0,524,527,1,0,0,0,525,526,5,105,0,0,526,528,5,88,0,0,527,525,1,
  	0,0,0,527,528,1,0,0,0,528,539,1,0,0,0,529,530,5,57,0,0,530,533,3,122,
  	61,0,531,532,5,105,0,0,532,534,5,88,0,0,533,531,1,0,0,0,533,534,1,0,0,
  	0,534,535,1,0,0,0,535,536,5,64,0,0,536,537,3,122,61,0,537,539,1,0,0,0,
  	538,519,1,0,0,0,538,529,1,0,0,0,539,77,1,0,0,0,540,541,5,64,0,0,541,542,
  	3,122,61,0,542,79,1,0,0,0,543,544,5,84,0,0,544,545,3,100,50,0,545,81,
  	1,0,0,0,546,547,6,41,-1,0,547,549,3,140,70,0,548,550,5,29,0,0,549,548,
  	1,0,0,0,549,550,1,0,0,0,550,552,1,0,0,0,551,553,3,90,45,0,552,551,1,0,
  	0,0,552,553,1,0,0,0,553,559,1,0,0,0,554,555,5,133,0,0,555,556,3,82,41,
  	0,556,557,5,152,0,0,557,559,1,0,0,0,558,546,1,0,0,0,558,554,1,0,0,0,559,
  	574,1,0,0,0,560,561,10,3,0,0,561,562,3,86,43,0,562,563,3,82,41,4,563,
  	573,1,0,0,0,564,566,10,4,0,0,565,567,3,84,42,0,566,565,1,0,0,0,566,567,
  	1,0,0,0,567,568,1,0,0,0,568,569,5,50,0,0,569,570,3,82,41,0,570,571,3,
  	88,44,0,571,573,1,0,0,0,572,560,1,0,0,0,572,564,1,0,0,0,573,576,1,0,0,
  	0,574,572,1,0,0,0,574,575,1,0,0,0,575,83,1,0,0,0,576,574,1,0,0,0,577,
  	579,7,3,0,0,578,577,1,0,0,0,578,579,1,0,0,0,579,580,1,0,0,0,580,587,5,
  	46,0,0,581,583,5,46,0,0,582,584,7,3,0,0,583,582,1,0,0,0,583,584,1,0,0,
  	0,584,587,1,0,0,0,585,587,7,3,0,0,586,578,1,0,0,0,586,581,1,0,0,0,586,
  	585,1,0,0,0,587,621,1,0,0,0,588,590,7,4,0,0,589,588,1,0,0,0,589,590,1,
  	0,0,0,590,591,1,0,0,0,591,593,7,5,0,0,592,594,5,68,0,0,593,592,1,0,0,
  	0,593,594,1,0,0,0,594,603,1,0,0,0,595,597,7,5,0,0,596,598,5,68,0,0,597,
  	596,1,0,0,0,597,598,1,0,0,0,598,600,1,0,0,0,599,601,7,4,0,0,600,599,1,
  	0,0,0,600,601,1,0,0,0,601,603,1,0,0,0,602,589,1,0,0,0,602,595,1,0,0,0,
  	603,621,1,0,0,0,604,606,7,6,0,0,605,604,1,0,0,0,605,606,1,0,0,0,606,607,
  	1,0,0,0,607,609,5,36,0,0,608,610,5,68,0,0,609,608,1,0,0,0,609,610,1,0,
  	0,0,610,619,1,0,0,0,611,613,5,36,0,0,612,614,5,68,0,0,613,612,1,0,0,0,
  	613,614,1,0,0,0,614,616,1,0,0,0,615,617,7,6,0,0,616,615,1,0,0,0,616,617,
  	1,0,0,0,617,619,1,0,0,0,618,605,1,0,0,0,618,611,1,0,0,0,619,621,1,0,0,
  	0,620,586,1,0,0,0,620,602,1,0,0,0,620,618,1,0,0,0,621,85,1,0,0,0,622,
  	623,5,17,0,0,623,626,5,50,0,0,624,626,5,119,0,0,625,622,1,0,0,0,625,624,
  	1,0,0,0,626,87,1,0,0,0,627,628,5,65,0,0,628,637,3,120,60,0,629,630,5,
  	99,0,0,630,631,5,133,0,0,631,632,3,120,60,0,632,633,5,152,0,0,633,637,
  	1,0,0,0,634,635,5,99,0,0,635,637,3,120,60,0,636,627,1,0,0,0,636,629,1,
  	0,0,0,636,634,1,0,0,0,637,89,1,0,0,0,638,639,5,80,0,0,639,642,3,98,49,
  	0,640,641,5,64,0,0,641,643,3,98,49,0,642,640,1,0,0,0,642,643,1,0,0,0,
  	643,91,1,0,0,0,644,647,3,122,61,0,645,646,7,7,0,0,646,648,3,122,61,0,
  	647,645,1,0,0,0,647,648,1,0,0,0,648,93,1,0,0,0,649,654,3,96,48,0,650,
  	651,5,119,0,0,651,653,3,96,48,0,652,650,1,0,0,0,653,656,1,0,0,0,654,652,
  	1,0,0,0,654,655,1,0,0,0,655,95,1,0,0,0,656,654,1,0,0,0,657,659,3,122,
  	61,0,658,660,7,8,0,0,659,658,1,0,0,0,659,660,1,0,0,0,660,663,1,0,0,0,
  	661,662,5,63,0,0,662,664,7,9,0,0,663,661,1,0,0,0,663,664,1,0,0,0,664,
  	667,1,0,0,0,665,666,5,16,0,0,666,668,5,113,0,0,667,665,1,0,0,0,667,668,
  	1,0,0,0,668,97,1,0,0,0,669,676,3,168,84,0,670,673,3,152,76,0,671,672,
  	5,154,0,0,672,674,3,152,76,0,673,671,1,0,0,0,673,674,1,0,0,0,674,676,
  	1,0,0,0,675,669,1,0,0,0,675,670,1,0,0,0,676,99,1,0,0,0,677,682,3,102,
  	51,0,678,679,5,119,0,0,679,681,3,102,51,0,680,678,1,0,0,0,681,684,1,0,
  	0,0,682,680,1,0,0,0,682,683,1,0,0,0,683,101,1,0,0,0,684,682,1,0,0,0,685,
  	686,3,164,82,0,686,687,5,125,0,0,687,688,3,154,77,0,688,103,1,0,0,0,689,
  	691,3,106,53,0,690,689,1,0,0,0,690,691,1,0,0,0,691,693,1,0,0,0,692,694,
  	3,108,54,0,693,692,1,0,0,0,693,694,1,0,0,0,694,696,1,0,0,0,695,697,3,
  	110,55,0,696,695,1,0,0,0,696,697,1,0,0,0,697,105,1,0,0,0,698,699,5,70,
  	0,0,699,700,5,11,0,0,700,701,3,120,60,0,701,107,1,0,0,0,702,703,5,67,
  	0,0,703,704,5,11,0,0,704,705,3,94,47,0,705,109,1,0,0,0,706,707,7,10,0,
  	0,707,708,3,112,56,0,708,111,1,0,0,0,709,716,3,114,57,0,710,711,5,9,0,
  	0,711,712,3,114,57,0,712,713,5,2,0,0,713,714,3,114,57,0,714,716,1,0,0,
  	0,715,709,1,0,0,0,715,710,1,0,0,0,716,113,1,0,0,0,717,718,5,19,0,0,718,
  	730,5,78,0,0,719,720,5,97,0,0,720,730,5,71,0,0,721,722,5,97,0,0,722,730,
  	5,33,0,0,723,724,3,152,76,0,724,725,5,71,0,0,725,730,1,0,0,0,726,727,
  	3,152,76,0,727,728,5,33,0,0,728,730,1,0,0,0,729,717,1,0,0,0,729,719,1,
  	0,0,0,729,721,1,0,0,0,729,723,1,0,0,0,729,726,1,0,0,0,730,115,1,0,0,0,
  	731,732,3,122,61,0,732,733,5,0,0,1,733,117,1,0,0,0,734,791,3,164,82,0,
  	735,736,3,164,82,0,736,737,5,133,0,0,737,738,3,164,82,0,738,745,3,118,
  	59,0,739,740,5,119,0,0,740,741,3,164,82,0,741,742,3,118,59,0,742,744,
  	1,0,0,0,743,739,1,0,0,0,744,747,1,0,0,0,745,743,1,0,0,0,745,746,1,0,0,
  	0,746,749,1,0,0,0,747,745,1,0,0,0,748,750,5,119,0,0,749,748,1,0,0,0,749,
  	750,1,0,0,0,750,751,1,0,0,0,751,752,5,152,0,0,752,791,1,0,0,0,753,754,
  	3,164,82,0,754,755,5,133,0,0,755,760,3,166,83,0,756,757,5,119,0,0,757,
  	759,3,166,83,0,758,756,1,0,0,0,759,762,1,0,0,0,760,758,1,0,0,0,760,761,
  	1,0,0,0,761,764,1,0,0,0,762,760,1,0,0,0,763,765,5,119,0,0,764,763,1,0,
  	0,0,764,765,1,0,0,0,765,766,1,0,0,0,766,767,5,152,0,0,767,791,1,0,0,0,
  	768,769,3,164,82,0,769,770,5,133,0,0,770,775,3,118,59,0,771,772,5,119,
  	0,0,772,774,3,118,59,0,773,771,1,0,0,0,774,777,1,0,0,0,775,773,1,0,0,
  	0,775,776,1,0,0,0,776,779,1,0,0,0,777,775,1,0,0,0,778,780,5,119,0,0,779,
  	778,1,0,0,0,779,780,1,0,0,0,780,781,1,0,0,0,781,782,5,152,0,0,782,791,
  	1,0,0,0,783,784,3,164,82,0,784,786,5,133,0,0,785,787,3,120,60,0,786,785,
  	1,0,0,0,786,787,1,0,0,0,787,788,1,0,0,0,788,789,5,152,0,0,789,791,1,0,
  	0,0,790,734,1,0,0,0,790,735,1,0,0,0,790,753,1,0,0,0,790,768,1,0,0,0,790,
  	783,1,0,0,0,791,119,1,0,0,0,792,797,3,122,61,0,793,794,5,119,0,0,794,
  	796,3,122,61,0,795,793,1,0,0,0,796,799,1,0,0,0,797,795,1,0,0,0,797,798,
  	1,0,0,0,798,801,1,0,0,0,799,797,1,0,0,0,800,802,5,119,0,0,801,800,1,0,
  	0,0,801,802,1,0,0,0,802,121,1,0,0,0,803,804,6,61,-1,0,804,806,5,12,0,
  	0,805,807,3,122,61,0,806,805,1,0,0,0,806,807,1,0,0,0,807,813,1,0,0,0,
  	808,809,5,101,0,0,809,810,3,122,61,0,810,811,5,86,0,0,811,812,3,122,61,
  	0,812,814,1,0,0,0,813,808,1,0,0,0,814,815,1,0,0,0,815,813,1,0,0,0,815,
  	816,1,0,0,0,816,819,1,0,0,0,817,818,5,25,0,0,818,820,3,122,61,0,819,817,
  	1,0,0,0,819,820,1,0,0,0,820,821,1,0,0,0,821,822,5,26,0,0,822,956,1,0,
  	0,0,823,824,5,13,0,0,824,825,5,133,0,0,825,826,3,122,61,0,826,827,5,6,
  	0,0,827,828,3,118,59,0,828,829,5,152,0,0,829,956,1,0,0,0,830,831,5,20,
  	0,0,831,956,5,113,0,0,832,833,5,48,0,0,833,956,5,113,0,0,834,835,5,48,
  	0,0,835,836,3,122,61,0,836,837,3,156,78,0,837,956,1,0,0,0,838,839,5,85,
  	0,0,839,840,5,133,0,0,840,841,3,122,61,0,841,842,5,35,0,0,842,845,3,122,
  	61,0,843,844,5,34,0,0,844,846,3,122,61,0,845,843,1,0,0,0,845,846,1,0,
  	0,0,846,847,1,0,0,0,847,848,5,152,0,0,848,956,1,0,0,0,849,850,5,89,0,
  	0,850,956,5,113,0,0,851,852,5,94,0,0,852,853,5,133,0,0,853,854,7,11,0,
  	0,854,855,3,170,85,0,855,856,5,35,0,0,856,857,3,122,61,0,857,858,5,152,
  	0,0,858,956,1,0,0,0,859,860,3,164,82,0,860,862,5,133,0,0,861,863,3,120,
  	60,0,862,861,1,0,0,0,862,863,1,0,0,0,863,864,1,0,0,0,864,865,5,152,0,
  	0,865,874,1,0,0,0,866,868,5,133,0,0,867,869,5,24,0,0,868,867,1,0,0,0,
  	868,869,1,0,0,0,869,871,1,0,0,0,870,872,3,120,60,0,871,870,1,0,0,0,871,
  	872,1,0,0,0,872,873,1,0,0,0,873,875,5,152,0,0,874,866,1,0,0,0,874,875,
  	1,0,0,0,875,876,1,0,0,0,876,877,5,69,0,0,877,878,5,133,0,0,878,879,3,
  	104,52,0,879,880,5,152,0,0,880,956,1,0,0,0,881,882,3,164,82,0,882,884,
  	5,133,0,0,883,885,3,120,60,0,884,883,1,0,0,0,884,885,1,0,0,0,885,886,
  	1,0,0,0,886,887,5,152,0,0,887,896,1,0,0,0,888,890,5,133,0,0,889,891,5,
  	24,0,0,890,889,1,0,0,0,890,891,1,0,0,0,891,893,1,0,0,0,892,894,3,120,
  	60,0,893,892,1,0,0,0,893,894,1,0,0,0,894,895,1,0,0,0,895,897,5,152,0,
  	0,896,888,1,0,0,0,896,897,1,0,0,0,897,898,1,0,0,0,898,899,5,69,0,0,899,
  	900,3,164,82,0,900,956,1,0,0,0,901,907,3,164,82,0,902,904,5,133,0,0,903,
  	905,3,120,60,0,904,903,1,0,0,0,904,905,1,0,0,0,905,906,1,0,0,0,906,908,
  	5,152,0,0,907,902,1,0,0,0,907,908,1,0,0,0,908,909,1,0,0,0,909,911,5,133,
  	0,0,910,912,5,24,0,0,911,910,1,0,0,0,911,912,1,0,0,0,912,914,1,0,0,0,
  	913,915,3,120,60,0,914,913,1,0,0,0,914,915,1,0,0,0,915,916,1,0,0,0,916,
  	917,5,152,0,0,917,956,1,0,0,0,918,956,3,128,64,0,919,956,3,172,86,0,920,
  	956,3,154,77,0,921,922,5,121,0,0,922,956,3,122,61,20,923,924,5,61,0,0,
  	924,956,3,122,61,14,925,926,3,144,72,0,926,927,5,123,0,0,927,929,1,0,
  	0,0,928,925,1,0,0,0,928,929,1,0,0,0,929,930,1,0,0,0,930,956,5,115,0,0,
  	931,932,5,133,0,0,932,933,3,48,24,0,933,934,5,152,0,0,934,956,1,0,0,0,
  	935,936,5,133,0,0,936,937,3,122,61,0,937,938,5,152,0,0,938,956,1,0,0,
  	0,939,940,5,133,0,0,940,941,3,120,60,0,941,942,5,152,0,0,942,956,1,0,
  	0,0,943,945,5,132,0,0,944,946,3,120,60,0,945,944,1,0,0,0,945,946,1,0,
  	0,0,946,947,1,0,0,0,947,956,5,151,0,0,948,950,5,131,0,0,949,951,3,40,
  	20,0,950,949,1,0,0,0,950,951,1,0,0,0,951,952,1,0,0,0,952,956,5,150,0,
  	0,953,956,3,124,62,0,954,956,3,136,68,0,955,803,1,0,0,0,955,823,1,0,0,
  	0,955,830,1,0,0,0,955,832,1,0,0,0,955,834,1,0,0,0,955,838,1,0,0,0,955,
  	849,1,0,0,0,955,851,1,0,0,0,955,859,1,0,0,0,955,881,1,0,0,0,955,901,1,
  	0,0,0,955,918,1,0,0,0,955,919,1,0,0,0,955,920,1,0,0,0,955,921,1,0,0,0,
  	955,923,1,0,0,0,955,928,1,0,0,0,955,931,1,0,0,0,955,935,1,0,0,0,955,939,
  	1,0,0,0,955,943,1,0,0,0,955,948,1,0,0,0,955,953,1,0,0,0,955,954,1,0,0,
  	0,956,1072,1,0,0,0,957,961,10,19,0,0,958,962,5,115,0,0,959,962,5,154,
  	0,0,960,962,5,141,0,0,961,958,1,0,0,0,961,959,1,0,0,0,961,960,1,0,0,0,
  	962,963,1,0,0,0,963,1071,3,122,61,20,964,968,10,18,0,0,965,969,5,142,
  	0,0,966,969,5,121,0,0,967,969,5,120,0,0,968,965,1,0,0,0,968,966,1,0,0,
  	0,968,967,1,0,0,0,969,970,1,0,0,0,970,1071,3,122,61,19,971,996,10,17,
  	0,0,972,997,5,124,0,0,973,997,5,125,0,0,974,997,5,136,0,0,975,997,5,134,
  	0,0,976,997,5,135,0,0,977,997,5,126,0,0,978,997,5,127,0,0,979,981,5,61,
  	0,0,980,979,1,0,0,0,980,981,1,0,0,0,981,982,1,0,0,0,982,984,5,44,0,0,
  	983,985,5,15,0,0,984,983,1,0,0,0,984,985,1,0,0,0,985,997,1,0,0,0,986,
  	988,5,61,0,0,987,986,1,0,0,0,987,988,1,0,0,0,988,989,1,0,0,0,989,997,
  	7,12,0,0,990,997,5,148,0,0,991,997,5,149,0,0,992,997,5,138,0,0,993,997,
  	5,129,0,0,994,997,5,130,0,0,995,997,5,137,0,0,996,972,1,0,0,0,996,973,
  	1,0,0,0,996,974,1,0,0,0,996,975,1,0,0,0,996,976,1,0,0,0,996,977,1,0,0,
  	0,996,978,1,0,0,0,996,980,1,0,0,0,996,987,1,0,0,0,996,990,1,0,0,0,996,
  	991,1,0,0,0,996,992,1,0,0,0,996,993,1,0,0,0,996,994,1,0,0,0,996,995,1,
  	0,0,0,997,998,1,0,0,0,998,1071,3,122,61,18,999,1000,10,15,0,0,1000,1001,
  	5,140,0,0,1001,1071,3,122,61,16,1002,1003,10,13,0,0,1003,1004,5,2,0,0,
  	1004,1071,3,122,61,14,1005,1006,10,12,0,0,1006,1007,5,66,0,0,1007,1071,
  	3,122,61,13,1008,1010,10,11,0,0,1009,1011,5,61,0,0,1010,1009,1,0,0,0,
  	1010,1011,1,0,0,0,1011,1012,1,0,0,0,1012,1013,5,9,0,0,1013,1014,3,122,
  	61,0,1014,1015,5,2,0,0,1015,1016,3,122,61,12,1016,1071,1,0,0,0,1017,1018,
  	10,10,0,0,1018,1019,5,143,0,0,1019,1020,3,122,61,0,1020,1021,5,118,0,
  	0,1021,1022,3,122,61,10,1022,1071,1,0,0,0,1023,1024,10,31,0,0,1024,1025,
  	5,133,0,0,1025,1026,3,48,24,0,1026,1027,5,152,0,0,1027,1071,1,0,0,0,1028,
  	1029,10,30,0,0,1029,1031,5,133,0,0,1030,1032,3,120,60,0,1031,1030,1,0,
  	0,0,1031,1032,1,0,0,0,1032,1033,1,0,0,0,1033,1071,5,152,0,0,1034,1035,
  	10,26,0,0,1035,1036,5,132,0,0,1036,1037,3,122,61,0,1037,1038,5,151,0,
  	0,1038,1071,1,0,0,0,1039,1040,10,25,0,0,1040,1041,5,123,0,0,1041,1071,
  	5,111,0,0,1042,1043,10,24,0,0,1043,1044,5,123,0,0,1044,1071,3,164,82,
  	0,1045,1046,10,23,0,0,1046,1047,5,139,0,0,1047,1048,5,132,0,0,1048,1049,
  	3,122,61,0,1049,1050,5,151,0,0,1050,1071,1,0,0,0,1051,1052,10,22,0,0,
  	1052,1053,5,139,0,0,1053,1071,5,111,0,0,1054,1055,10,21,0,0,1055,1056,
  	5,139,0,0,1056,1071,3,164,82,0,1057,1058,10,16,0,0,1058,1060,5,49,0,0,
  	1059,1061,5,61,0,0,1060,1059,1,0,0,0,1060,1061,1,0,0,0,1061,1062,1,0,
  	0,0,1062,1071,5,62,0,0,1063,1068,10,9,0,0,1064,1065,5,6,0,0,1065,1069,
  	3,164,82,0,1066,1067,5,6,0,0,1067,1069,5,113,0,0,1068,1064,1,0,0,0,1068,
  	1066,1,0,0,0,1069,1071,1,0,0,0,1070,957,1,0,0,0,1070,964,1,0,0,0,1070,
  	971,1,0,0,0,1070,999,1,0,0,0,1070,1002,1,0,0,0,1070,1005,1,0,0,0,1070,
  	1008,1,0,0,0,1070,1017,1,0,0,0,1070,1023,1,0,0,0,1070,1028,1,0,0,0,1070,
  	1034,1,0,0,0,1070,1039,1,0,0,0,1070,1042,1,0,0,0,1070,1045,1,0,0,0,1070,
  	1051,1,0,0,0,1070,1054,1,0,0,0,1070,1057,1,0,0,0,1070,1063,1,0,0,0,1071,
  	1074,1,0,0,0,1072,1070,1,0,0,0,1072,1073,1,0,0,0,1073,123,1,0,0,0,1074,
  	1072,1,0,0,0,1075,1076,5,133,0,0,1076,1081,3,164,82,0,1077,1078,5,119,
  	0,0,1078,1080,3,164,82,0,1079,1077,1,0,0,0,1080,1083,1,0,0,0,1081,1079,
  	1,0,0,0,1081,1082,1,0,0,0,1082,1085,1,0,0,0,1083,1081,1,0,0,0,1084,1086,
  	5,119,0,0,1085,1084,1,0,0,0,1085,1086,1,0,0,0,1086,1087,1,0,0,0,1087,
  	1088,5,152,0,0,1088,1103,1,0,0,0,1089,1094,3,164,82,0,1090,1091,5,119,
  	0,0,1091,1093,3,164,82,0,1092,1090,1,0,0,0,1093,1096,1,0,0,0,1094,1092,
  	1,0,0,0,1094,1095,1,0,0,0,1095,1098,1,0,0,0,1096,1094,1,0,0,0,1097,1099,
  	5,119,0,0,1098,1097,1,0,0,0,1098,1099,1,0,0,0,1099,1103,1,0,0,0,1100,
  	1101,5,133,0,0,1101,1103,5,152,0,0,1102,1075,1,0,0,0,1102,1089,1,0,0,
  	0,1102,1100,1,0,0,0,1103,1104,1,0,0,0,1104,1107,5,114,0,0,1105,1108,3,
  	122,61,0,1106,1108,3,36,18,0,1107,1105,1,0,0,0,1107,1106,1,0,0,0,1108,
  	125,1,0,0,0,1109,1115,3,128,64,0,1110,1111,5,131,0,0,1111,1112,3,122,
  	61,0,1112,1113,5,150,0,0,1113,1115,1,0,0,0,1114,1109,1,0,0,0,1114,1110,
  	1,0,0,0,1115,127,1,0,0,0,1116,1117,5,135,0,0,1117,1121,3,164,82,0,1118,
  	1120,3,130,65,0,1119,1118,1,0,0,0,1120,1123,1,0,0,0,1121,1119,1,0,0,0,
  	1121,1122,1,0,0,0,1122,1124,1,0,0,0,1123,1121,1,0,0,0,1124,1125,5,154,
  	0,0,1125,1126,5,127,0,0,1126,1148,1,0,0,0,1127,1128,5,135,0,0,1128,1132,
  	3,164,82,0,1129,1131,3,130,65,0,1130,1129,1,0,0,0,1131,1134,1,0,0,0,1132,
  	1130,1,0,0,0,1132,1133,1,0,0,0,1133,1135,1,0,0,0,1134,1132,1,0,0,0,1135,
  	1139,5,127,0,0,1136,1138,3,126,63,0,1137,1136,1,0,0,0,1138,1141,1,0,0,
  	0,1139,1137,1,0,0,0,1139,1140,1,0,0,0,1140,1142,1,0,0,0,1141,1139,1,0,
  	0,0,1142,1143,5,135,0,0,1143,1144,5,154,0,0,1144,1145,3,164,82,0,1145,
  	1146,5,127,0,0,1146,1148,1,0,0,0,1147,1116,1,0,0,0,1147,1127,1,0,0,0,
  	1148,129,1,0,0,0,1149,1150,3,164,82,0,1150,1151,5,125,0,0,1151,1152,3,
  	170,85,0,1152,1161,1,0,0,0,1153,1154,3,164,82,0,1154,1155,5,125,0,0,1155,
  	1156,5,131,0,0,1156,1157,3,122,61,0,1157,1158,5,150,0,0,1158,1161,1,0,
  	0,0,1159,1161,3,164,82,0,1160,1149,1,0,0,0,1160,1153,1,0,0,0,1160,1159,
  	1,0,0,0,1161,131,1,0,0,0,1162,1167,3,134,67,0,1163,1164,5,119,0,0,1164,
  	1166,3,134,67,0,1165,1163,1,0,0,0,1166,1169,1,0,0,0,1167,1165,1,0,0,0,
  	1167,1168,1,0,0,0,1168,1171,1,0,0,0,1169,1167,1,0,0,0,1170,1172,5,119,
  	0,0,1171,1170,1,0,0,0,1171,1172,1,0,0,0,1172,133,1,0,0,0,1173,1174,3,
  	164,82,0,1174,1175,5,6,0,0,1175,1176,5,133,0,0,1176,1177,3,48,24,0,1177,
  	1178,5,152,0,0,1178,1184,1,0,0,0,1179,1180,3,122,61,0,1180,1181,5,6,0,
  	0,1181,1182,3,164,82,0,1182,1184,1,0,0,0,1183,1173,1,0,0,0,1183,1179,
  	1,0,0,0,1184,135,1,0,0,0,1185,1193,3,168,84,0,1186,1187,3,144,72,0,1187,
  	1188,5,123,0,0,1188,1190,1,0,0,0,1189,1186,1,0,0,0,1189,1190,1,0,0,0,
  	1190,1191,1,0,0,0,1191,1193,3,138,69,0,1192,1185,1,0,0,0,1192,1189,1,
  	0,0,0,1193,137,1,0,0,0,1194,1199,3,164,82,0,1195,1196,5,123,0,0,1196,
  	1198,3,164,82,0,1197,1195,1,0,0,0,1198,1201,1,0,0,0,1199,1197,1,0,0,0,
  	1199,1200,1,0,0,0,1200,139,1,0,0,0,1201,1199,1,0,0,0,1202,1203,6,70,-1,
  	0,1203,1212,3,144,72,0,1204,1212,3,142,71,0,1205,1206,5,133,0,0,1206,
  	1207,3,48,24,0,1207,1208,5,152,0,0,1208,1212,1,0,0,0,1209,1212,3,128,
  	64,0,1210,1212,3,168,84,0,1211,1202,1,0,0,0,1211,1204,1,0,0,0,1211,1205,
  	1,0,0,0,1211,1209,1,0,0,0,1211,1210,1,0,0,0,1212,1221,1,0,0,0,1213,1217,
  	10,3,0,0,1214,1218,3,162,81,0,1215,1216,5,6,0,0,1216,1218,3,164,82,0,
  	1217,1214,1,0,0,0,1217,1215,1,0,0,0,1218,1220,1,0,0,0,1219,1213,1,0,0,
  	0,1220,1223,1,0,0,0,1221,1219,1,0,0,0,1221,1222,1,0,0,0,1222,141,1,0,
  	0,0,1223,1221,1,0,0,0,1224,1225,3,164,82,0,1225,1227,5,133,0,0,1226,1228,
  	3,146,73,0,1227,1226,1,0,0,0,1227,1228,1,0,0,0,1228,1229,1,0,0,0,1229,
  	1230,5,152,0,0,1230,143,1,0,0,0,1231,1232,3,148,74,0,1232,1233,5,123,
  	0,0,1233,1235,1,0,0,0,1234,1231,1,0,0,0,1234,1235,1,0,0,0,1235,1236,1,
  	0,0,0,1236,1237,3,164,82,0,1237,145,1,0,0,0,1238,1243,3,122,61,0,1239,
  	1240,5,119,0,0,1240,1242,3,122,61,0,1241,1239,1,0,0,0,1242,1245,1,0,0,
  	0,1243,1241,1,0,0,0,1243,1244,1,0,0,0,1244,1247,1,0,0,0,1245,1243,1,0,
  	0,0,1246,1248,5,119,0,0,1247,1246,1,0,0,0,1247,1248,1,0,0,0,1248,147,
  	1,0,0,0,1249,1250,3,164,82,0,1250,149,1,0,0,0,1251,1260,5,109,0,0,1252,
  	1253,5,123,0,0,1253,1260,7,13,0,0,1254,1255,5,111,0,0,1255,1257,5,123,
  	0,0,1256,1258,7,13,0,0,1257,1256,1,0,0,0,1257,1258,1,0,0,0,1258,1260,
  	1,0,0,0,1259,1251,1,0,0,0,1259,1252,1,0,0,0,1259,1254,1,0,0,0,1260,151,
  	1,0,0,0,1261,1263,7,14,0,0,1262,1261,1,0,0,0,1262,1263,1,0,0,0,1263,1270,
  	1,0,0,0,1264,1271,3,150,75,0,1265,1271,5,110,0,0,1266,1271,5,111,0,0,
  	1267,1271,5,112,0,0,1268,1271,5,45,0,0,1269,1271,5,60,0,0,1270,1264,1,
  	0,0,0,1270,1265,1,0,0,0,1270,1266,1,0,0,0,1270,1267,1,0,0,0,1270,1268,
  	1,0,0,0,1270,1269,1,0,0,0,1271,153,1,0,0,0,1272,1276,3,152,76,0,1273,
  	1276,5,113,0,0,1274,1276,5,62,0,0,1275,1272,1,0,0,0,1275,1273,1,0,0,0,
  	1275,1274,1,0,0,0,1276,155,1,0,0,0,1277,1278,7,15,0,0,1278,157,1,0,0,
  	0,1279,1280,7,16,0,0,1280,159,1,0,0,0,1281,1282,7,17,0,0,1282,161,1,0,
  	0,0,1283,1286,5,108,0,0,1284,1286,3,160,80,0,1285,1283,1,0,0,0,1285,1284,
  	1,0,0,0,1286,163,1,0,0,0,1287,1291,5,108,0,0,1288,1291,3,156,78,0,1289,
  	1291,3,158,79,0,1290,1287,1,0,0,0,1290,1288,1,0,0,0,1290,1289,1,0,0,0,
  	1291,165,1,0,0,0,1292,1293,3,170,85,0,1293,1294,5,125,0,0,1294,1295,3,
  	152,76,0,1295,167,1,0,0,0,1296,1297,5,131,0,0,1297,1298,3,122,61,0,1298,
  	1299,5,150,0,0,1299,169,1,0,0,0,1300,1303,5,113,0,0,1301,1303,3,172,86,
  	0,1302,1300,1,0,0,0,1302,1301,1,0,0,0,1303,171,1,0,0,0,1304,1308,5,145,
  	0,0,1305,1307,3,174,87,0,1306,1305,1,0,0,0,1307,1310,1,0,0,0,1308,1306,
  	1,0,0,0,1308,1309,1,0,0,0,1309,1311,1,0,0,0,1310,1308,1,0,0,0,1311,1312,
  	5,147,0,0,1312,173,1,0,0,0,1313,1314,5,160,0,0,1314,1315,3,122,61,0,1315,
  	1316,5,150,0,0,1316,1319,1,0,0,0,1317,1319,5,159,0,0,1318,1313,1,0,0,
  	0,1318,1317,1,0,0,0,1319,175,1,0,0,0,1320,1324,5,146,0,0,1321,1323,3,
  	178,89,0,1322,1321,1,0,0,0,1323,1326,1,0,0,0,1324,1322,1,0,0,0,1324,1325,
  	1,0,0,0,1325,1327,1,0,0,0,1326,1324,1,0,0,0,1327,1328,5,0,0,1,1328,177,
  	1,0,0,0,1329,1330,5,162,0,0,1330,1331,3,122,61,0,1331,1332,5,150,0,0,
  	1332,1335,1,0,0,0,1333,1335,5,161,0,0,1334,1329,1,0,0,0,1334,1333,1,0,
  	0,0,1335,179,1,0,0,0,170,183,190,199,206,210,224,228,231,235,238,245,
  	249,258,263,272,280,287,291,297,302,310,317,323,335,343,357,361,366,376,
  	386,394,398,402,405,409,412,415,418,421,425,429,432,435,438,441,445,448,
  	457,463,484,501,523,527,533,538,549,552,558,566,572,574,578,583,586,589,
  	593,597,600,602,605,609,613,616,618,620,625,636,642,647,654,659,663,667,
  	673,675,682,690,693,696,715,729,745,749,760,764,775,779,786,790,797,801,
  	806,815,819,845,862,868,871,874,884,890,893,896,904,907,911,914,928,945,
  	950,955,961,968,980,984,987,996,1010,1031,1060,1068,1070,1072,1081,1085,
  	1094,1098,1102,1107,1114,1121,1132,1139,1147,1160,1167,1171,1183,1189,
  	1192,1199,1211,1217,1221,1227,1234,1243,1247,1257,1259,1262,1270,1275,
  	1285,1290,1302,1308,1318,1324,1334
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  hogqlparserParserStaticData = std::move(staticData);
}

}

HogQLParser::HogQLParser(TokenStream *input) : HogQLParser(input, antlr4::atn::ParserATNSimulatorOptions()) {}

HogQLParser::HogQLParser(TokenStream *input, const antlr4::atn::ParserATNSimulatorOptions &options) : Parser(input) {
  HogQLParser::initialize();
  _interpreter = new atn::ParserATNSimulator(this, *hogqlparserParserStaticData->atn, hogqlparserParserStaticData->decisionToDFA, hogqlparserParserStaticData->sharedContextCache, options);
}

HogQLParser::~HogQLParser() {
  delete _interpreter;
}

const atn::ATN& HogQLParser::getATN() const {
  return *hogqlparserParserStaticData->atn;
}

std::string HogQLParser::getGrammarFileName() const {
  return "HogQLParser.g4";
}

const std::vector<std::string>& HogQLParser::getRuleNames() const {
  return hogqlparserParserStaticData->ruleNames;
}

const dfa::Vocabulary& HogQLParser::getVocabulary() const {
  return hogqlparserParserStaticData->vocabulary;
}

antlr4::atn::SerializedATNView HogQLParser::getSerializedATN() const {
  return hogqlparserParserStaticData->serializedATN;
}


//----------------- ProgramContext ------------------------------------------------------------------

HogQLParser::ProgramContext::ProgramContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::ProgramContext::EOF() {
  return getToken(HogQLParser::EOF, 0);
}

std::vector<HogQLParser::DeclarationContext *> HogQLParser::ProgramContext::declaration() {
  return getRuleContexts<HogQLParser::DeclarationContext>();
}

HogQLParser::DeclarationContext* HogQLParser::ProgramContext::declaration(size_t i) {
  return getRuleContext<HogQLParser::DeclarationContext>(i);
}


size_t HogQLParser::ProgramContext::getRuleIndex() const {
  return HogQLParser::RuleProgram;
}


std::any HogQLParser::ProgramContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitProgram(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::ProgramContext* HogQLParser::program() {
  ProgramContext *_localctx = _tracker.createInstance<ProgramContext>(_ctx, getState());
  enterRule(_localctx, 0, HogQLParser::RuleProgram);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(183);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -140738696331266) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & 723944844006785023) != 0) || ((((_la - 131) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 131)) & 4212759) != 0)) {
      setState(180);
      declaration();
      setState(185);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(186);
    match(HogQLParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DeclarationContext ------------------------------------------------------------------

HogQLParser::DeclarationContext::DeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HogQLParser::VarDeclContext* HogQLParser::DeclarationContext::varDecl() {
  return getRuleContext<HogQLParser::VarDeclContext>(0);
}

HogQLParser::StatementContext* HogQLParser::DeclarationContext::statement() {
  return getRuleContext<HogQLParser::StatementContext>(0);
}


size_t HogQLParser::DeclarationContext::getRuleIndex() const {
  return HogQLParser::RuleDeclaration;
}


std::any HogQLParser::DeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitDeclaration(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::DeclarationContext* HogQLParser::declaration() {
  DeclarationContext *_localctx = _tracker.createInstance<DeclarationContext>(_ctx, getState());
  enterRule(_localctx, 2, HogQLParser::RuleDeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(190);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case HogQLParser::LET: {
        enterOuterAlt(_localctx, 1);
        setState(188);
        varDecl();
        break;
      }

      case HogQLParser::ALL:
      case HogQLParser::AND:
      case HogQLParser::ANTI:
      case HogQLParser::ANY:
      case HogQLParser::ARRAY:
      case HogQLParser::AS:
      case HogQLParser::ASCENDING:
      case HogQLParser::ASOF:
      case HogQLParser::BETWEEN:
      case HogQLParser::BOTH:
      case HogQLParser::BY:
      case HogQLParser::CASE:
      case HogQLParser::CAST:
      case HogQLParser::COHORT:
      case HogQLParser::COLLATE:
      case HogQLParser::CROSS:
      case HogQLParser::CUBE:
      case HogQLParser::CURRENT:
      case HogQLParser::DATE:
      case HogQLParser::DAY:
      case HogQLParser::DESC:
      case HogQLParser::DESCENDING:
      case HogQLParser::DISTINCT:
      case HogQLParser::ELSE:
      case HogQLParser::END:
      case HogQLParser::EXTRACT:
      case HogQLParser::FINAL:
      case HogQLParser::FIRST:
      case HogQLParser::FN:
      case HogQLParser::FOLLOWING:
      case HogQLParser::FOR:
      case HogQLParser::FROM:
      case HogQLParser::FULL:
      case HogQLParser::FUN:
      case HogQLParser::GROUP:
      case HogQLParser::HAVING:
      case HogQLParser::HOUR:
      case HogQLParser::ID:
      case HogQLParser::IF:
      case HogQLParser::ILIKE:
      case HogQLParser::IN:
      case HogQLParser::INF:
      case HogQLParser::INNER:
      case HogQLParser::INTERVAL:
      case HogQLParser::IS:
      case HogQLParser::JOIN:
      case HogQLParser::KEY:
      case HogQLParser::LAST:
      case HogQLParser::LEADING:
      case HogQLParser::LEFT:
      case HogQLParser::LIKE:
      case HogQLParser::LIMIT:
      case HogQLParser::MINUTE:
      case HogQLParser::MONTH:
      case HogQLParser::NAN_SQL:
      case HogQLParser::NOT:
      case HogQLParser::NULL_SQL:
      case HogQLParser::NULLS:
      case HogQLParser::OFFSET:
      case HogQLParser::ON:
      case HogQLParser::OR:
      case HogQLParser::ORDER:
      case HogQLParser::OUTER:
      case HogQLParser::OVER:
      case HogQLParser::PARTITION:
      case HogQLParser::PRECEDING:
      case HogQLParser::PREWHERE:
      case HogQLParser::QUARTER:
      case HogQLParser::RANGE:
      case HogQLParser::RETURN:
      case HogQLParser::RIGHT:
      case HogQLParser::ROLLUP:
      case HogQLParser::ROW:
      case HogQLParser::ROWS:
      case HogQLParser::SAMPLE:
      case HogQLParser::SECOND:
      case HogQLParser::SELECT:
      case HogQLParser::SEMI:
      case HogQLParser::SETTINGS:
      case HogQLParser::SUBSTRING:
      case HogQLParser::THEN:
      case HogQLParser::THROW:
      case HogQLParser::TIES:
      case HogQLParser::TIMESTAMP:
      case HogQLParser::TO:
      case HogQLParser::TOP:
      case HogQLParser::TOTALS:
      case HogQLParser::TRAILING:
      case HogQLParser::TRIM:
      case HogQLParser::TRUNCATE:
      case HogQLParser::TRY:
      case HogQLParser::UNBOUNDED:
      case HogQLParser::UNION:
      case HogQLParser::USING:
      case HogQLParser::WEEK:
      case HogQLParser::WHEN:
      case HogQLParser::WHERE:
      case HogQLParser::WHILE:
      case HogQLParser::WINDOW:
      case HogQLParser::WITH:
      case HogQLParser::YEAR:
      case HogQLParser::IDENTIFIER:
      case HogQLParser::FLOATING_LITERAL:
      case HogQLParser::OCTAL_LITERAL:
      case HogQLParser::DECIMAL_LITERAL:
      case HogQLParser::HEXADECIMAL_LITERAL:
      case HogQLParser::STRING_LITERAL:
      case HogQLParser::ASTERISK:
      case HogQLParser::DASH:
      case HogQLParser::DOT:
      case HogQLParser::LBRACE:
      case HogQLParser::LBRACKET:
      case HogQLParser::LPAREN:
      case HogQLParser::LT:
      case HogQLParser::PLUS:
      case HogQLParser::QUOTE_SINGLE_TEMPLATE:
      case HogQLParser::SEMICOLON: {
        enterOuterAlt(_localctx, 2);
        setState(189);
        statement();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExpressionContext ------------------------------------------------------------------

HogQLParser::ExpressionContext::ExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HogQLParser::ColumnExprContext* HogQLParser::ExpressionContext::columnExpr() {
  return getRuleContext<HogQLParser::ColumnExprContext>(0);
}


size_t HogQLParser::ExpressionContext::getRuleIndex() const {
  return HogQLParser::RuleExpression;
}


std::any HogQLParser::ExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitExpression(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::ExpressionContext* HogQLParser::expression() {
  ExpressionContext *_localctx = _tracker.createInstance<ExpressionContext>(_ctx, getState());
  enterRule(_localctx, 4, HogQLParser::RuleExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(192);
    columnExpr(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VarDeclContext ------------------------------------------------------------------

HogQLParser::VarDeclContext::VarDeclContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::VarDeclContext::LET() {
  return getToken(HogQLParser::LET, 0);
}

HogQLParser::IdentifierContext* HogQLParser::VarDeclContext::identifier() {
  return getRuleContext<HogQLParser::IdentifierContext>(0);
}

tree::TerminalNode* HogQLParser::VarDeclContext::COLON() {
  return getToken(HogQLParser::COLON, 0);
}

tree::TerminalNode* HogQLParser::VarDeclContext::EQ_SINGLE() {
  return getToken(HogQLParser::EQ_SINGLE, 0);
}

HogQLParser::ExpressionContext* HogQLParser::VarDeclContext::expression() {
  return getRuleContext<HogQLParser::ExpressionContext>(0);
}


size_t HogQLParser::VarDeclContext::getRuleIndex() const {
  return HogQLParser::RuleVarDecl;
}


std::any HogQLParser::VarDeclContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitVarDecl(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::VarDeclContext* HogQLParser::varDecl() {
  VarDeclContext *_localctx = _tracker.createInstance<VarDeclContext>(_ctx, getState());
  enterRule(_localctx, 6, HogQLParser::RuleVarDecl);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(194);
    match(HogQLParser::LET);
    setState(195);
    identifier();
    setState(199);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HogQLParser::COLON) {
      setState(196);
      match(HogQLParser::COLON);
      setState(197);
      match(HogQLParser::EQ_SINGLE);
      setState(198);
      expression();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IdentifierListContext ------------------------------------------------------------------

HogQLParser::IdentifierListContext::IdentifierListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<HogQLParser::IdentifierContext *> HogQLParser::IdentifierListContext::identifier() {
  return getRuleContexts<HogQLParser::IdentifierContext>();
}

HogQLParser::IdentifierContext* HogQLParser::IdentifierListContext::identifier(size_t i) {
  return getRuleContext<HogQLParser::IdentifierContext>(i);
}

std::vector<tree::TerminalNode *> HogQLParser::IdentifierListContext::COMMA() {
  return getTokens(HogQLParser::COMMA);
}

tree::TerminalNode* HogQLParser::IdentifierListContext::COMMA(size_t i) {
  return getToken(HogQLParser::COMMA, i);
}


size_t HogQLParser::IdentifierListContext::getRuleIndex() const {
  return HogQLParser::RuleIdentifierList;
}


std::any HogQLParser::IdentifierListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitIdentifierList(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::IdentifierListContext* HogQLParser::identifierList() {
  IdentifierListContext *_localctx = _tracker.createInstance<IdentifierListContext>(_ctx, getState());
  enterRule(_localctx, 8, HogQLParser::RuleIdentifierList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(201);
    identifier();
    setState(206);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 3, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(202);
        match(HogQLParser::COMMA);
        setState(203);
        identifier(); 
      }
      setState(208);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 3, _ctx);
    }
    setState(210);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HogQLParser::COMMA) {
      setState(209);
      match(HogQLParser::COMMA);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StatementContext ------------------------------------------------------------------

HogQLParser::StatementContext::StatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HogQLParser::ReturnStmtContext* HogQLParser::StatementContext::returnStmt() {
  return getRuleContext<HogQLParser::ReturnStmtContext>(0);
}

HogQLParser::ThrowStmtContext* HogQLParser::StatementContext::throwStmt() {
  return getRuleContext<HogQLParser::ThrowStmtContext>(0);
}

HogQLParser::TryCatchStmtContext* HogQLParser::StatementContext::tryCatchStmt() {
  return getRuleContext<HogQLParser::TryCatchStmtContext>(0);
}

HogQLParser::IfStmtContext* HogQLParser::StatementContext::ifStmt() {
  return getRuleContext<HogQLParser::IfStmtContext>(0);
}

HogQLParser::WhileStmtContext* HogQLParser::StatementContext::whileStmt() {
  return getRuleContext<HogQLParser::WhileStmtContext>(0);
}

HogQLParser::ForInStmtContext* HogQLParser::StatementContext::forInStmt() {
  return getRuleContext<HogQLParser::ForInStmtContext>(0);
}

HogQLParser::ForStmtContext* HogQLParser::StatementContext::forStmt() {
  return getRuleContext<HogQLParser::ForStmtContext>(0);
}

HogQLParser::FuncStmtContext* HogQLParser::StatementContext::funcStmt() {
  return getRuleContext<HogQLParser::FuncStmtContext>(0);
}

HogQLParser::VarAssignmentContext* HogQLParser::StatementContext::varAssignment() {
  return getRuleContext<HogQLParser::VarAssignmentContext>(0);
}

HogQLParser::BlockContext* HogQLParser::StatementContext::block() {
  return getRuleContext<HogQLParser::BlockContext>(0);
}

HogQLParser::ExprStmtContext* HogQLParser::StatementContext::exprStmt() {
  return getRuleContext<HogQLParser::ExprStmtContext>(0);
}

HogQLParser::EmptyStmtContext* HogQLParser::StatementContext::emptyStmt() {
  return getRuleContext<HogQLParser::EmptyStmtContext>(0);
}


size_t HogQLParser::StatementContext::getRuleIndex() const {
  return HogQLParser::RuleStatement;
}


std::any HogQLParser::StatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitStatement(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::StatementContext* HogQLParser::statement() {
  StatementContext *_localctx = _tracker.createInstance<StatementContext>(_ctx, getState());
  enterRule(_localctx, 10, HogQLParser::RuleStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(224);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 5, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(212);
      returnStmt();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(213);
      throwStmt();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(214);
      tryCatchStmt();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(215);
      ifStmt();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(216);
      whileStmt();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(217);
      forInStmt();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(218);
      forStmt();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(219);
      funcStmt();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(220);
      varAssignment();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(221);
      block();
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(222);
      exprStmt();
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(223);
      emptyStmt();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReturnStmtContext ------------------------------------------------------------------

HogQLParser::ReturnStmtContext::ReturnStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::ReturnStmtContext::RETURN() {
  return getToken(HogQLParser::RETURN, 0);
}

HogQLParser::ExpressionContext* HogQLParser::ReturnStmtContext::expression() {
  return getRuleContext<HogQLParser::ExpressionContext>(0);
}

tree::TerminalNode* HogQLParser::ReturnStmtContext::SEMICOLON() {
  return getToken(HogQLParser::SEMICOLON, 0);
}


size_t HogQLParser::ReturnStmtContext::getRuleIndex() const {
  return HogQLParser::RuleReturnStmt;
}


std::any HogQLParser::ReturnStmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitReturnStmt(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::ReturnStmtContext* HogQLParser::returnStmt() {
  ReturnStmtContext *_localctx = _tracker.createInstance<ReturnStmtContext>(_ctx, getState());
  enterRule(_localctx, 12, HogQLParser::RuleReturnStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(226);
    match(HogQLParser::RETURN);
    setState(228);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 6, _ctx)) {
    case 1: {
      setState(227);
      expression();
      break;
    }

    default:
      break;
    }
    setState(231);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 7, _ctx)) {
    case 1: {
      setState(230);
      match(HogQLParser::SEMICOLON);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ThrowStmtContext ------------------------------------------------------------------

HogQLParser::ThrowStmtContext::ThrowStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::ThrowStmtContext::THROW() {
  return getToken(HogQLParser::THROW, 0);
}

HogQLParser::ExpressionContext* HogQLParser::ThrowStmtContext::expression() {
  return getRuleContext<HogQLParser::ExpressionContext>(0);
}

tree::TerminalNode* HogQLParser::ThrowStmtContext::SEMICOLON() {
  return getToken(HogQLParser::SEMICOLON, 0);
}


size_t HogQLParser::ThrowStmtContext::getRuleIndex() const {
  return HogQLParser::RuleThrowStmt;
}


std::any HogQLParser::ThrowStmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitThrowStmt(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::ThrowStmtContext* HogQLParser::throwStmt() {
  ThrowStmtContext *_localctx = _tracker.createInstance<ThrowStmtContext>(_ctx, getState());
  enterRule(_localctx, 14, HogQLParser::RuleThrowStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(233);
    match(HogQLParser::THROW);
    setState(235);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 8, _ctx)) {
    case 1: {
      setState(234);
      expression();
      break;
    }

    default:
      break;
    }
    setState(238);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 9, _ctx)) {
    case 1: {
      setState(237);
      match(HogQLParser::SEMICOLON);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CatchBlockContext ------------------------------------------------------------------

HogQLParser::CatchBlockContext::CatchBlockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::CatchBlockContext::CATCH() {
  return getToken(HogQLParser::CATCH, 0);
}

HogQLParser::BlockContext* HogQLParser::CatchBlockContext::block() {
  return getRuleContext<HogQLParser::BlockContext>(0);
}

tree::TerminalNode* HogQLParser::CatchBlockContext::LPAREN() {
  return getToken(HogQLParser::LPAREN, 0);
}

tree::TerminalNode* HogQLParser::CatchBlockContext::RPAREN() {
  return getToken(HogQLParser::RPAREN, 0);
}

std::vector<HogQLParser::IdentifierContext *> HogQLParser::CatchBlockContext::identifier() {
  return getRuleContexts<HogQLParser::IdentifierContext>();
}

HogQLParser::IdentifierContext* HogQLParser::CatchBlockContext::identifier(size_t i) {
  return getRuleContext<HogQLParser::IdentifierContext>(i);
}

tree::TerminalNode* HogQLParser::CatchBlockContext::COLON() {
  return getToken(HogQLParser::COLON, 0);
}


size_t HogQLParser::CatchBlockContext::getRuleIndex() const {
  return HogQLParser::RuleCatchBlock;
}


std::any HogQLParser::CatchBlockContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitCatchBlock(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::CatchBlockContext* HogQLParser::catchBlock() {
  CatchBlockContext *_localctx = _tracker.createInstance<CatchBlockContext>(_ctx, getState());
  enterRule(_localctx, 16, HogQLParser::RuleCatchBlock);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(240);
    match(HogQLParser::CATCH);
    setState(249);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HogQLParser::LPAREN) {
      setState(241);
      match(HogQLParser::LPAREN);
      setState(242);
      antlrcpp::downCast<CatchBlockContext *>(_localctx)->catchVar = identifier();
      setState(245);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == HogQLParser::COLON) {
        setState(243);
        match(HogQLParser::COLON);
        setState(244);
        antlrcpp::downCast<CatchBlockContext *>(_localctx)->catchType = identifier();
      }
      setState(247);
      match(HogQLParser::RPAREN);
    }
    setState(251);
    antlrcpp::downCast<CatchBlockContext *>(_localctx)->catchStmt = block();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TryCatchStmtContext ------------------------------------------------------------------

HogQLParser::TryCatchStmtContext::TryCatchStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::TryCatchStmtContext::TRY() {
  return getToken(HogQLParser::TRY, 0);
}

std::vector<HogQLParser::BlockContext *> HogQLParser::TryCatchStmtContext::block() {
  return getRuleContexts<HogQLParser::BlockContext>();
}

HogQLParser::BlockContext* HogQLParser::TryCatchStmtContext::block(size_t i) {
  return getRuleContext<HogQLParser::BlockContext>(i);
}

std::vector<HogQLParser::CatchBlockContext *> HogQLParser::TryCatchStmtContext::catchBlock() {
  return getRuleContexts<HogQLParser::CatchBlockContext>();
}

HogQLParser::CatchBlockContext* HogQLParser::TryCatchStmtContext::catchBlock(size_t i) {
  return getRuleContext<HogQLParser::CatchBlockContext>(i);
}

tree::TerminalNode* HogQLParser::TryCatchStmtContext::FINALLY() {
  return getToken(HogQLParser::FINALLY, 0);
}


size_t HogQLParser::TryCatchStmtContext::getRuleIndex() const {
  return HogQLParser::RuleTryCatchStmt;
}


std::any HogQLParser::TryCatchStmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitTryCatchStmt(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::TryCatchStmtContext* HogQLParser::tryCatchStmt() {
  TryCatchStmtContext *_localctx = _tracker.createInstance<TryCatchStmtContext>(_ctx, getState());
  enterRule(_localctx, 18, HogQLParser::RuleTryCatchStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(253);
    match(HogQLParser::TRY);
    setState(254);
    antlrcpp::downCast<TryCatchStmtContext *>(_localctx)->tryStmt = block();
    setState(258);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == HogQLParser::CATCH) {
      setState(255);
      catchBlock();
      setState(260);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(263);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HogQLParser::FINALLY) {
      setState(261);
      match(HogQLParser::FINALLY);
      setState(262);
      antlrcpp::downCast<TryCatchStmtContext *>(_localctx)->finallyStmt = block();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IfStmtContext ------------------------------------------------------------------

HogQLParser::IfStmtContext::IfStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::IfStmtContext::IF() {
  return getToken(HogQLParser::IF, 0);
}

tree::TerminalNode* HogQLParser::IfStmtContext::LPAREN() {
  return getToken(HogQLParser::LPAREN, 0);
}

HogQLParser::ExpressionContext* HogQLParser::IfStmtContext::expression() {
  return getRuleContext<HogQLParser::ExpressionContext>(0);
}

tree::TerminalNode* HogQLParser::IfStmtContext::RPAREN() {
  return getToken(HogQLParser::RPAREN, 0);
}

std::vector<HogQLParser::StatementContext *> HogQLParser::IfStmtContext::statement() {
  return getRuleContexts<HogQLParser::StatementContext>();
}

HogQLParser::StatementContext* HogQLParser::IfStmtContext::statement(size_t i) {
  return getRuleContext<HogQLParser::StatementContext>(i);
}

tree::TerminalNode* HogQLParser::IfStmtContext::ELSE() {
  return getToken(HogQLParser::ELSE, 0);
}


size_t HogQLParser::IfStmtContext::getRuleIndex() const {
  return HogQLParser::RuleIfStmt;
}


std::any HogQLParser::IfStmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitIfStmt(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::IfStmtContext* HogQLParser::ifStmt() {
  IfStmtContext *_localctx = _tracker.createInstance<IfStmtContext>(_ctx, getState());
  enterRule(_localctx, 20, HogQLParser::RuleIfStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(265);
    match(HogQLParser::IF);
    setState(266);
    match(HogQLParser::LPAREN);
    setState(267);
    expression();
    setState(268);
    match(HogQLParser::RPAREN);
    setState(269);
    statement();
    setState(272);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 14, _ctx)) {
    case 1: {
      setState(270);
      match(HogQLParser::ELSE);
      setState(271);
      statement();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WhileStmtContext ------------------------------------------------------------------

HogQLParser::WhileStmtContext::WhileStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::WhileStmtContext::WHILE() {
  return getToken(HogQLParser::WHILE, 0);
}

tree::TerminalNode* HogQLParser::WhileStmtContext::LPAREN() {
  return getToken(HogQLParser::LPAREN, 0);
}

HogQLParser::ExpressionContext* HogQLParser::WhileStmtContext::expression() {
  return getRuleContext<HogQLParser::ExpressionContext>(0);
}

tree::TerminalNode* HogQLParser::WhileStmtContext::RPAREN() {
  return getToken(HogQLParser::RPAREN, 0);
}

HogQLParser::StatementContext* HogQLParser::WhileStmtContext::statement() {
  return getRuleContext<HogQLParser::StatementContext>(0);
}

tree::TerminalNode* HogQLParser::WhileStmtContext::SEMICOLON() {
  return getToken(HogQLParser::SEMICOLON, 0);
}


size_t HogQLParser::WhileStmtContext::getRuleIndex() const {
  return HogQLParser::RuleWhileStmt;
}


std::any HogQLParser::WhileStmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitWhileStmt(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::WhileStmtContext* HogQLParser::whileStmt() {
  WhileStmtContext *_localctx = _tracker.createInstance<WhileStmtContext>(_ctx, getState());
  enterRule(_localctx, 22, HogQLParser::RuleWhileStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(274);
    match(HogQLParser::WHILE);
    setState(275);
    match(HogQLParser::LPAREN);
    setState(276);
    expression();
    setState(277);
    match(HogQLParser::RPAREN);
    setState(278);
    statement();
    setState(280);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 15, _ctx)) {
    case 1: {
      setState(279);
      match(HogQLParser::SEMICOLON);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ForStmtContext ------------------------------------------------------------------

HogQLParser::ForStmtContext::ForStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::ForStmtContext::FOR() {
  return getToken(HogQLParser::FOR, 0);
}

tree::TerminalNode* HogQLParser::ForStmtContext::LPAREN() {
  return getToken(HogQLParser::LPAREN, 0);
}

std::vector<tree::TerminalNode *> HogQLParser::ForStmtContext::SEMICOLON() {
  return getTokens(HogQLParser::SEMICOLON);
}

tree::TerminalNode* HogQLParser::ForStmtContext::SEMICOLON(size_t i) {
  return getToken(HogQLParser::SEMICOLON, i);
}

tree::TerminalNode* HogQLParser::ForStmtContext::RPAREN() {
  return getToken(HogQLParser::RPAREN, 0);
}

HogQLParser::StatementContext* HogQLParser::ForStmtContext::statement() {
  return getRuleContext<HogQLParser::StatementContext>(0);
}

std::vector<HogQLParser::VarDeclContext *> HogQLParser::ForStmtContext::varDecl() {
  return getRuleContexts<HogQLParser::VarDeclContext>();
}

HogQLParser::VarDeclContext* HogQLParser::ForStmtContext::varDecl(size_t i) {
  return getRuleContext<HogQLParser::VarDeclContext>(i);
}

std::vector<HogQLParser::VarAssignmentContext *> HogQLParser::ForStmtContext::varAssignment() {
  return getRuleContexts<HogQLParser::VarAssignmentContext>();
}

HogQLParser::VarAssignmentContext* HogQLParser::ForStmtContext::varAssignment(size_t i) {
  return getRuleContext<HogQLParser::VarAssignmentContext>(i);
}

std::vector<HogQLParser::ExpressionContext *> HogQLParser::ForStmtContext::expression() {
  return getRuleContexts<HogQLParser::ExpressionContext>();
}

HogQLParser::ExpressionContext* HogQLParser::ForStmtContext::expression(size_t i) {
  return getRuleContext<HogQLParser::ExpressionContext>(i);
}


size_t HogQLParser::ForStmtContext::getRuleIndex() const {
  return HogQLParser::RuleForStmt;
}


std::any HogQLParser::ForStmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitForStmt(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::ForStmtContext* HogQLParser::forStmt() {
  ForStmtContext *_localctx = _tracker.createInstance<ForStmtContext>(_ctx, getState());
  enterRule(_localctx, 24, HogQLParser::RuleForStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(282);
    match(HogQLParser::FOR);
    setState(283);
    match(HogQLParser::LPAREN);
    setState(287);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 16, _ctx)) {
    case 1: {
      setState(284);
      antlrcpp::downCast<ForStmtContext *>(_localctx)->initializerVarDeclr = varDecl();
      break;
    }

    case 2: {
      setState(285);
      antlrcpp::downCast<ForStmtContext *>(_localctx)->initializerVarAssignment = varAssignment();
      break;
    }

    case 3: {
      setState(286);
      antlrcpp::downCast<ForStmtContext *>(_localctx)->initializerExpression = expression();
      break;
    }

    default:
      break;
    }
    setState(289);
    match(HogQLParser::SEMICOLON);
    setState(291);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -36169677449216002) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & 723944289947615231) != 0) || ((((_la - 131) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 131)) & 18455) != 0)) {
      setState(290);
      antlrcpp::downCast<ForStmtContext *>(_localctx)->condition = expression();
    }
    setState(293);
    match(HogQLParser::SEMICOLON);
    setState(297);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 18, _ctx)) {
    case 1: {
      setState(294);
      antlrcpp::downCast<ForStmtContext *>(_localctx)->incrementVarDeclr = varDecl();
      break;
    }

    case 2: {
      setState(295);
      antlrcpp::downCast<ForStmtContext *>(_localctx)->incrementVarAssignment = varAssignment();
      break;
    }

    case 3: {
      setState(296);
      antlrcpp::downCast<ForStmtContext *>(_localctx)->incrementExpression = expression();
      break;
    }

    default:
      break;
    }
    setState(299);
    match(HogQLParser::RPAREN);
    setState(300);
    statement();
    setState(302);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 19, _ctx)) {
    case 1: {
      setState(301);
      match(HogQLParser::SEMICOLON);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ForInStmtContext ------------------------------------------------------------------

HogQLParser::ForInStmtContext::ForInStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::ForInStmtContext::FOR() {
  return getToken(HogQLParser::FOR, 0);
}

tree::TerminalNode* HogQLParser::ForInStmtContext::LPAREN() {
  return getToken(HogQLParser::LPAREN, 0);
}

tree::TerminalNode* HogQLParser::ForInStmtContext::LET() {
  return getToken(HogQLParser::LET, 0);
}

std::vector<HogQLParser::IdentifierContext *> HogQLParser::ForInStmtContext::identifier() {
  return getRuleContexts<HogQLParser::IdentifierContext>();
}

HogQLParser::IdentifierContext* HogQLParser::ForInStmtContext::identifier(size_t i) {
  return getRuleContext<HogQLParser::IdentifierContext>(i);
}

tree::TerminalNode* HogQLParser::ForInStmtContext::IN() {
  return getToken(HogQLParser::IN, 0);
}

HogQLParser::ExpressionContext* HogQLParser::ForInStmtContext::expression() {
  return getRuleContext<HogQLParser::ExpressionContext>(0);
}

tree::TerminalNode* HogQLParser::ForInStmtContext::RPAREN() {
  return getToken(HogQLParser::RPAREN, 0);
}

HogQLParser::StatementContext* HogQLParser::ForInStmtContext::statement() {
  return getRuleContext<HogQLParser::StatementContext>(0);
}

tree::TerminalNode* HogQLParser::ForInStmtContext::COMMA() {
  return getToken(HogQLParser::COMMA, 0);
}

tree::TerminalNode* HogQLParser::ForInStmtContext::SEMICOLON() {
  return getToken(HogQLParser::SEMICOLON, 0);
}


size_t HogQLParser::ForInStmtContext::getRuleIndex() const {
  return HogQLParser::RuleForInStmt;
}


std::any HogQLParser::ForInStmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitForInStmt(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::ForInStmtContext* HogQLParser::forInStmt() {
  ForInStmtContext *_localctx = _tracker.createInstance<ForInStmtContext>(_ctx, getState());
  enterRule(_localctx, 26, HogQLParser::RuleForInStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(304);
    match(HogQLParser::FOR);
    setState(305);
    match(HogQLParser::LPAREN);
    setState(306);
    match(HogQLParser::LET);
    setState(307);
    identifier();
    setState(310);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HogQLParser::COMMA) {
      setState(308);
      match(HogQLParser::COMMA);
      setState(309);
      identifier();
    }
    setState(312);
    match(HogQLParser::IN);
    setState(313);
    expression();
    setState(314);
    match(HogQLParser::RPAREN);
    setState(315);
    statement();
    setState(317);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 21, _ctx)) {
    case 1: {
      setState(316);
      match(HogQLParser::SEMICOLON);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FuncStmtContext ------------------------------------------------------------------

HogQLParser::FuncStmtContext::FuncStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HogQLParser::IdentifierContext* HogQLParser::FuncStmtContext::identifier() {
  return getRuleContext<HogQLParser::IdentifierContext>(0);
}

tree::TerminalNode* HogQLParser::FuncStmtContext::LPAREN() {
  return getToken(HogQLParser::LPAREN, 0);
}

tree::TerminalNode* HogQLParser::FuncStmtContext::RPAREN() {
  return getToken(HogQLParser::RPAREN, 0);
}

HogQLParser::BlockContext* HogQLParser::FuncStmtContext::block() {
  return getRuleContext<HogQLParser::BlockContext>(0);
}

tree::TerminalNode* HogQLParser::FuncStmtContext::FN() {
  return getToken(HogQLParser::FN, 0);
}

tree::TerminalNode* HogQLParser::FuncStmtContext::FUN() {
  return getToken(HogQLParser::FUN, 0);
}

HogQLParser::IdentifierListContext* HogQLParser::FuncStmtContext::identifierList() {
  return getRuleContext<HogQLParser::IdentifierListContext>(0);
}


size_t HogQLParser::FuncStmtContext::getRuleIndex() const {
  return HogQLParser::RuleFuncStmt;
}


std::any HogQLParser::FuncStmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitFuncStmt(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::FuncStmtContext* HogQLParser::funcStmt() {
  FuncStmtContext *_localctx = _tracker.createInstance<FuncStmtContext>(_ctx, getState());
  enterRule(_localctx, 28, HogQLParser::RuleFuncStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(319);
    _la = _input->LA(1);
    if (!(_la == HogQLParser::FN

    || _la == HogQLParser::FUN)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(320);
    identifier();
    setState(321);
    match(HogQLParser::LPAREN);
    setState(323);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -5800812384855539714) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & 25834219896831) != 0)) {
      setState(322);
      identifierList();
    }
    setState(325);
    match(HogQLParser::RPAREN);
    setState(326);
    block();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VarAssignmentContext ------------------------------------------------------------------

HogQLParser::VarAssignmentContext::VarAssignmentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<HogQLParser::ExpressionContext *> HogQLParser::VarAssignmentContext::expression() {
  return getRuleContexts<HogQLParser::ExpressionContext>();
}

HogQLParser::ExpressionContext* HogQLParser::VarAssignmentContext::expression(size_t i) {
  return getRuleContext<HogQLParser::ExpressionContext>(i);
}

tree::TerminalNode* HogQLParser::VarAssignmentContext::COLON() {
  return getToken(HogQLParser::COLON, 0);
}

tree::TerminalNode* HogQLParser::VarAssignmentContext::EQ_SINGLE() {
  return getToken(HogQLParser::EQ_SINGLE, 0);
}


size_t HogQLParser::VarAssignmentContext::getRuleIndex() const {
  return HogQLParser::RuleVarAssignment;
}


std::any HogQLParser::VarAssignmentContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitVarAssignment(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::VarAssignmentContext* HogQLParser::varAssignment() {
  VarAssignmentContext *_localctx = _tracker.createInstance<VarAssignmentContext>(_ctx, getState());
  enterRule(_localctx, 30, HogQLParser::RuleVarAssignment);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(328);
    expression();
    setState(329);
    match(HogQLParser::COLON);
    setState(330);
    match(HogQLParser::EQ_SINGLE);
    setState(331);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExprStmtContext ------------------------------------------------------------------

HogQLParser::ExprStmtContext::ExprStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HogQLParser::ExpressionContext* HogQLParser::ExprStmtContext::expression() {
  return getRuleContext<HogQLParser::ExpressionContext>(0);
}

tree::TerminalNode* HogQLParser::ExprStmtContext::SEMICOLON() {
  return getToken(HogQLParser::SEMICOLON, 0);
}


size_t HogQLParser::ExprStmtContext::getRuleIndex() const {
  return HogQLParser::RuleExprStmt;
}


std::any HogQLParser::ExprStmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitExprStmt(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::ExprStmtContext* HogQLParser::exprStmt() {
  ExprStmtContext *_localctx = _tracker.createInstance<ExprStmtContext>(_ctx, getState());
  enterRule(_localctx, 32, HogQLParser::RuleExprStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(333);
    expression();
    setState(335);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 23, _ctx)) {
    case 1: {
      setState(334);
      match(HogQLParser::SEMICOLON);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EmptyStmtContext ------------------------------------------------------------------

HogQLParser::EmptyStmtContext::EmptyStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::EmptyStmtContext::SEMICOLON() {
  return getToken(HogQLParser::SEMICOLON, 0);
}


size_t HogQLParser::EmptyStmtContext::getRuleIndex() const {
  return HogQLParser::RuleEmptyStmt;
}


std::any HogQLParser::EmptyStmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitEmptyStmt(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::EmptyStmtContext* HogQLParser::emptyStmt() {
  EmptyStmtContext *_localctx = _tracker.createInstance<EmptyStmtContext>(_ctx, getState());
  enterRule(_localctx, 34, HogQLParser::RuleEmptyStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(337);
    match(HogQLParser::SEMICOLON);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BlockContext ------------------------------------------------------------------

HogQLParser::BlockContext::BlockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::BlockContext::LBRACE() {
  return getToken(HogQLParser::LBRACE, 0);
}

tree::TerminalNode* HogQLParser::BlockContext::RBRACE() {
  return getToken(HogQLParser::RBRACE, 0);
}

std::vector<HogQLParser::DeclarationContext *> HogQLParser::BlockContext::declaration() {
  return getRuleContexts<HogQLParser::DeclarationContext>();
}

HogQLParser::DeclarationContext* HogQLParser::BlockContext::declaration(size_t i) {
  return getRuleContext<HogQLParser::DeclarationContext>(i);
}


size_t HogQLParser::BlockContext::getRuleIndex() const {
  return HogQLParser::RuleBlock;
}


std::any HogQLParser::BlockContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitBlock(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::BlockContext* HogQLParser::block() {
  BlockContext *_localctx = _tracker.createInstance<BlockContext>(_ctx, getState());
  enterRule(_localctx, 36, HogQLParser::RuleBlock);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(339);
    match(HogQLParser::LBRACE);
    setState(343);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -140738696331266) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & 723944844006785023) != 0) || ((((_la - 131) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 131)) & 4212759) != 0)) {
      setState(340);
      declaration();
      setState(345);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(346);
    match(HogQLParser::RBRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KvPairContext ------------------------------------------------------------------

HogQLParser::KvPairContext::KvPairContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<HogQLParser::ExpressionContext *> HogQLParser::KvPairContext::expression() {
  return getRuleContexts<HogQLParser::ExpressionContext>();
}

HogQLParser::ExpressionContext* HogQLParser::KvPairContext::expression(size_t i) {
  return getRuleContext<HogQLParser::ExpressionContext>(i);
}

tree::TerminalNode* HogQLParser::KvPairContext::COLON() {
  return getToken(HogQLParser::COLON, 0);
}


size_t HogQLParser::KvPairContext::getRuleIndex() const {
  return HogQLParser::RuleKvPair;
}


std::any HogQLParser::KvPairContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitKvPair(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::KvPairContext* HogQLParser::kvPair() {
  KvPairContext *_localctx = _tracker.createInstance<KvPairContext>(_ctx, getState());
  enterRule(_localctx, 38, HogQLParser::RuleKvPair);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(348);
    expression();
    setState(349);
    match(HogQLParser::COLON);
    setState(350);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KvPairListContext ------------------------------------------------------------------

HogQLParser::KvPairListContext::KvPairListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<HogQLParser::KvPairContext *> HogQLParser::KvPairListContext::kvPair() {
  return getRuleContexts<HogQLParser::KvPairContext>();
}

HogQLParser::KvPairContext* HogQLParser::KvPairListContext::kvPair(size_t i) {
  return getRuleContext<HogQLParser::KvPairContext>(i);
}

std::vector<tree::TerminalNode *> HogQLParser::KvPairListContext::COMMA() {
  return getTokens(HogQLParser::COMMA);
}

tree::TerminalNode* HogQLParser::KvPairListContext::COMMA(size_t i) {
  return getToken(HogQLParser::COMMA, i);
}


size_t HogQLParser::KvPairListContext::getRuleIndex() const {
  return HogQLParser::RuleKvPairList;
}


std::any HogQLParser::KvPairListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitKvPairList(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::KvPairListContext* HogQLParser::kvPairList() {
  KvPairListContext *_localctx = _tracker.createInstance<KvPairListContext>(_ctx, getState());
  enterRule(_localctx, 40, HogQLParser::RuleKvPairList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(352);
    kvPair();
    setState(357);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 25, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(353);
        match(HogQLParser::COMMA);
        setState(354);
        kvPair(); 
      }
      setState(359);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 25, _ctx);
    }
    setState(361);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HogQLParser::COMMA) {
      setState(360);
      match(HogQLParser::COMMA);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SelectContext ------------------------------------------------------------------

HogQLParser::SelectContext::SelectContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::SelectContext::EOF() {
  return getToken(HogQLParser::EOF, 0);
}

HogQLParser::SelectSetStmtContext* HogQLParser::SelectContext::selectSetStmt() {
  return getRuleContext<HogQLParser::SelectSetStmtContext>(0);
}

HogQLParser::SelectStmtContext* HogQLParser::SelectContext::selectStmt() {
  return getRuleContext<HogQLParser::SelectStmtContext>(0);
}

HogQLParser::HogqlxTagElementContext* HogQLParser::SelectContext::hogqlxTagElement() {
  return getRuleContext<HogQLParser::HogqlxTagElementContext>(0);
}


size_t HogQLParser::SelectContext::getRuleIndex() const {
  return HogQLParser::RuleSelect;
}


std::any HogQLParser::SelectContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitSelect(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::SelectContext* HogQLParser::select() {
  SelectContext *_localctx = _tracker.createInstance<SelectContext>(_ctx, getState());
  enterRule(_localctx, 42, HogQLParser::RuleSelect);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(366);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 27, _ctx)) {
    case 1: {
      setState(363);
      selectSetStmt();
      break;
    }

    case 2: {
      setState(364);
      selectStmt();
      break;
    }

    case 3: {
      setState(365);
      hogqlxTagElement();
      break;
    }

    default:
      break;
    }
    setState(368);
    match(HogQLParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SelectStmtWithParensContext ------------------------------------------------------------------

HogQLParser::SelectStmtWithParensContext::SelectStmtWithParensContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HogQLParser::SelectStmtContext* HogQLParser::SelectStmtWithParensContext::selectStmt() {
  return getRuleContext<HogQLParser::SelectStmtContext>(0);
}

tree::TerminalNode* HogQLParser::SelectStmtWithParensContext::LPAREN() {
  return getToken(HogQLParser::LPAREN, 0);
}

HogQLParser::SelectSetStmtContext* HogQLParser::SelectStmtWithParensContext::selectSetStmt() {
  return getRuleContext<HogQLParser::SelectSetStmtContext>(0);
}

tree::TerminalNode* HogQLParser::SelectStmtWithParensContext::RPAREN() {
  return getToken(HogQLParser::RPAREN, 0);
}

HogQLParser::PlaceholderContext* HogQLParser::SelectStmtWithParensContext::placeholder() {
  return getRuleContext<HogQLParser::PlaceholderContext>(0);
}


size_t HogQLParser::SelectStmtWithParensContext::getRuleIndex() const {
  return HogQLParser::RuleSelectStmtWithParens;
}


std::any HogQLParser::SelectStmtWithParensContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitSelectStmtWithParens(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::SelectStmtWithParensContext* HogQLParser::selectStmtWithParens() {
  SelectStmtWithParensContext *_localctx = _tracker.createInstance<SelectStmtWithParensContext>(_ctx, getState());
  enterRule(_localctx, 44, HogQLParser::RuleSelectStmtWithParens);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(376);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case HogQLParser::SELECT:
      case HogQLParser::WITH: {
        enterOuterAlt(_localctx, 1);
        setState(370);
        selectStmt();
        break;
      }

      case HogQLParser::LPAREN: {
        enterOuterAlt(_localctx, 2);
        setState(371);
        match(HogQLParser::LPAREN);
        setState(372);
        selectSetStmt();
        setState(373);
        match(HogQLParser::RPAREN);
        break;
      }

      case HogQLParser::LBRACE: {
        enterOuterAlt(_localctx, 3);
        setState(375);
        placeholder();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SubsequentSelectSetClauseContext ------------------------------------------------------------------

HogQLParser::SubsequentSelectSetClauseContext::SubsequentSelectSetClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HogQLParser::SelectStmtWithParensContext* HogQLParser::SubsequentSelectSetClauseContext::selectStmtWithParens() {
  return getRuleContext<HogQLParser::SelectStmtWithParensContext>(0);
}

tree::TerminalNode* HogQLParser::SubsequentSelectSetClauseContext::EXCEPT() {
  return getToken(HogQLParser::EXCEPT, 0);
}

tree::TerminalNode* HogQLParser::SubsequentSelectSetClauseContext::UNION() {
  return getToken(HogQLParser::UNION, 0);
}

tree::TerminalNode* HogQLParser::SubsequentSelectSetClauseContext::ALL() {
  return getToken(HogQLParser::ALL, 0);
}

tree::TerminalNode* HogQLParser::SubsequentSelectSetClauseContext::DISTINCT() {
  return getToken(HogQLParser::DISTINCT, 0);
}

tree::TerminalNode* HogQLParser::SubsequentSelectSetClauseContext::INTERSECT() {
  return getToken(HogQLParser::INTERSECT, 0);
}


size_t HogQLParser::SubsequentSelectSetClauseContext::getRuleIndex() const {
  return HogQLParser::RuleSubsequentSelectSetClause;
}


std::any HogQLParser::SubsequentSelectSetClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitSubsequentSelectSetClause(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::SubsequentSelectSetClauseContext* HogQLParser::subsequentSelectSetClause() {
  SubsequentSelectSetClauseContext *_localctx = _tracker.createInstance<SubsequentSelectSetClauseContext>(_ctx, getState());
  enterRule(_localctx, 46, HogQLParser::RuleSubsequentSelectSetClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(386);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 29, _ctx)) {
    case 1: {
      setState(378);
      match(HogQLParser::EXCEPT);
      break;
    }

    case 2: {
      setState(379);
      match(HogQLParser::UNION);
      setState(380);
      match(HogQLParser::ALL);
      break;
    }

    case 3: {
      setState(381);
      match(HogQLParser::UNION);
      setState(382);
      match(HogQLParser::DISTINCT);
      break;
    }

    case 4: {
      setState(383);
      match(HogQLParser::INTERSECT);
      break;
    }

    case 5: {
      setState(384);
      match(HogQLParser::INTERSECT);
      setState(385);
      match(HogQLParser::DISTINCT);
      break;
    }

    default:
      break;
    }
    setState(388);
    selectStmtWithParens();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SelectSetStmtContext ------------------------------------------------------------------

HogQLParser::SelectSetStmtContext::SelectSetStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HogQLParser::SelectStmtWithParensContext* HogQLParser::SelectSetStmtContext::selectStmtWithParens() {
  return getRuleContext<HogQLParser::SelectStmtWithParensContext>(0);
}

std::vector<HogQLParser::SubsequentSelectSetClauseContext *> HogQLParser::SelectSetStmtContext::subsequentSelectSetClause() {
  return getRuleContexts<HogQLParser::SubsequentSelectSetClauseContext>();
}

HogQLParser::SubsequentSelectSetClauseContext* HogQLParser::SelectSetStmtContext::subsequentSelectSetClause(size_t i) {
  return getRuleContext<HogQLParser::SubsequentSelectSetClauseContext>(i);
}


size_t HogQLParser::SelectSetStmtContext::getRuleIndex() const {
  return HogQLParser::RuleSelectSetStmt;
}


std::any HogQLParser::SelectSetStmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitSelectSetStmt(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::SelectSetStmtContext* HogQLParser::selectSetStmt() {
  SelectSetStmtContext *_localctx = _tracker.createInstance<SelectSetStmtContext>(_ctx, getState());
  enterRule(_localctx, 48, HogQLParser::RuleSelectSetStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(390);
    selectStmtWithParens();
    setState(394);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == HogQLParser::EXCEPT

    || _la == HogQLParser::INTERSECT || _la == HogQLParser::UNION) {
      setState(391);
      subsequentSelectSetClause();
      setState(396);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SelectStmtContext ------------------------------------------------------------------

HogQLParser::SelectStmtContext::SelectStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::SelectStmtContext::SELECT() {
  return getToken(HogQLParser::SELECT, 0);
}

HogQLParser::ColumnExprListContext* HogQLParser::SelectStmtContext::columnExprList() {
  return getRuleContext<HogQLParser::ColumnExprListContext>(0);
}

tree::TerminalNode* HogQLParser::SelectStmtContext::DISTINCT() {
  return getToken(HogQLParser::DISTINCT, 0);
}

HogQLParser::TopClauseContext* HogQLParser::SelectStmtContext::topClause() {
  return getRuleContext<HogQLParser::TopClauseContext>(0);
}

HogQLParser::ArrayJoinClauseContext* HogQLParser::SelectStmtContext::arrayJoinClause() {
  return getRuleContext<HogQLParser::ArrayJoinClauseContext>(0);
}

HogQLParser::PrewhereClauseContext* HogQLParser::SelectStmtContext::prewhereClause() {
  return getRuleContext<HogQLParser::PrewhereClauseContext>(0);
}

HogQLParser::GroupByClauseContext* HogQLParser::SelectStmtContext::groupByClause() {
  return getRuleContext<HogQLParser::GroupByClauseContext>(0);
}

std::vector<tree::TerminalNode *> HogQLParser::SelectStmtContext::WITH() {
  return getTokens(HogQLParser::WITH);
}

tree::TerminalNode* HogQLParser::SelectStmtContext::WITH(size_t i) {
  return getToken(HogQLParser::WITH, i);
}

tree::TerminalNode* HogQLParser::SelectStmtContext::TOTALS() {
  return getToken(HogQLParser::TOTALS, 0);
}

HogQLParser::HavingClauseContext* HogQLParser::SelectStmtContext::havingClause() {
  return getRuleContext<HogQLParser::HavingClauseContext>(0);
}

HogQLParser::WindowClauseContext* HogQLParser::SelectStmtContext::windowClause() {
  return getRuleContext<HogQLParser::WindowClauseContext>(0);
}

HogQLParser::OrderByClauseContext* HogQLParser::SelectStmtContext::orderByClause() {
  return getRuleContext<HogQLParser::OrderByClauseContext>(0);
}

HogQLParser::LimitByClauseContext* HogQLParser::SelectStmtContext::limitByClause() {
  return getRuleContext<HogQLParser::LimitByClauseContext>(0);
}

HogQLParser::LimitAndOffsetClauseContext* HogQLParser::SelectStmtContext::limitAndOffsetClause() {
  return getRuleContext<HogQLParser::LimitAndOffsetClauseContext>(0);
}

HogQLParser::OffsetOnlyClauseContext* HogQLParser::SelectStmtContext::offsetOnlyClause() {
  return getRuleContext<HogQLParser::OffsetOnlyClauseContext>(0);
}

HogQLParser::SettingsClauseContext* HogQLParser::SelectStmtContext::settingsClause() {
  return getRuleContext<HogQLParser::SettingsClauseContext>(0);
}

HogQLParser::WithClauseContext* HogQLParser::SelectStmtContext::withClause() {
  return getRuleContext<HogQLParser::WithClauseContext>(0);
}

HogQLParser::FromClauseContext* HogQLParser::SelectStmtContext::fromClause() {
  return getRuleContext<HogQLParser::FromClauseContext>(0);
}

HogQLParser::WhereClauseContext* HogQLParser::SelectStmtContext::whereClause() {
  return getRuleContext<HogQLParser::WhereClauseContext>(0);
}

tree::TerminalNode* HogQLParser::SelectStmtContext::CUBE() {
  return getToken(HogQLParser::CUBE, 0);
}

tree::TerminalNode* HogQLParser::SelectStmtContext::ROLLUP() {
  return getToken(HogQLParser::ROLLUP, 0);
}


size_t HogQLParser::SelectStmtContext::getRuleIndex() const {
  return HogQLParser::RuleSelectStmt;
}


std::any HogQLParser::SelectStmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitSelectStmt(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::SelectStmtContext* HogQLParser::selectStmt() {
  SelectStmtContext *_localctx = _tracker.createInstance<SelectStmtContext>(_ctx, getState());
  enterRule(_localctx, 50, HogQLParser::RuleSelectStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(398);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HogQLParser::WITH) {
      setState(397);
      antlrcpp::downCast<SelectStmtContext *>(_localctx)->with = withClause();
    }
    setState(400);
    match(HogQLParser::SELECT);
    setState(402);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 32, _ctx)) {
    case 1: {
      setState(401);
      match(HogQLParser::DISTINCT);
      break;
    }

    default:
      break;
    }
    setState(405);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 33, _ctx)) {
    case 1: {
      setState(404);
      topClause();
      break;
    }

    default:
      break;
    }
    setState(407);
    antlrcpp::downCast<SelectStmtContext *>(_localctx)->columns = columnExprList();
    setState(409);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HogQLParser::FROM) {
      setState(408);
      antlrcpp::downCast<SelectStmtContext *>(_localctx)->from = fromClause();
    }
    setState(412);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 18084767253659680) != 0)) {
      setState(411);
      arrayJoinClause();
    }
    setState(415);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HogQLParser::PREWHERE) {
      setState(414);
      prewhereClause();
    }
    setState(418);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HogQLParser::WHERE) {
      setState(417);
      antlrcpp::downCast<SelectStmtContext *>(_localctx)->where = whereClause();
    }
    setState(421);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HogQLParser::GROUP) {
      setState(420);
      groupByClause();
    }
    setState(425);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 39, _ctx)) {
    case 1: {
      setState(423);
      match(HogQLParser::WITH);
      setState(424);
      _la = _input->LA(1);
      if (!(_la == HogQLParser::CUBE

      || _la == HogQLParser::ROLLUP)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    default:
      break;
    }
    setState(429);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HogQLParser::WITH) {
      setState(427);
      match(HogQLParser::WITH);
      setState(428);
      match(HogQLParser::TOTALS);
    }
    setState(432);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HogQLParser::HAVING) {
      setState(431);
      havingClause();
    }
    setState(435);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HogQLParser::WINDOW) {
      setState(434);
      windowClause();
    }
    setState(438);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HogQLParser::ORDER) {
      setState(437);
      orderByClause();
    }
    setState(441);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 44, _ctx)) {
    case 1: {
      setState(440);
      limitByClause();
      break;
    }

    default:
      break;
    }
    setState(445);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case HogQLParser::LIMIT: {
        setState(443);
        limitAndOffsetClause();
        break;
      }

      case HogQLParser::OFFSET: {
        setState(444);
        offsetOnlyClause();
        break;
      }

      case HogQLParser::EOF:
      case HogQLParser::EXCEPT:
      case HogQLParser::INTERSECT:
      case HogQLParser::SETTINGS:
      case HogQLParser::UNION:
      case HogQLParser::RPAREN: {
        break;
      }

    default:
      break;
    }
    setState(448);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HogQLParser::SETTINGS) {
      setState(447);
      settingsClause();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WithClauseContext ------------------------------------------------------------------

HogQLParser::WithClauseContext::WithClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::WithClauseContext::WITH() {
  return getToken(HogQLParser::WITH, 0);
}

HogQLParser::WithExprListContext* HogQLParser::WithClauseContext::withExprList() {
  return getRuleContext<HogQLParser::WithExprListContext>(0);
}


size_t HogQLParser::WithClauseContext::getRuleIndex() const {
  return HogQLParser::RuleWithClause;
}


std::any HogQLParser::WithClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitWithClause(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::WithClauseContext* HogQLParser::withClause() {
  WithClauseContext *_localctx = _tracker.createInstance<WithClauseContext>(_ctx, getState());
  enterRule(_localctx, 52, HogQLParser::RuleWithClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(450);
    match(HogQLParser::WITH);
    setState(451);
    withExprList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TopClauseContext ------------------------------------------------------------------

HogQLParser::TopClauseContext::TopClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::TopClauseContext::TOP() {
  return getToken(HogQLParser::TOP, 0);
}

tree::TerminalNode* HogQLParser::TopClauseContext::DECIMAL_LITERAL() {
  return getToken(HogQLParser::DECIMAL_LITERAL, 0);
}

tree::TerminalNode* HogQLParser::TopClauseContext::WITH() {
  return getToken(HogQLParser::WITH, 0);
}

tree::TerminalNode* HogQLParser::TopClauseContext::TIES() {
  return getToken(HogQLParser::TIES, 0);
}


size_t HogQLParser::TopClauseContext::getRuleIndex() const {
  return HogQLParser::RuleTopClause;
}


std::any HogQLParser::TopClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitTopClause(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::TopClauseContext* HogQLParser::topClause() {
  TopClauseContext *_localctx = _tracker.createInstance<TopClauseContext>(_ctx, getState());
  enterRule(_localctx, 54, HogQLParser::RuleTopClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(453);
    match(HogQLParser::TOP);
    setState(454);
    match(HogQLParser::DECIMAL_LITERAL);
    setState(457);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 47, _ctx)) {
    case 1: {
      setState(455);
      match(HogQLParser::WITH);
      setState(456);
      match(HogQLParser::TIES);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FromClauseContext ------------------------------------------------------------------

HogQLParser::FromClauseContext::FromClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::FromClauseContext::FROM() {
  return getToken(HogQLParser::FROM, 0);
}

HogQLParser::JoinExprContext* HogQLParser::FromClauseContext::joinExpr() {
  return getRuleContext<HogQLParser::JoinExprContext>(0);
}


size_t HogQLParser::FromClauseContext::getRuleIndex() const {
  return HogQLParser::RuleFromClause;
}


std::any HogQLParser::FromClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitFromClause(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::FromClauseContext* HogQLParser::fromClause() {
  FromClauseContext *_localctx = _tracker.createInstance<FromClauseContext>(_ctx, getState());
  enterRule(_localctx, 56, HogQLParser::RuleFromClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(459);
    match(HogQLParser::FROM);
    setState(460);
    joinExpr(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArrayJoinClauseContext ------------------------------------------------------------------

HogQLParser::ArrayJoinClauseContext::ArrayJoinClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::ArrayJoinClauseContext::ARRAY() {
  return getToken(HogQLParser::ARRAY, 0);
}

tree::TerminalNode* HogQLParser::ArrayJoinClauseContext::JOIN() {
  return getToken(HogQLParser::JOIN, 0);
}

HogQLParser::ColumnExprListContext* HogQLParser::ArrayJoinClauseContext::columnExprList() {
  return getRuleContext<HogQLParser::ColumnExprListContext>(0);
}

tree::TerminalNode* HogQLParser::ArrayJoinClauseContext::LEFT() {
  return getToken(HogQLParser::LEFT, 0);
}

tree::TerminalNode* HogQLParser::ArrayJoinClauseContext::INNER() {
  return getToken(HogQLParser::INNER, 0);
}


size_t HogQLParser::ArrayJoinClauseContext::getRuleIndex() const {
  return HogQLParser::RuleArrayJoinClause;
}


std::any HogQLParser::ArrayJoinClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitArrayJoinClause(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::ArrayJoinClauseContext* HogQLParser::arrayJoinClause() {
  ArrayJoinClauseContext *_localctx = _tracker.createInstance<ArrayJoinClauseContext>(_ctx, getState());
  enterRule(_localctx, 58, HogQLParser::RuleArrayJoinClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(463);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HogQLParser::INNER

    || _la == HogQLParser::LEFT) {
      setState(462);
      _la = _input->LA(1);
      if (!(_la == HogQLParser::INNER

      || _la == HogQLParser::LEFT)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(465);
    match(HogQLParser::ARRAY);
    setState(466);
    match(HogQLParser::JOIN);
    setState(467);
    columnExprList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WindowClauseContext ------------------------------------------------------------------

HogQLParser::WindowClauseContext::WindowClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::WindowClauseContext::WINDOW() {
  return getToken(HogQLParser::WINDOW, 0);
}

std::vector<HogQLParser::IdentifierContext *> HogQLParser::WindowClauseContext::identifier() {
  return getRuleContexts<HogQLParser::IdentifierContext>();
}

HogQLParser::IdentifierContext* HogQLParser::WindowClauseContext::identifier(size_t i) {
  return getRuleContext<HogQLParser::IdentifierContext>(i);
}

std::vector<tree::TerminalNode *> HogQLParser::WindowClauseContext::AS() {
  return getTokens(HogQLParser::AS);
}

tree::TerminalNode* HogQLParser::WindowClauseContext::AS(size_t i) {
  return getToken(HogQLParser::AS, i);
}

std::vector<tree::TerminalNode *> HogQLParser::WindowClauseContext::LPAREN() {
  return getTokens(HogQLParser::LPAREN);
}

tree::TerminalNode* HogQLParser::WindowClauseContext::LPAREN(size_t i) {
  return getToken(HogQLParser::LPAREN, i);
}

std::vector<HogQLParser::WindowExprContext *> HogQLParser::WindowClauseContext::windowExpr() {
  return getRuleContexts<HogQLParser::WindowExprContext>();
}

HogQLParser::WindowExprContext* HogQLParser::WindowClauseContext::windowExpr(size_t i) {
  return getRuleContext<HogQLParser::WindowExprContext>(i);
}

std::vector<tree::TerminalNode *> HogQLParser::WindowClauseContext::RPAREN() {
  return getTokens(HogQLParser::RPAREN);
}

tree::TerminalNode* HogQLParser::WindowClauseContext::RPAREN(size_t i) {
  return getToken(HogQLParser::RPAREN, i);
}

std::vector<tree::TerminalNode *> HogQLParser::WindowClauseContext::COMMA() {
  return getTokens(HogQLParser::COMMA);
}

tree::TerminalNode* HogQLParser::WindowClauseContext::COMMA(size_t i) {
  return getToken(HogQLParser::COMMA, i);
}


size_t HogQLParser::WindowClauseContext::getRuleIndex() const {
  return HogQLParser::RuleWindowClause;
}


std::any HogQLParser::WindowClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitWindowClause(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::WindowClauseContext* HogQLParser::windowClause() {
  WindowClauseContext *_localctx = _tracker.createInstance<WindowClauseContext>(_ctx, getState());
  enterRule(_localctx, 60, HogQLParser::RuleWindowClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(469);
    match(HogQLParser::WINDOW);
    setState(470);
    identifier();
    setState(471);
    match(HogQLParser::AS);
    setState(472);
    match(HogQLParser::LPAREN);
    setState(473);
    windowExpr();
    setState(474);
    match(HogQLParser::RPAREN);
    setState(484);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == HogQLParser::COMMA) {
      setState(475);
      match(HogQLParser::COMMA);
      setState(476);
      identifier();
      setState(477);
      match(HogQLParser::AS);
      setState(478);
      match(HogQLParser::LPAREN);
      setState(479);
      windowExpr();
      setState(480);
      match(HogQLParser::RPAREN);
      setState(486);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PrewhereClauseContext ------------------------------------------------------------------

HogQLParser::PrewhereClauseContext::PrewhereClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::PrewhereClauseContext::PREWHERE() {
  return getToken(HogQLParser::PREWHERE, 0);
}

HogQLParser::ColumnExprContext* HogQLParser::PrewhereClauseContext::columnExpr() {
  return getRuleContext<HogQLParser::ColumnExprContext>(0);
}


size_t HogQLParser::PrewhereClauseContext::getRuleIndex() const {
  return HogQLParser::RulePrewhereClause;
}


std::any HogQLParser::PrewhereClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitPrewhereClause(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::PrewhereClauseContext* HogQLParser::prewhereClause() {
  PrewhereClauseContext *_localctx = _tracker.createInstance<PrewhereClauseContext>(_ctx, getState());
  enterRule(_localctx, 62, HogQLParser::RulePrewhereClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(487);
    match(HogQLParser::PREWHERE);
    setState(488);
    columnExpr(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WhereClauseContext ------------------------------------------------------------------

HogQLParser::WhereClauseContext::WhereClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::WhereClauseContext::WHERE() {
  return getToken(HogQLParser::WHERE, 0);
}

HogQLParser::ColumnExprContext* HogQLParser::WhereClauseContext::columnExpr() {
  return getRuleContext<HogQLParser::ColumnExprContext>(0);
}


size_t HogQLParser::WhereClauseContext::getRuleIndex() const {
  return HogQLParser::RuleWhereClause;
}


std::any HogQLParser::WhereClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitWhereClause(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::WhereClauseContext* HogQLParser::whereClause() {
  WhereClauseContext *_localctx = _tracker.createInstance<WhereClauseContext>(_ctx, getState());
  enterRule(_localctx, 64, HogQLParser::RuleWhereClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(490);
    match(HogQLParser::WHERE);
    setState(491);
    columnExpr(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GroupByClauseContext ------------------------------------------------------------------

HogQLParser::GroupByClauseContext::GroupByClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::GroupByClauseContext::GROUP() {
  return getToken(HogQLParser::GROUP, 0);
}

tree::TerminalNode* HogQLParser::GroupByClauseContext::BY() {
  return getToken(HogQLParser::BY, 0);
}

tree::TerminalNode* HogQLParser::GroupByClauseContext::LPAREN() {
  return getToken(HogQLParser::LPAREN, 0);
}

HogQLParser::ColumnExprListContext* HogQLParser::GroupByClauseContext::columnExprList() {
  return getRuleContext<HogQLParser::ColumnExprListContext>(0);
}

tree::TerminalNode* HogQLParser::GroupByClauseContext::RPAREN() {
  return getToken(HogQLParser::RPAREN, 0);
}

tree::TerminalNode* HogQLParser::GroupByClauseContext::CUBE() {
  return getToken(HogQLParser::CUBE, 0);
}

tree::TerminalNode* HogQLParser::GroupByClauseContext::ROLLUP() {
  return getToken(HogQLParser::ROLLUP, 0);
}


size_t HogQLParser::GroupByClauseContext::getRuleIndex() const {
  return HogQLParser::RuleGroupByClause;
}


std::any HogQLParser::GroupByClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitGroupByClause(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::GroupByClauseContext* HogQLParser::groupByClause() {
  GroupByClauseContext *_localctx = _tracker.createInstance<GroupByClauseContext>(_ctx, getState());
  enterRule(_localctx, 66, HogQLParser::RuleGroupByClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(493);
    match(HogQLParser::GROUP);
    setState(494);
    match(HogQLParser::BY);
    setState(501);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 50, _ctx)) {
    case 1: {
      setState(495);
      _la = _input->LA(1);
      if (!(_la == HogQLParser::CUBE

      || _la == HogQLParser::ROLLUP)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(496);
      match(HogQLParser::LPAREN);
      setState(497);
      columnExprList();
      setState(498);
      match(HogQLParser::RPAREN);
      break;
    }

    case 2: {
      setState(500);
      columnExprList();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- HavingClauseContext ------------------------------------------------------------------

HogQLParser::HavingClauseContext::HavingClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::HavingClauseContext::HAVING() {
  return getToken(HogQLParser::HAVING, 0);
}

HogQLParser::ColumnExprContext* HogQLParser::HavingClauseContext::columnExpr() {
  return getRuleContext<HogQLParser::ColumnExprContext>(0);
}


size_t HogQLParser::HavingClauseContext::getRuleIndex() const {
  return HogQLParser::RuleHavingClause;
}


std::any HogQLParser::HavingClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitHavingClause(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::HavingClauseContext* HogQLParser::havingClause() {
  HavingClauseContext *_localctx = _tracker.createInstance<HavingClauseContext>(_ctx, getState());
  enterRule(_localctx, 68, HogQLParser::RuleHavingClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(503);
    match(HogQLParser::HAVING);
    setState(504);
    columnExpr(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OrderByClauseContext ------------------------------------------------------------------

HogQLParser::OrderByClauseContext::OrderByClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::OrderByClauseContext::ORDER() {
  return getToken(HogQLParser::ORDER, 0);
}

tree::TerminalNode* HogQLParser::OrderByClauseContext::BY() {
  return getToken(HogQLParser::BY, 0);
}

HogQLParser::OrderExprListContext* HogQLParser::OrderByClauseContext::orderExprList() {
  return getRuleContext<HogQLParser::OrderExprListContext>(0);
}


size_t HogQLParser::OrderByClauseContext::getRuleIndex() const {
  return HogQLParser::RuleOrderByClause;
}


std::any HogQLParser::OrderByClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitOrderByClause(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::OrderByClauseContext* HogQLParser::orderByClause() {
  OrderByClauseContext *_localctx = _tracker.createInstance<OrderByClauseContext>(_ctx, getState());
  enterRule(_localctx, 70, HogQLParser::RuleOrderByClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(506);
    match(HogQLParser::ORDER);
    setState(507);
    match(HogQLParser::BY);
    setState(508);
    orderExprList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ProjectionOrderByClauseContext ------------------------------------------------------------------

HogQLParser::ProjectionOrderByClauseContext::ProjectionOrderByClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::ProjectionOrderByClauseContext::ORDER() {
  return getToken(HogQLParser::ORDER, 0);
}

tree::TerminalNode* HogQLParser::ProjectionOrderByClauseContext::BY() {
  return getToken(HogQLParser::BY, 0);
}

HogQLParser::ColumnExprListContext* HogQLParser::ProjectionOrderByClauseContext::columnExprList() {
  return getRuleContext<HogQLParser::ColumnExprListContext>(0);
}


size_t HogQLParser::ProjectionOrderByClauseContext::getRuleIndex() const {
  return HogQLParser::RuleProjectionOrderByClause;
}


std::any HogQLParser::ProjectionOrderByClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitProjectionOrderByClause(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::ProjectionOrderByClauseContext* HogQLParser::projectionOrderByClause() {
  ProjectionOrderByClauseContext *_localctx = _tracker.createInstance<ProjectionOrderByClauseContext>(_ctx, getState());
  enterRule(_localctx, 72, HogQLParser::RuleProjectionOrderByClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(510);
    match(HogQLParser::ORDER);
    setState(511);
    match(HogQLParser::BY);
    setState(512);
    columnExprList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LimitByClauseContext ------------------------------------------------------------------

HogQLParser::LimitByClauseContext::LimitByClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::LimitByClauseContext::LIMIT() {
  return getToken(HogQLParser::LIMIT, 0);
}

HogQLParser::LimitExprContext* HogQLParser::LimitByClauseContext::limitExpr() {
  return getRuleContext<HogQLParser::LimitExprContext>(0);
}

tree::TerminalNode* HogQLParser::LimitByClauseContext::BY() {
  return getToken(HogQLParser::BY, 0);
}

HogQLParser::ColumnExprListContext* HogQLParser::LimitByClauseContext::columnExprList() {
  return getRuleContext<HogQLParser::ColumnExprListContext>(0);
}


size_t HogQLParser::LimitByClauseContext::getRuleIndex() const {
  return HogQLParser::RuleLimitByClause;
}


std::any HogQLParser::LimitByClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitLimitByClause(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::LimitByClauseContext* HogQLParser::limitByClause() {
  LimitByClauseContext *_localctx = _tracker.createInstance<LimitByClauseContext>(_ctx, getState());
  enterRule(_localctx, 74, HogQLParser::RuleLimitByClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(514);
    match(HogQLParser::LIMIT);
    setState(515);
    limitExpr();
    setState(516);
    match(HogQLParser::BY);
    setState(517);
    columnExprList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LimitAndOffsetClauseContext ------------------------------------------------------------------

HogQLParser::LimitAndOffsetClauseContext::LimitAndOffsetClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::LimitAndOffsetClauseContext::LIMIT() {
  return getToken(HogQLParser::LIMIT, 0);
}

std::vector<HogQLParser::ColumnExprContext *> HogQLParser::LimitAndOffsetClauseContext::columnExpr() {
  return getRuleContexts<HogQLParser::ColumnExprContext>();
}

HogQLParser::ColumnExprContext* HogQLParser::LimitAndOffsetClauseContext::columnExpr(size_t i) {
  return getRuleContext<HogQLParser::ColumnExprContext>(i);
}

tree::TerminalNode* HogQLParser::LimitAndOffsetClauseContext::COMMA() {
  return getToken(HogQLParser::COMMA, 0);
}

tree::TerminalNode* HogQLParser::LimitAndOffsetClauseContext::WITH() {
  return getToken(HogQLParser::WITH, 0);
}

tree::TerminalNode* HogQLParser::LimitAndOffsetClauseContext::TIES() {
  return getToken(HogQLParser::TIES, 0);
}

tree::TerminalNode* HogQLParser::LimitAndOffsetClauseContext::OFFSET() {
  return getToken(HogQLParser::OFFSET, 0);
}


size_t HogQLParser::LimitAndOffsetClauseContext::getRuleIndex() const {
  return HogQLParser::RuleLimitAndOffsetClause;
}


std::any HogQLParser::LimitAndOffsetClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitLimitAndOffsetClause(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::LimitAndOffsetClauseContext* HogQLParser::limitAndOffsetClause() {
  LimitAndOffsetClauseContext *_localctx = _tracker.createInstance<LimitAndOffsetClauseContext>(_ctx, getState());
  enterRule(_localctx, 76, HogQLParser::RuleLimitAndOffsetClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(538);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 54, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(519);
      match(HogQLParser::LIMIT);
      setState(520);
      columnExpr(0);
      setState(523);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == HogQLParser::COMMA) {
        setState(521);
        match(HogQLParser::COMMA);
        setState(522);
        columnExpr(0);
      }
      setState(527);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == HogQLParser::WITH) {
        setState(525);
        match(HogQLParser::WITH);
        setState(526);
        match(HogQLParser::TIES);
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(529);
      match(HogQLParser::LIMIT);
      setState(530);
      columnExpr(0);
      setState(533);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == HogQLParser::WITH) {
        setState(531);
        match(HogQLParser::WITH);
        setState(532);
        match(HogQLParser::TIES);
      }
      setState(535);
      match(HogQLParser::OFFSET);
      setState(536);
      columnExpr(0);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OffsetOnlyClauseContext ------------------------------------------------------------------

HogQLParser::OffsetOnlyClauseContext::OffsetOnlyClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::OffsetOnlyClauseContext::OFFSET() {
  return getToken(HogQLParser::OFFSET, 0);
}

HogQLParser::ColumnExprContext* HogQLParser::OffsetOnlyClauseContext::columnExpr() {
  return getRuleContext<HogQLParser::ColumnExprContext>(0);
}


size_t HogQLParser::OffsetOnlyClauseContext::getRuleIndex() const {
  return HogQLParser::RuleOffsetOnlyClause;
}


std::any HogQLParser::OffsetOnlyClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitOffsetOnlyClause(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::OffsetOnlyClauseContext* HogQLParser::offsetOnlyClause() {
  OffsetOnlyClauseContext *_localctx = _tracker.createInstance<OffsetOnlyClauseContext>(_ctx, getState());
  enterRule(_localctx, 78, HogQLParser::RuleOffsetOnlyClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(540);
    match(HogQLParser::OFFSET);
    setState(541);
    columnExpr(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SettingsClauseContext ------------------------------------------------------------------

HogQLParser::SettingsClauseContext::SettingsClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::SettingsClauseContext::SETTINGS() {
  return getToken(HogQLParser::SETTINGS, 0);
}

HogQLParser::SettingExprListContext* HogQLParser::SettingsClauseContext::settingExprList() {
  return getRuleContext<HogQLParser::SettingExprListContext>(0);
}


size_t HogQLParser::SettingsClauseContext::getRuleIndex() const {
  return HogQLParser::RuleSettingsClause;
}


std::any HogQLParser::SettingsClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitSettingsClause(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::SettingsClauseContext* HogQLParser::settingsClause() {
  SettingsClauseContext *_localctx = _tracker.createInstance<SettingsClauseContext>(_ctx, getState());
  enterRule(_localctx, 80, HogQLParser::RuleSettingsClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(543);
    match(HogQLParser::SETTINGS);
    setState(544);
    settingExprList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- JoinExprContext ------------------------------------------------------------------

HogQLParser::JoinExprContext::JoinExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t HogQLParser::JoinExprContext::getRuleIndex() const {
  return HogQLParser::RuleJoinExpr;
}

void HogQLParser::JoinExprContext::copyFrom(JoinExprContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- JoinExprOpContext ------------------------------------------------------------------

std::vector<HogQLParser::JoinExprContext *> HogQLParser::JoinExprOpContext::joinExpr() {
  return getRuleContexts<HogQLParser::JoinExprContext>();
}

HogQLParser::JoinExprContext* HogQLParser::JoinExprOpContext::joinExpr(size_t i) {
  return getRuleContext<HogQLParser::JoinExprContext>(i);
}

tree::TerminalNode* HogQLParser::JoinExprOpContext::JOIN() {
  return getToken(HogQLParser::JOIN, 0);
}

HogQLParser::JoinConstraintClauseContext* HogQLParser::JoinExprOpContext::joinConstraintClause() {
  return getRuleContext<HogQLParser::JoinConstraintClauseContext>(0);
}

HogQLParser::JoinOpContext* HogQLParser::JoinExprOpContext::joinOp() {
  return getRuleContext<HogQLParser::JoinOpContext>(0);
}

HogQLParser::JoinExprOpContext::JoinExprOpContext(JoinExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::JoinExprOpContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitJoinExprOp(this);
  else
    return visitor->visitChildren(this);
}
//----------------- JoinExprTableContext ------------------------------------------------------------------

HogQLParser::TableExprContext* HogQLParser::JoinExprTableContext::tableExpr() {
  return getRuleContext<HogQLParser::TableExprContext>(0);
}

tree::TerminalNode* HogQLParser::JoinExprTableContext::FINAL() {
  return getToken(HogQLParser::FINAL, 0);
}

HogQLParser::SampleClauseContext* HogQLParser::JoinExprTableContext::sampleClause() {
  return getRuleContext<HogQLParser::SampleClauseContext>(0);
}

HogQLParser::JoinExprTableContext::JoinExprTableContext(JoinExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::JoinExprTableContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitJoinExprTable(this);
  else
    return visitor->visitChildren(this);
}
//----------------- JoinExprParensContext ------------------------------------------------------------------

tree::TerminalNode* HogQLParser::JoinExprParensContext::LPAREN() {
  return getToken(HogQLParser::LPAREN, 0);
}

HogQLParser::JoinExprContext* HogQLParser::JoinExprParensContext::joinExpr() {
  return getRuleContext<HogQLParser::JoinExprContext>(0);
}

tree::TerminalNode* HogQLParser::JoinExprParensContext::RPAREN() {
  return getToken(HogQLParser::RPAREN, 0);
}

HogQLParser::JoinExprParensContext::JoinExprParensContext(JoinExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::JoinExprParensContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitJoinExprParens(this);
  else
    return visitor->visitChildren(this);
}
//----------------- JoinExprCrossOpContext ------------------------------------------------------------------

std::vector<HogQLParser::JoinExprContext *> HogQLParser::JoinExprCrossOpContext::joinExpr() {
  return getRuleContexts<HogQLParser::JoinExprContext>();
}

HogQLParser::JoinExprContext* HogQLParser::JoinExprCrossOpContext::joinExpr(size_t i) {
  return getRuleContext<HogQLParser::JoinExprContext>(i);
}

HogQLParser::JoinOpCrossContext* HogQLParser::JoinExprCrossOpContext::joinOpCross() {
  return getRuleContext<HogQLParser::JoinOpCrossContext>(0);
}

HogQLParser::JoinExprCrossOpContext::JoinExprCrossOpContext(JoinExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::JoinExprCrossOpContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitJoinExprCrossOp(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::JoinExprContext* HogQLParser::joinExpr() {
   return joinExpr(0);
}

HogQLParser::JoinExprContext* HogQLParser::joinExpr(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  HogQLParser::JoinExprContext *_localctx = _tracker.createInstance<JoinExprContext>(_ctx, parentState);
  HogQLParser::JoinExprContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 82;
  enterRecursionRule(_localctx, 82, HogQLParser::RuleJoinExpr, precedence);

    size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(558);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 57, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<JoinExprTableContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;

      setState(547);
      tableExpr(0);
      setState(549);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 55, _ctx)) {
      case 1: {
        setState(548);
        match(HogQLParser::FINAL);
        break;
      }

      default:
        break;
      }
      setState(552);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 56, _ctx)) {
      case 1: {
        setState(551);
        sampleClause();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<JoinExprParensContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(554);
      match(HogQLParser::LPAREN);
      setState(555);
      joinExpr(0);
      setState(556);
      match(HogQLParser::RPAREN);
      break;
    }

    default:
      break;
    }
    _ctx->stop = _input->LT(-1);
    setState(574);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 60, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(572);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 59, _ctx)) {
        case 1: {
          auto newContext = _tracker.createInstance<JoinExprCrossOpContext>(_tracker.createInstance<JoinExprContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleJoinExpr);
          setState(560);

          if (!(precpred(_ctx, 3))) throw FailedPredicateException(this, "precpred(_ctx, 3)");
          setState(561);
          joinOpCross();
          setState(562);
          joinExpr(4);
          break;
        }

        case 2: {
          auto newContext = _tracker.createInstance<JoinExprOpContext>(_tracker.createInstance<JoinExprContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleJoinExpr);
          setState(564);

          if (!(precpred(_ctx, 4))) throw FailedPredicateException(this, "precpred(_ctx, 4)");
          setState(566);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if ((((_la & ~ 0x3fULL) == 0) &&
            ((1ULL << _la) & 18084835973136666) != 0) || _la == HogQLParser::RIGHT

          || _la == HogQLParser::SEMI) {
            setState(565);
            joinOp();
          }
          setState(568);
          match(HogQLParser::JOIN);
          setState(569);
          joinExpr(0);
          setState(570);
          joinConstraintClause();
          break;
        }

        default:
          break;
        } 
      }
      setState(576);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 60, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- JoinOpContext ------------------------------------------------------------------

HogQLParser::JoinOpContext::JoinOpContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t HogQLParser::JoinOpContext::getRuleIndex() const {
  return HogQLParser::RuleJoinOp;
}

void HogQLParser::JoinOpContext::copyFrom(JoinOpContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- JoinOpFullContext ------------------------------------------------------------------

tree::TerminalNode* HogQLParser::JoinOpFullContext::FULL() {
  return getToken(HogQLParser::FULL, 0);
}

tree::TerminalNode* HogQLParser::JoinOpFullContext::OUTER() {
  return getToken(HogQLParser::OUTER, 0);
}

tree::TerminalNode* HogQLParser::JoinOpFullContext::ALL() {
  return getToken(HogQLParser::ALL, 0);
}

tree::TerminalNode* HogQLParser::JoinOpFullContext::ANY() {
  return getToken(HogQLParser::ANY, 0);
}

HogQLParser::JoinOpFullContext::JoinOpFullContext(JoinOpContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::JoinOpFullContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitJoinOpFull(this);
  else
    return visitor->visitChildren(this);
}
//----------------- JoinOpInnerContext ------------------------------------------------------------------

tree::TerminalNode* HogQLParser::JoinOpInnerContext::INNER() {
  return getToken(HogQLParser::INNER, 0);
}

tree::TerminalNode* HogQLParser::JoinOpInnerContext::ALL() {
  return getToken(HogQLParser::ALL, 0);
}

tree::TerminalNode* HogQLParser::JoinOpInnerContext::ANY() {
  return getToken(HogQLParser::ANY, 0);
}

tree::TerminalNode* HogQLParser::JoinOpInnerContext::ASOF() {
  return getToken(HogQLParser::ASOF, 0);
}

HogQLParser::JoinOpInnerContext::JoinOpInnerContext(JoinOpContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::JoinOpInnerContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitJoinOpInner(this);
  else
    return visitor->visitChildren(this);
}
//----------------- JoinOpLeftRightContext ------------------------------------------------------------------

tree::TerminalNode* HogQLParser::JoinOpLeftRightContext::LEFT() {
  return getToken(HogQLParser::LEFT, 0);
}

tree::TerminalNode* HogQLParser::JoinOpLeftRightContext::RIGHT() {
  return getToken(HogQLParser::RIGHT, 0);
}

tree::TerminalNode* HogQLParser::JoinOpLeftRightContext::OUTER() {
  return getToken(HogQLParser::OUTER, 0);
}

tree::TerminalNode* HogQLParser::JoinOpLeftRightContext::SEMI() {
  return getToken(HogQLParser::SEMI, 0);
}

tree::TerminalNode* HogQLParser::JoinOpLeftRightContext::ALL() {
  return getToken(HogQLParser::ALL, 0);
}

tree::TerminalNode* HogQLParser::JoinOpLeftRightContext::ANTI() {
  return getToken(HogQLParser::ANTI, 0);
}

tree::TerminalNode* HogQLParser::JoinOpLeftRightContext::ANY() {
  return getToken(HogQLParser::ANY, 0);
}

tree::TerminalNode* HogQLParser::JoinOpLeftRightContext::ASOF() {
  return getToken(HogQLParser::ASOF, 0);
}

HogQLParser::JoinOpLeftRightContext::JoinOpLeftRightContext(JoinOpContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::JoinOpLeftRightContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitJoinOpLeftRight(this);
  else
    return visitor->visitChildren(this);
}
HogQLParser::JoinOpContext* HogQLParser::joinOp() {
  JoinOpContext *_localctx = _tracker.createInstance<JoinOpContext>(_ctx, getState());
  enterRule(_localctx, 84, HogQLParser::RuleJoinOp);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(620);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 74, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<HogQLParser::JoinOpInnerContext>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(586);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 63, _ctx)) {
      case 1: {
        setState(578);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 274) != 0)) {
          setState(577);
          _la = _input->LA(1);
          if (!((((_la & ~ 0x3fULL) == 0) &&
            ((1ULL << _la) & 274) != 0))) {
          _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
        }
        setState(580);
        match(HogQLParser::INNER);
        break;
      }

      case 2: {
        setState(581);
        match(HogQLParser::INNER);
        setState(583);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 274) != 0)) {
          setState(582);
          _la = _input->LA(1);
          if (!((((_la & ~ 0x3fULL) == 0) &&
            ((1ULL << _la) & 274) != 0))) {
          _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
        }
        break;
      }

      case 3: {
        setState(585);
        _la = _input->LA(1);
        if (!((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 274) != 0))) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

      default:
        break;
      }
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<HogQLParser::JoinOpLeftRightContext>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(602);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 68, _ctx)) {
      case 1: {
        setState(589);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 282) != 0) || _la == HogQLParser::SEMI) {
          setState(588);
          _la = _input->LA(1);
          if (!((((_la & ~ 0x3fULL) == 0) &&
            ((1ULL << _la) & 282) != 0) || _la == HogQLParser::SEMI)) {
          _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
        }
        setState(591);
        _la = _input->LA(1);
        if (!(_la == HogQLParser::LEFT

        || _la == HogQLParser::RIGHT)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(593);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == HogQLParser::OUTER) {
          setState(592);
          match(HogQLParser::OUTER);
        }
        break;
      }

      case 2: {
        setState(595);
        _la = _input->LA(1);
        if (!(_la == HogQLParser::LEFT

        || _la == HogQLParser::RIGHT)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(597);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == HogQLParser::OUTER) {
          setState(596);
          match(HogQLParser::OUTER);
        }
        setState(600);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 282) != 0) || _la == HogQLParser::SEMI) {
          setState(599);
          _la = _input->LA(1);
          if (!((((_la & ~ 0x3fULL) == 0) &&
            ((1ULL << _la) & 282) != 0) || _la == HogQLParser::SEMI)) {
          _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
        }
        break;
      }

      default:
        break;
      }
      break;
    }

    case 3: {
      _localctx = _tracker.createInstance<HogQLParser::JoinOpFullContext>(_localctx);
      enterOuterAlt(_localctx, 3);
      setState(618);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 73, _ctx)) {
      case 1: {
        setState(605);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == HogQLParser::ALL

        || _la == HogQLParser::ANY) {
          setState(604);
          _la = _input->LA(1);
          if (!(_la == HogQLParser::ALL

          || _la == HogQLParser::ANY)) {
          _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
        }
        setState(607);
        match(HogQLParser::FULL);
        setState(609);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == HogQLParser::OUTER) {
          setState(608);
          match(HogQLParser::OUTER);
        }
        break;
      }

      case 2: {
        setState(611);
        match(HogQLParser::FULL);
        setState(613);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == HogQLParser::OUTER) {
          setState(612);
          match(HogQLParser::OUTER);
        }
        setState(616);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == HogQLParser::ALL

        || _la == HogQLParser::ANY) {
          setState(615);
          _la = _input->LA(1);
          if (!(_la == HogQLParser::ALL

          || _la == HogQLParser::ANY)) {
          _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
        }
        break;
      }

      default:
        break;
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- JoinOpCrossContext ------------------------------------------------------------------

HogQLParser::JoinOpCrossContext::JoinOpCrossContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::JoinOpCrossContext::CROSS() {
  return getToken(HogQLParser::CROSS, 0);
}

tree::TerminalNode* HogQLParser::JoinOpCrossContext::JOIN() {
  return getToken(HogQLParser::JOIN, 0);
}

tree::TerminalNode* HogQLParser::JoinOpCrossContext::COMMA() {
  return getToken(HogQLParser::COMMA, 0);
}


size_t HogQLParser::JoinOpCrossContext::getRuleIndex() const {
  return HogQLParser::RuleJoinOpCross;
}


std::any HogQLParser::JoinOpCrossContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitJoinOpCross(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::JoinOpCrossContext* HogQLParser::joinOpCross() {
  JoinOpCrossContext *_localctx = _tracker.createInstance<JoinOpCrossContext>(_ctx, getState());
  enterRule(_localctx, 86, HogQLParser::RuleJoinOpCross);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(625);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case HogQLParser::CROSS: {
        enterOuterAlt(_localctx, 1);
        setState(622);
        match(HogQLParser::CROSS);
        setState(623);
        match(HogQLParser::JOIN);
        break;
      }

      case HogQLParser::COMMA: {
        enterOuterAlt(_localctx, 2);
        setState(624);
        match(HogQLParser::COMMA);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- JoinConstraintClauseContext ------------------------------------------------------------------

HogQLParser::JoinConstraintClauseContext::JoinConstraintClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::JoinConstraintClauseContext::ON() {
  return getToken(HogQLParser::ON, 0);
}

HogQLParser::ColumnExprListContext* HogQLParser::JoinConstraintClauseContext::columnExprList() {
  return getRuleContext<HogQLParser::ColumnExprListContext>(0);
}

tree::TerminalNode* HogQLParser::JoinConstraintClauseContext::USING() {
  return getToken(HogQLParser::USING, 0);
}

tree::TerminalNode* HogQLParser::JoinConstraintClauseContext::LPAREN() {
  return getToken(HogQLParser::LPAREN, 0);
}

tree::TerminalNode* HogQLParser::JoinConstraintClauseContext::RPAREN() {
  return getToken(HogQLParser::RPAREN, 0);
}


size_t HogQLParser::JoinConstraintClauseContext::getRuleIndex() const {
  return HogQLParser::RuleJoinConstraintClause;
}


std::any HogQLParser::JoinConstraintClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitJoinConstraintClause(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::JoinConstraintClauseContext* HogQLParser::joinConstraintClause() {
  JoinConstraintClauseContext *_localctx = _tracker.createInstance<JoinConstraintClauseContext>(_ctx, getState());
  enterRule(_localctx, 88, HogQLParser::RuleJoinConstraintClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(636);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 76, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(627);
      match(HogQLParser::ON);
      setState(628);
      columnExprList();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(629);
      match(HogQLParser::USING);
      setState(630);
      match(HogQLParser::LPAREN);
      setState(631);
      columnExprList();
      setState(632);
      match(HogQLParser::RPAREN);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(634);
      match(HogQLParser::USING);
      setState(635);
      columnExprList();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SampleClauseContext ------------------------------------------------------------------

HogQLParser::SampleClauseContext::SampleClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::SampleClauseContext::SAMPLE() {
  return getToken(HogQLParser::SAMPLE, 0);
}

std::vector<HogQLParser::RatioExprContext *> HogQLParser::SampleClauseContext::ratioExpr() {
  return getRuleContexts<HogQLParser::RatioExprContext>();
}

HogQLParser::RatioExprContext* HogQLParser::SampleClauseContext::ratioExpr(size_t i) {
  return getRuleContext<HogQLParser::RatioExprContext>(i);
}

tree::TerminalNode* HogQLParser::SampleClauseContext::OFFSET() {
  return getToken(HogQLParser::OFFSET, 0);
}


size_t HogQLParser::SampleClauseContext::getRuleIndex() const {
  return HogQLParser::RuleSampleClause;
}


std::any HogQLParser::SampleClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitSampleClause(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::SampleClauseContext* HogQLParser::sampleClause() {
  SampleClauseContext *_localctx = _tracker.createInstance<SampleClauseContext>(_ctx, getState());
  enterRule(_localctx, 90, HogQLParser::RuleSampleClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(638);
    match(HogQLParser::SAMPLE);
    setState(639);
    ratioExpr();
    setState(642);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 77, _ctx)) {
    case 1: {
      setState(640);
      match(HogQLParser::OFFSET);
      setState(641);
      ratioExpr();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LimitExprContext ------------------------------------------------------------------

HogQLParser::LimitExprContext::LimitExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<HogQLParser::ColumnExprContext *> HogQLParser::LimitExprContext::columnExpr() {
  return getRuleContexts<HogQLParser::ColumnExprContext>();
}

HogQLParser::ColumnExprContext* HogQLParser::LimitExprContext::columnExpr(size_t i) {
  return getRuleContext<HogQLParser::ColumnExprContext>(i);
}

tree::TerminalNode* HogQLParser::LimitExprContext::COMMA() {
  return getToken(HogQLParser::COMMA, 0);
}

tree::TerminalNode* HogQLParser::LimitExprContext::OFFSET() {
  return getToken(HogQLParser::OFFSET, 0);
}


size_t HogQLParser::LimitExprContext::getRuleIndex() const {
  return HogQLParser::RuleLimitExpr;
}


std::any HogQLParser::LimitExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitLimitExpr(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::LimitExprContext* HogQLParser::limitExpr() {
  LimitExprContext *_localctx = _tracker.createInstance<LimitExprContext>(_ctx, getState());
  enterRule(_localctx, 92, HogQLParser::RuleLimitExpr);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(644);
    columnExpr(0);
    setState(647);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HogQLParser::OFFSET

    || _la == HogQLParser::COMMA) {
      setState(645);
      _la = _input->LA(1);
      if (!(_la == HogQLParser::OFFSET

      || _la == HogQLParser::COMMA)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(646);
      columnExpr(0);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OrderExprListContext ------------------------------------------------------------------

HogQLParser::OrderExprListContext::OrderExprListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<HogQLParser::OrderExprContext *> HogQLParser::OrderExprListContext::orderExpr() {
  return getRuleContexts<HogQLParser::OrderExprContext>();
}

HogQLParser::OrderExprContext* HogQLParser::OrderExprListContext::orderExpr(size_t i) {
  return getRuleContext<HogQLParser::OrderExprContext>(i);
}

std::vector<tree::TerminalNode *> HogQLParser::OrderExprListContext::COMMA() {
  return getTokens(HogQLParser::COMMA);
}

tree::TerminalNode* HogQLParser::OrderExprListContext::COMMA(size_t i) {
  return getToken(HogQLParser::COMMA, i);
}


size_t HogQLParser::OrderExprListContext::getRuleIndex() const {
  return HogQLParser::RuleOrderExprList;
}


std::any HogQLParser::OrderExprListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitOrderExprList(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::OrderExprListContext* HogQLParser::orderExprList() {
  OrderExprListContext *_localctx = _tracker.createInstance<OrderExprListContext>(_ctx, getState());
  enterRule(_localctx, 94, HogQLParser::RuleOrderExprList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(649);
    orderExpr();
    setState(654);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == HogQLParser::COMMA) {
      setState(650);
      match(HogQLParser::COMMA);
      setState(651);
      orderExpr();
      setState(656);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OrderExprContext ------------------------------------------------------------------

HogQLParser::OrderExprContext::OrderExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HogQLParser::ColumnExprContext* HogQLParser::OrderExprContext::columnExpr() {
  return getRuleContext<HogQLParser::ColumnExprContext>(0);
}

tree::TerminalNode* HogQLParser::OrderExprContext::NULLS() {
  return getToken(HogQLParser::NULLS, 0);
}

tree::TerminalNode* HogQLParser::OrderExprContext::COLLATE() {
  return getToken(HogQLParser::COLLATE, 0);
}

tree::TerminalNode* HogQLParser::OrderExprContext::STRING_LITERAL() {
  return getToken(HogQLParser::STRING_LITERAL, 0);
}

tree::TerminalNode* HogQLParser::OrderExprContext::ASCENDING() {
  return getToken(HogQLParser::ASCENDING, 0);
}

tree::TerminalNode* HogQLParser::OrderExprContext::DESCENDING() {
  return getToken(HogQLParser::DESCENDING, 0);
}

tree::TerminalNode* HogQLParser::OrderExprContext::DESC() {
  return getToken(HogQLParser::DESC, 0);
}

tree::TerminalNode* HogQLParser::OrderExprContext::FIRST() {
  return getToken(HogQLParser::FIRST, 0);
}

tree::TerminalNode* HogQLParser::OrderExprContext::LAST() {
  return getToken(HogQLParser::LAST, 0);
}


size_t HogQLParser::OrderExprContext::getRuleIndex() const {
  return HogQLParser::RuleOrderExpr;
}


std::any HogQLParser::OrderExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitOrderExpr(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::OrderExprContext* HogQLParser::orderExpr() {
  OrderExprContext *_localctx = _tracker.createInstance<OrderExprContext>(_ctx, getState());
  enterRule(_localctx, 96, HogQLParser::RuleOrderExpr);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(657);
    columnExpr(0);
    setState(659);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 12583040) != 0)) {
      setState(658);
      _la = _input->LA(1);
      if (!((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 12583040) != 0))) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(663);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HogQLParser::NULLS) {
      setState(661);
      match(HogQLParser::NULLS);
      setState(662);
      _la = _input->LA(1);
      if (!(_la == HogQLParser::FIRST

      || _la == HogQLParser::LAST)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(667);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HogQLParser::COLLATE) {
      setState(665);
      match(HogQLParser::COLLATE);
      setState(666);
      match(HogQLParser::STRING_LITERAL);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RatioExprContext ------------------------------------------------------------------

HogQLParser::RatioExprContext::RatioExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HogQLParser::PlaceholderContext* HogQLParser::RatioExprContext::placeholder() {
  return getRuleContext<HogQLParser::PlaceholderContext>(0);
}

std::vector<HogQLParser::NumberLiteralContext *> HogQLParser::RatioExprContext::numberLiteral() {
  return getRuleContexts<HogQLParser::NumberLiteralContext>();
}

HogQLParser::NumberLiteralContext* HogQLParser::RatioExprContext::numberLiteral(size_t i) {
  return getRuleContext<HogQLParser::NumberLiteralContext>(i);
}

tree::TerminalNode* HogQLParser::RatioExprContext::SLASH() {
  return getToken(HogQLParser::SLASH, 0);
}


size_t HogQLParser::RatioExprContext::getRuleIndex() const {
  return HogQLParser::RuleRatioExpr;
}


std::any HogQLParser::RatioExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitRatioExpr(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::RatioExprContext* HogQLParser::ratioExpr() {
  RatioExprContext *_localctx = _tracker.createInstance<RatioExprContext>(_ctx, getState());
  enterRule(_localctx, 98, HogQLParser::RuleRatioExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(675);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case HogQLParser::LBRACE: {
        enterOuterAlt(_localctx, 1);
        setState(669);
        placeholder();
        break;
      }

      case HogQLParser::INF:
      case HogQLParser::NAN_SQL:
      case HogQLParser::FLOATING_LITERAL:
      case HogQLParser::OCTAL_LITERAL:
      case HogQLParser::DECIMAL_LITERAL:
      case HogQLParser::HEXADECIMAL_LITERAL:
      case HogQLParser::DASH:
      case HogQLParser::DOT:
      case HogQLParser::PLUS: {
        enterOuterAlt(_localctx, 2);
        setState(670);
        numberLiteral();
        setState(673);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 83, _ctx)) {
        case 1: {
          setState(671);
          match(HogQLParser::SLASH);
          setState(672);
          numberLiteral();
          break;
        }

        default:
          break;
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SettingExprListContext ------------------------------------------------------------------

HogQLParser::SettingExprListContext::SettingExprListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<HogQLParser::SettingExprContext *> HogQLParser::SettingExprListContext::settingExpr() {
  return getRuleContexts<HogQLParser::SettingExprContext>();
}

HogQLParser::SettingExprContext* HogQLParser::SettingExprListContext::settingExpr(size_t i) {
  return getRuleContext<HogQLParser::SettingExprContext>(i);
}

std::vector<tree::TerminalNode *> HogQLParser::SettingExprListContext::COMMA() {
  return getTokens(HogQLParser::COMMA);
}

tree::TerminalNode* HogQLParser::SettingExprListContext::COMMA(size_t i) {
  return getToken(HogQLParser::COMMA, i);
}


size_t HogQLParser::SettingExprListContext::getRuleIndex() const {
  return HogQLParser::RuleSettingExprList;
}


std::any HogQLParser::SettingExprListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitSettingExprList(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::SettingExprListContext* HogQLParser::settingExprList() {
  SettingExprListContext *_localctx = _tracker.createInstance<SettingExprListContext>(_ctx, getState());
  enterRule(_localctx, 100, HogQLParser::RuleSettingExprList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(677);
    settingExpr();
    setState(682);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == HogQLParser::COMMA) {
      setState(678);
      match(HogQLParser::COMMA);
      setState(679);
      settingExpr();
      setState(684);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SettingExprContext ------------------------------------------------------------------

HogQLParser::SettingExprContext::SettingExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HogQLParser::IdentifierContext* HogQLParser::SettingExprContext::identifier() {
  return getRuleContext<HogQLParser::IdentifierContext>(0);
}

tree::TerminalNode* HogQLParser::SettingExprContext::EQ_SINGLE() {
  return getToken(HogQLParser::EQ_SINGLE, 0);
}

HogQLParser::LiteralContext* HogQLParser::SettingExprContext::literal() {
  return getRuleContext<HogQLParser::LiteralContext>(0);
}


size_t HogQLParser::SettingExprContext::getRuleIndex() const {
  return HogQLParser::RuleSettingExpr;
}


std::any HogQLParser::SettingExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitSettingExpr(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::SettingExprContext* HogQLParser::settingExpr() {
  SettingExprContext *_localctx = _tracker.createInstance<SettingExprContext>(_ctx, getState());
  enterRule(_localctx, 102, HogQLParser::RuleSettingExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(685);
    identifier();
    setState(686);
    match(HogQLParser::EQ_SINGLE);
    setState(687);
    literal();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WindowExprContext ------------------------------------------------------------------

HogQLParser::WindowExprContext::WindowExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HogQLParser::WinPartitionByClauseContext* HogQLParser::WindowExprContext::winPartitionByClause() {
  return getRuleContext<HogQLParser::WinPartitionByClauseContext>(0);
}

HogQLParser::WinOrderByClauseContext* HogQLParser::WindowExprContext::winOrderByClause() {
  return getRuleContext<HogQLParser::WinOrderByClauseContext>(0);
}

HogQLParser::WinFrameClauseContext* HogQLParser::WindowExprContext::winFrameClause() {
  return getRuleContext<HogQLParser::WinFrameClauseContext>(0);
}


size_t HogQLParser::WindowExprContext::getRuleIndex() const {
  return HogQLParser::RuleWindowExpr;
}


std::any HogQLParser::WindowExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitWindowExpr(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::WindowExprContext* HogQLParser::windowExpr() {
  WindowExprContext *_localctx = _tracker.createInstance<WindowExprContext>(_ctx, getState());
  enterRule(_localctx, 104, HogQLParser::RuleWindowExpr);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(690);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HogQLParser::PARTITION) {
      setState(689);
      winPartitionByClause();
    }
    setState(693);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HogQLParser::ORDER) {
      setState(692);
      winOrderByClause();
    }
    setState(696);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HogQLParser::RANGE

    || _la == HogQLParser::ROWS) {
      setState(695);
      winFrameClause();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WinPartitionByClauseContext ------------------------------------------------------------------

HogQLParser::WinPartitionByClauseContext::WinPartitionByClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::WinPartitionByClauseContext::PARTITION() {
  return getToken(HogQLParser::PARTITION, 0);
}

tree::TerminalNode* HogQLParser::WinPartitionByClauseContext::BY() {
  return getToken(HogQLParser::BY, 0);
}

HogQLParser::ColumnExprListContext* HogQLParser::WinPartitionByClauseContext::columnExprList() {
  return getRuleContext<HogQLParser::ColumnExprListContext>(0);
}


size_t HogQLParser::WinPartitionByClauseContext::getRuleIndex() const {
  return HogQLParser::RuleWinPartitionByClause;
}


std::any HogQLParser::WinPartitionByClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitWinPartitionByClause(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::WinPartitionByClauseContext* HogQLParser::winPartitionByClause() {
  WinPartitionByClauseContext *_localctx = _tracker.createInstance<WinPartitionByClauseContext>(_ctx, getState());
  enterRule(_localctx, 106, HogQLParser::RuleWinPartitionByClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(698);
    match(HogQLParser::PARTITION);
    setState(699);
    match(HogQLParser::BY);
    setState(700);
    columnExprList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WinOrderByClauseContext ------------------------------------------------------------------

HogQLParser::WinOrderByClauseContext::WinOrderByClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::WinOrderByClauseContext::ORDER() {
  return getToken(HogQLParser::ORDER, 0);
}

tree::TerminalNode* HogQLParser::WinOrderByClauseContext::BY() {
  return getToken(HogQLParser::BY, 0);
}

HogQLParser::OrderExprListContext* HogQLParser::WinOrderByClauseContext::orderExprList() {
  return getRuleContext<HogQLParser::OrderExprListContext>(0);
}


size_t HogQLParser::WinOrderByClauseContext::getRuleIndex() const {
  return HogQLParser::RuleWinOrderByClause;
}


std::any HogQLParser::WinOrderByClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitWinOrderByClause(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::WinOrderByClauseContext* HogQLParser::winOrderByClause() {
  WinOrderByClauseContext *_localctx = _tracker.createInstance<WinOrderByClauseContext>(_ctx, getState());
  enterRule(_localctx, 108, HogQLParser::RuleWinOrderByClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(702);
    match(HogQLParser::ORDER);
    setState(703);
    match(HogQLParser::BY);
    setState(704);
    orderExprList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WinFrameClauseContext ------------------------------------------------------------------

HogQLParser::WinFrameClauseContext::WinFrameClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HogQLParser::WinFrameExtendContext* HogQLParser::WinFrameClauseContext::winFrameExtend() {
  return getRuleContext<HogQLParser::WinFrameExtendContext>(0);
}

tree::TerminalNode* HogQLParser::WinFrameClauseContext::ROWS() {
  return getToken(HogQLParser::ROWS, 0);
}

tree::TerminalNode* HogQLParser::WinFrameClauseContext::RANGE() {
  return getToken(HogQLParser::RANGE, 0);
}


size_t HogQLParser::WinFrameClauseContext::getRuleIndex() const {
  return HogQLParser::RuleWinFrameClause;
}


std::any HogQLParser::WinFrameClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitWinFrameClause(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::WinFrameClauseContext* HogQLParser::winFrameClause() {
  WinFrameClauseContext *_localctx = _tracker.createInstance<WinFrameClauseContext>(_ctx, getState());
  enterRule(_localctx, 110, HogQLParser::RuleWinFrameClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(706);
    _la = _input->LA(1);
    if (!(_la == HogQLParser::RANGE

    || _la == HogQLParser::ROWS)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(707);
    winFrameExtend();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WinFrameExtendContext ------------------------------------------------------------------

HogQLParser::WinFrameExtendContext::WinFrameExtendContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t HogQLParser::WinFrameExtendContext::getRuleIndex() const {
  return HogQLParser::RuleWinFrameExtend;
}

void HogQLParser::WinFrameExtendContext::copyFrom(WinFrameExtendContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- FrameStartContext ------------------------------------------------------------------

HogQLParser::WinFrameBoundContext* HogQLParser::FrameStartContext::winFrameBound() {
  return getRuleContext<HogQLParser::WinFrameBoundContext>(0);
}

HogQLParser::FrameStartContext::FrameStartContext(WinFrameExtendContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::FrameStartContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitFrameStart(this);
  else
    return visitor->visitChildren(this);
}
//----------------- FrameBetweenContext ------------------------------------------------------------------

tree::TerminalNode* HogQLParser::FrameBetweenContext::BETWEEN() {
  return getToken(HogQLParser::BETWEEN, 0);
}

std::vector<HogQLParser::WinFrameBoundContext *> HogQLParser::FrameBetweenContext::winFrameBound() {
  return getRuleContexts<HogQLParser::WinFrameBoundContext>();
}

HogQLParser::WinFrameBoundContext* HogQLParser::FrameBetweenContext::winFrameBound(size_t i) {
  return getRuleContext<HogQLParser::WinFrameBoundContext>(i);
}

tree::TerminalNode* HogQLParser::FrameBetweenContext::AND() {
  return getToken(HogQLParser::AND, 0);
}

HogQLParser::FrameBetweenContext::FrameBetweenContext(WinFrameExtendContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::FrameBetweenContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitFrameBetween(this);
  else
    return visitor->visitChildren(this);
}
HogQLParser::WinFrameExtendContext* HogQLParser::winFrameExtend() {
  WinFrameExtendContext *_localctx = _tracker.createInstance<WinFrameExtendContext>(_ctx, getState());
  enterRule(_localctx, 112, HogQLParser::RuleWinFrameExtend);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(715);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case HogQLParser::CURRENT:
      case HogQLParser::INF:
      case HogQLParser::NAN_SQL:
      case HogQLParser::UNBOUNDED:
      case HogQLParser::FLOATING_LITERAL:
      case HogQLParser::OCTAL_LITERAL:
      case HogQLParser::DECIMAL_LITERAL:
      case HogQLParser::HEXADECIMAL_LITERAL:
      case HogQLParser::DASH:
      case HogQLParser::DOT:
      case HogQLParser::PLUS: {
        _localctx = _tracker.createInstance<HogQLParser::FrameStartContext>(_localctx);
        enterOuterAlt(_localctx, 1);
        setState(709);
        winFrameBound();
        break;
      }

      case HogQLParser::BETWEEN: {
        _localctx = _tracker.createInstance<HogQLParser::FrameBetweenContext>(_localctx);
        enterOuterAlt(_localctx, 2);
        setState(710);
        match(HogQLParser::BETWEEN);
        setState(711);
        winFrameBound();
        setState(712);
        match(HogQLParser::AND);
        setState(713);
        winFrameBound();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WinFrameBoundContext ------------------------------------------------------------------

HogQLParser::WinFrameBoundContext::WinFrameBoundContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::WinFrameBoundContext::CURRENT() {
  return getToken(HogQLParser::CURRENT, 0);
}

tree::TerminalNode* HogQLParser::WinFrameBoundContext::ROW() {
  return getToken(HogQLParser::ROW, 0);
}

tree::TerminalNode* HogQLParser::WinFrameBoundContext::UNBOUNDED() {
  return getToken(HogQLParser::UNBOUNDED, 0);
}

tree::TerminalNode* HogQLParser::WinFrameBoundContext::PRECEDING() {
  return getToken(HogQLParser::PRECEDING, 0);
}

tree::TerminalNode* HogQLParser::WinFrameBoundContext::FOLLOWING() {
  return getToken(HogQLParser::FOLLOWING, 0);
}

HogQLParser::NumberLiteralContext* HogQLParser::WinFrameBoundContext::numberLiteral() {
  return getRuleContext<HogQLParser::NumberLiteralContext>(0);
}


size_t HogQLParser::WinFrameBoundContext::getRuleIndex() const {
  return HogQLParser::RuleWinFrameBound;
}


std::any HogQLParser::WinFrameBoundContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitWinFrameBound(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::WinFrameBoundContext* HogQLParser::winFrameBound() {
  WinFrameBoundContext *_localctx = _tracker.createInstance<WinFrameBoundContext>(_ctx, getState());
  enterRule(_localctx, 114, HogQLParser::RuleWinFrameBound);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(729);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 90, _ctx)) {
    case 1: {
      setState(717);
      match(HogQLParser::CURRENT);
      setState(718);
      match(HogQLParser::ROW);
      break;
    }

    case 2: {
      setState(719);
      match(HogQLParser::UNBOUNDED);
      setState(720);
      match(HogQLParser::PRECEDING);
      break;
    }

    case 3: {
      setState(721);
      match(HogQLParser::UNBOUNDED);
      setState(722);
      match(HogQLParser::FOLLOWING);
      break;
    }

    case 4: {
      setState(723);
      numberLiteral();
      setState(724);
      match(HogQLParser::PRECEDING);
      break;
    }

    case 5: {
      setState(726);
      numberLiteral();
      setState(727);
      match(HogQLParser::FOLLOWING);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExprContext ------------------------------------------------------------------

HogQLParser::ExprContext::ExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HogQLParser::ColumnExprContext* HogQLParser::ExprContext::columnExpr() {
  return getRuleContext<HogQLParser::ColumnExprContext>(0);
}

tree::TerminalNode* HogQLParser::ExprContext::EOF() {
  return getToken(HogQLParser::EOF, 0);
}


size_t HogQLParser::ExprContext::getRuleIndex() const {
  return HogQLParser::RuleExpr;
}


std::any HogQLParser::ExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitExpr(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::ExprContext* HogQLParser::expr() {
  ExprContext *_localctx = _tracker.createInstance<ExprContext>(_ctx, getState());
  enterRule(_localctx, 116, HogQLParser::RuleExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(731);
    columnExpr(0);
    setState(732);
    match(HogQLParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ColumnTypeExprContext ------------------------------------------------------------------

HogQLParser::ColumnTypeExprContext::ColumnTypeExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t HogQLParser::ColumnTypeExprContext::getRuleIndex() const {
  return HogQLParser::RuleColumnTypeExpr;
}

void HogQLParser::ColumnTypeExprContext::copyFrom(ColumnTypeExprContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- ColumnTypeExprNestedContext ------------------------------------------------------------------

std::vector<HogQLParser::IdentifierContext *> HogQLParser::ColumnTypeExprNestedContext::identifier() {
  return getRuleContexts<HogQLParser::IdentifierContext>();
}

HogQLParser::IdentifierContext* HogQLParser::ColumnTypeExprNestedContext::identifier(size_t i) {
  return getRuleContext<HogQLParser::IdentifierContext>(i);
}

tree::TerminalNode* HogQLParser::ColumnTypeExprNestedContext::LPAREN() {
  return getToken(HogQLParser::LPAREN, 0);
}

std::vector<HogQLParser::ColumnTypeExprContext *> HogQLParser::ColumnTypeExprNestedContext::columnTypeExpr() {
  return getRuleContexts<HogQLParser::ColumnTypeExprContext>();
}

HogQLParser::ColumnTypeExprContext* HogQLParser::ColumnTypeExprNestedContext::columnTypeExpr(size_t i) {
  return getRuleContext<HogQLParser::ColumnTypeExprContext>(i);
}

tree::TerminalNode* HogQLParser::ColumnTypeExprNestedContext::RPAREN() {
  return getToken(HogQLParser::RPAREN, 0);
}

std::vector<tree::TerminalNode *> HogQLParser::ColumnTypeExprNestedContext::COMMA() {
  return getTokens(HogQLParser::COMMA);
}

tree::TerminalNode* HogQLParser::ColumnTypeExprNestedContext::COMMA(size_t i) {
  return getToken(HogQLParser::COMMA, i);
}

HogQLParser::ColumnTypeExprNestedContext::ColumnTypeExprNestedContext(ColumnTypeExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnTypeExprNestedContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnTypeExprNested(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnTypeExprParamContext ------------------------------------------------------------------

HogQLParser::IdentifierContext* HogQLParser::ColumnTypeExprParamContext::identifier() {
  return getRuleContext<HogQLParser::IdentifierContext>(0);
}

tree::TerminalNode* HogQLParser::ColumnTypeExprParamContext::LPAREN() {
  return getToken(HogQLParser::LPAREN, 0);
}

tree::TerminalNode* HogQLParser::ColumnTypeExprParamContext::RPAREN() {
  return getToken(HogQLParser::RPAREN, 0);
}

HogQLParser::ColumnExprListContext* HogQLParser::ColumnTypeExprParamContext::columnExprList() {
  return getRuleContext<HogQLParser::ColumnExprListContext>(0);
}

HogQLParser::ColumnTypeExprParamContext::ColumnTypeExprParamContext(ColumnTypeExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnTypeExprParamContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnTypeExprParam(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnTypeExprSimpleContext ------------------------------------------------------------------

HogQLParser::IdentifierContext* HogQLParser::ColumnTypeExprSimpleContext::identifier() {
  return getRuleContext<HogQLParser::IdentifierContext>(0);
}

HogQLParser::ColumnTypeExprSimpleContext::ColumnTypeExprSimpleContext(ColumnTypeExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnTypeExprSimpleContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnTypeExprSimple(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnTypeExprComplexContext ------------------------------------------------------------------

HogQLParser::IdentifierContext* HogQLParser::ColumnTypeExprComplexContext::identifier() {
  return getRuleContext<HogQLParser::IdentifierContext>(0);
}

tree::TerminalNode* HogQLParser::ColumnTypeExprComplexContext::LPAREN() {
  return getToken(HogQLParser::LPAREN, 0);
}

std::vector<HogQLParser::ColumnTypeExprContext *> HogQLParser::ColumnTypeExprComplexContext::columnTypeExpr() {
  return getRuleContexts<HogQLParser::ColumnTypeExprContext>();
}

HogQLParser::ColumnTypeExprContext* HogQLParser::ColumnTypeExprComplexContext::columnTypeExpr(size_t i) {
  return getRuleContext<HogQLParser::ColumnTypeExprContext>(i);
}

tree::TerminalNode* HogQLParser::ColumnTypeExprComplexContext::RPAREN() {
  return getToken(HogQLParser::RPAREN, 0);
}

std::vector<tree::TerminalNode *> HogQLParser::ColumnTypeExprComplexContext::COMMA() {
  return getTokens(HogQLParser::COMMA);
}

tree::TerminalNode* HogQLParser::ColumnTypeExprComplexContext::COMMA(size_t i) {
  return getToken(HogQLParser::COMMA, i);
}

HogQLParser::ColumnTypeExprComplexContext::ColumnTypeExprComplexContext(ColumnTypeExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnTypeExprComplexContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnTypeExprComplex(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnTypeExprEnumContext ------------------------------------------------------------------

HogQLParser::IdentifierContext* HogQLParser::ColumnTypeExprEnumContext::identifier() {
  return getRuleContext<HogQLParser::IdentifierContext>(0);
}

tree::TerminalNode* HogQLParser::ColumnTypeExprEnumContext::LPAREN() {
  return getToken(HogQLParser::LPAREN, 0);
}

std::vector<HogQLParser::EnumValueContext *> HogQLParser::ColumnTypeExprEnumContext::enumValue() {
  return getRuleContexts<HogQLParser::EnumValueContext>();
}

HogQLParser::EnumValueContext* HogQLParser::ColumnTypeExprEnumContext::enumValue(size_t i) {
  return getRuleContext<HogQLParser::EnumValueContext>(i);
}

tree::TerminalNode* HogQLParser::ColumnTypeExprEnumContext::RPAREN() {
  return getToken(HogQLParser::RPAREN, 0);
}

std::vector<tree::TerminalNode *> HogQLParser::ColumnTypeExprEnumContext::COMMA() {
  return getTokens(HogQLParser::COMMA);
}

tree::TerminalNode* HogQLParser::ColumnTypeExprEnumContext::COMMA(size_t i) {
  return getToken(HogQLParser::COMMA, i);
}

HogQLParser::ColumnTypeExprEnumContext::ColumnTypeExprEnumContext(ColumnTypeExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnTypeExprEnumContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnTypeExprEnum(this);
  else
    return visitor->visitChildren(this);
}
HogQLParser::ColumnTypeExprContext* HogQLParser::columnTypeExpr() {
  ColumnTypeExprContext *_localctx = _tracker.createInstance<ColumnTypeExprContext>(_ctx, getState());
  enterRule(_localctx, 118, HogQLParser::RuleColumnTypeExpr);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(790);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 98, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<HogQLParser::ColumnTypeExprSimpleContext>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(734);
      identifier();
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<HogQLParser::ColumnTypeExprNestedContext>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(735);
      identifier();
      setState(736);
      match(HogQLParser::LPAREN);
      setState(737);
      identifier();
      setState(738);
      columnTypeExpr();
      setState(745);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 91, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(739);
          match(HogQLParser::COMMA);
          setState(740);
          identifier();
          setState(741);
          columnTypeExpr(); 
        }
        setState(747);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 91, _ctx);
      }
      setState(749);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == HogQLParser::COMMA) {
        setState(748);
        match(HogQLParser::COMMA);
      }
      setState(751);
      match(HogQLParser::RPAREN);
      break;
    }

    case 3: {
      _localctx = _tracker.createInstance<HogQLParser::ColumnTypeExprEnumContext>(_localctx);
      enterOuterAlt(_localctx, 3);
      setState(753);
      identifier();
      setState(754);
      match(HogQLParser::LPAREN);
      setState(755);
      enumValue();
      setState(760);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 93, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(756);
          match(HogQLParser::COMMA);
          setState(757);
          enumValue(); 
        }
        setState(762);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 93, _ctx);
      }
      setState(764);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == HogQLParser::COMMA) {
        setState(763);
        match(HogQLParser::COMMA);
      }
      setState(766);
      match(HogQLParser::RPAREN);
      break;
    }

    case 4: {
      _localctx = _tracker.createInstance<HogQLParser::ColumnTypeExprComplexContext>(_localctx);
      enterOuterAlt(_localctx, 4);
      setState(768);
      identifier();
      setState(769);
      match(HogQLParser::LPAREN);
      setState(770);
      columnTypeExpr();
      setState(775);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 95, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(771);
          match(HogQLParser::COMMA);
          setState(772);
          columnTypeExpr(); 
        }
        setState(777);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 95, _ctx);
      }
      setState(779);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == HogQLParser::COMMA) {
        setState(778);
        match(HogQLParser::COMMA);
      }
      setState(781);
      match(HogQLParser::RPAREN);
      break;
    }

    case 5: {
      _localctx = _tracker.createInstance<HogQLParser::ColumnTypeExprParamContext>(_localctx);
      enterOuterAlt(_localctx, 5);
      setState(783);
      identifier();
      setState(784);
      match(HogQLParser::LPAREN);
      setState(786);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -36169677449216002) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & 723944289947615231) != 0) || ((((_la - 131) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 131)) & 18455) != 0)) {
        setState(785);
        columnExprList();
      }
      setState(788);
      match(HogQLParser::RPAREN);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ColumnExprListContext ------------------------------------------------------------------

HogQLParser::ColumnExprListContext::ColumnExprListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<HogQLParser::ColumnExprContext *> HogQLParser::ColumnExprListContext::columnExpr() {
  return getRuleContexts<HogQLParser::ColumnExprContext>();
}

HogQLParser::ColumnExprContext* HogQLParser::ColumnExprListContext::columnExpr(size_t i) {
  return getRuleContext<HogQLParser::ColumnExprContext>(i);
}

std::vector<tree::TerminalNode *> HogQLParser::ColumnExprListContext::COMMA() {
  return getTokens(HogQLParser::COMMA);
}

tree::TerminalNode* HogQLParser::ColumnExprListContext::COMMA(size_t i) {
  return getToken(HogQLParser::COMMA, i);
}


size_t HogQLParser::ColumnExprListContext::getRuleIndex() const {
  return HogQLParser::RuleColumnExprList;
}


std::any HogQLParser::ColumnExprListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprList(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::ColumnExprListContext* HogQLParser::columnExprList() {
  ColumnExprListContext *_localctx = _tracker.createInstance<ColumnExprListContext>(_ctx, getState());
  enterRule(_localctx, 120, HogQLParser::RuleColumnExprList);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(792);
    columnExpr(0);
    setState(797);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 99, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(793);
        match(HogQLParser::COMMA);
        setState(794);
        columnExpr(0); 
      }
      setState(799);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 99, _ctx);
    }
    setState(801);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 100, _ctx)) {
    case 1: {
      setState(800);
      match(HogQLParser::COMMA);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ColumnExprContext ------------------------------------------------------------------

HogQLParser::ColumnExprContext::ColumnExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t HogQLParser::ColumnExprContext::getRuleIndex() const {
  return HogQLParser::RuleColumnExpr;
}

void HogQLParser::ColumnExprContext::copyFrom(ColumnExprContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- ColumnExprTernaryOpContext ------------------------------------------------------------------

std::vector<HogQLParser::ColumnExprContext *> HogQLParser::ColumnExprTernaryOpContext::columnExpr() {
  return getRuleContexts<HogQLParser::ColumnExprContext>();
}

HogQLParser::ColumnExprContext* HogQLParser::ColumnExprTernaryOpContext::columnExpr(size_t i) {
  return getRuleContext<HogQLParser::ColumnExprContext>(i);
}

tree::TerminalNode* HogQLParser::ColumnExprTernaryOpContext::QUERY() {
  return getToken(HogQLParser::QUERY, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprTernaryOpContext::COLON() {
  return getToken(HogQLParser::COLON, 0);
}

HogQLParser::ColumnExprTernaryOpContext::ColumnExprTernaryOpContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprTernaryOpContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprTernaryOp(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprAliasContext ------------------------------------------------------------------

HogQLParser::ColumnExprContext* HogQLParser::ColumnExprAliasContext::columnExpr() {
  return getRuleContext<HogQLParser::ColumnExprContext>(0);
}

tree::TerminalNode* HogQLParser::ColumnExprAliasContext::AS() {
  return getToken(HogQLParser::AS, 0);
}

HogQLParser::IdentifierContext* HogQLParser::ColumnExprAliasContext::identifier() {
  return getRuleContext<HogQLParser::IdentifierContext>(0);
}

tree::TerminalNode* HogQLParser::ColumnExprAliasContext::STRING_LITERAL() {
  return getToken(HogQLParser::STRING_LITERAL, 0);
}

HogQLParser::ColumnExprAliasContext::ColumnExprAliasContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprAliasContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprAlias(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprNegateContext ------------------------------------------------------------------

tree::TerminalNode* HogQLParser::ColumnExprNegateContext::DASH() {
  return getToken(HogQLParser::DASH, 0);
}

HogQLParser::ColumnExprContext* HogQLParser::ColumnExprNegateContext::columnExpr() {
  return getRuleContext<HogQLParser::ColumnExprContext>(0);
}

HogQLParser::ColumnExprNegateContext::ColumnExprNegateContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprNegateContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprNegate(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprDictContext ------------------------------------------------------------------

tree::TerminalNode* HogQLParser::ColumnExprDictContext::LBRACE() {
  return getToken(HogQLParser::LBRACE, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprDictContext::RBRACE() {
  return getToken(HogQLParser::RBRACE, 0);
}

HogQLParser::KvPairListContext* HogQLParser::ColumnExprDictContext::kvPairList() {
  return getRuleContext<HogQLParser::KvPairListContext>(0);
}

HogQLParser::ColumnExprDictContext::ColumnExprDictContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprDictContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprDict(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprSubqueryContext ------------------------------------------------------------------

tree::TerminalNode* HogQLParser::ColumnExprSubqueryContext::LPAREN() {
  return getToken(HogQLParser::LPAREN, 0);
}

HogQLParser::SelectSetStmtContext* HogQLParser::ColumnExprSubqueryContext::selectSetStmt() {
  return getRuleContext<HogQLParser::SelectSetStmtContext>(0);
}

tree::TerminalNode* HogQLParser::ColumnExprSubqueryContext::RPAREN() {
  return getToken(HogQLParser::RPAREN, 0);
}

HogQLParser::ColumnExprSubqueryContext::ColumnExprSubqueryContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprSubqueryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprSubquery(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprLiteralContext ------------------------------------------------------------------

HogQLParser::LiteralContext* HogQLParser::ColumnExprLiteralContext::literal() {
  return getRuleContext<HogQLParser::LiteralContext>(0);
}

HogQLParser::ColumnExprLiteralContext::ColumnExprLiteralContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprLiteral(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprArrayContext ------------------------------------------------------------------

tree::TerminalNode* HogQLParser::ColumnExprArrayContext::LBRACKET() {
  return getToken(HogQLParser::LBRACKET, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprArrayContext::RBRACKET() {
  return getToken(HogQLParser::RBRACKET, 0);
}

HogQLParser::ColumnExprListContext* HogQLParser::ColumnExprArrayContext::columnExprList() {
  return getRuleContext<HogQLParser::ColumnExprListContext>(0);
}

HogQLParser::ColumnExprArrayContext::ColumnExprArrayContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprArrayContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprArray(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprSubstringContext ------------------------------------------------------------------

tree::TerminalNode* HogQLParser::ColumnExprSubstringContext::SUBSTRING() {
  return getToken(HogQLParser::SUBSTRING, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprSubstringContext::LPAREN() {
  return getToken(HogQLParser::LPAREN, 0);
}

std::vector<HogQLParser::ColumnExprContext *> HogQLParser::ColumnExprSubstringContext::columnExpr() {
  return getRuleContexts<HogQLParser::ColumnExprContext>();
}

HogQLParser::ColumnExprContext* HogQLParser::ColumnExprSubstringContext::columnExpr(size_t i) {
  return getRuleContext<HogQLParser::ColumnExprContext>(i);
}

tree::TerminalNode* HogQLParser::ColumnExprSubstringContext::FROM() {
  return getToken(HogQLParser::FROM, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprSubstringContext::RPAREN() {
  return getToken(HogQLParser::RPAREN, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprSubstringContext::FOR() {
  return getToken(HogQLParser::FOR, 0);
}

HogQLParser::ColumnExprSubstringContext::ColumnExprSubstringContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprSubstringContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprSubstring(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprCastContext ------------------------------------------------------------------

tree::TerminalNode* HogQLParser::ColumnExprCastContext::CAST() {
  return getToken(HogQLParser::CAST, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprCastContext::LPAREN() {
  return getToken(HogQLParser::LPAREN, 0);
}

HogQLParser::ColumnExprContext* HogQLParser::ColumnExprCastContext::columnExpr() {
  return getRuleContext<HogQLParser::ColumnExprContext>(0);
}

tree::TerminalNode* HogQLParser::ColumnExprCastContext::AS() {
  return getToken(HogQLParser::AS, 0);
}

HogQLParser::ColumnTypeExprContext* HogQLParser::ColumnExprCastContext::columnTypeExpr() {
  return getRuleContext<HogQLParser::ColumnTypeExprContext>(0);
}

tree::TerminalNode* HogQLParser::ColumnExprCastContext::RPAREN() {
  return getToken(HogQLParser::RPAREN, 0);
}

HogQLParser::ColumnExprCastContext::ColumnExprCastContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprCastContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprCast(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprOrContext ------------------------------------------------------------------

std::vector<HogQLParser::ColumnExprContext *> HogQLParser::ColumnExprOrContext::columnExpr() {
  return getRuleContexts<HogQLParser::ColumnExprContext>();
}

HogQLParser::ColumnExprContext* HogQLParser::ColumnExprOrContext::columnExpr(size_t i) {
  return getRuleContext<HogQLParser::ColumnExprContext>(i);
}

tree::TerminalNode* HogQLParser::ColumnExprOrContext::OR() {
  return getToken(HogQLParser::OR, 0);
}

HogQLParser::ColumnExprOrContext::ColumnExprOrContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprOrContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprOr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprNullTupleAccessContext ------------------------------------------------------------------

HogQLParser::ColumnExprContext* HogQLParser::ColumnExprNullTupleAccessContext::columnExpr() {
  return getRuleContext<HogQLParser::ColumnExprContext>(0);
}

tree::TerminalNode* HogQLParser::ColumnExprNullTupleAccessContext::NULL_PROPERTY() {
  return getToken(HogQLParser::NULL_PROPERTY, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprNullTupleAccessContext::DECIMAL_LITERAL() {
  return getToken(HogQLParser::DECIMAL_LITERAL, 0);
}

HogQLParser::ColumnExprNullTupleAccessContext::ColumnExprNullTupleAccessContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprNullTupleAccessContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprNullTupleAccess(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprPrecedence1Context ------------------------------------------------------------------

std::vector<HogQLParser::ColumnExprContext *> HogQLParser::ColumnExprPrecedence1Context::columnExpr() {
  return getRuleContexts<HogQLParser::ColumnExprContext>();
}

HogQLParser::ColumnExprContext* HogQLParser::ColumnExprPrecedence1Context::columnExpr(size_t i) {
  return getRuleContext<HogQLParser::ColumnExprContext>(i);
}

tree::TerminalNode* HogQLParser::ColumnExprPrecedence1Context::ASTERISK() {
  return getToken(HogQLParser::ASTERISK, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprPrecedence1Context::SLASH() {
  return getToken(HogQLParser::SLASH, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprPrecedence1Context::PERCENT() {
  return getToken(HogQLParser::PERCENT, 0);
}

HogQLParser::ColumnExprPrecedence1Context::ColumnExprPrecedence1Context(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprPrecedence1Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprPrecedence1(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprPrecedence2Context ------------------------------------------------------------------

std::vector<HogQLParser::ColumnExprContext *> HogQLParser::ColumnExprPrecedence2Context::columnExpr() {
  return getRuleContexts<HogQLParser::ColumnExprContext>();
}

HogQLParser::ColumnExprContext* HogQLParser::ColumnExprPrecedence2Context::columnExpr(size_t i) {
  return getRuleContext<HogQLParser::ColumnExprContext>(i);
}

tree::TerminalNode* HogQLParser::ColumnExprPrecedence2Context::PLUS() {
  return getToken(HogQLParser::PLUS, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprPrecedence2Context::DASH() {
  return getToken(HogQLParser::DASH, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprPrecedence2Context::CONCAT() {
  return getToken(HogQLParser::CONCAT, 0);
}

HogQLParser::ColumnExprPrecedence2Context::ColumnExprPrecedence2Context(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprPrecedence2Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprPrecedence2(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprPrecedence3Context ------------------------------------------------------------------

std::vector<HogQLParser::ColumnExprContext *> HogQLParser::ColumnExprPrecedence3Context::columnExpr() {
  return getRuleContexts<HogQLParser::ColumnExprContext>();
}

HogQLParser::ColumnExprContext* HogQLParser::ColumnExprPrecedence3Context::columnExpr(size_t i) {
  return getRuleContext<HogQLParser::ColumnExprContext>(i);
}

tree::TerminalNode* HogQLParser::ColumnExprPrecedence3Context::IN() {
  return getToken(HogQLParser::IN, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprPrecedence3Context::EQ_DOUBLE() {
  return getToken(HogQLParser::EQ_DOUBLE, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprPrecedence3Context::EQ_SINGLE() {
  return getToken(HogQLParser::EQ_SINGLE, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprPrecedence3Context::NOT_EQ() {
  return getToken(HogQLParser::NOT_EQ, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprPrecedence3Context::LT_EQ() {
  return getToken(HogQLParser::LT_EQ, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprPrecedence3Context::LT() {
  return getToken(HogQLParser::LT, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprPrecedence3Context::GT_EQ() {
  return getToken(HogQLParser::GT_EQ, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprPrecedence3Context::GT() {
  return getToken(HogQLParser::GT, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprPrecedence3Context::LIKE() {
  return getToken(HogQLParser::LIKE, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprPrecedence3Context::ILIKE() {
  return getToken(HogQLParser::ILIKE, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprPrecedence3Context::REGEX_SINGLE() {
  return getToken(HogQLParser::REGEX_SINGLE, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprPrecedence3Context::REGEX_DOUBLE() {
  return getToken(HogQLParser::REGEX_DOUBLE, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprPrecedence3Context::NOT_REGEX() {
  return getToken(HogQLParser::NOT_REGEX, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprPrecedence3Context::IREGEX_SINGLE() {
  return getToken(HogQLParser::IREGEX_SINGLE, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprPrecedence3Context::IREGEX_DOUBLE() {
  return getToken(HogQLParser::IREGEX_DOUBLE, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprPrecedence3Context::NOT_IREGEX() {
  return getToken(HogQLParser::NOT_IREGEX, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprPrecedence3Context::COHORT() {
  return getToken(HogQLParser::COHORT, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprPrecedence3Context::NOT() {
  return getToken(HogQLParser::NOT, 0);
}

HogQLParser::ColumnExprPrecedence3Context::ColumnExprPrecedence3Context(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprPrecedence3Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprPrecedence3(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprIntervalContext ------------------------------------------------------------------

tree::TerminalNode* HogQLParser::ColumnExprIntervalContext::INTERVAL() {
  return getToken(HogQLParser::INTERVAL, 0);
}

HogQLParser::ColumnExprContext* HogQLParser::ColumnExprIntervalContext::columnExpr() {
  return getRuleContext<HogQLParser::ColumnExprContext>(0);
}

HogQLParser::IntervalContext* HogQLParser::ColumnExprIntervalContext::interval() {
  return getRuleContext<HogQLParser::IntervalContext>(0);
}

HogQLParser::ColumnExprIntervalContext::ColumnExprIntervalContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprIntervalContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprInterval(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprCallSelectContext ------------------------------------------------------------------

HogQLParser::ColumnExprContext* HogQLParser::ColumnExprCallSelectContext::columnExpr() {
  return getRuleContext<HogQLParser::ColumnExprContext>(0);
}

tree::TerminalNode* HogQLParser::ColumnExprCallSelectContext::LPAREN() {
  return getToken(HogQLParser::LPAREN, 0);
}

HogQLParser::SelectSetStmtContext* HogQLParser::ColumnExprCallSelectContext::selectSetStmt() {
  return getRuleContext<HogQLParser::SelectSetStmtContext>(0);
}

tree::TerminalNode* HogQLParser::ColumnExprCallSelectContext::RPAREN() {
  return getToken(HogQLParser::RPAREN, 0);
}

HogQLParser::ColumnExprCallSelectContext::ColumnExprCallSelectContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprCallSelectContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprCallSelect(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprIsNullContext ------------------------------------------------------------------

HogQLParser::ColumnExprContext* HogQLParser::ColumnExprIsNullContext::columnExpr() {
  return getRuleContext<HogQLParser::ColumnExprContext>(0);
}

tree::TerminalNode* HogQLParser::ColumnExprIsNullContext::IS() {
  return getToken(HogQLParser::IS, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprIsNullContext::NULL_SQL() {
  return getToken(HogQLParser::NULL_SQL, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprIsNullContext::NOT() {
  return getToken(HogQLParser::NOT, 0);
}

HogQLParser::ColumnExprIsNullContext::ColumnExprIsNullContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprIsNullContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprIsNull(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprWinFunctionTargetContext ------------------------------------------------------------------

std::vector<HogQLParser::IdentifierContext *> HogQLParser::ColumnExprWinFunctionTargetContext::identifier() {
  return getRuleContexts<HogQLParser::IdentifierContext>();
}

HogQLParser::IdentifierContext* HogQLParser::ColumnExprWinFunctionTargetContext::identifier(size_t i) {
  return getRuleContext<HogQLParser::IdentifierContext>(i);
}

tree::TerminalNode* HogQLParser::ColumnExprWinFunctionTargetContext::OVER() {
  return getToken(HogQLParser::OVER, 0);
}

std::vector<tree::TerminalNode *> HogQLParser::ColumnExprWinFunctionTargetContext::LPAREN() {
  return getTokens(HogQLParser::LPAREN);
}

tree::TerminalNode* HogQLParser::ColumnExprWinFunctionTargetContext::LPAREN(size_t i) {
  return getToken(HogQLParser::LPAREN, i);
}

std::vector<tree::TerminalNode *> HogQLParser::ColumnExprWinFunctionTargetContext::RPAREN() {
  return getTokens(HogQLParser::RPAREN);
}

tree::TerminalNode* HogQLParser::ColumnExprWinFunctionTargetContext::RPAREN(size_t i) {
  return getToken(HogQLParser::RPAREN, i);
}

std::vector<HogQLParser::ColumnExprListContext *> HogQLParser::ColumnExprWinFunctionTargetContext::columnExprList() {
  return getRuleContexts<HogQLParser::ColumnExprListContext>();
}

HogQLParser::ColumnExprListContext* HogQLParser::ColumnExprWinFunctionTargetContext::columnExprList(size_t i) {
  return getRuleContext<HogQLParser::ColumnExprListContext>(i);
}

tree::TerminalNode* HogQLParser::ColumnExprWinFunctionTargetContext::DISTINCT() {
  return getToken(HogQLParser::DISTINCT, 0);
}

HogQLParser::ColumnExprWinFunctionTargetContext::ColumnExprWinFunctionTargetContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprWinFunctionTargetContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprWinFunctionTarget(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprNullPropertyAccessContext ------------------------------------------------------------------

HogQLParser::ColumnExprContext* HogQLParser::ColumnExprNullPropertyAccessContext::columnExpr() {
  return getRuleContext<HogQLParser::ColumnExprContext>(0);
}

tree::TerminalNode* HogQLParser::ColumnExprNullPropertyAccessContext::NULL_PROPERTY() {
  return getToken(HogQLParser::NULL_PROPERTY, 0);
}

HogQLParser::IdentifierContext* HogQLParser::ColumnExprNullPropertyAccessContext::identifier() {
  return getRuleContext<HogQLParser::IdentifierContext>(0);
}

HogQLParser::ColumnExprNullPropertyAccessContext::ColumnExprNullPropertyAccessContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprNullPropertyAccessContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprNullPropertyAccess(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprIntervalStringContext ------------------------------------------------------------------

tree::TerminalNode* HogQLParser::ColumnExprIntervalStringContext::INTERVAL() {
  return getToken(HogQLParser::INTERVAL, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprIntervalStringContext::STRING_LITERAL() {
  return getToken(HogQLParser::STRING_LITERAL, 0);
}

HogQLParser::ColumnExprIntervalStringContext::ColumnExprIntervalStringContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprIntervalStringContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprIntervalString(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprTrimContext ------------------------------------------------------------------

tree::TerminalNode* HogQLParser::ColumnExprTrimContext::TRIM() {
  return getToken(HogQLParser::TRIM, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprTrimContext::LPAREN() {
  return getToken(HogQLParser::LPAREN, 0);
}

HogQLParser::StringContext* HogQLParser::ColumnExprTrimContext::string() {
  return getRuleContext<HogQLParser::StringContext>(0);
}

tree::TerminalNode* HogQLParser::ColumnExprTrimContext::FROM() {
  return getToken(HogQLParser::FROM, 0);
}

HogQLParser::ColumnExprContext* HogQLParser::ColumnExprTrimContext::columnExpr() {
  return getRuleContext<HogQLParser::ColumnExprContext>(0);
}

tree::TerminalNode* HogQLParser::ColumnExprTrimContext::RPAREN() {
  return getToken(HogQLParser::RPAREN, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprTrimContext::BOTH() {
  return getToken(HogQLParser::BOTH, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprTrimContext::LEADING() {
  return getToken(HogQLParser::LEADING, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprTrimContext::TRAILING() {
  return getToken(HogQLParser::TRAILING, 0);
}

HogQLParser::ColumnExprTrimContext::ColumnExprTrimContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprTrimContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprTrim(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprTagElementContext ------------------------------------------------------------------

HogQLParser::HogqlxTagElementContext* HogQLParser::ColumnExprTagElementContext::hogqlxTagElement() {
  return getRuleContext<HogQLParser::HogqlxTagElementContext>(0);
}

HogQLParser::ColumnExprTagElementContext::ColumnExprTagElementContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprTagElementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprTagElement(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprTemplateStringContext ------------------------------------------------------------------

HogQLParser::TemplateStringContext* HogQLParser::ColumnExprTemplateStringContext::templateString() {
  return getRuleContext<HogQLParser::TemplateStringContext>(0);
}

HogQLParser::ColumnExprTemplateStringContext::ColumnExprTemplateStringContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprTemplateStringContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprTemplateString(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprTupleContext ------------------------------------------------------------------

tree::TerminalNode* HogQLParser::ColumnExprTupleContext::LPAREN() {
  return getToken(HogQLParser::LPAREN, 0);
}

HogQLParser::ColumnExprListContext* HogQLParser::ColumnExprTupleContext::columnExprList() {
  return getRuleContext<HogQLParser::ColumnExprListContext>(0);
}

tree::TerminalNode* HogQLParser::ColumnExprTupleContext::RPAREN() {
  return getToken(HogQLParser::RPAREN, 0);
}

HogQLParser::ColumnExprTupleContext::ColumnExprTupleContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprTupleContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprTuple(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprCallContext ------------------------------------------------------------------

HogQLParser::ColumnExprContext* HogQLParser::ColumnExprCallContext::columnExpr() {
  return getRuleContext<HogQLParser::ColumnExprContext>(0);
}

tree::TerminalNode* HogQLParser::ColumnExprCallContext::LPAREN() {
  return getToken(HogQLParser::LPAREN, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprCallContext::RPAREN() {
  return getToken(HogQLParser::RPAREN, 0);
}

HogQLParser::ColumnExprListContext* HogQLParser::ColumnExprCallContext::columnExprList() {
  return getRuleContext<HogQLParser::ColumnExprListContext>(0);
}

HogQLParser::ColumnExprCallContext::ColumnExprCallContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprCallContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprCall(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprArrayAccessContext ------------------------------------------------------------------

std::vector<HogQLParser::ColumnExprContext *> HogQLParser::ColumnExprArrayAccessContext::columnExpr() {
  return getRuleContexts<HogQLParser::ColumnExprContext>();
}

HogQLParser::ColumnExprContext* HogQLParser::ColumnExprArrayAccessContext::columnExpr(size_t i) {
  return getRuleContext<HogQLParser::ColumnExprContext>(i);
}

tree::TerminalNode* HogQLParser::ColumnExprArrayAccessContext::LBRACKET() {
  return getToken(HogQLParser::LBRACKET, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprArrayAccessContext::RBRACKET() {
  return getToken(HogQLParser::RBRACKET, 0);
}

HogQLParser::ColumnExprArrayAccessContext::ColumnExprArrayAccessContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprArrayAccessContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprArrayAccess(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprBetweenContext ------------------------------------------------------------------

std::vector<HogQLParser::ColumnExprContext *> HogQLParser::ColumnExprBetweenContext::columnExpr() {
  return getRuleContexts<HogQLParser::ColumnExprContext>();
}

HogQLParser::ColumnExprContext* HogQLParser::ColumnExprBetweenContext::columnExpr(size_t i) {
  return getRuleContext<HogQLParser::ColumnExprContext>(i);
}

tree::TerminalNode* HogQLParser::ColumnExprBetweenContext::BETWEEN() {
  return getToken(HogQLParser::BETWEEN, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprBetweenContext::AND() {
  return getToken(HogQLParser::AND, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprBetweenContext::NOT() {
  return getToken(HogQLParser::NOT, 0);
}

HogQLParser::ColumnExprBetweenContext::ColumnExprBetweenContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprBetweenContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprBetween(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprPropertyAccessContext ------------------------------------------------------------------

HogQLParser::ColumnExprContext* HogQLParser::ColumnExprPropertyAccessContext::columnExpr() {
  return getRuleContext<HogQLParser::ColumnExprContext>(0);
}

tree::TerminalNode* HogQLParser::ColumnExprPropertyAccessContext::DOT() {
  return getToken(HogQLParser::DOT, 0);
}

HogQLParser::IdentifierContext* HogQLParser::ColumnExprPropertyAccessContext::identifier() {
  return getRuleContext<HogQLParser::IdentifierContext>(0);
}

HogQLParser::ColumnExprPropertyAccessContext::ColumnExprPropertyAccessContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprPropertyAccessContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprPropertyAccess(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprParensContext ------------------------------------------------------------------

tree::TerminalNode* HogQLParser::ColumnExprParensContext::LPAREN() {
  return getToken(HogQLParser::LPAREN, 0);
}

HogQLParser::ColumnExprContext* HogQLParser::ColumnExprParensContext::columnExpr() {
  return getRuleContext<HogQLParser::ColumnExprContext>(0);
}

tree::TerminalNode* HogQLParser::ColumnExprParensContext::RPAREN() {
  return getToken(HogQLParser::RPAREN, 0);
}

HogQLParser::ColumnExprParensContext::ColumnExprParensContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprParensContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprParens(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprNullArrayAccessContext ------------------------------------------------------------------

std::vector<HogQLParser::ColumnExprContext *> HogQLParser::ColumnExprNullArrayAccessContext::columnExpr() {
  return getRuleContexts<HogQLParser::ColumnExprContext>();
}

HogQLParser::ColumnExprContext* HogQLParser::ColumnExprNullArrayAccessContext::columnExpr(size_t i) {
  return getRuleContext<HogQLParser::ColumnExprContext>(i);
}

tree::TerminalNode* HogQLParser::ColumnExprNullArrayAccessContext::NULL_PROPERTY() {
  return getToken(HogQLParser::NULL_PROPERTY, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprNullArrayAccessContext::LBRACKET() {
  return getToken(HogQLParser::LBRACKET, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprNullArrayAccessContext::RBRACKET() {
  return getToken(HogQLParser::RBRACKET, 0);
}

HogQLParser::ColumnExprNullArrayAccessContext::ColumnExprNullArrayAccessContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprNullArrayAccessContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprNullArrayAccess(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprTimestampContext ------------------------------------------------------------------

tree::TerminalNode* HogQLParser::ColumnExprTimestampContext::TIMESTAMP() {
  return getToken(HogQLParser::TIMESTAMP, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprTimestampContext::STRING_LITERAL() {
  return getToken(HogQLParser::STRING_LITERAL, 0);
}

HogQLParser::ColumnExprTimestampContext::ColumnExprTimestampContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprTimestampContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprTimestamp(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprNullishContext ------------------------------------------------------------------

std::vector<HogQLParser::ColumnExprContext *> HogQLParser::ColumnExprNullishContext::columnExpr() {
  return getRuleContexts<HogQLParser::ColumnExprContext>();
}

HogQLParser::ColumnExprContext* HogQLParser::ColumnExprNullishContext::columnExpr(size_t i) {
  return getRuleContext<HogQLParser::ColumnExprContext>(i);
}

tree::TerminalNode* HogQLParser::ColumnExprNullishContext::NULLISH() {
  return getToken(HogQLParser::NULLISH, 0);
}

HogQLParser::ColumnExprNullishContext::ColumnExprNullishContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprNullishContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprNullish(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprAndContext ------------------------------------------------------------------

std::vector<HogQLParser::ColumnExprContext *> HogQLParser::ColumnExprAndContext::columnExpr() {
  return getRuleContexts<HogQLParser::ColumnExprContext>();
}

HogQLParser::ColumnExprContext* HogQLParser::ColumnExprAndContext::columnExpr(size_t i) {
  return getRuleContext<HogQLParser::ColumnExprContext>(i);
}

tree::TerminalNode* HogQLParser::ColumnExprAndContext::AND() {
  return getToken(HogQLParser::AND, 0);
}

HogQLParser::ColumnExprAndContext::ColumnExprAndContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprAndContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprAnd(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprTupleAccessContext ------------------------------------------------------------------

HogQLParser::ColumnExprContext* HogQLParser::ColumnExprTupleAccessContext::columnExpr() {
  return getRuleContext<HogQLParser::ColumnExprContext>(0);
}

tree::TerminalNode* HogQLParser::ColumnExprTupleAccessContext::DOT() {
  return getToken(HogQLParser::DOT, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprTupleAccessContext::DECIMAL_LITERAL() {
  return getToken(HogQLParser::DECIMAL_LITERAL, 0);
}

HogQLParser::ColumnExprTupleAccessContext::ColumnExprTupleAccessContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprTupleAccessContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprTupleAccess(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprCaseContext ------------------------------------------------------------------

tree::TerminalNode* HogQLParser::ColumnExprCaseContext::CASE() {
  return getToken(HogQLParser::CASE, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprCaseContext::END() {
  return getToken(HogQLParser::END, 0);
}

std::vector<tree::TerminalNode *> HogQLParser::ColumnExprCaseContext::WHEN() {
  return getTokens(HogQLParser::WHEN);
}

tree::TerminalNode* HogQLParser::ColumnExprCaseContext::WHEN(size_t i) {
  return getToken(HogQLParser::WHEN, i);
}

std::vector<tree::TerminalNode *> HogQLParser::ColumnExprCaseContext::THEN() {
  return getTokens(HogQLParser::THEN);
}

tree::TerminalNode* HogQLParser::ColumnExprCaseContext::THEN(size_t i) {
  return getToken(HogQLParser::THEN, i);
}

tree::TerminalNode* HogQLParser::ColumnExprCaseContext::ELSE() {
  return getToken(HogQLParser::ELSE, 0);
}

std::vector<HogQLParser::ColumnExprContext *> HogQLParser::ColumnExprCaseContext::columnExpr() {
  return getRuleContexts<HogQLParser::ColumnExprContext>();
}

HogQLParser::ColumnExprContext* HogQLParser::ColumnExprCaseContext::columnExpr(size_t i) {
  return getRuleContext<HogQLParser::ColumnExprContext>(i);
}

HogQLParser::ColumnExprCaseContext::ColumnExprCaseContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprCaseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprCase(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprDateContext ------------------------------------------------------------------

tree::TerminalNode* HogQLParser::ColumnExprDateContext::DATE() {
  return getToken(HogQLParser::DATE, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprDateContext::STRING_LITERAL() {
  return getToken(HogQLParser::STRING_LITERAL, 0);
}

HogQLParser::ColumnExprDateContext::ColumnExprDateContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprDateContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprDate(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprNotContext ------------------------------------------------------------------

tree::TerminalNode* HogQLParser::ColumnExprNotContext::NOT() {
  return getToken(HogQLParser::NOT, 0);
}

HogQLParser::ColumnExprContext* HogQLParser::ColumnExprNotContext::columnExpr() {
  return getRuleContext<HogQLParser::ColumnExprContext>(0);
}

HogQLParser::ColumnExprNotContext::ColumnExprNotContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprNotContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprNot(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprWinFunctionContext ------------------------------------------------------------------

HogQLParser::IdentifierContext* HogQLParser::ColumnExprWinFunctionContext::identifier() {
  return getRuleContext<HogQLParser::IdentifierContext>(0);
}

tree::TerminalNode* HogQLParser::ColumnExprWinFunctionContext::OVER() {
  return getToken(HogQLParser::OVER, 0);
}

std::vector<tree::TerminalNode *> HogQLParser::ColumnExprWinFunctionContext::LPAREN() {
  return getTokens(HogQLParser::LPAREN);
}

tree::TerminalNode* HogQLParser::ColumnExprWinFunctionContext::LPAREN(size_t i) {
  return getToken(HogQLParser::LPAREN, i);
}

HogQLParser::WindowExprContext* HogQLParser::ColumnExprWinFunctionContext::windowExpr() {
  return getRuleContext<HogQLParser::WindowExprContext>(0);
}

std::vector<tree::TerminalNode *> HogQLParser::ColumnExprWinFunctionContext::RPAREN() {
  return getTokens(HogQLParser::RPAREN);
}

tree::TerminalNode* HogQLParser::ColumnExprWinFunctionContext::RPAREN(size_t i) {
  return getToken(HogQLParser::RPAREN, i);
}

std::vector<HogQLParser::ColumnExprListContext *> HogQLParser::ColumnExprWinFunctionContext::columnExprList() {
  return getRuleContexts<HogQLParser::ColumnExprListContext>();
}

HogQLParser::ColumnExprListContext* HogQLParser::ColumnExprWinFunctionContext::columnExprList(size_t i) {
  return getRuleContext<HogQLParser::ColumnExprListContext>(i);
}

tree::TerminalNode* HogQLParser::ColumnExprWinFunctionContext::DISTINCT() {
  return getToken(HogQLParser::DISTINCT, 0);
}

HogQLParser::ColumnExprWinFunctionContext::ColumnExprWinFunctionContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprWinFunctionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprWinFunction(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprLambdaContext ------------------------------------------------------------------

HogQLParser::ColumnLambdaExprContext* HogQLParser::ColumnExprLambdaContext::columnLambdaExpr() {
  return getRuleContext<HogQLParser::ColumnLambdaExprContext>(0);
}

HogQLParser::ColumnExprLambdaContext::ColumnExprLambdaContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprLambdaContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprLambda(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprIdentifierContext ------------------------------------------------------------------

HogQLParser::ColumnIdentifierContext* HogQLParser::ColumnExprIdentifierContext::columnIdentifier() {
  return getRuleContext<HogQLParser::ColumnIdentifierContext>(0);
}

HogQLParser::ColumnExprIdentifierContext::ColumnExprIdentifierContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprIdentifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprIdentifier(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprFunctionContext ------------------------------------------------------------------

HogQLParser::IdentifierContext* HogQLParser::ColumnExprFunctionContext::identifier() {
  return getRuleContext<HogQLParser::IdentifierContext>(0);
}

std::vector<tree::TerminalNode *> HogQLParser::ColumnExprFunctionContext::LPAREN() {
  return getTokens(HogQLParser::LPAREN);
}

tree::TerminalNode* HogQLParser::ColumnExprFunctionContext::LPAREN(size_t i) {
  return getToken(HogQLParser::LPAREN, i);
}

std::vector<tree::TerminalNode *> HogQLParser::ColumnExprFunctionContext::RPAREN() {
  return getTokens(HogQLParser::RPAREN);
}

tree::TerminalNode* HogQLParser::ColumnExprFunctionContext::RPAREN(size_t i) {
  return getToken(HogQLParser::RPAREN, i);
}

tree::TerminalNode* HogQLParser::ColumnExprFunctionContext::DISTINCT() {
  return getToken(HogQLParser::DISTINCT, 0);
}

std::vector<HogQLParser::ColumnExprListContext *> HogQLParser::ColumnExprFunctionContext::columnExprList() {
  return getRuleContexts<HogQLParser::ColumnExprListContext>();
}

HogQLParser::ColumnExprListContext* HogQLParser::ColumnExprFunctionContext::columnExprList(size_t i) {
  return getRuleContext<HogQLParser::ColumnExprListContext>(i);
}

HogQLParser::ColumnExprFunctionContext::ColumnExprFunctionContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprFunctionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprFunction(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprAsteriskContext ------------------------------------------------------------------

tree::TerminalNode* HogQLParser::ColumnExprAsteriskContext::ASTERISK() {
  return getToken(HogQLParser::ASTERISK, 0);
}

HogQLParser::TableIdentifierContext* HogQLParser::ColumnExprAsteriskContext::tableIdentifier() {
  return getRuleContext<HogQLParser::TableIdentifierContext>(0);
}

tree::TerminalNode* HogQLParser::ColumnExprAsteriskContext::DOT() {
  return getToken(HogQLParser::DOT, 0);
}

HogQLParser::ColumnExprAsteriskContext::ColumnExprAsteriskContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprAsteriskContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprAsterisk(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::ColumnExprContext* HogQLParser::columnExpr() {
   return columnExpr(0);
}

HogQLParser::ColumnExprContext* HogQLParser::columnExpr(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  HogQLParser::ColumnExprContext *_localctx = _tracker.createInstance<ColumnExprContext>(_ctx, parentState);
  HogQLParser::ColumnExprContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 122;
  enterRecursionRule(_localctx, 122, HogQLParser::RuleColumnExpr, precedence);

    size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(955);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 120, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<ColumnExprCaseContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;

      setState(804);
      match(HogQLParser::CASE);
      setState(806);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 101, _ctx)) {
      case 1: {
        setState(805);
        antlrcpp::downCast<ColumnExprCaseContext *>(_localctx)->caseExpr = columnExpr(0);
        break;
      }

      default:
        break;
      }
      setState(813); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(808);
        match(HogQLParser::WHEN);
        setState(809);
        antlrcpp::downCast<ColumnExprCaseContext *>(_localctx)->whenExpr = columnExpr(0);
        setState(810);
        match(HogQLParser::THEN);
        setState(811);
        antlrcpp::downCast<ColumnExprCaseContext *>(_localctx)->thenExpr = columnExpr(0);
        setState(815); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (_la == HogQLParser::WHEN);
      setState(819);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == HogQLParser::ELSE) {
        setState(817);
        match(HogQLParser::ELSE);
        setState(818);
        antlrcpp::downCast<ColumnExprCaseContext *>(_localctx)->elseExpr = columnExpr(0);
      }
      setState(821);
      match(HogQLParser::END);
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<ColumnExprCastContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(823);
      match(HogQLParser::CAST);
      setState(824);
      match(HogQLParser::LPAREN);
      setState(825);
      columnExpr(0);
      setState(826);
      match(HogQLParser::AS);
      setState(827);
      columnTypeExpr();
      setState(828);
      match(HogQLParser::RPAREN);
      break;
    }

    case 3: {
      _localctx = _tracker.createInstance<ColumnExprDateContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(830);
      match(HogQLParser::DATE);
      setState(831);
      match(HogQLParser::STRING_LITERAL);
      break;
    }

    case 4: {
      _localctx = _tracker.createInstance<ColumnExprIntervalStringContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(832);
      match(HogQLParser::INTERVAL);
      setState(833);
      match(HogQLParser::STRING_LITERAL);
      break;
    }

    case 5: {
      _localctx = _tracker.createInstance<ColumnExprIntervalContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(834);
      match(HogQLParser::INTERVAL);
      setState(835);
      columnExpr(0);
      setState(836);
      interval();
      break;
    }

    case 6: {
      _localctx = _tracker.createInstance<ColumnExprSubstringContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(838);
      match(HogQLParser::SUBSTRING);
      setState(839);
      match(HogQLParser::LPAREN);
      setState(840);
      columnExpr(0);
      setState(841);
      match(HogQLParser::FROM);
      setState(842);
      columnExpr(0);
      setState(845);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == HogQLParser::FOR) {
        setState(843);
        match(HogQLParser::FOR);
        setState(844);
        columnExpr(0);
      }
      setState(847);
      match(HogQLParser::RPAREN);
      break;
    }

    case 7: {
      _localctx = _tracker.createInstance<ColumnExprTimestampContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(849);
      match(HogQLParser::TIMESTAMP);
      setState(850);
      match(HogQLParser::STRING_LITERAL);
      break;
    }

    case 8: {
      _localctx = _tracker.createInstance<ColumnExprTrimContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(851);
      match(HogQLParser::TRIM);
      setState(852);
      match(HogQLParser::LPAREN);
      setState(853);
      _la = _input->LA(1);
      if (!(_la == HogQLParser::BOTH

      || _la == HogQLParser::LEADING || _la == HogQLParser::TRAILING)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(854);
      string();
      setState(855);
      match(HogQLParser::FROM);
      setState(856);
      columnExpr(0);
      setState(857);
      match(HogQLParser::RPAREN);
      break;
    }

    case 9: {
      _localctx = _tracker.createInstance<ColumnExprWinFunctionContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(859);
      identifier();

      setState(860);
      match(HogQLParser::LPAREN);
      setState(862);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -36169677449216002) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & 723944289947615231) != 0) || ((((_la - 131) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 131)) & 18455) != 0)) {
        setState(861);
        antlrcpp::downCast<ColumnExprWinFunctionContext *>(_localctx)->columnExprs = columnExprList();
      }
      setState(864);
      match(HogQLParser::RPAREN);
      setState(874);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == HogQLParser::LPAREN) {
        setState(866);
        match(HogQLParser::LPAREN);
        setState(868);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 106, _ctx)) {
        case 1: {
          setState(867);
          match(HogQLParser::DISTINCT);
          break;
        }

        default:
          break;
        }
        setState(871);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & -36169677449216002) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 64)) & 723944289947615231) != 0) || ((((_la - 131) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 131)) & 18455) != 0)) {
          setState(870);
          antlrcpp::downCast<ColumnExprWinFunctionContext *>(_localctx)->columnArgList = columnExprList();
        }
        setState(873);
        match(HogQLParser::RPAREN);
      }
      setState(876);
      match(HogQLParser::OVER);
      setState(877);
      match(HogQLParser::LPAREN);
      setState(878);
      windowExpr();
      setState(879);
      match(HogQLParser::RPAREN);
      break;
    }

    case 10: {
      _localctx = _tracker.createInstance<ColumnExprWinFunctionTargetContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(881);
      identifier();

      setState(882);
      match(HogQLParser::LPAREN);
      setState(884);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -36169677449216002) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & 723944289947615231) != 0) || ((((_la - 131) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 131)) & 18455) != 0)) {
        setState(883);
        antlrcpp::downCast<ColumnExprWinFunctionTargetContext *>(_localctx)->columnExprs = columnExprList();
      }
      setState(886);
      match(HogQLParser::RPAREN);
      setState(896);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == HogQLParser::LPAREN) {
        setState(888);
        match(HogQLParser::LPAREN);
        setState(890);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 110, _ctx)) {
        case 1: {
          setState(889);
          match(HogQLParser::DISTINCT);
          break;
        }

        default:
          break;
        }
        setState(893);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & -36169677449216002) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 64)) & 723944289947615231) != 0) || ((((_la - 131) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 131)) & 18455) != 0)) {
          setState(892);
          antlrcpp::downCast<ColumnExprWinFunctionTargetContext *>(_localctx)->columnArgList = columnExprList();
        }
        setState(895);
        match(HogQLParser::RPAREN);
      }
      setState(898);
      match(HogQLParser::OVER);
      setState(899);
      identifier();
      break;
    }

    case 11: {
      _localctx = _tracker.createInstance<ColumnExprFunctionContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(901);
      identifier();
      setState(907);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 114, _ctx)) {
      case 1: {
        setState(902);
        match(HogQLParser::LPAREN);
        setState(904);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & -36169677449216002) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 64)) & 723944289947615231) != 0) || ((((_la - 131) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 131)) & 18455) != 0)) {
          setState(903);
          antlrcpp::downCast<ColumnExprFunctionContext *>(_localctx)->columnExprs = columnExprList();
        }
        setState(906);
        match(HogQLParser::RPAREN);
        break;
      }

      default:
        break;
      }
      setState(909);
      match(HogQLParser::LPAREN);
      setState(911);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 115, _ctx)) {
      case 1: {
        setState(910);
        match(HogQLParser::DISTINCT);
        break;
      }

      default:
        break;
      }
      setState(914);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -36169677449216002) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & 723944289947615231) != 0) || ((((_la - 131) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 131)) & 18455) != 0)) {
        setState(913);
        antlrcpp::downCast<ColumnExprFunctionContext *>(_localctx)->columnArgList = columnExprList();
      }
      setState(916);
      match(HogQLParser::RPAREN);
      break;
    }

    case 12: {
      _localctx = _tracker.createInstance<ColumnExprTagElementContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(918);
      hogqlxTagElement();
      break;
    }

    case 13: {
      _localctx = _tracker.createInstance<ColumnExprTemplateStringContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(919);
      templateString();
      break;
    }

    case 14: {
      _localctx = _tracker.createInstance<ColumnExprLiteralContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(920);
      literal();
      break;
    }

    case 15: {
      _localctx = _tracker.createInstance<ColumnExprNegateContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(921);
      match(HogQLParser::DASH);
      setState(922);
      columnExpr(20);
      break;
    }

    case 16: {
      _localctx = _tracker.createInstance<ColumnExprNotContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(923);
      match(HogQLParser::NOT);
      setState(924);
      columnExpr(14);
      break;
    }

    case 17: {
      _localctx = _tracker.createInstance<ColumnExprAsteriskContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(928);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -5800812384855539714) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & 25834219896831) != 0)) {
        setState(925);
        tableIdentifier();
        setState(926);
        match(HogQLParser::DOT);
      }
      setState(930);
      match(HogQLParser::ASTERISK);
      break;
    }

    case 18: {
      _localctx = _tracker.createInstance<ColumnExprSubqueryContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(931);
      match(HogQLParser::LPAREN);
      setState(932);
      selectSetStmt();
      setState(933);
      match(HogQLParser::RPAREN);
      break;
    }

    case 19: {
      _localctx = _tracker.createInstance<ColumnExprParensContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(935);
      match(HogQLParser::LPAREN);
      setState(936);
      columnExpr(0);
      setState(937);
      match(HogQLParser::RPAREN);
      break;
    }

    case 20: {
      _localctx = _tracker.createInstance<ColumnExprTupleContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(939);
      match(HogQLParser::LPAREN);
      setState(940);
      columnExprList();
      setState(941);
      match(HogQLParser::RPAREN);
      break;
    }

    case 21: {
      _localctx = _tracker.createInstance<ColumnExprArrayContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(943);
      match(HogQLParser::LBRACKET);
      setState(945);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -36169677449216002) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & 723944289947615231) != 0) || ((((_la - 131) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 131)) & 18455) != 0)) {
        setState(944);
        columnExprList();
      }
      setState(947);
      match(HogQLParser::RBRACKET);
      break;
    }

    case 22: {
      _localctx = _tracker.createInstance<ColumnExprDictContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(948);
      match(HogQLParser::LBRACE);
      setState(950);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -36169677449216002) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & 723944289947615231) != 0) || ((((_la - 131) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 131)) & 18455) != 0)) {
        setState(949);
        kvPairList();
      }
      setState(952);
      match(HogQLParser::RBRACE);
      break;
    }

    case 23: {
      _localctx = _tracker.createInstance<ColumnExprLambdaContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(953);
      columnLambdaExpr();
      break;
    }

    case 24: {
      _localctx = _tracker.createInstance<ColumnExprIdentifierContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(954);
      columnIdentifier();
      break;
    }

    default:
      break;
    }
    _ctx->stop = _input->LT(-1);
    setState(1072);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 132, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(1070);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 131, _ctx)) {
        case 1: {
          auto newContext = _tracker.createInstance<ColumnExprPrecedence1Context>(_tracker.createInstance<ColumnExprContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->left = previousContext;
          pushNewRecursionContext(newContext, startState, RuleColumnExpr);
          setState(957);

          if (!(precpred(_ctx, 19))) throw FailedPredicateException(this, "precpred(_ctx, 19)");
          setState(961);
          _errHandler->sync(this);
          switch (_input->LA(1)) {
            case HogQLParser::ASTERISK: {
              setState(958);
              antlrcpp::downCast<ColumnExprPrecedence1Context *>(_localctx)->operator_ = match(HogQLParser::ASTERISK);
              break;
            }

            case HogQLParser::SLASH: {
              setState(959);
              antlrcpp::downCast<ColumnExprPrecedence1Context *>(_localctx)->operator_ = match(HogQLParser::SLASH);
              break;
            }

            case HogQLParser::PERCENT: {
              setState(960);
              antlrcpp::downCast<ColumnExprPrecedence1Context *>(_localctx)->operator_ = match(HogQLParser::PERCENT);
              break;
            }

          default:
            throw NoViableAltException(this);
          }
          setState(963);
          antlrcpp::downCast<ColumnExprPrecedence1Context *>(_localctx)->right = columnExpr(20);
          break;
        }

        case 2: {
          auto newContext = _tracker.createInstance<ColumnExprPrecedence2Context>(_tracker.createInstance<ColumnExprContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->left = previousContext;
          pushNewRecursionContext(newContext, startState, RuleColumnExpr);
          setState(964);

          if (!(precpred(_ctx, 18))) throw FailedPredicateException(this, "precpred(_ctx, 18)");
          setState(968);
          _errHandler->sync(this);
          switch (_input->LA(1)) {
            case HogQLParser::PLUS: {
              setState(965);
              antlrcpp::downCast<ColumnExprPrecedence2Context *>(_localctx)->operator_ = match(HogQLParser::PLUS);
              break;
            }

            case HogQLParser::DASH: {
              setState(966);
              antlrcpp::downCast<ColumnExprPrecedence2Context *>(_localctx)->operator_ = match(HogQLParser::DASH);
              break;
            }

            case HogQLParser::CONCAT: {
              setState(967);
              antlrcpp::downCast<ColumnExprPrecedence2Context *>(_localctx)->operator_ = match(HogQLParser::CONCAT);
              break;
            }

          default:
            throw NoViableAltException(this);
          }
          setState(970);
          antlrcpp::downCast<ColumnExprPrecedence2Context *>(_localctx)->right = columnExpr(19);
          break;
        }

        case 3: {
          auto newContext = _tracker.createInstance<ColumnExprPrecedence3Context>(_tracker.createInstance<ColumnExprContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->left = previousContext;
          pushNewRecursionContext(newContext, startState, RuleColumnExpr);
          setState(971);

          if (!(precpred(_ctx, 17))) throw FailedPredicateException(this, "precpred(_ctx, 17)");
          setState(996);
          _errHandler->sync(this);
          switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 126, _ctx)) {
          case 1: {
            setState(972);
            antlrcpp::downCast<ColumnExprPrecedence3Context *>(_localctx)->operator_ = match(HogQLParser::EQ_DOUBLE);
            break;
          }

          case 2: {
            setState(973);
            antlrcpp::downCast<ColumnExprPrecedence3Context *>(_localctx)->operator_ = match(HogQLParser::EQ_SINGLE);
            break;
          }

          case 3: {
            setState(974);
            antlrcpp::downCast<ColumnExprPrecedence3Context *>(_localctx)->operator_ = match(HogQLParser::NOT_EQ);
            break;
          }

          case 4: {
            setState(975);
            antlrcpp::downCast<ColumnExprPrecedence3Context *>(_localctx)->operator_ = match(HogQLParser::LT_EQ);
            break;
          }

          case 5: {
            setState(976);
            antlrcpp::downCast<ColumnExprPrecedence3Context *>(_localctx)->operator_ = match(HogQLParser::LT);
            break;
          }

          case 6: {
            setState(977);
            antlrcpp::downCast<ColumnExprPrecedence3Context *>(_localctx)->operator_ = match(HogQLParser::GT_EQ);
            break;
          }

          case 7: {
            setState(978);
            antlrcpp::downCast<ColumnExprPrecedence3Context *>(_localctx)->operator_ = match(HogQLParser::GT);
            break;
          }

          case 8: {
            setState(980);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == HogQLParser::NOT) {
              setState(979);
              antlrcpp::downCast<ColumnExprPrecedence3Context *>(_localctx)->operator_ = match(HogQLParser::NOT);
            }
            setState(982);
            match(HogQLParser::IN);
            setState(984);
            _errHandler->sync(this);

            switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 124, _ctx)) {
            case 1: {
              setState(983);
              match(HogQLParser::COHORT);
              break;
            }

            default:
              break;
            }
            break;
          }

          case 9: {
            setState(987);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == HogQLParser::NOT) {
              setState(986);
              antlrcpp::downCast<ColumnExprPrecedence3Context *>(_localctx)->operator_ = match(HogQLParser::NOT);
            }
            setState(989);
            _la = _input->LA(1);
            if (!(_la == HogQLParser::ILIKE

            || _la == HogQLParser::LIKE)) {
            _errHandler->recoverInline(this);
            }
            else {
              _errHandler->reportMatch(this);
              consume();
            }
            break;
          }

          case 10: {
            setState(990);
            antlrcpp::downCast<ColumnExprPrecedence3Context *>(_localctx)->operator_ = match(HogQLParser::REGEX_SINGLE);
            break;
          }

          case 11: {
            setState(991);
            antlrcpp::downCast<ColumnExprPrecedence3Context *>(_localctx)->operator_ = match(HogQLParser::REGEX_DOUBLE);
            break;
          }

          case 12: {
            setState(992);
            antlrcpp::downCast<ColumnExprPrecedence3Context *>(_localctx)->operator_ = match(HogQLParser::NOT_REGEX);
            break;
          }

          case 13: {
            setState(993);
            antlrcpp::downCast<ColumnExprPrecedence3Context *>(_localctx)->operator_ = match(HogQLParser::IREGEX_SINGLE);
            break;
          }

          case 14: {
            setState(994);
            antlrcpp::downCast<ColumnExprPrecedence3Context *>(_localctx)->operator_ = match(HogQLParser::IREGEX_DOUBLE);
            break;
          }

          case 15: {
            setState(995);
            antlrcpp::downCast<ColumnExprPrecedence3Context *>(_localctx)->operator_ = match(HogQLParser::NOT_IREGEX);
            break;
          }

          default:
            break;
          }
          setState(998);
          antlrcpp::downCast<ColumnExprPrecedence3Context *>(_localctx)->right = columnExpr(18);
          break;
        }

        case 4: {
          auto newContext = _tracker.createInstance<ColumnExprNullishContext>(_tracker.createInstance<ColumnExprContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleColumnExpr);
          setState(999);

          if (!(precpred(_ctx, 15))) throw FailedPredicateException(this, "precpred(_ctx, 15)");
          setState(1000);
          match(HogQLParser::NULLISH);
          setState(1001);
          columnExpr(16);
          break;
        }

        case 5: {
          auto newContext = _tracker.createInstance<ColumnExprAndContext>(_tracker.createInstance<ColumnExprContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleColumnExpr);
          setState(1002);

          if (!(precpred(_ctx, 13))) throw FailedPredicateException(this, "precpred(_ctx, 13)");
          setState(1003);
          match(HogQLParser::AND);
          setState(1004);
          columnExpr(14);
          break;
        }

        case 6: {
          auto newContext = _tracker.createInstance<ColumnExprOrContext>(_tracker.createInstance<ColumnExprContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleColumnExpr);
          setState(1005);

          if (!(precpred(_ctx, 12))) throw FailedPredicateException(this, "precpred(_ctx, 12)");
          setState(1006);
          match(HogQLParser::OR);
          setState(1007);
          columnExpr(13);
          break;
        }

        case 7: {
          auto newContext = _tracker.createInstance<ColumnExprBetweenContext>(_tracker.createInstance<ColumnExprContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleColumnExpr);
          setState(1008);

          if (!(precpred(_ctx, 11))) throw FailedPredicateException(this, "precpred(_ctx, 11)");
          setState(1010);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == HogQLParser::NOT) {
            setState(1009);
            match(HogQLParser::NOT);
          }
          setState(1012);
          match(HogQLParser::BETWEEN);
          setState(1013);
          columnExpr(0);
          setState(1014);
          match(HogQLParser::AND);
          setState(1015);
          columnExpr(12);
          break;
        }

        case 8: {
          auto newContext = _tracker.createInstance<ColumnExprTernaryOpContext>(_tracker.createInstance<ColumnExprContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleColumnExpr);
          setState(1017);

          if (!(precpred(_ctx, 10))) throw FailedPredicateException(this, "precpred(_ctx, 10)");
          setState(1018);
          match(HogQLParser::QUERY);
          setState(1019);
          columnExpr(0);
          setState(1020);
          match(HogQLParser::COLON);
          setState(1021);
          columnExpr(10);
          break;
        }

        case 9: {
          auto newContext = _tracker.createInstance<ColumnExprCallSelectContext>(_tracker.createInstance<ColumnExprContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleColumnExpr);
          setState(1023);

          if (!(precpred(_ctx, 31))) throw FailedPredicateException(this, "precpred(_ctx, 31)");
          setState(1024);
          match(HogQLParser::LPAREN);
          setState(1025);
          selectSetStmt();
          setState(1026);
          match(HogQLParser::RPAREN);
          break;
        }

        case 10: {
          auto newContext = _tracker.createInstance<ColumnExprCallContext>(_tracker.createInstance<ColumnExprContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleColumnExpr);
          setState(1028);

          if (!(precpred(_ctx, 30))) throw FailedPredicateException(this, "precpred(_ctx, 30)");
          setState(1029);
          match(HogQLParser::LPAREN);
          setState(1031);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if ((((_la & ~ 0x3fULL) == 0) &&
            ((1ULL << _la) & -36169677449216002) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
            ((1ULL << (_la - 64)) & 723944289947615231) != 0) || ((((_la - 131) & ~ 0x3fULL) == 0) &&
            ((1ULL << (_la - 131)) & 18455) != 0)) {
            setState(1030);
            columnExprList();
          }
          setState(1033);
          match(HogQLParser::RPAREN);
          break;
        }

        case 11: {
          auto newContext = _tracker.createInstance<ColumnExprArrayAccessContext>(_tracker.createInstance<ColumnExprContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleColumnExpr);
          setState(1034);

          if (!(precpred(_ctx, 26))) throw FailedPredicateException(this, "precpred(_ctx, 26)");
          setState(1035);
          match(HogQLParser::LBRACKET);
          setState(1036);
          columnExpr(0);
          setState(1037);
          match(HogQLParser::RBRACKET);
          break;
        }

        case 12: {
          auto newContext = _tracker.createInstance<ColumnExprTupleAccessContext>(_tracker.createInstance<ColumnExprContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleColumnExpr);
          setState(1039);

          if (!(precpred(_ctx, 25))) throw FailedPredicateException(this, "precpred(_ctx, 25)");
          setState(1040);
          match(HogQLParser::DOT);
          setState(1041);
          match(HogQLParser::DECIMAL_LITERAL);
          break;
        }

        case 13: {
          auto newContext = _tracker.createInstance<ColumnExprPropertyAccessContext>(_tracker.createInstance<ColumnExprContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleColumnExpr);
          setState(1042);

          if (!(precpred(_ctx, 24))) throw FailedPredicateException(this, "precpred(_ctx, 24)");
          setState(1043);
          match(HogQLParser::DOT);
          setState(1044);
          identifier();
          break;
        }

        case 14: {
          auto newContext = _tracker.createInstance<ColumnExprNullArrayAccessContext>(_tracker.createInstance<ColumnExprContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleColumnExpr);
          setState(1045);

          if (!(precpred(_ctx, 23))) throw FailedPredicateException(this, "precpred(_ctx, 23)");
          setState(1046);
          match(HogQLParser::NULL_PROPERTY);
          setState(1047);
          match(HogQLParser::LBRACKET);
          setState(1048);
          columnExpr(0);
          setState(1049);
          match(HogQLParser::RBRACKET);
          break;
        }

        case 15: {
          auto newContext = _tracker.createInstance<ColumnExprNullTupleAccessContext>(_tracker.createInstance<ColumnExprContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleColumnExpr);
          setState(1051);

          if (!(precpred(_ctx, 22))) throw FailedPredicateException(this, "precpred(_ctx, 22)");
          setState(1052);
          match(HogQLParser::NULL_PROPERTY);
          setState(1053);
          match(HogQLParser::DECIMAL_LITERAL);
          break;
        }

        case 16: {
          auto newContext = _tracker.createInstance<ColumnExprNullPropertyAccessContext>(_tracker.createInstance<ColumnExprContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleColumnExpr);
          setState(1054);

          if (!(precpred(_ctx, 21))) throw FailedPredicateException(this, "precpred(_ctx, 21)");
          setState(1055);
          match(HogQLParser::NULL_PROPERTY);
          setState(1056);
          identifier();
          break;
        }

        case 17: {
          auto newContext = _tracker.createInstance<ColumnExprIsNullContext>(_tracker.createInstance<ColumnExprContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleColumnExpr);
          setState(1057);

          if (!(precpred(_ctx, 16))) throw FailedPredicateException(this, "precpred(_ctx, 16)");
          setState(1058);
          match(HogQLParser::IS);
          setState(1060);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == HogQLParser::NOT) {
            setState(1059);
            match(HogQLParser::NOT);
          }
          setState(1062);
          match(HogQLParser::NULL_SQL);
          break;
        }

        case 18: {
          auto newContext = _tracker.createInstance<ColumnExprAliasContext>(_tracker.createInstance<ColumnExprContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleColumnExpr);
          setState(1063);

          if (!(precpred(_ctx, 9))) throw FailedPredicateException(this, "precpred(_ctx, 9)");
          setState(1068);
          _errHandler->sync(this);
          switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 130, _ctx)) {
          case 1: {
            setState(1064);
            match(HogQLParser::AS);
            setState(1065);
            identifier();
            break;
          }

          case 2: {
            setState(1066);
            match(HogQLParser::AS);
            setState(1067);
            match(HogQLParser::STRING_LITERAL);
            break;
          }

          default:
            break;
          }
          break;
        }

        default:
          break;
        } 
      }
      setState(1074);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 132, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- ColumnLambdaExprContext ------------------------------------------------------------------

HogQLParser::ColumnLambdaExprContext::ColumnLambdaExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::ColumnLambdaExprContext::ARROW() {
  return getToken(HogQLParser::ARROW, 0);
}

tree::TerminalNode* HogQLParser::ColumnLambdaExprContext::LPAREN() {
  return getToken(HogQLParser::LPAREN, 0);
}

std::vector<HogQLParser::IdentifierContext *> HogQLParser::ColumnLambdaExprContext::identifier() {
  return getRuleContexts<HogQLParser::IdentifierContext>();
}

HogQLParser::IdentifierContext* HogQLParser::ColumnLambdaExprContext::identifier(size_t i) {
  return getRuleContext<HogQLParser::IdentifierContext>(i);
}

tree::TerminalNode* HogQLParser::ColumnLambdaExprContext::RPAREN() {
  return getToken(HogQLParser::RPAREN, 0);
}

HogQLParser::ColumnExprContext* HogQLParser::ColumnLambdaExprContext::columnExpr() {
  return getRuleContext<HogQLParser::ColumnExprContext>(0);
}

HogQLParser::BlockContext* HogQLParser::ColumnLambdaExprContext::block() {
  return getRuleContext<HogQLParser::BlockContext>(0);
}

std::vector<tree::TerminalNode *> HogQLParser::ColumnLambdaExprContext::COMMA() {
  return getTokens(HogQLParser::COMMA);
}

tree::TerminalNode* HogQLParser::ColumnLambdaExprContext::COMMA(size_t i) {
  return getToken(HogQLParser::COMMA, i);
}


size_t HogQLParser::ColumnLambdaExprContext::getRuleIndex() const {
  return HogQLParser::RuleColumnLambdaExpr;
}


std::any HogQLParser::ColumnLambdaExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnLambdaExpr(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::ColumnLambdaExprContext* HogQLParser::columnLambdaExpr() {
  ColumnLambdaExprContext *_localctx = _tracker.createInstance<ColumnLambdaExprContext>(_ctx, getState());
  enterRule(_localctx, 124, HogQLParser::RuleColumnLambdaExpr);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1102);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 137, _ctx)) {
    case 1: {
      setState(1075);
      match(HogQLParser::LPAREN);
      setState(1076);
      identifier();
      setState(1081);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 133, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(1077);
          match(HogQLParser::COMMA);
          setState(1078);
          identifier(); 
        }
        setState(1083);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 133, _ctx);
      }
      setState(1085);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == HogQLParser::COMMA) {
        setState(1084);
        match(HogQLParser::COMMA);
      }
      setState(1087);
      match(HogQLParser::RPAREN);
      break;
    }

    case 2: {
      setState(1089);
      identifier();
      setState(1094);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 135, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(1090);
          match(HogQLParser::COMMA);
          setState(1091);
          identifier(); 
        }
        setState(1096);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 135, _ctx);
      }
      setState(1098);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == HogQLParser::COMMA) {
        setState(1097);
        match(HogQLParser::COMMA);
      }
      break;
    }

    case 3: {
      setState(1100);
      match(HogQLParser::LPAREN);
      setState(1101);
      match(HogQLParser::RPAREN);
      break;
    }

    default:
      break;
    }
    setState(1104);
    match(HogQLParser::ARROW);
    setState(1107);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 138, _ctx)) {
    case 1: {
      setState(1105);
      columnExpr(0);
      break;
    }

    case 2: {
      setState(1106);
      block();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- HogqlxChildElementContext ------------------------------------------------------------------

HogQLParser::HogqlxChildElementContext::HogqlxChildElementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HogQLParser::HogqlxTagElementContext* HogQLParser::HogqlxChildElementContext::hogqlxTagElement() {
  return getRuleContext<HogQLParser::HogqlxTagElementContext>(0);
}

tree::TerminalNode* HogQLParser::HogqlxChildElementContext::LBRACE() {
  return getToken(HogQLParser::LBRACE, 0);
}

HogQLParser::ColumnExprContext* HogQLParser::HogqlxChildElementContext::columnExpr() {
  return getRuleContext<HogQLParser::ColumnExprContext>(0);
}

tree::TerminalNode* HogQLParser::HogqlxChildElementContext::RBRACE() {
  return getToken(HogQLParser::RBRACE, 0);
}


size_t HogQLParser::HogqlxChildElementContext::getRuleIndex() const {
  return HogQLParser::RuleHogqlxChildElement;
}


std::any HogQLParser::HogqlxChildElementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitHogqlxChildElement(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::HogqlxChildElementContext* HogQLParser::hogqlxChildElement() {
  HogqlxChildElementContext *_localctx = _tracker.createInstance<HogqlxChildElementContext>(_ctx, getState());
  enterRule(_localctx, 126, HogQLParser::RuleHogqlxChildElement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1114);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case HogQLParser::LT: {
        enterOuterAlt(_localctx, 1);
        setState(1109);
        hogqlxTagElement();
        break;
      }

      case HogQLParser::LBRACE: {
        enterOuterAlt(_localctx, 2);
        setState(1110);
        match(HogQLParser::LBRACE);
        setState(1111);
        columnExpr(0);
        setState(1112);
        match(HogQLParser::RBRACE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- HogqlxTagElementContext ------------------------------------------------------------------

HogQLParser::HogqlxTagElementContext::HogqlxTagElementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t HogQLParser::HogqlxTagElementContext::getRuleIndex() const {
  return HogQLParser::RuleHogqlxTagElement;
}

void HogQLParser::HogqlxTagElementContext::copyFrom(HogqlxTagElementContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- HogqlxTagElementClosedContext ------------------------------------------------------------------

tree::TerminalNode* HogQLParser::HogqlxTagElementClosedContext::LT() {
  return getToken(HogQLParser::LT, 0);
}

HogQLParser::IdentifierContext* HogQLParser::HogqlxTagElementClosedContext::identifier() {
  return getRuleContext<HogQLParser::IdentifierContext>(0);
}

tree::TerminalNode* HogQLParser::HogqlxTagElementClosedContext::SLASH() {
  return getToken(HogQLParser::SLASH, 0);
}

tree::TerminalNode* HogQLParser::HogqlxTagElementClosedContext::GT() {
  return getToken(HogQLParser::GT, 0);
}

std::vector<HogQLParser::HogqlxTagAttributeContext *> HogQLParser::HogqlxTagElementClosedContext::hogqlxTagAttribute() {
  return getRuleContexts<HogQLParser::HogqlxTagAttributeContext>();
}

HogQLParser::HogqlxTagAttributeContext* HogQLParser::HogqlxTagElementClosedContext::hogqlxTagAttribute(size_t i) {
  return getRuleContext<HogQLParser::HogqlxTagAttributeContext>(i);
}

HogQLParser::HogqlxTagElementClosedContext::HogqlxTagElementClosedContext(HogqlxTagElementContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::HogqlxTagElementClosedContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitHogqlxTagElementClosed(this);
  else
    return visitor->visitChildren(this);
}
//----------------- HogqlxTagElementNestedContext ------------------------------------------------------------------

std::vector<tree::TerminalNode *> HogQLParser::HogqlxTagElementNestedContext::LT() {
  return getTokens(HogQLParser::LT);
}

tree::TerminalNode* HogQLParser::HogqlxTagElementNestedContext::LT(size_t i) {
  return getToken(HogQLParser::LT, i);
}

std::vector<HogQLParser::IdentifierContext *> HogQLParser::HogqlxTagElementNestedContext::identifier() {
  return getRuleContexts<HogQLParser::IdentifierContext>();
}

HogQLParser::IdentifierContext* HogQLParser::HogqlxTagElementNestedContext::identifier(size_t i) {
  return getRuleContext<HogQLParser::IdentifierContext>(i);
}

std::vector<tree::TerminalNode *> HogQLParser::HogqlxTagElementNestedContext::GT() {
  return getTokens(HogQLParser::GT);
}

tree::TerminalNode* HogQLParser::HogqlxTagElementNestedContext::GT(size_t i) {
  return getToken(HogQLParser::GT, i);
}

tree::TerminalNode* HogQLParser::HogqlxTagElementNestedContext::SLASH() {
  return getToken(HogQLParser::SLASH, 0);
}

std::vector<HogQLParser::HogqlxTagAttributeContext *> HogQLParser::HogqlxTagElementNestedContext::hogqlxTagAttribute() {
  return getRuleContexts<HogQLParser::HogqlxTagAttributeContext>();
}

HogQLParser::HogqlxTagAttributeContext* HogQLParser::HogqlxTagElementNestedContext::hogqlxTagAttribute(size_t i) {
  return getRuleContext<HogQLParser::HogqlxTagAttributeContext>(i);
}

std::vector<HogQLParser::HogqlxChildElementContext *> HogQLParser::HogqlxTagElementNestedContext::hogqlxChildElement() {
  return getRuleContexts<HogQLParser::HogqlxChildElementContext>();
}

HogQLParser::HogqlxChildElementContext* HogQLParser::HogqlxTagElementNestedContext::hogqlxChildElement(size_t i) {
  return getRuleContext<HogQLParser::HogqlxChildElementContext>(i);
}

HogQLParser::HogqlxTagElementNestedContext::HogqlxTagElementNestedContext(HogqlxTagElementContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::HogqlxTagElementNestedContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitHogqlxTagElementNested(this);
  else
    return visitor->visitChildren(this);
}
HogQLParser::HogqlxTagElementContext* HogQLParser::hogqlxTagElement() {
  HogqlxTagElementContext *_localctx = _tracker.createInstance<HogqlxTagElementContext>(_ctx, getState());
  enterRule(_localctx, 128, HogQLParser::RuleHogqlxTagElement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(1147);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 143, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<HogQLParser::HogqlxTagElementClosedContext>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(1116);
      match(HogQLParser::LT);
      setState(1117);
      identifier();
      setState(1121);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -5800812384855539714) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & 25834219896831) != 0)) {
        setState(1118);
        hogqlxTagAttribute();
        setState(1123);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1124);
      match(HogQLParser::SLASH);
      setState(1125);
      match(HogQLParser::GT);
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<HogQLParser::HogqlxTagElementNestedContext>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(1127);
      match(HogQLParser::LT);
      setState(1128);
      identifier();
      setState(1132);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -5800812384855539714) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & 25834219896831) != 0)) {
        setState(1129);
        hogqlxTagAttribute();
        setState(1134);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1135);
      match(HogQLParser::GT);
      setState(1139);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 142, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(1136);
          hogqlxChildElement(); 
        }
        setState(1141);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 142, _ctx);
      }
      setState(1142);
      match(HogQLParser::LT);
      setState(1143);
      match(HogQLParser::SLASH);
      setState(1144);
      identifier();
      setState(1145);
      match(HogQLParser::GT);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- HogqlxTagAttributeContext ------------------------------------------------------------------

HogQLParser::HogqlxTagAttributeContext::HogqlxTagAttributeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HogQLParser::IdentifierContext* HogQLParser::HogqlxTagAttributeContext::identifier() {
  return getRuleContext<HogQLParser::IdentifierContext>(0);
}

tree::TerminalNode* HogQLParser::HogqlxTagAttributeContext::EQ_SINGLE() {
  return getToken(HogQLParser::EQ_SINGLE, 0);
}

HogQLParser::StringContext* HogQLParser::HogqlxTagAttributeContext::string() {
  return getRuleContext<HogQLParser::StringContext>(0);
}

tree::TerminalNode* HogQLParser::HogqlxTagAttributeContext::LBRACE() {
  return getToken(HogQLParser::LBRACE, 0);
}

HogQLParser::ColumnExprContext* HogQLParser::HogqlxTagAttributeContext::columnExpr() {
  return getRuleContext<HogQLParser::ColumnExprContext>(0);
}

tree::TerminalNode* HogQLParser::HogqlxTagAttributeContext::RBRACE() {
  return getToken(HogQLParser::RBRACE, 0);
}


size_t HogQLParser::HogqlxTagAttributeContext::getRuleIndex() const {
  return HogQLParser::RuleHogqlxTagAttribute;
}


std::any HogQLParser::HogqlxTagAttributeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitHogqlxTagAttribute(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::HogqlxTagAttributeContext* HogQLParser::hogqlxTagAttribute() {
  HogqlxTagAttributeContext *_localctx = _tracker.createInstance<HogqlxTagAttributeContext>(_ctx, getState());
  enterRule(_localctx, 130, HogQLParser::RuleHogqlxTagAttribute);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1160);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 144, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1149);
      identifier();
      setState(1150);
      match(HogQLParser::EQ_SINGLE);
      setState(1151);
      string();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1153);
      identifier();
      setState(1154);
      match(HogQLParser::EQ_SINGLE);
      setState(1155);
      match(HogQLParser::LBRACE);
      setState(1156);
      columnExpr(0);
      setState(1157);
      match(HogQLParser::RBRACE);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1159);
      identifier();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WithExprListContext ------------------------------------------------------------------

HogQLParser::WithExprListContext::WithExprListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<HogQLParser::WithExprContext *> HogQLParser::WithExprListContext::withExpr() {
  return getRuleContexts<HogQLParser::WithExprContext>();
}

HogQLParser::WithExprContext* HogQLParser::WithExprListContext::withExpr(size_t i) {
  return getRuleContext<HogQLParser::WithExprContext>(i);
}

std::vector<tree::TerminalNode *> HogQLParser::WithExprListContext::COMMA() {
  return getTokens(HogQLParser::COMMA);
}

tree::TerminalNode* HogQLParser::WithExprListContext::COMMA(size_t i) {
  return getToken(HogQLParser::COMMA, i);
}


size_t HogQLParser::WithExprListContext::getRuleIndex() const {
  return HogQLParser::RuleWithExprList;
}


std::any HogQLParser::WithExprListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitWithExprList(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::WithExprListContext* HogQLParser::withExprList() {
  WithExprListContext *_localctx = _tracker.createInstance<WithExprListContext>(_ctx, getState());
  enterRule(_localctx, 132, HogQLParser::RuleWithExprList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1162);
    withExpr();
    setState(1167);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 145, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1163);
        match(HogQLParser::COMMA);
        setState(1164);
        withExpr(); 
      }
      setState(1169);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 145, _ctx);
    }
    setState(1171);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HogQLParser::COMMA) {
      setState(1170);
      match(HogQLParser::COMMA);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WithExprContext ------------------------------------------------------------------

HogQLParser::WithExprContext::WithExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t HogQLParser::WithExprContext::getRuleIndex() const {
  return HogQLParser::RuleWithExpr;
}

void HogQLParser::WithExprContext::copyFrom(WithExprContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- WithExprColumnContext ------------------------------------------------------------------

HogQLParser::ColumnExprContext* HogQLParser::WithExprColumnContext::columnExpr() {
  return getRuleContext<HogQLParser::ColumnExprContext>(0);
}

tree::TerminalNode* HogQLParser::WithExprColumnContext::AS() {
  return getToken(HogQLParser::AS, 0);
}

HogQLParser::IdentifierContext* HogQLParser::WithExprColumnContext::identifier() {
  return getRuleContext<HogQLParser::IdentifierContext>(0);
}

HogQLParser::WithExprColumnContext::WithExprColumnContext(WithExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::WithExprColumnContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitWithExprColumn(this);
  else
    return visitor->visitChildren(this);
}
//----------------- WithExprSubqueryContext ------------------------------------------------------------------

HogQLParser::IdentifierContext* HogQLParser::WithExprSubqueryContext::identifier() {
  return getRuleContext<HogQLParser::IdentifierContext>(0);
}

tree::TerminalNode* HogQLParser::WithExprSubqueryContext::AS() {
  return getToken(HogQLParser::AS, 0);
}

tree::TerminalNode* HogQLParser::WithExprSubqueryContext::LPAREN() {
  return getToken(HogQLParser::LPAREN, 0);
}

HogQLParser::SelectSetStmtContext* HogQLParser::WithExprSubqueryContext::selectSetStmt() {
  return getRuleContext<HogQLParser::SelectSetStmtContext>(0);
}

tree::TerminalNode* HogQLParser::WithExprSubqueryContext::RPAREN() {
  return getToken(HogQLParser::RPAREN, 0);
}

HogQLParser::WithExprSubqueryContext::WithExprSubqueryContext(WithExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::WithExprSubqueryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitWithExprSubquery(this);
  else
    return visitor->visitChildren(this);
}
HogQLParser::WithExprContext* HogQLParser::withExpr() {
  WithExprContext *_localctx = _tracker.createInstance<WithExprContext>(_ctx, getState());
  enterRule(_localctx, 134, HogQLParser::RuleWithExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1183);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 147, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<HogQLParser::WithExprSubqueryContext>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(1173);
      identifier();
      setState(1174);
      match(HogQLParser::AS);
      setState(1175);
      match(HogQLParser::LPAREN);
      setState(1176);
      selectSetStmt();
      setState(1177);
      match(HogQLParser::RPAREN);
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<HogQLParser::WithExprColumnContext>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(1179);
      columnExpr(0);
      setState(1180);
      match(HogQLParser::AS);
      setState(1181);
      identifier();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ColumnIdentifierContext ------------------------------------------------------------------

HogQLParser::ColumnIdentifierContext::ColumnIdentifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HogQLParser::PlaceholderContext* HogQLParser::ColumnIdentifierContext::placeholder() {
  return getRuleContext<HogQLParser::PlaceholderContext>(0);
}

HogQLParser::NestedIdentifierContext* HogQLParser::ColumnIdentifierContext::nestedIdentifier() {
  return getRuleContext<HogQLParser::NestedIdentifierContext>(0);
}

HogQLParser::TableIdentifierContext* HogQLParser::ColumnIdentifierContext::tableIdentifier() {
  return getRuleContext<HogQLParser::TableIdentifierContext>(0);
}

tree::TerminalNode* HogQLParser::ColumnIdentifierContext::DOT() {
  return getToken(HogQLParser::DOT, 0);
}


size_t HogQLParser::ColumnIdentifierContext::getRuleIndex() const {
  return HogQLParser::RuleColumnIdentifier;
}


std::any HogQLParser::ColumnIdentifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnIdentifier(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::ColumnIdentifierContext* HogQLParser::columnIdentifier() {
  ColumnIdentifierContext *_localctx = _tracker.createInstance<ColumnIdentifierContext>(_ctx, getState());
  enterRule(_localctx, 136, HogQLParser::RuleColumnIdentifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1192);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case HogQLParser::LBRACE: {
        enterOuterAlt(_localctx, 1);
        setState(1185);
        placeholder();
        break;
      }

      case HogQLParser::ALL:
      case HogQLParser::AND:
      case HogQLParser::ANTI:
      case HogQLParser::ANY:
      case HogQLParser::ARRAY:
      case HogQLParser::AS:
      case HogQLParser::ASCENDING:
      case HogQLParser::ASOF:
      case HogQLParser::BETWEEN:
      case HogQLParser::BOTH:
      case HogQLParser::BY:
      case HogQLParser::CASE:
      case HogQLParser::CAST:
      case HogQLParser::COHORT:
      case HogQLParser::COLLATE:
      case HogQLParser::CROSS:
      case HogQLParser::CUBE:
      case HogQLParser::CURRENT:
      case HogQLParser::DATE:
      case HogQLParser::DAY:
      case HogQLParser::DESC:
      case HogQLParser::DESCENDING:
      case HogQLParser::DISTINCT:
      case HogQLParser::ELSE:
      case HogQLParser::END:
      case HogQLParser::EXTRACT:
      case HogQLParser::FINAL:
      case HogQLParser::FIRST:
      case HogQLParser::FOLLOWING:
      case HogQLParser::FOR:
      case HogQLParser::FROM:
      case HogQLParser::FULL:
      case HogQLParser::GROUP:
      case HogQLParser::HAVING:
      case HogQLParser::HOUR:
      case HogQLParser::ID:
      case HogQLParser::IF:
      case HogQLParser::ILIKE:
      case HogQLParser::IN:
      case HogQLParser::INNER:
      case HogQLParser::INTERVAL:
      case HogQLParser::IS:
      case HogQLParser::JOIN:
      case HogQLParser::KEY:
      case HogQLParser::LAST:
      case HogQLParser::LEADING:
      case HogQLParser::LEFT:
      case HogQLParser::LIKE:
      case HogQLParser::LIMIT:
      case HogQLParser::MINUTE:
      case HogQLParser::MONTH:
      case HogQLParser::NOT:
      case HogQLParser::NULLS:
      case HogQLParser::OFFSET:
      case HogQLParser::ON:
      case HogQLParser::OR:
      case HogQLParser::ORDER:
      case HogQLParser::OUTER:
      case HogQLParser::OVER:
      case HogQLParser::PARTITION:
      case HogQLParser::PRECEDING:
      case HogQLParser::PREWHERE:
      case HogQLParser::QUARTER:
      case HogQLParser::RANGE:
      case HogQLParser::RETURN:
      case HogQLParser::RIGHT:
      case HogQLParser::ROLLUP:
      case HogQLParser::ROW:
      case HogQLParser::ROWS:
      case HogQLParser::SAMPLE:
      case HogQLParser::SECOND:
      case HogQLParser::SELECT:
      case HogQLParser::SEMI:
      case HogQLParser::SETTINGS:
      case HogQLParser::SUBSTRING:
      case HogQLParser::THEN:
      case HogQLParser::TIES:
      case HogQLParser::TIMESTAMP:
      case HogQLParser::TO:
      case HogQLParser::TOP:
      case HogQLParser::TOTALS:
      case HogQLParser::TRAILING:
      case HogQLParser::TRIM:
      case HogQLParser::TRUNCATE:
      case HogQLParser::UNBOUNDED:
      case HogQLParser::UNION:
      case HogQLParser::USING:
      case HogQLParser::WEEK:
      case HogQLParser::WHEN:
      case HogQLParser::WHERE:
      case HogQLParser::WINDOW:
      case HogQLParser::WITH:
      case HogQLParser::YEAR:
      case HogQLParser::IDENTIFIER: {
        enterOuterAlt(_localctx, 2);
        setState(1189);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 148, _ctx)) {
        case 1: {
          setState(1186);
          tableIdentifier();
          setState(1187);
          match(HogQLParser::DOT);
          break;
        }

        default:
          break;
        }
        setState(1191);
        nestedIdentifier();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NestedIdentifierContext ------------------------------------------------------------------

HogQLParser::NestedIdentifierContext::NestedIdentifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<HogQLParser::IdentifierContext *> HogQLParser::NestedIdentifierContext::identifier() {
  return getRuleContexts<HogQLParser::IdentifierContext>();
}

HogQLParser::IdentifierContext* HogQLParser::NestedIdentifierContext::identifier(size_t i) {
  return getRuleContext<HogQLParser::IdentifierContext>(i);
}

std::vector<tree::TerminalNode *> HogQLParser::NestedIdentifierContext::DOT() {
  return getTokens(HogQLParser::DOT);
}

tree::TerminalNode* HogQLParser::NestedIdentifierContext::DOT(size_t i) {
  return getToken(HogQLParser::DOT, i);
}


size_t HogQLParser::NestedIdentifierContext::getRuleIndex() const {
  return HogQLParser::RuleNestedIdentifier;
}


std::any HogQLParser::NestedIdentifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitNestedIdentifier(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::NestedIdentifierContext* HogQLParser::nestedIdentifier() {
  NestedIdentifierContext *_localctx = _tracker.createInstance<NestedIdentifierContext>(_ctx, getState());
  enterRule(_localctx, 138, HogQLParser::RuleNestedIdentifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1194);
    identifier();
    setState(1199);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 150, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1195);
        match(HogQLParser::DOT);
        setState(1196);
        identifier(); 
      }
      setState(1201);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 150, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TableExprContext ------------------------------------------------------------------

HogQLParser::TableExprContext::TableExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t HogQLParser::TableExprContext::getRuleIndex() const {
  return HogQLParser::RuleTableExpr;
}

void HogQLParser::TableExprContext::copyFrom(TableExprContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- TableExprTagContext ------------------------------------------------------------------

HogQLParser::HogqlxTagElementContext* HogQLParser::TableExprTagContext::hogqlxTagElement() {
  return getRuleContext<HogQLParser::HogqlxTagElementContext>(0);
}

HogQLParser::TableExprTagContext::TableExprTagContext(TableExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::TableExprTagContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitTableExprTag(this);
  else
    return visitor->visitChildren(this);
}
//----------------- TableExprIdentifierContext ------------------------------------------------------------------

HogQLParser::TableIdentifierContext* HogQLParser::TableExprIdentifierContext::tableIdentifier() {
  return getRuleContext<HogQLParser::TableIdentifierContext>(0);
}

HogQLParser::TableExprIdentifierContext::TableExprIdentifierContext(TableExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::TableExprIdentifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitTableExprIdentifier(this);
  else
    return visitor->visitChildren(this);
}
//----------------- TableExprPlaceholderContext ------------------------------------------------------------------

HogQLParser::PlaceholderContext* HogQLParser::TableExprPlaceholderContext::placeholder() {
  return getRuleContext<HogQLParser::PlaceholderContext>(0);
}

HogQLParser::TableExprPlaceholderContext::TableExprPlaceholderContext(TableExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::TableExprPlaceholderContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitTableExprPlaceholder(this);
  else
    return visitor->visitChildren(this);
}
//----------------- TableExprSubqueryContext ------------------------------------------------------------------

tree::TerminalNode* HogQLParser::TableExprSubqueryContext::LPAREN() {
  return getToken(HogQLParser::LPAREN, 0);
}

HogQLParser::SelectSetStmtContext* HogQLParser::TableExprSubqueryContext::selectSetStmt() {
  return getRuleContext<HogQLParser::SelectSetStmtContext>(0);
}

tree::TerminalNode* HogQLParser::TableExprSubqueryContext::RPAREN() {
  return getToken(HogQLParser::RPAREN, 0);
}

HogQLParser::TableExprSubqueryContext::TableExprSubqueryContext(TableExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::TableExprSubqueryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitTableExprSubquery(this);
  else
    return visitor->visitChildren(this);
}
//----------------- TableExprAliasContext ------------------------------------------------------------------

HogQLParser::TableExprContext* HogQLParser::TableExprAliasContext::tableExpr() {
  return getRuleContext<HogQLParser::TableExprContext>(0);
}

HogQLParser::AliasContext* HogQLParser::TableExprAliasContext::alias() {
  return getRuleContext<HogQLParser::AliasContext>(0);
}

tree::TerminalNode* HogQLParser::TableExprAliasContext::AS() {
  return getToken(HogQLParser::AS, 0);
}

HogQLParser::IdentifierContext* HogQLParser::TableExprAliasContext::identifier() {
  return getRuleContext<HogQLParser::IdentifierContext>(0);
}

HogQLParser::TableExprAliasContext::TableExprAliasContext(TableExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::TableExprAliasContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitTableExprAlias(this);
  else
    return visitor->visitChildren(this);
}
//----------------- TableExprFunctionContext ------------------------------------------------------------------

HogQLParser::TableFunctionExprContext* HogQLParser::TableExprFunctionContext::tableFunctionExpr() {
  return getRuleContext<HogQLParser::TableFunctionExprContext>(0);
}

HogQLParser::TableExprFunctionContext::TableExprFunctionContext(TableExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::TableExprFunctionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitTableExprFunction(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::TableExprContext* HogQLParser::tableExpr() {
   return tableExpr(0);
}

HogQLParser::TableExprContext* HogQLParser::tableExpr(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  HogQLParser::TableExprContext *_localctx = _tracker.createInstance<TableExprContext>(_ctx, parentState);
  HogQLParser::TableExprContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 140;
  enterRecursionRule(_localctx, 140, HogQLParser::RuleTableExpr, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1211);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 151, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<TableExprIdentifierContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;

      setState(1203);
      tableIdentifier();
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<TableExprFunctionContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(1204);
      tableFunctionExpr();
      break;
    }

    case 3: {
      _localctx = _tracker.createInstance<TableExprSubqueryContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(1205);
      match(HogQLParser::LPAREN);
      setState(1206);
      selectSetStmt();
      setState(1207);
      match(HogQLParser::RPAREN);
      break;
    }

    case 4: {
      _localctx = _tracker.createInstance<TableExprTagContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(1209);
      hogqlxTagElement();
      break;
    }

    case 5: {
      _localctx = _tracker.createInstance<TableExprPlaceholderContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(1210);
      placeholder();
      break;
    }

    default:
      break;
    }
    _ctx->stop = _input->LT(-1);
    setState(1221);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 153, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        auto newContext = _tracker.createInstance<TableExprAliasContext>(_tracker.createInstance<TableExprContext>(parentContext, parentState));
        _localctx = newContext;
        pushNewRecursionContext(newContext, startState, RuleTableExpr);
        setState(1213);

        if (!(precpred(_ctx, 3))) throw FailedPredicateException(this, "precpred(_ctx, 3)");
        setState(1217);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case HogQLParser::DATE:
          case HogQLParser::FIRST:
          case HogQLParser::ID:
          case HogQLParser::KEY:
          case HogQLParser::IDENTIFIER: {
            setState(1214);
            alias();
            break;
          }

          case HogQLParser::AS: {
            setState(1215);
            match(HogQLParser::AS);
            setState(1216);
            identifier();
            break;
          }

        default:
          throw NoViableAltException(this);
        } 
      }
      setState(1223);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 153, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- TableFunctionExprContext ------------------------------------------------------------------

HogQLParser::TableFunctionExprContext::TableFunctionExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HogQLParser::IdentifierContext* HogQLParser::TableFunctionExprContext::identifier() {
  return getRuleContext<HogQLParser::IdentifierContext>(0);
}

tree::TerminalNode* HogQLParser::TableFunctionExprContext::LPAREN() {
  return getToken(HogQLParser::LPAREN, 0);
}

tree::TerminalNode* HogQLParser::TableFunctionExprContext::RPAREN() {
  return getToken(HogQLParser::RPAREN, 0);
}

HogQLParser::TableArgListContext* HogQLParser::TableFunctionExprContext::tableArgList() {
  return getRuleContext<HogQLParser::TableArgListContext>(0);
}


size_t HogQLParser::TableFunctionExprContext::getRuleIndex() const {
  return HogQLParser::RuleTableFunctionExpr;
}


std::any HogQLParser::TableFunctionExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitTableFunctionExpr(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::TableFunctionExprContext* HogQLParser::tableFunctionExpr() {
  TableFunctionExprContext *_localctx = _tracker.createInstance<TableFunctionExprContext>(_ctx, getState());
  enterRule(_localctx, 142, HogQLParser::RuleTableFunctionExpr);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1224);
    identifier();
    setState(1225);
    match(HogQLParser::LPAREN);
    setState(1227);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -36169677449216002) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & 723944289947615231) != 0) || ((((_la - 131) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 131)) & 18455) != 0)) {
      setState(1226);
      tableArgList();
    }
    setState(1229);
    match(HogQLParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TableIdentifierContext ------------------------------------------------------------------

HogQLParser::TableIdentifierContext::TableIdentifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HogQLParser::IdentifierContext* HogQLParser::TableIdentifierContext::identifier() {
  return getRuleContext<HogQLParser::IdentifierContext>(0);
}

HogQLParser::DatabaseIdentifierContext* HogQLParser::TableIdentifierContext::databaseIdentifier() {
  return getRuleContext<HogQLParser::DatabaseIdentifierContext>(0);
}

tree::TerminalNode* HogQLParser::TableIdentifierContext::DOT() {
  return getToken(HogQLParser::DOT, 0);
}


size_t HogQLParser::TableIdentifierContext::getRuleIndex() const {
  return HogQLParser::RuleTableIdentifier;
}


std::any HogQLParser::TableIdentifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitTableIdentifier(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::TableIdentifierContext* HogQLParser::tableIdentifier() {
  TableIdentifierContext *_localctx = _tracker.createInstance<TableIdentifierContext>(_ctx, getState());
  enterRule(_localctx, 144, HogQLParser::RuleTableIdentifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1234);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 155, _ctx)) {
    case 1: {
      setState(1231);
      databaseIdentifier();
      setState(1232);
      match(HogQLParser::DOT);
      break;
    }

    default:
      break;
    }
    setState(1236);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TableArgListContext ------------------------------------------------------------------

HogQLParser::TableArgListContext::TableArgListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<HogQLParser::ColumnExprContext *> HogQLParser::TableArgListContext::columnExpr() {
  return getRuleContexts<HogQLParser::ColumnExprContext>();
}

HogQLParser::ColumnExprContext* HogQLParser::TableArgListContext::columnExpr(size_t i) {
  return getRuleContext<HogQLParser::ColumnExprContext>(i);
}

std::vector<tree::TerminalNode *> HogQLParser::TableArgListContext::COMMA() {
  return getTokens(HogQLParser::COMMA);
}

tree::TerminalNode* HogQLParser::TableArgListContext::COMMA(size_t i) {
  return getToken(HogQLParser::COMMA, i);
}


size_t HogQLParser::TableArgListContext::getRuleIndex() const {
  return HogQLParser::RuleTableArgList;
}


std::any HogQLParser::TableArgListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitTableArgList(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::TableArgListContext* HogQLParser::tableArgList() {
  TableArgListContext *_localctx = _tracker.createInstance<TableArgListContext>(_ctx, getState());
  enterRule(_localctx, 146, HogQLParser::RuleTableArgList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1238);
    columnExpr(0);
    setState(1243);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 156, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1239);
        match(HogQLParser::COMMA);
        setState(1240);
        columnExpr(0); 
      }
      setState(1245);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 156, _ctx);
    }
    setState(1247);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HogQLParser::COMMA) {
      setState(1246);
      match(HogQLParser::COMMA);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DatabaseIdentifierContext ------------------------------------------------------------------

HogQLParser::DatabaseIdentifierContext::DatabaseIdentifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HogQLParser::IdentifierContext* HogQLParser::DatabaseIdentifierContext::identifier() {
  return getRuleContext<HogQLParser::IdentifierContext>(0);
}


size_t HogQLParser::DatabaseIdentifierContext::getRuleIndex() const {
  return HogQLParser::RuleDatabaseIdentifier;
}


std::any HogQLParser::DatabaseIdentifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitDatabaseIdentifier(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::DatabaseIdentifierContext* HogQLParser::databaseIdentifier() {
  DatabaseIdentifierContext *_localctx = _tracker.createInstance<DatabaseIdentifierContext>(_ctx, getState());
  enterRule(_localctx, 148, HogQLParser::RuleDatabaseIdentifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1249);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FloatingLiteralContext ------------------------------------------------------------------

HogQLParser::FloatingLiteralContext::FloatingLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::FloatingLiteralContext::FLOATING_LITERAL() {
  return getToken(HogQLParser::FLOATING_LITERAL, 0);
}

tree::TerminalNode* HogQLParser::FloatingLiteralContext::DOT() {
  return getToken(HogQLParser::DOT, 0);
}

std::vector<tree::TerminalNode *> HogQLParser::FloatingLiteralContext::DECIMAL_LITERAL() {
  return getTokens(HogQLParser::DECIMAL_LITERAL);
}

tree::TerminalNode* HogQLParser::FloatingLiteralContext::DECIMAL_LITERAL(size_t i) {
  return getToken(HogQLParser::DECIMAL_LITERAL, i);
}

tree::TerminalNode* HogQLParser::FloatingLiteralContext::OCTAL_LITERAL() {
  return getToken(HogQLParser::OCTAL_LITERAL, 0);
}


size_t HogQLParser::FloatingLiteralContext::getRuleIndex() const {
  return HogQLParser::RuleFloatingLiteral;
}


std::any HogQLParser::FloatingLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitFloatingLiteral(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::FloatingLiteralContext* HogQLParser::floatingLiteral() {
  FloatingLiteralContext *_localctx = _tracker.createInstance<FloatingLiteralContext>(_ctx, getState());
  enterRule(_localctx, 150, HogQLParser::RuleFloatingLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1259);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case HogQLParser::FLOATING_LITERAL: {
        enterOuterAlt(_localctx, 1);
        setState(1251);
        match(HogQLParser::FLOATING_LITERAL);
        break;
      }

      case HogQLParser::DOT: {
        enterOuterAlt(_localctx, 2);
        setState(1252);
        match(HogQLParser::DOT);
        setState(1253);
        _la = _input->LA(1);
        if (!(_la == HogQLParser::OCTAL_LITERAL

        || _la == HogQLParser::DECIMAL_LITERAL)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

      case HogQLParser::DECIMAL_LITERAL: {
        enterOuterAlt(_localctx, 3);
        setState(1254);
        match(HogQLParser::DECIMAL_LITERAL);
        setState(1255);
        match(HogQLParser::DOT);
        setState(1257);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 158, _ctx)) {
        case 1: {
          setState(1256);
          _la = _input->LA(1);
          if (!(_la == HogQLParser::OCTAL_LITERAL

          || _la == HogQLParser::DECIMAL_LITERAL)) {
          _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
          break;
        }

        default:
          break;
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NumberLiteralContext ------------------------------------------------------------------

HogQLParser::NumberLiteralContext::NumberLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HogQLParser::FloatingLiteralContext* HogQLParser::NumberLiteralContext::floatingLiteral() {
  return getRuleContext<HogQLParser::FloatingLiteralContext>(0);
}

tree::TerminalNode* HogQLParser::NumberLiteralContext::OCTAL_LITERAL() {
  return getToken(HogQLParser::OCTAL_LITERAL, 0);
}

tree::TerminalNode* HogQLParser::NumberLiteralContext::DECIMAL_LITERAL() {
  return getToken(HogQLParser::DECIMAL_LITERAL, 0);
}

tree::TerminalNode* HogQLParser::NumberLiteralContext::HEXADECIMAL_LITERAL() {
  return getToken(HogQLParser::HEXADECIMAL_LITERAL, 0);
}

tree::TerminalNode* HogQLParser::NumberLiteralContext::INF() {
  return getToken(HogQLParser::INF, 0);
}

tree::TerminalNode* HogQLParser::NumberLiteralContext::NAN_SQL() {
  return getToken(HogQLParser::NAN_SQL, 0);
}

tree::TerminalNode* HogQLParser::NumberLiteralContext::PLUS() {
  return getToken(HogQLParser::PLUS, 0);
}

tree::TerminalNode* HogQLParser::NumberLiteralContext::DASH() {
  return getToken(HogQLParser::DASH, 0);
}


size_t HogQLParser::NumberLiteralContext::getRuleIndex() const {
  return HogQLParser::RuleNumberLiteral;
}


std::any HogQLParser::NumberLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitNumberLiteral(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::NumberLiteralContext* HogQLParser::numberLiteral() {
  NumberLiteralContext *_localctx = _tracker.createInstance<NumberLiteralContext>(_ctx, getState());
  enterRule(_localctx, 152, HogQLParser::RuleNumberLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1262);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HogQLParser::DASH

    || _la == HogQLParser::PLUS) {
      setState(1261);
      _la = _input->LA(1);
      if (!(_la == HogQLParser::DASH

      || _la == HogQLParser::PLUS)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(1270);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 161, _ctx)) {
    case 1: {
      setState(1264);
      floatingLiteral();
      break;
    }

    case 2: {
      setState(1265);
      match(HogQLParser::OCTAL_LITERAL);
      break;
    }

    case 3: {
      setState(1266);
      match(HogQLParser::DECIMAL_LITERAL);
      break;
    }

    case 4: {
      setState(1267);
      match(HogQLParser::HEXADECIMAL_LITERAL);
      break;
    }

    case 5: {
      setState(1268);
      match(HogQLParser::INF);
      break;
    }

    case 6: {
      setState(1269);
      match(HogQLParser::NAN_SQL);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LiteralContext ------------------------------------------------------------------

HogQLParser::LiteralContext::LiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HogQLParser::NumberLiteralContext* HogQLParser::LiteralContext::numberLiteral() {
  return getRuleContext<HogQLParser::NumberLiteralContext>(0);
}

tree::TerminalNode* HogQLParser::LiteralContext::STRING_LITERAL() {
  return getToken(HogQLParser::STRING_LITERAL, 0);
}

tree::TerminalNode* HogQLParser::LiteralContext::NULL_SQL() {
  return getToken(HogQLParser::NULL_SQL, 0);
}


size_t HogQLParser::LiteralContext::getRuleIndex() const {
  return HogQLParser::RuleLiteral;
}


std::any HogQLParser::LiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitLiteral(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::LiteralContext* HogQLParser::literal() {
  LiteralContext *_localctx = _tracker.createInstance<LiteralContext>(_ctx, getState());
  enterRule(_localctx, 154, HogQLParser::RuleLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1275);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case HogQLParser::INF:
      case HogQLParser::NAN_SQL:
      case HogQLParser::FLOATING_LITERAL:
      case HogQLParser::OCTAL_LITERAL:
      case HogQLParser::DECIMAL_LITERAL:
      case HogQLParser::HEXADECIMAL_LITERAL:
      case HogQLParser::DASH:
      case HogQLParser::DOT:
      case HogQLParser::PLUS: {
        enterOuterAlt(_localctx, 1);
        setState(1272);
        numberLiteral();
        break;
      }

      case HogQLParser::STRING_LITERAL: {
        enterOuterAlt(_localctx, 2);
        setState(1273);
        match(HogQLParser::STRING_LITERAL);
        break;
      }

      case HogQLParser::NULL_SQL: {
        enterOuterAlt(_localctx, 3);
        setState(1274);
        match(HogQLParser::NULL_SQL);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IntervalContext ------------------------------------------------------------------

HogQLParser::IntervalContext::IntervalContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::IntervalContext::SECOND() {
  return getToken(HogQLParser::SECOND, 0);
}

tree::TerminalNode* HogQLParser::IntervalContext::MINUTE() {
  return getToken(HogQLParser::MINUTE, 0);
}

tree::TerminalNode* HogQLParser::IntervalContext::HOUR() {
  return getToken(HogQLParser::HOUR, 0);
}

tree::TerminalNode* HogQLParser::IntervalContext::DAY() {
  return getToken(HogQLParser::DAY, 0);
}

tree::TerminalNode* HogQLParser::IntervalContext::WEEK() {
  return getToken(HogQLParser::WEEK, 0);
}

tree::TerminalNode* HogQLParser::IntervalContext::MONTH() {
  return getToken(HogQLParser::MONTH, 0);
}

tree::TerminalNode* HogQLParser::IntervalContext::QUARTER() {
  return getToken(HogQLParser::QUARTER, 0);
}

tree::TerminalNode* HogQLParser::IntervalContext::YEAR() {
  return getToken(HogQLParser::YEAR, 0);
}


size_t HogQLParser::IntervalContext::getRuleIndex() const {
  return HogQLParser::RuleInterval;
}


std::any HogQLParser::IntervalContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitInterval(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::IntervalContext* HogQLParser::interval() {
  IntervalContext *_localctx = _tracker.createInstance<IntervalContext>(_ctx, getState());
  enterRule(_localctx, 156, HogQLParser::RuleInterval);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1277);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 864692227968860160) != 0) || ((((_la - 73) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 73)) & 8724152577) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KeywordContext ------------------------------------------------------------------

HogQLParser::KeywordContext::KeywordContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::KeywordContext::ALL() {
  return getToken(HogQLParser::ALL, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::AND() {
  return getToken(HogQLParser::AND, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::ANTI() {
  return getToken(HogQLParser::ANTI, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::ANY() {
  return getToken(HogQLParser::ANY, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::ARRAY() {
  return getToken(HogQLParser::ARRAY, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::AS() {
  return getToken(HogQLParser::AS, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::ASCENDING() {
  return getToken(HogQLParser::ASCENDING, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::ASOF() {
  return getToken(HogQLParser::ASOF, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::BETWEEN() {
  return getToken(HogQLParser::BETWEEN, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::BOTH() {
  return getToken(HogQLParser::BOTH, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::BY() {
  return getToken(HogQLParser::BY, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::CASE() {
  return getToken(HogQLParser::CASE, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::CAST() {
  return getToken(HogQLParser::CAST, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::COHORT() {
  return getToken(HogQLParser::COHORT, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::COLLATE() {
  return getToken(HogQLParser::COLLATE, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::CROSS() {
  return getToken(HogQLParser::CROSS, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::CUBE() {
  return getToken(HogQLParser::CUBE, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::CURRENT() {
  return getToken(HogQLParser::CURRENT, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::DATE() {
  return getToken(HogQLParser::DATE, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::DESC() {
  return getToken(HogQLParser::DESC, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::DESCENDING() {
  return getToken(HogQLParser::DESCENDING, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::DISTINCT() {
  return getToken(HogQLParser::DISTINCT, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::ELSE() {
  return getToken(HogQLParser::ELSE, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::END() {
  return getToken(HogQLParser::END, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::EXTRACT() {
  return getToken(HogQLParser::EXTRACT, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::FINAL() {
  return getToken(HogQLParser::FINAL, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::FIRST() {
  return getToken(HogQLParser::FIRST, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::FOR() {
  return getToken(HogQLParser::FOR, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::FOLLOWING() {
  return getToken(HogQLParser::FOLLOWING, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::FROM() {
  return getToken(HogQLParser::FROM, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::FULL() {
  return getToken(HogQLParser::FULL, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::GROUP() {
  return getToken(HogQLParser::GROUP, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::HAVING() {
  return getToken(HogQLParser::HAVING, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::ID() {
  return getToken(HogQLParser::ID, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::IS() {
  return getToken(HogQLParser::IS, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::IF() {
  return getToken(HogQLParser::IF, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::ILIKE() {
  return getToken(HogQLParser::ILIKE, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::IN() {
  return getToken(HogQLParser::IN, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::INNER() {
  return getToken(HogQLParser::INNER, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::INTERVAL() {
  return getToken(HogQLParser::INTERVAL, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::JOIN() {
  return getToken(HogQLParser::JOIN, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::KEY() {
  return getToken(HogQLParser::KEY, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::LAST() {
  return getToken(HogQLParser::LAST, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::LEADING() {
  return getToken(HogQLParser::LEADING, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::LEFT() {
  return getToken(HogQLParser::LEFT, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::LIKE() {
  return getToken(HogQLParser::LIKE, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::LIMIT() {
  return getToken(HogQLParser::LIMIT, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::NOT() {
  return getToken(HogQLParser::NOT, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::NULLS() {
  return getToken(HogQLParser::NULLS, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::OFFSET() {
  return getToken(HogQLParser::OFFSET, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::ON() {
  return getToken(HogQLParser::ON, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::OR() {
  return getToken(HogQLParser::OR, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::ORDER() {
  return getToken(HogQLParser::ORDER, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::OUTER() {
  return getToken(HogQLParser::OUTER, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::OVER() {
  return getToken(HogQLParser::OVER, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::PARTITION() {
  return getToken(HogQLParser::PARTITION, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::PRECEDING() {
  return getToken(HogQLParser::PRECEDING, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::PREWHERE() {
  return getToken(HogQLParser::PREWHERE, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::RANGE() {
  return getToken(HogQLParser::RANGE, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::RETURN() {
  return getToken(HogQLParser::RETURN, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::RIGHT() {
  return getToken(HogQLParser::RIGHT, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::ROLLUP() {
  return getToken(HogQLParser::ROLLUP, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::ROW() {
  return getToken(HogQLParser::ROW, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::ROWS() {
  return getToken(HogQLParser::ROWS, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::SAMPLE() {
  return getToken(HogQLParser::SAMPLE, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::SELECT() {
  return getToken(HogQLParser::SELECT, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::SEMI() {
  return getToken(HogQLParser::SEMI, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::SETTINGS() {
  return getToken(HogQLParser::SETTINGS, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::SUBSTRING() {
  return getToken(HogQLParser::SUBSTRING, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::THEN() {
  return getToken(HogQLParser::THEN, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::TIES() {
  return getToken(HogQLParser::TIES, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::TIMESTAMP() {
  return getToken(HogQLParser::TIMESTAMP, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::TOTALS() {
  return getToken(HogQLParser::TOTALS, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::TRAILING() {
  return getToken(HogQLParser::TRAILING, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::TRIM() {
  return getToken(HogQLParser::TRIM, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::TRUNCATE() {
  return getToken(HogQLParser::TRUNCATE, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::TO() {
  return getToken(HogQLParser::TO, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::TOP() {
  return getToken(HogQLParser::TOP, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::UNBOUNDED() {
  return getToken(HogQLParser::UNBOUNDED, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::UNION() {
  return getToken(HogQLParser::UNION, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::USING() {
  return getToken(HogQLParser::USING, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::WHEN() {
  return getToken(HogQLParser::WHEN, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::WHERE() {
  return getToken(HogQLParser::WHERE, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::WINDOW() {
  return getToken(HogQLParser::WINDOW, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::WITH() {
  return getToken(HogQLParser::WITH, 0);
}


size_t HogQLParser::KeywordContext::getRuleIndex() const {
  return HogQLParser::RuleKeyword;
}


std::any HogQLParser::KeywordContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitKeyword(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::KeywordContext* HogQLParser::keyword() {
  KeywordContext *_localctx = _tracker.createInstance<KeywordContext>(_ctx, getState());
  enterRule(_localctx, 158, HogQLParser::RuleKeyword);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1279);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -6665504612824399874) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & 3775267732991) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KeywordForAliasContext ------------------------------------------------------------------

HogQLParser::KeywordForAliasContext::KeywordForAliasContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::KeywordForAliasContext::DATE() {
  return getToken(HogQLParser::DATE, 0);
}

tree::TerminalNode* HogQLParser::KeywordForAliasContext::FIRST() {
  return getToken(HogQLParser::FIRST, 0);
}

tree::TerminalNode* HogQLParser::KeywordForAliasContext::ID() {
  return getToken(HogQLParser::ID, 0);
}

tree::TerminalNode* HogQLParser::KeywordForAliasContext::KEY() {
  return getToken(HogQLParser::KEY, 0);
}


size_t HogQLParser::KeywordForAliasContext::getRuleIndex() const {
  return HogQLParser::RuleKeywordForAlias;
}


std::any HogQLParser::KeywordForAliasContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitKeywordForAlias(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::KeywordForAliasContext* HogQLParser::keywordForAlias() {
  KeywordForAliasContext *_localctx = _tracker.createInstance<KeywordForAliasContext>(_ctx, getState());
  enterRule(_localctx, 160, HogQLParser::RuleKeywordForAlias);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1281);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 2254000985473024) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AliasContext ------------------------------------------------------------------

HogQLParser::AliasContext::AliasContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::AliasContext::IDENTIFIER() {
  return getToken(HogQLParser::IDENTIFIER, 0);
}

HogQLParser::KeywordForAliasContext* HogQLParser::AliasContext::keywordForAlias() {
  return getRuleContext<HogQLParser::KeywordForAliasContext>(0);
}


size_t HogQLParser::AliasContext::getRuleIndex() const {
  return HogQLParser::RuleAlias;
}


std::any HogQLParser::AliasContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitAlias(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::AliasContext* HogQLParser::alias() {
  AliasContext *_localctx = _tracker.createInstance<AliasContext>(_ctx, getState());
  enterRule(_localctx, 162, HogQLParser::RuleAlias);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1285);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case HogQLParser::IDENTIFIER: {
        enterOuterAlt(_localctx, 1);
        setState(1283);
        match(HogQLParser::IDENTIFIER);
        break;
      }

      case HogQLParser::DATE:
      case HogQLParser::FIRST:
      case HogQLParser::ID:
      case HogQLParser::KEY: {
        enterOuterAlt(_localctx, 2);
        setState(1284);
        keywordForAlias();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IdentifierContext ------------------------------------------------------------------

HogQLParser::IdentifierContext::IdentifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::IdentifierContext::IDENTIFIER() {
  return getToken(HogQLParser::IDENTIFIER, 0);
}

HogQLParser::IntervalContext* HogQLParser::IdentifierContext::interval() {
  return getRuleContext<HogQLParser::IntervalContext>(0);
}

HogQLParser::KeywordContext* HogQLParser::IdentifierContext::keyword() {
  return getRuleContext<HogQLParser::KeywordContext>(0);
}


size_t HogQLParser::IdentifierContext::getRuleIndex() const {
  return HogQLParser::RuleIdentifier;
}


std::any HogQLParser::IdentifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitIdentifier(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::IdentifierContext* HogQLParser::identifier() {
  IdentifierContext *_localctx = _tracker.createInstance<IdentifierContext>(_ctx, getState());
  enterRule(_localctx, 164, HogQLParser::RuleIdentifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1290);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case HogQLParser::IDENTIFIER: {
        enterOuterAlt(_localctx, 1);
        setState(1287);
        match(HogQLParser::IDENTIFIER);
        break;
      }

      case HogQLParser::DAY:
      case HogQLParser::HOUR:
      case HogQLParser::MINUTE:
      case HogQLParser::MONTH:
      case HogQLParser::QUARTER:
      case HogQLParser::SECOND:
      case HogQLParser::WEEK:
      case HogQLParser::YEAR: {
        enterOuterAlt(_localctx, 2);
        setState(1288);
        interval();
        break;
      }

      case HogQLParser::ALL:
      case HogQLParser::AND:
      case HogQLParser::ANTI:
      case HogQLParser::ANY:
      case HogQLParser::ARRAY:
      case HogQLParser::AS:
      case HogQLParser::ASCENDING:
      case HogQLParser::ASOF:
      case HogQLParser::BETWEEN:
      case HogQLParser::BOTH:
      case HogQLParser::BY:
      case HogQLParser::CASE:
      case HogQLParser::CAST:
      case HogQLParser::COHORT:
      case HogQLParser::COLLATE:
      case HogQLParser::CROSS:
      case HogQLParser::CUBE:
      case HogQLParser::CURRENT:
      case HogQLParser::DATE:
      case HogQLParser::DESC:
      case HogQLParser::DESCENDING:
      case HogQLParser::DISTINCT:
      case HogQLParser::ELSE:
      case HogQLParser::END:
      case HogQLParser::EXTRACT:
      case HogQLParser::FINAL:
      case HogQLParser::FIRST:
      case HogQLParser::FOLLOWING:
      case HogQLParser::FOR:
      case HogQLParser::FROM:
      case HogQLParser::FULL:
      case HogQLParser::GROUP:
      case HogQLParser::HAVING:
      case HogQLParser::ID:
      case HogQLParser::IF:
      case HogQLParser::ILIKE:
      case HogQLParser::IN:
      case HogQLParser::INNER:
      case HogQLParser::INTERVAL:
      case HogQLParser::IS:
      case HogQLParser::JOIN:
      case HogQLParser::KEY:
      case HogQLParser::LAST:
      case HogQLParser::LEADING:
      case HogQLParser::LEFT:
      case HogQLParser::LIKE:
      case HogQLParser::LIMIT:
      case HogQLParser::NOT:
      case HogQLParser::NULLS:
      case HogQLParser::OFFSET:
      case HogQLParser::ON:
      case HogQLParser::OR:
      case HogQLParser::ORDER:
      case HogQLParser::OUTER:
      case HogQLParser::OVER:
      case HogQLParser::PARTITION:
      case HogQLParser::PRECEDING:
      case HogQLParser::PREWHERE:
      case HogQLParser::RANGE:
      case HogQLParser::RETURN:
      case HogQLParser::RIGHT:
      case HogQLParser::ROLLUP:
      case HogQLParser::ROW:
      case HogQLParser::ROWS:
      case HogQLParser::SAMPLE:
      case HogQLParser::SELECT:
      case HogQLParser::SEMI:
      case HogQLParser::SETTINGS:
      case HogQLParser::SUBSTRING:
      case HogQLParser::THEN:
      case HogQLParser::TIES:
      case HogQLParser::TIMESTAMP:
      case HogQLParser::TO:
      case HogQLParser::TOP:
      case HogQLParser::TOTALS:
      case HogQLParser::TRAILING:
      case HogQLParser::TRIM:
      case HogQLParser::TRUNCATE:
      case HogQLParser::UNBOUNDED:
      case HogQLParser::UNION:
      case HogQLParser::USING:
      case HogQLParser::WHEN:
      case HogQLParser::WHERE:
      case HogQLParser::WINDOW:
      case HogQLParser::WITH: {
        enterOuterAlt(_localctx, 3);
        setState(1289);
        keyword();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnumValueContext ------------------------------------------------------------------

HogQLParser::EnumValueContext::EnumValueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HogQLParser::StringContext* HogQLParser::EnumValueContext::string() {
  return getRuleContext<HogQLParser::StringContext>(0);
}

tree::TerminalNode* HogQLParser::EnumValueContext::EQ_SINGLE() {
  return getToken(HogQLParser::EQ_SINGLE, 0);
}

HogQLParser::NumberLiteralContext* HogQLParser::EnumValueContext::numberLiteral() {
  return getRuleContext<HogQLParser::NumberLiteralContext>(0);
}


size_t HogQLParser::EnumValueContext::getRuleIndex() const {
  return HogQLParser::RuleEnumValue;
}


std::any HogQLParser::EnumValueContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitEnumValue(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::EnumValueContext* HogQLParser::enumValue() {
  EnumValueContext *_localctx = _tracker.createInstance<EnumValueContext>(_ctx, getState());
  enterRule(_localctx, 166, HogQLParser::RuleEnumValue);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1292);
    string();
    setState(1293);
    match(HogQLParser::EQ_SINGLE);
    setState(1294);
    numberLiteral();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PlaceholderContext ------------------------------------------------------------------

HogQLParser::PlaceholderContext::PlaceholderContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::PlaceholderContext::LBRACE() {
  return getToken(HogQLParser::LBRACE, 0);
}

HogQLParser::ColumnExprContext* HogQLParser::PlaceholderContext::columnExpr() {
  return getRuleContext<HogQLParser::ColumnExprContext>(0);
}

tree::TerminalNode* HogQLParser::PlaceholderContext::RBRACE() {
  return getToken(HogQLParser::RBRACE, 0);
}


size_t HogQLParser::PlaceholderContext::getRuleIndex() const {
  return HogQLParser::RulePlaceholder;
}


std::any HogQLParser::PlaceholderContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitPlaceholder(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::PlaceholderContext* HogQLParser::placeholder() {
  PlaceholderContext *_localctx = _tracker.createInstance<PlaceholderContext>(_ctx, getState());
  enterRule(_localctx, 168, HogQLParser::RulePlaceholder);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1296);
    match(HogQLParser::LBRACE);
    setState(1297);
    columnExpr(0);
    setState(1298);
    match(HogQLParser::RBRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StringContext ------------------------------------------------------------------

HogQLParser::StringContext::StringContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::StringContext::STRING_LITERAL() {
  return getToken(HogQLParser::STRING_LITERAL, 0);
}

HogQLParser::TemplateStringContext* HogQLParser::StringContext::templateString() {
  return getRuleContext<HogQLParser::TemplateStringContext>(0);
}


size_t HogQLParser::StringContext::getRuleIndex() const {
  return HogQLParser::RuleString;
}


std::any HogQLParser::StringContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitString(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::StringContext* HogQLParser::string() {
  StringContext *_localctx = _tracker.createInstance<StringContext>(_ctx, getState());
  enterRule(_localctx, 170, HogQLParser::RuleString);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1302);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case HogQLParser::STRING_LITERAL: {
        enterOuterAlt(_localctx, 1);
        setState(1300);
        match(HogQLParser::STRING_LITERAL);
        break;
      }

      case HogQLParser::QUOTE_SINGLE_TEMPLATE: {
        enterOuterAlt(_localctx, 2);
        setState(1301);
        templateString();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TemplateStringContext ------------------------------------------------------------------

HogQLParser::TemplateStringContext::TemplateStringContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::TemplateStringContext::QUOTE_SINGLE_TEMPLATE() {
  return getToken(HogQLParser::QUOTE_SINGLE_TEMPLATE, 0);
}

tree::TerminalNode* HogQLParser::TemplateStringContext::QUOTE_SINGLE() {
  return getToken(HogQLParser::QUOTE_SINGLE, 0);
}

std::vector<HogQLParser::StringContentsContext *> HogQLParser::TemplateStringContext::stringContents() {
  return getRuleContexts<HogQLParser::StringContentsContext>();
}

HogQLParser::StringContentsContext* HogQLParser::TemplateStringContext::stringContents(size_t i) {
  return getRuleContext<HogQLParser::StringContentsContext>(i);
}


size_t HogQLParser::TemplateStringContext::getRuleIndex() const {
  return HogQLParser::RuleTemplateString;
}


std::any HogQLParser::TemplateStringContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitTemplateString(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::TemplateStringContext* HogQLParser::templateString() {
  TemplateStringContext *_localctx = _tracker.createInstance<TemplateStringContext>(_ctx, getState());
  enterRule(_localctx, 172, HogQLParser::RuleTemplateString);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1304);
    match(HogQLParser::QUOTE_SINGLE_TEMPLATE);
    setState(1308);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == HogQLParser::STRING_TEXT

    || _la == HogQLParser::STRING_ESCAPE_TRIGGER) {
      setState(1305);
      stringContents();
      setState(1310);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1311);
    match(HogQLParser::QUOTE_SINGLE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StringContentsContext ------------------------------------------------------------------

HogQLParser::StringContentsContext::StringContentsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::StringContentsContext::STRING_ESCAPE_TRIGGER() {
  return getToken(HogQLParser::STRING_ESCAPE_TRIGGER, 0);
}

HogQLParser::ColumnExprContext* HogQLParser::StringContentsContext::columnExpr() {
  return getRuleContext<HogQLParser::ColumnExprContext>(0);
}

tree::TerminalNode* HogQLParser::StringContentsContext::RBRACE() {
  return getToken(HogQLParser::RBRACE, 0);
}

tree::TerminalNode* HogQLParser::StringContentsContext::STRING_TEXT() {
  return getToken(HogQLParser::STRING_TEXT, 0);
}


size_t HogQLParser::StringContentsContext::getRuleIndex() const {
  return HogQLParser::RuleStringContents;
}


std::any HogQLParser::StringContentsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitStringContents(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::StringContentsContext* HogQLParser::stringContents() {
  StringContentsContext *_localctx = _tracker.createInstance<StringContentsContext>(_ctx, getState());
  enterRule(_localctx, 174, HogQLParser::RuleStringContents);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1318);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case HogQLParser::STRING_ESCAPE_TRIGGER: {
        enterOuterAlt(_localctx, 1);
        setState(1313);
        match(HogQLParser::STRING_ESCAPE_TRIGGER);
        setState(1314);
        columnExpr(0);
        setState(1315);
        match(HogQLParser::RBRACE);
        break;
      }

      case HogQLParser::STRING_TEXT: {
        enterOuterAlt(_localctx, 2);
        setState(1317);
        match(HogQLParser::STRING_TEXT);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FullTemplateStringContext ------------------------------------------------------------------

HogQLParser::FullTemplateStringContext::FullTemplateStringContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::FullTemplateStringContext::QUOTE_SINGLE_TEMPLATE_FULL() {
  return getToken(HogQLParser::QUOTE_SINGLE_TEMPLATE_FULL, 0);
}

tree::TerminalNode* HogQLParser::FullTemplateStringContext::EOF() {
  return getToken(HogQLParser::EOF, 0);
}

std::vector<HogQLParser::StringContentsFullContext *> HogQLParser::FullTemplateStringContext::stringContentsFull() {
  return getRuleContexts<HogQLParser::StringContentsFullContext>();
}

HogQLParser::StringContentsFullContext* HogQLParser::FullTemplateStringContext::stringContentsFull(size_t i) {
  return getRuleContext<HogQLParser::StringContentsFullContext>(i);
}


size_t HogQLParser::FullTemplateStringContext::getRuleIndex() const {
  return HogQLParser::RuleFullTemplateString;
}


std::any HogQLParser::FullTemplateStringContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitFullTemplateString(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::FullTemplateStringContext* HogQLParser::fullTemplateString() {
  FullTemplateStringContext *_localctx = _tracker.createInstance<FullTemplateStringContext>(_ctx, getState());
  enterRule(_localctx, 176, HogQLParser::RuleFullTemplateString);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1320);
    match(HogQLParser::QUOTE_SINGLE_TEMPLATE_FULL);
    setState(1324);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == HogQLParser::FULL_STRING_TEXT

    || _la == HogQLParser::FULL_STRING_ESCAPE_TRIGGER) {
      setState(1321);
      stringContentsFull();
      setState(1326);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1327);
    match(HogQLParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StringContentsFullContext ------------------------------------------------------------------

HogQLParser::StringContentsFullContext::StringContentsFullContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::StringContentsFullContext::FULL_STRING_ESCAPE_TRIGGER() {
  return getToken(HogQLParser::FULL_STRING_ESCAPE_TRIGGER, 0);
}

HogQLParser::ColumnExprContext* HogQLParser::StringContentsFullContext::columnExpr() {
  return getRuleContext<HogQLParser::ColumnExprContext>(0);
}

tree::TerminalNode* HogQLParser::StringContentsFullContext::RBRACE() {
  return getToken(HogQLParser::RBRACE, 0);
}

tree::TerminalNode* HogQLParser::StringContentsFullContext::FULL_STRING_TEXT() {
  return getToken(HogQLParser::FULL_STRING_TEXT, 0);
}


size_t HogQLParser::StringContentsFullContext::getRuleIndex() const {
  return HogQLParser::RuleStringContentsFull;
}


std::any HogQLParser::StringContentsFullContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitStringContentsFull(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::StringContentsFullContext* HogQLParser::stringContentsFull() {
  StringContentsFullContext *_localctx = _tracker.createInstance<StringContentsFullContext>(_ctx, getState());
  enterRule(_localctx, 178, HogQLParser::RuleStringContentsFull);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1334);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case HogQLParser::FULL_STRING_ESCAPE_TRIGGER: {
        enterOuterAlt(_localctx, 1);
        setState(1329);
        match(HogQLParser::FULL_STRING_ESCAPE_TRIGGER);
        setState(1330);
        columnExpr(0);
        setState(1331);
        match(HogQLParser::RBRACE);
        break;
      }

      case HogQLParser::FULL_STRING_TEXT: {
        enterOuterAlt(_localctx, 2);
        setState(1333);
        match(HogQLParser::FULL_STRING_TEXT);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

bool HogQLParser::sempred(RuleContext *context, size_t ruleIndex, size_t predicateIndex) {
  switch (ruleIndex) {
    case 41: return joinExprSempred(antlrcpp::downCast<JoinExprContext *>(context), predicateIndex);
    case 61: return columnExprSempred(antlrcpp::downCast<ColumnExprContext *>(context), predicateIndex);
    case 70: return tableExprSempred(antlrcpp::downCast<TableExprContext *>(context), predicateIndex);

  default:
    break;
  }
  return true;
}

bool HogQLParser::joinExprSempred(JoinExprContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 0: return precpred(_ctx, 3);
    case 1: return precpred(_ctx, 4);

  default:
    break;
  }
  return true;
}

bool HogQLParser::columnExprSempred(ColumnExprContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 2: return precpred(_ctx, 19);
    case 3: return precpred(_ctx, 18);
    case 4: return precpred(_ctx, 17);
    case 5: return precpred(_ctx, 15);
    case 6: return precpred(_ctx, 13);
    case 7: return precpred(_ctx, 12);
    case 8: return precpred(_ctx, 11);
    case 9: return precpred(_ctx, 10);
    case 10: return precpred(_ctx, 31);
    case 11: return precpred(_ctx, 30);
    case 12: return precpred(_ctx, 26);
    case 13: return precpred(_ctx, 25);
    case 14: return precpred(_ctx, 24);
    case 15: return precpred(_ctx, 23);
    case 16: return precpred(_ctx, 22);
    case 17: return precpred(_ctx, 21);
    case 18: return precpred(_ctx, 16);
    case 19: return precpred(_ctx, 9);

  default:
    break;
  }
  return true;
}

bool HogQLParser::tableExprSempred(TableExprContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 20: return precpred(_ctx, 3);

  default:
    break;
  }
  return true;
}

void HogQLParser::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  hogqlparserParserInitialize();
#else
  ::antlr4::internal::call_once(hogqlparserParserOnceFlag, hogqlparserParserInitialize);
#endif
}
