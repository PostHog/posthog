
// Generated from HogQLParser.g4 by ANTLR 4.13.1


#include "HogQLParserVisitor.h"

#include "HogQLParser.h"


using namespace antlrcpp;

using namespace antlr4;

namespace {

struct HogQLParserStaticData final {
  HogQLParserStaticData(std::vector<std::string> ruleNames,
                        std::vector<std::string> literalNames,
                        std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  HogQLParserStaticData(const HogQLParserStaticData&) = delete;
  HogQLParserStaticData(HogQLParserStaticData&&) = delete;
  HogQLParserStaticData& operator=(const HogQLParserStaticData&) = delete;
  HogQLParserStaticData& operator=(HogQLParserStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag hogqlparserParserOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
HogQLParserStaticData *hogqlparserParserStaticData = nullptr;

void hogqlparserParserInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (hogqlparserParserStaticData != nullptr) {
    return;
  }
#else
  assert(hogqlparserParserStaticData == nullptr);
#endif
  auto staticData = std::make_unique<HogQLParserStaticData>(
    std::vector<std::string>{
      "program", "declaration", "expression", "varDecl", "identifierList", 
      "statement", "returnStmt", "ifStmt", "whileStmt", "funcStmt", "varAssignment", 
      "exprStmt", "emptyStmt", "block", "kvPair", "kvPairList", "select", 
      "selectUnionStmt", "selectStmtWithParens", "selectStmt", "withClause", 
      "topClause", "fromClause", "arrayJoinClause", "windowClause", "prewhereClause", 
      "whereClause", "groupByClause", "havingClause", "orderByClause", "projectionOrderByClause", 
      "limitAndOffsetClause", "offsetOnlyClause", "settingsClause", "joinExpr", 
      "joinOp", "joinOpCross", "joinConstraintClause", "sampleClause", "orderExprList", 
      "orderExpr", "ratioExpr", "settingExprList", "settingExpr", "windowExpr", 
      "winPartitionByClause", "winOrderByClause", "winFrameClause", "winFrameExtend", 
      "winFrameBound", "expr", "columnTypeExpr", "columnExprList", "columnExpr", 
      "columnArgList", "columnArgExpr", "columnLambdaExpr", "hogqlxTagElement", 
      "hogqlxTagAttribute", "withExprList", "withExpr", "columnIdentifier", 
      "nestedIdentifier", "tableExpr", "tableFunctionExpr", "tableIdentifier", 
      "tableArgList", "databaseIdentifier", "floatingLiteral", "numberLiteral", 
      "literal", "interval", "keyword", "keywordForAlias", "alias", "identifier", 
      "enumValue", "placeholder", "string", "templateString", "stringContents", 
      "fullTemplateString", "stringContentsFull"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "'->'", "'*'", "'`'", "'\\'", "':'", "','", "'||'", 
      "'-'", "'$'", "'.'", "'=='", "'='", "'>='", "'>'", "'#'", "'~*'", 
      "'=~*'", "'{'", "'['", "'('", "'<='", "'<'", "", "'!~*'", "'!~'", 
      "'\\u003F\\u003F'", "'%'", "'+'", "'\\u003F'", "'\"'", "'f''", "'F''", 
      "'''", "'~'", "'=~'", "'}'", "']'", "')'", "';'", "'/'", "'_'"
    },
    std::vector<std::string>{
      "", "ALL", "AND", "ANTI", "ANY", "ARRAY", "AS", "ASCENDING", "ASOF", 
      "BETWEEN", "BOTH", "BY", "CASE", "CAST", "COHORT", "COLLATE", "CROSS", 
      "CUBE", "CURRENT", "DATE", "DAY", "DESC", "DESCENDING", "DISTINCT", 
      "ELSE", "END", "EXTRACT", "FINAL", "FIRST", "FN", "FOLLOWING", "FOR", 
      "FROM", "FULL", "GROUP", "HAVING", "HOUR", "ID", "IF", "ILIKE", "IN", 
      "INF", "INNER", "INTERVAL", "IS", "JOIN", "KEY", "LAST", "LEADING", 
      "LEFT", "LET", "LIKE", "LIMIT", "MINUTE", "MONTH", "NAN_SQL", "NOT", 
      "NULL_SQL", "NULLS", "OFFSET", "ON", "OR", "ORDER", "OUTER", "OVER", 
      "PARTITION", "PRECEDING", "PREWHERE", "QUARTER", "RANGE", "RETURN", 
      "RIGHT", "ROLLUP", "ROW", "ROWS", "SAMPLE", "SECOND", "SELECT", "SEMI", 
      "SETTINGS", "SUBSTRING", "THEN", "TIES", "TIMESTAMP", "TO", "TOP", 
      "TOTALS", "TRAILING", "TRIM", "TRUNCATE", "UNBOUNDED", "UNION", "USING", 
      "WEEK", "WHEN", "WHERE", "WHILE", "WINDOW", "WITH", "YEAR", "ESCAPE_CHAR_COMMON", 
      "IDENTIFIER", "FLOATING_LITERAL", "OCTAL_LITERAL", "DECIMAL_LITERAL", 
      "HEXADECIMAL_LITERAL", "STRING_LITERAL", "ARROW", "ASTERISK", "BACKQUOTE", 
      "BACKSLASH", "COLON", "COMMA", "CONCAT", "DASH", "DOLLAR", "DOT", 
      "EQ_DOUBLE", "EQ_SINGLE", "GT_EQ", "GT", "HASH", "IREGEX_SINGLE", 
      "IREGEX_DOUBLE", "LBRACE", "LBRACKET", "LPAREN", "LT_EQ", "LT", "NOT_EQ", 
      "NOT_IREGEX", "NOT_REGEX", "NULLISH", "PERCENT", "PLUS", "QUERY", 
      "QUOTE_DOUBLE", "QUOTE_SINGLE_TEMPLATE", "QUOTE_SINGLE_TEMPLATE_FULL", 
      "QUOTE_SINGLE", "REGEX_SINGLE", "REGEX_DOUBLE", "RBRACE", "RBRACKET", 
      "RPAREN", "SEMICOLON", "SLASH", "UNDERSCORE", "MULTI_LINE_COMMENT", 
      "SINGLE_LINE_COMMENT", "WHITESPACE", "STRING_TEXT", "STRING_ESCAPE_TRIGGER", 
      "FULL_STRING_TEXT", "FULL_STRING_ESCAPE_TRIGGER"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,1,154,1179,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
  	2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,
  	7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,1,0,5,0,168,8,
  	0,10,0,12,0,171,9,0,1,0,1,0,1,1,1,1,3,1,177,8,1,1,2,1,2,1,3,1,3,1,3,1,
  	3,1,3,3,3,186,8,3,1,4,1,4,1,4,5,4,191,8,4,10,4,12,4,194,9,4,1,5,1,5,1,
  	5,1,5,1,5,1,5,1,5,1,5,3,5,204,8,5,1,6,1,6,3,6,208,8,6,1,6,3,6,211,8,6,
  	1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,220,8,7,1,8,1,8,1,8,1,8,1,8,1,8,3,8,228,
  	8,8,1,9,1,9,1,9,1,9,3,9,234,8,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,
  	1,11,1,11,3,11,246,8,11,1,12,1,12,1,13,1,13,5,13,252,8,13,10,13,12,13,
  	255,9,13,1,13,1,13,1,14,1,14,1,14,1,14,1,15,1,15,1,15,5,15,266,8,15,10,
  	15,12,15,269,9,15,1,16,1,16,1,16,3,16,274,8,16,1,16,1,16,1,17,1,17,1,
  	17,1,17,5,17,282,8,17,10,17,12,17,285,9,17,1,18,1,18,1,18,1,18,1,18,1,
  	18,3,18,293,8,18,1,19,3,19,296,8,19,1,19,1,19,3,19,300,8,19,1,19,3,19,
  	303,8,19,1,19,1,19,3,19,307,8,19,1,19,3,19,310,8,19,1,19,3,19,313,8,19,
  	1,19,3,19,316,8,19,1,19,3,19,319,8,19,1,19,1,19,3,19,323,8,19,1,19,1,
  	19,3,19,327,8,19,1,19,3,19,330,8,19,1,19,3,19,333,8,19,1,19,3,19,336,
  	8,19,1,19,1,19,3,19,340,8,19,1,19,3,19,343,8,19,1,20,1,20,1,20,1,21,1,
  	21,1,21,1,21,3,21,352,8,21,1,22,1,22,1,22,1,23,3,23,358,8,23,1,23,1,23,
  	1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,
  	1,24,5,24,377,8,24,10,24,12,24,380,9,24,1,25,1,25,1,25,1,26,1,26,1,26,
  	1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,3,27,396,8,27,1,28,1,28,1,28,
  	1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,3,31,413,
  	8,31,1,31,1,31,1,31,1,31,3,31,419,8,31,1,31,1,31,1,31,1,31,3,31,425,8,
  	31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,3,31,436,8,31,3,31,438,
  	8,31,1,32,1,32,1,32,1,33,1,33,1,33,1,34,1,34,1,34,3,34,449,8,34,1,34,
  	3,34,452,8,34,1,34,1,34,1,34,1,34,3,34,458,8,34,1,34,1,34,1,34,1,34,1,
  	34,1,34,3,34,466,8,34,1,34,1,34,1,34,1,34,5,34,472,8,34,10,34,12,34,475,
  	9,34,1,35,3,35,478,8,35,1,35,1,35,1,35,3,35,483,8,35,1,35,3,35,486,8,
  	35,1,35,3,35,489,8,35,1,35,1,35,3,35,493,8,35,1,35,1,35,3,35,497,8,35,
  	1,35,3,35,500,8,35,3,35,502,8,35,1,35,3,35,505,8,35,1,35,1,35,3,35,509,
  	8,35,1,35,1,35,3,35,513,8,35,1,35,3,35,516,8,35,3,35,518,8,35,3,35,520,
  	8,35,1,36,1,36,1,36,3,36,525,8,36,1,37,1,37,1,37,1,37,1,37,1,37,1,37,
  	1,37,1,37,3,37,536,8,37,1,38,1,38,1,38,1,38,3,38,542,8,38,1,39,1,39,1,
  	39,5,39,547,8,39,10,39,12,39,550,9,39,1,40,1,40,3,40,554,8,40,1,40,1,
  	40,3,40,558,8,40,1,40,1,40,3,40,562,8,40,1,41,1,41,1,41,1,41,3,41,568,
  	8,41,3,41,570,8,41,1,42,1,42,1,42,5,42,575,8,42,10,42,12,42,578,9,42,
  	1,43,1,43,1,43,1,43,1,44,3,44,585,8,44,1,44,3,44,588,8,44,1,44,3,44,591,
  	8,44,1,45,1,45,1,45,1,45,1,46,1,46,1,46,1,46,1,47,1,47,1,47,1,48,1,48,
  	1,48,1,48,1,48,1,48,3,48,610,8,48,1,49,1,49,1,49,1,49,1,49,1,49,1,49,
  	1,49,1,49,1,49,1,49,1,49,3,49,624,8,49,1,50,1,50,1,50,1,51,1,51,1,51,
  	1,51,1,51,1,51,1,51,1,51,1,51,5,51,638,8,51,10,51,12,51,641,9,51,1,51,
  	1,51,1,51,1,51,1,51,1,51,1,51,5,51,650,8,51,10,51,12,51,653,9,51,1,51,
  	1,51,1,51,1,51,1,51,1,51,1,51,5,51,662,8,51,10,51,12,51,665,9,51,1,51,
  	1,51,1,51,1,51,1,51,3,51,672,8,51,1,51,1,51,3,51,676,8,51,1,52,1,52,1,
  	52,5,52,681,8,52,10,52,12,52,684,9,52,1,53,1,53,1,53,3,53,689,8,53,1,
  	53,1,53,1,53,1,53,1,53,4,53,696,8,53,11,53,12,53,697,1,53,1,53,3,53,702,
  	8,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,
  	1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,3,53,726,8,53,1,53,1,53,
  	1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,3,53,
  	743,8,53,1,53,1,53,1,53,1,53,3,53,749,8,53,1,53,3,53,752,8,53,1,53,3,
  	53,755,8,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,3,53,765,8,53,1,53,
  	1,53,1,53,1,53,3,53,771,8,53,1,53,3,53,774,8,53,1,53,3,53,777,8,53,1,
  	53,1,53,1,53,1,53,1,53,1,53,3,53,785,8,53,1,53,3,53,788,8,53,1,53,1,53,
  	3,53,792,8,53,1,53,3,53,795,8,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,
  	53,1,53,1,53,1,53,1,53,3,53,809,8,53,1,53,1,53,1,53,1,53,1,53,1,53,1,
  	53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,3,53,826,8,53,1,53,1,53,1,
  	53,3,53,831,8,53,1,53,1,53,3,53,835,8,53,1,53,1,53,1,53,1,53,3,53,841,
  	8,53,1,53,1,53,1,53,1,53,1,53,3,53,848,8,53,1,53,1,53,1,53,1,53,1,53,
  	1,53,1,53,1,53,1,53,1,53,3,53,860,8,53,1,53,1,53,3,53,864,8,53,1,53,3,
  	53,867,8,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,3,53,876,8,53,1,53,1,53,
  	1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,3,53,890,8,53,1,53,
  	1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,
  	1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,3,53,917,8,53,1,53,
  	1,53,1,53,1,53,1,53,1,53,3,53,925,8,53,5,53,927,8,53,10,53,12,53,930,
  	9,53,1,54,1,54,1,54,5,54,935,8,54,10,54,12,54,938,9,54,1,55,1,55,3,55,
  	942,8,55,1,56,1,56,1,56,1,56,5,56,948,8,56,10,56,12,56,951,9,56,1,56,
  	1,56,1,56,1,56,1,56,5,56,958,8,56,10,56,12,56,961,9,56,3,56,963,8,56,
  	1,56,1,56,1,56,1,57,1,57,1,57,5,57,971,8,57,10,57,12,57,974,9,57,1,57,
  	1,57,1,57,1,57,1,57,1,57,5,57,982,8,57,10,57,12,57,985,9,57,1,57,1,57,
  	3,57,989,8,57,1,57,1,57,1,57,1,57,1,57,3,57,996,8,57,1,58,1,58,1,58,1,
  	58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,3,58,1009,8,58,1,59,1,59,1,59,5,
  	59,1014,8,59,10,59,12,59,1017,9,59,1,60,1,60,1,60,1,60,1,60,1,60,1,60,
  	1,60,1,60,1,60,3,60,1029,8,60,1,61,1,61,1,61,1,61,3,61,1035,8,61,1,61,
  	3,61,1038,8,61,1,62,1,62,1,62,5,62,1043,8,62,10,62,12,62,1046,9,62,1,
  	63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,3,63,1057,8,63,1,63,1,63,1,
  	63,1,63,3,63,1063,8,63,5,63,1065,8,63,10,63,12,63,1068,9,63,1,64,1,64,
  	1,64,3,64,1073,8,64,1,64,1,64,1,65,1,65,1,65,3,65,1080,8,65,1,65,1,65,
  	1,66,1,66,1,66,5,66,1087,8,66,10,66,12,66,1090,9,66,1,67,1,67,1,68,1,
  	68,1,68,1,68,1,68,1,68,3,68,1100,8,68,3,68,1102,8,68,1,69,3,69,1105,8,
  	69,1,69,1,69,1,69,1,69,1,69,1,69,3,69,1113,8,69,1,70,1,70,1,70,3,70,1118,
  	8,70,1,71,1,71,1,72,1,72,1,73,1,73,1,74,1,74,3,74,1128,8,74,1,75,1,75,
  	1,75,3,75,1133,8,75,1,76,1,76,1,76,1,76,1,77,1,77,1,77,1,77,1,78,1,78,
  	3,78,1145,8,78,1,79,1,79,5,79,1149,8,79,10,79,12,79,1152,9,79,1,79,1,
  	79,1,80,1,80,1,80,1,80,1,80,3,80,1161,8,80,1,81,1,81,5,81,1165,8,81,10,
  	81,12,81,1168,9,81,1,81,1,81,1,82,1,82,1,82,1,82,1,82,3,82,1177,8,82,
  	1,82,0,3,68,106,126,83,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,
  	34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,
  	80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,
  	120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,
  	156,158,160,162,164,0,16,2,0,17,17,72,72,2,0,42,42,49,49,3,0,1,1,4,4,
  	8,8,4,0,1,1,3,4,8,8,78,78,2,0,49,49,71,71,2,0,1,1,4,4,2,0,7,7,21,22,2,
  	0,28,28,47,47,2,0,69,69,74,74,3,0,10,10,48,48,87,87,2,0,39,39,51,51,1,
  	0,103,104,2,0,114,114,134,134,7,0,20,20,36,36,53,54,68,68,76,76,93,93,
  	99,99,12,0,1,19,21,28,30,35,37,40,42,49,51,52,56,56,58,67,69,75,77,92,
  	94,95,97,98,4,0,19,19,28,28,37,37,46,46,1317,0,169,1,0,0,0,2,176,1,0,
  	0,0,4,178,1,0,0,0,6,180,1,0,0,0,8,187,1,0,0,0,10,203,1,0,0,0,12,205,1,
  	0,0,0,14,212,1,0,0,0,16,221,1,0,0,0,18,229,1,0,0,0,20,238,1,0,0,0,22,
  	243,1,0,0,0,24,247,1,0,0,0,26,249,1,0,0,0,28,258,1,0,0,0,30,262,1,0,0,
  	0,32,273,1,0,0,0,34,277,1,0,0,0,36,292,1,0,0,0,38,295,1,0,0,0,40,344,
  	1,0,0,0,42,347,1,0,0,0,44,353,1,0,0,0,46,357,1,0,0,0,48,363,1,0,0,0,50,
  	381,1,0,0,0,52,384,1,0,0,0,54,387,1,0,0,0,56,397,1,0,0,0,58,400,1,0,0,
  	0,60,404,1,0,0,0,62,437,1,0,0,0,64,439,1,0,0,0,66,442,1,0,0,0,68,457,
  	1,0,0,0,70,519,1,0,0,0,72,524,1,0,0,0,74,535,1,0,0,0,76,537,1,0,0,0,78,
  	543,1,0,0,0,80,551,1,0,0,0,82,569,1,0,0,0,84,571,1,0,0,0,86,579,1,0,0,
  	0,88,584,1,0,0,0,90,592,1,0,0,0,92,596,1,0,0,0,94,600,1,0,0,0,96,609,
  	1,0,0,0,98,623,1,0,0,0,100,625,1,0,0,0,102,675,1,0,0,0,104,677,1,0,0,
  	0,106,834,1,0,0,0,108,931,1,0,0,0,110,941,1,0,0,0,112,962,1,0,0,0,114,
  	995,1,0,0,0,116,1008,1,0,0,0,118,1010,1,0,0,0,120,1028,1,0,0,0,122,1037,
  	1,0,0,0,124,1039,1,0,0,0,126,1056,1,0,0,0,128,1069,1,0,0,0,130,1079,1,
  	0,0,0,132,1083,1,0,0,0,134,1091,1,0,0,0,136,1101,1,0,0,0,138,1104,1,0,
  	0,0,140,1117,1,0,0,0,142,1119,1,0,0,0,144,1121,1,0,0,0,146,1123,1,0,0,
  	0,148,1127,1,0,0,0,150,1132,1,0,0,0,152,1134,1,0,0,0,154,1138,1,0,0,0,
  	156,1144,1,0,0,0,158,1146,1,0,0,0,160,1160,1,0,0,0,162,1162,1,0,0,0,164,
  	1176,1,0,0,0,166,168,3,2,1,0,167,166,1,0,0,0,168,171,1,0,0,0,169,167,
  	1,0,0,0,169,170,1,0,0,0,170,172,1,0,0,0,171,169,1,0,0,0,172,173,5,0,0,
  	1,173,1,1,0,0,0,174,177,3,6,3,0,175,177,3,10,5,0,176,174,1,0,0,0,176,
  	175,1,0,0,0,177,3,1,0,0,0,178,179,3,106,53,0,179,5,1,0,0,0,180,181,5,
  	50,0,0,181,185,3,150,75,0,182,183,5,111,0,0,183,184,5,118,0,0,184,186,
  	3,4,2,0,185,182,1,0,0,0,185,186,1,0,0,0,186,7,1,0,0,0,187,192,3,150,75,
  	0,188,189,5,112,0,0,189,191,3,150,75,0,190,188,1,0,0,0,191,194,1,0,0,
  	0,192,190,1,0,0,0,192,193,1,0,0,0,193,9,1,0,0,0,194,192,1,0,0,0,195,204,
  	3,12,6,0,196,204,3,14,7,0,197,204,3,16,8,0,198,204,3,18,9,0,199,204,3,
  	20,10,0,200,204,3,22,11,0,201,204,3,24,12,0,202,204,3,26,13,0,203,195,
  	1,0,0,0,203,196,1,0,0,0,203,197,1,0,0,0,203,198,1,0,0,0,203,199,1,0,0,
  	0,203,200,1,0,0,0,203,201,1,0,0,0,203,202,1,0,0,0,204,11,1,0,0,0,205,
  	207,5,70,0,0,206,208,3,4,2,0,207,206,1,0,0,0,207,208,1,0,0,0,208,210,
  	1,0,0,0,209,211,5,145,0,0,210,209,1,0,0,0,210,211,1,0,0,0,211,13,1,0,
  	0,0,212,213,5,38,0,0,213,214,5,126,0,0,214,215,3,4,2,0,215,216,5,144,
  	0,0,216,219,3,10,5,0,217,218,5,24,0,0,218,220,3,10,5,0,219,217,1,0,0,
  	0,219,220,1,0,0,0,220,15,1,0,0,0,221,222,5,96,0,0,222,223,5,126,0,0,223,
  	224,3,4,2,0,224,225,5,144,0,0,225,227,3,10,5,0,226,228,5,145,0,0,227,
  	226,1,0,0,0,227,228,1,0,0,0,228,17,1,0,0,0,229,230,5,29,0,0,230,231,3,
  	150,75,0,231,233,5,126,0,0,232,234,3,8,4,0,233,232,1,0,0,0,233,234,1,
  	0,0,0,234,235,1,0,0,0,235,236,5,144,0,0,236,237,3,26,13,0,237,19,1,0,
  	0,0,238,239,3,4,2,0,239,240,5,111,0,0,240,241,5,118,0,0,241,242,3,4,2,
  	0,242,21,1,0,0,0,243,245,3,4,2,0,244,246,5,145,0,0,245,244,1,0,0,0,245,
  	246,1,0,0,0,246,23,1,0,0,0,247,248,5,145,0,0,248,25,1,0,0,0,249,253,5,
  	124,0,0,250,252,3,2,1,0,251,250,1,0,0,0,252,255,1,0,0,0,253,251,1,0,0,
  	0,253,254,1,0,0,0,254,256,1,0,0,0,255,253,1,0,0,0,256,257,5,142,0,0,257,
  	27,1,0,0,0,258,259,3,4,2,0,259,260,5,111,0,0,260,261,3,4,2,0,261,29,1,
  	0,0,0,262,267,3,28,14,0,263,264,5,112,0,0,264,266,3,28,14,0,265,263,1,
  	0,0,0,266,269,1,0,0,0,267,265,1,0,0,0,267,268,1,0,0,0,268,31,1,0,0,0,
  	269,267,1,0,0,0,270,274,3,34,17,0,271,274,3,38,19,0,272,274,3,114,57,
  	0,273,270,1,0,0,0,273,271,1,0,0,0,273,272,1,0,0,0,274,275,1,0,0,0,275,
  	276,5,0,0,1,276,33,1,0,0,0,277,283,3,36,18,0,278,279,5,91,0,0,279,280,
  	5,1,0,0,280,282,3,36,18,0,281,278,1,0,0,0,282,285,1,0,0,0,283,281,1,0,
  	0,0,283,284,1,0,0,0,284,35,1,0,0,0,285,283,1,0,0,0,286,293,3,38,19,0,
  	287,288,5,126,0,0,288,289,3,34,17,0,289,290,5,144,0,0,290,293,1,0,0,0,
  	291,293,3,154,77,0,292,286,1,0,0,0,292,287,1,0,0,0,292,291,1,0,0,0,293,
  	37,1,0,0,0,294,296,3,40,20,0,295,294,1,0,0,0,295,296,1,0,0,0,296,297,
  	1,0,0,0,297,299,5,77,0,0,298,300,5,23,0,0,299,298,1,0,0,0,299,300,1,0,
  	0,0,300,302,1,0,0,0,301,303,3,42,21,0,302,301,1,0,0,0,302,303,1,0,0,0,
  	303,304,1,0,0,0,304,306,3,104,52,0,305,307,3,44,22,0,306,305,1,0,0,0,
  	306,307,1,0,0,0,307,309,1,0,0,0,308,310,3,46,23,0,309,308,1,0,0,0,309,
  	310,1,0,0,0,310,312,1,0,0,0,311,313,3,50,25,0,312,311,1,0,0,0,312,313,
  	1,0,0,0,313,315,1,0,0,0,314,316,3,52,26,0,315,314,1,0,0,0,315,316,1,0,
  	0,0,316,318,1,0,0,0,317,319,3,54,27,0,318,317,1,0,0,0,318,319,1,0,0,0,
  	319,322,1,0,0,0,320,321,5,98,0,0,321,323,7,0,0,0,322,320,1,0,0,0,322,
  	323,1,0,0,0,323,326,1,0,0,0,324,325,5,98,0,0,325,327,5,86,0,0,326,324,
  	1,0,0,0,326,327,1,0,0,0,327,329,1,0,0,0,328,330,3,56,28,0,329,328,1,0,
  	0,0,329,330,1,0,0,0,330,332,1,0,0,0,331,333,3,48,24,0,332,331,1,0,0,0,
  	332,333,1,0,0,0,333,335,1,0,0,0,334,336,3,58,29,0,335,334,1,0,0,0,335,
  	336,1,0,0,0,336,339,1,0,0,0,337,340,3,62,31,0,338,340,3,64,32,0,339,337,
  	1,0,0,0,339,338,1,0,0,0,339,340,1,0,0,0,340,342,1,0,0,0,341,343,3,66,
  	33,0,342,341,1,0,0,0,342,343,1,0,0,0,343,39,1,0,0,0,344,345,5,98,0,0,
  	345,346,3,118,59,0,346,41,1,0,0,0,347,348,5,85,0,0,348,351,5,104,0,0,
  	349,350,5,98,0,0,350,352,5,82,0,0,351,349,1,0,0,0,351,352,1,0,0,0,352,
  	43,1,0,0,0,353,354,5,32,0,0,354,355,3,68,34,0,355,45,1,0,0,0,356,358,
  	7,1,0,0,357,356,1,0,0,0,357,358,1,0,0,0,358,359,1,0,0,0,359,360,5,5,0,
  	0,360,361,5,45,0,0,361,362,3,104,52,0,362,47,1,0,0,0,363,364,5,97,0,0,
  	364,365,3,150,75,0,365,366,5,6,0,0,366,367,5,126,0,0,367,368,3,88,44,
  	0,368,378,5,144,0,0,369,370,5,112,0,0,370,371,3,150,75,0,371,372,5,6,
  	0,0,372,373,5,126,0,0,373,374,3,88,44,0,374,375,5,144,0,0,375,377,1,0,
  	0,0,376,369,1,0,0,0,377,380,1,0,0,0,378,376,1,0,0,0,378,379,1,0,0,0,379,
  	49,1,0,0,0,380,378,1,0,0,0,381,382,5,67,0,0,382,383,3,106,53,0,383,51,
  	1,0,0,0,384,385,5,95,0,0,385,386,3,106,53,0,386,53,1,0,0,0,387,388,5,
  	34,0,0,388,395,5,11,0,0,389,390,7,0,0,0,390,391,5,126,0,0,391,392,3,104,
  	52,0,392,393,5,144,0,0,393,396,1,0,0,0,394,396,3,104,52,0,395,389,1,0,
  	0,0,395,394,1,0,0,0,396,55,1,0,0,0,397,398,5,35,0,0,398,399,3,106,53,
  	0,399,57,1,0,0,0,400,401,5,62,0,0,401,402,5,11,0,0,402,403,3,78,39,0,
  	403,59,1,0,0,0,404,405,5,62,0,0,405,406,5,11,0,0,406,407,3,104,52,0,407,
  	61,1,0,0,0,408,409,5,52,0,0,409,412,3,106,53,0,410,411,5,112,0,0,411,
  	413,3,106,53,0,412,410,1,0,0,0,412,413,1,0,0,0,413,418,1,0,0,0,414,415,
  	5,98,0,0,415,419,5,82,0,0,416,417,5,11,0,0,417,419,3,104,52,0,418,414,
  	1,0,0,0,418,416,1,0,0,0,418,419,1,0,0,0,419,438,1,0,0,0,420,421,5,52,
  	0,0,421,424,3,106,53,0,422,423,5,98,0,0,423,425,5,82,0,0,424,422,1,0,
  	0,0,424,425,1,0,0,0,425,426,1,0,0,0,426,427,5,59,0,0,427,428,3,106,53,
  	0,428,438,1,0,0,0,429,430,5,52,0,0,430,431,3,106,53,0,431,432,5,59,0,
  	0,432,435,3,106,53,0,433,434,5,11,0,0,434,436,3,104,52,0,435,433,1,0,
  	0,0,435,436,1,0,0,0,436,438,1,0,0,0,437,408,1,0,0,0,437,420,1,0,0,0,437,
  	429,1,0,0,0,438,63,1,0,0,0,439,440,5,59,0,0,440,441,3,106,53,0,441,65,
  	1,0,0,0,442,443,5,79,0,0,443,444,3,84,42,0,444,67,1,0,0,0,445,446,6,34,
  	-1,0,446,448,3,126,63,0,447,449,5,27,0,0,448,447,1,0,0,0,448,449,1,0,
  	0,0,449,451,1,0,0,0,450,452,3,76,38,0,451,450,1,0,0,0,451,452,1,0,0,0,
  	452,458,1,0,0,0,453,454,5,126,0,0,454,455,3,68,34,0,455,456,5,144,0,0,
  	456,458,1,0,0,0,457,445,1,0,0,0,457,453,1,0,0,0,458,473,1,0,0,0,459,460,
  	10,3,0,0,460,461,3,72,36,0,461,462,3,68,34,4,462,472,1,0,0,0,463,465,
  	10,4,0,0,464,466,3,70,35,0,465,464,1,0,0,0,465,466,1,0,0,0,466,467,1,
  	0,0,0,467,468,5,45,0,0,468,469,3,68,34,0,469,470,3,74,37,0,470,472,1,
  	0,0,0,471,459,1,0,0,0,471,463,1,0,0,0,472,475,1,0,0,0,473,471,1,0,0,0,
  	473,474,1,0,0,0,474,69,1,0,0,0,475,473,1,0,0,0,476,478,7,2,0,0,477,476,
  	1,0,0,0,477,478,1,0,0,0,478,479,1,0,0,0,479,486,5,42,0,0,480,482,5,42,
  	0,0,481,483,7,2,0,0,482,481,1,0,0,0,482,483,1,0,0,0,483,486,1,0,0,0,484,
  	486,7,2,0,0,485,477,1,0,0,0,485,480,1,0,0,0,485,484,1,0,0,0,486,520,1,
  	0,0,0,487,489,7,3,0,0,488,487,1,0,0,0,488,489,1,0,0,0,489,490,1,0,0,0,
  	490,492,7,4,0,0,491,493,5,63,0,0,492,491,1,0,0,0,492,493,1,0,0,0,493,
  	502,1,0,0,0,494,496,7,4,0,0,495,497,5,63,0,0,496,495,1,0,0,0,496,497,
  	1,0,0,0,497,499,1,0,0,0,498,500,7,3,0,0,499,498,1,0,0,0,499,500,1,0,0,
  	0,500,502,1,0,0,0,501,488,1,0,0,0,501,494,1,0,0,0,502,520,1,0,0,0,503,
  	505,7,5,0,0,504,503,1,0,0,0,504,505,1,0,0,0,505,506,1,0,0,0,506,508,5,
  	33,0,0,507,509,5,63,0,0,508,507,1,0,0,0,508,509,1,0,0,0,509,518,1,0,0,
  	0,510,512,5,33,0,0,511,513,5,63,0,0,512,511,1,0,0,0,512,513,1,0,0,0,513,
  	515,1,0,0,0,514,516,7,5,0,0,515,514,1,0,0,0,515,516,1,0,0,0,516,518,1,
  	0,0,0,517,504,1,0,0,0,517,510,1,0,0,0,518,520,1,0,0,0,519,485,1,0,0,0,
  	519,501,1,0,0,0,519,517,1,0,0,0,520,71,1,0,0,0,521,522,5,16,0,0,522,525,
  	5,45,0,0,523,525,5,112,0,0,524,521,1,0,0,0,524,523,1,0,0,0,525,73,1,0,
  	0,0,526,527,5,60,0,0,527,536,3,104,52,0,528,529,5,92,0,0,529,530,5,126,
  	0,0,530,531,3,104,52,0,531,532,5,144,0,0,532,536,1,0,0,0,533,534,5,92,
  	0,0,534,536,3,104,52,0,535,526,1,0,0,0,535,528,1,0,0,0,535,533,1,0,0,
  	0,536,75,1,0,0,0,537,538,5,75,0,0,538,541,3,82,41,0,539,540,5,59,0,0,
  	540,542,3,82,41,0,541,539,1,0,0,0,541,542,1,0,0,0,542,77,1,0,0,0,543,
  	548,3,80,40,0,544,545,5,112,0,0,545,547,3,80,40,0,546,544,1,0,0,0,547,
  	550,1,0,0,0,548,546,1,0,0,0,548,549,1,0,0,0,549,79,1,0,0,0,550,548,1,
  	0,0,0,551,553,3,106,53,0,552,554,7,6,0,0,553,552,1,0,0,0,553,554,1,0,
  	0,0,554,557,1,0,0,0,555,556,5,58,0,0,556,558,7,7,0,0,557,555,1,0,0,0,
  	557,558,1,0,0,0,558,561,1,0,0,0,559,560,5,15,0,0,560,562,5,106,0,0,561,
  	559,1,0,0,0,561,562,1,0,0,0,562,81,1,0,0,0,563,570,3,154,77,0,564,567,
  	3,138,69,0,565,566,5,146,0,0,566,568,3,138,69,0,567,565,1,0,0,0,567,568,
  	1,0,0,0,568,570,1,0,0,0,569,563,1,0,0,0,569,564,1,0,0,0,570,83,1,0,0,
  	0,571,576,3,86,43,0,572,573,5,112,0,0,573,575,3,86,43,0,574,572,1,0,0,
  	0,575,578,1,0,0,0,576,574,1,0,0,0,576,577,1,0,0,0,577,85,1,0,0,0,578,
  	576,1,0,0,0,579,580,3,150,75,0,580,581,5,118,0,0,581,582,3,140,70,0,582,
  	87,1,0,0,0,583,585,3,90,45,0,584,583,1,0,0,0,584,585,1,0,0,0,585,587,
  	1,0,0,0,586,588,3,92,46,0,587,586,1,0,0,0,587,588,1,0,0,0,588,590,1,0,
  	0,0,589,591,3,94,47,0,590,589,1,0,0,0,590,591,1,0,0,0,591,89,1,0,0,0,
  	592,593,5,65,0,0,593,594,5,11,0,0,594,595,3,104,52,0,595,91,1,0,0,0,596,
  	597,5,62,0,0,597,598,5,11,0,0,598,599,3,78,39,0,599,93,1,0,0,0,600,601,
  	7,8,0,0,601,602,3,96,48,0,602,95,1,0,0,0,603,610,3,98,49,0,604,605,5,
  	9,0,0,605,606,3,98,49,0,606,607,5,2,0,0,607,608,3,98,49,0,608,610,1,0,
  	0,0,609,603,1,0,0,0,609,604,1,0,0,0,610,97,1,0,0,0,611,612,5,18,0,0,612,
  	624,5,73,0,0,613,614,5,90,0,0,614,624,5,66,0,0,615,616,5,90,0,0,616,624,
  	5,30,0,0,617,618,3,138,69,0,618,619,5,66,0,0,619,624,1,0,0,0,620,621,
  	3,138,69,0,621,622,5,30,0,0,622,624,1,0,0,0,623,611,1,0,0,0,623,613,1,
  	0,0,0,623,615,1,0,0,0,623,617,1,0,0,0,623,620,1,0,0,0,624,99,1,0,0,0,
  	625,626,3,106,53,0,626,627,5,0,0,1,627,101,1,0,0,0,628,676,3,150,75,0,
  	629,630,3,150,75,0,630,631,5,126,0,0,631,632,3,150,75,0,632,639,3,102,
  	51,0,633,634,5,112,0,0,634,635,3,150,75,0,635,636,3,102,51,0,636,638,
  	1,0,0,0,637,633,1,0,0,0,638,641,1,0,0,0,639,637,1,0,0,0,639,640,1,0,0,
  	0,640,642,1,0,0,0,641,639,1,0,0,0,642,643,5,144,0,0,643,676,1,0,0,0,644,
  	645,3,150,75,0,645,646,5,126,0,0,646,651,3,152,76,0,647,648,5,112,0,0,
  	648,650,3,152,76,0,649,647,1,0,0,0,650,653,1,0,0,0,651,649,1,0,0,0,651,
  	652,1,0,0,0,652,654,1,0,0,0,653,651,1,0,0,0,654,655,5,144,0,0,655,676,
  	1,0,0,0,656,657,3,150,75,0,657,658,5,126,0,0,658,663,3,102,51,0,659,660,
  	5,112,0,0,660,662,3,102,51,0,661,659,1,0,0,0,662,665,1,0,0,0,663,661,
  	1,0,0,0,663,664,1,0,0,0,664,666,1,0,0,0,665,663,1,0,0,0,666,667,5,144,
  	0,0,667,676,1,0,0,0,668,669,3,150,75,0,669,671,5,126,0,0,670,672,3,104,
  	52,0,671,670,1,0,0,0,671,672,1,0,0,0,672,673,1,0,0,0,673,674,5,144,0,
  	0,674,676,1,0,0,0,675,628,1,0,0,0,675,629,1,0,0,0,675,644,1,0,0,0,675,
  	656,1,0,0,0,675,668,1,0,0,0,676,103,1,0,0,0,677,682,3,106,53,0,678,679,
  	5,112,0,0,679,681,3,106,53,0,680,678,1,0,0,0,681,684,1,0,0,0,682,680,
  	1,0,0,0,682,683,1,0,0,0,683,105,1,0,0,0,684,682,1,0,0,0,685,686,6,53,
  	-1,0,686,688,5,12,0,0,687,689,3,106,53,0,688,687,1,0,0,0,688,689,1,0,
  	0,0,689,695,1,0,0,0,690,691,5,94,0,0,691,692,3,106,53,0,692,693,5,81,
  	0,0,693,694,3,106,53,0,694,696,1,0,0,0,695,690,1,0,0,0,696,697,1,0,0,
  	0,697,695,1,0,0,0,697,698,1,0,0,0,698,701,1,0,0,0,699,700,5,24,0,0,700,
  	702,3,106,53,0,701,699,1,0,0,0,701,702,1,0,0,0,702,703,1,0,0,0,703,704,
  	5,25,0,0,704,835,1,0,0,0,705,706,5,13,0,0,706,707,5,126,0,0,707,708,3,
  	106,53,0,708,709,5,6,0,0,709,710,3,102,51,0,710,711,5,144,0,0,711,835,
  	1,0,0,0,712,713,5,19,0,0,713,835,5,106,0,0,714,715,5,43,0,0,715,716,3,
  	106,53,0,716,717,3,142,71,0,717,835,1,0,0,0,718,719,5,80,0,0,719,720,
  	5,126,0,0,720,721,3,106,53,0,721,722,5,32,0,0,722,725,3,106,53,0,723,
  	724,5,31,0,0,724,726,3,106,53,0,725,723,1,0,0,0,725,726,1,0,0,0,726,727,
  	1,0,0,0,727,728,5,144,0,0,728,835,1,0,0,0,729,730,5,83,0,0,730,835,5,
  	106,0,0,731,732,5,88,0,0,732,733,5,126,0,0,733,734,7,9,0,0,734,735,3,
  	156,78,0,735,736,5,32,0,0,736,737,3,106,53,0,737,738,5,144,0,0,738,835,
  	1,0,0,0,739,740,3,150,75,0,740,742,5,126,0,0,741,743,3,104,52,0,742,741,
  	1,0,0,0,742,743,1,0,0,0,743,744,1,0,0,0,744,745,5,144,0,0,745,754,1,0,
  	0,0,746,748,5,126,0,0,747,749,5,23,0,0,748,747,1,0,0,0,748,749,1,0,0,
  	0,749,751,1,0,0,0,750,752,3,108,54,0,751,750,1,0,0,0,751,752,1,0,0,0,
  	752,753,1,0,0,0,753,755,5,144,0,0,754,746,1,0,0,0,754,755,1,0,0,0,755,
  	756,1,0,0,0,756,757,5,64,0,0,757,758,5,126,0,0,758,759,3,88,44,0,759,
  	760,5,144,0,0,760,835,1,0,0,0,761,762,3,150,75,0,762,764,5,126,0,0,763,
  	765,3,104,52,0,764,763,1,0,0,0,764,765,1,0,0,0,765,766,1,0,0,0,766,767,
  	5,144,0,0,767,776,1,0,0,0,768,770,5,126,0,0,769,771,5,23,0,0,770,769,
  	1,0,0,0,770,771,1,0,0,0,771,773,1,0,0,0,772,774,3,108,54,0,773,772,1,
  	0,0,0,773,774,1,0,0,0,774,775,1,0,0,0,775,777,5,144,0,0,776,768,1,0,0,
  	0,776,777,1,0,0,0,777,778,1,0,0,0,778,779,5,64,0,0,779,780,3,150,75,0,
  	780,835,1,0,0,0,781,787,3,150,75,0,782,784,5,126,0,0,783,785,3,104,52,
  	0,784,783,1,0,0,0,784,785,1,0,0,0,785,786,1,0,0,0,786,788,5,144,0,0,787,
  	782,1,0,0,0,787,788,1,0,0,0,788,789,1,0,0,0,789,791,5,126,0,0,790,792,
  	5,23,0,0,791,790,1,0,0,0,791,792,1,0,0,0,792,794,1,0,0,0,793,795,3,108,
  	54,0,794,793,1,0,0,0,794,795,1,0,0,0,795,796,1,0,0,0,796,797,5,144,0,
  	0,797,835,1,0,0,0,798,835,3,114,57,0,799,835,3,158,79,0,800,835,3,140,
  	70,0,801,802,5,114,0,0,802,835,3,106,53,19,803,804,5,56,0,0,804,835,3,
  	106,53,13,805,806,3,130,65,0,806,807,5,116,0,0,807,809,1,0,0,0,808,805,
  	1,0,0,0,808,809,1,0,0,0,809,810,1,0,0,0,810,835,5,108,0,0,811,812,5,126,
  	0,0,812,813,3,34,17,0,813,814,5,144,0,0,814,835,1,0,0,0,815,816,5,126,
  	0,0,816,817,3,106,53,0,817,818,5,144,0,0,818,835,1,0,0,0,819,820,5,126,
  	0,0,820,821,3,104,52,0,821,822,5,144,0,0,822,835,1,0,0,0,823,825,5,125,
  	0,0,824,826,3,104,52,0,825,824,1,0,0,0,825,826,1,0,0,0,826,827,1,0,0,
  	0,827,835,5,143,0,0,828,830,5,124,0,0,829,831,3,30,15,0,830,829,1,0,0,
  	0,830,831,1,0,0,0,831,832,1,0,0,0,832,835,5,142,0,0,833,835,3,122,61,
  	0,834,685,1,0,0,0,834,705,1,0,0,0,834,712,1,0,0,0,834,714,1,0,0,0,834,
  	718,1,0,0,0,834,729,1,0,0,0,834,731,1,0,0,0,834,739,1,0,0,0,834,761,1,
  	0,0,0,834,781,1,0,0,0,834,798,1,0,0,0,834,799,1,0,0,0,834,800,1,0,0,0,
  	834,801,1,0,0,0,834,803,1,0,0,0,834,808,1,0,0,0,834,811,1,0,0,0,834,815,
  	1,0,0,0,834,819,1,0,0,0,834,823,1,0,0,0,834,828,1,0,0,0,834,833,1,0,0,
  	0,835,928,1,0,0,0,836,840,10,18,0,0,837,841,5,108,0,0,838,841,5,146,0,
  	0,839,841,5,133,0,0,840,837,1,0,0,0,840,838,1,0,0,0,840,839,1,0,0,0,841,
  	842,1,0,0,0,842,927,3,106,53,19,843,847,10,17,0,0,844,848,5,134,0,0,845,
  	848,5,114,0,0,846,848,5,113,0,0,847,844,1,0,0,0,847,845,1,0,0,0,847,846,
  	1,0,0,0,848,849,1,0,0,0,849,927,3,106,53,18,850,875,10,16,0,0,851,876,
  	5,117,0,0,852,876,5,118,0,0,853,876,5,129,0,0,854,876,5,127,0,0,855,876,
  	5,128,0,0,856,876,5,119,0,0,857,876,5,120,0,0,858,860,5,56,0,0,859,858,
  	1,0,0,0,859,860,1,0,0,0,860,861,1,0,0,0,861,863,5,40,0,0,862,864,5,14,
  	0,0,863,862,1,0,0,0,863,864,1,0,0,0,864,876,1,0,0,0,865,867,5,56,0,0,
  	866,865,1,0,0,0,866,867,1,0,0,0,867,868,1,0,0,0,868,876,7,10,0,0,869,
  	876,5,140,0,0,870,876,5,141,0,0,871,876,5,131,0,0,872,876,5,122,0,0,873,
  	876,5,123,0,0,874,876,5,130,0,0,875,851,1,0,0,0,875,852,1,0,0,0,875,853,
  	1,0,0,0,875,854,1,0,0,0,875,855,1,0,0,0,875,856,1,0,0,0,875,857,1,0,0,
  	0,875,859,1,0,0,0,875,866,1,0,0,0,875,869,1,0,0,0,875,870,1,0,0,0,875,
  	871,1,0,0,0,875,872,1,0,0,0,875,873,1,0,0,0,875,874,1,0,0,0,876,877,1,
  	0,0,0,877,927,3,106,53,17,878,879,10,14,0,0,879,880,5,132,0,0,880,927,
  	3,106,53,15,881,882,10,12,0,0,882,883,5,2,0,0,883,927,3,106,53,13,884,
  	885,10,11,0,0,885,886,5,61,0,0,886,927,3,106,53,12,887,889,10,10,0,0,
  	888,890,5,56,0,0,889,888,1,0,0,0,889,890,1,0,0,0,890,891,1,0,0,0,891,
  	892,5,9,0,0,892,893,3,106,53,0,893,894,5,2,0,0,894,895,3,106,53,11,895,
  	927,1,0,0,0,896,897,10,9,0,0,897,898,5,135,0,0,898,899,3,106,53,0,899,
  	900,5,111,0,0,900,901,3,106,53,9,901,927,1,0,0,0,902,903,10,22,0,0,903,
  	904,5,125,0,0,904,905,3,106,53,0,905,906,5,143,0,0,906,927,1,0,0,0,907,
  	908,10,21,0,0,908,909,5,116,0,0,909,927,5,104,0,0,910,911,10,20,0,0,911,
  	912,5,116,0,0,912,927,3,150,75,0,913,914,10,15,0,0,914,916,5,44,0,0,915,
  	917,5,56,0,0,916,915,1,0,0,0,916,917,1,0,0,0,917,918,1,0,0,0,918,927,
  	5,57,0,0,919,924,10,8,0,0,920,921,5,6,0,0,921,925,3,150,75,0,922,923,
  	5,6,0,0,923,925,5,106,0,0,924,920,1,0,0,0,924,922,1,0,0,0,925,927,1,0,
  	0,0,926,836,1,0,0,0,926,843,1,0,0,0,926,850,1,0,0,0,926,878,1,0,0,0,926,
  	881,1,0,0,0,926,884,1,0,0,0,926,887,1,0,0,0,926,896,1,0,0,0,926,902,1,
  	0,0,0,926,907,1,0,0,0,926,910,1,0,0,0,926,913,1,0,0,0,926,919,1,0,0,0,
  	927,930,1,0,0,0,928,926,1,0,0,0,928,929,1,0,0,0,929,107,1,0,0,0,930,928,
  	1,0,0,0,931,936,3,110,55,0,932,933,5,112,0,0,933,935,3,110,55,0,934,932,
  	1,0,0,0,935,938,1,0,0,0,936,934,1,0,0,0,936,937,1,0,0,0,937,109,1,0,0,
  	0,938,936,1,0,0,0,939,942,3,112,56,0,940,942,3,106,53,0,941,939,1,0,0,
  	0,941,940,1,0,0,0,942,111,1,0,0,0,943,944,5,126,0,0,944,949,3,150,75,
  	0,945,946,5,112,0,0,946,948,3,150,75,0,947,945,1,0,0,0,948,951,1,0,0,
  	0,949,947,1,0,0,0,949,950,1,0,0,0,950,952,1,0,0,0,951,949,1,0,0,0,952,
  	953,5,144,0,0,953,963,1,0,0,0,954,959,3,150,75,0,955,956,5,112,0,0,956,
  	958,3,150,75,0,957,955,1,0,0,0,958,961,1,0,0,0,959,957,1,0,0,0,959,960,
  	1,0,0,0,960,963,1,0,0,0,961,959,1,0,0,0,962,943,1,0,0,0,962,954,1,0,0,
  	0,963,964,1,0,0,0,964,965,5,107,0,0,965,966,3,106,53,0,966,113,1,0,0,
  	0,967,968,5,128,0,0,968,972,3,150,75,0,969,971,3,116,58,0,970,969,1,0,
  	0,0,971,974,1,0,0,0,972,970,1,0,0,0,972,973,1,0,0,0,973,975,1,0,0,0,974,
  	972,1,0,0,0,975,976,5,146,0,0,976,977,5,120,0,0,977,996,1,0,0,0,978,979,
  	5,128,0,0,979,983,3,150,75,0,980,982,3,116,58,0,981,980,1,0,0,0,982,985,
  	1,0,0,0,983,981,1,0,0,0,983,984,1,0,0,0,984,986,1,0,0,0,985,983,1,0,0,
  	0,986,988,5,120,0,0,987,989,3,114,57,0,988,987,1,0,0,0,988,989,1,0,0,
  	0,989,990,1,0,0,0,990,991,5,128,0,0,991,992,5,146,0,0,992,993,3,150,75,
  	0,993,994,5,120,0,0,994,996,1,0,0,0,995,967,1,0,0,0,995,978,1,0,0,0,996,
  	115,1,0,0,0,997,998,3,150,75,0,998,999,5,118,0,0,999,1000,3,156,78,0,
  	1000,1009,1,0,0,0,1001,1002,3,150,75,0,1002,1003,5,118,0,0,1003,1004,
  	5,124,0,0,1004,1005,3,106,53,0,1005,1006,5,142,0,0,1006,1009,1,0,0,0,
  	1007,1009,3,150,75,0,1008,997,1,0,0,0,1008,1001,1,0,0,0,1008,1007,1,0,
  	0,0,1009,117,1,0,0,0,1010,1015,3,120,60,0,1011,1012,5,112,0,0,1012,1014,
  	3,120,60,0,1013,1011,1,0,0,0,1014,1017,1,0,0,0,1015,1013,1,0,0,0,1015,
  	1016,1,0,0,0,1016,119,1,0,0,0,1017,1015,1,0,0,0,1018,1019,3,150,75,0,
  	1019,1020,5,6,0,0,1020,1021,5,126,0,0,1021,1022,3,34,17,0,1022,1023,5,
  	144,0,0,1023,1029,1,0,0,0,1024,1025,3,106,53,0,1025,1026,5,6,0,0,1026,
  	1027,3,150,75,0,1027,1029,1,0,0,0,1028,1018,1,0,0,0,1028,1024,1,0,0,0,
  	1029,121,1,0,0,0,1030,1038,3,154,77,0,1031,1032,3,130,65,0,1032,1033,
  	5,116,0,0,1033,1035,1,0,0,0,1034,1031,1,0,0,0,1034,1035,1,0,0,0,1035,
  	1036,1,0,0,0,1036,1038,3,124,62,0,1037,1030,1,0,0,0,1037,1034,1,0,0,0,
  	1038,123,1,0,0,0,1039,1044,3,150,75,0,1040,1041,5,116,0,0,1041,1043,3,
  	150,75,0,1042,1040,1,0,0,0,1043,1046,1,0,0,0,1044,1042,1,0,0,0,1044,1045,
  	1,0,0,0,1045,125,1,0,0,0,1046,1044,1,0,0,0,1047,1048,6,63,-1,0,1048,1057,
  	3,130,65,0,1049,1057,3,128,64,0,1050,1051,5,126,0,0,1051,1052,3,34,17,
  	0,1052,1053,5,144,0,0,1053,1057,1,0,0,0,1054,1057,3,114,57,0,1055,1057,
  	3,154,77,0,1056,1047,1,0,0,0,1056,1049,1,0,0,0,1056,1050,1,0,0,0,1056,
  	1054,1,0,0,0,1056,1055,1,0,0,0,1057,1066,1,0,0,0,1058,1062,10,3,0,0,1059,
  	1063,3,148,74,0,1060,1061,5,6,0,0,1061,1063,3,150,75,0,1062,1059,1,0,
  	0,0,1062,1060,1,0,0,0,1063,1065,1,0,0,0,1064,1058,1,0,0,0,1065,1068,1,
  	0,0,0,1066,1064,1,0,0,0,1066,1067,1,0,0,0,1067,127,1,0,0,0,1068,1066,
  	1,0,0,0,1069,1070,3,150,75,0,1070,1072,5,126,0,0,1071,1073,3,132,66,0,
  	1072,1071,1,0,0,0,1072,1073,1,0,0,0,1073,1074,1,0,0,0,1074,1075,5,144,
  	0,0,1075,129,1,0,0,0,1076,1077,3,134,67,0,1077,1078,5,116,0,0,1078,1080,
  	1,0,0,0,1079,1076,1,0,0,0,1079,1080,1,0,0,0,1080,1081,1,0,0,0,1081,1082,
  	3,150,75,0,1082,131,1,0,0,0,1083,1088,3,106,53,0,1084,1085,5,112,0,0,
  	1085,1087,3,106,53,0,1086,1084,1,0,0,0,1087,1090,1,0,0,0,1088,1086,1,
  	0,0,0,1088,1089,1,0,0,0,1089,133,1,0,0,0,1090,1088,1,0,0,0,1091,1092,
  	3,150,75,0,1092,135,1,0,0,0,1093,1102,5,102,0,0,1094,1095,5,116,0,0,1095,
  	1102,7,11,0,0,1096,1097,5,104,0,0,1097,1099,5,116,0,0,1098,1100,7,11,
  	0,0,1099,1098,1,0,0,0,1099,1100,1,0,0,0,1100,1102,1,0,0,0,1101,1093,1,
  	0,0,0,1101,1094,1,0,0,0,1101,1096,1,0,0,0,1102,137,1,0,0,0,1103,1105,
  	7,12,0,0,1104,1103,1,0,0,0,1104,1105,1,0,0,0,1105,1112,1,0,0,0,1106,1113,
  	3,136,68,0,1107,1113,5,103,0,0,1108,1113,5,104,0,0,1109,1113,5,105,0,
  	0,1110,1113,5,41,0,0,1111,1113,5,55,0,0,1112,1106,1,0,0,0,1112,1107,1,
  	0,0,0,1112,1108,1,0,0,0,1112,1109,1,0,0,0,1112,1110,1,0,0,0,1112,1111,
  	1,0,0,0,1113,139,1,0,0,0,1114,1118,3,138,69,0,1115,1118,5,106,0,0,1116,
  	1118,5,57,0,0,1117,1114,1,0,0,0,1117,1115,1,0,0,0,1117,1116,1,0,0,0,1118,
  	141,1,0,0,0,1119,1120,7,13,0,0,1120,143,1,0,0,0,1121,1122,7,14,0,0,1122,
  	145,1,0,0,0,1123,1124,7,15,0,0,1124,147,1,0,0,0,1125,1128,5,101,0,0,1126,
  	1128,3,146,73,0,1127,1125,1,0,0,0,1127,1126,1,0,0,0,1128,149,1,0,0,0,
  	1129,1133,5,101,0,0,1130,1133,3,142,71,0,1131,1133,3,144,72,0,1132,1129,
  	1,0,0,0,1132,1130,1,0,0,0,1132,1131,1,0,0,0,1133,151,1,0,0,0,1134,1135,
  	3,156,78,0,1135,1136,5,118,0,0,1136,1137,3,138,69,0,1137,153,1,0,0,0,
  	1138,1139,5,124,0,0,1139,1140,3,150,75,0,1140,1141,5,142,0,0,1141,155,
  	1,0,0,0,1142,1145,5,106,0,0,1143,1145,3,158,79,0,1144,1142,1,0,0,0,1144,
  	1143,1,0,0,0,1145,157,1,0,0,0,1146,1150,5,137,0,0,1147,1149,3,160,80,
  	0,1148,1147,1,0,0,0,1149,1152,1,0,0,0,1150,1148,1,0,0,0,1150,1151,1,0,
  	0,0,1151,1153,1,0,0,0,1152,1150,1,0,0,0,1153,1154,5,139,0,0,1154,159,
  	1,0,0,0,1155,1156,5,152,0,0,1156,1157,3,106,53,0,1157,1158,5,142,0,0,
  	1158,1161,1,0,0,0,1159,1161,5,151,0,0,1160,1155,1,0,0,0,1160,1159,1,0,
  	0,0,1161,161,1,0,0,0,1162,1166,5,138,0,0,1163,1165,3,164,82,0,1164,1163,
  	1,0,0,0,1165,1168,1,0,0,0,1166,1164,1,0,0,0,1166,1167,1,0,0,0,1167,1169,
  	1,0,0,0,1168,1166,1,0,0,0,1169,1170,5,0,0,1,1170,163,1,0,0,0,1171,1172,
  	5,154,0,0,1172,1173,3,106,53,0,1173,1174,5,142,0,0,1174,1177,1,0,0,0,
  	1175,1177,5,153,0,0,1176,1171,1,0,0,0,1176,1175,1,0,0,0,1177,165,1,0,
  	0,0,145,169,176,185,192,203,207,210,219,227,233,245,253,267,273,283,292,
  	295,299,302,306,309,312,315,318,322,326,329,332,335,339,342,351,357,378,
  	395,412,418,424,435,437,448,451,457,465,471,473,477,482,485,488,492,496,
  	499,501,504,508,512,515,517,519,524,535,541,548,553,557,561,567,569,576,
  	584,587,590,609,623,639,651,663,671,675,682,688,697,701,725,742,748,751,
  	754,764,770,773,776,784,787,791,794,808,825,830,834,840,847,859,863,866,
  	875,889,916,924,926,928,936,941,949,959,962,972,983,988,995,1008,1015,
  	1028,1034,1037,1044,1056,1062,1066,1072,1079,1088,1099,1101,1104,1112,
  	1117,1127,1132,1144,1150,1160,1166,1176
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  hogqlparserParserStaticData = staticData.release();
}

}

HogQLParser::HogQLParser(TokenStream *input) : HogQLParser(input, antlr4::atn::ParserATNSimulatorOptions()) {}

HogQLParser::HogQLParser(TokenStream *input, const antlr4::atn::ParserATNSimulatorOptions &options) : Parser(input) {
  HogQLParser::initialize();
  _interpreter = new atn::ParserATNSimulator(this, *hogqlparserParserStaticData->atn, hogqlparserParserStaticData->decisionToDFA, hogqlparserParserStaticData->sharedContextCache, options);
}

HogQLParser::~HogQLParser() {
  delete _interpreter;
}

const atn::ATN& HogQLParser::getATN() const {
  return *hogqlparserParserStaticData->atn;
}

std::string HogQLParser::getGrammarFileName() const {
  return "HogQLParser.g4";
}

const std::vector<std::string>& HogQLParser::getRuleNames() const {
  return hogqlparserParserStaticData->ruleNames;
}

const dfa::Vocabulary& HogQLParser::getVocabulary() const {
  return hogqlparserParserStaticData->vocabulary;
}

antlr4::atn::SerializedATNView HogQLParser::getSerializedATN() const {
  return hogqlparserParserStaticData->serializedATN;
}


//----------------- ProgramContext ------------------------------------------------------------------

HogQLParser::ProgramContext::ProgramContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::ProgramContext::EOF() {
  return getToken(HogQLParser::EOF, 0);
}

std::vector<HogQLParser::DeclarationContext *> HogQLParser::ProgramContext::declaration() {
  return getRuleContexts<HogQLParser::DeclarationContext>();
}

HogQLParser::DeclarationContext* HogQLParser::ProgramContext::declaration(size_t i) {
  return getRuleContext<HogQLParser::DeclarationContext>(i);
}


size_t HogQLParser::ProgramContext::getRuleIndex() const {
  return HogQLParser::RuleProgram;
}


std::any HogQLParser::ProgramContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitProgram(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::ProgramContext* HogQLParser::program() {
  ProgramContext *_localctx = _tracker.createInstance<ProgramContext>(_ctx, getState());
  enterRule(_localctx, 0, HogQLParser::RuleProgram);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(169);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -2) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & 8076106351341731839) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 128)) & 131649) != 0)) {
      setState(166);
      declaration();
      setState(171);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(172);
    match(HogQLParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DeclarationContext ------------------------------------------------------------------

HogQLParser::DeclarationContext::DeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HogQLParser::VarDeclContext* HogQLParser::DeclarationContext::varDecl() {
  return getRuleContext<HogQLParser::VarDeclContext>(0);
}

HogQLParser::StatementContext* HogQLParser::DeclarationContext::statement() {
  return getRuleContext<HogQLParser::StatementContext>(0);
}


size_t HogQLParser::DeclarationContext::getRuleIndex() const {
  return HogQLParser::RuleDeclaration;
}


std::any HogQLParser::DeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitDeclaration(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::DeclarationContext* HogQLParser::declaration() {
  DeclarationContext *_localctx = _tracker.createInstance<DeclarationContext>(_ctx, getState());
  enterRule(_localctx, 2, HogQLParser::RuleDeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(176);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case HogQLParser::LET: {
        enterOuterAlt(_localctx, 1);
        setState(174);
        varDecl();
        break;
      }

      case HogQLParser::ALL:
      case HogQLParser::AND:
      case HogQLParser::ANTI:
      case HogQLParser::ANY:
      case HogQLParser::ARRAY:
      case HogQLParser::AS:
      case HogQLParser::ASCENDING:
      case HogQLParser::ASOF:
      case HogQLParser::BETWEEN:
      case HogQLParser::BOTH:
      case HogQLParser::BY:
      case HogQLParser::CASE:
      case HogQLParser::CAST:
      case HogQLParser::COHORT:
      case HogQLParser::COLLATE:
      case HogQLParser::CROSS:
      case HogQLParser::CUBE:
      case HogQLParser::CURRENT:
      case HogQLParser::DATE:
      case HogQLParser::DAY:
      case HogQLParser::DESC:
      case HogQLParser::DESCENDING:
      case HogQLParser::DISTINCT:
      case HogQLParser::ELSE:
      case HogQLParser::END:
      case HogQLParser::EXTRACT:
      case HogQLParser::FINAL:
      case HogQLParser::FIRST:
      case HogQLParser::FN:
      case HogQLParser::FOLLOWING:
      case HogQLParser::FOR:
      case HogQLParser::FROM:
      case HogQLParser::FULL:
      case HogQLParser::GROUP:
      case HogQLParser::HAVING:
      case HogQLParser::HOUR:
      case HogQLParser::ID:
      case HogQLParser::IF:
      case HogQLParser::ILIKE:
      case HogQLParser::IN:
      case HogQLParser::INF:
      case HogQLParser::INNER:
      case HogQLParser::INTERVAL:
      case HogQLParser::IS:
      case HogQLParser::JOIN:
      case HogQLParser::KEY:
      case HogQLParser::LAST:
      case HogQLParser::LEADING:
      case HogQLParser::LEFT:
      case HogQLParser::LIKE:
      case HogQLParser::LIMIT:
      case HogQLParser::MINUTE:
      case HogQLParser::MONTH:
      case HogQLParser::NAN_SQL:
      case HogQLParser::NOT:
      case HogQLParser::NULL_SQL:
      case HogQLParser::NULLS:
      case HogQLParser::OFFSET:
      case HogQLParser::ON:
      case HogQLParser::OR:
      case HogQLParser::ORDER:
      case HogQLParser::OUTER:
      case HogQLParser::OVER:
      case HogQLParser::PARTITION:
      case HogQLParser::PRECEDING:
      case HogQLParser::PREWHERE:
      case HogQLParser::QUARTER:
      case HogQLParser::RANGE:
      case HogQLParser::RETURN:
      case HogQLParser::RIGHT:
      case HogQLParser::ROLLUP:
      case HogQLParser::ROW:
      case HogQLParser::ROWS:
      case HogQLParser::SAMPLE:
      case HogQLParser::SECOND:
      case HogQLParser::SELECT:
      case HogQLParser::SEMI:
      case HogQLParser::SETTINGS:
      case HogQLParser::SUBSTRING:
      case HogQLParser::THEN:
      case HogQLParser::TIES:
      case HogQLParser::TIMESTAMP:
      case HogQLParser::TO:
      case HogQLParser::TOP:
      case HogQLParser::TOTALS:
      case HogQLParser::TRAILING:
      case HogQLParser::TRIM:
      case HogQLParser::TRUNCATE:
      case HogQLParser::UNBOUNDED:
      case HogQLParser::UNION:
      case HogQLParser::USING:
      case HogQLParser::WEEK:
      case HogQLParser::WHEN:
      case HogQLParser::WHERE:
      case HogQLParser::WHILE:
      case HogQLParser::WINDOW:
      case HogQLParser::WITH:
      case HogQLParser::YEAR:
      case HogQLParser::IDENTIFIER:
      case HogQLParser::FLOATING_LITERAL:
      case HogQLParser::OCTAL_LITERAL:
      case HogQLParser::DECIMAL_LITERAL:
      case HogQLParser::HEXADECIMAL_LITERAL:
      case HogQLParser::STRING_LITERAL:
      case HogQLParser::ASTERISK:
      case HogQLParser::DASH:
      case HogQLParser::DOT:
      case HogQLParser::LBRACE:
      case HogQLParser::LBRACKET:
      case HogQLParser::LPAREN:
      case HogQLParser::LT:
      case HogQLParser::PLUS:
      case HogQLParser::QUOTE_SINGLE_TEMPLATE:
      case HogQLParser::SEMICOLON: {
        enterOuterAlt(_localctx, 2);
        setState(175);
        statement();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExpressionContext ------------------------------------------------------------------

HogQLParser::ExpressionContext::ExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HogQLParser::ColumnExprContext* HogQLParser::ExpressionContext::columnExpr() {
  return getRuleContext<HogQLParser::ColumnExprContext>(0);
}


size_t HogQLParser::ExpressionContext::getRuleIndex() const {
  return HogQLParser::RuleExpression;
}


std::any HogQLParser::ExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitExpression(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::ExpressionContext* HogQLParser::expression() {
  ExpressionContext *_localctx = _tracker.createInstance<ExpressionContext>(_ctx, getState());
  enterRule(_localctx, 4, HogQLParser::RuleExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(178);
    columnExpr(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VarDeclContext ------------------------------------------------------------------

HogQLParser::VarDeclContext::VarDeclContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::VarDeclContext::LET() {
  return getToken(HogQLParser::LET, 0);
}

HogQLParser::IdentifierContext* HogQLParser::VarDeclContext::identifier() {
  return getRuleContext<HogQLParser::IdentifierContext>(0);
}

tree::TerminalNode* HogQLParser::VarDeclContext::COLON() {
  return getToken(HogQLParser::COLON, 0);
}

tree::TerminalNode* HogQLParser::VarDeclContext::EQ_SINGLE() {
  return getToken(HogQLParser::EQ_SINGLE, 0);
}

HogQLParser::ExpressionContext* HogQLParser::VarDeclContext::expression() {
  return getRuleContext<HogQLParser::ExpressionContext>(0);
}


size_t HogQLParser::VarDeclContext::getRuleIndex() const {
  return HogQLParser::RuleVarDecl;
}


std::any HogQLParser::VarDeclContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitVarDecl(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::VarDeclContext* HogQLParser::varDecl() {
  VarDeclContext *_localctx = _tracker.createInstance<VarDeclContext>(_ctx, getState());
  enterRule(_localctx, 6, HogQLParser::RuleVarDecl);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(180);
    match(HogQLParser::LET);
    setState(181);
    identifier();
    setState(185);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HogQLParser::COLON) {
      setState(182);
      match(HogQLParser::COLON);
      setState(183);
      match(HogQLParser::EQ_SINGLE);
      setState(184);
      expression();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IdentifierListContext ------------------------------------------------------------------

HogQLParser::IdentifierListContext::IdentifierListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<HogQLParser::IdentifierContext *> HogQLParser::IdentifierListContext::identifier() {
  return getRuleContexts<HogQLParser::IdentifierContext>();
}

HogQLParser::IdentifierContext* HogQLParser::IdentifierListContext::identifier(size_t i) {
  return getRuleContext<HogQLParser::IdentifierContext>(i);
}

std::vector<tree::TerminalNode *> HogQLParser::IdentifierListContext::COMMA() {
  return getTokens(HogQLParser::COMMA);
}

tree::TerminalNode* HogQLParser::IdentifierListContext::COMMA(size_t i) {
  return getToken(HogQLParser::COMMA, i);
}


size_t HogQLParser::IdentifierListContext::getRuleIndex() const {
  return HogQLParser::RuleIdentifierList;
}


std::any HogQLParser::IdentifierListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitIdentifierList(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::IdentifierListContext* HogQLParser::identifierList() {
  IdentifierListContext *_localctx = _tracker.createInstance<IdentifierListContext>(_ctx, getState());
  enterRule(_localctx, 8, HogQLParser::RuleIdentifierList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(187);
    identifier();
    setState(192);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == HogQLParser::COMMA) {
      setState(188);
      match(HogQLParser::COMMA);
      setState(189);
      identifier();
      setState(194);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StatementContext ------------------------------------------------------------------

HogQLParser::StatementContext::StatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HogQLParser::ReturnStmtContext* HogQLParser::StatementContext::returnStmt() {
  return getRuleContext<HogQLParser::ReturnStmtContext>(0);
}

HogQLParser::IfStmtContext* HogQLParser::StatementContext::ifStmt() {
  return getRuleContext<HogQLParser::IfStmtContext>(0);
}

HogQLParser::WhileStmtContext* HogQLParser::StatementContext::whileStmt() {
  return getRuleContext<HogQLParser::WhileStmtContext>(0);
}

HogQLParser::FuncStmtContext* HogQLParser::StatementContext::funcStmt() {
  return getRuleContext<HogQLParser::FuncStmtContext>(0);
}

HogQLParser::VarAssignmentContext* HogQLParser::StatementContext::varAssignment() {
  return getRuleContext<HogQLParser::VarAssignmentContext>(0);
}

HogQLParser::ExprStmtContext* HogQLParser::StatementContext::exprStmt() {
  return getRuleContext<HogQLParser::ExprStmtContext>(0);
}

HogQLParser::EmptyStmtContext* HogQLParser::StatementContext::emptyStmt() {
  return getRuleContext<HogQLParser::EmptyStmtContext>(0);
}

HogQLParser::BlockContext* HogQLParser::StatementContext::block() {
  return getRuleContext<HogQLParser::BlockContext>(0);
}


size_t HogQLParser::StatementContext::getRuleIndex() const {
  return HogQLParser::RuleStatement;
}


std::any HogQLParser::StatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitStatement(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::StatementContext* HogQLParser::statement() {
  StatementContext *_localctx = _tracker.createInstance<StatementContext>(_ctx, getState());
  enterRule(_localctx, 10, HogQLParser::RuleStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(203);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 4, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(195);
      returnStmt();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(196);
      ifStmt();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(197);
      whileStmt();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(198);
      funcStmt();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(199);
      varAssignment();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(200);
      exprStmt();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(201);
      emptyStmt();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(202);
      block();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReturnStmtContext ------------------------------------------------------------------

HogQLParser::ReturnStmtContext::ReturnStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::ReturnStmtContext::RETURN() {
  return getToken(HogQLParser::RETURN, 0);
}

HogQLParser::ExpressionContext* HogQLParser::ReturnStmtContext::expression() {
  return getRuleContext<HogQLParser::ExpressionContext>(0);
}

tree::TerminalNode* HogQLParser::ReturnStmtContext::SEMICOLON() {
  return getToken(HogQLParser::SEMICOLON, 0);
}


size_t HogQLParser::ReturnStmtContext::getRuleIndex() const {
  return HogQLParser::RuleReturnStmt;
}


std::any HogQLParser::ReturnStmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitReturnStmt(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::ReturnStmtContext* HogQLParser::returnStmt() {
  ReturnStmtContext *_localctx = _tracker.createInstance<ReturnStmtContext>(_ctx, getState());
  enterRule(_localctx, 12, HogQLParser::RuleReturnStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(205);
    match(HogQLParser::RETURN);
    setState(207);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 5, _ctx)) {
    case 1: {
      setState(206);
      expression();
      break;
    }

    default:
      break;
    }
    setState(210);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 6, _ctx)) {
    case 1: {
      setState(209);
      match(HogQLParser::SEMICOLON);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IfStmtContext ------------------------------------------------------------------

HogQLParser::IfStmtContext::IfStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::IfStmtContext::IF() {
  return getToken(HogQLParser::IF, 0);
}

tree::TerminalNode* HogQLParser::IfStmtContext::LPAREN() {
  return getToken(HogQLParser::LPAREN, 0);
}

HogQLParser::ExpressionContext* HogQLParser::IfStmtContext::expression() {
  return getRuleContext<HogQLParser::ExpressionContext>(0);
}

tree::TerminalNode* HogQLParser::IfStmtContext::RPAREN() {
  return getToken(HogQLParser::RPAREN, 0);
}

std::vector<HogQLParser::StatementContext *> HogQLParser::IfStmtContext::statement() {
  return getRuleContexts<HogQLParser::StatementContext>();
}

HogQLParser::StatementContext* HogQLParser::IfStmtContext::statement(size_t i) {
  return getRuleContext<HogQLParser::StatementContext>(i);
}

tree::TerminalNode* HogQLParser::IfStmtContext::ELSE() {
  return getToken(HogQLParser::ELSE, 0);
}


size_t HogQLParser::IfStmtContext::getRuleIndex() const {
  return HogQLParser::RuleIfStmt;
}


std::any HogQLParser::IfStmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitIfStmt(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::IfStmtContext* HogQLParser::ifStmt() {
  IfStmtContext *_localctx = _tracker.createInstance<IfStmtContext>(_ctx, getState());
  enterRule(_localctx, 14, HogQLParser::RuleIfStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(212);
    match(HogQLParser::IF);
    setState(213);
    match(HogQLParser::LPAREN);
    setState(214);
    expression();
    setState(215);
    match(HogQLParser::RPAREN);
    setState(216);
    statement();
    setState(219);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 7, _ctx)) {
    case 1: {
      setState(217);
      match(HogQLParser::ELSE);
      setState(218);
      statement();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WhileStmtContext ------------------------------------------------------------------

HogQLParser::WhileStmtContext::WhileStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::WhileStmtContext::WHILE() {
  return getToken(HogQLParser::WHILE, 0);
}

tree::TerminalNode* HogQLParser::WhileStmtContext::LPAREN() {
  return getToken(HogQLParser::LPAREN, 0);
}

HogQLParser::ExpressionContext* HogQLParser::WhileStmtContext::expression() {
  return getRuleContext<HogQLParser::ExpressionContext>(0);
}

tree::TerminalNode* HogQLParser::WhileStmtContext::RPAREN() {
  return getToken(HogQLParser::RPAREN, 0);
}

HogQLParser::StatementContext* HogQLParser::WhileStmtContext::statement() {
  return getRuleContext<HogQLParser::StatementContext>(0);
}

tree::TerminalNode* HogQLParser::WhileStmtContext::SEMICOLON() {
  return getToken(HogQLParser::SEMICOLON, 0);
}


size_t HogQLParser::WhileStmtContext::getRuleIndex() const {
  return HogQLParser::RuleWhileStmt;
}


std::any HogQLParser::WhileStmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitWhileStmt(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::WhileStmtContext* HogQLParser::whileStmt() {
  WhileStmtContext *_localctx = _tracker.createInstance<WhileStmtContext>(_ctx, getState());
  enterRule(_localctx, 16, HogQLParser::RuleWhileStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(221);
    match(HogQLParser::WHILE);
    setState(222);
    match(HogQLParser::LPAREN);
    setState(223);
    expression();
    setState(224);
    match(HogQLParser::RPAREN);
    setState(225);
    statement();
    setState(227);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 8, _ctx)) {
    case 1: {
      setState(226);
      match(HogQLParser::SEMICOLON);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FuncStmtContext ------------------------------------------------------------------

HogQLParser::FuncStmtContext::FuncStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::FuncStmtContext::FN() {
  return getToken(HogQLParser::FN, 0);
}

HogQLParser::IdentifierContext* HogQLParser::FuncStmtContext::identifier() {
  return getRuleContext<HogQLParser::IdentifierContext>(0);
}

tree::TerminalNode* HogQLParser::FuncStmtContext::LPAREN() {
  return getToken(HogQLParser::LPAREN, 0);
}

tree::TerminalNode* HogQLParser::FuncStmtContext::RPAREN() {
  return getToken(HogQLParser::RPAREN, 0);
}

HogQLParser::BlockContext* HogQLParser::FuncStmtContext::block() {
  return getRuleContext<HogQLParser::BlockContext>(0);
}

HogQLParser::IdentifierListContext* HogQLParser::FuncStmtContext::identifierList() {
  return getRuleContext<HogQLParser::IdentifierListContext>(0);
}


size_t HogQLParser::FuncStmtContext::getRuleIndex() const {
  return HogQLParser::RuleFuncStmt;
}


std::any HogQLParser::FuncStmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitFuncStmt(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::FuncStmtContext* HogQLParser::funcStmt() {
  FuncStmtContext *_localctx = _tracker.createInstance<FuncStmtContext>(_ctx, getState());
  enterRule(_localctx, 18, HogQLParser::RuleFuncStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(229);
    match(HogQLParser::FN);
    setState(230);
    identifier();
    setState(231);
    match(HogQLParser::LPAREN);
    setState(233);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -181272084561788930) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & 201863462911) != 0)) {
      setState(232);
      identifierList();
    }
    setState(235);
    match(HogQLParser::RPAREN);
    setState(236);
    block();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VarAssignmentContext ------------------------------------------------------------------

HogQLParser::VarAssignmentContext::VarAssignmentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<HogQLParser::ExpressionContext *> HogQLParser::VarAssignmentContext::expression() {
  return getRuleContexts<HogQLParser::ExpressionContext>();
}

HogQLParser::ExpressionContext* HogQLParser::VarAssignmentContext::expression(size_t i) {
  return getRuleContext<HogQLParser::ExpressionContext>(i);
}

tree::TerminalNode* HogQLParser::VarAssignmentContext::COLON() {
  return getToken(HogQLParser::COLON, 0);
}

tree::TerminalNode* HogQLParser::VarAssignmentContext::EQ_SINGLE() {
  return getToken(HogQLParser::EQ_SINGLE, 0);
}


size_t HogQLParser::VarAssignmentContext::getRuleIndex() const {
  return HogQLParser::RuleVarAssignment;
}


std::any HogQLParser::VarAssignmentContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitVarAssignment(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::VarAssignmentContext* HogQLParser::varAssignment() {
  VarAssignmentContext *_localctx = _tracker.createInstance<VarAssignmentContext>(_ctx, getState());
  enterRule(_localctx, 20, HogQLParser::RuleVarAssignment);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(238);
    expression();
    setState(239);
    match(HogQLParser::COLON);
    setState(240);
    match(HogQLParser::EQ_SINGLE);
    setState(241);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExprStmtContext ------------------------------------------------------------------

HogQLParser::ExprStmtContext::ExprStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HogQLParser::ExpressionContext* HogQLParser::ExprStmtContext::expression() {
  return getRuleContext<HogQLParser::ExpressionContext>(0);
}

tree::TerminalNode* HogQLParser::ExprStmtContext::SEMICOLON() {
  return getToken(HogQLParser::SEMICOLON, 0);
}


size_t HogQLParser::ExprStmtContext::getRuleIndex() const {
  return HogQLParser::RuleExprStmt;
}


std::any HogQLParser::ExprStmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitExprStmt(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::ExprStmtContext* HogQLParser::exprStmt() {
  ExprStmtContext *_localctx = _tracker.createInstance<ExprStmtContext>(_ctx, getState());
  enterRule(_localctx, 22, HogQLParser::RuleExprStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(243);
    expression();
    setState(245);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 10, _ctx)) {
    case 1: {
      setState(244);
      match(HogQLParser::SEMICOLON);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EmptyStmtContext ------------------------------------------------------------------

HogQLParser::EmptyStmtContext::EmptyStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::EmptyStmtContext::SEMICOLON() {
  return getToken(HogQLParser::SEMICOLON, 0);
}


size_t HogQLParser::EmptyStmtContext::getRuleIndex() const {
  return HogQLParser::RuleEmptyStmt;
}


std::any HogQLParser::EmptyStmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitEmptyStmt(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::EmptyStmtContext* HogQLParser::emptyStmt() {
  EmptyStmtContext *_localctx = _tracker.createInstance<EmptyStmtContext>(_ctx, getState());
  enterRule(_localctx, 24, HogQLParser::RuleEmptyStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(247);
    match(HogQLParser::SEMICOLON);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BlockContext ------------------------------------------------------------------

HogQLParser::BlockContext::BlockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::BlockContext::LBRACE() {
  return getToken(HogQLParser::LBRACE, 0);
}

tree::TerminalNode* HogQLParser::BlockContext::RBRACE() {
  return getToken(HogQLParser::RBRACE, 0);
}

std::vector<HogQLParser::DeclarationContext *> HogQLParser::BlockContext::declaration() {
  return getRuleContexts<HogQLParser::DeclarationContext>();
}

HogQLParser::DeclarationContext* HogQLParser::BlockContext::declaration(size_t i) {
  return getRuleContext<HogQLParser::DeclarationContext>(i);
}


size_t HogQLParser::BlockContext::getRuleIndex() const {
  return HogQLParser::RuleBlock;
}


std::any HogQLParser::BlockContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitBlock(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::BlockContext* HogQLParser::block() {
  BlockContext *_localctx = _tracker.createInstance<BlockContext>(_ctx, getState());
  enterRule(_localctx, 26, HogQLParser::RuleBlock);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(249);
    match(HogQLParser::LBRACE);
    setState(253);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -2) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & 8076106351341731839) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 128)) & 131649) != 0)) {
      setState(250);
      declaration();
      setState(255);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(256);
    match(HogQLParser::RBRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KvPairContext ------------------------------------------------------------------

HogQLParser::KvPairContext::KvPairContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<HogQLParser::ExpressionContext *> HogQLParser::KvPairContext::expression() {
  return getRuleContexts<HogQLParser::ExpressionContext>();
}

HogQLParser::ExpressionContext* HogQLParser::KvPairContext::expression(size_t i) {
  return getRuleContext<HogQLParser::ExpressionContext>(i);
}

tree::TerminalNode* HogQLParser::KvPairContext::COLON() {
  return getToken(HogQLParser::COLON, 0);
}


size_t HogQLParser::KvPairContext::getRuleIndex() const {
  return HogQLParser::RuleKvPair;
}


std::any HogQLParser::KvPairContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitKvPair(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::KvPairContext* HogQLParser::kvPair() {
  KvPairContext *_localctx = _tracker.createInstance<KvPairContext>(_ctx, getState());
  enterRule(_localctx, 28, HogQLParser::RuleKvPair);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(258);
    expression();
    setState(259);
    match(HogQLParser::COLON);
    setState(260);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KvPairListContext ------------------------------------------------------------------

HogQLParser::KvPairListContext::KvPairListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<HogQLParser::KvPairContext *> HogQLParser::KvPairListContext::kvPair() {
  return getRuleContexts<HogQLParser::KvPairContext>();
}

HogQLParser::KvPairContext* HogQLParser::KvPairListContext::kvPair(size_t i) {
  return getRuleContext<HogQLParser::KvPairContext>(i);
}

std::vector<tree::TerminalNode *> HogQLParser::KvPairListContext::COMMA() {
  return getTokens(HogQLParser::COMMA);
}

tree::TerminalNode* HogQLParser::KvPairListContext::COMMA(size_t i) {
  return getToken(HogQLParser::COMMA, i);
}


size_t HogQLParser::KvPairListContext::getRuleIndex() const {
  return HogQLParser::RuleKvPairList;
}


std::any HogQLParser::KvPairListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitKvPairList(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::KvPairListContext* HogQLParser::kvPairList() {
  KvPairListContext *_localctx = _tracker.createInstance<KvPairListContext>(_ctx, getState());
  enterRule(_localctx, 30, HogQLParser::RuleKvPairList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(262);
    kvPair();
    setState(267);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == HogQLParser::COMMA) {
      setState(263);
      match(HogQLParser::COMMA);
      setState(264);
      kvPair();
      setState(269);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SelectContext ------------------------------------------------------------------

HogQLParser::SelectContext::SelectContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::SelectContext::EOF() {
  return getToken(HogQLParser::EOF, 0);
}

HogQLParser::SelectUnionStmtContext* HogQLParser::SelectContext::selectUnionStmt() {
  return getRuleContext<HogQLParser::SelectUnionStmtContext>(0);
}

HogQLParser::SelectStmtContext* HogQLParser::SelectContext::selectStmt() {
  return getRuleContext<HogQLParser::SelectStmtContext>(0);
}

HogQLParser::HogqlxTagElementContext* HogQLParser::SelectContext::hogqlxTagElement() {
  return getRuleContext<HogQLParser::HogqlxTagElementContext>(0);
}


size_t HogQLParser::SelectContext::getRuleIndex() const {
  return HogQLParser::RuleSelect;
}


std::any HogQLParser::SelectContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitSelect(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::SelectContext* HogQLParser::select() {
  SelectContext *_localctx = _tracker.createInstance<SelectContext>(_ctx, getState());
  enterRule(_localctx, 32, HogQLParser::RuleSelect);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(273);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 13, _ctx)) {
    case 1: {
      setState(270);
      selectUnionStmt();
      break;
    }

    case 2: {
      setState(271);
      selectStmt();
      break;
    }

    case 3: {
      setState(272);
      hogqlxTagElement();
      break;
    }

    default:
      break;
    }
    setState(275);
    match(HogQLParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SelectUnionStmtContext ------------------------------------------------------------------

HogQLParser::SelectUnionStmtContext::SelectUnionStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<HogQLParser::SelectStmtWithParensContext *> HogQLParser::SelectUnionStmtContext::selectStmtWithParens() {
  return getRuleContexts<HogQLParser::SelectStmtWithParensContext>();
}

HogQLParser::SelectStmtWithParensContext* HogQLParser::SelectUnionStmtContext::selectStmtWithParens(size_t i) {
  return getRuleContext<HogQLParser::SelectStmtWithParensContext>(i);
}

std::vector<tree::TerminalNode *> HogQLParser::SelectUnionStmtContext::UNION() {
  return getTokens(HogQLParser::UNION);
}

tree::TerminalNode* HogQLParser::SelectUnionStmtContext::UNION(size_t i) {
  return getToken(HogQLParser::UNION, i);
}

std::vector<tree::TerminalNode *> HogQLParser::SelectUnionStmtContext::ALL() {
  return getTokens(HogQLParser::ALL);
}

tree::TerminalNode* HogQLParser::SelectUnionStmtContext::ALL(size_t i) {
  return getToken(HogQLParser::ALL, i);
}


size_t HogQLParser::SelectUnionStmtContext::getRuleIndex() const {
  return HogQLParser::RuleSelectUnionStmt;
}


std::any HogQLParser::SelectUnionStmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitSelectUnionStmt(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::SelectUnionStmtContext* HogQLParser::selectUnionStmt() {
  SelectUnionStmtContext *_localctx = _tracker.createInstance<SelectUnionStmtContext>(_ctx, getState());
  enterRule(_localctx, 34, HogQLParser::RuleSelectUnionStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(277);
    selectStmtWithParens();
    setState(283);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == HogQLParser::UNION) {
      setState(278);
      match(HogQLParser::UNION);
      setState(279);
      match(HogQLParser::ALL);
      setState(280);
      selectStmtWithParens();
      setState(285);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SelectStmtWithParensContext ------------------------------------------------------------------

HogQLParser::SelectStmtWithParensContext::SelectStmtWithParensContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HogQLParser::SelectStmtContext* HogQLParser::SelectStmtWithParensContext::selectStmt() {
  return getRuleContext<HogQLParser::SelectStmtContext>(0);
}

tree::TerminalNode* HogQLParser::SelectStmtWithParensContext::LPAREN() {
  return getToken(HogQLParser::LPAREN, 0);
}

HogQLParser::SelectUnionStmtContext* HogQLParser::SelectStmtWithParensContext::selectUnionStmt() {
  return getRuleContext<HogQLParser::SelectUnionStmtContext>(0);
}

tree::TerminalNode* HogQLParser::SelectStmtWithParensContext::RPAREN() {
  return getToken(HogQLParser::RPAREN, 0);
}

HogQLParser::PlaceholderContext* HogQLParser::SelectStmtWithParensContext::placeholder() {
  return getRuleContext<HogQLParser::PlaceholderContext>(0);
}


size_t HogQLParser::SelectStmtWithParensContext::getRuleIndex() const {
  return HogQLParser::RuleSelectStmtWithParens;
}


std::any HogQLParser::SelectStmtWithParensContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitSelectStmtWithParens(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::SelectStmtWithParensContext* HogQLParser::selectStmtWithParens() {
  SelectStmtWithParensContext *_localctx = _tracker.createInstance<SelectStmtWithParensContext>(_ctx, getState());
  enterRule(_localctx, 36, HogQLParser::RuleSelectStmtWithParens);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(292);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case HogQLParser::SELECT:
      case HogQLParser::WITH: {
        enterOuterAlt(_localctx, 1);
        setState(286);
        selectStmt();
        break;
      }

      case HogQLParser::LPAREN: {
        enterOuterAlt(_localctx, 2);
        setState(287);
        match(HogQLParser::LPAREN);
        setState(288);
        selectUnionStmt();
        setState(289);
        match(HogQLParser::RPAREN);
        break;
      }

      case HogQLParser::LBRACE: {
        enterOuterAlt(_localctx, 3);
        setState(291);
        placeholder();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SelectStmtContext ------------------------------------------------------------------

HogQLParser::SelectStmtContext::SelectStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::SelectStmtContext::SELECT() {
  return getToken(HogQLParser::SELECT, 0);
}

HogQLParser::ColumnExprListContext* HogQLParser::SelectStmtContext::columnExprList() {
  return getRuleContext<HogQLParser::ColumnExprListContext>(0);
}

tree::TerminalNode* HogQLParser::SelectStmtContext::DISTINCT() {
  return getToken(HogQLParser::DISTINCT, 0);
}

HogQLParser::TopClauseContext* HogQLParser::SelectStmtContext::topClause() {
  return getRuleContext<HogQLParser::TopClauseContext>(0);
}

HogQLParser::ArrayJoinClauseContext* HogQLParser::SelectStmtContext::arrayJoinClause() {
  return getRuleContext<HogQLParser::ArrayJoinClauseContext>(0);
}

HogQLParser::PrewhereClauseContext* HogQLParser::SelectStmtContext::prewhereClause() {
  return getRuleContext<HogQLParser::PrewhereClauseContext>(0);
}

HogQLParser::GroupByClauseContext* HogQLParser::SelectStmtContext::groupByClause() {
  return getRuleContext<HogQLParser::GroupByClauseContext>(0);
}

std::vector<tree::TerminalNode *> HogQLParser::SelectStmtContext::WITH() {
  return getTokens(HogQLParser::WITH);
}

tree::TerminalNode* HogQLParser::SelectStmtContext::WITH(size_t i) {
  return getToken(HogQLParser::WITH, i);
}

tree::TerminalNode* HogQLParser::SelectStmtContext::TOTALS() {
  return getToken(HogQLParser::TOTALS, 0);
}

HogQLParser::HavingClauseContext* HogQLParser::SelectStmtContext::havingClause() {
  return getRuleContext<HogQLParser::HavingClauseContext>(0);
}

HogQLParser::WindowClauseContext* HogQLParser::SelectStmtContext::windowClause() {
  return getRuleContext<HogQLParser::WindowClauseContext>(0);
}

HogQLParser::OrderByClauseContext* HogQLParser::SelectStmtContext::orderByClause() {
  return getRuleContext<HogQLParser::OrderByClauseContext>(0);
}

HogQLParser::LimitAndOffsetClauseContext* HogQLParser::SelectStmtContext::limitAndOffsetClause() {
  return getRuleContext<HogQLParser::LimitAndOffsetClauseContext>(0);
}

HogQLParser::OffsetOnlyClauseContext* HogQLParser::SelectStmtContext::offsetOnlyClause() {
  return getRuleContext<HogQLParser::OffsetOnlyClauseContext>(0);
}

HogQLParser::SettingsClauseContext* HogQLParser::SelectStmtContext::settingsClause() {
  return getRuleContext<HogQLParser::SettingsClauseContext>(0);
}

HogQLParser::WithClauseContext* HogQLParser::SelectStmtContext::withClause() {
  return getRuleContext<HogQLParser::WithClauseContext>(0);
}

HogQLParser::FromClauseContext* HogQLParser::SelectStmtContext::fromClause() {
  return getRuleContext<HogQLParser::FromClauseContext>(0);
}

HogQLParser::WhereClauseContext* HogQLParser::SelectStmtContext::whereClause() {
  return getRuleContext<HogQLParser::WhereClauseContext>(0);
}

tree::TerminalNode* HogQLParser::SelectStmtContext::CUBE() {
  return getToken(HogQLParser::CUBE, 0);
}

tree::TerminalNode* HogQLParser::SelectStmtContext::ROLLUP() {
  return getToken(HogQLParser::ROLLUP, 0);
}


size_t HogQLParser::SelectStmtContext::getRuleIndex() const {
  return HogQLParser::RuleSelectStmt;
}


std::any HogQLParser::SelectStmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitSelectStmt(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::SelectStmtContext* HogQLParser::selectStmt() {
  SelectStmtContext *_localctx = _tracker.createInstance<SelectStmtContext>(_ctx, getState());
  enterRule(_localctx, 38, HogQLParser::RuleSelectStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(295);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HogQLParser::WITH) {
      setState(294);
      antlrcpp::downCast<SelectStmtContext *>(_localctx)->with = withClause();
    }
    setState(297);
    match(HogQLParser::SELECT);
    setState(299);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 17, _ctx)) {
    case 1: {
      setState(298);
      match(HogQLParser::DISTINCT);
      break;
    }

    default:
      break;
    }
    setState(302);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 18, _ctx)) {
    case 1: {
      setState(301);
      topClause();
      break;
    }

    default:
      break;
    }
    setState(304);
    antlrcpp::downCast<SelectStmtContext *>(_localctx)->columns = columnExprList();
    setState(306);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HogQLParser::FROM) {
      setState(305);
      antlrcpp::downCast<SelectStmtContext *>(_localctx)->from = fromClause();
    }
    setState(309);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 567347999932448) != 0)) {
      setState(308);
      arrayJoinClause();
    }
    setState(312);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HogQLParser::PREWHERE) {
      setState(311);
      prewhereClause();
    }
    setState(315);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HogQLParser::WHERE) {
      setState(314);
      antlrcpp::downCast<SelectStmtContext *>(_localctx)->where = whereClause();
    }
    setState(318);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HogQLParser::GROUP) {
      setState(317);
      groupByClause();
    }
    setState(322);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 24, _ctx)) {
    case 1: {
      setState(320);
      match(HogQLParser::WITH);
      setState(321);
      _la = _input->LA(1);
      if (!(_la == HogQLParser::CUBE

      || _la == HogQLParser::ROLLUP)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    default:
      break;
    }
    setState(326);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HogQLParser::WITH) {
      setState(324);
      match(HogQLParser::WITH);
      setState(325);
      match(HogQLParser::TOTALS);
    }
    setState(329);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HogQLParser::HAVING) {
      setState(328);
      havingClause();
    }
    setState(332);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HogQLParser::WINDOW) {
      setState(331);
      windowClause();
    }
    setState(335);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HogQLParser::ORDER) {
      setState(334);
      orderByClause();
    }
    setState(339);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case HogQLParser::LIMIT: {
        setState(337);
        limitAndOffsetClause();
        break;
      }

      case HogQLParser::OFFSET: {
        setState(338);
        offsetOnlyClause();
        break;
      }

      case HogQLParser::EOF:
      case HogQLParser::SETTINGS:
      case HogQLParser::UNION:
      case HogQLParser::RPAREN: {
        break;
      }

    default:
      break;
    }
    setState(342);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HogQLParser::SETTINGS) {
      setState(341);
      settingsClause();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WithClauseContext ------------------------------------------------------------------

HogQLParser::WithClauseContext::WithClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::WithClauseContext::WITH() {
  return getToken(HogQLParser::WITH, 0);
}

HogQLParser::WithExprListContext* HogQLParser::WithClauseContext::withExprList() {
  return getRuleContext<HogQLParser::WithExprListContext>(0);
}


size_t HogQLParser::WithClauseContext::getRuleIndex() const {
  return HogQLParser::RuleWithClause;
}


std::any HogQLParser::WithClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitWithClause(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::WithClauseContext* HogQLParser::withClause() {
  WithClauseContext *_localctx = _tracker.createInstance<WithClauseContext>(_ctx, getState());
  enterRule(_localctx, 40, HogQLParser::RuleWithClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(344);
    match(HogQLParser::WITH);
    setState(345);
    withExprList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TopClauseContext ------------------------------------------------------------------

HogQLParser::TopClauseContext::TopClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::TopClauseContext::TOP() {
  return getToken(HogQLParser::TOP, 0);
}

tree::TerminalNode* HogQLParser::TopClauseContext::DECIMAL_LITERAL() {
  return getToken(HogQLParser::DECIMAL_LITERAL, 0);
}

tree::TerminalNode* HogQLParser::TopClauseContext::WITH() {
  return getToken(HogQLParser::WITH, 0);
}

tree::TerminalNode* HogQLParser::TopClauseContext::TIES() {
  return getToken(HogQLParser::TIES, 0);
}


size_t HogQLParser::TopClauseContext::getRuleIndex() const {
  return HogQLParser::RuleTopClause;
}


std::any HogQLParser::TopClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitTopClause(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::TopClauseContext* HogQLParser::topClause() {
  TopClauseContext *_localctx = _tracker.createInstance<TopClauseContext>(_ctx, getState());
  enterRule(_localctx, 42, HogQLParser::RuleTopClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(347);
    match(HogQLParser::TOP);
    setState(348);
    match(HogQLParser::DECIMAL_LITERAL);
    setState(351);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 31, _ctx)) {
    case 1: {
      setState(349);
      match(HogQLParser::WITH);
      setState(350);
      match(HogQLParser::TIES);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FromClauseContext ------------------------------------------------------------------

HogQLParser::FromClauseContext::FromClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::FromClauseContext::FROM() {
  return getToken(HogQLParser::FROM, 0);
}

HogQLParser::JoinExprContext* HogQLParser::FromClauseContext::joinExpr() {
  return getRuleContext<HogQLParser::JoinExprContext>(0);
}


size_t HogQLParser::FromClauseContext::getRuleIndex() const {
  return HogQLParser::RuleFromClause;
}


std::any HogQLParser::FromClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitFromClause(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::FromClauseContext* HogQLParser::fromClause() {
  FromClauseContext *_localctx = _tracker.createInstance<FromClauseContext>(_ctx, getState());
  enterRule(_localctx, 44, HogQLParser::RuleFromClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(353);
    match(HogQLParser::FROM);
    setState(354);
    joinExpr(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArrayJoinClauseContext ------------------------------------------------------------------

HogQLParser::ArrayJoinClauseContext::ArrayJoinClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::ArrayJoinClauseContext::ARRAY() {
  return getToken(HogQLParser::ARRAY, 0);
}

tree::TerminalNode* HogQLParser::ArrayJoinClauseContext::JOIN() {
  return getToken(HogQLParser::JOIN, 0);
}

HogQLParser::ColumnExprListContext* HogQLParser::ArrayJoinClauseContext::columnExprList() {
  return getRuleContext<HogQLParser::ColumnExprListContext>(0);
}

tree::TerminalNode* HogQLParser::ArrayJoinClauseContext::LEFT() {
  return getToken(HogQLParser::LEFT, 0);
}

tree::TerminalNode* HogQLParser::ArrayJoinClauseContext::INNER() {
  return getToken(HogQLParser::INNER, 0);
}


size_t HogQLParser::ArrayJoinClauseContext::getRuleIndex() const {
  return HogQLParser::RuleArrayJoinClause;
}


std::any HogQLParser::ArrayJoinClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitArrayJoinClause(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::ArrayJoinClauseContext* HogQLParser::arrayJoinClause() {
  ArrayJoinClauseContext *_localctx = _tracker.createInstance<ArrayJoinClauseContext>(_ctx, getState());
  enterRule(_localctx, 46, HogQLParser::RuleArrayJoinClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(357);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HogQLParser::INNER

    || _la == HogQLParser::LEFT) {
      setState(356);
      _la = _input->LA(1);
      if (!(_la == HogQLParser::INNER

      || _la == HogQLParser::LEFT)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(359);
    match(HogQLParser::ARRAY);
    setState(360);
    match(HogQLParser::JOIN);
    setState(361);
    columnExprList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WindowClauseContext ------------------------------------------------------------------

HogQLParser::WindowClauseContext::WindowClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::WindowClauseContext::WINDOW() {
  return getToken(HogQLParser::WINDOW, 0);
}

std::vector<HogQLParser::IdentifierContext *> HogQLParser::WindowClauseContext::identifier() {
  return getRuleContexts<HogQLParser::IdentifierContext>();
}

HogQLParser::IdentifierContext* HogQLParser::WindowClauseContext::identifier(size_t i) {
  return getRuleContext<HogQLParser::IdentifierContext>(i);
}

std::vector<tree::TerminalNode *> HogQLParser::WindowClauseContext::AS() {
  return getTokens(HogQLParser::AS);
}

tree::TerminalNode* HogQLParser::WindowClauseContext::AS(size_t i) {
  return getToken(HogQLParser::AS, i);
}

std::vector<tree::TerminalNode *> HogQLParser::WindowClauseContext::LPAREN() {
  return getTokens(HogQLParser::LPAREN);
}

tree::TerminalNode* HogQLParser::WindowClauseContext::LPAREN(size_t i) {
  return getToken(HogQLParser::LPAREN, i);
}

std::vector<HogQLParser::WindowExprContext *> HogQLParser::WindowClauseContext::windowExpr() {
  return getRuleContexts<HogQLParser::WindowExprContext>();
}

HogQLParser::WindowExprContext* HogQLParser::WindowClauseContext::windowExpr(size_t i) {
  return getRuleContext<HogQLParser::WindowExprContext>(i);
}

std::vector<tree::TerminalNode *> HogQLParser::WindowClauseContext::RPAREN() {
  return getTokens(HogQLParser::RPAREN);
}

tree::TerminalNode* HogQLParser::WindowClauseContext::RPAREN(size_t i) {
  return getToken(HogQLParser::RPAREN, i);
}

std::vector<tree::TerminalNode *> HogQLParser::WindowClauseContext::COMMA() {
  return getTokens(HogQLParser::COMMA);
}

tree::TerminalNode* HogQLParser::WindowClauseContext::COMMA(size_t i) {
  return getToken(HogQLParser::COMMA, i);
}


size_t HogQLParser::WindowClauseContext::getRuleIndex() const {
  return HogQLParser::RuleWindowClause;
}


std::any HogQLParser::WindowClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitWindowClause(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::WindowClauseContext* HogQLParser::windowClause() {
  WindowClauseContext *_localctx = _tracker.createInstance<WindowClauseContext>(_ctx, getState());
  enterRule(_localctx, 48, HogQLParser::RuleWindowClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(363);
    match(HogQLParser::WINDOW);
    setState(364);
    identifier();
    setState(365);
    match(HogQLParser::AS);
    setState(366);
    match(HogQLParser::LPAREN);
    setState(367);
    windowExpr();
    setState(368);
    match(HogQLParser::RPAREN);
    setState(378);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == HogQLParser::COMMA) {
      setState(369);
      match(HogQLParser::COMMA);
      setState(370);
      identifier();
      setState(371);
      match(HogQLParser::AS);
      setState(372);
      match(HogQLParser::LPAREN);
      setState(373);
      windowExpr();
      setState(374);
      match(HogQLParser::RPAREN);
      setState(380);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PrewhereClauseContext ------------------------------------------------------------------

HogQLParser::PrewhereClauseContext::PrewhereClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::PrewhereClauseContext::PREWHERE() {
  return getToken(HogQLParser::PREWHERE, 0);
}

HogQLParser::ColumnExprContext* HogQLParser::PrewhereClauseContext::columnExpr() {
  return getRuleContext<HogQLParser::ColumnExprContext>(0);
}


size_t HogQLParser::PrewhereClauseContext::getRuleIndex() const {
  return HogQLParser::RulePrewhereClause;
}


std::any HogQLParser::PrewhereClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitPrewhereClause(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::PrewhereClauseContext* HogQLParser::prewhereClause() {
  PrewhereClauseContext *_localctx = _tracker.createInstance<PrewhereClauseContext>(_ctx, getState());
  enterRule(_localctx, 50, HogQLParser::RulePrewhereClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(381);
    match(HogQLParser::PREWHERE);
    setState(382);
    columnExpr(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WhereClauseContext ------------------------------------------------------------------

HogQLParser::WhereClauseContext::WhereClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::WhereClauseContext::WHERE() {
  return getToken(HogQLParser::WHERE, 0);
}

HogQLParser::ColumnExprContext* HogQLParser::WhereClauseContext::columnExpr() {
  return getRuleContext<HogQLParser::ColumnExprContext>(0);
}


size_t HogQLParser::WhereClauseContext::getRuleIndex() const {
  return HogQLParser::RuleWhereClause;
}


std::any HogQLParser::WhereClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitWhereClause(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::WhereClauseContext* HogQLParser::whereClause() {
  WhereClauseContext *_localctx = _tracker.createInstance<WhereClauseContext>(_ctx, getState());
  enterRule(_localctx, 52, HogQLParser::RuleWhereClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(384);
    match(HogQLParser::WHERE);
    setState(385);
    columnExpr(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GroupByClauseContext ------------------------------------------------------------------

HogQLParser::GroupByClauseContext::GroupByClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::GroupByClauseContext::GROUP() {
  return getToken(HogQLParser::GROUP, 0);
}

tree::TerminalNode* HogQLParser::GroupByClauseContext::BY() {
  return getToken(HogQLParser::BY, 0);
}

tree::TerminalNode* HogQLParser::GroupByClauseContext::LPAREN() {
  return getToken(HogQLParser::LPAREN, 0);
}

HogQLParser::ColumnExprListContext* HogQLParser::GroupByClauseContext::columnExprList() {
  return getRuleContext<HogQLParser::ColumnExprListContext>(0);
}

tree::TerminalNode* HogQLParser::GroupByClauseContext::RPAREN() {
  return getToken(HogQLParser::RPAREN, 0);
}

tree::TerminalNode* HogQLParser::GroupByClauseContext::CUBE() {
  return getToken(HogQLParser::CUBE, 0);
}

tree::TerminalNode* HogQLParser::GroupByClauseContext::ROLLUP() {
  return getToken(HogQLParser::ROLLUP, 0);
}


size_t HogQLParser::GroupByClauseContext::getRuleIndex() const {
  return HogQLParser::RuleGroupByClause;
}


std::any HogQLParser::GroupByClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitGroupByClause(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::GroupByClauseContext* HogQLParser::groupByClause() {
  GroupByClauseContext *_localctx = _tracker.createInstance<GroupByClauseContext>(_ctx, getState());
  enterRule(_localctx, 54, HogQLParser::RuleGroupByClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(387);
    match(HogQLParser::GROUP);
    setState(388);
    match(HogQLParser::BY);
    setState(395);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 34, _ctx)) {
    case 1: {
      setState(389);
      _la = _input->LA(1);
      if (!(_la == HogQLParser::CUBE

      || _la == HogQLParser::ROLLUP)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(390);
      match(HogQLParser::LPAREN);
      setState(391);
      columnExprList();
      setState(392);
      match(HogQLParser::RPAREN);
      break;
    }

    case 2: {
      setState(394);
      columnExprList();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- HavingClauseContext ------------------------------------------------------------------

HogQLParser::HavingClauseContext::HavingClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::HavingClauseContext::HAVING() {
  return getToken(HogQLParser::HAVING, 0);
}

HogQLParser::ColumnExprContext* HogQLParser::HavingClauseContext::columnExpr() {
  return getRuleContext<HogQLParser::ColumnExprContext>(0);
}


size_t HogQLParser::HavingClauseContext::getRuleIndex() const {
  return HogQLParser::RuleHavingClause;
}


std::any HogQLParser::HavingClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitHavingClause(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::HavingClauseContext* HogQLParser::havingClause() {
  HavingClauseContext *_localctx = _tracker.createInstance<HavingClauseContext>(_ctx, getState());
  enterRule(_localctx, 56, HogQLParser::RuleHavingClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(397);
    match(HogQLParser::HAVING);
    setState(398);
    columnExpr(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OrderByClauseContext ------------------------------------------------------------------

HogQLParser::OrderByClauseContext::OrderByClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::OrderByClauseContext::ORDER() {
  return getToken(HogQLParser::ORDER, 0);
}

tree::TerminalNode* HogQLParser::OrderByClauseContext::BY() {
  return getToken(HogQLParser::BY, 0);
}

HogQLParser::OrderExprListContext* HogQLParser::OrderByClauseContext::orderExprList() {
  return getRuleContext<HogQLParser::OrderExprListContext>(0);
}


size_t HogQLParser::OrderByClauseContext::getRuleIndex() const {
  return HogQLParser::RuleOrderByClause;
}


std::any HogQLParser::OrderByClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitOrderByClause(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::OrderByClauseContext* HogQLParser::orderByClause() {
  OrderByClauseContext *_localctx = _tracker.createInstance<OrderByClauseContext>(_ctx, getState());
  enterRule(_localctx, 58, HogQLParser::RuleOrderByClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(400);
    match(HogQLParser::ORDER);
    setState(401);
    match(HogQLParser::BY);
    setState(402);
    orderExprList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ProjectionOrderByClauseContext ------------------------------------------------------------------

HogQLParser::ProjectionOrderByClauseContext::ProjectionOrderByClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::ProjectionOrderByClauseContext::ORDER() {
  return getToken(HogQLParser::ORDER, 0);
}

tree::TerminalNode* HogQLParser::ProjectionOrderByClauseContext::BY() {
  return getToken(HogQLParser::BY, 0);
}

HogQLParser::ColumnExprListContext* HogQLParser::ProjectionOrderByClauseContext::columnExprList() {
  return getRuleContext<HogQLParser::ColumnExprListContext>(0);
}


size_t HogQLParser::ProjectionOrderByClauseContext::getRuleIndex() const {
  return HogQLParser::RuleProjectionOrderByClause;
}


std::any HogQLParser::ProjectionOrderByClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitProjectionOrderByClause(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::ProjectionOrderByClauseContext* HogQLParser::projectionOrderByClause() {
  ProjectionOrderByClauseContext *_localctx = _tracker.createInstance<ProjectionOrderByClauseContext>(_ctx, getState());
  enterRule(_localctx, 60, HogQLParser::RuleProjectionOrderByClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(404);
    match(HogQLParser::ORDER);
    setState(405);
    match(HogQLParser::BY);
    setState(406);
    columnExprList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LimitAndOffsetClauseContext ------------------------------------------------------------------

HogQLParser::LimitAndOffsetClauseContext::LimitAndOffsetClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::LimitAndOffsetClauseContext::LIMIT() {
  return getToken(HogQLParser::LIMIT, 0);
}

std::vector<HogQLParser::ColumnExprContext *> HogQLParser::LimitAndOffsetClauseContext::columnExpr() {
  return getRuleContexts<HogQLParser::ColumnExprContext>();
}

HogQLParser::ColumnExprContext* HogQLParser::LimitAndOffsetClauseContext::columnExpr(size_t i) {
  return getRuleContext<HogQLParser::ColumnExprContext>(i);
}

tree::TerminalNode* HogQLParser::LimitAndOffsetClauseContext::COMMA() {
  return getToken(HogQLParser::COMMA, 0);
}

tree::TerminalNode* HogQLParser::LimitAndOffsetClauseContext::BY() {
  return getToken(HogQLParser::BY, 0);
}

HogQLParser::ColumnExprListContext* HogQLParser::LimitAndOffsetClauseContext::columnExprList() {
  return getRuleContext<HogQLParser::ColumnExprListContext>(0);
}

tree::TerminalNode* HogQLParser::LimitAndOffsetClauseContext::WITH() {
  return getToken(HogQLParser::WITH, 0);
}

tree::TerminalNode* HogQLParser::LimitAndOffsetClauseContext::TIES() {
  return getToken(HogQLParser::TIES, 0);
}

tree::TerminalNode* HogQLParser::LimitAndOffsetClauseContext::OFFSET() {
  return getToken(HogQLParser::OFFSET, 0);
}


size_t HogQLParser::LimitAndOffsetClauseContext::getRuleIndex() const {
  return HogQLParser::RuleLimitAndOffsetClause;
}


std::any HogQLParser::LimitAndOffsetClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitLimitAndOffsetClause(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::LimitAndOffsetClauseContext* HogQLParser::limitAndOffsetClause() {
  LimitAndOffsetClauseContext *_localctx = _tracker.createInstance<LimitAndOffsetClauseContext>(_ctx, getState());
  enterRule(_localctx, 62, HogQLParser::RuleLimitAndOffsetClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(437);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 39, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(408);
      match(HogQLParser::LIMIT);
      setState(409);
      columnExpr(0);
      setState(412);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == HogQLParser::COMMA) {
        setState(410);
        match(HogQLParser::COMMA);
        setState(411);
        columnExpr(0);
      }
      setState(418);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case HogQLParser::WITH: {
          setState(414);
          match(HogQLParser::WITH);
          setState(415);
          match(HogQLParser::TIES);
          break;
        }

        case HogQLParser::BY: {
          setState(416);
          match(HogQLParser::BY);
          setState(417);
          columnExprList();
          break;
        }

        case HogQLParser::EOF:
        case HogQLParser::SETTINGS:
        case HogQLParser::UNION:
        case HogQLParser::RPAREN: {
          break;
        }

      default:
        break;
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(420);
      match(HogQLParser::LIMIT);
      setState(421);
      columnExpr(0);
      setState(424);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == HogQLParser::WITH) {
        setState(422);
        match(HogQLParser::WITH);
        setState(423);
        match(HogQLParser::TIES);
      }
      setState(426);
      match(HogQLParser::OFFSET);
      setState(427);
      columnExpr(0);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(429);
      match(HogQLParser::LIMIT);
      setState(430);
      columnExpr(0);
      setState(431);
      match(HogQLParser::OFFSET);
      setState(432);
      columnExpr(0);
      setState(435);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == HogQLParser::BY) {
        setState(433);
        match(HogQLParser::BY);
        setState(434);
        columnExprList();
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OffsetOnlyClauseContext ------------------------------------------------------------------

HogQLParser::OffsetOnlyClauseContext::OffsetOnlyClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::OffsetOnlyClauseContext::OFFSET() {
  return getToken(HogQLParser::OFFSET, 0);
}

HogQLParser::ColumnExprContext* HogQLParser::OffsetOnlyClauseContext::columnExpr() {
  return getRuleContext<HogQLParser::ColumnExprContext>(0);
}


size_t HogQLParser::OffsetOnlyClauseContext::getRuleIndex() const {
  return HogQLParser::RuleOffsetOnlyClause;
}


std::any HogQLParser::OffsetOnlyClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitOffsetOnlyClause(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::OffsetOnlyClauseContext* HogQLParser::offsetOnlyClause() {
  OffsetOnlyClauseContext *_localctx = _tracker.createInstance<OffsetOnlyClauseContext>(_ctx, getState());
  enterRule(_localctx, 64, HogQLParser::RuleOffsetOnlyClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(439);
    match(HogQLParser::OFFSET);
    setState(440);
    columnExpr(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SettingsClauseContext ------------------------------------------------------------------

HogQLParser::SettingsClauseContext::SettingsClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::SettingsClauseContext::SETTINGS() {
  return getToken(HogQLParser::SETTINGS, 0);
}

HogQLParser::SettingExprListContext* HogQLParser::SettingsClauseContext::settingExprList() {
  return getRuleContext<HogQLParser::SettingExprListContext>(0);
}


size_t HogQLParser::SettingsClauseContext::getRuleIndex() const {
  return HogQLParser::RuleSettingsClause;
}


std::any HogQLParser::SettingsClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitSettingsClause(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::SettingsClauseContext* HogQLParser::settingsClause() {
  SettingsClauseContext *_localctx = _tracker.createInstance<SettingsClauseContext>(_ctx, getState());
  enterRule(_localctx, 66, HogQLParser::RuleSettingsClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(442);
    match(HogQLParser::SETTINGS);
    setState(443);
    settingExprList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- JoinExprContext ------------------------------------------------------------------

HogQLParser::JoinExprContext::JoinExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t HogQLParser::JoinExprContext::getRuleIndex() const {
  return HogQLParser::RuleJoinExpr;
}

void HogQLParser::JoinExprContext::copyFrom(JoinExprContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- JoinExprOpContext ------------------------------------------------------------------

std::vector<HogQLParser::JoinExprContext *> HogQLParser::JoinExprOpContext::joinExpr() {
  return getRuleContexts<HogQLParser::JoinExprContext>();
}

HogQLParser::JoinExprContext* HogQLParser::JoinExprOpContext::joinExpr(size_t i) {
  return getRuleContext<HogQLParser::JoinExprContext>(i);
}

tree::TerminalNode* HogQLParser::JoinExprOpContext::JOIN() {
  return getToken(HogQLParser::JOIN, 0);
}

HogQLParser::JoinConstraintClauseContext* HogQLParser::JoinExprOpContext::joinConstraintClause() {
  return getRuleContext<HogQLParser::JoinConstraintClauseContext>(0);
}

HogQLParser::JoinOpContext* HogQLParser::JoinExprOpContext::joinOp() {
  return getRuleContext<HogQLParser::JoinOpContext>(0);
}

HogQLParser::JoinExprOpContext::JoinExprOpContext(JoinExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::JoinExprOpContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitJoinExprOp(this);
  else
    return visitor->visitChildren(this);
}
//----------------- JoinExprTableContext ------------------------------------------------------------------

HogQLParser::TableExprContext* HogQLParser::JoinExprTableContext::tableExpr() {
  return getRuleContext<HogQLParser::TableExprContext>(0);
}

tree::TerminalNode* HogQLParser::JoinExprTableContext::FINAL() {
  return getToken(HogQLParser::FINAL, 0);
}

HogQLParser::SampleClauseContext* HogQLParser::JoinExprTableContext::sampleClause() {
  return getRuleContext<HogQLParser::SampleClauseContext>(0);
}

HogQLParser::JoinExprTableContext::JoinExprTableContext(JoinExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::JoinExprTableContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitJoinExprTable(this);
  else
    return visitor->visitChildren(this);
}
//----------------- JoinExprParensContext ------------------------------------------------------------------

tree::TerminalNode* HogQLParser::JoinExprParensContext::LPAREN() {
  return getToken(HogQLParser::LPAREN, 0);
}

HogQLParser::JoinExprContext* HogQLParser::JoinExprParensContext::joinExpr() {
  return getRuleContext<HogQLParser::JoinExprContext>(0);
}

tree::TerminalNode* HogQLParser::JoinExprParensContext::RPAREN() {
  return getToken(HogQLParser::RPAREN, 0);
}

HogQLParser::JoinExprParensContext::JoinExprParensContext(JoinExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::JoinExprParensContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitJoinExprParens(this);
  else
    return visitor->visitChildren(this);
}
//----------------- JoinExprCrossOpContext ------------------------------------------------------------------

std::vector<HogQLParser::JoinExprContext *> HogQLParser::JoinExprCrossOpContext::joinExpr() {
  return getRuleContexts<HogQLParser::JoinExprContext>();
}

HogQLParser::JoinExprContext* HogQLParser::JoinExprCrossOpContext::joinExpr(size_t i) {
  return getRuleContext<HogQLParser::JoinExprContext>(i);
}

HogQLParser::JoinOpCrossContext* HogQLParser::JoinExprCrossOpContext::joinOpCross() {
  return getRuleContext<HogQLParser::JoinOpCrossContext>(0);
}

HogQLParser::JoinExprCrossOpContext::JoinExprCrossOpContext(JoinExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::JoinExprCrossOpContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitJoinExprCrossOp(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::JoinExprContext* HogQLParser::joinExpr() {
   return joinExpr(0);
}

HogQLParser::JoinExprContext* HogQLParser::joinExpr(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  HogQLParser::JoinExprContext *_localctx = _tracker.createInstance<JoinExprContext>(_ctx, parentState);
  HogQLParser::JoinExprContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 68;
  enterRecursionRule(_localctx, 68, HogQLParser::RuleJoinExpr, precedence);

    size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(457);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 42, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<JoinExprTableContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;

      setState(446);
      tableExpr(0);
      setState(448);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 40, _ctx)) {
      case 1: {
        setState(447);
        match(HogQLParser::FINAL);
        break;
      }

      default:
        break;
      }
      setState(451);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 41, _ctx)) {
      case 1: {
        setState(450);
        sampleClause();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<JoinExprParensContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(453);
      match(HogQLParser::LPAREN);
      setState(454);
      joinExpr(0);
      setState(455);
      match(HogQLParser::RPAREN);
      break;
    }

    default:
      break;
    }
    _ctx->stop = _input->LT(-1);
    setState(473);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 45, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(471);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 44, _ctx)) {
        case 1: {
          auto newContext = _tracker.createInstance<JoinExprCrossOpContext>(_tracker.createInstance<JoinExprContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleJoinExpr);
          setState(459);

          if (!(precpred(_ctx, 3))) throw FailedPredicateException(this, "precpred(_ctx, 3)");
          setState(460);
          joinOpCross();
          setState(461);
          joinExpr(4);
          break;
        }

        case 2: {
          auto newContext = _tracker.createInstance<JoinExprOpContext>(_tracker.createInstance<JoinExprContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleJoinExpr);
          setState(463);

          if (!(precpred(_ctx, 4))) throw FailedPredicateException(this, "precpred(_ctx, 4)");
          setState(465);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if ((((_la & ~ 0x3fULL) == 0) &&
            ((1ULL << _la) & 567356589867290) != 0) || _la == HogQLParser::RIGHT

          || _la == HogQLParser::SEMI) {
            setState(464);
            joinOp();
          }
          setState(467);
          match(HogQLParser::JOIN);
          setState(468);
          joinExpr(0);
          setState(469);
          joinConstraintClause();
          break;
        }

        default:
          break;
        } 
      }
      setState(475);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 45, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- JoinOpContext ------------------------------------------------------------------

HogQLParser::JoinOpContext::JoinOpContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t HogQLParser::JoinOpContext::getRuleIndex() const {
  return HogQLParser::RuleJoinOp;
}

void HogQLParser::JoinOpContext::copyFrom(JoinOpContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- JoinOpFullContext ------------------------------------------------------------------

tree::TerminalNode* HogQLParser::JoinOpFullContext::FULL() {
  return getToken(HogQLParser::FULL, 0);
}

tree::TerminalNode* HogQLParser::JoinOpFullContext::OUTER() {
  return getToken(HogQLParser::OUTER, 0);
}

tree::TerminalNode* HogQLParser::JoinOpFullContext::ALL() {
  return getToken(HogQLParser::ALL, 0);
}

tree::TerminalNode* HogQLParser::JoinOpFullContext::ANY() {
  return getToken(HogQLParser::ANY, 0);
}

HogQLParser::JoinOpFullContext::JoinOpFullContext(JoinOpContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::JoinOpFullContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitJoinOpFull(this);
  else
    return visitor->visitChildren(this);
}
//----------------- JoinOpInnerContext ------------------------------------------------------------------

tree::TerminalNode* HogQLParser::JoinOpInnerContext::INNER() {
  return getToken(HogQLParser::INNER, 0);
}

tree::TerminalNode* HogQLParser::JoinOpInnerContext::ALL() {
  return getToken(HogQLParser::ALL, 0);
}

tree::TerminalNode* HogQLParser::JoinOpInnerContext::ANY() {
  return getToken(HogQLParser::ANY, 0);
}

tree::TerminalNode* HogQLParser::JoinOpInnerContext::ASOF() {
  return getToken(HogQLParser::ASOF, 0);
}

HogQLParser::JoinOpInnerContext::JoinOpInnerContext(JoinOpContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::JoinOpInnerContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitJoinOpInner(this);
  else
    return visitor->visitChildren(this);
}
//----------------- JoinOpLeftRightContext ------------------------------------------------------------------

tree::TerminalNode* HogQLParser::JoinOpLeftRightContext::LEFT() {
  return getToken(HogQLParser::LEFT, 0);
}

tree::TerminalNode* HogQLParser::JoinOpLeftRightContext::RIGHT() {
  return getToken(HogQLParser::RIGHT, 0);
}

tree::TerminalNode* HogQLParser::JoinOpLeftRightContext::OUTER() {
  return getToken(HogQLParser::OUTER, 0);
}

tree::TerminalNode* HogQLParser::JoinOpLeftRightContext::SEMI() {
  return getToken(HogQLParser::SEMI, 0);
}

tree::TerminalNode* HogQLParser::JoinOpLeftRightContext::ALL() {
  return getToken(HogQLParser::ALL, 0);
}

tree::TerminalNode* HogQLParser::JoinOpLeftRightContext::ANTI() {
  return getToken(HogQLParser::ANTI, 0);
}

tree::TerminalNode* HogQLParser::JoinOpLeftRightContext::ANY() {
  return getToken(HogQLParser::ANY, 0);
}

tree::TerminalNode* HogQLParser::JoinOpLeftRightContext::ASOF() {
  return getToken(HogQLParser::ASOF, 0);
}

HogQLParser::JoinOpLeftRightContext::JoinOpLeftRightContext(JoinOpContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::JoinOpLeftRightContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitJoinOpLeftRight(this);
  else
    return visitor->visitChildren(this);
}
HogQLParser::JoinOpContext* HogQLParser::joinOp() {
  JoinOpContext *_localctx = _tracker.createInstance<JoinOpContext>(_ctx, getState());
  enterRule(_localctx, 70, HogQLParser::RuleJoinOp);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(519);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 59, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<HogQLParser::JoinOpInnerContext>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(485);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 48, _ctx)) {
      case 1: {
        setState(477);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 274) != 0)) {
          setState(476);
          _la = _input->LA(1);
          if (!((((_la & ~ 0x3fULL) == 0) &&
            ((1ULL << _la) & 274) != 0))) {
          _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
        }
        setState(479);
        match(HogQLParser::INNER);
        break;
      }

      case 2: {
        setState(480);
        match(HogQLParser::INNER);
        setState(482);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 274) != 0)) {
          setState(481);
          _la = _input->LA(1);
          if (!((((_la & ~ 0x3fULL) == 0) &&
            ((1ULL << _la) & 274) != 0))) {
          _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
        }
        break;
      }

      case 3: {
        setState(484);
        _la = _input->LA(1);
        if (!((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 274) != 0))) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

      default:
        break;
      }
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<HogQLParser::JoinOpLeftRightContext>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(501);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 53, _ctx)) {
      case 1: {
        setState(488);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 282) != 0) || _la == HogQLParser::SEMI) {
          setState(487);
          _la = _input->LA(1);
          if (!((((_la & ~ 0x3fULL) == 0) &&
            ((1ULL << _la) & 282) != 0) || _la == HogQLParser::SEMI)) {
          _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
        }
        setState(490);
        _la = _input->LA(1);
        if (!(_la == HogQLParser::LEFT

        || _la == HogQLParser::RIGHT)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(492);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == HogQLParser::OUTER) {
          setState(491);
          match(HogQLParser::OUTER);
        }
        break;
      }

      case 2: {
        setState(494);
        _la = _input->LA(1);
        if (!(_la == HogQLParser::LEFT

        || _la == HogQLParser::RIGHT)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(496);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == HogQLParser::OUTER) {
          setState(495);
          match(HogQLParser::OUTER);
        }
        setState(499);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 282) != 0) || _la == HogQLParser::SEMI) {
          setState(498);
          _la = _input->LA(1);
          if (!((((_la & ~ 0x3fULL) == 0) &&
            ((1ULL << _la) & 282) != 0) || _la == HogQLParser::SEMI)) {
          _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
        }
        break;
      }

      default:
        break;
      }
      break;
    }

    case 3: {
      _localctx = _tracker.createInstance<HogQLParser::JoinOpFullContext>(_localctx);
      enterOuterAlt(_localctx, 3);
      setState(517);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 58, _ctx)) {
      case 1: {
        setState(504);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == HogQLParser::ALL

        || _la == HogQLParser::ANY) {
          setState(503);
          _la = _input->LA(1);
          if (!(_la == HogQLParser::ALL

          || _la == HogQLParser::ANY)) {
          _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
        }
        setState(506);
        match(HogQLParser::FULL);
        setState(508);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == HogQLParser::OUTER) {
          setState(507);
          match(HogQLParser::OUTER);
        }
        break;
      }

      case 2: {
        setState(510);
        match(HogQLParser::FULL);
        setState(512);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == HogQLParser::OUTER) {
          setState(511);
          match(HogQLParser::OUTER);
        }
        setState(515);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == HogQLParser::ALL

        || _la == HogQLParser::ANY) {
          setState(514);
          _la = _input->LA(1);
          if (!(_la == HogQLParser::ALL

          || _la == HogQLParser::ANY)) {
          _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
        }
        break;
      }

      default:
        break;
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- JoinOpCrossContext ------------------------------------------------------------------

HogQLParser::JoinOpCrossContext::JoinOpCrossContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::JoinOpCrossContext::CROSS() {
  return getToken(HogQLParser::CROSS, 0);
}

tree::TerminalNode* HogQLParser::JoinOpCrossContext::JOIN() {
  return getToken(HogQLParser::JOIN, 0);
}

tree::TerminalNode* HogQLParser::JoinOpCrossContext::COMMA() {
  return getToken(HogQLParser::COMMA, 0);
}


size_t HogQLParser::JoinOpCrossContext::getRuleIndex() const {
  return HogQLParser::RuleJoinOpCross;
}


std::any HogQLParser::JoinOpCrossContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitJoinOpCross(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::JoinOpCrossContext* HogQLParser::joinOpCross() {
  JoinOpCrossContext *_localctx = _tracker.createInstance<JoinOpCrossContext>(_ctx, getState());
  enterRule(_localctx, 72, HogQLParser::RuleJoinOpCross);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(524);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case HogQLParser::CROSS: {
        enterOuterAlt(_localctx, 1);
        setState(521);
        match(HogQLParser::CROSS);
        setState(522);
        match(HogQLParser::JOIN);
        break;
      }

      case HogQLParser::COMMA: {
        enterOuterAlt(_localctx, 2);
        setState(523);
        match(HogQLParser::COMMA);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- JoinConstraintClauseContext ------------------------------------------------------------------

HogQLParser::JoinConstraintClauseContext::JoinConstraintClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::JoinConstraintClauseContext::ON() {
  return getToken(HogQLParser::ON, 0);
}

HogQLParser::ColumnExprListContext* HogQLParser::JoinConstraintClauseContext::columnExprList() {
  return getRuleContext<HogQLParser::ColumnExprListContext>(0);
}

tree::TerminalNode* HogQLParser::JoinConstraintClauseContext::USING() {
  return getToken(HogQLParser::USING, 0);
}

tree::TerminalNode* HogQLParser::JoinConstraintClauseContext::LPAREN() {
  return getToken(HogQLParser::LPAREN, 0);
}

tree::TerminalNode* HogQLParser::JoinConstraintClauseContext::RPAREN() {
  return getToken(HogQLParser::RPAREN, 0);
}


size_t HogQLParser::JoinConstraintClauseContext::getRuleIndex() const {
  return HogQLParser::RuleJoinConstraintClause;
}


std::any HogQLParser::JoinConstraintClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitJoinConstraintClause(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::JoinConstraintClauseContext* HogQLParser::joinConstraintClause() {
  JoinConstraintClauseContext *_localctx = _tracker.createInstance<JoinConstraintClauseContext>(_ctx, getState());
  enterRule(_localctx, 74, HogQLParser::RuleJoinConstraintClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(535);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 61, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(526);
      match(HogQLParser::ON);
      setState(527);
      columnExprList();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(528);
      match(HogQLParser::USING);
      setState(529);
      match(HogQLParser::LPAREN);
      setState(530);
      columnExprList();
      setState(531);
      match(HogQLParser::RPAREN);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(533);
      match(HogQLParser::USING);
      setState(534);
      columnExprList();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SampleClauseContext ------------------------------------------------------------------

HogQLParser::SampleClauseContext::SampleClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::SampleClauseContext::SAMPLE() {
  return getToken(HogQLParser::SAMPLE, 0);
}

std::vector<HogQLParser::RatioExprContext *> HogQLParser::SampleClauseContext::ratioExpr() {
  return getRuleContexts<HogQLParser::RatioExprContext>();
}

HogQLParser::RatioExprContext* HogQLParser::SampleClauseContext::ratioExpr(size_t i) {
  return getRuleContext<HogQLParser::RatioExprContext>(i);
}

tree::TerminalNode* HogQLParser::SampleClauseContext::OFFSET() {
  return getToken(HogQLParser::OFFSET, 0);
}


size_t HogQLParser::SampleClauseContext::getRuleIndex() const {
  return HogQLParser::RuleSampleClause;
}


std::any HogQLParser::SampleClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitSampleClause(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::SampleClauseContext* HogQLParser::sampleClause() {
  SampleClauseContext *_localctx = _tracker.createInstance<SampleClauseContext>(_ctx, getState());
  enterRule(_localctx, 76, HogQLParser::RuleSampleClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(537);
    match(HogQLParser::SAMPLE);
    setState(538);
    ratioExpr();
    setState(541);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 62, _ctx)) {
    case 1: {
      setState(539);
      match(HogQLParser::OFFSET);
      setState(540);
      ratioExpr();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OrderExprListContext ------------------------------------------------------------------

HogQLParser::OrderExprListContext::OrderExprListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<HogQLParser::OrderExprContext *> HogQLParser::OrderExprListContext::orderExpr() {
  return getRuleContexts<HogQLParser::OrderExprContext>();
}

HogQLParser::OrderExprContext* HogQLParser::OrderExprListContext::orderExpr(size_t i) {
  return getRuleContext<HogQLParser::OrderExprContext>(i);
}

std::vector<tree::TerminalNode *> HogQLParser::OrderExprListContext::COMMA() {
  return getTokens(HogQLParser::COMMA);
}

tree::TerminalNode* HogQLParser::OrderExprListContext::COMMA(size_t i) {
  return getToken(HogQLParser::COMMA, i);
}


size_t HogQLParser::OrderExprListContext::getRuleIndex() const {
  return HogQLParser::RuleOrderExprList;
}


std::any HogQLParser::OrderExprListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitOrderExprList(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::OrderExprListContext* HogQLParser::orderExprList() {
  OrderExprListContext *_localctx = _tracker.createInstance<OrderExprListContext>(_ctx, getState());
  enterRule(_localctx, 78, HogQLParser::RuleOrderExprList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(543);
    orderExpr();
    setState(548);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == HogQLParser::COMMA) {
      setState(544);
      match(HogQLParser::COMMA);
      setState(545);
      orderExpr();
      setState(550);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OrderExprContext ------------------------------------------------------------------

HogQLParser::OrderExprContext::OrderExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HogQLParser::ColumnExprContext* HogQLParser::OrderExprContext::columnExpr() {
  return getRuleContext<HogQLParser::ColumnExprContext>(0);
}

tree::TerminalNode* HogQLParser::OrderExprContext::NULLS() {
  return getToken(HogQLParser::NULLS, 0);
}

tree::TerminalNode* HogQLParser::OrderExprContext::COLLATE() {
  return getToken(HogQLParser::COLLATE, 0);
}

tree::TerminalNode* HogQLParser::OrderExprContext::STRING_LITERAL() {
  return getToken(HogQLParser::STRING_LITERAL, 0);
}

tree::TerminalNode* HogQLParser::OrderExprContext::ASCENDING() {
  return getToken(HogQLParser::ASCENDING, 0);
}

tree::TerminalNode* HogQLParser::OrderExprContext::DESCENDING() {
  return getToken(HogQLParser::DESCENDING, 0);
}

tree::TerminalNode* HogQLParser::OrderExprContext::DESC() {
  return getToken(HogQLParser::DESC, 0);
}

tree::TerminalNode* HogQLParser::OrderExprContext::FIRST() {
  return getToken(HogQLParser::FIRST, 0);
}

tree::TerminalNode* HogQLParser::OrderExprContext::LAST() {
  return getToken(HogQLParser::LAST, 0);
}


size_t HogQLParser::OrderExprContext::getRuleIndex() const {
  return HogQLParser::RuleOrderExpr;
}


std::any HogQLParser::OrderExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitOrderExpr(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::OrderExprContext* HogQLParser::orderExpr() {
  OrderExprContext *_localctx = _tracker.createInstance<OrderExprContext>(_ctx, getState());
  enterRule(_localctx, 80, HogQLParser::RuleOrderExpr);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(551);
    columnExpr(0);
    setState(553);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 6291584) != 0)) {
      setState(552);
      _la = _input->LA(1);
      if (!((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 6291584) != 0))) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(557);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HogQLParser::NULLS) {
      setState(555);
      match(HogQLParser::NULLS);
      setState(556);
      _la = _input->LA(1);
      if (!(_la == HogQLParser::FIRST

      || _la == HogQLParser::LAST)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(561);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HogQLParser::COLLATE) {
      setState(559);
      match(HogQLParser::COLLATE);
      setState(560);
      match(HogQLParser::STRING_LITERAL);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RatioExprContext ------------------------------------------------------------------

HogQLParser::RatioExprContext::RatioExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HogQLParser::PlaceholderContext* HogQLParser::RatioExprContext::placeholder() {
  return getRuleContext<HogQLParser::PlaceholderContext>(0);
}

std::vector<HogQLParser::NumberLiteralContext *> HogQLParser::RatioExprContext::numberLiteral() {
  return getRuleContexts<HogQLParser::NumberLiteralContext>();
}

HogQLParser::NumberLiteralContext* HogQLParser::RatioExprContext::numberLiteral(size_t i) {
  return getRuleContext<HogQLParser::NumberLiteralContext>(i);
}

tree::TerminalNode* HogQLParser::RatioExprContext::SLASH() {
  return getToken(HogQLParser::SLASH, 0);
}


size_t HogQLParser::RatioExprContext::getRuleIndex() const {
  return HogQLParser::RuleRatioExpr;
}


std::any HogQLParser::RatioExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitRatioExpr(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::RatioExprContext* HogQLParser::ratioExpr() {
  RatioExprContext *_localctx = _tracker.createInstance<RatioExprContext>(_ctx, getState());
  enterRule(_localctx, 82, HogQLParser::RuleRatioExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(569);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case HogQLParser::LBRACE: {
        enterOuterAlt(_localctx, 1);
        setState(563);
        placeholder();
        break;
      }

      case HogQLParser::INF:
      case HogQLParser::NAN_SQL:
      case HogQLParser::FLOATING_LITERAL:
      case HogQLParser::OCTAL_LITERAL:
      case HogQLParser::DECIMAL_LITERAL:
      case HogQLParser::HEXADECIMAL_LITERAL:
      case HogQLParser::DASH:
      case HogQLParser::DOT:
      case HogQLParser::PLUS: {
        enterOuterAlt(_localctx, 2);
        setState(564);
        numberLiteral();
        setState(567);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 67, _ctx)) {
        case 1: {
          setState(565);
          match(HogQLParser::SLASH);
          setState(566);
          numberLiteral();
          break;
        }

        default:
          break;
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SettingExprListContext ------------------------------------------------------------------

HogQLParser::SettingExprListContext::SettingExprListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<HogQLParser::SettingExprContext *> HogQLParser::SettingExprListContext::settingExpr() {
  return getRuleContexts<HogQLParser::SettingExprContext>();
}

HogQLParser::SettingExprContext* HogQLParser::SettingExprListContext::settingExpr(size_t i) {
  return getRuleContext<HogQLParser::SettingExprContext>(i);
}

std::vector<tree::TerminalNode *> HogQLParser::SettingExprListContext::COMMA() {
  return getTokens(HogQLParser::COMMA);
}

tree::TerminalNode* HogQLParser::SettingExprListContext::COMMA(size_t i) {
  return getToken(HogQLParser::COMMA, i);
}


size_t HogQLParser::SettingExprListContext::getRuleIndex() const {
  return HogQLParser::RuleSettingExprList;
}


std::any HogQLParser::SettingExprListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitSettingExprList(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::SettingExprListContext* HogQLParser::settingExprList() {
  SettingExprListContext *_localctx = _tracker.createInstance<SettingExprListContext>(_ctx, getState());
  enterRule(_localctx, 84, HogQLParser::RuleSettingExprList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(571);
    settingExpr();
    setState(576);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == HogQLParser::COMMA) {
      setState(572);
      match(HogQLParser::COMMA);
      setState(573);
      settingExpr();
      setState(578);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SettingExprContext ------------------------------------------------------------------

HogQLParser::SettingExprContext::SettingExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HogQLParser::IdentifierContext* HogQLParser::SettingExprContext::identifier() {
  return getRuleContext<HogQLParser::IdentifierContext>(0);
}

tree::TerminalNode* HogQLParser::SettingExprContext::EQ_SINGLE() {
  return getToken(HogQLParser::EQ_SINGLE, 0);
}

HogQLParser::LiteralContext* HogQLParser::SettingExprContext::literal() {
  return getRuleContext<HogQLParser::LiteralContext>(0);
}


size_t HogQLParser::SettingExprContext::getRuleIndex() const {
  return HogQLParser::RuleSettingExpr;
}


std::any HogQLParser::SettingExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitSettingExpr(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::SettingExprContext* HogQLParser::settingExpr() {
  SettingExprContext *_localctx = _tracker.createInstance<SettingExprContext>(_ctx, getState());
  enterRule(_localctx, 86, HogQLParser::RuleSettingExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(579);
    identifier();
    setState(580);
    match(HogQLParser::EQ_SINGLE);
    setState(581);
    literal();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WindowExprContext ------------------------------------------------------------------

HogQLParser::WindowExprContext::WindowExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HogQLParser::WinPartitionByClauseContext* HogQLParser::WindowExprContext::winPartitionByClause() {
  return getRuleContext<HogQLParser::WinPartitionByClauseContext>(0);
}

HogQLParser::WinOrderByClauseContext* HogQLParser::WindowExprContext::winOrderByClause() {
  return getRuleContext<HogQLParser::WinOrderByClauseContext>(0);
}

HogQLParser::WinFrameClauseContext* HogQLParser::WindowExprContext::winFrameClause() {
  return getRuleContext<HogQLParser::WinFrameClauseContext>(0);
}


size_t HogQLParser::WindowExprContext::getRuleIndex() const {
  return HogQLParser::RuleWindowExpr;
}


std::any HogQLParser::WindowExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitWindowExpr(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::WindowExprContext* HogQLParser::windowExpr() {
  WindowExprContext *_localctx = _tracker.createInstance<WindowExprContext>(_ctx, getState());
  enterRule(_localctx, 88, HogQLParser::RuleWindowExpr);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(584);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HogQLParser::PARTITION) {
      setState(583);
      winPartitionByClause();
    }
    setState(587);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HogQLParser::ORDER) {
      setState(586);
      winOrderByClause();
    }
    setState(590);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HogQLParser::RANGE

    || _la == HogQLParser::ROWS) {
      setState(589);
      winFrameClause();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WinPartitionByClauseContext ------------------------------------------------------------------

HogQLParser::WinPartitionByClauseContext::WinPartitionByClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::WinPartitionByClauseContext::PARTITION() {
  return getToken(HogQLParser::PARTITION, 0);
}

tree::TerminalNode* HogQLParser::WinPartitionByClauseContext::BY() {
  return getToken(HogQLParser::BY, 0);
}

HogQLParser::ColumnExprListContext* HogQLParser::WinPartitionByClauseContext::columnExprList() {
  return getRuleContext<HogQLParser::ColumnExprListContext>(0);
}


size_t HogQLParser::WinPartitionByClauseContext::getRuleIndex() const {
  return HogQLParser::RuleWinPartitionByClause;
}


std::any HogQLParser::WinPartitionByClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitWinPartitionByClause(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::WinPartitionByClauseContext* HogQLParser::winPartitionByClause() {
  WinPartitionByClauseContext *_localctx = _tracker.createInstance<WinPartitionByClauseContext>(_ctx, getState());
  enterRule(_localctx, 90, HogQLParser::RuleWinPartitionByClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(592);
    match(HogQLParser::PARTITION);
    setState(593);
    match(HogQLParser::BY);
    setState(594);
    columnExprList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WinOrderByClauseContext ------------------------------------------------------------------

HogQLParser::WinOrderByClauseContext::WinOrderByClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::WinOrderByClauseContext::ORDER() {
  return getToken(HogQLParser::ORDER, 0);
}

tree::TerminalNode* HogQLParser::WinOrderByClauseContext::BY() {
  return getToken(HogQLParser::BY, 0);
}

HogQLParser::OrderExprListContext* HogQLParser::WinOrderByClauseContext::orderExprList() {
  return getRuleContext<HogQLParser::OrderExprListContext>(0);
}


size_t HogQLParser::WinOrderByClauseContext::getRuleIndex() const {
  return HogQLParser::RuleWinOrderByClause;
}


std::any HogQLParser::WinOrderByClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitWinOrderByClause(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::WinOrderByClauseContext* HogQLParser::winOrderByClause() {
  WinOrderByClauseContext *_localctx = _tracker.createInstance<WinOrderByClauseContext>(_ctx, getState());
  enterRule(_localctx, 92, HogQLParser::RuleWinOrderByClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(596);
    match(HogQLParser::ORDER);
    setState(597);
    match(HogQLParser::BY);
    setState(598);
    orderExprList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WinFrameClauseContext ------------------------------------------------------------------

HogQLParser::WinFrameClauseContext::WinFrameClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HogQLParser::WinFrameExtendContext* HogQLParser::WinFrameClauseContext::winFrameExtend() {
  return getRuleContext<HogQLParser::WinFrameExtendContext>(0);
}

tree::TerminalNode* HogQLParser::WinFrameClauseContext::ROWS() {
  return getToken(HogQLParser::ROWS, 0);
}

tree::TerminalNode* HogQLParser::WinFrameClauseContext::RANGE() {
  return getToken(HogQLParser::RANGE, 0);
}


size_t HogQLParser::WinFrameClauseContext::getRuleIndex() const {
  return HogQLParser::RuleWinFrameClause;
}


std::any HogQLParser::WinFrameClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitWinFrameClause(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::WinFrameClauseContext* HogQLParser::winFrameClause() {
  WinFrameClauseContext *_localctx = _tracker.createInstance<WinFrameClauseContext>(_ctx, getState());
  enterRule(_localctx, 94, HogQLParser::RuleWinFrameClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(600);
    _la = _input->LA(1);
    if (!(_la == HogQLParser::RANGE

    || _la == HogQLParser::ROWS)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(601);
    winFrameExtend();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WinFrameExtendContext ------------------------------------------------------------------

HogQLParser::WinFrameExtendContext::WinFrameExtendContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t HogQLParser::WinFrameExtendContext::getRuleIndex() const {
  return HogQLParser::RuleWinFrameExtend;
}

void HogQLParser::WinFrameExtendContext::copyFrom(WinFrameExtendContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- FrameStartContext ------------------------------------------------------------------

HogQLParser::WinFrameBoundContext* HogQLParser::FrameStartContext::winFrameBound() {
  return getRuleContext<HogQLParser::WinFrameBoundContext>(0);
}

HogQLParser::FrameStartContext::FrameStartContext(WinFrameExtendContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::FrameStartContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitFrameStart(this);
  else
    return visitor->visitChildren(this);
}
//----------------- FrameBetweenContext ------------------------------------------------------------------

tree::TerminalNode* HogQLParser::FrameBetweenContext::BETWEEN() {
  return getToken(HogQLParser::BETWEEN, 0);
}

std::vector<HogQLParser::WinFrameBoundContext *> HogQLParser::FrameBetweenContext::winFrameBound() {
  return getRuleContexts<HogQLParser::WinFrameBoundContext>();
}

HogQLParser::WinFrameBoundContext* HogQLParser::FrameBetweenContext::winFrameBound(size_t i) {
  return getRuleContext<HogQLParser::WinFrameBoundContext>(i);
}

tree::TerminalNode* HogQLParser::FrameBetweenContext::AND() {
  return getToken(HogQLParser::AND, 0);
}

HogQLParser::FrameBetweenContext::FrameBetweenContext(WinFrameExtendContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::FrameBetweenContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitFrameBetween(this);
  else
    return visitor->visitChildren(this);
}
HogQLParser::WinFrameExtendContext* HogQLParser::winFrameExtend() {
  WinFrameExtendContext *_localctx = _tracker.createInstance<WinFrameExtendContext>(_ctx, getState());
  enterRule(_localctx, 96, HogQLParser::RuleWinFrameExtend);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(609);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case HogQLParser::CURRENT:
      case HogQLParser::INF:
      case HogQLParser::NAN_SQL:
      case HogQLParser::UNBOUNDED:
      case HogQLParser::FLOATING_LITERAL:
      case HogQLParser::OCTAL_LITERAL:
      case HogQLParser::DECIMAL_LITERAL:
      case HogQLParser::HEXADECIMAL_LITERAL:
      case HogQLParser::DASH:
      case HogQLParser::DOT:
      case HogQLParser::PLUS: {
        _localctx = _tracker.createInstance<HogQLParser::FrameStartContext>(_localctx);
        enterOuterAlt(_localctx, 1);
        setState(603);
        winFrameBound();
        break;
      }

      case HogQLParser::BETWEEN: {
        _localctx = _tracker.createInstance<HogQLParser::FrameBetweenContext>(_localctx);
        enterOuterAlt(_localctx, 2);
        setState(604);
        match(HogQLParser::BETWEEN);
        setState(605);
        winFrameBound();
        setState(606);
        match(HogQLParser::AND);
        setState(607);
        winFrameBound();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WinFrameBoundContext ------------------------------------------------------------------

HogQLParser::WinFrameBoundContext::WinFrameBoundContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::WinFrameBoundContext::CURRENT() {
  return getToken(HogQLParser::CURRENT, 0);
}

tree::TerminalNode* HogQLParser::WinFrameBoundContext::ROW() {
  return getToken(HogQLParser::ROW, 0);
}

tree::TerminalNode* HogQLParser::WinFrameBoundContext::UNBOUNDED() {
  return getToken(HogQLParser::UNBOUNDED, 0);
}

tree::TerminalNode* HogQLParser::WinFrameBoundContext::PRECEDING() {
  return getToken(HogQLParser::PRECEDING, 0);
}

tree::TerminalNode* HogQLParser::WinFrameBoundContext::FOLLOWING() {
  return getToken(HogQLParser::FOLLOWING, 0);
}

HogQLParser::NumberLiteralContext* HogQLParser::WinFrameBoundContext::numberLiteral() {
  return getRuleContext<HogQLParser::NumberLiteralContext>(0);
}


size_t HogQLParser::WinFrameBoundContext::getRuleIndex() const {
  return HogQLParser::RuleWinFrameBound;
}


std::any HogQLParser::WinFrameBoundContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitWinFrameBound(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::WinFrameBoundContext* HogQLParser::winFrameBound() {
  WinFrameBoundContext *_localctx = _tracker.createInstance<WinFrameBoundContext>(_ctx, getState());
  enterRule(_localctx, 98, HogQLParser::RuleWinFrameBound);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(623);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 74, _ctx)) {
    case 1: {
      setState(611);
      match(HogQLParser::CURRENT);
      setState(612);
      match(HogQLParser::ROW);
      break;
    }

    case 2: {
      setState(613);
      match(HogQLParser::UNBOUNDED);
      setState(614);
      match(HogQLParser::PRECEDING);
      break;
    }

    case 3: {
      setState(615);
      match(HogQLParser::UNBOUNDED);
      setState(616);
      match(HogQLParser::FOLLOWING);
      break;
    }

    case 4: {
      setState(617);
      numberLiteral();
      setState(618);
      match(HogQLParser::PRECEDING);
      break;
    }

    case 5: {
      setState(620);
      numberLiteral();
      setState(621);
      match(HogQLParser::FOLLOWING);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExprContext ------------------------------------------------------------------

HogQLParser::ExprContext::ExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HogQLParser::ColumnExprContext* HogQLParser::ExprContext::columnExpr() {
  return getRuleContext<HogQLParser::ColumnExprContext>(0);
}

tree::TerminalNode* HogQLParser::ExprContext::EOF() {
  return getToken(HogQLParser::EOF, 0);
}


size_t HogQLParser::ExprContext::getRuleIndex() const {
  return HogQLParser::RuleExpr;
}


std::any HogQLParser::ExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitExpr(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::ExprContext* HogQLParser::expr() {
  ExprContext *_localctx = _tracker.createInstance<ExprContext>(_ctx, getState());
  enterRule(_localctx, 100, HogQLParser::RuleExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(625);
    columnExpr(0);
    setState(626);
    match(HogQLParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ColumnTypeExprContext ------------------------------------------------------------------

HogQLParser::ColumnTypeExprContext::ColumnTypeExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t HogQLParser::ColumnTypeExprContext::getRuleIndex() const {
  return HogQLParser::RuleColumnTypeExpr;
}

void HogQLParser::ColumnTypeExprContext::copyFrom(ColumnTypeExprContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- ColumnTypeExprNestedContext ------------------------------------------------------------------

std::vector<HogQLParser::IdentifierContext *> HogQLParser::ColumnTypeExprNestedContext::identifier() {
  return getRuleContexts<HogQLParser::IdentifierContext>();
}

HogQLParser::IdentifierContext* HogQLParser::ColumnTypeExprNestedContext::identifier(size_t i) {
  return getRuleContext<HogQLParser::IdentifierContext>(i);
}

tree::TerminalNode* HogQLParser::ColumnTypeExprNestedContext::LPAREN() {
  return getToken(HogQLParser::LPAREN, 0);
}

std::vector<HogQLParser::ColumnTypeExprContext *> HogQLParser::ColumnTypeExprNestedContext::columnTypeExpr() {
  return getRuleContexts<HogQLParser::ColumnTypeExprContext>();
}

HogQLParser::ColumnTypeExprContext* HogQLParser::ColumnTypeExprNestedContext::columnTypeExpr(size_t i) {
  return getRuleContext<HogQLParser::ColumnTypeExprContext>(i);
}

tree::TerminalNode* HogQLParser::ColumnTypeExprNestedContext::RPAREN() {
  return getToken(HogQLParser::RPAREN, 0);
}

std::vector<tree::TerminalNode *> HogQLParser::ColumnTypeExprNestedContext::COMMA() {
  return getTokens(HogQLParser::COMMA);
}

tree::TerminalNode* HogQLParser::ColumnTypeExprNestedContext::COMMA(size_t i) {
  return getToken(HogQLParser::COMMA, i);
}

HogQLParser::ColumnTypeExprNestedContext::ColumnTypeExprNestedContext(ColumnTypeExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnTypeExprNestedContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnTypeExprNested(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnTypeExprParamContext ------------------------------------------------------------------

HogQLParser::IdentifierContext* HogQLParser::ColumnTypeExprParamContext::identifier() {
  return getRuleContext<HogQLParser::IdentifierContext>(0);
}

tree::TerminalNode* HogQLParser::ColumnTypeExprParamContext::LPAREN() {
  return getToken(HogQLParser::LPAREN, 0);
}

tree::TerminalNode* HogQLParser::ColumnTypeExprParamContext::RPAREN() {
  return getToken(HogQLParser::RPAREN, 0);
}

HogQLParser::ColumnExprListContext* HogQLParser::ColumnTypeExprParamContext::columnExprList() {
  return getRuleContext<HogQLParser::ColumnExprListContext>(0);
}

HogQLParser::ColumnTypeExprParamContext::ColumnTypeExprParamContext(ColumnTypeExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnTypeExprParamContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnTypeExprParam(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnTypeExprSimpleContext ------------------------------------------------------------------

HogQLParser::IdentifierContext* HogQLParser::ColumnTypeExprSimpleContext::identifier() {
  return getRuleContext<HogQLParser::IdentifierContext>(0);
}

HogQLParser::ColumnTypeExprSimpleContext::ColumnTypeExprSimpleContext(ColumnTypeExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnTypeExprSimpleContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnTypeExprSimple(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnTypeExprComplexContext ------------------------------------------------------------------

HogQLParser::IdentifierContext* HogQLParser::ColumnTypeExprComplexContext::identifier() {
  return getRuleContext<HogQLParser::IdentifierContext>(0);
}

tree::TerminalNode* HogQLParser::ColumnTypeExprComplexContext::LPAREN() {
  return getToken(HogQLParser::LPAREN, 0);
}

std::vector<HogQLParser::ColumnTypeExprContext *> HogQLParser::ColumnTypeExprComplexContext::columnTypeExpr() {
  return getRuleContexts<HogQLParser::ColumnTypeExprContext>();
}

HogQLParser::ColumnTypeExprContext* HogQLParser::ColumnTypeExprComplexContext::columnTypeExpr(size_t i) {
  return getRuleContext<HogQLParser::ColumnTypeExprContext>(i);
}

tree::TerminalNode* HogQLParser::ColumnTypeExprComplexContext::RPAREN() {
  return getToken(HogQLParser::RPAREN, 0);
}

std::vector<tree::TerminalNode *> HogQLParser::ColumnTypeExprComplexContext::COMMA() {
  return getTokens(HogQLParser::COMMA);
}

tree::TerminalNode* HogQLParser::ColumnTypeExprComplexContext::COMMA(size_t i) {
  return getToken(HogQLParser::COMMA, i);
}

HogQLParser::ColumnTypeExprComplexContext::ColumnTypeExprComplexContext(ColumnTypeExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnTypeExprComplexContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnTypeExprComplex(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnTypeExprEnumContext ------------------------------------------------------------------

HogQLParser::IdentifierContext* HogQLParser::ColumnTypeExprEnumContext::identifier() {
  return getRuleContext<HogQLParser::IdentifierContext>(0);
}

tree::TerminalNode* HogQLParser::ColumnTypeExprEnumContext::LPAREN() {
  return getToken(HogQLParser::LPAREN, 0);
}

std::vector<HogQLParser::EnumValueContext *> HogQLParser::ColumnTypeExprEnumContext::enumValue() {
  return getRuleContexts<HogQLParser::EnumValueContext>();
}

HogQLParser::EnumValueContext* HogQLParser::ColumnTypeExprEnumContext::enumValue(size_t i) {
  return getRuleContext<HogQLParser::EnumValueContext>(i);
}

tree::TerminalNode* HogQLParser::ColumnTypeExprEnumContext::RPAREN() {
  return getToken(HogQLParser::RPAREN, 0);
}

std::vector<tree::TerminalNode *> HogQLParser::ColumnTypeExprEnumContext::COMMA() {
  return getTokens(HogQLParser::COMMA);
}

tree::TerminalNode* HogQLParser::ColumnTypeExprEnumContext::COMMA(size_t i) {
  return getToken(HogQLParser::COMMA, i);
}

HogQLParser::ColumnTypeExprEnumContext::ColumnTypeExprEnumContext(ColumnTypeExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnTypeExprEnumContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnTypeExprEnum(this);
  else
    return visitor->visitChildren(this);
}
HogQLParser::ColumnTypeExprContext* HogQLParser::columnTypeExpr() {
  ColumnTypeExprContext *_localctx = _tracker.createInstance<ColumnTypeExprContext>(_ctx, getState());
  enterRule(_localctx, 102, HogQLParser::RuleColumnTypeExpr);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(675);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 79, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<HogQLParser::ColumnTypeExprSimpleContext>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(628);
      identifier();
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<HogQLParser::ColumnTypeExprNestedContext>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(629);
      identifier();
      setState(630);
      match(HogQLParser::LPAREN);
      setState(631);
      identifier();
      setState(632);
      columnTypeExpr();
      setState(639);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == HogQLParser::COMMA) {
        setState(633);
        match(HogQLParser::COMMA);
        setState(634);
        identifier();
        setState(635);
        columnTypeExpr();
        setState(641);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(642);
      match(HogQLParser::RPAREN);
      break;
    }

    case 3: {
      _localctx = _tracker.createInstance<HogQLParser::ColumnTypeExprEnumContext>(_localctx);
      enterOuterAlt(_localctx, 3);
      setState(644);
      identifier();
      setState(645);
      match(HogQLParser::LPAREN);
      setState(646);
      enumValue();
      setState(651);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == HogQLParser::COMMA) {
        setState(647);
        match(HogQLParser::COMMA);
        setState(648);
        enumValue();
        setState(653);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(654);
      match(HogQLParser::RPAREN);
      break;
    }

    case 4: {
      _localctx = _tracker.createInstance<HogQLParser::ColumnTypeExprComplexContext>(_localctx);
      enterOuterAlt(_localctx, 4);
      setState(656);
      identifier();
      setState(657);
      match(HogQLParser::LPAREN);
      setState(658);
      columnTypeExpr();
      setState(663);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == HogQLParser::COMMA) {
        setState(659);
        match(HogQLParser::COMMA);
        setState(660);
        columnTypeExpr();
        setState(665);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(666);
      match(HogQLParser::RPAREN);
      break;
    }

    case 5: {
      _localctx = _tracker.createInstance<HogQLParser::ColumnTypeExprParamContext>(_localctx);
      enterOuterAlt(_localctx, 5);
      setState(668);
      identifier();
      setState(669);
      match(HogQLParser::LPAREN);
      setState(671);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -1125900443713538) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & 8076106347046764543) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 128)) & 577) != 0)) {
        setState(670);
        columnExprList();
      }
      setState(673);
      match(HogQLParser::RPAREN);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ColumnExprListContext ------------------------------------------------------------------

HogQLParser::ColumnExprListContext::ColumnExprListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<HogQLParser::ColumnExprContext *> HogQLParser::ColumnExprListContext::columnExpr() {
  return getRuleContexts<HogQLParser::ColumnExprContext>();
}

HogQLParser::ColumnExprContext* HogQLParser::ColumnExprListContext::columnExpr(size_t i) {
  return getRuleContext<HogQLParser::ColumnExprContext>(i);
}

std::vector<tree::TerminalNode *> HogQLParser::ColumnExprListContext::COMMA() {
  return getTokens(HogQLParser::COMMA);
}

tree::TerminalNode* HogQLParser::ColumnExprListContext::COMMA(size_t i) {
  return getToken(HogQLParser::COMMA, i);
}


size_t HogQLParser::ColumnExprListContext::getRuleIndex() const {
  return HogQLParser::RuleColumnExprList;
}


std::any HogQLParser::ColumnExprListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprList(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::ColumnExprListContext* HogQLParser::columnExprList() {
  ColumnExprListContext *_localctx = _tracker.createInstance<ColumnExprListContext>(_ctx, getState());
  enterRule(_localctx, 104, HogQLParser::RuleColumnExprList);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(677);
    columnExpr(0);
    setState(682);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 80, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(678);
        match(HogQLParser::COMMA);
        setState(679);
        columnExpr(0); 
      }
      setState(684);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 80, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ColumnExprContext ------------------------------------------------------------------

HogQLParser::ColumnExprContext::ColumnExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t HogQLParser::ColumnExprContext::getRuleIndex() const {
  return HogQLParser::RuleColumnExpr;
}

void HogQLParser::ColumnExprContext::copyFrom(ColumnExprContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- ColumnExprTernaryOpContext ------------------------------------------------------------------

std::vector<HogQLParser::ColumnExprContext *> HogQLParser::ColumnExprTernaryOpContext::columnExpr() {
  return getRuleContexts<HogQLParser::ColumnExprContext>();
}

HogQLParser::ColumnExprContext* HogQLParser::ColumnExprTernaryOpContext::columnExpr(size_t i) {
  return getRuleContext<HogQLParser::ColumnExprContext>(i);
}

tree::TerminalNode* HogQLParser::ColumnExprTernaryOpContext::QUERY() {
  return getToken(HogQLParser::QUERY, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprTernaryOpContext::COLON() {
  return getToken(HogQLParser::COLON, 0);
}

HogQLParser::ColumnExprTernaryOpContext::ColumnExprTernaryOpContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprTernaryOpContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprTernaryOp(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprAliasContext ------------------------------------------------------------------

HogQLParser::ColumnExprContext* HogQLParser::ColumnExprAliasContext::columnExpr() {
  return getRuleContext<HogQLParser::ColumnExprContext>(0);
}

tree::TerminalNode* HogQLParser::ColumnExprAliasContext::AS() {
  return getToken(HogQLParser::AS, 0);
}

HogQLParser::IdentifierContext* HogQLParser::ColumnExprAliasContext::identifier() {
  return getRuleContext<HogQLParser::IdentifierContext>(0);
}

tree::TerminalNode* HogQLParser::ColumnExprAliasContext::STRING_LITERAL() {
  return getToken(HogQLParser::STRING_LITERAL, 0);
}

HogQLParser::ColumnExprAliasContext::ColumnExprAliasContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprAliasContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprAlias(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprNegateContext ------------------------------------------------------------------

tree::TerminalNode* HogQLParser::ColumnExprNegateContext::DASH() {
  return getToken(HogQLParser::DASH, 0);
}

HogQLParser::ColumnExprContext* HogQLParser::ColumnExprNegateContext::columnExpr() {
  return getRuleContext<HogQLParser::ColumnExprContext>(0);
}

HogQLParser::ColumnExprNegateContext::ColumnExprNegateContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprNegateContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprNegate(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprDictContext ------------------------------------------------------------------

tree::TerminalNode* HogQLParser::ColumnExprDictContext::LBRACE() {
  return getToken(HogQLParser::LBRACE, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprDictContext::RBRACE() {
  return getToken(HogQLParser::RBRACE, 0);
}

HogQLParser::KvPairListContext* HogQLParser::ColumnExprDictContext::kvPairList() {
  return getRuleContext<HogQLParser::KvPairListContext>(0);
}

HogQLParser::ColumnExprDictContext::ColumnExprDictContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprDictContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprDict(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprSubqueryContext ------------------------------------------------------------------

tree::TerminalNode* HogQLParser::ColumnExprSubqueryContext::LPAREN() {
  return getToken(HogQLParser::LPAREN, 0);
}

HogQLParser::SelectUnionStmtContext* HogQLParser::ColumnExprSubqueryContext::selectUnionStmt() {
  return getRuleContext<HogQLParser::SelectUnionStmtContext>(0);
}

tree::TerminalNode* HogQLParser::ColumnExprSubqueryContext::RPAREN() {
  return getToken(HogQLParser::RPAREN, 0);
}

HogQLParser::ColumnExprSubqueryContext::ColumnExprSubqueryContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprSubqueryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprSubquery(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprLiteralContext ------------------------------------------------------------------

HogQLParser::LiteralContext* HogQLParser::ColumnExprLiteralContext::literal() {
  return getRuleContext<HogQLParser::LiteralContext>(0);
}

HogQLParser::ColumnExprLiteralContext::ColumnExprLiteralContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprLiteral(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprArrayContext ------------------------------------------------------------------

tree::TerminalNode* HogQLParser::ColumnExprArrayContext::LBRACKET() {
  return getToken(HogQLParser::LBRACKET, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprArrayContext::RBRACKET() {
  return getToken(HogQLParser::RBRACKET, 0);
}

HogQLParser::ColumnExprListContext* HogQLParser::ColumnExprArrayContext::columnExprList() {
  return getRuleContext<HogQLParser::ColumnExprListContext>(0);
}

HogQLParser::ColumnExprArrayContext::ColumnExprArrayContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprArrayContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprArray(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprSubstringContext ------------------------------------------------------------------

tree::TerminalNode* HogQLParser::ColumnExprSubstringContext::SUBSTRING() {
  return getToken(HogQLParser::SUBSTRING, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprSubstringContext::LPAREN() {
  return getToken(HogQLParser::LPAREN, 0);
}

std::vector<HogQLParser::ColumnExprContext *> HogQLParser::ColumnExprSubstringContext::columnExpr() {
  return getRuleContexts<HogQLParser::ColumnExprContext>();
}

HogQLParser::ColumnExprContext* HogQLParser::ColumnExprSubstringContext::columnExpr(size_t i) {
  return getRuleContext<HogQLParser::ColumnExprContext>(i);
}

tree::TerminalNode* HogQLParser::ColumnExprSubstringContext::FROM() {
  return getToken(HogQLParser::FROM, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprSubstringContext::RPAREN() {
  return getToken(HogQLParser::RPAREN, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprSubstringContext::FOR() {
  return getToken(HogQLParser::FOR, 0);
}

HogQLParser::ColumnExprSubstringContext::ColumnExprSubstringContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprSubstringContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprSubstring(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprCastContext ------------------------------------------------------------------

tree::TerminalNode* HogQLParser::ColumnExprCastContext::CAST() {
  return getToken(HogQLParser::CAST, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprCastContext::LPAREN() {
  return getToken(HogQLParser::LPAREN, 0);
}

HogQLParser::ColumnExprContext* HogQLParser::ColumnExprCastContext::columnExpr() {
  return getRuleContext<HogQLParser::ColumnExprContext>(0);
}

tree::TerminalNode* HogQLParser::ColumnExprCastContext::AS() {
  return getToken(HogQLParser::AS, 0);
}

HogQLParser::ColumnTypeExprContext* HogQLParser::ColumnExprCastContext::columnTypeExpr() {
  return getRuleContext<HogQLParser::ColumnTypeExprContext>(0);
}

tree::TerminalNode* HogQLParser::ColumnExprCastContext::RPAREN() {
  return getToken(HogQLParser::RPAREN, 0);
}

HogQLParser::ColumnExprCastContext::ColumnExprCastContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprCastContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprCast(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprOrContext ------------------------------------------------------------------

std::vector<HogQLParser::ColumnExprContext *> HogQLParser::ColumnExprOrContext::columnExpr() {
  return getRuleContexts<HogQLParser::ColumnExprContext>();
}

HogQLParser::ColumnExprContext* HogQLParser::ColumnExprOrContext::columnExpr(size_t i) {
  return getRuleContext<HogQLParser::ColumnExprContext>(i);
}

tree::TerminalNode* HogQLParser::ColumnExprOrContext::OR() {
  return getToken(HogQLParser::OR, 0);
}

HogQLParser::ColumnExprOrContext::ColumnExprOrContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprOrContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprOr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprPrecedence1Context ------------------------------------------------------------------

std::vector<HogQLParser::ColumnExprContext *> HogQLParser::ColumnExprPrecedence1Context::columnExpr() {
  return getRuleContexts<HogQLParser::ColumnExprContext>();
}

HogQLParser::ColumnExprContext* HogQLParser::ColumnExprPrecedence1Context::columnExpr(size_t i) {
  return getRuleContext<HogQLParser::ColumnExprContext>(i);
}

tree::TerminalNode* HogQLParser::ColumnExprPrecedence1Context::ASTERISK() {
  return getToken(HogQLParser::ASTERISK, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprPrecedence1Context::SLASH() {
  return getToken(HogQLParser::SLASH, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprPrecedence1Context::PERCENT() {
  return getToken(HogQLParser::PERCENT, 0);
}

HogQLParser::ColumnExprPrecedence1Context::ColumnExprPrecedence1Context(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprPrecedence1Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprPrecedence1(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprPrecedence2Context ------------------------------------------------------------------

std::vector<HogQLParser::ColumnExprContext *> HogQLParser::ColumnExprPrecedence2Context::columnExpr() {
  return getRuleContexts<HogQLParser::ColumnExprContext>();
}

HogQLParser::ColumnExprContext* HogQLParser::ColumnExprPrecedence2Context::columnExpr(size_t i) {
  return getRuleContext<HogQLParser::ColumnExprContext>(i);
}

tree::TerminalNode* HogQLParser::ColumnExprPrecedence2Context::PLUS() {
  return getToken(HogQLParser::PLUS, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprPrecedence2Context::DASH() {
  return getToken(HogQLParser::DASH, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprPrecedence2Context::CONCAT() {
  return getToken(HogQLParser::CONCAT, 0);
}

HogQLParser::ColumnExprPrecedence2Context::ColumnExprPrecedence2Context(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprPrecedence2Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprPrecedence2(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprPrecedence3Context ------------------------------------------------------------------

std::vector<HogQLParser::ColumnExprContext *> HogQLParser::ColumnExprPrecedence3Context::columnExpr() {
  return getRuleContexts<HogQLParser::ColumnExprContext>();
}

HogQLParser::ColumnExprContext* HogQLParser::ColumnExprPrecedence3Context::columnExpr(size_t i) {
  return getRuleContext<HogQLParser::ColumnExprContext>(i);
}

tree::TerminalNode* HogQLParser::ColumnExprPrecedence3Context::IN() {
  return getToken(HogQLParser::IN, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprPrecedence3Context::EQ_DOUBLE() {
  return getToken(HogQLParser::EQ_DOUBLE, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprPrecedence3Context::EQ_SINGLE() {
  return getToken(HogQLParser::EQ_SINGLE, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprPrecedence3Context::NOT_EQ() {
  return getToken(HogQLParser::NOT_EQ, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprPrecedence3Context::LT_EQ() {
  return getToken(HogQLParser::LT_EQ, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprPrecedence3Context::LT() {
  return getToken(HogQLParser::LT, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprPrecedence3Context::GT_EQ() {
  return getToken(HogQLParser::GT_EQ, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprPrecedence3Context::GT() {
  return getToken(HogQLParser::GT, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprPrecedence3Context::LIKE() {
  return getToken(HogQLParser::LIKE, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprPrecedence3Context::ILIKE() {
  return getToken(HogQLParser::ILIKE, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprPrecedence3Context::REGEX_SINGLE() {
  return getToken(HogQLParser::REGEX_SINGLE, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprPrecedence3Context::REGEX_DOUBLE() {
  return getToken(HogQLParser::REGEX_DOUBLE, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprPrecedence3Context::NOT_REGEX() {
  return getToken(HogQLParser::NOT_REGEX, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprPrecedence3Context::IREGEX_SINGLE() {
  return getToken(HogQLParser::IREGEX_SINGLE, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprPrecedence3Context::IREGEX_DOUBLE() {
  return getToken(HogQLParser::IREGEX_DOUBLE, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprPrecedence3Context::NOT_IREGEX() {
  return getToken(HogQLParser::NOT_IREGEX, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprPrecedence3Context::COHORT() {
  return getToken(HogQLParser::COHORT, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprPrecedence3Context::NOT() {
  return getToken(HogQLParser::NOT, 0);
}

HogQLParser::ColumnExprPrecedence3Context::ColumnExprPrecedence3Context(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprPrecedence3Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprPrecedence3(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprIntervalContext ------------------------------------------------------------------

tree::TerminalNode* HogQLParser::ColumnExprIntervalContext::INTERVAL() {
  return getToken(HogQLParser::INTERVAL, 0);
}

HogQLParser::ColumnExprContext* HogQLParser::ColumnExprIntervalContext::columnExpr() {
  return getRuleContext<HogQLParser::ColumnExprContext>(0);
}

HogQLParser::IntervalContext* HogQLParser::ColumnExprIntervalContext::interval() {
  return getRuleContext<HogQLParser::IntervalContext>(0);
}

HogQLParser::ColumnExprIntervalContext::ColumnExprIntervalContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprIntervalContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprInterval(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprIsNullContext ------------------------------------------------------------------

HogQLParser::ColumnExprContext* HogQLParser::ColumnExprIsNullContext::columnExpr() {
  return getRuleContext<HogQLParser::ColumnExprContext>(0);
}

tree::TerminalNode* HogQLParser::ColumnExprIsNullContext::IS() {
  return getToken(HogQLParser::IS, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprIsNullContext::NULL_SQL() {
  return getToken(HogQLParser::NULL_SQL, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprIsNullContext::NOT() {
  return getToken(HogQLParser::NOT, 0);
}

HogQLParser::ColumnExprIsNullContext::ColumnExprIsNullContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprIsNullContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprIsNull(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprWinFunctionTargetContext ------------------------------------------------------------------

std::vector<HogQLParser::IdentifierContext *> HogQLParser::ColumnExprWinFunctionTargetContext::identifier() {
  return getRuleContexts<HogQLParser::IdentifierContext>();
}

HogQLParser::IdentifierContext* HogQLParser::ColumnExprWinFunctionTargetContext::identifier(size_t i) {
  return getRuleContext<HogQLParser::IdentifierContext>(i);
}

tree::TerminalNode* HogQLParser::ColumnExprWinFunctionTargetContext::OVER() {
  return getToken(HogQLParser::OVER, 0);
}

std::vector<tree::TerminalNode *> HogQLParser::ColumnExprWinFunctionTargetContext::LPAREN() {
  return getTokens(HogQLParser::LPAREN);
}

tree::TerminalNode* HogQLParser::ColumnExprWinFunctionTargetContext::LPAREN(size_t i) {
  return getToken(HogQLParser::LPAREN, i);
}

std::vector<tree::TerminalNode *> HogQLParser::ColumnExprWinFunctionTargetContext::RPAREN() {
  return getTokens(HogQLParser::RPAREN);
}

tree::TerminalNode* HogQLParser::ColumnExprWinFunctionTargetContext::RPAREN(size_t i) {
  return getToken(HogQLParser::RPAREN, i);
}

HogQLParser::ColumnExprListContext* HogQLParser::ColumnExprWinFunctionTargetContext::columnExprList() {
  return getRuleContext<HogQLParser::ColumnExprListContext>(0);
}

tree::TerminalNode* HogQLParser::ColumnExprWinFunctionTargetContext::DISTINCT() {
  return getToken(HogQLParser::DISTINCT, 0);
}

HogQLParser::ColumnArgListContext* HogQLParser::ColumnExprWinFunctionTargetContext::columnArgList() {
  return getRuleContext<HogQLParser::ColumnArgListContext>(0);
}

HogQLParser::ColumnExprWinFunctionTargetContext::ColumnExprWinFunctionTargetContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprWinFunctionTargetContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprWinFunctionTarget(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprTrimContext ------------------------------------------------------------------

tree::TerminalNode* HogQLParser::ColumnExprTrimContext::TRIM() {
  return getToken(HogQLParser::TRIM, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprTrimContext::LPAREN() {
  return getToken(HogQLParser::LPAREN, 0);
}

HogQLParser::StringContext* HogQLParser::ColumnExprTrimContext::string() {
  return getRuleContext<HogQLParser::StringContext>(0);
}

tree::TerminalNode* HogQLParser::ColumnExprTrimContext::FROM() {
  return getToken(HogQLParser::FROM, 0);
}

HogQLParser::ColumnExprContext* HogQLParser::ColumnExprTrimContext::columnExpr() {
  return getRuleContext<HogQLParser::ColumnExprContext>(0);
}

tree::TerminalNode* HogQLParser::ColumnExprTrimContext::RPAREN() {
  return getToken(HogQLParser::RPAREN, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprTrimContext::BOTH() {
  return getToken(HogQLParser::BOTH, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprTrimContext::LEADING() {
  return getToken(HogQLParser::LEADING, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprTrimContext::TRAILING() {
  return getToken(HogQLParser::TRAILING, 0);
}

HogQLParser::ColumnExprTrimContext::ColumnExprTrimContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprTrimContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprTrim(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprTagElementContext ------------------------------------------------------------------

HogQLParser::HogqlxTagElementContext* HogQLParser::ColumnExprTagElementContext::hogqlxTagElement() {
  return getRuleContext<HogQLParser::HogqlxTagElementContext>(0);
}

HogQLParser::ColumnExprTagElementContext::ColumnExprTagElementContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprTagElementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprTagElement(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprTemplateStringContext ------------------------------------------------------------------

HogQLParser::TemplateStringContext* HogQLParser::ColumnExprTemplateStringContext::templateString() {
  return getRuleContext<HogQLParser::TemplateStringContext>(0);
}

HogQLParser::ColumnExprTemplateStringContext::ColumnExprTemplateStringContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprTemplateStringContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprTemplateString(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprTupleContext ------------------------------------------------------------------

tree::TerminalNode* HogQLParser::ColumnExprTupleContext::LPAREN() {
  return getToken(HogQLParser::LPAREN, 0);
}

HogQLParser::ColumnExprListContext* HogQLParser::ColumnExprTupleContext::columnExprList() {
  return getRuleContext<HogQLParser::ColumnExprListContext>(0);
}

tree::TerminalNode* HogQLParser::ColumnExprTupleContext::RPAREN() {
  return getToken(HogQLParser::RPAREN, 0);
}

HogQLParser::ColumnExprTupleContext::ColumnExprTupleContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprTupleContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprTuple(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprArrayAccessContext ------------------------------------------------------------------

std::vector<HogQLParser::ColumnExprContext *> HogQLParser::ColumnExprArrayAccessContext::columnExpr() {
  return getRuleContexts<HogQLParser::ColumnExprContext>();
}

HogQLParser::ColumnExprContext* HogQLParser::ColumnExprArrayAccessContext::columnExpr(size_t i) {
  return getRuleContext<HogQLParser::ColumnExprContext>(i);
}

tree::TerminalNode* HogQLParser::ColumnExprArrayAccessContext::LBRACKET() {
  return getToken(HogQLParser::LBRACKET, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprArrayAccessContext::RBRACKET() {
  return getToken(HogQLParser::RBRACKET, 0);
}

HogQLParser::ColumnExprArrayAccessContext::ColumnExprArrayAccessContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprArrayAccessContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprArrayAccess(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprBetweenContext ------------------------------------------------------------------

std::vector<HogQLParser::ColumnExprContext *> HogQLParser::ColumnExprBetweenContext::columnExpr() {
  return getRuleContexts<HogQLParser::ColumnExprContext>();
}

HogQLParser::ColumnExprContext* HogQLParser::ColumnExprBetweenContext::columnExpr(size_t i) {
  return getRuleContext<HogQLParser::ColumnExprContext>(i);
}

tree::TerminalNode* HogQLParser::ColumnExprBetweenContext::BETWEEN() {
  return getToken(HogQLParser::BETWEEN, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprBetweenContext::AND() {
  return getToken(HogQLParser::AND, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprBetweenContext::NOT() {
  return getToken(HogQLParser::NOT, 0);
}

HogQLParser::ColumnExprBetweenContext::ColumnExprBetweenContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprBetweenContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprBetween(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprPropertyAccessContext ------------------------------------------------------------------

HogQLParser::ColumnExprContext* HogQLParser::ColumnExprPropertyAccessContext::columnExpr() {
  return getRuleContext<HogQLParser::ColumnExprContext>(0);
}

tree::TerminalNode* HogQLParser::ColumnExprPropertyAccessContext::DOT() {
  return getToken(HogQLParser::DOT, 0);
}

HogQLParser::IdentifierContext* HogQLParser::ColumnExprPropertyAccessContext::identifier() {
  return getRuleContext<HogQLParser::IdentifierContext>(0);
}

HogQLParser::ColumnExprPropertyAccessContext::ColumnExprPropertyAccessContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprPropertyAccessContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprPropertyAccess(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprParensContext ------------------------------------------------------------------

tree::TerminalNode* HogQLParser::ColumnExprParensContext::LPAREN() {
  return getToken(HogQLParser::LPAREN, 0);
}

HogQLParser::ColumnExprContext* HogQLParser::ColumnExprParensContext::columnExpr() {
  return getRuleContext<HogQLParser::ColumnExprContext>(0);
}

tree::TerminalNode* HogQLParser::ColumnExprParensContext::RPAREN() {
  return getToken(HogQLParser::RPAREN, 0);
}

HogQLParser::ColumnExprParensContext::ColumnExprParensContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprParensContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprParens(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprTimestampContext ------------------------------------------------------------------

tree::TerminalNode* HogQLParser::ColumnExprTimestampContext::TIMESTAMP() {
  return getToken(HogQLParser::TIMESTAMP, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprTimestampContext::STRING_LITERAL() {
  return getToken(HogQLParser::STRING_LITERAL, 0);
}

HogQLParser::ColumnExprTimestampContext::ColumnExprTimestampContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprTimestampContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprTimestamp(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprNullishContext ------------------------------------------------------------------

std::vector<HogQLParser::ColumnExprContext *> HogQLParser::ColumnExprNullishContext::columnExpr() {
  return getRuleContexts<HogQLParser::ColumnExprContext>();
}

HogQLParser::ColumnExprContext* HogQLParser::ColumnExprNullishContext::columnExpr(size_t i) {
  return getRuleContext<HogQLParser::ColumnExprContext>(i);
}

tree::TerminalNode* HogQLParser::ColumnExprNullishContext::NULLISH() {
  return getToken(HogQLParser::NULLISH, 0);
}

HogQLParser::ColumnExprNullishContext::ColumnExprNullishContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprNullishContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprNullish(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprAndContext ------------------------------------------------------------------

std::vector<HogQLParser::ColumnExprContext *> HogQLParser::ColumnExprAndContext::columnExpr() {
  return getRuleContexts<HogQLParser::ColumnExprContext>();
}

HogQLParser::ColumnExprContext* HogQLParser::ColumnExprAndContext::columnExpr(size_t i) {
  return getRuleContext<HogQLParser::ColumnExprContext>(i);
}

tree::TerminalNode* HogQLParser::ColumnExprAndContext::AND() {
  return getToken(HogQLParser::AND, 0);
}

HogQLParser::ColumnExprAndContext::ColumnExprAndContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprAndContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprAnd(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprTupleAccessContext ------------------------------------------------------------------

HogQLParser::ColumnExprContext* HogQLParser::ColumnExprTupleAccessContext::columnExpr() {
  return getRuleContext<HogQLParser::ColumnExprContext>(0);
}

tree::TerminalNode* HogQLParser::ColumnExprTupleAccessContext::DOT() {
  return getToken(HogQLParser::DOT, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprTupleAccessContext::DECIMAL_LITERAL() {
  return getToken(HogQLParser::DECIMAL_LITERAL, 0);
}

HogQLParser::ColumnExprTupleAccessContext::ColumnExprTupleAccessContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprTupleAccessContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprTupleAccess(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprCaseContext ------------------------------------------------------------------

tree::TerminalNode* HogQLParser::ColumnExprCaseContext::CASE() {
  return getToken(HogQLParser::CASE, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprCaseContext::END() {
  return getToken(HogQLParser::END, 0);
}

std::vector<tree::TerminalNode *> HogQLParser::ColumnExprCaseContext::WHEN() {
  return getTokens(HogQLParser::WHEN);
}

tree::TerminalNode* HogQLParser::ColumnExprCaseContext::WHEN(size_t i) {
  return getToken(HogQLParser::WHEN, i);
}

std::vector<tree::TerminalNode *> HogQLParser::ColumnExprCaseContext::THEN() {
  return getTokens(HogQLParser::THEN);
}

tree::TerminalNode* HogQLParser::ColumnExprCaseContext::THEN(size_t i) {
  return getToken(HogQLParser::THEN, i);
}

tree::TerminalNode* HogQLParser::ColumnExprCaseContext::ELSE() {
  return getToken(HogQLParser::ELSE, 0);
}

std::vector<HogQLParser::ColumnExprContext *> HogQLParser::ColumnExprCaseContext::columnExpr() {
  return getRuleContexts<HogQLParser::ColumnExprContext>();
}

HogQLParser::ColumnExprContext* HogQLParser::ColumnExprCaseContext::columnExpr(size_t i) {
  return getRuleContext<HogQLParser::ColumnExprContext>(i);
}

HogQLParser::ColumnExprCaseContext::ColumnExprCaseContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprCaseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprCase(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprDateContext ------------------------------------------------------------------

tree::TerminalNode* HogQLParser::ColumnExprDateContext::DATE() {
  return getToken(HogQLParser::DATE, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprDateContext::STRING_LITERAL() {
  return getToken(HogQLParser::STRING_LITERAL, 0);
}

HogQLParser::ColumnExprDateContext::ColumnExprDateContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprDateContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprDate(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprNotContext ------------------------------------------------------------------

tree::TerminalNode* HogQLParser::ColumnExprNotContext::NOT() {
  return getToken(HogQLParser::NOT, 0);
}

HogQLParser::ColumnExprContext* HogQLParser::ColumnExprNotContext::columnExpr() {
  return getRuleContext<HogQLParser::ColumnExprContext>(0);
}

HogQLParser::ColumnExprNotContext::ColumnExprNotContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprNotContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprNot(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprWinFunctionContext ------------------------------------------------------------------

HogQLParser::IdentifierContext* HogQLParser::ColumnExprWinFunctionContext::identifier() {
  return getRuleContext<HogQLParser::IdentifierContext>(0);
}

tree::TerminalNode* HogQLParser::ColumnExprWinFunctionContext::OVER() {
  return getToken(HogQLParser::OVER, 0);
}

std::vector<tree::TerminalNode *> HogQLParser::ColumnExprWinFunctionContext::LPAREN() {
  return getTokens(HogQLParser::LPAREN);
}

tree::TerminalNode* HogQLParser::ColumnExprWinFunctionContext::LPAREN(size_t i) {
  return getToken(HogQLParser::LPAREN, i);
}

HogQLParser::WindowExprContext* HogQLParser::ColumnExprWinFunctionContext::windowExpr() {
  return getRuleContext<HogQLParser::WindowExprContext>(0);
}

std::vector<tree::TerminalNode *> HogQLParser::ColumnExprWinFunctionContext::RPAREN() {
  return getTokens(HogQLParser::RPAREN);
}

tree::TerminalNode* HogQLParser::ColumnExprWinFunctionContext::RPAREN(size_t i) {
  return getToken(HogQLParser::RPAREN, i);
}

HogQLParser::ColumnExprListContext* HogQLParser::ColumnExprWinFunctionContext::columnExprList() {
  return getRuleContext<HogQLParser::ColumnExprListContext>(0);
}

tree::TerminalNode* HogQLParser::ColumnExprWinFunctionContext::DISTINCT() {
  return getToken(HogQLParser::DISTINCT, 0);
}

HogQLParser::ColumnArgListContext* HogQLParser::ColumnExprWinFunctionContext::columnArgList() {
  return getRuleContext<HogQLParser::ColumnArgListContext>(0);
}

HogQLParser::ColumnExprWinFunctionContext::ColumnExprWinFunctionContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprWinFunctionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprWinFunction(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprIdentifierContext ------------------------------------------------------------------

HogQLParser::ColumnIdentifierContext* HogQLParser::ColumnExprIdentifierContext::columnIdentifier() {
  return getRuleContext<HogQLParser::ColumnIdentifierContext>(0);
}

HogQLParser::ColumnExprIdentifierContext::ColumnExprIdentifierContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprIdentifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprIdentifier(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprFunctionContext ------------------------------------------------------------------

HogQLParser::IdentifierContext* HogQLParser::ColumnExprFunctionContext::identifier() {
  return getRuleContext<HogQLParser::IdentifierContext>(0);
}

std::vector<tree::TerminalNode *> HogQLParser::ColumnExprFunctionContext::LPAREN() {
  return getTokens(HogQLParser::LPAREN);
}

tree::TerminalNode* HogQLParser::ColumnExprFunctionContext::LPAREN(size_t i) {
  return getToken(HogQLParser::LPAREN, i);
}

std::vector<tree::TerminalNode *> HogQLParser::ColumnExprFunctionContext::RPAREN() {
  return getTokens(HogQLParser::RPAREN);
}

tree::TerminalNode* HogQLParser::ColumnExprFunctionContext::RPAREN(size_t i) {
  return getToken(HogQLParser::RPAREN, i);
}

tree::TerminalNode* HogQLParser::ColumnExprFunctionContext::DISTINCT() {
  return getToken(HogQLParser::DISTINCT, 0);
}

HogQLParser::ColumnArgListContext* HogQLParser::ColumnExprFunctionContext::columnArgList() {
  return getRuleContext<HogQLParser::ColumnArgListContext>(0);
}

HogQLParser::ColumnExprListContext* HogQLParser::ColumnExprFunctionContext::columnExprList() {
  return getRuleContext<HogQLParser::ColumnExprListContext>(0);
}

HogQLParser::ColumnExprFunctionContext::ColumnExprFunctionContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprFunctionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprFunction(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprAsteriskContext ------------------------------------------------------------------

tree::TerminalNode* HogQLParser::ColumnExprAsteriskContext::ASTERISK() {
  return getToken(HogQLParser::ASTERISK, 0);
}

HogQLParser::TableIdentifierContext* HogQLParser::ColumnExprAsteriskContext::tableIdentifier() {
  return getRuleContext<HogQLParser::TableIdentifierContext>(0);
}

tree::TerminalNode* HogQLParser::ColumnExprAsteriskContext::DOT() {
  return getToken(HogQLParser::DOT, 0);
}

HogQLParser::ColumnExprAsteriskContext::ColumnExprAsteriskContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprAsteriskContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprAsterisk(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::ColumnExprContext* HogQLParser::columnExpr() {
   return columnExpr(0);
}

HogQLParser::ColumnExprContext* HogQLParser::columnExpr(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  HogQLParser::ColumnExprContext *_localctx = _tracker.createInstance<ColumnExprContext>(_ctx, parentState);
  HogQLParser::ColumnExprContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 106;
  enterRecursionRule(_localctx, 106, HogQLParser::RuleColumnExpr, precedence);

    size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(834);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 100, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<ColumnExprCaseContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;

      setState(686);
      match(HogQLParser::CASE);
      setState(688);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 81, _ctx)) {
      case 1: {
        setState(687);
        antlrcpp::downCast<ColumnExprCaseContext *>(_localctx)->caseExpr = columnExpr(0);
        break;
      }

      default:
        break;
      }
      setState(695); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(690);
        match(HogQLParser::WHEN);
        setState(691);
        antlrcpp::downCast<ColumnExprCaseContext *>(_localctx)->whenExpr = columnExpr(0);
        setState(692);
        match(HogQLParser::THEN);
        setState(693);
        antlrcpp::downCast<ColumnExprCaseContext *>(_localctx)->thenExpr = columnExpr(0);
        setState(697); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (_la == HogQLParser::WHEN);
      setState(701);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == HogQLParser::ELSE) {
        setState(699);
        match(HogQLParser::ELSE);
        setState(700);
        antlrcpp::downCast<ColumnExprCaseContext *>(_localctx)->elseExpr = columnExpr(0);
      }
      setState(703);
      match(HogQLParser::END);
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<ColumnExprCastContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(705);
      match(HogQLParser::CAST);
      setState(706);
      match(HogQLParser::LPAREN);
      setState(707);
      columnExpr(0);
      setState(708);
      match(HogQLParser::AS);
      setState(709);
      columnTypeExpr();
      setState(710);
      match(HogQLParser::RPAREN);
      break;
    }

    case 3: {
      _localctx = _tracker.createInstance<ColumnExprDateContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(712);
      match(HogQLParser::DATE);
      setState(713);
      match(HogQLParser::STRING_LITERAL);
      break;
    }

    case 4: {
      _localctx = _tracker.createInstance<ColumnExprIntervalContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(714);
      match(HogQLParser::INTERVAL);
      setState(715);
      columnExpr(0);
      setState(716);
      interval();
      break;
    }

    case 5: {
      _localctx = _tracker.createInstance<ColumnExprSubstringContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(718);
      match(HogQLParser::SUBSTRING);
      setState(719);
      match(HogQLParser::LPAREN);
      setState(720);
      columnExpr(0);
      setState(721);
      match(HogQLParser::FROM);
      setState(722);
      columnExpr(0);
      setState(725);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == HogQLParser::FOR) {
        setState(723);
        match(HogQLParser::FOR);
        setState(724);
        columnExpr(0);
      }
      setState(727);
      match(HogQLParser::RPAREN);
      break;
    }

    case 6: {
      _localctx = _tracker.createInstance<ColumnExprTimestampContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(729);
      match(HogQLParser::TIMESTAMP);
      setState(730);
      match(HogQLParser::STRING_LITERAL);
      break;
    }

    case 7: {
      _localctx = _tracker.createInstance<ColumnExprTrimContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(731);
      match(HogQLParser::TRIM);
      setState(732);
      match(HogQLParser::LPAREN);
      setState(733);
      _la = _input->LA(1);
      if (!(_la == HogQLParser::BOTH

      || _la == HogQLParser::LEADING || _la == HogQLParser::TRAILING)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(734);
      string();
      setState(735);
      match(HogQLParser::FROM);
      setState(736);
      columnExpr(0);
      setState(737);
      match(HogQLParser::RPAREN);
      break;
    }

    case 8: {
      _localctx = _tracker.createInstance<ColumnExprWinFunctionContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(739);
      identifier();

      setState(740);
      match(HogQLParser::LPAREN);
      setState(742);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -1125900443713538) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & 8076106347046764543) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 128)) & 577) != 0)) {
        setState(741);
        columnExprList();
      }
      setState(744);
      match(HogQLParser::RPAREN);
      setState(754);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == HogQLParser::LPAREN) {
        setState(746);
        match(HogQLParser::LPAREN);
        setState(748);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 86, _ctx)) {
        case 1: {
          setState(747);
          match(HogQLParser::DISTINCT);
          break;
        }

        default:
          break;
        }
        setState(751);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & -1125900443713538) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 64)) & 8076106347046764543) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 128)) & 577) != 0)) {
          setState(750);
          columnArgList();
        }
        setState(753);
        match(HogQLParser::RPAREN);
      }
      setState(756);
      match(HogQLParser::OVER);
      setState(757);
      match(HogQLParser::LPAREN);
      setState(758);
      windowExpr();
      setState(759);
      match(HogQLParser::RPAREN);
      break;
    }

    case 9: {
      _localctx = _tracker.createInstance<ColumnExprWinFunctionTargetContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(761);
      identifier();

      setState(762);
      match(HogQLParser::LPAREN);
      setState(764);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -1125900443713538) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & 8076106347046764543) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 128)) & 577) != 0)) {
        setState(763);
        columnExprList();
      }
      setState(766);
      match(HogQLParser::RPAREN);
      setState(776);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == HogQLParser::LPAREN) {
        setState(768);
        match(HogQLParser::LPAREN);
        setState(770);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 90, _ctx)) {
        case 1: {
          setState(769);
          match(HogQLParser::DISTINCT);
          break;
        }

        default:
          break;
        }
        setState(773);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & -1125900443713538) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 64)) & 8076106347046764543) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 128)) & 577) != 0)) {
          setState(772);
          columnArgList();
        }
        setState(775);
        match(HogQLParser::RPAREN);
      }
      setState(778);
      match(HogQLParser::OVER);
      setState(779);
      identifier();
      break;
    }

    case 10: {
      _localctx = _tracker.createInstance<ColumnExprFunctionContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(781);
      identifier();
      setState(787);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 94, _ctx)) {
      case 1: {
        setState(782);
        match(HogQLParser::LPAREN);
        setState(784);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & -1125900443713538) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 64)) & 8076106347046764543) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 128)) & 577) != 0)) {
          setState(783);
          columnExprList();
        }
        setState(786);
        match(HogQLParser::RPAREN);
        break;
      }

      default:
        break;
      }
      setState(789);
      match(HogQLParser::LPAREN);
      setState(791);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 95, _ctx)) {
      case 1: {
        setState(790);
        match(HogQLParser::DISTINCT);
        break;
      }

      default:
        break;
      }
      setState(794);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -1125900443713538) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & 8076106347046764543) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 128)) & 577) != 0)) {
        setState(793);
        columnArgList();
      }
      setState(796);
      match(HogQLParser::RPAREN);
      break;
    }

    case 11: {
      _localctx = _tracker.createInstance<ColumnExprTagElementContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(798);
      hogqlxTagElement();
      break;
    }

    case 12: {
      _localctx = _tracker.createInstance<ColumnExprTemplateStringContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(799);
      templateString();
      break;
    }

    case 13: {
      _localctx = _tracker.createInstance<ColumnExprLiteralContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(800);
      literal();
      break;
    }

    case 14: {
      _localctx = _tracker.createInstance<ColumnExprNegateContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(801);
      match(HogQLParser::DASH);
      setState(802);
      columnExpr(19);
      break;
    }

    case 15: {
      _localctx = _tracker.createInstance<ColumnExprNotContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(803);
      match(HogQLParser::NOT);
      setState(804);
      columnExpr(13);
      break;
    }

    case 16: {
      _localctx = _tracker.createInstance<ColumnExprAsteriskContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(808);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -181272084561788930) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & 201863462911) != 0)) {
        setState(805);
        tableIdentifier();
        setState(806);
        match(HogQLParser::DOT);
      }
      setState(810);
      match(HogQLParser::ASTERISK);
      break;
    }

    case 17: {
      _localctx = _tracker.createInstance<ColumnExprSubqueryContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(811);
      match(HogQLParser::LPAREN);
      setState(812);
      selectUnionStmt();
      setState(813);
      match(HogQLParser::RPAREN);
      break;
    }

    case 18: {
      _localctx = _tracker.createInstance<ColumnExprParensContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(815);
      match(HogQLParser::LPAREN);
      setState(816);
      columnExpr(0);
      setState(817);
      match(HogQLParser::RPAREN);
      break;
    }

    case 19: {
      _localctx = _tracker.createInstance<ColumnExprTupleContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(819);
      match(HogQLParser::LPAREN);
      setState(820);
      columnExprList();
      setState(821);
      match(HogQLParser::RPAREN);
      break;
    }

    case 20: {
      _localctx = _tracker.createInstance<ColumnExprArrayContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(823);
      match(HogQLParser::LBRACKET);
      setState(825);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -1125900443713538) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & 8076106347046764543) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 128)) & 577) != 0)) {
        setState(824);
        columnExprList();
      }
      setState(827);
      match(HogQLParser::RBRACKET);
      break;
    }

    case 21: {
      _localctx = _tracker.createInstance<ColumnExprDictContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(828);
      match(HogQLParser::LBRACE);
      setState(830);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -1125900443713538) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & 8076106347046764543) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 128)) & 577) != 0)) {
        setState(829);
        kvPairList();
      }
      setState(832);
      match(HogQLParser::RBRACE);
      break;
    }

    case 22: {
      _localctx = _tracker.createInstance<ColumnExprIdentifierContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(833);
      columnIdentifier();
      break;
    }

    default:
      break;
    }
    _ctx->stop = _input->LT(-1);
    setState(928);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 111, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(926);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 110, _ctx)) {
        case 1: {
          auto newContext = _tracker.createInstance<ColumnExprPrecedence1Context>(_tracker.createInstance<ColumnExprContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->left = previousContext;
          pushNewRecursionContext(newContext, startState, RuleColumnExpr);
          setState(836);

          if (!(precpred(_ctx, 18))) throw FailedPredicateException(this, "precpred(_ctx, 18)");
          setState(840);
          _errHandler->sync(this);
          switch (_input->LA(1)) {
            case HogQLParser::ASTERISK: {
              setState(837);
              antlrcpp::downCast<ColumnExprPrecedence1Context *>(_localctx)->operator_ = match(HogQLParser::ASTERISK);
              break;
            }

            case HogQLParser::SLASH: {
              setState(838);
              antlrcpp::downCast<ColumnExprPrecedence1Context *>(_localctx)->operator_ = match(HogQLParser::SLASH);
              break;
            }

            case HogQLParser::PERCENT: {
              setState(839);
              antlrcpp::downCast<ColumnExprPrecedence1Context *>(_localctx)->operator_ = match(HogQLParser::PERCENT);
              break;
            }

          default:
            throw NoViableAltException(this);
          }
          setState(842);
          antlrcpp::downCast<ColumnExprPrecedence1Context *>(_localctx)->right = columnExpr(19);
          break;
        }

        case 2: {
          auto newContext = _tracker.createInstance<ColumnExprPrecedence2Context>(_tracker.createInstance<ColumnExprContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->left = previousContext;
          pushNewRecursionContext(newContext, startState, RuleColumnExpr);
          setState(843);

          if (!(precpred(_ctx, 17))) throw FailedPredicateException(this, "precpred(_ctx, 17)");
          setState(847);
          _errHandler->sync(this);
          switch (_input->LA(1)) {
            case HogQLParser::PLUS: {
              setState(844);
              antlrcpp::downCast<ColumnExprPrecedence2Context *>(_localctx)->operator_ = match(HogQLParser::PLUS);
              break;
            }

            case HogQLParser::DASH: {
              setState(845);
              antlrcpp::downCast<ColumnExprPrecedence2Context *>(_localctx)->operator_ = match(HogQLParser::DASH);
              break;
            }

            case HogQLParser::CONCAT: {
              setState(846);
              antlrcpp::downCast<ColumnExprPrecedence2Context *>(_localctx)->operator_ = match(HogQLParser::CONCAT);
              break;
            }

          default:
            throw NoViableAltException(this);
          }
          setState(849);
          antlrcpp::downCast<ColumnExprPrecedence2Context *>(_localctx)->right = columnExpr(18);
          break;
        }

        case 3: {
          auto newContext = _tracker.createInstance<ColumnExprPrecedence3Context>(_tracker.createInstance<ColumnExprContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->left = previousContext;
          pushNewRecursionContext(newContext, startState, RuleColumnExpr);
          setState(850);

          if (!(precpred(_ctx, 16))) throw FailedPredicateException(this, "precpred(_ctx, 16)");
          setState(875);
          _errHandler->sync(this);
          switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 106, _ctx)) {
          case 1: {
            setState(851);
            antlrcpp::downCast<ColumnExprPrecedence3Context *>(_localctx)->operator_ = match(HogQLParser::EQ_DOUBLE);
            break;
          }

          case 2: {
            setState(852);
            antlrcpp::downCast<ColumnExprPrecedence3Context *>(_localctx)->operator_ = match(HogQLParser::EQ_SINGLE);
            break;
          }

          case 3: {
            setState(853);
            antlrcpp::downCast<ColumnExprPrecedence3Context *>(_localctx)->operator_ = match(HogQLParser::NOT_EQ);
            break;
          }

          case 4: {
            setState(854);
            antlrcpp::downCast<ColumnExprPrecedence3Context *>(_localctx)->operator_ = match(HogQLParser::LT_EQ);
            break;
          }

          case 5: {
            setState(855);
            antlrcpp::downCast<ColumnExprPrecedence3Context *>(_localctx)->operator_ = match(HogQLParser::LT);
            break;
          }

          case 6: {
            setState(856);
            antlrcpp::downCast<ColumnExprPrecedence3Context *>(_localctx)->operator_ = match(HogQLParser::GT_EQ);
            break;
          }

          case 7: {
            setState(857);
            antlrcpp::downCast<ColumnExprPrecedence3Context *>(_localctx)->operator_ = match(HogQLParser::GT);
            break;
          }

          case 8: {
            setState(859);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == HogQLParser::NOT) {
              setState(858);
              antlrcpp::downCast<ColumnExprPrecedence3Context *>(_localctx)->operator_ = match(HogQLParser::NOT);
            }
            setState(861);
            match(HogQLParser::IN);
            setState(863);
            _errHandler->sync(this);

            switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 104, _ctx)) {
            case 1: {
              setState(862);
              match(HogQLParser::COHORT);
              break;
            }

            default:
              break;
            }
            break;
          }

          case 9: {
            setState(866);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == HogQLParser::NOT) {
              setState(865);
              antlrcpp::downCast<ColumnExprPrecedence3Context *>(_localctx)->operator_ = match(HogQLParser::NOT);
            }
            setState(868);
            _la = _input->LA(1);
            if (!(_la == HogQLParser::ILIKE

            || _la == HogQLParser::LIKE)) {
            _errHandler->recoverInline(this);
            }
            else {
              _errHandler->reportMatch(this);
              consume();
            }
            break;
          }

          case 10: {
            setState(869);
            antlrcpp::downCast<ColumnExprPrecedence3Context *>(_localctx)->operator_ = match(HogQLParser::REGEX_SINGLE);
            break;
          }

          case 11: {
            setState(870);
            antlrcpp::downCast<ColumnExprPrecedence3Context *>(_localctx)->operator_ = match(HogQLParser::REGEX_DOUBLE);
            break;
          }

          case 12: {
            setState(871);
            antlrcpp::downCast<ColumnExprPrecedence3Context *>(_localctx)->operator_ = match(HogQLParser::NOT_REGEX);
            break;
          }

          case 13: {
            setState(872);
            antlrcpp::downCast<ColumnExprPrecedence3Context *>(_localctx)->operator_ = match(HogQLParser::IREGEX_SINGLE);
            break;
          }

          case 14: {
            setState(873);
            antlrcpp::downCast<ColumnExprPrecedence3Context *>(_localctx)->operator_ = match(HogQLParser::IREGEX_DOUBLE);
            break;
          }

          case 15: {
            setState(874);
            antlrcpp::downCast<ColumnExprPrecedence3Context *>(_localctx)->operator_ = match(HogQLParser::NOT_IREGEX);
            break;
          }

          default:
            break;
          }
          setState(877);
          antlrcpp::downCast<ColumnExprPrecedence3Context *>(_localctx)->right = columnExpr(17);
          break;
        }

        case 4: {
          auto newContext = _tracker.createInstance<ColumnExprNullishContext>(_tracker.createInstance<ColumnExprContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleColumnExpr);
          setState(878);

          if (!(precpred(_ctx, 14))) throw FailedPredicateException(this, "precpred(_ctx, 14)");
          setState(879);
          match(HogQLParser::NULLISH);
          setState(880);
          columnExpr(15);
          break;
        }

        case 5: {
          auto newContext = _tracker.createInstance<ColumnExprAndContext>(_tracker.createInstance<ColumnExprContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleColumnExpr);
          setState(881);

          if (!(precpred(_ctx, 12))) throw FailedPredicateException(this, "precpred(_ctx, 12)");
          setState(882);
          match(HogQLParser::AND);
          setState(883);
          columnExpr(13);
          break;
        }

        case 6: {
          auto newContext = _tracker.createInstance<ColumnExprOrContext>(_tracker.createInstance<ColumnExprContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleColumnExpr);
          setState(884);

          if (!(precpred(_ctx, 11))) throw FailedPredicateException(this, "precpred(_ctx, 11)");
          setState(885);
          match(HogQLParser::OR);
          setState(886);
          columnExpr(12);
          break;
        }

        case 7: {
          auto newContext = _tracker.createInstance<ColumnExprBetweenContext>(_tracker.createInstance<ColumnExprContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleColumnExpr);
          setState(887);

          if (!(precpred(_ctx, 10))) throw FailedPredicateException(this, "precpred(_ctx, 10)");
          setState(889);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == HogQLParser::NOT) {
            setState(888);
            match(HogQLParser::NOT);
          }
          setState(891);
          match(HogQLParser::BETWEEN);
          setState(892);
          columnExpr(0);
          setState(893);
          match(HogQLParser::AND);
          setState(894);
          columnExpr(11);
          break;
        }

        case 8: {
          auto newContext = _tracker.createInstance<ColumnExprTernaryOpContext>(_tracker.createInstance<ColumnExprContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleColumnExpr);
          setState(896);

          if (!(precpred(_ctx, 9))) throw FailedPredicateException(this, "precpred(_ctx, 9)");
          setState(897);
          match(HogQLParser::QUERY);
          setState(898);
          columnExpr(0);
          setState(899);
          match(HogQLParser::COLON);
          setState(900);
          columnExpr(9);
          break;
        }

        case 9: {
          auto newContext = _tracker.createInstance<ColumnExprArrayAccessContext>(_tracker.createInstance<ColumnExprContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleColumnExpr);
          setState(902);

          if (!(precpred(_ctx, 22))) throw FailedPredicateException(this, "precpred(_ctx, 22)");
          setState(903);
          match(HogQLParser::LBRACKET);
          setState(904);
          columnExpr(0);
          setState(905);
          match(HogQLParser::RBRACKET);
          break;
        }

        case 10: {
          auto newContext = _tracker.createInstance<ColumnExprTupleAccessContext>(_tracker.createInstance<ColumnExprContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleColumnExpr);
          setState(907);

          if (!(precpred(_ctx, 21))) throw FailedPredicateException(this, "precpred(_ctx, 21)");
          setState(908);
          match(HogQLParser::DOT);
          setState(909);
          match(HogQLParser::DECIMAL_LITERAL);
          break;
        }

        case 11: {
          auto newContext = _tracker.createInstance<ColumnExprPropertyAccessContext>(_tracker.createInstance<ColumnExprContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleColumnExpr);
          setState(910);

          if (!(precpred(_ctx, 20))) throw FailedPredicateException(this, "precpred(_ctx, 20)");
          setState(911);
          match(HogQLParser::DOT);
          setState(912);
          identifier();
          break;
        }

        case 12: {
          auto newContext = _tracker.createInstance<ColumnExprIsNullContext>(_tracker.createInstance<ColumnExprContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleColumnExpr);
          setState(913);

          if (!(precpred(_ctx, 15))) throw FailedPredicateException(this, "precpred(_ctx, 15)");
          setState(914);
          match(HogQLParser::IS);
          setState(916);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == HogQLParser::NOT) {
            setState(915);
            match(HogQLParser::NOT);
          }
          setState(918);
          match(HogQLParser::NULL_SQL);
          break;
        }

        case 13: {
          auto newContext = _tracker.createInstance<ColumnExprAliasContext>(_tracker.createInstance<ColumnExprContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleColumnExpr);
          setState(919);

          if (!(precpred(_ctx, 8))) throw FailedPredicateException(this, "precpred(_ctx, 8)");
          setState(924);
          _errHandler->sync(this);
          switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 109, _ctx)) {
          case 1: {
            setState(920);
            match(HogQLParser::AS);
            setState(921);
            identifier();
            break;
          }

          case 2: {
            setState(922);
            match(HogQLParser::AS);
            setState(923);
            match(HogQLParser::STRING_LITERAL);
            break;
          }

          default:
            break;
          }
          break;
        }

        default:
          break;
        } 
      }
      setState(930);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 111, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- ColumnArgListContext ------------------------------------------------------------------

HogQLParser::ColumnArgListContext::ColumnArgListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<HogQLParser::ColumnArgExprContext *> HogQLParser::ColumnArgListContext::columnArgExpr() {
  return getRuleContexts<HogQLParser::ColumnArgExprContext>();
}

HogQLParser::ColumnArgExprContext* HogQLParser::ColumnArgListContext::columnArgExpr(size_t i) {
  return getRuleContext<HogQLParser::ColumnArgExprContext>(i);
}

std::vector<tree::TerminalNode *> HogQLParser::ColumnArgListContext::COMMA() {
  return getTokens(HogQLParser::COMMA);
}

tree::TerminalNode* HogQLParser::ColumnArgListContext::COMMA(size_t i) {
  return getToken(HogQLParser::COMMA, i);
}


size_t HogQLParser::ColumnArgListContext::getRuleIndex() const {
  return HogQLParser::RuleColumnArgList;
}


std::any HogQLParser::ColumnArgListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnArgList(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::ColumnArgListContext* HogQLParser::columnArgList() {
  ColumnArgListContext *_localctx = _tracker.createInstance<ColumnArgListContext>(_ctx, getState());
  enterRule(_localctx, 108, HogQLParser::RuleColumnArgList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(931);
    columnArgExpr();
    setState(936);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == HogQLParser::COMMA) {
      setState(932);
      match(HogQLParser::COMMA);
      setState(933);
      columnArgExpr();
      setState(938);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ColumnArgExprContext ------------------------------------------------------------------

HogQLParser::ColumnArgExprContext::ColumnArgExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HogQLParser::ColumnLambdaExprContext* HogQLParser::ColumnArgExprContext::columnLambdaExpr() {
  return getRuleContext<HogQLParser::ColumnLambdaExprContext>(0);
}

HogQLParser::ColumnExprContext* HogQLParser::ColumnArgExprContext::columnExpr() {
  return getRuleContext<HogQLParser::ColumnExprContext>(0);
}


size_t HogQLParser::ColumnArgExprContext::getRuleIndex() const {
  return HogQLParser::RuleColumnArgExpr;
}


std::any HogQLParser::ColumnArgExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnArgExpr(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::ColumnArgExprContext* HogQLParser::columnArgExpr() {
  ColumnArgExprContext *_localctx = _tracker.createInstance<ColumnArgExprContext>(_ctx, getState());
  enterRule(_localctx, 110, HogQLParser::RuleColumnArgExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(941);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 113, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(939);
      columnLambdaExpr();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(940);
      columnExpr(0);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ColumnLambdaExprContext ------------------------------------------------------------------

HogQLParser::ColumnLambdaExprContext::ColumnLambdaExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::ColumnLambdaExprContext::ARROW() {
  return getToken(HogQLParser::ARROW, 0);
}

HogQLParser::ColumnExprContext* HogQLParser::ColumnLambdaExprContext::columnExpr() {
  return getRuleContext<HogQLParser::ColumnExprContext>(0);
}

tree::TerminalNode* HogQLParser::ColumnLambdaExprContext::LPAREN() {
  return getToken(HogQLParser::LPAREN, 0);
}

std::vector<HogQLParser::IdentifierContext *> HogQLParser::ColumnLambdaExprContext::identifier() {
  return getRuleContexts<HogQLParser::IdentifierContext>();
}

HogQLParser::IdentifierContext* HogQLParser::ColumnLambdaExprContext::identifier(size_t i) {
  return getRuleContext<HogQLParser::IdentifierContext>(i);
}

tree::TerminalNode* HogQLParser::ColumnLambdaExprContext::RPAREN() {
  return getToken(HogQLParser::RPAREN, 0);
}

std::vector<tree::TerminalNode *> HogQLParser::ColumnLambdaExprContext::COMMA() {
  return getTokens(HogQLParser::COMMA);
}

tree::TerminalNode* HogQLParser::ColumnLambdaExprContext::COMMA(size_t i) {
  return getToken(HogQLParser::COMMA, i);
}


size_t HogQLParser::ColumnLambdaExprContext::getRuleIndex() const {
  return HogQLParser::RuleColumnLambdaExpr;
}


std::any HogQLParser::ColumnLambdaExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnLambdaExpr(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::ColumnLambdaExprContext* HogQLParser::columnLambdaExpr() {
  ColumnLambdaExprContext *_localctx = _tracker.createInstance<ColumnLambdaExprContext>(_ctx, getState());
  enterRule(_localctx, 112, HogQLParser::RuleColumnLambdaExpr);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(962);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case HogQLParser::LPAREN: {
        setState(943);
        match(HogQLParser::LPAREN);
        setState(944);
        identifier();
        setState(949);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == HogQLParser::COMMA) {
          setState(945);
          match(HogQLParser::COMMA);
          setState(946);
          identifier();
          setState(951);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(952);
        match(HogQLParser::RPAREN);
        break;
      }

      case HogQLParser::ALL:
      case HogQLParser::AND:
      case HogQLParser::ANTI:
      case HogQLParser::ANY:
      case HogQLParser::ARRAY:
      case HogQLParser::AS:
      case HogQLParser::ASCENDING:
      case HogQLParser::ASOF:
      case HogQLParser::BETWEEN:
      case HogQLParser::BOTH:
      case HogQLParser::BY:
      case HogQLParser::CASE:
      case HogQLParser::CAST:
      case HogQLParser::COHORT:
      case HogQLParser::COLLATE:
      case HogQLParser::CROSS:
      case HogQLParser::CUBE:
      case HogQLParser::CURRENT:
      case HogQLParser::DATE:
      case HogQLParser::DAY:
      case HogQLParser::DESC:
      case HogQLParser::DESCENDING:
      case HogQLParser::DISTINCT:
      case HogQLParser::ELSE:
      case HogQLParser::END:
      case HogQLParser::EXTRACT:
      case HogQLParser::FINAL:
      case HogQLParser::FIRST:
      case HogQLParser::FOLLOWING:
      case HogQLParser::FOR:
      case HogQLParser::FROM:
      case HogQLParser::FULL:
      case HogQLParser::GROUP:
      case HogQLParser::HAVING:
      case HogQLParser::HOUR:
      case HogQLParser::ID:
      case HogQLParser::IF:
      case HogQLParser::ILIKE:
      case HogQLParser::IN:
      case HogQLParser::INNER:
      case HogQLParser::INTERVAL:
      case HogQLParser::IS:
      case HogQLParser::JOIN:
      case HogQLParser::KEY:
      case HogQLParser::LAST:
      case HogQLParser::LEADING:
      case HogQLParser::LEFT:
      case HogQLParser::LIKE:
      case HogQLParser::LIMIT:
      case HogQLParser::MINUTE:
      case HogQLParser::MONTH:
      case HogQLParser::NOT:
      case HogQLParser::NULLS:
      case HogQLParser::OFFSET:
      case HogQLParser::ON:
      case HogQLParser::OR:
      case HogQLParser::ORDER:
      case HogQLParser::OUTER:
      case HogQLParser::OVER:
      case HogQLParser::PARTITION:
      case HogQLParser::PRECEDING:
      case HogQLParser::PREWHERE:
      case HogQLParser::QUARTER:
      case HogQLParser::RANGE:
      case HogQLParser::RETURN:
      case HogQLParser::RIGHT:
      case HogQLParser::ROLLUP:
      case HogQLParser::ROW:
      case HogQLParser::ROWS:
      case HogQLParser::SAMPLE:
      case HogQLParser::SECOND:
      case HogQLParser::SELECT:
      case HogQLParser::SEMI:
      case HogQLParser::SETTINGS:
      case HogQLParser::SUBSTRING:
      case HogQLParser::THEN:
      case HogQLParser::TIES:
      case HogQLParser::TIMESTAMP:
      case HogQLParser::TO:
      case HogQLParser::TOP:
      case HogQLParser::TOTALS:
      case HogQLParser::TRAILING:
      case HogQLParser::TRIM:
      case HogQLParser::TRUNCATE:
      case HogQLParser::UNBOUNDED:
      case HogQLParser::UNION:
      case HogQLParser::USING:
      case HogQLParser::WEEK:
      case HogQLParser::WHEN:
      case HogQLParser::WHERE:
      case HogQLParser::WINDOW:
      case HogQLParser::WITH:
      case HogQLParser::YEAR:
      case HogQLParser::IDENTIFIER: {
        setState(954);
        identifier();
        setState(959);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == HogQLParser::COMMA) {
          setState(955);
          match(HogQLParser::COMMA);
          setState(956);
          identifier();
          setState(961);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(964);
    match(HogQLParser::ARROW);
    setState(965);
    columnExpr(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- HogqlxTagElementContext ------------------------------------------------------------------

HogQLParser::HogqlxTagElementContext::HogqlxTagElementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t HogQLParser::HogqlxTagElementContext::getRuleIndex() const {
  return HogQLParser::RuleHogqlxTagElement;
}

void HogQLParser::HogqlxTagElementContext::copyFrom(HogqlxTagElementContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- HogqlxTagElementClosedContext ------------------------------------------------------------------

tree::TerminalNode* HogQLParser::HogqlxTagElementClosedContext::LT() {
  return getToken(HogQLParser::LT, 0);
}

HogQLParser::IdentifierContext* HogQLParser::HogqlxTagElementClosedContext::identifier() {
  return getRuleContext<HogQLParser::IdentifierContext>(0);
}

tree::TerminalNode* HogQLParser::HogqlxTagElementClosedContext::SLASH() {
  return getToken(HogQLParser::SLASH, 0);
}

tree::TerminalNode* HogQLParser::HogqlxTagElementClosedContext::GT() {
  return getToken(HogQLParser::GT, 0);
}

std::vector<HogQLParser::HogqlxTagAttributeContext *> HogQLParser::HogqlxTagElementClosedContext::hogqlxTagAttribute() {
  return getRuleContexts<HogQLParser::HogqlxTagAttributeContext>();
}

HogQLParser::HogqlxTagAttributeContext* HogQLParser::HogqlxTagElementClosedContext::hogqlxTagAttribute(size_t i) {
  return getRuleContext<HogQLParser::HogqlxTagAttributeContext>(i);
}

HogQLParser::HogqlxTagElementClosedContext::HogqlxTagElementClosedContext(HogqlxTagElementContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::HogqlxTagElementClosedContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitHogqlxTagElementClosed(this);
  else
    return visitor->visitChildren(this);
}
//----------------- HogqlxTagElementNestedContext ------------------------------------------------------------------

std::vector<tree::TerminalNode *> HogQLParser::HogqlxTagElementNestedContext::LT() {
  return getTokens(HogQLParser::LT);
}

tree::TerminalNode* HogQLParser::HogqlxTagElementNestedContext::LT(size_t i) {
  return getToken(HogQLParser::LT, i);
}

std::vector<HogQLParser::IdentifierContext *> HogQLParser::HogqlxTagElementNestedContext::identifier() {
  return getRuleContexts<HogQLParser::IdentifierContext>();
}

HogQLParser::IdentifierContext* HogQLParser::HogqlxTagElementNestedContext::identifier(size_t i) {
  return getRuleContext<HogQLParser::IdentifierContext>(i);
}

std::vector<tree::TerminalNode *> HogQLParser::HogqlxTagElementNestedContext::GT() {
  return getTokens(HogQLParser::GT);
}

tree::TerminalNode* HogQLParser::HogqlxTagElementNestedContext::GT(size_t i) {
  return getToken(HogQLParser::GT, i);
}

tree::TerminalNode* HogQLParser::HogqlxTagElementNestedContext::SLASH() {
  return getToken(HogQLParser::SLASH, 0);
}

std::vector<HogQLParser::HogqlxTagAttributeContext *> HogQLParser::HogqlxTagElementNestedContext::hogqlxTagAttribute() {
  return getRuleContexts<HogQLParser::HogqlxTagAttributeContext>();
}

HogQLParser::HogqlxTagAttributeContext* HogQLParser::HogqlxTagElementNestedContext::hogqlxTagAttribute(size_t i) {
  return getRuleContext<HogQLParser::HogqlxTagAttributeContext>(i);
}

HogQLParser::HogqlxTagElementContext* HogQLParser::HogqlxTagElementNestedContext::hogqlxTagElement() {
  return getRuleContext<HogQLParser::HogqlxTagElementContext>(0);
}

HogQLParser::HogqlxTagElementNestedContext::HogqlxTagElementNestedContext(HogqlxTagElementContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::HogqlxTagElementNestedContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitHogqlxTagElementNested(this);
  else
    return visitor->visitChildren(this);
}
HogQLParser::HogqlxTagElementContext* HogQLParser::hogqlxTagElement() {
  HogqlxTagElementContext *_localctx = _tracker.createInstance<HogqlxTagElementContext>(_ctx, getState());
  enterRule(_localctx, 114, HogQLParser::RuleHogqlxTagElement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(995);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 120, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<HogQLParser::HogqlxTagElementClosedContext>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(967);
      match(HogQLParser::LT);
      setState(968);
      identifier();
      setState(972);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -181272084561788930) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & 201863462911) != 0)) {
        setState(969);
        hogqlxTagAttribute();
        setState(974);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(975);
      match(HogQLParser::SLASH);
      setState(976);
      match(HogQLParser::GT);
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<HogQLParser::HogqlxTagElementNestedContext>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(978);
      match(HogQLParser::LT);
      setState(979);
      identifier();
      setState(983);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -181272084561788930) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & 201863462911) != 0)) {
        setState(980);
        hogqlxTagAttribute();
        setState(985);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(986);
      match(HogQLParser::GT);
      setState(988);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 119, _ctx)) {
      case 1: {
        setState(987);
        hogqlxTagElement();
        break;
      }

      default:
        break;
      }
      setState(990);
      match(HogQLParser::LT);
      setState(991);
      match(HogQLParser::SLASH);
      setState(992);
      identifier();
      setState(993);
      match(HogQLParser::GT);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- HogqlxTagAttributeContext ------------------------------------------------------------------

HogQLParser::HogqlxTagAttributeContext::HogqlxTagAttributeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HogQLParser::IdentifierContext* HogQLParser::HogqlxTagAttributeContext::identifier() {
  return getRuleContext<HogQLParser::IdentifierContext>(0);
}

tree::TerminalNode* HogQLParser::HogqlxTagAttributeContext::EQ_SINGLE() {
  return getToken(HogQLParser::EQ_SINGLE, 0);
}

HogQLParser::StringContext* HogQLParser::HogqlxTagAttributeContext::string() {
  return getRuleContext<HogQLParser::StringContext>(0);
}

tree::TerminalNode* HogQLParser::HogqlxTagAttributeContext::LBRACE() {
  return getToken(HogQLParser::LBRACE, 0);
}

HogQLParser::ColumnExprContext* HogQLParser::HogqlxTagAttributeContext::columnExpr() {
  return getRuleContext<HogQLParser::ColumnExprContext>(0);
}

tree::TerminalNode* HogQLParser::HogqlxTagAttributeContext::RBRACE() {
  return getToken(HogQLParser::RBRACE, 0);
}


size_t HogQLParser::HogqlxTagAttributeContext::getRuleIndex() const {
  return HogQLParser::RuleHogqlxTagAttribute;
}


std::any HogQLParser::HogqlxTagAttributeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitHogqlxTagAttribute(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::HogqlxTagAttributeContext* HogQLParser::hogqlxTagAttribute() {
  HogqlxTagAttributeContext *_localctx = _tracker.createInstance<HogqlxTagAttributeContext>(_ctx, getState());
  enterRule(_localctx, 116, HogQLParser::RuleHogqlxTagAttribute);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1008);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 121, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(997);
      identifier();
      setState(998);
      match(HogQLParser::EQ_SINGLE);
      setState(999);
      string();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1001);
      identifier();
      setState(1002);
      match(HogQLParser::EQ_SINGLE);
      setState(1003);
      match(HogQLParser::LBRACE);
      setState(1004);
      columnExpr(0);
      setState(1005);
      match(HogQLParser::RBRACE);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1007);
      identifier();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WithExprListContext ------------------------------------------------------------------

HogQLParser::WithExprListContext::WithExprListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<HogQLParser::WithExprContext *> HogQLParser::WithExprListContext::withExpr() {
  return getRuleContexts<HogQLParser::WithExprContext>();
}

HogQLParser::WithExprContext* HogQLParser::WithExprListContext::withExpr(size_t i) {
  return getRuleContext<HogQLParser::WithExprContext>(i);
}

std::vector<tree::TerminalNode *> HogQLParser::WithExprListContext::COMMA() {
  return getTokens(HogQLParser::COMMA);
}

tree::TerminalNode* HogQLParser::WithExprListContext::COMMA(size_t i) {
  return getToken(HogQLParser::COMMA, i);
}


size_t HogQLParser::WithExprListContext::getRuleIndex() const {
  return HogQLParser::RuleWithExprList;
}


std::any HogQLParser::WithExprListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitWithExprList(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::WithExprListContext* HogQLParser::withExprList() {
  WithExprListContext *_localctx = _tracker.createInstance<WithExprListContext>(_ctx, getState());
  enterRule(_localctx, 118, HogQLParser::RuleWithExprList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1010);
    withExpr();
    setState(1015);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == HogQLParser::COMMA) {
      setState(1011);
      match(HogQLParser::COMMA);
      setState(1012);
      withExpr();
      setState(1017);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WithExprContext ------------------------------------------------------------------

HogQLParser::WithExprContext::WithExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t HogQLParser::WithExprContext::getRuleIndex() const {
  return HogQLParser::RuleWithExpr;
}

void HogQLParser::WithExprContext::copyFrom(WithExprContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- WithExprColumnContext ------------------------------------------------------------------

HogQLParser::ColumnExprContext* HogQLParser::WithExprColumnContext::columnExpr() {
  return getRuleContext<HogQLParser::ColumnExprContext>(0);
}

tree::TerminalNode* HogQLParser::WithExprColumnContext::AS() {
  return getToken(HogQLParser::AS, 0);
}

HogQLParser::IdentifierContext* HogQLParser::WithExprColumnContext::identifier() {
  return getRuleContext<HogQLParser::IdentifierContext>(0);
}

HogQLParser::WithExprColumnContext::WithExprColumnContext(WithExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::WithExprColumnContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitWithExprColumn(this);
  else
    return visitor->visitChildren(this);
}
//----------------- WithExprSubqueryContext ------------------------------------------------------------------

HogQLParser::IdentifierContext* HogQLParser::WithExprSubqueryContext::identifier() {
  return getRuleContext<HogQLParser::IdentifierContext>(0);
}

tree::TerminalNode* HogQLParser::WithExprSubqueryContext::AS() {
  return getToken(HogQLParser::AS, 0);
}

tree::TerminalNode* HogQLParser::WithExprSubqueryContext::LPAREN() {
  return getToken(HogQLParser::LPAREN, 0);
}

HogQLParser::SelectUnionStmtContext* HogQLParser::WithExprSubqueryContext::selectUnionStmt() {
  return getRuleContext<HogQLParser::SelectUnionStmtContext>(0);
}

tree::TerminalNode* HogQLParser::WithExprSubqueryContext::RPAREN() {
  return getToken(HogQLParser::RPAREN, 0);
}

HogQLParser::WithExprSubqueryContext::WithExprSubqueryContext(WithExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::WithExprSubqueryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitWithExprSubquery(this);
  else
    return visitor->visitChildren(this);
}
HogQLParser::WithExprContext* HogQLParser::withExpr() {
  WithExprContext *_localctx = _tracker.createInstance<WithExprContext>(_ctx, getState());
  enterRule(_localctx, 120, HogQLParser::RuleWithExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1028);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 123, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<HogQLParser::WithExprSubqueryContext>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(1018);
      identifier();
      setState(1019);
      match(HogQLParser::AS);
      setState(1020);
      match(HogQLParser::LPAREN);
      setState(1021);
      selectUnionStmt();
      setState(1022);
      match(HogQLParser::RPAREN);
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<HogQLParser::WithExprColumnContext>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(1024);
      columnExpr(0);
      setState(1025);
      match(HogQLParser::AS);
      setState(1026);
      identifier();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ColumnIdentifierContext ------------------------------------------------------------------

HogQLParser::ColumnIdentifierContext::ColumnIdentifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HogQLParser::PlaceholderContext* HogQLParser::ColumnIdentifierContext::placeholder() {
  return getRuleContext<HogQLParser::PlaceholderContext>(0);
}

HogQLParser::NestedIdentifierContext* HogQLParser::ColumnIdentifierContext::nestedIdentifier() {
  return getRuleContext<HogQLParser::NestedIdentifierContext>(0);
}

HogQLParser::TableIdentifierContext* HogQLParser::ColumnIdentifierContext::tableIdentifier() {
  return getRuleContext<HogQLParser::TableIdentifierContext>(0);
}

tree::TerminalNode* HogQLParser::ColumnIdentifierContext::DOT() {
  return getToken(HogQLParser::DOT, 0);
}


size_t HogQLParser::ColumnIdentifierContext::getRuleIndex() const {
  return HogQLParser::RuleColumnIdentifier;
}


std::any HogQLParser::ColumnIdentifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnIdentifier(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::ColumnIdentifierContext* HogQLParser::columnIdentifier() {
  ColumnIdentifierContext *_localctx = _tracker.createInstance<ColumnIdentifierContext>(_ctx, getState());
  enterRule(_localctx, 122, HogQLParser::RuleColumnIdentifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1037);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case HogQLParser::LBRACE: {
        enterOuterAlt(_localctx, 1);
        setState(1030);
        placeholder();
        break;
      }

      case HogQLParser::ALL:
      case HogQLParser::AND:
      case HogQLParser::ANTI:
      case HogQLParser::ANY:
      case HogQLParser::ARRAY:
      case HogQLParser::AS:
      case HogQLParser::ASCENDING:
      case HogQLParser::ASOF:
      case HogQLParser::BETWEEN:
      case HogQLParser::BOTH:
      case HogQLParser::BY:
      case HogQLParser::CASE:
      case HogQLParser::CAST:
      case HogQLParser::COHORT:
      case HogQLParser::COLLATE:
      case HogQLParser::CROSS:
      case HogQLParser::CUBE:
      case HogQLParser::CURRENT:
      case HogQLParser::DATE:
      case HogQLParser::DAY:
      case HogQLParser::DESC:
      case HogQLParser::DESCENDING:
      case HogQLParser::DISTINCT:
      case HogQLParser::ELSE:
      case HogQLParser::END:
      case HogQLParser::EXTRACT:
      case HogQLParser::FINAL:
      case HogQLParser::FIRST:
      case HogQLParser::FOLLOWING:
      case HogQLParser::FOR:
      case HogQLParser::FROM:
      case HogQLParser::FULL:
      case HogQLParser::GROUP:
      case HogQLParser::HAVING:
      case HogQLParser::HOUR:
      case HogQLParser::ID:
      case HogQLParser::IF:
      case HogQLParser::ILIKE:
      case HogQLParser::IN:
      case HogQLParser::INNER:
      case HogQLParser::INTERVAL:
      case HogQLParser::IS:
      case HogQLParser::JOIN:
      case HogQLParser::KEY:
      case HogQLParser::LAST:
      case HogQLParser::LEADING:
      case HogQLParser::LEFT:
      case HogQLParser::LIKE:
      case HogQLParser::LIMIT:
      case HogQLParser::MINUTE:
      case HogQLParser::MONTH:
      case HogQLParser::NOT:
      case HogQLParser::NULLS:
      case HogQLParser::OFFSET:
      case HogQLParser::ON:
      case HogQLParser::OR:
      case HogQLParser::ORDER:
      case HogQLParser::OUTER:
      case HogQLParser::OVER:
      case HogQLParser::PARTITION:
      case HogQLParser::PRECEDING:
      case HogQLParser::PREWHERE:
      case HogQLParser::QUARTER:
      case HogQLParser::RANGE:
      case HogQLParser::RETURN:
      case HogQLParser::RIGHT:
      case HogQLParser::ROLLUP:
      case HogQLParser::ROW:
      case HogQLParser::ROWS:
      case HogQLParser::SAMPLE:
      case HogQLParser::SECOND:
      case HogQLParser::SELECT:
      case HogQLParser::SEMI:
      case HogQLParser::SETTINGS:
      case HogQLParser::SUBSTRING:
      case HogQLParser::THEN:
      case HogQLParser::TIES:
      case HogQLParser::TIMESTAMP:
      case HogQLParser::TO:
      case HogQLParser::TOP:
      case HogQLParser::TOTALS:
      case HogQLParser::TRAILING:
      case HogQLParser::TRIM:
      case HogQLParser::TRUNCATE:
      case HogQLParser::UNBOUNDED:
      case HogQLParser::UNION:
      case HogQLParser::USING:
      case HogQLParser::WEEK:
      case HogQLParser::WHEN:
      case HogQLParser::WHERE:
      case HogQLParser::WINDOW:
      case HogQLParser::WITH:
      case HogQLParser::YEAR:
      case HogQLParser::IDENTIFIER: {
        enterOuterAlt(_localctx, 2);
        setState(1034);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 124, _ctx)) {
        case 1: {
          setState(1031);
          tableIdentifier();
          setState(1032);
          match(HogQLParser::DOT);
          break;
        }

        default:
          break;
        }
        setState(1036);
        nestedIdentifier();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NestedIdentifierContext ------------------------------------------------------------------

HogQLParser::NestedIdentifierContext::NestedIdentifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<HogQLParser::IdentifierContext *> HogQLParser::NestedIdentifierContext::identifier() {
  return getRuleContexts<HogQLParser::IdentifierContext>();
}

HogQLParser::IdentifierContext* HogQLParser::NestedIdentifierContext::identifier(size_t i) {
  return getRuleContext<HogQLParser::IdentifierContext>(i);
}

std::vector<tree::TerminalNode *> HogQLParser::NestedIdentifierContext::DOT() {
  return getTokens(HogQLParser::DOT);
}

tree::TerminalNode* HogQLParser::NestedIdentifierContext::DOT(size_t i) {
  return getToken(HogQLParser::DOT, i);
}


size_t HogQLParser::NestedIdentifierContext::getRuleIndex() const {
  return HogQLParser::RuleNestedIdentifier;
}


std::any HogQLParser::NestedIdentifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitNestedIdentifier(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::NestedIdentifierContext* HogQLParser::nestedIdentifier() {
  NestedIdentifierContext *_localctx = _tracker.createInstance<NestedIdentifierContext>(_ctx, getState());
  enterRule(_localctx, 124, HogQLParser::RuleNestedIdentifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1039);
    identifier();
    setState(1044);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 126, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1040);
        match(HogQLParser::DOT);
        setState(1041);
        identifier(); 
      }
      setState(1046);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 126, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TableExprContext ------------------------------------------------------------------

HogQLParser::TableExprContext::TableExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t HogQLParser::TableExprContext::getRuleIndex() const {
  return HogQLParser::RuleTableExpr;
}

void HogQLParser::TableExprContext::copyFrom(TableExprContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- TableExprTagContext ------------------------------------------------------------------

HogQLParser::HogqlxTagElementContext* HogQLParser::TableExprTagContext::hogqlxTagElement() {
  return getRuleContext<HogQLParser::HogqlxTagElementContext>(0);
}

HogQLParser::TableExprTagContext::TableExprTagContext(TableExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::TableExprTagContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitTableExprTag(this);
  else
    return visitor->visitChildren(this);
}
//----------------- TableExprIdentifierContext ------------------------------------------------------------------

HogQLParser::TableIdentifierContext* HogQLParser::TableExprIdentifierContext::tableIdentifier() {
  return getRuleContext<HogQLParser::TableIdentifierContext>(0);
}

HogQLParser::TableExprIdentifierContext::TableExprIdentifierContext(TableExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::TableExprIdentifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitTableExprIdentifier(this);
  else
    return visitor->visitChildren(this);
}
//----------------- TableExprPlaceholderContext ------------------------------------------------------------------

HogQLParser::PlaceholderContext* HogQLParser::TableExprPlaceholderContext::placeholder() {
  return getRuleContext<HogQLParser::PlaceholderContext>(0);
}

HogQLParser::TableExprPlaceholderContext::TableExprPlaceholderContext(TableExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::TableExprPlaceholderContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitTableExprPlaceholder(this);
  else
    return visitor->visitChildren(this);
}
//----------------- TableExprSubqueryContext ------------------------------------------------------------------

tree::TerminalNode* HogQLParser::TableExprSubqueryContext::LPAREN() {
  return getToken(HogQLParser::LPAREN, 0);
}

HogQLParser::SelectUnionStmtContext* HogQLParser::TableExprSubqueryContext::selectUnionStmt() {
  return getRuleContext<HogQLParser::SelectUnionStmtContext>(0);
}

tree::TerminalNode* HogQLParser::TableExprSubqueryContext::RPAREN() {
  return getToken(HogQLParser::RPAREN, 0);
}

HogQLParser::TableExprSubqueryContext::TableExprSubqueryContext(TableExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::TableExprSubqueryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitTableExprSubquery(this);
  else
    return visitor->visitChildren(this);
}
//----------------- TableExprAliasContext ------------------------------------------------------------------

HogQLParser::TableExprContext* HogQLParser::TableExprAliasContext::tableExpr() {
  return getRuleContext<HogQLParser::TableExprContext>(0);
}

HogQLParser::AliasContext* HogQLParser::TableExprAliasContext::alias() {
  return getRuleContext<HogQLParser::AliasContext>(0);
}

tree::TerminalNode* HogQLParser::TableExprAliasContext::AS() {
  return getToken(HogQLParser::AS, 0);
}

HogQLParser::IdentifierContext* HogQLParser::TableExprAliasContext::identifier() {
  return getRuleContext<HogQLParser::IdentifierContext>(0);
}

HogQLParser::TableExprAliasContext::TableExprAliasContext(TableExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::TableExprAliasContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitTableExprAlias(this);
  else
    return visitor->visitChildren(this);
}
//----------------- TableExprFunctionContext ------------------------------------------------------------------

HogQLParser::TableFunctionExprContext* HogQLParser::TableExprFunctionContext::tableFunctionExpr() {
  return getRuleContext<HogQLParser::TableFunctionExprContext>(0);
}

HogQLParser::TableExprFunctionContext::TableExprFunctionContext(TableExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::TableExprFunctionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitTableExprFunction(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::TableExprContext* HogQLParser::tableExpr() {
   return tableExpr(0);
}

HogQLParser::TableExprContext* HogQLParser::tableExpr(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  HogQLParser::TableExprContext *_localctx = _tracker.createInstance<TableExprContext>(_ctx, parentState);
  HogQLParser::TableExprContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 126;
  enterRecursionRule(_localctx, 126, HogQLParser::RuleTableExpr, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1056);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 127, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<TableExprIdentifierContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;

      setState(1048);
      tableIdentifier();
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<TableExprFunctionContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(1049);
      tableFunctionExpr();
      break;
    }

    case 3: {
      _localctx = _tracker.createInstance<TableExprSubqueryContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(1050);
      match(HogQLParser::LPAREN);
      setState(1051);
      selectUnionStmt();
      setState(1052);
      match(HogQLParser::RPAREN);
      break;
    }

    case 4: {
      _localctx = _tracker.createInstance<TableExprTagContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(1054);
      hogqlxTagElement();
      break;
    }

    case 5: {
      _localctx = _tracker.createInstance<TableExprPlaceholderContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(1055);
      placeholder();
      break;
    }

    default:
      break;
    }
    _ctx->stop = _input->LT(-1);
    setState(1066);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 129, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        auto newContext = _tracker.createInstance<TableExprAliasContext>(_tracker.createInstance<TableExprContext>(parentContext, parentState));
        _localctx = newContext;
        pushNewRecursionContext(newContext, startState, RuleTableExpr);
        setState(1058);

        if (!(precpred(_ctx, 3))) throw FailedPredicateException(this, "precpred(_ctx, 3)");
        setState(1062);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case HogQLParser::DATE:
          case HogQLParser::FIRST:
          case HogQLParser::ID:
          case HogQLParser::KEY:
          case HogQLParser::IDENTIFIER: {
            setState(1059);
            alias();
            break;
          }

          case HogQLParser::AS: {
            setState(1060);
            match(HogQLParser::AS);
            setState(1061);
            identifier();
            break;
          }

        default:
          throw NoViableAltException(this);
        } 
      }
      setState(1068);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 129, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- TableFunctionExprContext ------------------------------------------------------------------

HogQLParser::TableFunctionExprContext::TableFunctionExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HogQLParser::IdentifierContext* HogQLParser::TableFunctionExprContext::identifier() {
  return getRuleContext<HogQLParser::IdentifierContext>(0);
}

tree::TerminalNode* HogQLParser::TableFunctionExprContext::LPAREN() {
  return getToken(HogQLParser::LPAREN, 0);
}

tree::TerminalNode* HogQLParser::TableFunctionExprContext::RPAREN() {
  return getToken(HogQLParser::RPAREN, 0);
}

HogQLParser::TableArgListContext* HogQLParser::TableFunctionExprContext::tableArgList() {
  return getRuleContext<HogQLParser::TableArgListContext>(0);
}


size_t HogQLParser::TableFunctionExprContext::getRuleIndex() const {
  return HogQLParser::RuleTableFunctionExpr;
}


std::any HogQLParser::TableFunctionExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitTableFunctionExpr(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::TableFunctionExprContext* HogQLParser::tableFunctionExpr() {
  TableFunctionExprContext *_localctx = _tracker.createInstance<TableFunctionExprContext>(_ctx, getState());
  enterRule(_localctx, 128, HogQLParser::RuleTableFunctionExpr);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1069);
    identifier();
    setState(1070);
    match(HogQLParser::LPAREN);
    setState(1072);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -1125900443713538) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & 8076106347046764543) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 128)) & 577) != 0)) {
      setState(1071);
      tableArgList();
    }
    setState(1074);
    match(HogQLParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TableIdentifierContext ------------------------------------------------------------------

HogQLParser::TableIdentifierContext::TableIdentifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HogQLParser::IdentifierContext* HogQLParser::TableIdentifierContext::identifier() {
  return getRuleContext<HogQLParser::IdentifierContext>(0);
}

HogQLParser::DatabaseIdentifierContext* HogQLParser::TableIdentifierContext::databaseIdentifier() {
  return getRuleContext<HogQLParser::DatabaseIdentifierContext>(0);
}

tree::TerminalNode* HogQLParser::TableIdentifierContext::DOT() {
  return getToken(HogQLParser::DOT, 0);
}


size_t HogQLParser::TableIdentifierContext::getRuleIndex() const {
  return HogQLParser::RuleTableIdentifier;
}


std::any HogQLParser::TableIdentifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitTableIdentifier(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::TableIdentifierContext* HogQLParser::tableIdentifier() {
  TableIdentifierContext *_localctx = _tracker.createInstance<TableIdentifierContext>(_ctx, getState());
  enterRule(_localctx, 130, HogQLParser::RuleTableIdentifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1079);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 131, _ctx)) {
    case 1: {
      setState(1076);
      databaseIdentifier();
      setState(1077);
      match(HogQLParser::DOT);
      break;
    }

    default:
      break;
    }
    setState(1081);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TableArgListContext ------------------------------------------------------------------

HogQLParser::TableArgListContext::TableArgListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<HogQLParser::ColumnExprContext *> HogQLParser::TableArgListContext::columnExpr() {
  return getRuleContexts<HogQLParser::ColumnExprContext>();
}

HogQLParser::ColumnExprContext* HogQLParser::TableArgListContext::columnExpr(size_t i) {
  return getRuleContext<HogQLParser::ColumnExprContext>(i);
}

std::vector<tree::TerminalNode *> HogQLParser::TableArgListContext::COMMA() {
  return getTokens(HogQLParser::COMMA);
}

tree::TerminalNode* HogQLParser::TableArgListContext::COMMA(size_t i) {
  return getToken(HogQLParser::COMMA, i);
}


size_t HogQLParser::TableArgListContext::getRuleIndex() const {
  return HogQLParser::RuleTableArgList;
}


std::any HogQLParser::TableArgListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitTableArgList(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::TableArgListContext* HogQLParser::tableArgList() {
  TableArgListContext *_localctx = _tracker.createInstance<TableArgListContext>(_ctx, getState());
  enterRule(_localctx, 132, HogQLParser::RuleTableArgList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1083);
    columnExpr(0);
    setState(1088);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == HogQLParser::COMMA) {
      setState(1084);
      match(HogQLParser::COMMA);
      setState(1085);
      columnExpr(0);
      setState(1090);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DatabaseIdentifierContext ------------------------------------------------------------------

HogQLParser::DatabaseIdentifierContext::DatabaseIdentifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HogQLParser::IdentifierContext* HogQLParser::DatabaseIdentifierContext::identifier() {
  return getRuleContext<HogQLParser::IdentifierContext>(0);
}


size_t HogQLParser::DatabaseIdentifierContext::getRuleIndex() const {
  return HogQLParser::RuleDatabaseIdentifier;
}


std::any HogQLParser::DatabaseIdentifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitDatabaseIdentifier(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::DatabaseIdentifierContext* HogQLParser::databaseIdentifier() {
  DatabaseIdentifierContext *_localctx = _tracker.createInstance<DatabaseIdentifierContext>(_ctx, getState());
  enterRule(_localctx, 134, HogQLParser::RuleDatabaseIdentifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1091);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FloatingLiteralContext ------------------------------------------------------------------

HogQLParser::FloatingLiteralContext::FloatingLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::FloatingLiteralContext::FLOATING_LITERAL() {
  return getToken(HogQLParser::FLOATING_LITERAL, 0);
}

tree::TerminalNode* HogQLParser::FloatingLiteralContext::DOT() {
  return getToken(HogQLParser::DOT, 0);
}

std::vector<tree::TerminalNode *> HogQLParser::FloatingLiteralContext::DECIMAL_LITERAL() {
  return getTokens(HogQLParser::DECIMAL_LITERAL);
}

tree::TerminalNode* HogQLParser::FloatingLiteralContext::DECIMAL_LITERAL(size_t i) {
  return getToken(HogQLParser::DECIMAL_LITERAL, i);
}

tree::TerminalNode* HogQLParser::FloatingLiteralContext::OCTAL_LITERAL() {
  return getToken(HogQLParser::OCTAL_LITERAL, 0);
}


size_t HogQLParser::FloatingLiteralContext::getRuleIndex() const {
  return HogQLParser::RuleFloatingLiteral;
}


std::any HogQLParser::FloatingLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitFloatingLiteral(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::FloatingLiteralContext* HogQLParser::floatingLiteral() {
  FloatingLiteralContext *_localctx = _tracker.createInstance<FloatingLiteralContext>(_ctx, getState());
  enterRule(_localctx, 136, HogQLParser::RuleFloatingLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1101);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case HogQLParser::FLOATING_LITERAL: {
        enterOuterAlt(_localctx, 1);
        setState(1093);
        match(HogQLParser::FLOATING_LITERAL);
        break;
      }

      case HogQLParser::DOT: {
        enterOuterAlt(_localctx, 2);
        setState(1094);
        match(HogQLParser::DOT);
        setState(1095);
        _la = _input->LA(1);
        if (!(_la == HogQLParser::OCTAL_LITERAL

        || _la == HogQLParser::DECIMAL_LITERAL)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

      case HogQLParser::DECIMAL_LITERAL: {
        enterOuterAlt(_localctx, 3);
        setState(1096);
        match(HogQLParser::DECIMAL_LITERAL);
        setState(1097);
        match(HogQLParser::DOT);
        setState(1099);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 133, _ctx)) {
        case 1: {
          setState(1098);
          _la = _input->LA(1);
          if (!(_la == HogQLParser::OCTAL_LITERAL

          || _la == HogQLParser::DECIMAL_LITERAL)) {
          _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
          break;
        }

        default:
          break;
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NumberLiteralContext ------------------------------------------------------------------

HogQLParser::NumberLiteralContext::NumberLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HogQLParser::FloatingLiteralContext* HogQLParser::NumberLiteralContext::floatingLiteral() {
  return getRuleContext<HogQLParser::FloatingLiteralContext>(0);
}

tree::TerminalNode* HogQLParser::NumberLiteralContext::OCTAL_LITERAL() {
  return getToken(HogQLParser::OCTAL_LITERAL, 0);
}

tree::TerminalNode* HogQLParser::NumberLiteralContext::DECIMAL_LITERAL() {
  return getToken(HogQLParser::DECIMAL_LITERAL, 0);
}

tree::TerminalNode* HogQLParser::NumberLiteralContext::HEXADECIMAL_LITERAL() {
  return getToken(HogQLParser::HEXADECIMAL_LITERAL, 0);
}

tree::TerminalNode* HogQLParser::NumberLiteralContext::INF() {
  return getToken(HogQLParser::INF, 0);
}

tree::TerminalNode* HogQLParser::NumberLiteralContext::NAN_SQL() {
  return getToken(HogQLParser::NAN_SQL, 0);
}

tree::TerminalNode* HogQLParser::NumberLiteralContext::PLUS() {
  return getToken(HogQLParser::PLUS, 0);
}

tree::TerminalNode* HogQLParser::NumberLiteralContext::DASH() {
  return getToken(HogQLParser::DASH, 0);
}


size_t HogQLParser::NumberLiteralContext::getRuleIndex() const {
  return HogQLParser::RuleNumberLiteral;
}


std::any HogQLParser::NumberLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitNumberLiteral(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::NumberLiteralContext* HogQLParser::numberLiteral() {
  NumberLiteralContext *_localctx = _tracker.createInstance<NumberLiteralContext>(_ctx, getState());
  enterRule(_localctx, 138, HogQLParser::RuleNumberLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1104);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HogQLParser::DASH

    || _la == HogQLParser::PLUS) {
      setState(1103);
      _la = _input->LA(1);
      if (!(_la == HogQLParser::DASH

      || _la == HogQLParser::PLUS)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(1112);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 136, _ctx)) {
    case 1: {
      setState(1106);
      floatingLiteral();
      break;
    }

    case 2: {
      setState(1107);
      match(HogQLParser::OCTAL_LITERAL);
      break;
    }

    case 3: {
      setState(1108);
      match(HogQLParser::DECIMAL_LITERAL);
      break;
    }

    case 4: {
      setState(1109);
      match(HogQLParser::HEXADECIMAL_LITERAL);
      break;
    }

    case 5: {
      setState(1110);
      match(HogQLParser::INF);
      break;
    }

    case 6: {
      setState(1111);
      match(HogQLParser::NAN_SQL);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LiteralContext ------------------------------------------------------------------

HogQLParser::LiteralContext::LiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HogQLParser::NumberLiteralContext* HogQLParser::LiteralContext::numberLiteral() {
  return getRuleContext<HogQLParser::NumberLiteralContext>(0);
}

tree::TerminalNode* HogQLParser::LiteralContext::STRING_LITERAL() {
  return getToken(HogQLParser::STRING_LITERAL, 0);
}

tree::TerminalNode* HogQLParser::LiteralContext::NULL_SQL() {
  return getToken(HogQLParser::NULL_SQL, 0);
}


size_t HogQLParser::LiteralContext::getRuleIndex() const {
  return HogQLParser::RuleLiteral;
}


std::any HogQLParser::LiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitLiteral(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::LiteralContext* HogQLParser::literal() {
  LiteralContext *_localctx = _tracker.createInstance<LiteralContext>(_ctx, getState());
  enterRule(_localctx, 140, HogQLParser::RuleLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1117);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case HogQLParser::INF:
      case HogQLParser::NAN_SQL:
      case HogQLParser::FLOATING_LITERAL:
      case HogQLParser::OCTAL_LITERAL:
      case HogQLParser::DECIMAL_LITERAL:
      case HogQLParser::HEXADECIMAL_LITERAL:
      case HogQLParser::DASH:
      case HogQLParser::DOT:
      case HogQLParser::PLUS: {
        enterOuterAlt(_localctx, 1);
        setState(1114);
        numberLiteral();
        break;
      }

      case HogQLParser::STRING_LITERAL: {
        enterOuterAlt(_localctx, 2);
        setState(1115);
        match(HogQLParser::STRING_LITERAL);
        break;
      }

      case HogQLParser::NULL_SQL: {
        enterOuterAlt(_localctx, 3);
        setState(1116);
        match(HogQLParser::NULL_SQL);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IntervalContext ------------------------------------------------------------------

HogQLParser::IntervalContext::IntervalContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::IntervalContext::SECOND() {
  return getToken(HogQLParser::SECOND, 0);
}

tree::TerminalNode* HogQLParser::IntervalContext::MINUTE() {
  return getToken(HogQLParser::MINUTE, 0);
}

tree::TerminalNode* HogQLParser::IntervalContext::HOUR() {
  return getToken(HogQLParser::HOUR, 0);
}

tree::TerminalNode* HogQLParser::IntervalContext::DAY() {
  return getToken(HogQLParser::DAY, 0);
}

tree::TerminalNode* HogQLParser::IntervalContext::WEEK() {
  return getToken(HogQLParser::WEEK, 0);
}

tree::TerminalNode* HogQLParser::IntervalContext::MONTH() {
  return getToken(HogQLParser::MONTH, 0);
}

tree::TerminalNode* HogQLParser::IntervalContext::QUARTER() {
  return getToken(HogQLParser::QUARTER, 0);
}

tree::TerminalNode* HogQLParser::IntervalContext::YEAR() {
  return getToken(HogQLParser::YEAR, 0);
}


size_t HogQLParser::IntervalContext::getRuleIndex() const {
  return HogQLParser::RuleInterval;
}


std::any HogQLParser::IntervalContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitInterval(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::IntervalContext* HogQLParser::interval() {
  IntervalContext *_localctx = _tracker.createInstance<IntervalContext>(_ctx, getState());
  enterRule(_localctx, 142, HogQLParser::RuleInterval);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1119);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 27021666484748288) != 0) || ((((_la - 68) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 68)) & 2181038337) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KeywordContext ------------------------------------------------------------------

HogQLParser::KeywordContext::KeywordContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::KeywordContext::ALL() {
  return getToken(HogQLParser::ALL, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::AND() {
  return getToken(HogQLParser::AND, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::ANTI() {
  return getToken(HogQLParser::ANTI, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::ANY() {
  return getToken(HogQLParser::ANY, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::ARRAY() {
  return getToken(HogQLParser::ARRAY, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::AS() {
  return getToken(HogQLParser::AS, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::ASCENDING() {
  return getToken(HogQLParser::ASCENDING, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::ASOF() {
  return getToken(HogQLParser::ASOF, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::BETWEEN() {
  return getToken(HogQLParser::BETWEEN, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::BOTH() {
  return getToken(HogQLParser::BOTH, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::BY() {
  return getToken(HogQLParser::BY, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::CASE() {
  return getToken(HogQLParser::CASE, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::CAST() {
  return getToken(HogQLParser::CAST, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::COHORT() {
  return getToken(HogQLParser::COHORT, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::COLLATE() {
  return getToken(HogQLParser::COLLATE, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::CROSS() {
  return getToken(HogQLParser::CROSS, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::CUBE() {
  return getToken(HogQLParser::CUBE, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::CURRENT() {
  return getToken(HogQLParser::CURRENT, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::DATE() {
  return getToken(HogQLParser::DATE, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::DESC() {
  return getToken(HogQLParser::DESC, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::DESCENDING() {
  return getToken(HogQLParser::DESCENDING, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::DISTINCT() {
  return getToken(HogQLParser::DISTINCT, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::ELSE() {
  return getToken(HogQLParser::ELSE, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::END() {
  return getToken(HogQLParser::END, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::EXTRACT() {
  return getToken(HogQLParser::EXTRACT, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::FINAL() {
  return getToken(HogQLParser::FINAL, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::FIRST() {
  return getToken(HogQLParser::FIRST, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::FOR() {
  return getToken(HogQLParser::FOR, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::FOLLOWING() {
  return getToken(HogQLParser::FOLLOWING, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::FROM() {
  return getToken(HogQLParser::FROM, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::FULL() {
  return getToken(HogQLParser::FULL, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::GROUP() {
  return getToken(HogQLParser::GROUP, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::HAVING() {
  return getToken(HogQLParser::HAVING, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::ID() {
  return getToken(HogQLParser::ID, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::IS() {
  return getToken(HogQLParser::IS, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::IF() {
  return getToken(HogQLParser::IF, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::ILIKE() {
  return getToken(HogQLParser::ILIKE, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::IN() {
  return getToken(HogQLParser::IN, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::INNER() {
  return getToken(HogQLParser::INNER, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::INTERVAL() {
  return getToken(HogQLParser::INTERVAL, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::JOIN() {
  return getToken(HogQLParser::JOIN, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::KEY() {
  return getToken(HogQLParser::KEY, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::LAST() {
  return getToken(HogQLParser::LAST, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::LEADING() {
  return getToken(HogQLParser::LEADING, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::LEFT() {
  return getToken(HogQLParser::LEFT, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::LIKE() {
  return getToken(HogQLParser::LIKE, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::LIMIT() {
  return getToken(HogQLParser::LIMIT, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::NOT() {
  return getToken(HogQLParser::NOT, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::NULLS() {
  return getToken(HogQLParser::NULLS, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::OFFSET() {
  return getToken(HogQLParser::OFFSET, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::ON() {
  return getToken(HogQLParser::ON, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::OR() {
  return getToken(HogQLParser::OR, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::ORDER() {
  return getToken(HogQLParser::ORDER, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::OUTER() {
  return getToken(HogQLParser::OUTER, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::OVER() {
  return getToken(HogQLParser::OVER, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::PARTITION() {
  return getToken(HogQLParser::PARTITION, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::PRECEDING() {
  return getToken(HogQLParser::PRECEDING, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::PREWHERE() {
  return getToken(HogQLParser::PREWHERE, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::RANGE() {
  return getToken(HogQLParser::RANGE, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::RETURN() {
  return getToken(HogQLParser::RETURN, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::RIGHT() {
  return getToken(HogQLParser::RIGHT, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::ROLLUP() {
  return getToken(HogQLParser::ROLLUP, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::ROW() {
  return getToken(HogQLParser::ROW, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::ROWS() {
  return getToken(HogQLParser::ROWS, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::SAMPLE() {
  return getToken(HogQLParser::SAMPLE, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::SELECT() {
  return getToken(HogQLParser::SELECT, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::SEMI() {
  return getToken(HogQLParser::SEMI, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::SETTINGS() {
  return getToken(HogQLParser::SETTINGS, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::SUBSTRING() {
  return getToken(HogQLParser::SUBSTRING, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::THEN() {
  return getToken(HogQLParser::THEN, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::TIES() {
  return getToken(HogQLParser::TIES, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::TIMESTAMP() {
  return getToken(HogQLParser::TIMESTAMP, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::TOTALS() {
  return getToken(HogQLParser::TOTALS, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::TRAILING() {
  return getToken(HogQLParser::TRAILING, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::TRIM() {
  return getToken(HogQLParser::TRIM, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::TRUNCATE() {
  return getToken(HogQLParser::TRUNCATE, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::TO() {
  return getToken(HogQLParser::TO, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::TOP() {
  return getToken(HogQLParser::TOP, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::UNBOUNDED() {
  return getToken(HogQLParser::UNBOUNDED, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::UNION() {
  return getToken(HogQLParser::UNION, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::USING() {
  return getToken(HogQLParser::USING, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::WHEN() {
  return getToken(HogQLParser::WHEN, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::WHERE() {
  return getToken(HogQLParser::WHERE, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::WINDOW() {
  return getToken(HogQLParser::WINDOW, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::WITH() {
  return getToken(HogQLParser::WITH, 0);
}


size_t HogQLParser::KeywordContext::getRuleIndex() const {
  return HogQLParser::RuleKeyword;
}


std::any HogQLParser::KeywordContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitKeyword(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::KeywordContext* HogQLParser::keyword() {
  KeywordContext *_localctx = _tracker.createInstance<KeywordContext>(_ctx, getState());
  enterRule(_localctx, 144, HogQLParser::RuleKeyword);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1121);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -208293751046537218) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & 29527896047) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KeywordForAliasContext ------------------------------------------------------------------

HogQLParser::KeywordForAliasContext::KeywordForAliasContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::KeywordForAliasContext::DATE() {
  return getToken(HogQLParser::DATE, 0);
}

tree::TerminalNode* HogQLParser::KeywordForAliasContext::FIRST() {
  return getToken(HogQLParser::FIRST, 0);
}

tree::TerminalNode* HogQLParser::KeywordForAliasContext::ID() {
  return getToken(HogQLParser::ID, 0);
}

tree::TerminalNode* HogQLParser::KeywordForAliasContext::KEY() {
  return getToken(HogQLParser::KEY, 0);
}


size_t HogQLParser::KeywordForAliasContext::getRuleIndex() const {
  return HogQLParser::RuleKeywordForAlias;
}


std::any HogQLParser::KeywordForAliasContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitKeywordForAlias(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::KeywordForAliasContext* HogQLParser::keywordForAlias() {
  KeywordForAliasContext *_localctx = _tracker.createInstance<KeywordForAliasContext>(_ctx, getState());
  enterRule(_localctx, 146, HogQLParser::RuleKeywordForAlias);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1123);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 70506452090880) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AliasContext ------------------------------------------------------------------

HogQLParser::AliasContext::AliasContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::AliasContext::IDENTIFIER() {
  return getToken(HogQLParser::IDENTIFIER, 0);
}

HogQLParser::KeywordForAliasContext* HogQLParser::AliasContext::keywordForAlias() {
  return getRuleContext<HogQLParser::KeywordForAliasContext>(0);
}


size_t HogQLParser::AliasContext::getRuleIndex() const {
  return HogQLParser::RuleAlias;
}


std::any HogQLParser::AliasContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitAlias(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::AliasContext* HogQLParser::alias() {
  AliasContext *_localctx = _tracker.createInstance<AliasContext>(_ctx, getState());
  enterRule(_localctx, 148, HogQLParser::RuleAlias);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1127);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case HogQLParser::IDENTIFIER: {
        enterOuterAlt(_localctx, 1);
        setState(1125);
        match(HogQLParser::IDENTIFIER);
        break;
      }

      case HogQLParser::DATE:
      case HogQLParser::FIRST:
      case HogQLParser::ID:
      case HogQLParser::KEY: {
        enterOuterAlt(_localctx, 2);
        setState(1126);
        keywordForAlias();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IdentifierContext ------------------------------------------------------------------

HogQLParser::IdentifierContext::IdentifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::IdentifierContext::IDENTIFIER() {
  return getToken(HogQLParser::IDENTIFIER, 0);
}

HogQLParser::IntervalContext* HogQLParser::IdentifierContext::interval() {
  return getRuleContext<HogQLParser::IntervalContext>(0);
}

HogQLParser::KeywordContext* HogQLParser::IdentifierContext::keyword() {
  return getRuleContext<HogQLParser::KeywordContext>(0);
}


size_t HogQLParser::IdentifierContext::getRuleIndex() const {
  return HogQLParser::RuleIdentifier;
}


std::any HogQLParser::IdentifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitIdentifier(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::IdentifierContext* HogQLParser::identifier() {
  IdentifierContext *_localctx = _tracker.createInstance<IdentifierContext>(_ctx, getState());
  enterRule(_localctx, 150, HogQLParser::RuleIdentifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1132);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case HogQLParser::IDENTIFIER: {
        enterOuterAlt(_localctx, 1);
        setState(1129);
        match(HogQLParser::IDENTIFIER);
        break;
      }

      case HogQLParser::DAY:
      case HogQLParser::HOUR:
      case HogQLParser::MINUTE:
      case HogQLParser::MONTH:
      case HogQLParser::QUARTER:
      case HogQLParser::SECOND:
      case HogQLParser::WEEK:
      case HogQLParser::YEAR: {
        enterOuterAlt(_localctx, 2);
        setState(1130);
        interval();
        break;
      }

      case HogQLParser::ALL:
      case HogQLParser::AND:
      case HogQLParser::ANTI:
      case HogQLParser::ANY:
      case HogQLParser::ARRAY:
      case HogQLParser::AS:
      case HogQLParser::ASCENDING:
      case HogQLParser::ASOF:
      case HogQLParser::BETWEEN:
      case HogQLParser::BOTH:
      case HogQLParser::BY:
      case HogQLParser::CASE:
      case HogQLParser::CAST:
      case HogQLParser::COHORT:
      case HogQLParser::COLLATE:
      case HogQLParser::CROSS:
      case HogQLParser::CUBE:
      case HogQLParser::CURRENT:
      case HogQLParser::DATE:
      case HogQLParser::DESC:
      case HogQLParser::DESCENDING:
      case HogQLParser::DISTINCT:
      case HogQLParser::ELSE:
      case HogQLParser::END:
      case HogQLParser::EXTRACT:
      case HogQLParser::FINAL:
      case HogQLParser::FIRST:
      case HogQLParser::FOLLOWING:
      case HogQLParser::FOR:
      case HogQLParser::FROM:
      case HogQLParser::FULL:
      case HogQLParser::GROUP:
      case HogQLParser::HAVING:
      case HogQLParser::ID:
      case HogQLParser::IF:
      case HogQLParser::ILIKE:
      case HogQLParser::IN:
      case HogQLParser::INNER:
      case HogQLParser::INTERVAL:
      case HogQLParser::IS:
      case HogQLParser::JOIN:
      case HogQLParser::KEY:
      case HogQLParser::LAST:
      case HogQLParser::LEADING:
      case HogQLParser::LEFT:
      case HogQLParser::LIKE:
      case HogQLParser::LIMIT:
      case HogQLParser::NOT:
      case HogQLParser::NULLS:
      case HogQLParser::OFFSET:
      case HogQLParser::ON:
      case HogQLParser::OR:
      case HogQLParser::ORDER:
      case HogQLParser::OUTER:
      case HogQLParser::OVER:
      case HogQLParser::PARTITION:
      case HogQLParser::PRECEDING:
      case HogQLParser::PREWHERE:
      case HogQLParser::RANGE:
      case HogQLParser::RETURN:
      case HogQLParser::RIGHT:
      case HogQLParser::ROLLUP:
      case HogQLParser::ROW:
      case HogQLParser::ROWS:
      case HogQLParser::SAMPLE:
      case HogQLParser::SELECT:
      case HogQLParser::SEMI:
      case HogQLParser::SETTINGS:
      case HogQLParser::SUBSTRING:
      case HogQLParser::THEN:
      case HogQLParser::TIES:
      case HogQLParser::TIMESTAMP:
      case HogQLParser::TO:
      case HogQLParser::TOP:
      case HogQLParser::TOTALS:
      case HogQLParser::TRAILING:
      case HogQLParser::TRIM:
      case HogQLParser::TRUNCATE:
      case HogQLParser::UNBOUNDED:
      case HogQLParser::UNION:
      case HogQLParser::USING:
      case HogQLParser::WHEN:
      case HogQLParser::WHERE:
      case HogQLParser::WINDOW:
      case HogQLParser::WITH: {
        enterOuterAlt(_localctx, 3);
        setState(1131);
        keyword();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnumValueContext ------------------------------------------------------------------

HogQLParser::EnumValueContext::EnumValueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HogQLParser::StringContext* HogQLParser::EnumValueContext::string() {
  return getRuleContext<HogQLParser::StringContext>(0);
}

tree::TerminalNode* HogQLParser::EnumValueContext::EQ_SINGLE() {
  return getToken(HogQLParser::EQ_SINGLE, 0);
}

HogQLParser::NumberLiteralContext* HogQLParser::EnumValueContext::numberLiteral() {
  return getRuleContext<HogQLParser::NumberLiteralContext>(0);
}


size_t HogQLParser::EnumValueContext::getRuleIndex() const {
  return HogQLParser::RuleEnumValue;
}


std::any HogQLParser::EnumValueContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitEnumValue(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::EnumValueContext* HogQLParser::enumValue() {
  EnumValueContext *_localctx = _tracker.createInstance<EnumValueContext>(_ctx, getState());
  enterRule(_localctx, 152, HogQLParser::RuleEnumValue);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1134);
    string();
    setState(1135);
    match(HogQLParser::EQ_SINGLE);
    setState(1136);
    numberLiteral();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PlaceholderContext ------------------------------------------------------------------

HogQLParser::PlaceholderContext::PlaceholderContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::PlaceholderContext::LBRACE() {
  return getToken(HogQLParser::LBRACE, 0);
}

HogQLParser::IdentifierContext* HogQLParser::PlaceholderContext::identifier() {
  return getRuleContext<HogQLParser::IdentifierContext>(0);
}

tree::TerminalNode* HogQLParser::PlaceholderContext::RBRACE() {
  return getToken(HogQLParser::RBRACE, 0);
}


size_t HogQLParser::PlaceholderContext::getRuleIndex() const {
  return HogQLParser::RulePlaceholder;
}


std::any HogQLParser::PlaceholderContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitPlaceholder(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::PlaceholderContext* HogQLParser::placeholder() {
  PlaceholderContext *_localctx = _tracker.createInstance<PlaceholderContext>(_ctx, getState());
  enterRule(_localctx, 154, HogQLParser::RulePlaceholder);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1138);
    match(HogQLParser::LBRACE);
    setState(1139);
    identifier();
    setState(1140);
    match(HogQLParser::RBRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StringContext ------------------------------------------------------------------

HogQLParser::StringContext::StringContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::StringContext::STRING_LITERAL() {
  return getToken(HogQLParser::STRING_LITERAL, 0);
}

HogQLParser::TemplateStringContext* HogQLParser::StringContext::templateString() {
  return getRuleContext<HogQLParser::TemplateStringContext>(0);
}


size_t HogQLParser::StringContext::getRuleIndex() const {
  return HogQLParser::RuleString;
}


std::any HogQLParser::StringContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitString(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::StringContext* HogQLParser::string() {
  StringContext *_localctx = _tracker.createInstance<StringContext>(_ctx, getState());
  enterRule(_localctx, 156, HogQLParser::RuleString);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1144);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case HogQLParser::STRING_LITERAL: {
        enterOuterAlt(_localctx, 1);
        setState(1142);
        match(HogQLParser::STRING_LITERAL);
        break;
      }

      case HogQLParser::QUOTE_SINGLE_TEMPLATE: {
        enterOuterAlt(_localctx, 2);
        setState(1143);
        templateString();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TemplateStringContext ------------------------------------------------------------------

HogQLParser::TemplateStringContext::TemplateStringContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::TemplateStringContext::QUOTE_SINGLE_TEMPLATE() {
  return getToken(HogQLParser::QUOTE_SINGLE_TEMPLATE, 0);
}

tree::TerminalNode* HogQLParser::TemplateStringContext::QUOTE_SINGLE() {
  return getToken(HogQLParser::QUOTE_SINGLE, 0);
}

std::vector<HogQLParser::StringContentsContext *> HogQLParser::TemplateStringContext::stringContents() {
  return getRuleContexts<HogQLParser::StringContentsContext>();
}

HogQLParser::StringContentsContext* HogQLParser::TemplateStringContext::stringContents(size_t i) {
  return getRuleContext<HogQLParser::StringContentsContext>(i);
}


size_t HogQLParser::TemplateStringContext::getRuleIndex() const {
  return HogQLParser::RuleTemplateString;
}


std::any HogQLParser::TemplateStringContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitTemplateString(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::TemplateStringContext* HogQLParser::templateString() {
  TemplateStringContext *_localctx = _tracker.createInstance<TemplateStringContext>(_ctx, getState());
  enterRule(_localctx, 158, HogQLParser::RuleTemplateString);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1146);
    match(HogQLParser::QUOTE_SINGLE_TEMPLATE);
    setState(1150);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == HogQLParser::STRING_TEXT

    || _la == HogQLParser::STRING_ESCAPE_TRIGGER) {
      setState(1147);
      stringContents();
      setState(1152);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1153);
    match(HogQLParser::QUOTE_SINGLE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StringContentsContext ------------------------------------------------------------------

HogQLParser::StringContentsContext::StringContentsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::StringContentsContext::STRING_ESCAPE_TRIGGER() {
  return getToken(HogQLParser::STRING_ESCAPE_TRIGGER, 0);
}

HogQLParser::ColumnExprContext* HogQLParser::StringContentsContext::columnExpr() {
  return getRuleContext<HogQLParser::ColumnExprContext>(0);
}

tree::TerminalNode* HogQLParser::StringContentsContext::RBRACE() {
  return getToken(HogQLParser::RBRACE, 0);
}

tree::TerminalNode* HogQLParser::StringContentsContext::STRING_TEXT() {
  return getToken(HogQLParser::STRING_TEXT, 0);
}


size_t HogQLParser::StringContentsContext::getRuleIndex() const {
  return HogQLParser::RuleStringContents;
}


std::any HogQLParser::StringContentsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitStringContents(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::StringContentsContext* HogQLParser::stringContents() {
  StringContentsContext *_localctx = _tracker.createInstance<StringContentsContext>(_ctx, getState());
  enterRule(_localctx, 160, HogQLParser::RuleStringContents);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1160);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case HogQLParser::STRING_ESCAPE_TRIGGER: {
        enterOuterAlt(_localctx, 1);
        setState(1155);
        match(HogQLParser::STRING_ESCAPE_TRIGGER);
        setState(1156);
        columnExpr(0);
        setState(1157);
        match(HogQLParser::RBRACE);
        break;
      }

      case HogQLParser::STRING_TEXT: {
        enterOuterAlt(_localctx, 2);
        setState(1159);
        match(HogQLParser::STRING_TEXT);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FullTemplateStringContext ------------------------------------------------------------------

HogQLParser::FullTemplateStringContext::FullTemplateStringContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::FullTemplateStringContext::QUOTE_SINGLE_TEMPLATE_FULL() {
  return getToken(HogQLParser::QUOTE_SINGLE_TEMPLATE_FULL, 0);
}

tree::TerminalNode* HogQLParser::FullTemplateStringContext::EOF() {
  return getToken(HogQLParser::EOF, 0);
}

std::vector<HogQLParser::StringContentsFullContext *> HogQLParser::FullTemplateStringContext::stringContentsFull() {
  return getRuleContexts<HogQLParser::StringContentsFullContext>();
}

HogQLParser::StringContentsFullContext* HogQLParser::FullTemplateStringContext::stringContentsFull(size_t i) {
  return getRuleContext<HogQLParser::StringContentsFullContext>(i);
}


size_t HogQLParser::FullTemplateStringContext::getRuleIndex() const {
  return HogQLParser::RuleFullTemplateString;
}


std::any HogQLParser::FullTemplateStringContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitFullTemplateString(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::FullTemplateStringContext* HogQLParser::fullTemplateString() {
  FullTemplateStringContext *_localctx = _tracker.createInstance<FullTemplateStringContext>(_ctx, getState());
  enterRule(_localctx, 162, HogQLParser::RuleFullTemplateString);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1162);
    match(HogQLParser::QUOTE_SINGLE_TEMPLATE_FULL);
    setState(1166);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == HogQLParser::FULL_STRING_TEXT

    || _la == HogQLParser::FULL_STRING_ESCAPE_TRIGGER) {
      setState(1163);
      stringContentsFull();
      setState(1168);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1169);
    match(HogQLParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StringContentsFullContext ------------------------------------------------------------------

HogQLParser::StringContentsFullContext::StringContentsFullContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::StringContentsFullContext::FULL_STRING_ESCAPE_TRIGGER() {
  return getToken(HogQLParser::FULL_STRING_ESCAPE_TRIGGER, 0);
}

HogQLParser::ColumnExprContext* HogQLParser::StringContentsFullContext::columnExpr() {
  return getRuleContext<HogQLParser::ColumnExprContext>(0);
}

tree::TerminalNode* HogQLParser::StringContentsFullContext::RBRACE() {
  return getToken(HogQLParser::RBRACE, 0);
}

tree::TerminalNode* HogQLParser::StringContentsFullContext::FULL_STRING_TEXT() {
  return getToken(HogQLParser::FULL_STRING_TEXT, 0);
}


size_t HogQLParser::StringContentsFullContext::getRuleIndex() const {
  return HogQLParser::RuleStringContentsFull;
}


std::any HogQLParser::StringContentsFullContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitStringContentsFull(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::StringContentsFullContext* HogQLParser::stringContentsFull() {
  StringContentsFullContext *_localctx = _tracker.createInstance<StringContentsFullContext>(_ctx, getState());
  enterRule(_localctx, 164, HogQLParser::RuleStringContentsFull);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1176);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case HogQLParser::FULL_STRING_ESCAPE_TRIGGER: {
        enterOuterAlt(_localctx, 1);
        setState(1171);
        match(HogQLParser::FULL_STRING_ESCAPE_TRIGGER);
        setState(1172);
        columnExpr(0);
        setState(1173);
        match(HogQLParser::RBRACE);
        break;
      }

      case HogQLParser::FULL_STRING_TEXT: {
        enterOuterAlt(_localctx, 2);
        setState(1175);
        match(HogQLParser::FULL_STRING_TEXT);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

bool HogQLParser::sempred(RuleContext *context, size_t ruleIndex, size_t predicateIndex) {
  switch (ruleIndex) {
    case 34: return joinExprSempred(antlrcpp::downCast<JoinExprContext *>(context), predicateIndex);
    case 53: return columnExprSempred(antlrcpp::downCast<ColumnExprContext *>(context), predicateIndex);
    case 63: return tableExprSempred(antlrcpp::downCast<TableExprContext *>(context), predicateIndex);

  default:
    break;
  }
  return true;
}

bool HogQLParser::joinExprSempred(JoinExprContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 0: return precpred(_ctx, 3);
    case 1: return precpred(_ctx, 4);

  default:
    break;
  }
  return true;
}

bool HogQLParser::columnExprSempred(ColumnExprContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 2: return precpred(_ctx, 18);
    case 3: return precpred(_ctx, 17);
    case 4: return precpred(_ctx, 16);
    case 5: return precpred(_ctx, 14);
    case 6: return precpred(_ctx, 12);
    case 7: return precpred(_ctx, 11);
    case 8: return precpred(_ctx, 10);
    case 9: return precpred(_ctx, 9);
    case 10: return precpred(_ctx, 22);
    case 11: return precpred(_ctx, 21);
    case 12: return precpred(_ctx, 20);
    case 13: return precpred(_ctx, 15);
    case 14: return precpred(_ctx, 8);

  default:
    break;
  }
  return true;
}

bool HogQLParser::tableExprSempred(TableExprContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 15: return precpred(_ctx, 3);

  default:
    break;
  }
  return true;
}

void HogQLParser::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  hogqlparserParserInitialize();
#else
  ::antlr4::internal::call_once(hogqlparserParserOnceFlag, hogqlparserParserInitialize);
#endif
}
