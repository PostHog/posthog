
// Generated from HogQLParser.g4 by ANTLR 4.13.1


#include "HogQLParserVisitor.h"

#include "HogQLParser.h"


using namespace antlrcpp;

using namespace antlr4;

namespace {

struct HogQLParserStaticData final {
  HogQLParserStaticData(std::vector<std::string> ruleNames,
                        std::vector<std::string> literalNames,
                        std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  HogQLParserStaticData(const HogQLParserStaticData&) = delete;
  HogQLParserStaticData(HogQLParserStaticData&&) = delete;
  HogQLParserStaticData& operator=(const HogQLParserStaticData&) = delete;
  HogQLParserStaticData& operator=(HogQLParserStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag hogqlparserParserOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
HogQLParserStaticData *hogqlparserParserStaticData = nullptr;

void hogqlparserParserInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (hogqlparserParserStaticData != nullptr) {
    return;
  }
#else
  assert(hogqlparserParserStaticData == nullptr);
#endif
  auto staticData = std::make_unique<HogQLParserStaticData>(
    std::vector<std::string>{
      "program", "declaration", "expression", "varDecl", "identifierList", 
      "statement", "returnStmt", "ifStmt", "whileStmt", "forStmt", "funcStmt", 
      "varAssignment", "exprStmt", "emptyStmt", "block", "kvPair", "kvPairList", 
      "select", "selectUnionStmt", "selectStmtWithParens", "selectStmt", 
      "withClause", "topClause", "fromClause", "arrayJoinClause", "windowClause", 
      "prewhereClause", "whereClause", "groupByClause", "havingClause", 
      "orderByClause", "projectionOrderByClause", "limitAndOffsetClause", 
      "offsetOnlyClause", "settingsClause", "joinExpr", "joinOp", "joinOpCross", 
      "joinConstraintClause", "sampleClause", "orderExprList", "orderExpr", 
      "ratioExpr", "settingExprList", "settingExpr", "windowExpr", "winPartitionByClause", 
      "winOrderByClause", "winFrameClause", "winFrameExtend", "winFrameBound", 
      "expr", "columnTypeExpr", "columnExprList", "columnExpr", "columnArgList", 
      "columnArgExpr", "columnLambdaExpr", "hogqlxTagElement", "hogqlxTagAttribute", 
      "withExprList", "withExpr", "columnIdentifier", "nestedIdentifier", 
      "tableExpr", "tableFunctionExpr", "tableIdentifier", "tableArgList", 
      "databaseIdentifier", "floatingLiteral", "numberLiteral", "literal", 
      "interval", "keyword", "keywordForAlias", "alias", "identifier", "enumValue", 
      "placeholder", "string", "templateString", "stringContents", "fullTemplateString", 
      "stringContentsFull"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "'->'", "'*'", "'`'", "'\\'", "':'", "','", "'||'", 
      "'-'", "'$'", "'.'", "'=='", "'='", "'>='", "'>'", "'#'", "'~*'", 
      "'=~*'", "'{'", "'['", "'('", "'<='", "'<'", "", "'!~*'", "'!~'", 
      "'\\u003F\\u003F'", "'%'", "'+'", "'\\u003F'", "'\"'", "'f''", "'F''", 
      "'''", "'~'", "'=~'", "'}'", "']'", "')'", "';'", "'/'", "'_'"
    },
    std::vector<std::string>{
      "", "ALL", "AND", "ANTI", "ANY", "ARRAY", "AS", "ASCENDING", "ASOF", 
      "BETWEEN", "BOTH", "BY", "CASE", "CAST", "COHORT", "COLLATE", "CROSS", 
      "CUBE", "CURRENT", "DATE", "DAY", "DESC", "DESCENDING", "DISTINCT", 
      "ELSE", "END", "EXTRACT", "FINAL", "FIRST", "FN", "FOLLOWING", "FOR", 
      "FROM", "FULL", "GROUP", "HAVING", "HOUR", "ID", "IF", "ILIKE", "IN", 
      "INF", "INNER", "INTERVAL", "IS", "JOIN", "KEY", "LAST", "LEADING", 
      "LEFT", "LET", "LIKE", "LIMIT", "MINUTE", "MONTH", "NAN_SQL", "NOT", 
      "NULL_SQL", "NULLS", "OFFSET", "ON", "OR", "ORDER", "OUTER", "OVER", 
      "PARTITION", "PRECEDING", "PREWHERE", "QUARTER", "RANGE", "RETURN", 
      "RIGHT", "ROLLUP", "ROW", "ROWS", "SAMPLE", "SECOND", "SELECT", "SEMI", 
      "SETTINGS", "SUBSTRING", "THEN", "TIES", "TIMESTAMP", "TO", "TOP", 
      "TOTALS", "TRAILING", "TRIM", "TRUNCATE", "UNBOUNDED", "UNION", "USING", 
      "WEEK", "WHEN", "WHERE", "WHILE", "WINDOW", "WITH", "YEAR", "ESCAPE_CHAR_COMMON", 
      "IDENTIFIER", "FLOATING_LITERAL", "OCTAL_LITERAL", "DECIMAL_LITERAL", 
      "HEXADECIMAL_LITERAL", "STRING_LITERAL", "ARROW", "ASTERISK", "BACKQUOTE", 
      "BACKSLASH", "COLON", "COMMA", "CONCAT", "DASH", "DOLLAR", "DOT", 
      "EQ_DOUBLE", "EQ_SINGLE", "GT_EQ", "GT", "HASH", "IREGEX_SINGLE", 
      "IREGEX_DOUBLE", "LBRACE", "LBRACKET", "LPAREN", "LT_EQ", "LT", "NOT_EQ", 
      "NOT_IREGEX", "NOT_REGEX", "NULLISH", "PERCENT", "PLUS", "QUERY", 
      "QUOTE_DOUBLE", "QUOTE_SINGLE_TEMPLATE", "QUOTE_SINGLE_TEMPLATE_FULL", 
      "QUOTE_SINGLE", "REGEX_SINGLE", "REGEX_DOUBLE", "RBRACE", "RBRACKET", 
      "RPAREN", "SEMICOLON", "SLASH", "UNDERSCORE", "MULTI_LINE_COMMENT", 
      "SINGLE_LINE_COMMENT", "WHITESPACE", "STRING_TEXT", "STRING_ESCAPE_TRIGGER", 
      "FULL_STRING_TEXT", "FULL_STRING_ESCAPE_TRIGGER"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,1,154,1237,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
  	2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,
  	7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,1,0,
  	5,0,170,8,0,10,0,12,0,173,9,0,1,0,1,0,1,1,1,1,3,1,179,8,1,1,2,1,2,1,3,
  	1,3,1,3,1,3,1,3,3,3,188,8,3,1,4,1,4,1,4,5,4,193,8,4,10,4,12,4,196,9,4,
  	1,4,3,4,199,8,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,210,8,5,1,6,1,
  	6,3,6,214,8,6,1,6,3,6,217,8,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,226,8,7,
  	1,8,1,8,1,8,1,8,1,8,1,8,3,8,234,8,8,1,9,1,9,1,9,1,9,1,9,3,9,241,8,9,1,
  	9,1,9,3,9,245,8,9,1,9,1,9,1,9,1,9,3,9,251,8,9,1,9,1,9,1,9,3,9,256,8,9,
  	1,10,1,10,1,10,1,10,3,10,262,8,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,
  	1,11,1,12,1,12,3,12,274,8,12,1,13,1,13,1,14,1,14,5,14,280,8,14,10,14,
  	12,14,283,9,14,1,14,1,14,1,15,1,15,1,15,1,15,1,16,1,16,1,16,5,16,294,
  	8,16,10,16,12,16,297,9,16,1,16,3,16,300,8,16,1,17,1,17,1,17,3,17,305,
  	8,17,1,17,1,17,1,18,1,18,1,18,1,18,5,18,313,8,18,10,18,12,18,316,9,18,
  	1,19,1,19,1,19,1,19,1,19,1,19,3,19,324,8,19,1,20,3,20,327,8,20,1,20,1,
  	20,3,20,331,8,20,1,20,3,20,334,8,20,1,20,1,20,3,20,338,8,20,1,20,3,20,
  	341,8,20,1,20,3,20,344,8,20,1,20,3,20,347,8,20,1,20,3,20,350,8,20,1,20,
  	1,20,3,20,354,8,20,1,20,1,20,3,20,358,8,20,1,20,3,20,361,8,20,1,20,3,
  	20,364,8,20,1,20,3,20,367,8,20,1,20,1,20,3,20,371,8,20,1,20,3,20,374,
  	8,20,1,21,1,21,1,21,1,22,1,22,1,22,1,22,3,22,383,8,22,1,23,1,23,1,23,
  	1,24,3,24,389,8,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,
  	1,25,1,25,1,25,1,25,1,25,1,25,1,25,5,25,408,8,25,10,25,12,25,411,9,25,
  	1,26,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,
  	3,28,427,8,28,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,
  	1,32,1,32,1,32,1,32,3,32,444,8,32,1,32,1,32,1,32,1,32,3,32,450,8,32,1,
  	32,1,32,1,32,1,32,3,32,456,8,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,
  	32,1,32,3,32,467,8,32,3,32,469,8,32,1,33,1,33,1,33,1,34,1,34,1,34,1,35,
  	1,35,1,35,3,35,480,8,35,1,35,3,35,483,8,35,1,35,1,35,1,35,1,35,3,35,489,
  	8,35,1,35,1,35,1,35,1,35,1,35,1,35,3,35,497,8,35,1,35,1,35,1,35,1,35,
  	5,35,503,8,35,10,35,12,35,506,9,35,1,36,3,36,509,8,36,1,36,1,36,1,36,
  	3,36,514,8,36,1,36,3,36,517,8,36,1,36,3,36,520,8,36,1,36,1,36,3,36,524,
  	8,36,1,36,1,36,3,36,528,8,36,1,36,3,36,531,8,36,3,36,533,8,36,1,36,3,
  	36,536,8,36,1,36,1,36,3,36,540,8,36,1,36,1,36,3,36,544,8,36,1,36,3,36,
  	547,8,36,3,36,549,8,36,3,36,551,8,36,1,37,1,37,1,37,3,37,556,8,37,1,38,
  	1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,3,38,567,8,38,1,39,1,39,1,39,
  	1,39,3,39,573,8,39,1,40,1,40,1,40,5,40,578,8,40,10,40,12,40,581,9,40,
  	1,41,1,41,3,41,585,8,41,1,41,1,41,3,41,589,8,41,1,41,1,41,3,41,593,8,
  	41,1,42,1,42,1,42,1,42,3,42,599,8,42,3,42,601,8,42,1,43,1,43,1,43,5,43,
  	606,8,43,10,43,12,43,609,9,43,1,44,1,44,1,44,1,44,1,45,3,45,616,8,45,
  	1,45,3,45,619,8,45,1,45,3,45,622,8,45,1,46,1,46,1,46,1,46,1,47,1,47,1,
  	47,1,47,1,48,1,48,1,48,1,49,1,49,1,49,1,49,1,49,1,49,3,49,641,8,49,1,
  	50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,3,50,655,8,
  	50,1,51,1,51,1,51,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,5,52,669,
  	8,52,10,52,12,52,672,9,52,1,52,3,52,675,8,52,1,52,1,52,1,52,1,52,1,52,
  	1,52,1,52,5,52,684,8,52,10,52,12,52,687,9,52,1,52,3,52,690,8,52,1,52,
  	1,52,1,52,1,52,1,52,1,52,1,52,5,52,699,8,52,10,52,12,52,702,9,52,1,52,
  	3,52,705,8,52,1,52,1,52,1,52,1,52,1,52,3,52,712,8,52,1,52,1,52,3,52,716,
  	8,52,1,53,1,53,1,53,5,53,721,8,53,10,53,12,53,724,9,53,1,53,3,53,727,
  	8,53,1,54,1,54,1,54,3,54,732,8,54,1,54,1,54,1,54,1,54,1,54,4,54,739,8,
  	54,11,54,12,54,740,1,54,1,54,3,54,745,8,54,1,54,1,54,1,54,1,54,1,54,1,
  	54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,
  	54,1,54,1,54,3,54,769,8,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,
  	54,1,54,1,54,1,54,1,54,1,54,1,54,3,54,786,8,54,1,54,1,54,1,54,1,54,3,
  	54,792,8,54,1,54,3,54,795,8,54,1,54,3,54,798,8,54,1,54,1,54,1,54,1,54,
  	1,54,1,54,1,54,1,54,3,54,808,8,54,1,54,1,54,1,54,1,54,3,54,814,8,54,1,
  	54,3,54,817,8,54,1,54,3,54,820,8,54,1,54,1,54,1,54,1,54,1,54,1,54,3,54,
  	828,8,54,1,54,3,54,831,8,54,1,54,1,54,3,54,835,8,54,1,54,3,54,838,8,54,
  	1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,3,54,852,
  	8,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,
  	1,54,1,54,3,54,869,8,54,1,54,1,54,1,54,3,54,874,8,54,1,54,1,54,3,54,878,
  	8,54,1,54,1,54,1,54,1,54,3,54,884,8,54,1,54,1,54,1,54,1,54,1,54,3,54,
  	891,8,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,3,54,903,8,
  	54,1,54,1,54,3,54,907,8,54,1,54,3,54,910,8,54,1,54,1,54,1,54,1,54,1,54,
  	1,54,1,54,3,54,919,8,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,
  	1,54,1,54,1,54,3,54,933,8,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,
  	1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,
  	1,54,1,54,1,54,3,54,960,8,54,1,54,1,54,1,54,1,54,1,54,1,54,3,54,968,8,
  	54,5,54,970,8,54,10,54,12,54,973,9,54,1,55,1,55,1,55,5,55,978,8,55,10,
  	55,12,55,981,9,55,1,55,3,55,984,8,55,1,56,1,56,3,56,988,8,56,1,57,1,57,
  	1,57,1,57,5,57,994,8,57,10,57,12,57,997,9,57,1,57,3,57,1000,8,57,1,57,
  	1,57,1,57,1,57,1,57,5,57,1007,8,57,10,57,12,57,1010,9,57,1,57,3,57,1013,
  	8,57,3,57,1015,8,57,1,57,1,57,1,57,1,58,1,58,1,58,5,58,1023,8,58,10,58,
  	12,58,1026,9,58,1,58,1,58,1,58,1,58,1,58,1,58,5,58,1034,8,58,10,58,12,
  	58,1037,9,58,1,58,1,58,3,58,1041,8,58,1,58,1,58,1,58,1,58,1,58,3,58,1048,
  	8,58,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,3,59,1061,
  	8,59,1,60,1,60,1,60,5,60,1066,8,60,10,60,12,60,1069,9,60,1,60,3,60,1072,
  	8,60,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,3,61,1084,8,61,
  	1,62,1,62,1,62,1,62,3,62,1090,8,62,1,62,3,62,1093,8,62,1,63,1,63,1,63,
  	5,63,1098,8,63,10,63,12,63,1101,9,63,1,64,1,64,1,64,1,64,1,64,1,64,1,
  	64,1,64,1,64,3,64,1112,8,64,1,64,1,64,1,64,1,64,3,64,1118,8,64,5,64,1120,
  	8,64,10,64,12,64,1123,9,64,1,65,1,65,1,65,3,65,1128,8,65,1,65,1,65,1,
  	66,1,66,1,66,3,66,1135,8,66,1,66,1,66,1,67,1,67,1,67,5,67,1142,8,67,10,
  	67,12,67,1145,9,67,1,67,3,67,1148,8,67,1,68,1,68,1,69,1,69,1,69,1,69,
  	1,69,1,69,3,69,1158,8,69,3,69,1160,8,69,1,70,3,70,1163,8,70,1,70,1,70,
  	1,70,1,70,1,70,1,70,3,70,1171,8,70,1,71,1,71,1,71,3,71,1176,8,71,1,72,
  	1,72,1,73,1,73,1,74,1,74,1,75,1,75,3,75,1186,8,75,1,76,1,76,1,76,3,76,
  	1191,8,76,1,77,1,77,1,77,1,77,1,78,1,78,1,78,1,78,1,79,1,79,3,79,1203,
  	8,79,1,80,1,80,5,80,1207,8,80,10,80,12,80,1210,9,80,1,80,1,80,1,81,1,
  	81,1,81,1,81,1,81,3,81,1219,8,81,1,82,1,82,5,82,1223,8,82,10,82,12,82,
  	1226,9,82,1,82,1,82,1,83,1,83,1,83,1,83,1,83,3,83,1235,8,83,1,83,0,3,
  	70,108,128,84,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,
  	40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,
  	86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,
  	124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,
  	160,162,164,166,0,16,2,0,17,17,72,72,2,0,42,42,49,49,3,0,1,1,4,4,8,8,
  	4,0,1,1,3,4,8,8,78,78,2,0,49,49,71,71,2,0,1,1,4,4,2,0,7,7,21,22,2,0,28,
  	28,47,47,2,0,69,69,74,74,3,0,10,10,48,48,87,87,2,0,39,39,51,51,1,0,103,
  	104,2,0,114,114,134,134,7,0,20,20,36,36,53,54,68,68,76,76,93,93,99,99,
  	12,0,1,19,21,28,30,35,37,40,42,49,51,52,56,56,58,67,69,75,77,92,94,95,
  	97,98,4,0,19,19,28,28,37,37,46,46,1394,0,171,1,0,0,0,2,178,1,0,0,0,4,
  	180,1,0,0,0,6,182,1,0,0,0,8,189,1,0,0,0,10,209,1,0,0,0,12,211,1,0,0,0,
  	14,218,1,0,0,0,16,227,1,0,0,0,18,235,1,0,0,0,20,257,1,0,0,0,22,266,1,
  	0,0,0,24,271,1,0,0,0,26,275,1,0,0,0,28,277,1,0,0,0,30,286,1,0,0,0,32,
  	290,1,0,0,0,34,304,1,0,0,0,36,308,1,0,0,0,38,323,1,0,0,0,40,326,1,0,0,
  	0,42,375,1,0,0,0,44,378,1,0,0,0,46,384,1,0,0,0,48,388,1,0,0,0,50,394,
  	1,0,0,0,52,412,1,0,0,0,54,415,1,0,0,0,56,418,1,0,0,0,58,428,1,0,0,0,60,
  	431,1,0,0,0,62,435,1,0,0,0,64,468,1,0,0,0,66,470,1,0,0,0,68,473,1,0,0,
  	0,70,488,1,0,0,0,72,550,1,0,0,0,74,555,1,0,0,0,76,566,1,0,0,0,78,568,
  	1,0,0,0,80,574,1,0,0,0,82,582,1,0,0,0,84,600,1,0,0,0,86,602,1,0,0,0,88,
  	610,1,0,0,0,90,615,1,0,0,0,92,623,1,0,0,0,94,627,1,0,0,0,96,631,1,0,0,
  	0,98,640,1,0,0,0,100,654,1,0,0,0,102,656,1,0,0,0,104,715,1,0,0,0,106,
  	717,1,0,0,0,108,877,1,0,0,0,110,974,1,0,0,0,112,987,1,0,0,0,114,1014,
  	1,0,0,0,116,1047,1,0,0,0,118,1060,1,0,0,0,120,1062,1,0,0,0,122,1083,1,
  	0,0,0,124,1092,1,0,0,0,126,1094,1,0,0,0,128,1111,1,0,0,0,130,1124,1,0,
  	0,0,132,1134,1,0,0,0,134,1138,1,0,0,0,136,1149,1,0,0,0,138,1159,1,0,0,
  	0,140,1162,1,0,0,0,142,1175,1,0,0,0,144,1177,1,0,0,0,146,1179,1,0,0,0,
  	148,1181,1,0,0,0,150,1185,1,0,0,0,152,1190,1,0,0,0,154,1192,1,0,0,0,156,
  	1196,1,0,0,0,158,1202,1,0,0,0,160,1204,1,0,0,0,162,1218,1,0,0,0,164,1220,
  	1,0,0,0,166,1234,1,0,0,0,168,170,3,2,1,0,169,168,1,0,0,0,170,173,1,0,
  	0,0,171,169,1,0,0,0,171,172,1,0,0,0,172,174,1,0,0,0,173,171,1,0,0,0,174,
  	175,5,0,0,1,175,1,1,0,0,0,176,179,3,6,3,0,177,179,3,10,5,0,178,176,1,
  	0,0,0,178,177,1,0,0,0,179,3,1,0,0,0,180,181,3,108,54,0,181,5,1,0,0,0,
  	182,183,5,50,0,0,183,187,3,152,76,0,184,185,5,111,0,0,185,186,5,118,0,
  	0,186,188,3,4,2,0,187,184,1,0,0,0,187,188,1,0,0,0,188,7,1,0,0,0,189,194,
  	3,152,76,0,190,191,5,112,0,0,191,193,3,152,76,0,192,190,1,0,0,0,193,196,
  	1,0,0,0,194,192,1,0,0,0,194,195,1,0,0,0,195,198,1,0,0,0,196,194,1,0,0,
  	0,197,199,5,112,0,0,198,197,1,0,0,0,198,199,1,0,0,0,199,9,1,0,0,0,200,
  	210,3,12,6,0,201,210,3,14,7,0,202,210,3,16,8,0,203,210,3,18,9,0,204,210,
  	3,20,10,0,205,210,3,22,11,0,206,210,3,28,14,0,207,210,3,24,12,0,208,210,
  	3,26,13,0,209,200,1,0,0,0,209,201,1,0,0,0,209,202,1,0,0,0,209,203,1,0,
  	0,0,209,204,1,0,0,0,209,205,1,0,0,0,209,206,1,0,0,0,209,207,1,0,0,0,209,
  	208,1,0,0,0,210,11,1,0,0,0,211,213,5,70,0,0,212,214,3,4,2,0,213,212,1,
  	0,0,0,213,214,1,0,0,0,214,216,1,0,0,0,215,217,5,145,0,0,216,215,1,0,0,
  	0,216,217,1,0,0,0,217,13,1,0,0,0,218,219,5,38,0,0,219,220,5,126,0,0,220,
  	221,3,4,2,0,221,222,5,144,0,0,222,225,3,10,5,0,223,224,5,24,0,0,224,226,
  	3,10,5,0,225,223,1,0,0,0,225,226,1,0,0,0,226,15,1,0,0,0,227,228,5,96,
  	0,0,228,229,5,126,0,0,229,230,3,4,2,0,230,231,5,144,0,0,231,233,3,10,
  	5,0,232,234,5,145,0,0,233,232,1,0,0,0,233,234,1,0,0,0,234,17,1,0,0,0,
  	235,236,5,31,0,0,236,240,5,126,0,0,237,241,3,6,3,0,238,241,3,22,11,0,
  	239,241,3,4,2,0,240,237,1,0,0,0,240,238,1,0,0,0,240,239,1,0,0,0,240,241,
  	1,0,0,0,241,242,1,0,0,0,242,244,5,145,0,0,243,245,3,4,2,0,244,243,1,0,
  	0,0,244,245,1,0,0,0,245,246,1,0,0,0,246,250,5,145,0,0,247,251,3,6,3,0,
  	248,251,3,22,11,0,249,251,3,4,2,0,250,247,1,0,0,0,250,248,1,0,0,0,250,
  	249,1,0,0,0,250,251,1,0,0,0,251,252,1,0,0,0,252,253,5,144,0,0,253,255,
  	3,10,5,0,254,256,5,145,0,0,255,254,1,0,0,0,255,256,1,0,0,0,256,19,1,0,
  	0,0,257,258,5,29,0,0,258,259,3,152,76,0,259,261,5,126,0,0,260,262,3,8,
  	4,0,261,260,1,0,0,0,261,262,1,0,0,0,262,263,1,0,0,0,263,264,5,144,0,0,
  	264,265,3,28,14,0,265,21,1,0,0,0,266,267,3,4,2,0,267,268,5,111,0,0,268,
  	269,5,118,0,0,269,270,3,4,2,0,270,23,1,0,0,0,271,273,3,4,2,0,272,274,
  	5,145,0,0,273,272,1,0,0,0,273,274,1,0,0,0,274,25,1,0,0,0,275,276,5,145,
  	0,0,276,27,1,0,0,0,277,281,5,124,0,0,278,280,3,2,1,0,279,278,1,0,0,0,
  	280,283,1,0,0,0,281,279,1,0,0,0,281,282,1,0,0,0,282,284,1,0,0,0,283,281,
  	1,0,0,0,284,285,5,142,0,0,285,29,1,0,0,0,286,287,3,4,2,0,287,288,5,111,
  	0,0,288,289,3,4,2,0,289,31,1,0,0,0,290,295,3,30,15,0,291,292,5,112,0,
  	0,292,294,3,30,15,0,293,291,1,0,0,0,294,297,1,0,0,0,295,293,1,0,0,0,295,
  	296,1,0,0,0,296,299,1,0,0,0,297,295,1,0,0,0,298,300,5,112,0,0,299,298,
  	1,0,0,0,299,300,1,0,0,0,300,33,1,0,0,0,301,305,3,36,18,0,302,305,3,40,
  	20,0,303,305,3,116,58,0,304,301,1,0,0,0,304,302,1,0,0,0,304,303,1,0,0,
  	0,305,306,1,0,0,0,306,307,5,0,0,1,307,35,1,0,0,0,308,314,3,38,19,0,309,
  	310,5,91,0,0,310,311,5,1,0,0,311,313,3,38,19,0,312,309,1,0,0,0,313,316,
  	1,0,0,0,314,312,1,0,0,0,314,315,1,0,0,0,315,37,1,0,0,0,316,314,1,0,0,
  	0,317,324,3,40,20,0,318,319,5,126,0,0,319,320,3,36,18,0,320,321,5,144,
  	0,0,321,324,1,0,0,0,322,324,3,156,78,0,323,317,1,0,0,0,323,318,1,0,0,
  	0,323,322,1,0,0,0,324,39,1,0,0,0,325,327,3,42,21,0,326,325,1,0,0,0,326,
  	327,1,0,0,0,327,328,1,0,0,0,328,330,5,77,0,0,329,331,5,23,0,0,330,329,
  	1,0,0,0,330,331,1,0,0,0,331,333,1,0,0,0,332,334,3,44,22,0,333,332,1,0,
  	0,0,333,334,1,0,0,0,334,335,1,0,0,0,335,337,3,106,53,0,336,338,3,46,23,
  	0,337,336,1,0,0,0,337,338,1,0,0,0,338,340,1,0,0,0,339,341,3,48,24,0,340,
  	339,1,0,0,0,340,341,1,0,0,0,341,343,1,0,0,0,342,344,3,52,26,0,343,342,
  	1,0,0,0,343,344,1,0,0,0,344,346,1,0,0,0,345,347,3,54,27,0,346,345,1,0,
  	0,0,346,347,1,0,0,0,347,349,1,0,0,0,348,350,3,56,28,0,349,348,1,0,0,0,
  	349,350,1,0,0,0,350,353,1,0,0,0,351,352,5,98,0,0,352,354,7,0,0,0,353,
  	351,1,0,0,0,353,354,1,0,0,0,354,357,1,0,0,0,355,356,5,98,0,0,356,358,
  	5,86,0,0,357,355,1,0,0,0,357,358,1,0,0,0,358,360,1,0,0,0,359,361,3,58,
  	29,0,360,359,1,0,0,0,360,361,1,0,0,0,361,363,1,0,0,0,362,364,3,50,25,
  	0,363,362,1,0,0,0,363,364,1,0,0,0,364,366,1,0,0,0,365,367,3,60,30,0,366,
  	365,1,0,0,0,366,367,1,0,0,0,367,370,1,0,0,0,368,371,3,64,32,0,369,371,
  	3,66,33,0,370,368,1,0,0,0,370,369,1,0,0,0,370,371,1,0,0,0,371,373,1,0,
  	0,0,372,374,3,68,34,0,373,372,1,0,0,0,373,374,1,0,0,0,374,41,1,0,0,0,
  	375,376,5,98,0,0,376,377,3,120,60,0,377,43,1,0,0,0,378,379,5,85,0,0,379,
  	382,5,104,0,0,380,381,5,98,0,0,381,383,5,82,0,0,382,380,1,0,0,0,382,383,
  	1,0,0,0,383,45,1,0,0,0,384,385,5,32,0,0,385,386,3,70,35,0,386,47,1,0,
  	0,0,387,389,7,1,0,0,388,387,1,0,0,0,388,389,1,0,0,0,389,390,1,0,0,0,390,
  	391,5,5,0,0,391,392,5,45,0,0,392,393,3,106,53,0,393,49,1,0,0,0,394,395,
  	5,97,0,0,395,396,3,152,76,0,396,397,5,6,0,0,397,398,5,126,0,0,398,399,
  	3,90,45,0,399,409,5,144,0,0,400,401,5,112,0,0,401,402,3,152,76,0,402,
  	403,5,6,0,0,403,404,5,126,0,0,404,405,3,90,45,0,405,406,5,144,0,0,406,
  	408,1,0,0,0,407,400,1,0,0,0,408,411,1,0,0,0,409,407,1,0,0,0,409,410,1,
  	0,0,0,410,51,1,0,0,0,411,409,1,0,0,0,412,413,5,67,0,0,413,414,3,108,54,
  	0,414,53,1,0,0,0,415,416,5,95,0,0,416,417,3,108,54,0,417,55,1,0,0,0,418,
  	419,5,34,0,0,419,426,5,11,0,0,420,421,7,0,0,0,421,422,5,126,0,0,422,423,
  	3,106,53,0,423,424,5,144,0,0,424,427,1,0,0,0,425,427,3,106,53,0,426,420,
  	1,0,0,0,426,425,1,0,0,0,427,57,1,0,0,0,428,429,5,35,0,0,429,430,3,108,
  	54,0,430,59,1,0,0,0,431,432,5,62,0,0,432,433,5,11,0,0,433,434,3,80,40,
  	0,434,61,1,0,0,0,435,436,5,62,0,0,436,437,5,11,0,0,437,438,3,106,53,0,
  	438,63,1,0,0,0,439,440,5,52,0,0,440,443,3,108,54,0,441,442,5,112,0,0,
  	442,444,3,108,54,0,443,441,1,0,0,0,443,444,1,0,0,0,444,449,1,0,0,0,445,
  	446,5,98,0,0,446,450,5,82,0,0,447,448,5,11,0,0,448,450,3,106,53,0,449,
  	445,1,0,0,0,449,447,1,0,0,0,449,450,1,0,0,0,450,469,1,0,0,0,451,452,5,
  	52,0,0,452,455,3,108,54,0,453,454,5,98,0,0,454,456,5,82,0,0,455,453,1,
  	0,0,0,455,456,1,0,0,0,456,457,1,0,0,0,457,458,5,59,0,0,458,459,3,108,
  	54,0,459,469,1,0,0,0,460,461,5,52,0,0,461,462,3,108,54,0,462,463,5,59,
  	0,0,463,466,3,108,54,0,464,465,5,11,0,0,465,467,3,106,53,0,466,464,1,
  	0,0,0,466,467,1,0,0,0,467,469,1,0,0,0,468,439,1,0,0,0,468,451,1,0,0,0,
  	468,460,1,0,0,0,469,65,1,0,0,0,470,471,5,59,0,0,471,472,3,108,54,0,472,
  	67,1,0,0,0,473,474,5,79,0,0,474,475,3,86,43,0,475,69,1,0,0,0,476,477,
  	6,35,-1,0,477,479,3,128,64,0,478,480,5,27,0,0,479,478,1,0,0,0,479,480,
  	1,0,0,0,480,482,1,0,0,0,481,483,3,78,39,0,482,481,1,0,0,0,482,483,1,0,
  	0,0,483,489,1,0,0,0,484,485,5,126,0,0,485,486,3,70,35,0,486,487,5,144,
  	0,0,487,489,1,0,0,0,488,476,1,0,0,0,488,484,1,0,0,0,489,504,1,0,0,0,490,
  	491,10,3,0,0,491,492,3,74,37,0,492,493,3,70,35,4,493,503,1,0,0,0,494,
  	496,10,4,0,0,495,497,3,72,36,0,496,495,1,0,0,0,496,497,1,0,0,0,497,498,
  	1,0,0,0,498,499,5,45,0,0,499,500,3,70,35,0,500,501,3,76,38,0,501,503,
  	1,0,0,0,502,490,1,0,0,0,502,494,1,0,0,0,503,506,1,0,0,0,504,502,1,0,0,
  	0,504,505,1,0,0,0,505,71,1,0,0,0,506,504,1,0,0,0,507,509,7,2,0,0,508,
  	507,1,0,0,0,508,509,1,0,0,0,509,510,1,0,0,0,510,517,5,42,0,0,511,513,
  	5,42,0,0,512,514,7,2,0,0,513,512,1,0,0,0,513,514,1,0,0,0,514,517,1,0,
  	0,0,515,517,7,2,0,0,516,508,1,0,0,0,516,511,1,0,0,0,516,515,1,0,0,0,517,
  	551,1,0,0,0,518,520,7,3,0,0,519,518,1,0,0,0,519,520,1,0,0,0,520,521,1,
  	0,0,0,521,523,7,4,0,0,522,524,5,63,0,0,523,522,1,0,0,0,523,524,1,0,0,
  	0,524,533,1,0,0,0,525,527,7,4,0,0,526,528,5,63,0,0,527,526,1,0,0,0,527,
  	528,1,0,0,0,528,530,1,0,0,0,529,531,7,3,0,0,530,529,1,0,0,0,530,531,1,
  	0,0,0,531,533,1,0,0,0,532,519,1,0,0,0,532,525,1,0,0,0,533,551,1,0,0,0,
  	534,536,7,5,0,0,535,534,1,0,0,0,535,536,1,0,0,0,536,537,1,0,0,0,537,539,
  	5,33,0,0,538,540,5,63,0,0,539,538,1,0,0,0,539,540,1,0,0,0,540,549,1,0,
  	0,0,541,543,5,33,0,0,542,544,5,63,0,0,543,542,1,0,0,0,543,544,1,0,0,0,
  	544,546,1,0,0,0,545,547,7,5,0,0,546,545,1,0,0,0,546,547,1,0,0,0,547,549,
  	1,0,0,0,548,535,1,0,0,0,548,541,1,0,0,0,549,551,1,0,0,0,550,516,1,0,0,
  	0,550,532,1,0,0,0,550,548,1,0,0,0,551,73,1,0,0,0,552,553,5,16,0,0,553,
  	556,5,45,0,0,554,556,5,112,0,0,555,552,1,0,0,0,555,554,1,0,0,0,556,75,
  	1,0,0,0,557,558,5,60,0,0,558,567,3,106,53,0,559,560,5,92,0,0,560,561,
  	5,126,0,0,561,562,3,106,53,0,562,563,5,144,0,0,563,567,1,0,0,0,564,565,
  	5,92,0,0,565,567,3,106,53,0,566,557,1,0,0,0,566,559,1,0,0,0,566,564,1,
  	0,0,0,567,77,1,0,0,0,568,569,5,75,0,0,569,572,3,84,42,0,570,571,5,59,
  	0,0,571,573,3,84,42,0,572,570,1,0,0,0,572,573,1,0,0,0,573,79,1,0,0,0,
  	574,579,3,82,41,0,575,576,5,112,0,0,576,578,3,82,41,0,577,575,1,0,0,0,
  	578,581,1,0,0,0,579,577,1,0,0,0,579,580,1,0,0,0,580,81,1,0,0,0,581,579,
  	1,0,0,0,582,584,3,108,54,0,583,585,7,6,0,0,584,583,1,0,0,0,584,585,1,
  	0,0,0,585,588,1,0,0,0,586,587,5,58,0,0,587,589,7,7,0,0,588,586,1,0,0,
  	0,588,589,1,0,0,0,589,592,1,0,0,0,590,591,5,15,0,0,591,593,5,106,0,0,
  	592,590,1,0,0,0,592,593,1,0,0,0,593,83,1,0,0,0,594,601,3,156,78,0,595,
  	598,3,140,70,0,596,597,5,146,0,0,597,599,3,140,70,0,598,596,1,0,0,0,598,
  	599,1,0,0,0,599,601,1,0,0,0,600,594,1,0,0,0,600,595,1,0,0,0,601,85,1,
  	0,0,0,602,607,3,88,44,0,603,604,5,112,0,0,604,606,3,88,44,0,605,603,1,
  	0,0,0,606,609,1,0,0,0,607,605,1,0,0,0,607,608,1,0,0,0,608,87,1,0,0,0,
  	609,607,1,0,0,0,610,611,3,152,76,0,611,612,5,118,0,0,612,613,3,142,71,
  	0,613,89,1,0,0,0,614,616,3,92,46,0,615,614,1,0,0,0,615,616,1,0,0,0,616,
  	618,1,0,0,0,617,619,3,94,47,0,618,617,1,0,0,0,618,619,1,0,0,0,619,621,
  	1,0,0,0,620,622,3,96,48,0,621,620,1,0,0,0,621,622,1,0,0,0,622,91,1,0,
  	0,0,623,624,5,65,0,0,624,625,5,11,0,0,625,626,3,106,53,0,626,93,1,0,0,
  	0,627,628,5,62,0,0,628,629,5,11,0,0,629,630,3,80,40,0,630,95,1,0,0,0,
  	631,632,7,8,0,0,632,633,3,98,49,0,633,97,1,0,0,0,634,641,3,100,50,0,635,
  	636,5,9,0,0,636,637,3,100,50,0,637,638,5,2,0,0,638,639,3,100,50,0,639,
  	641,1,0,0,0,640,634,1,0,0,0,640,635,1,0,0,0,641,99,1,0,0,0,642,643,5,
  	18,0,0,643,655,5,73,0,0,644,645,5,90,0,0,645,655,5,66,0,0,646,647,5,90,
  	0,0,647,655,5,30,0,0,648,649,3,140,70,0,649,650,5,66,0,0,650,655,1,0,
  	0,0,651,652,3,140,70,0,652,653,5,30,0,0,653,655,1,0,0,0,654,642,1,0,0,
  	0,654,644,1,0,0,0,654,646,1,0,0,0,654,648,1,0,0,0,654,651,1,0,0,0,655,
  	101,1,0,0,0,656,657,3,108,54,0,657,658,5,0,0,1,658,103,1,0,0,0,659,716,
  	3,152,76,0,660,661,3,152,76,0,661,662,5,126,0,0,662,663,3,152,76,0,663,
  	670,3,104,52,0,664,665,5,112,0,0,665,666,3,152,76,0,666,667,3,104,52,
  	0,667,669,1,0,0,0,668,664,1,0,0,0,669,672,1,0,0,0,670,668,1,0,0,0,670,
  	671,1,0,0,0,671,674,1,0,0,0,672,670,1,0,0,0,673,675,5,112,0,0,674,673,
  	1,0,0,0,674,675,1,0,0,0,675,676,1,0,0,0,676,677,5,144,0,0,677,716,1,0,
  	0,0,678,679,3,152,76,0,679,680,5,126,0,0,680,685,3,154,77,0,681,682,5,
  	112,0,0,682,684,3,154,77,0,683,681,1,0,0,0,684,687,1,0,0,0,685,683,1,
  	0,0,0,685,686,1,0,0,0,686,689,1,0,0,0,687,685,1,0,0,0,688,690,5,112,0,
  	0,689,688,1,0,0,0,689,690,1,0,0,0,690,691,1,0,0,0,691,692,5,144,0,0,692,
  	716,1,0,0,0,693,694,3,152,76,0,694,695,5,126,0,0,695,700,3,104,52,0,696,
  	697,5,112,0,0,697,699,3,104,52,0,698,696,1,0,0,0,699,702,1,0,0,0,700,
  	698,1,0,0,0,700,701,1,0,0,0,701,704,1,0,0,0,702,700,1,0,0,0,703,705,5,
  	112,0,0,704,703,1,0,0,0,704,705,1,0,0,0,705,706,1,0,0,0,706,707,5,144,
  	0,0,707,716,1,0,0,0,708,709,3,152,76,0,709,711,5,126,0,0,710,712,3,106,
  	53,0,711,710,1,0,0,0,711,712,1,0,0,0,712,713,1,0,0,0,713,714,5,144,0,
  	0,714,716,1,0,0,0,715,659,1,0,0,0,715,660,1,0,0,0,715,678,1,0,0,0,715,
  	693,1,0,0,0,715,708,1,0,0,0,716,105,1,0,0,0,717,722,3,108,54,0,718,719,
  	5,112,0,0,719,721,3,108,54,0,720,718,1,0,0,0,721,724,1,0,0,0,722,720,
  	1,0,0,0,722,723,1,0,0,0,723,726,1,0,0,0,724,722,1,0,0,0,725,727,5,112,
  	0,0,726,725,1,0,0,0,726,727,1,0,0,0,727,107,1,0,0,0,728,729,6,54,-1,0,
  	729,731,5,12,0,0,730,732,3,108,54,0,731,730,1,0,0,0,731,732,1,0,0,0,732,
  	738,1,0,0,0,733,734,5,94,0,0,734,735,3,108,54,0,735,736,5,81,0,0,736,
  	737,3,108,54,0,737,739,1,0,0,0,738,733,1,0,0,0,739,740,1,0,0,0,740,738,
  	1,0,0,0,740,741,1,0,0,0,741,744,1,0,0,0,742,743,5,24,0,0,743,745,3,108,
  	54,0,744,742,1,0,0,0,744,745,1,0,0,0,745,746,1,0,0,0,746,747,5,25,0,0,
  	747,878,1,0,0,0,748,749,5,13,0,0,749,750,5,126,0,0,750,751,3,108,54,0,
  	751,752,5,6,0,0,752,753,3,104,52,0,753,754,5,144,0,0,754,878,1,0,0,0,
  	755,756,5,19,0,0,756,878,5,106,0,0,757,758,5,43,0,0,758,759,3,108,54,
  	0,759,760,3,144,72,0,760,878,1,0,0,0,761,762,5,80,0,0,762,763,5,126,0,
  	0,763,764,3,108,54,0,764,765,5,32,0,0,765,768,3,108,54,0,766,767,5,31,
  	0,0,767,769,3,108,54,0,768,766,1,0,0,0,768,769,1,0,0,0,769,770,1,0,0,
  	0,770,771,5,144,0,0,771,878,1,0,0,0,772,773,5,83,0,0,773,878,5,106,0,
  	0,774,775,5,88,0,0,775,776,5,126,0,0,776,777,7,9,0,0,777,778,3,158,79,
  	0,778,779,5,32,0,0,779,780,3,108,54,0,780,781,5,144,0,0,781,878,1,0,0,
  	0,782,783,3,152,76,0,783,785,5,126,0,0,784,786,3,106,53,0,785,784,1,0,
  	0,0,785,786,1,0,0,0,786,787,1,0,0,0,787,788,5,144,0,0,788,797,1,0,0,0,
  	789,791,5,126,0,0,790,792,5,23,0,0,791,790,1,0,0,0,791,792,1,0,0,0,792,
  	794,1,0,0,0,793,795,3,110,55,0,794,793,1,0,0,0,794,795,1,0,0,0,795,796,
  	1,0,0,0,796,798,5,144,0,0,797,789,1,0,0,0,797,798,1,0,0,0,798,799,1,0,
  	0,0,799,800,5,64,0,0,800,801,5,126,0,0,801,802,3,90,45,0,802,803,5,144,
  	0,0,803,878,1,0,0,0,804,805,3,152,76,0,805,807,5,126,0,0,806,808,3,106,
  	53,0,807,806,1,0,0,0,807,808,1,0,0,0,808,809,1,0,0,0,809,810,5,144,0,
  	0,810,819,1,0,0,0,811,813,5,126,0,0,812,814,5,23,0,0,813,812,1,0,0,0,
  	813,814,1,0,0,0,814,816,1,0,0,0,815,817,3,110,55,0,816,815,1,0,0,0,816,
  	817,1,0,0,0,817,818,1,0,0,0,818,820,5,144,0,0,819,811,1,0,0,0,819,820,
  	1,0,0,0,820,821,1,0,0,0,821,822,5,64,0,0,822,823,3,152,76,0,823,878,1,
  	0,0,0,824,830,3,152,76,0,825,827,5,126,0,0,826,828,3,106,53,0,827,826,
  	1,0,0,0,827,828,1,0,0,0,828,829,1,0,0,0,829,831,5,144,0,0,830,825,1,0,
  	0,0,830,831,1,0,0,0,831,832,1,0,0,0,832,834,5,126,0,0,833,835,5,23,0,
  	0,834,833,1,0,0,0,834,835,1,0,0,0,835,837,1,0,0,0,836,838,3,110,55,0,
  	837,836,1,0,0,0,837,838,1,0,0,0,838,839,1,0,0,0,839,840,5,144,0,0,840,
  	878,1,0,0,0,841,878,3,116,58,0,842,878,3,160,80,0,843,878,3,142,71,0,
  	844,845,5,114,0,0,845,878,3,108,54,19,846,847,5,56,0,0,847,878,3,108,
  	54,13,848,849,3,132,66,0,849,850,5,116,0,0,850,852,1,0,0,0,851,848,1,
  	0,0,0,851,852,1,0,0,0,852,853,1,0,0,0,853,878,5,108,0,0,854,855,5,126,
  	0,0,855,856,3,36,18,0,856,857,5,144,0,0,857,878,1,0,0,0,858,859,5,126,
  	0,0,859,860,3,108,54,0,860,861,5,144,0,0,861,878,1,0,0,0,862,863,5,126,
  	0,0,863,864,3,106,53,0,864,865,5,144,0,0,865,878,1,0,0,0,866,868,5,125,
  	0,0,867,869,3,106,53,0,868,867,1,0,0,0,868,869,1,0,0,0,869,870,1,0,0,
  	0,870,878,5,143,0,0,871,873,5,124,0,0,872,874,3,32,16,0,873,872,1,0,0,
  	0,873,874,1,0,0,0,874,875,1,0,0,0,875,878,5,142,0,0,876,878,3,124,62,
  	0,877,728,1,0,0,0,877,748,1,0,0,0,877,755,1,0,0,0,877,757,1,0,0,0,877,
  	761,1,0,0,0,877,772,1,0,0,0,877,774,1,0,0,0,877,782,1,0,0,0,877,804,1,
  	0,0,0,877,824,1,0,0,0,877,841,1,0,0,0,877,842,1,0,0,0,877,843,1,0,0,0,
  	877,844,1,0,0,0,877,846,1,0,0,0,877,851,1,0,0,0,877,854,1,0,0,0,877,858,
  	1,0,0,0,877,862,1,0,0,0,877,866,1,0,0,0,877,871,1,0,0,0,877,876,1,0,0,
  	0,878,971,1,0,0,0,879,883,10,18,0,0,880,884,5,108,0,0,881,884,5,146,0,
  	0,882,884,5,133,0,0,883,880,1,0,0,0,883,881,1,0,0,0,883,882,1,0,0,0,884,
  	885,1,0,0,0,885,970,3,108,54,19,886,890,10,17,0,0,887,891,5,134,0,0,888,
  	891,5,114,0,0,889,891,5,113,0,0,890,887,1,0,0,0,890,888,1,0,0,0,890,889,
  	1,0,0,0,891,892,1,0,0,0,892,970,3,108,54,18,893,918,10,16,0,0,894,919,
  	5,117,0,0,895,919,5,118,0,0,896,919,5,129,0,0,897,919,5,127,0,0,898,919,
  	5,128,0,0,899,919,5,119,0,0,900,919,5,120,0,0,901,903,5,56,0,0,902,901,
  	1,0,0,0,902,903,1,0,0,0,903,904,1,0,0,0,904,906,5,40,0,0,905,907,5,14,
  	0,0,906,905,1,0,0,0,906,907,1,0,0,0,907,919,1,0,0,0,908,910,5,56,0,0,
  	909,908,1,0,0,0,909,910,1,0,0,0,910,911,1,0,0,0,911,919,7,10,0,0,912,
  	919,5,140,0,0,913,919,5,141,0,0,914,919,5,131,0,0,915,919,5,122,0,0,916,
  	919,5,123,0,0,917,919,5,130,0,0,918,894,1,0,0,0,918,895,1,0,0,0,918,896,
  	1,0,0,0,918,897,1,0,0,0,918,898,1,0,0,0,918,899,1,0,0,0,918,900,1,0,0,
  	0,918,902,1,0,0,0,918,909,1,0,0,0,918,912,1,0,0,0,918,913,1,0,0,0,918,
  	914,1,0,0,0,918,915,1,0,0,0,918,916,1,0,0,0,918,917,1,0,0,0,919,920,1,
  	0,0,0,920,970,3,108,54,17,921,922,10,14,0,0,922,923,5,132,0,0,923,970,
  	3,108,54,15,924,925,10,12,0,0,925,926,5,2,0,0,926,970,3,108,54,13,927,
  	928,10,11,0,0,928,929,5,61,0,0,929,970,3,108,54,12,930,932,10,10,0,0,
  	931,933,5,56,0,0,932,931,1,0,0,0,932,933,1,0,0,0,933,934,1,0,0,0,934,
  	935,5,9,0,0,935,936,3,108,54,0,936,937,5,2,0,0,937,938,3,108,54,11,938,
  	970,1,0,0,0,939,940,10,9,0,0,940,941,5,135,0,0,941,942,3,108,54,0,942,
  	943,5,111,0,0,943,944,3,108,54,9,944,970,1,0,0,0,945,946,10,22,0,0,946,
  	947,5,125,0,0,947,948,3,108,54,0,948,949,5,143,0,0,949,970,1,0,0,0,950,
  	951,10,21,0,0,951,952,5,116,0,0,952,970,5,104,0,0,953,954,10,20,0,0,954,
  	955,5,116,0,0,955,970,3,152,76,0,956,957,10,15,0,0,957,959,5,44,0,0,958,
  	960,5,56,0,0,959,958,1,0,0,0,959,960,1,0,0,0,960,961,1,0,0,0,961,970,
  	5,57,0,0,962,967,10,8,0,0,963,964,5,6,0,0,964,968,3,152,76,0,965,966,
  	5,6,0,0,966,968,5,106,0,0,967,963,1,0,0,0,967,965,1,0,0,0,968,970,1,0,
  	0,0,969,879,1,0,0,0,969,886,1,0,0,0,969,893,1,0,0,0,969,921,1,0,0,0,969,
  	924,1,0,0,0,969,927,1,0,0,0,969,930,1,0,0,0,969,939,1,0,0,0,969,945,1,
  	0,0,0,969,950,1,0,0,0,969,953,1,0,0,0,969,956,1,0,0,0,969,962,1,0,0,0,
  	970,973,1,0,0,0,971,969,1,0,0,0,971,972,1,0,0,0,972,109,1,0,0,0,973,971,
  	1,0,0,0,974,979,3,112,56,0,975,976,5,112,0,0,976,978,3,112,56,0,977,975,
  	1,0,0,0,978,981,1,0,0,0,979,977,1,0,0,0,979,980,1,0,0,0,980,983,1,0,0,
  	0,981,979,1,0,0,0,982,984,5,112,0,0,983,982,1,0,0,0,983,984,1,0,0,0,984,
  	111,1,0,0,0,985,988,3,114,57,0,986,988,3,108,54,0,987,985,1,0,0,0,987,
  	986,1,0,0,0,988,113,1,0,0,0,989,990,5,126,0,0,990,995,3,152,76,0,991,
  	992,5,112,0,0,992,994,3,152,76,0,993,991,1,0,0,0,994,997,1,0,0,0,995,
  	993,1,0,0,0,995,996,1,0,0,0,996,999,1,0,0,0,997,995,1,0,0,0,998,1000,
  	5,112,0,0,999,998,1,0,0,0,999,1000,1,0,0,0,1000,1001,1,0,0,0,1001,1002,
  	5,144,0,0,1002,1015,1,0,0,0,1003,1008,3,152,76,0,1004,1005,5,112,0,0,
  	1005,1007,3,152,76,0,1006,1004,1,0,0,0,1007,1010,1,0,0,0,1008,1006,1,
  	0,0,0,1008,1009,1,0,0,0,1009,1012,1,0,0,0,1010,1008,1,0,0,0,1011,1013,
  	5,112,0,0,1012,1011,1,0,0,0,1012,1013,1,0,0,0,1013,1015,1,0,0,0,1014,
  	989,1,0,0,0,1014,1003,1,0,0,0,1015,1016,1,0,0,0,1016,1017,5,107,0,0,1017,
  	1018,3,108,54,0,1018,115,1,0,0,0,1019,1020,5,128,0,0,1020,1024,3,152,
  	76,0,1021,1023,3,118,59,0,1022,1021,1,0,0,0,1023,1026,1,0,0,0,1024,1022,
  	1,0,0,0,1024,1025,1,0,0,0,1025,1027,1,0,0,0,1026,1024,1,0,0,0,1027,1028,
  	5,146,0,0,1028,1029,5,120,0,0,1029,1048,1,0,0,0,1030,1031,5,128,0,0,1031,
  	1035,3,152,76,0,1032,1034,3,118,59,0,1033,1032,1,0,0,0,1034,1037,1,0,
  	0,0,1035,1033,1,0,0,0,1035,1036,1,0,0,0,1036,1038,1,0,0,0,1037,1035,1,
  	0,0,0,1038,1040,5,120,0,0,1039,1041,3,116,58,0,1040,1039,1,0,0,0,1040,
  	1041,1,0,0,0,1041,1042,1,0,0,0,1042,1043,5,128,0,0,1043,1044,5,146,0,
  	0,1044,1045,3,152,76,0,1045,1046,5,120,0,0,1046,1048,1,0,0,0,1047,1019,
  	1,0,0,0,1047,1030,1,0,0,0,1048,117,1,0,0,0,1049,1050,3,152,76,0,1050,
  	1051,5,118,0,0,1051,1052,3,158,79,0,1052,1061,1,0,0,0,1053,1054,3,152,
  	76,0,1054,1055,5,118,0,0,1055,1056,5,124,0,0,1056,1057,3,108,54,0,1057,
  	1058,5,142,0,0,1058,1061,1,0,0,0,1059,1061,3,152,76,0,1060,1049,1,0,0,
  	0,1060,1053,1,0,0,0,1060,1059,1,0,0,0,1061,119,1,0,0,0,1062,1067,3,122,
  	61,0,1063,1064,5,112,0,0,1064,1066,3,122,61,0,1065,1063,1,0,0,0,1066,
  	1069,1,0,0,0,1067,1065,1,0,0,0,1067,1068,1,0,0,0,1068,1071,1,0,0,0,1069,
  	1067,1,0,0,0,1070,1072,5,112,0,0,1071,1070,1,0,0,0,1071,1072,1,0,0,0,
  	1072,121,1,0,0,0,1073,1074,3,152,76,0,1074,1075,5,6,0,0,1075,1076,5,126,
  	0,0,1076,1077,3,36,18,0,1077,1078,5,144,0,0,1078,1084,1,0,0,0,1079,1080,
  	3,108,54,0,1080,1081,5,6,0,0,1081,1082,3,152,76,0,1082,1084,1,0,0,0,1083,
  	1073,1,0,0,0,1083,1079,1,0,0,0,1084,123,1,0,0,0,1085,1093,3,156,78,0,
  	1086,1087,3,132,66,0,1087,1088,5,116,0,0,1088,1090,1,0,0,0,1089,1086,
  	1,0,0,0,1089,1090,1,0,0,0,1090,1091,1,0,0,0,1091,1093,3,126,63,0,1092,
  	1085,1,0,0,0,1092,1089,1,0,0,0,1093,125,1,0,0,0,1094,1099,3,152,76,0,
  	1095,1096,5,116,0,0,1096,1098,3,152,76,0,1097,1095,1,0,0,0,1098,1101,
  	1,0,0,0,1099,1097,1,0,0,0,1099,1100,1,0,0,0,1100,127,1,0,0,0,1101,1099,
  	1,0,0,0,1102,1103,6,64,-1,0,1103,1112,3,132,66,0,1104,1112,3,130,65,0,
  	1105,1106,5,126,0,0,1106,1107,3,36,18,0,1107,1108,5,144,0,0,1108,1112,
  	1,0,0,0,1109,1112,3,116,58,0,1110,1112,3,156,78,0,1111,1102,1,0,0,0,1111,
  	1104,1,0,0,0,1111,1105,1,0,0,0,1111,1109,1,0,0,0,1111,1110,1,0,0,0,1112,
  	1121,1,0,0,0,1113,1117,10,3,0,0,1114,1118,3,150,75,0,1115,1116,5,6,0,
  	0,1116,1118,3,152,76,0,1117,1114,1,0,0,0,1117,1115,1,0,0,0,1118,1120,
  	1,0,0,0,1119,1113,1,0,0,0,1120,1123,1,0,0,0,1121,1119,1,0,0,0,1121,1122,
  	1,0,0,0,1122,129,1,0,0,0,1123,1121,1,0,0,0,1124,1125,3,152,76,0,1125,
  	1127,5,126,0,0,1126,1128,3,134,67,0,1127,1126,1,0,0,0,1127,1128,1,0,0,
  	0,1128,1129,1,0,0,0,1129,1130,5,144,0,0,1130,131,1,0,0,0,1131,1132,3,
  	136,68,0,1132,1133,5,116,0,0,1133,1135,1,0,0,0,1134,1131,1,0,0,0,1134,
  	1135,1,0,0,0,1135,1136,1,0,0,0,1136,1137,3,152,76,0,1137,133,1,0,0,0,
  	1138,1143,3,108,54,0,1139,1140,5,112,0,0,1140,1142,3,108,54,0,1141,1139,
  	1,0,0,0,1142,1145,1,0,0,0,1143,1141,1,0,0,0,1143,1144,1,0,0,0,1144,1147,
  	1,0,0,0,1145,1143,1,0,0,0,1146,1148,5,112,0,0,1147,1146,1,0,0,0,1147,
  	1148,1,0,0,0,1148,135,1,0,0,0,1149,1150,3,152,76,0,1150,137,1,0,0,0,1151,
  	1160,5,102,0,0,1152,1153,5,116,0,0,1153,1160,7,11,0,0,1154,1155,5,104,
  	0,0,1155,1157,5,116,0,0,1156,1158,7,11,0,0,1157,1156,1,0,0,0,1157,1158,
  	1,0,0,0,1158,1160,1,0,0,0,1159,1151,1,0,0,0,1159,1152,1,0,0,0,1159,1154,
  	1,0,0,0,1160,139,1,0,0,0,1161,1163,7,12,0,0,1162,1161,1,0,0,0,1162,1163,
  	1,0,0,0,1163,1170,1,0,0,0,1164,1171,3,138,69,0,1165,1171,5,103,0,0,1166,
  	1171,5,104,0,0,1167,1171,5,105,0,0,1168,1171,5,41,0,0,1169,1171,5,55,
  	0,0,1170,1164,1,0,0,0,1170,1165,1,0,0,0,1170,1166,1,0,0,0,1170,1167,1,
  	0,0,0,1170,1168,1,0,0,0,1170,1169,1,0,0,0,1171,141,1,0,0,0,1172,1176,
  	3,140,70,0,1173,1176,5,106,0,0,1174,1176,5,57,0,0,1175,1172,1,0,0,0,1175,
  	1173,1,0,0,0,1175,1174,1,0,0,0,1176,143,1,0,0,0,1177,1178,7,13,0,0,1178,
  	145,1,0,0,0,1179,1180,7,14,0,0,1180,147,1,0,0,0,1181,1182,7,15,0,0,1182,
  	149,1,0,0,0,1183,1186,5,101,0,0,1184,1186,3,148,74,0,1185,1183,1,0,0,
  	0,1185,1184,1,0,0,0,1186,151,1,0,0,0,1187,1191,5,101,0,0,1188,1191,3,
  	144,72,0,1189,1191,3,146,73,0,1190,1187,1,0,0,0,1190,1188,1,0,0,0,1190,
  	1189,1,0,0,0,1191,153,1,0,0,0,1192,1193,3,158,79,0,1193,1194,5,118,0,
  	0,1194,1195,3,140,70,0,1195,155,1,0,0,0,1196,1197,5,124,0,0,1197,1198,
  	3,152,76,0,1198,1199,5,142,0,0,1199,157,1,0,0,0,1200,1203,5,106,0,0,1201,
  	1203,3,160,80,0,1202,1200,1,0,0,0,1202,1201,1,0,0,0,1203,159,1,0,0,0,
  	1204,1208,5,137,0,0,1205,1207,3,162,81,0,1206,1205,1,0,0,0,1207,1210,
  	1,0,0,0,1208,1206,1,0,0,0,1208,1209,1,0,0,0,1209,1211,1,0,0,0,1210,1208,
  	1,0,0,0,1211,1212,5,139,0,0,1212,161,1,0,0,0,1213,1214,5,152,0,0,1214,
  	1215,3,108,54,0,1215,1216,5,142,0,0,1216,1219,1,0,0,0,1217,1219,5,151,
  	0,0,1218,1213,1,0,0,0,1218,1217,1,0,0,0,1219,163,1,0,0,0,1220,1224,5,
  	138,0,0,1221,1223,3,166,83,0,1222,1221,1,0,0,0,1223,1226,1,0,0,0,1224,
  	1222,1,0,0,0,1224,1225,1,0,0,0,1225,1227,1,0,0,0,1226,1224,1,0,0,0,1227,
  	1228,5,0,0,1,1228,165,1,0,0,0,1229,1230,5,154,0,0,1230,1231,3,108,54,
  	0,1231,1232,5,142,0,0,1232,1235,1,0,0,0,1233,1235,5,153,0,0,1234,1229,
  	1,0,0,0,1234,1233,1,0,0,0,1235,167,1,0,0,0,160,171,178,187,194,198,209,
  	213,216,225,233,240,244,250,255,261,273,281,295,299,304,314,323,326,330,
  	333,337,340,343,346,349,353,357,360,363,366,370,373,382,388,409,426,443,
  	449,455,466,468,479,482,488,496,502,504,508,513,516,519,523,527,530,532,
  	535,539,543,546,548,550,555,566,572,579,584,588,592,598,600,607,615,618,
  	621,640,654,670,674,685,689,700,704,711,715,722,726,731,740,744,768,785,
  	791,794,797,807,813,816,819,827,830,834,837,851,868,873,877,883,890,902,
  	906,909,918,932,959,967,969,971,979,983,987,995,999,1008,1012,1014,1024,
  	1035,1040,1047,1060,1067,1071,1083,1089,1092,1099,1111,1117,1121,1127,
  	1134,1143,1147,1157,1159,1162,1170,1175,1185,1190,1202,1208,1218,1224,
  	1234
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  hogqlparserParserStaticData = staticData.release();
}

}

HogQLParser::HogQLParser(TokenStream *input) : HogQLParser(input, antlr4::atn::ParserATNSimulatorOptions()) {}

HogQLParser::HogQLParser(TokenStream *input, const antlr4::atn::ParserATNSimulatorOptions &options) : Parser(input) {
  HogQLParser::initialize();
  _interpreter = new atn::ParserATNSimulator(this, *hogqlparserParserStaticData->atn, hogqlparserParserStaticData->decisionToDFA, hogqlparserParserStaticData->sharedContextCache, options);
}

HogQLParser::~HogQLParser() {
  delete _interpreter;
}

const atn::ATN& HogQLParser::getATN() const {
  return *hogqlparserParserStaticData->atn;
}

std::string HogQLParser::getGrammarFileName() const {
  return "HogQLParser.g4";
}

const std::vector<std::string>& HogQLParser::getRuleNames() const {
  return hogqlparserParserStaticData->ruleNames;
}

const dfa::Vocabulary& HogQLParser::getVocabulary() const {
  return hogqlparserParserStaticData->vocabulary;
}

antlr4::atn::SerializedATNView HogQLParser::getSerializedATN() const {
  return hogqlparserParserStaticData->serializedATN;
}


//----------------- ProgramContext ------------------------------------------------------------------

HogQLParser::ProgramContext::ProgramContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::ProgramContext::EOF() {
  return getToken(HogQLParser::EOF, 0);
}

std::vector<HogQLParser::DeclarationContext *> HogQLParser::ProgramContext::declaration() {
  return getRuleContexts<HogQLParser::DeclarationContext>();
}

HogQLParser::DeclarationContext* HogQLParser::ProgramContext::declaration(size_t i) {
  return getRuleContext<HogQLParser::DeclarationContext>(i);
}


size_t HogQLParser::ProgramContext::getRuleIndex() const {
  return HogQLParser::RuleProgram;
}


std::any HogQLParser::ProgramContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitProgram(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::ProgramContext* HogQLParser::program() {
  ProgramContext *_localctx = _tracker.createInstance<ProgramContext>(_ctx, getState());
  enterRule(_localctx, 0, HogQLParser::RuleProgram);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(171);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -2) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & 8076106351341731839) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 128)) & 131649) != 0)) {
      setState(168);
      declaration();
      setState(173);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(174);
    match(HogQLParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DeclarationContext ------------------------------------------------------------------

HogQLParser::DeclarationContext::DeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HogQLParser::VarDeclContext* HogQLParser::DeclarationContext::varDecl() {
  return getRuleContext<HogQLParser::VarDeclContext>(0);
}

HogQLParser::StatementContext* HogQLParser::DeclarationContext::statement() {
  return getRuleContext<HogQLParser::StatementContext>(0);
}


size_t HogQLParser::DeclarationContext::getRuleIndex() const {
  return HogQLParser::RuleDeclaration;
}


std::any HogQLParser::DeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitDeclaration(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::DeclarationContext* HogQLParser::declaration() {
  DeclarationContext *_localctx = _tracker.createInstance<DeclarationContext>(_ctx, getState());
  enterRule(_localctx, 2, HogQLParser::RuleDeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(178);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case HogQLParser::LET: {
        enterOuterAlt(_localctx, 1);
        setState(176);
        varDecl();
        break;
      }

      case HogQLParser::ALL:
      case HogQLParser::AND:
      case HogQLParser::ANTI:
      case HogQLParser::ANY:
      case HogQLParser::ARRAY:
      case HogQLParser::AS:
      case HogQLParser::ASCENDING:
      case HogQLParser::ASOF:
      case HogQLParser::BETWEEN:
      case HogQLParser::BOTH:
      case HogQLParser::BY:
      case HogQLParser::CASE:
      case HogQLParser::CAST:
      case HogQLParser::COHORT:
      case HogQLParser::COLLATE:
      case HogQLParser::CROSS:
      case HogQLParser::CUBE:
      case HogQLParser::CURRENT:
      case HogQLParser::DATE:
      case HogQLParser::DAY:
      case HogQLParser::DESC:
      case HogQLParser::DESCENDING:
      case HogQLParser::DISTINCT:
      case HogQLParser::ELSE:
      case HogQLParser::END:
      case HogQLParser::EXTRACT:
      case HogQLParser::FINAL:
      case HogQLParser::FIRST:
      case HogQLParser::FN:
      case HogQLParser::FOLLOWING:
      case HogQLParser::FOR:
      case HogQLParser::FROM:
      case HogQLParser::FULL:
      case HogQLParser::GROUP:
      case HogQLParser::HAVING:
      case HogQLParser::HOUR:
      case HogQLParser::ID:
      case HogQLParser::IF:
      case HogQLParser::ILIKE:
      case HogQLParser::IN:
      case HogQLParser::INF:
      case HogQLParser::INNER:
      case HogQLParser::INTERVAL:
      case HogQLParser::IS:
      case HogQLParser::JOIN:
      case HogQLParser::KEY:
      case HogQLParser::LAST:
      case HogQLParser::LEADING:
      case HogQLParser::LEFT:
      case HogQLParser::LIKE:
      case HogQLParser::LIMIT:
      case HogQLParser::MINUTE:
      case HogQLParser::MONTH:
      case HogQLParser::NAN_SQL:
      case HogQLParser::NOT:
      case HogQLParser::NULL_SQL:
      case HogQLParser::NULLS:
      case HogQLParser::OFFSET:
      case HogQLParser::ON:
      case HogQLParser::OR:
      case HogQLParser::ORDER:
      case HogQLParser::OUTER:
      case HogQLParser::OVER:
      case HogQLParser::PARTITION:
      case HogQLParser::PRECEDING:
      case HogQLParser::PREWHERE:
      case HogQLParser::QUARTER:
      case HogQLParser::RANGE:
      case HogQLParser::RETURN:
      case HogQLParser::RIGHT:
      case HogQLParser::ROLLUP:
      case HogQLParser::ROW:
      case HogQLParser::ROWS:
      case HogQLParser::SAMPLE:
      case HogQLParser::SECOND:
      case HogQLParser::SELECT:
      case HogQLParser::SEMI:
      case HogQLParser::SETTINGS:
      case HogQLParser::SUBSTRING:
      case HogQLParser::THEN:
      case HogQLParser::TIES:
      case HogQLParser::TIMESTAMP:
      case HogQLParser::TO:
      case HogQLParser::TOP:
      case HogQLParser::TOTALS:
      case HogQLParser::TRAILING:
      case HogQLParser::TRIM:
      case HogQLParser::TRUNCATE:
      case HogQLParser::UNBOUNDED:
      case HogQLParser::UNION:
      case HogQLParser::USING:
      case HogQLParser::WEEK:
      case HogQLParser::WHEN:
      case HogQLParser::WHERE:
      case HogQLParser::WHILE:
      case HogQLParser::WINDOW:
      case HogQLParser::WITH:
      case HogQLParser::YEAR:
      case HogQLParser::IDENTIFIER:
      case HogQLParser::FLOATING_LITERAL:
      case HogQLParser::OCTAL_LITERAL:
      case HogQLParser::DECIMAL_LITERAL:
      case HogQLParser::HEXADECIMAL_LITERAL:
      case HogQLParser::STRING_LITERAL:
      case HogQLParser::ASTERISK:
      case HogQLParser::DASH:
      case HogQLParser::DOT:
      case HogQLParser::LBRACE:
      case HogQLParser::LBRACKET:
      case HogQLParser::LPAREN:
      case HogQLParser::LT:
      case HogQLParser::PLUS:
      case HogQLParser::QUOTE_SINGLE_TEMPLATE:
      case HogQLParser::SEMICOLON: {
        enterOuterAlt(_localctx, 2);
        setState(177);
        statement();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExpressionContext ------------------------------------------------------------------

HogQLParser::ExpressionContext::ExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HogQLParser::ColumnExprContext* HogQLParser::ExpressionContext::columnExpr() {
  return getRuleContext<HogQLParser::ColumnExprContext>(0);
}


size_t HogQLParser::ExpressionContext::getRuleIndex() const {
  return HogQLParser::RuleExpression;
}


std::any HogQLParser::ExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitExpression(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::ExpressionContext* HogQLParser::expression() {
  ExpressionContext *_localctx = _tracker.createInstance<ExpressionContext>(_ctx, getState());
  enterRule(_localctx, 4, HogQLParser::RuleExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(180);
    columnExpr(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VarDeclContext ------------------------------------------------------------------

HogQLParser::VarDeclContext::VarDeclContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::VarDeclContext::LET() {
  return getToken(HogQLParser::LET, 0);
}

HogQLParser::IdentifierContext* HogQLParser::VarDeclContext::identifier() {
  return getRuleContext<HogQLParser::IdentifierContext>(0);
}

tree::TerminalNode* HogQLParser::VarDeclContext::COLON() {
  return getToken(HogQLParser::COLON, 0);
}

tree::TerminalNode* HogQLParser::VarDeclContext::EQ_SINGLE() {
  return getToken(HogQLParser::EQ_SINGLE, 0);
}

HogQLParser::ExpressionContext* HogQLParser::VarDeclContext::expression() {
  return getRuleContext<HogQLParser::ExpressionContext>(0);
}


size_t HogQLParser::VarDeclContext::getRuleIndex() const {
  return HogQLParser::RuleVarDecl;
}


std::any HogQLParser::VarDeclContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitVarDecl(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::VarDeclContext* HogQLParser::varDecl() {
  VarDeclContext *_localctx = _tracker.createInstance<VarDeclContext>(_ctx, getState());
  enterRule(_localctx, 6, HogQLParser::RuleVarDecl);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(182);
    match(HogQLParser::LET);
    setState(183);
    identifier();
    setState(187);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HogQLParser::COLON) {
      setState(184);
      match(HogQLParser::COLON);
      setState(185);
      match(HogQLParser::EQ_SINGLE);
      setState(186);
      expression();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IdentifierListContext ------------------------------------------------------------------

HogQLParser::IdentifierListContext::IdentifierListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<HogQLParser::IdentifierContext *> HogQLParser::IdentifierListContext::identifier() {
  return getRuleContexts<HogQLParser::IdentifierContext>();
}

HogQLParser::IdentifierContext* HogQLParser::IdentifierListContext::identifier(size_t i) {
  return getRuleContext<HogQLParser::IdentifierContext>(i);
}

std::vector<tree::TerminalNode *> HogQLParser::IdentifierListContext::COMMA() {
  return getTokens(HogQLParser::COMMA);
}

tree::TerminalNode* HogQLParser::IdentifierListContext::COMMA(size_t i) {
  return getToken(HogQLParser::COMMA, i);
}


size_t HogQLParser::IdentifierListContext::getRuleIndex() const {
  return HogQLParser::RuleIdentifierList;
}


std::any HogQLParser::IdentifierListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitIdentifierList(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::IdentifierListContext* HogQLParser::identifierList() {
  IdentifierListContext *_localctx = _tracker.createInstance<IdentifierListContext>(_ctx, getState());
  enterRule(_localctx, 8, HogQLParser::RuleIdentifierList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(189);
    identifier();
    setState(194);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 3, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(190);
        match(HogQLParser::COMMA);
        setState(191);
        identifier(); 
      }
      setState(196);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 3, _ctx);
    }
    setState(198);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HogQLParser::COMMA) {
      setState(197);
      match(HogQLParser::COMMA);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StatementContext ------------------------------------------------------------------

HogQLParser::StatementContext::StatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HogQLParser::ReturnStmtContext* HogQLParser::StatementContext::returnStmt() {
  return getRuleContext<HogQLParser::ReturnStmtContext>(0);
}

HogQLParser::IfStmtContext* HogQLParser::StatementContext::ifStmt() {
  return getRuleContext<HogQLParser::IfStmtContext>(0);
}

HogQLParser::WhileStmtContext* HogQLParser::StatementContext::whileStmt() {
  return getRuleContext<HogQLParser::WhileStmtContext>(0);
}

HogQLParser::ForStmtContext* HogQLParser::StatementContext::forStmt() {
  return getRuleContext<HogQLParser::ForStmtContext>(0);
}

HogQLParser::FuncStmtContext* HogQLParser::StatementContext::funcStmt() {
  return getRuleContext<HogQLParser::FuncStmtContext>(0);
}

HogQLParser::VarAssignmentContext* HogQLParser::StatementContext::varAssignment() {
  return getRuleContext<HogQLParser::VarAssignmentContext>(0);
}

HogQLParser::BlockContext* HogQLParser::StatementContext::block() {
  return getRuleContext<HogQLParser::BlockContext>(0);
}

HogQLParser::ExprStmtContext* HogQLParser::StatementContext::exprStmt() {
  return getRuleContext<HogQLParser::ExprStmtContext>(0);
}

HogQLParser::EmptyStmtContext* HogQLParser::StatementContext::emptyStmt() {
  return getRuleContext<HogQLParser::EmptyStmtContext>(0);
}


size_t HogQLParser::StatementContext::getRuleIndex() const {
  return HogQLParser::RuleStatement;
}


std::any HogQLParser::StatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitStatement(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::StatementContext* HogQLParser::statement() {
  StatementContext *_localctx = _tracker.createInstance<StatementContext>(_ctx, getState());
  enterRule(_localctx, 10, HogQLParser::RuleStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(209);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 5, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(200);
      returnStmt();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(201);
      ifStmt();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(202);
      whileStmt();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(203);
      forStmt();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(204);
      funcStmt();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(205);
      varAssignment();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(206);
      block();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(207);
      exprStmt();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(208);
      emptyStmt();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReturnStmtContext ------------------------------------------------------------------

HogQLParser::ReturnStmtContext::ReturnStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::ReturnStmtContext::RETURN() {
  return getToken(HogQLParser::RETURN, 0);
}

HogQLParser::ExpressionContext* HogQLParser::ReturnStmtContext::expression() {
  return getRuleContext<HogQLParser::ExpressionContext>(0);
}

tree::TerminalNode* HogQLParser::ReturnStmtContext::SEMICOLON() {
  return getToken(HogQLParser::SEMICOLON, 0);
}


size_t HogQLParser::ReturnStmtContext::getRuleIndex() const {
  return HogQLParser::RuleReturnStmt;
}


std::any HogQLParser::ReturnStmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitReturnStmt(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::ReturnStmtContext* HogQLParser::returnStmt() {
  ReturnStmtContext *_localctx = _tracker.createInstance<ReturnStmtContext>(_ctx, getState());
  enterRule(_localctx, 12, HogQLParser::RuleReturnStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(211);
    match(HogQLParser::RETURN);
    setState(213);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 6, _ctx)) {
    case 1: {
      setState(212);
      expression();
      break;
    }

    default:
      break;
    }
    setState(216);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 7, _ctx)) {
    case 1: {
      setState(215);
      match(HogQLParser::SEMICOLON);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IfStmtContext ------------------------------------------------------------------

HogQLParser::IfStmtContext::IfStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::IfStmtContext::IF() {
  return getToken(HogQLParser::IF, 0);
}

tree::TerminalNode* HogQLParser::IfStmtContext::LPAREN() {
  return getToken(HogQLParser::LPAREN, 0);
}

HogQLParser::ExpressionContext* HogQLParser::IfStmtContext::expression() {
  return getRuleContext<HogQLParser::ExpressionContext>(0);
}

tree::TerminalNode* HogQLParser::IfStmtContext::RPAREN() {
  return getToken(HogQLParser::RPAREN, 0);
}

std::vector<HogQLParser::StatementContext *> HogQLParser::IfStmtContext::statement() {
  return getRuleContexts<HogQLParser::StatementContext>();
}

HogQLParser::StatementContext* HogQLParser::IfStmtContext::statement(size_t i) {
  return getRuleContext<HogQLParser::StatementContext>(i);
}

tree::TerminalNode* HogQLParser::IfStmtContext::ELSE() {
  return getToken(HogQLParser::ELSE, 0);
}


size_t HogQLParser::IfStmtContext::getRuleIndex() const {
  return HogQLParser::RuleIfStmt;
}


std::any HogQLParser::IfStmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitIfStmt(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::IfStmtContext* HogQLParser::ifStmt() {
  IfStmtContext *_localctx = _tracker.createInstance<IfStmtContext>(_ctx, getState());
  enterRule(_localctx, 14, HogQLParser::RuleIfStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(218);
    match(HogQLParser::IF);
    setState(219);
    match(HogQLParser::LPAREN);
    setState(220);
    expression();
    setState(221);
    match(HogQLParser::RPAREN);
    setState(222);
    statement();
    setState(225);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 8, _ctx)) {
    case 1: {
      setState(223);
      match(HogQLParser::ELSE);
      setState(224);
      statement();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WhileStmtContext ------------------------------------------------------------------

HogQLParser::WhileStmtContext::WhileStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::WhileStmtContext::WHILE() {
  return getToken(HogQLParser::WHILE, 0);
}

tree::TerminalNode* HogQLParser::WhileStmtContext::LPAREN() {
  return getToken(HogQLParser::LPAREN, 0);
}

HogQLParser::ExpressionContext* HogQLParser::WhileStmtContext::expression() {
  return getRuleContext<HogQLParser::ExpressionContext>(0);
}

tree::TerminalNode* HogQLParser::WhileStmtContext::RPAREN() {
  return getToken(HogQLParser::RPAREN, 0);
}

HogQLParser::StatementContext* HogQLParser::WhileStmtContext::statement() {
  return getRuleContext<HogQLParser::StatementContext>(0);
}

tree::TerminalNode* HogQLParser::WhileStmtContext::SEMICOLON() {
  return getToken(HogQLParser::SEMICOLON, 0);
}


size_t HogQLParser::WhileStmtContext::getRuleIndex() const {
  return HogQLParser::RuleWhileStmt;
}


std::any HogQLParser::WhileStmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitWhileStmt(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::WhileStmtContext* HogQLParser::whileStmt() {
  WhileStmtContext *_localctx = _tracker.createInstance<WhileStmtContext>(_ctx, getState());
  enterRule(_localctx, 16, HogQLParser::RuleWhileStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(227);
    match(HogQLParser::WHILE);
    setState(228);
    match(HogQLParser::LPAREN);
    setState(229);
    expression();
    setState(230);
    match(HogQLParser::RPAREN);
    setState(231);
    statement();
    setState(233);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 9, _ctx)) {
    case 1: {
      setState(232);
      match(HogQLParser::SEMICOLON);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ForStmtContext ------------------------------------------------------------------

HogQLParser::ForStmtContext::ForStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::ForStmtContext::FOR() {
  return getToken(HogQLParser::FOR, 0);
}

tree::TerminalNode* HogQLParser::ForStmtContext::LPAREN() {
  return getToken(HogQLParser::LPAREN, 0);
}

std::vector<tree::TerminalNode *> HogQLParser::ForStmtContext::SEMICOLON() {
  return getTokens(HogQLParser::SEMICOLON);
}

tree::TerminalNode* HogQLParser::ForStmtContext::SEMICOLON(size_t i) {
  return getToken(HogQLParser::SEMICOLON, i);
}

tree::TerminalNode* HogQLParser::ForStmtContext::RPAREN() {
  return getToken(HogQLParser::RPAREN, 0);
}

HogQLParser::StatementContext* HogQLParser::ForStmtContext::statement() {
  return getRuleContext<HogQLParser::StatementContext>(0);
}

std::vector<HogQLParser::VarDeclContext *> HogQLParser::ForStmtContext::varDecl() {
  return getRuleContexts<HogQLParser::VarDeclContext>();
}

HogQLParser::VarDeclContext* HogQLParser::ForStmtContext::varDecl(size_t i) {
  return getRuleContext<HogQLParser::VarDeclContext>(i);
}

std::vector<HogQLParser::VarAssignmentContext *> HogQLParser::ForStmtContext::varAssignment() {
  return getRuleContexts<HogQLParser::VarAssignmentContext>();
}

HogQLParser::VarAssignmentContext* HogQLParser::ForStmtContext::varAssignment(size_t i) {
  return getRuleContext<HogQLParser::VarAssignmentContext>(i);
}

std::vector<HogQLParser::ExpressionContext *> HogQLParser::ForStmtContext::expression() {
  return getRuleContexts<HogQLParser::ExpressionContext>();
}

HogQLParser::ExpressionContext* HogQLParser::ForStmtContext::expression(size_t i) {
  return getRuleContext<HogQLParser::ExpressionContext>(i);
}


size_t HogQLParser::ForStmtContext::getRuleIndex() const {
  return HogQLParser::RuleForStmt;
}


std::any HogQLParser::ForStmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitForStmt(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::ForStmtContext* HogQLParser::forStmt() {
  ForStmtContext *_localctx = _tracker.createInstance<ForStmtContext>(_ctx, getState());
  enterRule(_localctx, 18, HogQLParser::RuleForStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(235);
    match(HogQLParser::FOR);
    setState(236);
    match(HogQLParser::LPAREN);
    setState(240);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 10, _ctx)) {
    case 1: {
      setState(237);
      antlrcpp::downCast<ForStmtContext *>(_localctx)->initializerVarDeclr = varDecl();
      break;
    }

    case 2: {
      setState(238);
      antlrcpp::downCast<ForStmtContext *>(_localctx)->initializerVarAssignment = varAssignment();
      break;
    }

    case 3: {
      setState(239);
      antlrcpp::downCast<ForStmtContext *>(_localctx)->initializerExpression = expression();
      break;
    }

    default:
      break;
    }
    setState(242);
    match(HogQLParser::SEMICOLON);
    setState(244);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -1125900443713538) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & 8076106347046764543) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 128)) & 577) != 0)) {
      setState(243);
      antlrcpp::downCast<ForStmtContext *>(_localctx)->condition = expression();
    }
    setState(246);
    match(HogQLParser::SEMICOLON);
    setState(250);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 12, _ctx)) {
    case 1: {
      setState(247);
      antlrcpp::downCast<ForStmtContext *>(_localctx)->incrementVarDeclr = varDecl();
      break;
    }

    case 2: {
      setState(248);
      antlrcpp::downCast<ForStmtContext *>(_localctx)->incrementVarAssignment = varAssignment();
      break;
    }

    case 3: {
      setState(249);
      antlrcpp::downCast<ForStmtContext *>(_localctx)->incrementExpression = expression();
      break;
    }

    default:
      break;
    }
    setState(252);
    match(HogQLParser::RPAREN);
    setState(253);
    statement();
    setState(255);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 13, _ctx)) {
    case 1: {
      setState(254);
      match(HogQLParser::SEMICOLON);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FuncStmtContext ------------------------------------------------------------------

HogQLParser::FuncStmtContext::FuncStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::FuncStmtContext::FN() {
  return getToken(HogQLParser::FN, 0);
}

HogQLParser::IdentifierContext* HogQLParser::FuncStmtContext::identifier() {
  return getRuleContext<HogQLParser::IdentifierContext>(0);
}

tree::TerminalNode* HogQLParser::FuncStmtContext::LPAREN() {
  return getToken(HogQLParser::LPAREN, 0);
}

tree::TerminalNode* HogQLParser::FuncStmtContext::RPAREN() {
  return getToken(HogQLParser::RPAREN, 0);
}

HogQLParser::BlockContext* HogQLParser::FuncStmtContext::block() {
  return getRuleContext<HogQLParser::BlockContext>(0);
}

HogQLParser::IdentifierListContext* HogQLParser::FuncStmtContext::identifierList() {
  return getRuleContext<HogQLParser::IdentifierListContext>(0);
}


size_t HogQLParser::FuncStmtContext::getRuleIndex() const {
  return HogQLParser::RuleFuncStmt;
}


std::any HogQLParser::FuncStmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitFuncStmt(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::FuncStmtContext* HogQLParser::funcStmt() {
  FuncStmtContext *_localctx = _tracker.createInstance<FuncStmtContext>(_ctx, getState());
  enterRule(_localctx, 20, HogQLParser::RuleFuncStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(257);
    match(HogQLParser::FN);
    setState(258);
    identifier();
    setState(259);
    match(HogQLParser::LPAREN);
    setState(261);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -181272084561788930) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & 201863462911) != 0)) {
      setState(260);
      identifierList();
    }
    setState(263);
    match(HogQLParser::RPAREN);
    setState(264);
    block();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VarAssignmentContext ------------------------------------------------------------------

HogQLParser::VarAssignmentContext::VarAssignmentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<HogQLParser::ExpressionContext *> HogQLParser::VarAssignmentContext::expression() {
  return getRuleContexts<HogQLParser::ExpressionContext>();
}

HogQLParser::ExpressionContext* HogQLParser::VarAssignmentContext::expression(size_t i) {
  return getRuleContext<HogQLParser::ExpressionContext>(i);
}

tree::TerminalNode* HogQLParser::VarAssignmentContext::COLON() {
  return getToken(HogQLParser::COLON, 0);
}

tree::TerminalNode* HogQLParser::VarAssignmentContext::EQ_SINGLE() {
  return getToken(HogQLParser::EQ_SINGLE, 0);
}


size_t HogQLParser::VarAssignmentContext::getRuleIndex() const {
  return HogQLParser::RuleVarAssignment;
}


std::any HogQLParser::VarAssignmentContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitVarAssignment(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::VarAssignmentContext* HogQLParser::varAssignment() {
  VarAssignmentContext *_localctx = _tracker.createInstance<VarAssignmentContext>(_ctx, getState());
  enterRule(_localctx, 22, HogQLParser::RuleVarAssignment);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(266);
    expression();
    setState(267);
    match(HogQLParser::COLON);
    setState(268);
    match(HogQLParser::EQ_SINGLE);
    setState(269);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExprStmtContext ------------------------------------------------------------------

HogQLParser::ExprStmtContext::ExprStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HogQLParser::ExpressionContext* HogQLParser::ExprStmtContext::expression() {
  return getRuleContext<HogQLParser::ExpressionContext>(0);
}

tree::TerminalNode* HogQLParser::ExprStmtContext::SEMICOLON() {
  return getToken(HogQLParser::SEMICOLON, 0);
}


size_t HogQLParser::ExprStmtContext::getRuleIndex() const {
  return HogQLParser::RuleExprStmt;
}


std::any HogQLParser::ExprStmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitExprStmt(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::ExprStmtContext* HogQLParser::exprStmt() {
  ExprStmtContext *_localctx = _tracker.createInstance<ExprStmtContext>(_ctx, getState());
  enterRule(_localctx, 24, HogQLParser::RuleExprStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(271);
    expression();
    setState(273);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 15, _ctx)) {
    case 1: {
      setState(272);
      match(HogQLParser::SEMICOLON);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EmptyStmtContext ------------------------------------------------------------------

HogQLParser::EmptyStmtContext::EmptyStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::EmptyStmtContext::SEMICOLON() {
  return getToken(HogQLParser::SEMICOLON, 0);
}


size_t HogQLParser::EmptyStmtContext::getRuleIndex() const {
  return HogQLParser::RuleEmptyStmt;
}


std::any HogQLParser::EmptyStmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitEmptyStmt(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::EmptyStmtContext* HogQLParser::emptyStmt() {
  EmptyStmtContext *_localctx = _tracker.createInstance<EmptyStmtContext>(_ctx, getState());
  enterRule(_localctx, 26, HogQLParser::RuleEmptyStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(275);
    match(HogQLParser::SEMICOLON);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BlockContext ------------------------------------------------------------------

HogQLParser::BlockContext::BlockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::BlockContext::LBRACE() {
  return getToken(HogQLParser::LBRACE, 0);
}

tree::TerminalNode* HogQLParser::BlockContext::RBRACE() {
  return getToken(HogQLParser::RBRACE, 0);
}

std::vector<HogQLParser::DeclarationContext *> HogQLParser::BlockContext::declaration() {
  return getRuleContexts<HogQLParser::DeclarationContext>();
}

HogQLParser::DeclarationContext* HogQLParser::BlockContext::declaration(size_t i) {
  return getRuleContext<HogQLParser::DeclarationContext>(i);
}


size_t HogQLParser::BlockContext::getRuleIndex() const {
  return HogQLParser::RuleBlock;
}


std::any HogQLParser::BlockContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitBlock(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::BlockContext* HogQLParser::block() {
  BlockContext *_localctx = _tracker.createInstance<BlockContext>(_ctx, getState());
  enterRule(_localctx, 28, HogQLParser::RuleBlock);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(277);
    match(HogQLParser::LBRACE);
    setState(281);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -2) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & 8076106351341731839) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 128)) & 131649) != 0)) {
      setState(278);
      declaration();
      setState(283);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(284);
    match(HogQLParser::RBRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KvPairContext ------------------------------------------------------------------

HogQLParser::KvPairContext::KvPairContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<HogQLParser::ExpressionContext *> HogQLParser::KvPairContext::expression() {
  return getRuleContexts<HogQLParser::ExpressionContext>();
}

HogQLParser::ExpressionContext* HogQLParser::KvPairContext::expression(size_t i) {
  return getRuleContext<HogQLParser::ExpressionContext>(i);
}

tree::TerminalNode* HogQLParser::KvPairContext::COLON() {
  return getToken(HogQLParser::COLON, 0);
}


size_t HogQLParser::KvPairContext::getRuleIndex() const {
  return HogQLParser::RuleKvPair;
}


std::any HogQLParser::KvPairContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitKvPair(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::KvPairContext* HogQLParser::kvPair() {
  KvPairContext *_localctx = _tracker.createInstance<KvPairContext>(_ctx, getState());
  enterRule(_localctx, 30, HogQLParser::RuleKvPair);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(286);
    expression();
    setState(287);
    match(HogQLParser::COLON);
    setState(288);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KvPairListContext ------------------------------------------------------------------

HogQLParser::KvPairListContext::KvPairListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<HogQLParser::KvPairContext *> HogQLParser::KvPairListContext::kvPair() {
  return getRuleContexts<HogQLParser::KvPairContext>();
}

HogQLParser::KvPairContext* HogQLParser::KvPairListContext::kvPair(size_t i) {
  return getRuleContext<HogQLParser::KvPairContext>(i);
}

std::vector<tree::TerminalNode *> HogQLParser::KvPairListContext::COMMA() {
  return getTokens(HogQLParser::COMMA);
}

tree::TerminalNode* HogQLParser::KvPairListContext::COMMA(size_t i) {
  return getToken(HogQLParser::COMMA, i);
}


size_t HogQLParser::KvPairListContext::getRuleIndex() const {
  return HogQLParser::RuleKvPairList;
}


std::any HogQLParser::KvPairListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitKvPairList(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::KvPairListContext* HogQLParser::kvPairList() {
  KvPairListContext *_localctx = _tracker.createInstance<KvPairListContext>(_ctx, getState());
  enterRule(_localctx, 32, HogQLParser::RuleKvPairList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(290);
    kvPair();
    setState(295);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 17, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(291);
        match(HogQLParser::COMMA);
        setState(292);
        kvPair(); 
      }
      setState(297);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 17, _ctx);
    }
    setState(299);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HogQLParser::COMMA) {
      setState(298);
      match(HogQLParser::COMMA);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SelectContext ------------------------------------------------------------------

HogQLParser::SelectContext::SelectContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::SelectContext::EOF() {
  return getToken(HogQLParser::EOF, 0);
}

HogQLParser::SelectUnionStmtContext* HogQLParser::SelectContext::selectUnionStmt() {
  return getRuleContext<HogQLParser::SelectUnionStmtContext>(0);
}

HogQLParser::SelectStmtContext* HogQLParser::SelectContext::selectStmt() {
  return getRuleContext<HogQLParser::SelectStmtContext>(0);
}

HogQLParser::HogqlxTagElementContext* HogQLParser::SelectContext::hogqlxTagElement() {
  return getRuleContext<HogQLParser::HogqlxTagElementContext>(0);
}


size_t HogQLParser::SelectContext::getRuleIndex() const {
  return HogQLParser::RuleSelect;
}


std::any HogQLParser::SelectContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitSelect(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::SelectContext* HogQLParser::select() {
  SelectContext *_localctx = _tracker.createInstance<SelectContext>(_ctx, getState());
  enterRule(_localctx, 34, HogQLParser::RuleSelect);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(304);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 19, _ctx)) {
    case 1: {
      setState(301);
      selectUnionStmt();
      break;
    }

    case 2: {
      setState(302);
      selectStmt();
      break;
    }

    case 3: {
      setState(303);
      hogqlxTagElement();
      break;
    }

    default:
      break;
    }
    setState(306);
    match(HogQLParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SelectUnionStmtContext ------------------------------------------------------------------

HogQLParser::SelectUnionStmtContext::SelectUnionStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<HogQLParser::SelectStmtWithParensContext *> HogQLParser::SelectUnionStmtContext::selectStmtWithParens() {
  return getRuleContexts<HogQLParser::SelectStmtWithParensContext>();
}

HogQLParser::SelectStmtWithParensContext* HogQLParser::SelectUnionStmtContext::selectStmtWithParens(size_t i) {
  return getRuleContext<HogQLParser::SelectStmtWithParensContext>(i);
}

std::vector<tree::TerminalNode *> HogQLParser::SelectUnionStmtContext::UNION() {
  return getTokens(HogQLParser::UNION);
}

tree::TerminalNode* HogQLParser::SelectUnionStmtContext::UNION(size_t i) {
  return getToken(HogQLParser::UNION, i);
}

std::vector<tree::TerminalNode *> HogQLParser::SelectUnionStmtContext::ALL() {
  return getTokens(HogQLParser::ALL);
}

tree::TerminalNode* HogQLParser::SelectUnionStmtContext::ALL(size_t i) {
  return getToken(HogQLParser::ALL, i);
}


size_t HogQLParser::SelectUnionStmtContext::getRuleIndex() const {
  return HogQLParser::RuleSelectUnionStmt;
}


std::any HogQLParser::SelectUnionStmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitSelectUnionStmt(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::SelectUnionStmtContext* HogQLParser::selectUnionStmt() {
  SelectUnionStmtContext *_localctx = _tracker.createInstance<SelectUnionStmtContext>(_ctx, getState());
  enterRule(_localctx, 36, HogQLParser::RuleSelectUnionStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(308);
    selectStmtWithParens();
    setState(314);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == HogQLParser::UNION) {
      setState(309);
      match(HogQLParser::UNION);
      setState(310);
      match(HogQLParser::ALL);
      setState(311);
      selectStmtWithParens();
      setState(316);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SelectStmtWithParensContext ------------------------------------------------------------------

HogQLParser::SelectStmtWithParensContext::SelectStmtWithParensContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HogQLParser::SelectStmtContext* HogQLParser::SelectStmtWithParensContext::selectStmt() {
  return getRuleContext<HogQLParser::SelectStmtContext>(0);
}

tree::TerminalNode* HogQLParser::SelectStmtWithParensContext::LPAREN() {
  return getToken(HogQLParser::LPAREN, 0);
}

HogQLParser::SelectUnionStmtContext* HogQLParser::SelectStmtWithParensContext::selectUnionStmt() {
  return getRuleContext<HogQLParser::SelectUnionStmtContext>(0);
}

tree::TerminalNode* HogQLParser::SelectStmtWithParensContext::RPAREN() {
  return getToken(HogQLParser::RPAREN, 0);
}

HogQLParser::PlaceholderContext* HogQLParser::SelectStmtWithParensContext::placeholder() {
  return getRuleContext<HogQLParser::PlaceholderContext>(0);
}


size_t HogQLParser::SelectStmtWithParensContext::getRuleIndex() const {
  return HogQLParser::RuleSelectStmtWithParens;
}


std::any HogQLParser::SelectStmtWithParensContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitSelectStmtWithParens(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::SelectStmtWithParensContext* HogQLParser::selectStmtWithParens() {
  SelectStmtWithParensContext *_localctx = _tracker.createInstance<SelectStmtWithParensContext>(_ctx, getState());
  enterRule(_localctx, 38, HogQLParser::RuleSelectStmtWithParens);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(323);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case HogQLParser::SELECT:
      case HogQLParser::WITH: {
        enterOuterAlt(_localctx, 1);
        setState(317);
        selectStmt();
        break;
      }

      case HogQLParser::LPAREN: {
        enterOuterAlt(_localctx, 2);
        setState(318);
        match(HogQLParser::LPAREN);
        setState(319);
        selectUnionStmt();
        setState(320);
        match(HogQLParser::RPAREN);
        break;
      }

      case HogQLParser::LBRACE: {
        enterOuterAlt(_localctx, 3);
        setState(322);
        placeholder();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SelectStmtContext ------------------------------------------------------------------

HogQLParser::SelectStmtContext::SelectStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::SelectStmtContext::SELECT() {
  return getToken(HogQLParser::SELECT, 0);
}

HogQLParser::ColumnExprListContext* HogQLParser::SelectStmtContext::columnExprList() {
  return getRuleContext<HogQLParser::ColumnExprListContext>(0);
}

tree::TerminalNode* HogQLParser::SelectStmtContext::DISTINCT() {
  return getToken(HogQLParser::DISTINCT, 0);
}

HogQLParser::TopClauseContext* HogQLParser::SelectStmtContext::topClause() {
  return getRuleContext<HogQLParser::TopClauseContext>(0);
}

HogQLParser::ArrayJoinClauseContext* HogQLParser::SelectStmtContext::arrayJoinClause() {
  return getRuleContext<HogQLParser::ArrayJoinClauseContext>(0);
}

HogQLParser::PrewhereClauseContext* HogQLParser::SelectStmtContext::prewhereClause() {
  return getRuleContext<HogQLParser::PrewhereClauseContext>(0);
}

HogQLParser::GroupByClauseContext* HogQLParser::SelectStmtContext::groupByClause() {
  return getRuleContext<HogQLParser::GroupByClauseContext>(0);
}

std::vector<tree::TerminalNode *> HogQLParser::SelectStmtContext::WITH() {
  return getTokens(HogQLParser::WITH);
}

tree::TerminalNode* HogQLParser::SelectStmtContext::WITH(size_t i) {
  return getToken(HogQLParser::WITH, i);
}

tree::TerminalNode* HogQLParser::SelectStmtContext::TOTALS() {
  return getToken(HogQLParser::TOTALS, 0);
}

HogQLParser::HavingClauseContext* HogQLParser::SelectStmtContext::havingClause() {
  return getRuleContext<HogQLParser::HavingClauseContext>(0);
}

HogQLParser::WindowClauseContext* HogQLParser::SelectStmtContext::windowClause() {
  return getRuleContext<HogQLParser::WindowClauseContext>(0);
}

HogQLParser::OrderByClauseContext* HogQLParser::SelectStmtContext::orderByClause() {
  return getRuleContext<HogQLParser::OrderByClauseContext>(0);
}

HogQLParser::LimitAndOffsetClauseContext* HogQLParser::SelectStmtContext::limitAndOffsetClause() {
  return getRuleContext<HogQLParser::LimitAndOffsetClauseContext>(0);
}

HogQLParser::OffsetOnlyClauseContext* HogQLParser::SelectStmtContext::offsetOnlyClause() {
  return getRuleContext<HogQLParser::OffsetOnlyClauseContext>(0);
}

HogQLParser::SettingsClauseContext* HogQLParser::SelectStmtContext::settingsClause() {
  return getRuleContext<HogQLParser::SettingsClauseContext>(0);
}

HogQLParser::WithClauseContext* HogQLParser::SelectStmtContext::withClause() {
  return getRuleContext<HogQLParser::WithClauseContext>(0);
}

HogQLParser::FromClauseContext* HogQLParser::SelectStmtContext::fromClause() {
  return getRuleContext<HogQLParser::FromClauseContext>(0);
}

HogQLParser::WhereClauseContext* HogQLParser::SelectStmtContext::whereClause() {
  return getRuleContext<HogQLParser::WhereClauseContext>(0);
}

tree::TerminalNode* HogQLParser::SelectStmtContext::CUBE() {
  return getToken(HogQLParser::CUBE, 0);
}

tree::TerminalNode* HogQLParser::SelectStmtContext::ROLLUP() {
  return getToken(HogQLParser::ROLLUP, 0);
}


size_t HogQLParser::SelectStmtContext::getRuleIndex() const {
  return HogQLParser::RuleSelectStmt;
}


std::any HogQLParser::SelectStmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitSelectStmt(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::SelectStmtContext* HogQLParser::selectStmt() {
  SelectStmtContext *_localctx = _tracker.createInstance<SelectStmtContext>(_ctx, getState());
  enterRule(_localctx, 40, HogQLParser::RuleSelectStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(326);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HogQLParser::WITH) {
      setState(325);
      antlrcpp::downCast<SelectStmtContext *>(_localctx)->with = withClause();
    }
    setState(328);
    match(HogQLParser::SELECT);
    setState(330);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 23, _ctx)) {
    case 1: {
      setState(329);
      match(HogQLParser::DISTINCT);
      break;
    }

    default:
      break;
    }
    setState(333);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 24, _ctx)) {
    case 1: {
      setState(332);
      topClause();
      break;
    }

    default:
      break;
    }
    setState(335);
    antlrcpp::downCast<SelectStmtContext *>(_localctx)->columns = columnExprList();
    setState(337);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HogQLParser::FROM) {
      setState(336);
      antlrcpp::downCast<SelectStmtContext *>(_localctx)->from = fromClause();
    }
    setState(340);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 567347999932448) != 0)) {
      setState(339);
      arrayJoinClause();
    }
    setState(343);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HogQLParser::PREWHERE) {
      setState(342);
      prewhereClause();
    }
    setState(346);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HogQLParser::WHERE) {
      setState(345);
      antlrcpp::downCast<SelectStmtContext *>(_localctx)->where = whereClause();
    }
    setState(349);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HogQLParser::GROUP) {
      setState(348);
      groupByClause();
    }
    setState(353);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 30, _ctx)) {
    case 1: {
      setState(351);
      match(HogQLParser::WITH);
      setState(352);
      _la = _input->LA(1);
      if (!(_la == HogQLParser::CUBE

      || _la == HogQLParser::ROLLUP)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    default:
      break;
    }
    setState(357);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HogQLParser::WITH) {
      setState(355);
      match(HogQLParser::WITH);
      setState(356);
      match(HogQLParser::TOTALS);
    }
    setState(360);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HogQLParser::HAVING) {
      setState(359);
      havingClause();
    }
    setState(363);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HogQLParser::WINDOW) {
      setState(362);
      windowClause();
    }
    setState(366);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HogQLParser::ORDER) {
      setState(365);
      orderByClause();
    }
    setState(370);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case HogQLParser::LIMIT: {
        setState(368);
        limitAndOffsetClause();
        break;
      }

      case HogQLParser::OFFSET: {
        setState(369);
        offsetOnlyClause();
        break;
      }

      case HogQLParser::EOF:
      case HogQLParser::SETTINGS:
      case HogQLParser::UNION:
      case HogQLParser::RPAREN: {
        break;
      }

    default:
      break;
    }
    setState(373);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HogQLParser::SETTINGS) {
      setState(372);
      settingsClause();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WithClauseContext ------------------------------------------------------------------

HogQLParser::WithClauseContext::WithClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::WithClauseContext::WITH() {
  return getToken(HogQLParser::WITH, 0);
}

HogQLParser::WithExprListContext* HogQLParser::WithClauseContext::withExprList() {
  return getRuleContext<HogQLParser::WithExprListContext>(0);
}


size_t HogQLParser::WithClauseContext::getRuleIndex() const {
  return HogQLParser::RuleWithClause;
}


std::any HogQLParser::WithClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitWithClause(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::WithClauseContext* HogQLParser::withClause() {
  WithClauseContext *_localctx = _tracker.createInstance<WithClauseContext>(_ctx, getState());
  enterRule(_localctx, 42, HogQLParser::RuleWithClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(375);
    match(HogQLParser::WITH);
    setState(376);
    withExprList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TopClauseContext ------------------------------------------------------------------

HogQLParser::TopClauseContext::TopClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::TopClauseContext::TOP() {
  return getToken(HogQLParser::TOP, 0);
}

tree::TerminalNode* HogQLParser::TopClauseContext::DECIMAL_LITERAL() {
  return getToken(HogQLParser::DECIMAL_LITERAL, 0);
}

tree::TerminalNode* HogQLParser::TopClauseContext::WITH() {
  return getToken(HogQLParser::WITH, 0);
}

tree::TerminalNode* HogQLParser::TopClauseContext::TIES() {
  return getToken(HogQLParser::TIES, 0);
}


size_t HogQLParser::TopClauseContext::getRuleIndex() const {
  return HogQLParser::RuleTopClause;
}


std::any HogQLParser::TopClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitTopClause(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::TopClauseContext* HogQLParser::topClause() {
  TopClauseContext *_localctx = _tracker.createInstance<TopClauseContext>(_ctx, getState());
  enterRule(_localctx, 44, HogQLParser::RuleTopClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(378);
    match(HogQLParser::TOP);
    setState(379);
    match(HogQLParser::DECIMAL_LITERAL);
    setState(382);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 37, _ctx)) {
    case 1: {
      setState(380);
      match(HogQLParser::WITH);
      setState(381);
      match(HogQLParser::TIES);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FromClauseContext ------------------------------------------------------------------

HogQLParser::FromClauseContext::FromClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::FromClauseContext::FROM() {
  return getToken(HogQLParser::FROM, 0);
}

HogQLParser::JoinExprContext* HogQLParser::FromClauseContext::joinExpr() {
  return getRuleContext<HogQLParser::JoinExprContext>(0);
}


size_t HogQLParser::FromClauseContext::getRuleIndex() const {
  return HogQLParser::RuleFromClause;
}


std::any HogQLParser::FromClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitFromClause(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::FromClauseContext* HogQLParser::fromClause() {
  FromClauseContext *_localctx = _tracker.createInstance<FromClauseContext>(_ctx, getState());
  enterRule(_localctx, 46, HogQLParser::RuleFromClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(384);
    match(HogQLParser::FROM);
    setState(385);
    joinExpr(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArrayJoinClauseContext ------------------------------------------------------------------

HogQLParser::ArrayJoinClauseContext::ArrayJoinClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::ArrayJoinClauseContext::ARRAY() {
  return getToken(HogQLParser::ARRAY, 0);
}

tree::TerminalNode* HogQLParser::ArrayJoinClauseContext::JOIN() {
  return getToken(HogQLParser::JOIN, 0);
}

HogQLParser::ColumnExprListContext* HogQLParser::ArrayJoinClauseContext::columnExprList() {
  return getRuleContext<HogQLParser::ColumnExprListContext>(0);
}

tree::TerminalNode* HogQLParser::ArrayJoinClauseContext::LEFT() {
  return getToken(HogQLParser::LEFT, 0);
}

tree::TerminalNode* HogQLParser::ArrayJoinClauseContext::INNER() {
  return getToken(HogQLParser::INNER, 0);
}


size_t HogQLParser::ArrayJoinClauseContext::getRuleIndex() const {
  return HogQLParser::RuleArrayJoinClause;
}


std::any HogQLParser::ArrayJoinClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitArrayJoinClause(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::ArrayJoinClauseContext* HogQLParser::arrayJoinClause() {
  ArrayJoinClauseContext *_localctx = _tracker.createInstance<ArrayJoinClauseContext>(_ctx, getState());
  enterRule(_localctx, 48, HogQLParser::RuleArrayJoinClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(388);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HogQLParser::INNER

    || _la == HogQLParser::LEFT) {
      setState(387);
      _la = _input->LA(1);
      if (!(_la == HogQLParser::INNER

      || _la == HogQLParser::LEFT)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(390);
    match(HogQLParser::ARRAY);
    setState(391);
    match(HogQLParser::JOIN);
    setState(392);
    columnExprList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WindowClauseContext ------------------------------------------------------------------

HogQLParser::WindowClauseContext::WindowClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::WindowClauseContext::WINDOW() {
  return getToken(HogQLParser::WINDOW, 0);
}

std::vector<HogQLParser::IdentifierContext *> HogQLParser::WindowClauseContext::identifier() {
  return getRuleContexts<HogQLParser::IdentifierContext>();
}

HogQLParser::IdentifierContext* HogQLParser::WindowClauseContext::identifier(size_t i) {
  return getRuleContext<HogQLParser::IdentifierContext>(i);
}

std::vector<tree::TerminalNode *> HogQLParser::WindowClauseContext::AS() {
  return getTokens(HogQLParser::AS);
}

tree::TerminalNode* HogQLParser::WindowClauseContext::AS(size_t i) {
  return getToken(HogQLParser::AS, i);
}

std::vector<tree::TerminalNode *> HogQLParser::WindowClauseContext::LPAREN() {
  return getTokens(HogQLParser::LPAREN);
}

tree::TerminalNode* HogQLParser::WindowClauseContext::LPAREN(size_t i) {
  return getToken(HogQLParser::LPAREN, i);
}

std::vector<HogQLParser::WindowExprContext *> HogQLParser::WindowClauseContext::windowExpr() {
  return getRuleContexts<HogQLParser::WindowExprContext>();
}

HogQLParser::WindowExprContext* HogQLParser::WindowClauseContext::windowExpr(size_t i) {
  return getRuleContext<HogQLParser::WindowExprContext>(i);
}

std::vector<tree::TerminalNode *> HogQLParser::WindowClauseContext::RPAREN() {
  return getTokens(HogQLParser::RPAREN);
}

tree::TerminalNode* HogQLParser::WindowClauseContext::RPAREN(size_t i) {
  return getToken(HogQLParser::RPAREN, i);
}

std::vector<tree::TerminalNode *> HogQLParser::WindowClauseContext::COMMA() {
  return getTokens(HogQLParser::COMMA);
}

tree::TerminalNode* HogQLParser::WindowClauseContext::COMMA(size_t i) {
  return getToken(HogQLParser::COMMA, i);
}


size_t HogQLParser::WindowClauseContext::getRuleIndex() const {
  return HogQLParser::RuleWindowClause;
}


std::any HogQLParser::WindowClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitWindowClause(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::WindowClauseContext* HogQLParser::windowClause() {
  WindowClauseContext *_localctx = _tracker.createInstance<WindowClauseContext>(_ctx, getState());
  enterRule(_localctx, 50, HogQLParser::RuleWindowClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(394);
    match(HogQLParser::WINDOW);
    setState(395);
    identifier();
    setState(396);
    match(HogQLParser::AS);
    setState(397);
    match(HogQLParser::LPAREN);
    setState(398);
    windowExpr();
    setState(399);
    match(HogQLParser::RPAREN);
    setState(409);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == HogQLParser::COMMA) {
      setState(400);
      match(HogQLParser::COMMA);
      setState(401);
      identifier();
      setState(402);
      match(HogQLParser::AS);
      setState(403);
      match(HogQLParser::LPAREN);
      setState(404);
      windowExpr();
      setState(405);
      match(HogQLParser::RPAREN);
      setState(411);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PrewhereClauseContext ------------------------------------------------------------------

HogQLParser::PrewhereClauseContext::PrewhereClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::PrewhereClauseContext::PREWHERE() {
  return getToken(HogQLParser::PREWHERE, 0);
}

HogQLParser::ColumnExprContext* HogQLParser::PrewhereClauseContext::columnExpr() {
  return getRuleContext<HogQLParser::ColumnExprContext>(0);
}


size_t HogQLParser::PrewhereClauseContext::getRuleIndex() const {
  return HogQLParser::RulePrewhereClause;
}


std::any HogQLParser::PrewhereClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitPrewhereClause(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::PrewhereClauseContext* HogQLParser::prewhereClause() {
  PrewhereClauseContext *_localctx = _tracker.createInstance<PrewhereClauseContext>(_ctx, getState());
  enterRule(_localctx, 52, HogQLParser::RulePrewhereClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(412);
    match(HogQLParser::PREWHERE);
    setState(413);
    columnExpr(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WhereClauseContext ------------------------------------------------------------------

HogQLParser::WhereClauseContext::WhereClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::WhereClauseContext::WHERE() {
  return getToken(HogQLParser::WHERE, 0);
}

HogQLParser::ColumnExprContext* HogQLParser::WhereClauseContext::columnExpr() {
  return getRuleContext<HogQLParser::ColumnExprContext>(0);
}


size_t HogQLParser::WhereClauseContext::getRuleIndex() const {
  return HogQLParser::RuleWhereClause;
}


std::any HogQLParser::WhereClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitWhereClause(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::WhereClauseContext* HogQLParser::whereClause() {
  WhereClauseContext *_localctx = _tracker.createInstance<WhereClauseContext>(_ctx, getState());
  enterRule(_localctx, 54, HogQLParser::RuleWhereClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(415);
    match(HogQLParser::WHERE);
    setState(416);
    columnExpr(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GroupByClauseContext ------------------------------------------------------------------

HogQLParser::GroupByClauseContext::GroupByClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::GroupByClauseContext::GROUP() {
  return getToken(HogQLParser::GROUP, 0);
}

tree::TerminalNode* HogQLParser::GroupByClauseContext::BY() {
  return getToken(HogQLParser::BY, 0);
}

tree::TerminalNode* HogQLParser::GroupByClauseContext::LPAREN() {
  return getToken(HogQLParser::LPAREN, 0);
}

HogQLParser::ColumnExprListContext* HogQLParser::GroupByClauseContext::columnExprList() {
  return getRuleContext<HogQLParser::ColumnExprListContext>(0);
}

tree::TerminalNode* HogQLParser::GroupByClauseContext::RPAREN() {
  return getToken(HogQLParser::RPAREN, 0);
}

tree::TerminalNode* HogQLParser::GroupByClauseContext::CUBE() {
  return getToken(HogQLParser::CUBE, 0);
}

tree::TerminalNode* HogQLParser::GroupByClauseContext::ROLLUP() {
  return getToken(HogQLParser::ROLLUP, 0);
}


size_t HogQLParser::GroupByClauseContext::getRuleIndex() const {
  return HogQLParser::RuleGroupByClause;
}


std::any HogQLParser::GroupByClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitGroupByClause(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::GroupByClauseContext* HogQLParser::groupByClause() {
  GroupByClauseContext *_localctx = _tracker.createInstance<GroupByClauseContext>(_ctx, getState());
  enterRule(_localctx, 56, HogQLParser::RuleGroupByClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(418);
    match(HogQLParser::GROUP);
    setState(419);
    match(HogQLParser::BY);
    setState(426);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 40, _ctx)) {
    case 1: {
      setState(420);
      _la = _input->LA(1);
      if (!(_la == HogQLParser::CUBE

      || _la == HogQLParser::ROLLUP)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(421);
      match(HogQLParser::LPAREN);
      setState(422);
      columnExprList();
      setState(423);
      match(HogQLParser::RPAREN);
      break;
    }

    case 2: {
      setState(425);
      columnExprList();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- HavingClauseContext ------------------------------------------------------------------

HogQLParser::HavingClauseContext::HavingClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::HavingClauseContext::HAVING() {
  return getToken(HogQLParser::HAVING, 0);
}

HogQLParser::ColumnExprContext* HogQLParser::HavingClauseContext::columnExpr() {
  return getRuleContext<HogQLParser::ColumnExprContext>(0);
}


size_t HogQLParser::HavingClauseContext::getRuleIndex() const {
  return HogQLParser::RuleHavingClause;
}


std::any HogQLParser::HavingClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitHavingClause(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::HavingClauseContext* HogQLParser::havingClause() {
  HavingClauseContext *_localctx = _tracker.createInstance<HavingClauseContext>(_ctx, getState());
  enterRule(_localctx, 58, HogQLParser::RuleHavingClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(428);
    match(HogQLParser::HAVING);
    setState(429);
    columnExpr(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OrderByClauseContext ------------------------------------------------------------------

HogQLParser::OrderByClauseContext::OrderByClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::OrderByClauseContext::ORDER() {
  return getToken(HogQLParser::ORDER, 0);
}

tree::TerminalNode* HogQLParser::OrderByClauseContext::BY() {
  return getToken(HogQLParser::BY, 0);
}

HogQLParser::OrderExprListContext* HogQLParser::OrderByClauseContext::orderExprList() {
  return getRuleContext<HogQLParser::OrderExprListContext>(0);
}


size_t HogQLParser::OrderByClauseContext::getRuleIndex() const {
  return HogQLParser::RuleOrderByClause;
}


std::any HogQLParser::OrderByClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitOrderByClause(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::OrderByClauseContext* HogQLParser::orderByClause() {
  OrderByClauseContext *_localctx = _tracker.createInstance<OrderByClauseContext>(_ctx, getState());
  enterRule(_localctx, 60, HogQLParser::RuleOrderByClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(431);
    match(HogQLParser::ORDER);
    setState(432);
    match(HogQLParser::BY);
    setState(433);
    orderExprList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ProjectionOrderByClauseContext ------------------------------------------------------------------

HogQLParser::ProjectionOrderByClauseContext::ProjectionOrderByClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::ProjectionOrderByClauseContext::ORDER() {
  return getToken(HogQLParser::ORDER, 0);
}

tree::TerminalNode* HogQLParser::ProjectionOrderByClauseContext::BY() {
  return getToken(HogQLParser::BY, 0);
}

HogQLParser::ColumnExprListContext* HogQLParser::ProjectionOrderByClauseContext::columnExprList() {
  return getRuleContext<HogQLParser::ColumnExprListContext>(0);
}


size_t HogQLParser::ProjectionOrderByClauseContext::getRuleIndex() const {
  return HogQLParser::RuleProjectionOrderByClause;
}


std::any HogQLParser::ProjectionOrderByClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitProjectionOrderByClause(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::ProjectionOrderByClauseContext* HogQLParser::projectionOrderByClause() {
  ProjectionOrderByClauseContext *_localctx = _tracker.createInstance<ProjectionOrderByClauseContext>(_ctx, getState());
  enterRule(_localctx, 62, HogQLParser::RuleProjectionOrderByClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(435);
    match(HogQLParser::ORDER);
    setState(436);
    match(HogQLParser::BY);
    setState(437);
    columnExprList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LimitAndOffsetClauseContext ------------------------------------------------------------------

HogQLParser::LimitAndOffsetClauseContext::LimitAndOffsetClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::LimitAndOffsetClauseContext::LIMIT() {
  return getToken(HogQLParser::LIMIT, 0);
}

std::vector<HogQLParser::ColumnExprContext *> HogQLParser::LimitAndOffsetClauseContext::columnExpr() {
  return getRuleContexts<HogQLParser::ColumnExprContext>();
}

HogQLParser::ColumnExprContext* HogQLParser::LimitAndOffsetClauseContext::columnExpr(size_t i) {
  return getRuleContext<HogQLParser::ColumnExprContext>(i);
}

tree::TerminalNode* HogQLParser::LimitAndOffsetClauseContext::COMMA() {
  return getToken(HogQLParser::COMMA, 0);
}

tree::TerminalNode* HogQLParser::LimitAndOffsetClauseContext::BY() {
  return getToken(HogQLParser::BY, 0);
}

HogQLParser::ColumnExprListContext* HogQLParser::LimitAndOffsetClauseContext::columnExprList() {
  return getRuleContext<HogQLParser::ColumnExprListContext>(0);
}

tree::TerminalNode* HogQLParser::LimitAndOffsetClauseContext::WITH() {
  return getToken(HogQLParser::WITH, 0);
}

tree::TerminalNode* HogQLParser::LimitAndOffsetClauseContext::TIES() {
  return getToken(HogQLParser::TIES, 0);
}

tree::TerminalNode* HogQLParser::LimitAndOffsetClauseContext::OFFSET() {
  return getToken(HogQLParser::OFFSET, 0);
}


size_t HogQLParser::LimitAndOffsetClauseContext::getRuleIndex() const {
  return HogQLParser::RuleLimitAndOffsetClause;
}


std::any HogQLParser::LimitAndOffsetClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitLimitAndOffsetClause(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::LimitAndOffsetClauseContext* HogQLParser::limitAndOffsetClause() {
  LimitAndOffsetClauseContext *_localctx = _tracker.createInstance<LimitAndOffsetClauseContext>(_ctx, getState());
  enterRule(_localctx, 64, HogQLParser::RuleLimitAndOffsetClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(468);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 45, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(439);
      match(HogQLParser::LIMIT);
      setState(440);
      columnExpr(0);
      setState(443);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == HogQLParser::COMMA) {
        setState(441);
        match(HogQLParser::COMMA);
        setState(442);
        columnExpr(0);
      }
      setState(449);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case HogQLParser::WITH: {
          setState(445);
          match(HogQLParser::WITH);
          setState(446);
          match(HogQLParser::TIES);
          break;
        }

        case HogQLParser::BY: {
          setState(447);
          match(HogQLParser::BY);
          setState(448);
          columnExprList();
          break;
        }

        case HogQLParser::EOF:
        case HogQLParser::SETTINGS:
        case HogQLParser::UNION:
        case HogQLParser::RPAREN: {
          break;
        }

      default:
        break;
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(451);
      match(HogQLParser::LIMIT);
      setState(452);
      columnExpr(0);
      setState(455);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == HogQLParser::WITH) {
        setState(453);
        match(HogQLParser::WITH);
        setState(454);
        match(HogQLParser::TIES);
      }
      setState(457);
      match(HogQLParser::OFFSET);
      setState(458);
      columnExpr(0);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(460);
      match(HogQLParser::LIMIT);
      setState(461);
      columnExpr(0);
      setState(462);
      match(HogQLParser::OFFSET);
      setState(463);
      columnExpr(0);
      setState(466);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == HogQLParser::BY) {
        setState(464);
        match(HogQLParser::BY);
        setState(465);
        columnExprList();
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OffsetOnlyClauseContext ------------------------------------------------------------------

HogQLParser::OffsetOnlyClauseContext::OffsetOnlyClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::OffsetOnlyClauseContext::OFFSET() {
  return getToken(HogQLParser::OFFSET, 0);
}

HogQLParser::ColumnExprContext* HogQLParser::OffsetOnlyClauseContext::columnExpr() {
  return getRuleContext<HogQLParser::ColumnExprContext>(0);
}


size_t HogQLParser::OffsetOnlyClauseContext::getRuleIndex() const {
  return HogQLParser::RuleOffsetOnlyClause;
}


std::any HogQLParser::OffsetOnlyClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitOffsetOnlyClause(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::OffsetOnlyClauseContext* HogQLParser::offsetOnlyClause() {
  OffsetOnlyClauseContext *_localctx = _tracker.createInstance<OffsetOnlyClauseContext>(_ctx, getState());
  enterRule(_localctx, 66, HogQLParser::RuleOffsetOnlyClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(470);
    match(HogQLParser::OFFSET);
    setState(471);
    columnExpr(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SettingsClauseContext ------------------------------------------------------------------

HogQLParser::SettingsClauseContext::SettingsClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::SettingsClauseContext::SETTINGS() {
  return getToken(HogQLParser::SETTINGS, 0);
}

HogQLParser::SettingExprListContext* HogQLParser::SettingsClauseContext::settingExprList() {
  return getRuleContext<HogQLParser::SettingExprListContext>(0);
}


size_t HogQLParser::SettingsClauseContext::getRuleIndex() const {
  return HogQLParser::RuleSettingsClause;
}


std::any HogQLParser::SettingsClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitSettingsClause(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::SettingsClauseContext* HogQLParser::settingsClause() {
  SettingsClauseContext *_localctx = _tracker.createInstance<SettingsClauseContext>(_ctx, getState());
  enterRule(_localctx, 68, HogQLParser::RuleSettingsClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(473);
    match(HogQLParser::SETTINGS);
    setState(474);
    settingExprList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- JoinExprContext ------------------------------------------------------------------

HogQLParser::JoinExprContext::JoinExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t HogQLParser::JoinExprContext::getRuleIndex() const {
  return HogQLParser::RuleJoinExpr;
}

void HogQLParser::JoinExprContext::copyFrom(JoinExprContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- JoinExprOpContext ------------------------------------------------------------------

std::vector<HogQLParser::JoinExprContext *> HogQLParser::JoinExprOpContext::joinExpr() {
  return getRuleContexts<HogQLParser::JoinExprContext>();
}

HogQLParser::JoinExprContext* HogQLParser::JoinExprOpContext::joinExpr(size_t i) {
  return getRuleContext<HogQLParser::JoinExprContext>(i);
}

tree::TerminalNode* HogQLParser::JoinExprOpContext::JOIN() {
  return getToken(HogQLParser::JOIN, 0);
}

HogQLParser::JoinConstraintClauseContext* HogQLParser::JoinExprOpContext::joinConstraintClause() {
  return getRuleContext<HogQLParser::JoinConstraintClauseContext>(0);
}

HogQLParser::JoinOpContext* HogQLParser::JoinExprOpContext::joinOp() {
  return getRuleContext<HogQLParser::JoinOpContext>(0);
}

HogQLParser::JoinExprOpContext::JoinExprOpContext(JoinExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::JoinExprOpContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitJoinExprOp(this);
  else
    return visitor->visitChildren(this);
}
//----------------- JoinExprTableContext ------------------------------------------------------------------

HogQLParser::TableExprContext* HogQLParser::JoinExprTableContext::tableExpr() {
  return getRuleContext<HogQLParser::TableExprContext>(0);
}

tree::TerminalNode* HogQLParser::JoinExprTableContext::FINAL() {
  return getToken(HogQLParser::FINAL, 0);
}

HogQLParser::SampleClauseContext* HogQLParser::JoinExprTableContext::sampleClause() {
  return getRuleContext<HogQLParser::SampleClauseContext>(0);
}

HogQLParser::JoinExprTableContext::JoinExprTableContext(JoinExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::JoinExprTableContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitJoinExprTable(this);
  else
    return visitor->visitChildren(this);
}
//----------------- JoinExprParensContext ------------------------------------------------------------------

tree::TerminalNode* HogQLParser::JoinExprParensContext::LPAREN() {
  return getToken(HogQLParser::LPAREN, 0);
}

HogQLParser::JoinExprContext* HogQLParser::JoinExprParensContext::joinExpr() {
  return getRuleContext<HogQLParser::JoinExprContext>(0);
}

tree::TerminalNode* HogQLParser::JoinExprParensContext::RPAREN() {
  return getToken(HogQLParser::RPAREN, 0);
}

HogQLParser::JoinExprParensContext::JoinExprParensContext(JoinExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::JoinExprParensContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitJoinExprParens(this);
  else
    return visitor->visitChildren(this);
}
//----------------- JoinExprCrossOpContext ------------------------------------------------------------------

std::vector<HogQLParser::JoinExprContext *> HogQLParser::JoinExprCrossOpContext::joinExpr() {
  return getRuleContexts<HogQLParser::JoinExprContext>();
}

HogQLParser::JoinExprContext* HogQLParser::JoinExprCrossOpContext::joinExpr(size_t i) {
  return getRuleContext<HogQLParser::JoinExprContext>(i);
}

HogQLParser::JoinOpCrossContext* HogQLParser::JoinExprCrossOpContext::joinOpCross() {
  return getRuleContext<HogQLParser::JoinOpCrossContext>(0);
}

HogQLParser::JoinExprCrossOpContext::JoinExprCrossOpContext(JoinExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::JoinExprCrossOpContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitJoinExprCrossOp(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::JoinExprContext* HogQLParser::joinExpr() {
   return joinExpr(0);
}

HogQLParser::JoinExprContext* HogQLParser::joinExpr(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  HogQLParser::JoinExprContext *_localctx = _tracker.createInstance<JoinExprContext>(_ctx, parentState);
  HogQLParser::JoinExprContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 70;
  enterRecursionRule(_localctx, 70, HogQLParser::RuleJoinExpr, precedence);

    size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(488);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 48, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<JoinExprTableContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;

      setState(477);
      tableExpr(0);
      setState(479);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 46, _ctx)) {
      case 1: {
        setState(478);
        match(HogQLParser::FINAL);
        break;
      }

      default:
        break;
      }
      setState(482);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 47, _ctx)) {
      case 1: {
        setState(481);
        sampleClause();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<JoinExprParensContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(484);
      match(HogQLParser::LPAREN);
      setState(485);
      joinExpr(0);
      setState(486);
      match(HogQLParser::RPAREN);
      break;
    }

    default:
      break;
    }
    _ctx->stop = _input->LT(-1);
    setState(504);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 51, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(502);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 50, _ctx)) {
        case 1: {
          auto newContext = _tracker.createInstance<JoinExprCrossOpContext>(_tracker.createInstance<JoinExprContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleJoinExpr);
          setState(490);

          if (!(precpred(_ctx, 3))) throw FailedPredicateException(this, "precpred(_ctx, 3)");
          setState(491);
          joinOpCross();
          setState(492);
          joinExpr(4);
          break;
        }

        case 2: {
          auto newContext = _tracker.createInstance<JoinExprOpContext>(_tracker.createInstance<JoinExprContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleJoinExpr);
          setState(494);

          if (!(precpred(_ctx, 4))) throw FailedPredicateException(this, "precpred(_ctx, 4)");
          setState(496);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if ((((_la & ~ 0x3fULL) == 0) &&
            ((1ULL << _la) & 567356589867290) != 0) || _la == HogQLParser::RIGHT

          || _la == HogQLParser::SEMI) {
            setState(495);
            joinOp();
          }
          setState(498);
          match(HogQLParser::JOIN);
          setState(499);
          joinExpr(0);
          setState(500);
          joinConstraintClause();
          break;
        }

        default:
          break;
        } 
      }
      setState(506);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 51, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- JoinOpContext ------------------------------------------------------------------

HogQLParser::JoinOpContext::JoinOpContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t HogQLParser::JoinOpContext::getRuleIndex() const {
  return HogQLParser::RuleJoinOp;
}

void HogQLParser::JoinOpContext::copyFrom(JoinOpContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- JoinOpFullContext ------------------------------------------------------------------

tree::TerminalNode* HogQLParser::JoinOpFullContext::FULL() {
  return getToken(HogQLParser::FULL, 0);
}

tree::TerminalNode* HogQLParser::JoinOpFullContext::OUTER() {
  return getToken(HogQLParser::OUTER, 0);
}

tree::TerminalNode* HogQLParser::JoinOpFullContext::ALL() {
  return getToken(HogQLParser::ALL, 0);
}

tree::TerminalNode* HogQLParser::JoinOpFullContext::ANY() {
  return getToken(HogQLParser::ANY, 0);
}

HogQLParser::JoinOpFullContext::JoinOpFullContext(JoinOpContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::JoinOpFullContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitJoinOpFull(this);
  else
    return visitor->visitChildren(this);
}
//----------------- JoinOpInnerContext ------------------------------------------------------------------

tree::TerminalNode* HogQLParser::JoinOpInnerContext::INNER() {
  return getToken(HogQLParser::INNER, 0);
}

tree::TerminalNode* HogQLParser::JoinOpInnerContext::ALL() {
  return getToken(HogQLParser::ALL, 0);
}

tree::TerminalNode* HogQLParser::JoinOpInnerContext::ANY() {
  return getToken(HogQLParser::ANY, 0);
}

tree::TerminalNode* HogQLParser::JoinOpInnerContext::ASOF() {
  return getToken(HogQLParser::ASOF, 0);
}

HogQLParser::JoinOpInnerContext::JoinOpInnerContext(JoinOpContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::JoinOpInnerContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitJoinOpInner(this);
  else
    return visitor->visitChildren(this);
}
//----------------- JoinOpLeftRightContext ------------------------------------------------------------------

tree::TerminalNode* HogQLParser::JoinOpLeftRightContext::LEFT() {
  return getToken(HogQLParser::LEFT, 0);
}

tree::TerminalNode* HogQLParser::JoinOpLeftRightContext::RIGHT() {
  return getToken(HogQLParser::RIGHT, 0);
}

tree::TerminalNode* HogQLParser::JoinOpLeftRightContext::OUTER() {
  return getToken(HogQLParser::OUTER, 0);
}

tree::TerminalNode* HogQLParser::JoinOpLeftRightContext::SEMI() {
  return getToken(HogQLParser::SEMI, 0);
}

tree::TerminalNode* HogQLParser::JoinOpLeftRightContext::ALL() {
  return getToken(HogQLParser::ALL, 0);
}

tree::TerminalNode* HogQLParser::JoinOpLeftRightContext::ANTI() {
  return getToken(HogQLParser::ANTI, 0);
}

tree::TerminalNode* HogQLParser::JoinOpLeftRightContext::ANY() {
  return getToken(HogQLParser::ANY, 0);
}

tree::TerminalNode* HogQLParser::JoinOpLeftRightContext::ASOF() {
  return getToken(HogQLParser::ASOF, 0);
}

HogQLParser::JoinOpLeftRightContext::JoinOpLeftRightContext(JoinOpContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::JoinOpLeftRightContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitJoinOpLeftRight(this);
  else
    return visitor->visitChildren(this);
}
HogQLParser::JoinOpContext* HogQLParser::joinOp() {
  JoinOpContext *_localctx = _tracker.createInstance<JoinOpContext>(_ctx, getState());
  enterRule(_localctx, 72, HogQLParser::RuleJoinOp);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(550);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 65, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<HogQLParser::JoinOpInnerContext>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(516);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 54, _ctx)) {
      case 1: {
        setState(508);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 274) != 0)) {
          setState(507);
          _la = _input->LA(1);
          if (!((((_la & ~ 0x3fULL) == 0) &&
            ((1ULL << _la) & 274) != 0))) {
          _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
        }
        setState(510);
        match(HogQLParser::INNER);
        break;
      }

      case 2: {
        setState(511);
        match(HogQLParser::INNER);
        setState(513);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 274) != 0)) {
          setState(512);
          _la = _input->LA(1);
          if (!((((_la & ~ 0x3fULL) == 0) &&
            ((1ULL << _la) & 274) != 0))) {
          _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
        }
        break;
      }

      case 3: {
        setState(515);
        _la = _input->LA(1);
        if (!((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 274) != 0))) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

      default:
        break;
      }
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<HogQLParser::JoinOpLeftRightContext>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(532);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 59, _ctx)) {
      case 1: {
        setState(519);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 282) != 0) || _la == HogQLParser::SEMI) {
          setState(518);
          _la = _input->LA(1);
          if (!((((_la & ~ 0x3fULL) == 0) &&
            ((1ULL << _la) & 282) != 0) || _la == HogQLParser::SEMI)) {
          _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
        }
        setState(521);
        _la = _input->LA(1);
        if (!(_la == HogQLParser::LEFT

        || _la == HogQLParser::RIGHT)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(523);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == HogQLParser::OUTER) {
          setState(522);
          match(HogQLParser::OUTER);
        }
        break;
      }

      case 2: {
        setState(525);
        _la = _input->LA(1);
        if (!(_la == HogQLParser::LEFT

        || _la == HogQLParser::RIGHT)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(527);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == HogQLParser::OUTER) {
          setState(526);
          match(HogQLParser::OUTER);
        }
        setState(530);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 282) != 0) || _la == HogQLParser::SEMI) {
          setState(529);
          _la = _input->LA(1);
          if (!((((_la & ~ 0x3fULL) == 0) &&
            ((1ULL << _la) & 282) != 0) || _la == HogQLParser::SEMI)) {
          _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
        }
        break;
      }

      default:
        break;
      }
      break;
    }

    case 3: {
      _localctx = _tracker.createInstance<HogQLParser::JoinOpFullContext>(_localctx);
      enterOuterAlt(_localctx, 3);
      setState(548);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 64, _ctx)) {
      case 1: {
        setState(535);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == HogQLParser::ALL

        || _la == HogQLParser::ANY) {
          setState(534);
          _la = _input->LA(1);
          if (!(_la == HogQLParser::ALL

          || _la == HogQLParser::ANY)) {
          _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
        }
        setState(537);
        match(HogQLParser::FULL);
        setState(539);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == HogQLParser::OUTER) {
          setState(538);
          match(HogQLParser::OUTER);
        }
        break;
      }

      case 2: {
        setState(541);
        match(HogQLParser::FULL);
        setState(543);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == HogQLParser::OUTER) {
          setState(542);
          match(HogQLParser::OUTER);
        }
        setState(546);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == HogQLParser::ALL

        || _la == HogQLParser::ANY) {
          setState(545);
          _la = _input->LA(1);
          if (!(_la == HogQLParser::ALL

          || _la == HogQLParser::ANY)) {
          _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
        }
        break;
      }

      default:
        break;
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- JoinOpCrossContext ------------------------------------------------------------------

HogQLParser::JoinOpCrossContext::JoinOpCrossContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::JoinOpCrossContext::CROSS() {
  return getToken(HogQLParser::CROSS, 0);
}

tree::TerminalNode* HogQLParser::JoinOpCrossContext::JOIN() {
  return getToken(HogQLParser::JOIN, 0);
}

tree::TerminalNode* HogQLParser::JoinOpCrossContext::COMMA() {
  return getToken(HogQLParser::COMMA, 0);
}


size_t HogQLParser::JoinOpCrossContext::getRuleIndex() const {
  return HogQLParser::RuleJoinOpCross;
}


std::any HogQLParser::JoinOpCrossContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitJoinOpCross(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::JoinOpCrossContext* HogQLParser::joinOpCross() {
  JoinOpCrossContext *_localctx = _tracker.createInstance<JoinOpCrossContext>(_ctx, getState());
  enterRule(_localctx, 74, HogQLParser::RuleJoinOpCross);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(555);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case HogQLParser::CROSS: {
        enterOuterAlt(_localctx, 1);
        setState(552);
        match(HogQLParser::CROSS);
        setState(553);
        match(HogQLParser::JOIN);
        break;
      }

      case HogQLParser::COMMA: {
        enterOuterAlt(_localctx, 2);
        setState(554);
        match(HogQLParser::COMMA);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- JoinConstraintClauseContext ------------------------------------------------------------------

HogQLParser::JoinConstraintClauseContext::JoinConstraintClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::JoinConstraintClauseContext::ON() {
  return getToken(HogQLParser::ON, 0);
}

HogQLParser::ColumnExprListContext* HogQLParser::JoinConstraintClauseContext::columnExprList() {
  return getRuleContext<HogQLParser::ColumnExprListContext>(0);
}

tree::TerminalNode* HogQLParser::JoinConstraintClauseContext::USING() {
  return getToken(HogQLParser::USING, 0);
}

tree::TerminalNode* HogQLParser::JoinConstraintClauseContext::LPAREN() {
  return getToken(HogQLParser::LPAREN, 0);
}

tree::TerminalNode* HogQLParser::JoinConstraintClauseContext::RPAREN() {
  return getToken(HogQLParser::RPAREN, 0);
}


size_t HogQLParser::JoinConstraintClauseContext::getRuleIndex() const {
  return HogQLParser::RuleJoinConstraintClause;
}


std::any HogQLParser::JoinConstraintClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitJoinConstraintClause(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::JoinConstraintClauseContext* HogQLParser::joinConstraintClause() {
  JoinConstraintClauseContext *_localctx = _tracker.createInstance<JoinConstraintClauseContext>(_ctx, getState());
  enterRule(_localctx, 76, HogQLParser::RuleJoinConstraintClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(566);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 67, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(557);
      match(HogQLParser::ON);
      setState(558);
      columnExprList();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(559);
      match(HogQLParser::USING);
      setState(560);
      match(HogQLParser::LPAREN);
      setState(561);
      columnExprList();
      setState(562);
      match(HogQLParser::RPAREN);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(564);
      match(HogQLParser::USING);
      setState(565);
      columnExprList();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SampleClauseContext ------------------------------------------------------------------

HogQLParser::SampleClauseContext::SampleClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::SampleClauseContext::SAMPLE() {
  return getToken(HogQLParser::SAMPLE, 0);
}

std::vector<HogQLParser::RatioExprContext *> HogQLParser::SampleClauseContext::ratioExpr() {
  return getRuleContexts<HogQLParser::RatioExprContext>();
}

HogQLParser::RatioExprContext* HogQLParser::SampleClauseContext::ratioExpr(size_t i) {
  return getRuleContext<HogQLParser::RatioExprContext>(i);
}

tree::TerminalNode* HogQLParser::SampleClauseContext::OFFSET() {
  return getToken(HogQLParser::OFFSET, 0);
}


size_t HogQLParser::SampleClauseContext::getRuleIndex() const {
  return HogQLParser::RuleSampleClause;
}


std::any HogQLParser::SampleClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitSampleClause(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::SampleClauseContext* HogQLParser::sampleClause() {
  SampleClauseContext *_localctx = _tracker.createInstance<SampleClauseContext>(_ctx, getState());
  enterRule(_localctx, 78, HogQLParser::RuleSampleClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(568);
    match(HogQLParser::SAMPLE);
    setState(569);
    ratioExpr();
    setState(572);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 68, _ctx)) {
    case 1: {
      setState(570);
      match(HogQLParser::OFFSET);
      setState(571);
      ratioExpr();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OrderExprListContext ------------------------------------------------------------------

HogQLParser::OrderExprListContext::OrderExprListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<HogQLParser::OrderExprContext *> HogQLParser::OrderExprListContext::orderExpr() {
  return getRuleContexts<HogQLParser::OrderExprContext>();
}

HogQLParser::OrderExprContext* HogQLParser::OrderExprListContext::orderExpr(size_t i) {
  return getRuleContext<HogQLParser::OrderExprContext>(i);
}

std::vector<tree::TerminalNode *> HogQLParser::OrderExprListContext::COMMA() {
  return getTokens(HogQLParser::COMMA);
}

tree::TerminalNode* HogQLParser::OrderExprListContext::COMMA(size_t i) {
  return getToken(HogQLParser::COMMA, i);
}


size_t HogQLParser::OrderExprListContext::getRuleIndex() const {
  return HogQLParser::RuleOrderExprList;
}


std::any HogQLParser::OrderExprListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitOrderExprList(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::OrderExprListContext* HogQLParser::orderExprList() {
  OrderExprListContext *_localctx = _tracker.createInstance<OrderExprListContext>(_ctx, getState());
  enterRule(_localctx, 80, HogQLParser::RuleOrderExprList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(574);
    orderExpr();
    setState(579);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == HogQLParser::COMMA) {
      setState(575);
      match(HogQLParser::COMMA);
      setState(576);
      orderExpr();
      setState(581);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OrderExprContext ------------------------------------------------------------------

HogQLParser::OrderExprContext::OrderExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HogQLParser::ColumnExprContext* HogQLParser::OrderExprContext::columnExpr() {
  return getRuleContext<HogQLParser::ColumnExprContext>(0);
}

tree::TerminalNode* HogQLParser::OrderExprContext::NULLS() {
  return getToken(HogQLParser::NULLS, 0);
}

tree::TerminalNode* HogQLParser::OrderExprContext::COLLATE() {
  return getToken(HogQLParser::COLLATE, 0);
}

tree::TerminalNode* HogQLParser::OrderExprContext::STRING_LITERAL() {
  return getToken(HogQLParser::STRING_LITERAL, 0);
}

tree::TerminalNode* HogQLParser::OrderExprContext::ASCENDING() {
  return getToken(HogQLParser::ASCENDING, 0);
}

tree::TerminalNode* HogQLParser::OrderExprContext::DESCENDING() {
  return getToken(HogQLParser::DESCENDING, 0);
}

tree::TerminalNode* HogQLParser::OrderExprContext::DESC() {
  return getToken(HogQLParser::DESC, 0);
}

tree::TerminalNode* HogQLParser::OrderExprContext::FIRST() {
  return getToken(HogQLParser::FIRST, 0);
}

tree::TerminalNode* HogQLParser::OrderExprContext::LAST() {
  return getToken(HogQLParser::LAST, 0);
}


size_t HogQLParser::OrderExprContext::getRuleIndex() const {
  return HogQLParser::RuleOrderExpr;
}


std::any HogQLParser::OrderExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitOrderExpr(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::OrderExprContext* HogQLParser::orderExpr() {
  OrderExprContext *_localctx = _tracker.createInstance<OrderExprContext>(_ctx, getState());
  enterRule(_localctx, 82, HogQLParser::RuleOrderExpr);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(582);
    columnExpr(0);
    setState(584);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 6291584) != 0)) {
      setState(583);
      _la = _input->LA(1);
      if (!((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 6291584) != 0))) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(588);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HogQLParser::NULLS) {
      setState(586);
      match(HogQLParser::NULLS);
      setState(587);
      _la = _input->LA(1);
      if (!(_la == HogQLParser::FIRST

      || _la == HogQLParser::LAST)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(592);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HogQLParser::COLLATE) {
      setState(590);
      match(HogQLParser::COLLATE);
      setState(591);
      match(HogQLParser::STRING_LITERAL);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RatioExprContext ------------------------------------------------------------------

HogQLParser::RatioExprContext::RatioExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HogQLParser::PlaceholderContext* HogQLParser::RatioExprContext::placeholder() {
  return getRuleContext<HogQLParser::PlaceholderContext>(0);
}

std::vector<HogQLParser::NumberLiteralContext *> HogQLParser::RatioExprContext::numberLiteral() {
  return getRuleContexts<HogQLParser::NumberLiteralContext>();
}

HogQLParser::NumberLiteralContext* HogQLParser::RatioExprContext::numberLiteral(size_t i) {
  return getRuleContext<HogQLParser::NumberLiteralContext>(i);
}

tree::TerminalNode* HogQLParser::RatioExprContext::SLASH() {
  return getToken(HogQLParser::SLASH, 0);
}


size_t HogQLParser::RatioExprContext::getRuleIndex() const {
  return HogQLParser::RuleRatioExpr;
}


std::any HogQLParser::RatioExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitRatioExpr(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::RatioExprContext* HogQLParser::ratioExpr() {
  RatioExprContext *_localctx = _tracker.createInstance<RatioExprContext>(_ctx, getState());
  enterRule(_localctx, 84, HogQLParser::RuleRatioExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(600);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case HogQLParser::LBRACE: {
        enterOuterAlt(_localctx, 1);
        setState(594);
        placeholder();
        break;
      }

      case HogQLParser::INF:
      case HogQLParser::NAN_SQL:
      case HogQLParser::FLOATING_LITERAL:
      case HogQLParser::OCTAL_LITERAL:
      case HogQLParser::DECIMAL_LITERAL:
      case HogQLParser::HEXADECIMAL_LITERAL:
      case HogQLParser::DASH:
      case HogQLParser::DOT:
      case HogQLParser::PLUS: {
        enterOuterAlt(_localctx, 2);
        setState(595);
        numberLiteral();
        setState(598);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 73, _ctx)) {
        case 1: {
          setState(596);
          match(HogQLParser::SLASH);
          setState(597);
          numberLiteral();
          break;
        }

        default:
          break;
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SettingExprListContext ------------------------------------------------------------------

HogQLParser::SettingExprListContext::SettingExprListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<HogQLParser::SettingExprContext *> HogQLParser::SettingExprListContext::settingExpr() {
  return getRuleContexts<HogQLParser::SettingExprContext>();
}

HogQLParser::SettingExprContext* HogQLParser::SettingExprListContext::settingExpr(size_t i) {
  return getRuleContext<HogQLParser::SettingExprContext>(i);
}

std::vector<tree::TerminalNode *> HogQLParser::SettingExprListContext::COMMA() {
  return getTokens(HogQLParser::COMMA);
}

tree::TerminalNode* HogQLParser::SettingExprListContext::COMMA(size_t i) {
  return getToken(HogQLParser::COMMA, i);
}


size_t HogQLParser::SettingExprListContext::getRuleIndex() const {
  return HogQLParser::RuleSettingExprList;
}


std::any HogQLParser::SettingExprListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitSettingExprList(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::SettingExprListContext* HogQLParser::settingExprList() {
  SettingExprListContext *_localctx = _tracker.createInstance<SettingExprListContext>(_ctx, getState());
  enterRule(_localctx, 86, HogQLParser::RuleSettingExprList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(602);
    settingExpr();
    setState(607);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == HogQLParser::COMMA) {
      setState(603);
      match(HogQLParser::COMMA);
      setState(604);
      settingExpr();
      setState(609);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SettingExprContext ------------------------------------------------------------------

HogQLParser::SettingExprContext::SettingExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HogQLParser::IdentifierContext* HogQLParser::SettingExprContext::identifier() {
  return getRuleContext<HogQLParser::IdentifierContext>(0);
}

tree::TerminalNode* HogQLParser::SettingExprContext::EQ_SINGLE() {
  return getToken(HogQLParser::EQ_SINGLE, 0);
}

HogQLParser::LiteralContext* HogQLParser::SettingExprContext::literal() {
  return getRuleContext<HogQLParser::LiteralContext>(0);
}


size_t HogQLParser::SettingExprContext::getRuleIndex() const {
  return HogQLParser::RuleSettingExpr;
}


std::any HogQLParser::SettingExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitSettingExpr(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::SettingExprContext* HogQLParser::settingExpr() {
  SettingExprContext *_localctx = _tracker.createInstance<SettingExprContext>(_ctx, getState());
  enterRule(_localctx, 88, HogQLParser::RuleSettingExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(610);
    identifier();
    setState(611);
    match(HogQLParser::EQ_SINGLE);
    setState(612);
    literal();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WindowExprContext ------------------------------------------------------------------

HogQLParser::WindowExprContext::WindowExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HogQLParser::WinPartitionByClauseContext* HogQLParser::WindowExprContext::winPartitionByClause() {
  return getRuleContext<HogQLParser::WinPartitionByClauseContext>(0);
}

HogQLParser::WinOrderByClauseContext* HogQLParser::WindowExprContext::winOrderByClause() {
  return getRuleContext<HogQLParser::WinOrderByClauseContext>(0);
}

HogQLParser::WinFrameClauseContext* HogQLParser::WindowExprContext::winFrameClause() {
  return getRuleContext<HogQLParser::WinFrameClauseContext>(0);
}


size_t HogQLParser::WindowExprContext::getRuleIndex() const {
  return HogQLParser::RuleWindowExpr;
}


std::any HogQLParser::WindowExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitWindowExpr(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::WindowExprContext* HogQLParser::windowExpr() {
  WindowExprContext *_localctx = _tracker.createInstance<WindowExprContext>(_ctx, getState());
  enterRule(_localctx, 90, HogQLParser::RuleWindowExpr);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(615);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HogQLParser::PARTITION) {
      setState(614);
      winPartitionByClause();
    }
    setState(618);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HogQLParser::ORDER) {
      setState(617);
      winOrderByClause();
    }
    setState(621);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HogQLParser::RANGE

    || _la == HogQLParser::ROWS) {
      setState(620);
      winFrameClause();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WinPartitionByClauseContext ------------------------------------------------------------------

HogQLParser::WinPartitionByClauseContext::WinPartitionByClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::WinPartitionByClauseContext::PARTITION() {
  return getToken(HogQLParser::PARTITION, 0);
}

tree::TerminalNode* HogQLParser::WinPartitionByClauseContext::BY() {
  return getToken(HogQLParser::BY, 0);
}

HogQLParser::ColumnExprListContext* HogQLParser::WinPartitionByClauseContext::columnExprList() {
  return getRuleContext<HogQLParser::ColumnExprListContext>(0);
}


size_t HogQLParser::WinPartitionByClauseContext::getRuleIndex() const {
  return HogQLParser::RuleWinPartitionByClause;
}


std::any HogQLParser::WinPartitionByClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitWinPartitionByClause(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::WinPartitionByClauseContext* HogQLParser::winPartitionByClause() {
  WinPartitionByClauseContext *_localctx = _tracker.createInstance<WinPartitionByClauseContext>(_ctx, getState());
  enterRule(_localctx, 92, HogQLParser::RuleWinPartitionByClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(623);
    match(HogQLParser::PARTITION);
    setState(624);
    match(HogQLParser::BY);
    setState(625);
    columnExprList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WinOrderByClauseContext ------------------------------------------------------------------

HogQLParser::WinOrderByClauseContext::WinOrderByClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::WinOrderByClauseContext::ORDER() {
  return getToken(HogQLParser::ORDER, 0);
}

tree::TerminalNode* HogQLParser::WinOrderByClauseContext::BY() {
  return getToken(HogQLParser::BY, 0);
}

HogQLParser::OrderExprListContext* HogQLParser::WinOrderByClauseContext::orderExprList() {
  return getRuleContext<HogQLParser::OrderExprListContext>(0);
}


size_t HogQLParser::WinOrderByClauseContext::getRuleIndex() const {
  return HogQLParser::RuleWinOrderByClause;
}


std::any HogQLParser::WinOrderByClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitWinOrderByClause(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::WinOrderByClauseContext* HogQLParser::winOrderByClause() {
  WinOrderByClauseContext *_localctx = _tracker.createInstance<WinOrderByClauseContext>(_ctx, getState());
  enterRule(_localctx, 94, HogQLParser::RuleWinOrderByClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(627);
    match(HogQLParser::ORDER);
    setState(628);
    match(HogQLParser::BY);
    setState(629);
    orderExprList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WinFrameClauseContext ------------------------------------------------------------------

HogQLParser::WinFrameClauseContext::WinFrameClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HogQLParser::WinFrameExtendContext* HogQLParser::WinFrameClauseContext::winFrameExtend() {
  return getRuleContext<HogQLParser::WinFrameExtendContext>(0);
}

tree::TerminalNode* HogQLParser::WinFrameClauseContext::ROWS() {
  return getToken(HogQLParser::ROWS, 0);
}

tree::TerminalNode* HogQLParser::WinFrameClauseContext::RANGE() {
  return getToken(HogQLParser::RANGE, 0);
}


size_t HogQLParser::WinFrameClauseContext::getRuleIndex() const {
  return HogQLParser::RuleWinFrameClause;
}


std::any HogQLParser::WinFrameClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitWinFrameClause(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::WinFrameClauseContext* HogQLParser::winFrameClause() {
  WinFrameClauseContext *_localctx = _tracker.createInstance<WinFrameClauseContext>(_ctx, getState());
  enterRule(_localctx, 96, HogQLParser::RuleWinFrameClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(631);
    _la = _input->LA(1);
    if (!(_la == HogQLParser::RANGE

    || _la == HogQLParser::ROWS)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(632);
    winFrameExtend();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WinFrameExtendContext ------------------------------------------------------------------

HogQLParser::WinFrameExtendContext::WinFrameExtendContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t HogQLParser::WinFrameExtendContext::getRuleIndex() const {
  return HogQLParser::RuleWinFrameExtend;
}

void HogQLParser::WinFrameExtendContext::copyFrom(WinFrameExtendContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- FrameStartContext ------------------------------------------------------------------

HogQLParser::WinFrameBoundContext* HogQLParser::FrameStartContext::winFrameBound() {
  return getRuleContext<HogQLParser::WinFrameBoundContext>(0);
}

HogQLParser::FrameStartContext::FrameStartContext(WinFrameExtendContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::FrameStartContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitFrameStart(this);
  else
    return visitor->visitChildren(this);
}
//----------------- FrameBetweenContext ------------------------------------------------------------------

tree::TerminalNode* HogQLParser::FrameBetweenContext::BETWEEN() {
  return getToken(HogQLParser::BETWEEN, 0);
}

std::vector<HogQLParser::WinFrameBoundContext *> HogQLParser::FrameBetweenContext::winFrameBound() {
  return getRuleContexts<HogQLParser::WinFrameBoundContext>();
}

HogQLParser::WinFrameBoundContext* HogQLParser::FrameBetweenContext::winFrameBound(size_t i) {
  return getRuleContext<HogQLParser::WinFrameBoundContext>(i);
}

tree::TerminalNode* HogQLParser::FrameBetweenContext::AND() {
  return getToken(HogQLParser::AND, 0);
}

HogQLParser::FrameBetweenContext::FrameBetweenContext(WinFrameExtendContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::FrameBetweenContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitFrameBetween(this);
  else
    return visitor->visitChildren(this);
}
HogQLParser::WinFrameExtendContext* HogQLParser::winFrameExtend() {
  WinFrameExtendContext *_localctx = _tracker.createInstance<WinFrameExtendContext>(_ctx, getState());
  enterRule(_localctx, 98, HogQLParser::RuleWinFrameExtend);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(640);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case HogQLParser::CURRENT:
      case HogQLParser::INF:
      case HogQLParser::NAN_SQL:
      case HogQLParser::UNBOUNDED:
      case HogQLParser::FLOATING_LITERAL:
      case HogQLParser::OCTAL_LITERAL:
      case HogQLParser::DECIMAL_LITERAL:
      case HogQLParser::HEXADECIMAL_LITERAL:
      case HogQLParser::DASH:
      case HogQLParser::DOT:
      case HogQLParser::PLUS: {
        _localctx = _tracker.createInstance<HogQLParser::FrameStartContext>(_localctx);
        enterOuterAlt(_localctx, 1);
        setState(634);
        winFrameBound();
        break;
      }

      case HogQLParser::BETWEEN: {
        _localctx = _tracker.createInstance<HogQLParser::FrameBetweenContext>(_localctx);
        enterOuterAlt(_localctx, 2);
        setState(635);
        match(HogQLParser::BETWEEN);
        setState(636);
        winFrameBound();
        setState(637);
        match(HogQLParser::AND);
        setState(638);
        winFrameBound();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WinFrameBoundContext ------------------------------------------------------------------

HogQLParser::WinFrameBoundContext::WinFrameBoundContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::WinFrameBoundContext::CURRENT() {
  return getToken(HogQLParser::CURRENT, 0);
}

tree::TerminalNode* HogQLParser::WinFrameBoundContext::ROW() {
  return getToken(HogQLParser::ROW, 0);
}

tree::TerminalNode* HogQLParser::WinFrameBoundContext::UNBOUNDED() {
  return getToken(HogQLParser::UNBOUNDED, 0);
}

tree::TerminalNode* HogQLParser::WinFrameBoundContext::PRECEDING() {
  return getToken(HogQLParser::PRECEDING, 0);
}

tree::TerminalNode* HogQLParser::WinFrameBoundContext::FOLLOWING() {
  return getToken(HogQLParser::FOLLOWING, 0);
}

HogQLParser::NumberLiteralContext* HogQLParser::WinFrameBoundContext::numberLiteral() {
  return getRuleContext<HogQLParser::NumberLiteralContext>(0);
}


size_t HogQLParser::WinFrameBoundContext::getRuleIndex() const {
  return HogQLParser::RuleWinFrameBound;
}


std::any HogQLParser::WinFrameBoundContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitWinFrameBound(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::WinFrameBoundContext* HogQLParser::winFrameBound() {
  WinFrameBoundContext *_localctx = _tracker.createInstance<WinFrameBoundContext>(_ctx, getState());
  enterRule(_localctx, 100, HogQLParser::RuleWinFrameBound);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(654);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 80, _ctx)) {
    case 1: {
      setState(642);
      match(HogQLParser::CURRENT);
      setState(643);
      match(HogQLParser::ROW);
      break;
    }

    case 2: {
      setState(644);
      match(HogQLParser::UNBOUNDED);
      setState(645);
      match(HogQLParser::PRECEDING);
      break;
    }

    case 3: {
      setState(646);
      match(HogQLParser::UNBOUNDED);
      setState(647);
      match(HogQLParser::FOLLOWING);
      break;
    }

    case 4: {
      setState(648);
      numberLiteral();
      setState(649);
      match(HogQLParser::PRECEDING);
      break;
    }

    case 5: {
      setState(651);
      numberLiteral();
      setState(652);
      match(HogQLParser::FOLLOWING);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExprContext ------------------------------------------------------------------

HogQLParser::ExprContext::ExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HogQLParser::ColumnExprContext* HogQLParser::ExprContext::columnExpr() {
  return getRuleContext<HogQLParser::ColumnExprContext>(0);
}

tree::TerminalNode* HogQLParser::ExprContext::EOF() {
  return getToken(HogQLParser::EOF, 0);
}


size_t HogQLParser::ExprContext::getRuleIndex() const {
  return HogQLParser::RuleExpr;
}


std::any HogQLParser::ExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitExpr(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::ExprContext* HogQLParser::expr() {
  ExprContext *_localctx = _tracker.createInstance<ExprContext>(_ctx, getState());
  enterRule(_localctx, 102, HogQLParser::RuleExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(656);
    columnExpr(0);
    setState(657);
    match(HogQLParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ColumnTypeExprContext ------------------------------------------------------------------

HogQLParser::ColumnTypeExprContext::ColumnTypeExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t HogQLParser::ColumnTypeExprContext::getRuleIndex() const {
  return HogQLParser::RuleColumnTypeExpr;
}

void HogQLParser::ColumnTypeExprContext::copyFrom(ColumnTypeExprContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- ColumnTypeExprNestedContext ------------------------------------------------------------------

std::vector<HogQLParser::IdentifierContext *> HogQLParser::ColumnTypeExprNestedContext::identifier() {
  return getRuleContexts<HogQLParser::IdentifierContext>();
}

HogQLParser::IdentifierContext* HogQLParser::ColumnTypeExprNestedContext::identifier(size_t i) {
  return getRuleContext<HogQLParser::IdentifierContext>(i);
}

tree::TerminalNode* HogQLParser::ColumnTypeExprNestedContext::LPAREN() {
  return getToken(HogQLParser::LPAREN, 0);
}

std::vector<HogQLParser::ColumnTypeExprContext *> HogQLParser::ColumnTypeExprNestedContext::columnTypeExpr() {
  return getRuleContexts<HogQLParser::ColumnTypeExprContext>();
}

HogQLParser::ColumnTypeExprContext* HogQLParser::ColumnTypeExprNestedContext::columnTypeExpr(size_t i) {
  return getRuleContext<HogQLParser::ColumnTypeExprContext>(i);
}

tree::TerminalNode* HogQLParser::ColumnTypeExprNestedContext::RPAREN() {
  return getToken(HogQLParser::RPAREN, 0);
}

std::vector<tree::TerminalNode *> HogQLParser::ColumnTypeExprNestedContext::COMMA() {
  return getTokens(HogQLParser::COMMA);
}

tree::TerminalNode* HogQLParser::ColumnTypeExprNestedContext::COMMA(size_t i) {
  return getToken(HogQLParser::COMMA, i);
}

HogQLParser::ColumnTypeExprNestedContext::ColumnTypeExprNestedContext(ColumnTypeExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnTypeExprNestedContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnTypeExprNested(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnTypeExprParamContext ------------------------------------------------------------------

HogQLParser::IdentifierContext* HogQLParser::ColumnTypeExprParamContext::identifier() {
  return getRuleContext<HogQLParser::IdentifierContext>(0);
}

tree::TerminalNode* HogQLParser::ColumnTypeExprParamContext::LPAREN() {
  return getToken(HogQLParser::LPAREN, 0);
}

tree::TerminalNode* HogQLParser::ColumnTypeExprParamContext::RPAREN() {
  return getToken(HogQLParser::RPAREN, 0);
}

HogQLParser::ColumnExprListContext* HogQLParser::ColumnTypeExprParamContext::columnExprList() {
  return getRuleContext<HogQLParser::ColumnExprListContext>(0);
}

HogQLParser::ColumnTypeExprParamContext::ColumnTypeExprParamContext(ColumnTypeExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnTypeExprParamContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnTypeExprParam(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnTypeExprSimpleContext ------------------------------------------------------------------

HogQLParser::IdentifierContext* HogQLParser::ColumnTypeExprSimpleContext::identifier() {
  return getRuleContext<HogQLParser::IdentifierContext>(0);
}

HogQLParser::ColumnTypeExprSimpleContext::ColumnTypeExprSimpleContext(ColumnTypeExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnTypeExprSimpleContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnTypeExprSimple(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnTypeExprComplexContext ------------------------------------------------------------------

HogQLParser::IdentifierContext* HogQLParser::ColumnTypeExprComplexContext::identifier() {
  return getRuleContext<HogQLParser::IdentifierContext>(0);
}

tree::TerminalNode* HogQLParser::ColumnTypeExprComplexContext::LPAREN() {
  return getToken(HogQLParser::LPAREN, 0);
}

std::vector<HogQLParser::ColumnTypeExprContext *> HogQLParser::ColumnTypeExprComplexContext::columnTypeExpr() {
  return getRuleContexts<HogQLParser::ColumnTypeExprContext>();
}

HogQLParser::ColumnTypeExprContext* HogQLParser::ColumnTypeExprComplexContext::columnTypeExpr(size_t i) {
  return getRuleContext<HogQLParser::ColumnTypeExprContext>(i);
}

tree::TerminalNode* HogQLParser::ColumnTypeExprComplexContext::RPAREN() {
  return getToken(HogQLParser::RPAREN, 0);
}

std::vector<tree::TerminalNode *> HogQLParser::ColumnTypeExprComplexContext::COMMA() {
  return getTokens(HogQLParser::COMMA);
}

tree::TerminalNode* HogQLParser::ColumnTypeExprComplexContext::COMMA(size_t i) {
  return getToken(HogQLParser::COMMA, i);
}

HogQLParser::ColumnTypeExprComplexContext::ColumnTypeExprComplexContext(ColumnTypeExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnTypeExprComplexContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnTypeExprComplex(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnTypeExprEnumContext ------------------------------------------------------------------

HogQLParser::IdentifierContext* HogQLParser::ColumnTypeExprEnumContext::identifier() {
  return getRuleContext<HogQLParser::IdentifierContext>(0);
}

tree::TerminalNode* HogQLParser::ColumnTypeExprEnumContext::LPAREN() {
  return getToken(HogQLParser::LPAREN, 0);
}

std::vector<HogQLParser::EnumValueContext *> HogQLParser::ColumnTypeExprEnumContext::enumValue() {
  return getRuleContexts<HogQLParser::EnumValueContext>();
}

HogQLParser::EnumValueContext* HogQLParser::ColumnTypeExprEnumContext::enumValue(size_t i) {
  return getRuleContext<HogQLParser::EnumValueContext>(i);
}

tree::TerminalNode* HogQLParser::ColumnTypeExprEnumContext::RPAREN() {
  return getToken(HogQLParser::RPAREN, 0);
}

std::vector<tree::TerminalNode *> HogQLParser::ColumnTypeExprEnumContext::COMMA() {
  return getTokens(HogQLParser::COMMA);
}

tree::TerminalNode* HogQLParser::ColumnTypeExprEnumContext::COMMA(size_t i) {
  return getToken(HogQLParser::COMMA, i);
}

HogQLParser::ColumnTypeExprEnumContext::ColumnTypeExprEnumContext(ColumnTypeExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnTypeExprEnumContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnTypeExprEnum(this);
  else
    return visitor->visitChildren(this);
}
HogQLParser::ColumnTypeExprContext* HogQLParser::columnTypeExpr() {
  ColumnTypeExprContext *_localctx = _tracker.createInstance<ColumnTypeExprContext>(_ctx, getState());
  enterRule(_localctx, 104, HogQLParser::RuleColumnTypeExpr);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(715);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 88, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<HogQLParser::ColumnTypeExprSimpleContext>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(659);
      identifier();
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<HogQLParser::ColumnTypeExprNestedContext>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(660);
      identifier();
      setState(661);
      match(HogQLParser::LPAREN);
      setState(662);
      identifier();
      setState(663);
      columnTypeExpr();
      setState(670);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 81, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(664);
          match(HogQLParser::COMMA);
          setState(665);
          identifier();
          setState(666);
          columnTypeExpr(); 
        }
        setState(672);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 81, _ctx);
      }
      setState(674);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == HogQLParser::COMMA) {
        setState(673);
        match(HogQLParser::COMMA);
      }
      setState(676);
      match(HogQLParser::RPAREN);
      break;
    }

    case 3: {
      _localctx = _tracker.createInstance<HogQLParser::ColumnTypeExprEnumContext>(_localctx);
      enterOuterAlt(_localctx, 3);
      setState(678);
      identifier();
      setState(679);
      match(HogQLParser::LPAREN);
      setState(680);
      enumValue();
      setState(685);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 83, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(681);
          match(HogQLParser::COMMA);
          setState(682);
          enumValue(); 
        }
        setState(687);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 83, _ctx);
      }
      setState(689);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == HogQLParser::COMMA) {
        setState(688);
        match(HogQLParser::COMMA);
      }
      setState(691);
      match(HogQLParser::RPAREN);
      break;
    }

    case 4: {
      _localctx = _tracker.createInstance<HogQLParser::ColumnTypeExprComplexContext>(_localctx);
      enterOuterAlt(_localctx, 4);
      setState(693);
      identifier();
      setState(694);
      match(HogQLParser::LPAREN);
      setState(695);
      columnTypeExpr();
      setState(700);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 85, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(696);
          match(HogQLParser::COMMA);
          setState(697);
          columnTypeExpr(); 
        }
        setState(702);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 85, _ctx);
      }
      setState(704);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == HogQLParser::COMMA) {
        setState(703);
        match(HogQLParser::COMMA);
      }
      setState(706);
      match(HogQLParser::RPAREN);
      break;
    }

    case 5: {
      _localctx = _tracker.createInstance<HogQLParser::ColumnTypeExprParamContext>(_localctx);
      enterOuterAlt(_localctx, 5);
      setState(708);
      identifier();
      setState(709);
      match(HogQLParser::LPAREN);
      setState(711);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -1125900443713538) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & 8076106347046764543) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 128)) & 577) != 0)) {
        setState(710);
        columnExprList();
      }
      setState(713);
      match(HogQLParser::RPAREN);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ColumnExprListContext ------------------------------------------------------------------

HogQLParser::ColumnExprListContext::ColumnExprListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<HogQLParser::ColumnExprContext *> HogQLParser::ColumnExprListContext::columnExpr() {
  return getRuleContexts<HogQLParser::ColumnExprContext>();
}

HogQLParser::ColumnExprContext* HogQLParser::ColumnExprListContext::columnExpr(size_t i) {
  return getRuleContext<HogQLParser::ColumnExprContext>(i);
}

std::vector<tree::TerminalNode *> HogQLParser::ColumnExprListContext::COMMA() {
  return getTokens(HogQLParser::COMMA);
}

tree::TerminalNode* HogQLParser::ColumnExprListContext::COMMA(size_t i) {
  return getToken(HogQLParser::COMMA, i);
}


size_t HogQLParser::ColumnExprListContext::getRuleIndex() const {
  return HogQLParser::RuleColumnExprList;
}


std::any HogQLParser::ColumnExprListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprList(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::ColumnExprListContext* HogQLParser::columnExprList() {
  ColumnExprListContext *_localctx = _tracker.createInstance<ColumnExprListContext>(_ctx, getState());
  enterRule(_localctx, 106, HogQLParser::RuleColumnExprList);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(717);
    columnExpr(0);
    setState(722);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 89, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(718);
        match(HogQLParser::COMMA);
        setState(719);
        columnExpr(0); 
      }
      setState(724);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 89, _ctx);
    }
    setState(726);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 90, _ctx)) {
    case 1: {
      setState(725);
      match(HogQLParser::COMMA);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ColumnExprContext ------------------------------------------------------------------

HogQLParser::ColumnExprContext::ColumnExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t HogQLParser::ColumnExprContext::getRuleIndex() const {
  return HogQLParser::RuleColumnExpr;
}

void HogQLParser::ColumnExprContext::copyFrom(ColumnExprContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- ColumnExprTernaryOpContext ------------------------------------------------------------------

std::vector<HogQLParser::ColumnExprContext *> HogQLParser::ColumnExprTernaryOpContext::columnExpr() {
  return getRuleContexts<HogQLParser::ColumnExprContext>();
}

HogQLParser::ColumnExprContext* HogQLParser::ColumnExprTernaryOpContext::columnExpr(size_t i) {
  return getRuleContext<HogQLParser::ColumnExprContext>(i);
}

tree::TerminalNode* HogQLParser::ColumnExprTernaryOpContext::QUERY() {
  return getToken(HogQLParser::QUERY, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprTernaryOpContext::COLON() {
  return getToken(HogQLParser::COLON, 0);
}

HogQLParser::ColumnExprTernaryOpContext::ColumnExprTernaryOpContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprTernaryOpContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprTernaryOp(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprAliasContext ------------------------------------------------------------------

HogQLParser::ColumnExprContext* HogQLParser::ColumnExprAliasContext::columnExpr() {
  return getRuleContext<HogQLParser::ColumnExprContext>(0);
}

tree::TerminalNode* HogQLParser::ColumnExprAliasContext::AS() {
  return getToken(HogQLParser::AS, 0);
}

HogQLParser::IdentifierContext* HogQLParser::ColumnExprAliasContext::identifier() {
  return getRuleContext<HogQLParser::IdentifierContext>(0);
}

tree::TerminalNode* HogQLParser::ColumnExprAliasContext::STRING_LITERAL() {
  return getToken(HogQLParser::STRING_LITERAL, 0);
}

HogQLParser::ColumnExprAliasContext::ColumnExprAliasContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprAliasContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprAlias(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprNegateContext ------------------------------------------------------------------

tree::TerminalNode* HogQLParser::ColumnExprNegateContext::DASH() {
  return getToken(HogQLParser::DASH, 0);
}

HogQLParser::ColumnExprContext* HogQLParser::ColumnExprNegateContext::columnExpr() {
  return getRuleContext<HogQLParser::ColumnExprContext>(0);
}

HogQLParser::ColumnExprNegateContext::ColumnExprNegateContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprNegateContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprNegate(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprDictContext ------------------------------------------------------------------

tree::TerminalNode* HogQLParser::ColumnExprDictContext::LBRACE() {
  return getToken(HogQLParser::LBRACE, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprDictContext::RBRACE() {
  return getToken(HogQLParser::RBRACE, 0);
}

HogQLParser::KvPairListContext* HogQLParser::ColumnExprDictContext::kvPairList() {
  return getRuleContext<HogQLParser::KvPairListContext>(0);
}

HogQLParser::ColumnExprDictContext::ColumnExprDictContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprDictContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprDict(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprSubqueryContext ------------------------------------------------------------------

tree::TerminalNode* HogQLParser::ColumnExprSubqueryContext::LPAREN() {
  return getToken(HogQLParser::LPAREN, 0);
}

HogQLParser::SelectUnionStmtContext* HogQLParser::ColumnExprSubqueryContext::selectUnionStmt() {
  return getRuleContext<HogQLParser::SelectUnionStmtContext>(0);
}

tree::TerminalNode* HogQLParser::ColumnExprSubqueryContext::RPAREN() {
  return getToken(HogQLParser::RPAREN, 0);
}

HogQLParser::ColumnExprSubqueryContext::ColumnExprSubqueryContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprSubqueryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprSubquery(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprLiteralContext ------------------------------------------------------------------

HogQLParser::LiteralContext* HogQLParser::ColumnExprLiteralContext::literal() {
  return getRuleContext<HogQLParser::LiteralContext>(0);
}

HogQLParser::ColumnExprLiteralContext::ColumnExprLiteralContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprLiteral(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprArrayContext ------------------------------------------------------------------

tree::TerminalNode* HogQLParser::ColumnExprArrayContext::LBRACKET() {
  return getToken(HogQLParser::LBRACKET, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprArrayContext::RBRACKET() {
  return getToken(HogQLParser::RBRACKET, 0);
}

HogQLParser::ColumnExprListContext* HogQLParser::ColumnExprArrayContext::columnExprList() {
  return getRuleContext<HogQLParser::ColumnExprListContext>(0);
}

HogQLParser::ColumnExprArrayContext::ColumnExprArrayContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprArrayContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprArray(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprSubstringContext ------------------------------------------------------------------

tree::TerminalNode* HogQLParser::ColumnExprSubstringContext::SUBSTRING() {
  return getToken(HogQLParser::SUBSTRING, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprSubstringContext::LPAREN() {
  return getToken(HogQLParser::LPAREN, 0);
}

std::vector<HogQLParser::ColumnExprContext *> HogQLParser::ColumnExprSubstringContext::columnExpr() {
  return getRuleContexts<HogQLParser::ColumnExprContext>();
}

HogQLParser::ColumnExprContext* HogQLParser::ColumnExprSubstringContext::columnExpr(size_t i) {
  return getRuleContext<HogQLParser::ColumnExprContext>(i);
}

tree::TerminalNode* HogQLParser::ColumnExprSubstringContext::FROM() {
  return getToken(HogQLParser::FROM, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprSubstringContext::RPAREN() {
  return getToken(HogQLParser::RPAREN, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprSubstringContext::FOR() {
  return getToken(HogQLParser::FOR, 0);
}

HogQLParser::ColumnExprSubstringContext::ColumnExprSubstringContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprSubstringContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprSubstring(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprCastContext ------------------------------------------------------------------

tree::TerminalNode* HogQLParser::ColumnExprCastContext::CAST() {
  return getToken(HogQLParser::CAST, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprCastContext::LPAREN() {
  return getToken(HogQLParser::LPAREN, 0);
}

HogQLParser::ColumnExprContext* HogQLParser::ColumnExprCastContext::columnExpr() {
  return getRuleContext<HogQLParser::ColumnExprContext>(0);
}

tree::TerminalNode* HogQLParser::ColumnExprCastContext::AS() {
  return getToken(HogQLParser::AS, 0);
}

HogQLParser::ColumnTypeExprContext* HogQLParser::ColumnExprCastContext::columnTypeExpr() {
  return getRuleContext<HogQLParser::ColumnTypeExprContext>(0);
}

tree::TerminalNode* HogQLParser::ColumnExprCastContext::RPAREN() {
  return getToken(HogQLParser::RPAREN, 0);
}

HogQLParser::ColumnExprCastContext::ColumnExprCastContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprCastContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprCast(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprOrContext ------------------------------------------------------------------

std::vector<HogQLParser::ColumnExprContext *> HogQLParser::ColumnExprOrContext::columnExpr() {
  return getRuleContexts<HogQLParser::ColumnExprContext>();
}

HogQLParser::ColumnExprContext* HogQLParser::ColumnExprOrContext::columnExpr(size_t i) {
  return getRuleContext<HogQLParser::ColumnExprContext>(i);
}

tree::TerminalNode* HogQLParser::ColumnExprOrContext::OR() {
  return getToken(HogQLParser::OR, 0);
}

HogQLParser::ColumnExprOrContext::ColumnExprOrContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprOrContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprOr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprPrecedence1Context ------------------------------------------------------------------

std::vector<HogQLParser::ColumnExprContext *> HogQLParser::ColumnExprPrecedence1Context::columnExpr() {
  return getRuleContexts<HogQLParser::ColumnExprContext>();
}

HogQLParser::ColumnExprContext* HogQLParser::ColumnExprPrecedence1Context::columnExpr(size_t i) {
  return getRuleContext<HogQLParser::ColumnExprContext>(i);
}

tree::TerminalNode* HogQLParser::ColumnExprPrecedence1Context::ASTERISK() {
  return getToken(HogQLParser::ASTERISK, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprPrecedence1Context::SLASH() {
  return getToken(HogQLParser::SLASH, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprPrecedence1Context::PERCENT() {
  return getToken(HogQLParser::PERCENT, 0);
}

HogQLParser::ColumnExprPrecedence1Context::ColumnExprPrecedence1Context(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprPrecedence1Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprPrecedence1(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprPrecedence2Context ------------------------------------------------------------------

std::vector<HogQLParser::ColumnExprContext *> HogQLParser::ColumnExprPrecedence2Context::columnExpr() {
  return getRuleContexts<HogQLParser::ColumnExprContext>();
}

HogQLParser::ColumnExprContext* HogQLParser::ColumnExprPrecedence2Context::columnExpr(size_t i) {
  return getRuleContext<HogQLParser::ColumnExprContext>(i);
}

tree::TerminalNode* HogQLParser::ColumnExprPrecedence2Context::PLUS() {
  return getToken(HogQLParser::PLUS, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprPrecedence2Context::DASH() {
  return getToken(HogQLParser::DASH, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprPrecedence2Context::CONCAT() {
  return getToken(HogQLParser::CONCAT, 0);
}

HogQLParser::ColumnExprPrecedence2Context::ColumnExprPrecedence2Context(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprPrecedence2Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprPrecedence2(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprPrecedence3Context ------------------------------------------------------------------

std::vector<HogQLParser::ColumnExprContext *> HogQLParser::ColumnExprPrecedence3Context::columnExpr() {
  return getRuleContexts<HogQLParser::ColumnExprContext>();
}

HogQLParser::ColumnExprContext* HogQLParser::ColumnExprPrecedence3Context::columnExpr(size_t i) {
  return getRuleContext<HogQLParser::ColumnExprContext>(i);
}

tree::TerminalNode* HogQLParser::ColumnExprPrecedence3Context::IN() {
  return getToken(HogQLParser::IN, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprPrecedence3Context::EQ_DOUBLE() {
  return getToken(HogQLParser::EQ_DOUBLE, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprPrecedence3Context::EQ_SINGLE() {
  return getToken(HogQLParser::EQ_SINGLE, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprPrecedence3Context::NOT_EQ() {
  return getToken(HogQLParser::NOT_EQ, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprPrecedence3Context::LT_EQ() {
  return getToken(HogQLParser::LT_EQ, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprPrecedence3Context::LT() {
  return getToken(HogQLParser::LT, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprPrecedence3Context::GT_EQ() {
  return getToken(HogQLParser::GT_EQ, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprPrecedence3Context::GT() {
  return getToken(HogQLParser::GT, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprPrecedence3Context::LIKE() {
  return getToken(HogQLParser::LIKE, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprPrecedence3Context::ILIKE() {
  return getToken(HogQLParser::ILIKE, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprPrecedence3Context::REGEX_SINGLE() {
  return getToken(HogQLParser::REGEX_SINGLE, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprPrecedence3Context::REGEX_DOUBLE() {
  return getToken(HogQLParser::REGEX_DOUBLE, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprPrecedence3Context::NOT_REGEX() {
  return getToken(HogQLParser::NOT_REGEX, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprPrecedence3Context::IREGEX_SINGLE() {
  return getToken(HogQLParser::IREGEX_SINGLE, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprPrecedence3Context::IREGEX_DOUBLE() {
  return getToken(HogQLParser::IREGEX_DOUBLE, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprPrecedence3Context::NOT_IREGEX() {
  return getToken(HogQLParser::NOT_IREGEX, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprPrecedence3Context::COHORT() {
  return getToken(HogQLParser::COHORT, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprPrecedence3Context::NOT() {
  return getToken(HogQLParser::NOT, 0);
}

HogQLParser::ColumnExprPrecedence3Context::ColumnExprPrecedence3Context(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprPrecedence3Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprPrecedence3(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprIntervalContext ------------------------------------------------------------------

tree::TerminalNode* HogQLParser::ColumnExprIntervalContext::INTERVAL() {
  return getToken(HogQLParser::INTERVAL, 0);
}

HogQLParser::ColumnExprContext* HogQLParser::ColumnExprIntervalContext::columnExpr() {
  return getRuleContext<HogQLParser::ColumnExprContext>(0);
}

HogQLParser::IntervalContext* HogQLParser::ColumnExprIntervalContext::interval() {
  return getRuleContext<HogQLParser::IntervalContext>(0);
}

HogQLParser::ColumnExprIntervalContext::ColumnExprIntervalContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprIntervalContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprInterval(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprIsNullContext ------------------------------------------------------------------

HogQLParser::ColumnExprContext* HogQLParser::ColumnExprIsNullContext::columnExpr() {
  return getRuleContext<HogQLParser::ColumnExprContext>(0);
}

tree::TerminalNode* HogQLParser::ColumnExprIsNullContext::IS() {
  return getToken(HogQLParser::IS, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprIsNullContext::NULL_SQL() {
  return getToken(HogQLParser::NULL_SQL, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprIsNullContext::NOT() {
  return getToken(HogQLParser::NOT, 0);
}

HogQLParser::ColumnExprIsNullContext::ColumnExprIsNullContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprIsNullContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprIsNull(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprWinFunctionTargetContext ------------------------------------------------------------------

std::vector<HogQLParser::IdentifierContext *> HogQLParser::ColumnExprWinFunctionTargetContext::identifier() {
  return getRuleContexts<HogQLParser::IdentifierContext>();
}

HogQLParser::IdentifierContext* HogQLParser::ColumnExprWinFunctionTargetContext::identifier(size_t i) {
  return getRuleContext<HogQLParser::IdentifierContext>(i);
}

tree::TerminalNode* HogQLParser::ColumnExprWinFunctionTargetContext::OVER() {
  return getToken(HogQLParser::OVER, 0);
}

std::vector<tree::TerminalNode *> HogQLParser::ColumnExprWinFunctionTargetContext::LPAREN() {
  return getTokens(HogQLParser::LPAREN);
}

tree::TerminalNode* HogQLParser::ColumnExprWinFunctionTargetContext::LPAREN(size_t i) {
  return getToken(HogQLParser::LPAREN, i);
}

std::vector<tree::TerminalNode *> HogQLParser::ColumnExprWinFunctionTargetContext::RPAREN() {
  return getTokens(HogQLParser::RPAREN);
}

tree::TerminalNode* HogQLParser::ColumnExprWinFunctionTargetContext::RPAREN(size_t i) {
  return getToken(HogQLParser::RPAREN, i);
}

HogQLParser::ColumnExprListContext* HogQLParser::ColumnExprWinFunctionTargetContext::columnExprList() {
  return getRuleContext<HogQLParser::ColumnExprListContext>(0);
}

tree::TerminalNode* HogQLParser::ColumnExprWinFunctionTargetContext::DISTINCT() {
  return getToken(HogQLParser::DISTINCT, 0);
}

HogQLParser::ColumnArgListContext* HogQLParser::ColumnExprWinFunctionTargetContext::columnArgList() {
  return getRuleContext<HogQLParser::ColumnArgListContext>(0);
}

HogQLParser::ColumnExprWinFunctionTargetContext::ColumnExprWinFunctionTargetContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprWinFunctionTargetContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprWinFunctionTarget(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprTrimContext ------------------------------------------------------------------

tree::TerminalNode* HogQLParser::ColumnExprTrimContext::TRIM() {
  return getToken(HogQLParser::TRIM, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprTrimContext::LPAREN() {
  return getToken(HogQLParser::LPAREN, 0);
}

HogQLParser::StringContext* HogQLParser::ColumnExprTrimContext::string() {
  return getRuleContext<HogQLParser::StringContext>(0);
}

tree::TerminalNode* HogQLParser::ColumnExprTrimContext::FROM() {
  return getToken(HogQLParser::FROM, 0);
}

HogQLParser::ColumnExprContext* HogQLParser::ColumnExprTrimContext::columnExpr() {
  return getRuleContext<HogQLParser::ColumnExprContext>(0);
}

tree::TerminalNode* HogQLParser::ColumnExprTrimContext::RPAREN() {
  return getToken(HogQLParser::RPAREN, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprTrimContext::BOTH() {
  return getToken(HogQLParser::BOTH, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprTrimContext::LEADING() {
  return getToken(HogQLParser::LEADING, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprTrimContext::TRAILING() {
  return getToken(HogQLParser::TRAILING, 0);
}

HogQLParser::ColumnExprTrimContext::ColumnExprTrimContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprTrimContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprTrim(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprTagElementContext ------------------------------------------------------------------

HogQLParser::HogqlxTagElementContext* HogQLParser::ColumnExprTagElementContext::hogqlxTagElement() {
  return getRuleContext<HogQLParser::HogqlxTagElementContext>(0);
}

HogQLParser::ColumnExprTagElementContext::ColumnExprTagElementContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprTagElementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprTagElement(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprTemplateStringContext ------------------------------------------------------------------

HogQLParser::TemplateStringContext* HogQLParser::ColumnExprTemplateStringContext::templateString() {
  return getRuleContext<HogQLParser::TemplateStringContext>(0);
}

HogQLParser::ColumnExprTemplateStringContext::ColumnExprTemplateStringContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprTemplateStringContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprTemplateString(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprTupleContext ------------------------------------------------------------------

tree::TerminalNode* HogQLParser::ColumnExprTupleContext::LPAREN() {
  return getToken(HogQLParser::LPAREN, 0);
}

HogQLParser::ColumnExprListContext* HogQLParser::ColumnExprTupleContext::columnExprList() {
  return getRuleContext<HogQLParser::ColumnExprListContext>(0);
}

tree::TerminalNode* HogQLParser::ColumnExprTupleContext::RPAREN() {
  return getToken(HogQLParser::RPAREN, 0);
}

HogQLParser::ColumnExprTupleContext::ColumnExprTupleContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprTupleContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprTuple(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprArrayAccessContext ------------------------------------------------------------------

std::vector<HogQLParser::ColumnExprContext *> HogQLParser::ColumnExprArrayAccessContext::columnExpr() {
  return getRuleContexts<HogQLParser::ColumnExprContext>();
}

HogQLParser::ColumnExprContext* HogQLParser::ColumnExprArrayAccessContext::columnExpr(size_t i) {
  return getRuleContext<HogQLParser::ColumnExprContext>(i);
}

tree::TerminalNode* HogQLParser::ColumnExprArrayAccessContext::LBRACKET() {
  return getToken(HogQLParser::LBRACKET, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprArrayAccessContext::RBRACKET() {
  return getToken(HogQLParser::RBRACKET, 0);
}

HogQLParser::ColumnExprArrayAccessContext::ColumnExprArrayAccessContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprArrayAccessContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprArrayAccess(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprBetweenContext ------------------------------------------------------------------

std::vector<HogQLParser::ColumnExprContext *> HogQLParser::ColumnExprBetweenContext::columnExpr() {
  return getRuleContexts<HogQLParser::ColumnExprContext>();
}

HogQLParser::ColumnExprContext* HogQLParser::ColumnExprBetweenContext::columnExpr(size_t i) {
  return getRuleContext<HogQLParser::ColumnExprContext>(i);
}

tree::TerminalNode* HogQLParser::ColumnExprBetweenContext::BETWEEN() {
  return getToken(HogQLParser::BETWEEN, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprBetweenContext::AND() {
  return getToken(HogQLParser::AND, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprBetweenContext::NOT() {
  return getToken(HogQLParser::NOT, 0);
}

HogQLParser::ColumnExprBetweenContext::ColumnExprBetweenContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprBetweenContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprBetween(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprPropertyAccessContext ------------------------------------------------------------------

HogQLParser::ColumnExprContext* HogQLParser::ColumnExprPropertyAccessContext::columnExpr() {
  return getRuleContext<HogQLParser::ColumnExprContext>(0);
}

tree::TerminalNode* HogQLParser::ColumnExprPropertyAccessContext::DOT() {
  return getToken(HogQLParser::DOT, 0);
}

HogQLParser::IdentifierContext* HogQLParser::ColumnExprPropertyAccessContext::identifier() {
  return getRuleContext<HogQLParser::IdentifierContext>(0);
}

HogQLParser::ColumnExprPropertyAccessContext::ColumnExprPropertyAccessContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprPropertyAccessContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprPropertyAccess(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprParensContext ------------------------------------------------------------------

tree::TerminalNode* HogQLParser::ColumnExprParensContext::LPAREN() {
  return getToken(HogQLParser::LPAREN, 0);
}

HogQLParser::ColumnExprContext* HogQLParser::ColumnExprParensContext::columnExpr() {
  return getRuleContext<HogQLParser::ColumnExprContext>(0);
}

tree::TerminalNode* HogQLParser::ColumnExprParensContext::RPAREN() {
  return getToken(HogQLParser::RPAREN, 0);
}

HogQLParser::ColumnExprParensContext::ColumnExprParensContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprParensContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprParens(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprTimestampContext ------------------------------------------------------------------

tree::TerminalNode* HogQLParser::ColumnExprTimestampContext::TIMESTAMP() {
  return getToken(HogQLParser::TIMESTAMP, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprTimestampContext::STRING_LITERAL() {
  return getToken(HogQLParser::STRING_LITERAL, 0);
}

HogQLParser::ColumnExprTimestampContext::ColumnExprTimestampContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprTimestampContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprTimestamp(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprNullishContext ------------------------------------------------------------------

std::vector<HogQLParser::ColumnExprContext *> HogQLParser::ColumnExprNullishContext::columnExpr() {
  return getRuleContexts<HogQLParser::ColumnExprContext>();
}

HogQLParser::ColumnExprContext* HogQLParser::ColumnExprNullishContext::columnExpr(size_t i) {
  return getRuleContext<HogQLParser::ColumnExprContext>(i);
}

tree::TerminalNode* HogQLParser::ColumnExprNullishContext::NULLISH() {
  return getToken(HogQLParser::NULLISH, 0);
}

HogQLParser::ColumnExprNullishContext::ColumnExprNullishContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprNullishContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprNullish(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprAndContext ------------------------------------------------------------------

std::vector<HogQLParser::ColumnExprContext *> HogQLParser::ColumnExprAndContext::columnExpr() {
  return getRuleContexts<HogQLParser::ColumnExprContext>();
}

HogQLParser::ColumnExprContext* HogQLParser::ColumnExprAndContext::columnExpr(size_t i) {
  return getRuleContext<HogQLParser::ColumnExprContext>(i);
}

tree::TerminalNode* HogQLParser::ColumnExprAndContext::AND() {
  return getToken(HogQLParser::AND, 0);
}

HogQLParser::ColumnExprAndContext::ColumnExprAndContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprAndContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprAnd(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprTupleAccessContext ------------------------------------------------------------------

HogQLParser::ColumnExprContext* HogQLParser::ColumnExprTupleAccessContext::columnExpr() {
  return getRuleContext<HogQLParser::ColumnExprContext>(0);
}

tree::TerminalNode* HogQLParser::ColumnExprTupleAccessContext::DOT() {
  return getToken(HogQLParser::DOT, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprTupleAccessContext::DECIMAL_LITERAL() {
  return getToken(HogQLParser::DECIMAL_LITERAL, 0);
}

HogQLParser::ColumnExprTupleAccessContext::ColumnExprTupleAccessContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprTupleAccessContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprTupleAccess(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprCaseContext ------------------------------------------------------------------

tree::TerminalNode* HogQLParser::ColumnExprCaseContext::CASE() {
  return getToken(HogQLParser::CASE, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprCaseContext::END() {
  return getToken(HogQLParser::END, 0);
}

std::vector<tree::TerminalNode *> HogQLParser::ColumnExprCaseContext::WHEN() {
  return getTokens(HogQLParser::WHEN);
}

tree::TerminalNode* HogQLParser::ColumnExprCaseContext::WHEN(size_t i) {
  return getToken(HogQLParser::WHEN, i);
}

std::vector<tree::TerminalNode *> HogQLParser::ColumnExprCaseContext::THEN() {
  return getTokens(HogQLParser::THEN);
}

tree::TerminalNode* HogQLParser::ColumnExprCaseContext::THEN(size_t i) {
  return getToken(HogQLParser::THEN, i);
}

tree::TerminalNode* HogQLParser::ColumnExprCaseContext::ELSE() {
  return getToken(HogQLParser::ELSE, 0);
}

std::vector<HogQLParser::ColumnExprContext *> HogQLParser::ColumnExprCaseContext::columnExpr() {
  return getRuleContexts<HogQLParser::ColumnExprContext>();
}

HogQLParser::ColumnExprContext* HogQLParser::ColumnExprCaseContext::columnExpr(size_t i) {
  return getRuleContext<HogQLParser::ColumnExprContext>(i);
}

HogQLParser::ColumnExprCaseContext::ColumnExprCaseContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprCaseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprCase(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprDateContext ------------------------------------------------------------------

tree::TerminalNode* HogQLParser::ColumnExprDateContext::DATE() {
  return getToken(HogQLParser::DATE, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprDateContext::STRING_LITERAL() {
  return getToken(HogQLParser::STRING_LITERAL, 0);
}

HogQLParser::ColumnExprDateContext::ColumnExprDateContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprDateContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprDate(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprNotContext ------------------------------------------------------------------

tree::TerminalNode* HogQLParser::ColumnExprNotContext::NOT() {
  return getToken(HogQLParser::NOT, 0);
}

HogQLParser::ColumnExprContext* HogQLParser::ColumnExprNotContext::columnExpr() {
  return getRuleContext<HogQLParser::ColumnExprContext>(0);
}

HogQLParser::ColumnExprNotContext::ColumnExprNotContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprNotContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprNot(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprWinFunctionContext ------------------------------------------------------------------

HogQLParser::IdentifierContext* HogQLParser::ColumnExprWinFunctionContext::identifier() {
  return getRuleContext<HogQLParser::IdentifierContext>(0);
}

tree::TerminalNode* HogQLParser::ColumnExprWinFunctionContext::OVER() {
  return getToken(HogQLParser::OVER, 0);
}

std::vector<tree::TerminalNode *> HogQLParser::ColumnExprWinFunctionContext::LPAREN() {
  return getTokens(HogQLParser::LPAREN);
}

tree::TerminalNode* HogQLParser::ColumnExprWinFunctionContext::LPAREN(size_t i) {
  return getToken(HogQLParser::LPAREN, i);
}

HogQLParser::WindowExprContext* HogQLParser::ColumnExprWinFunctionContext::windowExpr() {
  return getRuleContext<HogQLParser::WindowExprContext>(0);
}

std::vector<tree::TerminalNode *> HogQLParser::ColumnExprWinFunctionContext::RPAREN() {
  return getTokens(HogQLParser::RPAREN);
}

tree::TerminalNode* HogQLParser::ColumnExprWinFunctionContext::RPAREN(size_t i) {
  return getToken(HogQLParser::RPAREN, i);
}

HogQLParser::ColumnExprListContext* HogQLParser::ColumnExprWinFunctionContext::columnExprList() {
  return getRuleContext<HogQLParser::ColumnExprListContext>(0);
}

tree::TerminalNode* HogQLParser::ColumnExprWinFunctionContext::DISTINCT() {
  return getToken(HogQLParser::DISTINCT, 0);
}

HogQLParser::ColumnArgListContext* HogQLParser::ColumnExprWinFunctionContext::columnArgList() {
  return getRuleContext<HogQLParser::ColumnArgListContext>(0);
}

HogQLParser::ColumnExprWinFunctionContext::ColumnExprWinFunctionContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprWinFunctionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprWinFunction(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprIdentifierContext ------------------------------------------------------------------

HogQLParser::ColumnIdentifierContext* HogQLParser::ColumnExprIdentifierContext::columnIdentifier() {
  return getRuleContext<HogQLParser::ColumnIdentifierContext>(0);
}

HogQLParser::ColumnExprIdentifierContext::ColumnExprIdentifierContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprIdentifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprIdentifier(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprFunctionContext ------------------------------------------------------------------

HogQLParser::IdentifierContext* HogQLParser::ColumnExprFunctionContext::identifier() {
  return getRuleContext<HogQLParser::IdentifierContext>(0);
}

std::vector<tree::TerminalNode *> HogQLParser::ColumnExprFunctionContext::LPAREN() {
  return getTokens(HogQLParser::LPAREN);
}

tree::TerminalNode* HogQLParser::ColumnExprFunctionContext::LPAREN(size_t i) {
  return getToken(HogQLParser::LPAREN, i);
}

std::vector<tree::TerminalNode *> HogQLParser::ColumnExprFunctionContext::RPAREN() {
  return getTokens(HogQLParser::RPAREN);
}

tree::TerminalNode* HogQLParser::ColumnExprFunctionContext::RPAREN(size_t i) {
  return getToken(HogQLParser::RPAREN, i);
}

tree::TerminalNode* HogQLParser::ColumnExprFunctionContext::DISTINCT() {
  return getToken(HogQLParser::DISTINCT, 0);
}

HogQLParser::ColumnArgListContext* HogQLParser::ColumnExprFunctionContext::columnArgList() {
  return getRuleContext<HogQLParser::ColumnArgListContext>(0);
}

HogQLParser::ColumnExprListContext* HogQLParser::ColumnExprFunctionContext::columnExprList() {
  return getRuleContext<HogQLParser::ColumnExprListContext>(0);
}

HogQLParser::ColumnExprFunctionContext::ColumnExprFunctionContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprFunctionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprFunction(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprAsteriskContext ------------------------------------------------------------------

tree::TerminalNode* HogQLParser::ColumnExprAsteriskContext::ASTERISK() {
  return getToken(HogQLParser::ASTERISK, 0);
}

HogQLParser::TableIdentifierContext* HogQLParser::ColumnExprAsteriskContext::tableIdentifier() {
  return getRuleContext<HogQLParser::TableIdentifierContext>(0);
}

tree::TerminalNode* HogQLParser::ColumnExprAsteriskContext::DOT() {
  return getToken(HogQLParser::DOT, 0);
}

HogQLParser::ColumnExprAsteriskContext::ColumnExprAsteriskContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprAsteriskContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprAsterisk(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::ColumnExprContext* HogQLParser::columnExpr() {
   return columnExpr(0);
}

HogQLParser::ColumnExprContext* HogQLParser::columnExpr(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  HogQLParser::ColumnExprContext *_localctx = _tracker.createInstance<ColumnExprContext>(_ctx, parentState);
  HogQLParser::ColumnExprContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 108;
  enterRecursionRule(_localctx, 108, HogQLParser::RuleColumnExpr, precedence);

    size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(877);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 110, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<ColumnExprCaseContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;

      setState(729);
      match(HogQLParser::CASE);
      setState(731);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 91, _ctx)) {
      case 1: {
        setState(730);
        antlrcpp::downCast<ColumnExprCaseContext *>(_localctx)->caseExpr = columnExpr(0);
        break;
      }

      default:
        break;
      }
      setState(738); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(733);
        match(HogQLParser::WHEN);
        setState(734);
        antlrcpp::downCast<ColumnExprCaseContext *>(_localctx)->whenExpr = columnExpr(0);
        setState(735);
        match(HogQLParser::THEN);
        setState(736);
        antlrcpp::downCast<ColumnExprCaseContext *>(_localctx)->thenExpr = columnExpr(0);
        setState(740); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (_la == HogQLParser::WHEN);
      setState(744);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == HogQLParser::ELSE) {
        setState(742);
        match(HogQLParser::ELSE);
        setState(743);
        antlrcpp::downCast<ColumnExprCaseContext *>(_localctx)->elseExpr = columnExpr(0);
      }
      setState(746);
      match(HogQLParser::END);
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<ColumnExprCastContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(748);
      match(HogQLParser::CAST);
      setState(749);
      match(HogQLParser::LPAREN);
      setState(750);
      columnExpr(0);
      setState(751);
      match(HogQLParser::AS);
      setState(752);
      columnTypeExpr();
      setState(753);
      match(HogQLParser::RPAREN);
      break;
    }

    case 3: {
      _localctx = _tracker.createInstance<ColumnExprDateContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(755);
      match(HogQLParser::DATE);
      setState(756);
      match(HogQLParser::STRING_LITERAL);
      break;
    }

    case 4: {
      _localctx = _tracker.createInstance<ColumnExprIntervalContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(757);
      match(HogQLParser::INTERVAL);
      setState(758);
      columnExpr(0);
      setState(759);
      interval();
      break;
    }

    case 5: {
      _localctx = _tracker.createInstance<ColumnExprSubstringContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(761);
      match(HogQLParser::SUBSTRING);
      setState(762);
      match(HogQLParser::LPAREN);
      setState(763);
      columnExpr(0);
      setState(764);
      match(HogQLParser::FROM);
      setState(765);
      columnExpr(0);
      setState(768);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == HogQLParser::FOR) {
        setState(766);
        match(HogQLParser::FOR);
        setState(767);
        columnExpr(0);
      }
      setState(770);
      match(HogQLParser::RPAREN);
      break;
    }

    case 6: {
      _localctx = _tracker.createInstance<ColumnExprTimestampContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(772);
      match(HogQLParser::TIMESTAMP);
      setState(773);
      match(HogQLParser::STRING_LITERAL);
      break;
    }

    case 7: {
      _localctx = _tracker.createInstance<ColumnExprTrimContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(774);
      match(HogQLParser::TRIM);
      setState(775);
      match(HogQLParser::LPAREN);
      setState(776);
      _la = _input->LA(1);
      if (!(_la == HogQLParser::BOTH

      || _la == HogQLParser::LEADING || _la == HogQLParser::TRAILING)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(777);
      string();
      setState(778);
      match(HogQLParser::FROM);
      setState(779);
      columnExpr(0);
      setState(780);
      match(HogQLParser::RPAREN);
      break;
    }

    case 8: {
      _localctx = _tracker.createInstance<ColumnExprWinFunctionContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(782);
      identifier();

      setState(783);
      match(HogQLParser::LPAREN);
      setState(785);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -1125900443713538) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & 8076106347046764543) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 128)) & 577) != 0)) {
        setState(784);
        columnExprList();
      }
      setState(787);
      match(HogQLParser::RPAREN);
      setState(797);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == HogQLParser::LPAREN) {
        setState(789);
        match(HogQLParser::LPAREN);
        setState(791);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 96, _ctx)) {
        case 1: {
          setState(790);
          match(HogQLParser::DISTINCT);
          break;
        }

        default:
          break;
        }
        setState(794);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & -1125900443713538) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 64)) & 8076106347046764543) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 128)) & 577) != 0)) {
          setState(793);
          columnArgList();
        }
        setState(796);
        match(HogQLParser::RPAREN);
      }
      setState(799);
      match(HogQLParser::OVER);
      setState(800);
      match(HogQLParser::LPAREN);
      setState(801);
      windowExpr();
      setState(802);
      match(HogQLParser::RPAREN);
      break;
    }

    case 9: {
      _localctx = _tracker.createInstance<ColumnExprWinFunctionTargetContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(804);
      identifier();

      setState(805);
      match(HogQLParser::LPAREN);
      setState(807);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -1125900443713538) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & 8076106347046764543) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 128)) & 577) != 0)) {
        setState(806);
        columnExprList();
      }
      setState(809);
      match(HogQLParser::RPAREN);
      setState(819);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == HogQLParser::LPAREN) {
        setState(811);
        match(HogQLParser::LPAREN);
        setState(813);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 100, _ctx)) {
        case 1: {
          setState(812);
          match(HogQLParser::DISTINCT);
          break;
        }

        default:
          break;
        }
        setState(816);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & -1125900443713538) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 64)) & 8076106347046764543) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 128)) & 577) != 0)) {
          setState(815);
          columnArgList();
        }
        setState(818);
        match(HogQLParser::RPAREN);
      }
      setState(821);
      match(HogQLParser::OVER);
      setState(822);
      identifier();
      break;
    }

    case 10: {
      _localctx = _tracker.createInstance<ColumnExprFunctionContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(824);
      identifier();
      setState(830);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 104, _ctx)) {
      case 1: {
        setState(825);
        match(HogQLParser::LPAREN);
        setState(827);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & -1125900443713538) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 64)) & 8076106347046764543) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 128)) & 577) != 0)) {
          setState(826);
          columnExprList();
        }
        setState(829);
        match(HogQLParser::RPAREN);
        break;
      }

      default:
        break;
      }
      setState(832);
      match(HogQLParser::LPAREN);
      setState(834);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 105, _ctx)) {
      case 1: {
        setState(833);
        match(HogQLParser::DISTINCT);
        break;
      }

      default:
        break;
      }
      setState(837);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -1125900443713538) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & 8076106347046764543) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 128)) & 577) != 0)) {
        setState(836);
        columnArgList();
      }
      setState(839);
      match(HogQLParser::RPAREN);
      break;
    }

    case 11: {
      _localctx = _tracker.createInstance<ColumnExprTagElementContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(841);
      hogqlxTagElement();
      break;
    }

    case 12: {
      _localctx = _tracker.createInstance<ColumnExprTemplateStringContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(842);
      templateString();
      break;
    }

    case 13: {
      _localctx = _tracker.createInstance<ColumnExprLiteralContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(843);
      literal();
      break;
    }

    case 14: {
      _localctx = _tracker.createInstance<ColumnExprNegateContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(844);
      match(HogQLParser::DASH);
      setState(845);
      columnExpr(19);
      break;
    }

    case 15: {
      _localctx = _tracker.createInstance<ColumnExprNotContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(846);
      match(HogQLParser::NOT);
      setState(847);
      columnExpr(13);
      break;
    }

    case 16: {
      _localctx = _tracker.createInstance<ColumnExprAsteriskContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(851);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -181272084561788930) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & 201863462911) != 0)) {
        setState(848);
        tableIdentifier();
        setState(849);
        match(HogQLParser::DOT);
      }
      setState(853);
      match(HogQLParser::ASTERISK);
      break;
    }

    case 17: {
      _localctx = _tracker.createInstance<ColumnExprSubqueryContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(854);
      match(HogQLParser::LPAREN);
      setState(855);
      selectUnionStmt();
      setState(856);
      match(HogQLParser::RPAREN);
      break;
    }

    case 18: {
      _localctx = _tracker.createInstance<ColumnExprParensContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(858);
      match(HogQLParser::LPAREN);
      setState(859);
      columnExpr(0);
      setState(860);
      match(HogQLParser::RPAREN);
      break;
    }

    case 19: {
      _localctx = _tracker.createInstance<ColumnExprTupleContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(862);
      match(HogQLParser::LPAREN);
      setState(863);
      columnExprList();
      setState(864);
      match(HogQLParser::RPAREN);
      break;
    }

    case 20: {
      _localctx = _tracker.createInstance<ColumnExprArrayContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(866);
      match(HogQLParser::LBRACKET);
      setState(868);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -1125900443713538) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & 8076106347046764543) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 128)) & 577) != 0)) {
        setState(867);
        columnExprList();
      }
      setState(870);
      match(HogQLParser::RBRACKET);
      break;
    }

    case 21: {
      _localctx = _tracker.createInstance<ColumnExprDictContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(871);
      match(HogQLParser::LBRACE);
      setState(873);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -1125900443713538) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & 8076106347046764543) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 128)) & 577) != 0)) {
        setState(872);
        kvPairList();
      }
      setState(875);
      match(HogQLParser::RBRACE);
      break;
    }

    case 22: {
      _localctx = _tracker.createInstance<ColumnExprIdentifierContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(876);
      columnIdentifier();
      break;
    }

    default:
      break;
    }
    _ctx->stop = _input->LT(-1);
    setState(971);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 121, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(969);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 120, _ctx)) {
        case 1: {
          auto newContext = _tracker.createInstance<ColumnExprPrecedence1Context>(_tracker.createInstance<ColumnExprContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->left = previousContext;
          pushNewRecursionContext(newContext, startState, RuleColumnExpr);
          setState(879);

          if (!(precpred(_ctx, 18))) throw FailedPredicateException(this, "precpred(_ctx, 18)");
          setState(883);
          _errHandler->sync(this);
          switch (_input->LA(1)) {
            case HogQLParser::ASTERISK: {
              setState(880);
              antlrcpp::downCast<ColumnExprPrecedence1Context *>(_localctx)->operator_ = match(HogQLParser::ASTERISK);
              break;
            }

            case HogQLParser::SLASH: {
              setState(881);
              antlrcpp::downCast<ColumnExprPrecedence1Context *>(_localctx)->operator_ = match(HogQLParser::SLASH);
              break;
            }

            case HogQLParser::PERCENT: {
              setState(882);
              antlrcpp::downCast<ColumnExprPrecedence1Context *>(_localctx)->operator_ = match(HogQLParser::PERCENT);
              break;
            }

          default:
            throw NoViableAltException(this);
          }
          setState(885);
          antlrcpp::downCast<ColumnExprPrecedence1Context *>(_localctx)->right = columnExpr(19);
          break;
        }

        case 2: {
          auto newContext = _tracker.createInstance<ColumnExprPrecedence2Context>(_tracker.createInstance<ColumnExprContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->left = previousContext;
          pushNewRecursionContext(newContext, startState, RuleColumnExpr);
          setState(886);

          if (!(precpred(_ctx, 17))) throw FailedPredicateException(this, "precpred(_ctx, 17)");
          setState(890);
          _errHandler->sync(this);
          switch (_input->LA(1)) {
            case HogQLParser::PLUS: {
              setState(887);
              antlrcpp::downCast<ColumnExprPrecedence2Context *>(_localctx)->operator_ = match(HogQLParser::PLUS);
              break;
            }

            case HogQLParser::DASH: {
              setState(888);
              antlrcpp::downCast<ColumnExprPrecedence2Context *>(_localctx)->operator_ = match(HogQLParser::DASH);
              break;
            }

            case HogQLParser::CONCAT: {
              setState(889);
              antlrcpp::downCast<ColumnExprPrecedence2Context *>(_localctx)->operator_ = match(HogQLParser::CONCAT);
              break;
            }

          default:
            throw NoViableAltException(this);
          }
          setState(892);
          antlrcpp::downCast<ColumnExprPrecedence2Context *>(_localctx)->right = columnExpr(18);
          break;
        }

        case 3: {
          auto newContext = _tracker.createInstance<ColumnExprPrecedence3Context>(_tracker.createInstance<ColumnExprContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->left = previousContext;
          pushNewRecursionContext(newContext, startState, RuleColumnExpr);
          setState(893);

          if (!(precpred(_ctx, 16))) throw FailedPredicateException(this, "precpred(_ctx, 16)");
          setState(918);
          _errHandler->sync(this);
          switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 116, _ctx)) {
          case 1: {
            setState(894);
            antlrcpp::downCast<ColumnExprPrecedence3Context *>(_localctx)->operator_ = match(HogQLParser::EQ_DOUBLE);
            break;
          }

          case 2: {
            setState(895);
            antlrcpp::downCast<ColumnExprPrecedence3Context *>(_localctx)->operator_ = match(HogQLParser::EQ_SINGLE);
            break;
          }

          case 3: {
            setState(896);
            antlrcpp::downCast<ColumnExprPrecedence3Context *>(_localctx)->operator_ = match(HogQLParser::NOT_EQ);
            break;
          }

          case 4: {
            setState(897);
            antlrcpp::downCast<ColumnExprPrecedence3Context *>(_localctx)->operator_ = match(HogQLParser::LT_EQ);
            break;
          }

          case 5: {
            setState(898);
            antlrcpp::downCast<ColumnExprPrecedence3Context *>(_localctx)->operator_ = match(HogQLParser::LT);
            break;
          }

          case 6: {
            setState(899);
            antlrcpp::downCast<ColumnExprPrecedence3Context *>(_localctx)->operator_ = match(HogQLParser::GT_EQ);
            break;
          }

          case 7: {
            setState(900);
            antlrcpp::downCast<ColumnExprPrecedence3Context *>(_localctx)->operator_ = match(HogQLParser::GT);
            break;
          }

          case 8: {
            setState(902);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == HogQLParser::NOT) {
              setState(901);
              antlrcpp::downCast<ColumnExprPrecedence3Context *>(_localctx)->operator_ = match(HogQLParser::NOT);
            }
            setState(904);
            match(HogQLParser::IN);
            setState(906);
            _errHandler->sync(this);

            switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 114, _ctx)) {
            case 1: {
              setState(905);
              match(HogQLParser::COHORT);
              break;
            }

            default:
              break;
            }
            break;
          }

          case 9: {
            setState(909);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == HogQLParser::NOT) {
              setState(908);
              antlrcpp::downCast<ColumnExprPrecedence3Context *>(_localctx)->operator_ = match(HogQLParser::NOT);
            }
            setState(911);
            _la = _input->LA(1);
            if (!(_la == HogQLParser::ILIKE

            || _la == HogQLParser::LIKE)) {
            _errHandler->recoverInline(this);
            }
            else {
              _errHandler->reportMatch(this);
              consume();
            }
            break;
          }

          case 10: {
            setState(912);
            antlrcpp::downCast<ColumnExprPrecedence3Context *>(_localctx)->operator_ = match(HogQLParser::REGEX_SINGLE);
            break;
          }

          case 11: {
            setState(913);
            antlrcpp::downCast<ColumnExprPrecedence3Context *>(_localctx)->operator_ = match(HogQLParser::REGEX_DOUBLE);
            break;
          }

          case 12: {
            setState(914);
            antlrcpp::downCast<ColumnExprPrecedence3Context *>(_localctx)->operator_ = match(HogQLParser::NOT_REGEX);
            break;
          }

          case 13: {
            setState(915);
            antlrcpp::downCast<ColumnExprPrecedence3Context *>(_localctx)->operator_ = match(HogQLParser::IREGEX_SINGLE);
            break;
          }

          case 14: {
            setState(916);
            antlrcpp::downCast<ColumnExprPrecedence3Context *>(_localctx)->operator_ = match(HogQLParser::IREGEX_DOUBLE);
            break;
          }

          case 15: {
            setState(917);
            antlrcpp::downCast<ColumnExprPrecedence3Context *>(_localctx)->operator_ = match(HogQLParser::NOT_IREGEX);
            break;
          }

          default:
            break;
          }
          setState(920);
          antlrcpp::downCast<ColumnExprPrecedence3Context *>(_localctx)->right = columnExpr(17);
          break;
        }

        case 4: {
          auto newContext = _tracker.createInstance<ColumnExprNullishContext>(_tracker.createInstance<ColumnExprContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleColumnExpr);
          setState(921);

          if (!(precpred(_ctx, 14))) throw FailedPredicateException(this, "precpred(_ctx, 14)");
          setState(922);
          match(HogQLParser::NULLISH);
          setState(923);
          columnExpr(15);
          break;
        }

        case 5: {
          auto newContext = _tracker.createInstance<ColumnExprAndContext>(_tracker.createInstance<ColumnExprContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleColumnExpr);
          setState(924);

          if (!(precpred(_ctx, 12))) throw FailedPredicateException(this, "precpred(_ctx, 12)");
          setState(925);
          match(HogQLParser::AND);
          setState(926);
          columnExpr(13);
          break;
        }

        case 6: {
          auto newContext = _tracker.createInstance<ColumnExprOrContext>(_tracker.createInstance<ColumnExprContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleColumnExpr);
          setState(927);

          if (!(precpred(_ctx, 11))) throw FailedPredicateException(this, "precpred(_ctx, 11)");
          setState(928);
          match(HogQLParser::OR);
          setState(929);
          columnExpr(12);
          break;
        }

        case 7: {
          auto newContext = _tracker.createInstance<ColumnExprBetweenContext>(_tracker.createInstance<ColumnExprContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleColumnExpr);
          setState(930);

          if (!(precpred(_ctx, 10))) throw FailedPredicateException(this, "precpred(_ctx, 10)");
          setState(932);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == HogQLParser::NOT) {
            setState(931);
            match(HogQLParser::NOT);
          }
          setState(934);
          match(HogQLParser::BETWEEN);
          setState(935);
          columnExpr(0);
          setState(936);
          match(HogQLParser::AND);
          setState(937);
          columnExpr(11);
          break;
        }

        case 8: {
          auto newContext = _tracker.createInstance<ColumnExprTernaryOpContext>(_tracker.createInstance<ColumnExprContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleColumnExpr);
          setState(939);

          if (!(precpred(_ctx, 9))) throw FailedPredicateException(this, "precpred(_ctx, 9)");
          setState(940);
          match(HogQLParser::QUERY);
          setState(941);
          columnExpr(0);
          setState(942);
          match(HogQLParser::COLON);
          setState(943);
          columnExpr(9);
          break;
        }

        case 9: {
          auto newContext = _tracker.createInstance<ColumnExprArrayAccessContext>(_tracker.createInstance<ColumnExprContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleColumnExpr);
          setState(945);

          if (!(precpred(_ctx, 22))) throw FailedPredicateException(this, "precpred(_ctx, 22)");
          setState(946);
          match(HogQLParser::LBRACKET);
          setState(947);
          columnExpr(0);
          setState(948);
          match(HogQLParser::RBRACKET);
          break;
        }

        case 10: {
          auto newContext = _tracker.createInstance<ColumnExprTupleAccessContext>(_tracker.createInstance<ColumnExprContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleColumnExpr);
          setState(950);

          if (!(precpred(_ctx, 21))) throw FailedPredicateException(this, "precpred(_ctx, 21)");
          setState(951);
          match(HogQLParser::DOT);
          setState(952);
          match(HogQLParser::DECIMAL_LITERAL);
          break;
        }

        case 11: {
          auto newContext = _tracker.createInstance<ColumnExprPropertyAccessContext>(_tracker.createInstance<ColumnExprContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleColumnExpr);
          setState(953);

          if (!(precpred(_ctx, 20))) throw FailedPredicateException(this, "precpred(_ctx, 20)");
          setState(954);
          match(HogQLParser::DOT);
          setState(955);
          identifier();
          break;
        }

        case 12: {
          auto newContext = _tracker.createInstance<ColumnExprIsNullContext>(_tracker.createInstance<ColumnExprContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleColumnExpr);
          setState(956);

          if (!(precpred(_ctx, 15))) throw FailedPredicateException(this, "precpred(_ctx, 15)");
          setState(957);
          match(HogQLParser::IS);
          setState(959);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == HogQLParser::NOT) {
            setState(958);
            match(HogQLParser::NOT);
          }
          setState(961);
          match(HogQLParser::NULL_SQL);
          break;
        }

        case 13: {
          auto newContext = _tracker.createInstance<ColumnExprAliasContext>(_tracker.createInstance<ColumnExprContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleColumnExpr);
          setState(962);

          if (!(precpred(_ctx, 8))) throw FailedPredicateException(this, "precpred(_ctx, 8)");
          setState(967);
          _errHandler->sync(this);
          switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 119, _ctx)) {
          case 1: {
            setState(963);
            match(HogQLParser::AS);
            setState(964);
            identifier();
            break;
          }

          case 2: {
            setState(965);
            match(HogQLParser::AS);
            setState(966);
            match(HogQLParser::STRING_LITERAL);
            break;
          }

          default:
            break;
          }
          break;
        }

        default:
          break;
        } 
      }
      setState(973);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 121, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- ColumnArgListContext ------------------------------------------------------------------

HogQLParser::ColumnArgListContext::ColumnArgListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<HogQLParser::ColumnArgExprContext *> HogQLParser::ColumnArgListContext::columnArgExpr() {
  return getRuleContexts<HogQLParser::ColumnArgExprContext>();
}

HogQLParser::ColumnArgExprContext* HogQLParser::ColumnArgListContext::columnArgExpr(size_t i) {
  return getRuleContext<HogQLParser::ColumnArgExprContext>(i);
}

std::vector<tree::TerminalNode *> HogQLParser::ColumnArgListContext::COMMA() {
  return getTokens(HogQLParser::COMMA);
}

tree::TerminalNode* HogQLParser::ColumnArgListContext::COMMA(size_t i) {
  return getToken(HogQLParser::COMMA, i);
}


size_t HogQLParser::ColumnArgListContext::getRuleIndex() const {
  return HogQLParser::RuleColumnArgList;
}


std::any HogQLParser::ColumnArgListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnArgList(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::ColumnArgListContext* HogQLParser::columnArgList() {
  ColumnArgListContext *_localctx = _tracker.createInstance<ColumnArgListContext>(_ctx, getState());
  enterRule(_localctx, 110, HogQLParser::RuleColumnArgList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(974);
    columnArgExpr();
    setState(979);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 122, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(975);
        match(HogQLParser::COMMA);
        setState(976);
        columnArgExpr(); 
      }
      setState(981);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 122, _ctx);
    }
    setState(983);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HogQLParser::COMMA) {
      setState(982);
      match(HogQLParser::COMMA);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ColumnArgExprContext ------------------------------------------------------------------

HogQLParser::ColumnArgExprContext::ColumnArgExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HogQLParser::ColumnLambdaExprContext* HogQLParser::ColumnArgExprContext::columnLambdaExpr() {
  return getRuleContext<HogQLParser::ColumnLambdaExprContext>(0);
}

HogQLParser::ColumnExprContext* HogQLParser::ColumnArgExprContext::columnExpr() {
  return getRuleContext<HogQLParser::ColumnExprContext>(0);
}


size_t HogQLParser::ColumnArgExprContext::getRuleIndex() const {
  return HogQLParser::RuleColumnArgExpr;
}


std::any HogQLParser::ColumnArgExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnArgExpr(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::ColumnArgExprContext* HogQLParser::columnArgExpr() {
  ColumnArgExprContext *_localctx = _tracker.createInstance<ColumnArgExprContext>(_ctx, getState());
  enterRule(_localctx, 112, HogQLParser::RuleColumnArgExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(987);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 124, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(985);
      columnLambdaExpr();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(986);
      columnExpr(0);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ColumnLambdaExprContext ------------------------------------------------------------------

HogQLParser::ColumnLambdaExprContext::ColumnLambdaExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::ColumnLambdaExprContext::ARROW() {
  return getToken(HogQLParser::ARROW, 0);
}

HogQLParser::ColumnExprContext* HogQLParser::ColumnLambdaExprContext::columnExpr() {
  return getRuleContext<HogQLParser::ColumnExprContext>(0);
}

tree::TerminalNode* HogQLParser::ColumnLambdaExprContext::LPAREN() {
  return getToken(HogQLParser::LPAREN, 0);
}

std::vector<HogQLParser::IdentifierContext *> HogQLParser::ColumnLambdaExprContext::identifier() {
  return getRuleContexts<HogQLParser::IdentifierContext>();
}

HogQLParser::IdentifierContext* HogQLParser::ColumnLambdaExprContext::identifier(size_t i) {
  return getRuleContext<HogQLParser::IdentifierContext>(i);
}

tree::TerminalNode* HogQLParser::ColumnLambdaExprContext::RPAREN() {
  return getToken(HogQLParser::RPAREN, 0);
}

std::vector<tree::TerminalNode *> HogQLParser::ColumnLambdaExprContext::COMMA() {
  return getTokens(HogQLParser::COMMA);
}

tree::TerminalNode* HogQLParser::ColumnLambdaExprContext::COMMA(size_t i) {
  return getToken(HogQLParser::COMMA, i);
}


size_t HogQLParser::ColumnLambdaExprContext::getRuleIndex() const {
  return HogQLParser::RuleColumnLambdaExpr;
}


std::any HogQLParser::ColumnLambdaExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnLambdaExpr(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::ColumnLambdaExprContext* HogQLParser::columnLambdaExpr() {
  ColumnLambdaExprContext *_localctx = _tracker.createInstance<ColumnLambdaExprContext>(_ctx, getState());
  enterRule(_localctx, 114, HogQLParser::RuleColumnLambdaExpr);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1014);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case HogQLParser::LPAREN: {
        setState(989);
        match(HogQLParser::LPAREN);
        setState(990);
        identifier();
        setState(995);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 125, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(991);
            match(HogQLParser::COMMA);
            setState(992);
            identifier(); 
          }
          setState(997);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 125, _ctx);
        }
        setState(999);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == HogQLParser::COMMA) {
          setState(998);
          match(HogQLParser::COMMA);
        }
        setState(1001);
        match(HogQLParser::RPAREN);
        break;
      }

      case HogQLParser::ALL:
      case HogQLParser::AND:
      case HogQLParser::ANTI:
      case HogQLParser::ANY:
      case HogQLParser::ARRAY:
      case HogQLParser::AS:
      case HogQLParser::ASCENDING:
      case HogQLParser::ASOF:
      case HogQLParser::BETWEEN:
      case HogQLParser::BOTH:
      case HogQLParser::BY:
      case HogQLParser::CASE:
      case HogQLParser::CAST:
      case HogQLParser::COHORT:
      case HogQLParser::COLLATE:
      case HogQLParser::CROSS:
      case HogQLParser::CUBE:
      case HogQLParser::CURRENT:
      case HogQLParser::DATE:
      case HogQLParser::DAY:
      case HogQLParser::DESC:
      case HogQLParser::DESCENDING:
      case HogQLParser::DISTINCT:
      case HogQLParser::ELSE:
      case HogQLParser::END:
      case HogQLParser::EXTRACT:
      case HogQLParser::FINAL:
      case HogQLParser::FIRST:
      case HogQLParser::FOLLOWING:
      case HogQLParser::FOR:
      case HogQLParser::FROM:
      case HogQLParser::FULL:
      case HogQLParser::GROUP:
      case HogQLParser::HAVING:
      case HogQLParser::HOUR:
      case HogQLParser::ID:
      case HogQLParser::IF:
      case HogQLParser::ILIKE:
      case HogQLParser::IN:
      case HogQLParser::INNER:
      case HogQLParser::INTERVAL:
      case HogQLParser::IS:
      case HogQLParser::JOIN:
      case HogQLParser::KEY:
      case HogQLParser::LAST:
      case HogQLParser::LEADING:
      case HogQLParser::LEFT:
      case HogQLParser::LIKE:
      case HogQLParser::LIMIT:
      case HogQLParser::MINUTE:
      case HogQLParser::MONTH:
      case HogQLParser::NOT:
      case HogQLParser::NULLS:
      case HogQLParser::OFFSET:
      case HogQLParser::ON:
      case HogQLParser::OR:
      case HogQLParser::ORDER:
      case HogQLParser::OUTER:
      case HogQLParser::OVER:
      case HogQLParser::PARTITION:
      case HogQLParser::PRECEDING:
      case HogQLParser::PREWHERE:
      case HogQLParser::QUARTER:
      case HogQLParser::RANGE:
      case HogQLParser::RETURN:
      case HogQLParser::RIGHT:
      case HogQLParser::ROLLUP:
      case HogQLParser::ROW:
      case HogQLParser::ROWS:
      case HogQLParser::SAMPLE:
      case HogQLParser::SECOND:
      case HogQLParser::SELECT:
      case HogQLParser::SEMI:
      case HogQLParser::SETTINGS:
      case HogQLParser::SUBSTRING:
      case HogQLParser::THEN:
      case HogQLParser::TIES:
      case HogQLParser::TIMESTAMP:
      case HogQLParser::TO:
      case HogQLParser::TOP:
      case HogQLParser::TOTALS:
      case HogQLParser::TRAILING:
      case HogQLParser::TRIM:
      case HogQLParser::TRUNCATE:
      case HogQLParser::UNBOUNDED:
      case HogQLParser::UNION:
      case HogQLParser::USING:
      case HogQLParser::WEEK:
      case HogQLParser::WHEN:
      case HogQLParser::WHERE:
      case HogQLParser::WINDOW:
      case HogQLParser::WITH:
      case HogQLParser::YEAR:
      case HogQLParser::IDENTIFIER: {
        setState(1003);
        identifier();
        setState(1008);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 127, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(1004);
            match(HogQLParser::COMMA);
            setState(1005);
            identifier(); 
          }
          setState(1010);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 127, _ctx);
        }
        setState(1012);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == HogQLParser::COMMA) {
          setState(1011);
          match(HogQLParser::COMMA);
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(1016);
    match(HogQLParser::ARROW);
    setState(1017);
    columnExpr(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- HogqlxTagElementContext ------------------------------------------------------------------

HogQLParser::HogqlxTagElementContext::HogqlxTagElementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t HogQLParser::HogqlxTagElementContext::getRuleIndex() const {
  return HogQLParser::RuleHogqlxTagElement;
}

void HogQLParser::HogqlxTagElementContext::copyFrom(HogqlxTagElementContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- HogqlxTagElementClosedContext ------------------------------------------------------------------

tree::TerminalNode* HogQLParser::HogqlxTagElementClosedContext::LT() {
  return getToken(HogQLParser::LT, 0);
}

HogQLParser::IdentifierContext* HogQLParser::HogqlxTagElementClosedContext::identifier() {
  return getRuleContext<HogQLParser::IdentifierContext>(0);
}

tree::TerminalNode* HogQLParser::HogqlxTagElementClosedContext::SLASH() {
  return getToken(HogQLParser::SLASH, 0);
}

tree::TerminalNode* HogQLParser::HogqlxTagElementClosedContext::GT() {
  return getToken(HogQLParser::GT, 0);
}

std::vector<HogQLParser::HogqlxTagAttributeContext *> HogQLParser::HogqlxTagElementClosedContext::hogqlxTagAttribute() {
  return getRuleContexts<HogQLParser::HogqlxTagAttributeContext>();
}

HogQLParser::HogqlxTagAttributeContext* HogQLParser::HogqlxTagElementClosedContext::hogqlxTagAttribute(size_t i) {
  return getRuleContext<HogQLParser::HogqlxTagAttributeContext>(i);
}

HogQLParser::HogqlxTagElementClosedContext::HogqlxTagElementClosedContext(HogqlxTagElementContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::HogqlxTagElementClosedContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitHogqlxTagElementClosed(this);
  else
    return visitor->visitChildren(this);
}
//----------------- HogqlxTagElementNestedContext ------------------------------------------------------------------

std::vector<tree::TerminalNode *> HogQLParser::HogqlxTagElementNestedContext::LT() {
  return getTokens(HogQLParser::LT);
}

tree::TerminalNode* HogQLParser::HogqlxTagElementNestedContext::LT(size_t i) {
  return getToken(HogQLParser::LT, i);
}

std::vector<HogQLParser::IdentifierContext *> HogQLParser::HogqlxTagElementNestedContext::identifier() {
  return getRuleContexts<HogQLParser::IdentifierContext>();
}

HogQLParser::IdentifierContext* HogQLParser::HogqlxTagElementNestedContext::identifier(size_t i) {
  return getRuleContext<HogQLParser::IdentifierContext>(i);
}

std::vector<tree::TerminalNode *> HogQLParser::HogqlxTagElementNestedContext::GT() {
  return getTokens(HogQLParser::GT);
}

tree::TerminalNode* HogQLParser::HogqlxTagElementNestedContext::GT(size_t i) {
  return getToken(HogQLParser::GT, i);
}

tree::TerminalNode* HogQLParser::HogqlxTagElementNestedContext::SLASH() {
  return getToken(HogQLParser::SLASH, 0);
}

std::vector<HogQLParser::HogqlxTagAttributeContext *> HogQLParser::HogqlxTagElementNestedContext::hogqlxTagAttribute() {
  return getRuleContexts<HogQLParser::HogqlxTagAttributeContext>();
}

HogQLParser::HogqlxTagAttributeContext* HogQLParser::HogqlxTagElementNestedContext::hogqlxTagAttribute(size_t i) {
  return getRuleContext<HogQLParser::HogqlxTagAttributeContext>(i);
}

HogQLParser::HogqlxTagElementContext* HogQLParser::HogqlxTagElementNestedContext::hogqlxTagElement() {
  return getRuleContext<HogQLParser::HogqlxTagElementContext>(0);
}

HogQLParser::HogqlxTagElementNestedContext::HogqlxTagElementNestedContext(HogqlxTagElementContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::HogqlxTagElementNestedContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitHogqlxTagElementNested(this);
  else
    return visitor->visitChildren(this);
}
HogQLParser::HogqlxTagElementContext* HogQLParser::hogqlxTagElement() {
  HogqlxTagElementContext *_localctx = _tracker.createInstance<HogqlxTagElementContext>(_ctx, getState());
  enterRule(_localctx, 116, HogQLParser::RuleHogqlxTagElement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1047);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 133, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<HogQLParser::HogqlxTagElementClosedContext>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(1019);
      match(HogQLParser::LT);
      setState(1020);
      identifier();
      setState(1024);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -181272084561788930) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & 201863462911) != 0)) {
        setState(1021);
        hogqlxTagAttribute();
        setState(1026);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1027);
      match(HogQLParser::SLASH);
      setState(1028);
      match(HogQLParser::GT);
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<HogQLParser::HogqlxTagElementNestedContext>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(1030);
      match(HogQLParser::LT);
      setState(1031);
      identifier();
      setState(1035);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -181272084561788930) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & 201863462911) != 0)) {
        setState(1032);
        hogqlxTagAttribute();
        setState(1037);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1038);
      match(HogQLParser::GT);
      setState(1040);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 132, _ctx)) {
      case 1: {
        setState(1039);
        hogqlxTagElement();
        break;
      }

      default:
        break;
      }
      setState(1042);
      match(HogQLParser::LT);
      setState(1043);
      match(HogQLParser::SLASH);
      setState(1044);
      identifier();
      setState(1045);
      match(HogQLParser::GT);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- HogqlxTagAttributeContext ------------------------------------------------------------------

HogQLParser::HogqlxTagAttributeContext::HogqlxTagAttributeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HogQLParser::IdentifierContext* HogQLParser::HogqlxTagAttributeContext::identifier() {
  return getRuleContext<HogQLParser::IdentifierContext>(0);
}

tree::TerminalNode* HogQLParser::HogqlxTagAttributeContext::EQ_SINGLE() {
  return getToken(HogQLParser::EQ_SINGLE, 0);
}

HogQLParser::StringContext* HogQLParser::HogqlxTagAttributeContext::string() {
  return getRuleContext<HogQLParser::StringContext>(0);
}

tree::TerminalNode* HogQLParser::HogqlxTagAttributeContext::LBRACE() {
  return getToken(HogQLParser::LBRACE, 0);
}

HogQLParser::ColumnExprContext* HogQLParser::HogqlxTagAttributeContext::columnExpr() {
  return getRuleContext<HogQLParser::ColumnExprContext>(0);
}

tree::TerminalNode* HogQLParser::HogqlxTagAttributeContext::RBRACE() {
  return getToken(HogQLParser::RBRACE, 0);
}


size_t HogQLParser::HogqlxTagAttributeContext::getRuleIndex() const {
  return HogQLParser::RuleHogqlxTagAttribute;
}


std::any HogQLParser::HogqlxTagAttributeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitHogqlxTagAttribute(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::HogqlxTagAttributeContext* HogQLParser::hogqlxTagAttribute() {
  HogqlxTagAttributeContext *_localctx = _tracker.createInstance<HogqlxTagAttributeContext>(_ctx, getState());
  enterRule(_localctx, 118, HogQLParser::RuleHogqlxTagAttribute);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1060);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 134, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1049);
      identifier();
      setState(1050);
      match(HogQLParser::EQ_SINGLE);
      setState(1051);
      string();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1053);
      identifier();
      setState(1054);
      match(HogQLParser::EQ_SINGLE);
      setState(1055);
      match(HogQLParser::LBRACE);
      setState(1056);
      columnExpr(0);
      setState(1057);
      match(HogQLParser::RBRACE);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1059);
      identifier();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WithExprListContext ------------------------------------------------------------------

HogQLParser::WithExprListContext::WithExprListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<HogQLParser::WithExprContext *> HogQLParser::WithExprListContext::withExpr() {
  return getRuleContexts<HogQLParser::WithExprContext>();
}

HogQLParser::WithExprContext* HogQLParser::WithExprListContext::withExpr(size_t i) {
  return getRuleContext<HogQLParser::WithExprContext>(i);
}

std::vector<tree::TerminalNode *> HogQLParser::WithExprListContext::COMMA() {
  return getTokens(HogQLParser::COMMA);
}

tree::TerminalNode* HogQLParser::WithExprListContext::COMMA(size_t i) {
  return getToken(HogQLParser::COMMA, i);
}


size_t HogQLParser::WithExprListContext::getRuleIndex() const {
  return HogQLParser::RuleWithExprList;
}


std::any HogQLParser::WithExprListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitWithExprList(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::WithExprListContext* HogQLParser::withExprList() {
  WithExprListContext *_localctx = _tracker.createInstance<WithExprListContext>(_ctx, getState());
  enterRule(_localctx, 120, HogQLParser::RuleWithExprList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1062);
    withExpr();
    setState(1067);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 135, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1063);
        match(HogQLParser::COMMA);
        setState(1064);
        withExpr(); 
      }
      setState(1069);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 135, _ctx);
    }
    setState(1071);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HogQLParser::COMMA) {
      setState(1070);
      match(HogQLParser::COMMA);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WithExprContext ------------------------------------------------------------------

HogQLParser::WithExprContext::WithExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t HogQLParser::WithExprContext::getRuleIndex() const {
  return HogQLParser::RuleWithExpr;
}

void HogQLParser::WithExprContext::copyFrom(WithExprContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- WithExprColumnContext ------------------------------------------------------------------

HogQLParser::ColumnExprContext* HogQLParser::WithExprColumnContext::columnExpr() {
  return getRuleContext<HogQLParser::ColumnExprContext>(0);
}

tree::TerminalNode* HogQLParser::WithExprColumnContext::AS() {
  return getToken(HogQLParser::AS, 0);
}

HogQLParser::IdentifierContext* HogQLParser::WithExprColumnContext::identifier() {
  return getRuleContext<HogQLParser::IdentifierContext>(0);
}

HogQLParser::WithExprColumnContext::WithExprColumnContext(WithExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::WithExprColumnContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitWithExprColumn(this);
  else
    return visitor->visitChildren(this);
}
//----------------- WithExprSubqueryContext ------------------------------------------------------------------

HogQLParser::IdentifierContext* HogQLParser::WithExprSubqueryContext::identifier() {
  return getRuleContext<HogQLParser::IdentifierContext>(0);
}

tree::TerminalNode* HogQLParser::WithExprSubqueryContext::AS() {
  return getToken(HogQLParser::AS, 0);
}

tree::TerminalNode* HogQLParser::WithExprSubqueryContext::LPAREN() {
  return getToken(HogQLParser::LPAREN, 0);
}

HogQLParser::SelectUnionStmtContext* HogQLParser::WithExprSubqueryContext::selectUnionStmt() {
  return getRuleContext<HogQLParser::SelectUnionStmtContext>(0);
}

tree::TerminalNode* HogQLParser::WithExprSubqueryContext::RPAREN() {
  return getToken(HogQLParser::RPAREN, 0);
}

HogQLParser::WithExprSubqueryContext::WithExprSubqueryContext(WithExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::WithExprSubqueryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitWithExprSubquery(this);
  else
    return visitor->visitChildren(this);
}
HogQLParser::WithExprContext* HogQLParser::withExpr() {
  WithExprContext *_localctx = _tracker.createInstance<WithExprContext>(_ctx, getState());
  enterRule(_localctx, 122, HogQLParser::RuleWithExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1083);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 137, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<HogQLParser::WithExprSubqueryContext>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(1073);
      identifier();
      setState(1074);
      match(HogQLParser::AS);
      setState(1075);
      match(HogQLParser::LPAREN);
      setState(1076);
      selectUnionStmt();
      setState(1077);
      match(HogQLParser::RPAREN);
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<HogQLParser::WithExprColumnContext>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(1079);
      columnExpr(0);
      setState(1080);
      match(HogQLParser::AS);
      setState(1081);
      identifier();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ColumnIdentifierContext ------------------------------------------------------------------

HogQLParser::ColumnIdentifierContext::ColumnIdentifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HogQLParser::PlaceholderContext* HogQLParser::ColumnIdentifierContext::placeholder() {
  return getRuleContext<HogQLParser::PlaceholderContext>(0);
}

HogQLParser::NestedIdentifierContext* HogQLParser::ColumnIdentifierContext::nestedIdentifier() {
  return getRuleContext<HogQLParser::NestedIdentifierContext>(0);
}

HogQLParser::TableIdentifierContext* HogQLParser::ColumnIdentifierContext::tableIdentifier() {
  return getRuleContext<HogQLParser::TableIdentifierContext>(0);
}

tree::TerminalNode* HogQLParser::ColumnIdentifierContext::DOT() {
  return getToken(HogQLParser::DOT, 0);
}


size_t HogQLParser::ColumnIdentifierContext::getRuleIndex() const {
  return HogQLParser::RuleColumnIdentifier;
}


std::any HogQLParser::ColumnIdentifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnIdentifier(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::ColumnIdentifierContext* HogQLParser::columnIdentifier() {
  ColumnIdentifierContext *_localctx = _tracker.createInstance<ColumnIdentifierContext>(_ctx, getState());
  enterRule(_localctx, 124, HogQLParser::RuleColumnIdentifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1092);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case HogQLParser::LBRACE: {
        enterOuterAlt(_localctx, 1);
        setState(1085);
        placeholder();
        break;
      }

      case HogQLParser::ALL:
      case HogQLParser::AND:
      case HogQLParser::ANTI:
      case HogQLParser::ANY:
      case HogQLParser::ARRAY:
      case HogQLParser::AS:
      case HogQLParser::ASCENDING:
      case HogQLParser::ASOF:
      case HogQLParser::BETWEEN:
      case HogQLParser::BOTH:
      case HogQLParser::BY:
      case HogQLParser::CASE:
      case HogQLParser::CAST:
      case HogQLParser::COHORT:
      case HogQLParser::COLLATE:
      case HogQLParser::CROSS:
      case HogQLParser::CUBE:
      case HogQLParser::CURRENT:
      case HogQLParser::DATE:
      case HogQLParser::DAY:
      case HogQLParser::DESC:
      case HogQLParser::DESCENDING:
      case HogQLParser::DISTINCT:
      case HogQLParser::ELSE:
      case HogQLParser::END:
      case HogQLParser::EXTRACT:
      case HogQLParser::FINAL:
      case HogQLParser::FIRST:
      case HogQLParser::FOLLOWING:
      case HogQLParser::FOR:
      case HogQLParser::FROM:
      case HogQLParser::FULL:
      case HogQLParser::GROUP:
      case HogQLParser::HAVING:
      case HogQLParser::HOUR:
      case HogQLParser::ID:
      case HogQLParser::IF:
      case HogQLParser::ILIKE:
      case HogQLParser::IN:
      case HogQLParser::INNER:
      case HogQLParser::INTERVAL:
      case HogQLParser::IS:
      case HogQLParser::JOIN:
      case HogQLParser::KEY:
      case HogQLParser::LAST:
      case HogQLParser::LEADING:
      case HogQLParser::LEFT:
      case HogQLParser::LIKE:
      case HogQLParser::LIMIT:
      case HogQLParser::MINUTE:
      case HogQLParser::MONTH:
      case HogQLParser::NOT:
      case HogQLParser::NULLS:
      case HogQLParser::OFFSET:
      case HogQLParser::ON:
      case HogQLParser::OR:
      case HogQLParser::ORDER:
      case HogQLParser::OUTER:
      case HogQLParser::OVER:
      case HogQLParser::PARTITION:
      case HogQLParser::PRECEDING:
      case HogQLParser::PREWHERE:
      case HogQLParser::QUARTER:
      case HogQLParser::RANGE:
      case HogQLParser::RETURN:
      case HogQLParser::RIGHT:
      case HogQLParser::ROLLUP:
      case HogQLParser::ROW:
      case HogQLParser::ROWS:
      case HogQLParser::SAMPLE:
      case HogQLParser::SECOND:
      case HogQLParser::SELECT:
      case HogQLParser::SEMI:
      case HogQLParser::SETTINGS:
      case HogQLParser::SUBSTRING:
      case HogQLParser::THEN:
      case HogQLParser::TIES:
      case HogQLParser::TIMESTAMP:
      case HogQLParser::TO:
      case HogQLParser::TOP:
      case HogQLParser::TOTALS:
      case HogQLParser::TRAILING:
      case HogQLParser::TRIM:
      case HogQLParser::TRUNCATE:
      case HogQLParser::UNBOUNDED:
      case HogQLParser::UNION:
      case HogQLParser::USING:
      case HogQLParser::WEEK:
      case HogQLParser::WHEN:
      case HogQLParser::WHERE:
      case HogQLParser::WINDOW:
      case HogQLParser::WITH:
      case HogQLParser::YEAR:
      case HogQLParser::IDENTIFIER: {
        enterOuterAlt(_localctx, 2);
        setState(1089);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 138, _ctx)) {
        case 1: {
          setState(1086);
          tableIdentifier();
          setState(1087);
          match(HogQLParser::DOT);
          break;
        }

        default:
          break;
        }
        setState(1091);
        nestedIdentifier();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NestedIdentifierContext ------------------------------------------------------------------

HogQLParser::NestedIdentifierContext::NestedIdentifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<HogQLParser::IdentifierContext *> HogQLParser::NestedIdentifierContext::identifier() {
  return getRuleContexts<HogQLParser::IdentifierContext>();
}

HogQLParser::IdentifierContext* HogQLParser::NestedIdentifierContext::identifier(size_t i) {
  return getRuleContext<HogQLParser::IdentifierContext>(i);
}

std::vector<tree::TerminalNode *> HogQLParser::NestedIdentifierContext::DOT() {
  return getTokens(HogQLParser::DOT);
}

tree::TerminalNode* HogQLParser::NestedIdentifierContext::DOT(size_t i) {
  return getToken(HogQLParser::DOT, i);
}


size_t HogQLParser::NestedIdentifierContext::getRuleIndex() const {
  return HogQLParser::RuleNestedIdentifier;
}


std::any HogQLParser::NestedIdentifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitNestedIdentifier(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::NestedIdentifierContext* HogQLParser::nestedIdentifier() {
  NestedIdentifierContext *_localctx = _tracker.createInstance<NestedIdentifierContext>(_ctx, getState());
  enterRule(_localctx, 126, HogQLParser::RuleNestedIdentifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1094);
    identifier();
    setState(1099);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 140, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1095);
        match(HogQLParser::DOT);
        setState(1096);
        identifier(); 
      }
      setState(1101);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 140, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TableExprContext ------------------------------------------------------------------

HogQLParser::TableExprContext::TableExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t HogQLParser::TableExprContext::getRuleIndex() const {
  return HogQLParser::RuleTableExpr;
}

void HogQLParser::TableExprContext::copyFrom(TableExprContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- TableExprTagContext ------------------------------------------------------------------

HogQLParser::HogqlxTagElementContext* HogQLParser::TableExprTagContext::hogqlxTagElement() {
  return getRuleContext<HogQLParser::HogqlxTagElementContext>(0);
}

HogQLParser::TableExprTagContext::TableExprTagContext(TableExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::TableExprTagContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitTableExprTag(this);
  else
    return visitor->visitChildren(this);
}
//----------------- TableExprIdentifierContext ------------------------------------------------------------------

HogQLParser::TableIdentifierContext* HogQLParser::TableExprIdentifierContext::tableIdentifier() {
  return getRuleContext<HogQLParser::TableIdentifierContext>(0);
}

HogQLParser::TableExprIdentifierContext::TableExprIdentifierContext(TableExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::TableExprIdentifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitTableExprIdentifier(this);
  else
    return visitor->visitChildren(this);
}
//----------------- TableExprPlaceholderContext ------------------------------------------------------------------

HogQLParser::PlaceholderContext* HogQLParser::TableExprPlaceholderContext::placeholder() {
  return getRuleContext<HogQLParser::PlaceholderContext>(0);
}

HogQLParser::TableExprPlaceholderContext::TableExprPlaceholderContext(TableExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::TableExprPlaceholderContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitTableExprPlaceholder(this);
  else
    return visitor->visitChildren(this);
}
//----------------- TableExprSubqueryContext ------------------------------------------------------------------

tree::TerminalNode* HogQLParser::TableExprSubqueryContext::LPAREN() {
  return getToken(HogQLParser::LPAREN, 0);
}

HogQLParser::SelectUnionStmtContext* HogQLParser::TableExprSubqueryContext::selectUnionStmt() {
  return getRuleContext<HogQLParser::SelectUnionStmtContext>(0);
}

tree::TerminalNode* HogQLParser::TableExprSubqueryContext::RPAREN() {
  return getToken(HogQLParser::RPAREN, 0);
}

HogQLParser::TableExprSubqueryContext::TableExprSubqueryContext(TableExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::TableExprSubqueryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitTableExprSubquery(this);
  else
    return visitor->visitChildren(this);
}
//----------------- TableExprAliasContext ------------------------------------------------------------------

HogQLParser::TableExprContext* HogQLParser::TableExprAliasContext::tableExpr() {
  return getRuleContext<HogQLParser::TableExprContext>(0);
}

HogQLParser::AliasContext* HogQLParser::TableExprAliasContext::alias() {
  return getRuleContext<HogQLParser::AliasContext>(0);
}

tree::TerminalNode* HogQLParser::TableExprAliasContext::AS() {
  return getToken(HogQLParser::AS, 0);
}

HogQLParser::IdentifierContext* HogQLParser::TableExprAliasContext::identifier() {
  return getRuleContext<HogQLParser::IdentifierContext>(0);
}

HogQLParser::TableExprAliasContext::TableExprAliasContext(TableExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::TableExprAliasContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitTableExprAlias(this);
  else
    return visitor->visitChildren(this);
}
//----------------- TableExprFunctionContext ------------------------------------------------------------------

HogQLParser::TableFunctionExprContext* HogQLParser::TableExprFunctionContext::tableFunctionExpr() {
  return getRuleContext<HogQLParser::TableFunctionExprContext>(0);
}

HogQLParser::TableExprFunctionContext::TableExprFunctionContext(TableExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::TableExprFunctionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitTableExprFunction(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::TableExprContext* HogQLParser::tableExpr() {
   return tableExpr(0);
}

HogQLParser::TableExprContext* HogQLParser::tableExpr(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  HogQLParser::TableExprContext *_localctx = _tracker.createInstance<TableExprContext>(_ctx, parentState);
  HogQLParser::TableExprContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 128;
  enterRecursionRule(_localctx, 128, HogQLParser::RuleTableExpr, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1111);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 141, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<TableExprIdentifierContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;

      setState(1103);
      tableIdentifier();
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<TableExprFunctionContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(1104);
      tableFunctionExpr();
      break;
    }

    case 3: {
      _localctx = _tracker.createInstance<TableExprSubqueryContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(1105);
      match(HogQLParser::LPAREN);
      setState(1106);
      selectUnionStmt();
      setState(1107);
      match(HogQLParser::RPAREN);
      break;
    }

    case 4: {
      _localctx = _tracker.createInstance<TableExprTagContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(1109);
      hogqlxTagElement();
      break;
    }

    case 5: {
      _localctx = _tracker.createInstance<TableExprPlaceholderContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(1110);
      placeholder();
      break;
    }

    default:
      break;
    }
    _ctx->stop = _input->LT(-1);
    setState(1121);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 143, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        auto newContext = _tracker.createInstance<TableExprAliasContext>(_tracker.createInstance<TableExprContext>(parentContext, parentState));
        _localctx = newContext;
        pushNewRecursionContext(newContext, startState, RuleTableExpr);
        setState(1113);

        if (!(precpred(_ctx, 3))) throw FailedPredicateException(this, "precpred(_ctx, 3)");
        setState(1117);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case HogQLParser::DATE:
          case HogQLParser::FIRST:
          case HogQLParser::ID:
          case HogQLParser::KEY:
          case HogQLParser::IDENTIFIER: {
            setState(1114);
            alias();
            break;
          }

          case HogQLParser::AS: {
            setState(1115);
            match(HogQLParser::AS);
            setState(1116);
            identifier();
            break;
          }

        default:
          throw NoViableAltException(this);
        } 
      }
      setState(1123);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 143, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- TableFunctionExprContext ------------------------------------------------------------------

HogQLParser::TableFunctionExprContext::TableFunctionExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HogQLParser::IdentifierContext* HogQLParser::TableFunctionExprContext::identifier() {
  return getRuleContext<HogQLParser::IdentifierContext>(0);
}

tree::TerminalNode* HogQLParser::TableFunctionExprContext::LPAREN() {
  return getToken(HogQLParser::LPAREN, 0);
}

tree::TerminalNode* HogQLParser::TableFunctionExprContext::RPAREN() {
  return getToken(HogQLParser::RPAREN, 0);
}

HogQLParser::TableArgListContext* HogQLParser::TableFunctionExprContext::tableArgList() {
  return getRuleContext<HogQLParser::TableArgListContext>(0);
}


size_t HogQLParser::TableFunctionExprContext::getRuleIndex() const {
  return HogQLParser::RuleTableFunctionExpr;
}


std::any HogQLParser::TableFunctionExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitTableFunctionExpr(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::TableFunctionExprContext* HogQLParser::tableFunctionExpr() {
  TableFunctionExprContext *_localctx = _tracker.createInstance<TableFunctionExprContext>(_ctx, getState());
  enterRule(_localctx, 130, HogQLParser::RuleTableFunctionExpr);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1124);
    identifier();
    setState(1125);
    match(HogQLParser::LPAREN);
    setState(1127);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -1125900443713538) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & 8076106347046764543) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 128)) & 577) != 0)) {
      setState(1126);
      tableArgList();
    }
    setState(1129);
    match(HogQLParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TableIdentifierContext ------------------------------------------------------------------

HogQLParser::TableIdentifierContext::TableIdentifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HogQLParser::IdentifierContext* HogQLParser::TableIdentifierContext::identifier() {
  return getRuleContext<HogQLParser::IdentifierContext>(0);
}

HogQLParser::DatabaseIdentifierContext* HogQLParser::TableIdentifierContext::databaseIdentifier() {
  return getRuleContext<HogQLParser::DatabaseIdentifierContext>(0);
}

tree::TerminalNode* HogQLParser::TableIdentifierContext::DOT() {
  return getToken(HogQLParser::DOT, 0);
}


size_t HogQLParser::TableIdentifierContext::getRuleIndex() const {
  return HogQLParser::RuleTableIdentifier;
}


std::any HogQLParser::TableIdentifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitTableIdentifier(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::TableIdentifierContext* HogQLParser::tableIdentifier() {
  TableIdentifierContext *_localctx = _tracker.createInstance<TableIdentifierContext>(_ctx, getState());
  enterRule(_localctx, 132, HogQLParser::RuleTableIdentifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1134);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 145, _ctx)) {
    case 1: {
      setState(1131);
      databaseIdentifier();
      setState(1132);
      match(HogQLParser::DOT);
      break;
    }

    default:
      break;
    }
    setState(1136);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TableArgListContext ------------------------------------------------------------------

HogQLParser::TableArgListContext::TableArgListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<HogQLParser::ColumnExprContext *> HogQLParser::TableArgListContext::columnExpr() {
  return getRuleContexts<HogQLParser::ColumnExprContext>();
}

HogQLParser::ColumnExprContext* HogQLParser::TableArgListContext::columnExpr(size_t i) {
  return getRuleContext<HogQLParser::ColumnExprContext>(i);
}

std::vector<tree::TerminalNode *> HogQLParser::TableArgListContext::COMMA() {
  return getTokens(HogQLParser::COMMA);
}

tree::TerminalNode* HogQLParser::TableArgListContext::COMMA(size_t i) {
  return getToken(HogQLParser::COMMA, i);
}


size_t HogQLParser::TableArgListContext::getRuleIndex() const {
  return HogQLParser::RuleTableArgList;
}


std::any HogQLParser::TableArgListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitTableArgList(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::TableArgListContext* HogQLParser::tableArgList() {
  TableArgListContext *_localctx = _tracker.createInstance<TableArgListContext>(_ctx, getState());
  enterRule(_localctx, 134, HogQLParser::RuleTableArgList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1138);
    columnExpr(0);
    setState(1143);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 146, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1139);
        match(HogQLParser::COMMA);
        setState(1140);
        columnExpr(0); 
      }
      setState(1145);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 146, _ctx);
    }
    setState(1147);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HogQLParser::COMMA) {
      setState(1146);
      match(HogQLParser::COMMA);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DatabaseIdentifierContext ------------------------------------------------------------------

HogQLParser::DatabaseIdentifierContext::DatabaseIdentifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HogQLParser::IdentifierContext* HogQLParser::DatabaseIdentifierContext::identifier() {
  return getRuleContext<HogQLParser::IdentifierContext>(0);
}


size_t HogQLParser::DatabaseIdentifierContext::getRuleIndex() const {
  return HogQLParser::RuleDatabaseIdentifier;
}


std::any HogQLParser::DatabaseIdentifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitDatabaseIdentifier(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::DatabaseIdentifierContext* HogQLParser::databaseIdentifier() {
  DatabaseIdentifierContext *_localctx = _tracker.createInstance<DatabaseIdentifierContext>(_ctx, getState());
  enterRule(_localctx, 136, HogQLParser::RuleDatabaseIdentifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1149);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FloatingLiteralContext ------------------------------------------------------------------

HogQLParser::FloatingLiteralContext::FloatingLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::FloatingLiteralContext::FLOATING_LITERAL() {
  return getToken(HogQLParser::FLOATING_LITERAL, 0);
}

tree::TerminalNode* HogQLParser::FloatingLiteralContext::DOT() {
  return getToken(HogQLParser::DOT, 0);
}

std::vector<tree::TerminalNode *> HogQLParser::FloatingLiteralContext::DECIMAL_LITERAL() {
  return getTokens(HogQLParser::DECIMAL_LITERAL);
}

tree::TerminalNode* HogQLParser::FloatingLiteralContext::DECIMAL_LITERAL(size_t i) {
  return getToken(HogQLParser::DECIMAL_LITERAL, i);
}

tree::TerminalNode* HogQLParser::FloatingLiteralContext::OCTAL_LITERAL() {
  return getToken(HogQLParser::OCTAL_LITERAL, 0);
}


size_t HogQLParser::FloatingLiteralContext::getRuleIndex() const {
  return HogQLParser::RuleFloatingLiteral;
}


std::any HogQLParser::FloatingLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitFloatingLiteral(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::FloatingLiteralContext* HogQLParser::floatingLiteral() {
  FloatingLiteralContext *_localctx = _tracker.createInstance<FloatingLiteralContext>(_ctx, getState());
  enterRule(_localctx, 138, HogQLParser::RuleFloatingLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1159);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case HogQLParser::FLOATING_LITERAL: {
        enterOuterAlt(_localctx, 1);
        setState(1151);
        match(HogQLParser::FLOATING_LITERAL);
        break;
      }

      case HogQLParser::DOT: {
        enterOuterAlt(_localctx, 2);
        setState(1152);
        match(HogQLParser::DOT);
        setState(1153);
        _la = _input->LA(1);
        if (!(_la == HogQLParser::OCTAL_LITERAL

        || _la == HogQLParser::DECIMAL_LITERAL)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

      case HogQLParser::DECIMAL_LITERAL: {
        enterOuterAlt(_localctx, 3);
        setState(1154);
        match(HogQLParser::DECIMAL_LITERAL);
        setState(1155);
        match(HogQLParser::DOT);
        setState(1157);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 148, _ctx)) {
        case 1: {
          setState(1156);
          _la = _input->LA(1);
          if (!(_la == HogQLParser::OCTAL_LITERAL

          || _la == HogQLParser::DECIMAL_LITERAL)) {
          _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
          break;
        }

        default:
          break;
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NumberLiteralContext ------------------------------------------------------------------

HogQLParser::NumberLiteralContext::NumberLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HogQLParser::FloatingLiteralContext* HogQLParser::NumberLiteralContext::floatingLiteral() {
  return getRuleContext<HogQLParser::FloatingLiteralContext>(0);
}

tree::TerminalNode* HogQLParser::NumberLiteralContext::OCTAL_LITERAL() {
  return getToken(HogQLParser::OCTAL_LITERAL, 0);
}

tree::TerminalNode* HogQLParser::NumberLiteralContext::DECIMAL_LITERAL() {
  return getToken(HogQLParser::DECIMAL_LITERAL, 0);
}

tree::TerminalNode* HogQLParser::NumberLiteralContext::HEXADECIMAL_LITERAL() {
  return getToken(HogQLParser::HEXADECIMAL_LITERAL, 0);
}

tree::TerminalNode* HogQLParser::NumberLiteralContext::INF() {
  return getToken(HogQLParser::INF, 0);
}

tree::TerminalNode* HogQLParser::NumberLiteralContext::NAN_SQL() {
  return getToken(HogQLParser::NAN_SQL, 0);
}

tree::TerminalNode* HogQLParser::NumberLiteralContext::PLUS() {
  return getToken(HogQLParser::PLUS, 0);
}

tree::TerminalNode* HogQLParser::NumberLiteralContext::DASH() {
  return getToken(HogQLParser::DASH, 0);
}


size_t HogQLParser::NumberLiteralContext::getRuleIndex() const {
  return HogQLParser::RuleNumberLiteral;
}


std::any HogQLParser::NumberLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitNumberLiteral(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::NumberLiteralContext* HogQLParser::numberLiteral() {
  NumberLiteralContext *_localctx = _tracker.createInstance<NumberLiteralContext>(_ctx, getState());
  enterRule(_localctx, 140, HogQLParser::RuleNumberLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1162);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HogQLParser::DASH

    || _la == HogQLParser::PLUS) {
      setState(1161);
      _la = _input->LA(1);
      if (!(_la == HogQLParser::DASH

      || _la == HogQLParser::PLUS)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(1170);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 151, _ctx)) {
    case 1: {
      setState(1164);
      floatingLiteral();
      break;
    }

    case 2: {
      setState(1165);
      match(HogQLParser::OCTAL_LITERAL);
      break;
    }

    case 3: {
      setState(1166);
      match(HogQLParser::DECIMAL_LITERAL);
      break;
    }

    case 4: {
      setState(1167);
      match(HogQLParser::HEXADECIMAL_LITERAL);
      break;
    }

    case 5: {
      setState(1168);
      match(HogQLParser::INF);
      break;
    }

    case 6: {
      setState(1169);
      match(HogQLParser::NAN_SQL);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LiteralContext ------------------------------------------------------------------

HogQLParser::LiteralContext::LiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HogQLParser::NumberLiteralContext* HogQLParser::LiteralContext::numberLiteral() {
  return getRuleContext<HogQLParser::NumberLiteralContext>(0);
}

tree::TerminalNode* HogQLParser::LiteralContext::STRING_LITERAL() {
  return getToken(HogQLParser::STRING_LITERAL, 0);
}

tree::TerminalNode* HogQLParser::LiteralContext::NULL_SQL() {
  return getToken(HogQLParser::NULL_SQL, 0);
}


size_t HogQLParser::LiteralContext::getRuleIndex() const {
  return HogQLParser::RuleLiteral;
}


std::any HogQLParser::LiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitLiteral(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::LiteralContext* HogQLParser::literal() {
  LiteralContext *_localctx = _tracker.createInstance<LiteralContext>(_ctx, getState());
  enterRule(_localctx, 142, HogQLParser::RuleLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1175);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case HogQLParser::INF:
      case HogQLParser::NAN_SQL:
      case HogQLParser::FLOATING_LITERAL:
      case HogQLParser::OCTAL_LITERAL:
      case HogQLParser::DECIMAL_LITERAL:
      case HogQLParser::HEXADECIMAL_LITERAL:
      case HogQLParser::DASH:
      case HogQLParser::DOT:
      case HogQLParser::PLUS: {
        enterOuterAlt(_localctx, 1);
        setState(1172);
        numberLiteral();
        break;
      }

      case HogQLParser::STRING_LITERAL: {
        enterOuterAlt(_localctx, 2);
        setState(1173);
        match(HogQLParser::STRING_LITERAL);
        break;
      }

      case HogQLParser::NULL_SQL: {
        enterOuterAlt(_localctx, 3);
        setState(1174);
        match(HogQLParser::NULL_SQL);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IntervalContext ------------------------------------------------------------------

HogQLParser::IntervalContext::IntervalContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::IntervalContext::SECOND() {
  return getToken(HogQLParser::SECOND, 0);
}

tree::TerminalNode* HogQLParser::IntervalContext::MINUTE() {
  return getToken(HogQLParser::MINUTE, 0);
}

tree::TerminalNode* HogQLParser::IntervalContext::HOUR() {
  return getToken(HogQLParser::HOUR, 0);
}

tree::TerminalNode* HogQLParser::IntervalContext::DAY() {
  return getToken(HogQLParser::DAY, 0);
}

tree::TerminalNode* HogQLParser::IntervalContext::WEEK() {
  return getToken(HogQLParser::WEEK, 0);
}

tree::TerminalNode* HogQLParser::IntervalContext::MONTH() {
  return getToken(HogQLParser::MONTH, 0);
}

tree::TerminalNode* HogQLParser::IntervalContext::QUARTER() {
  return getToken(HogQLParser::QUARTER, 0);
}

tree::TerminalNode* HogQLParser::IntervalContext::YEAR() {
  return getToken(HogQLParser::YEAR, 0);
}


size_t HogQLParser::IntervalContext::getRuleIndex() const {
  return HogQLParser::RuleInterval;
}


std::any HogQLParser::IntervalContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitInterval(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::IntervalContext* HogQLParser::interval() {
  IntervalContext *_localctx = _tracker.createInstance<IntervalContext>(_ctx, getState());
  enterRule(_localctx, 144, HogQLParser::RuleInterval);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1177);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 27021666484748288) != 0) || ((((_la - 68) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 68)) & 2181038337) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KeywordContext ------------------------------------------------------------------

HogQLParser::KeywordContext::KeywordContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::KeywordContext::ALL() {
  return getToken(HogQLParser::ALL, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::AND() {
  return getToken(HogQLParser::AND, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::ANTI() {
  return getToken(HogQLParser::ANTI, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::ANY() {
  return getToken(HogQLParser::ANY, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::ARRAY() {
  return getToken(HogQLParser::ARRAY, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::AS() {
  return getToken(HogQLParser::AS, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::ASCENDING() {
  return getToken(HogQLParser::ASCENDING, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::ASOF() {
  return getToken(HogQLParser::ASOF, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::BETWEEN() {
  return getToken(HogQLParser::BETWEEN, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::BOTH() {
  return getToken(HogQLParser::BOTH, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::BY() {
  return getToken(HogQLParser::BY, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::CASE() {
  return getToken(HogQLParser::CASE, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::CAST() {
  return getToken(HogQLParser::CAST, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::COHORT() {
  return getToken(HogQLParser::COHORT, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::COLLATE() {
  return getToken(HogQLParser::COLLATE, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::CROSS() {
  return getToken(HogQLParser::CROSS, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::CUBE() {
  return getToken(HogQLParser::CUBE, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::CURRENT() {
  return getToken(HogQLParser::CURRENT, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::DATE() {
  return getToken(HogQLParser::DATE, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::DESC() {
  return getToken(HogQLParser::DESC, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::DESCENDING() {
  return getToken(HogQLParser::DESCENDING, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::DISTINCT() {
  return getToken(HogQLParser::DISTINCT, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::ELSE() {
  return getToken(HogQLParser::ELSE, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::END() {
  return getToken(HogQLParser::END, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::EXTRACT() {
  return getToken(HogQLParser::EXTRACT, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::FINAL() {
  return getToken(HogQLParser::FINAL, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::FIRST() {
  return getToken(HogQLParser::FIRST, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::FOR() {
  return getToken(HogQLParser::FOR, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::FOLLOWING() {
  return getToken(HogQLParser::FOLLOWING, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::FROM() {
  return getToken(HogQLParser::FROM, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::FULL() {
  return getToken(HogQLParser::FULL, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::GROUP() {
  return getToken(HogQLParser::GROUP, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::HAVING() {
  return getToken(HogQLParser::HAVING, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::ID() {
  return getToken(HogQLParser::ID, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::IS() {
  return getToken(HogQLParser::IS, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::IF() {
  return getToken(HogQLParser::IF, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::ILIKE() {
  return getToken(HogQLParser::ILIKE, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::IN() {
  return getToken(HogQLParser::IN, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::INNER() {
  return getToken(HogQLParser::INNER, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::INTERVAL() {
  return getToken(HogQLParser::INTERVAL, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::JOIN() {
  return getToken(HogQLParser::JOIN, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::KEY() {
  return getToken(HogQLParser::KEY, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::LAST() {
  return getToken(HogQLParser::LAST, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::LEADING() {
  return getToken(HogQLParser::LEADING, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::LEFT() {
  return getToken(HogQLParser::LEFT, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::LIKE() {
  return getToken(HogQLParser::LIKE, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::LIMIT() {
  return getToken(HogQLParser::LIMIT, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::NOT() {
  return getToken(HogQLParser::NOT, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::NULLS() {
  return getToken(HogQLParser::NULLS, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::OFFSET() {
  return getToken(HogQLParser::OFFSET, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::ON() {
  return getToken(HogQLParser::ON, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::OR() {
  return getToken(HogQLParser::OR, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::ORDER() {
  return getToken(HogQLParser::ORDER, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::OUTER() {
  return getToken(HogQLParser::OUTER, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::OVER() {
  return getToken(HogQLParser::OVER, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::PARTITION() {
  return getToken(HogQLParser::PARTITION, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::PRECEDING() {
  return getToken(HogQLParser::PRECEDING, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::PREWHERE() {
  return getToken(HogQLParser::PREWHERE, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::RANGE() {
  return getToken(HogQLParser::RANGE, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::RETURN() {
  return getToken(HogQLParser::RETURN, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::RIGHT() {
  return getToken(HogQLParser::RIGHT, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::ROLLUP() {
  return getToken(HogQLParser::ROLLUP, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::ROW() {
  return getToken(HogQLParser::ROW, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::ROWS() {
  return getToken(HogQLParser::ROWS, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::SAMPLE() {
  return getToken(HogQLParser::SAMPLE, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::SELECT() {
  return getToken(HogQLParser::SELECT, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::SEMI() {
  return getToken(HogQLParser::SEMI, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::SETTINGS() {
  return getToken(HogQLParser::SETTINGS, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::SUBSTRING() {
  return getToken(HogQLParser::SUBSTRING, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::THEN() {
  return getToken(HogQLParser::THEN, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::TIES() {
  return getToken(HogQLParser::TIES, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::TIMESTAMP() {
  return getToken(HogQLParser::TIMESTAMP, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::TOTALS() {
  return getToken(HogQLParser::TOTALS, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::TRAILING() {
  return getToken(HogQLParser::TRAILING, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::TRIM() {
  return getToken(HogQLParser::TRIM, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::TRUNCATE() {
  return getToken(HogQLParser::TRUNCATE, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::TO() {
  return getToken(HogQLParser::TO, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::TOP() {
  return getToken(HogQLParser::TOP, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::UNBOUNDED() {
  return getToken(HogQLParser::UNBOUNDED, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::UNION() {
  return getToken(HogQLParser::UNION, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::USING() {
  return getToken(HogQLParser::USING, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::WHEN() {
  return getToken(HogQLParser::WHEN, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::WHERE() {
  return getToken(HogQLParser::WHERE, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::WINDOW() {
  return getToken(HogQLParser::WINDOW, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::WITH() {
  return getToken(HogQLParser::WITH, 0);
}


size_t HogQLParser::KeywordContext::getRuleIndex() const {
  return HogQLParser::RuleKeyword;
}


std::any HogQLParser::KeywordContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitKeyword(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::KeywordContext* HogQLParser::keyword() {
  KeywordContext *_localctx = _tracker.createInstance<KeywordContext>(_ctx, getState());
  enterRule(_localctx, 146, HogQLParser::RuleKeyword);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1179);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -208293751046537218) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & 29527896047) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KeywordForAliasContext ------------------------------------------------------------------

HogQLParser::KeywordForAliasContext::KeywordForAliasContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::KeywordForAliasContext::DATE() {
  return getToken(HogQLParser::DATE, 0);
}

tree::TerminalNode* HogQLParser::KeywordForAliasContext::FIRST() {
  return getToken(HogQLParser::FIRST, 0);
}

tree::TerminalNode* HogQLParser::KeywordForAliasContext::ID() {
  return getToken(HogQLParser::ID, 0);
}

tree::TerminalNode* HogQLParser::KeywordForAliasContext::KEY() {
  return getToken(HogQLParser::KEY, 0);
}


size_t HogQLParser::KeywordForAliasContext::getRuleIndex() const {
  return HogQLParser::RuleKeywordForAlias;
}


std::any HogQLParser::KeywordForAliasContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitKeywordForAlias(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::KeywordForAliasContext* HogQLParser::keywordForAlias() {
  KeywordForAliasContext *_localctx = _tracker.createInstance<KeywordForAliasContext>(_ctx, getState());
  enterRule(_localctx, 148, HogQLParser::RuleKeywordForAlias);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1181);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 70506452090880) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AliasContext ------------------------------------------------------------------

HogQLParser::AliasContext::AliasContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::AliasContext::IDENTIFIER() {
  return getToken(HogQLParser::IDENTIFIER, 0);
}

HogQLParser::KeywordForAliasContext* HogQLParser::AliasContext::keywordForAlias() {
  return getRuleContext<HogQLParser::KeywordForAliasContext>(0);
}


size_t HogQLParser::AliasContext::getRuleIndex() const {
  return HogQLParser::RuleAlias;
}


std::any HogQLParser::AliasContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitAlias(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::AliasContext* HogQLParser::alias() {
  AliasContext *_localctx = _tracker.createInstance<AliasContext>(_ctx, getState());
  enterRule(_localctx, 150, HogQLParser::RuleAlias);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1185);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case HogQLParser::IDENTIFIER: {
        enterOuterAlt(_localctx, 1);
        setState(1183);
        match(HogQLParser::IDENTIFIER);
        break;
      }

      case HogQLParser::DATE:
      case HogQLParser::FIRST:
      case HogQLParser::ID:
      case HogQLParser::KEY: {
        enterOuterAlt(_localctx, 2);
        setState(1184);
        keywordForAlias();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IdentifierContext ------------------------------------------------------------------

HogQLParser::IdentifierContext::IdentifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::IdentifierContext::IDENTIFIER() {
  return getToken(HogQLParser::IDENTIFIER, 0);
}

HogQLParser::IntervalContext* HogQLParser::IdentifierContext::interval() {
  return getRuleContext<HogQLParser::IntervalContext>(0);
}

HogQLParser::KeywordContext* HogQLParser::IdentifierContext::keyword() {
  return getRuleContext<HogQLParser::KeywordContext>(0);
}


size_t HogQLParser::IdentifierContext::getRuleIndex() const {
  return HogQLParser::RuleIdentifier;
}


std::any HogQLParser::IdentifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitIdentifier(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::IdentifierContext* HogQLParser::identifier() {
  IdentifierContext *_localctx = _tracker.createInstance<IdentifierContext>(_ctx, getState());
  enterRule(_localctx, 152, HogQLParser::RuleIdentifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1190);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case HogQLParser::IDENTIFIER: {
        enterOuterAlt(_localctx, 1);
        setState(1187);
        match(HogQLParser::IDENTIFIER);
        break;
      }

      case HogQLParser::DAY:
      case HogQLParser::HOUR:
      case HogQLParser::MINUTE:
      case HogQLParser::MONTH:
      case HogQLParser::QUARTER:
      case HogQLParser::SECOND:
      case HogQLParser::WEEK:
      case HogQLParser::YEAR: {
        enterOuterAlt(_localctx, 2);
        setState(1188);
        interval();
        break;
      }

      case HogQLParser::ALL:
      case HogQLParser::AND:
      case HogQLParser::ANTI:
      case HogQLParser::ANY:
      case HogQLParser::ARRAY:
      case HogQLParser::AS:
      case HogQLParser::ASCENDING:
      case HogQLParser::ASOF:
      case HogQLParser::BETWEEN:
      case HogQLParser::BOTH:
      case HogQLParser::BY:
      case HogQLParser::CASE:
      case HogQLParser::CAST:
      case HogQLParser::COHORT:
      case HogQLParser::COLLATE:
      case HogQLParser::CROSS:
      case HogQLParser::CUBE:
      case HogQLParser::CURRENT:
      case HogQLParser::DATE:
      case HogQLParser::DESC:
      case HogQLParser::DESCENDING:
      case HogQLParser::DISTINCT:
      case HogQLParser::ELSE:
      case HogQLParser::END:
      case HogQLParser::EXTRACT:
      case HogQLParser::FINAL:
      case HogQLParser::FIRST:
      case HogQLParser::FOLLOWING:
      case HogQLParser::FOR:
      case HogQLParser::FROM:
      case HogQLParser::FULL:
      case HogQLParser::GROUP:
      case HogQLParser::HAVING:
      case HogQLParser::ID:
      case HogQLParser::IF:
      case HogQLParser::ILIKE:
      case HogQLParser::IN:
      case HogQLParser::INNER:
      case HogQLParser::INTERVAL:
      case HogQLParser::IS:
      case HogQLParser::JOIN:
      case HogQLParser::KEY:
      case HogQLParser::LAST:
      case HogQLParser::LEADING:
      case HogQLParser::LEFT:
      case HogQLParser::LIKE:
      case HogQLParser::LIMIT:
      case HogQLParser::NOT:
      case HogQLParser::NULLS:
      case HogQLParser::OFFSET:
      case HogQLParser::ON:
      case HogQLParser::OR:
      case HogQLParser::ORDER:
      case HogQLParser::OUTER:
      case HogQLParser::OVER:
      case HogQLParser::PARTITION:
      case HogQLParser::PRECEDING:
      case HogQLParser::PREWHERE:
      case HogQLParser::RANGE:
      case HogQLParser::RETURN:
      case HogQLParser::RIGHT:
      case HogQLParser::ROLLUP:
      case HogQLParser::ROW:
      case HogQLParser::ROWS:
      case HogQLParser::SAMPLE:
      case HogQLParser::SELECT:
      case HogQLParser::SEMI:
      case HogQLParser::SETTINGS:
      case HogQLParser::SUBSTRING:
      case HogQLParser::THEN:
      case HogQLParser::TIES:
      case HogQLParser::TIMESTAMP:
      case HogQLParser::TO:
      case HogQLParser::TOP:
      case HogQLParser::TOTALS:
      case HogQLParser::TRAILING:
      case HogQLParser::TRIM:
      case HogQLParser::TRUNCATE:
      case HogQLParser::UNBOUNDED:
      case HogQLParser::UNION:
      case HogQLParser::USING:
      case HogQLParser::WHEN:
      case HogQLParser::WHERE:
      case HogQLParser::WINDOW:
      case HogQLParser::WITH: {
        enterOuterAlt(_localctx, 3);
        setState(1189);
        keyword();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnumValueContext ------------------------------------------------------------------

HogQLParser::EnumValueContext::EnumValueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HogQLParser::StringContext* HogQLParser::EnumValueContext::string() {
  return getRuleContext<HogQLParser::StringContext>(0);
}

tree::TerminalNode* HogQLParser::EnumValueContext::EQ_SINGLE() {
  return getToken(HogQLParser::EQ_SINGLE, 0);
}

HogQLParser::NumberLiteralContext* HogQLParser::EnumValueContext::numberLiteral() {
  return getRuleContext<HogQLParser::NumberLiteralContext>(0);
}


size_t HogQLParser::EnumValueContext::getRuleIndex() const {
  return HogQLParser::RuleEnumValue;
}


std::any HogQLParser::EnumValueContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitEnumValue(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::EnumValueContext* HogQLParser::enumValue() {
  EnumValueContext *_localctx = _tracker.createInstance<EnumValueContext>(_ctx, getState());
  enterRule(_localctx, 154, HogQLParser::RuleEnumValue);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1192);
    string();
    setState(1193);
    match(HogQLParser::EQ_SINGLE);
    setState(1194);
    numberLiteral();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PlaceholderContext ------------------------------------------------------------------

HogQLParser::PlaceholderContext::PlaceholderContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::PlaceholderContext::LBRACE() {
  return getToken(HogQLParser::LBRACE, 0);
}

HogQLParser::IdentifierContext* HogQLParser::PlaceholderContext::identifier() {
  return getRuleContext<HogQLParser::IdentifierContext>(0);
}

tree::TerminalNode* HogQLParser::PlaceholderContext::RBRACE() {
  return getToken(HogQLParser::RBRACE, 0);
}


size_t HogQLParser::PlaceholderContext::getRuleIndex() const {
  return HogQLParser::RulePlaceholder;
}


std::any HogQLParser::PlaceholderContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitPlaceholder(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::PlaceholderContext* HogQLParser::placeholder() {
  PlaceholderContext *_localctx = _tracker.createInstance<PlaceholderContext>(_ctx, getState());
  enterRule(_localctx, 156, HogQLParser::RulePlaceholder);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1196);
    match(HogQLParser::LBRACE);
    setState(1197);
    identifier();
    setState(1198);
    match(HogQLParser::RBRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StringContext ------------------------------------------------------------------

HogQLParser::StringContext::StringContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::StringContext::STRING_LITERAL() {
  return getToken(HogQLParser::STRING_LITERAL, 0);
}

HogQLParser::TemplateStringContext* HogQLParser::StringContext::templateString() {
  return getRuleContext<HogQLParser::TemplateStringContext>(0);
}


size_t HogQLParser::StringContext::getRuleIndex() const {
  return HogQLParser::RuleString;
}


std::any HogQLParser::StringContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitString(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::StringContext* HogQLParser::string() {
  StringContext *_localctx = _tracker.createInstance<StringContext>(_ctx, getState());
  enterRule(_localctx, 158, HogQLParser::RuleString);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1202);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case HogQLParser::STRING_LITERAL: {
        enterOuterAlt(_localctx, 1);
        setState(1200);
        match(HogQLParser::STRING_LITERAL);
        break;
      }

      case HogQLParser::QUOTE_SINGLE_TEMPLATE: {
        enterOuterAlt(_localctx, 2);
        setState(1201);
        templateString();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TemplateStringContext ------------------------------------------------------------------

HogQLParser::TemplateStringContext::TemplateStringContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::TemplateStringContext::QUOTE_SINGLE_TEMPLATE() {
  return getToken(HogQLParser::QUOTE_SINGLE_TEMPLATE, 0);
}

tree::TerminalNode* HogQLParser::TemplateStringContext::QUOTE_SINGLE() {
  return getToken(HogQLParser::QUOTE_SINGLE, 0);
}

std::vector<HogQLParser::StringContentsContext *> HogQLParser::TemplateStringContext::stringContents() {
  return getRuleContexts<HogQLParser::StringContentsContext>();
}

HogQLParser::StringContentsContext* HogQLParser::TemplateStringContext::stringContents(size_t i) {
  return getRuleContext<HogQLParser::StringContentsContext>(i);
}


size_t HogQLParser::TemplateStringContext::getRuleIndex() const {
  return HogQLParser::RuleTemplateString;
}


std::any HogQLParser::TemplateStringContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitTemplateString(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::TemplateStringContext* HogQLParser::templateString() {
  TemplateStringContext *_localctx = _tracker.createInstance<TemplateStringContext>(_ctx, getState());
  enterRule(_localctx, 160, HogQLParser::RuleTemplateString);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1204);
    match(HogQLParser::QUOTE_SINGLE_TEMPLATE);
    setState(1208);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == HogQLParser::STRING_TEXT

    || _la == HogQLParser::STRING_ESCAPE_TRIGGER) {
      setState(1205);
      stringContents();
      setState(1210);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1211);
    match(HogQLParser::QUOTE_SINGLE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StringContentsContext ------------------------------------------------------------------

HogQLParser::StringContentsContext::StringContentsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::StringContentsContext::STRING_ESCAPE_TRIGGER() {
  return getToken(HogQLParser::STRING_ESCAPE_TRIGGER, 0);
}

HogQLParser::ColumnExprContext* HogQLParser::StringContentsContext::columnExpr() {
  return getRuleContext<HogQLParser::ColumnExprContext>(0);
}

tree::TerminalNode* HogQLParser::StringContentsContext::RBRACE() {
  return getToken(HogQLParser::RBRACE, 0);
}

tree::TerminalNode* HogQLParser::StringContentsContext::STRING_TEXT() {
  return getToken(HogQLParser::STRING_TEXT, 0);
}


size_t HogQLParser::StringContentsContext::getRuleIndex() const {
  return HogQLParser::RuleStringContents;
}


std::any HogQLParser::StringContentsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitStringContents(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::StringContentsContext* HogQLParser::stringContents() {
  StringContentsContext *_localctx = _tracker.createInstance<StringContentsContext>(_ctx, getState());
  enterRule(_localctx, 162, HogQLParser::RuleStringContents);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1218);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case HogQLParser::STRING_ESCAPE_TRIGGER: {
        enterOuterAlt(_localctx, 1);
        setState(1213);
        match(HogQLParser::STRING_ESCAPE_TRIGGER);
        setState(1214);
        columnExpr(0);
        setState(1215);
        match(HogQLParser::RBRACE);
        break;
      }

      case HogQLParser::STRING_TEXT: {
        enterOuterAlt(_localctx, 2);
        setState(1217);
        match(HogQLParser::STRING_TEXT);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FullTemplateStringContext ------------------------------------------------------------------

HogQLParser::FullTemplateStringContext::FullTemplateStringContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::FullTemplateStringContext::QUOTE_SINGLE_TEMPLATE_FULL() {
  return getToken(HogQLParser::QUOTE_SINGLE_TEMPLATE_FULL, 0);
}

tree::TerminalNode* HogQLParser::FullTemplateStringContext::EOF() {
  return getToken(HogQLParser::EOF, 0);
}

std::vector<HogQLParser::StringContentsFullContext *> HogQLParser::FullTemplateStringContext::stringContentsFull() {
  return getRuleContexts<HogQLParser::StringContentsFullContext>();
}

HogQLParser::StringContentsFullContext* HogQLParser::FullTemplateStringContext::stringContentsFull(size_t i) {
  return getRuleContext<HogQLParser::StringContentsFullContext>(i);
}


size_t HogQLParser::FullTemplateStringContext::getRuleIndex() const {
  return HogQLParser::RuleFullTemplateString;
}


std::any HogQLParser::FullTemplateStringContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitFullTemplateString(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::FullTemplateStringContext* HogQLParser::fullTemplateString() {
  FullTemplateStringContext *_localctx = _tracker.createInstance<FullTemplateStringContext>(_ctx, getState());
  enterRule(_localctx, 164, HogQLParser::RuleFullTemplateString);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1220);
    match(HogQLParser::QUOTE_SINGLE_TEMPLATE_FULL);
    setState(1224);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == HogQLParser::FULL_STRING_TEXT

    || _la == HogQLParser::FULL_STRING_ESCAPE_TRIGGER) {
      setState(1221);
      stringContentsFull();
      setState(1226);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1227);
    match(HogQLParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StringContentsFullContext ------------------------------------------------------------------

HogQLParser::StringContentsFullContext::StringContentsFullContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::StringContentsFullContext::FULL_STRING_ESCAPE_TRIGGER() {
  return getToken(HogQLParser::FULL_STRING_ESCAPE_TRIGGER, 0);
}

HogQLParser::ColumnExprContext* HogQLParser::StringContentsFullContext::columnExpr() {
  return getRuleContext<HogQLParser::ColumnExprContext>(0);
}

tree::TerminalNode* HogQLParser::StringContentsFullContext::RBRACE() {
  return getToken(HogQLParser::RBRACE, 0);
}

tree::TerminalNode* HogQLParser::StringContentsFullContext::FULL_STRING_TEXT() {
  return getToken(HogQLParser::FULL_STRING_TEXT, 0);
}


size_t HogQLParser::StringContentsFullContext::getRuleIndex() const {
  return HogQLParser::RuleStringContentsFull;
}


std::any HogQLParser::StringContentsFullContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitStringContentsFull(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::StringContentsFullContext* HogQLParser::stringContentsFull() {
  StringContentsFullContext *_localctx = _tracker.createInstance<StringContentsFullContext>(_ctx, getState());
  enterRule(_localctx, 166, HogQLParser::RuleStringContentsFull);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1234);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case HogQLParser::FULL_STRING_ESCAPE_TRIGGER: {
        enterOuterAlt(_localctx, 1);
        setState(1229);
        match(HogQLParser::FULL_STRING_ESCAPE_TRIGGER);
        setState(1230);
        columnExpr(0);
        setState(1231);
        match(HogQLParser::RBRACE);
        break;
      }

      case HogQLParser::FULL_STRING_TEXT: {
        enterOuterAlt(_localctx, 2);
        setState(1233);
        match(HogQLParser::FULL_STRING_TEXT);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

bool HogQLParser::sempred(RuleContext *context, size_t ruleIndex, size_t predicateIndex) {
  switch (ruleIndex) {
    case 35: return joinExprSempred(antlrcpp::downCast<JoinExprContext *>(context), predicateIndex);
    case 54: return columnExprSempred(antlrcpp::downCast<ColumnExprContext *>(context), predicateIndex);
    case 64: return tableExprSempred(antlrcpp::downCast<TableExprContext *>(context), predicateIndex);

  default:
    break;
  }
  return true;
}

bool HogQLParser::joinExprSempred(JoinExprContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 0: return precpred(_ctx, 3);
    case 1: return precpred(_ctx, 4);

  default:
    break;
  }
  return true;
}

bool HogQLParser::columnExprSempred(ColumnExprContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 2: return precpred(_ctx, 18);
    case 3: return precpred(_ctx, 17);
    case 4: return precpred(_ctx, 16);
    case 5: return precpred(_ctx, 14);
    case 6: return precpred(_ctx, 12);
    case 7: return precpred(_ctx, 11);
    case 8: return precpred(_ctx, 10);
    case 9: return precpred(_ctx, 9);
    case 10: return precpred(_ctx, 22);
    case 11: return precpred(_ctx, 21);
    case 12: return precpred(_ctx, 20);
    case 13: return precpred(_ctx, 15);
    case 14: return precpred(_ctx, 8);

  default:
    break;
  }
  return true;
}

bool HogQLParser::tableExprSempred(TableExprContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 15: return precpred(_ctx, 3);

  default:
    break;
  }
  return true;
}

void HogQLParser::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  hogqlparserParserInitialize();
#else
  ::antlr4::internal::call_once(hogqlparserParserOnceFlag, hogqlparserParserInitialize);
#endif
}
