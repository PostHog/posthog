
// Generated from HogQLParser.g4 by ANTLR 4.13.1


#include "HogQLParserVisitor.h"

#include "HogQLParser.h"


using namespace antlrcpp;

using namespace antlr4;

namespace {

struct HogQLParserStaticData final {
  HogQLParserStaticData(std::vector<std::string> ruleNames,
                        std::vector<std::string> literalNames,
                        std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  HogQLParserStaticData(const HogQLParserStaticData&) = delete;
  HogQLParserStaticData(HogQLParserStaticData&&) = delete;
  HogQLParserStaticData& operator=(const HogQLParserStaticData&) = delete;
  HogQLParserStaticData& operator=(HogQLParserStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag hogqlparserParserOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
HogQLParserStaticData *hogqlparserParserStaticData = nullptr;

void hogqlparserParserInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (hogqlparserParserStaticData != nullptr) {
    return;
  }
#else
  assert(hogqlparserParserStaticData == nullptr);
#endif
  auto staticData = std::make_unique<HogQLParserStaticData>(
    std::vector<std::string>{
      "select", "selectUnionStmt", "selectStmtWithParens", "selectStmt", 
      "withClause", "topClause", "fromClause", "arrayJoinClause", "windowClause", 
      "prewhereClause", "whereClause", "groupByClause", "havingClause", 
      "orderByClause", "projectionOrderByClause", "limitAndOffsetClause", 
      "offsetOnlyClause", "settingsClause", "joinExpr", "joinOp", "joinOpCross", 
      "joinConstraintClause", "sampleClause", "orderExprList", "orderExpr", 
      "ratioExpr", "settingExprList", "settingExpr", "windowExpr", "winPartitionByClause", 
      "winOrderByClause", "winFrameClause", "winFrameExtend", "winFrameBound", 
      "expr", "columnTypeExpr", "columnExprList", "columnExpr", "columnArgList", 
      "columnArgExpr", "columnLambdaExpr", "withExprList", "withExpr", "columnIdentifier", 
      "nestedIdentifier", "tableExpr", "tableFunctionExpr", "tableIdentifier", 
      "tableArgList", "databaseIdentifier", "floatingLiteral", "numberLiteral", 
      "literal", "interval", "keyword", "keywordForAlias", "alias", "identifier", 
      "enumValue"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "'false'", "'true'", "", "", "", "", "", "", "", "", 
      "'->'", "'*'", "'`'", "'\\'", "':'", "','", "'||'", "'-'", "'$'", 
      "'.'", "'=='", "'='", "'>='", "'>'", "'#'", "'~*'", "'=~*'", "'{'", 
      "'['", "'('", "'<='", "'<'", "", "'!~*'", "'!~'", "'\\u003F\\u003F'", 
      "'%'", "'+'", "'\\u003F'", "'\"'", "'''", "'~'", "'=~'", "'}'", "']'", 
      "')'", "';'", "'/'", "'_'"
    },
    std::vector<std::string>{
      "", "ADD", "AFTER", "ALIAS", "ALL", "ALTER", "AND", "ANTI", "ANY", 
      "ARRAY", "AS", "ASCENDING", "ASOF", "AST", "ASYNC", "ATTACH", "BETWEEN", 
      "BOTH", "BY", "CASE", "CAST", "CHECK", "CLEAR", "CLUSTER", "CODEC", 
      "COHORT", "COLLATE", "COLUMN", "COMMENT", "CONSTRAINT", "CREATE", 
      "CROSS", "CUBE", "CURRENT", "DATABASE", "DATABASES", "DATE", "DAY", 
      "DEDUPLICATE", "DEFAULT", "DELAY", "DELETE", "DESC", "DESCENDING", 
      "DESCRIBE", "DETACH", "DICTIONARIES", "DICTIONARY", "DISK", "DISTINCT", 
      "DISTRIBUTED", "DROP", "ELSE", "END", "ENGINE", "EVENTS", "EXISTS", 
      "EXPLAIN", "EXPRESSION", "EXTRACT", "FETCHES", "FINAL", "FIRST", "FLUSH", 
      "FOLLOWING", "FOR", "FORMAT", "FREEZE", "FROM", "FULL", "FUNCTION", 
      "GLOBAL", "GRANULARITY", "GROUP", "HAVING", "HIERARCHICAL", "HOUR", 
      "ID", "IF", "ILIKE", "IN", "INDEX", "INF", "INJECTIVE", "INNER", "INSERT", 
      "INTERVAL", "INTO", "IS", "IS_OBJECT_ID", "JOIN", "KEY", "KILL", "LAST", 
      "LAYOUT", "LEADING", "LEFT", "LIFETIME", "LIKE", "LIMIT", "LIVE", 
      "LOCAL", "LOGS", "MATERIALIZE", "MATERIALIZED", "MAX", "MERGES", "MIN", 
      "MINUTE", "MODIFY", "MONTH", "MOVE", "MUTATION", "NAN_SQL", "NO", 
      "NOT", "NULL_SQL", "NULLS", "OFFSET", "ON", "OPTIMIZE", "OR", "ORDER", 
      "OUTER", "OUTFILE", "OVER", "PARTITION", "POPULATE", "PRECEDING", 
      "PREWHERE", "PRIMARY", "PROJECTION", "QUARTER", "RANGE", "RELOAD", 
      "REMOVE", "RENAME", "REPLACE", "REPLICA", "REPLICATED", "RIGHT", "ROLLUP", 
      "ROW", "ROWS", "SAMPLE", "SECOND", "SELECT", "SEMI", "SENDS", "SET", 
      "SETTINGS", "SHOW", "SOURCE", "START", "STOP", "SUBSTRING", "SYNC", 
      "SYNTAX", "SYSTEM", "TABLE", "TABLES", "TEMPORARY", "TEST", "THEN", 
      "TIES", "TIMEOUT", "TIMESTAMP", "TO", "TOP", "TOTALS", "TRAILING", 
      "TRIM", "TRUNCATE", "TTL", "TYPE", "UNBOUNDED", "UNION", "UPDATE", 
      "USE", "USING", "UUID", "VALUES", "VIEW", "VOLUME", "WATCH", "WEEK", 
      "WHEN", "WHERE", "WINDOW", "WITH", "YEAR", "JSON_FALSE", "JSON_TRUE", 
      "ESCAPE_CHAR", "IDENTIFIER", "FLOATING_LITERAL", "OCTAL_LITERAL", 
      "DECIMAL_LITERAL", "HEXADECIMAL_LITERAL", "STRING_LITERAL", "PLACEHOLDER", 
      "ARROW", "ASTERISK", "BACKQUOTE", "BACKSLASH", "COLON", "COMMA", "CONCAT", 
      "DASH", "DOLLAR", "DOT", "EQ_DOUBLE", "EQ_SINGLE", "GT_EQ", "GT", 
      "HASH", "IREGEX_SINGLE", "IREGEX_DOUBLE", "LBRACE", "LBRACKET", "LPAREN", 
      "LT_EQ", "LT", "NOT_EQ", "NOT_IREGEX", "NOT_REGEX", "NULLISH", "PERCENT", 
      "PLUS", "QUERY", "QUOTE_DOUBLE", "QUOTE_SINGLE", "REGEX_SINGLE", "REGEX_DOUBLE", 
      "RBRACE", "RBRACKET", "RPAREN", "SEMICOLON", "SLASH", "UNDERSCORE", 
      "MULTI_LINE_COMMENT", "SINGLE_LINE_COMMENT", "WHITESPACE"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,1,242,922,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
  	7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,
  	14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,
  	21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,
  	28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,
  	35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,
  	42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,
  	49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,
  	56,2,57,7,57,2,58,7,58,1,0,1,0,3,0,121,8,0,1,0,1,0,1,1,1,1,1,1,1,1,5,
  	1,129,8,1,10,1,12,1,132,9,1,1,2,1,2,1,2,1,2,1,2,3,2,139,8,2,1,3,3,3,142,
  	8,3,1,3,1,3,3,3,146,8,3,1,3,3,3,149,8,3,1,3,1,3,3,3,153,8,3,1,3,3,3,156,
  	8,3,1,3,3,3,159,8,3,1,3,3,3,162,8,3,1,3,3,3,165,8,3,1,3,1,3,3,3,169,8,
  	3,1,3,1,3,3,3,173,8,3,1,3,3,3,176,8,3,1,3,3,3,179,8,3,1,3,3,3,182,8,3,
  	1,3,1,3,3,3,186,8,3,1,3,3,3,189,8,3,1,4,1,4,1,4,1,5,1,5,1,5,1,5,3,5,198,
  	8,5,1,6,1,6,1,6,1,7,3,7,204,8,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,
  	8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,5,8,223,8,8,10,8,12,8,226,9,8,1,9,1,9,1,
  	9,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,242,8,11,
  	1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,15,1,15,1,15,
  	1,15,3,15,259,8,15,1,15,1,15,1,15,1,15,3,15,265,8,15,1,15,1,15,1,15,1,
  	15,3,15,271,8,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,3,15,282,
  	8,15,3,15,284,8,15,1,16,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,18,3,18,
  	295,8,18,1,18,3,18,298,8,18,1,18,1,18,1,18,1,18,3,18,304,8,18,1,18,1,
  	18,1,18,1,18,1,18,1,18,3,18,312,8,18,1,18,1,18,1,18,1,18,5,18,318,8,18,
  	10,18,12,18,321,9,18,1,19,3,19,324,8,19,1,19,1,19,1,19,3,19,329,8,19,
  	1,19,3,19,332,8,19,1,19,3,19,335,8,19,1,19,1,19,3,19,339,8,19,1,19,1,
  	19,3,19,343,8,19,1,19,3,19,346,8,19,3,19,348,8,19,1,19,3,19,351,8,19,
  	1,19,1,19,3,19,355,8,19,1,19,1,19,3,19,359,8,19,1,19,3,19,362,8,19,3,
  	19,364,8,19,3,19,366,8,19,1,20,1,20,1,20,3,20,371,8,20,1,21,1,21,1,21,
  	1,21,1,21,1,21,1,21,1,21,1,21,3,21,382,8,21,1,22,1,22,1,22,1,22,3,22,
  	388,8,22,1,23,1,23,1,23,5,23,393,8,23,10,23,12,23,396,9,23,1,24,1,24,
  	3,24,400,8,24,1,24,1,24,3,24,404,8,24,1,24,1,24,3,24,408,8,24,1,25,1,
  	25,1,25,1,25,3,25,414,8,25,3,25,416,8,25,1,26,1,26,1,26,5,26,421,8,26,
  	10,26,12,26,424,9,26,1,27,1,27,1,27,1,27,1,28,3,28,431,8,28,1,28,3,28,
  	434,8,28,1,28,3,28,437,8,28,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,
  	31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,32,3,32,456,8,32,1,33,1,33,1,
  	33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,3,33,470,8,33,1,34,1,
  	34,1,34,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,5,35,484,8,35,10,
  	35,12,35,487,9,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,5,35,496,8,35,10,
  	35,12,35,499,9,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,5,35,508,8,35,10,
  	35,12,35,511,9,35,1,35,1,35,1,35,1,35,1,35,3,35,518,8,35,1,35,1,35,3,
  	35,522,8,35,1,36,1,36,1,36,5,36,527,8,36,10,36,12,36,530,9,36,1,37,1,
  	37,1,37,3,37,535,8,37,1,37,1,37,1,37,1,37,1,37,4,37,542,8,37,11,37,12,
  	37,543,1,37,1,37,3,37,548,8,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,
  	1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,
  	1,37,1,37,1,37,1,37,1,37,1,37,1,37,3,37,579,8,37,1,37,1,37,1,37,1,37,
  	1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,3,37,596,8,37,
  	1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,3,37,608,8,37,1,37,
  	1,37,1,37,1,37,1,37,1,37,1,37,1,37,3,37,618,8,37,1,37,3,37,621,8,37,1,
  	37,1,37,3,37,625,8,37,1,37,3,37,628,8,37,1,37,1,37,1,37,1,37,1,37,1,37,
  	1,37,1,37,1,37,1,37,3,37,640,8,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,
  	1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,3,37,657,8,37,1,37,1,37,3,37,
  	661,8,37,1,37,1,37,1,37,1,37,3,37,667,8,37,1,37,1,37,1,37,1,37,1,37,3,
  	37,674,8,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,3,37,686,
  	8,37,1,37,1,37,3,37,690,8,37,1,37,3,37,693,8,37,1,37,1,37,1,37,1,37,1,
  	37,1,37,1,37,3,37,702,8,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,
  	37,1,37,1,37,1,37,3,37,716,8,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,
  	37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,
  	37,1,37,1,37,1,37,3,37,743,8,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,3,
  	37,752,8,37,5,37,754,8,37,10,37,12,37,757,9,37,1,38,1,38,1,38,5,38,762,
  	8,38,10,38,12,38,765,9,38,1,39,1,39,3,39,769,8,39,1,40,1,40,1,40,1,40,
  	5,40,775,8,40,10,40,12,40,778,9,40,1,40,1,40,1,40,1,40,1,40,5,40,785,
  	8,40,10,40,12,40,788,9,40,3,40,790,8,40,1,40,1,40,1,40,1,41,1,41,1,41,
  	5,41,798,8,41,10,41,12,41,801,9,41,1,42,1,42,1,42,1,42,1,42,1,42,1,42,
  	1,42,1,42,1,42,3,42,813,8,42,1,43,1,43,1,43,1,43,3,43,819,8,43,1,43,3,
  	43,822,8,43,1,44,1,44,1,44,5,44,827,8,44,10,44,12,44,830,9,44,1,45,1,
  	45,1,45,1,45,1,45,1,45,1,45,1,45,3,45,840,8,45,1,45,1,45,1,45,1,45,3,
  	45,846,8,45,5,45,848,8,45,10,45,12,45,851,9,45,1,46,1,46,1,46,3,46,856,
  	8,46,1,46,1,46,1,47,1,47,1,47,3,47,863,8,47,1,47,1,47,1,48,1,48,1,48,
  	5,48,870,8,48,10,48,12,48,873,9,48,1,49,1,49,1,50,1,50,1,50,1,50,1,50,
  	1,50,3,50,883,8,50,3,50,885,8,50,1,51,3,51,888,8,51,1,51,1,51,1,51,1,
  	51,1,51,1,51,3,51,896,8,51,1,52,1,52,1,52,3,52,901,8,52,1,53,1,53,1,54,
  	1,54,1,55,1,55,1,56,1,56,3,56,911,8,56,1,57,1,57,1,57,3,57,916,8,57,1,
  	58,1,58,1,58,1,58,1,58,0,3,36,74,90,59,0,2,4,6,8,10,12,14,16,18,20,22,
  	24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,
  	70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,
  	112,114,116,0,16,2,0,32,32,141,141,2,0,84,84,96,96,3,0,4,4,8,8,12,12,
  	4,0,4,4,7,8,12,12,147,147,2,0,96,96,140,140,2,0,4,4,8,8,2,0,11,11,42,
  	43,2,0,62,62,93,93,2,0,133,133,143,143,3,0,17,17,95,95,170,170,2,0,79,
  	79,98,98,1,0,196,197,2,0,208,208,228,228,8,0,37,37,76,76,108,108,110,
  	110,132,132,145,145,185,185,190,190,13,0,2,24,26,36,38,75,77,81,83,107,
  	109,109,111,112,114,115,117,130,133,144,146,184,186,189,191,192,4,0,36,
  	36,62,62,77,77,91,91,1043,0,120,1,0,0,0,2,124,1,0,0,0,4,138,1,0,0,0,6,
  	141,1,0,0,0,8,190,1,0,0,0,10,193,1,0,0,0,12,199,1,0,0,0,14,203,1,0,0,
  	0,16,209,1,0,0,0,18,227,1,0,0,0,20,230,1,0,0,0,22,233,1,0,0,0,24,243,
  	1,0,0,0,26,246,1,0,0,0,28,250,1,0,0,0,30,283,1,0,0,0,32,285,1,0,0,0,34,
  	288,1,0,0,0,36,303,1,0,0,0,38,365,1,0,0,0,40,370,1,0,0,0,42,381,1,0,0,
  	0,44,383,1,0,0,0,46,389,1,0,0,0,48,397,1,0,0,0,50,415,1,0,0,0,52,417,
  	1,0,0,0,54,425,1,0,0,0,56,430,1,0,0,0,58,438,1,0,0,0,60,442,1,0,0,0,62,
  	446,1,0,0,0,64,455,1,0,0,0,66,469,1,0,0,0,68,471,1,0,0,0,70,521,1,0,0,
  	0,72,523,1,0,0,0,74,660,1,0,0,0,76,758,1,0,0,0,78,768,1,0,0,0,80,789,
  	1,0,0,0,82,794,1,0,0,0,84,812,1,0,0,0,86,821,1,0,0,0,88,823,1,0,0,0,90,
  	839,1,0,0,0,92,852,1,0,0,0,94,862,1,0,0,0,96,866,1,0,0,0,98,874,1,0,0,
  	0,100,884,1,0,0,0,102,887,1,0,0,0,104,900,1,0,0,0,106,902,1,0,0,0,108,
  	904,1,0,0,0,110,906,1,0,0,0,112,910,1,0,0,0,114,915,1,0,0,0,116,917,1,
  	0,0,0,118,121,3,2,1,0,119,121,3,6,3,0,120,118,1,0,0,0,120,119,1,0,0,0,
  	121,122,1,0,0,0,122,123,5,0,0,1,123,1,1,0,0,0,124,130,3,4,2,0,125,126,
  	5,176,0,0,126,127,5,4,0,0,127,129,3,4,2,0,128,125,1,0,0,0,129,132,1,0,
  	0,0,130,128,1,0,0,0,130,131,1,0,0,0,131,3,1,0,0,0,132,130,1,0,0,0,133,
  	139,3,6,3,0,134,135,5,220,0,0,135,136,3,2,1,0,136,137,5,236,0,0,137,139,
  	1,0,0,0,138,133,1,0,0,0,138,134,1,0,0,0,139,5,1,0,0,0,140,142,3,8,4,0,
  	141,140,1,0,0,0,141,142,1,0,0,0,142,143,1,0,0,0,143,145,5,146,0,0,144,
  	146,5,49,0,0,145,144,1,0,0,0,145,146,1,0,0,0,146,148,1,0,0,0,147,149,
  	3,10,5,0,148,147,1,0,0,0,148,149,1,0,0,0,149,150,1,0,0,0,150,152,3,72,
  	36,0,151,153,3,12,6,0,152,151,1,0,0,0,152,153,1,0,0,0,153,155,1,0,0,0,
  	154,156,3,14,7,0,155,154,1,0,0,0,155,156,1,0,0,0,156,158,1,0,0,0,157,
  	159,3,18,9,0,158,157,1,0,0,0,158,159,1,0,0,0,159,161,1,0,0,0,160,162,
  	3,20,10,0,161,160,1,0,0,0,161,162,1,0,0,0,162,164,1,0,0,0,163,165,3,22,
  	11,0,164,163,1,0,0,0,164,165,1,0,0,0,165,168,1,0,0,0,166,167,5,189,0,
  	0,167,169,7,0,0,0,168,166,1,0,0,0,168,169,1,0,0,0,169,172,1,0,0,0,170,
  	171,5,189,0,0,171,173,5,169,0,0,172,170,1,0,0,0,172,173,1,0,0,0,173,175,
  	1,0,0,0,174,176,3,24,12,0,175,174,1,0,0,0,175,176,1,0,0,0,176,178,1,0,
  	0,0,177,179,3,16,8,0,178,177,1,0,0,0,178,179,1,0,0,0,179,181,1,0,0,0,
  	180,182,3,26,13,0,181,180,1,0,0,0,181,182,1,0,0,0,182,185,1,0,0,0,183,
  	186,3,30,15,0,184,186,3,32,16,0,185,183,1,0,0,0,185,184,1,0,0,0,185,186,
  	1,0,0,0,186,188,1,0,0,0,187,189,3,34,17,0,188,187,1,0,0,0,188,189,1,0,
  	0,0,189,7,1,0,0,0,190,191,5,189,0,0,191,192,3,82,41,0,192,9,1,0,0,0,193,
  	194,5,168,0,0,194,197,5,197,0,0,195,196,5,189,0,0,196,198,5,164,0,0,197,
  	195,1,0,0,0,197,198,1,0,0,0,198,11,1,0,0,0,199,200,5,68,0,0,200,201,3,
  	36,18,0,201,13,1,0,0,0,202,204,7,1,0,0,203,202,1,0,0,0,203,204,1,0,0,
  	0,204,205,1,0,0,0,205,206,5,9,0,0,206,207,5,90,0,0,207,208,3,72,36,0,
  	208,15,1,0,0,0,209,210,5,188,0,0,210,211,3,114,57,0,211,212,5,10,0,0,
  	212,213,5,220,0,0,213,214,3,56,28,0,214,224,5,236,0,0,215,216,5,206,0,
  	0,216,217,3,114,57,0,217,218,5,10,0,0,218,219,5,220,0,0,219,220,3,56,
  	28,0,220,221,5,236,0,0,221,223,1,0,0,0,222,215,1,0,0,0,223,226,1,0,0,
  	0,224,222,1,0,0,0,224,225,1,0,0,0,225,17,1,0,0,0,226,224,1,0,0,0,227,
  	228,5,129,0,0,228,229,3,74,37,0,229,19,1,0,0,0,230,231,5,187,0,0,231,
  	232,3,74,37,0,232,21,1,0,0,0,233,234,5,73,0,0,234,241,5,18,0,0,235,236,
  	7,0,0,0,236,237,5,220,0,0,237,238,3,72,36,0,238,239,5,236,0,0,239,242,
  	1,0,0,0,240,242,3,72,36,0,241,235,1,0,0,0,241,240,1,0,0,0,242,23,1,0,
  	0,0,243,244,5,74,0,0,244,245,3,74,37,0,245,25,1,0,0,0,246,247,5,122,0,
  	0,247,248,5,18,0,0,248,249,3,46,23,0,249,27,1,0,0,0,250,251,5,122,0,0,
  	251,252,5,18,0,0,252,253,3,72,36,0,253,29,1,0,0,0,254,255,5,99,0,0,255,
  	258,3,74,37,0,256,257,5,206,0,0,257,259,3,74,37,0,258,256,1,0,0,0,258,
  	259,1,0,0,0,259,264,1,0,0,0,260,261,5,189,0,0,261,265,5,164,0,0,262,263,
  	5,18,0,0,263,265,3,72,36,0,264,260,1,0,0,0,264,262,1,0,0,0,264,265,1,
  	0,0,0,265,284,1,0,0,0,266,267,5,99,0,0,267,270,3,74,37,0,268,269,5,189,
  	0,0,269,271,5,164,0,0,270,268,1,0,0,0,270,271,1,0,0,0,271,272,1,0,0,0,
  	272,273,5,118,0,0,273,274,3,74,37,0,274,284,1,0,0,0,275,276,5,99,0,0,
  	276,277,3,74,37,0,277,278,5,118,0,0,278,281,3,74,37,0,279,280,5,18,0,
  	0,280,282,3,72,36,0,281,279,1,0,0,0,281,282,1,0,0,0,282,284,1,0,0,0,283,
  	254,1,0,0,0,283,266,1,0,0,0,283,275,1,0,0,0,284,31,1,0,0,0,285,286,5,
  	118,0,0,286,287,3,74,37,0,287,33,1,0,0,0,288,289,5,150,0,0,289,290,3,
  	52,26,0,290,35,1,0,0,0,291,292,6,18,-1,0,292,294,3,90,45,0,293,295,5,
  	61,0,0,294,293,1,0,0,0,294,295,1,0,0,0,295,297,1,0,0,0,296,298,3,44,22,
  	0,297,296,1,0,0,0,297,298,1,0,0,0,298,304,1,0,0,0,299,300,5,220,0,0,300,
  	301,3,36,18,0,301,302,5,236,0,0,302,304,1,0,0,0,303,291,1,0,0,0,303,299,
  	1,0,0,0,304,319,1,0,0,0,305,306,10,3,0,0,306,307,3,40,20,0,307,308,3,
  	36,18,4,308,318,1,0,0,0,309,311,10,4,0,0,310,312,3,38,19,0,311,310,1,
  	0,0,0,311,312,1,0,0,0,312,313,1,0,0,0,313,314,5,90,0,0,314,315,3,36,18,
  	0,315,316,3,42,21,0,316,318,1,0,0,0,317,305,1,0,0,0,317,309,1,0,0,0,318,
  	321,1,0,0,0,319,317,1,0,0,0,319,320,1,0,0,0,320,37,1,0,0,0,321,319,1,
  	0,0,0,322,324,7,2,0,0,323,322,1,0,0,0,323,324,1,0,0,0,324,325,1,0,0,0,
  	325,332,5,84,0,0,326,328,5,84,0,0,327,329,7,2,0,0,328,327,1,0,0,0,328,
  	329,1,0,0,0,329,332,1,0,0,0,330,332,7,2,0,0,331,323,1,0,0,0,331,326,1,
  	0,0,0,331,330,1,0,0,0,332,366,1,0,0,0,333,335,7,3,0,0,334,333,1,0,0,0,
  	334,335,1,0,0,0,335,336,1,0,0,0,336,338,7,4,0,0,337,339,5,123,0,0,338,
  	337,1,0,0,0,338,339,1,0,0,0,339,348,1,0,0,0,340,342,7,4,0,0,341,343,5,
  	123,0,0,342,341,1,0,0,0,342,343,1,0,0,0,343,345,1,0,0,0,344,346,7,3,0,
  	0,345,344,1,0,0,0,345,346,1,0,0,0,346,348,1,0,0,0,347,334,1,0,0,0,347,
  	340,1,0,0,0,348,366,1,0,0,0,349,351,7,5,0,0,350,349,1,0,0,0,350,351,1,
  	0,0,0,351,352,1,0,0,0,352,354,5,69,0,0,353,355,5,123,0,0,354,353,1,0,
  	0,0,354,355,1,0,0,0,355,364,1,0,0,0,356,358,5,69,0,0,357,359,5,123,0,
  	0,358,357,1,0,0,0,358,359,1,0,0,0,359,361,1,0,0,0,360,362,7,5,0,0,361,
  	360,1,0,0,0,361,362,1,0,0,0,362,364,1,0,0,0,363,350,1,0,0,0,363,356,1,
  	0,0,0,364,366,1,0,0,0,365,331,1,0,0,0,365,347,1,0,0,0,365,363,1,0,0,0,
  	366,39,1,0,0,0,367,368,5,31,0,0,368,371,5,90,0,0,369,371,5,206,0,0,370,
  	367,1,0,0,0,370,369,1,0,0,0,371,41,1,0,0,0,372,373,5,119,0,0,373,382,
  	3,72,36,0,374,375,5,179,0,0,375,376,5,220,0,0,376,377,3,72,36,0,377,378,
  	5,236,0,0,378,382,1,0,0,0,379,380,5,179,0,0,380,382,3,72,36,0,381,372,
  	1,0,0,0,381,374,1,0,0,0,381,379,1,0,0,0,382,43,1,0,0,0,383,384,5,144,
  	0,0,384,387,3,50,25,0,385,386,5,118,0,0,386,388,3,50,25,0,387,385,1,0,
  	0,0,387,388,1,0,0,0,388,45,1,0,0,0,389,394,3,48,24,0,390,391,5,206,0,
  	0,391,393,3,48,24,0,392,390,1,0,0,0,393,396,1,0,0,0,394,392,1,0,0,0,394,
  	395,1,0,0,0,395,47,1,0,0,0,396,394,1,0,0,0,397,399,3,74,37,0,398,400,
  	7,6,0,0,399,398,1,0,0,0,399,400,1,0,0,0,400,403,1,0,0,0,401,402,5,117,
  	0,0,402,404,7,7,0,0,403,401,1,0,0,0,403,404,1,0,0,0,404,407,1,0,0,0,405,
  	406,5,26,0,0,406,408,5,199,0,0,407,405,1,0,0,0,407,408,1,0,0,0,408,49,
  	1,0,0,0,409,416,5,200,0,0,410,413,3,102,51,0,411,412,5,238,0,0,412,414,
  	3,102,51,0,413,411,1,0,0,0,413,414,1,0,0,0,414,416,1,0,0,0,415,409,1,
  	0,0,0,415,410,1,0,0,0,416,51,1,0,0,0,417,422,3,54,27,0,418,419,5,206,
  	0,0,419,421,3,54,27,0,420,418,1,0,0,0,421,424,1,0,0,0,422,420,1,0,0,0,
  	422,423,1,0,0,0,423,53,1,0,0,0,424,422,1,0,0,0,425,426,3,114,57,0,426,
  	427,5,212,0,0,427,428,3,104,52,0,428,55,1,0,0,0,429,431,3,58,29,0,430,
  	429,1,0,0,0,430,431,1,0,0,0,431,433,1,0,0,0,432,434,3,60,30,0,433,432,
  	1,0,0,0,433,434,1,0,0,0,434,436,1,0,0,0,435,437,3,62,31,0,436,435,1,0,
  	0,0,436,437,1,0,0,0,437,57,1,0,0,0,438,439,5,126,0,0,439,440,5,18,0,0,
  	440,441,3,72,36,0,441,59,1,0,0,0,442,443,5,122,0,0,443,444,5,18,0,0,444,
  	445,3,46,23,0,445,61,1,0,0,0,446,447,7,8,0,0,447,448,3,64,32,0,448,63,
  	1,0,0,0,449,456,3,66,33,0,450,451,5,16,0,0,451,452,3,66,33,0,452,453,
  	5,6,0,0,453,454,3,66,33,0,454,456,1,0,0,0,455,449,1,0,0,0,455,450,1,0,
  	0,0,456,65,1,0,0,0,457,458,5,33,0,0,458,470,5,142,0,0,459,460,5,175,0,
  	0,460,470,5,128,0,0,461,462,5,175,0,0,462,470,5,64,0,0,463,464,3,102,
  	51,0,464,465,5,128,0,0,465,470,1,0,0,0,466,467,3,102,51,0,467,468,5,64,
  	0,0,468,470,1,0,0,0,469,457,1,0,0,0,469,459,1,0,0,0,469,461,1,0,0,0,469,
  	463,1,0,0,0,469,466,1,0,0,0,470,67,1,0,0,0,471,472,3,74,37,0,472,473,
  	5,0,0,1,473,69,1,0,0,0,474,522,3,114,57,0,475,476,3,114,57,0,476,477,
  	5,220,0,0,477,478,3,114,57,0,478,485,3,70,35,0,479,480,5,206,0,0,480,
  	481,3,114,57,0,481,482,3,70,35,0,482,484,1,0,0,0,483,479,1,0,0,0,484,
  	487,1,0,0,0,485,483,1,0,0,0,485,486,1,0,0,0,486,488,1,0,0,0,487,485,1,
  	0,0,0,488,489,5,236,0,0,489,522,1,0,0,0,490,491,3,114,57,0,491,492,5,
  	220,0,0,492,497,3,116,58,0,493,494,5,206,0,0,494,496,3,116,58,0,495,493,
  	1,0,0,0,496,499,1,0,0,0,497,495,1,0,0,0,497,498,1,0,0,0,498,500,1,0,0,
  	0,499,497,1,0,0,0,500,501,5,236,0,0,501,522,1,0,0,0,502,503,3,114,57,
  	0,503,504,5,220,0,0,504,509,3,70,35,0,505,506,5,206,0,0,506,508,3,70,
  	35,0,507,505,1,0,0,0,508,511,1,0,0,0,509,507,1,0,0,0,509,510,1,0,0,0,
  	510,512,1,0,0,0,511,509,1,0,0,0,512,513,5,236,0,0,513,522,1,0,0,0,514,
  	515,3,114,57,0,515,517,5,220,0,0,516,518,3,72,36,0,517,516,1,0,0,0,517,
  	518,1,0,0,0,518,519,1,0,0,0,519,520,5,236,0,0,520,522,1,0,0,0,521,474,
  	1,0,0,0,521,475,1,0,0,0,521,490,1,0,0,0,521,502,1,0,0,0,521,514,1,0,0,
  	0,522,71,1,0,0,0,523,528,3,74,37,0,524,525,5,206,0,0,525,527,3,74,37,
  	0,526,524,1,0,0,0,527,530,1,0,0,0,528,526,1,0,0,0,528,529,1,0,0,0,529,
  	73,1,0,0,0,530,528,1,0,0,0,531,532,6,37,-1,0,532,534,5,19,0,0,533,535,
  	3,74,37,0,534,533,1,0,0,0,534,535,1,0,0,0,535,541,1,0,0,0,536,537,5,186,
  	0,0,537,538,3,74,37,0,538,539,5,163,0,0,539,540,3,74,37,0,540,542,1,0,
  	0,0,541,536,1,0,0,0,542,543,1,0,0,0,543,541,1,0,0,0,543,544,1,0,0,0,544,
  	547,1,0,0,0,545,546,5,52,0,0,546,548,3,74,37,0,547,545,1,0,0,0,547,548,
  	1,0,0,0,548,549,1,0,0,0,549,550,5,53,0,0,550,661,1,0,0,0,551,552,5,20,
  	0,0,552,553,5,220,0,0,553,554,3,74,37,0,554,555,5,10,0,0,555,556,3,70,
  	35,0,556,557,5,236,0,0,557,661,1,0,0,0,558,559,5,36,0,0,559,661,5,199,
  	0,0,560,561,5,59,0,0,561,562,5,220,0,0,562,563,3,106,53,0,563,564,5,68,
  	0,0,564,565,3,74,37,0,565,566,5,236,0,0,566,661,1,0,0,0,567,568,5,86,
  	0,0,568,569,3,74,37,0,569,570,3,106,53,0,570,661,1,0,0,0,571,572,5,155,
  	0,0,572,573,5,220,0,0,573,574,3,74,37,0,574,575,5,68,0,0,575,578,3,74,
  	37,0,576,577,5,65,0,0,577,579,3,74,37,0,578,576,1,0,0,0,578,579,1,0,0,
  	0,579,580,1,0,0,0,580,581,5,236,0,0,581,661,1,0,0,0,582,583,5,166,0,0,
  	583,661,5,199,0,0,584,585,5,171,0,0,585,586,5,220,0,0,586,587,7,9,0,0,
  	587,588,5,199,0,0,588,589,5,68,0,0,589,590,3,74,37,0,590,591,5,236,0,
  	0,591,661,1,0,0,0,592,593,3,114,57,0,593,595,5,220,0,0,594,596,3,72,36,
  	0,595,594,1,0,0,0,595,596,1,0,0,0,596,597,1,0,0,0,597,598,5,236,0,0,598,
  	599,1,0,0,0,599,600,5,125,0,0,600,601,5,220,0,0,601,602,3,56,28,0,602,
  	603,5,236,0,0,603,661,1,0,0,0,604,605,3,114,57,0,605,607,5,220,0,0,606,
  	608,3,72,36,0,607,606,1,0,0,0,607,608,1,0,0,0,608,609,1,0,0,0,609,610,
  	5,236,0,0,610,611,1,0,0,0,611,612,5,125,0,0,612,613,3,114,57,0,613,661,
  	1,0,0,0,614,620,3,114,57,0,615,617,5,220,0,0,616,618,3,72,36,0,617,616,
  	1,0,0,0,617,618,1,0,0,0,618,619,1,0,0,0,619,621,5,236,0,0,620,615,1,0,
  	0,0,620,621,1,0,0,0,621,622,1,0,0,0,622,624,5,220,0,0,623,625,5,49,0,
  	0,624,623,1,0,0,0,624,625,1,0,0,0,625,627,1,0,0,0,626,628,3,76,38,0,627,
  	626,1,0,0,0,627,628,1,0,0,0,628,629,1,0,0,0,629,630,5,236,0,0,630,661,
  	1,0,0,0,631,661,3,104,52,0,632,633,5,208,0,0,633,661,3,74,37,18,634,635,
  	5,115,0,0,635,661,3,74,37,12,636,637,3,94,47,0,637,638,5,210,0,0,638,
  	640,1,0,0,0,639,636,1,0,0,0,639,640,1,0,0,0,640,641,1,0,0,0,641,661,5,
  	202,0,0,642,643,5,220,0,0,643,644,3,2,1,0,644,645,5,236,0,0,645,661,1,
  	0,0,0,646,647,5,220,0,0,647,648,3,74,37,0,648,649,5,236,0,0,649,661,1,
  	0,0,0,650,651,5,220,0,0,651,652,3,72,36,0,652,653,5,236,0,0,653,661,1,
  	0,0,0,654,656,5,219,0,0,655,657,3,72,36,0,656,655,1,0,0,0,656,657,1,0,
  	0,0,657,658,1,0,0,0,658,661,5,235,0,0,659,661,3,86,43,0,660,531,1,0,0,
  	0,660,551,1,0,0,0,660,558,1,0,0,0,660,560,1,0,0,0,660,567,1,0,0,0,660,
  	571,1,0,0,0,660,582,1,0,0,0,660,584,1,0,0,0,660,592,1,0,0,0,660,604,1,
  	0,0,0,660,614,1,0,0,0,660,631,1,0,0,0,660,632,1,0,0,0,660,634,1,0,0,0,
  	660,639,1,0,0,0,660,642,1,0,0,0,660,646,1,0,0,0,660,650,1,0,0,0,660,654,
  	1,0,0,0,660,659,1,0,0,0,661,755,1,0,0,0,662,666,10,17,0,0,663,667,5,202,
  	0,0,664,667,5,238,0,0,665,667,5,227,0,0,666,663,1,0,0,0,666,664,1,0,0,
  	0,666,665,1,0,0,0,667,668,1,0,0,0,668,754,3,74,37,18,669,673,10,16,0,
  	0,670,674,5,228,0,0,671,674,5,208,0,0,672,674,5,207,0,0,673,670,1,0,0,
  	0,673,671,1,0,0,0,673,672,1,0,0,0,674,675,1,0,0,0,675,754,3,74,37,17,
  	676,701,10,15,0,0,677,702,5,211,0,0,678,702,5,212,0,0,679,702,5,223,0,
  	0,680,702,5,221,0,0,681,702,5,222,0,0,682,702,5,213,0,0,683,702,5,214,
  	0,0,684,686,5,115,0,0,685,684,1,0,0,0,685,686,1,0,0,0,686,687,1,0,0,0,
  	687,689,5,80,0,0,688,690,5,25,0,0,689,688,1,0,0,0,689,690,1,0,0,0,690,
  	702,1,0,0,0,691,693,5,115,0,0,692,691,1,0,0,0,692,693,1,0,0,0,693,694,
  	1,0,0,0,694,702,7,10,0,0,695,702,5,232,0,0,696,702,5,233,0,0,697,702,
  	5,225,0,0,698,702,5,216,0,0,699,702,5,217,0,0,700,702,5,224,0,0,701,677,
  	1,0,0,0,701,678,1,0,0,0,701,679,1,0,0,0,701,680,1,0,0,0,701,681,1,0,0,
  	0,701,682,1,0,0,0,701,683,1,0,0,0,701,685,1,0,0,0,701,692,1,0,0,0,701,
  	695,1,0,0,0,701,696,1,0,0,0,701,697,1,0,0,0,701,698,1,0,0,0,701,699,1,
  	0,0,0,701,700,1,0,0,0,702,703,1,0,0,0,703,754,3,74,37,16,704,705,10,13,
  	0,0,705,706,5,226,0,0,706,754,3,74,37,14,707,708,10,11,0,0,708,709,5,
  	6,0,0,709,754,3,74,37,12,710,711,10,10,0,0,711,712,5,121,0,0,712,754,
  	3,74,37,11,713,715,10,9,0,0,714,716,5,115,0,0,715,714,1,0,0,0,715,716,
  	1,0,0,0,716,717,1,0,0,0,717,718,5,16,0,0,718,719,3,74,37,0,719,720,5,
  	6,0,0,720,721,3,74,37,10,721,754,1,0,0,0,722,723,10,8,0,0,723,724,5,229,
  	0,0,724,725,3,74,37,0,725,726,5,205,0,0,726,727,3,74,37,8,727,754,1,0,
  	0,0,728,729,10,21,0,0,729,730,5,219,0,0,730,731,3,74,37,0,731,732,5,235,
  	0,0,732,754,1,0,0,0,733,734,10,20,0,0,734,735,5,210,0,0,735,754,5,197,
  	0,0,736,737,10,19,0,0,737,738,5,210,0,0,738,754,3,114,57,0,739,740,10,
  	14,0,0,740,742,5,88,0,0,741,743,5,115,0,0,742,741,1,0,0,0,742,743,1,0,
  	0,0,743,744,1,0,0,0,744,754,5,116,0,0,745,751,10,7,0,0,746,752,3,112,
  	56,0,747,748,5,10,0,0,748,752,3,114,57,0,749,750,5,10,0,0,750,752,5,199,
  	0,0,751,746,1,0,0,0,751,747,1,0,0,0,751,749,1,0,0,0,752,754,1,0,0,0,753,
  	662,1,0,0,0,753,669,1,0,0,0,753,676,1,0,0,0,753,704,1,0,0,0,753,707,1,
  	0,0,0,753,710,1,0,0,0,753,713,1,0,0,0,753,722,1,0,0,0,753,728,1,0,0,0,
  	753,733,1,0,0,0,753,736,1,0,0,0,753,739,1,0,0,0,753,745,1,0,0,0,754,757,
  	1,0,0,0,755,753,1,0,0,0,755,756,1,0,0,0,756,75,1,0,0,0,757,755,1,0,0,
  	0,758,763,3,78,39,0,759,760,5,206,0,0,760,762,3,78,39,0,761,759,1,0,0,
  	0,762,765,1,0,0,0,763,761,1,0,0,0,763,764,1,0,0,0,764,77,1,0,0,0,765,
  	763,1,0,0,0,766,769,3,80,40,0,767,769,3,74,37,0,768,766,1,0,0,0,768,767,
  	1,0,0,0,769,79,1,0,0,0,770,771,5,220,0,0,771,776,3,114,57,0,772,773,5,
  	206,0,0,773,775,3,114,57,0,774,772,1,0,0,0,775,778,1,0,0,0,776,774,1,
  	0,0,0,776,777,1,0,0,0,777,779,1,0,0,0,778,776,1,0,0,0,779,780,5,236,0,
  	0,780,790,1,0,0,0,781,786,3,114,57,0,782,783,5,206,0,0,783,785,3,114,
  	57,0,784,782,1,0,0,0,785,788,1,0,0,0,786,784,1,0,0,0,786,787,1,0,0,0,
  	787,790,1,0,0,0,788,786,1,0,0,0,789,770,1,0,0,0,789,781,1,0,0,0,790,791,
  	1,0,0,0,791,792,5,201,0,0,792,793,3,74,37,0,793,81,1,0,0,0,794,799,3,
  	84,42,0,795,796,5,206,0,0,796,798,3,84,42,0,797,795,1,0,0,0,798,801,1,
  	0,0,0,799,797,1,0,0,0,799,800,1,0,0,0,800,83,1,0,0,0,801,799,1,0,0,0,
  	802,803,3,114,57,0,803,804,5,10,0,0,804,805,5,220,0,0,805,806,3,2,1,0,
  	806,807,5,236,0,0,807,813,1,0,0,0,808,809,3,74,37,0,809,810,5,10,0,0,
  	810,811,3,114,57,0,811,813,1,0,0,0,812,802,1,0,0,0,812,808,1,0,0,0,813,
  	85,1,0,0,0,814,822,5,200,0,0,815,816,3,94,47,0,816,817,5,210,0,0,817,
  	819,1,0,0,0,818,815,1,0,0,0,818,819,1,0,0,0,819,820,1,0,0,0,820,822,3,
  	88,44,0,821,814,1,0,0,0,821,818,1,0,0,0,822,87,1,0,0,0,823,828,3,114,
  	57,0,824,825,5,210,0,0,825,827,3,114,57,0,826,824,1,0,0,0,827,830,1,0,
  	0,0,828,826,1,0,0,0,828,829,1,0,0,0,829,89,1,0,0,0,830,828,1,0,0,0,831,
  	832,6,45,-1,0,832,840,3,94,47,0,833,840,3,92,46,0,834,835,5,220,0,0,835,
  	836,3,2,1,0,836,837,5,236,0,0,837,840,1,0,0,0,838,840,5,200,0,0,839,831,
  	1,0,0,0,839,833,1,0,0,0,839,834,1,0,0,0,839,838,1,0,0,0,840,849,1,0,0,
  	0,841,845,10,2,0,0,842,846,3,112,56,0,843,844,5,10,0,0,844,846,3,114,
  	57,0,845,842,1,0,0,0,845,843,1,0,0,0,846,848,1,0,0,0,847,841,1,0,0,0,
  	848,851,1,0,0,0,849,847,1,0,0,0,849,850,1,0,0,0,850,91,1,0,0,0,851,849,
  	1,0,0,0,852,853,3,114,57,0,853,855,5,220,0,0,854,856,3,96,48,0,855,854,
  	1,0,0,0,855,856,1,0,0,0,856,857,1,0,0,0,857,858,5,236,0,0,858,93,1,0,
  	0,0,859,860,3,98,49,0,860,861,5,210,0,0,861,863,1,0,0,0,862,859,1,0,0,
  	0,862,863,1,0,0,0,863,864,1,0,0,0,864,865,3,114,57,0,865,95,1,0,0,0,866,
  	871,3,74,37,0,867,868,5,206,0,0,868,870,3,74,37,0,869,867,1,0,0,0,870,
  	873,1,0,0,0,871,869,1,0,0,0,871,872,1,0,0,0,872,97,1,0,0,0,873,871,1,
  	0,0,0,874,875,3,114,57,0,875,99,1,0,0,0,876,885,5,195,0,0,877,878,5,210,
  	0,0,878,885,7,11,0,0,879,880,5,197,0,0,880,882,5,210,0,0,881,883,7,11,
  	0,0,882,881,1,0,0,0,882,883,1,0,0,0,883,885,1,0,0,0,884,876,1,0,0,0,884,
  	877,1,0,0,0,884,879,1,0,0,0,885,101,1,0,0,0,886,888,7,12,0,0,887,886,
  	1,0,0,0,887,888,1,0,0,0,888,895,1,0,0,0,889,896,3,100,50,0,890,896,5,
  	196,0,0,891,896,5,197,0,0,892,896,5,198,0,0,893,896,5,82,0,0,894,896,
  	5,113,0,0,895,889,1,0,0,0,895,890,1,0,0,0,895,891,1,0,0,0,895,892,1,0,
  	0,0,895,893,1,0,0,0,895,894,1,0,0,0,896,103,1,0,0,0,897,901,3,102,51,
  	0,898,901,5,199,0,0,899,901,5,116,0,0,900,897,1,0,0,0,900,898,1,0,0,0,
  	900,899,1,0,0,0,901,105,1,0,0,0,902,903,7,13,0,0,903,107,1,0,0,0,904,
  	905,7,14,0,0,905,109,1,0,0,0,906,907,7,15,0,0,907,111,1,0,0,0,908,911,
  	5,194,0,0,909,911,3,110,55,0,910,908,1,0,0,0,910,909,1,0,0,0,911,113,
  	1,0,0,0,912,916,5,194,0,0,913,916,3,106,53,0,914,916,3,108,54,0,915,912,
  	1,0,0,0,915,913,1,0,0,0,915,914,1,0,0,0,916,115,1,0,0,0,917,918,5,199,
  	0,0,918,919,5,212,0,0,919,920,3,102,51,0,920,117,1,0,0,0,115,120,130,
  	138,141,145,148,152,155,158,161,164,168,172,175,178,181,185,188,197,203,
  	224,241,258,264,270,281,283,294,297,303,311,317,319,323,328,331,334,338,
  	342,345,347,350,354,358,361,363,365,370,381,387,394,399,403,407,413,415,
  	422,430,433,436,455,469,485,497,509,517,521,528,534,543,547,578,595,607,
  	617,620,624,627,639,656,660,666,673,685,689,692,701,715,742,751,753,755,
  	763,768,776,786,789,799,812,818,821,828,839,845,849,855,862,871,882,884,
  	887,895,900,910,915
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  hogqlparserParserStaticData = staticData.release();
}

}

HogQLParser::HogQLParser(TokenStream *input) : HogQLParser(input, antlr4::atn::ParserATNSimulatorOptions()) {}

HogQLParser::HogQLParser(TokenStream *input, const antlr4::atn::ParserATNSimulatorOptions &options) : Parser(input) {
  HogQLParser::initialize();
  _interpreter = new atn::ParserATNSimulator(this, *hogqlparserParserStaticData->atn, hogqlparserParserStaticData->decisionToDFA, hogqlparserParserStaticData->sharedContextCache, options);
}

HogQLParser::~HogQLParser() {
  delete _interpreter;
}

const atn::ATN& HogQLParser::getATN() const {
  return *hogqlparserParserStaticData->atn;
}

std::string HogQLParser::getGrammarFileName() const {
  return "HogQLParser.g4";
}

const std::vector<std::string>& HogQLParser::getRuleNames() const {
  return hogqlparserParserStaticData->ruleNames;
}

const dfa::Vocabulary& HogQLParser::getVocabulary() const {
  return hogqlparserParserStaticData->vocabulary;
}

antlr4::atn::SerializedATNView HogQLParser::getSerializedATN() const {
  return hogqlparserParserStaticData->serializedATN;
}


//----------------- SelectContext ------------------------------------------------------------------

HogQLParser::SelectContext::SelectContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::SelectContext::EOF() {
  return getToken(HogQLParser::EOF, 0);
}

HogQLParser::SelectUnionStmtContext* HogQLParser::SelectContext::selectUnionStmt() {
  return getRuleContext<HogQLParser::SelectUnionStmtContext>(0);
}

HogQLParser::SelectStmtContext* HogQLParser::SelectContext::selectStmt() {
  return getRuleContext<HogQLParser::SelectStmtContext>(0);
}


size_t HogQLParser::SelectContext::getRuleIndex() const {
  return HogQLParser::RuleSelect;
}


std::any HogQLParser::SelectContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitSelect(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::SelectContext* HogQLParser::select() {
  SelectContext *_localctx = _tracker.createInstance<SelectContext>(_ctx, getState());
  enterRule(_localctx, 0, HogQLParser::RuleSelect);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(120);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 0, _ctx)) {
    case 1: {
      setState(118);
      selectUnionStmt();
      break;
    }

    case 2: {
      setState(119);
      selectStmt();
      break;
    }

    default:
      break;
    }
    setState(122);
    match(HogQLParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SelectUnionStmtContext ------------------------------------------------------------------

HogQLParser::SelectUnionStmtContext::SelectUnionStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<HogQLParser::SelectStmtWithParensContext *> HogQLParser::SelectUnionStmtContext::selectStmtWithParens() {
  return getRuleContexts<HogQLParser::SelectStmtWithParensContext>();
}

HogQLParser::SelectStmtWithParensContext* HogQLParser::SelectUnionStmtContext::selectStmtWithParens(size_t i) {
  return getRuleContext<HogQLParser::SelectStmtWithParensContext>(i);
}

std::vector<tree::TerminalNode *> HogQLParser::SelectUnionStmtContext::UNION() {
  return getTokens(HogQLParser::UNION);
}

tree::TerminalNode* HogQLParser::SelectUnionStmtContext::UNION(size_t i) {
  return getToken(HogQLParser::UNION, i);
}

std::vector<tree::TerminalNode *> HogQLParser::SelectUnionStmtContext::ALL() {
  return getTokens(HogQLParser::ALL);
}

tree::TerminalNode* HogQLParser::SelectUnionStmtContext::ALL(size_t i) {
  return getToken(HogQLParser::ALL, i);
}


size_t HogQLParser::SelectUnionStmtContext::getRuleIndex() const {
  return HogQLParser::RuleSelectUnionStmt;
}


std::any HogQLParser::SelectUnionStmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitSelectUnionStmt(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::SelectUnionStmtContext* HogQLParser::selectUnionStmt() {
  SelectUnionStmtContext *_localctx = _tracker.createInstance<SelectUnionStmtContext>(_ctx, getState());
  enterRule(_localctx, 2, HogQLParser::RuleSelectUnionStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(124);
    selectStmtWithParens();
    setState(130);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == HogQLParser::UNION) {
      setState(125);
      match(HogQLParser::UNION);
      setState(126);
      match(HogQLParser::ALL);
      setState(127);
      selectStmtWithParens();
      setState(132);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SelectStmtWithParensContext ------------------------------------------------------------------

HogQLParser::SelectStmtWithParensContext::SelectStmtWithParensContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HogQLParser::SelectStmtContext* HogQLParser::SelectStmtWithParensContext::selectStmt() {
  return getRuleContext<HogQLParser::SelectStmtContext>(0);
}

tree::TerminalNode* HogQLParser::SelectStmtWithParensContext::LPAREN() {
  return getToken(HogQLParser::LPAREN, 0);
}

HogQLParser::SelectUnionStmtContext* HogQLParser::SelectStmtWithParensContext::selectUnionStmt() {
  return getRuleContext<HogQLParser::SelectUnionStmtContext>(0);
}

tree::TerminalNode* HogQLParser::SelectStmtWithParensContext::RPAREN() {
  return getToken(HogQLParser::RPAREN, 0);
}


size_t HogQLParser::SelectStmtWithParensContext::getRuleIndex() const {
  return HogQLParser::RuleSelectStmtWithParens;
}


std::any HogQLParser::SelectStmtWithParensContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitSelectStmtWithParens(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::SelectStmtWithParensContext* HogQLParser::selectStmtWithParens() {
  SelectStmtWithParensContext *_localctx = _tracker.createInstance<SelectStmtWithParensContext>(_ctx, getState());
  enterRule(_localctx, 4, HogQLParser::RuleSelectStmtWithParens);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(138);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case HogQLParser::SELECT:
      case HogQLParser::WITH: {
        enterOuterAlt(_localctx, 1);
        setState(133);
        selectStmt();
        break;
      }

      case HogQLParser::LPAREN: {
        enterOuterAlt(_localctx, 2);
        setState(134);
        match(HogQLParser::LPAREN);
        setState(135);
        selectUnionStmt();
        setState(136);
        match(HogQLParser::RPAREN);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SelectStmtContext ------------------------------------------------------------------

HogQLParser::SelectStmtContext::SelectStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::SelectStmtContext::SELECT() {
  return getToken(HogQLParser::SELECT, 0);
}

HogQLParser::ColumnExprListContext* HogQLParser::SelectStmtContext::columnExprList() {
  return getRuleContext<HogQLParser::ColumnExprListContext>(0);
}

tree::TerminalNode* HogQLParser::SelectStmtContext::DISTINCT() {
  return getToken(HogQLParser::DISTINCT, 0);
}

HogQLParser::TopClauseContext* HogQLParser::SelectStmtContext::topClause() {
  return getRuleContext<HogQLParser::TopClauseContext>(0);
}

HogQLParser::ArrayJoinClauseContext* HogQLParser::SelectStmtContext::arrayJoinClause() {
  return getRuleContext<HogQLParser::ArrayJoinClauseContext>(0);
}

HogQLParser::PrewhereClauseContext* HogQLParser::SelectStmtContext::prewhereClause() {
  return getRuleContext<HogQLParser::PrewhereClauseContext>(0);
}

HogQLParser::GroupByClauseContext* HogQLParser::SelectStmtContext::groupByClause() {
  return getRuleContext<HogQLParser::GroupByClauseContext>(0);
}

std::vector<tree::TerminalNode *> HogQLParser::SelectStmtContext::WITH() {
  return getTokens(HogQLParser::WITH);
}

tree::TerminalNode* HogQLParser::SelectStmtContext::WITH(size_t i) {
  return getToken(HogQLParser::WITH, i);
}

tree::TerminalNode* HogQLParser::SelectStmtContext::TOTALS() {
  return getToken(HogQLParser::TOTALS, 0);
}

HogQLParser::HavingClauseContext* HogQLParser::SelectStmtContext::havingClause() {
  return getRuleContext<HogQLParser::HavingClauseContext>(0);
}

HogQLParser::WindowClauseContext* HogQLParser::SelectStmtContext::windowClause() {
  return getRuleContext<HogQLParser::WindowClauseContext>(0);
}

HogQLParser::OrderByClauseContext* HogQLParser::SelectStmtContext::orderByClause() {
  return getRuleContext<HogQLParser::OrderByClauseContext>(0);
}

HogQLParser::LimitAndOffsetClauseContext* HogQLParser::SelectStmtContext::limitAndOffsetClause() {
  return getRuleContext<HogQLParser::LimitAndOffsetClauseContext>(0);
}

HogQLParser::OffsetOnlyClauseContext* HogQLParser::SelectStmtContext::offsetOnlyClause() {
  return getRuleContext<HogQLParser::OffsetOnlyClauseContext>(0);
}

HogQLParser::SettingsClauseContext* HogQLParser::SelectStmtContext::settingsClause() {
  return getRuleContext<HogQLParser::SettingsClauseContext>(0);
}

HogQLParser::WithClauseContext* HogQLParser::SelectStmtContext::withClause() {
  return getRuleContext<HogQLParser::WithClauseContext>(0);
}

HogQLParser::FromClauseContext* HogQLParser::SelectStmtContext::fromClause() {
  return getRuleContext<HogQLParser::FromClauseContext>(0);
}

HogQLParser::WhereClauseContext* HogQLParser::SelectStmtContext::whereClause() {
  return getRuleContext<HogQLParser::WhereClauseContext>(0);
}

tree::TerminalNode* HogQLParser::SelectStmtContext::CUBE() {
  return getToken(HogQLParser::CUBE, 0);
}

tree::TerminalNode* HogQLParser::SelectStmtContext::ROLLUP() {
  return getToken(HogQLParser::ROLLUP, 0);
}


size_t HogQLParser::SelectStmtContext::getRuleIndex() const {
  return HogQLParser::RuleSelectStmt;
}


std::any HogQLParser::SelectStmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitSelectStmt(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::SelectStmtContext* HogQLParser::selectStmt() {
  SelectStmtContext *_localctx = _tracker.createInstance<SelectStmtContext>(_ctx, getState());
  enterRule(_localctx, 6, HogQLParser::RuleSelectStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(141);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HogQLParser::WITH) {
      setState(140);
      antlrcpp::downCast<SelectStmtContext *>(_localctx)->with = withClause();
    }
    setState(143);
    match(HogQLParser::SELECT);
    setState(145);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 4, _ctx)) {
    case 1: {
      setState(144);
      match(HogQLParser::DISTINCT);
      break;
    }

    default:
      break;
    }
    setState(148);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 5, _ctx)) {
    case 1: {
      setState(147);
      topClause();
      break;
    }

    default:
      break;
    }
    setState(150);
    antlrcpp::downCast<SelectStmtContext *>(_localctx)->columns = columnExprList();
    setState(152);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HogQLParser::FROM) {
      setState(151);
      antlrcpp::downCast<SelectStmtContext *>(_localctx)->from = fromClause();
    }
    setState(155);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HogQLParser::ARRAY || _la == HogQLParser::INNER

    || _la == HogQLParser::LEFT) {
      setState(154);
      arrayJoinClause();
    }
    setState(158);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HogQLParser::PREWHERE) {
      setState(157);
      prewhereClause();
    }
    setState(161);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HogQLParser::WHERE) {
      setState(160);
      antlrcpp::downCast<SelectStmtContext *>(_localctx)->where = whereClause();
    }
    setState(164);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HogQLParser::GROUP) {
      setState(163);
      groupByClause();
    }
    setState(168);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 11, _ctx)) {
    case 1: {
      setState(166);
      match(HogQLParser::WITH);
      setState(167);
      _la = _input->LA(1);
      if (!(_la == HogQLParser::CUBE || _la == HogQLParser::ROLLUP)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    default:
      break;
    }
    setState(172);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HogQLParser::WITH) {
      setState(170);
      match(HogQLParser::WITH);
      setState(171);
      match(HogQLParser::TOTALS);
    }
    setState(175);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HogQLParser::HAVING) {
      setState(174);
      havingClause();
    }
    setState(178);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HogQLParser::WINDOW) {
      setState(177);
      windowClause();
    }
    setState(181);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HogQLParser::ORDER) {
      setState(180);
      orderByClause();
    }
    setState(185);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case HogQLParser::LIMIT: {
        setState(183);
        limitAndOffsetClause();
        break;
      }

      case HogQLParser::OFFSET: {
        setState(184);
        offsetOnlyClause();
        break;
      }

      case HogQLParser::EOF:
      case HogQLParser::SETTINGS:
      case HogQLParser::UNION:
      case HogQLParser::RPAREN: {
        break;
      }

    default:
      break;
    }
    setState(188);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HogQLParser::SETTINGS) {
      setState(187);
      settingsClause();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WithClauseContext ------------------------------------------------------------------

HogQLParser::WithClauseContext::WithClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::WithClauseContext::WITH() {
  return getToken(HogQLParser::WITH, 0);
}

HogQLParser::WithExprListContext* HogQLParser::WithClauseContext::withExprList() {
  return getRuleContext<HogQLParser::WithExprListContext>(0);
}


size_t HogQLParser::WithClauseContext::getRuleIndex() const {
  return HogQLParser::RuleWithClause;
}


std::any HogQLParser::WithClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitWithClause(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::WithClauseContext* HogQLParser::withClause() {
  WithClauseContext *_localctx = _tracker.createInstance<WithClauseContext>(_ctx, getState());
  enterRule(_localctx, 8, HogQLParser::RuleWithClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(190);
    match(HogQLParser::WITH);
    setState(191);
    withExprList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TopClauseContext ------------------------------------------------------------------

HogQLParser::TopClauseContext::TopClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::TopClauseContext::TOP() {
  return getToken(HogQLParser::TOP, 0);
}

tree::TerminalNode* HogQLParser::TopClauseContext::DECIMAL_LITERAL() {
  return getToken(HogQLParser::DECIMAL_LITERAL, 0);
}

tree::TerminalNode* HogQLParser::TopClauseContext::WITH() {
  return getToken(HogQLParser::WITH, 0);
}

tree::TerminalNode* HogQLParser::TopClauseContext::TIES() {
  return getToken(HogQLParser::TIES, 0);
}


size_t HogQLParser::TopClauseContext::getRuleIndex() const {
  return HogQLParser::RuleTopClause;
}


std::any HogQLParser::TopClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitTopClause(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::TopClauseContext* HogQLParser::topClause() {
  TopClauseContext *_localctx = _tracker.createInstance<TopClauseContext>(_ctx, getState());
  enterRule(_localctx, 10, HogQLParser::RuleTopClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(193);
    match(HogQLParser::TOP);
    setState(194);
    match(HogQLParser::DECIMAL_LITERAL);
    setState(197);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 18, _ctx)) {
    case 1: {
      setState(195);
      match(HogQLParser::WITH);
      setState(196);
      match(HogQLParser::TIES);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FromClauseContext ------------------------------------------------------------------

HogQLParser::FromClauseContext::FromClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::FromClauseContext::FROM() {
  return getToken(HogQLParser::FROM, 0);
}

HogQLParser::JoinExprContext* HogQLParser::FromClauseContext::joinExpr() {
  return getRuleContext<HogQLParser::JoinExprContext>(0);
}


size_t HogQLParser::FromClauseContext::getRuleIndex() const {
  return HogQLParser::RuleFromClause;
}


std::any HogQLParser::FromClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitFromClause(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::FromClauseContext* HogQLParser::fromClause() {
  FromClauseContext *_localctx = _tracker.createInstance<FromClauseContext>(_ctx, getState());
  enterRule(_localctx, 12, HogQLParser::RuleFromClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(199);
    match(HogQLParser::FROM);
    setState(200);
    joinExpr(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArrayJoinClauseContext ------------------------------------------------------------------

HogQLParser::ArrayJoinClauseContext::ArrayJoinClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::ArrayJoinClauseContext::ARRAY() {
  return getToken(HogQLParser::ARRAY, 0);
}

tree::TerminalNode* HogQLParser::ArrayJoinClauseContext::JOIN() {
  return getToken(HogQLParser::JOIN, 0);
}

HogQLParser::ColumnExprListContext* HogQLParser::ArrayJoinClauseContext::columnExprList() {
  return getRuleContext<HogQLParser::ColumnExprListContext>(0);
}

tree::TerminalNode* HogQLParser::ArrayJoinClauseContext::LEFT() {
  return getToken(HogQLParser::LEFT, 0);
}

tree::TerminalNode* HogQLParser::ArrayJoinClauseContext::INNER() {
  return getToken(HogQLParser::INNER, 0);
}


size_t HogQLParser::ArrayJoinClauseContext::getRuleIndex() const {
  return HogQLParser::RuleArrayJoinClause;
}


std::any HogQLParser::ArrayJoinClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitArrayJoinClause(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::ArrayJoinClauseContext* HogQLParser::arrayJoinClause() {
  ArrayJoinClauseContext *_localctx = _tracker.createInstance<ArrayJoinClauseContext>(_ctx, getState());
  enterRule(_localctx, 14, HogQLParser::RuleArrayJoinClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(203);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HogQLParser::INNER

    || _la == HogQLParser::LEFT) {
      setState(202);
      _la = _input->LA(1);
      if (!(_la == HogQLParser::INNER

      || _la == HogQLParser::LEFT)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(205);
    match(HogQLParser::ARRAY);
    setState(206);
    match(HogQLParser::JOIN);
    setState(207);
    columnExprList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WindowClauseContext ------------------------------------------------------------------

HogQLParser::WindowClauseContext::WindowClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::WindowClauseContext::WINDOW() {
  return getToken(HogQLParser::WINDOW, 0);
}

std::vector<HogQLParser::IdentifierContext *> HogQLParser::WindowClauseContext::identifier() {
  return getRuleContexts<HogQLParser::IdentifierContext>();
}

HogQLParser::IdentifierContext* HogQLParser::WindowClauseContext::identifier(size_t i) {
  return getRuleContext<HogQLParser::IdentifierContext>(i);
}

std::vector<tree::TerminalNode *> HogQLParser::WindowClauseContext::AS() {
  return getTokens(HogQLParser::AS);
}

tree::TerminalNode* HogQLParser::WindowClauseContext::AS(size_t i) {
  return getToken(HogQLParser::AS, i);
}

std::vector<tree::TerminalNode *> HogQLParser::WindowClauseContext::LPAREN() {
  return getTokens(HogQLParser::LPAREN);
}

tree::TerminalNode* HogQLParser::WindowClauseContext::LPAREN(size_t i) {
  return getToken(HogQLParser::LPAREN, i);
}

std::vector<HogQLParser::WindowExprContext *> HogQLParser::WindowClauseContext::windowExpr() {
  return getRuleContexts<HogQLParser::WindowExprContext>();
}

HogQLParser::WindowExprContext* HogQLParser::WindowClauseContext::windowExpr(size_t i) {
  return getRuleContext<HogQLParser::WindowExprContext>(i);
}

std::vector<tree::TerminalNode *> HogQLParser::WindowClauseContext::RPAREN() {
  return getTokens(HogQLParser::RPAREN);
}

tree::TerminalNode* HogQLParser::WindowClauseContext::RPAREN(size_t i) {
  return getToken(HogQLParser::RPAREN, i);
}

std::vector<tree::TerminalNode *> HogQLParser::WindowClauseContext::COMMA() {
  return getTokens(HogQLParser::COMMA);
}

tree::TerminalNode* HogQLParser::WindowClauseContext::COMMA(size_t i) {
  return getToken(HogQLParser::COMMA, i);
}


size_t HogQLParser::WindowClauseContext::getRuleIndex() const {
  return HogQLParser::RuleWindowClause;
}


std::any HogQLParser::WindowClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitWindowClause(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::WindowClauseContext* HogQLParser::windowClause() {
  WindowClauseContext *_localctx = _tracker.createInstance<WindowClauseContext>(_ctx, getState());
  enterRule(_localctx, 16, HogQLParser::RuleWindowClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(209);
    match(HogQLParser::WINDOW);
    setState(210);
    identifier();
    setState(211);
    match(HogQLParser::AS);
    setState(212);
    match(HogQLParser::LPAREN);
    setState(213);
    windowExpr();
    setState(214);
    match(HogQLParser::RPAREN);
    setState(224);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == HogQLParser::COMMA) {
      setState(215);
      match(HogQLParser::COMMA);
      setState(216);
      identifier();
      setState(217);
      match(HogQLParser::AS);
      setState(218);
      match(HogQLParser::LPAREN);
      setState(219);
      windowExpr();
      setState(220);
      match(HogQLParser::RPAREN);
      setState(226);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PrewhereClauseContext ------------------------------------------------------------------

HogQLParser::PrewhereClauseContext::PrewhereClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::PrewhereClauseContext::PREWHERE() {
  return getToken(HogQLParser::PREWHERE, 0);
}

HogQLParser::ColumnExprContext* HogQLParser::PrewhereClauseContext::columnExpr() {
  return getRuleContext<HogQLParser::ColumnExprContext>(0);
}


size_t HogQLParser::PrewhereClauseContext::getRuleIndex() const {
  return HogQLParser::RulePrewhereClause;
}


std::any HogQLParser::PrewhereClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitPrewhereClause(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::PrewhereClauseContext* HogQLParser::prewhereClause() {
  PrewhereClauseContext *_localctx = _tracker.createInstance<PrewhereClauseContext>(_ctx, getState());
  enterRule(_localctx, 18, HogQLParser::RulePrewhereClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(227);
    match(HogQLParser::PREWHERE);
    setState(228);
    columnExpr(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WhereClauseContext ------------------------------------------------------------------

HogQLParser::WhereClauseContext::WhereClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::WhereClauseContext::WHERE() {
  return getToken(HogQLParser::WHERE, 0);
}

HogQLParser::ColumnExprContext* HogQLParser::WhereClauseContext::columnExpr() {
  return getRuleContext<HogQLParser::ColumnExprContext>(0);
}


size_t HogQLParser::WhereClauseContext::getRuleIndex() const {
  return HogQLParser::RuleWhereClause;
}


std::any HogQLParser::WhereClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitWhereClause(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::WhereClauseContext* HogQLParser::whereClause() {
  WhereClauseContext *_localctx = _tracker.createInstance<WhereClauseContext>(_ctx, getState());
  enterRule(_localctx, 20, HogQLParser::RuleWhereClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(230);
    match(HogQLParser::WHERE);
    setState(231);
    columnExpr(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GroupByClauseContext ------------------------------------------------------------------

HogQLParser::GroupByClauseContext::GroupByClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::GroupByClauseContext::GROUP() {
  return getToken(HogQLParser::GROUP, 0);
}

tree::TerminalNode* HogQLParser::GroupByClauseContext::BY() {
  return getToken(HogQLParser::BY, 0);
}

tree::TerminalNode* HogQLParser::GroupByClauseContext::LPAREN() {
  return getToken(HogQLParser::LPAREN, 0);
}

HogQLParser::ColumnExprListContext* HogQLParser::GroupByClauseContext::columnExprList() {
  return getRuleContext<HogQLParser::ColumnExprListContext>(0);
}

tree::TerminalNode* HogQLParser::GroupByClauseContext::RPAREN() {
  return getToken(HogQLParser::RPAREN, 0);
}

tree::TerminalNode* HogQLParser::GroupByClauseContext::CUBE() {
  return getToken(HogQLParser::CUBE, 0);
}

tree::TerminalNode* HogQLParser::GroupByClauseContext::ROLLUP() {
  return getToken(HogQLParser::ROLLUP, 0);
}


size_t HogQLParser::GroupByClauseContext::getRuleIndex() const {
  return HogQLParser::RuleGroupByClause;
}


std::any HogQLParser::GroupByClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitGroupByClause(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::GroupByClauseContext* HogQLParser::groupByClause() {
  GroupByClauseContext *_localctx = _tracker.createInstance<GroupByClauseContext>(_ctx, getState());
  enterRule(_localctx, 22, HogQLParser::RuleGroupByClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(233);
    match(HogQLParser::GROUP);
    setState(234);
    match(HogQLParser::BY);
    setState(241);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 21, _ctx)) {
    case 1: {
      setState(235);
      _la = _input->LA(1);
      if (!(_la == HogQLParser::CUBE || _la == HogQLParser::ROLLUP)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(236);
      match(HogQLParser::LPAREN);
      setState(237);
      columnExprList();
      setState(238);
      match(HogQLParser::RPAREN);
      break;
    }

    case 2: {
      setState(240);
      columnExprList();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- HavingClauseContext ------------------------------------------------------------------

HogQLParser::HavingClauseContext::HavingClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::HavingClauseContext::HAVING() {
  return getToken(HogQLParser::HAVING, 0);
}

HogQLParser::ColumnExprContext* HogQLParser::HavingClauseContext::columnExpr() {
  return getRuleContext<HogQLParser::ColumnExprContext>(0);
}


size_t HogQLParser::HavingClauseContext::getRuleIndex() const {
  return HogQLParser::RuleHavingClause;
}


std::any HogQLParser::HavingClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitHavingClause(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::HavingClauseContext* HogQLParser::havingClause() {
  HavingClauseContext *_localctx = _tracker.createInstance<HavingClauseContext>(_ctx, getState());
  enterRule(_localctx, 24, HogQLParser::RuleHavingClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(243);
    match(HogQLParser::HAVING);
    setState(244);
    columnExpr(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OrderByClauseContext ------------------------------------------------------------------

HogQLParser::OrderByClauseContext::OrderByClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::OrderByClauseContext::ORDER() {
  return getToken(HogQLParser::ORDER, 0);
}

tree::TerminalNode* HogQLParser::OrderByClauseContext::BY() {
  return getToken(HogQLParser::BY, 0);
}

HogQLParser::OrderExprListContext* HogQLParser::OrderByClauseContext::orderExprList() {
  return getRuleContext<HogQLParser::OrderExprListContext>(0);
}


size_t HogQLParser::OrderByClauseContext::getRuleIndex() const {
  return HogQLParser::RuleOrderByClause;
}


std::any HogQLParser::OrderByClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitOrderByClause(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::OrderByClauseContext* HogQLParser::orderByClause() {
  OrderByClauseContext *_localctx = _tracker.createInstance<OrderByClauseContext>(_ctx, getState());
  enterRule(_localctx, 26, HogQLParser::RuleOrderByClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(246);
    match(HogQLParser::ORDER);
    setState(247);
    match(HogQLParser::BY);
    setState(248);
    orderExprList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ProjectionOrderByClauseContext ------------------------------------------------------------------

HogQLParser::ProjectionOrderByClauseContext::ProjectionOrderByClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::ProjectionOrderByClauseContext::ORDER() {
  return getToken(HogQLParser::ORDER, 0);
}

tree::TerminalNode* HogQLParser::ProjectionOrderByClauseContext::BY() {
  return getToken(HogQLParser::BY, 0);
}

HogQLParser::ColumnExprListContext* HogQLParser::ProjectionOrderByClauseContext::columnExprList() {
  return getRuleContext<HogQLParser::ColumnExprListContext>(0);
}


size_t HogQLParser::ProjectionOrderByClauseContext::getRuleIndex() const {
  return HogQLParser::RuleProjectionOrderByClause;
}


std::any HogQLParser::ProjectionOrderByClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitProjectionOrderByClause(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::ProjectionOrderByClauseContext* HogQLParser::projectionOrderByClause() {
  ProjectionOrderByClauseContext *_localctx = _tracker.createInstance<ProjectionOrderByClauseContext>(_ctx, getState());
  enterRule(_localctx, 28, HogQLParser::RuleProjectionOrderByClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(250);
    match(HogQLParser::ORDER);
    setState(251);
    match(HogQLParser::BY);
    setState(252);
    columnExprList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LimitAndOffsetClauseContext ------------------------------------------------------------------

HogQLParser::LimitAndOffsetClauseContext::LimitAndOffsetClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::LimitAndOffsetClauseContext::LIMIT() {
  return getToken(HogQLParser::LIMIT, 0);
}

std::vector<HogQLParser::ColumnExprContext *> HogQLParser::LimitAndOffsetClauseContext::columnExpr() {
  return getRuleContexts<HogQLParser::ColumnExprContext>();
}

HogQLParser::ColumnExprContext* HogQLParser::LimitAndOffsetClauseContext::columnExpr(size_t i) {
  return getRuleContext<HogQLParser::ColumnExprContext>(i);
}

tree::TerminalNode* HogQLParser::LimitAndOffsetClauseContext::COMMA() {
  return getToken(HogQLParser::COMMA, 0);
}

tree::TerminalNode* HogQLParser::LimitAndOffsetClauseContext::BY() {
  return getToken(HogQLParser::BY, 0);
}

HogQLParser::ColumnExprListContext* HogQLParser::LimitAndOffsetClauseContext::columnExprList() {
  return getRuleContext<HogQLParser::ColumnExprListContext>(0);
}

tree::TerminalNode* HogQLParser::LimitAndOffsetClauseContext::WITH() {
  return getToken(HogQLParser::WITH, 0);
}

tree::TerminalNode* HogQLParser::LimitAndOffsetClauseContext::TIES() {
  return getToken(HogQLParser::TIES, 0);
}

tree::TerminalNode* HogQLParser::LimitAndOffsetClauseContext::OFFSET() {
  return getToken(HogQLParser::OFFSET, 0);
}


size_t HogQLParser::LimitAndOffsetClauseContext::getRuleIndex() const {
  return HogQLParser::RuleLimitAndOffsetClause;
}


std::any HogQLParser::LimitAndOffsetClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitLimitAndOffsetClause(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::LimitAndOffsetClauseContext* HogQLParser::limitAndOffsetClause() {
  LimitAndOffsetClauseContext *_localctx = _tracker.createInstance<LimitAndOffsetClauseContext>(_ctx, getState());
  enterRule(_localctx, 30, HogQLParser::RuleLimitAndOffsetClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(283);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 26, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(254);
      match(HogQLParser::LIMIT);
      setState(255);
      columnExpr(0);
      setState(258);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == HogQLParser::COMMA) {
        setState(256);
        match(HogQLParser::COMMA);
        setState(257);
        columnExpr(0);
      }
      setState(264);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case HogQLParser::WITH: {
          setState(260);
          match(HogQLParser::WITH);
          setState(261);
          match(HogQLParser::TIES);
          break;
        }

        case HogQLParser::BY: {
          setState(262);
          match(HogQLParser::BY);
          setState(263);
          columnExprList();
          break;
        }

        case HogQLParser::EOF:
        case HogQLParser::SETTINGS:
        case HogQLParser::UNION:
        case HogQLParser::RPAREN: {
          break;
        }

      default:
        break;
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(266);
      match(HogQLParser::LIMIT);
      setState(267);
      columnExpr(0);
      setState(270);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == HogQLParser::WITH) {
        setState(268);
        match(HogQLParser::WITH);
        setState(269);
        match(HogQLParser::TIES);
      }
      setState(272);
      match(HogQLParser::OFFSET);
      setState(273);
      columnExpr(0);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(275);
      match(HogQLParser::LIMIT);
      setState(276);
      columnExpr(0);
      setState(277);
      match(HogQLParser::OFFSET);
      setState(278);
      columnExpr(0);
      setState(281);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == HogQLParser::BY) {
        setState(279);
        match(HogQLParser::BY);
        setState(280);
        columnExprList();
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OffsetOnlyClauseContext ------------------------------------------------------------------

HogQLParser::OffsetOnlyClauseContext::OffsetOnlyClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::OffsetOnlyClauseContext::OFFSET() {
  return getToken(HogQLParser::OFFSET, 0);
}

HogQLParser::ColumnExprContext* HogQLParser::OffsetOnlyClauseContext::columnExpr() {
  return getRuleContext<HogQLParser::ColumnExprContext>(0);
}


size_t HogQLParser::OffsetOnlyClauseContext::getRuleIndex() const {
  return HogQLParser::RuleOffsetOnlyClause;
}


std::any HogQLParser::OffsetOnlyClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitOffsetOnlyClause(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::OffsetOnlyClauseContext* HogQLParser::offsetOnlyClause() {
  OffsetOnlyClauseContext *_localctx = _tracker.createInstance<OffsetOnlyClauseContext>(_ctx, getState());
  enterRule(_localctx, 32, HogQLParser::RuleOffsetOnlyClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(285);
    match(HogQLParser::OFFSET);
    setState(286);
    columnExpr(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SettingsClauseContext ------------------------------------------------------------------

HogQLParser::SettingsClauseContext::SettingsClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::SettingsClauseContext::SETTINGS() {
  return getToken(HogQLParser::SETTINGS, 0);
}

HogQLParser::SettingExprListContext* HogQLParser::SettingsClauseContext::settingExprList() {
  return getRuleContext<HogQLParser::SettingExprListContext>(0);
}


size_t HogQLParser::SettingsClauseContext::getRuleIndex() const {
  return HogQLParser::RuleSettingsClause;
}


std::any HogQLParser::SettingsClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitSettingsClause(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::SettingsClauseContext* HogQLParser::settingsClause() {
  SettingsClauseContext *_localctx = _tracker.createInstance<SettingsClauseContext>(_ctx, getState());
  enterRule(_localctx, 34, HogQLParser::RuleSettingsClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(288);
    match(HogQLParser::SETTINGS);
    setState(289);
    settingExprList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- JoinExprContext ------------------------------------------------------------------

HogQLParser::JoinExprContext::JoinExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t HogQLParser::JoinExprContext::getRuleIndex() const {
  return HogQLParser::RuleJoinExpr;
}

void HogQLParser::JoinExprContext::copyFrom(JoinExprContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- JoinExprOpContext ------------------------------------------------------------------

std::vector<HogQLParser::JoinExprContext *> HogQLParser::JoinExprOpContext::joinExpr() {
  return getRuleContexts<HogQLParser::JoinExprContext>();
}

HogQLParser::JoinExprContext* HogQLParser::JoinExprOpContext::joinExpr(size_t i) {
  return getRuleContext<HogQLParser::JoinExprContext>(i);
}

tree::TerminalNode* HogQLParser::JoinExprOpContext::JOIN() {
  return getToken(HogQLParser::JOIN, 0);
}

HogQLParser::JoinConstraintClauseContext* HogQLParser::JoinExprOpContext::joinConstraintClause() {
  return getRuleContext<HogQLParser::JoinConstraintClauseContext>(0);
}

HogQLParser::JoinOpContext* HogQLParser::JoinExprOpContext::joinOp() {
  return getRuleContext<HogQLParser::JoinOpContext>(0);
}

HogQLParser::JoinExprOpContext::JoinExprOpContext(JoinExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::JoinExprOpContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitJoinExprOp(this);
  else
    return visitor->visitChildren(this);
}
//----------------- JoinExprTableContext ------------------------------------------------------------------

HogQLParser::TableExprContext* HogQLParser::JoinExprTableContext::tableExpr() {
  return getRuleContext<HogQLParser::TableExprContext>(0);
}

tree::TerminalNode* HogQLParser::JoinExprTableContext::FINAL() {
  return getToken(HogQLParser::FINAL, 0);
}

HogQLParser::SampleClauseContext* HogQLParser::JoinExprTableContext::sampleClause() {
  return getRuleContext<HogQLParser::SampleClauseContext>(0);
}

HogQLParser::JoinExprTableContext::JoinExprTableContext(JoinExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::JoinExprTableContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitJoinExprTable(this);
  else
    return visitor->visitChildren(this);
}
//----------------- JoinExprParensContext ------------------------------------------------------------------

tree::TerminalNode* HogQLParser::JoinExprParensContext::LPAREN() {
  return getToken(HogQLParser::LPAREN, 0);
}

HogQLParser::JoinExprContext* HogQLParser::JoinExprParensContext::joinExpr() {
  return getRuleContext<HogQLParser::JoinExprContext>(0);
}

tree::TerminalNode* HogQLParser::JoinExprParensContext::RPAREN() {
  return getToken(HogQLParser::RPAREN, 0);
}

HogQLParser::JoinExprParensContext::JoinExprParensContext(JoinExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::JoinExprParensContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitJoinExprParens(this);
  else
    return visitor->visitChildren(this);
}
//----------------- JoinExprCrossOpContext ------------------------------------------------------------------

std::vector<HogQLParser::JoinExprContext *> HogQLParser::JoinExprCrossOpContext::joinExpr() {
  return getRuleContexts<HogQLParser::JoinExprContext>();
}

HogQLParser::JoinExprContext* HogQLParser::JoinExprCrossOpContext::joinExpr(size_t i) {
  return getRuleContext<HogQLParser::JoinExprContext>(i);
}

HogQLParser::JoinOpCrossContext* HogQLParser::JoinExprCrossOpContext::joinOpCross() {
  return getRuleContext<HogQLParser::JoinOpCrossContext>(0);
}

HogQLParser::JoinExprCrossOpContext::JoinExprCrossOpContext(JoinExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::JoinExprCrossOpContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitJoinExprCrossOp(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::JoinExprContext* HogQLParser::joinExpr() {
   return joinExpr(0);
}

HogQLParser::JoinExprContext* HogQLParser::joinExpr(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  HogQLParser::JoinExprContext *_localctx = _tracker.createInstance<JoinExprContext>(_ctx, parentState);
  HogQLParser::JoinExprContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 36;
  enterRecursionRule(_localctx, 36, HogQLParser::RuleJoinExpr, precedence);

    size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(303);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 29, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<JoinExprTableContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;

      setState(292);
      tableExpr(0);
      setState(294);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 27, _ctx)) {
      case 1: {
        setState(293);
        match(HogQLParser::FINAL);
        break;
      }

      default:
        break;
      }
      setState(297);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 28, _ctx)) {
      case 1: {
        setState(296);
        sampleClause();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<JoinExprParensContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(299);
      match(HogQLParser::LPAREN);
      setState(300);
      joinExpr(0);
      setState(301);
      match(HogQLParser::RPAREN);
      break;
    }

    default:
      break;
    }
    _ctx->stop = _input->LT(-1);
    setState(319);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 32, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(317);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 31, _ctx)) {
        case 1: {
          auto newContext = _tracker.createInstance<JoinExprCrossOpContext>(_tracker.createInstance<JoinExprContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleJoinExpr);
          setState(305);

          if (!(precpred(_ctx, 3))) throw FailedPredicateException(this, "precpred(_ctx, 3)");
          setState(306);
          joinOpCross();
          setState(307);
          joinExpr(4);
          break;
        }

        case 2: {
          auto newContext = _tracker.createInstance<JoinExprOpContext>(_tracker.createInstance<JoinExprContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleJoinExpr);
          setState(309);

          if (!(precpred(_ctx, 4))) throw FailedPredicateException(this, "precpred(_ctx, 4)");
          setState(311);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if ((((_la & ~ 0x3fULL) == 0) &&
            ((1ULL << _la) & 4496) != 0) || ((((_la - 69) & ~ 0x3fULL) == 0) &&
            ((1ULL << (_la - 69)) & 134250497) != 0) || _la == HogQLParser::RIGHT

          || _la == HogQLParser::SEMI) {
            setState(310);
            joinOp();
          }
          setState(313);
          match(HogQLParser::JOIN);
          setState(314);
          joinExpr(0);
          setState(315);
          joinConstraintClause();
          break;
        }

        default:
          break;
        } 
      }
      setState(321);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 32, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- JoinOpContext ------------------------------------------------------------------

HogQLParser::JoinOpContext::JoinOpContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t HogQLParser::JoinOpContext::getRuleIndex() const {
  return HogQLParser::RuleJoinOp;
}

void HogQLParser::JoinOpContext::copyFrom(JoinOpContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- JoinOpFullContext ------------------------------------------------------------------

tree::TerminalNode* HogQLParser::JoinOpFullContext::FULL() {
  return getToken(HogQLParser::FULL, 0);
}

tree::TerminalNode* HogQLParser::JoinOpFullContext::OUTER() {
  return getToken(HogQLParser::OUTER, 0);
}

tree::TerminalNode* HogQLParser::JoinOpFullContext::ALL() {
  return getToken(HogQLParser::ALL, 0);
}

tree::TerminalNode* HogQLParser::JoinOpFullContext::ANY() {
  return getToken(HogQLParser::ANY, 0);
}

HogQLParser::JoinOpFullContext::JoinOpFullContext(JoinOpContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::JoinOpFullContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitJoinOpFull(this);
  else
    return visitor->visitChildren(this);
}
//----------------- JoinOpInnerContext ------------------------------------------------------------------

tree::TerminalNode* HogQLParser::JoinOpInnerContext::INNER() {
  return getToken(HogQLParser::INNER, 0);
}

tree::TerminalNode* HogQLParser::JoinOpInnerContext::ALL() {
  return getToken(HogQLParser::ALL, 0);
}

tree::TerminalNode* HogQLParser::JoinOpInnerContext::ANY() {
  return getToken(HogQLParser::ANY, 0);
}

tree::TerminalNode* HogQLParser::JoinOpInnerContext::ASOF() {
  return getToken(HogQLParser::ASOF, 0);
}

HogQLParser::JoinOpInnerContext::JoinOpInnerContext(JoinOpContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::JoinOpInnerContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitJoinOpInner(this);
  else
    return visitor->visitChildren(this);
}
//----------------- JoinOpLeftRightContext ------------------------------------------------------------------

tree::TerminalNode* HogQLParser::JoinOpLeftRightContext::LEFT() {
  return getToken(HogQLParser::LEFT, 0);
}

tree::TerminalNode* HogQLParser::JoinOpLeftRightContext::RIGHT() {
  return getToken(HogQLParser::RIGHT, 0);
}

tree::TerminalNode* HogQLParser::JoinOpLeftRightContext::OUTER() {
  return getToken(HogQLParser::OUTER, 0);
}

tree::TerminalNode* HogQLParser::JoinOpLeftRightContext::SEMI() {
  return getToken(HogQLParser::SEMI, 0);
}

tree::TerminalNode* HogQLParser::JoinOpLeftRightContext::ALL() {
  return getToken(HogQLParser::ALL, 0);
}

tree::TerminalNode* HogQLParser::JoinOpLeftRightContext::ANTI() {
  return getToken(HogQLParser::ANTI, 0);
}

tree::TerminalNode* HogQLParser::JoinOpLeftRightContext::ANY() {
  return getToken(HogQLParser::ANY, 0);
}

tree::TerminalNode* HogQLParser::JoinOpLeftRightContext::ASOF() {
  return getToken(HogQLParser::ASOF, 0);
}

HogQLParser::JoinOpLeftRightContext::JoinOpLeftRightContext(JoinOpContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::JoinOpLeftRightContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitJoinOpLeftRight(this);
  else
    return visitor->visitChildren(this);
}
HogQLParser::JoinOpContext* HogQLParser::joinOp() {
  JoinOpContext *_localctx = _tracker.createInstance<JoinOpContext>(_ctx, getState());
  enterRule(_localctx, 38, HogQLParser::RuleJoinOp);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(365);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 46, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<HogQLParser::JoinOpInnerContext>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(331);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 35, _ctx)) {
      case 1: {
        setState(323);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 4368) != 0)) {
          setState(322);
          _la = _input->LA(1);
          if (!((((_la & ~ 0x3fULL) == 0) &&
            ((1ULL << _la) & 4368) != 0))) {
          _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
        }
        setState(325);
        match(HogQLParser::INNER);
        break;
      }

      case 2: {
        setState(326);
        match(HogQLParser::INNER);
        setState(328);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 4368) != 0)) {
          setState(327);
          _la = _input->LA(1);
          if (!((((_la & ~ 0x3fULL) == 0) &&
            ((1ULL << _la) & 4368) != 0))) {
          _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
        }
        break;
      }

      case 3: {
        setState(330);
        _la = _input->LA(1);
        if (!((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 4368) != 0))) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

      default:
        break;
      }
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<HogQLParser::JoinOpLeftRightContext>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(347);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 40, _ctx)) {
      case 1: {
        setState(334);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 4496) != 0) || _la == HogQLParser::SEMI) {
          setState(333);
          _la = _input->LA(1);
          if (!((((_la & ~ 0x3fULL) == 0) &&
            ((1ULL << _la) & 4496) != 0) || _la == HogQLParser::SEMI)) {
          _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
        }
        setState(336);
        _la = _input->LA(1);
        if (!(_la == HogQLParser::LEFT

        || _la == HogQLParser::RIGHT)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(338);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == HogQLParser::OUTER) {
          setState(337);
          match(HogQLParser::OUTER);
        }
        break;
      }

      case 2: {
        setState(340);
        _la = _input->LA(1);
        if (!(_la == HogQLParser::LEFT

        || _la == HogQLParser::RIGHT)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(342);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == HogQLParser::OUTER) {
          setState(341);
          match(HogQLParser::OUTER);
        }
        setState(345);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 4496) != 0) || _la == HogQLParser::SEMI) {
          setState(344);
          _la = _input->LA(1);
          if (!((((_la & ~ 0x3fULL) == 0) &&
            ((1ULL << _la) & 4496) != 0) || _la == HogQLParser::SEMI)) {
          _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
        }
        break;
      }

      default:
        break;
      }
      break;
    }

    case 3: {
      _localctx = _tracker.createInstance<HogQLParser::JoinOpFullContext>(_localctx);
      enterOuterAlt(_localctx, 3);
      setState(363);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 45, _ctx)) {
      case 1: {
        setState(350);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == HogQLParser::ALL

        || _la == HogQLParser::ANY) {
          setState(349);
          _la = _input->LA(1);
          if (!(_la == HogQLParser::ALL

          || _la == HogQLParser::ANY)) {
          _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
        }
        setState(352);
        match(HogQLParser::FULL);
        setState(354);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == HogQLParser::OUTER) {
          setState(353);
          match(HogQLParser::OUTER);
        }
        break;
      }

      case 2: {
        setState(356);
        match(HogQLParser::FULL);
        setState(358);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == HogQLParser::OUTER) {
          setState(357);
          match(HogQLParser::OUTER);
        }
        setState(361);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == HogQLParser::ALL

        || _la == HogQLParser::ANY) {
          setState(360);
          _la = _input->LA(1);
          if (!(_la == HogQLParser::ALL

          || _la == HogQLParser::ANY)) {
          _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
        }
        break;
      }

      default:
        break;
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- JoinOpCrossContext ------------------------------------------------------------------

HogQLParser::JoinOpCrossContext::JoinOpCrossContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::JoinOpCrossContext::CROSS() {
  return getToken(HogQLParser::CROSS, 0);
}

tree::TerminalNode* HogQLParser::JoinOpCrossContext::JOIN() {
  return getToken(HogQLParser::JOIN, 0);
}

tree::TerminalNode* HogQLParser::JoinOpCrossContext::COMMA() {
  return getToken(HogQLParser::COMMA, 0);
}


size_t HogQLParser::JoinOpCrossContext::getRuleIndex() const {
  return HogQLParser::RuleJoinOpCross;
}


std::any HogQLParser::JoinOpCrossContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitJoinOpCross(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::JoinOpCrossContext* HogQLParser::joinOpCross() {
  JoinOpCrossContext *_localctx = _tracker.createInstance<JoinOpCrossContext>(_ctx, getState());
  enterRule(_localctx, 40, HogQLParser::RuleJoinOpCross);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(370);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case HogQLParser::CROSS: {
        enterOuterAlt(_localctx, 1);
        setState(367);
        match(HogQLParser::CROSS);
        setState(368);
        match(HogQLParser::JOIN);
        break;
      }

      case HogQLParser::COMMA: {
        enterOuterAlt(_localctx, 2);
        setState(369);
        match(HogQLParser::COMMA);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- JoinConstraintClauseContext ------------------------------------------------------------------

HogQLParser::JoinConstraintClauseContext::JoinConstraintClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::JoinConstraintClauseContext::ON() {
  return getToken(HogQLParser::ON, 0);
}

HogQLParser::ColumnExprListContext* HogQLParser::JoinConstraintClauseContext::columnExprList() {
  return getRuleContext<HogQLParser::ColumnExprListContext>(0);
}

tree::TerminalNode* HogQLParser::JoinConstraintClauseContext::USING() {
  return getToken(HogQLParser::USING, 0);
}

tree::TerminalNode* HogQLParser::JoinConstraintClauseContext::LPAREN() {
  return getToken(HogQLParser::LPAREN, 0);
}

tree::TerminalNode* HogQLParser::JoinConstraintClauseContext::RPAREN() {
  return getToken(HogQLParser::RPAREN, 0);
}


size_t HogQLParser::JoinConstraintClauseContext::getRuleIndex() const {
  return HogQLParser::RuleJoinConstraintClause;
}


std::any HogQLParser::JoinConstraintClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitJoinConstraintClause(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::JoinConstraintClauseContext* HogQLParser::joinConstraintClause() {
  JoinConstraintClauseContext *_localctx = _tracker.createInstance<JoinConstraintClauseContext>(_ctx, getState());
  enterRule(_localctx, 42, HogQLParser::RuleJoinConstraintClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(381);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 48, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(372);
      match(HogQLParser::ON);
      setState(373);
      columnExprList();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(374);
      match(HogQLParser::USING);
      setState(375);
      match(HogQLParser::LPAREN);
      setState(376);
      columnExprList();
      setState(377);
      match(HogQLParser::RPAREN);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(379);
      match(HogQLParser::USING);
      setState(380);
      columnExprList();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SampleClauseContext ------------------------------------------------------------------

HogQLParser::SampleClauseContext::SampleClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::SampleClauseContext::SAMPLE() {
  return getToken(HogQLParser::SAMPLE, 0);
}

std::vector<HogQLParser::RatioExprContext *> HogQLParser::SampleClauseContext::ratioExpr() {
  return getRuleContexts<HogQLParser::RatioExprContext>();
}

HogQLParser::RatioExprContext* HogQLParser::SampleClauseContext::ratioExpr(size_t i) {
  return getRuleContext<HogQLParser::RatioExprContext>(i);
}

tree::TerminalNode* HogQLParser::SampleClauseContext::OFFSET() {
  return getToken(HogQLParser::OFFSET, 0);
}


size_t HogQLParser::SampleClauseContext::getRuleIndex() const {
  return HogQLParser::RuleSampleClause;
}


std::any HogQLParser::SampleClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitSampleClause(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::SampleClauseContext* HogQLParser::sampleClause() {
  SampleClauseContext *_localctx = _tracker.createInstance<SampleClauseContext>(_ctx, getState());
  enterRule(_localctx, 44, HogQLParser::RuleSampleClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(383);
    match(HogQLParser::SAMPLE);
    setState(384);
    ratioExpr();
    setState(387);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 49, _ctx)) {
    case 1: {
      setState(385);
      match(HogQLParser::OFFSET);
      setState(386);
      ratioExpr();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OrderExprListContext ------------------------------------------------------------------

HogQLParser::OrderExprListContext::OrderExprListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<HogQLParser::OrderExprContext *> HogQLParser::OrderExprListContext::orderExpr() {
  return getRuleContexts<HogQLParser::OrderExprContext>();
}

HogQLParser::OrderExprContext* HogQLParser::OrderExprListContext::orderExpr(size_t i) {
  return getRuleContext<HogQLParser::OrderExprContext>(i);
}

std::vector<tree::TerminalNode *> HogQLParser::OrderExprListContext::COMMA() {
  return getTokens(HogQLParser::COMMA);
}

tree::TerminalNode* HogQLParser::OrderExprListContext::COMMA(size_t i) {
  return getToken(HogQLParser::COMMA, i);
}


size_t HogQLParser::OrderExprListContext::getRuleIndex() const {
  return HogQLParser::RuleOrderExprList;
}


std::any HogQLParser::OrderExprListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitOrderExprList(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::OrderExprListContext* HogQLParser::orderExprList() {
  OrderExprListContext *_localctx = _tracker.createInstance<OrderExprListContext>(_ctx, getState());
  enterRule(_localctx, 46, HogQLParser::RuleOrderExprList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(389);
    orderExpr();
    setState(394);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == HogQLParser::COMMA) {
      setState(390);
      match(HogQLParser::COMMA);
      setState(391);
      orderExpr();
      setState(396);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OrderExprContext ------------------------------------------------------------------

HogQLParser::OrderExprContext::OrderExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HogQLParser::ColumnExprContext* HogQLParser::OrderExprContext::columnExpr() {
  return getRuleContext<HogQLParser::ColumnExprContext>(0);
}

tree::TerminalNode* HogQLParser::OrderExprContext::NULLS() {
  return getToken(HogQLParser::NULLS, 0);
}

tree::TerminalNode* HogQLParser::OrderExprContext::COLLATE() {
  return getToken(HogQLParser::COLLATE, 0);
}

tree::TerminalNode* HogQLParser::OrderExprContext::STRING_LITERAL() {
  return getToken(HogQLParser::STRING_LITERAL, 0);
}

tree::TerminalNode* HogQLParser::OrderExprContext::ASCENDING() {
  return getToken(HogQLParser::ASCENDING, 0);
}

tree::TerminalNode* HogQLParser::OrderExprContext::DESCENDING() {
  return getToken(HogQLParser::DESCENDING, 0);
}

tree::TerminalNode* HogQLParser::OrderExprContext::DESC() {
  return getToken(HogQLParser::DESC, 0);
}

tree::TerminalNode* HogQLParser::OrderExprContext::FIRST() {
  return getToken(HogQLParser::FIRST, 0);
}

tree::TerminalNode* HogQLParser::OrderExprContext::LAST() {
  return getToken(HogQLParser::LAST, 0);
}


size_t HogQLParser::OrderExprContext::getRuleIndex() const {
  return HogQLParser::RuleOrderExpr;
}


std::any HogQLParser::OrderExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitOrderExpr(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::OrderExprContext* HogQLParser::orderExpr() {
  OrderExprContext *_localctx = _tracker.createInstance<OrderExprContext>(_ctx, getState());
  enterRule(_localctx, 48, HogQLParser::RuleOrderExpr);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(397);
    columnExpr(0);
    setState(399);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 13194139535360) != 0)) {
      setState(398);
      _la = _input->LA(1);
      if (!((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 13194139535360) != 0))) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(403);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HogQLParser::NULLS) {
      setState(401);
      match(HogQLParser::NULLS);
      setState(402);
      _la = _input->LA(1);
      if (!(_la == HogQLParser::FIRST

      || _la == HogQLParser::LAST)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(407);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HogQLParser::COLLATE) {
      setState(405);
      match(HogQLParser::COLLATE);
      setState(406);
      match(HogQLParser::STRING_LITERAL);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RatioExprContext ------------------------------------------------------------------

HogQLParser::RatioExprContext::RatioExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::RatioExprContext::PLACEHOLDER() {
  return getToken(HogQLParser::PLACEHOLDER, 0);
}

std::vector<HogQLParser::NumberLiteralContext *> HogQLParser::RatioExprContext::numberLiteral() {
  return getRuleContexts<HogQLParser::NumberLiteralContext>();
}

HogQLParser::NumberLiteralContext* HogQLParser::RatioExprContext::numberLiteral(size_t i) {
  return getRuleContext<HogQLParser::NumberLiteralContext>(i);
}

tree::TerminalNode* HogQLParser::RatioExprContext::SLASH() {
  return getToken(HogQLParser::SLASH, 0);
}


size_t HogQLParser::RatioExprContext::getRuleIndex() const {
  return HogQLParser::RuleRatioExpr;
}


std::any HogQLParser::RatioExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitRatioExpr(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::RatioExprContext* HogQLParser::ratioExpr() {
  RatioExprContext *_localctx = _tracker.createInstance<RatioExprContext>(_ctx, getState());
  enterRule(_localctx, 50, HogQLParser::RuleRatioExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(415);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case HogQLParser::PLACEHOLDER: {
        enterOuterAlt(_localctx, 1);
        setState(409);
        match(HogQLParser::PLACEHOLDER);
        break;
      }

      case HogQLParser::INF:
      case HogQLParser::NAN_SQL:
      case HogQLParser::FLOATING_LITERAL:
      case HogQLParser::OCTAL_LITERAL:
      case HogQLParser::DECIMAL_LITERAL:
      case HogQLParser::HEXADECIMAL_LITERAL:
      case HogQLParser::DASH:
      case HogQLParser::DOT:
      case HogQLParser::PLUS: {
        enterOuterAlt(_localctx, 2);
        setState(410);
        numberLiteral();
        setState(413);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 54, _ctx)) {
        case 1: {
          setState(411);
          match(HogQLParser::SLASH);
          setState(412);
          numberLiteral();
          break;
        }

        default:
          break;
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SettingExprListContext ------------------------------------------------------------------

HogQLParser::SettingExprListContext::SettingExprListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<HogQLParser::SettingExprContext *> HogQLParser::SettingExprListContext::settingExpr() {
  return getRuleContexts<HogQLParser::SettingExprContext>();
}

HogQLParser::SettingExprContext* HogQLParser::SettingExprListContext::settingExpr(size_t i) {
  return getRuleContext<HogQLParser::SettingExprContext>(i);
}

std::vector<tree::TerminalNode *> HogQLParser::SettingExprListContext::COMMA() {
  return getTokens(HogQLParser::COMMA);
}

tree::TerminalNode* HogQLParser::SettingExprListContext::COMMA(size_t i) {
  return getToken(HogQLParser::COMMA, i);
}


size_t HogQLParser::SettingExprListContext::getRuleIndex() const {
  return HogQLParser::RuleSettingExprList;
}


std::any HogQLParser::SettingExprListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitSettingExprList(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::SettingExprListContext* HogQLParser::settingExprList() {
  SettingExprListContext *_localctx = _tracker.createInstance<SettingExprListContext>(_ctx, getState());
  enterRule(_localctx, 52, HogQLParser::RuleSettingExprList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(417);
    settingExpr();
    setState(422);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == HogQLParser::COMMA) {
      setState(418);
      match(HogQLParser::COMMA);
      setState(419);
      settingExpr();
      setState(424);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SettingExprContext ------------------------------------------------------------------

HogQLParser::SettingExprContext::SettingExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HogQLParser::IdentifierContext* HogQLParser::SettingExprContext::identifier() {
  return getRuleContext<HogQLParser::IdentifierContext>(0);
}

tree::TerminalNode* HogQLParser::SettingExprContext::EQ_SINGLE() {
  return getToken(HogQLParser::EQ_SINGLE, 0);
}

HogQLParser::LiteralContext* HogQLParser::SettingExprContext::literal() {
  return getRuleContext<HogQLParser::LiteralContext>(0);
}


size_t HogQLParser::SettingExprContext::getRuleIndex() const {
  return HogQLParser::RuleSettingExpr;
}


std::any HogQLParser::SettingExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitSettingExpr(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::SettingExprContext* HogQLParser::settingExpr() {
  SettingExprContext *_localctx = _tracker.createInstance<SettingExprContext>(_ctx, getState());
  enterRule(_localctx, 54, HogQLParser::RuleSettingExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(425);
    identifier();
    setState(426);
    match(HogQLParser::EQ_SINGLE);
    setState(427);
    literal();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WindowExprContext ------------------------------------------------------------------

HogQLParser::WindowExprContext::WindowExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HogQLParser::WinPartitionByClauseContext* HogQLParser::WindowExprContext::winPartitionByClause() {
  return getRuleContext<HogQLParser::WinPartitionByClauseContext>(0);
}

HogQLParser::WinOrderByClauseContext* HogQLParser::WindowExprContext::winOrderByClause() {
  return getRuleContext<HogQLParser::WinOrderByClauseContext>(0);
}

HogQLParser::WinFrameClauseContext* HogQLParser::WindowExprContext::winFrameClause() {
  return getRuleContext<HogQLParser::WinFrameClauseContext>(0);
}


size_t HogQLParser::WindowExprContext::getRuleIndex() const {
  return HogQLParser::RuleWindowExpr;
}


std::any HogQLParser::WindowExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitWindowExpr(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::WindowExprContext* HogQLParser::windowExpr() {
  WindowExprContext *_localctx = _tracker.createInstance<WindowExprContext>(_ctx, getState());
  enterRule(_localctx, 56, HogQLParser::RuleWindowExpr);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(430);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HogQLParser::PARTITION) {
      setState(429);
      winPartitionByClause();
    }
    setState(433);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HogQLParser::ORDER) {
      setState(432);
      winOrderByClause();
    }
    setState(436);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HogQLParser::RANGE

    || _la == HogQLParser::ROWS) {
      setState(435);
      winFrameClause();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WinPartitionByClauseContext ------------------------------------------------------------------

HogQLParser::WinPartitionByClauseContext::WinPartitionByClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::WinPartitionByClauseContext::PARTITION() {
  return getToken(HogQLParser::PARTITION, 0);
}

tree::TerminalNode* HogQLParser::WinPartitionByClauseContext::BY() {
  return getToken(HogQLParser::BY, 0);
}

HogQLParser::ColumnExprListContext* HogQLParser::WinPartitionByClauseContext::columnExprList() {
  return getRuleContext<HogQLParser::ColumnExprListContext>(0);
}


size_t HogQLParser::WinPartitionByClauseContext::getRuleIndex() const {
  return HogQLParser::RuleWinPartitionByClause;
}


std::any HogQLParser::WinPartitionByClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitWinPartitionByClause(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::WinPartitionByClauseContext* HogQLParser::winPartitionByClause() {
  WinPartitionByClauseContext *_localctx = _tracker.createInstance<WinPartitionByClauseContext>(_ctx, getState());
  enterRule(_localctx, 58, HogQLParser::RuleWinPartitionByClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(438);
    match(HogQLParser::PARTITION);
    setState(439);
    match(HogQLParser::BY);
    setState(440);
    columnExprList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WinOrderByClauseContext ------------------------------------------------------------------

HogQLParser::WinOrderByClauseContext::WinOrderByClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::WinOrderByClauseContext::ORDER() {
  return getToken(HogQLParser::ORDER, 0);
}

tree::TerminalNode* HogQLParser::WinOrderByClauseContext::BY() {
  return getToken(HogQLParser::BY, 0);
}

HogQLParser::OrderExprListContext* HogQLParser::WinOrderByClauseContext::orderExprList() {
  return getRuleContext<HogQLParser::OrderExprListContext>(0);
}


size_t HogQLParser::WinOrderByClauseContext::getRuleIndex() const {
  return HogQLParser::RuleWinOrderByClause;
}


std::any HogQLParser::WinOrderByClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitWinOrderByClause(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::WinOrderByClauseContext* HogQLParser::winOrderByClause() {
  WinOrderByClauseContext *_localctx = _tracker.createInstance<WinOrderByClauseContext>(_ctx, getState());
  enterRule(_localctx, 60, HogQLParser::RuleWinOrderByClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(442);
    match(HogQLParser::ORDER);
    setState(443);
    match(HogQLParser::BY);
    setState(444);
    orderExprList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WinFrameClauseContext ------------------------------------------------------------------

HogQLParser::WinFrameClauseContext::WinFrameClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HogQLParser::WinFrameExtendContext* HogQLParser::WinFrameClauseContext::winFrameExtend() {
  return getRuleContext<HogQLParser::WinFrameExtendContext>(0);
}

tree::TerminalNode* HogQLParser::WinFrameClauseContext::ROWS() {
  return getToken(HogQLParser::ROWS, 0);
}

tree::TerminalNode* HogQLParser::WinFrameClauseContext::RANGE() {
  return getToken(HogQLParser::RANGE, 0);
}


size_t HogQLParser::WinFrameClauseContext::getRuleIndex() const {
  return HogQLParser::RuleWinFrameClause;
}


std::any HogQLParser::WinFrameClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitWinFrameClause(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::WinFrameClauseContext* HogQLParser::winFrameClause() {
  WinFrameClauseContext *_localctx = _tracker.createInstance<WinFrameClauseContext>(_ctx, getState());
  enterRule(_localctx, 62, HogQLParser::RuleWinFrameClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(446);
    _la = _input->LA(1);
    if (!(_la == HogQLParser::RANGE

    || _la == HogQLParser::ROWS)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(447);
    winFrameExtend();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WinFrameExtendContext ------------------------------------------------------------------

HogQLParser::WinFrameExtendContext::WinFrameExtendContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t HogQLParser::WinFrameExtendContext::getRuleIndex() const {
  return HogQLParser::RuleWinFrameExtend;
}

void HogQLParser::WinFrameExtendContext::copyFrom(WinFrameExtendContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- FrameStartContext ------------------------------------------------------------------

HogQLParser::WinFrameBoundContext* HogQLParser::FrameStartContext::winFrameBound() {
  return getRuleContext<HogQLParser::WinFrameBoundContext>(0);
}

HogQLParser::FrameStartContext::FrameStartContext(WinFrameExtendContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::FrameStartContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitFrameStart(this);
  else
    return visitor->visitChildren(this);
}
//----------------- FrameBetweenContext ------------------------------------------------------------------

tree::TerminalNode* HogQLParser::FrameBetweenContext::BETWEEN() {
  return getToken(HogQLParser::BETWEEN, 0);
}

std::vector<HogQLParser::WinFrameBoundContext *> HogQLParser::FrameBetweenContext::winFrameBound() {
  return getRuleContexts<HogQLParser::WinFrameBoundContext>();
}

HogQLParser::WinFrameBoundContext* HogQLParser::FrameBetweenContext::winFrameBound(size_t i) {
  return getRuleContext<HogQLParser::WinFrameBoundContext>(i);
}

tree::TerminalNode* HogQLParser::FrameBetweenContext::AND() {
  return getToken(HogQLParser::AND, 0);
}

HogQLParser::FrameBetweenContext::FrameBetweenContext(WinFrameExtendContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::FrameBetweenContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitFrameBetween(this);
  else
    return visitor->visitChildren(this);
}
HogQLParser::WinFrameExtendContext* HogQLParser::winFrameExtend() {
  WinFrameExtendContext *_localctx = _tracker.createInstance<WinFrameExtendContext>(_ctx, getState());
  enterRule(_localctx, 64, HogQLParser::RuleWinFrameExtend);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(455);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case HogQLParser::CURRENT:
      case HogQLParser::INF:
      case HogQLParser::NAN_SQL:
      case HogQLParser::UNBOUNDED:
      case HogQLParser::FLOATING_LITERAL:
      case HogQLParser::OCTAL_LITERAL:
      case HogQLParser::DECIMAL_LITERAL:
      case HogQLParser::HEXADECIMAL_LITERAL:
      case HogQLParser::DASH:
      case HogQLParser::DOT:
      case HogQLParser::PLUS: {
        _localctx = _tracker.createInstance<HogQLParser::FrameStartContext>(_localctx);
        enterOuterAlt(_localctx, 1);
        setState(449);
        winFrameBound();
        break;
      }

      case HogQLParser::BETWEEN: {
        _localctx = _tracker.createInstance<HogQLParser::FrameBetweenContext>(_localctx);
        enterOuterAlt(_localctx, 2);
        setState(450);
        match(HogQLParser::BETWEEN);
        setState(451);
        winFrameBound();
        setState(452);
        match(HogQLParser::AND);
        setState(453);
        winFrameBound();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WinFrameBoundContext ------------------------------------------------------------------

HogQLParser::WinFrameBoundContext::WinFrameBoundContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::WinFrameBoundContext::CURRENT() {
  return getToken(HogQLParser::CURRENT, 0);
}

tree::TerminalNode* HogQLParser::WinFrameBoundContext::ROW() {
  return getToken(HogQLParser::ROW, 0);
}

tree::TerminalNode* HogQLParser::WinFrameBoundContext::UNBOUNDED() {
  return getToken(HogQLParser::UNBOUNDED, 0);
}

tree::TerminalNode* HogQLParser::WinFrameBoundContext::PRECEDING() {
  return getToken(HogQLParser::PRECEDING, 0);
}

tree::TerminalNode* HogQLParser::WinFrameBoundContext::FOLLOWING() {
  return getToken(HogQLParser::FOLLOWING, 0);
}

HogQLParser::NumberLiteralContext* HogQLParser::WinFrameBoundContext::numberLiteral() {
  return getRuleContext<HogQLParser::NumberLiteralContext>(0);
}


size_t HogQLParser::WinFrameBoundContext::getRuleIndex() const {
  return HogQLParser::RuleWinFrameBound;
}


std::any HogQLParser::WinFrameBoundContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitWinFrameBound(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::WinFrameBoundContext* HogQLParser::winFrameBound() {
  WinFrameBoundContext *_localctx = _tracker.createInstance<WinFrameBoundContext>(_ctx, getState());
  enterRule(_localctx, 66, HogQLParser::RuleWinFrameBound);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(469);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 61, _ctx)) {
    case 1: {
      setState(457);
      match(HogQLParser::CURRENT);
      setState(458);
      match(HogQLParser::ROW);
      break;
    }

    case 2: {
      setState(459);
      match(HogQLParser::UNBOUNDED);
      setState(460);
      match(HogQLParser::PRECEDING);
      break;
    }

    case 3: {
      setState(461);
      match(HogQLParser::UNBOUNDED);
      setState(462);
      match(HogQLParser::FOLLOWING);
      break;
    }

    case 4: {
      setState(463);
      numberLiteral();
      setState(464);
      match(HogQLParser::PRECEDING);
      break;
    }

    case 5: {
      setState(466);
      numberLiteral();
      setState(467);
      match(HogQLParser::FOLLOWING);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExprContext ------------------------------------------------------------------

HogQLParser::ExprContext::ExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HogQLParser::ColumnExprContext* HogQLParser::ExprContext::columnExpr() {
  return getRuleContext<HogQLParser::ColumnExprContext>(0);
}

tree::TerminalNode* HogQLParser::ExprContext::EOF() {
  return getToken(HogQLParser::EOF, 0);
}


size_t HogQLParser::ExprContext::getRuleIndex() const {
  return HogQLParser::RuleExpr;
}


std::any HogQLParser::ExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitExpr(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::ExprContext* HogQLParser::expr() {
  ExprContext *_localctx = _tracker.createInstance<ExprContext>(_ctx, getState());
  enterRule(_localctx, 68, HogQLParser::RuleExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(471);
    columnExpr(0);
    setState(472);
    match(HogQLParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ColumnTypeExprContext ------------------------------------------------------------------

HogQLParser::ColumnTypeExprContext::ColumnTypeExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t HogQLParser::ColumnTypeExprContext::getRuleIndex() const {
  return HogQLParser::RuleColumnTypeExpr;
}

void HogQLParser::ColumnTypeExprContext::copyFrom(ColumnTypeExprContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- ColumnTypeExprNestedContext ------------------------------------------------------------------

std::vector<HogQLParser::IdentifierContext *> HogQLParser::ColumnTypeExprNestedContext::identifier() {
  return getRuleContexts<HogQLParser::IdentifierContext>();
}

HogQLParser::IdentifierContext* HogQLParser::ColumnTypeExprNestedContext::identifier(size_t i) {
  return getRuleContext<HogQLParser::IdentifierContext>(i);
}

tree::TerminalNode* HogQLParser::ColumnTypeExprNestedContext::LPAREN() {
  return getToken(HogQLParser::LPAREN, 0);
}

std::vector<HogQLParser::ColumnTypeExprContext *> HogQLParser::ColumnTypeExprNestedContext::columnTypeExpr() {
  return getRuleContexts<HogQLParser::ColumnTypeExprContext>();
}

HogQLParser::ColumnTypeExprContext* HogQLParser::ColumnTypeExprNestedContext::columnTypeExpr(size_t i) {
  return getRuleContext<HogQLParser::ColumnTypeExprContext>(i);
}

tree::TerminalNode* HogQLParser::ColumnTypeExprNestedContext::RPAREN() {
  return getToken(HogQLParser::RPAREN, 0);
}

std::vector<tree::TerminalNode *> HogQLParser::ColumnTypeExprNestedContext::COMMA() {
  return getTokens(HogQLParser::COMMA);
}

tree::TerminalNode* HogQLParser::ColumnTypeExprNestedContext::COMMA(size_t i) {
  return getToken(HogQLParser::COMMA, i);
}

HogQLParser::ColumnTypeExprNestedContext::ColumnTypeExprNestedContext(ColumnTypeExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnTypeExprNestedContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnTypeExprNested(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnTypeExprParamContext ------------------------------------------------------------------

HogQLParser::IdentifierContext* HogQLParser::ColumnTypeExprParamContext::identifier() {
  return getRuleContext<HogQLParser::IdentifierContext>(0);
}

tree::TerminalNode* HogQLParser::ColumnTypeExprParamContext::LPAREN() {
  return getToken(HogQLParser::LPAREN, 0);
}

tree::TerminalNode* HogQLParser::ColumnTypeExprParamContext::RPAREN() {
  return getToken(HogQLParser::RPAREN, 0);
}

HogQLParser::ColumnExprListContext* HogQLParser::ColumnTypeExprParamContext::columnExprList() {
  return getRuleContext<HogQLParser::ColumnExprListContext>(0);
}

HogQLParser::ColumnTypeExprParamContext::ColumnTypeExprParamContext(ColumnTypeExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnTypeExprParamContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnTypeExprParam(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnTypeExprSimpleContext ------------------------------------------------------------------

HogQLParser::IdentifierContext* HogQLParser::ColumnTypeExprSimpleContext::identifier() {
  return getRuleContext<HogQLParser::IdentifierContext>(0);
}

HogQLParser::ColumnTypeExprSimpleContext::ColumnTypeExprSimpleContext(ColumnTypeExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnTypeExprSimpleContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnTypeExprSimple(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnTypeExprComplexContext ------------------------------------------------------------------

HogQLParser::IdentifierContext* HogQLParser::ColumnTypeExprComplexContext::identifier() {
  return getRuleContext<HogQLParser::IdentifierContext>(0);
}

tree::TerminalNode* HogQLParser::ColumnTypeExprComplexContext::LPAREN() {
  return getToken(HogQLParser::LPAREN, 0);
}

std::vector<HogQLParser::ColumnTypeExprContext *> HogQLParser::ColumnTypeExprComplexContext::columnTypeExpr() {
  return getRuleContexts<HogQLParser::ColumnTypeExprContext>();
}

HogQLParser::ColumnTypeExprContext* HogQLParser::ColumnTypeExprComplexContext::columnTypeExpr(size_t i) {
  return getRuleContext<HogQLParser::ColumnTypeExprContext>(i);
}

tree::TerminalNode* HogQLParser::ColumnTypeExprComplexContext::RPAREN() {
  return getToken(HogQLParser::RPAREN, 0);
}

std::vector<tree::TerminalNode *> HogQLParser::ColumnTypeExprComplexContext::COMMA() {
  return getTokens(HogQLParser::COMMA);
}

tree::TerminalNode* HogQLParser::ColumnTypeExprComplexContext::COMMA(size_t i) {
  return getToken(HogQLParser::COMMA, i);
}

HogQLParser::ColumnTypeExprComplexContext::ColumnTypeExprComplexContext(ColumnTypeExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnTypeExprComplexContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnTypeExprComplex(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnTypeExprEnumContext ------------------------------------------------------------------

HogQLParser::IdentifierContext* HogQLParser::ColumnTypeExprEnumContext::identifier() {
  return getRuleContext<HogQLParser::IdentifierContext>(0);
}

tree::TerminalNode* HogQLParser::ColumnTypeExprEnumContext::LPAREN() {
  return getToken(HogQLParser::LPAREN, 0);
}

std::vector<HogQLParser::EnumValueContext *> HogQLParser::ColumnTypeExprEnumContext::enumValue() {
  return getRuleContexts<HogQLParser::EnumValueContext>();
}

HogQLParser::EnumValueContext* HogQLParser::ColumnTypeExprEnumContext::enumValue(size_t i) {
  return getRuleContext<HogQLParser::EnumValueContext>(i);
}

tree::TerminalNode* HogQLParser::ColumnTypeExprEnumContext::RPAREN() {
  return getToken(HogQLParser::RPAREN, 0);
}

std::vector<tree::TerminalNode *> HogQLParser::ColumnTypeExprEnumContext::COMMA() {
  return getTokens(HogQLParser::COMMA);
}

tree::TerminalNode* HogQLParser::ColumnTypeExprEnumContext::COMMA(size_t i) {
  return getToken(HogQLParser::COMMA, i);
}

HogQLParser::ColumnTypeExprEnumContext::ColumnTypeExprEnumContext(ColumnTypeExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnTypeExprEnumContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnTypeExprEnum(this);
  else
    return visitor->visitChildren(this);
}
HogQLParser::ColumnTypeExprContext* HogQLParser::columnTypeExpr() {
  ColumnTypeExprContext *_localctx = _tracker.createInstance<ColumnTypeExprContext>(_ctx, getState());
  enterRule(_localctx, 70, HogQLParser::RuleColumnTypeExpr);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(521);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 66, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<HogQLParser::ColumnTypeExprSimpleContext>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(474);
      identifier();
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<HogQLParser::ColumnTypeExprNestedContext>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(475);
      identifier();
      setState(476);
      match(HogQLParser::LPAREN);
      setState(477);
      identifier();
      setState(478);
      columnTypeExpr();
      setState(485);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == HogQLParser::COMMA) {
        setState(479);
        match(HogQLParser::COMMA);
        setState(480);
        identifier();
        setState(481);
        columnTypeExpr();
        setState(487);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(488);
      match(HogQLParser::RPAREN);
      break;
    }

    case 3: {
      _localctx = _tracker.createInstance<HogQLParser::ColumnTypeExprEnumContext>(_localctx);
      enterOuterAlt(_localctx, 3);
      setState(490);
      identifier();
      setState(491);
      match(HogQLParser::LPAREN);
      setState(492);
      enumValue();
      setState(497);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == HogQLParser::COMMA) {
        setState(493);
        match(HogQLParser::COMMA);
        setState(494);
        enumValue();
        setState(499);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(500);
      match(HogQLParser::RPAREN);
      break;
    }

    case 4: {
      _localctx = _tracker.createInstance<HogQLParser::ColumnTypeExprComplexContext>(_localctx);
      enterOuterAlt(_localctx, 4);
      setState(502);
      identifier();
      setState(503);
      match(HogQLParser::LPAREN);
      setState(504);
      columnTypeExpr();
      setState(509);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == HogQLParser::COMMA) {
        setState(505);
        match(HogQLParser::COMMA);
        setState(506);
        columnTypeExpr();
        setState(511);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(512);
      match(HogQLParser::RPAREN);
      break;
    }

    case 5: {
      _localctx = _tracker.createInstance<HogQLParser::ColumnTypeExprParamContext>(_localctx);
      enterOuterAlt(_localctx, 5);
      setState(514);
      identifier();
      setState(515);
      match(HogQLParser::LPAREN);
      setState(517);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -33554436) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & -1) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 128)) & -9) != 0) || ((((_la - 192) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 192)) & 69122459133) != 0)) {
        setState(516);
        columnExprList();
      }
      setState(519);
      match(HogQLParser::RPAREN);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ColumnExprListContext ------------------------------------------------------------------

HogQLParser::ColumnExprListContext::ColumnExprListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<HogQLParser::ColumnExprContext *> HogQLParser::ColumnExprListContext::columnExpr() {
  return getRuleContexts<HogQLParser::ColumnExprContext>();
}

HogQLParser::ColumnExprContext* HogQLParser::ColumnExprListContext::columnExpr(size_t i) {
  return getRuleContext<HogQLParser::ColumnExprContext>(i);
}

std::vector<tree::TerminalNode *> HogQLParser::ColumnExprListContext::COMMA() {
  return getTokens(HogQLParser::COMMA);
}

tree::TerminalNode* HogQLParser::ColumnExprListContext::COMMA(size_t i) {
  return getToken(HogQLParser::COMMA, i);
}


size_t HogQLParser::ColumnExprListContext::getRuleIndex() const {
  return HogQLParser::RuleColumnExprList;
}


std::any HogQLParser::ColumnExprListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprList(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::ColumnExprListContext* HogQLParser::columnExprList() {
  ColumnExprListContext *_localctx = _tracker.createInstance<ColumnExprListContext>(_ctx, getState());
  enterRule(_localctx, 72, HogQLParser::RuleColumnExprList);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(523);
    columnExpr(0);
    setState(528);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 67, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(524);
        match(HogQLParser::COMMA);
        setState(525);
        columnExpr(0); 
      }
      setState(530);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 67, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ColumnExprContext ------------------------------------------------------------------

HogQLParser::ColumnExprContext::ColumnExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t HogQLParser::ColumnExprContext::getRuleIndex() const {
  return HogQLParser::RuleColumnExpr;
}

void HogQLParser::ColumnExprContext::copyFrom(ColumnExprContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- ColumnExprTernaryOpContext ------------------------------------------------------------------

std::vector<HogQLParser::ColumnExprContext *> HogQLParser::ColumnExprTernaryOpContext::columnExpr() {
  return getRuleContexts<HogQLParser::ColumnExprContext>();
}

HogQLParser::ColumnExprContext* HogQLParser::ColumnExprTernaryOpContext::columnExpr(size_t i) {
  return getRuleContext<HogQLParser::ColumnExprContext>(i);
}

tree::TerminalNode* HogQLParser::ColumnExprTernaryOpContext::QUERY() {
  return getToken(HogQLParser::QUERY, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprTernaryOpContext::COLON() {
  return getToken(HogQLParser::COLON, 0);
}

HogQLParser::ColumnExprTernaryOpContext::ColumnExprTernaryOpContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprTernaryOpContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprTernaryOp(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprAliasContext ------------------------------------------------------------------

HogQLParser::ColumnExprContext* HogQLParser::ColumnExprAliasContext::columnExpr() {
  return getRuleContext<HogQLParser::ColumnExprContext>(0);
}

HogQLParser::AliasContext* HogQLParser::ColumnExprAliasContext::alias() {
  return getRuleContext<HogQLParser::AliasContext>(0);
}

tree::TerminalNode* HogQLParser::ColumnExprAliasContext::AS() {
  return getToken(HogQLParser::AS, 0);
}

HogQLParser::IdentifierContext* HogQLParser::ColumnExprAliasContext::identifier() {
  return getRuleContext<HogQLParser::IdentifierContext>(0);
}

tree::TerminalNode* HogQLParser::ColumnExprAliasContext::STRING_LITERAL() {
  return getToken(HogQLParser::STRING_LITERAL, 0);
}

HogQLParser::ColumnExprAliasContext::ColumnExprAliasContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprAliasContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprAlias(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprExtractContext ------------------------------------------------------------------

tree::TerminalNode* HogQLParser::ColumnExprExtractContext::EXTRACT() {
  return getToken(HogQLParser::EXTRACT, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprExtractContext::LPAREN() {
  return getToken(HogQLParser::LPAREN, 0);
}

HogQLParser::IntervalContext* HogQLParser::ColumnExprExtractContext::interval() {
  return getRuleContext<HogQLParser::IntervalContext>(0);
}

tree::TerminalNode* HogQLParser::ColumnExprExtractContext::FROM() {
  return getToken(HogQLParser::FROM, 0);
}

HogQLParser::ColumnExprContext* HogQLParser::ColumnExprExtractContext::columnExpr() {
  return getRuleContext<HogQLParser::ColumnExprContext>(0);
}

tree::TerminalNode* HogQLParser::ColumnExprExtractContext::RPAREN() {
  return getToken(HogQLParser::RPAREN, 0);
}

HogQLParser::ColumnExprExtractContext::ColumnExprExtractContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprExtractContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprExtract(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprNegateContext ------------------------------------------------------------------

tree::TerminalNode* HogQLParser::ColumnExprNegateContext::DASH() {
  return getToken(HogQLParser::DASH, 0);
}

HogQLParser::ColumnExprContext* HogQLParser::ColumnExprNegateContext::columnExpr() {
  return getRuleContext<HogQLParser::ColumnExprContext>(0);
}

HogQLParser::ColumnExprNegateContext::ColumnExprNegateContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprNegateContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprNegate(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprSubqueryContext ------------------------------------------------------------------

tree::TerminalNode* HogQLParser::ColumnExprSubqueryContext::LPAREN() {
  return getToken(HogQLParser::LPAREN, 0);
}

HogQLParser::SelectUnionStmtContext* HogQLParser::ColumnExprSubqueryContext::selectUnionStmt() {
  return getRuleContext<HogQLParser::SelectUnionStmtContext>(0);
}

tree::TerminalNode* HogQLParser::ColumnExprSubqueryContext::RPAREN() {
  return getToken(HogQLParser::RPAREN, 0);
}

HogQLParser::ColumnExprSubqueryContext::ColumnExprSubqueryContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprSubqueryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprSubquery(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprLiteralContext ------------------------------------------------------------------

HogQLParser::LiteralContext* HogQLParser::ColumnExprLiteralContext::literal() {
  return getRuleContext<HogQLParser::LiteralContext>(0);
}

HogQLParser::ColumnExprLiteralContext::ColumnExprLiteralContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprLiteral(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprArrayContext ------------------------------------------------------------------

tree::TerminalNode* HogQLParser::ColumnExprArrayContext::LBRACKET() {
  return getToken(HogQLParser::LBRACKET, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprArrayContext::RBRACKET() {
  return getToken(HogQLParser::RBRACKET, 0);
}

HogQLParser::ColumnExprListContext* HogQLParser::ColumnExprArrayContext::columnExprList() {
  return getRuleContext<HogQLParser::ColumnExprListContext>(0);
}

HogQLParser::ColumnExprArrayContext::ColumnExprArrayContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprArrayContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprArray(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprSubstringContext ------------------------------------------------------------------

tree::TerminalNode* HogQLParser::ColumnExprSubstringContext::SUBSTRING() {
  return getToken(HogQLParser::SUBSTRING, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprSubstringContext::LPAREN() {
  return getToken(HogQLParser::LPAREN, 0);
}

std::vector<HogQLParser::ColumnExprContext *> HogQLParser::ColumnExprSubstringContext::columnExpr() {
  return getRuleContexts<HogQLParser::ColumnExprContext>();
}

HogQLParser::ColumnExprContext* HogQLParser::ColumnExprSubstringContext::columnExpr(size_t i) {
  return getRuleContext<HogQLParser::ColumnExprContext>(i);
}

tree::TerminalNode* HogQLParser::ColumnExprSubstringContext::FROM() {
  return getToken(HogQLParser::FROM, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprSubstringContext::RPAREN() {
  return getToken(HogQLParser::RPAREN, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprSubstringContext::FOR() {
  return getToken(HogQLParser::FOR, 0);
}

HogQLParser::ColumnExprSubstringContext::ColumnExprSubstringContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprSubstringContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprSubstring(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprCastContext ------------------------------------------------------------------

tree::TerminalNode* HogQLParser::ColumnExprCastContext::CAST() {
  return getToken(HogQLParser::CAST, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprCastContext::LPAREN() {
  return getToken(HogQLParser::LPAREN, 0);
}

HogQLParser::ColumnExprContext* HogQLParser::ColumnExprCastContext::columnExpr() {
  return getRuleContext<HogQLParser::ColumnExprContext>(0);
}

tree::TerminalNode* HogQLParser::ColumnExprCastContext::AS() {
  return getToken(HogQLParser::AS, 0);
}

HogQLParser::ColumnTypeExprContext* HogQLParser::ColumnExprCastContext::columnTypeExpr() {
  return getRuleContext<HogQLParser::ColumnTypeExprContext>(0);
}

tree::TerminalNode* HogQLParser::ColumnExprCastContext::RPAREN() {
  return getToken(HogQLParser::RPAREN, 0);
}

HogQLParser::ColumnExprCastContext::ColumnExprCastContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprCastContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprCast(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprOrContext ------------------------------------------------------------------

std::vector<HogQLParser::ColumnExprContext *> HogQLParser::ColumnExprOrContext::columnExpr() {
  return getRuleContexts<HogQLParser::ColumnExprContext>();
}

HogQLParser::ColumnExprContext* HogQLParser::ColumnExprOrContext::columnExpr(size_t i) {
  return getRuleContext<HogQLParser::ColumnExprContext>(i);
}

tree::TerminalNode* HogQLParser::ColumnExprOrContext::OR() {
  return getToken(HogQLParser::OR, 0);
}

HogQLParser::ColumnExprOrContext::ColumnExprOrContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprOrContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprOr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprPrecedence1Context ------------------------------------------------------------------

std::vector<HogQLParser::ColumnExprContext *> HogQLParser::ColumnExprPrecedence1Context::columnExpr() {
  return getRuleContexts<HogQLParser::ColumnExprContext>();
}

HogQLParser::ColumnExprContext* HogQLParser::ColumnExprPrecedence1Context::columnExpr(size_t i) {
  return getRuleContext<HogQLParser::ColumnExprContext>(i);
}

tree::TerminalNode* HogQLParser::ColumnExprPrecedence1Context::ASTERISK() {
  return getToken(HogQLParser::ASTERISK, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprPrecedence1Context::SLASH() {
  return getToken(HogQLParser::SLASH, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprPrecedence1Context::PERCENT() {
  return getToken(HogQLParser::PERCENT, 0);
}

HogQLParser::ColumnExprPrecedence1Context::ColumnExprPrecedence1Context(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprPrecedence1Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprPrecedence1(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprPrecedence2Context ------------------------------------------------------------------

std::vector<HogQLParser::ColumnExprContext *> HogQLParser::ColumnExprPrecedence2Context::columnExpr() {
  return getRuleContexts<HogQLParser::ColumnExprContext>();
}

HogQLParser::ColumnExprContext* HogQLParser::ColumnExprPrecedence2Context::columnExpr(size_t i) {
  return getRuleContext<HogQLParser::ColumnExprContext>(i);
}

tree::TerminalNode* HogQLParser::ColumnExprPrecedence2Context::PLUS() {
  return getToken(HogQLParser::PLUS, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprPrecedence2Context::DASH() {
  return getToken(HogQLParser::DASH, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprPrecedence2Context::CONCAT() {
  return getToken(HogQLParser::CONCAT, 0);
}

HogQLParser::ColumnExprPrecedence2Context::ColumnExprPrecedence2Context(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprPrecedence2Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprPrecedence2(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprPrecedence3Context ------------------------------------------------------------------

std::vector<HogQLParser::ColumnExprContext *> HogQLParser::ColumnExprPrecedence3Context::columnExpr() {
  return getRuleContexts<HogQLParser::ColumnExprContext>();
}

HogQLParser::ColumnExprContext* HogQLParser::ColumnExprPrecedence3Context::columnExpr(size_t i) {
  return getRuleContext<HogQLParser::ColumnExprContext>(i);
}

tree::TerminalNode* HogQLParser::ColumnExprPrecedence3Context::IN() {
  return getToken(HogQLParser::IN, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprPrecedence3Context::EQ_DOUBLE() {
  return getToken(HogQLParser::EQ_DOUBLE, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprPrecedence3Context::EQ_SINGLE() {
  return getToken(HogQLParser::EQ_SINGLE, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprPrecedence3Context::NOT_EQ() {
  return getToken(HogQLParser::NOT_EQ, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprPrecedence3Context::LT_EQ() {
  return getToken(HogQLParser::LT_EQ, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprPrecedence3Context::LT() {
  return getToken(HogQLParser::LT, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprPrecedence3Context::GT_EQ() {
  return getToken(HogQLParser::GT_EQ, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprPrecedence3Context::GT() {
  return getToken(HogQLParser::GT, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprPrecedence3Context::LIKE() {
  return getToken(HogQLParser::LIKE, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprPrecedence3Context::ILIKE() {
  return getToken(HogQLParser::ILIKE, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprPrecedence3Context::REGEX_SINGLE() {
  return getToken(HogQLParser::REGEX_SINGLE, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprPrecedence3Context::REGEX_DOUBLE() {
  return getToken(HogQLParser::REGEX_DOUBLE, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprPrecedence3Context::NOT_REGEX() {
  return getToken(HogQLParser::NOT_REGEX, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprPrecedence3Context::IREGEX_SINGLE() {
  return getToken(HogQLParser::IREGEX_SINGLE, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprPrecedence3Context::IREGEX_DOUBLE() {
  return getToken(HogQLParser::IREGEX_DOUBLE, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprPrecedence3Context::NOT_IREGEX() {
  return getToken(HogQLParser::NOT_IREGEX, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprPrecedence3Context::COHORT() {
  return getToken(HogQLParser::COHORT, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprPrecedence3Context::NOT() {
  return getToken(HogQLParser::NOT, 0);
}

HogQLParser::ColumnExprPrecedence3Context::ColumnExprPrecedence3Context(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprPrecedence3Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprPrecedence3(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprIntervalContext ------------------------------------------------------------------

tree::TerminalNode* HogQLParser::ColumnExprIntervalContext::INTERVAL() {
  return getToken(HogQLParser::INTERVAL, 0);
}

HogQLParser::ColumnExprContext* HogQLParser::ColumnExprIntervalContext::columnExpr() {
  return getRuleContext<HogQLParser::ColumnExprContext>(0);
}

HogQLParser::IntervalContext* HogQLParser::ColumnExprIntervalContext::interval() {
  return getRuleContext<HogQLParser::IntervalContext>(0);
}

HogQLParser::ColumnExprIntervalContext::ColumnExprIntervalContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprIntervalContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprInterval(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprIsNullContext ------------------------------------------------------------------

HogQLParser::ColumnExprContext* HogQLParser::ColumnExprIsNullContext::columnExpr() {
  return getRuleContext<HogQLParser::ColumnExprContext>(0);
}

tree::TerminalNode* HogQLParser::ColumnExprIsNullContext::IS() {
  return getToken(HogQLParser::IS, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprIsNullContext::NULL_SQL() {
  return getToken(HogQLParser::NULL_SQL, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprIsNullContext::NOT() {
  return getToken(HogQLParser::NOT, 0);
}

HogQLParser::ColumnExprIsNullContext::ColumnExprIsNullContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprIsNullContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprIsNull(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprWinFunctionTargetContext ------------------------------------------------------------------

std::vector<HogQLParser::IdentifierContext *> HogQLParser::ColumnExprWinFunctionTargetContext::identifier() {
  return getRuleContexts<HogQLParser::IdentifierContext>();
}

HogQLParser::IdentifierContext* HogQLParser::ColumnExprWinFunctionTargetContext::identifier(size_t i) {
  return getRuleContext<HogQLParser::IdentifierContext>(i);
}

tree::TerminalNode* HogQLParser::ColumnExprWinFunctionTargetContext::OVER() {
  return getToken(HogQLParser::OVER, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprWinFunctionTargetContext::LPAREN() {
  return getToken(HogQLParser::LPAREN, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprWinFunctionTargetContext::RPAREN() {
  return getToken(HogQLParser::RPAREN, 0);
}

HogQLParser::ColumnExprListContext* HogQLParser::ColumnExprWinFunctionTargetContext::columnExprList() {
  return getRuleContext<HogQLParser::ColumnExprListContext>(0);
}

HogQLParser::ColumnExprWinFunctionTargetContext::ColumnExprWinFunctionTargetContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprWinFunctionTargetContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprWinFunctionTarget(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprTrimContext ------------------------------------------------------------------

tree::TerminalNode* HogQLParser::ColumnExprTrimContext::TRIM() {
  return getToken(HogQLParser::TRIM, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprTrimContext::LPAREN() {
  return getToken(HogQLParser::LPAREN, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprTrimContext::STRING_LITERAL() {
  return getToken(HogQLParser::STRING_LITERAL, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprTrimContext::FROM() {
  return getToken(HogQLParser::FROM, 0);
}

HogQLParser::ColumnExprContext* HogQLParser::ColumnExprTrimContext::columnExpr() {
  return getRuleContext<HogQLParser::ColumnExprContext>(0);
}

tree::TerminalNode* HogQLParser::ColumnExprTrimContext::RPAREN() {
  return getToken(HogQLParser::RPAREN, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprTrimContext::BOTH() {
  return getToken(HogQLParser::BOTH, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprTrimContext::LEADING() {
  return getToken(HogQLParser::LEADING, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprTrimContext::TRAILING() {
  return getToken(HogQLParser::TRAILING, 0);
}

HogQLParser::ColumnExprTrimContext::ColumnExprTrimContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprTrimContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprTrim(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprTupleContext ------------------------------------------------------------------

tree::TerminalNode* HogQLParser::ColumnExprTupleContext::LPAREN() {
  return getToken(HogQLParser::LPAREN, 0);
}

HogQLParser::ColumnExprListContext* HogQLParser::ColumnExprTupleContext::columnExprList() {
  return getRuleContext<HogQLParser::ColumnExprListContext>(0);
}

tree::TerminalNode* HogQLParser::ColumnExprTupleContext::RPAREN() {
  return getToken(HogQLParser::RPAREN, 0);
}

HogQLParser::ColumnExprTupleContext::ColumnExprTupleContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprTupleContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprTuple(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprArrayAccessContext ------------------------------------------------------------------

std::vector<HogQLParser::ColumnExprContext *> HogQLParser::ColumnExprArrayAccessContext::columnExpr() {
  return getRuleContexts<HogQLParser::ColumnExprContext>();
}

HogQLParser::ColumnExprContext* HogQLParser::ColumnExprArrayAccessContext::columnExpr(size_t i) {
  return getRuleContext<HogQLParser::ColumnExprContext>(i);
}

tree::TerminalNode* HogQLParser::ColumnExprArrayAccessContext::LBRACKET() {
  return getToken(HogQLParser::LBRACKET, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprArrayAccessContext::RBRACKET() {
  return getToken(HogQLParser::RBRACKET, 0);
}

HogQLParser::ColumnExprArrayAccessContext::ColumnExprArrayAccessContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprArrayAccessContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprArrayAccess(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprBetweenContext ------------------------------------------------------------------

std::vector<HogQLParser::ColumnExprContext *> HogQLParser::ColumnExprBetweenContext::columnExpr() {
  return getRuleContexts<HogQLParser::ColumnExprContext>();
}

HogQLParser::ColumnExprContext* HogQLParser::ColumnExprBetweenContext::columnExpr(size_t i) {
  return getRuleContext<HogQLParser::ColumnExprContext>(i);
}

tree::TerminalNode* HogQLParser::ColumnExprBetweenContext::BETWEEN() {
  return getToken(HogQLParser::BETWEEN, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprBetweenContext::AND() {
  return getToken(HogQLParser::AND, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprBetweenContext::NOT() {
  return getToken(HogQLParser::NOT, 0);
}

HogQLParser::ColumnExprBetweenContext::ColumnExprBetweenContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprBetweenContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprBetween(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprPropertyAccessContext ------------------------------------------------------------------

HogQLParser::ColumnExprContext* HogQLParser::ColumnExprPropertyAccessContext::columnExpr() {
  return getRuleContext<HogQLParser::ColumnExprContext>(0);
}

tree::TerminalNode* HogQLParser::ColumnExprPropertyAccessContext::DOT() {
  return getToken(HogQLParser::DOT, 0);
}

HogQLParser::IdentifierContext* HogQLParser::ColumnExprPropertyAccessContext::identifier() {
  return getRuleContext<HogQLParser::IdentifierContext>(0);
}

HogQLParser::ColumnExprPropertyAccessContext::ColumnExprPropertyAccessContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprPropertyAccessContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprPropertyAccess(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprParensContext ------------------------------------------------------------------

tree::TerminalNode* HogQLParser::ColumnExprParensContext::LPAREN() {
  return getToken(HogQLParser::LPAREN, 0);
}

HogQLParser::ColumnExprContext* HogQLParser::ColumnExprParensContext::columnExpr() {
  return getRuleContext<HogQLParser::ColumnExprContext>(0);
}

tree::TerminalNode* HogQLParser::ColumnExprParensContext::RPAREN() {
  return getToken(HogQLParser::RPAREN, 0);
}

HogQLParser::ColumnExprParensContext::ColumnExprParensContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprParensContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprParens(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprTimestampContext ------------------------------------------------------------------

tree::TerminalNode* HogQLParser::ColumnExprTimestampContext::TIMESTAMP() {
  return getToken(HogQLParser::TIMESTAMP, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprTimestampContext::STRING_LITERAL() {
  return getToken(HogQLParser::STRING_LITERAL, 0);
}

HogQLParser::ColumnExprTimestampContext::ColumnExprTimestampContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprTimestampContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprTimestamp(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprNullishContext ------------------------------------------------------------------

std::vector<HogQLParser::ColumnExprContext *> HogQLParser::ColumnExprNullishContext::columnExpr() {
  return getRuleContexts<HogQLParser::ColumnExprContext>();
}

HogQLParser::ColumnExprContext* HogQLParser::ColumnExprNullishContext::columnExpr(size_t i) {
  return getRuleContext<HogQLParser::ColumnExprContext>(i);
}

tree::TerminalNode* HogQLParser::ColumnExprNullishContext::NULLISH() {
  return getToken(HogQLParser::NULLISH, 0);
}

HogQLParser::ColumnExprNullishContext::ColumnExprNullishContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprNullishContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprNullish(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprAndContext ------------------------------------------------------------------

std::vector<HogQLParser::ColumnExprContext *> HogQLParser::ColumnExprAndContext::columnExpr() {
  return getRuleContexts<HogQLParser::ColumnExprContext>();
}

HogQLParser::ColumnExprContext* HogQLParser::ColumnExprAndContext::columnExpr(size_t i) {
  return getRuleContext<HogQLParser::ColumnExprContext>(i);
}

tree::TerminalNode* HogQLParser::ColumnExprAndContext::AND() {
  return getToken(HogQLParser::AND, 0);
}

HogQLParser::ColumnExprAndContext::ColumnExprAndContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprAndContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprAnd(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprTupleAccessContext ------------------------------------------------------------------

HogQLParser::ColumnExprContext* HogQLParser::ColumnExprTupleAccessContext::columnExpr() {
  return getRuleContext<HogQLParser::ColumnExprContext>(0);
}

tree::TerminalNode* HogQLParser::ColumnExprTupleAccessContext::DOT() {
  return getToken(HogQLParser::DOT, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprTupleAccessContext::DECIMAL_LITERAL() {
  return getToken(HogQLParser::DECIMAL_LITERAL, 0);
}

HogQLParser::ColumnExprTupleAccessContext::ColumnExprTupleAccessContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprTupleAccessContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprTupleAccess(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprCaseContext ------------------------------------------------------------------

tree::TerminalNode* HogQLParser::ColumnExprCaseContext::CASE() {
  return getToken(HogQLParser::CASE, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprCaseContext::END() {
  return getToken(HogQLParser::END, 0);
}

std::vector<tree::TerminalNode *> HogQLParser::ColumnExprCaseContext::WHEN() {
  return getTokens(HogQLParser::WHEN);
}

tree::TerminalNode* HogQLParser::ColumnExprCaseContext::WHEN(size_t i) {
  return getToken(HogQLParser::WHEN, i);
}

std::vector<tree::TerminalNode *> HogQLParser::ColumnExprCaseContext::THEN() {
  return getTokens(HogQLParser::THEN);
}

tree::TerminalNode* HogQLParser::ColumnExprCaseContext::THEN(size_t i) {
  return getToken(HogQLParser::THEN, i);
}

tree::TerminalNode* HogQLParser::ColumnExprCaseContext::ELSE() {
  return getToken(HogQLParser::ELSE, 0);
}

std::vector<HogQLParser::ColumnExprContext *> HogQLParser::ColumnExprCaseContext::columnExpr() {
  return getRuleContexts<HogQLParser::ColumnExprContext>();
}

HogQLParser::ColumnExprContext* HogQLParser::ColumnExprCaseContext::columnExpr(size_t i) {
  return getRuleContext<HogQLParser::ColumnExprContext>(i);
}

HogQLParser::ColumnExprCaseContext::ColumnExprCaseContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprCaseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprCase(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprDateContext ------------------------------------------------------------------

tree::TerminalNode* HogQLParser::ColumnExprDateContext::DATE() {
  return getToken(HogQLParser::DATE, 0);
}

tree::TerminalNode* HogQLParser::ColumnExprDateContext::STRING_LITERAL() {
  return getToken(HogQLParser::STRING_LITERAL, 0);
}

HogQLParser::ColumnExprDateContext::ColumnExprDateContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprDateContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprDate(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprNotContext ------------------------------------------------------------------

tree::TerminalNode* HogQLParser::ColumnExprNotContext::NOT() {
  return getToken(HogQLParser::NOT, 0);
}

HogQLParser::ColumnExprContext* HogQLParser::ColumnExprNotContext::columnExpr() {
  return getRuleContext<HogQLParser::ColumnExprContext>(0);
}

HogQLParser::ColumnExprNotContext::ColumnExprNotContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprNotContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprNot(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprWinFunctionContext ------------------------------------------------------------------

HogQLParser::IdentifierContext* HogQLParser::ColumnExprWinFunctionContext::identifier() {
  return getRuleContext<HogQLParser::IdentifierContext>(0);
}

tree::TerminalNode* HogQLParser::ColumnExprWinFunctionContext::OVER() {
  return getToken(HogQLParser::OVER, 0);
}

std::vector<tree::TerminalNode *> HogQLParser::ColumnExprWinFunctionContext::LPAREN() {
  return getTokens(HogQLParser::LPAREN);
}

tree::TerminalNode* HogQLParser::ColumnExprWinFunctionContext::LPAREN(size_t i) {
  return getToken(HogQLParser::LPAREN, i);
}

HogQLParser::WindowExprContext* HogQLParser::ColumnExprWinFunctionContext::windowExpr() {
  return getRuleContext<HogQLParser::WindowExprContext>(0);
}

std::vector<tree::TerminalNode *> HogQLParser::ColumnExprWinFunctionContext::RPAREN() {
  return getTokens(HogQLParser::RPAREN);
}

tree::TerminalNode* HogQLParser::ColumnExprWinFunctionContext::RPAREN(size_t i) {
  return getToken(HogQLParser::RPAREN, i);
}

HogQLParser::ColumnExprListContext* HogQLParser::ColumnExprWinFunctionContext::columnExprList() {
  return getRuleContext<HogQLParser::ColumnExprListContext>(0);
}

HogQLParser::ColumnExprWinFunctionContext::ColumnExprWinFunctionContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprWinFunctionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprWinFunction(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprIdentifierContext ------------------------------------------------------------------

HogQLParser::ColumnIdentifierContext* HogQLParser::ColumnExprIdentifierContext::columnIdentifier() {
  return getRuleContext<HogQLParser::ColumnIdentifierContext>(0);
}

HogQLParser::ColumnExprIdentifierContext::ColumnExprIdentifierContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprIdentifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprIdentifier(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprFunctionContext ------------------------------------------------------------------

HogQLParser::IdentifierContext* HogQLParser::ColumnExprFunctionContext::identifier() {
  return getRuleContext<HogQLParser::IdentifierContext>(0);
}

std::vector<tree::TerminalNode *> HogQLParser::ColumnExprFunctionContext::LPAREN() {
  return getTokens(HogQLParser::LPAREN);
}

tree::TerminalNode* HogQLParser::ColumnExprFunctionContext::LPAREN(size_t i) {
  return getToken(HogQLParser::LPAREN, i);
}

std::vector<tree::TerminalNode *> HogQLParser::ColumnExprFunctionContext::RPAREN() {
  return getTokens(HogQLParser::RPAREN);
}

tree::TerminalNode* HogQLParser::ColumnExprFunctionContext::RPAREN(size_t i) {
  return getToken(HogQLParser::RPAREN, i);
}

tree::TerminalNode* HogQLParser::ColumnExprFunctionContext::DISTINCT() {
  return getToken(HogQLParser::DISTINCT, 0);
}

HogQLParser::ColumnArgListContext* HogQLParser::ColumnExprFunctionContext::columnArgList() {
  return getRuleContext<HogQLParser::ColumnArgListContext>(0);
}

HogQLParser::ColumnExprListContext* HogQLParser::ColumnExprFunctionContext::columnExprList() {
  return getRuleContext<HogQLParser::ColumnExprListContext>(0);
}

HogQLParser::ColumnExprFunctionContext::ColumnExprFunctionContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprFunctionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprFunction(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprAsteriskContext ------------------------------------------------------------------

tree::TerminalNode* HogQLParser::ColumnExprAsteriskContext::ASTERISK() {
  return getToken(HogQLParser::ASTERISK, 0);
}

HogQLParser::TableIdentifierContext* HogQLParser::ColumnExprAsteriskContext::tableIdentifier() {
  return getRuleContext<HogQLParser::TableIdentifierContext>(0);
}

tree::TerminalNode* HogQLParser::ColumnExprAsteriskContext::DOT() {
  return getToken(HogQLParser::DOT, 0);
}

HogQLParser::ColumnExprAsteriskContext::ColumnExprAsteriskContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::ColumnExprAsteriskContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprAsterisk(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::ColumnExprContext* HogQLParser::columnExpr() {
   return columnExpr(0);
}

HogQLParser::ColumnExprContext* HogQLParser::columnExpr(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  HogQLParser::ColumnExprContext *_localctx = _tracker.createInstance<ColumnExprContext>(_ctx, parentState);
  HogQLParser::ColumnExprContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 74;
  enterRecursionRule(_localctx, 74, HogQLParser::RuleColumnExpr, precedence);

    size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(660);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 80, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<ColumnExprCaseContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;

      setState(532);
      match(HogQLParser::CASE);
      setState(534);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 68, _ctx)) {
      case 1: {
        setState(533);
        antlrcpp::downCast<ColumnExprCaseContext *>(_localctx)->caseExpr = columnExpr(0);
        break;
      }

      default:
        break;
      }
      setState(541); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(536);
        match(HogQLParser::WHEN);
        setState(537);
        antlrcpp::downCast<ColumnExprCaseContext *>(_localctx)->whenExpr = columnExpr(0);
        setState(538);
        match(HogQLParser::THEN);
        setState(539);
        antlrcpp::downCast<ColumnExprCaseContext *>(_localctx)->thenExpr = columnExpr(0);
        setState(543); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (_la == HogQLParser::WHEN);
      setState(547);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == HogQLParser::ELSE) {
        setState(545);
        match(HogQLParser::ELSE);
        setState(546);
        antlrcpp::downCast<ColumnExprCaseContext *>(_localctx)->elseExpr = columnExpr(0);
      }
      setState(549);
      match(HogQLParser::END);
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<ColumnExprCastContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(551);
      match(HogQLParser::CAST);
      setState(552);
      match(HogQLParser::LPAREN);
      setState(553);
      columnExpr(0);
      setState(554);
      match(HogQLParser::AS);
      setState(555);
      columnTypeExpr();
      setState(556);
      match(HogQLParser::RPAREN);
      break;
    }

    case 3: {
      _localctx = _tracker.createInstance<ColumnExprDateContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(558);
      match(HogQLParser::DATE);
      setState(559);
      match(HogQLParser::STRING_LITERAL);
      break;
    }

    case 4: {
      _localctx = _tracker.createInstance<ColumnExprExtractContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(560);
      match(HogQLParser::EXTRACT);
      setState(561);
      match(HogQLParser::LPAREN);
      setState(562);
      interval();
      setState(563);
      match(HogQLParser::FROM);
      setState(564);
      columnExpr(0);
      setState(565);
      match(HogQLParser::RPAREN);
      break;
    }

    case 5: {
      _localctx = _tracker.createInstance<ColumnExprIntervalContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(567);
      match(HogQLParser::INTERVAL);
      setState(568);
      columnExpr(0);
      setState(569);
      interval();
      break;
    }

    case 6: {
      _localctx = _tracker.createInstance<ColumnExprSubstringContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(571);
      match(HogQLParser::SUBSTRING);
      setState(572);
      match(HogQLParser::LPAREN);
      setState(573);
      columnExpr(0);
      setState(574);
      match(HogQLParser::FROM);
      setState(575);
      columnExpr(0);
      setState(578);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == HogQLParser::FOR) {
        setState(576);
        match(HogQLParser::FOR);
        setState(577);
        columnExpr(0);
      }
      setState(580);
      match(HogQLParser::RPAREN);
      break;
    }

    case 7: {
      _localctx = _tracker.createInstance<ColumnExprTimestampContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(582);
      match(HogQLParser::TIMESTAMP);
      setState(583);
      match(HogQLParser::STRING_LITERAL);
      break;
    }

    case 8: {
      _localctx = _tracker.createInstance<ColumnExprTrimContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(584);
      match(HogQLParser::TRIM);
      setState(585);
      match(HogQLParser::LPAREN);
      setState(586);
      _la = _input->LA(1);
      if (!(_la == HogQLParser::BOTH || _la == HogQLParser::LEADING || _la == HogQLParser::TRAILING)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(587);
      match(HogQLParser::STRING_LITERAL);
      setState(588);
      match(HogQLParser::FROM);
      setState(589);
      columnExpr(0);
      setState(590);
      match(HogQLParser::RPAREN);
      break;
    }

    case 9: {
      _localctx = _tracker.createInstance<ColumnExprWinFunctionContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(592);
      identifier();

      setState(593);
      match(HogQLParser::LPAREN);
      setState(595);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -33554436) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & -1) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 128)) & -9) != 0) || ((((_la - 192) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 192)) & 69122459133) != 0)) {
        setState(594);
        columnExprList();
      }
      setState(597);
      match(HogQLParser::RPAREN);
      setState(599);
      match(HogQLParser::OVER);
      setState(600);
      match(HogQLParser::LPAREN);
      setState(601);
      windowExpr();
      setState(602);
      match(HogQLParser::RPAREN);
      break;
    }

    case 10: {
      _localctx = _tracker.createInstance<ColumnExprWinFunctionTargetContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(604);
      identifier();

      setState(605);
      match(HogQLParser::LPAREN);
      setState(607);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -33554436) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & -1) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 128)) & -9) != 0) || ((((_la - 192) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 192)) & 69122459133) != 0)) {
        setState(606);
        columnExprList();
      }
      setState(609);
      match(HogQLParser::RPAREN);
      setState(611);
      match(HogQLParser::OVER);
      setState(612);
      identifier();
      break;
    }

    case 11: {
      _localctx = _tracker.createInstance<ColumnExprFunctionContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(614);
      identifier();
      setState(620);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 75, _ctx)) {
      case 1: {
        setState(615);
        match(HogQLParser::LPAREN);
        setState(617);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & -33554436) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 64)) & -1) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 128)) & -9) != 0) || ((((_la - 192) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 192)) & 69122459133) != 0)) {
          setState(616);
          columnExprList();
        }
        setState(619);
        match(HogQLParser::RPAREN);
        break;
      }

      default:
        break;
      }
      setState(622);
      match(HogQLParser::LPAREN);
      setState(624);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 76, _ctx)) {
      case 1: {
        setState(623);
        match(HogQLParser::DISTINCT);
        break;
      }

      default:
        break;
      }
      setState(627);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -33554436) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & -1) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 128)) & -9) != 0) || ((((_la - 192) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 192)) & 69122459133) != 0)) {
        setState(626);
        columnArgList();
      }
      setState(629);
      match(HogQLParser::RPAREN);
      break;
    }

    case 12: {
      _localctx = _tracker.createInstance<ColumnExprLiteralContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(631);
      literal();
      break;
    }

    case 13: {
      _localctx = _tracker.createInstance<ColumnExprNegateContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(632);
      match(HogQLParser::DASH);
      setState(633);
      columnExpr(18);
      break;
    }

    case 14: {
      _localctx = _tracker.createInstance<ColumnExprNotContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(634);
      match(HogQLParser::NOT);
      setState(635);
      columnExpr(12);
      break;
    }

    case 15: {
      _localctx = _tracker.createInstance<ColumnExprAsteriskContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(639);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -33554436) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & -5066549581053953) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 128)) & -9) != 0) || _la == HogQLParser::JSON_TRUE

      || _la == HogQLParser::IDENTIFIER) {
        setState(636);
        tableIdentifier();
        setState(637);
        match(HogQLParser::DOT);
      }
      setState(641);
      match(HogQLParser::ASTERISK);
      break;
    }

    case 16: {
      _localctx = _tracker.createInstance<ColumnExprSubqueryContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(642);
      match(HogQLParser::LPAREN);
      setState(643);
      selectUnionStmt();
      setState(644);
      match(HogQLParser::RPAREN);
      break;
    }

    case 17: {
      _localctx = _tracker.createInstance<ColumnExprParensContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(646);
      match(HogQLParser::LPAREN);
      setState(647);
      columnExpr(0);
      setState(648);
      match(HogQLParser::RPAREN);
      break;
    }

    case 18: {
      _localctx = _tracker.createInstance<ColumnExprTupleContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(650);
      match(HogQLParser::LPAREN);
      setState(651);
      columnExprList();
      setState(652);
      match(HogQLParser::RPAREN);
      break;
    }

    case 19: {
      _localctx = _tracker.createInstance<ColumnExprArrayContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(654);
      match(HogQLParser::LBRACKET);
      setState(656);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -33554436) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & -1) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 128)) & -9) != 0) || ((((_la - 192) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 192)) & 69122459133) != 0)) {
        setState(655);
        columnExprList();
      }
      setState(658);
      match(HogQLParser::RBRACKET);
      break;
    }

    case 20: {
      _localctx = _tracker.createInstance<ColumnExprIdentifierContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(659);
      columnIdentifier();
      break;
    }

    default:
      break;
    }
    _ctx->stop = _input->LT(-1);
    setState(755);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 91, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(753);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 90, _ctx)) {
        case 1: {
          auto newContext = _tracker.createInstance<ColumnExprPrecedence1Context>(_tracker.createInstance<ColumnExprContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->left = previousContext;
          pushNewRecursionContext(newContext, startState, RuleColumnExpr);
          setState(662);

          if (!(precpred(_ctx, 17))) throw FailedPredicateException(this, "precpred(_ctx, 17)");
          setState(666);
          _errHandler->sync(this);
          switch (_input->LA(1)) {
            case HogQLParser::ASTERISK: {
              setState(663);
              antlrcpp::downCast<ColumnExprPrecedence1Context *>(_localctx)->operator_ = match(HogQLParser::ASTERISK);
              break;
            }

            case HogQLParser::SLASH: {
              setState(664);
              antlrcpp::downCast<ColumnExprPrecedence1Context *>(_localctx)->operator_ = match(HogQLParser::SLASH);
              break;
            }

            case HogQLParser::PERCENT: {
              setState(665);
              antlrcpp::downCast<ColumnExprPrecedence1Context *>(_localctx)->operator_ = match(HogQLParser::PERCENT);
              break;
            }

          default:
            throw NoViableAltException(this);
          }
          setState(668);
          antlrcpp::downCast<ColumnExprPrecedence1Context *>(_localctx)->right = columnExpr(18);
          break;
        }

        case 2: {
          auto newContext = _tracker.createInstance<ColumnExprPrecedence2Context>(_tracker.createInstance<ColumnExprContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->left = previousContext;
          pushNewRecursionContext(newContext, startState, RuleColumnExpr);
          setState(669);

          if (!(precpred(_ctx, 16))) throw FailedPredicateException(this, "precpred(_ctx, 16)");
          setState(673);
          _errHandler->sync(this);
          switch (_input->LA(1)) {
            case HogQLParser::PLUS: {
              setState(670);
              antlrcpp::downCast<ColumnExprPrecedence2Context *>(_localctx)->operator_ = match(HogQLParser::PLUS);
              break;
            }

            case HogQLParser::DASH: {
              setState(671);
              antlrcpp::downCast<ColumnExprPrecedence2Context *>(_localctx)->operator_ = match(HogQLParser::DASH);
              break;
            }

            case HogQLParser::CONCAT: {
              setState(672);
              antlrcpp::downCast<ColumnExprPrecedence2Context *>(_localctx)->operator_ = match(HogQLParser::CONCAT);
              break;
            }

          default:
            throw NoViableAltException(this);
          }
          setState(675);
          antlrcpp::downCast<ColumnExprPrecedence2Context *>(_localctx)->right = columnExpr(17);
          break;
        }

        case 3: {
          auto newContext = _tracker.createInstance<ColumnExprPrecedence3Context>(_tracker.createInstance<ColumnExprContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->left = previousContext;
          pushNewRecursionContext(newContext, startState, RuleColumnExpr);
          setState(676);

          if (!(precpred(_ctx, 15))) throw FailedPredicateException(this, "precpred(_ctx, 15)");
          setState(701);
          _errHandler->sync(this);
          switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 86, _ctx)) {
          case 1: {
            setState(677);
            antlrcpp::downCast<ColumnExprPrecedence3Context *>(_localctx)->operator_ = match(HogQLParser::EQ_DOUBLE);
            break;
          }

          case 2: {
            setState(678);
            antlrcpp::downCast<ColumnExprPrecedence3Context *>(_localctx)->operator_ = match(HogQLParser::EQ_SINGLE);
            break;
          }

          case 3: {
            setState(679);
            antlrcpp::downCast<ColumnExprPrecedence3Context *>(_localctx)->operator_ = match(HogQLParser::NOT_EQ);
            break;
          }

          case 4: {
            setState(680);
            antlrcpp::downCast<ColumnExprPrecedence3Context *>(_localctx)->operator_ = match(HogQLParser::LT_EQ);
            break;
          }

          case 5: {
            setState(681);
            antlrcpp::downCast<ColumnExprPrecedence3Context *>(_localctx)->operator_ = match(HogQLParser::LT);
            break;
          }

          case 6: {
            setState(682);
            antlrcpp::downCast<ColumnExprPrecedence3Context *>(_localctx)->operator_ = match(HogQLParser::GT_EQ);
            break;
          }

          case 7: {
            setState(683);
            antlrcpp::downCast<ColumnExprPrecedence3Context *>(_localctx)->operator_ = match(HogQLParser::GT);
            break;
          }

          case 8: {
            setState(685);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == HogQLParser::NOT) {
              setState(684);
              antlrcpp::downCast<ColumnExprPrecedence3Context *>(_localctx)->operator_ = match(HogQLParser::NOT);
            }
            setState(687);
            match(HogQLParser::IN);
            setState(689);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == HogQLParser::COHORT) {
              setState(688);
              match(HogQLParser::COHORT);
            }
            break;
          }

          case 9: {
            setState(692);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == HogQLParser::NOT) {
              setState(691);
              antlrcpp::downCast<ColumnExprPrecedence3Context *>(_localctx)->operator_ = match(HogQLParser::NOT);
            }
            setState(694);
            _la = _input->LA(1);
            if (!(_la == HogQLParser::ILIKE

            || _la == HogQLParser::LIKE)) {
            _errHandler->recoverInline(this);
            }
            else {
              _errHandler->reportMatch(this);
              consume();
            }
            break;
          }

          case 10: {
            setState(695);
            antlrcpp::downCast<ColumnExprPrecedence3Context *>(_localctx)->operator_ = match(HogQLParser::REGEX_SINGLE);
            break;
          }

          case 11: {
            setState(696);
            antlrcpp::downCast<ColumnExprPrecedence3Context *>(_localctx)->operator_ = match(HogQLParser::REGEX_DOUBLE);
            break;
          }

          case 12: {
            setState(697);
            antlrcpp::downCast<ColumnExprPrecedence3Context *>(_localctx)->operator_ = match(HogQLParser::NOT_REGEX);
            break;
          }

          case 13: {
            setState(698);
            antlrcpp::downCast<ColumnExprPrecedence3Context *>(_localctx)->operator_ = match(HogQLParser::IREGEX_SINGLE);
            break;
          }

          case 14: {
            setState(699);
            antlrcpp::downCast<ColumnExprPrecedence3Context *>(_localctx)->operator_ = match(HogQLParser::IREGEX_DOUBLE);
            break;
          }

          case 15: {
            setState(700);
            antlrcpp::downCast<ColumnExprPrecedence3Context *>(_localctx)->operator_ = match(HogQLParser::NOT_IREGEX);
            break;
          }

          default:
            break;
          }
          setState(703);
          antlrcpp::downCast<ColumnExprPrecedence3Context *>(_localctx)->right = columnExpr(16);
          break;
        }

        case 4: {
          auto newContext = _tracker.createInstance<ColumnExprNullishContext>(_tracker.createInstance<ColumnExprContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleColumnExpr);
          setState(704);

          if (!(precpred(_ctx, 13))) throw FailedPredicateException(this, "precpred(_ctx, 13)");
          setState(705);
          match(HogQLParser::NULLISH);
          setState(706);
          columnExpr(14);
          break;
        }

        case 5: {
          auto newContext = _tracker.createInstance<ColumnExprAndContext>(_tracker.createInstance<ColumnExprContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleColumnExpr);
          setState(707);

          if (!(precpred(_ctx, 11))) throw FailedPredicateException(this, "precpred(_ctx, 11)");
          setState(708);
          match(HogQLParser::AND);
          setState(709);
          columnExpr(12);
          break;
        }

        case 6: {
          auto newContext = _tracker.createInstance<ColumnExprOrContext>(_tracker.createInstance<ColumnExprContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleColumnExpr);
          setState(710);

          if (!(precpred(_ctx, 10))) throw FailedPredicateException(this, "precpred(_ctx, 10)");
          setState(711);
          match(HogQLParser::OR);
          setState(712);
          columnExpr(11);
          break;
        }

        case 7: {
          auto newContext = _tracker.createInstance<ColumnExprBetweenContext>(_tracker.createInstance<ColumnExprContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleColumnExpr);
          setState(713);

          if (!(precpred(_ctx, 9))) throw FailedPredicateException(this, "precpred(_ctx, 9)");
          setState(715);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == HogQLParser::NOT) {
            setState(714);
            match(HogQLParser::NOT);
          }
          setState(717);
          match(HogQLParser::BETWEEN);
          setState(718);
          columnExpr(0);
          setState(719);
          match(HogQLParser::AND);
          setState(720);
          columnExpr(10);
          break;
        }

        case 8: {
          auto newContext = _tracker.createInstance<ColumnExprTernaryOpContext>(_tracker.createInstance<ColumnExprContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleColumnExpr);
          setState(722);

          if (!(precpred(_ctx, 8))) throw FailedPredicateException(this, "precpred(_ctx, 8)");
          setState(723);
          match(HogQLParser::QUERY);
          setState(724);
          columnExpr(0);
          setState(725);
          match(HogQLParser::COLON);
          setState(726);
          columnExpr(8);
          break;
        }

        case 9: {
          auto newContext = _tracker.createInstance<ColumnExprArrayAccessContext>(_tracker.createInstance<ColumnExprContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleColumnExpr);
          setState(728);

          if (!(precpred(_ctx, 21))) throw FailedPredicateException(this, "precpred(_ctx, 21)");
          setState(729);
          match(HogQLParser::LBRACKET);
          setState(730);
          columnExpr(0);
          setState(731);
          match(HogQLParser::RBRACKET);
          break;
        }

        case 10: {
          auto newContext = _tracker.createInstance<ColumnExprTupleAccessContext>(_tracker.createInstance<ColumnExprContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleColumnExpr);
          setState(733);

          if (!(precpred(_ctx, 20))) throw FailedPredicateException(this, "precpred(_ctx, 20)");
          setState(734);
          match(HogQLParser::DOT);
          setState(735);
          match(HogQLParser::DECIMAL_LITERAL);
          break;
        }

        case 11: {
          auto newContext = _tracker.createInstance<ColumnExprPropertyAccessContext>(_tracker.createInstance<ColumnExprContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleColumnExpr);
          setState(736);

          if (!(precpred(_ctx, 19))) throw FailedPredicateException(this, "precpred(_ctx, 19)");
          setState(737);
          match(HogQLParser::DOT);
          setState(738);
          identifier();
          break;
        }

        case 12: {
          auto newContext = _tracker.createInstance<ColumnExprIsNullContext>(_tracker.createInstance<ColumnExprContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleColumnExpr);
          setState(739);

          if (!(precpred(_ctx, 14))) throw FailedPredicateException(this, "precpred(_ctx, 14)");
          setState(740);
          match(HogQLParser::IS);
          setState(742);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == HogQLParser::NOT) {
            setState(741);
            match(HogQLParser::NOT);
          }
          setState(744);
          match(HogQLParser::NULL_SQL);
          break;
        }

        case 13: {
          auto newContext = _tracker.createInstance<ColumnExprAliasContext>(_tracker.createInstance<ColumnExprContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleColumnExpr);
          setState(745);

          if (!(precpred(_ctx, 7))) throw FailedPredicateException(this, "precpred(_ctx, 7)");
          setState(751);
          _errHandler->sync(this);
          switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 89, _ctx)) {
          case 1: {
            setState(746);
            alias();
            break;
          }

          case 2: {
            setState(747);
            match(HogQLParser::AS);
            setState(748);
            identifier();
            break;
          }

          case 3: {
            setState(749);
            match(HogQLParser::AS);
            setState(750);
            match(HogQLParser::STRING_LITERAL);
            break;
          }

          default:
            break;
          }
          break;
        }

        default:
          break;
        } 
      }
      setState(757);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 91, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- ColumnArgListContext ------------------------------------------------------------------

HogQLParser::ColumnArgListContext::ColumnArgListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<HogQLParser::ColumnArgExprContext *> HogQLParser::ColumnArgListContext::columnArgExpr() {
  return getRuleContexts<HogQLParser::ColumnArgExprContext>();
}

HogQLParser::ColumnArgExprContext* HogQLParser::ColumnArgListContext::columnArgExpr(size_t i) {
  return getRuleContext<HogQLParser::ColumnArgExprContext>(i);
}

std::vector<tree::TerminalNode *> HogQLParser::ColumnArgListContext::COMMA() {
  return getTokens(HogQLParser::COMMA);
}

tree::TerminalNode* HogQLParser::ColumnArgListContext::COMMA(size_t i) {
  return getToken(HogQLParser::COMMA, i);
}


size_t HogQLParser::ColumnArgListContext::getRuleIndex() const {
  return HogQLParser::RuleColumnArgList;
}


std::any HogQLParser::ColumnArgListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnArgList(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::ColumnArgListContext* HogQLParser::columnArgList() {
  ColumnArgListContext *_localctx = _tracker.createInstance<ColumnArgListContext>(_ctx, getState());
  enterRule(_localctx, 76, HogQLParser::RuleColumnArgList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(758);
    columnArgExpr();
    setState(763);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == HogQLParser::COMMA) {
      setState(759);
      match(HogQLParser::COMMA);
      setState(760);
      columnArgExpr();
      setState(765);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ColumnArgExprContext ------------------------------------------------------------------

HogQLParser::ColumnArgExprContext::ColumnArgExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HogQLParser::ColumnLambdaExprContext* HogQLParser::ColumnArgExprContext::columnLambdaExpr() {
  return getRuleContext<HogQLParser::ColumnLambdaExprContext>(0);
}

HogQLParser::ColumnExprContext* HogQLParser::ColumnArgExprContext::columnExpr() {
  return getRuleContext<HogQLParser::ColumnExprContext>(0);
}


size_t HogQLParser::ColumnArgExprContext::getRuleIndex() const {
  return HogQLParser::RuleColumnArgExpr;
}


std::any HogQLParser::ColumnArgExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnArgExpr(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::ColumnArgExprContext* HogQLParser::columnArgExpr() {
  ColumnArgExprContext *_localctx = _tracker.createInstance<ColumnArgExprContext>(_ctx, getState());
  enterRule(_localctx, 78, HogQLParser::RuleColumnArgExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(768);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 93, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(766);
      columnLambdaExpr();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(767);
      columnExpr(0);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ColumnLambdaExprContext ------------------------------------------------------------------

HogQLParser::ColumnLambdaExprContext::ColumnLambdaExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::ColumnLambdaExprContext::ARROW() {
  return getToken(HogQLParser::ARROW, 0);
}

HogQLParser::ColumnExprContext* HogQLParser::ColumnLambdaExprContext::columnExpr() {
  return getRuleContext<HogQLParser::ColumnExprContext>(0);
}

tree::TerminalNode* HogQLParser::ColumnLambdaExprContext::LPAREN() {
  return getToken(HogQLParser::LPAREN, 0);
}

std::vector<HogQLParser::IdentifierContext *> HogQLParser::ColumnLambdaExprContext::identifier() {
  return getRuleContexts<HogQLParser::IdentifierContext>();
}

HogQLParser::IdentifierContext* HogQLParser::ColumnLambdaExprContext::identifier(size_t i) {
  return getRuleContext<HogQLParser::IdentifierContext>(i);
}

tree::TerminalNode* HogQLParser::ColumnLambdaExprContext::RPAREN() {
  return getToken(HogQLParser::RPAREN, 0);
}

std::vector<tree::TerminalNode *> HogQLParser::ColumnLambdaExprContext::COMMA() {
  return getTokens(HogQLParser::COMMA);
}

tree::TerminalNode* HogQLParser::ColumnLambdaExprContext::COMMA(size_t i) {
  return getToken(HogQLParser::COMMA, i);
}


size_t HogQLParser::ColumnLambdaExprContext::getRuleIndex() const {
  return HogQLParser::RuleColumnLambdaExpr;
}


std::any HogQLParser::ColumnLambdaExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnLambdaExpr(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::ColumnLambdaExprContext* HogQLParser::columnLambdaExpr() {
  ColumnLambdaExprContext *_localctx = _tracker.createInstance<ColumnLambdaExprContext>(_ctx, getState());
  enterRule(_localctx, 80, HogQLParser::RuleColumnLambdaExpr);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(789);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case HogQLParser::LPAREN: {
        setState(770);
        match(HogQLParser::LPAREN);
        setState(771);
        identifier();
        setState(776);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == HogQLParser::COMMA) {
          setState(772);
          match(HogQLParser::COMMA);
          setState(773);
          identifier();
          setState(778);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(779);
        match(HogQLParser::RPAREN);
        break;
      }

      case HogQLParser::AFTER:
      case HogQLParser::ALIAS:
      case HogQLParser::ALL:
      case HogQLParser::ALTER:
      case HogQLParser::AND:
      case HogQLParser::ANTI:
      case HogQLParser::ANY:
      case HogQLParser::ARRAY:
      case HogQLParser::AS:
      case HogQLParser::ASCENDING:
      case HogQLParser::ASOF:
      case HogQLParser::AST:
      case HogQLParser::ASYNC:
      case HogQLParser::ATTACH:
      case HogQLParser::BETWEEN:
      case HogQLParser::BOTH:
      case HogQLParser::BY:
      case HogQLParser::CASE:
      case HogQLParser::CAST:
      case HogQLParser::CHECK:
      case HogQLParser::CLEAR:
      case HogQLParser::CLUSTER:
      case HogQLParser::CODEC:
      case HogQLParser::COLLATE:
      case HogQLParser::COLUMN:
      case HogQLParser::COMMENT:
      case HogQLParser::CONSTRAINT:
      case HogQLParser::CREATE:
      case HogQLParser::CROSS:
      case HogQLParser::CUBE:
      case HogQLParser::CURRENT:
      case HogQLParser::DATABASE:
      case HogQLParser::DATABASES:
      case HogQLParser::DATE:
      case HogQLParser::DAY:
      case HogQLParser::DEDUPLICATE:
      case HogQLParser::DEFAULT:
      case HogQLParser::DELAY:
      case HogQLParser::DELETE:
      case HogQLParser::DESC:
      case HogQLParser::DESCENDING:
      case HogQLParser::DESCRIBE:
      case HogQLParser::DETACH:
      case HogQLParser::DICTIONARIES:
      case HogQLParser::DICTIONARY:
      case HogQLParser::DISK:
      case HogQLParser::DISTINCT:
      case HogQLParser::DISTRIBUTED:
      case HogQLParser::DROP:
      case HogQLParser::ELSE:
      case HogQLParser::END:
      case HogQLParser::ENGINE:
      case HogQLParser::EVENTS:
      case HogQLParser::EXISTS:
      case HogQLParser::EXPLAIN:
      case HogQLParser::EXPRESSION:
      case HogQLParser::EXTRACT:
      case HogQLParser::FETCHES:
      case HogQLParser::FINAL:
      case HogQLParser::FIRST:
      case HogQLParser::FLUSH:
      case HogQLParser::FOLLOWING:
      case HogQLParser::FOR:
      case HogQLParser::FORMAT:
      case HogQLParser::FREEZE:
      case HogQLParser::FROM:
      case HogQLParser::FULL:
      case HogQLParser::FUNCTION:
      case HogQLParser::GLOBAL:
      case HogQLParser::GRANULARITY:
      case HogQLParser::GROUP:
      case HogQLParser::HAVING:
      case HogQLParser::HIERARCHICAL:
      case HogQLParser::HOUR:
      case HogQLParser::ID:
      case HogQLParser::IF:
      case HogQLParser::ILIKE:
      case HogQLParser::IN:
      case HogQLParser::INDEX:
      case HogQLParser::INJECTIVE:
      case HogQLParser::INNER:
      case HogQLParser::INSERT:
      case HogQLParser::INTERVAL:
      case HogQLParser::INTO:
      case HogQLParser::IS:
      case HogQLParser::IS_OBJECT_ID:
      case HogQLParser::JOIN:
      case HogQLParser::KEY:
      case HogQLParser::KILL:
      case HogQLParser::LAST:
      case HogQLParser::LAYOUT:
      case HogQLParser::LEADING:
      case HogQLParser::LEFT:
      case HogQLParser::LIFETIME:
      case HogQLParser::LIKE:
      case HogQLParser::LIMIT:
      case HogQLParser::LIVE:
      case HogQLParser::LOCAL:
      case HogQLParser::LOGS:
      case HogQLParser::MATERIALIZE:
      case HogQLParser::MATERIALIZED:
      case HogQLParser::MAX:
      case HogQLParser::MERGES:
      case HogQLParser::MIN:
      case HogQLParser::MINUTE:
      case HogQLParser::MODIFY:
      case HogQLParser::MONTH:
      case HogQLParser::MOVE:
      case HogQLParser::MUTATION:
      case HogQLParser::NO:
      case HogQLParser::NOT:
      case HogQLParser::NULLS:
      case HogQLParser::OFFSET:
      case HogQLParser::ON:
      case HogQLParser::OPTIMIZE:
      case HogQLParser::OR:
      case HogQLParser::ORDER:
      case HogQLParser::OUTER:
      case HogQLParser::OUTFILE:
      case HogQLParser::OVER:
      case HogQLParser::PARTITION:
      case HogQLParser::POPULATE:
      case HogQLParser::PRECEDING:
      case HogQLParser::PREWHERE:
      case HogQLParser::PRIMARY:
      case HogQLParser::QUARTER:
      case HogQLParser::RANGE:
      case HogQLParser::RELOAD:
      case HogQLParser::REMOVE:
      case HogQLParser::RENAME:
      case HogQLParser::REPLACE:
      case HogQLParser::REPLICA:
      case HogQLParser::REPLICATED:
      case HogQLParser::RIGHT:
      case HogQLParser::ROLLUP:
      case HogQLParser::ROW:
      case HogQLParser::ROWS:
      case HogQLParser::SAMPLE:
      case HogQLParser::SECOND:
      case HogQLParser::SELECT:
      case HogQLParser::SEMI:
      case HogQLParser::SENDS:
      case HogQLParser::SET:
      case HogQLParser::SETTINGS:
      case HogQLParser::SHOW:
      case HogQLParser::SOURCE:
      case HogQLParser::START:
      case HogQLParser::STOP:
      case HogQLParser::SUBSTRING:
      case HogQLParser::SYNC:
      case HogQLParser::SYNTAX:
      case HogQLParser::SYSTEM:
      case HogQLParser::TABLE:
      case HogQLParser::TABLES:
      case HogQLParser::TEMPORARY:
      case HogQLParser::TEST:
      case HogQLParser::THEN:
      case HogQLParser::TIES:
      case HogQLParser::TIMEOUT:
      case HogQLParser::TIMESTAMP:
      case HogQLParser::TO:
      case HogQLParser::TOP:
      case HogQLParser::TOTALS:
      case HogQLParser::TRAILING:
      case HogQLParser::TRIM:
      case HogQLParser::TRUNCATE:
      case HogQLParser::TTL:
      case HogQLParser::TYPE:
      case HogQLParser::UNBOUNDED:
      case HogQLParser::UNION:
      case HogQLParser::UPDATE:
      case HogQLParser::USE:
      case HogQLParser::USING:
      case HogQLParser::UUID:
      case HogQLParser::VALUES:
      case HogQLParser::VIEW:
      case HogQLParser::VOLUME:
      case HogQLParser::WATCH:
      case HogQLParser::WEEK:
      case HogQLParser::WHEN:
      case HogQLParser::WHERE:
      case HogQLParser::WINDOW:
      case HogQLParser::WITH:
      case HogQLParser::YEAR:
      case HogQLParser::JSON_FALSE:
      case HogQLParser::JSON_TRUE:
      case HogQLParser::IDENTIFIER: {
        setState(781);
        identifier();
        setState(786);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == HogQLParser::COMMA) {
          setState(782);
          match(HogQLParser::COMMA);
          setState(783);
          identifier();
          setState(788);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(791);
    match(HogQLParser::ARROW);
    setState(792);
    columnExpr(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WithExprListContext ------------------------------------------------------------------

HogQLParser::WithExprListContext::WithExprListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<HogQLParser::WithExprContext *> HogQLParser::WithExprListContext::withExpr() {
  return getRuleContexts<HogQLParser::WithExprContext>();
}

HogQLParser::WithExprContext* HogQLParser::WithExprListContext::withExpr(size_t i) {
  return getRuleContext<HogQLParser::WithExprContext>(i);
}

std::vector<tree::TerminalNode *> HogQLParser::WithExprListContext::COMMA() {
  return getTokens(HogQLParser::COMMA);
}

tree::TerminalNode* HogQLParser::WithExprListContext::COMMA(size_t i) {
  return getToken(HogQLParser::COMMA, i);
}


size_t HogQLParser::WithExprListContext::getRuleIndex() const {
  return HogQLParser::RuleWithExprList;
}


std::any HogQLParser::WithExprListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitWithExprList(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::WithExprListContext* HogQLParser::withExprList() {
  WithExprListContext *_localctx = _tracker.createInstance<WithExprListContext>(_ctx, getState());
  enterRule(_localctx, 82, HogQLParser::RuleWithExprList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(794);
    withExpr();
    setState(799);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == HogQLParser::COMMA) {
      setState(795);
      match(HogQLParser::COMMA);
      setState(796);
      withExpr();
      setState(801);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WithExprContext ------------------------------------------------------------------

HogQLParser::WithExprContext::WithExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t HogQLParser::WithExprContext::getRuleIndex() const {
  return HogQLParser::RuleWithExpr;
}

void HogQLParser::WithExprContext::copyFrom(WithExprContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- WithExprColumnContext ------------------------------------------------------------------

HogQLParser::ColumnExprContext* HogQLParser::WithExprColumnContext::columnExpr() {
  return getRuleContext<HogQLParser::ColumnExprContext>(0);
}

tree::TerminalNode* HogQLParser::WithExprColumnContext::AS() {
  return getToken(HogQLParser::AS, 0);
}

HogQLParser::IdentifierContext* HogQLParser::WithExprColumnContext::identifier() {
  return getRuleContext<HogQLParser::IdentifierContext>(0);
}

HogQLParser::WithExprColumnContext::WithExprColumnContext(WithExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::WithExprColumnContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitWithExprColumn(this);
  else
    return visitor->visitChildren(this);
}
//----------------- WithExprSubqueryContext ------------------------------------------------------------------

HogQLParser::IdentifierContext* HogQLParser::WithExprSubqueryContext::identifier() {
  return getRuleContext<HogQLParser::IdentifierContext>(0);
}

tree::TerminalNode* HogQLParser::WithExprSubqueryContext::AS() {
  return getToken(HogQLParser::AS, 0);
}

tree::TerminalNode* HogQLParser::WithExprSubqueryContext::LPAREN() {
  return getToken(HogQLParser::LPAREN, 0);
}

HogQLParser::SelectUnionStmtContext* HogQLParser::WithExprSubqueryContext::selectUnionStmt() {
  return getRuleContext<HogQLParser::SelectUnionStmtContext>(0);
}

tree::TerminalNode* HogQLParser::WithExprSubqueryContext::RPAREN() {
  return getToken(HogQLParser::RPAREN, 0);
}

HogQLParser::WithExprSubqueryContext::WithExprSubqueryContext(WithExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::WithExprSubqueryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitWithExprSubquery(this);
  else
    return visitor->visitChildren(this);
}
HogQLParser::WithExprContext* HogQLParser::withExpr() {
  WithExprContext *_localctx = _tracker.createInstance<WithExprContext>(_ctx, getState());
  enterRule(_localctx, 84, HogQLParser::RuleWithExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(812);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 98, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<HogQLParser::WithExprSubqueryContext>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(802);
      identifier();
      setState(803);
      match(HogQLParser::AS);
      setState(804);
      match(HogQLParser::LPAREN);
      setState(805);
      selectUnionStmt();
      setState(806);
      match(HogQLParser::RPAREN);
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<HogQLParser::WithExprColumnContext>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(808);
      columnExpr(0);
      setState(809);
      match(HogQLParser::AS);
      setState(810);
      identifier();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ColumnIdentifierContext ------------------------------------------------------------------

HogQLParser::ColumnIdentifierContext::ColumnIdentifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::ColumnIdentifierContext::PLACEHOLDER() {
  return getToken(HogQLParser::PLACEHOLDER, 0);
}

HogQLParser::NestedIdentifierContext* HogQLParser::ColumnIdentifierContext::nestedIdentifier() {
  return getRuleContext<HogQLParser::NestedIdentifierContext>(0);
}

HogQLParser::TableIdentifierContext* HogQLParser::ColumnIdentifierContext::tableIdentifier() {
  return getRuleContext<HogQLParser::TableIdentifierContext>(0);
}

tree::TerminalNode* HogQLParser::ColumnIdentifierContext::DOT() {
  return getToken(HogQLParser::DOT, 0);
}


size_t HogQLParser::ColumnIdentifierContext::getRuleIndex() const {
  return HogQLParser::RuleColumnIdentifier;
}


std::any HogQLParser::ColumnIdentifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnIdentifier(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::ColumnIdentifierContext* HogQLParser::columnIdentifier() {
  ColumnIdentifierContext *_localctx = _tracker.createInstance<ColumnIdentifierContext>(_ctx, getState());
  enterRule(_localctx, 86, HogQLParser::RuleColumnIdentifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(821);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case HogQLParser::PLACEHOLDER: {
        enterOuterAlt(_localctx, 1);
        setState(814);
        match(HogQLParser::PLACEHOLDER);
        break;
      }

      case HogQLParser::AFTER:
      case HogQLParser::ALIAS:
      case HogQLParser::ALL:
      case HogQLParser::ALTER:
      case HogQLParser::AND:
      case HogQLParser::ANTI:
      case HogQLParser::ANY:
      case HogQLParser::ARRAY:
      case HogQLParser::AS:
      case HogQLParser::ASCENDING:
      case HogQLParser::ASOF:
      case HogQLParser::AST:
      case HogQLParser::ASYNC:
      case HogQLParser::ATTACH:
      case HogQLParser::BETWEEN:
      case HogQLParser::BOTH:
      case HogQLParser::BY:
      case HogQLParser::CASE:
      case HogQLParser::CAST:
      case HogQLParser::CHECK:
      case HogQLParser::CLEAR:
      case HogQLParser::CLUSTER:
      case HogQLParser::CODEC:
      case HogQLParser::COLLATE:
      case HogQLParser::COLUMN:
      case HogQLParser::COMMENT:
      case HogQLParser::CONSTRAINT:
      case HogQLParser::CREATE:
      case HogQLParser::CROSS:
      case HogQLParser::CUBE:
      case HogQLParser::CURRENT:
      case HogQLParser::DATABASE:
      case HogQLParser::DATABASES:
      case HogQLParser::DATE:
      case HogQLParser::DAY:
      case HogQLParser::DEDUPLICATE:
      case HogQLParser::DEFAULT:
      case HogQLParser::DELAY:
      case HogQLParser::DELETE:
      case HogQLParser::DESC:
      case HogQLParser::DESCENDING:
      case HogQLParser::DESCRIBE:
      case HogQLParser::DETACH:
      case HogQLParser::DICTIONARIES:
      case HogQLParser::DICTIONARY:
      case HogQLParser::DISK:
      case HogQLParser::DISTINCT:
      case HogQLParser::DISTRIBUTED:
      case HogQLParser::DROP:
      case HogQLParser::ELSE:
      case HogQLParser::END:
      case HogQLParser::ENGINE:
      case HogQLParser::EVENTS:
      case HogQLParser::EXISTS:
      case HogQLParser::EXPLAIN:
      case HogQLParser::EXPRESSION:
      case HogQLParser::EXTRACT:
      case HogQLParser::FETCHES:
      case HogQLParser::FINAL:
      case HogQLParser::FIRST:
      case HogQLParser::FLUSH:
      case HogQLParser::FOLLOWING:
      case HogQLParser::FOR:
      case HogQLParser::FORMAT:
      case HogQLParser::FREEZE:
      case HogQLParser::FROM:
      case HogQLParser::FULL:
      case HogQLParser::FUNCTION:
      case HogQLParser::GLOBAL:
      case HogQLParser::GRANULARITY:
      case HogQLParser::GROUP:
      case HogQLParser::HAVING:
      case HogQLParser::HIERARCHICAL:
      case HogQLParser::HOUR:
      case HogQLParser::ID:
      case HogQLParser::IF:
      case HogQLParser::ILIKE:
      case HogQLParser::IN:
      case HogQLParser::INDEX:
      case HogQLParser::INJECTIVE:
      case HogQLParser::INNER:
      case HogQLParser::INSERT:
      case HogQLParser::INTERVAL:
      case HogQLParser::INTO:
      case HogQLParser::IS:
      case HogQLParser::IS_OBJECT_ID:
      case HogQLParser::JOIN:
      case HogQLParser::KEY:
      case HogQLParser::KILL:
      case HogQLParser::LAST:
      case HogQLParser::LAYOUT:
      case HogQLParser::LEADING:
      case HogQLParser::LEFT:
      case HogQLParser::LIFETIME:
      case HogQLParser::LIKE:
      case HogQLParser::LIMIT:
      case HogQLParser::LIVE:
      case HogQLParser::LOCAL:
      case HogQLParser::LOGS:
      case HogQLParser::MATERIALIZE:
      case HogQLParser::MATERIALIZED:
      case HogQLParser::MAX:
      case HogQLParser::MERGES:
      case HogQLParser::MIN:
      case HogQLParser::MINUTE:
      case HogQLParser::MODIFY:
      case HogQLParser::MONTH:
      case HogQLParser::MOVE:
      case HogQLParser::MUTATION:
      case HogQLParser::NO:
      case HogQLParser::NOT:
      case HogQLParser::NULLS:
      case HogQLParser::OFFSET:
      case HogQLParser::ON:
      case HogQLParser::OPTIMIZE:
      case HogQLParser::OR:
      case HogQLParser::ORDER:
      case HogQLParser::OUTER:
      case HogQLParser::OUTFILE:
      case HogQLParser::OVER:
      case HogQLParser::PARTITION:
      case HogQLParser::POPULATE:
      case HogQLParser::PRECEDING:
      case HogQLParser::PREWHERE:
      case HogQLParser::PRIMARY:
      case HogQLParser::QUARTER:
      case HogQLParser::RANGE:
      case HogQLParser::RELOAD:
      case HogQLParser::REMOVE:
      case HogQLParser::RENAME:
      case HogQLParser::REPLACE:
      case HogQLParser::REPLICA:
      case HogQLParser::REPLICATED:
      case HogQLParser::RIGHT:
      case HogQLParser::ROLLUP:
      case HogQLParser::ROW:
      case HogQLParser::ROWS:
      case HogQLParser::SAMPLE:
      case HogQLParser::SECOND:
      case HogQLParser::SELECT:
      case HogQLParser::SEMI:
      case HogQLParser::SENDS:
      case HogQLParser::SET:
      case HogQLParser::SETTINGS:
      case HogQLParser::SHOW:
      case HogQLParser::SOURCE:
      case HogQLParser::START:
      case HogQLParser::STOP:
      case HogQLParser::SUBSTRING:
      case HogQLParser::SYNC:
      case HogQLParser::SYNTAX:
      case HogQLParser::SYSTEM:
      case HogQLParser::TABLE:
      case HogQLParser::TABLES:
      case HogQLParser::TEMPORARY:
      case HogQLParser::TEST:
      case HogQLParser::THEN:
      case HogQLParser::TIES:
      case HogQLParser::TIMEOUT:
      case HogQLParser::TIMESTAMP:
      case HogQLParser::TO:
      case HogQLParser::TOP:
      case HogQLParser::TOTALS:
      case HogQLParser::TRAILING:
      case HogQLParser::TRIM:
      case HogQLParser::TRUNCATE:
      case HogQLParser::TTL:
      case HogQLParser::TYPE:
      case HogQLParser::UNBOUNDED:
      case HogQLParser::UNION:
      case HogQLParser::UPDATE:
      case HogQLParser::USE:
      case HogQLParser::USING:
      case HogQLParser::UUID:
      case HogQLParser::VALUES:
      case HogQLParser::VIEW:
      case HogQLParser::VOLUME:
      case HogQLParser::WATCH:
      case HogQLParser::WEEK:
      case HogQLParser::WHEN:
      case HogQLParser::WHERE:
      case HogQLParser::WINDOW:
      case HogQLParser::WITH:
      case HogQLParser::YEAR:
      case HogQLParser::JSON_FALSE:
      case HogQLParser::JSON_TRUE:
      case HogQLParser::IDENTIFIER: {
        enterOuterAlt(_localctx, 2);
        setState(818);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 99, _ctx)) {
        case 1: {
          setState(815);
          tableIdentifier();
          setState(816);
          match(HogQLParser::DOT);
          break;
        }

        default:
          break;
        }
        setState(820);
        nestedIdentifier();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NestedIdentifierContext ------------------------------------------------------------------

HogQLParser::NestedIdentifierContext::NestedIdentifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<HogQLParser::IdentifierContext *> HogQLParser::NestedIdentifierContext::identifier() {
  return getRuleContexts<HogQLParser::IdentifierContext>();
}

HogQLParser::IdentifierContext* HogQLParser::NestedIdentifierContext::identifier(size_t i) {
  return getRuleContext<HogQLParser::IdentifierContext>(i);
}

std::vector<tree::TerminalNode *> HogQLParser::NestedIdentifierContext::DOT() {
  return getTokens(HogQLParser::DOT);
}

tree::TerminalNode* HogQLParser::NestedIdentifierContext::DOT(size_t i) {
  return getToken(HogQLParser::DOT, i);
}


size_t HogQLParser::NestedIdentifierContext::getRuleIndex() const {
  return HogQLParser::RuleNestedIdentifier;
}


std::any HogQLParser::NestedIdentifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitNestedIdentifier(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::NestedIdentifierContext* HogQLParser::nestedIdentifier() {
  NestedIdentifierContext *_localctx = _tracker.createInstance<NestedIdentifierContext>(_ctx, getState());
  enterRule(_localctx, 88, HogQLParser::RuleNestedIdentifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(823);
    identifier();
    setState(828);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 101, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(824);
        match(HogQLParser::DOT);
        setState(825);
        identifier(); 
      }
      setState(830);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 101, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TableExprContext ------------------------------------------------------------------

HogQLParser::TableExprContext::TableExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t HogQLParser::TableExprContext::getRuleIndex() const {
  return HogQLParser::RuleTableExpr;
}

void HogQLParser::TableExprContext::copyFrom(TableExprContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- TableExprIdentifierContext ------------------------------------------------------------------

HogQLParser::TableIdentifierContext* HogQLParser::TableExprIdentifierContext::tableIdentifier() {
  return getRuleContext<HogQLParser::TableIdentifierContext>(0);
}

HogQLParser::TableExprIdentifierContext::TableExprIdentifierContext(TableExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::TableExprIdentifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitTableExprIdentifier(this);
  else
    return visitor->visitChildren(this);
}
//----------------- TableExprPlaceholderContext ------------------------------------------------------------------

tree::TerminalNode* HogQLParser::TableExprPlaceholderContext::PLACEHOLDER() {
  return getToken(HogQLParser::PLACEHOLDER, 0);
}

HogQLParser::TableExprPlaceholderContext::TableExprPlaceholderContext(TableExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::TableExprPlaceholderContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitTableExprPlaceholder(this);
  else
    return visitor->visitChildren(this);
}
//----------------- TableExprSubqueryContext ------------------------------------------------------------------

tree::TerminalNode* HogQLParser::TableExprSubqueryContext::LPAREN() {
  return getToken(HogQLParser::LPAREN, 0);
}

HogQLParser::SelectUnionStmtContext* HogQLParser::TableExprSubqueryContext::selectUnionStmt() {
  return getRuleContext<HogQLParser::SelectUnionStmtContext>(0);
}

tree::TerminalNode* HogQLParser::TableExprSubqueryContext::RPAREN() {
  return getToken(HogQLParser::RPAREN, 0);
}

HogQLParser::TableExprSubqueryContext::TableExprSubqueryContext(TableExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::TableExprSubqueryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitTableExprSubquery(this);
  else
    return visitor->visitChildren(this);
}
//----------------- TableExprAliasContext ------------------------------------------------------------------

HogQLParser::TableExprContext* HogQLParser::TableExprAliasContext::tableExpr() {
  return getRuleContext<HogQLParser::TableExprContext>(0);
}

HogQLParser::AliasContext* HogQLParser::TableExprAliasContext::alias() {
  return getRuleContext<HogQLParser::AliasContext>(0);
}

tree::TerminalNode* HogQLParser::TableExprAliasContext::AS() {
  return getToken(HogQLParser::AS, 0);
}

HogQLParser::IdentifierContext* HogQLParser::TableExprAliasContext::identifier() {
  return getRuleContext<HogQLParser::IdentifierContext>(0);
}

HogQLParser::TableExprAliasContext::TableExprAliasContext(TableExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::TableExprAliasContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitTableExprAlias(this);
  else
    return visitor->visitChildren(this);
}
//----------------- TableExprFunctionContext ------------------------------------------------------------------

HogQLParser::TableFunctionExprContext* HogQLParser::TableExprFunctionContext::tableFunctionExpr() {
  return getRuleContext<HogQLParser::TableFunctionExprContext>(0);
}

HogQLParser::TableExprFunctionContext::TableExprFunctionContext(TableExprContext *ctx) { copyFrom(ctx); }


std::any HogQLParser::TableExprFunctionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitTableExprFunction(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::TableExprContext* HogQLParser::tableExpr() {
   return tableExpr(0);
}

HogQLParser::TableExprContext* HogQLParser::tableExpr(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  HogQLParser::TableExprContext *_localctx = _tracker.createInstance<TableExprContext>(_ctx, parentState);
  HogQLParser::TableExprContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 90;
  enterRecursionRule(_localctx, 90, HogQLParser::RuleTableExpr, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(839);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 102, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<TableExprIdentifierContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;

      setState(832);
      tableIdentifier();
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<TableExprFunctionContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(833);
      tableFunctionExpr();
      break;
    }

    case 3: {
      _localctx = _tracker.createInstance<TableExprSubqueryContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(834);
      match(HogQLParser::LPAREN);
      setState(835);
      selectUnionStmt();
      setState(836);
      match(HogQLParser::RPAREN);
      break;
    }

    case 4: {
      _localctx = _tracker.createInstance<TableExprPlaceholderContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(838);
      match(HogQLParser::PLACEHOLDER);
      break;
    }

    default:
      break;
    }
    _ctx->stop = _input->LT(-1);
    setState(849);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 104, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        auto newContext = _tracker.createInstance<TableExprAliasContext>(_tracker.createInstance<TableExprContext>(parentContext, parentState));
        _localctx = newContext;
        pushNewRecursionContext(newContext, startState, RuleTableExpr);
        setState(841);

        if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
        setState(845);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case HogQLParser::DATE:
          case HogQLParser::FIRST:
          case HogQLParser::ID:
          case HogQLParser::KEY:
          case HogQLParser::IDENTIFIER: {
            setState(842);
            alias();
            break;
          }

          case HogQLParser::AS: {
            setState(843);
            match(HogQLParser::AS);
            setState(844);
            identifier();
            break;
          }

        default:
          throw NoViableAltException(this);
        } 
      }
      setState(851);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 104, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- TableFunctionExprContext ------------------------------------------------------------------

HogQLParser::TableFunctionExprContext::TableFunctionExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HogQLParser::IdentifierContext* HogQLParser::TableFunctionExprContext::identifier() {
  return getRuleContext<HogQLParser::IdentifierContext>(0);
}

tree::TerminalNode* HogQLParser::TableFunctionExprContext::LPAREN() {
  return getToken(HogQLParser::LPAREN, 0);
}

tree::TerminalNode* HogQLParser::TableFunctionExprContext::RPAREN() {
  return getToken(HogQLParser::RPAREN, 0);
}

HogQLParser::TableArgListContext* HogQLParser::TableFunctionExprContext::tableArgList() {
  return getRuleContext<HogQLParser::TableArgListContext>(0);
}


size_t HogQLParser::TableFunctionExprContext::getRuleIndex() const {
  return HogQLParser::RuleTableFunctionExpr;
}


std::any HogQLParser::TableFunctionExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitTableFunctionExpr(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::TableFunctionExprContext* HogQLParser::tableFunctionExpr() {
  TableFunctionExprContext *_localctx = _tracker.createInstance<TableFunctionExprContext>(_ctx, getState());
  enterRule(_localctx, 92, HogQLParser::RuleTableFunctionExpr);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(852);
    identifier();
    setState(853);
    match(HogQLParser::LPAREN);
    setState(855);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -33554436) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & -1) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 128)) & -9) != 0) || ((((_la - 192) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 192)) & 69122459133) != 0)) {
      setState(854);
      tableArgList();
    }
    setState(857);
    match(HogQLParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TableIdentifierContext ------------------------------------------------------------------

HogQLParser::TableIdentifierContext::TableIdentifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HogQLParser::IdentifierContext* HogQLParser::TableIdentifierContext::identifier() {
  return getRuleContext<HogQLParser::IdentifierContext>(0);
}

HogQLParser::DatabaseIdentifierContext* HogQLParser::TableIdentifierContext::databaseIdentifier() {
  return getRuleContext<HogQLParser::DatabaseIdentifierContext>(0);
}

tree::TerminalNode* HogQLParser::TableIdentifierContext::DOT() {
  return getToken(HogQLParser::DOT, 0);
}


size_t HogQLParser::TableIdentifierContext::getRuleIndex() const {
  return HogQLParser::RuleTableIdentifier;
}


std::any HogQLParser::TableIdentifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitTableIdentifier(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::TableIdentifierContext* HogQLParser::tableIdentifier() {
  TableIdentifierContext *_localctx = _tracker.createInstance<TableIdentifierContext>(_ctx, getState());
  enterRule(_localctx, 94, HogQLParser::RuleTableIdentifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(862);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 106, _ctx)) {
    case 1: {
      setState(859);
      databaseIdentifier();
      setState(860);
      match(HogQLParser::DOT);
      break;
    }

    default:
      break;
    }
    setState(864);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TableArgListContext ------------------------------------------------------------------

HogQLParser::TableArgListContext::TableArgListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<HogQLParser::ColumnExprContext *> HogQLParser::TableArgListContext::columnExpr() {
  return getRuleContexts<HogQLParser::ColumnExprContext>();
}

HogQLParser::ColumnExprContext* HogQLParser::TableArgListContext::columnExpr(size_t i) {
  return getRuleContext<HogQLParser::ColumnExprContext>(i);
}

std::vector<tree::TerminalNode *> HogQLParser::TableArgListContext::COMMA() {
  return getTokens(HogQLParser::COMMA);
}

tree::TerminalNode* HogQLParser::TableArgListContext::COMMA(size_t i) {
  return getToken(HogQLParser::COMMA, i);
}


size_t HogQLParser::TableArgListContext::getRuleIndex() const {
  return HogQLParser::RuleTableArgList;
}


std::any HogQLParser::TableArgListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitTableArgList(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::TableArgListContext* HogQLParser::tableArgList() {
  TableArgListContext *_localctx = _tracker.createInstance<TableArgListContext>(_ctx, getState());
  enterRule(_localctx, 96, HogQLParser::RuleTableArgList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(866);
    columnExpr(0);
    setState(871);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == HogQLParser::COMMA) {
      setState(867);
      match(HogQLParser::COMMA);
      setState(868);
      columnExpr(0);
      setState(873);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DatabaseIdentifierContext ------------------------------------------------------------------

HogQLParser::DatabaseIdentifierContext::DatabaseIdentifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HogQLParser::IdentifierContext* HogQLParser::DatabaseIdentifierContext::identifier() {
  return getRuleContext<HogQLParser::IdentifierContext>(0);
}


size_t HogQLParser::DatabaseIdentifierContext::getRuleIndex() const {
  return HogQLParser::RuleDatabaseIdentifier;
}


std::any HogQLParser::DatabaseIdentifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitDatabaseIdentifier(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::DatabaseIdentifierContext* HogQLParser::databaseIdentifier() {
  DatabaseIdentifierContext *_localctx = _tracker.createInstance<DatabaseIdentifierContext>(_ctx, getState());
  enterRule(_localctx, 98, HogQLParser::RuleDatabaseIdentifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(874);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FloatingLiteralContext ------------------------------------------------------------------

HogQLParser::FloatingLiteralContext::FloatingLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::FloatingLiteralContext::FLOATING_LITERAL() {
  return getToken(HogQLParser::FLOATING_LITERAL, 0);
}

tree::TerminalNode* HogQLParser::FloatingLiteralContext::DOT() {
  return getToken(HogQLParser::DOT, 0);
}

std::vector<tree::TerminalNode *> HogQLParser::FloatingLiteralContext::DECIMAL_LITERAL() {
  return getTokens(HogQLParser::DECIMAL_LITERAL);
}

tree::TerminalNode* HogQLParser::FloatingLiteralContext::DECIMAL_LITERAL(size_t i) {
  return getToken(HogQLParser::DECIMAL_LITERAL, i);
}

tree::TerminalNode* HogQLParser::FloatingLiteralContext::OCTAL_LITERAL() {
  return getToken(HogQLParser::OCTAL_LITERAL, 0);
}


size_t HogQLParser::FloatingLiteralContext::getRuleIndex() const {
  return HogQLParser::RuleFloatingLiteral;
}


std::any HogQLParser::FloatingLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitFloatingLiteral(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::FloatingLiteralContext* HogQLParser::floatingLiteral() {
  FloatingLiteralContext *_localctx = _tracker.createInstance<FloatingLiteralContext>(_ctx, getState());
  enterRule(_localctx, 100, HogQLParser::RuleFloatingLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(884);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case HogQLParser::FLOATING_LITERAL: {
        enterOuterAlt(_localctx, 1);
        setState(876);
        match(HogQLParser::FLOATING_LITERAL);
        break;
      }

      case HogQLParser::DOT: {
        enterOuterAlt(_localctx, 2);
        setState(877);
        match(HogQLParser::DOT);
        setState(878);
        _la = _input->LA(1);
        if (!(_la == HogQLParser::OCTAL_LITERAL

        || _la == HogQLParser::DECIMAL_LITERAL)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

      case HogQLParser::DECIMAL_LITERAL: {
        enterOuterAlt(_localctx, 3);
        setState(879);
        match(HogQLParser::DECIMAL_LITERAL);
        setState(880);
        match(HogQLParser::DOT);
        setState(882);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 108, _ctx)) {
        case 1: {
          setState(881);
          _la = _input->LA(1);
          if (!(_la == HogQLParser::OCTAL_LITERAL

          || _la == HogQLParser::DECIMAL_LITERAL)) {
          _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
          break;
        }

        default:
          break;
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NumberLiteralContext ------------------------------------------------------------------

HogQLParser::NumberLiteralContext::NumberLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HogQLParser::FloatingLiteralContext* HogQLParser::NumberLiteralContext::floatingLiteral() {
  return getRuleContext<HogQLParser::FloatingLiteralContext>(0);
}

tree::TerminalNode* HogQLParser::NumberLiteralContext::OCTAL_LITERAL() {
  return getToken(HogQLParser::OCTAL_LITERAL, 0);
}

tree::TerminalNode* HogQLParser::NumberLiteralContext::DECIMAL_LITERAL() {
  return getToken(HogQLParser::DECIMAL_LITERAL, 0);
}

tree::TerminalNode* HogQLParser::NumberLiteralContext::HEXADECIMAL_LITERAL() {
  return getToken(HogQLParser::HEXADECIMAL_LITERAL, 0);
}

tree::TerminalNode* HogQLParser::NumberLiteralContext::INF() {
  return getToken(HogQLParser::INF, 0);
}

tree::TerminalNode* HogQLParser::NumberLiteralContext::NAN_SQL() {
  return getToken(HogQLParser::NAN_SQL, 0);
}

tree::TerminalNode* HogQLParser::NumberLiteralContext::PLUS() {
  return getToken(HogQLParser::PLUS, 0);
}

tree::TerminalNode* HogQLParser::NumberLiteralContext::DASH() {
  return getToken(HogQLParser::DASH, 0);
}


size_t HogQLParser::NumberLiteralContext::getRuleIndex() const {
  return HogQLParser::RuleNumberLiteral;
}


std::any HogQLParser::NumberLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitNumberLiteral(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::NumberLiteralContext* HogQLParser::numberLiteral() {
  NumberLiteralContext *_localctx = _tracker.createInstance<NumberLiteralContext>(_ctx, getState());
  enterRule(_localctx, 102, HogQLParser::RuleNumberLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(887);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HogQLParser::DASH

    || _la == HogQLParser::PLUS) {
      setState(886);
      _la = _input->LA(1);
      if (!(_la == HogQLParser::DASH

      || _la == HogQLParser::PLUS)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(895);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 111, _ctx)) {
    case 1: {
      setState(889);
      floatingLiteral();
      break;
    }

    case 2: {
      setState(890);
      match(HogQLParser::OCTAL_LITERAL);
      break;
    }

    case 3: {
      setState(891);
      match(HogQLParser::DECIMAL_LITERAL);
      break;
    }

    case 4: {
      setState(892);
      match(HogQLParser::HEXADECIMAL_LITERAL);
      break;
    }

    case 5: {
      setState(893);
      match(HogQLParser::INF);
      break;
    }

    case 6: {
      setState(894);
      match(HogQLParser::NAN_SQL);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LiteralContext ------------------------------------------------------------------

HogQLParser::LiteralContext::LiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HogQLParser::NumberLiteralContext* HogQLParser::LiteralContext::numberLiteral() {
  return getRuleContext<HogQLParser::NumberLiteralContext>(0);
}

tree::TerminalNode* HogQLParser::LiteralContext::STRING_LITERAL() {
  return getToken(HogQLParser::STRING_LITERAL, 0);
}

tree::TerminalNode* HogQLParser::LiteralContext::NULL_SQL() {
  return getToken(HogQLParser::NULL_SQL, 0);
}


size_t HogQLParser::LiteralContext::getRuleIndex() const {
  return HogQLParser::RuleLiteral;
}


std::any HogQLParser::LiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitLiteral(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::LiteralContext* HogQLParser::literal() {
  LiteralContext *_localctx = _tracker.createInstance<LiteralContext>(_ctx, getState());
  enterRule(_localctx, 104, HogQLParser::RuleLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(900);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case HogQLParser::INF:
      case HogQLParser::NAN_SQL:
      case HogQLParser::FLOATING_LITERAL:
      case HogQLParser::OCTAL_LITERAL:
      case HogQLParser::DECIMAL_LITERAL:
      case HogQLParser::HEXADECIMAL_LITERAL:
      case HogQLParser::DASH:
      case HogQLParser::DOT:
      case HogQLParser::PLUS: {
        enterOuterAlt(_localctx, 1);
        setState(897);
        numberLiteral();
        break;
      }

      case HogQLParser::STRING_LITERAL: {
        enterOuterAlt(_localctx, 2);
        setState(898);
        match(HogQLParser::STRING_LITERAL);
        break;
      }

      case HogQLParser::NULL_SQL: {
        enterOuterAlt(_localctx, 3);
        setState(899);
        match(HogQLParser::NULL_SQL);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IntervalContext ------------------------------------------------------------------

HogQLParser::IntervalContext::IntervalContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::IntervalContext::SECOND() {
  return getToken(HogQLParser::SECOND, 0);
}

tree::TerminalNode* HogQLParser::IntervalContext::MINUTE() {
  return getToken(HogQLParser::MINUTE, 0);
}

tree::TerminalNode* HogQLParser::IntervalContext::HOUR() {
  return getToken(HogQLParser::HOUR, 0);
}

tree::TerminalNode* HogQLParser::IntervalContext::DAY() {
  return getToken(HogQLParser::DAY, 0);
}

tree::TerminalNode* HogQLParser::IntervalContext::WEEK() {
  return getToken(HogQLParser::WEEK, 0);
}

tree::TerminalNode* HogQLParser::IntervalContext::MONTH() {
  return getToken(HogQLParser::MONTH, 0);
}

tree::TerminalNode* HogQLParser::IntervalContext::QUARTER() {
  return getToken(HogQLParser::QUARTER, 0);
}

tree::TerminalNode* HogQLParser::IntervalContext::YEAR() {
  return getToken(HogQLParser::YEAR, 0);
}


size_t HogQLParser::IntervalContext::getRuleIndex() const {
  return HogQLParser::RuleInterval;
}


std::any HogQLParser::IntervalContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitInterval(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::IntervalContext* HogQLParser::interval() {
  IntervalContext *_localctx = _tracker.createInstance<IntervalContext>(_ctx, getState());
  enterRule(_localctx, 106, HogQLParser::RuleInterval);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(902);
    _la = _input->LA(1);
    if (!(_la == HogQLParser::DAY || ((((_la - 76) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 76)) & 72057615512764417) != 0) || ((((_la - 145) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 145)) & 36283883716609) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KeywordContext ------------------------------------------------------------------

HogQLParser::KeywordContext::KeywordContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::KeywordContext::AFTER() {
  return getToken(HogQLParser::AFTER, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::ALIAS() {
  return getToken(HogQLParser::ALIAS, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::ALL() {
  return getToken(HogQLParser::ALL, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::ALTER() {
  return getToken(HogQLParser::ALTER, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::AND() {
  return getToken(HogQLParser::AND, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::ANTI() {
  return getToken(HogQLParser::ANTI, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::ANY() {
  return getToken(HogQLParser::ANY, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::ARRAY() {
  return getToken(HogQLParser::ARRAY, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::AS() {
  return getToken(HogQLParser::AS, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::ASCENDING() {
  return getToken(HogQLParser::ASCENDING, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::ASOF() {
  return getToken(HogQLParser::ASOF, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::AST() {
  return getToken(HogQLParser::AST, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::ASYNC() {
  return getToken(HogQLParser::ASYNC, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::ATTACH() {
  return getToken(HogQLParser::ATTACH, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::BETWEEN() {
  return getToken(HogQLParser::BETWEEN, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::BOTH() {
  return getToken(HogQLParser::BOTH, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::BY() {
  return getToken(HogQLParser::BY, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::CASE() {
  return getToken(HogQLParser::CASE, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::CAST() {
  return getToken(HogQLParser::CAST, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::CHECK() {
  return getToken(HogQLParser::CHECK, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::CLEAR() {
  return getToken(HogQLParser::CLEAR, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::CLUSTER() {
  return getToken(HogQLParser::CLUSTER, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::CODEC() {
  return getToken(HogQLParser::CODEC, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::COLLATE() {
  return getToken(HogQLParser::COLLATE, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::COLUMN() {
  return getToken(HogQLParser::COLUMN, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::COMMENT() {
  return getToken(HogQLParser::COMMENT, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::CONSTRAINT() {
  return getToken(HogQLParser::CONSTRAINT, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::CREATE() {
  return getToken(HogQLParser::CREATE, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::CROSS() {
  return getToken(HogQLParser::CROSS, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::CUBE() {
  return getToken(HogQLParser::CUBE, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::CURRENT() {
  return getToken(HogQLParser::CURRENT, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::DATABASE() {
  return getToken(HogQLParser::DATABASE, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::DATABASES() {
  return getToken(HogQLParser::DATABASES, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::DATE() {
  return getToken(HogQLParser::DATE, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::DEDUPLICATE() {
  return getToken(HogQLParser::DEDUPLICATE, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::DEFAULT() {
  return getToken(HogQLParser::DEFAULT, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::DELAY() {
  return getToken(HogQLParser::DELAY, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::DELETE() {
  return getToken(HogQLParser::DELETE, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::DESCRIBE() {
  return getToken(HogQLParser::DESCRIBE, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::DESC() {
  return getToken(HogQLParser::DESC, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::DESCENDING() {
  return getToken(HogQLParser::DESCENDING, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::DETACH() {
  return getToken(HogQLParser::DETACH, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::DICTIONARIES() {
  return getToken(HogQLParser::DICTIONARIES, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::DICTIONARY() {
  return getToken(HogQLParser::DICTIONARY, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::DISK() {
  return getToken(HogQLParser::DISK, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::DISTINCT() {
  return getToken(HogQLParser::DISTINCT, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::DISTRIBUTED() {
  return getToken(HogQLParser::DISTRIBUTED, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::DROP() {
  return getToken(HogQLParser::DROP, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::ELSE() {
  return getToken(HogQLParser::ELSE, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::END() {
  return getToken(HogQLParser::END, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::ENGINE() {
  return getToken(HogQLParser::ENGINE, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::EVENTS() {
  return getToken(HogQLParser::EVENTS, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::EXISTS() {
  return getToken(HogQLParser::EXISTS, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::EXPLAIN() {
  return getToken(HogQLParser::EXPLAIN, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::EXPRESSION() {
  return getToken(HogQLParser::EXPRESSION, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::EXTRACT() {
  return getToken(HogQLParser::EXTRACT, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::FETCHES() {
  return getToken(HogQLParser::FETCHES, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::FINAL() {
  return getToken(HogQLParser::FINAL, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::FIRST() {
  return getToken(HogQLParser::FIRST, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::FLUSH() {
  return getToken(HogQLParser::FLUSH, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::FOR() {
  return getToken(HogQLParser::FOR, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::FOLLOWING() {
  return getToken(HogQLParser::FOLLOWING, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::FORMAT() {
  return getToken(HogQLParser::FORMAT, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::FREEZE() {
  return getToken(HogQLParser::FREEZE, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::FROM() {
  return getToken(HogQLParser::FROM, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::FULL() {
  return getToken(HogQLParser::FULL, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::FUNCTION() {
  return getToken(HogQLParser::FUNCTION, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::GLOBAL() {
  return getToken(HogQLParser::GLOBAL, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::GRANULARITY() {
  return getToken(HogQLParser::GRANULARITY, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::GROUP() {
  return getToken(HogQLParser::GROUP, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::HAVING() {
  return getToken(HogQLParser::HAVING, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::HIERARCHICAL() {
  return getToken(HogQLParser::HIERARCHICAL, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::ID() {
  return getToken(HogQLParser::ID, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::IF() {
  return getToken(HogQLParser::IF, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::ILIKE() {
  return getToken(HogQLParser::ILIKE, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::IN() {
  return getToken(HogQLParser::IN, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::INDEX() {
  return getToken(HogQLParser::INDEX, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::INJECTIVE() {
  return getToken(HogQLParser::INJECTIVE, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::INNER() {
  return getToken(HogQLParser::INNER, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::INSERT() {
  return getToken(HogQLParser::INSERT, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::INTERVAL() {
  return getToken(HogQLParser::INTERVAL, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::INTO() {
  return getToken(HogQLParser::INTO, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::IS() {
  return getToken(HogQLParser::IS, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::IS_OBJECT_ID() {
  return getToken(HogQLParser::IS_OBJECT_ID, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::JOIN() {
  return getToken(HogQLParser::JOIN, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::JSON_FALSE() {
  return getToken(HogQLParser::JSON_FALSE, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::JSON_TRUE() {
  return getToken(HogQLParser::JSON_TRUE, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::KEY() {
  return getToken(HogQLParser::KEY, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::KILL() {
  return getToken(HogQLParser::KILL, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::LAST() {
  return getToken(HogQLParser::LAST, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::LAYOUT() {
  return getToken(HogQLParser::LAYOUT, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::LEADING() {
  return getToken(HogQLParser::LEADING, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::LEFT() {
  return getToken(HogQLParser::LEFT, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::LIFETIME() {
  return getToken(HogQLParser::LIFETIME, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::LIKE() {
  return getToken(HogQLParser::LIKE, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::LIMIT() {
  return getToken(HogQLParser::LIMIT, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::LIVE() {
  return getToken(HogQLParser::LIVE, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::LOCAL() {
  return getToken(HogQLParser::LOCAL, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::LOGS() {
  return getToken(HogQLParser::LOGS, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::MATERIALIZE() {
  return getToken(HogQLParser::MATERIALIZE, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::MATERIALIZED() {
  return getToken(HogQLParser::MATERIALIZED, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::MAX() {
  return getToken(HogQLParser::MAX, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::MERGES() {
  return getToken(HogQLParser::MERGES, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::MIN() {
  return getToken(HogQLParser::MIN, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::MODIFY() {
  return getToken(HogQLParser::MODIFY, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::MOVE() {
  return getToken(HogQLParser::MOVE, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::MUTATION() {
  return getToken(HogQLParser::MUTATION, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::NO() {
  return getToken(HogQLParser::NO, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::NOT() {
  return getToken(HogQLParser::NOT, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::NULLS() {
  return getToken(HogQLParser::NULLS, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::OFFSET() {
  return getToken(HogQLParser::OFFSET, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::ON() {
  return getToken(HogQLParser::ON, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::OPTIMIZE() {
  return getToken(HogQLParser::OPTIMIZE, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::OR() {
  return getToken(HogQLParser::OR, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::ORDER() {
  return getToken(HogQLParser::ORDER, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::OUTER() {
  return getToken(HogQLParser::OUTER, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::OUTFILE() {
  return getToken(HogQLParser::OUTFILE, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::OVER() {
  return getToken(HogQLParser::OVER, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::PARTITION() {
  return getToken(HogQLParser::PARTITION, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::POPULATE() {
  return getToken(HogQLParser::POPULATE, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::PRECEDING() {
  return getToken(HogQLParser::PRECEDING, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::PREWHERE() {
  return getToken(HogQLParser::PREWHERE, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::PRIMARY() {
  return getToken(HogQLParser::PRIMARY, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::RANGE() {
  return getToken(HogQLParser::RANGE, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::RELOAD() {
  return getToken(HogQLParser::RELOAD, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::REMOVE() {
  return getToken(HogQLParser::REMOVE, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::RENAME() {
  return getToken(HogQLParser::RENAME, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::REPLACE() {
  return getToken(HogQLParser::REPLACE, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::REPLICA() {
  return getToken(HogQLParser::REPLICA, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::REPLICATED() {
  return getToken(HogQLParser::REPLICATED, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::RIGHT() {
  return getToken(HogQLParser::RIGHT, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::ROLLUP() {
  return getToken(HogQLParser::ROLLUP, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::ROW() {
  return getToken(HogQLParser::ROW, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::ROWS() {
  return getToken(HogQLParser::ROWS, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::SAMPLE() {
  return getToken(HogQLParser::SAMPLE, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::SELECT() {
  return getToken(HogQLParser::SELECT, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::SEMI() {
  return getToken(HogQLParser::SEMI, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::SENDS() {
  return getToken(HogQLParser::SENDS, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::SET() {
  return getToken(HogQLParser::SET, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::SETTINGS() {
  return getToken(HogQLParser::SETTINGS, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::SHOW() {
  return getToken(HogQLParser::SHOW, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::SOURCE() {
  return getToken(HogQLParser::SOURCE, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::START() {
  return getToken(HogQLParser::START, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::STOP() {
  return getToken(HogQLParser::STOP, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::SUBSTRING() {
  return getToken(HogQLParser::SUBSTRING, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::SYNC() {
  return getToken(HogQLParser::SYNC, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::SYNTAX() {
  return getToken(HogQLParser::SYNTAX, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::SYSTEM() {
  return getToken(HogQLParser::SYSTEM, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::TABLE() {
  return getToken(HogQLParser::TABLE, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::TABLES() {
  return getToken(HogQLParser::TABLES, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::TEMPORARY() {
  return getToken(HogQLParser::TEMPORARY, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::TEST() {
  return getToken(HogQLParser::TEST, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::THEN() {
  return getToken(HogQLParser::THEN, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::TIES() {
  return getToken(HogQLParser::TIES, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::TIMEOUT() {
  return getToken(HogQLParser::TIMEOUT, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::TIMESTAMP() {
  return getToken(HogQLParser::TIMESTAMP, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::TOTALS() {
  return getToken(HogQLParser::TOTALS, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::TRAILING() {
  return getToken(HogQLParser::TRAILING, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::TRIM() {
  return getToken(HogQLParser::TRIM, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::TRUNCATE() {
  return getToken(HogQLParser::TRUNCATE, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::TO() {
  return getToken(HogQLParser::TO, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::TOP() {
  return getToken(HogQLParser::TOP, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::TTL() {
  return getToken(HogQLParser::TTL, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::TYPE() {
  return getToken(HogQLParser::TYPE, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::UNBOUNDED() {
  return getToken(HogQLParser::UNBOUNDED, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::UNION() {
  return getToken(HogQLParser::UNION, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::UPDATE() {
  return getToken(HogQLParser::UPDATE, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::USE() {
  return getToken(HogQLParser::USE, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::USING() {
  return getToken(HogQLParser::USING, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::UUID() {
  return getToken(HogQLParser::UUID, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::VALUES() {
  return getToken(HogQLParser::VALUES, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::VIEW() {
  return getToken(HogQLParser::VIEW, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::VOLUME() {
  return getToken(HogQLParser::VOLUME, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::WATCH() {
  return getToken(HogQLParser::WATCH, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::WHEN() {
  return getToken(HogQLParser::WHEN, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::WHERE() {
  return getToken(HogQLParser::WHERE, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::WINDOW() {
  return getToken(HogQLParser::WINDOW, 0);
}

tree::TerminalNode* HogQLParser::KeywordContext::WITH() {
  return getToken(HogQLParser::WITH, 0);
}


size_t HogQLParser::KeywordContext::getRuleIndex() const {
  return HogQLParser::RuleKeyword;
}


std::any HogQLParser::KeywordContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitKeyword(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::KeywordContext* HogQLParser::keyword() {
  KeywordContext *_localctx = _tracker.createInstance<KeywordContext>(_ctx, getState());
  enterRule(_localctx, 108, HogQLParser::RuleKeyword);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(904);
    _la = _input->LA(1);
    if (!(((((_la - 2) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 2)) & -34368126977) != 0) || ((((_la - 66) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 66)) & -1288627627820033) != 0) || ((((_la - 130) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 130)) & 8034421735228932089) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KeywordForAliasContext ------------------------------------------------------------------

HogQLParser::KeywordForAliasContext::KeywordForAliasContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::KeywordForAliasContext::DATE() {
  return getToken(HogQLParser::DATE, 0);
}

tree::TerminalNode* HogQLParser::KeywordForAliasContext::FIRST() {
  return getToken(HogQLParser::FIRST, 0);
}

tree::TerminalNode* HogQLParser::KeywordForAliasContext::ID() {
  return getToken(HogQLParser::ID, 0);
}

tree::TerminalNode* HogQLParser::KeywordForAliasContext::KEY() {
  return getToken(HogQLParser::KEY, 0);
}


size_t HogQLParser::KeywordForAliasContext::getRuleIndex() const {
  return HogQLParser::RuleKeywordForAlias;
}


std::any HogQLParser::KeywordForAliasContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitKeywordForAlias(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::KeywordForAliasContext* HogQLParser::keywordForAlias() {
  KeywordForAliasContext *_localctx = _tracker.createInstance<KeywordForAliasContext>(_ctx, getState());
  enterRule(_localctx, 110, HogQLParser::RuleKeywordForAlias);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(906);
    _la = _input->LA(1);
    if (!(((((_la - 36) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 36)) & 36030996109328385) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AliasContext ------------------------------------------------------------------

HogQLParser::AliasContext::AliasContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::AliasContext::IDENTIFIER() {
  return getToken(HogQLParser::IDENTIFIER, 0);
}

HogQLParser::KeywordForAliasContext* HogQLParser::AliasContext::keywordForAlias() {
  return getRuleContext<HogQLParser::KeywordForAliasContext>(0);
}


size_t HogQLParser::AliasContext::getRuleIndex() const {
  return HogQLParser::RuleAlias;
}


std::any HogQLParser::AliasContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitAlias(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::AliasContext* HogQLParser::alias() {
  AliasContext *_localctx = _tracker.createInstance<AliasContext>(_ctx, getState());
  enterRule(_localctx, 112, HogQLParser::RuleAlias);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(910);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case HogQLParser::IDENTIFIER: {
        enterOuterAlt(_localctx, 1);
        setState(908);
        match(HogQLParser::IDENTIFIER);
        break;
      }

      case HogQLParser::DATE:
      case HogQLParser::FIRST:
      case HogQLParser::ID:
      case HogQLParser::KEY: {
        enterOuterAlt(_localctx, 2);
        setState(909);
        keywordForAlias();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IdentifierContext ------------------------------------------------------------------

HogQLParser::IdentifierContext::IdentifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::IdentifierContext::IDENTIFIER() {
  return getToken(HogQLParser::IDENTIFIER, 0);
}

HogQLParser::IntervalContext* HogQLParser::IdentifierContext::interval() {
  return getRuleContext<HogQLParser::IntervalContext>(0);
}

HogQLParser::KeywordContext* HogQLParser::IdentifierContext::keyword() {
  return getRuleContext<HogQLParser::KeywordContext>(0);
}


size_t HogQLParser::IdentifierContext::getRuleIndex() const {
  return HogQLParser::RuleIdentifier;
}


std::any HogQLParser::IdentifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitIdentifier(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::IdentifierContext* HogQLParser::identifier() {
  IdentifierContext *_localctx = _tracker.createInstance<IdentifierContext>(_ctx, getState());
  enterRule(_localctx, 114, HogQLParser::RuleIdentifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(915);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case HogQLParser::IDENTIFIER: {
        enterOuterAlt(_localctx, 1);
        setState(912);
        match(HogQLParser::IDENTIFIER);
        break;
      }

      case HogQLParser::DAY:
      case HogQLParser::HOUR:
      case HogQLParser::MINUTE:
      case HogQLParser::MONTH:
      case HogQLParser::QUARTER:
      case HogQLParser::SECOND:
      case HogQLParser::WEEK:
      case HogQLParser::YEAR: {
        enterOuterAlt(_localctx, 2);
        setState(913);
        interval();
        break;
      }

      case HogQLParser::AFTER:
      case HogQLParser::ALIAS:
      case HogQLParser::ALL:
      case HogQLParser::ALTER:
      case HogQLParser::AND:
      case HogQLParser::ANTI:
      case HogQLParser::ANY:
      case HogQLParser::ARRAY:
      case HogQLParser::AS:
      case HogQLParser::ASCENDING:
      case HogQLParser::ASOF:
      case HogQLParser::AST:
      case HogQLParser::ASYNC:
      case HogQLParser::ATTACH:
      case HogQLParser::BETWEEN:
      case HogQLParser::BOTH:
      case HogQLParser::BY:
      case HogQLParser::CASE:
      case HogQLParser::CAST:
      case HogQLParser::CHECK:
      case HogQLParser::CLEAR:
      case HogQLParser::CLUSTER:
      case HogQLParser::CODEC:
      case HogQLParser::COLLATE:
      case HogQLParser::COLUMN:
      case HogQLParser::COMMENT:
      case HogQLParser::CONSTRAINT:
      case HogQLParser::CREATE:
      case HogQLParser::CROSS:
      case HogQLParser::CUBE:
      case HogQLParser::CURRENT:
      case HogQLParser::DATABASE:
      case HogQLParser::DATABASES:
      case HogQLParser::DATE:
      case HogQLParser::DEDUPLICATE:
      case HogQLParser::DEFAULT:
      case HogQLParser::DELAY:
      case HogQLParser::DELETE:
      case HogQLParser::DESC:
      case HogQLParser::DESCENDING:
      case HogQLParser::DESCRIBE:
      case HogQLParser::DETACH:
      case HogQLParser::DICTIONARIES:
      case HogQLParser::DICTIONARY:
      case HogQLParser::DISK:
      case HogQLParser::DISTINCT:
      case HogQLParser::DISTRIBUTED:
      case HogQLParser::DROP:
      case HogQLParser::ELSE:
      case HogQLParser::END:
      case HogQLParser::ENGINE:
      case HogQLParser::EVENTS:
      case HogQLParser::EXISTS:
      case HogQLParser::EXPLAIN:
      case HogQLParser::EXPRESSION:
      case HogQLParser::EXTRACT:
      case HogQLParser::FETCHES:
      case HogQLParser::FINAL:
      case HogQLParser::FIRST:
      case HogQLParser::FLUSH:
      case HogQLParser::FOLLOWING:
      case HogQLParser::FOR:
      case HogQLParser::FORMAT:
      case HogQLParser::FREEZE:
      case HogQLParser::FROM:
      case HogQLParser::FULL:
      case HogQLParser::FUNCTION:
      case HogQLParser::GLOBAL:
      case HogQLParser::GRANULARITY:
      case HogQLParser::GROUP:
      case HogQLParser::HAVING:
      case HogQLParser::HIERARCHICAL:
      case HogQLParser::ID:
      case HogQLParser::IF:
      case HogQLParser::ILIKE:
      case HogQLParser::IN:
      case HogQLParser::INDEX:
      case HogQLParser::INJECTIVE:
      case HogQLParser::INNER:
      case HogQLParser::INSERT:
      case HogQLParser::INTERVAL:
      case HogQLParser::INTO:
      case HogQLParser::IS:
      case HogQLParser::IS_OBJECT_ID:
      case HogQLParser::JOIN:
      case HogQLParser::KEY:
      case HogQLParser::KILL:
      case HogQLParser::LAST:
      case HogQLParser::LAYOUT:
      case HogQLParser::LEADING:
      case HogQLParser::LEFT:
      case HogQLParser::LIFETIME:
      case HogQLParser::LIKE:
      case HogQLParser::LIMIT:
      case HogQLParser::LIVE:
      case HogQLParser::LOCAL:
      case HogQLParser::LOGS:
      case HogQLParser::MATERIALIZE:
      case HogQLParser::MATERIALIZED:
      case HogQLParser::MAX:
      case HogQLParser::MERGES:
      case HogQLParser::MIN:
      case HogQLParser::MODIFY:
      case HogQLParser::MOVE:
      case HogQLParser::MUTATION:
      case HogQLParser::NO:
      case HogQLParser::NOT:
      case HogQLParser::NULLS:
      case HogQLParser::OFFSET:
      case HogQLParser::ON:
      case HogQLParser::OPTIMIZE:
      case HogQLParser::OR:
      case HogQLParser::ORDER:
      case HogQLParser::OUTER:
      case HogQLParser::OUTFILE:
      case HogQLParser::OVER:
      case HogQLParser::PARTITION:
      case HogQLParser::POPULATE:
      case HogQLParser::PRECEDING:
      case HogQLParser::PREWHERE:
      case HogQLParser::PRIMARY:
      case HogQLParser::RANGE:
      case HogQLParser::RELOAD:
      case HogQLParser::REMOVE:
      case HogQLParser::RENAME:
      case HogQLParser::REPLACE:
      case HogQLParser::REPLICA:
      case HogQLParser::REPLICATED:
      case HogQLParser::RIGHT:
      case HogQLParser::ROLLUP:
      case HogQLParser::ROW:
      case HogQLParser::ROWS:
      case HogQLParser::SAMPLE:
      case HogQLParser::SELECT:
      case HogQLParser::SEMI:
      case HogQLParser::SENDS:
      case HogQLParser::SET:
      case HogQLParser::SETTINGS:
      case HogQLParser::SHOW:
      case HogQLParser::SOURCE:
      case HogQLParser::START:
      case HogQLParser::STOP:
      case HogQLParser::SUBSTRING:
      case HogQLParser::SYNC:
      case HogQLParser::SYNTAX:
      case HogQLParser::SYSTEM:
      case HogQLParser::TABLE:
      case HogQLParser::TABLES:
      case HogQLParser::TEMPORARY:
      case HogQLParser::TEST:
      case HogQLParser::THEN:
      case HogQLParser::TIES:
      case HogQLParser::TIMEOUT:
      case HogQLParser::TIMESTAMP:
      case HogQLParser::TO:
      case HogQLParser::TOP:
      case HogQLParser::TOTALS:
      case HogQLParser::TRAILING:
      case HogQLParser::TRIM:
      case HogQLParser::TRUNCATE:
      case HogQLParser::TTL:
      case HogQLParser::TYPE:
      case HogQLParser::UNBOUNDED:
      case HogQLParser::UNION:
      case HogQLParser::UPDATE:
      case HogQLParser::USE:
      case HogQLParser::USING:
      case HogQLParser::UUID:
      case HogQLParser::VALUES:
      case HogQLParser::VIEW:
      case HogQLParser::VOLUME:
      case HogQLParser::WATCH:
      case HogQLParser::WHEN:
      case HogQLParser::WHERE:
      case HogQLParser::WINDOW:
      case HogQLParser::WITH:
      case HogQLParser::JSON_FALSE:
      case HogQLParser::JSON_TRUE: {
        enterOuterAlt(_localctx, 3);
        setState(914);
        keyword();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnumValueContext ------------------------------------------------------------------

HogQLParser::EnumValueContext::EnumValueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HogQLParser::EnumValueContext::STRING_LITERAL() {
  return getToken(HogQLParser::STRING_LITERAL, 0);
}

tree::TerminalNode* HogQLParser::EnumValueContext::EQ_SINGLE() {
  return getToken(HogQLParser::EQ_SINGLE, 0);
}

HogQLParser::NumberLiteralContext* HogQLParser::EnumValueContext::numberLiteral() {
  return getRuleContext<HogQLParser::NumberLiteralContext>(0);
}


size_t HogQLParser::EnumValueContext::getRuleIndex() const {
  return HogQLParser::RuleEnumValue;
}


std::any HogQLParser::EnumValueContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HogQLParserVisitor*>(visitor))
    return parserVisitor->visitEnumValue(this);
  else
    return visitor->visitChildren(this);
}

HogQLParser::EnumValueContext* HogQLParser::enumValue() {
  EnumValueContext *_localctx = _tracker.createInstance<EnumValueContext>(_ctx, getState());
  enterRule(_localctx, 116, HogQLParser::RuleEnumValue);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(917);
    match(HogQLParser::STRING_LITERAL);
    setState(918);
    match(HogQLParser::EQ_SINGLE);
    setState(919);
    numberLiteral();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

bool HogQLParser::sempred(RuleContext *context, size_t ruleIndex, size_t predicateIndex) {
  switch (ruleIndex) {
    case 18: return joinExprSempred(antlrcpp::downCast<JoinExprContext *>(context), predicateIndex);
    case 37: return columnExprSempred(antlrcpp::downCast<ColumnExprContext *>(context), predicateIndex);
    case 45: return tableExprSempred(antlrcpp::downCast<TableExprContext *>(context), predicateIndex);

  default:
    break;
  }
  return true;
}

bool HogQLParser::joinExprSempred(JoinExprContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 0: return precpred(_ctx, 3);
    case 1: return precpred(_ctx, 4);

  default:
    break;
  }
  return true;
}

bool HogQLParser::columnExprSempred(ColumnExprContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 2: return precpred(_ctx, 17);
    case 3: return precpred(_ctx, 16);
    case 4: return precpred(_ctx, 15);
    case 5: return precpred(_ctx, 13);
    case 6: return precpred(_ctx, 11);
    case 7: return precpred(_ctx, 10);
    case 8: return precpred(_ctx, 9);
    case 9: return precpred(_ctx, 8);
    case 10: return precpred(_ctx, 21);
    case 11: return precpred(_ctx, 20);
    case 12: return precpred(_ctx, 19);
    case 13: return precpred(_ctx, 14);
    case 14: return precpred(_ctx, 7);

  default:
    break;
  }
  return true;
}

bool HogQLParser::tableExprSempred(TableExprContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 15: return precpred(_ctx, 2);

  default:
    break;
  }
  return true;
}

void HogQLParser::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  hogqlparserParserInitialize();
#else
  ::antlr4::internal::call_once(hogqlparserParserOnceFlag, hogqlparserParserInitialize);
#endif
}
