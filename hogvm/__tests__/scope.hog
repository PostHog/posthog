let dbl := x -> x * 2

print(dbl)
print(dbl(2))
print(dbl(8))

print('--------')

let var := 5
let varify := x -> x * var

print(varify(2))
var := 10
print(varify(2))
print(varify(8))

print('--------')

fn bigVar() {
    let var := 5
    let varify := x -> x * var
    return varify
}
let bigVarify := bigVar()

print(bigVarify(2))
print(bigVarify(8))

print('--------')

let a := 3

fn outerA() {
  print(a)
  a := 4
  print(a)
}

fn innerA() {
  print(a)
  outerA()
  print(a)
}

print(a)
innerA()
print(a)

print('--------')

let b := {'key': 3}

fn outerB() {
  print(b)
  b.key := 4
  print(b)
}

fn innerB() {
  print(b)
  outerB()
  print(b)
}

print(b)
innerB()
print(b)

print('--------')

fn outerC() {
  let x := 'outside'
  fn innerC() {
    print(x)
  }
  innerC()
}
outerC()

print('--------')

fn myFunctionOuter() {
    let b := 3
    fn myFunction(a) {
      return a + b
    }
    print(myFunction(2))
    print(myFunction(3))
}

myFunctionOuter()

print('--------')
