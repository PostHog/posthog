use serde::{Deserialize, Serialize};

#[derive(Debug, Serialize, Deserialize)]
pub enum Operation {
    GetGlobal,
    CallGlobal,
    And,
    Or,
    Not,
    Plus,
    Minus,
    Multiply,
    Divide,
    Mod,
    Eq,
    NotEq,
    Gt,
    GtEq,
    Lt,
    LtEq,
    Like,
    ILike,
    NotLike,
    NotILike,
    In,
    NotIn,
    Regex,
    NotRegex,
    IRegex,
    NotIRegex,
    InCohort,
    NotInCohort,
    True,
    False,
    Null,
    String,
    Integer,
    Float,
    Pop,
    GetLocal,
    SetLocal,
    Return,
    Jump,
    JumpIfFalse,
    DeclareFn,
    Dict,
    Array,
    Tuple,
    GetProperty,
    SetProperty,
    JumpIfStackNotNull,
    GetPropertyNullish,
    Throw,
    Try,
    PopTry,
    Callable,
    Closure,
    CallLocal,
    GetUpvalue,
    SetUpvalue,
    CloseUpvalue,
}

impl Operation {
    pub fn from_str(s: &str) -> Option<Operation> {
        match s {
            "GET_GLOBAL" => Some(Operation::GetGlobal),
            "CALL_GLOBAL" => Some(Operation::CallGlobal),
            "AND" => Some(Operation::And),
            "OR" => Some(Operation::Or),
            "NOT" => Some(Operation::Not),
            "PLUS" => Some(Operation::Plus),
            "MINUS" => Some(Operation::Minus),
            "MULTIPLY" => Some(Operation::Multiply),
            "DIVIDE" => Some(Operation::Divide),
            "MOD" => Some(Operation::Mod),
            "EQ" => Some(Operation::Eq),
            "NOT_EQ" => Some(Operation::NotEq),
            "GT" => Some(Operation::Gt),
            "GT_EQ" => Some(Operation::GtEq),
            "LT" => Some(Operation::Lt),
            "LT_EQ" => Some(Operation::LtEq),
            "LIKE" => Some(Operation::Like),
            "ILIKE" => Some(Operation::ILike),
            "NOT_LIKE" => Some(Operation::NotLike),
            "NOT_ILIKE" => Some(Operation::NotILike),
            "IN" => Some(Operation::In),
            "NOT_IN" => Some(Operation::NotIn),
            "REGEX" => Some(Operation::Regex),
            "NOT_REGEX" => Some(Operation::NotRegex),
            "IREGEX" => Some(Operation::IRegex),
            "NOT_IREGEX" => Some(Operation::NotIRegex),
            "IN_COHORT" => Some(Operation::InCohort),
            "NOT_IN_COHORT" => Some(Operation::NotInCohort),
            "TRUE" => Some(Operation::True),
            "FALSE" => Some(Operation::False),
            "NULL" => Some(Operation::Null),
            "STRING" => Some(Operation::String),
            "INTEGER" => Some(Operation::Integer),
            "FLOAT" => Some(Operation::Float),
            "POP" => Some(Operation::Pop),
            "GET_LOCAL" => Some(Operation::GetLocal),
            "SET_LOCAL" => Some(Operation::SetLocal),
            "RETURN" => Some(Operation::Return),
            "JUMP" => Some(Operation::Jump),
            "JUMP_IF_FALSE" => Some(Operation::JumpIfFalse),
            "DECLARE_FN" => Some(Operation::DeclareFn),
            "DICT" => Some(Operation::Dict),
            "ARRAY" => Some(Operation::Array),
            "TUPLE" => Some(Operation::Tuple),
            "GET_PROPERTY" => Some(Operation::GetProperty),
            "SET_PROPERTY" => Some(Operation::SetProperty),
            "JUMP_IF_STACK_NOT_NULL" => Some(Operation::JumpIfStackNotNull),
            "GET_PROPERTY_NULLISH" => Some(Operation::GetPropertyNullish),
            "THROW" => Some(Operation::Throw),
            "TRY" => Some(Operation::Try),
            "POP_TRY" => Some(Operation::PopTry),
            "CALLABLE" => Some(Operation::Callable),
            "CLOSURE" => Some(Operation::Closure),
            "CALL_LOCAL" => Some(Operation::CallLocal),
            "GET_UPVALUE" => Some(Operation::GetUpvalue),
            "SET_UPVALUE" => Some(Operation::SetUpvalue),
            "CLOSE_UPVALUE" => Some(Operation::CloseUpvalue),
            _ => None,
        }
    }

    pub fn to_str(&self) -> &str {
        match self {
            Operation::GetGlobal => "GET_GLOBAL",
            Operation::CallGlobal => "CALL_GLOBAL",
            Operation::And => "AND",
            Operation::Or => "OR",
            Operation::Not => "NOT",
            Operation::Plus => "PLUS",
            Operation::Minus => "MINUS",
            Operation::Multiply => "MULTIPLY",
            Operation::Divide => "DIVIDE",
            Operation::Mod => "MOD",
            Operation::Eq => "EQ",
            Operation::NotEq => "NOT_EQ",
            Operation::Gt => "GT",
            Operation::GtEq => "GT_EQ",
            Operation::Lt => "LT",
            Operation::LtEq => "LT_EQ",
            Operation::Like => "LIKE",
            Operation::ILike => "ILIKE",
            Operation::NotLike => "NOT_LIKE",
            Operation::NotILike => "NOT_ILIKE",
            Operation::In => "IN",
            Operation::NotIn => "NOT_IN",
            Operation::Regex => "REGEX",
            Operation::NotRegex => "NOT_REGEX",
            Operation::IRegex => "IREGEX",
            Operation::NotIRegex => "NOT_IREGEX",
            Operation::InCohort => "IN_COHORT",
            Operation::NotInCohort => "NOT_IN_COHORT",
            Operation::True => "TRUE",
            Operation::False => "FALSE",
            Operation::Null => "NULL",
            Operation::String => "STRING",
            Operation::Integer => "INTEGER",
            Operation::Float => "FLOAT",
            Operation::Pop => "POP",
            Operation::GetLocal => "GET_LOCAL",
            Operation::SetLocal => "SET_LOCAL",
            Operation::Return => "RETURN",
            Operation::Jump => "JUMP",
            Operation::JumpIfFalse => "JUMP_IF_FALSE",
            Operation::DeclareFn => "DECLARE_FN",
            Operation::Dict => "DICT",
            Operation::Array => "ARRAY",
            Operation::Tuple => "TUPLE",
            Operation::GetProperty => "GET_PROPERTY",
            Operation::SetProperty => "SET_PROPERTY",
            Operation::JumpIfStackNotNull => "JUMP_IF_STACK_NOT_NULL",
            Operation::GetPropertyNullish => "GET_PROPERTY_NULLISH",
            Operation::Throw => "THROW",
            Operation::Try => "TRY",
            Operation::PopTry => "POP_TRY",
            Operation::Callable => "CALLABLE",
            Operation::Closure => "CLOSURE",
            Operation::CallLocal => "CALL_LOCAL",
            Operation::GetUpvalue => "GET_UPVALUE",
            Operation::SetUpvalue => "SET_UPVALUE",
            Operation::CloseUpvalue => "CLOSE_UPVALUE",
        }
    }
}
