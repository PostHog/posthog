# Generated from HogQLParser.g4 by ANTLR 4.13.0
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,242,925,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,1,0,1,0,3,0,123,8,0,1,0,1,0,1,1,1,1,1,1,1,1,5,1,131,8,1,
        10,1,12,1,134,9,1,1,2,1,2,1,2,1,2,1,2,3,2,141,8,2,1,3,3,3,144,8,
        3,1,3,1,3,3,3,148,8,3,1,3,3,3,151,8,3,1,3,1,3,3,3,155,8,3,1,3,3,
        3,158,8,3,1,3,3,3,161,8,3,1,3,3,3,164,8,3,1,3,3,3,167,8,3,1,3,1,
        3,3,3,171,8,3,1,3,1,3,3,3,175,8,3,1,3,3,3,178,8,3,1,3,3,3,181,8,
        3,1,3,3,3,184,8,3,1,3,1,3,3,3,188,8,3,1,3,3,3,191,8,3,1,4,1,4,1,
        4,1,5,1,5,1,5,1,5,3,5,200,8,5,1,6,1,6,1,6,1,7,3,7,206,8,7,1,7,1,
        7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,5,
        8,225,8,8,10,8,12,8,228,9,8,1,9,1,9,1,9,1,10,1,10,1,10,1,11,1,11,
        1,11,1,11,1,11,1,11,1,11,1,11,3,11,244,8,11,1,12,1,12,1,12,1,13,
        1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,3,15,261,
        8,15,1,15,1,15,1,15,1,15,3,15,267,8,15,1,15,1,15,1,15,1,15,3,15,
        273,8,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,3,15,284,8,
        15,3,15,286,8,15,1,16,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,18,3,
        18,297,8,18,1,18,3,18,300,8,18,1,18,1,18,1,18,1,18,3,18,306,8,18,
        1,18,1,18,1,18,1,18,1,18,1,18,3,18,314,8,18,1,18,1,18,1,18,1,18,
        5,18,320,8,18,10,18,12,18,323,9,18,1,19,3,19,326,8,19,1,19,1,19,
        1,19,3,19,331,8,19,1,19,3,19,334,8,19,1,19,3,19,337,8,19,1,19,1,
        19,3,19,341,8,19,1,19,1,19,3,19,345,8,19,1,19,3,19,348,8,19,3,19,
        350,8,19,1,19,3,19,353,8,19,1,19,1,19,3,19,357,8,19,1,19,1,19,3,
        19,361,8,19,1,19,3,19,364,8,19,3,19,366,8,19,3,19,368,8,19,1,20,
        1,20,1,20,3,20,373,8,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,
        1,21,3,21,384,8,21,1,22,1,22,1,22,1,22,3,22,390,8,22,1,23,1,23,1,
        23,5,23,395,8,23,10,23,12,23,398,9,23,1,24,1,24,3,24,402,8,24,1,
        24,1,24,3,24,406,8,24,1,24,1,24,3,24,410,8,24,1,25,1,25,1,25,3,25,
        415,8,25,1,26,1,26,1,26,5,26,420,8,26,10,26,12,26,423,9,26,1,27,
        1,27,1,27,1,27,1,28,3,28,430,8,28,1,28,3,28,433,8,28,1,28,3,28,436,
        8,28,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,32,
        1,32,1,32,1,32,1,32,1,32,3,32,455,8,32,1,33,1,33,1,33,1,33,1,33,
        1,33,1,33,1,33,1,33,1,33,1,33,1,33,3,33,469,8,33,1,34,1,34,1,34,
        1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,5,35,483,8,35,10,35,
        12,35,486,9,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,5,35,495,8,35,
        10,35,12,35,498,9,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,5,35,507,
        8,35,10,35,12,35,510,9,35,1,35,1,35,1,35,1,35,1,35,3,35,517,8,35,
        1,35,1,35,3,35,521,8,35,1,36,1,36,1,36,5,36,526,8,36,10,36,12,36,
        529,9,36,1,37,1,37,1,37,3,37,534,8,37,1,37,1,37,1,37,1,37,1,37,4,
        37,541,8,37,11,37,12,37,542,1,37,1,37,3,37,547,8,37,1,37,1,37,1,
        37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,
        37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,
        37,3,37,578,8,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,
        37,1,37,1,37,1,37,1,37,1,37,3,37,595,8,37,1,37,1,37,1,37,1,37,1,
        37,1,37,1,37,1,37,1,37,1,37,3,37,607,8,37,1,37,1,37,1,37,1,37,1,
        37,1,37,1,37,1,37,3,37,617,8,37,1,37,3,37,620,8,37,1,37,1,37,3,37,
        624,8,37,1,37,3,37,627,8,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,
        37,1,37,1,37,3,37,639,8,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,
        37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,3,37,656,8,37,1,37,1,37,3,
        37,660,8,37,1,37,1,37,1,37,1,37,3,37,666,8,37,1,37,1,37,1,37,1,37,
        1,37,3,37,673,8,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,
        1,37,3,37,685,8,37,1,37,1,37,3,37,689,8,37,1,37,3,37,692,8,37,1,
        37,1,37,1,37,1,37,1,37,1,37,1,37,3,37,701,8,37,1,37,1,37,1,37,1,
        37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,3,37,715,8,37,1,37,1,
        37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,
        37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,3,37,742,8,
        37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,3,37,751,8,37,5,37,753,8,37,
        10,37,12,37,756,9,37,1,38,1,38,1,38,5,38,761,8,38,10,38,12,38,764,
        9,38,1,39,1,39,3,39,768,8,39,1,40,1,40,1,40,1,40,5,40,774,8,40,10,
        40,12,40,777,9,40,1,40,1,40,1,40,1,40,1,40,5,40,784,8,40,10,40,12,
        40,787,9,40,3,40,789,8,40,1,40,1,40,1,40,1,41,1,41,1,41,5,41,797,
        8,41,10,41,12,41,800,9,41,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,
        1,42,1,42,3,42,812,8,42,1,43,1,43,1,43,1,43,3,43,818,8,43,1,43,3,
        43,821,8,43,1,44,1,44,1,44,5,44,826,8,44,10,44,12,44,829,9,44,1,
        45,1,45,1,45,1,45,1,45,1,45,1,45,3,45,838,8,45,1,45,1,45,1,45,1,
        45,3,45,844,8,45,5,45,846,8,45,10,45,12,45,849,9,45,1,46,1,46,1,
        46,3,46,854,8,46,1,46,1,46,1,47,1,47,1,47,3,47,861,8,47,1,47,1,47,
        1,48,1,48,1,48,5,48,868,8,48,10,48,12,48,871,9,48,1,49,1,49,1,49,
        3,49,876,8,49,1,50,1,50,1,51,1,51,1,51,1,51,1,51,1,51,3,51,886,8,
        51,3,51,888,8,51,1,52,3,52,891,8,52,1,52,1,52,1,52,1,52,1,52,1,52,
        3,52,899,8,52,1,53,1,53,1,53,3,53,904,8,53,1,54,1,54,1,55,1,55,1,
        56,1,56,1,57,1,57,3,57,914,8,57,1,58,1,58,1,58,3,58,919,8,58,1,59,
        1,59,1,59,1,59,1,59,0,3,36,74,90,60,0,2,4,6,8,10,12,14,16,18,20,
        22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,
        66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,
        108,110,112,114,116,118,0,16,2,0,32,32,141,141,2,0,84,84,96,96,3,
        0,4,4,8,8,12,12,4,0,4,4,7,8,12,12,147,147,2,0,96,96,140,140,2,0,
        4,4,8,8,2,0,11,11,42,43,2,0,62,62,93,93,2,0,133,133,143,143,3,0,
        17,17,95,95,170,170,2,0,79,79,98,98,1,0,196,197,2,0,208,208,228,
        228,8,0,37,37,76,76,108,108,110,110,132,132,145,145,185,185,190,
        190,13,0,2,24,26,36,38,75,77,81,83,107,109,109,111,112,114,115,117,
        130,133,144,146,184,186,189,191,192,4,0,36,36,62,62,77,77,91,91,
        1045,0,122,1,0,0,0,2,126,1,0,0,0,4,140,1,0,0,0,6,143,1,0,0,0,8,192,
        1,0,0,0,10,195,1,0,0,0,12,201,1,0,0,0,14,205,1,0,0,0,16,211,1,0,
        0,0,18,229,1,0,0,0,20,232,1,0,0,0,22,235,1,0,0,0,24,245,1,0,0,0,
        26,248,1,0,0,0,28,252,1,0,0,0,30,285,1,0,0,0,32,287,1,0,0,0,34,290,
        1,0,0,0,36,305,1,0,0,0,38,367,1,0,0,0,40,372,1,0,0,0,42,383,1,0,
        0,0,44,385,1,0,0,0,46,391,1,0,0,0,48,399,1,0,0,0,50,411,1,0,0,0,
        52,416,1,0,0,0,54,424,1,0,0,0,56,429,1,0,0,0,58,437,1,0,0,0,60,441,
        1,0,0,0,62,445,1,0,0,0,64,454,1,0,0,0,66,468,1,0,0,0,68,470,1,0,
        0,0,70,520,1,0,0,0,72,522,1,0,0,0,74,659,1,0,0,0,76,757,1,0,0,0,
        78,767,1,0,0,0,80,788,1,0,0,0,82,793,1,0,0,0,84,811,1,0,0,0,86,820,
        1,0,0,0,88,822,1,0,0,0,90,837,1,0,0,0,92,850,1,0,0,0,94,860,1,0,
        0,0,96,864,1,0,0,0,98,875,1,0,0,0,100,877,1,0,0,0,102,887,1,0,0,
        0,104,890,1,0,0,0,106,903,1,0,0,0,108,905,1,0,0,0,110,907,1,0,0,
        0,112,909,1,0,0,0,114,913,1,0,0,0,116,918,1,0,0,0,118,920,1,0,0,
        0,120,123,3,2,1,0,121,123,3,6,3,0,122,120,1,0,0,0,122,121,1,0,0,
        0,123,124,1,0,0,0,124,125,5,0,0,1,125,1,1,0,0,0,126,132,3,4,2,0,
        127,128,5,176,0,0,128,129,5,4,0,0,129,131,3,4,2,0,130,127,1,0,0,
        0,131,134,1,0,0,0,132,130,1,0,0,0,132,133,1,0,0,0,133,3,1,0,0,0,
        134,132,1,0,0,0,135,141,3,6,3,0,136,137,5,220,0,0,137,138,3,2,1,
        0,138,139,5,236,0,0,139,141,1,0,0,0,140,135,1,0,0,0,140,136,1,0,
        0,0,141,5,1,0,0,0,142,144,3,8,4,0,143,142,1,0,0,0,143,144,1,0,0,
        0,144,145,1,0,0,0,145,147,5,146,0,0,146,148,5,49,0,0,147,146,1,0,
        0,0,147,148,1,0,0,0,148,150,1,0,0,0,149,151,3,10,5,0,150,149,1,0,
        0,0,150,151,1,0,0,0,151,152,1,0,0,0,152,154,3,72,36,0,153,155,3,
        12,6,0,154,153,1,0,0,0,154,155,1,0,0,0,155,157,1,0,0,0,156,158,3,
        14,7,0,157,156,1,0,0,0,157,158,1,0,0,0,158,160,1,0,0,0,159,161,3,
        18,9,0,160,159,1,0,0,0,160,161,1,0,0,0,161,163,1,0,0,0,162,164,3,
        20,10,0,163,162,1,0,0,0,163,164,1,0,0,0,164,166,1,0,0,0,165,167,
        3,22,11,0,166,165,1,0,0,0,166,167,1,0,0,0,167,170,1,0,0,0,168,169,
        5,189,0,0,169,171,7,0,0,0,170,168,1,0,0,0,170,171,1,0,0,0,171,174,
        1,0,0,0,172,173,5,189,0,0,173,175,5,169,0,0,174,172,1,0,0,0,174,
        175,1,0,0,0,175,177,1,0,0,0,176,178,3,24,12,0,177,176,1,0,0,0,177,
        178,1,0,0,0,178,180,1,0,0,0,179,181,3,16,8,0,180,179,1,0,0,0,180,
        181,1,0,0,0,181,183,1,0,0,0,182,184,3,26,13,0,183,182,1,0,0,0,183,
        184,1,0,0,0,184,187,1,0,0,0,185,188,3,30,15,0,186,188,3,32,16,0,
        187,185,1,0,0,0,187,186,1,0,0,0,187,188,1,0,0,0,188,190,1,0,0,0,
        189,191,3,34,17,0,190,189,1,0,0,0,190,191,1,0,0,0,191,7,1,0,0,0,
        192,193,5,189,0,0,193,194,3,82,41,0,194,9,1,0,0,0,195,196,5,168,
        0,0,196,199,5,197,0,0,197,198,5,189,0,0,198,200,5,164,0,0,199,197,
        1,0,0,0,199,200,1,0,0,0,200,11,1,0,0,0,201,202,5,68,0,0,202,203,
        3,36,18,0,203,13,1,0,0,0,204,206,7,1,0,0,205,204,1,0,0,0,205,206,
        1,0,0,0,206,207,1,0,0,0,207,208,5,9,0,0,208,209,5,90,0,0,209,210,
        3,72,36,0,210,15,1,0,0,0,211,212,5,188,0,0,212,213,3,116,58,0,213,
        214,5,10,0,0,214,215,5,220,0,0,215,216,3,56,28,0,216,226,5,236,0,
        0,217,218,5,206,0,0,218,219,3,116,58,0,219,220,5,10,0,0,220,221,
        5,220,0,0,221,222,3,56,28,0,222,223,5,236,0,0,223,225,1,0,0,0,224,
        217,1,0,0,0,225,228,1,0,0,0,226,224,1,0,0,0,226,227,1,0,0,0,227,
        17,1,0,0,0,228,226,1,0,0,0,229,230,5,129,0,0,230,231,3,74,37,0,231,
        19,1,0,0,0,232,233,5,187,0,0,233,234,3,74,37,0,234,21,1,0,0,0,235,
        236,5,73,0,0,236,243,5,18,0,0,237,238,7,0,0,0,238,239,5,220,0,0,
        239,240,3,72,36,0,240,241,5,236,0,0,241,244,1,0,0,0,242,244,3,72,
        36,0,243,237,1,0,0,0,243,242,1,0,0,0,244,23,1,0,0,0,245,246,5,74,
        0,0,246,247,3,74,37,0,247,25,1,0,0,0,248,249,5,122,0,0,249,250,5,
        18,0,0,250,251,3,46,23,0,251,27,1,0,0,0,252,253,5,122,0,0,253,254,
        5,18,0,0,254,255,3,72,36,0,255,29,1,0,0,0,256,257,5,99,0,0,257,260,
        3,74,37,0,258,259,5,206,0,0,259,261,3,74,37,0,260,258,1,0,0,0,260,
        261,1,0,0,0,261,266,1,0,0,0,262,263,5,189,0,0,263,267,5,164,0,0,
        264,265,5,18,0,0,265,267,3,72,36,0,266,262,1,0,0,0,266,264,1,0,0,
        0,266,267,1,0,0,0,267,286,1,0,0,0,268,269,5,99,0,0,269,272,3,74,
        37,0,270,271,5,189,0,0,271,273,5,164,0,0,272,270,1,0,0,0,272,273,
        1,0,0,0,273,274,1,0,0,0,274,275,5,118,0,0,275,276,3,74,37,0,276,
        286,1,0,0,0,277,278,5,99,0,0,278,279,3,74,37,0,279,280,5,118,0,0,
        280,283,3,74,37,0,281,282,5,18,0,0,282,284,3,72,36,0,283,281,1,0,
        0,0,283,284,1,0,0,0,284,286,1,0,0,0,285,256,1,0,0,0,285,268,1,0,
        0,0,285,277,1,0,0,0,286,31,1,0,0,0,287,288,5,118,0,0,288,289,3,74,
        37,0,289,33,1,0,0,0,290,291,5,150,0,0,291,292,3,52,26,0,292,35,1,
        0,0,0,293,294,6,18,-1,0,294,296,3,90,45,0,295,297,5,61,0,0,296,295,
        1,0,0,0,296,297,1,0,0,0,297,299,1,0,0,0,298,300,3,44,22,0,299,298,
        1,0,0,0,299,300,1,0,0,0,300,306,1,0,0,0,301,302,5,220,0,0,302,303,
        3,36,18,0,303,304,5,236,0,0,304,306,1,0,0,0,305,293,1,0,0,0,305,
        301,1,0,0,0,306,321,1,0,0,0,307,308,10,3,0,0,308,309,3,40,20,0,309,
        310,3,36,18,4,310,320,1,0,0,0,311,313,10,4,0,0,312,314,3,38,19,0,
        313,312,1,0,0,0,313,314,1,0,0,0,314,315,1,0,0,0,315,316,5,90,0,0,
        316,317,3,36,18,0,317,318,3,42,21,0,318,320,1,0,0,0,319,307,1,0,
        0,0,319,311,1,0,0,0,320,323,1,0,0,0,321,319,1,0,0,0,321,322,1,0,
        0,0,322,37,1,0,0,0,323,321,1,0,0,0,324,326,7,2,0,0,325,324,1,0,0,
        0,325,326,1,0,0,0,326,327,1,0,0,0,327,334,5,84,0,0,328,330,5,84,
        0,0,329,331,7,2,0,0,330,329,1,0,0,0,330,331,1,0,0,0,331,334,1,0,
        0,0,332,334,7,2,0,0,333,325,1,0,0,0,333,328,1,0,0,0,333,332,1,0,
        0,0,334,368,1,0,0,0,335,337,7,3,0,0,336,335,1,0,0,0,336,337,1,0,
        0,0,337,338,1,0,0,0,338,340,7,4,0,0,339,341,5,123,0,0,340,339,1,
        0,0,0,340,341,1,0,0,0,341,350,1,0,0,0,342,344,7,4,0,0,343,345,5,
        123,0,0,344,343,1,0,0,0,344,345,1,0,0,0,345,347,1,0,0,0,346,348,
        7,3,0,0,347,346,1,0,0,0,347,348,1,0,0,0,348,350,1,0,0,0,349,336,
        1,0,0,0,349,342,1,0,0,0,350,368,1,0,0,0,351,353,7,5,0,0,352,351,
        1,0,0,0,352,353,1,0,0,0,353,354,1,0,0,0,354,356,5,69,0,0,355,357,
        5,123,0,0,356,355,1,0,0,0,356,357,1,0,0,0,357,366,1,0,0,0,358,360,
        5,69,0,0,359,361,5,123,0,0,360,359,1,0,0,0,360,361,1,0,0,0,361,363,
        1,0,0,0,362,364,7,5,0,0,363,362,1,0,0,0,363,364,1,0,0,0,364,366,
        1,0,0,0,365,352,1,0,0,0,365,358,1,0,0,0,366,368,1,0,0,0,367,333,
        1,0,0,0,367,349,1,0,0,0,367,365,1,0,0,0,368,39,1,0,0,0,369,370,5,
        31,0,0,370,373,5,90,0,0,371,373,5,206,0,0,372,369,1,0,0,0,372,371,
        1,0,0,0,373,41,1,0,0,0,374,375,5,119,0,0,375,384,3,72,36,0,376,377,
        5,179,0,0,377,378,5,220,0,0,378,379,3,72,36,0,379,380,5,236,0,0,
        380,384,1,0,0,0,381,382,5,179,0,0,382,384,3,72,36,0,383,374,1,0,
        0,0,383,376,1,0,0,0,383,381,1,0,0,0,384,43,1,0,0,0,385,386,5,144,
        0,0,386,389,3,50,25,0,387,388,5,118,0,0,388,390,3,50,25,0,389,387,
        1,0,0,0,389,390,1,0,0,0,390,45,1,0,0,0,391,396,3,48,24,0,392,393,
        5,206,0,0,393,395,3,48,24,0,394,392,1,0,0,0,395,398,1,0,0,0,396,
        394,1,0,0,0,396,397,1,0,0,0,397,47,1,0,0,0,398,396,1,0,0,0,399,401,
        3,74,37,0,400,402,7,6,0,0,401,400,1,0,0,0,401,402,1,0,0,0,402,405,
        1,0,0,0,403,404,5,117,0,0,404,406,7,7,0,0,405,403,1,0,0,0,405,406,
        1,0,0,0,406,409,1,0,0,0,407,408,5,26,0,0,408,410,5,199,0,0,409,407,
        1,0,0,0,409,410,1,0,0,0,410,49,1,0,0,0,411,414,3,104,52,0,412,413,
        5,238,0,0,413,415,3,104,52,0,414,412,1,0,0,0,414,415,1,0,0,0,415,
        51,1,0,0,0,416,421,3,54,27,0,417,418,5,206,0,0,418,420,3,54,27,0,
        419,417,1,0,0,0,420,423,1,0,0,0,421,419,1,0,0,0,421,422,1,0,0,0,
        422,53,1,0,0,0,423,421,1,0,0,0,424,425,3,116,58,0,425,426,5,212,
        0,0,426,427,3,106,53,0,427,55,1,0,0,0,428,430,3,58,29,0,429,428,
        1,0,0,0,429,430,1,0,0,0,430,432,1,0,0,0,431,433,3,60,30,0,432,431,
        1,0,0,0,432,433,1,0,0,0,433,435,1,0,0,0,434,436,3,62,31,0,435,434,
        1,0,0,0,435,436,1,0,0,0,436,57,1,0,0,0,437,438,5,126,0,0,438,439,
        5,18,0,0,439,440,3,72,36,0,440,59,1,0,0,0,441,442,5,122,0,0,442,
        443,5,18,0,0,443,444,3,46,23,0,444,61,1,0,0,0,445,446,7,8,0,0,446,
        447,3,64,32,0,447,63,1,0,0,0,448,455,3,66,33,0,449,450,5,16,0,0,
        450,451,3,66,33,0,451,452,5,6,0,0,452,453,3,66,33,0,453,455,1,0,
        0,0,454,448,1,0,0,0,454,449,1,0,0,0,455,65,1,0,0,0,456,457,5,33,
        0,0,457,469,5,142,0,0,458,459,5,175,0,0,459,469,5,128,0,0,460,461,
        5,175,0,0,461,469,5,64,0,0,462,463,3,104,52,0,463,464,5,128,0,0,
        464,469,1,0,0,0,465,466,3,104,52,0,466,467,5,64,0,0,467,469,1,0,
        0,0,468,456,1,0,0,0,468,458,1,0,0,0,468,460,1,0,0,0,468,462,1,0,
        0,0,468,465,1,0,0,0,469,67,1,0,0,0,470,471,3,74,37,0,471,472,5,0,
        0,1,472,69,1,0,0,0,473,521,3,116,58,0,474,475,3,116,58,0,475,476,
        5,220,0,0,476,477,3,116,58,0,477,484,3,70,35,0,478,479,5,206,0,0,
        479,480,3,116,58,0,480,481,3,70,35,0,481,483,1,0,0,0,482,478,1,0,
        0,0,483,486,1,0,0,0,484,482,1,0,0,0,484,485,1,0,0,0,485,487,1,0,
        0,0,486,484,1,0,0,0,487,488,5,236,0,0,488,521,1,0,0,0,489,490,3,
        116,58,0,490,491,5,220,0,0,491,496,3,118,59,0,492,493,5,206,0,0,
        493,495,3,118,59,0,494,492,1,0,0,0,495,498,1,0,0,0,496,494,1,0,0,
        0,496,497,1,0,0,0,497,499,1,0,0,0,498,496,1,0,0,0,499,500,5,236,
        0,0,500,521,1,0,0,0,501,502,3,116,58,0,502,503,5,220,0,0,503,508,
        3,70,35,0,504,505,5,206,0,0,505,507,3,70,35,0,506,504,1,0,0,0,507,
        510,1,0,0,0,508,506,1,0,0,0,508,509,1,0,0,0,509,511,1,0,0,0,510,
        508,1,0,0,0,511,512,5,236,0,0,512,521,1,0,0,0,513,514,3,116,58,0,
        514,516,5,220,0,0,515,517,3,72,36,0,516,515,1,0,0,0,516,517,1,0,
        0,0,517,518,1,0,0,0,518,519,5,236,0,0,519,521,1,0,0,0,520,473,1,
        0,0,0,520,474,1,0,0,0,520,489,1,0,0,0,520,501,1,0,0,0,520,513,1,
        0,0,0,521,71,1,0,0,0,522,527,3,74,37,0,523,524,5,206,0,0,524,526,
        3,74,37,0,525,523,1,0,0,0,526,529,1,0,0,0,527,525,1,0,0,0,527,528,
        1,0,0,0,528,73,1,0,0,0,529,527,1,0,0,0,530,531,6,37,-1,0,531,533,
        5,19,0,0,532,534,3,74,37,0,533,532,1,0,0,0,533,534,1,0,0,0,534,540,
        1,0,0,0,535,536,5,186,0,0,536,537,3,74,37,0,537,538,5,163,0,0,538,
        539,3,74,37,0,539,541,1,0,0,0,540,535,1,0,0,0,541,542,1,0,0,0,542,
        540,1,0,0,0,542,543,1,0,0,0,543,546,1,0,0,0,544,545,5,52,0,0,545,
        547,3,74,37,0,546,544,1,0,0,0,546,547,1,0,0,0,547,548,1,0,0,0,548,
        549,5,53,0,0,549,660,1,0,0,0,550,551,5,20,0,0,551,552,5,220,0,0,
        552,553,3,74,37,0,553,554,5,10,0,0,554,555,3,70,35,0,555,556,5,236,
        0,0,556,660,1,0,0,0,557,558,5,36,0,0,558,660,5,199,0,0,559,560,5,
        59,0,0,560,561,5,220,0,0,561,562,3,108,54,0,562,563,5,68,0,0,563,
        564,3,74,37,0,564,565,5,236,0,0,565,660,1,0,0,0,566,567,5,86,0,0,
        567,568,3,74,37,0,568,569,3,108,54,0,569,660,1,0,0,0,570,571,5,155,
        0,0,571,572,5,220,0,0,572,573,3,74,37,0,573,574,5,68,0,0,574,577,
        3,74,37,0,575,576,5,65,0,0,576,578,3,74,37,0,577,575,1,0,0,0,577,
        578,1,0,0,0,578,579,1,0,0,0,579,580,5,236,0,0,580,660,1,0,0,0,581,
        582,5,166,0,0,582,660,5,199,0,0,583,584,5,171,0,0,584,585,5,220,
        0,0,585,586,7,9,0,0,586,587,5,199,0,0,587,588,5,68,0,0,588,589,3,
        74,37,0,589,590,5,236,0,0,590,660,1,0,0,0,591,592,3,116,58,0,592,
        594,5,220,0,0,593,595,3,72,36,0,594,593,1,0,0,0,594,595,1,0,0,0,
        595,596,1,0,0,0,596,597,5,236,0,0,597,598,1,0,0,0,598,599,5,125,
        0,0,599,600,5,220,0,0,600,601,3,56,28,0,601,602,5,236,0,0,602,660,
        1,0,0,0,603,604,3,116,58,0,604,606,5,220,0,0,605,607,3,72,36,0,606,
        605,1,0,0,0,606,607,1,0,0,0,607,608,1,0,0,0,608,609,5,236,0,0,609,
        610,1,0,0,0,610,611,5,125,0,0,611,612,3,116,58,0,612,660,1,0,0,0,
        613,619,3,116,58,0,614,616,5,220,0,0,615,617,3,72,36,0,616,615,1,
        0,0,0,616,617,1,0,0,0,617,618,1,0,0,0,618,620,5,236,0,0,619,614,
        1,0,0,0,619,620,1,0,0,0,620,621,1,0,0,0,621,623,5,220,0,0,622,624,
        5,49,0,0,623,622,1,0,0,0,623,624,1,0,0,0,624,626,1,0,0,0,625,627,
        3,76,38,0,626,625,1,0,0,0,626,627,1,0,0,0,627,628,1,0,0,0,628,629,
        5,236,0,0,629,660,1,0,0,0,630,660,3,106,53,0,631,632,5,208,0,0,632,
        660,3,74,37,18,633,634,5,115,0,0,634,660,3,74,37,12,635,636,3,94,
        47,0,636,637,5,210,0,0,637,639,1,0,0,0,638,635,1,0,0,0,638,639,1,
        0,0,0,639,640,1,0,0,0,640,660,5,202,0,0,641,642,5,220,0,0,642,643,
        3,2,1,0,643,644,5,236,0,0,644,660,1,0,0,0,645,646,5,220,0,0,646,
        647,3,74,37,0,647,648,5,236,0,0,648,660,1,0,0,0,649,650,5,220,0,
        0,650,651,3,72,36,0,651,652,5,236,0,0,652,660,1,0,0,0,653,655,5,
        219,0,0,654,656,3,72,36,0,655,654,1,0,0,0,655,656,1,0,0,0,656,657,
        1,0,0,0,657,660,5,235,0,0,658,660,3,86,43,0,659,530,1,0,0,0,659,
        550,1,0,0,0,659,557,1,0,0,0,659,559,1,0,0,0,659,566,1,0,0,0,659,
        570,1,0,0,0,659,581,1,0,0,0,659,583,1,0,0,0,659,591,1,0,0,0,659,
        603,1,0,0,0,659,613,1,0,0,0,659,630,1,0,0,0,659,631,1,0,0,0,659,
        633,1,0,0,0,659,638,1,0,0,0,659,641,1,0,0,0,659,645,1,0,0,0,659,
        649,1,0,0,0,659,653,1,0,0,0,659,658,1,0,0,0,660,754,1,0,0,0,661,
        665,10,17,0,0,662,666,5,202,0,0,663,666,5,238,0,0,664,666,5,227,
        0,0,665,662,1,0,0,0,665,663,1,0,0,0,665,664,1,0,0,0,666,667,1,0,
        0,0,667,753,3,74,37,18,668,672,10,16,0,0,669,673,5,228,0,0,670,673,
        5,208,0,0,671,673,5,207,0,0,672,669,1,0,0,0,672,670,1,0,0,0,672,
        671,1,0,0,0,673,674,1,0,0,0,674,753,3,74,37,17,675,700,10,15,0,0,
        676,701,5,211,0,0,677,701,5,212,0,0,678,701,5,223,0,0,679,701,5,
        221,0,0,680,701,5,222,0,0,681,701,5,213,0,0,682,701,5,214,0,0,683,
        685,5,115,0,0,684,683,1,0,0,0,684,685,1,0,0,0,685,686,1,0,0,0,686,
        688,5,80,0,0,687,689,5,25,0,0,688,687,1,0,0,0,688,689,1,0,0,0,689,
        701,1,0,0,0,690,692,5,115,0,0,691,690,1,0,0,0,691,692,1,0,0,0,692,
        693,1,0,0,0,693,701,7,10,0,0,694,701,5,232,0,0,695,701,5,233,0,0,
        696,701,5,225,0,0,697,701,5,216,0,0,698,701,5,217,0,0,699,701,5,
        224,0,0,700,676,1,0,0,0,700,677,1,0,0,0,700,678,1,0,0,0,700,679,
        1,0,0,0,700,680,1,0,0,0,700,681,1,0,0,0,700,682,1,0,0,0,700,684,
        1,0,0,0,700,691,1,0,0,0,700,694,1,0,0,0,700,695,1,0,0,0,700,696,
        1,0,0,0,700,697,1,0,0,0,700,698,1,0,0,0,700,699,1,0,0,0,701,702,
        1,0,0,0,702,753,3,74,37,16,703,704,10,13,0,0,704,705,5,226,0,0,705,
        753,3,74,37,14,706,707,10,11,0,0,707,708,5,6,0,0,708,753,3,74,37,
        12,709,710,10,10,0,0,710,711,5,121,0,0,711,753,3,74,37,11,712,714,
        10,9,0,0,713,715,5,115,0,0,714,713,1,0,0,0,714,715,1,0,0,0,715,716,
        1,0,0,0,716,717,5,16,0,0,717,718,3,74,37,0,718,719,5,6,0,0,719,720,
        3,74,37,10,720,753,1,0,0,0,721,722,10,8,0,0,722,723,5,229,0,0,723,
        724,3,74,37,0,724,725,5,205,0,0,725,726,3,74,37,8,726,753,1,0,0,
        0,727,728,10,21,0,0,728,729,5,219,0,0,729,730,3,74,37,0,730,731,
        5,235,0,0,731,753,1,0,0,0,732,733,10,20,0,0,733,734,5,210,0,0,734,
        753,5,197,0,0,735,736,10,19,0,0,736,737,5,210,0,0,737,753,3,116,
        58,0,738,739,10,14,0,0,739,741,5,88,0,0,740,742,5,115,0,0,741,740,
        1,0,0,0,741,742,1,0,0,0,742,743,1,0,0,0,743,753,5,116,0,0,744,750,
        10,7,0,0,745,751,3,114,57,0,746,747,5,10,0,0,747,751,3,116,58,0,
        748,749,5,10,0,0,749,751,5,199,0,0,750,745,1,0,0,0,750,746,1,0,0,
        0,750,748,1,0,0,0,751,753,1,0,0,0,752,661,1,0,0,0,752,668,1,0,0,
        0,752,675,1,0,0,0,752,703,1,0,0,0,752,706,1,0,0,0,752,709,1,0,0,
        0,752,712,1,0,0,0,752,721,1,0,0,0,752,727,1,0,0,0,752,732,1,0,0,
        0,752,735,1,0,0,0,752,738,1,0,0,0,752,744,1,0,0,0,753,756,1,0,0,
        0,754,752,1,0,0,0,754,755,1,0,0,0,755,75,1,0,0,0,756,754,1,0,0,0,
        757,762,3,78,39,0,758,759,5,206,0,0,759,761,3,78,39,0,760,758,1,
        0,0,0,761,764,1,0,0,0,762,760,1,0,0,0,762,763,1,0,0,0,763,77,1,0,
        0,0,764,762,1,0,0,0,765,768,3,80,40,0,766,768,3,74,37,0,767,765,
        1,0,0,0,767,766,1,0,0,0,768,79,1,0,0,0,769,770,5,220,0,0,770,775,
        3,116,58,0,771,772,5,206,0,0,772,774,3,116,58,0,773,771,1,0,0,0,
        774,777,1,0,0,0,775,773,1,0,0,0,775,776,1,0,0,0,776,778,1,0,0,0,
        777,775,1,0,0,0,778,779,5,236,0,0,779,789,1,0,0,0,780,785,3,116,
        58,0,781,782,5,206,0,0,782,784,3,116,58,0,783,781,1,0,0,0,784,787,
        1,0,0,0,785,783,1,0,0,0,785,786,1,0,0,0,786,789,1,0,0,0,787,785,
        1,0,0,0,788,769,1,0,0,0,788,780,1,0,0,0,789,790,1,0,0,0,790,791,
        5,201,0,0,791,792,3,74,37,0,792,81,1,0,0,0,793,798,3,84,42,0,794,
        795,5,206,0,0,795,797,3,84,42,0,796,794,1,0,0,0,797,800,1,0,0,0,
        798,796,1,0,0,0,798,799,1,0,0,0,799,83,1,0,0,0,800,798,1,0,0,0,801,
        802,3,116,58,0,802,803,5,10,0,0,803,804,5,220,0,0,804,805,3,2,1,
        0,805,806,5,236,0,0,806,812,1,0,0,0,807,808,3,74,37,0,808,809,5,
        10,0,0,809,810,3,116,58,0,810,812,1,0,0,0,811,801,1,0,0,0,811,807,
        1,0,0,0,812,85,1,0,0,0,813,821,5,200,0,0,814,815,3,94,47,0,815,816,
        5,210,0,0,816,818,1,0,0,0,817,814,1,0,0,0,817,818,1,0,0,0,818,819,
        1,0,0,0,819,821,3,88,44,0,820,813,1,0,0,0,820,817,1,0,0,0,821,87,
        1,0,0,0,822,827,3,116,58,0,823,824,5,210,0,0,824,826,3,116,58,0,
        825,823,1,0,0,0,826,829,1,0,0,0,827,825,1,0,0,0,827,828,1,0,0,0,
        828,89,1,0,0,0,829,827,1,0,0,0,830,831,6,45,-1,0,831,838,3,94,47,
        0,832,838,3,92,46,0,833,834,5,220,0,0,834,835,3,2,1,0,835,836,5,
        236,0,0,836,838,1,0,0,0,837,830,1,0,0,0,837,832,1,0,0,0,837,833,
        1,0,0,0,838,847,1,0,0,0,839,843,10,1,0,0,840,844,3,114,57,0,841,
        842,5,10,0,0,842,844,3,116,58,0,843,840,1,0,0,0,843,841,1,0,0,0,
        844,846,1,0,0,0,845,839,1,0,0,0,846,849,1,0,0,0,847,845,1,0,0,0,
        847,848,1,0,0,0,848,91,1,0,0,0,849,847,1,0,0,0,850,851,3,116,58,
        0,851,853,5,220,0,0,852,854,3,96,48,0,853,852,1,0,0,0,853,854,1,
        0,0,0,854,855,1,0,0,0,855,856,5,236,0,0,856,93,1,0,0,0,857,858,3,
        100,50,0,858,859,5,210,0,0,859,861,1,0,0,0,860,857,1,0,0,0,860,861,
        1,0,0,0,861,862,1,0,0,0,862,863,3,116,58,0,863,95,1,0,0,0,864,869,
        3,98,49,0,865,866,5,206,0,0,866,868,3,98,49,0,867,865,1,0,0,0,868,
        871,1,0,0,0,869,867,1,0,0,0,869,870,1,0,0,0,870,97,1,0,0,0,871,869,
        1,0,0,0,872,876,3,88,44,0,873,876,3,92,46,0,874,876,3,106,53,0,875,
        872,1,0,0,0,875,873,1,0,0,0,875,874,1,0,0,0,876,99,1,0,0,0,877,878,
        3,116,58,0,878,101,1,0,0,0,879,888,5,195,0,0,880,881,5,210,0,0,881,
        888,7,11,0,0,882,883,5,197,0,0,883,885,5,210,0,0,884,886,7,11,0,
        0,885,884,1,0,0,0,885,886,1,0,0,0,886,888,1,0,0,0,887,879,1,0,0,
        0,887,880,1,0,0,0,887,882,1,0,0,0,888,103,1,0,0,0,889,891,7,12,0,
        0,890,889,1,0,0,0,890,891,1,0,0,0,891,898,1,0,0,0,892,899,3,102,
        51,0,893,899,5,196,0,0,894,899,5,197,0,0,895,899,5,198,0,0,896,899,
        5,82,0,0,897,899,5,113,0,0,898,892,1,0,0,0,898,893,1,0,0,0,898,894,
        1,0,0,0,898,895,1,0,0,0,898,896,1,0,0,0,898,897,1,0,0,0,899,105,
        1,0,0,0,900,904,3,104,52,0,901,904,5,199,0,0,902,904,5,116,0,0,903,
        900,1,0,0,0,903,901,1,0,0,0,903,902,1,0,0,0,904,107,1,0,0,0,905,
        906,7,13,0,0,906,109,1,0,0,0,907,908,7,14,0,0,908,111,1,0,0,0,909,
        910,7,15,0,0,910,113,1,0,0,0,911,914,5,194,0,0,912,914,3,112,56,
        0,913,911,1,0,0,0,913,912,1,0,0,0,914,115,1,0,0,0,915,919,5,194,
        0,0,916,919,3,108,54,0,917,919,3,110,55,0,918,915,1,0,0,0,918,916,
        1,0,0,0,918,917,1,0,0,0,919,117,1,0,0,0,920,921,5,199,0,0,921,922,
        5,212,0,0,922,923,3,104,52,0,923,119,1,0,0,0,115,122,132,140,143,
        147,150,154,157,160,163,166,170,174,177,180,183,187,190,199,205,
        226,243,260,266,272,283,285,296,299,305,313,319,321,325,330,333,
        336,340,344,347,349,352,356,360,363,365,367,372,383,389,396,401,
        405,409,414,421,429,432,435,454,468,484,496,508,516,520,527,533,
        542,546,577,594,606,616,619,623,626,638,655,659,665,672,684,688,
        691,700,714,741,750,752,754,762,767,775,785,788,798,811,817,820,
        827,837,843,847,853,860,869,875,885,887,890,898,903,913,918
    ]

class HogQLParser ( Parser ):

    grammarFileName = "HogQLParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'false'", "'true'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'->'", "'*'", "'`'", "'\\'", "':'", "','", "'||'", 
                     "'-'", "'$'", "'.'", "'=='", "'='", "'>='", "'>'", 
                     "'#'", "'~*'", "'=~*'", "'{'", "'['", "'('", "'<='", 
                     "'<'", "<INVALID>", "'!~*'", "'!~'", "'??'", "'%'", 
                     "'+'", "'?'", "'\"'", "'''", "'~'", "'=~'", "'}'", 
                     "']'", "')'", "';'", "'/'", "'_'" ]

    symbolicNames = [ "<INVALID>", "ADD", "AFTER", "ALIAS", "ALL", "ALTER", 
                      "AND", "ANTI", "ANY", "ARRAY", "AS", "ASCENDING", 
                      "ASOF", "AST", "ASYNC", "ATTACH", "BETWEEN", "BOTH", 
                      "BY", "CASE", "CAST", "CHECK", "CLEAR", "CLUSTER", 
                      "CODEC", "COHORT", "COLLATE", "COLUMN", "COMMENT", 
                      "CONSTRAINT", "CREATE", "CROSS", "CUBE", "CURRENT", 
                      "DATABASE", "DATABASES", "DATE", "DAY", "DEDUPLICATE", 
                      "DEFAULT", "DELAY", "DELETE", "DESC", "DESCENDING", 
                      "DESCRIBE", "DETACH", "DICTIONARIES", "DICTIONARY", 
                      "DISK", "DISTINCT", "DISTRIBUTED", "DROP", "ELSE", 
                      "END", "ENGINE", "EVENTS", "EXISTS", "EXPLAIN", "EXPRESSION", 
                      "EXTRACT", "FETCHES", "FINAL", "FIRST", "FLUSH", "FOLLOWING", 
                      "FOR", "FORMAT", "FREEZE", "FROM", "FULL", "FUNCTION", 
                      "GLOBAL", "GRANULARITY", "GROUP", "HAVING", "HIERARCHICAL", 
                      "HOUR", "ID", "IF", "ILIKE", "IN", "INDEX", "INF", 
                      "INJECTIVE", "INNER", "INSERT", "INTERVAL", "INTO", 
                      "IS", "IS_OBJECT_ID", "JOIN", "KEY", "KILL", "LAST", 
                      "LAYOUT", "LEADING", "LEFT", "LIFETIME", "LIKE", "LIMIT", 
                      "LIVE", "LOCAL", "LOGS", "MATERIALIZE", "MATERIALIZED", 
                      "MAX", "MERGES", "MIN", "MINUTE", "MODIFY", "MONTH", 
                      "MOVE", "MUTATION", "NAN_SQL", "NO", "NOT", "NULL_SQL", 
                      "NULLS", "OFFSET", "ON", "OPTIMIZE", "OR", "ORDER", 
                      "OUTER", "OUTFILE", "OVER", "PARTITION", "POPULATE", 
                      "PRECEDING", "PREWHERE", "PRIMARY", "PROJECTION", 
                      "QUARTER", "RANGE", "RELOAD", "REMOVE", "RENAME", 
                      "REPLACE", "REPLICA", "REPLICATED", "RIGHT", "ROLLUP", 
                      "ROW", "ROWS", "SAMPLE", "SECOND", "SELECT", "SEMI", 
                      "SENDS", "SET", "SETTINGS", "SHOW", "SOURCE", "START", 
                      "STOP", "SUBSTRING", "SYNC", "SYNTAX", "SYSTEM", "TABLE", 
                      "TABLES", "TEMPORARY", "TEST", "THEN", "TIES", "TIMEOUT", 
                      "TIMESTAMP", "TO", "TOP", "TOTALS", "TRAILING", "TRIM", 
                      "TRUNCATE", "TTL", "TYPE", "UNBOUNDED", "UNION", "UPDATE", 
                      "USE", "USING", "UUID", "VALUES", "VIEW", "VOLUME", 
                      "WATCH", "WEEK", "WHEN", "WHERE", "WINDOW", "WITH", 
                      "YEAR", "JSON_FALSE", "JSON_TRUE", "ESCAPE_CHAR", 
                      "IDENTIFIER", "FLOATING_LITERAL", "OCTAL_LITERAL", 
                      "DECIMAL_LITERAL", "HEXADECIMAL_LITERAL", "STRING_LITERAL", 
                      "PLACEHOLDER", "ARROW", "ASTERISK", "BACKQUOTE", "BACKSLASH", 
                      "COLON", "COMMA", "CONCAT", "DASH", "DOLLAR", "DOT", 
                      "EQ_DOUBLE", "EQ_SINGLE", "GT_EQ", "GT", "HASH", "IREGEX_SINGLE", 
                      "IREGEX_DOUBLE", "LBRACE", "LBRACKET", "LPAREN", "LT_EQ", 
                      "LT", "NOT_EQ", "NOT_IREGEX", "NOT_REGEX", "NULLISH", 
                      "PERCENT", "PLUS", "QUERY", "QUOTE_DOUBLE", "QUOTE_SINGLE", 
                      "REGEX_SINGLE", "REGEX_DOUBLE", "RBRACE", "RBRACKET", 
                      "RPAREN", "SEMICOLON", "SLASH", "UNDERSCORE", "MULTI_LINE_COMMENT", 
                      "SINGLE_LINE_COMMENT", "WHITESPACE" ]

    RULE_select = 0
    RULE_selectUnionStmt = 1
    RULE_selectStmtWithParens = 2
    RULE_selectStmt = 3
    RULE_withClause = 4
    RULE_topClause = 5
    RULE_fromClause = 6
    RULE_arrayJoinClause = 7
    RULE_windowClause = 8
    RULE_prewhereClause = 9
    RULE_whereClause = 10
    RULE_groupByClause = 11
    RULE_havingClause = 12
    RULE_orderByClause = 13
    RULE_projectionOrderByClause = 14
    RULE_limitAndOffsetClause = 15
    RULE_offsetOnlyClause = 16
    RULE_settingsClause = 17
    RULE_joinExpr = 18
    RULE_joinOp = 19
    RULE_joinOpCross = 20
    RULE_joinConstraintClause = 21
    RULE_sampleClause = 22
    RULE_orderExprList = 23
    RULE_orderExpr = 24
    RULE_ratioExpr = 25
    RULE_settingExprList = 26
    RULE_settingExpr = 27
    RULE_windowExpr = 28
    RULE_winPartitionByClause = 29
    RULE_winOrderByClause = 30
    RULE_winFrameClause = 31
    RULE_winFrameExtend = 32
    RULE_winFrameBound = 33
    RULE_expr = 34
    RULE_columnTypeExpr = 35
    RULE_columnExprList = 36
    RULE_columnExpr = 37
    RULE_columnArgList = 38
    RULE_columnArgExpr = 39
    RULE_columnLambdaExpr = 40
    RULE_withExprList = 41
    RULE_withExpr = 42
    RULE_columnIdentifier = 43
    RULE_nestedIdentifier = 44
    RULE_tableExpr = 45
    RULE_tableFunctionExpr = 46
    RULE_tableIdentifier = 47
    RULE_tableArgList = 48
    RULE_tableArgExpr = 49
    RULE_databaseIdentifier = 50
    RULE_floatingLiteral = 51
    RULE_numberLiteral = 52
    RULE_literal = 53
    RULE_interval = 54
    RULE_keyword = 55
    RULE_keywordForAlias = 56
    RULE_alias = 57
    RULE_identifier = 58
    RULE_enumValue = 59

    ruleNames =  [ "select", "selectUnionStmt", "selectStmtWithParens", 
                   "selectStmt", "withClause", "topClause", "fromClause", 
                   "arrayJoinClause", "windowClause", "prewhereClause", 
                   "whereClause", "groupByClause", "havingClause", "orderByClause", 
                   "projectionOrderByClause", "limitAndOffsetClause", "offsetOnlyClause", 
                   "settingsClause", "joinExpr", "joinOp", "joinOpCross", 
                   "joinConstraintClause", "sampleClause", "orderExprList", 
                   "orderExpr", "ratioExpr", "settingExprList", "settingExpr", 
                   "windowExpr", "winPartitionByClause", "winOrderByClause", 
                   "winFrameClause", "winFrameExtend", "winFrameBound", 
                   "expr", "columnTypeExpr", "columnExprList", "columnExpr", 
                   "columnArgList", "columnArgExpr", "columnLambdaExpr", 
                   "withExprList", "withExpr", "columnIdentifier", "nestedIdentifier", 
                   "tableExpr", "tableFunctionExpr", "tableIdentifier", 
                   "tableArgList", "tableArgExpr", "databaseIdentifier", 
                   "floatingLiteral", "numberLiteral", "literal", "interval", 
                   "keyword", "keywordForAlias", "alias", "identifier", 
                   "enumValue" ]

    EOF = Token.EOF
    ADD=1
    AFTER=2
    ALIAS=3
    ALL=4
    ALTER=5
    AND=6
    ANTI=7
    ANY=8
    ARRAY=9
    AS=10
    ASCENDING=11
    ASOF=12
    AST=13
    ASYNC=14
    ATTACH=15
    BETWEEN=16
    BOTH=17
    BY=18
    CASE=19
    CAST=20
    CHECK=21
    CLEAR=22
    CLUSTER=23
    CODEC=24
    COHORT=25
    COLLATE=26
    COLUMN=27
    COMMENT=28
    CONSTRAINT=29
    CREATE=30
    CROSS=31
    CUBE=32
    CURRENT=33
    DATABASE=34
    DATABASES=35
    DATE=36
    DAY=37
    DEDUPLICATE=38
    DEFAULT=39
    DELAY=40
    DELETE=41
    DESC=42
    DESCENDING=43
    DESCRIBE=44
    DETACH=45
    DICTIONARIES=46
    DICTIONARY=47
    DISK=48
    DISTINCT=49
    DISTRIBUTED=50
    DROP=51
    ELSE=52
    END=53
    ENGINE=54
    EVENTS=55
    EXISTS=56
    EXPLAIN=57
    EXPRESSION=58
    EXTRACT=59
    FETCHES=60
    FINAL=61
    FIRST=62
    FLUSH=63
    FOLLOWING=64
    FOR=65
    FORMAT=66
    FREEZE=67
    FROM=68
    FULL=69
    FUNCTION=70
    GLOBAL=71
    GRANULARITY=72
    GROUP=73
    HAVING=74
    HIERARCHICAL=75
    HOUR=76
    ID=77
    IF=78
    ILIKE=79
    IN=80
    INDEX=81
    INF=82
    INJECTIVE=83
    INNER=84
    INSERT=85
    INTERVAL=86
    INTO=87
    IS=88
    IS_OBJECT_ID=89
    JOIN=90
    KEY=91
    KILL=92
    LAST=93
    LAYOUT=94
    LEADING=95
    LEFT=96
    LIFETIME=97
    LIKE=98
    LIMIT=99
    LIVE=100
    LOCAL=101
    LOGS=102
    MATERIALIZE=103
    MATERIALIZED=104
    MAX=105
    MERGES=106
    MIN=107
    MINUTE=108
    MODIFY=109
    MONTH=110
    MOVE=111
    MUTATION=112
    NAN_SQL=113
    NO=114
    NOT=115
    NULL_SQL=116
    NULLS=117
    OFFSET=118
    ON=119
    OPTIMIZE=120
    OR=121
    ORDER=122
    OUTER=123
    OUTFILE=124
    OVER=125
    PARTITION=126
    POPULATE=127
    PRECEDING=128
    PREWHERE=129
    PRIMARY=130
    PROJECTION=131
    QUARTER=132
    RANGE=133
    RELOAD=134
    REMOVE=135
    RENAME=136
    REPLACE=137
    REPLICA=138
    REPLICATED=139
    RIGHT=140
    ROLLUP=141
    ROW=142
    ROWS=143
    SAMPLE=144
    SECOND=145
    SELECT=146
    SEMI=147
    SENDS=148
    SET=149
    SETTINGS=150
    SHOW=151
    SOURCE=152
    START=153
    STOP=154
    SUBSTRING=155
    SYNC=156
    SYNTAX=157
    SYSTEM=158
    TABLE=159
    TABLES=160
    TEMPORARY=161
    TEST=162
    THEN=163
    TIES=164
    TIMEOUT=165
    TIMESTAMP=166
    TO=167
    TOP=168
    TOTALS=169
    TRAILING=170
    TRIM=171
    TRUNCATE=172
    TTL=173
    TYPE=174
    UNBOUNDED=175
    UNION=176
    UPDATE=177
    USE=178
    USING=179
    UUID=180
    VALUES=181
    VIEW=182
    VOLUME=183
    WATCH=184
    WEEK=185
    WHEN=186
    WHERE=187
    WINDOW=188
    WITH=189
    YEAR=190
    JSON_FALSE=191
    JSON_TRUE=192
    ESCAPE_CHAR=193
    IDENTIFIER=194
    FLOATING_LITERAL=195
    OCTAL_LITERAL=196
    DECIMAL_LITERAL=197
    HEXADECIMAL_LITERAL=198
    STRING_LITERAL=199
    PLACEHOLDER=200
    ARROW=201
    ASTERISK=202
    BACKQUOTE=203
    BACKSLASH=204
    COLON=205
    COMMA=206
    CONCAT=207
    DASH=208
    DOLLAR=209
    DOT=210
    EQ_DOUBLE=211
    EQ_SINGLE=212
    GT_EQ=213
    GT=214
    HASH=215
    IREGEX_SINGLE=216
    IREGEX_DOUBLE=217
    LBRACE=218
    LBRACKET=219
    LPAREN=220
    LT_EQ=221
    LT=222
    NOT_EQ=223
    NOT_IREGEX=224
    NOT_REGEX=225
    NULLISH=226
    PERCENT=227
    PLUS=228
    QUERY=229
    QUOTE_DOUBLE=230
    QUOTE_SINGLE=231
    REGEX_SINGLE=232
    REGEX_DOUBLE=233
    RBRACE=234
    RBRACKET=235
    RPAREN=236
    SEMICOLON=237
    SLASH=238
    UNDERSCORE=239
    MULTI_LINE_COMMENT=240
    SINGLE_LINE_COMMENT=241
    WHITESPACE=242

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class SelectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(HogQLParser.EOF, 0)

        def selectUnionStmt(self):
            return self.getTypedRuleContext(HogQLParser.SelectUnionStmtContext,0)


        def selectStmt(self):
            return self.getTypedRuleContext(HogQLParser.SelectStmtContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_select

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelect" ):
                return visitor.visitSelect(self)
            else:
                return visitor.visitChildren(self)




    def select(self):

        localctx = HogQLParser.SelectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_select)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 122
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
            if la_ == 1:
                self.state = 120
                self.selectUnionStmt()
                pass

            elif la_ == 2:
                self.state = 121
                self.selectStmt()
                pass


            self.state = 124
            self.match(HogQLParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectUnionStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selectStmtWithParens(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.SelectStmtWithParensContext)
            else:
                return self.getTypedRuleContext(HogQLParser.SelectStmtWithParensContext,i)


        def UNION(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.UNION)
            else:
                return self.getToken(HogQLParser.UNION, i)

        def ALL(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.ALL)
            else:
                return self.getToken(HogQLParser.ALL, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_selectUnionStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectUnionStmt" ):
                return visitor.visitSelectUnionStmt(self)
            else:
                return visitor.visitChildren(self)




    def selectUnionStmt(self):

        localctx = HogQLParser.SelectUnionStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_selectUnionStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 126
            self.selectStmtWithParens()
            self.state = 132
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==176:
                self.state = 127
                self.match(HogQLParser.UNION)
                self.state = 128
                self.match(HogQLParser.ALL)
                self.state = 129
                self.selectStmtWithParens()
                self.state = 134
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectStmtWithParensContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selectStmt(self):
            return self.getTypedRuleContext(HogQLParser.SelectStmtContext,0)


        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)

        def selectUnionStmt(self):
            return self.getTypedRuleContext(HogQLParser.SelectUnionStmtContext,0)


        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_selectStmtWithParens

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectStmtWithParens" ):
                return visitor.visitSelectStmtWithParens(self)
            else:
                return visitor.visitChildren(self)




    def selectStmtWithParens(self):

        localctx = HogQLParser.SelectStmtWithParensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_selectStmtWithParens)
        try:
            self.state = 140
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [146, 189]:
                self.enterOuterAlt(localctx, 1)
                self.state = 135
                self.selectStmt()
                pass
            elif token in [220]:
                self.enterOuterAlt(localctx, 2)
                self.state = 136
                self.match(HogQLParser.LPAREN)
                self.state = 137
                self.selectUnionStmt()
                self.state = 138
                self.match(HogQLParser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.with_ = None # WithClauseContext
            self.columns = None # ColumnExprListContext
            self.from_ = None # FromClauseContext
            self.where = None # WhereClauseContext

        def SELECT(self):
            return self.getToken(HogQLParser.SELECT, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def DISTINCT(self):
            return self.getToken(HogQLParser.DISTINCT, 0)

        def topClause(self):
            return self.getTypedRuleContext(HogQLParser.TopClauseContext,0)


        def arrayJoinClause(self):
            return self.getTypedRuleContext(HogQLParser.ArrayJoinClauseContext,0)


        def prewhereClause(self):
            return self.getTypedRuleContext(HogQLParser.PrewhereClauseContext,0)


        def groupByClause(self):
            return self.getTypedRuleContext(HogQLParser.GroupByClauseContext,0)


        def WITH(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.WITH)
            else:
                return self.getToken(HogQLParser.WITH, i)

        def TOTALS(self):
            return self.getToken(HogQLParser.TOTALS, 0)

        def havingClause(self):
            return self.getTypedRuleContext(HogQLParser.HavingClauseContext,0)


        def windowClause(self):
            return self.getTypedRuleContext(HogQLParser.WindowClauseContext,0)


        def orderByClause(self):
            return self.getTypedRuleContext(HogQLParser.OrderByClauseContext,0)


        def limitAndOffsetClause(self):
            return self.getTypedRuleContext(HogQLParser.LimitAndOffsetClauseContext,0)


        def offsetOnlyClause(self):
            return self.getTypedRuleContext(HogQLParser.OffsetOnlyClauseContext,0)


        def settingsClause(self):
            return self.getTypedRuleContext(HogQLParser.SettingsClauseContext,0)


        def withClause(self):
            return self.getTypedRuleContext(HogQLParser.WithClauseContext,0)


        def fromClause(self):
            return self.getTypedRuleContext(HogQLParser.FromClauseContext,0)


        def whereClause(self):
            return self.getTypedRuleContext(HogQLParser.WhereClauseContext,0)


        def CUBE(self):
            return self.getToken(HogQLParser.CUBE, 0)

        def ROLLUP(self):
            return self.getToken(HogQLParser.ROLLUP, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_selectStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectStmt" ):
                return visitor.visitSelectStmt(self)
            else:
                return visitor.visitChildren(self)




    def selectStmt(self):

        localctx = HogQLParser.SelectStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_selectStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 143
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==189:
                self.state = 142
                localctx.with_ = self.withClause()


            self.state = 145
            self.match(HogQLParser.SELECT)
            self.state = 147
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
            if la_ == 1:
                self.state = 146
                self.match(HogQLParser.DISTINCT)


            self.state = 150
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.state = 149
                self.topClause()


            self.state = 152
            localctx.columns = self.columnExprList()
            self.state = 154
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==68:
                self.state = 153
                localctx.from_ = self.fromClause()


            self.state = 157
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9 or _la==84 or _la==96:
                self.state = 156
                self.arrayJoinClause()


            self.state = 160
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==129:
                self.state = 159
                self.prewhereClause()


            self.state = 163
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==187:
                self.state = 162
                localctx.where = self.whereClause()


            self.state = 166
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==73:
                self.state = 165
                self.groupByClause()


            self.state = 170
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
            if la_ == 1:
                self.state = 168
                self.match(HogQLParser.WITH)
                self.state = 169
                _la = self._input.LA(1)
                if not(_la==32 or _la==141):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 174
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==189:
                self.state = 172
                self.match(HogQLParser.WITH)
                self.state = 173
                self.match(HogQLParser.TOTALS)


            self.state = 177
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==74:
                self.state = 176
                self.havingClause()


            self.state = 180
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==188:
                self.state = 179
                self.windowClause()


            self.state = 183
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==122:
                self.state = 182
                self.orderByClause()


            self.state = 187
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [99]:
                self.state = 185
                self.limitAndOffsetClause()
                pass
            elif token in [118]:
                self.state = 186
                self.offsetOnlyClause()
                pass
            elif token in [-1, 150, 176, 236]:
                pass
            else:
                pass
            self.state = 190
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==150:
                self.state = 189
                self.settingsClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WithClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(HogQLParser.WITH, 0)

        def withExprList(self):
            return self.getTypedRuleContext(HogQLParser.WithExprListContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_withClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWithClause" ):
                return visitor.visitWithClause(self)
            else:
                return visitor.visitChildren(self)




    def withClause(self):

        localctx = HogQLParser.WithClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_withClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 192
            self.match(HogQLParser.WITH)
            self.state = 193
            self.withExprList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TopClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TOP(self):
            return self.getToken(HogQLParser.TOP, 0)

        def DECIMAL_LITERAL(self):
            return self.getToken(HogQLParser.DECIMAL_LITERAL, 0)

        def WITH(self):
            return self.getToken(HogQLParser.WITH, 0)

        def TIES(self):
            return self.getToken(HogQLParser.TIES, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_topClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTopClause" ):
                return visitor.visitTopClause(self)
            else:
                return visitor.visitChildren(self)




    def topClause(self):

        localctx = HogQLParser.TopClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_topClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 195
            self.match(HogQLParser.TOP)
            self.state = 196
            self.match(HogQLParser.DECIMAL_LITERAL)
            self.state = 199
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
            if la_ == 1:
                self.state = 197
                self.match(HogQLParser.WITH)
                self.state = 198
                self.match(HogQLParser.TIES)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FromClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(HogQLParser.FROM, 0)

        def joinExpr(self):
            return self.getTypedRuleContext(HogQLParser.JoinExprContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_fromClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFromClause" ):
                return visitor.visitFromClause(self)
            else:
                return visitor.visitChildren(self)




    def fromClause(self):

        localctx = HogQLParser.FromClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_fromClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 201
            self.match(HogQLParser.FROM)
            self.state = 202
            self.joinExpr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayJoinClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ARRAY(self):
            return self.getToken(HogQLParser.ARRAY, 0)

        def JOIN(self):
            return self.getToken(HogQLParser.JOIN, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def LEFT(self):
            return self.getToken(HogQLParser.LEFT, 0)

        def INNER(self):
            return self.getToken(HogQLParser.INNER, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_arrayJoinClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayJoinClause" ):
                return visitor.visitArrayJoinClause(self)
            else:
                return visitor.visitChildren(self)




    def arrayJoinClause(self):

        localctx = HogQLParser.ArrayJoinClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_arrayJoinClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 205
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==84 or _la==96:
                self.state = 204
                _la = self._input.LA(1)
                if not(_la==84 or _la==96):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 207
            self.match(HogQLParser.ARRAY)
            self.state = 208
            self.match(HogQLParser.JOIN)
            self.state = 209
            self.columnExprList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WINDOW(self):
            return self.getToken(HogQLParser.WINDOW, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(HogQLParser.IdentifierContext,i)


        def AS(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.AS)
            else:
                return self.getToken(HogQLParser.AS, i)

        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.LPAREN)
            else:
                return self.getToken(HogQLParser.LPAREN, i)

        def windowExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.WindowExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.WindowExprContext,i)


        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.RPAREN)
            else:
                return self.getToken(HogQLParser.RPAREN, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_windowClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindowClause" ):
                return visitor.visitWindowClause(self)
            else:
                return visitor.visitChildren(self)




    def windowClause(self):

        localctx = HogQLParser.WindowClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_windowClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 211
            self.match(HogQLParser.WINDOW)
            self.state = 212
            self.identifier()
            self.state = 213
            self.match(HogQLParser.AS)
            self.state = 214
            self.match(HogQLParser.LPAREN)
            self.state = 215
            self.windowExpr()
            self.state = 216
            self.match(HogQLParser.RPAREN)
            self.state = 226
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==206:
                self.state = 217
                self.match(HogQLParser.COMMA)
                self.state = 218
                self.identifier()
                self.state = 219
                self.match(HogQLParser.AS)
                self.state = 220
                self.match(HogQLParser.LPAREN)
                self.state = 221
                self.windowExpr()
                self.state = 222
                self.match(HogQLParser.RPAREN)
                self.state = 228
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrewhereClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PREWHERE(self):
            return self.getToken(HogQLParser.PREWHERE, 0)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_prewhereClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrewhereClause" ):
                return visitor.visitPrewhereClause(self)
            else:
                return visitor.visitChildren(self)




    def prewhereClause(self):

        localctx = HogQLParser.PrewhereClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_prewhereClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 229
            self.match(HogQLParser.PREWHERE)
            self.state = 230
            self.columnExpr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhereClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(HogQLParser.WHERE, 0)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_whereClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhereClause" ):
                return visitor.visitWhereClause(self)
            else:
                return visitor.visitChildren(self)




    def whereClause(self):

        localctx = HogQLParser.WhereClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_whereClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 232
            self.match(HogQLParser.WHERE)
            self.state = 233
            self.columnExpr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GROUP(self):
            return self.getToken(HogQLParser.GROUP, 0)

        def BY(self):
            return self.getToken(HogQLParser.BY, 0)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def CUBE(self):
            return self.getToken(HogQLParser.CUBE, 0)

        def ROLLUP(self):
            return self.getToken(HogQLParser.ROLLUP, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_groupByClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroupByClause" ):
                return visitor.visitGroupByClause(self)
            else:
                return visitor.visitChildren(self)




    def groupByClause(self):

        localctx = HogQLParser.GroupByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_groupByClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 235
            self.match(HogQLParser.GROUP)
            self.state = 236
            self.match(HogQLParser.BY)
            self.state = 243
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,21,self._ctx)
            if la_ == 1:
                self.state = 237
                _la = self._input.LA(1)
                if not(_la==32 or _la==141):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 238
                self.match(HogQLParser.LPAREN)
                self.state = 239
                self.columnExprList()
                self.state = 240
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 2:
                self.state = 242
                self.columnExprList()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HavingClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HAVING(self):
            return self.getToken(HogQLParser.HAVING, 0)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_havingClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHavingClause" ):
                return visitor.visitHavingClause(self)
            else:
                return visitor.visitChildren(self)




    def havingClause(self):

        localctx = HogQLParser.HavingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_havingClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 245
            self.match(HogQLParser.HAVING)
            self.state = 246
            self.columnExpr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(HogQLParser.ORDER, 0)

        def BY(self):
            return self.getToken(HogQLParser.BY, 0)

        def orderExprList(self):
            return self.getTypedRuleContext(HogQLParser.OrderExprListContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_orderByClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrderByClause" ):
                return visitor.visitOrderByClause(self)
            else:
                return visitor.visitChildren(self)




    def orderByClause(self):

        localctx = HogQLParser.OrderByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_orderByClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 248
            self.match(HogQLParser.ORDER)
            self.state = 249
            self.match(HogQLParser.BY)
            self.state = 250
            self.orderExprList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProjectionOrderByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(HogQLParser.ORDER, 0)

        def BY(self):
            return self.getToken(HogQLParser.BY, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_projectionOrderByClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProjectionOrderByClause" ):
                return visitor.visitProjectionOrderByClause(self)
            else:
                return visitor.visitChildren(self)




    def projectionOrderByClause(self):

        localctx = HogQLParser.ProjectionOrderByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_projectionOrderByClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 252
            self.match(HogQLParser.ORDER)
            self.state = 253
            self.match(HogQLParser.BY)
            self.state = 254
            self.columnExprList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LimitAndOffsetClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIMIT(self):
            return self.getToken(HogQLParser.LIMIT, 0)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)


        def COMMA(self):
            return self.getToken(HogQLParser.COMMA, 0)

        def BY(self):
            return self.getToken(HogQLParser.BY, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def WITH(self):
            return self.getToken(HogQLParser.WITH, 0)

        def TIES(self):
            return self.getToken(HogQLParser.TIES, 0)

        def OFFSET(self):
            return self.getToken(HogQLParser.OFFSET, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_limitAndOffsetClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLimitAndOffsetClause" ):
                return visitor.visitLimitAndOffsetClause(self)
            else:
                return visitor.visitChildren(self)




    def limitAndOffsetClause(self):

        localctx = HogQLParser.LimitAndOffsetClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_limitAndOffsetClause)
        self._la = 0 # Token type
        try:
            self.state = 285
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,26,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 256
                self.match(HogQLParser.LIMIT)
                self.state = 257
                self.columnExpr(0)
                self.state = 260
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==206:
                    self.state = 258
                    self.match(HogQLParser.COMMA)
                    self.state = 259
                    self.columnExpr(0)


                self.state = 266
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [189]:
                    self.state = 262
                    self.match(HogQLParser.WITH)
                    self.state = 263
                    self.match(HogQLParser.TIES)
                    pass
                elif token in [18]:
                    self.state = 264
                    self.match(HogQLParser.BY)
                    self.state = 265
                    self.columnExprList()
                    pass
                elif token in [-1, 150, 176, 236]:
                    pass
                else:
                    pass
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 268
                self.match(HogQLParser.LIMIT)
                self.state = 269
                self.columnExpr(0)
                self.state = 272
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==189:
                    self.state = 270
                    self.match(HogQLParser.WITH)
                    self.state = 271
                    self.match(HogQLParser.TIES)


                self.state = 274
                self.match(HogQLParser.OFFSET)
                self.state = 275
                self.columnExpr(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 277
                self.match(HogQLParser.LIMIT)
                self.state = 278
                self.columnExpr(0)
                self.state = 279
                self.match(HogQLParser.OFFSET)
                self.state = 280
                self.columnExpr(0)
                self.state = 283
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==18:
                    self.state = 281
                    self.match(HogQLParser.BY)
                    self.state = 282
                    self.columnExprList()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OffsetOnlyClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OFFSET(self):
            return self.getToken(HogQLParser.OFFSET, 0)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_offsetOnlyClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOffsetOnlyClause" ):
                return visitor.visitOffsetOnlyClause(self)
            else:
                return visitor.visitChildren(self)




    def offsetOnlyClause(self):

        localctx = HogQLParser.OffsetOnlyClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_offsetOnlyClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 287
            self.match(HogQLParser.OFFSET)
            self.state = 288
            self.columnExpr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SettingsClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SETTINGS(self):
            return self.getToken(HogQLParser.SETTINGS, 0)

        def settingExprList(self):
            return self.getTypedRuleContext(HogQLParser.SettingExprListContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_settingsClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSettingsClause" ):
                return visitor.visitSettingsClause(self)
            else:
                return visitor.visitChildren(self)




    def settingsClause(self):

        localctx = HogQLParser.SettingsClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_settingsClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 290
            self.match(HogQLParser.SETTINGS)
            self.state = 291
            self.settingExprList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return HogQLParser.RULE_joinExpr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class JoinExprOpContext(JoinExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.JoinExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def joinExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.JoinExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.JoinExprContext,i)

        def JOIN(self):
            return self.getToken(HogQLParser.JOIN, 0)
        def joinConstraintClause(self):
            return self.getTypedRuleContext(HogQLParser.JoinConstraintClauseContext,0)

        def joinOp(self):
            return self.getTypedRuleContext(HogQLParser.JoinOpContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinExprOp" ):
                return visitor.visitJoinExprOp(self)
            else:
                return visitor.visitChildren(self)


    class JoinExprTableContext(JoinExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.JoinExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tableExpr(self):
            return self.getTypedRuleContext(HogQLParser.TableExprContext,0)

        def FINAL(self):
            return self.getToken(HogQLParser.FINAL, 0)
        def sampleClause(self):
            return self.getTypedRuleContext(HogQLParser.SampleClauseContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinExprTable" ):
                return visitor.visitJoinExprTable(self)
            else:
                return visitor.visitChildren(self)


    class JoinExprParensContext(JoinExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.JoinExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def joinExpr(self):
            return self.getTypedRuleContext(HogQLParser.JoinExprContext,0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinExprParens" ):
                return visitor.visitJoinExprParens(self)
            else:
                return visitor.visitChildren(self)


    class JoinExprCrossOpContext(JoinExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.JoinExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def joinExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.JoinExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.JoinExprContext,i)

        def joinOpCross(self):
            return self.getTypedRuleContext(HogQLParser.JoinOpCrossContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinExprCrossOp" ):
                return visitor.visitJoinExprCrossOp(self)
            else:
                return visitor.visitChildren(self)



    def joinExpr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = HogQLParser.JoinExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 36
        self.enterRecursionRule(localctx, 36, self.RULE_joinExpr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 305
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
            if la_ == 1:
                localctx = HogQLParser.JoinExprTableContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 294
                self.tableExpr(0)
                self.state = 296
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
                if la_ == 1:
                    self.state = 295
                    self.match(HogQLParser.FINAL)


                self.state = 299
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
                if la_ == 1:
                    self.state = 298
                    self.sampleClause()


                pass

            elif la_ == 2:
                localctx = HogQLParser.JoinExprParensContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 301
                self.match(HogQLParser.LPAREN)
                self.state = 302
                self.joinExpr(0)
                self.state = 303
                self.match(HogQLParser.RPAREN)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 321
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,32,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 319
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
                    if la_ == 1:
                        localctx = HogQLParser.JoinExprCrossOpContext(self, HogQLParser.JoinExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_joinExpr)
                        self.state = 307
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 308
                        self.joinOpCross()
                        self.state = 309
                        self.joinExpr(4)
                        pass

                    elif la_ == 2:
                        localctx = HogQLParser.JoinExprOpContext(self, HogQLParser.JoinExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_joinExpr)
                        self.state = 311
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 313
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4496) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & 134250497) != 0) or _la==140 or _la==147:
                            self.state = 312
                            self.joinOp()


                        self.state = 315
                        self.match(HogQLParser.JOIN)
                        self.state = 316
                        self.joinExpr(0)
                        self.state = 317
                        self.joinConstraintClause()
                        pass

             
                self.state = 323
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,32,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class JoinOpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return HogQLParser.RULE_joinOp

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class JoinOpFullContext(JoinOpContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.JoinOpContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FULL(self):
            return self.getToken(HogQLParser.FULL, 0)
        def OUTER(self):
            return self.getToken(HogQLParser.OUTER, 0)
        def ALL(self):
            return self.getToken(HogQLParser.ALL, 0)
        def ANY(self):
            return self.getToken(HogQLParser.ANY, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinOpFull" ):
                return visitor.visitJoinOpFull(self)
            else:
                return visitor.visitChildren(self)


    class JoinOpInnerContext(JoinOpContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.JoinOpContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INNER(self):
            return self.getToken(HogQLParser.INNER, 0)
        def ALL(self):
            return self.getToken(HogQLParser.ALL, 0)
        def ANY(self):
            return self.getToken(HogQLParser.ANY, 0)
        def ASOF(self):
            return self.getToken(HogQLParser.ASOF, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinOpInner" ):
                return visitor.visitJoinOpInner(self)
            else:
                return visitor.visitChildren(self)


    class JoinOpLeftRightContext(JoinOpContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.JoinOpContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LEFT(self):
            return self.getToken(HogQLParser.LEFT, 0)
        def RIGHT(self):
            return self.getToken(HogQLParser.RIGHT, 0)
        def OUTER(self):
            return self.getToken(HogQLParser.OUTER, 0)
        def SEMI(self):
            return self.getToken(HogQLParser.SEMI, 0)
        def ALL(self):
            return self.getToken(HogQLParser.ALL, 0)
        def ANTI(self):
            return self.getToken(HogQLParser.ANTI, 0)
        def ANY(self):
            return self.getToken(HogQLParser.ANY, 0)
        def ASOF(self):
            return self.getToken(HogQLParser.ASOF, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinOpLeftRight" ):
                return visitor.visitJoinOpLeftRight(self)
            else:
                return visitor.visitChildren(self)



    def joinOp(self):

        localctx = HogQLParser.JoinOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_joinOp)
        self._la = 0 # Token type
        try:
            self.state = 367
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
            if la_ == 1:
                localctx = HogQLParser.JoinOpInnerContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 333
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
                if la_ == 1:
                    self.state = 325
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4368) != 0):
                        self.state = 324
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 4368) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 327
                    self.match(HogQLParser.INNER)
                    pass

                elif la_ == 2:
                    self.state = 328
                    self.match(HogQLParser.INNER)
                    self.state = 330
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4368) != 0):
                        self.state = 329
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 4368) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    pass

                elif la_ == 3:
                    self.state = 332
                    _la = self._input.LA(1)
                    if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 4368) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass


                pass

            elif la_ == 2:
                localctx = HogQLParser.JoinOpLeftRightContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 349
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
                if la_ == 1:
                    self.state = 336
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4496) != 0) or _la==147:
                        self.state = 335
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 4496) != 0) or _la==147):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 338
                    _la = self._input.LA(1)
                    if not(_la==96 or _la==140):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 340
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==123:
                        self.state = 339
                        self.match(HogQLParser.OUTER)


                    pass

                elif la_ == 2:
                    self.state = 342
                    _la = self._input.LA(1)
                    if not(_la==96 or _la==140):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 344
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==123:
                        self.state = 343
                        self.match(HogQLParser.OUTER)


                    self.state = 347
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4496) != 0) or _la==147:
                        self.state = 346
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 4496) != 0) or _la==147):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    pass


                pass

            elif la_ == 3:
                localctx = HogQLParser.JoinOpFullContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 365
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
                if la_ == 1:
                    self.state = 352
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==4 or _la==8:
                        self.state = 351
                        _la = self._input.LA(1)
                        if not(_la==4 or _la==8):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 354
                    self.match(HogQLParser.FULL)
                    self.state = 356
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==123:
                        self.state = 355
                        self.match(HogQLParser.OUTER)


                    pass

                elif la_ == 2:
                    self.state = 358
                    self.match(HogQLParser.FULL)
                    self.state = 360
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==123:
                        self.state = 359
                        self.match(HogQLParser.OUTER)


                    self.state = 363
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==4 or _la==8:
                        self.state = 362
                        _la = self._input.LA(1)
                        if not(_la==4 or _la==8):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    pass


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinOpCrossContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CROSS(self):
            return self.getToken(HogQLParser.CROSS, 0)

        def JOIN(self):
            return self.getToken(HogQLParser.JOIN, 0)

        def COMMA(self):
            return self.getToken(HogQLParser.COMMA, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_joinOpCross

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinOpCross" ):
                return visitor.visitJoinOpCross(self)
            else:
                return visitor.visitChildren(self)




    def joinOpCross(self):

        localctx = HogQLParser.JoinOpCrossContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_joinOpCross)
        try:
            self.state = 372
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [31]:
                self.enterOuterAlt(localctx, 1)
                self.state = 369
                self.match(HogQLParser.CROSS)
                self.state = 370
                self.match(HogQLParser.JOIN)
                pass
            elif token in [206]:
                self.enterOuterAlt(localctx, 2)
                self.state = 371
                self.match(HogQLParser.COMMA)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinConstraintClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(HogQLParser.ON, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def USING(self):
            return self.getToken(HogQLParser.USING, 0)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_joinConstraintClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinConstraintClause" ):
                return visitor.visitJoinConstraintClause(self)
            else:
                return visitor.visitChildren(self)




    def joinConstraintClause(self):

        localctx = HogQLParser.JoinConstraintClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_joinConstraintClause)
        try:
            self.state = 383
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 374
                self.match(HogQLParser.ON)
                self.state = 375
                self.columnExprList()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 376
                self.match(HogQLParser.USING)
                self.state = 377
                self.match(HogQLParser.LPAREN)
                self.state = 378
                self.columnExprList()
                self.state = 379
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 381
                self.match(HogQLParser.USING)
                self.state = 382
                self.columnExprList()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SampleClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SAMPLE(self):
            return self.getToken(HogQLParser.SAMPLE, 0)

        def ratioExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.RatioExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.RatioExprContext,i)


        def OFFSET(self):
            return self.getToken(HogQLParser.OFFSET, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_sampleClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSampleClause" ):
                return visitor.visitSampleClause(self)
            else:
                return visitor.visitChildren(self)




    def sampleClause(self):

        localctx = HogQLParser.SampleClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_sampleClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 385
            self.match(HogQLParser.SAMPLE)
            self.state = 386
            self.ratioExpr()
            self.state = 389
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,49,self._ctx)
            if la_ == 1:
                self.state = 387
                self.match(HogQLParser.OFFSET)
                self.state = 388
                self.ratioExpr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderExprListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def orderExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.OrderExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.OrderExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_orderExprList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrderExprList" ):
                return visitor.visitOrderExprList(self)
            else:
                return visitor.visitChildren(self)




    def orderExprList(self):

        localctx = HogQLParser.OrderExprListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_orderExprList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 391
            self.orderExpr()
            self.state = 396
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==206:
                self.state = 392
                self.match(HogQLParser.COMMA)
                self.state = 393
                self.orderExpr()
                self.state = 398
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def NULLS(self):
            return self.getToken(HogQLParser.NULLS, 0)

        def COLLATE(self):
            return self.getToken(HogQLParser.COLLATE, 0)

        def STRING_LITERAL(self):
            return self.getToken(HogQLParser.STRING_LITERAL, 0)

        def ASCENDING(self):
            return self.getToken(HogQLParser.ASCENDING, 0)

        def DESCENDING(self):
            return self.getToken(HogQLParser.DESCENDING, 0)

        def DESC(self):
            return self.getToken(HogQLParser.DESC, 0)

        def FIRST(self):
            return self.getToken(HogQLParser.FIRST, 0)

        def LAST(self):
            return self.getToken(HogQLParser.LAST, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_orderExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrderExpr" ):
                return visitor.visitOrderExpr(self)
            else:
                return visitor.visitChildren(self)




    def orderExpr(self):

        localctx = HogQLParser.OrderExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_orderExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 399
            self.columnExpr(0)
            self.state = 401
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 13194139535360) != 0):
                self.state = 400
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 13194139535360) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 405
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==117:
                self.state = 403
                self.match(HogQLParser.NULLS)
                self.state = 404
                _la = self._input.LA(1)
                if not(_la==62 or _la==93):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 409
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==26:
                self.state = 407
                self.match(HogQLParser.COLLATE)
                self.state = 408
                self.match(HogQLParser.STRING_LITERAL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RatioExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numberLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.NumberLiteralContext)
            else:
                return self.getTypedRuleContext(HogQLParser.NumberLiteralContext,i)


        def SLASH(self):
            return self.getToken(HogQLParser.SLASH, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_ratioExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRatioExpr" ):
                return visitor.visitRatioExpr(self)
            else:
                return visitor.visitChildren(self)




    def ratioExpr(self):

        localctx = HogQLParser.RatioExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_ratioExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 411
            self.numberLiteral()
            self.state = 414
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
            if la_ == 1:
                self.state = 412
                self.match(HogQLParser.SLASH)
                self.state = 413
                self.numberLiteral()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SettingExprListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def settingExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.SettingExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.SettingExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_settingExprList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSettingExprList" ):
                return visitor.visitSettingExprList(self)
            else:
                return visitor.visitChildren(self)




    def settingExprList(self):

        localctx = HogQLParser.SettingExprListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_settingExprList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 416
            self.settingExpr()
            self.state = 421
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==206:
                self.state = 417
                self.match(HogQLParser.COMMA)
                self.state = 418
                self.settingExpr()
                self.state = 423
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SettingExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def EQ_SINGLE(self):
            return self.getToken(HogQLParser.EQ_SINGLE, 0)

        def literal(self):
            return self.getTypedRuleContext(HogQLParser.LiteralContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_settingExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSettingExpr" ):
                return visitor.visitSettingExpr(self)
            else:
                return visitor.visitChildren(self)




    def settingExpr(self):

        localctx = HogQLParser.SettingExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_settingExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 424
            self.identifier()
            self.state = 425
            self.match(HogQLParser.EQ_SINGLE)
            self.state = 426
            self.literal()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def winPartitionByClause(self):
            return self.getTypedRuleContext(HogQLParser.WinPartitionByClauseContext,0)


        def winOrderByClause(self):
            return self.getTypedRuleContext(HogQLParser.WinOrderByClauseContext,0)


        def winFrameClause(self):
            return self.getTypedRuleContext(HogQLParser.WinFrameClauseContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_windowExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindowExpr" ):
                return visitor.visitWindowExpr(self)
            else:
                return visitor.visitChildren(self)




    def windowExpr(self):

        localctx = HogQLParser.WindowExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_windowExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 429
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==126:
                self.state = 428
                self.winPartitionByClause()


            self.state = 432
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==122:
                self.state = 431
                self.winOrderByClause()


            self.state = 435
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==133 or _la==143:
                self.state = 434
                self.winFrameClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WinPartitionByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION(self):
            return self.getToken(HogQLParser.PARTITION, 0)

        def BY(self):
            return self.getToken(HogQLParser.BY, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_winPartitionByClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWinPartitionByClause" ):
                return visitor.visitWinPartitionByClause(self)
            else:
                return visitor.visitChildren(self)




    def winPartitionByClause(self):

        localctx = HogQLParser.WinPartitionByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_winPartitionByClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 437
            self.match(HogQLParser.PARTITION)
            self.state = 438
            self.match(HogQLParser.BY)
            self.state = 439
            self.columnExprList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WinOrderByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(HogQLParser.ORDER, 0)

        def BY(self):
            return self.getToken(HogQLParser.BY, 0)

        def orderExprList(self):
            return self.getTypedRuleContext(HogQLParser.OrderExprListContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_winOrderByClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWinOrderByClause" ):
                return visitor.visitWinOrderByClause(self)
            else:
                return visitor.visitChildren(self)




    def winOrderByClause(self):

        localctx = HogQLParser.WinOrderByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_winOrderByClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 441
            self.match(HogQLParser.ORDER)
            self.state = 442
            self.match(HogQLParser.BY)
            self.state = 443
            self.orderExprList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WinFrameClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def winFrameExtend(self):
            return self.getTypedRuleContext(HogQLParser.WinFrameExtendContext,0)


        def ROWS(self):
            return self.getToken(HogQLParser.ROWS, 0)

        def RANGE(self):
            return self.getToken(HogQLParser.RANGE, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_winFrameClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWinFrameClause" ):
                return visitor.visitWinFrameClause(self)
            else:
                return visitor.visitChildren(self)




    def winFrameClause(self):

        localctx = HogQLParser.WinFrameClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_winFrameClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 445
            _la = self._input.LA(1)
            if not(_la==133 or _la==143):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 446
            self.winFrameExtend()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WinFrameExtendContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return HogQLParser.RULE_winFrameExtend

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class FrameStartContext(WinFrameExtendContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.WinFrameExtendContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def winFrameBound(self):
            return self.getTypedRuleContext(HogQLParser.WinFrameBoundContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFrameStart" ):
                return visitor.visitFrameStart(self)
            else:
                return visitor.visitChildren(self)


    class FrameBetweenContext(WinFrameExtendContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.WinFrameExtendContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BETWEEN(self):
            return self.getToken(HogQLParser.BETWEEN, 0)
        def winFrameBound(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.WinFrameBoundContext)
            else:
                return self.getTypedRuleContext(HogQLParser.WinFrameBoundContext,i)

        def AND(self):
            return self.getToken(HogQLParser.AND, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFrameBetween" ):
                return visitor.visitFrameBetween(self)
            else:
                return visitor.visitChildren(self)



    def winFrameExtend(self):

        localctx = HogQLParser.WinFrameExtendContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_winFrameExtend)
        try:
            self.state = 454
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [33, 82, 113, 175, 195, 196, 197, 198, 208, 210, 228]:
                localctx = HogQLParser.FrameStartContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 448
                self.winFrameBound()
                pass
            elif token in [16]:
                localctx = HogQLParser.FrameBetweenContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 449
                self.match(HogQLParser.BETWEEN)
                self.state = 450
                self.winFrameBound()
                self.state = 451
                self.match(HogQLParser.AND)
                self.state = 452
                self.winFrameBound()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WinFrameBoundContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CURRENT(self):
            return self.getToken(HogQLParser.CURRENT, 0)

        def ROW(self):
            return self.getToken(HogQLParser.ROW, 0)

        def UNBOUNDED(self):
            return self.getToken(HogQLParser.UNBOUNDED, 0)

        def PRECEDING(self):
            return self.getToken(HogQLParser.PRECEDING, 0)

        def FOLLOWING(self):
            return self.getToken(HogQLParser.FOLLOWING, 0)

        def numberLiteral(self):
            return self.getTypedRuleContext(HogQLParser.NumberLiteralContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_winFrameBound

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWinFrameBound" ):
                return visitor.visitWinFrameBound(self)
            else:
                return visitor.visitChildren(self)




    def winFrameBound(self):

        localctx = HogQLParser.WinFrameBoundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_winFrameBound)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 468
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
            if la_ == 1:
                self.state = 456
                self.match(HogQLParser.CURRENT)
                self.state = 457
                self.match(HogQLParser.ROW)
                pass

            elif la_ == 2:
                self.state = 458
                self.match(HogQLParser.UNBOUNDED)
                self.state = 459
                self.match(HogQLParser.PRECEDING)
                pass

            elif la_ == 3:
                self.state = 460
                self.match(HogQLParser.UNBOUNDED)
                self.state = 461
                self.match(HogQLParser.FOLLOWING)
                pass

            elif la_ == 4:
                self.state = 462
                self.numberLiteral()
                self.state = 463
                self.match(HogQLParser.PRECEDING)
                pass

            elif la_ == 5:
                self.state = 465
                self.numberLiteral()
                self.state = 466
                self.match(HogQLParser.FOLLOWING)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def EOF(self):
            return self.getToken(HogQLParser.EOF, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_expr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpr" ):
                return visitor.visitExpr(self)
            else:
                return visitor.visitChildren(self)




    def expr(self):

        localctx = HogQLParser.ExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 470
            self.columnExpr(0)
            self.state = 471
            self.match(HogQLParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnTypeExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return HogQLParser.RULE_columnTypeExpr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ColumnTypeExprNestedContext(ColumnTypeExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnTypeExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(HogQLParser.IdentifierContext,i)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def columnTypeExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnTypeExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnTypeExprContext,i)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnTypeExprNested" ):
                return visitor.visitColumnTypeExprNested(self)
            else:
                return visitor.visitChildren(self)


    class ColumnTypeExprParamContext(ColumnTypeExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnTypeExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)
        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnTypeExprParam" ):
                return visitor.visitColumnTypeExprParam(self)
            else:
                return visitor.visitChildren(self)


    class ColumnTypeExprSimpleContext(ColumnTypeExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnTypeExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnTypeExprSimple" ):
                return visitor.visitColumnTypeExprSimple(self)
            else:
                return visitor.visitChildren(self)


    class ColumnTypeExprComplexContext(ColumnTypeExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnTypeExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def columnTypeExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnTypeExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnTypeExprContext,i)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnTypeExprComplex" ):
                return visitor.visitColumnTypeExprComplex(self)
            else:
                return visitor.visitChildren(self)


    class ColumnTypeExprEnumContext(ColumnTypeExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnTypeExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def enumValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.EnumValueContext)
            else:
                return self.getTypedRuleContext(HogQLParser.EnumValueContext,i)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnTypeExprEnum" ):
                return visitor.visitColumnTypeExprEnum(self)
            else:
                return visitor.visitChildren(self)



    def columnTypeExpr(self):

        localctx = HogQLParser.ColumnTypeExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_columnTypeExpr)
        self._la = 0 # Token type
        try:
            self.state = 520
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
            if la_ == 1:
                localctx = HogQLParser.ColumnTypeExprSimpleContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 473
                self.identifier()
                pass

            elif la_ == 2:
                localctx = HogQLParser.ColumnTypeExprNestedContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 474
                self.identifier()
                self.state = 475
                self.match(HogQLParser.LPAREN)
                self.state = 476
                self.identifier()
                self.state = 477
                self.columnTypeExpr()
                self.state = 484
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==206:
                    self.state = 478
                    self.match(HogQLParser.COMMA)
                    self.state = 479
                    self.identifier()
                    self.state = 480
                    self.columnTypeExpr()
                    self.state = 486
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 487
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 3:
                localctx = HogQLParser.ColumnTypeExprEnumContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 489
                self.identifier()
                self.state = 490
                self.match(HogQLParser.LPAREN)
                self.state = 491
                self.enumValue()
                self.state = 496
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==206:
                    self.state = 492
                    self.match(HogQLParser.COMMA)
                    self.state = 493
                    self.enumValue()
                    self.state = 498
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 499
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 4:
                localctx = HogQLParser.ColumnTypeExprComplexContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 501
                self.identifier()
                self.state = 502
                self.match(HogQLParser.LPAREN)
                self.state = 503
                self.columnTypeExpr()
                self.state = 508
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==206:
                    self.state = 504
                    self.match(HogQLParser.COMMA)
                    self.state = 505
                    self.columnTypeExpr()
                    self.state = 510
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 511
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 5:
                localctx = HogQLParser.ColumnTypeExprParamContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 513
                self.identifier()
                self.state = 514
                self.match(HogQLParser.LPAREN)
                self.state = 516
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -33554436) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -9) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & 69122459133) != 0):
                    self.state = 515
                    self.columnExprList()


                self.state = 518
                self.match(HogQLParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnExprListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_columnExprList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprList" ):
                return visitor.visitColumnExprList(self)
            else:
                return visitor.visitChildren(self)




    def columnExprList(self):

        localctx = HogQLParser.ColumnExprListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_columnExprList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 522
            self.columnExpr(0)
            self.state = 527
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,66,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 523
                    self.match(HogQLParser.COMMA)
                    self.state = 524
                    self.columnExpr(0) 
                self.state = 529
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,66,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return HogQLParser.RULE_columnExpr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class ColumnExprTernaryOpContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def QUERY(self):
            return self.getToken(HogQLParser.QUERY, 0)
        def COLON(self):
            return self.getToken(HogQLParser.COLON, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprTernaryOp" ):
                return visitor.visitColumnExprTernaryOp(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprAliasContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def alias(self):
            return self.getTypedRuleContext(HogQLParser.AliasContext,0)

        def AS(self):
            return self.getToken(HogQLParser.AS, 0)
        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)

        def STRING_LITERAL(self):
            return self.getToken(HogQLParser.STRING_LITERAL, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprAlias" ):
                return visitor.visitColumnExprAlias(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprExtractContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXTRACT(self):
            return self.getToken(HogQLParser.EXTRACT, 0)
        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def interval(self):
            return self.getTypedRuleContext(HogQLParser.IntervalContext,0)

        def FROM(self):
            return self.getToken(HogQLParser.FROM, 0)
        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprExtract" ):
                return visitor.visitColumnExprExtract(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprNegateContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DASH(self):
            return self.getToken(HogQLParser.DASH, 0)
        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprNegate" ):
                return visitor.visitColumnExprNegate(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprSubqueryContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def selectUnionStmt(self):
            return self.getTypedRuleContext(HogQLParser.SelectUnionStmtContext,0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprSubquery" ):
                return visitor.visitColumnExprSubquery(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprLiteralContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def literal(self):
            return self.getTypedRuleContext(HogQLParser.LiteralContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprLiteral" ):
                return visitor.visitColumnExprLiteral(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprArrayContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LBRACKET(self):
            return self.getToken(HogQLParser.LBRACKET, 0)
        def RBRACKET(self):
            return self.getToken(HogQLParser.RBRACKET, 0)
        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprArray" ):
                return visitor.visitColumnExprArray(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprSubstringContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SUBSTRING(self):
            return self.getToken(HogQLParser.SUBSTRING, 0)
        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def FROM(self):
            return self.getToken(HogQLParser.FROM, 0)
        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)
        def FOR(self):
            return self.getToken(HogQLParser.FOR, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprSubstring" ):
                return visitor.visitColumnExprSubstring(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprCastContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CAST(self):
            return self.getToken(HogQLParser.CAST, 0)
        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def AS(self):
            return self.getToken(HogQLParser.AS, 0)
        def columnTypeExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnTypeExprContext,0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprCast" ):
                return visitor.visitColumnExprCast(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprOrContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def OR(self):
            return self.getToken(HogQLParser.OR, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprOr" ):
                return visitor.visitColumnExprOr(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprPrecedence1Context(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.left = None # ColumnExprContext
            self.operator = None # Token
            self.right = None # ColumnExprContext
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def ASTERISK(self):
            return self.getToken(HogQLParser.ASTERISK, 0)
        def SLASH(self):
            return self.getToken(HogQLParser.SLASH, 0)
        def PERCENT(self):
            return self.getToken(HogQLParser.PERCENT, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprPrecedence1" ):
                return visitor.visitColumnExprPrecedence1(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprPrecedence2Context(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.left = None # ColumnExprContext
            self.operator = None # Token
            self.right = None # ColumnExprContext
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def PLUS(self):
            return self.getToken(HogQLParser.PLUS, 0)
        def DASH(self):
            return self.getToken(HogQLParser.DASH, 0)
        def CONCAT(self):
            return self.getToken(HogQLParser.CONCAT, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprPrecedence2" ):
                return visitor.visitColumnExprPrecedence2(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprPrecedence3Context(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.left = None # ColumnExprContext
            self.operator = None # Token
            self.right = None # ColumnExprContext
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def IN(self):
            return self.getToken(HogQLParser.IN, 0)
        def EQ_DOUBLE(self):
            return self.getToken(HogQLParser.EQ_DOUBLE, 0)
        def EQ_SINGLE(self):
            return self.getToken(HogQLParser.EQ_SINGLE, 0)
        def NOT_EQ(self):
            return self.getToken(HogQLParser.NOT_EQ, 0)
        def LT_EQ(self):
            return self.getToken(HogQLParser.LT_EQ, 0)
        def LT(self):
            return self.getToken(HogQLParser.LT, 0)
        def GT_EQ(self):
            return self.getToken(HogQLParser.GT_EQ, 0)
        def GT(self):
            return self.getToken(HogQLParser.GT, 0)
        def LIKE(self):
            return self.getToken(HogQLParser.LIKE, 0)
        def ILIKE(self):
            return self.getToken(HogQLParser.ILIKE, 0)
        def REGEX_SINGLE(self):
            return self.getToken(HogQLParser.REGEX_SINGLE, 0)
        def REGEX_DOUBLE(self):
            return self.getToken(HogQLParser.REGEX_DOUBLE, 0)
        def NOT_REGEX(self):
            return self.getToken(HogQLParser.NOT_REGEX, 0)
        def IREGEX_SINGLE(self):
            return self.getToken(HogQLParser.IREGEX_SINGLE, 0)
        def IREGEX_DOUBLE(self):
            return self.getToken(HogQLParser.IREGEX_DOUBLE, 0)
        def NOT_IREGEX(self):
            return self.getToken(HogQLParser.NOT_IREGEX, 0)
        def COHORT(self):
            return self.getToken(HogQLParser.COHORT, 0)
        def NOT(self):
            return self.getToken(HogQLParser.NOT, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprPrecedence3" ):
                return visitor.visitColumnExprPrecedence3(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprIntervalContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INTERVAL(self):
            return self.getToken(HogQLParser.INTERVAL, 0)
        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def interval(self):
            return self.getTypedRuleContext(HogQLParser.IntervalContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprInterval" ):
                return visitor.visitColumnExprInterval(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprIsNullContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def IS(self):
            return self.getToken(HogQLParser.IS, 0)
        def NULL_SQL(self):
            return self.getToken(HogQLParser.NULL_SQL, 0)
        def NOT(self):
            return self.getToken(HogQLParser.NOT, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprIsNull" ):
                return visitor.visitColumnExprIsNull(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprWinFunctionTargetContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(HogQLParser.IdentifierContext,i)

        def OVER(self):
            return self.getToken(HogQLParser.OVER, 0)
        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)
        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprWinFunctionTarget" ):
                return visitor.visitColumnExprWinFunctionTarget(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprTrimContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TRIM(self):
            return self.getToken(HogQLParser.TRIM, 0)
        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def STRING_LITERAL(self):
            return self.getToken(HogQLParser.STRING_LITERAL, 0)
        def FROM(self):
            return self.getToken(HogQLParser.FROM, 0)
        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)
        def BOTH(self):
            return self.getToken(HogQLParser.BOTH, 0)
        def LEADING(self):
            return self.getToken(HogQLParser.LEADING, 0)
        def TRAILING(self):
            return self.getToken(HogQLParser.TRAILING, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprTrim" ):
                return visitor.visitColumnExprTrim(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprTupleContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprTuple" ):
                return visitor.visitColumnExprTuple(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprArrayAccessContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def LBRACKET(self):
            return self.getToken(HogQLParser.LBRACKET, 0)
        def RBRACKET(self):
            return self.getToken(HogQLParser.RBRACKET, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprArrayAccess" ):
                return visitor.visitColumnExprArrayAccess(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprBetweenContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def BETWEEN(self):
            return self.getToken(HogQLParser.BETWEEN, 0)
        def AND(self):
            return self.getToken(HogQLParser.AND, 0)
        def NOT(self):
            return self.getToken(HogQLParser.NOT, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprBetween" ):
                return visitor.visitColumnExprBetween(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprPropertyAccessContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def DOT(self):
            return self.getToken(HogQLParser.DOT, 0)
        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprPropertyAccess" ):
                return visitor.visitColumnExprPropertyAccess(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprParensContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprParens" ):
                return visitor.visitColumnExprParens(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprTimestampContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TIMESTAMP(self):
            return self.getToken(HogQLParser.TIMESTAMP, 0)
        def STRING_LITERAL(self):
            return self.getToken(HogQLParser.STRING_LITERAL, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprTimestamp" ):
                return visitor.visitColumnExprTimestamp(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprNullishContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def NULLISH(self):
            return self.getToken(HogQLParser.NULLISH, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprNullish" ):
                return visitor.visitColumnExprNullish(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprAndContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def AND(self):
            return self.getToken(HogQLParser.AND, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprAnd" ):
                return visitor.visitColumnExprAnd(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprTupleAccessContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def DOT(self):
            return self.getToken(HogQLParser.DOT, 0)
        def DECIMAL_LITERAL(self):
            return self.getToken(HogQLParser.DECIMAL_LITERAL, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprTupleAccess" ):
                return visitor.visitColumnExprTupleAccess(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprCaseContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.caseExpr = None # ColumnExprContext
            self.whenExpr = None # ColumnExprContext
            self.thenExpr = None # ColumnExprContext
            self.elseExpr = None # ColumnExprContext
            self.copyFrom(ctx)

        def CASE(self):
            return self.getToken(HogQLParser.CASE, 0)
        def END(self):
            return self.getToken(HogQLParser.END, 0)
        def WHEN(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.WHEN)
            else:
                return self.getToken(HogQLParser.WHEN, i)
        def THEN(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.THEN)
            else:
                return self.getToken(HogQLParser.THEN, i)
        def ELSE(self):
            return self.getToken(HogQLParser.ELSE, 0)
        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprCase" ):
                return visitor.visitColumnExprCase(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprDateContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DATE(self):
            return self.getToken(HogQLParser.DATE, 0)
        def STRING_LITERAL(self):
            return self.getToken(HogQLParser.STRING_LITERAL, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprDate" ):
                return visitor.visitColumnExprDate(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprNotContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NOT(self):
            return self.getToken(HogQLParser.NOT, 0)
        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprNot" ):
                return visitor.visitColumnExprNot(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprWinFunctionContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)

        def OVER(self):
            return self.getToken(HogQLParser.OVER, 0)
        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.LPAREN)
            else:
                return self.getToken(HogQLParser.LPAREN, i)
        def windowExpr(self):
            return self.getTypedRuleContext(HogQLParser.WindowExprContext,0)

        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.RPAREN)
            else:
                return self.getToken(HogQLParser.RPAREN, i)
        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprWinFunction" ):
                return visitor.visitColumnExprWinFunction(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprIdentifierContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnIdentifier(self):
            return self.getTypedRuleContext(HogQLParser.ColumnIdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprIdentifier" ):
                return visitor.visitColumnExprIdentifier(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprFunctionContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)

        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.LPAREN)
            else:
                return self.getToken(HogQLParser.LPAREN, i)
        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.RPAREN)
            else:
                return self.getToken(HogQLParser.RPAREN, i)
        def DISTINCT(self):
            return self.getToken(HogQLParser.DISTINCT, 0)
        def columnArgList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnArgListContext,0)

        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprFunction" ):
                return visitor.visitColumnExprFunction(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprAsteriskContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ASTERISK(self):
            return self.getToken(HogQLParser.ASTERISK, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(HogQLParser.TableIdentifierContext,0)

        def DOT(self):
            return self.getToken(HogQLParser.DOT, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprAsterisk" ):
                return visitor.visitColumnExprAsterisk(self)
            else:
                return visitor.visitChildren(self)



    def columnExpr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = HogQLParser.ColumnExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 74
        self.enterRecursionRule(localctx, 74, self.RULE_columnExpr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 659
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,79,self._ctx)
            if la_ == 1:
                localctx = HogQLParser.ColumnExprCaseContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 531
                self.match(HogQLParser.CASE)
                self.state = 533
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,67,self._ctx)
                if la_ == 1:
                    self.state = 532
                    localctx.caseExpr = self.columnExpr(0)


                self.state = 540 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 535
                    self.match(HogQLParser.WHEN)
                    self.state = 536
                    localctx.whenExpr = self.columnExpr(0)
                    self.state = 537
                    self.match(HogQLParser.THEN)
                    self.state = 538
                    localctx.thenExpr = self.columnExpr(0)
                    self.state = 542 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==186):
                        break

                self.state = 546
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==52:
                    self.state = 544
                    self.match(HogQLParser.ELSE)
                    self.state = 545
                    localctx.elseExpr = self.columnExpr(0)


                self.state = 548
                self.match(HogQLParser.END)
                pass

            elif la_ == 2:
                localctx = HogQLParser.ColumnExprCastContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 550
                self.match(HogQLParser.CAST)
                self.state = 551
                self.match(HogQLParser.LPAREN)
                self.state = 552
                self.columnExpr(0)
                self.state = 553
                self.match(HogQLParser.AS)
                self.state = 554
                self.columnTypeExpr()
                self.state = 555
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 3:
                localctx = HogQLParser.ColumnExprDateContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 557
                self.match(HogQLParser.DATE)
                self.state = 558
                self.match(HogQLParser.STRING_LITERAL)
                pass

            elif la_ == 4:
                localctx = HogQLParser.ColumnExprExtractContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 559
                self.match(HogQLParser.EXTRACT)
                self.state = 560
                self.match(HogQLParser.LPAREN)
                self.state = 561
                self.interval()
                self.state = 562
                self.match(HogQLParser.FROM)
                self.state = 563
                self.columnExpr(0)
                self.state = 564
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 5:
                localctx = HogQLParser.ColumnExprIntervalContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 566
                self.match(HogQLParser.INTERVAL)
                self.state = 567
                self.columnExpr(0)
                self.state = 568
                self.interval()
                pass

            elif la_ == 6:
                localctx = HogQLParser.ColumnExprSubstringContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 570
                self.match(HogQLParser.SUBSTRING)
                self.state = 571
                self.match(HogQLParser.LPAREN)
                self.state = 572
                self.columnExpr(0)
                self.state = 573
                self.match(HogQLParser.FROM)
                self.state = 574
                self.columnExpr(0)
                self.state = 577
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==65:
                    self.state = 575
                    self.match(HogQLParser.FOR)
                    self.state = 576
                    self.columnExpr(0)


                self.state = 579
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 7:
                localctx = HogQLParser.ColumnExprTimestampContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 581
                self.match(HogQLParser.TIMESTAMP)
                self.state = 582
                self.match(HogQLParser.STRING_LITERAL)
                pass

            elif la_ == 8:
                localctx = HogQLParser.ColumnExprTrimContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 583
                self.match(HogQLParser.TRIM)
                self.state = 584
                self.match(HogQLParser.LPAREN)
                self.state = 585
                _la = self._input.LA(1)
                if not(_la==17 or _la==95 or _la==170):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 586
                self.match(HogQLParser.STRING_LITERAL)
                self.state = 587
                self.match(HogQLParser.FROM)
                self.state = 588
                self.columnExpr(0)
                self.state = 589
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 9:
                localctx = HogQLParser.ColumnExprWinFunctionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 591
                self.identifier()

                self.state = 592
                self.match(HogQLParser.LPAREN)
                self.state = 594
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -33554436) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -9) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & 69122459133) != 0):
                    self.state = 593
                    self.columnExprList()


                self.state = 596
                self.match(HogQLParser.RPAREN)
                self.state = 598
                self.match(HogQLParser.OVER)
                self.state = 599
                self.match(HogQLParser.LPAREN)
                self.state = 600
                self.windowExpr()
                self.state = 601
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 10:
                localctx = HogQLParser.ColumnExprWinFunctionTargetContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 603
                self.identifier()

                self.state = 604
                self.match(HogQLParser.LPAREN)
                self.state = 606
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -33554436) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -9) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & 69122459133) != 0):
                    self.state = 605
                    self.columnExprList()


                self.state = 608
                self.match(HogQLParser.RPAREN)
                self.state = 610
                self.match(HogQLParser.OVER)
                self.state = 611
                self.identifier()
                pass

            elif la_ == 11:
                localctx = HogQLParser.ColumnExprFunctionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 613
                self.identifier()
                self.state = 619
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
                if la_ == 1:
                    self.state = 614
                    self.match(HogQLParser.LPAREN)
                    self.state = 616
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & -33554436) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -9) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & 69122459133) != 0):
                        self.state = 615
                        self.columnExprList()


                    self.state = 618
                    self.match(HogQLParser.RPAREN)


                self.state = 621
                self.match(HogQLParser.LPAREN)
                self.state = 623
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
                if la_ == 1:
                    self.state = 622
                    self.match(HogQLParser.DISTINCT)


                self.state = 626
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -33554436) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -9) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & 69122459133) != 0):
                    self.state = 625
                    self.columnArgList()


                self.state = 628
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 12:
                localctx = HogQLParser.ColumnExprLiteralContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 630
                self.literal()
                pass

            elif la_ == 13:
                localctx = HogQLParser.ColumnExprNegateContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 631
                self.match(HogQLParser.DASH)
                self.state = 632
                self.columnExpr(18)
                pass

            elif la_ == 14:
                localctx = HogQLParser.ColumnExprNotContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 633
                self.match(HogQLParser.NOT)
                self.state = 634
                self.columnExpr(12)
                pass

            elif la_ == 15:
                localctx = HogQLParser.ColumnExprAsteriskContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 638
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -33554436) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -5066549581053953) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -9) != 0) or _la==192 or _la==194:
                    self.state = 635
                    self.tableIdentifier()
                    self.state = 636
                    self.match(HogQLParser.DOT)


                self.state = 640
                self.match(HogQLParser.ASTERISK)
                pass

            elif la_ == 16:
                localctx = HogQLParser.ColumnExprSubqueryContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 641
                self.match(HogQLParser.LPAREN)
                self.state = 642
                self.selectUnionStmt()
                self.state = 643
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 17:
                localctx = HogQLParser.ColumnExprParensContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 645
                self.match(HogQLParser.LPAREN)
                self.state = 646
                self.columnExpr(0)
                self.state = 647
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 18:
                localctx = HogQLParser.ColumnExprTupleContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 649
                self.match(HogQLParser.LPAREN)
                self.state = 650
                self.columnExprList()
                self.state = 651
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 19:
                localctx = HogQLParser.ColumnExprArrayContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 653
                self.match(HogQLParser.LBRACKET)
                self.state = 655
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -33554436) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -9) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & 69122459133) != 0):
                    self.state = 654
                    self.columnExprList()


                self.state = 657
                self.match(HogQLParser.RBRACKET)
                pass

            elif la_ == 20:
                localctx = HogQLParser.ColumnExprIdentifierContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 658
                self.columnIdentifier()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 754
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,90,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 752
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,89,self._ctx)
                    if la_ == 1:
                        localctx = HogQLParser.ColumnExprPrecedence1Context(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 661
                        if not self.precpred(self._ctx, 17):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 17)")
                        self.state = 665
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [202]:
                            self.state = 662
                            localctx.operator = self.match(HogQLParser.ASTERISK)
                            pass
                        elif token in [238]:
                            self.state = 663
                            localctx.operator = self.match(HogQLParser.SLASH)
                            pass
                        elif token in [227]:
                            self.state = 664
                            localctx.operator = self.match(HogQLParser.PERCENT)
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 667
                        localctx.right = self.columnExpr(18)
                        pass

                    elif la_ == 2:
                        localctx = HogQLParser.ColumnExprPrecedence2Context(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 668
                        if not self.precpred(self._ctx, 16):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 16)")
                        self.state = 672
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [228]:
                            self.state = 669
                            localctx.operator = self.match(HogQLParser.PLUS)
                            pass
                        elif token in [208]:
                            self.state = 670
                            localctx.operator = self.match(HogQLParser.DASH)
                            pass
                        elif token in [207]:
                            self.state = 671
                            localctx.operator = self.match(HogQLParser.CONCAT)
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 674
                        localctx.right = self.columnExpr(17)
                        pass

                    elif la_ == 3:
                        localctx = HogQLParser.ColumnExprPrecedence3Context(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 675
                        if not self.precpred(self._ctx, 15):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 15)")
                        self.state = 700
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
                        if la_ == 1:
                            self.state = 676
                            localctx.operator = self.match(HogQLParser.EQ_DOUBLE)
                            pass

                        elif la_ == 2:
                            self.state = 677
                            localctx.operator = self.match(HogQLParser.EQ_SINGLE)
                            pass

                        elif la_ == 3:
                            self.state = 678
                            localctx.operator = self.match(HogQLParser.NOT_EQ)
                            pass

                        elif la_ == 4:
                            self.state = 679
                            localctx.operator = self.match(HogQLParser.LT_EQ)
                            pass

                        elif la_ == 5:
                            self.state = 680
                            localctx.operator = self.match(HogQLParser.LT)
                            pass

                        elif la_ == 6:
                            self.state = 681
                            localctx.operator = self.match(HogQLParser.GT_EQ)
                            pass

                        elif la_ == 7:
                            self.state = 682
                            localctx.operator = self.match(HogQLParser.GT)
                            pass

                        elif la_ == 8:
                            self.state = 684
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==115:
                                self.state = 683
                                localctx.operator = self.match(HogQLParser.NOT)


                            self.state = 686
                            self.match(HogQLParser.IN)
                            self.state = 688
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==25:
                                self.state = 687
                                self.match(HogQLParser.COHORT)


                            pass

                        elif la_ == 9:
                            self.state = 691
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==115:
                                self.state = 690
                                localctx.operator = self.match(HogQLParser.NOT)


                            self.state = 693
                            _la = self._input.LA(1)
                            if not(_la==79 or _la==98):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            pass

                        elif la_ == 10:
                            self.state = 694
                            localctx.operator = self.match(HogQLParser.REGEX_SINGLE)
                            pass

                        elif la_ == 11:
                            self.state = 695
                            localctx.operator = self.match(HogQLParser.REGEX_DOUBLE)
                            pass

                        elif la_ == 12:
                            self.state = 696
                            localctx.operator = self.match(HogQLParser.NOT_REGEX)
                            pass

                        elif la_ == 13:
                            self.state = 697
                            localctx.operator = self.match(HogQLParser.IREGEX_SINGLE)
                            pass

                        elif la_ == 14:
                            self.state = 698
                            localctx.operator = self.match(HogQLParser.IREGEX_DOUBLE)
                            pass

                        elif la_ == 15:
                            self.state = 699
                            localctx.operator = self.match(HogQLParser.NOT_IREGEX)
                            pass


                        self.state = 702
                        localctx.right = self.columnExpr(16)
                        pass

                    elif la_ == 4:
                        localctx = HogQLParser.ColumnExprNullishContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 703
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 704
                        self.match(HogQLParser.NULLISH)
                        self.state = 705
                        self.columnExpr(14)
                        pass

                    elif la_ == 5:
                        localctx = HogQLParser.ColumnExprAndContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 706
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 707
                        self.match(HogQLParser.AND)
                        self.state = 708
                        self.columnExpr(12)
                        pass

                    elif la_ == 6:
                        localctx = HogQLParser.ColumnExprOrContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 709
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 710
                        self.match(HogQLParser.OR)
                        self.state = 711
                        self.columnExpr(11)
                        pass

                    elif la_ == 7:
                        localctx = HogQLParser.ColumnExprBetweenContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 712
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 714
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==115:
                            self.state = 713
                            self.match(HogQLParser.NOT)


                        self.state = 716
                        self.match(HogQLParser.BETWEEN)
                        self.state = 717
                        self.columnExpr(0)
                        self.state = 718
                        self.match(HogQLParser.AND)
                        self.state = 719
                        self.columnExpr(10)
                        pass

                    elif la_ == 8:
                        localctx = HogQLParser.ColumnExprTernaryOpContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 721
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 722
                        self.match(HogQLParser.QUERY)
                        self.state = 723
                        self.columnExpr(0)
                        self.state = 724
                        self.match(HogQLParser.COLON)
                        self.state = 725
                        self.columnExpr(8)
                        pass

                    elif la_ == 9:
                        localctx = HogQLParser.ColumnExprArrayAccessContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 727
                        if not self.precpred(self._ctx, 21):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 21)")
                        self.state = 728
                        self.match(HogQLParser.LBRACKET)
                        self.state = 729
                        self.columnExpr(0)
                        self.state = 730
                        self.match(HogQLParser.RBRACKET)
                        pass

                    elif la_ == 10:
                        localctx = HogQLParser.ColumnExprTupleAccessContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 732
                        if not self.precpred(self._ctx, 20):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 20)")
                        self.state = 733
                        self.match(HogQLParser.DOT)
                        self.state = 734
                        self.match(HogQLParser.DECIMAL_LITERAL)
                        pass

                    elif la_ == 11:
                        localctx = HogQLParser.ColumnExprPropertyAccessContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 735
                        if not self.precpred(self._ctx, 19):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 19)")
                        self.state = 736
                        self.match(HogQLParser.DOT)
                        self.state = 737
                        self.identifier()
                        pass

                    elif la_ == 12:
                        localctx = HogQLParser.ColumnExprIsNullContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 738
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 739
                        self.match(HogQLParser.IS)
                        self.state = 741
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==115:
                            self.state = 740
                            self.match(HogQLParser.NOT)


                        self.state = 743
                        self.match(HogQLParser.NULL_SQL)
                        pass

                    elif la_ == 13:
                        localctx = HogQLParser.ColumnExprAliasContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 744
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 750
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
                        if la_ == 1:
                            self.state = 745
                            self.alias()
                            pass

                        elif la_ == 2:
                            self.state = 746
                            self.match(HogQLParser.AS)
                            self.state = 747
                            self.identifier()
                            pass

                        elif la_ == 3:
                            self.state = 748
                            self.match(HogQLParser.AS)
                            self.state = 749
                            self.match(HogQLParser.STRING_LITERAL)
                            pass


                        pass

             
                self.state = 756
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,90,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ColumnArgListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnArgExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnArgExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnArgExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_columnArgList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnArgList" ):
                return visitor.visitColumnArgList(self)
            else:
                return visitor.visitChildren(self)




    def columnArgList(self):

        localctx = HogQLParser.ColumnArgListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_columnArgList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 757
            self.columnArgExpr()
            self.state = 762
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==206:
                self.state = 758
                self.match(HogQLParser.COMMA)
                self.state = 759
                self.columnArgExpr()
                self.state = 764
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnArgExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnLambdaExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnLambdaExprContext,0)


        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_columnArgExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnArgExpr" ):
                return visitor.visitColumnArgExpr(self)
            else:
                return visitor.visitChildren(self)




    def columnArgExpr(self):

        localctx = HogQLParser.ColumnArgExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_columnArgExpr)
        try:
            self.state = 767
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 765
                self.columnLambdaExpr()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 766
                self.columnExpr(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnLambdaExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ARROW(self):
            return self.getToken(HogQLParser.ARROW, 0)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(HogQLParser.IdentifierContext,i)


        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_columnLambdaExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnLambdaExpr" ):
                return visitor.visitColumnLambdaExpr(self)
            else:
                return visitor.visitChildren(self)




    def columnLambdaExpr(self):

        localctx = HogQLParser.ColumnLambdaExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_columnLambdaExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 788
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [220]:
                self.state = 769
                self.match(HogQLParser.LPAREN)
                self.state = 770
                self.identifier()
                self.state = 775
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==206:
                    self.state = 771
                    self.match(HogQLParser.COMMA)
                    self.state = 772
                    self.identifier()
                    self.state = 777
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 778
                self.match(HogQLParser.RPAREN)
                pass
            elif token in [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194]:
                self.state = 780
                self.identifier()
                self.state = 785
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==206:
                    self.state = 781
                    self.match(HogQLParser.COMMA)
                    self.state = 782
                    self.identifier()
                    self.state = 787
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

            self.state = 790
            self.match(HogQLParser.ARROW)
            self.state = 791
            self.columnExpr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WithExprListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def withExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.WithExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.WithExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_withExprList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWithExprList" ):
                return visitor.visitWithExprList(self)
            else:
                return visitor.visitChildren(self)




    def withExprList(self):

        localctx = HogQLParser.WithExprListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_withExprList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 793
            self.withExpr()
            self.state = 798
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==206:
                self.state = 794
                self.match(HogQLParser.COMMA)
                self.state = 795
                self.withExpr()
                self.state = 800
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WithExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return HogQLParser.RULE_withExpr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class WithExprColumnContext(WithExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.WithExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def AS(self):
            return self.getToken(HogQLParser.AS, 0)
        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWithExprColumn" ):
                return visitor.visitWithExprColumn(self)
            else:
                return visitor.visitChildren(self)


    class WithExprSubqueryContext(WithExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.WithExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)

        def AS(self):
            return self.getToken(HogQLParser.AS, 0)
        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def selectUnionStmt(self):
            return self.getTypedRuleContext(HogQLParser.SelectUnionStmtContext,0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWithExprSubquery" ):
                return visitor.visitWithExprSubquery(self)
            else:
                return visitor.visitChildren(self)



    def withExpr(self):

        localctx = HogQLParser.WithExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_withExpr)
        try:
            self.state = 811
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
            if la_ == 1:
                localctx = HogQLParser.WithExprSubqueryContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 801
                self.identifier()
                self.state = 802
                self.match(HogQLParser.AS)
                self.state = 803
                self.match(HogQLParser.LPAREN)
                self.state = 804
                self.selectUnionStmt()
                self.state = 805
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 2:
                localctx = HogQLParser.WithExprColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 807
                self.columnExpr(0)
                self.state = 808
                self.match(HogQLParser.AS)
                self.state = 809
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLACEHOLDER(self):
            return self.getToken(HogQLParser.PLACEHOLDER, 0)

        def nestedIdentifier(self):
            return self.getTypedRuleContext(HogQLParser.NestedIdentifierContext,0)


        def tableIdentifier(self):
            return self.getTypedRuleContext(HogQLParser.TableIdentifierContext,0)


        def DOT(self):
            return self.getToken(HogQLParser.DOT, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_columnIdentifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnIdentifier" ):
                return visitor.visitColumnIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def columnIdentifier(self):

        localctx = HogQLParser.ColumnIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_columnIdentifier)
        try:
            self.state = 820
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [200]:
                self.enterOuterAlt(localctx, 1)
                self.state = 813
                self.match(HogQLParser.PLACEHOLDER)
                pass
            elif token in [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194]:
                self.enterOuterAlt(localctx, 2)
                self.state = 817
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,98,self._ctx)
                if la_ == 1:
                    self.state = 814
                    self.tableIdentifier()
                    self.state = 815
                    self.match(HogQLParser.DOT)


                self.state = 819
                self.nestedIdentifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NestedIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(HogQLParser.IdentifierContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.DOT)
            else:
                return self.getToken(HogQLParser.DOT, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_nestedIdentifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNestedIdentifier" ):
                return visitor.visitNestedIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def nestedIdentifier(self):

        localctx = HogQLParser.NestedIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_nestedIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 822
            self.identifier()
            self.state = 827
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,100,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 823
                    self.match(HogQLParser.DOT)
                    self.state = 824
                    self.identifier() 
                self.state = 829
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,100,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return HogQLParser.RULE_tableExpr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class TableExprIdentifierContext(TableExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.TableExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tableIdentifier(self):
            return self.getTypedRuleContext(HogQLParser.TableIdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableExprIdentifier" ):
                return visitor.visitTableExprIdentifier(self)
            else:
                return visitor.visitChildren(self)


    class TableExprSubqueryContext(TableExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.TableExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def selectUnionStmt(self):
            return self.getTypedRuleContext(HogQLParser.SelectUnionStmtContext,0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableExprSubquery" ):
                return visitor.visitTableExprSubquery(self)
            else:
                return visitor.visitChildren(self)


    class TableExprAliasContext(TableExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.TableExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tableExpr(self):
            return self.getTypedRuleContext(HogQLParser.TableExprContext,0)

        def alias(self):
            return self.getTypedRuleContext(HogQLParser.AliasContext,0)

        def AS(self):
            return self.getToken(HogQLParser.AS, 0)
        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableExprAlias" ):
                return visitor.visitTableExprAlias(self)
            else:
                return visitor.visitChildren(self)


    class TableExprFunctionContext(TableExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.TableExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tableFunctionExpr(self):
            return self.getTypedRuleContext(HogQLParser.TableFunctionExprContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableExprFunction" ):
                return visitor.visitTableExprFunction(self)
            else:
                return visitor.visitChildren(self)



    def tableExpr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = HogQLParser.TableExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 90
        self.enterRecursionRule(localctx, 90, self.RULE_tableExpr, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 837
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,101,self._ctx)
            if la_ == 1:
                localctx = HogQLParser.TableExprIdentifierContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 831
                self.tableIdentifier()
                pass

            elif la_ == 2:
                localctx = HogQLParser.TableExprFunctionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 832
                self.tableFunctionExpr()
                pass

            elif la_ == 3:
                localctx = HogQLParser.TableExprSubqueryContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 833
                self.match(HogQLParser.LPAREN)
                self.state = 834
                self.selectUnionStmt()
                self.state = 835
                self.match(HogQLParser.RPAREN)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 847
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,103,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = HogQLParser.TableExprAliasContext(self, HogQLParser.TableExprContext(self, _parentctx, _parentState))
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_tableExpr)
                    self.state = 839
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 843
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [36, 62, 77, 91, 194]:
                        self.state = 840
                        self.alias()
                        pass
                    elif token in [10]:
                        self.state = 841
                        self.match(HogQLParser.AS)
                        self.state = 842
                        self.identifier()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 849
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,103,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class TableFunctionExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def tableArgList(self):
            return self.getTypedRuleContext(HogQLParser.TableArgListContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_tableFunctionExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableFunctionExpr" ):
                return visitor.visitTableFunctionExpr(self)
            else:
                return visitor.visitChildren(self)




    def tableFunctionExpr(self):

        localctx = HogQLParser.TableFunctionExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_tableFunctionExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 850
            self.identifier()
            self.state = 851
            self.match(HogQLParser.LPAREN)
            self.state = 853
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -33554436) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -9) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & 68719804669) != 0):
                self.state = 852
                self.tableArgList()


            self.state = 855
            self.match(HogQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def databaseIdentifier(self):
            return self.getTypedRuleContext(HogQLParser.DatabaseIdentifierContext,0)


        def DOT(self):
            return self.getToken(HogQLParser.DOT, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_tableIdentifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableIdentifier" ):
                return visitor.visitTableIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def tableIdentifier(self):

        localctx = HogQLParser.TableIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_tableIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 860
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
            if la_ == 1:
                self.state = 857
                self.databaseIdentifier()
                self.state = 858
                self.match(HogQLParser.DOT)


            self.state = 862
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableArgListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableArgExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.TableArgExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.TableArgExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_tableArgList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableArgList" ):
                return visitor.visitTableArgList(self)
            else:
                return visitor.visitChildren(self)




    def tableArgList(self):

        localctx = HogQLParser.TableArgListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_tableArgList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 864
            self.tableArgExpr()
            self.state = 869
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==206:
                self.state = 865
                self.match(HogQLParser.COMMA)
                self.state = 866
                self.tableArgExpr()
                self.state = 871
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableArgExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nestedIdentifier(self):
            return self.getTypedRuleContext(HogQLParser.NestedIdentifierContext,0)


        def tableFunctionExpr(self):
            return self.getTypedRuleContext(HogQLParser.TableFunctionExprContext,0)


        def literal(self):
            return self.getTypedRuleContext(HogQLParser.LiteralContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_tableArgExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableArgExpr" ):
                return visitor.visitTableArgExpr(self)
            else:
                return visitor.visitChildren(self)




    def tableArgExpr(self):

        localctx = HogQLParser.TableArgExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_tableArgExpr)
        try:
            self.state = 875
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 872
                self.nestedIdentifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 873
                self.tableFunctionExpr()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 874
                self.literal()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DatabaseIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_databaseIdentifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDatabaseIdentifier" ):
                return visitor.visitDatabaseIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def databaseIdentifier(self):

        localctx = HogQLParser.DatabaseIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_databaseIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 877
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FloatingLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FLOATING_LITERAL(self):
            return self.getToken(HogQLParser.FLOATING_LITERAL, 0)

        def DOT(self):
            return self.getToken(HogQLParser.DOT, 0)

        def DECIMAL_LITERAL(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.DECIMAL_LITERAL)
            else:
                return self.getToken(HogQLParser.DECIMAL_LITERAL, i)

        def OCTAL_LITERAL(self):
            return self.getToken(HogQLParser.OCTAL_LITERAL, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_floatingLiteral

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFloatingLiteral" ):
                return visitor.visitFloatingLiteral(self)
            else:
                return visitor.visitChildren(self)




    def floatingLiteral(self):

        localctx = HogQLParser.FloatingLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_floatingLiteral)
        self._la = 0 # Token type
        try:
            self.state = 887
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [195]:
                self.enterOuterAlt(localctx, 1)
                self.state = 879
                self.match(HogQLParser.FLOATING_LITERAL)
                pass
            elif token in [210]:
                self.enterOuterAlt(localctx, 2)
                self.state = 880
                self.match(HogQLParser.DOT)
                self.state = 881
                _la = self._input.LA(1)
                if not(_la==196 or _la==197):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [197]:
                self.enterOuterAlt(localctx, 3)
                self.state = 882
                self.match(HogQLParser.DECIMAL_LITERAL)
                self.state = 883
                self.match(HogQLParser.DOT)
                self.state = 885
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
                if la_ == 1:
                    self.state = 884
                    _la = self._input.LA(1)
                    if not(_la==196 or _la==197):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumberLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def floatingLiteral(self):
            return self.getTypedRuleContext(HogQLParser.FloatingLiteralContext,0)


        def OCTAL_LITERAL(self):
            return self.getToken(HogQLParser.OCTAL_LITERAL, 0)

        def DECIMAL_LITERAL(self):
            return self.getToken(HogQLParser.DECIMAL_LITERAL, 0)

        def HEXADECIMAL_LITERAL(self):
            return self.getToken(HogQLParser.HEXADECIMAL_LITERAL, 0)

        def INF(self):
            return self.getToken(HogQLParser.INF, 0)

        def NAN_SQL(self):
            return self.getToken(HogQLParser.NAN_SQL, 0)

        def PLUS(self):
            return self.getToken(HogQLParser.PLUS, 0)

        def DASH(self):
            return self.getToken(HogQLParser.DASH, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_numberLiteral

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumberLiteral" ):
                return visitor.visitNumberLiteral(self)
            else:
                return visitor.visitChildren(self)




    def numberLiteral(self):

        localctx = HogQLParser.NumberLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_numberLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 890
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==208 or _la==228:
                self.state = 889
                _la = self._input.LA(1)
                if not(_la==208 or _la==228):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 898
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,111,self._ctx)
            if la_ == 1:
                self.state = 892
                self.floatingLiteral()
                pass

            elif la_ == 2:
                self.state = 893
                self.match(HogQLParser.OCTAL_LITERAL)
                pass

            elif la_ == 3:
                self.state = 894
                self.match(HogQLParser.DECIMAL_LITERAL)
                pass

            elif la_ == 4:
                self.state = 895
                self.match(HogQLParser.HEXADECIMAL_LITERAL)
                pass

            elif la_ == 5:
                self.state = 896
                self.match(HogQLParser.INF)
                pass

            elif la_ == 6:
                self.state = 897
                self.match(HogQLParser.NAN_SQL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numberLiteral(self):
            return self.getTypedRuleContext(HogQLParser.NumberLiteralContext,0)


        def STRING_LITERAL(self):
            return self.getToken(HogQLParser.STRING_LITERAL, 0)

        def NULL_SQL(self):
            return self.getToken(HogQLParser.NULL_SQL, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_literal

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteral" ):
                return visitor.visitLiteral(self)
            else:
                return visitor.visitChildren(self)




    def literal(self):

        localctx = HogQLParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_literal)
        try:
            self.state = 903
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [82, 113, 195, 196, 197, 198, 208, 210, 228]:
                self.enterOuterAlt(localctx, 1)
                self.state = 900
                self.numberLiteral()
                pass
            elif token in [199]:
                self.enterOuterAlt(localctx, 2)
                self.state = 901
                self.match(HogQLParser.STRING_LITERAL)
                pass
            elif token in [116]:
                self.enterOuterAlt(localctx, 3)
                self.state = 902
                self.match(HogQLParser.NULL_SQL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SECOND(self):
            return self.getToken(HogQLParser.SECOND, 0)

        def MINUTE(self):
            return self.getToken(HogQLParser.MINUTE, 0)

        def HOUR(self):
            return self.getToken(HogQLParser.HOUR, 0)

        def DAY(self):
            return self.getToken(HogQLParser.DAY, 0)

        def WEEK(self):
            return self.getToken(HogQLParser.WEEK, 0)

        def MONTH(self):
            return self.getToken(HogQLParser.MONTH, 0)

        def QUARTER(self):
            return self.getToken(HogQLParser.QUARTER, 0)

        def YEAR(self):
            return self.getToken(HogQLParser.YEAR, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_interval

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterval" ):
                return visitor.visitInterval(self)
            else:
                return visitor.visitChildren(self)




    def interval(self):

        localctx = HogQLParser.IntervalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_interval)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 905
            _la = self._input.LA(1)
            if not(_la==37 or ((((_la - 76)) & ~0x3f) == 0 and ((1 << (_la - 76)) & 72057615512764417) != 0) or ((((_la - 145)) & ~0x3f) == 0 and ((1 << (_la - 145)) & 36283883716609) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AFTER(self):
            return self.getToken(HogQLParser.AFTER, 0)

        def ALIAS(self):
            return self.getToken(HogQLParser.ALIAS, 0)

        def ALL(self):
            return self.getToken(HogQLParser.ALL, 0)

        def ALTER(self):
            return self.getToken(HogQLParser.ALTER, 0)

        def AND(self):
            return self.getToken(HogQLParser.AND, 0)

        def ANTI(self):
            return self.getToken(HogQLParser.ANTI, 0)

        def ANY(self):
            return self.getToken(HogQLParser.ANY, 0)

        def ARRAY(self):
            return self.getToken(HogQLParser.ARRAY, 0)

        def AS(self):
            return self.getToken(HogQLParser.AS, 0)

        def ASCENDING(self):
            return self.getToken(HogQLParser.ASCENDING, 0)

        def ASOF(self):
            return self.getToken(HogQLParser.ASOF, 0)

        def AST(self):
            return self.getToken(HogQLParser.AST, 0)

        def ASYNC(self):
            return self.getToken(HogQLParser.ASYNC, 0)

        def ATTACH(self):
            return self.getToken(HogQLParser.ATTACH, 0)

        def BETWEEN(self):
            return self.getToken(HogQLParser.BETWEEN, 0)

        def BOTH(self):
            return self.getToken(HogQLParser.BOTH, 0)

        def BY(self):
            return self.getToken(HogQLParser.BY, 0)

        def CASE(self):
            return self.getToken(HogQLParser.CASE, 0)

        def CAST(self):
            return self.getToken(HogQLParser.CAST, 0)

        def CHECK(self):
            return self.getToken(HogQLParser.CHECK, 0)

        def CLEAR(self):
            return self.getToken(HogQLParser.CLEAR, 0)

        def CLUSTER(self):
            return self.getToken(HogQLParser.CLUSTER, 0)

        def CODEC(self):
            return self.getToken(HogQLParser.CODEC, 0)

        def COLLATE(self):
            return self.getToken(HogQLParser.COLLATE, 0)

        def COLUMN(self):
            return self.getToken(HogQLParser.COLUMN, 0)

        def COMMENT(self):
            return self.getToken(HogQLParser.COMMENT, 0)

        def CONSTRAINT(self):
            return self.getToken(HogQLParser.CONSTRAINT, 0)

        def CREATE(self):
            return self.getToken(HogQLParser.CREATE, 0)

        def CROSS(self):
            return self.getToken(HogQLParser.CROSS, 0)

        def CUBE(self):
            return self.getToken(HogQLParser.CUBE, 0)

        def CURRENT(self):
            return self.getToken(HogQLParser.CURRENT, 0)

        def DATABASE(self):
            return self.getToken(HogQLParser.DATABASE, 0)

        def DATABASES(self):
            return self.getToken(HogQLParser.DATABASES, 0)

        def DATE(self):
            return self.getToken(HogQLParser.DATE, 0)

        def DEDUPLICATE(self):
            return self.getToken(HogQLParser.DEDUPLICATE, 0)

        def DEFAULT(self):
            return self.getToken(HogQLParser.DEFAULT, 0)

        def DELAY(self):
            return self.getToken(HogQLParser.DELAY, 0)

        def DELETE(self):
            return self.getToken(HogQLParser.DELETE, 0)

        def DESCRIBE(self):
            return self.getToken(HogQLParser.DESCRIBE, 0)

        def DESC(self):
            return self.getToken(HogQLParser.DESC, 0)

        def DESCENDING(self):
            return self.getToken(HogQLParser.DESCENDING, 0)

        def DETACH(self):
            return self.getToken(HogQLParser.DETACH, 0)

        def DICTIONARIES(self):
            return self.getToken(HogQLParser.DICTIONARIES, 0)

        def DICTIONARY(self):
            return self.getToken(HogQLParser.DICTIONARY, 0)

        def DISK(self):
            return self.getToken(HogQLParser.DISK, 0)

        def DISTINCT(self):
            return self.getToken(HogQLParser.DISTINCT, 0)

        def DISTRIBUTED(self):
            return self.getToken(HogQLParser.DISTRIBUTED, 0)

        def DROP(self):
            return self.getToken(HogQLParser.DROP, 0)

        def ELSE(self):
            return self.getToken(HogQLParser.ELSE, 0)

        def END(self):
            return self.getToken(HogQLParser.END, 0)

        def ENGINE(self):
            return self.getToken(HogQLParser.ENGINE, 0)

        def EVENTS(self):
            return self.getToken(HogQLParser.EVENTS, 0)

        def EXISTS(self):
            return self.getToken(HogQLParser.EXISTS, 0)

        def EXPLAIN(self):
            return self.getToken(HogQLParser.EXPLAIN, 0)

        def EXPRESSION(self):
            return self.getToken(HogQLParser.EXPRESSION, 0)

        def EXTRACT(self):
            return self.getToken(HogQLParser.EXTRACT, 0)

        def FETCHES(self):
            return self.getToken(HogQLParser.FETCHES, 0)

        def FINAL(self):
            return self.getToken(HogQLParser.FINAL, 0)

        def FIRST(self):
            return self.getToken(HogQLParser.FIRST, 0)

        def FLUSH(self):
            return self.getToken(HogQLParser.FLUSH, 0)

        def FOR(self):
            return self.getToken(HogQLParser.FOR, 0)

        def FOLLOWING(self):
            return self.getToken(HogQLParser.FOLLOWING, 0)

        def FORMAT(self):
            return self.getToken(HogQLParser.FORMAT, 0)

        def FREEZE(self):
            return self.getToken(HogQLParser.FREEZE, 0)

        def FROM(self):
            return self.getToken(HogQLParser.FROM, 0)

        def FULL(self):
            return self.getToken(HogQLParser.FULL, 0)

        def FUNCTION(self):
            return self.getToken(HogQLParser.FUNCTION, 0)

        def GLOBAL(self):
            return self.getToken(HogQLParser.GLOBAL, 0)

        def GRANULARITY(self):
            return self.getToken(HogQLParser.GRANULARITY, 0)

        def GROUP(self):
            return self.getToken(HogQLParser.GROUP, 0)

        def HAVING(self):
            return self.getToken(HogQLParser.HAVING, 0)

        def HIERARCHICAL(self):
            return self.getToken(HogQLParser.HIERARCHICAL, 0)

        def ID(self):
            return self.getToken(HogQLParser.ID, 0)

        def IF(self):
            return self.getToken(HogQLParser.IF, 0)

        def ILIKE(self):
            return self.getToken(HogQLParser.ILIKE, 0)

        def IN(self):
            return self.getToken(HogQLParser.IN, 0)

        def INDEX(self):
            return self.getToken(HogQLParser.INDEX, 0)

        def INJECTIVE(self):
            return self.getToken(HogQLParser.INJECTIVE, 0)

        def INNER(self):
            return self.getToken(HogQLParser.INNER, 0)

        def INSERT(self):
            return self.getToken(HogQLParser.INSERT, 0)

        def INTERVAL(self):
            return self.getToken(HogQLParser.INTERVAL, 0)

        def INTO(self):
            return self.getToken(HogQLParser.INTO, 0)

        def IS(self):
            return self.getToken(HogQLParser.IS, 0)

        def IS_OBJECT_ID(self):
            return self.getToken(HogQLParser.IS_OBJECT_ID, 0)

        def JOIN(self):
            return self.getToken(HogQLParser.JOIN, 0)

        def JSON_FALSE(self):
            return self.getToken(HogQLParser.JSON_FALSE, 0)

        def JSON_TRUE(self):
            return self.getToken(HogQLParser.JSON_TRUE, 0)

        def KEY(self):
            return self.getToken(HogQLParser.KEY, 0)

        def KILL(self):
            return self.getToken(HogQLParser.KILL, 0)

        def LAST(self):
            return self.getToken(HogQLParser.LAST, 0)

        def LAYOUT(self):
            return self.getToken(HogQLParser.LAYOUT, 0)

        def LEADING(self):
            return self.getToken(HogQLParser.LEADING, 0)

        def LEFT(self):
            return self.getToken(HogQLParser.LEFT, 0)

        def LIFETIME(self):
            return self.getToken(HogQLParser.LIFETIME, 0)

        def LIKE(self):
            return self.getToken(HogQLParser.LIKE, 0)

        def LIMIT(self):
            return self.getToken(HogQLParser.LIMIT, 0)

        def LIVE(self):
            return self.getToken(HogQLParser.LIVE, 0)

        def LOCAL(self):
            return self.getToken(HogQLParser.LOCAL, 0)

        def LOGS(self):
            return self.getToken(HogQLParser.LOGS, 0)

        def MATERIALIZE(self):
            return self.getToken(HogQLParser.MATERIALIZE, 0)

        def MATERIALIZED(self):
            return self.getToken(HogQLParser.MATERIALIZED, 0)

        def MAX(self):
            return self.getToken(HogQLParser.MAX, 0)

        def MERGES(self):
            return self.getToken(HogQLParser.MERGES, 0)

        def MIN(self):
            return self.getToken(HogQLParser.MIN, 0)

        def MODIFY(self):
            return self.getToken(HogQLParser.MODIFY, 0)

        def MOVE(self):
            return self.getToken(HogQLParser.MOVE, 0)

        def MUTATION(self):
            return self.getToken(HogQLParser.MUTATION, 0)

        def NO(self):
            return self.getToken(HogQLParser.NO, 0)

        def NOT(self):
            return self.getToken(HogQLParser.NOT, 0)

        def NULLS(self):
            return self.getToken(HogQLParser.NULLS, 0)

        def OFFSET(self):
            return self.getToken(HogQLParser.OFFSET, 0)

        def ON(self):
            return self.getToken(HogQLParser.ON, 0)

        def OPTIMIZE(self):
            return self.getToken(HogQLParser.OPTIMIZE, 0)

        def OR(self):
            return self.getToken(HogQLParser.OR, 0)

        def ORDER(self):
            return self.getToken(HogQLParser.ORDER, 0)

        def OUTER(self):
            return self.getToken(HogQLParser.OUTER, 0)

        def OUTFILE(self):
            return self.getToken(HogQLParser.OUTFILE, 0)

        def OVER(self):
            return self.getToken(HogQLParser.OVER, 0)

        def PARTITION(self):
            return self.getToken(HogQLParser.PARTITION, 0)

        def POPULATE(self):
            return self.getToken(HogQLParser.POPULATE, 0)

        def PRECEDING(self):
            return self.getToken(HogQLParser.PRECEDING, 0)

        def PREWHERE(self):
            return self.getToken(HogQLParser.PREWHERE, 0)

        def PRIMARY(self):
            return self.getToken(HogQLParser.PRIMARY, 0)

        def RANGE(self):
            return self.getToken(HogQLParser.RANGE, 0)

        def RELOAD(self):
            return self.getToken(HogQLParser.RELOAD, 0)

        def REMOVE(self):
            return self.getToken(HogQLParser.REMOVE, 0)

        def RENAME(self):
            return self.getToken(HogQLParser.RENAME, 0)

        def REPLACE(self):
            return self.getToken(HogQLParser.REPLACE, 0)

        def REPLICA(self):
            return self.getToken(HogQLParser.REPLICA, 0)

        def REPLICATED(self):
            return self.getToken(HogQLParser.REPLICATED, 0)

        def RIGHT(self):
            return self.getToken(HogQLParser.RIGHT, 0)

        def ROLLUP(self):
            return self.getToken(HogQLParser.ROLLUP, 0)

        def ROW(self):
            return self.getToken(HogQLParser.ROW, 0)

        def ROWS(self):
            return self.getToken(HogQLParser.ROWS, 0)

        def SAMPLE(self):
            return self.getToken(HogQLParser.SAMPLE, 0)

        def SELECT(self):
            return self.getToken(HogQLParser.SELECT, 0)

        def SEMI(self):
            return self.getToken(HogQLParser.SEMI, 0)

        def SENDS(self):
            return self.getToken(HogQLParser.SENDS, 0)

        def SET(self):
            return self.getToken(HogQLParser.SET, 0)

        def SETTINGS(self):
            return self.getToken(HogQLParser.SETTINGS, 0)

        def SHOW(self):
            return self.getToken(HogQLParser.SHOW, 0)

        def SOURCE(self):
            return self.getToken(HogQLParser.SOURCE, 0)

        def START(self):
            return self.getToken(HogQLParser.START, 0)

        def STOP(self):
            return self.getToken(HogQLParser.STOP, 0)

        def SUBSTRING(self):
            return self.getToken(HogQLParser.SUBSTRING, 0)

        def SYNC(self):
            return self.getToken(HogQLParser.SYNC, 0)

        def SYNTAX(self):
            return self.getToken(HogQLParser.SYNTAX, 0)

        def SYSTEM(self):
            return self.getToken(HogQLParser.SYSTEM, 0)

        def TABLE(self):
            return self.getToken(HogQLParser.TABLE, 0)

        def TABLES(self):
            return self.getToken(HogQLParser.TABLES, 0)

        def TEMPORARY(self):
            return self.getToken(HogQLParser.TEMPORARY, 0)

        def TEST(self):
            return self.getToken(HogQLParser.TEST, 0)

        def THEN(self):
            return self.getToken(HogQLParser.THEN, 0)

        def TIES(self):
            return self.getToken(HogQLParser.TIES, 0)

        def TIMEOUT(self):
            return self.getToken(HogQLParser.TIMEOUT, 0)

        def TIMESTAMP(self):
            return self.getToken(HogQLParser.TIMESTAMP, 0)

        def TOTALS(self):
            return self.getToken(HogQLParser.TOTALS, 0)

        def TRAILING(self):
            return self.getToken(HogQLParser.TRAILING, 0)

        def TRIM(self):
            return self.getToken(HogQLParser.TRIM, 0)

        def TRUNCATE(self):
            return self.getToken(HogQLParser.TRUNCATE, 0)

        def TO(self):
            return self.getToken(HogQLParser.TO, 0)

        def TOP(self):
            return self.getToken(HogQLParser.TOP, 0)

        def TTL(self):
            return self.getToken(HogQLParser.TTL, 0)

        def TYPE(self):
            return self.getToken(HogQLParser.TYPE, 0)

        def UNBOUNDED(self):
            return self.getToken(HogQLParser.UNBOUNDED, 0)

        def UNION(self):
            return self.getToken(HogQLParser.UNION, 0)

        def UPDATE(self):
            return self.getToken(HogQLParser.UPDATE, 0)

        def USE(self):
            return self.getToken(HogQLParser.USE, 0)

        def USING(self):
            return self.getToken(HogQLParser.USING, 0)

        def UUID(self):
            return self.getToken(HogQLParser.UUID, 0)

        def VALUES(self):
            return self.getToken(HogQLParser.VALUES, 0)

        def VIEW(self):
            return self.getToken(HogQLParser.VIEW, 0)

        def VOLUME(self):
            return self.getToken(HogQLParser.VOLUME, 0)

        def WATCH(self):
            return self.getToken(HogQLParser.WATCH, 0)

        def WHEN(self):
            return self.getToken(HogQLParser.WHEN, 0)

        def WHERE(self):
            return self.getToken(HogQLParser.WHERE, 0)

        def WINDOW(self):
            return self.getToken(HogQLParser.WINDOW, 0)

        def WITH(self):
            return self.getToken(HogQLParser.WITH, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_keyword

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKeyword" ):
                return visitor.visitKeyword(self)
            else:
                return visitor.visitChildren(self)




    def keyword(self):

        localctx = HogQLParser.KeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_keyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 907
            _la = self._input.LA(1)
            if not(((((_la - 2)) & ~0x3f) == 0 and ((1 << (_la - 2)) & -34368126977) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & -1288627627820033) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & 8034421735228932089) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeywordForAliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATE(self):
            return self.getToken(HogQLParser.DATE, 0)

        def FIRST(self):
            return self.getToken(HogQLParser.FIRST, 0)

        def ID(self):
            return self.getToken(HogQLParser.ID, 0)

        def KEY(self):
            return self.getToken(HogQLParser.KEY, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_keywordForAlias

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKeywordForAlias" ):
                return visitor.visitKeywordForAlias(self)
            else:
                return visitor.visitChildren(self)




    def keywordForAlias(self):

        localctx = HogQLParser.KeywordForAliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_keywordForAlias)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 909
            _la = self._input.LA(1)
            if not(((((_la - 36)) & ~0x3f) == 0 and ((1 << (_la - 36)) & 36030996109328385) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(HogQLParser.IDENTIFIER, 0)

        def keywordForAlias(self):
            return self.getTypedRuleContext(HogQLParser.KeywordForAliasContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_alias

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlias" ):
                return visitor.visitAlias(self)
            else:
                return visitor.visitChildren(self)




    def alias(self):

        localctx = HogQLParser.AliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_alias)
        try:
            self.state = 913
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [194]:
                self.enterOuterAlt(localctx, 1)
                self.state = 911
                self.match(HogQLParser.IDENTIFIER)
                pass
            elif token in [36, 62, 77, 91]:
                self.enterOuterAlt(localctx, 2)
                self.state = 912
                self.keywordForAlias()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(HogQLParser.IDENTIFIER, 0)

        def interval(self):
            return self.getTypedRuleContext(HogQLParser.IntervalContext,0)


        def keyword(self):
            return self.getTypedRuleContext(HogQLParser.KeywordContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_identifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifier" ):
                return visitor.visitIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def identifier(self):

        localctx = HogQLParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_identifier)
        try:
            self.state = 918
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [194]:
                self.enterOuterAlt(localctx, 1)
                self.state = 915
                self.match(HogQLParser.IDENTIFIER)
                pass
            elif token in [37, 76, 108, 110, 132, 145, 185, 190]:
                self.enterOuterAlt(localctx, 2)
                self.state = 916
                self.interval()
                pass
            elif token in [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 111, 112, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 191, 192]:
                self.enterOuterAlt(localctx, 3)
                self.state = 917
                self.keyword()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(HogQLParser.STRING_LITERAL, 0)

        def EQ_SINGLE(self):
            return self.getToken(HogQLParser.EQ_SINGLE, 0)

        def numberLiteral(self):
            return self.getTypedRuleContext(HogQLParser.NumberLiteralContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_enumValue

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumValue" ):
                return visitor.visitEnumValue(self)
            else:
                return visitor.visitChildren(self)




    def enumValue(self):

        localctx = HogQLParser.EnumValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_enumValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 920
            self.match(HogQLParser.STRING_LITERAL)
            self.state = 921
            self.match(HogQLParser.EQ_SINGLE)
            self.state = 922
            self.numberLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[18] = self.joinExpr_sempred
        self._predicates[37] = self.columnExpr_sempred
        self._predicates[45] = self.tableExpr_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def joinExpr_sempred(self, localctx:JoinExprContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 4)
         

    def columnExpr_sempred(self, localctx:ColumnExprContext, predIndex:int):
            if predIndex == 2:
                return self.precpred(self._ctx, 17)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 16)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 15)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 13)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 21)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 20)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 19)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 14)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 7)
         

    def tableExpr_sempred(self, localctx:TableExprContext, predIndex:int):
            if predIndex == 15:
                return self.precpred(self._ctx, 1)
         




