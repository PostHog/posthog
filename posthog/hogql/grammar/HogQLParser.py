# Generated from HogQLParser.g4 by ANTLR 4.13.0
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,234,918,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,1,0,1,0,3,0,127,8,0,1,0,1,0,1,1,1,1,
        1,1,1,1,5,1,135,8,1,10,1,12,1,138,9,1,1,2,1,2,1,2,1,2,1,2,3,2,145,
        8,2,1,3,3,3,148,8,3,1,3,1,3,3,3,152,8,3,1,3,3,3,155,8,3,1,3,1,3,
        3,3,159,8,3,1,3,3,3,162,8,3,1,3,3,3,165,8,3,1,3,3,3,168,8,3,1,3,
        3,3,171,8,3,1,3,1,3,3,3,175,8,3,1,3,1,3,3,3,179,8,3,1,3,3,3,182,
        8,3,1,3,3,3,185,8,3,1,3,3,3,188,8,3,1,3,3,3,191,8,3,1,3,3,3,194,
        8,3,1,4,1,4,1,4,1,5,1,5,1,5,1,5,3,5,203,8,5,1,6,1,6,1,6,1,7,3,7,
        209,8,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
        1,8,1,8,1,8,5,8,228,8,8,10,8,12,8,231,9,8,1,9,1,9,1,9,1,10,1,10,
        1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,247,8,11,1,12,
        1,12,1,12,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,15,1,15,1,15,
        1,15,1,15,1,15,3,15,266,8,15,1,16,1,16,1,16,1,17,1,17,1,17,3,17,
        274,8,17,1,17,3,17,277,8,17,1,17,1,17,1,17,1,17,3,17,283,8,17,1,
        17,1,17,1,17,1,17,1,17,1,17,3,17,291,8,17,1,17,3,17,294,8,17,1,17,
        1,17,1,17,1,17,5,17,300,8,17,10,17,12,17,303,9,17,1,18,3,18,306,
        8,18,1,18,1,18,1,18,3,18,311,8,18,1,18,3,18,314,8,18,1,18,3,18,317,
        8,18,1,18,1,18,3,18,321,8,18,1,18,1,18,3,18,325,8,18,1,18,3,18,328,
        8,18,3,18,330,8,18,1,18,3,18,333,8,18,1,18,1,18,3,18,337,8,18,1,
        18,1,18,3,18,341,8,18,1,18,3,18,344,8,18,3,18,346,8,18,3,18,348,
        8,18,1,19,3,19,351,8,19,1,19,1,19,1,19,3,19,356,8,19,1,20,1,20,1,
        20,1,20,1,20,1,20,1,20,1,20,1,20,3,20,367,8,20,1,21,1,21,1,21,1,
        21,3,21,373,8,21,1,22,1,22,1,22,3,22,378,8,22,1,23,1,23,1,23,5,23,
        383,8,23,10,23,12,23,386,9,23,1,24,1,24,3,24,390,8,24,1,24,1,24,
        3,24,394,8,24,1,24,1,24,3,24,398,8,24,1,25,1,25,1,25,3,25,403,8,
        25,1,26,1,26,1,26,5,26,408,8,26,10,26,12,26,411,9,26,1,27,1,27,1,
        27,1,27,1,28,3,28,418,8,28,1,28,3,28,421,8,28,1,28,3,28,424,8,28,
        1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,32,1,32,
        1,32,1,32,1,32,1,32,3,32,443,8,32,1,33,1,33,1,33,1,33,1,33,1,33,
        1,33,1,33,1,33,1,33,1,33,1,33,3,33,457,8,33,1,34,1,34,1,34,1,35,
        1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,5,35,471,8,35,10,35,12,35,
        474,9,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,5,35,483,8,35,10,35,
        12,35,486,9,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,5,35,495,8,35,
        10,35,12,35,498,9,35,1,35,1,35,1,35,1,35,1,35,3,35,505,8,35,1,35,
        1,35,3,35,509,8,35,1,36,1,36,1,36,5,36,514,8,36,10,36,12,36,517,
        9,36,1,37,1,37,1,37,3,37,522,8,37,1,37,1,37,1,37,1,37,1,37,1,37,
        3,37,530,8,37,1,38,1,38,1,38,3,38,535,8,38,1,38,1,38,1,38,1,38,1,
        38,4,38,542,8,38,11,38,12,38,543,1,38,1,38,3,38,548,8,38,1,38,1,
        38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,
        38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,
        38,1,38,3,38,579,8,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,
        38,1,38,1,38,1,38,1,38,1,38,1,38,3,38,596,8,38,1,38,1,38,1,38,1,
        38,1,38,1,38,1,38,1,38,1,38,1,38,3,38,608,8,38,1,38,1,38,1,38,1,
        38,1,38,1,38,1,38,1,38,3,38,618,8,38,1,38,3,38,621,8,38,1,38,1,38,
        3,38,625,8,38,1,38,3,38,628,8,38,1,38,1,38,1,38,1,38,1,38,1,38,1,
        38,1,38,1,38,1,38,3,38,640,8,38,1,38,1,38,1,38,1,38,1,38,1,38,1,
        38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,3,38,657,8,38,1,38,1,
        38,3,38,661,8,38,1,38,1,38,1,38,1,38,3,38,667,8,38,1,38,1,38,1,38,
        1,38,1,38,3,38,674,8,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,
        1,38,1,38,3,38,686,8,38,1,38,3,38,689,8,38,1,38,1,38,3,38,693,8,
        38,1,38,3,38,696,8,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,
        38,3,38,707,8,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,
        38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,3,
        38,731,8,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,3,38,740,8,38,5,38,
        742,8,38,10,38,12,38,745,9,38,1,39,1,39,1,39,5,39,750,8,39,10,39,
        12,39,753,9,39,1,40,1,40,3,40,757,8,40,1,41,1,41,1,41,1,41,5,41,
        763,8,41,10,41,12,41,766,9,41,1,41,1,41,1,41,1,41,1,41,5,41,773,
        8,41,10,41,12,41,776,9,41,3,41,778,8,41,1,41,1,41,1,41,1,42,1,42,
        1,42,5,42,786,8,42,10,42,12,42,789,9,42,1,43,1,43,1,43,1,43,1,43,
        1,43,1,43,1,43,1,43,1,43,3,43,801,8,43,1,44,1,44,1,44,1,44,3,44,
        807,8,44,1,44,3,44,810,8,44,1,45,1,45,1,45,5,45,815,8,45,10,45,12,
        45,818,9,45,1,46,1,46,1,46,1,46,1,46,1,46,1,46,3,46,827,8,46,1,46,
        1,46,1,46,1,46,3,46,833,8,46,5,46,835,8,46,10,46,12,46,838,9,46,
        1,47,1,47,1,47,3,47,843,8,47,1,47,1,47,1,48,1,48,1,48,3,48,850,8,
        48,1,48,1,48,1,49,1,49,1,49,5,49,857,8,49,10,49,12,49,860,9,49,1,
        50,1,50,1,50,3,50,865,8,50,1,51,1,51,1,52,1,52,1,52,1,52,1,52,1,
        52,3,52,875,8,52,3,52,877,8,52,1,53,3,53,880,8,53,1,53,1,53,1,53,
        1,53,1,53,1,53,3,53,888,8,53,1,54,1,54,1,54,3,54,893,8,54,1,55,1,
        55,1,56,1,56,1,57,1,57,1,58,1,58,3,58,903,8,58,1,59,1,59,1,59,3,
        59,908,8,59,1,60,1,60,3,60,912,8,60,1,61,1,61,1,61,1,61,1,61,0,3,
        34,76,92,62,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,
        38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,
        82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,
        120,122,0,18,2,0,31,31,140,140,2,0,83,83,95,95,2,0,70,70,100,100,
        3,0,4,4,8,8,12,12,4,0,4,4,7,8,12,12,146,146,2,0,95,95,139,139,2,
        0,4,4,8,8,2,0,117,117,205,205,2,0,11,11,41,42,2,0,61,61,92,92,2,
        0,132,132,142,142,3,0,17,17,94,94,169,169,2,0,78,78,97,97,1,0,195,
        196,2,0,207,207,222,222,8,0,36,36,75,75,107,107,109,109,131,131,
        144,144,184,184,189,189,12,0,2,35,37,74,76,80,82,106,108,108,110,
        111,113,114,116,129,132,143,145,183,185,188,190,191,4,0,35,35,61,
        61,76,76,90,90,1029,0,126,1,0,0,0,2,130,1,0,0,0,4,144,1,0,0,0,6,
        147,1,0,0,0,8,195,1,0,0,0,10,198,1,0,0,0,12,204,1,0,0,0,14,208,1,
        0,0,0,16,214,1,0,0,0,18,232,1,0,0,0,20,235,1,0,0,0,22,238,1,0,0,
        0,24,248,1,0,0,0,26,251,1,0,0,0,28,255,1,0,0,0,30,259,1,0,0,0,32,
        267,1,0,0,0,34,282,1,0,0,0,36,347,1,0,0,0,38,355,1,0,0,0,40,366,
        1,0,0,0,42,368,1,0,0,0,44,374,1,0,0,0,46,379,1,0,0,0,48,387,1,0,
        0,0,50,399,1,0,0,0,52,404,1,0,0,0,54,412,1,0,0,0,56,417,1,0,0,0,
        58,425,1,0,0,0,60,429,1,0,0,0,62,433,1,0,0,0,64,442,1,0,0,0,66,456,
        1,0,0,0,68,458,1,0,0,0,70,508,1,0,0,0,72,510,1,0,0,0,74,529,1,0,
        0,0,76,660,1,0,0,0,78,746,1,0,0,0,80,756,1,0,0,0,82,777,1,0,0,0,
        84,782,1,0,0,0,86,800,1,0,0,0,88,809,1,0,0,0,90,811,1,0,0,0,92,826,
        1,0,0,0,94,839,1,0,0,0,96,849,1,0,0,0,98,853,1,0,0,0,100,864,1,0,
        0,0,102,866,1,0,0,0,104,876,1,0,0,0,106,879,1,0,0,0,108,892,1,0,
        0,0,110,894,1,0,0,0,112,896,1,0,0,0,114,898,1,0,0,0,116,902,1,0,
        0,0,118,907,1,0,0,0,120,911,1,0,0,0,122,913,1,0,0,0,124,127,3,2,
        1,0,125,127,3,6,3,0,126,124,1,0,0,0,126,125,1,0,0,0,127,128,1,0,
        0,0,128,129,5,0,0,1,129,1,1,0,0,0,130,136,3,4,2,0,131,132,5,175,
        0,0,132,133,5,4,0,0,133,135,3,4,2,0,134,131,1,0,0,0,135,138,1,0,
        0,0,136,134,1,0,0,0,136,137,1,0,0,0,137,3,1,0,0,0,138,136,1,0,0,
        0,139,145,3,6,3,0,140,141,5,218,0,0,141,142,3,2,1,0,142,143,5,228,
        0,0,143,145,1,0,0,0,144,139,1,0,0,0,144,140,1,0,0,0,145,5,1,0,0,
        0,146,148,3,8,4,0,147,146,1,0,0,0,147,148,1,0,0,0,148,149,1,0,0,
        0,149,151,5,145,0,0,150,152,5,48,0,0,151,150,1,0,0,0,151,152,1,0,
        0,0,152,154,1,0,0,0,153,155,3,10,5,0,154,153,1,0,0,0,154,155,1,0,
        0,0,155,156,1,0,0,0,156,158,3,72,36,0,157,159,3,12,6,0,158,157,1,
        0,0,0,158,159,1,0,0,0,159,161,1,0,0,0,160,162,3,14,7,0,161,160,1,
        0,0,0,161,162,1,0,0,0,162,164,1,0,0,0,163,165,3,18,9,0,164,163,1,
        0,0,0,164,165,1,0,0,0,165,167,1,0,0,0,166,168,3,20,10,0,167,166,
        1,0,0,0,167,168,1,0,0,0,168,170,1,0,0,0,169,171,3,22,11,0,170,169,
        1,0,0,0,170,171,1,0,0,0,171,174,1,0,0,0,172,173,5,188,0,0,173,175,
        7,0,0,0,174,172,1,0,0,0,174,175,1,0,0,0,175,178,1,0,0,0,176,177,
        5,188,0,0,177,179,5,168,0,0,178,176,1,0,0,0,178,179,1,0,0,0,179,
        181,1,0,0,0,180,182,3,24,12,0,181,180,1,0,0,0,181,182,1,0,0,0,182,
        184,1,0,0,0,183,185,3,16,8,0,184,183,1,0,0,0,184,185,1,0,0,0,185,
        187,1,0,0,0,186,188,3,26,13,0,187,186,1,0,0,0,187,188,1,0,0,0,188,
        190,1,0,0,0,189,191,3,30,15,0,190,189,1,0,0,0,190,191,1,0,0,0,191,
        193,1,0,0,0,192,194,3,32,16,0,193,192,1,0,0,0,193,194,1,0,0,0,194,
        7,1,0,0,0,195,196,5,188,0,0,196,197,3,84,42,0,197,9,1,0,0,0,198,
        199,5,167,0,0,199,202,5,196,0,0,200,201,5,188,0,0,201,203,5,163,
        0,0,202,200,1,0,0,0,202,203,1,0,0,0,203,11,1,0,0,0,204,205,5,67,
        0,0,205,206,3,34,17,0,206,13,1,0,0,0,207,209,7,1,0,0,208,207,1,0,
        0,0,208,209,1,0,0,0,209,210,1,0,0,0,210,211,5,9,0,0,211,212,5,89,
        0,0,212,213,3,72,36,0,213,15,1,0,0,0,214,215,5,187,0,0,215,216,3,
        118,59,0,216,217,5,10,0,0,217,218,5,218,0,0,218,219,3,56,28,0,219,
        229,5,228,0,0,220,221,5,205,0,0,221,222,3,118,59,0,222,223,5,10,
        0,0,223,224,5,218,0,0,224,225,3,56,28,0,225,226,5,228,0,0,226,228,
        1,0,0,0,227,220,1,0,0,0,228,231,1,0,0,0,229,227,1,0,0,0,229,230,
        1,0,0,0,230,17,1,0,0,0,231,229,1,0,0,0,232,233,5,128,0,0,233,234,
        3,76,38,0,234,19,1,0,0,0,235,236,5,186,0,0,236,237,3,76,38,0,237,
        21,1,0,0,0,238,239,5,72,0,0,239,246,5,18,0,0,240,241,7,0,0,0,241,
        242,5,218,0,0,242,243,3,72,36,0,243,244,5,228,0,0,244,247,1,0,0,
        0,245,247,3,72,36,0,246,240,1,0,0,0,246,245,1,0,0,0,247,23,1,0,0,
        0,248,249,5,73,0,0,249,250,3,76,38,0,250,25,1,0,0,0,251,252,5,121,
        0,0,252,253,5,18,0,0,253,254,3,46,23,0,254,27,1,0,0,0,255,256,5,
        121,0,0,256,257,5,18,0,0,257,258,3,72,36,0,258,29,1,0,0,0,259,260,
        5,98,0,0,260,265,3,44,22,0,261,262,5,188,0,0,262,266,5,163,0,0,263,
        264,5,18,0,0,264,266,3,72,36,0,265,261,1,0,0,0,265,263,1,0,0,0,265,
        266,1,0,0,0,266,31,1,0,0,0,267,268,5,149,0,0,268,269,3,52,26,0,269,
        33,1,0,0,0,270,271,6,17,-1,0,271,273,3,92,46,0,272,274,5,60,0,0,
        273,272,1,0,0,0,273,274,1,0,0,0,274,276,1,0,0,0,275,277,3,42,21,
        0,276,275,1,0,0,0,276,277,1,0,0,0,277,283,1,0,0,0,278,279,5,218,
        0,0,279,280,3,34,17,0,280,281,5,228,0,0,281,283,1,0,0,0,282,270,
        1,0,0,0,282,278,1,0,0,0,283,301,1,0,0,0,284,285,10,3,0,0,285,286,
        3,38,19,0,286,287,3,34,17,4,287,300,1,0,0,0,288,290,10,4,0,0,289,
        291,7,2,0,0,290,289,1,0,0,0,290,291,1,0,0,0,291,293,1,0,0,0,292,
        294,3,36,18,0,293,292,1,0,0,0,293,294,1,0,0,0,294,295,1,0,0,0,295,
        296,5,89,0,0,296,297,3,34,17,0,297,298,3,40,20,0,298,300,1,0,0,0,
        299,284,1,0,0,0,299,288,1,0,0,0,300,303,1,0,0,0,301,299,1,0,0,0,
        301,302,1,0,0,0,302,35,1,0,0,0,303,301,1,0,0,0,304,306,7,3,0,0,305,
        304,1,0,0,0,305,306,1,0,0,0,306,307,1,0,0,0,307,314,5,83,0,0,308,
        310,5,83,0,0,309,311,7,3,0,0,310,309,1,0,0,0,310,311,1,0,0,0,311,
        314,1,0,0,0,312,314,7,3,0,0,313,305,1,0,0,0,313,308,1,0,0,0,313,
        312,1,0,0,0,314,348,1,0,0,0,315,317,7,4,0,0,316,315,1,0,0,0,316,
        317,1,0,0,0,317,318,1,0,0,0,318,320,7,5,0,0,319,321,5,122,0,0,320,
        319,1,0,0,0,320,321,1,0,0,0,321,330,1,0,0,0,322,324,7,5,0,0,323,
        325,5,122,0,0,324,323,1,0,0,0,324,325,1,0,0,0,325,327,1,0,0,0,326,
        328,7,4,0,0,327,326,1,0,0,0,327,328,1,0,0,0,328,330,1,0,0,0,329,
        316,1,0,0,0,329,322,1,0,0,0,330,348,1,0,0,0,331,333,7,6,0,0,332,
        331,1,0,0,0,332,333,1,0,0,0,333,334,1,0,0,0,334,336,5,68,0,0,335,
        337,5,122,0,0,336,335,1,0,0,0,336,337,1,0,0,0,337,346,1,0,0,0,338,
        340,5,68,0,0,339,341,5,122,0,0,340,339,1,0,0,0,340,341,1,0,0,0,341,
        343,1,0,0,0,342,344,7,6,0,0,343,342,1,0,0,0,343,344,1,0,0,0,344,
        346,1,0,0,0,345,332,1,0,0,0,345,338,1,0,0,0,346,348,1,0,0,0,347,
        313,1,0,0,0,347,329,1,0,0,0,347,345,1,0,0,0,348,37,1,0,0,0,349,351,
        7,2,0,0,350,349,1,0,0,0,350,351,1,0,0,0,351,352,1,0,0,0,352,353,
        5,30,0,0,353,356,5,89,0,0,354,356,5,205,0,0,355,350,1,0,0,0,355,
        354,1,0,0,0,356,39,1,0,0,0,357,358,5,118,0,0,358,367,3,72,36,0,359,
        360,5,178,0,0,360,361,5,218,0,0,361,362,3,72,36,0,362,363,5,228,
        0,0,363,367,1,0,0,0,364,365,5,178,0,0,365,367,3,72,36,0,366,357,
        1,0,0,0,366,359,1,0,0,0,366,364,1,0,0,0,367,41,1,0,0,0,368,369,5,
        143,0,0,369,372,3,50,25,0,370,371,5,117,0,0,371,373,3,50,25,0,372,
        370,1,0,0,0,372,373,1,0,0,0,373,43,1,0,0,0,374,377,3,76,38,0,375,
        376,7,7,0,0,376,378,3,76,38,0,377,375,1,0,0,0,377,378,1,0,0,0,378,
        45,1,0,0,0,379,384,3,48,24,0,380,381,5,205,0,0,381,383,3,48,24,0,
        382,380,1,0,0,0,383,386,1,0,0,0,384,382,1,0,0,0,384,385,1,0,0,0,
        385,47,1,0,0,0,386,384,1,0,0,0,387,389,3,76,38,0,388,390,7,8,0,0,
        389,388,1,0,0,0,389,390,1,0,0,0,390,393,1,0,0,0,391,392,5,116,0,
        0,392,394,7,9,0,0,393,391,1,0,0,0,393,394,1,0,0,0,394,397,1,0,0,
        0,395,396,5,25,0,0,396,398,5,198,0,0,397,395,1,0,0,0,397,398,1,0,
        0,0,398,49,1,0,0,0,399,402,3,106,53,0,400,401,5,230,0,0,401,403,
        3,106,53,0,402,400,1,0,0,0,402,403,1,0,0,0,403,51,1,0,0,0,404,409,
        3,54,27,0,405,406,5,205,0,0,406,408,3,54,27,0,407,405,1,0,0,0,408,
        411,1,0,0,0,409,407,1,0,0,0,409,410,1,0,0,0,410,53,1,0,0,0,411,409,
        1,0,0,0,412,413,3,118,59,0,413,414,5,211,0,0,414,415,3,108,54,0,
        415,55,1,0,0,0,416,418,3,58,29,0,417,416,1,0,0,0,417,418,1,0,0,0,
        418,420,1,0,0,0,419,421,3,60,30,0,420,419,1,0,0,0,420,421,1,0,0,
        0,421,423,1,0,0,0,422,424,3,62,31,0,423,422,1,0,0,0,423,424,1,0,
        0,0,424,57,1,0,0,0,425,426,5,125,0,0,426,427,5,18,0,0,427,428,3,
        72,36,0,428,59,1,0,0,0,429,430,5,121,0,0,430,431,5,18,0,0,431,432,
        3,46,23,0,432,61,1,0,0,0,433,434,7,10,0,0,434,435,3,64,32,0,435,
        63,1,0,0,0,436,443,3,66,33,0,437,438,5,16,0,0,438,439,3,66,33,0,
        439,440,5,6,0,0,440,441,3,66,33,0,441,443,1,0,0,0,442,436,1,0,0,
        0,442,437,1,0,0,0,443,65,1,0,0,0,444,445,5,32,0,0,445,457,5,141,
        0,0,446,447,5,174,0,0,447,457,5,127,0,0,448,449,5,174,0,0,449,457,
        5,63,0,0,450,451,3,106,53,0,451,452,5,127,0,0,452,457,1,0,0,0,453,
        454,3,106,53,0,454,455,5,63,0,0,455,457,1,0,0,0,456,444,1,0,0,0,
        456,446,1,0,0,0,456,448,1,0,0,0,456,450,1,0,0,0,456,453,1,0,0,0,
        457,67,1,0,0,0,458,459,3,76,38,0,459,460,5,0,0,1,460,69,1,0,0,0,
        461,509,3,118,59,0,462,463,3,118,59,0,463,464,5,218,0,0,464,465,
        3,118,59,0,465,472,3,70,35,0,466,467,5,205,0,0,467,468,3,118,59,
        0,468,469,3,70,35,0,469,471,1,0,0,0,470,466,1,0,0,0,471,474,1,0,
        0,0,472,470,1,0,0,0,472,473,1,0,0,0,473,475,1,0,0,0,474,472,1,0,
        0,0,475,476,5,228,0,0,476,509,1,0,0,0,477,478,3,118,59,0,478,479,
        5,218,0,0,479,484,3,122,61,0,480,481,5,205,0,0,481,483,3,122,61,
        0,482,480,1,0,0,0,483,486,1,0,0,0,484,482,1,0,0,0,484,485,1,0,0,
        0,485,487,1,0,0,0,486,484,1,0,0,0,487,488,5,228,0,0,488,509,1,0,
        0,0,489,490,3,118,59,0,490,491,5,218,0,0,491,496,3,70,35,0,492,493,
        5,205,0,0,493,495,3,70,35,0,494,492,1,0,0,0,495,498,1,0,0,0,496,
        494,1,0,0,0,496,497,1,0,0,0,497,499,1,0,0,0,498,496,1,0,0,0,499,
        500,5,228,0,0,500,509,1,0,0,0,501,502,3,118,59,0,502,504,5,218,0,
        0,503,505,3,72,36,0,504,503,1,0,0,0,504,505,1,0,0,0,505,506,1,0,
        0,0,506,507,5,228,0,0,507,509,1,0,0,0,508,461,1,0,0,0,508,462,1,
        0,0,0,508,477,1,0,0,0,508,489,1,0,0,0,508,501,1,0,0,0,509,71,1,0,
        0,0,510,515,3,74,37,0,511,512,5,205,0,0,512,514,3,74,37,0,513,511,
        1,0,0,0,514,517,1,0,0,0,515,513,1,0,0,0,515,516,1,0,0,0,516,73,1,
        0,0,0,517,515,1,0,0,0,518,519,3,96,48,0,519,520,5,209,0,0,520,522,
        1,0,0,0,521,518,1,0,0,0,521,522,1,0,0,0,522,523,1,0,0,0,523,530,
        5,201,0,0,524,525,5,218,0,0,525,526,3,2,1,0,526,527,5,228,0,0,527,
        530,1,0,0,0,528,530,3,76,38,0,529,521,1,0,0,0,529,524,1,0,0,0,529,
        528,1,0,0,0,530,75,1,0,0,0,531,532,6,38,-1,0,532,534,5,19,0,0,533,
        535,3,76,38,0,534,533,1,0,0,0,534,535,1,0,0,0,535,541,1,0,0,0,536,
        537,5,185,0,0,537,538,3,76,38,0,538,539,5,162,0,0,539,540,3,76,38,
        0,540,542,1,0,0,0,541,536,1,0,0,0,542,543,1,0,0,0,543,541,1,0,0,
        0,543,544,1,0,0,0,544,547,1,0,0,0,545,546,5,51,0,0,546,548,3,76,
        38,0,547,545,1,0,0,0,547,548,1,0,0,0,548,549,1,0,0,0,549,550,5,52,
        0,0,550,661,1,0,0,0,551,552,5,20,0,0,552,553,5,218,0,0,553,554,3,
        76,38,0,554,555,5,10,0,0,555,556,3,70,35,0,556,557,5,228,0,0,557,
        661,1,0,0,0,558,559,5,35,0,0,559,661,5,198,0,0,560,561,5,58,0,0,
        561,562,5,218,0,0,562,563,3,110,55,0,563,564,5,67,0,0,564,565,3,
        76,38,0,565,566,5,228,0,0,566,661,1,0,0,0,567,568,5,85,0,0,568,569,
        3,76,38,0,569,570,3,110,55,0,570,661,1,0,0,0,571,572,5,154,0,0,572,
        573,5,218,0,0,573,574,3,76,38,0,574,575,5,67,0,0,575,578,3,76,38,
        0,576,577,5,64,0,0,577,579,3,76,38,0,578,576,1,0,0,0,578,579,1,0,
        0,0,579,580,1,0,0,0,580,581,5,228,0,0,581,661,1,0,0,0,582,583,5,
        165,0,0,583,661,5,198,0,0,584,585,5,170,0,0,585,586,5,218,0,0,586,
        587,7,11,0,0,587,588,5,198,0,0,588,589,5,67,0,0,589,590,3,76,38,
        0,590,591,5,228,0,0,591,661,1,0,0,0,592,593,3,118,59,0,593,595,5,
        218,0,0,594,596,3,72,36,0,595,594,1,0,0,0,595,596,1,0,0,0,596,597,
        1,0,0,0,597,598,5,228,0,0,598,599,1,0,0,0,599,600,5,124,0,0,600,
        601,5,218,0,0,601,602,3,56,28,0,602,603,5,228,0,0,603,661,1,0,0,
        0,604,605,3,118,59,0,605,607,5,218,0,0,606,608,3,72,36,0,607,606,
        1,0,0,0,607,608,1,0,0,0,608,609,1,0,0,0,609,610,5,228,0,0,610,611,
        1,0,0,0,611,612,5,124,0,0,612,613,3,118,59,0,613,661,1,0,0,0,614,
        620,3,118,59,0,615,617,5,218,0,0,616,618,3,72,36,0,617,616,1,0,0,
        0,617,618,1,0,0,0,618,619,1,0,0,0,619,621,5,228,0,0,620,615,1,0,
        0,0,620,621,1,0,0,0,621,622,1,0,0,0,622,624,5,218,0,0,623,625,5,
        48,0,0,624,623,1,0,0,0,624,625,1,0,0,0,625,627,1,0,0,0,626,628,3,
        78,39,0,627,626,1,0,0,0,627,628,1,0,0,0,628,629,1,0,0,0,629,630,
        5,228,0,0,630,661,1,0,0,0,631,661,3,108,54,0,632,633,5,207,0,0,633,
        661,3,76,38,17,634,635,5,114,0,0,635,661,3,76,38,12,636,637,3,96,
        48,0,637,638,5,209,0,0,638,640,1,0,0,0,639,636,1,0,0,0,639,640,1,
        0,0,0,640,641,1,0,0,0,641,661,5,201,0,0,642,643,5,218,0,0,643,644,
        3,2,1,0,644,645,5,228,0,0,645,661,1,0,0,0,646,647,5,218,0,0,647,
        648,3,76,38,0,648,649,5,228,0,0,649,661,1,0,0,0,650,651,5,218,0,
        0,651,652,3,72,36,0,652,653,5,228,0,0,653,661,1,0,0,0,654,656,5,
        216,0,0,655,657,3,72,36,0,656,655,1,0,0,0,656,657,1,0,0,0,657,658,
        1,0,0,0,658,661,5,227,0,0,659,661,3,88,44,0,660,531,1,0,0,0,660,
        551,1,0,0,0,660,558,1,0,0,0,660,560,1,0,0,0,660,567,1,0,0,0,660,
        571,1,0,0,0,660,582,1,0,0,0,660,584,1,0,0,0,660,592,1,0,0,0,660,
        604,1,0,0,0,660,614,1,0,0,0,660,631,1,0,0,0,660,632,1,0,0,0,660,
        634,1,0,0,0,660,639,1,0,0,0,660,642,1,0,0,0,660,646,1,0,0,0,660,
        650,1,0,0,0,660,654,1,0,0,0,660,659,1,0,0,0,661,743,1,0,0,0,662,
        666,10,16,0,0,663,667,5,201,0,0,664,667,5,230,0,0,665,667,5,221,
        0,0,666,663,1,0,0,0,666,664,1,0,0,0,666,665,1,0,0,0,667,668,1,0,
        0,0,668,742,3,76,38,17,669,673,10,15,0,0,670,674,5,222,0,0,671,674,
        5,207,0,0,672,674,5,206,0,0,673,670,1,0,0,0,673,671,1,0,0,0,673,
        672,1,0,0,0,674,675,1,0,0,0,675,742,3,76,38,16,676,695,10,14,0,0,
        677,696,5,210,0,0,678,696,5,211,0,0,679,696,5,220,0,0,680,696,5,
        217,0,0,681,696,5,212,0,0,682,696,5,219,0,0,683,696,5,213,0,0,684,
        686,5,70,0,0,685,684,1,0,0,0,685,686,1,0,0,0,686,688,1,0,0,0,687,
        689,5,114,0,0,688,687,1,0,0,0,688,689,1,0,0,0,689,690,1,0,0,0,690,
        696,5,79,0,0,691,693,5,114,0,0,692,691,1,0,0,0,692,693,1,0,0,0,693,
        694,1,0,0,0,694,696,7,12,0,0,695,677,1,0,0,0,695,678,1,0,0,0,695,
        679,1,0,0,0,695,680,1,0,0,0,695,681,1,0,0,0,695,682,1,0,0,0,695,
        683,1,0,0,0,695,685,1,0,0,0,695,692,1,0,0,0,696,697,1,0,0,0,697,
        742,3,76,38,15,698,699,10,11,0,0,699,700,5,6,0,0,700,742,3,76,38,
        12,701,702,10,10,0,0,702,703,5,120,0,0,703,742,3,76,38,11,704,706,
        10,9,0,0,705,707,5,114,0,0,706,705,1,0,0,0,706,707,1,0,0,0,707,708,
        1,0,0,0,708,709,5,16,0,0,709,710,3,76,38,0,710,711,5,6,0,0,711,712,
        3,76,38,10,712,742,1,0,0,0,713,714,10,8,0,0,714,715,5,223,0,0,715,
        716,3,76,38,0,716,717,5,204,0,0,717,718,3,76,38,8,718,742,1,0,0,
        0,719,720,10,19,0,0,720,721,5,216,0,0,721,722,3,76,38,0,722,723,
        5,227,0,0,723,742,1,0,0,0,724,725,10,18,0,0,725,726,5,209,0,0,726,
        742,5,196,0,0,727,728,10,13,0,0,728,730,5,87,0,0,729,731,5,114,0,
        0,730,729,1,0,0,0,730,731,1,0,0,0,731,732,1,0,0,0,732,742,5,115,
        0,0,733,739,10,7,0,0,734,740,3,116,58,0,735,736,5,10,0,0,736,740,
        3,118,59,0,737,738,5,10,0,0,738,740,5,198,0,0,739,734,1,0,0,0,739,
        735,1,0,0,0,739,737,1,0,0,0,740,742,1,0,0,0,741,662,1,0,0,0,741,
        669,1,0,0,0,741,676,1,0,0,0,741,698,1,0,0,0,741,701,1,0,0,0,741,
        704,1,0,0,0,741,713,1,0,0,0,741,719,1,0,0,0,741,724,1,0,0,0,741,
        727,1,0,0,0,741,733,1,0,0,0,742,745,1,0,0,0,743,741,1,0,0,0,743,
        744,1,0,0,0,744,77,1,0,0,0,745,743,1,0,0,0,746,751,3,80,40,0,747,
        748,5,205,0,0,748,750,3,80,40,0,749,747,1,0,0,0,750,753,1,0,0,0,
        751,749,1,0,0,0,751,752,1,0,0,0,752,79,1,0,0,0,753,751,1,0,0,0,754,
        757,3,82,41,0,755,757,3,76,38,0,756,754,1,0,0,0,756,755,1,0,0,0,
        757,81,1,0,0,0,758,759,5,218,0,0,759,764,3,118,59,0,760,761,5,205,
        0,0,761,763,3,118,59,0,762,760,1,0,0,0,763,766,1,0,0,0,764,762,1,
        0,0,0,764,765,1,0,0,0,765,767,1,0,0,0,766,764,1,0,0,0,767,768,5,
        228,0,0,768,778,1,0,0,0,769,774,3,118,59,0,770,771,5,205,0,0,771,
        773,3,118,59,0,772,770,1,0,0,0,773,776,1,0,0,0,774,772,1,0,0,0,774,
        775,1,0,0,0,775,778,1,0,0,0,776,774,1,0,0,0,777,758,1,0,0,0,777,
        769,1,0,0,0,778,779,1,0,0,0,779,780,5,200,0,0,780,781,3,76,38,0,
        781,83,1,0,0,0,782,787,3,86,43,0,783,784,5,205,0,0,784,786,3,86,
        43,0,785,783,1,0,0,0,786,789,1,0,0,0,787,785,1,0,0,0,787,788,1,0,
        0,0,788,85,1,0,0,0,789,787,1,0,0,0,790,791,3,118,59,0,791,792,5,
        10,0,0,792,793,5,218,0,0,793,794,3,2,1,0,794,795,5,228,0,0,795,801,
        1,0,0,0,796,797,3,76,38,0,797,798,5,10,0,0,798,799,3,118,59,0,799,
        801,1,0,0,0,800,790,1,0,0,0,800,796,1,0,0,0,801,87,1,0,0,0,802,810,
        5,199,0,0,803,804,3,96,48,0,804,805,5,209,0,0,805,807,1,0,0,0,806,
        803,1,0,0,0,806,807,1,0,0,0,807,808,1,0,0,0,808,810,3,90,45,0,809,
        802,1,0,0,0,809,806,1,0,0,0,810,89,1,0,0,0,811,816,3,118,59,0,812,
        813,5,209,0,0,813,815,3,118,59,0,814,812,1,0,0,0,815,818,1,0,0,0,
        816,814,1,0,0,0,816,817,1,0,0,0,817,91,1,0,0,0,818,816,1,0,0,0,819,
        820,6,46,-1,0,820,827,3,96,48,0,821,827,3,94,47,0,822,823,5,218,
        0,0,823,824,3,2,1,0,824,825,5,228,0,0,825,827,1,0,0,0,826,819,1,
        0,0,0,826,821,1,0,0,0,826,822,1,0,0,0,827,836,1,0,0,0,828,832,10,
        1,0,0,829,833,3,116,58,0,830,831,5,10,0,0,831,833,3,118,59,0,832,
        829,1,0,0,0,832,830,1,0,0,0,833,835,1,0,0,0,834,828,1,0,0,0,835,
        838,1,0,0,0,836,834,1,0,0,0,836,837,1,0,0,0,837,93,1,0,0,0,838,836,
        1,0,0,0,839,840,3,118,59,0,840,842,5,218,0,0,841,843,3,98,49,0,842,
        841,1,0,0,0,842,843,1,0,0,0,843,844,1,0,0,0,844,845,5,228,0,0,845,
        95,1,0,0,0,846,847,3,102,51,0,847,848,5,209,0,0,848,850,1,0,0,0,
        849,846,1,0,0,0,849,850,1,0,0,0,850,851,1,0,0,0,851,852,3,118,59,
        0,852,97,1,0,0,0,853,858,3,100,50,0,854,855,5,205,0,0,855,857,3,
        100,50,0,856,854,1,0,0,0,857,860,1,0,0,0,858,856,1,0,0,0,858,859,
        1,0,0,0,859,99,1,0,0,0,860,858,1,0,0,0,861,865,3,90,45,0,862,865,
        3,94,47,0,863,865,3,108,54,0,864,861,1,0,0,0,864,862,1,0,0,0,864,
        863,1,0,0,0,865,101,1,0,0,0,866,867,3,118,59,0,867,103,1,0,0,0,868,
        877,5,194,0,0,869,870,5,209,0,0,870,877,7,13,0,0,871,872,5,196,0,
        0,872,874,5,209,0,0,873,875,7,13,0,0,874,873,1,0,0,0,874,875,1,0,
        0,0,875,877,1,0,0,0,876,868,1,0,0,0,876,869,1,0,0,0,876,871,1,0,
        0,0,877,105,1,0,0,0,878,880,7,14,0,0,879,878,1,0,0,0,879,880,1,0,
        0,0,880,887,1,0,0,0,881,888,3,104,52,0,882,888,5,195,0,0,883,888,
        5,196,0,0,884,888,5,197,0,0,885,888,5,81,0,0,886,888,5,112,0,0,887,
        881,1,0,0,0,887,882,1,0,0,0,887,883,1,0,0,0,887,884,1,0,0,0,887,
        885,1,0,0,0,887,886,1,0,0,0,888,107,1,0,0,0,889,893,3,106,53,0,890,
        893,5,198,0,0,891,893,5,115,0,0,892,889,1,0,0,0,892,890,1,0,0,0,
        892,891,1,0,0,0,893,109,1,0,0,0,894,895,7,15,0,0,895,111,1,0,0,0,
        896,897,7,16,0,0,897,113,1,0,0,0,898,899,7,17,0,0,899,115,1,0,0,
        0,900,903,5,193,0,0,901,903,3,114,57,0,902,900,1,0,0,0,902,901,1,
        0,0,0,903,117,1,0,0,0,904,908,5,193,0,0,905,908,3,110,55,0,906,908,
        3,112,56,0,907,904,1,0,0,0,907,905,1,0,0,0,907,906,1,0,0,0,908,119,
        1,0,0,0,909,912,3,118,59,0,910,912,5,115,0,0,911,909,1,0,0,0,911,
        910,1,0,0,0,912,121,1,0,0,0,913,914,5,198,0,0,914,915,5,211,0,0,
        915,916,3,106,53,0,916,123,1,0,0,0,117,126,136,144,147,151,154,158,
        161,164,167,170,174,178,181,184,187,190,193,202,208,229,246,265,
        273,276,282,290,293,299,301,305,310,313,316,320,324,327,329,332,
        336,340,343,345,347,350,355,366,372,377,384,389,393,397,402,409,
        417,420,423,442,456,472,484,496,504,508,515,521,529,534,543,547,
        578,595,607,617,620,624,627,639,656,660,666,673,685,688,692,695,
        706,730,739,741,743,751,756,764,774,777,787,800,806,809,816,826,
        832,836,842,849,858,864,874,876,879,887,892,902,907,911
    ]

class HogQLParser ( Parser ):

    grammarFileName = "HogQLParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'false'", "'true'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'->'", "'*'", 
                     "'`'", "'\\'", "':'", "','", "'||'", "'-'", "'$'", 
                     "'.'", "'=='", "'='", "'>='", "'>'", "'#'", "'{'", 
                     "'['", "'<='", "'('", "'<'", "<INVALID>", "'%'", "'+'", 
                     "'?'", "'\"'", "'''", "'}'", "']'", "')'", "';'", "'/'", 
                     "'_'" ]

    symbolicNames = [ "<INVALID>", "ADD", "AFTER", "ALIAS", "ALL", "ALTER", 
                      "AND", "ANTI", "ANY", "ARRAY", "AS", "ASCENDING", 
                      "ASOF", "AST", "ASYNC", "ATTACH", "BETWEEN", "BOTH", 
                      "BY", "CASE", "CAST", "CHECK", "CLEAR", "CLUSTER", 
                      "CODEC", "COLLATE", "COLUMN", "COMMENT", "CONSTRAINT", 
                      "CREATE", "CROSS", "CUBE", "CURRENT", "DATABASE", 
                      "DATABASES", "DATE", "DAY", "DEDUPLICATE", "DEFAULT", 
                      "DELAY", "DELETE", "DESC", "DESCENDING", "DESCRIBE", 
                      "DETACH", "DICTIONARIES", "DICTIONARY", "DISK", "DISTINCT", 
                      "DISTRIBUTED", "DROP", "ELSE", "END", "ENGINE", "EVENTS", 
                      "EXISTS", "EXPLAIN", "EXPRESSION", "EXTRACT", "FETCHES", 
                      "FINAL", "FIRST", "FLUSH", "FOLLOWING", "FOR", "FORMAT", 
                      "FREEZE", "FROM", "FULL", "FUNCTION", "GLOBAL", "GRANULARITY", 
                      "GROUP", "HAVING", "HIERARCHICAL", "HOUR", "ID", "IF", 
                      "ILIKE", "IN", "INDEX", "INF", "INJECTIVE", "INNER", 
                      "INSERT", "INTERVAL", "INTO", "IS", "IS_OBJECT_ID", 
                      "JOIN", "KEY", "KILL", "LAST", "LAYOUT", "LEADING", 
                      "LEFT", "LIFETIME", "LIKE", "LIMIT", "LIVE", "LOCAL", 
                      "LOGS", "MATERIALIZE", "MATERIALIZED", "MAX", "MERGES", 
                      "MIN", "MINUTE", "MODIFY", "MONTH", "MOVE", "MUTATION", 
                      "NAN_SQL", "NO", "NOT", "NULL_SQL", "NULLS", "OFFSET", 
                      "ON", "OPTIMIZE", "OR", "ORDER", "OUTER", "OUTFILE", 
                      "OVER", "PARTITION", "POPULATE", "PRECEDING", "PREWHERE", 
                      "PRIMARY", "PROJECTION", "QUARTER", "RANGE", "RELOAD", 
                      "REMOVE", "RENAME", "REPLACE", "REPLICA", "REPLICATED", 
                      "RIGHT", "ROLLUP", "ROW", "ROWS", "SAMPLE", "SECOND", 
                      "SELECT", "SEMI", "SENDS", "SET", "SETTINGS", "SHOW", 
                      "SOURCE", "START", "STOP", "SUBSTRING", "SYNC", "SYNTAX", 
                      "SYSTEM", "TABLE", "TABLES", "TEMPORARY", "TEST", 
                      "THEN", "TIES", "TIMEOUT", "TIMESTAMP", "TO", "TOP", 
                      "TOTALS", "TRAILING", "TRIM", "TRUNCATE", "TTL", "TYPE", 
                      "UNBOUNDED", "UNION", "UPDATE", "USE", "USING", "UUID", 
                      "VALUES", "VIEW", "VOLUME", "WATCH", "WEEK", "WHEN", 
                      "WHERE", "WINDOW", "WITH", "YEAR", "JSON_FALSE", "JSON_TRUE", 
                      "ESCAPE_CHAR", "IDENTIFIER", "FLOATING_LITERAL", "OCTAL_LITERAL", 
                      "DECIMAL_LITERAL", "HEXADECIMAL_LITERAL", "STRING_LITERAL", 
                      "PLACEHOLDER", "ARROW", "ASTERISK", "BACKQUOTE", "BACKSLASH", 
                      "COLON", "COMMA", "CONCAT", "DASH", "DOLLAR", "DOT", 
                      "EQ_DOUBLE", "EQ_SINGLE", "GE", "GT", "HASH", "LBRACE", 
                      "LBRACKET", "LE", "LPAREN", "LT", "NOT_EQ", "PERCENT", 
                      "PLUS", "QUERY", "QUOTE_DOUBLE", "QUOTE_SINGLE", "RBRACE", 
                      "RBRACKET", "RPAREN", "SEMICOLON", "SLASH", "UNDERSCORE", 
                      "MULTI_LINE_COMMENT", "SINGLE_LINE_COMMENT", "WHITESPACE" ]

    RULE_select = 0
    RULE_selectUnionStmt = 1
    RULE_selectStmtWithParens = 2
    RULE_selectStmt = 3
    RULE_withClause = 4
    RULE_topClause = 5
    RULE_fromClause = 6
    RULE_arrayJoinClause = 7
    RULE_windowClause = 8
    RULE_prewhereClause = 9
    RULE_whereClause = 10
    RULE_groupByClause = 11
    RULE_havingClause = 12
    RULE_orderByClause = 13
    RULE_projectionOrderByClause = 14
    RULE_limitClause = 15
    RULE_settingsClause = 16
    RULE_joinExpr = 17
    RULE_joinOp = 18
    RULE_joinOpCross = 19
    RULE_joinConstraintClause = 20
    RULE_sampleClause = 21
    RULE_limitExpr = 22
    RULE_orderExprList = 23
    RULE_orderExpr = 24
    RULE_ratioExpr = 25
    RULE_settingExprList = 26
    RULE_settingExpr = 27
    RULE_windowExpr = 28
    RULE_winPartitionByClause = 29
    RULE_winOrderByClause = 30
    RULE_winFrameClause = 31
    RULE_winFrameExtend = 32
    RULE_winFrameBound = 33
    RULE_expr = 34
    RULE_columnTypeExpr = 35
    RULE_columnExprList = 36
    RULE_columnsExpr = 37
    RULE_columnExpr = 38
    RULE_columnArgList = 39
    RULE_columnArgExpr = 40
    RULE_columnLambdaExpr = 41
    RULE_withExprList = 42
    RULE_withExpr = 43
    RULE_columnIdentifier = 44
    RULE_nestedIdentifier = 45
    RULE_tableExpr = 46
    RULE_tableFunctionExpr = 47
    RULE_tableIdentifier = 48
    RULE_tableArgList = 49
    RULE_tableArgExpr = 50
    RULE_databaseIdentifier = 51
    RULE_floatingLiteral = 52
    RULE_numberLiteral = 53
    RULE_literal = 54
    RULE_interval = 55
    RULE_keyword = 56
    RULE_keywordForAlias = 57
    RULE_alias = 58
    RULE_identifier = 59
    RULE_identifierOrNull = 60
    RULE_enumValue = 61

    ruleNames =  [ "select", "selectUnionStmt", "selectStmtWithParens", 
                   "selectStmt", "withClause", "topClause", "fromClause", 
                   "arrayJoinClause", "windowClause", "prewhereClause", 
                   "whereClause", "groupByClause", "havingClause", "orderByClause", 
                   "projectionOrderByClause", "limitClause", "settingsClause", 
                   "joinExpr", "joinOp", "joinOpCross", "joinConstraintClause", 
                   "sampleClause", "limitExpr", "orderExprList", "orderExpr", 
                   "ratioExpr", "settingExprList", "settingExpr", "windowExpr", 
                   "winPartitionByClause", "winOrderByClause", "winFrameClause", 
                   "winFrameExtend", "winFrameBound", "expr", "columnTypeExpr", 
                   "columnExprList", "columnsExpr", "columnExpr", "columnArgList", 
                   "columnArgExpr", "columnLambdaExpr", "withExprList", 
                   "withExpr", "columnIdentifier", "nestedIdentifier", "tableExpr", 
                   "tableFunctionExpr", "tableIdentifier", "tableArgList", 
                   "tableArgExpr", "databaseIdentifier", "floatingLiteral", 
                   "numberLiteral", "literal", "interval", "keyword", "keywordForAlias", 
                   "alias", "identifier", "identifierOrNull", "enumValue" ]

    EOF = Token.EOF
    ADD=1
    AFTER=2
    ALIAS=3
    ALL=4
    ALTER=5
    AND=6
    ANTI=7
    ANY=8
    ARRAY=9
    AS=10
    ASCENDING=11
    ASOF=12
    AST=13
    ASYNC=14
    ATTACH=15
    BETWEEN=16
    BOTH=17
    BY=18
    CASE=19
    CAST=20
    CHECK=21
    CLEAR=22
    CLUSTER=23
    CODEC=24
    COLLATE=25
    COLUMN=26
    COMMENT=27
    CONSTRAINT=28
    CREATE=29
    CROSS=30
    CUBE=31
    CURRENT=32
    DATABASE=33
    DATABASES=34
    DATE=35
    DAY=36
    DEDUPLICATE=37
    DEFAULT=38
    DELAY=39
    DELETE=40
    DESC=41
    DESCENDING=42
    DESCRIBE=43
    DETACH=44
    DICTIONARIES=45
    DICTIONARY=46
    DISK=47
    DISTINCT=48
    DISTRIBUTED=49
    DROP=50
    ELSE=51
    END=52
    ENGINE=53
    EVENTS=54
    EXISTS=55
    EXPLAIN=56
    EXPRESSION=57
    EXTRACT=58
    FETCHES=59
    FINAL=60
    FIRST=61
    FLUSH=62
    FOLLOWING=63
    FOR=64
    FORMAT=65
    FREEZE=66
    FROM=67
    FULL=68
    FUNCTION=69
    GLOBAL=70
    GRANULARITY=71
    GROUP=72
    HAVING=73
    HIERARCHICAL=74
    HOUR=75
    ID=76
    IF=77
    ILIKE=78
    IN=79
    INDEX=80
    INF=81
    INJECTIVE=82
    INNER=83
    INSERT=84
    INTERVAL=85
    INTO=86
    IS=87
    IS_OBJECT_ID=88
    JOIN=89
    KEY=90
    KILL=91
    LAST=92
    LAYOUT=93
    LEADING=94
    LEFT=95
    LIFETIME=96
    LIKE=97
    LIMIT=98
    LIVE=99
    LOCAL=100
    LOGS=101
    MATERIALIZE=102
    MATERIALIZED=103
    MAX=104
    MERGES=105
    MIN=106
    MINUTE=107
    MODIFY=108
    MONTH=109
    MOVE=110
    MUTATION=111
    NAN_SQL=112
    NO=113
    NOT=114
    NULL_SQL=115
    NULLS=116
    OFFSET=117
    ON=118
    OPTIMIZE=119
    OR=120
    ORDER=121
    OUTER=122
    OUTFILE=123
    OVER=124
    PARTITION=125
    POPULATE=126
    PRECEDING=127
    PREWHERE=128
    PRIMARY=129
    PROJECTION=130
    QUARTER=131
    RANGE=132
    RELOAD=133
    REMOVE=134
    RENAME=135
    REPLACE=136
    REPLICA=137
    REPLICATED=138
    RIGHT=139
    ROLLUP=140
    ROW=141
    ROWS=142
    SAMPLE=143
    SECOND=144
    SELECT=145
    SEMI=146
    SENDS=147
    SET=148
    SETTINGS=149
    SHOW=150
    SOURCE=151
    START=152
    STOP=153
    SUBSTRING=154
    SYNC=155
    SYNTAX=156
    SYSTEM=157
    TABLE=158
    TABLES=159
    TEMPORARY=160
    TEST=161
    THEN=162
    TIES=163
    TIMEOUT=164
    TIMESTAMP=165
    TO=166
    TOP=167
    TOTALS=168
    TRAILING=169
    TRIM=170
    TRUNCATE=171
    TTL=172
    TYPE=173
    UNBOUNDED=174
    UNION=175
    UPDATE=176
    USE=177
    USING=178
    UUID=179
    VALUES=180
    VIEW=181
    VOLUME=182
    WATCH=183
    WEEK=184
    WHEN=185
    WHERE=186
    WINDOW=187
    WITH=188
    YEAR=189
    JSON_FALSE=190
    JSON_TRUE=191
    ESCAPE_CHAR=192
    IDENTIFIER=193
    FLOATING_LITERAL=194
    OCTAL_LITERAL=195
    DECIMAL_LITERAL=196
    HEXADECIMAL_LITERAL=197
    STRING_LITERAL=198
    PLACEHOLDER=199
    ARROW=200
    ASTERISK=201
    BACKQUOTE=202
    BACKSLASH=203
    COLON=204
    COMMA=205
    CONCAT=206
    DASH=207
    DOLLAR=208
    DOT=209
    EQ_DOUBLE=210
    EQ_SINGLE=211
    GE=212
    GT=213
    HASH=214
    LBRACE=215
    LBRACKET=216
    LE=217
    LPAREN=218
    LT=219
    NOT_EQ=220
    PERCENT=221
    PLUS=222
    QUERY=223
    QUOTE_DOUBLE=224
    QUOTE_SINGLE=225
    RBRACE=226
    RBRACKET=227
    RPAREN=228
    SEMICOLON=229
    SLASH=230
    UNDERSCORE=231
    MULTI_LINE_COMMENT=232
    SINGLE_LINE_COMMENT=233
    WHITESPACE=234

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class SelectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(HogQLParser.EOF, 0)

        def selectUnionStmt(self):
            return self.getTypedRuleContext(HogQLParser.SelectUnionStmtContext,0)


        def selectStmt(self):
            return self.getTypedRuleContext(HogQLParser.SelectStmtContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_select

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelect" ):
                return visitor.visitSelect(self)
            else:
                return visitor.visitChildren(self)




    def select(self):

        localctx = HogQLParser.SelectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_select)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 126
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
            if la_ == 1:
                self.state = 124
                self.selectUnionStmt()
                pass

            elif la_ == 2:
                self.state = 125
                self.selectStmt()
                pass


            self.state = 128
            self.match(HogQLParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectUnionStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selectStmtWithParens(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.SelectStmtWithParensContext)
            else:
                return self.getTypedRuleContext(HogQLParser.SelectStmtWithParensContext,i)


        def UNION(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.UNION)
            else:
                return self.getToken(HogQLParser.UNION, i)

        def ALL(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.ALL)
            else:
                return self.getToken(HogQLParser.ALL, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_selectUnionStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectUnionStmt" ):
                return visitor.visitSelectUnionStmt(self)
            else:
                return visitor.visitChildren(self)




    def selectUnionStmt(self):

        localctx = HogQLParser.SelectUnionStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_selectUnionStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 130
            self.selectStmtWithParens()
            self.state = 136
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==175:
                self.state = 131
                self.match(HogQLParser.UNION)
                self.state = 132
                self.match(HogQLParser.ALL)
                self.state = 133
                self.selectStmtWithParens()
                self.state = 138
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectStmtWithParensContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selectStmt(self):
            return self.getTypedRuleContext(HogQLParser.SelectStmtContext,0)


        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)

        def selectUnionStmt(self):
            return self.getTypedRuleContext(HogQLParser.SelectUnionStmtContext,0)


        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_selectStmtWithParens

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectStmtWithParens" ):
                return visitor.visitSelectStmtWithParens(self)
            else:
                return visitor.visitChildren(self)




    def selectStmtWithParens(self):

        localctx = HogQLParser.SelectStmtWithParensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_selectStmtWithParens)
        try:
            self.state = 144
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [145, 188]:
                self.enterOuterAlt(localctx, 1)
                self.state = 139
                self.selectStmt()
                pass
            elif token in [218]:
                self.enterOuterAlt(localctx, 2)
                self.state = 140
                self.match(HogQLParser.LPAREN)
                self.state = 141
                self.selectUnionStmt()
                self.state = 142
                self.match(HogQLParser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.with_ = None # WithClauseContext
            self.columns = None # ColumnExprListContext
            self.from_ = None # FromClauseContext
            self.where = None # WhereClauseContext

        def SELECT(self):
            return self.getToken(HogQLParser.SELECT, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def DISTINCT(self):
            return self.getToken(HogQLParser.DISTINCT, 0)

        def topClause(self):
            return self.getTypedRuleContext(HogQLParser.TopClauseContext,0)


        def arrayJoinClause(self):
            return self.getTypedRuleContext(HogQLParser.ArrayJoinClauseContext,0)


        def prewhereClause(self):
            return self.getTypedRuleContext(HogQLParser.PrewhereClauseContext,0)


        def groupByClause(self):
            return self.getTypedRuleContext(HogQLParser.GroupByClauseContext,0)


        def WITH(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.WITH)
            else:
                return self.getToken(HogQLParser.WITH, i)

        def TOTALS(self):
            return self.getToken(HogQLParser.TOTALS, 0)

        def havingClause(self):
            return self.getTypedRuleContext(HogQLParser.HavingClauseContext,0)


        def windowClause(self):
            return self.getTypedRuleContext(HogQLParser.WindowClauseContext,0)


        def orderByClause(self):
            return self.getTypedRuleContext(HogQLParser.OrderByClauseContext,0)


        def limitClause(self):
            return self.getTypedRuleContext(HogQLParser.LimitClauseContext,0)


        def settingsClause(self):
            return self.getTypedRuleContext(HogQLParser.SettingsClauseContext,0)


        def withClause(self):
            return self.getTypedRuleContext(HogQLParser.WithClauseContext,0)


        def fromClause(self):
            return self.getTypedRuleContext(HogQLParser.FromClauseContext,0)


        def whereClause(self):
            return self.getTypedRuleContext(HogQLParser.WhereClauseContext,0)


        def CUBE(self):
            return self.getToken(HogQLParser.CUBE, 0)

        def ROLLUP(self):
            return self.getToken(HogQLParser.ROLLUP, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_selectStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectStmt" ):
                return visitor.visitSelectStmt(self)
            else:
                return visitor.visitChildren(self)




    def selectStmt(self):

        localctx = HogQLParser.SelectStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_selectStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 147
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==188:
                self.state = 146
                localctx.with_ = self.withClause()


            self.state = 149
            self.match(HogQLParser.SELECT)
            self.state = 151
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
            if la_ == 1:
                self.state = 150
                self.match(HogQLParser.DISTINCT)


            self.state = 154
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.state = 153
                self.topClause()


            self.state = 156
            localctx.columns = self.columnExprList()
            self.state = 158
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==67:
                self.state = 157
                localctx.from_ = self.fromClause()


            self.state = 161
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9 or _la==83 or _la==95:
                self.state = 160
                self.arrayJoinClause()


            self.state = 164
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==128:
                self.state = 163
                self.prewhereClause()


            self.state = 167
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==186:
                self.state = 166
                localctx.where = self.whereClause()


            self.state = 170
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==72:
                self.state = 169
                self.groupByClause()


            self.state = 174
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
            if la_ == 1:
                self.state = 172
                self.match(HogQLParser.WITH)
                self.state = 173
                _la = self._input.LA(1)
                if not(_la==31 or _la==140):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 178
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==188:
                self.state = 176
                self.match(HogQLParser.WITH)
                self.state = 177
                self.match(HogQLParser.TOTALS)


            self.state = 181
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==73:
                self.state = 180
                self.havingClause()


            self.state = 184
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==187:
                self.state = 183
                self.windowClause()


            self.state = 187
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==121:
                self.state = 186
                self.orderByClause()


            self.state = 190
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==98:
                self.state = 189
                self.limitClause()


            self.state = 193
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==149:
                self.state = 192
                self.settingsClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WithClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(HogQLParser.WITH, 0)

        def withExprList(self):
            return self.getTypedRuleContext(HogQLParser.WithExprListContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_withClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWithClause" ):
                return visitor.visitWithClause(self)
            else:
                return visitor.visitChildren(self)




    def withClause(self):

        localctx = HogQLParser.WithClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_withClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 195
            self.match(HogQLParser.WITH)
            self.state = 196
            self.withExprList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TopClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TOP(self):
            return self.getToken(HogQLParser.TOP, 0)

        def DECIMAL_LITERAL(self):
            return self.getToken(HogQLParser.DECIMAL_LITERAL, 0)

        def WITH(self):
            return self.getToken(HogQLParser.WITH, 0)

        def TIES(self):
            return self.getToken(HogQLParser.TIES, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_topClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTopClause" ):
                return visitor.visitTopClause(self)
            else:
                return visitor.visitChildren(self)




    def topClause(self):

        localctx = HogQLParser.TopClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_topClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 198
            self.match(HogQLParser.TOP)
            self.state = 199
            self.match(HogQLParser.DECIMAL_LITERAL)
            self.state = 202
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
            if la_ == 1:
                self.state = 200
                self.match(HogQLParser.WITH)
                self.state = 201
                self.match(HogQLParser.TIES)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FromClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(HogQLParser.FROM, 0)

        def joinExpr(self):
            return self.getTypedRuleContext(HogQLParser.JoinExprContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_fromClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFromClause" ):
                return visitor.visitFromClause(self)
            else:
                return visitor.visitChildren(self)




    def fromClause(self):

        localctx = HogQLParser.FromClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_fromClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 204
            self.match(HogQLParser.FROM)
            self.state = 205
            self.joinExpr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayJoinClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ARRAY(self):
            return self.getToken(HogQLParser.ARRAY, 0)

        def JOIN(self):
            return self.getToken(HogQLParser.JOIN, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def LEFT(self):
            return self.getToken(HogQLParser.LEFT, 0)

        def INNER(self):
            return self.getToken(HogQLParser.INNER, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_arrayJoinClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayJoinClause" ):
                return visitor.visitArrayJoinClause(self)
            else:
                return visitor.visitChildren(self)




    def arrayJoinClause(self):

        localctx = HogQLParser.ArrayJoinClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_arrayJoinClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 208
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==83 or _la==95:
                self.state = 207
                _la = self._input.LA(1)
                if not(_la==83 or _la==95):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 210
            self.match(HogQLParser.ARRAY)
            self.state = 211
            self.match(HogQLParser.JOIN)
            self.state = 212
            self.columnExprList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WINDOW(self):
            return self.getToken(HogQLParser.WINDOW, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(HogQLParser.IdentifierContext,i)


        def AS(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.AS)
            else:
                return self.getToken(HogQLParser.AS, i)

        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.LPAREN)
            else:
                return self.getToken(HogQLParser.LPAREN, i)

        def windowExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.WindowExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.WindowExprContext,i)


        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.RPAREN)
            else:
                return self.getToken(HogQLParser.RPAREN, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_windowClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindowClause" ):
                return visitor.visitWindowClause(self)
            else:
                return visitor.visitChildren(self)




    def windowClause(self):

        localctx = HogQLParser.WindowClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_windowClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 214
            self.match(HogQLParser.WINDOW)
            self.state = 215
            self.identifier()
            self.state = 216
            self.match(HogQLParser.AS)
            self.state = 217
            self.match(HogQLParser.LPAREN)
            self.state = 218
            self.windowExpr()
            self.state = 219
            self.match(HogQLParser.RPAREN)
            self.state = 229
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==205:
                self.state = 220
                self.match(HogQLParser.COMMA)
                self.state = 221
                self.identifier()
                self.state = 222
                self.match(HogQLParser.AS)
                self.state = 223
                self.match(HogQLParser.LPAREN)
                self.state = 224
                self.windowExpr()
                self.state = 225
                self.match(HogQLParser.RPAREN)
                self.state = 231
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrewhereClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PREWHERE(self):
            return self.getToken(HogQLParser.PREWHERE, 0)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_prewhereClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrewhereClause" ):
                return visitor.visitPrewhereClause(self)
            else:
                return visitor.visitChildren(self)




    def prewhereClause(self):

        localctx = HogQLParser.PrewhereClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_prewhereClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 232
            self.match(HogQLParser.PREWHERE)
            self.state = 233
            self.columnExpr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhereClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(HogQLParser.WHERE, 0)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_whereClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhereClause" ):
                return visitor.visitWhereClause(self)
            else:
                return visitor.visitChildren(self)




    def whereClause(self):

        localctx = HogQLParser.WhereClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_whereClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 235
            self.match(HogQLParser.WHERE)
            self.state = 236
            self.columnExpr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GROUP(self):
            return self.getToken(HogQLParser.GROUP, 0)

        def BY(self):
            return self.getToken(HogQLParser.BY, 0)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def CUBE(self):
            return self.getToken(HogQLParser.CUBE, 0)

        def ROLLUP(self):
            return self.getToken(HogQLParser.ROLLUP, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_groupByClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroupByClause" ):
                return visitor.visitGroupByClause(self)
            else:
                return visitor.visitChildren(self)




    def groupByClause(self):

        localctx = HogQLParser.GroupByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_groupByClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 238
            self.match(HogQLParser.GROUP)
            self.state = 239
            self.match(HogQLParser.BY)
            self.state = 246
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,21,self._ctx)
            if la_ == 1:
                self.state = 240
                _la = self._input.LA(1)
                if not(_la==31 or _la==140):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 241
                self.match(HogQLParser.LPAREN)
                self.state = 242
                self.columnExprList()
                self.state = 243
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 2:
                self.state = 245
                self.columnExprList()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HavingClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HAVING(self):
            return self.getToken(HogQLParser.HAVING, 0)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_havingClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHavingClause" ):
                return visitor.visitHavingClause(self)
            else:
                return visitor.visitChildren(self)




    def havingClause(self):

        localctx = HogQLParser.HavingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_havingClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 248
            self.match(HogQLParser.HAVING)
            self.state = 249
            self.columnExpr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(HogQLParser.ORDER, 0)

        def BY(self):
            return self.getToken(HogQLParser.BY, 0)

        def orderExprList(self):
            return self.getTypedRuleContext(HogQLParser.OrderExprListContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_orderByClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrderByClause" ):
                return visitor.visitOrderByClause(self)
            else:
                return visitor.visitChildren(self)




    def orderByClause(self):

        localctx = HogQLParser.OrderByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_orderByClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 251
            self.match(HogQLParser.ORDER)
            self.state = 252
            self.match(HogQLParser.BY)
            self.state = 253
            self.orderExprList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProjectionOrderByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(HogQLParser.ORDER, 0)

        def BY(self):
            return self.getToken(HogQLParser.BY, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_projectionOrderByClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProjectionOrderByClause" ):
                return visitor.visitProjectionOrderByClause(self)
            else:
                return visitor.visitChildren(self)




    def projectionOrderByClause(self):

        localctx = HogQLParser.ProjectionOrderByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_projectionOrderByClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 255
            self.match(HogQLParser.ORDER)
            self.state = 256
            self.match(HogQLParser.BY)
            self.state = 257
            self.columnExprList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LimitClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIMIT(self):
            return self.getToken(HogQLParser.LIMIT, 0)

        def limitExpr(self):
            return self.getTypedRuleContext(HogQLParser.LimitExprContext,0)


        def BY(self):
            return self.getToken(HogQLParser.BY, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def WITH(self):
            return self.getToken(HogQLParser.WITH, 0)

        def TIES(self):
            return self.getToken(HogQLParser.TIES, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_limitClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLimitClause" ):
                return visitor.visitLimitClause(self)
            else:
                return visitor.visitChildren(self)




    def limitClause(self):

        localctx = HogQLParser.LimitClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_limitClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 259
            self.match(HogQLParser.LIMIT)
            self.state = 260
            self.limitExpr()
            self.state = 265
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [188]:
                self.state = 261
                self.match(HogQLParser.WITH)
                self.state = 262
                self.match(HogQLParser.TIES)
                pass
            elif token in [18]:
                self.state = 263
                self.match(HogQLParser.BY)
                self.state = 264
                self.columnExprList()
                pass
            elif token in [-1, 149, 175, 228]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SettingsClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SETTINGS(self):
            return self.getToken(HogQLParser.SETTINGS, 0)

        def settingExprList(self):
            return self.getTypedRuleContext(HogQLParser.SettingExprListContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_settingsClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSettingsClause" ):
                return visitor.visitSettingsClause(self)
            else:
                return visitor.visitChildren(self)




    def settingsClause(self):

        localctx = HogQLParser.SettingsClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_settingsClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 267
            self.match(HogQLParser.SETTINGS)
            self.state = 268
            self.settingExprList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return HogQLParser.RULE_joinExpr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class JoinExprOpContext(JoinExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.JoinExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def joinExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.JoinExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.JoinExprContext,i)

        def JOIN(self):
            return self.getToken(HogQLParser.JOIN, 0)
        def joinConstraintClause(self):
            return self.getTypedRuleContext(HogQLParser.JoinConstraintClauseContext,0)

        def joinOp(self):
            return self.getTypedRuleContext(HogQLParser.JoinOpContext,0)

        def GLOBAL(self):
            return self.getToken(HogQLParser.GLOBAL, 0)
        def LOCAL(self):
            return self.getToken(HogQLParser.LOCAL, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinExprOp" ):
                return visitor.visitJoinExprOp(self)
            else:
                return visitor.visitChildren(self)


    class JoinExprTableContext(JoinExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.JoinExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tableExpr(self):
            return self.getTypedRuleContext(HogQLParser.TableExprContext,0)

        def FINAL(self):
            return self.getToken(HogQLParser.FINAL, 0)
        def sampleClause(self):
            return self.getTypedRuleContext(HogQLParser.SampleClauseContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinExprTable" ):
                return visitor.visitJoinExprTable(self)
            else:
                return visitor.visitChildren(self)


    class JoinExprParensContext(JoinExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.JoinExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def joinExpr(self):
            return self.getTypedRuleContext(HogQLParser.JoinExprContext,0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinExprParens" ):
                return visitor.visitJoinExprParens(self)
            else:
                return visitor.visitChildren(self)


    class JoinExprCrossOpContext(JoinExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.JoinExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def joinExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.JoinExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.JoinExprContext,i)

        def joinOpCross(self):
            return self.getTypedRuleContext(HogQLParser.JoinOpCrossContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinExprCrossOp" ):
                return visitor.visitJoinExprCrossOp(self)
            else:
                return visitor.visitChildren(self)



    def joinExpr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = HogQLParser.JoinExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 34
        self.enterRecursionRule(localctx, 34, self.RULE_joinExpr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 282
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
            if la_ == 1:
                localctx = HogQLParser.JoinExprTableContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 271
                self.tableExpr(0)
                self.state = 273
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,23,self._ctx)
                if la_ == 1:
                    self.state = 272
                    self.match(HogQLParser.FINAL)


                self.state = 276
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
                if la_ == 1:
                    self.state = 275
                    self.sampleClause()


                pass

            elif la_ == 2:
                localctx = HogQLParser.JoinExprParensContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 278
                self.match(HogQLParser.LPAREN)
                self.state = 279
                self.joinExpr(0)
                self.state = 280
                self.match(HogQLParser.RPAREN)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 301
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,29,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 299
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
                    if la_ == 1:
                        localctx = HogQLParser.JoinExprCrossOpContext(self, HogQLParser.JoinExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_joinExpr)
                        self.state = 284
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 285
                        self.joinOpCross()
                        self.state = 286
                        self.joinExpr(4)
                        pass

                    elif la_ == 2:
                        localctx = HogQLParser.JoinExprOpContext(self, HogQLParser.JoinExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_joinExpr)
                        self.state = 288
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 290
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==70 or _la==100:
                            self.state = 289
                            _la = self._input.LA(1)
                            if not(_la==70 or _la==100):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()


                        self.state = 293
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4496) != 0) or ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & 134250497) != 0) or _la==139 or _la==146:
                            self.state = 292
                            self.joinOp()


                        self.state = 295
                        self.match(HogQLParser.JOIN)
                        self.state = 296
                        self.joinExpr(0)
                        self.state = 297
                        self.joinConstraintClause()
                        pass

             
                self.state = 303
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,29,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class JoinOpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return HogQLParser.RULE_joinOp

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class JoinOpFullContext(JoinOpContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.JoinOpContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FULL(self):
            return self.getToken(HogQLParser.FULL, 0)
        def OUTER(self):
            return self.getToken(HogQLParser.OUTER, 0)
        def ALL(self):
            return self.getToken(HogQLParser.ALL, 0)
        def ANY(self):
            return self.getToken(HogQLParser.ANY, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinOpFull" ):
                return visitor.visitJoinOpFull(self)
            else:
                return visitor.visitChildren(self)


    class JoinOpInnerContext(JoinOpContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.JoinOpContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INNER(self):
            return self.getToken(HogQLParser.INNER, 0)
        def ALL(self):
            return self.getToken(HogQLParser.ALL, 0)
        def ANY(self):
            return self.getToken(HogQLParser.ANY, 0)
        def ASOF(self):
            return self.getToken(HogQLParser.ASOF, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinOpInner" ):
                return visitor.visitJoinOpInner(self)
            else:
                return visitor.visitChildren(self)


    class JoinOpLeftRightContext(JoinOpContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.JoinOpContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LEFT(self):
            return self.getToken(HogQLParser.LEFT, 0)
        def RIGHT(self):
            return self.getToken(HogQLParser.RIGHT, 0)
        def OUTER(self):
            return self.getToken(HogQLParser.OUTER, 0)
        def SEMI(self):
            return self.getToken(HogQLParser.SEMI, 0)
        def ALL(self):
            return self.getToken(HogQLParser.ALL, 0)
        def ANTI(self):
            return self.getToken(HogQLParser.ANTI, 0)
        def ANY(self):
            return self.getToken(HogQLParser.ANY, 0)
        def ASOF(self):
            return self.getToken(HogQLParser.ASOF, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinOpLeftRight" ):
                return visitor.visitJoinOpLeftRight(self)
            else:
                return visitor.visitChildren(self)



    def joinOp(self):

        localctx = HogQLParser.JoinOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_joinOp)
        self._la = 0 # Token type
        try:
            self.state = 347
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
            if la_ == 1:
                localctx = HogQLParser.JoinOpInnerContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 313
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,32,self._ctx)
                if la_ == 1:
                    self.state = 305
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4368) != 0):
                        self.state = 304
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 4368) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 307
                    self.match(HogQLParser.INNER)
                    pass

                elif la_ == 2:
                    self.state = 308
                    self.match(HogQLParser.INNER)
                    self.state = 310
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4368) != 0):
                        self.state = 309
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 4368) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    pass

                elif la_ == 3:
                    self.state = 312
                    _la = self._input.LA(1)
                    if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 4368) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass


                pass

            elif la_ == 2:
                localctx = HogQLParser.JoinOpLeftRightContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 329
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,37,self._ctx)
                if la_ == 1:
                    self.state = 316
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4496) != 0) or _la==146:
                        self.state = 315
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 4496) != 0) or _la==146):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 318
                    _la = self._input.LA(1)
                    if not(_la==95 or _la==139):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 320
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==122:
                        self.state = 319
                        self.match(HogQLParser.OUTER)


                    pass

                elif la_ == 2:
                    self.state = 322
                    _la = self._input.LA(1)
                    if not(_la==95 or _la==139):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 324
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==122:
                        self.state = 323
                        self.match(HogQLParser.OUTER)


                    self.state = 327
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4496) != 0) or _la==146:
                        self.state = 326
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 4496) != 0) or _la==146):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    pass


                pass

            elif la_ == 3:
                localctx = HogQLParser.JoinOpFullContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 345
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
                if la_ == 1:
                    self.state = 332
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==4 or _la==8:
                        self.state = 331
                        _la = self._input.LA(1)
                        if not(_la==4 or _la==8):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 334
                    self.match(HogQLParser.FULL)
                    self.state = 336
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==122:
                        self.state = 335
                        self.match(HogQLParser.OUTER)


                    pass

                elif la_ == 2:
                    self.state = 338
                    self.match(HogQLParser.FULL)
                    self.state = 340
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==122:
                        self.state = 339
                        self.match(HogQLParser.OUTER)


                    self.state = 343
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==4 or _la==8:
                        self.state = 342
                        _la = self._input.LA(1)
                        if not(_la==4 or _la==8):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    pass


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinOpCrossContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CROSS(self):
            return self.getToken(HogQLParser.CROSS, 0)

        def JOIN(self):
            return self.getToken(HogQLParser.JOIN, 0)

        def GLOBAL(self):
            return self.getToken(HogQLParser.GLOBAL, 0)

        def LOCAL(self):
            return self.getToken(HogQLParser.LOCAL, 0)

        def COMMA(self):
            return self.getToken(HogQLParser.COMMA, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_joinOpCross

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinOpCross" ):
                return visitor.visitJoinOpCross(self)
            else:
                return visitor.visitChildren(self)




    def joinOpCross(self):

        localctx = HogQLParser.JoinOpCrossContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_joinOpCross)
        self._la = 0 # Token type
        try:
            self.state = 355
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [30, 70, 100]:
                self.enterOuterAlt(localctx, 1)
                self.state = 350
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==70 or _la==100:
                    self.state = 349
                    _la = self._input.LA(1)
                    if not(_la==70 or _la==100):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 352
                self.match(HogQLParser.CROSS)
                self.state = 353
                self.match(HogQLParser.JOIN)
                pass
            elif token in [205]:
                self.enterOuterAlt(localctx, 2)
                self.state = 354
                self.match(HogQLParser.COMMA)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinConstraintClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(HogQLParser.ON, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def USING(self):
            return self.getToken(HogQLParser.USING, 0)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_joinConstraintClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinConstraintClause" ):
                return visitor.visitJoinConstraintClause(self)
            else:
                return visitor.visitChildren(self)




    def joinConstraintClause(self):

        localctx = HogQLParser.JoinConstraintClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_joinConstraintClause)
        try:
            self.state = 366
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 357
                self.match(HogQLParser.ON)
                self.state = 358
                self.columnExprList()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 359
                self.match(HogQLParser.USING)
                self.state = 360
                self.match(HogQLParser.LPAREN)
                self.state = 361
                self.columnExprList()
                self.state = 362
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 364
                self.match(HogQLParser.USING)
                self.state = 365
                self.columnExprList()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SampleClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SAMPLE(self):
            return self.getToken(HogQLParser.SAMPLE, 0)

        def ratioExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.RatioExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.RatioExprContext,i)


        def OFFSET(self):
            return self.getToken(HogQLParser.OFFSET, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_sampleClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSampleClause" ):
                return visitor.visitSampleClause(self)
            else:
                return visitor.visitChildren(self)




    def sampleClause(self):

        localctx = HogQLParser.SampleClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_sampleClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 368
            self.match(HogQLParser.SAMPLE)
            self.state = 369
            self.ratioExpr()
            self.state = 372
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
            if la_ == 1:
                self.state = 370
                self.match(HogQLParser.OFFSET)
                self.state = 371
                self.ratioExpr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LimitExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)


        def COMMA(self):
            return self.getToken(HogQLParser.COMMA, 0)

        def OFFSET(self):
            return self.getToken(HogQLParser.OFFSET, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_limitExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLimitExpr" ):
                return visitor.visitLimitExpr(self)
            else:
                return visitor.visitChildren(self)




    def limitExpr(self):

        localctx = HogQLParser.LimitExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_limitExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 374
            self.columnExpr(0)
            self.state = 377
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==117 or _la==205:
                self.state = 375
                _la = self._input.LA(1)
                if not(_la==117 or _la==205):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 376
                self.columnExpr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderExprListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def orderExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.OrderExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.OrderExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_orderExprList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrderExprList" ):
                return visitor.visitOrderExprList(self)
            else:
                return visitor.visitChildren(self)




    def orderExprList(self):

        localctx = HogQLParser.OrderExprListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_orderExprList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 379
            self.orderExpr()
            self.state = 384
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==205:
                self.state = 380
                self.match(HogQLParser.COMMA)
                self.state = 381
                self.orderExpr()
                self.state = 386
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def NULLS(self):
            return self.getToken(HogQLParser.NULLS, 0)

        def COLLATE(self):
            return self.getToken(HogQLParser.COLLATE, 0)

        def STRING_LITERAL(self):
            return self.getToken(HogQLParser.STRING_LITERAL, 0)

        def ASCENDING(self):
            return self.getToken(HogQLParser.ASCENDING, 0)

        def DESCENDING(self):
            return self.getToken(HogQLParser.DESCENDING, 0)

        def DESC(self):
            return self.getToken(HogQLParser.DESC, 0)

        def FIRST(self):
            return self.getToken(HogQLParser.FIRST, 0)

        def LAST(self):
            return self.getToken(HogQLParser.LAST, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_orderExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrderExpr" ):
                return visitor.visitOrderExpr(self)
            else:
                return visitor.visitChildren(self)




    def orderExpr(self):

        localctx = HogQLParser.OrderExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_orderExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 387
            self.columnExpr(0)
            self.state = 389
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 6597069768704) != 0):
                self.state = 388
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 6597069768704) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 393
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==116:
                self.state = 391
                self.match(HogQLParser.NULLS)
                self.state = 392
                _la = self._input.LA(1)
                if not(_la==61 or _la==92):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 397
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==25:
                self.state = 395
                self.match(HogQLParser.COLLATE)
                self.state = 396
                self.match(HogQLParser.STRING_LITERAL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RatioExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numberLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.NumberLiteralContext)
            else:
                return self.getTypedRuleContext(HogQLParser.NumberLiteralContext,i)


        def SLASH(self):
            return self.getToken(HogQLParser.SLASH, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_ratioExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRatioExpr" ):
                return visitor.visitRatioExpr(self)
            else:
                return visitor.visitChildren(self)




    def ratioExpr(self):

        localctx = HogQLParser.RatioExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_ratioExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 399
            self.numberLiteral()
            self.state = 402
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,53,self._ctx)
            if la_ == 1:
                self.state = 400
                self.match(HogQLParser.SLASH)
                self.state = 401
                self.numberLiteral()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SettingExprListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def settingExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.SettingExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.SettingExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_settingExprList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSettingExprList" ):
                return visitor.visitSettingExprList(self)
            else:
                return visitor.visitChildren(self)




    def settingExprList(self):

        localctx = HogQLParser.SettingExprListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_settingExprList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 404
            self.settingExpr()
            self.state = 409
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==205:
                self.state = 405
                self.match(HogQLParser.COMMA)
                self.state = 406
                self.settingExpr()
                self.state = 411
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SettingExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def EQ_SINGLE(self):
            return self.getToken(HogQLParser.EQ_SINGLE, 0)

        def literal(self):
            return self.getTypedRuleContext(HogQLParser.LiteralContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_settingExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSettingExpr" ):
                return visitor.visitSettingExpr(self)
            else:
                return visitor.visitChildren(self)




    def settingExpr(self):

        localctx = HogQLParser.SettingExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_settingExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 412
            self.identifier()
            self.state = 413
            self.match(HogQLParser.EQ_SINGLE)
            self.state = 414
            self.literal()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def winPartitionByClause(self):
            return self.getTypedRuleContext(HogQLParser.WinPartitionByClauseContext,0)


        def winOrderByClause(self):
            return self.getTypedRuleContext(HogQLParser.WinOrderByClauseContext,0)


        def winFrameClause(self):
            return self.getTypedRuleContext(HogQLParser.WinFrameClauseContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_windowExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindowExpr" ):
                return visitor.visitWindowExpr(self)
            else:
                return visitor.visitChildren(self)




    def windowExpr(self):

        localctx = HogQLParser.WindowExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_windowExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 417
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==125:
                self.state = 416
                self.winPartitionByClause()


            self.state = 420
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==121:
                self.state = 419
                self.winOrderByClause()


            self.state = 423
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==132 or _la==142:
                self.state = 422
                self.winFrameClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WinPartitionByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION(self):
            return self.getToken(HogQLParser.PARTITION, 0)

        def BY(self):
            return self.getToken(HogQLParser.BY, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_winPartitionByClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWinPartitionByClause" ):
                return visitor.visitWinPartitionByClause(self)
            else:
                return visitor.visitChildren(self)




    def winPartitionByClause(self):

        localctx = HogQLParser.WinPartitionByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_winPartitionByClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 425
            self.match(HogQLParser.PARTITION)
            self.state = 426
            self.match(HogQLParser.BY)
            self.state = 427
            self.columnExprList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WinOrderByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(HogQLParser.ORDER, 0)

        def BY(self):
            return self.getToken(HogQLParser.BY, 0)

        def orderExprList(self):
            return self.getTypedRuleContext(HogQLParser.OrderExprListContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_winOrderByClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWinOrderByClause" ):
                return visitor.visitWinOrderByClause(self)
            else:
                return visitor.visitChildren(self)




    def winOrderByClause(self):

        localctx = HogQLParser.WinOrderByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_winOrderByClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 429
            self.match(HogQLParser.ORDER)
            self.state = 430
            self.match(HogQLParser.BY)
            self.state = 431
            self.orderExprList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WinFrameClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def winFrameExtend(self):
            return self.getTypedRuleContext(HogQLParser.WinFrameExtendContext,0)


        def ROWS(self):
            return self.getToken(HogQLParser.ROWS, 0)

        def RANGE(self):
            return self.getToken(HogQLParser.RANGE, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_winFrameClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWinFrameClause" ):
                return visitor.visitWinFrameClause(self)
            else:
                return visitor.visitChildren(self)




    def winFrameClause(self):

        localctx = HogQLParser.WinFrameClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_winFrameClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 433
            _la = self._input.LA(1)
            if not(_la==132 or _la==142):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 434
            self.winFrameExtend()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WinFrameExtendContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return HogQLParser.RULE_winFrameExtend

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class FrameStartContext(WinFrameExtendContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.WinFrameExtendContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def winFrameBound(self):
            return self.getTypedRuleContext(HogQLParser.WinFrameBoundContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFrameStart" ):
                return visitor.visitFrameStart(self)
            else:
                return visitor.visitChildren(self)


    class FrameBetweenContext(WinFrameExtendContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.WinFrameExtendContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BETWEEN(self):
            return self.getToken(HogQLParser.BETWEEN, 0)
        def winFrameBound(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.WinFrameBoundContext)
            else:
                return self.getTypedRuleContext(HogQLParser.WinFrameBoundContext,i)

        def AND(self):
            return self.getToken(HogQLParser.AND, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFrameBetween" ):
                return visitor.visitFrameBetween(self)
            else:
                return visitor.visitChildren(self)



    def winFrameExtend(self):

        localctx = HogQLParser.WinFrameExtendContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_winFrameExtend)
        try:
            self.state = 442
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [32, 81, 112, 174, 194, 195, 196, 197, 207, 209, 222]:
                localctx = HogQLParser.FrameStartContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 436
                self.winFrameBound()
                pass
            elif token in [16]:
                localctx = HogQLParser.FrameBetweenContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 437
                self.match(HogQLParser.BETWEEN)
                self.state = 438
                self.winFrameBound()
                self.state = 439
                self.match(HogQLParser.AND)
                self.state = 440
                self.winFrameBound()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WinFrameBoundContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CURRENT(self):
            return self.getToken(HogQLParser.CURRENT, 0)

        def ROW(self):
            return self.getToken(HogQLParser.ROW, 0)

        def UNBOUNDED(self):
            return self.getToken(HogQLParser.UNBOUNDED, 0)

        def PRECEDING(self):
            return self.getToken(HogQLParser.PRECEDING, 0)

        def FOLLOWING(self):
            return self.getToken(HogQLParser.FOLLOWING, 0)

        def numberLiteral(self):
            return self.getTypedRuleContext(HogQLParser.NumberLiteralContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_winFrameBound

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWinFrameBound" ):
                return visitor.visitWinFrameBound(self)
            else:
                return visitor.visitChildren(self)




    def winFrameBound(self):

        localctx = HogQLParser.WinFrameBoundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_winFrameBound)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 456
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
            if la_ == 1:
                self.state = 444
                self.match(HogQLParser.CURRENT)
                self.state = 445
                self.match(HogQLParser.ROW)
                pass

            elif la_ == 2:
                self.state = 446
                self.match(HogQLParser.UNBOUNDED)
                self.state = 447
                self.match(HogQLParser.PRECEDING)
                pass

            elif la_ == 3:
                self.state = 448
                self.match(HogQLParser.UNBOUNDED)
                self.state = 449
                self.match(HogQLParser.FOLLOWING)
                pass

            elif la_ == 4:
                self.state = 450
                self.numberLiteral()
                self.state = 451
                self.match(HogQLParser.PRECEDING)
                pass

            elif la_ == 5:
                self.state = 453
                self.numberLiteral()
                self.state = 454
                self.match(HogQLParser.FOLLOWING)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def EOF(self):
            return self.getToken(HogQLParser.EOF, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_expr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpr" ):
                return visitor.visitExpr(self)
            else:
                return visitor.visitChildren(self)




    def expr(self):

        localctx = HogQLParser.ExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 458
            self.columnExpr(0)
            self.state = 459
            self.match(HogQLParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnTypeExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return HogQLParser.RULE_columnTypeExpr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ColumnTypeExprNestedContext(ColumnTypeExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnTypeExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(HogQLParser.IdentifierContext,i)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def columnTypeExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnTypeExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnTypeExprContext,i)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnTypeExprNested" ):
                return visitor.visitColumnTypeExprNested(self)
            else:
                return visitor.visitChildren(self)


    class ColumnTypeExprParamContext(ColumnTypeExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnTypeExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)
        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnTypeExprParam" ):
                return visitor.visitColumnTypeExprParam(self)
            else:
                return visitor.visitChildren(self)


    class ColumnTypeExprSimpleContext(ColumnTypeExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnTypeExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnTypeExprSimple" ):
                return visitor.visitColumnTypeExprSimple(self)
            else:
                return visitor.visitChildren(self)


    class ColumnTypeExprComplexContext(ColumnTypeExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnTypeExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def columnTypeExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnTypeExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnTypeExprContext,i)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnTypeExprComplex" ):
                return visitor.visitColumnTypeExprComplex(self)
            else:
                return visitor.visitChildren(self)


    class ColumnTypeExprEnumContext(ColumnTypeExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnTypeExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def enumValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.EnumValueContext)
            else:
                return self.getTypedRuleContext(HogQLParser.EnumValueContext,i)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnTypeExprEnum" ):
                return visitor.visitColumnTypeExprEnum(self)
            else:
                return visitor.visitChildren(self)



    def columnTypeExpr(self):

        localctx = HogQLParser.ColumnTypeExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_columnTypeExpr)
        self._la = 0 # Token type
        try:
            self.state = 508
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
            if la_ == 1:
                localctx = HogQLParser.ColumnTypeExprSimpleContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 461
                self.identifier()
                pass

            elif la_ == 2:
                localctx = HogQLParser.ColumnTypeExprNestedContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 462
                self.identifier()
                self.state = 463
                self.match(HogQLParser.LPAREN)
                self.state = 464
                self.identifier()
                self.state = 465
                self.columnTypeExpr()
                self.state = 472
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==205:
                    self.state = 466
                    self.match(HogQLParser.COMMA)
                    self.state = 467
                    self.identifier()
                    self.state = 468
                    self.columnTypeExpr()
                    self.state = 474
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 475
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 3:
                localctx = HogQLParser.ColumnTypeExprEnumContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 477
                self.identifier()
                self.state = 478
                self.match(HogQLParser.LPAREN)
                self.state = 479
                self.enumValue()
                self.state = 484
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==205:
                    self.state = 480
                    self.match(HogQLParser.COMMA)
                    self.state = 481
                    self.enumValue()
                    self.state = 486
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 487
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 4:
                localctx = HogQLParser.ColumnTypeExprComplexContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 489
                self.identifier()
                self.state = 490
                self.match(HogQLParser.LPAREN)
                self.state = 491
                self.columnTypeExpr()
                self.state = 496
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==205:
                    self.state = 492
                    self.match(HogQLParser.COMMA)
                    self.state = 493
                    self.columnTypeExpr()
                    self.state = 498
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 499
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 5:
                localctx = HogQLParser.ColumnTypeExprParamContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 501
                self.identifier()
                self.state = 502
                self.match(HogQLParser.LPAREN)
                self.state = 504
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -4) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -5) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & 578896255) != 0):
                    self.state = 503
                    self.columnExprList()


                self.state = 506
                self.match(HogQLParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnExprListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnsExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnsExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnsExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_columnExprList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprList" ):
                return visitor.visitColumnExprList(self)
            else:
                return visitor.visitChildren(self)




    def columnExprList(self):

        localctx = HogQLParser.ColumnExprListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_columnExprList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 510
            self.columnsExpr()
            self.state = 515
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,65,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 511
                    self.match(HogQLParser.COMMA)
                    self.state = 512
                    self.columnsExpr() 
                self.state = 517
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,65,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnsExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return HogQLParser.RULE_columnsExpr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ColumnsExprColumnContext(ColumnsExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnsExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnsExprColumn" ):
                return visitor.visitColumnsExprColumn(self)
            else:
                return visitor.visitChildren(self)


    class ColumnsExprAsteriskContext(ColumnsExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnsExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ASTERISK(self):
            return self.getToken(HogQLParser.ASTERISK, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(HogQLParser.TableIdentifierContext,0)

        def DOT(self):
            return self.getToken(HogQLParser.DOT, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnsExprAsterisk" ):
                return visitor.visitColumnsExprAsterisk(self)
            else:
                return visitor.visitChildren(self)


    class ColumnsExprSubqueryContext(ColumnsExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnsExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def selectUnionStmt(self):
            return self.getTypedRuleContext(HogQLParser.SelectUnionStmtContext,0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnsExprSubquery" ):
                return visitor.visitColumnsExprSubquery(self)
            else:
                return visitor.visitChildren(self)



    def columnsExpr(self):

        localctx = HogQLParser.ColumnsExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_columnsExpr)
        self._la = 0 # Token type
        try:
            self.state = 529
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,67,self._ctx)
            if la_ == 1:
                localctx = HogQLParser.ColumnsExprAsteriskContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 521
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 2)) & ~0x3f) == 0 and ((1 << (_la - 2)) & -1) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & -633318697631745) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & 6917529027641081855) != 0):
                    self.state = 518
                    self.tableIdentifier()
                    self.state = 519
                    self.match(HogQLParser.DOT)


                self.state = 523
                self.match(HogQLParser.ASTERISK)
                pass

            elif la_ == 2:
                localctx = HogQLParser.ColumnsExprSubqueryContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 524
                self.match(HogQLParser.LPAREN)
                self.state = 525
                self.selectUnionStmt()
                self.state = 526
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 3:
                localctx = HogQLParser.ColumnsExprColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 528
                self.columnExpr(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return HogQLParser.RULE_columnExpr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class ColumnExprTernaryOpContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def QUERY(self):
            return self.getToken(HogQLParser.QUERY, 0)
        def COLON(self):
            return self.getToken(HogQLParser.COLON, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprTernaryOp" ):
                return visitor.visitColumnExprTernaryOp(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprAliasContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def alias(self):
            return self.getTypedRuleContext(HogQLParser.AliasContext,0)

        def AS(self):
            return self.getToken(HogQLParser.AS, 0)
        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)

        def STRING_LITERAL(self):
            return self.getToken(HogQLParser.STRING_LITERAL, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprAlias" ):
                return visitor.visitColumnExprAlias(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprExtractContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXTRACT(self):
            return self.getToken(HogQLParser.EXTRACT, 0)
        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def interval(self):
            return self.getTypedRuleContext(HogQLParser.IntervalContext,0)

        def FROM(self):
            return self.getToken(HogQLParser.FROM, 0)
        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprExtract" ):
                return visitor.visitColumnExprExtract(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprNegateContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DASH(self):
            return self.getToken(HogQLParser.DASH, 0)
        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprNegate" ):
                return visitor.visitColumnExprNegate(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprSubqueryContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def selectUnionStmt(self):
            return self.getTypedRuleContext(HogQLParser.SelectUnionStmtContext,0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprSubquery" ):
                return visitor.visitColumnExprSubquery(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprLiteralContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def literal(self):
            return self.getTypedRuleContext(HogQLParser.LiteralContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprLiteral" ):
                return visitor.visitColumnExprLiteral(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprArrayContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LBRACKET(self):
            return self.getToken(HogQLParser.LBRACKET, 0)
        def RBRACKET(self):
            return self.getToken(HogQLParser.RBRACKET, 0)
        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprArray" ):
                return visitor.visitColumnExprArray(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprSubstringContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SUBSTRING(self):
            return self.getToken(HogQLParser.SUBSTRING, 0)
        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def FROM(self):
            return self.getToken(HogQLParser.FROM, 0)
        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)
        def FOR(self):
            return self.getToken(HogQLParser.FOR, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprSubstring" ):
                return visitor.visitColumnExprSubstring(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprCastContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CAST(self):
            return self.getToken(HogQLParser.CAST, 0)
        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def AS(self):
            return self.getToken(HogQLParser.AS, 0)
        def columnTypeExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnTypeExprContext,0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprCast" ):
                return visitor.visitColumnExprCast(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprOrContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def OR(self):
            return self.getToken(HogQLParser.OR, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprOr" ):
                return visitor.visitColumnExprOr(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprPrecedence1Context(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.left = None # ColumnExprContext
            self.operator = None # Token
            self.right = None # ColumnExprContext
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def ASTERISK(self):
            return self.getToken(HogQLParser.ASTERISK, 0)
        def SLASH(self):
            return self.getToken(HogQLParser.SLASH, 0)
        def PERCENT(self):
            return self.getToken(HogQLParser.PERCENT, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprPrecedence1" ):
                return visitor.visitColumnExprPrecedence1(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprPrecedence2Context(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.left = None # ColumnExprContext
            self.operator = None # Token
            self.right = None # ColumnExprContext
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def PLUS(self):
            return self.getToken(HogQLParser.PLUS, 0)
        def DASH(self):
            return self.getToken(HogQLParser.DASH, 0)
        def CONCAT(self):
            return self.getToken(HogQLParser.CONCAT, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprPrecedence2" ):
                return visitor.visitColumnExprPrecedence2(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprPrecedence3Context(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.left = None # ColumnExprContext
            self.operator = None # Token
            self.right = None # ColumnExprContext
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def IN(self):
            return self.getToken(HogQLParser.IN, 0)
        def EQ_DOUBLE(self):
            return self.getToken(HogQLParser.EQ_DOUBLE, 0)
        def EQ_SINGLE(self):
            return self.getToken(HogQLParser.EQ_SINGLE, 0)
        def NOT_EQ(self):
            return self.getToken(HogQLParser.NOT_EQ, 0)
        def LE(self):
            return self.getToken(HogQLParser.LE, 0)
        def GE(self):
            return self.getToken(HogQLParser.GE, 0)
        def LT(self):
            return self.getToken(HogQLParser.LT, 0)
        def GT(self):
            return self.getToken(HogQLParser.GT, 0)
        def LIKE(self):
            return self.getToken(HogQLParser.LIKE, 0)
        def ILIKE(self):
            return self.getToken(HogQLParser.ILIKE, 0)
        def NOT(self):
            return self.getToken(HogQLParser.NOT, 0)
        def GLOBAL(self):
            return self.getToken(HogQLParser.GLOBAL, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprPrecedence3" ):
                return visitor.visitColumnExprPrecedence3(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprIntervalContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INTERVAL(self):
            return self.getToken(HogQLParser.INTERVAL, 0)
        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def interval(self):
            return self.getTypedRuleContext(HogQLParser.IntervalContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprInterval" ):
                return visitor.visitColumnExprInterval(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprIsNullContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def IS(self):
            return self.getToken(HogQLParser.IS, 0)
        def NULL_SQL(self):
            return self.getToken(HogQLParser.NULL_SQL, 0)
        def NOT(self):
            return self.getToken(HogQLParser.NOT, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprIsNull" ):
                return visitor.visitColumnExprIsNull(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprWinFunctionTargetContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(HogQLParser.IdentifierContext,i)

        def OVER(self):
            return self.getToken(HogQLParser.OVER, 0)
        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)
        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprWinFunctionTarget" ):
                return visitor.visitColumnExprWinFunctionTarget(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprTrimContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TRIM(self):
            return self.getToken(HogQLParser.TRIM, 0)
        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def STRING_LITERAL(self):
            return self.getToken(HogQLParser.STRING_LITERAL, 0)
        def FROM(self):
            return self.getToken(HogQLParser.FROM, 0)
        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)
        def BOTH(self):
            return self.getToken(HogQLParser.BOTH, 0)
        def LEADING(self):
            return self.getToken(HogQLParser.LEADING, 0)
        def TRAILING(self):
            return self.getToken(HogQLParser.TRAILING, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprTrim" ):
                return visitor.visitColumnExprTrim(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprTupleContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprTuple" ):
                return visitor.visitColumnExprTuple(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprArrayAccessContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def LBRACKET(self):
            return self.getToken(HogQLParser.LBRACKET, 0)
        def RBRACKET(self):
            return self.getToken(HogQLParser.RBRACKET, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprArrayAccess" ):
                return visitor.visitColumnExprArrayAccess(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprBetweenContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def BETWEEN(self):
            return self.getToken(HogQLParser.BETWEEN, 0)
        def AND(self):
            return self.getToken(HogQLParser.AND, 0)
        def NOT(self):
            return self.getToken(HogQLParser.NOT, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprBetween" ):
                return visitor.visitColumnExprBetween(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprParensContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprParens" ):
                return visitor.visitColumnExprParens(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprTimestampContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TIMESTAMP(self):
            return self.getToken(HogQLParser.TIMESTAMP, 0)
        def STRING_LITERAL(self):
            return self.getToken(HogQLParser.STRING_LITERAL, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprTimestamp" ):
                return visitor.visitColumnExprTimestamp(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprAndContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def AND(self):
            return self.getToken(HogQLParser.AND, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprAnd" ):
                return visitor.visitColumnExprAnd(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprTupleAccessContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def DOT(self):
            return self.getToken(HogQLParser.DOT, 0)
        def DECIMAL_LITERAL(self):
            return self.getToken(HogQLParser.DECIMAL_LITERAL, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprTupleAccess" ):
                return visitor.visitColumnExprTupleAccess(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprCaseContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.caseExpr = None # ColumnExprContext
            self.whenExpr = None # ColumnExprContext
            self.thenExpr = None # ColumnExprContext
            self.elseExpr = None # ColumnExprContext
            self.copyFrom(ctx)

        def CASE(self):
            return self.getToken(HogQLParser.CASE, 0)
        def END(self):
            return self.getToken(HogQLParser.END, 0)
        def WHEN(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.WHEN)
            else:
                return self.getToken(HogQLParser.WHEN, i)
        def THEN(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.THEN)
            else:
                return self.getToken(HogQLParser.THEN, i)
        def ELSE(self):
            return self.getToken(HogQLParser.ELSE, 0)
        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprCase" ):
                return visitor.visitColumnExprCase(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprDateContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DATE(self):
            return self.getToken(HogQLParser.DATE, 0)
        def STRING_LITERAL(self):
            return self.getToken(HogQLParser.STRING_LITERAL, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprDate" ):
                return visitor.visitColumnExprDate(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprNotContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NOT(self):
            return self.getToken(HogQLParser.NOT, 0)
        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprNot" ):
                return visitor.visitColumnExprNot(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprWinFunctionContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)

        def OVER(self):
            return self.getToken(HogQLParser.OVER, 0)
        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.LPAREN)
            else:
                return self.getToken(HogQLParser.LPAREN, i)
        def windowExpr(self):
            return self.getTypedRuleContext(HogQLParser.WindowExprContext,0)

        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.RPAREN)
            else:
                return self.getToken(HogQLParser.RPAREN, i)
        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprWinFunction" ):
                return visitor.visitColumnExprWinFunction(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprIdentifierContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnIdentifier(self):
            return self.getTypedRuleContext(HogQLParser.ColumnIdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprIdentifier" ):
                return visitor.visitColumnExprIdentifier(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprFunctionContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)

        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.LPAREN)
            else:
                return self.getToken(HogQLParser.LPAREN, i)
        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.RPAREN)
            else:
                return self.getToken(HogQLParser.RPAREN, i)
        def DISTINCT(self):
            return self.getToken(HogQLParser.DISTINCT, 0)
        def columnArgList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnArgListContext,0)

        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprFunction" ):
                return visitor.visitColumnExprFunction(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprAsteriskContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ASTERISK(self):
            return self.getToken(HogQLParser.ASTERISK, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(HogQLParser.TableIdentifierContext,0)

        def DOT(self):
            return self.getToken(HogQLParser.DOT, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprAsterisk" ):
                return visitor.visitColumnExprAsterisk(self)
            else:
                return visitor.visitChildren(self)



    def columnExpr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = HogQLParser.ColumnExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 76
        self.enterRecursionRule(localctx, 76, self.RULE_columnExpr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 660
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
            if la_ == 1:
                localctx = HogQLParser.ColumnExprCaseContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 532
                self.match(HogQLParser.CASE)
                self.state = 534
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
                if la_ == 1:
                    self.state = 533
                    localctx.caseExpr = self.columnExpr(0)


                self.state = 541 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 536
                    self.match(HogQLParser.WHEN)
                    self.state = 537
                    localctx.whenExpr = self.columnExpr(0)
                    self.state = 538
                    self.match(HogQLParser.THEN)
                    self.state = 539
                    localctx.thenExpr = self.columnExpr(0)
                    self.state = 543 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==185):
                        break

                self.state = 547
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==51:
                    self.state = 545
                    self.match(HogQLParser.ELSE)
                    self.state = 546
                    localctx.elseExpr = self.columnExpr(0)


                self.state = 549
                self.match(HogQLParser.END)
                pass

            elif la_ == 2:
                localctx = HogQLParser.ColumnExprCastContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 551
                self.match(HogQLParser.CAST)
                self.state = 552
                self.match(HogQLParser.LPAREN)
                self.state = 553
                self.columnExpr(0)
                self.state = 554
                self.match(HogQLParser.AS)
                self.state = 555
                self.columnTypeExpr()
                self.state = 556
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 3:
                localctx = HogQLParser.ColumnExprDateContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 558
                self.match(HogQLParser.DATE)
                self.state = 559
                self.match(HogQLParser.STRING_LITERAL)
                pass

            elif la_ == 4:
                localctx = HogQLParser.ColumnExprExtractContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 560
                self.match(HogQLParser.EXTRACT)
                self.state = 561
                self.match(HogQLParser.LPAREN)
                self.state = 562
                self.interval()
                self.state = 563
                self.match(HogQLParser.FROM)
                self.state = 564
                self.columnExpr(0)
                self.state = 565
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 5:
                localctx = HogQLParser.ColumnExprIntervalContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 567
                self.match(HogQLParser.INTERVAL)
                self.state = 568
                self.columnExpr(0)
                self.state = 569
                self.interval()
                pass

            elif la_ == 6:
                localctx = HogQLParser.ColumnExprSubstringContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 571
                self.match(HogQLParser.SUBSTRING)
                self.state = 572
                self.match(HogQLParser.LPAREN)
                self.state = 573
                self.columnExpr(0)
                self.state = 574
                self.match(HogQLParser.FROM)
                self.state = 575
                self.columnExpr(0)
                self.state = 578
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==64:
                    self.state = 576
                    self.match(HogQLParser.FOR)
                    self.state = 577
                    self.columnExpr(0)


                self.state = 580
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 7:
                localctx = HogQLParser.ColumnExprTimestampContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 582
                self.match(HogQLParser.TIMESTAMP)
                self.state = 583
                self.match(HogQLParser.STRING_LITERAL)
                pass

            elif la_ == 8:
                localctx = HogQLParser.ColumnExprTrimContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 584
                self.match(HogQLParser.TRIM)
                self.state = 585
                self.match(HogQLParser.LPAREN)
                self.state = 586
                _la = self._input.LA(1)
                if not(_la==17 or _la==94 or _la==169):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 587
                self.match(HogQLParser.STRING_LITERAL)
                self.state = 588
                self.match(HogQLParser.FROM)
                self.state = 589
                self.columnExpr(0)
                self.state = 590
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 9:
                localctx = HogQLParser.ColumnExprWinFunctionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 592
                self.identifier()

                self.state = 593
                self.match(HogQLParser.LPAREN)
                self.state = 595
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -4) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -5) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & 578896255) != 0):
                    self.state = 594
                    self.columnExprList()


                self.state = 597
                self.match(HogQLParser.RPAREN)
                self.state = 599
                self.match(HogQLParser.OVER)
                self.state = 600
                self.match(HogQLParser.LPAREN)
                self.state = 601
                self.windowExpr()
                self.state = 602
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 10:
                localctx = HogQLParser.ColumnExprWinFunctionTargetContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 604
                self.identifier()

                self.state = 605
                self.match(HogQLParser.LPAREN)
                self.state = 607
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -4) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -5) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & 578896255) != 0):
                    self.state = 606
                    self.columnExprList()


                self.state = 609
                self.match(HogQLParser.RPAREN)
                self.state = 611
                self.match(HogQLParser.OVER)
                self.state = 612
                self.identifier()
                pass

            elif la_ == 11:
                localctx = HogQLParser.ColumnExprFunctionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 614
                self.identifier()
                self.state = 620
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
                if la_ == 1:
                    self.state = 615
                    self.match(HogQLParser.LPAREN)
                    self.state = 617
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & -4) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -5) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & 578896255) != 0):
                        self.state = 616
                        self.columnExprList()


                    self.state = 619
                    self.match(HogQLParser.RPAREN)


                self.state = 622
                self.match(HogQLParser.LPAREN)
                self.state = 624
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
                if la_ == 1:
                    self.state = 623
                    self.match(HogQLParser.DISTINCT)


                self.state = 627
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -4) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -5) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & 578896255) != 0):
                    self.state = 626
                    self.columnArgList()


                self.state = 629
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 12:
                localctx = HogQLParser.ColumnExprLiteralContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 631
                self.literal()
                pass

            elif la_ == 13:
                localctx = HogQLParser.ColumnExprNegateContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 632
                self.match(HogQLParser.DASH)
                self.state = 633
                self.columnExpr(17)
                pass

            elif la_ == 14:
                localctx = HogQLParser.ColumnExprNotContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 634
                self.match(HogQLParser.NOT)
                self.state = 635
                self.columnExpr(12)
                pass

            elif la_ == 15:
                localctx = HogQLParser.ColumnExprAsteriskContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 639
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 2)) & ~0x3f) == 0 and ((1 << (_la - 2)) & -1) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & -633318697631745) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & 6917529027641081855) != 0):
                    self.state = 636
                    self.tableIdentifier()
                    self.state = 637
                    self.match(HogQLParser.DOT)


                self.state = 641
                self.match(HogQLParser.ASTERISK)
                pass

            elif la_ == 16:
                localctx = HogQLParser.ColumnExprSubqueryContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 642
                self.match(HogQLParser.LPAREN)
                self.state = 643
                self.selectUnionStmt()
                self.state = 644
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 17:
                localctx = HogQLParser.ColumnExprParensContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 646
                self.match(HogQLParser.LPAREN)
                self.state = 647
                self.columnExpr(0)
                self.state = 648
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 18:
                localctx = HogQLParser.ColumnExprTupleContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 650
                self.match(HogQLParser.LPAREN)
                self.state = 651
                self.columnExprList()
                self.state = 652
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 19:
                localctx = HogQLParser.ColumnExprArrayContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 654
                self.match(HogQLParser.LBRACKET)
                self.state = 656
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -4) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -5) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & 578896255) != 0):
                    self.state = 655
                    self.columnExprList()


                self.state = 658
                self.match(HogQLParser.RBRACKET)
                pass

            elif la_ == 20:
                localctx = HogQLParser.ColumnExprIdentifierContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 659
                self.columnIdentifier()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 743
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,91,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 741
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
                    if la_ == 1:
                        localctx = HogQLParser.ColumnExprPrecedence1Context(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 662
                        if not self.precpred(self._ctx, 16):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 16)")
                        self.state = 666
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [201]:
                            self.state = 663
                            localctx.operator = self.match(HogQLParser.ASTERISK)
                            pass
                        elif token in [230]:
                            self.state = 664
                            localctx.operator = self.match(HogQLParser.SLASH)
                            pass
                        elif token in [221]:
                            self.state = 665
                            localctx.operator = self.match(HogQLParser.PERCENT)
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 668
                        localctx.right = self.columnExpr(17)
                        pass

                    elif la_ == 2:
                        localctx = HogQLParser.ColumnExprPrecedence2Context(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 669
                        if not self.precpred(self._ctx, 15):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 15)")
                        self.state = 673
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [222]:
                            self.state = 670
                            localctx.operator = self.match(HogQLParser.PLUS)
                            pass
                        elif token in [207]:
                            self.state = 671
                            localctx.operator = self.match(HogQLParser.DASH)
                            pass
                        elif token in [206]:
                            self.state = 672
                            localctx.operator = self.match(HogQLParser.CONCAT)
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 675
                        localctx.right = self.columnExpr(16)
                        pass

                    elif la_ == 3:
                        localctx = HogQLParser.ColumnExprPrecedence3Context(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 676
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 695
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
                        if la_ == 1:
                            self.state = 677
                            localctx.operator = self.match(HogQLParser.EQ_DOUBLE)
                            pass

                        elif la_ == 2:
                            self.state = 678
                            localctx.operator = self.match(HogQLParser.EQ_SINGLE)
                            pass

                        elif la_ == 3:
                            self.state = 679
                            localctx.operator = self.match(HogQLParser.NOT_EQ)
                            pass

                        elif la_ == 4:
                            self.state = 680
                            localctx.operator = self.match(HogQLParser.LE)
                            pass

                        elif la_ == 5:
                            self.state = 681
                            localctx.operator = self.match(HogQLParser.GE)
                            pass

                        elif la_ == 6:
                            self.state = 682
                            localctx.operator = self.match(HogQLParser.LT)
                            pass

                        elif la_ == 7:
                            self.state = 683
                            localctx.operator = self.match(HogQLParser.GT)
                            pass

                        elif la_ == 8:
                            self.state = 685
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==70:
                                self.state = 684
                                localctx.operator = self.match(HogQLParser.GLOBAL)


                            self.state = 688
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==114:
                                self.state = 687
                                self.match(HogQLParser.NOT)


                            self.state = 690
                            self.match(HogQLParser.IN)
                            pass

                        elif la_ == 9:
                            self.state = 692
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==114:
                                self.state = 691
                                localctx.operator = self.match(HogQLParser.NOT)


                            self.state = 694
                            _la = self._input.LA(1)
                            if not(_la==78 or _la==97):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            pass


                        self.state = 697
                        localctx.right = self.columnExpr(15)
                        pass

                    elif la_ == 4:
                        localctx = HogQLParser.ColumnExprAndContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 698
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 699
                        self.match(HogQLParser.AND)
                        self.state = 700
                        self.columnExpr(12)
                        pass

                    elif la_ == 5:
                        localctx = HogQLParser.ColumnExprOrContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 701
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 702
                        self.match(HogQLParser.OR)
                        self.state = 703
                        self.columnExpr(11)
                        pass

                    elif la_ == 6:
                        localctx = HogQLParser.ColumnExprBetweenContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 704
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 706
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==114:
                            self.state = 705
                            self.match(HogQLParser.NOT)


                        self.state = 708
                        self.match(HogQLParser.BETWEEN)
                        self.state = 709
                        self.columnExpr(0)
                        self.state = 710
                        self.match(HogQLParser.AND)
                        self.state = 711
                        self.columnExpr(10)
                        pass

                    elif la_ == 7:
                        localctx = HogQLParser.ColumnExprTernaryOpContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 713
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 714
                        self.match(HogQLParser.QUERY)
                        self.state = 715
                        self.columnExpr(0)
                        self.state = 716
                        self.match(HogQLParser.COLON)
                        self.state = 717
                        self.columnExpr(8)
                        pass

                    elif la_ == 8:
                        localctx = HogQLParser.ColumnExprArrayAccessContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 719
                        if not self.precpred(self._ctx, 19):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 19)")
                        self.state = 720
                        self.match(HogQLParser.LBRACKET)
                        self.state = 721
                        self.columnExpr(0)
                        self.state = 722
                        self.match(HogQLParser.RBRACKET)
                        pass

                    elif la_ == 9:
                        localctx = HogQLParser.ColumnExprTupleAccessContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 724
                        if not self.precpred(self._ctx, 18):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 18)")
                        self.state = 725
                        self.match(HogQLParser.DOT)
                        self.state = 726
                        self.match(HogQLParser.DECIMAL_LITERAL)
                        pass

                    elif la_ == 10:
                        localctx = HogQLParser.ColumnExprIsNullContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 727
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 728
                        self.match(HogQLParser.IS)
                        self.state = 730
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==114:
                            self.state = 729
                            self.match(HogQLParser.NOT)


                        self.state = 732
                        self.match(HogQLParser.NULL_SQL)
                        pass

                    elif la_ == 11:
                        localctx = HogQLParser.ColumnExprAliasContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 733
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 739
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,89,self._ctx)
                        if la_ == 1:
                            self.state = 734
                            self.alias()
                            pass

                        elif la_ == 2:
                            self.state = 735
                            self.match(HogQLParser.AS)
                            self.state = 736
                            self.identifier()
                            pass

                        elif la_ == 3:
                            self.state = 737
                            self.match(HogQLParser.AS)
                            self.state = 738
                            self.match(HogQLParser.STRING_LITERAL)
                            pass


                        pass

             
                self.state = 745
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,91,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ColumnArgListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnArgExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnArgExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnArgExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_columnArgList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnArgList" ):
                return visitor.visitColumnArgList(self)
            else:
                return visitor.visitChildren(self)




    def columnArgList(self):

        localctx = HogQLParser.ColumnArgListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_columnArgList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 746
            self.columnArgExpr()
            self.state = 751
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==205:
                self.state = 747
                self.match(HogQLParser.COMMA)
                self.state = 748
                self.columnArgExpr()
                self.state = 753
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnArgExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnLambdaExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnLambdaExprContext,0)


        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_columnArgExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnArgExpr" ):
                return visitor.visitColumnArgExpr(self)
            else:
                return visitor.visitChildren(self)




    def columnArgExpr(self):

        localctx = HogQLParser.ColumnArgExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_columnArgExpr)
        try:
            self.state = 756
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 754
                self.columnLambdaExpr()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 755
                self.columnExpr(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnLambdaExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ARROW(self):
            return self.getToken(HogQLParser.ARROW, 0)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(HogQLParser.IdentifierContext,i)


        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_columnLambdaExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnLambdaExpr" ):
                return visitor.visitColumnLambdaExpr(self)
            else:
                return visitor.visitChildren(self)




    def columnLambdaExpr(self):

        localctx = HogQLParser.ColumnLambdaExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_columnLambdaExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 777
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [218]:
                self.state = 758
                self.match(HogQLParser.LPAREN)
                self.state = 759
                self.identifier()
                self.state = 764
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==205:
                    self.state = 760
                    self.match(HogQLParser.COMMA)
                    self.state = 761
                    self.identifier()
                    self.state = 766
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 767
                self.match(HogQLParser.RPAREN)
                pass
            elif token in [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193]:
                self.state = 769
                self.identifier()
                self.state = 774
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==205:
                    self.state = 770
                    self.match(HogQLParser.COMMA)
                    self.state = 771
                    self.identifier()
                    self.state = 776
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

            self.state = 779
            self.match(HogQLParser.ARROW)
            self.state = 780
            self.columnExpr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WithExprListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def withExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.WithExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.WithExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_withExprList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWithExprList" ):
                return visitor.visitWithExprList(self)
            else:
                return visitor.visitChildren(self)




    def withExprList(self):

        localctx = HogQLParser.WithExprListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_withExprList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 782
            self.withExpr()
            self.state = 787
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==205:
                self.state = 783
                self.match(HogQLParser.COMMA)
                self.state = 784
                self.withExpr()
                self.state = 789
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WithExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return HogQLParser.RULE_withExpr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class WithExprColumnContext(WithExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.WithExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def AS(self):
            return self.getToken(HogQLParser.AS, 0)
        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWithExprColumn" ):
                return visitor.visitWithExprColumn(self)
            else:
                return visitor.visitChildren(self)


    class WithExprSubqueryContext(WithExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.WithExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)

        def AS(self):
            return self.getToken(HogQLParser.AS, 0)
        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def selectUnionStmt(self):
            return self.getTypedRuleContext(HogQLParser.SelectUnionStmtContext,0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWithExprSubquery" ):
                return visitor.visitWithExprSubquery(self)
            else:
                return visitor.visitChildren(self)



    def withExpr(self):

        localctx = HogQLParser.WithExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_withExpr)
        try:
            self.state = 800
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,98,self._ctx)
            if la_ == 1:
                localctx = HogQLParser.WithExprSubqueryContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 790
                self.identifier()
                self.state = 791
                self.match(HogQLParser.AS)
                self.state = 792
                self.match(HogQLParser.LPAREN)
                self.state = 793
                self.selectUnionStmt()
                self.state = 794
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 2:
                localctx = HogQLParser.WithExprColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 796
                self.columnExpr(0)
                self.state = 797
                self.match(HogQLParser.AS)
                self.state = 798
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLACEHOLDER(self):
            return self.getToken(HogQLParser.PLACEHOLDER, 0)

        def nestedIdentifier(self):
            return self.getTypedRuleContext(HogQLParser.NestedIdentifierContext,0)


        def tableIdentifier(self):
            return self.getTypedRuleContext(HogQLParser.TableIdentifierContext,0)


        def DOT(self):
            return self.getToken(HogQLParser.DOT, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_columnIdentifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnIdentifier" ):
                return visitor.visitColumnIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def columnIdentifier(self):

        localctx = HogQLParser.ColumnIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_columnIdentifier)
        try:
            self.state = 809
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [199]:
                self.enterOuterAlt(localctx, 1)
                self.state = 802
                self.match(HogQLParser.PLACEHOLDER)
                pass
            elif token in [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193]:
                self.enterOuterAlt(localctx, 2)
                self.state = 806
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,99,self._ctx)
                if la_ == 1:
                    self.state = 803
                    self.tableIdentifier()
                    self.state = 804
                    self.match(HogQLParser.DOT)


                self.state = 808
                self.nestedIdentifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NestedIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(HogQLParser.IdentifierContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.DOT)
            else:
                return self.getToken(HogQLParser.DOT, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_nestedIdentifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNestedIdentifier" ):
                return visitor.visitNestedIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def nestedIdentifier(self):

        localctx = HogQLParser.NestedIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_nestedIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 811
            self.identifier()
            self.state = 816
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,101,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 812
                    self.match(HogQLParser.DOT)
                    self.state = 813
                    self.identifier() 
                self.state = 818
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,101,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return HogQLParser.RULE_tableExpr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class TableExprIdentifierContext(TableExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.TableExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tableIdentifier(self):
            return self.getTypedRuleContext(HogQLParser.TableIdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableExprIdentifier" ):
                return visitor.visitTableExprIdentifier(self)
            else:
                return visitor.visitChildren(self)


    class TableExprSubqueryContext(TableExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.TableExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def selectUnionStmt(self):
            return self.getTypedRuleContext(HogQLParser.SelectUnionStmtContext,0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableExprSubquery" ):
                return visitor.visitTableExprSubquery(self)
            else:
                return visitor.visitChildren(self)


    class TableExprAliasContext(TableExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.TableExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tableExpr(self):
            return self.getTypedRuleContext(HogQLParser.TableExprContext,0)

        def alias(self):
            return self.getTypedRuleContext(HogQLParser.AliasContext,0)

        def AS(self):
            return self.getToken(HogQLParser.AS, 0)
        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableExprAlias" ):
                return visitor.visitTableExprAlias(self)
            else:
                return visitor.visitChildren(self)


    class TableExprFunctionContext(TableExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.TableExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tableFunctionExpr(self):
            return self.getTypedRuleContext(HogQLParser.TableFunctionExprContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableExprFunction" ):
                return visitor.visitTableExprFunction(self)
            else:
                return visitor.visitChildren(self)



    def tableExpr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = HogQLParser.TableExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 92
        self.enterRecursionRule(localctx, 92, self.RULE_tableExpr, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 826
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,102,self._ctx)
            if la_ == 1:
                localctx = HogQLParser.TableExprIdentifierContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 820
                self.tableIdentifier()
                pass

            elif la_ == 2:
                localctx = HogQLParser.TableExprFunctionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 821
                self.tableFunctionExpr()
                pass

            elif la_ == 3:
                localctx = HogQLParser.TableExprSubqueryContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 822
                self.match(HogQLParser.LPAREN)
                self.state = 823
                self.selectUnionStmt()
                self.state = 824
                self.match(HogQLParser.RPAREN)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 836
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,104,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = HogQLParser.TableExprAliasContext(self, HogQLParser.TableExprContext(self, _parentctx, _parentState))
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_tableExpr)
                    self.state = 828
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 832
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [35, 61, 76, 90, 193]:
                        self.state = 829
                        self.alias()
                        pass
                    elif token in [10]:
                        self.state = 830
                        self.match(HogQLParser.AS)
                        self.state = 831
                        self.identifier()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 838
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,104,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class TableFunctionExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def tableArgList(self):
            return self.getTypedRuleContext(HogQLParser.TableArgListContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_tableFunctionExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableFunctionExpr" ):
                return visitor.visitTableFunctionExpr(self)
            else:
                return visitor.visitChildren(self)




    def tableFunctionExpr(self):

        localctx = HogQLParser.TableFunctionExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_tableFunctionExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 839
            self.identifier()
            self.state = 840
            self.match(HogQLParser.LPAREN)
            self.state = 842
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -4) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -5) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & 536952895) != 0):
                self.state = 841
                self.tableArgList()


            self.state = 844
            self.match(HogQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def databaseIdentifier(self):
            return self.getTypedRuleContext(HogQLParser.DatabaseIdentifierContext,0)


        def DOT(self):
            return self.getToken(HogQLParser.DOT, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_tableIdentifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableIdentifier" ):
                return visitor.visitTableIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def tableIdentifier(self):

        localctx = HogQLParser.TableIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_tableIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 849
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
            if la_ == 1:
                self.state = 846
                self.databaseIdentifier()
                self.state = 847
                self.match(HogQLParser.DOT)


            self.state = 851
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableArgListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableArgExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.TableArgExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.TableArgExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_tableArgList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableArgList" ):
                return visitor.visitTableArgList(self)
            else:
                return visitor.visitChildren(self)




    def tableArgList(self):

        localctx = HogQLParser.TableArgListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_tableArgList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 853
            self.tableArgExpr()
            self.state = 858
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==205:
                self.state = 854
                self.match(HogQLParser.COMMA)
                self.state = 855
                self.tableArgExpr()
                self.state = 860
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableArgExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nestedIdentifier(self):
            return self.getTypedRuleContext(HogQLParser.NestedIdentifierContext,0)


        def tableFunctionExpr(self):
            return self.getTypedRuleContext(HogQLParser.TableFunctionExprContext,0)


        def literal(self):
            return self.getTypedRuleContext(HogQLParser.LiteralContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_tableArgExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableArgExpr" ):
                return visitor.visitTableArgExpr(self)
            else:
                return visitor.visitChildren(self)




    def tableArgExpr(self):

        localctx = HogQLParser.TableArgExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_tableArgExpr)
        try:
            self.state = 864
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 861
                self.nestedIdentifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 862
                self.tableFunctionExpr()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 863
                self.literal()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DatabaseIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_databaseIdentifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDatabaseIdentifier" ):
                return visitor.visitDatabaseIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def databaseIdentifier(self):

        localctx = HogQLParser.DatabaseIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_databaseIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 866
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FloatingLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FLOATING_LITERAL(self):
            return self.getToken(HogQLParser.FLOATING_LITERAL, 0)

        def DOT(self):
            return self.getToken(HogQLParser.DOT, 0)

        def DECIMAL_LITERAL(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.DECIMAL_LITERAL)
            else:
                return self.getToken(HogQLParser.DECIMAL_LITERAL, i)

        def OCTAL_LITERAL(self):
            return self.getToken(HogQLParser.OCTAL_LITERAL, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_floatingLiteral

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFloatingLiteral" ):
                return visitor.visitFloatingLiteral(self)
            else:
                return visitor.visitChildren(self)




    def floatingLiteral(self):

        localctx = HogQLParser.FloatingLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_floatingLiteral)
        self._la = 0 # Token type
        try:
            self.state = 876
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [194]:
                self.enterOuterAlt(localctx, 1)
                self.state = 868
                self.match(HogQLParser.FLOATING_LITERAL)
                pass
            elif token in [209]:
                self.enterOuterAlt(localctx, 2)
                self.state = 869
                self.match(HogQLParser.DOT)
                self.state = 870
                _la = self._input.LA(1)
                if not(_la==195 or _la==196):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [196]:
                self.enterOuterAlt(localctx, 3)
                self.state = 871
                self.match(HogQLParser.DECIMAL_LITERAL)
                self.state = 872
                self.match(HogQLParser.DOT)
                self.state = 874
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,109,self._ctx)
                if la_ == 1:
                    self.state = 873
                    _la = self._input.LA(1)
                    if not(_la==195 or _la==196):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumberLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def floatingLiteral(self):
            return self.getTypedRuleContext(HogQLParser.FloatingLiteralContext,0)


        def OCTAL_LITERAL(self):
            return self.getToken(HogQLParser.OCTAL_LITERAL, 0)

        def DECIMAL_LITERAL(self):
            return self.getToken(HogQLParser.DECIMAL_LITERAL, 0)

        def HEXADECIMAL_LITERAL(self):
            return self.getToken(HogQLParser.HEXADECIMAL_LITERAL, 0)

        def INF(self):
            return self.getToken(HogQLParser.INF, 0)

        def NAN_SQL(self):
            return self.getToken(HogQLParser.NAN_SQL, 0)

        def PLUS(self):
            return self.getToken(HogQLParser.PLUS, 0)

        def DASH(self):
            return self.getToken(HogQLParser.DASH, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_numberLiteral

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumberLiteral" ):
                return visitor.visitNumberLiteral(self)
            else:
                return visitor.visitChildren(self)




    def numberLiteral(self):

        localctx = HogQLParser.NumberLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_numberLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 879
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==207 or _la==222:
                self.state = 878
                _la = self._input.LA(1)
                if not(_la==207 or _la==222):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 887
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,112,self._ctx)
            if la_ == 1:
                self.state = 881
                self.floatingLiteral()
                pass

            elif la_ == 2:
                self.state = 882
                self.match(HogQLParser.OCTAL_LITERAL)
                pass

            elif la_ == 3:
                self.state = 883
                self.match(HogQLParser.DECIMAL_LITERAL)
                pass

            elif la_ == 4:
                self.state = 884
                self.match(HogQLParser.HEXADECIMAL_LITERAL)
                pass

            elif la_ == 5:
                self.state = 885
                self.match(HogQLParser.INF)
                pass

            elif la_ == 6:
                self.state = 886
                self.match(HogQLParser.NAN_SQL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numberLiteral(self):
            return self.getTypedRuleContext(HogQLParser.NumberLiteralContext,0)


        def STRING_LITERAL(self):
            return self.getToken(HogQLParser.STRING_LITERAL, 0)

        def NULL_SQL(self):
            return self.getToken(HogQLParser.NULL_SQL, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_literal

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteral" ):
                return visitor.visitLiteral(self)
            else:
                return visitor.visitChildren(self)




    def literal(self):

        localctx = HogQLParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_literal)
        try:
            self.state = 892
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [81, 112, 194, 195, 196, 197, 207, 209, 222]:
                self.enterOuterAlt(localctx, 1)
                self.state = 889
                self.numberLiteral()
                pass
            elif token in [198]:
                self.enterOuterAlt(localctx, 2)
                self.state = 890
                self.match(HogQLParser.STRING_LITERAL)
                pass
            elif token in [115]:
                self.enterOuterAlt(localctx, 3)
                self.state = 891
                self.match(HogQLParser.NULL_SQL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SECOND(self):
            return self.getToken(HogQLParser.SECOND, 0)

        def MINUTE(self):
            return self.getToken(HogQLParser.MINUTE, 0)

        def HOUR(self):
            return self.getToken(HogQLParser.HOUR, 0)

        def DAY(self):
            return self.getToken(HogQLParser.DAY, 0)

        def WEEK(self):
            return self.getToken(HogQLParser.WEEK, 0)

        def MONTH(self):
            return self.getToken(HogQLParser.MONTH, 0)

        def QUARTER(self):
            return self.getToken(HogQLParser.QUARTER, 0)

        def YEAR(self):
            return self.getToken(HogQLParser.YEAR, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_interval

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterval" ):
                return visitor.visitInterval(self)
            else:
                return visitor.visitChildren(self)




    def interval(self):

        localctx = HogQLParser.IntervalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_interval)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 894
            _la = self._input.LA(1)
            if not(_la==36 or ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & 72057615512764417) != 0) or ((((_la - 144)) & ~0x3f) == 0 and ((1 << (_la - 144)) & 36283883716609) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AFTER(self):
            return self.getToken(HogQLParser.AFTER, 0)

        def ALIAS(self):
            return self.getToken(HogQLParser.ALIAS, 0)

        def ALL(self):
            return self.getToken(HogQLParser.ALL, 0)

        def ALTER(self):
            return self.getToken(HogQLParser.ALTER, 0)

        def AND(self):
            return self.getToken(HogQLParser.AND, 0)

        def ANTI(self):
            return self.getToken(HogQLParser.ANTI, 0)

        def ANY(self):
            return self.getToken(HogQLParser.ANY, 0)

        def ARRAY(self):
            return self.getToken(HogQLParser.ARRAY, 0)

        def AS(self):
            return self.getToken(HogQLParser.AS, 0)

        def ASCENDING(self):
            return self.getToken(HogQLParser.ASCENDING, 0)

        def ASOF(self):
            return self.getToken(HogQLParser.ASOF, 0)

        def AST(self):
            return self.getToken(HogQLParser.AST, 0)

        def ASYNC(self):
            return self.getToken(HogQLParser.ASYNC, 0)

        def ATTACH(self):
            return self.getToken(HogQLParser.ATTACH, 0)

        def BETWEEN(self):
            return self.getToken(HogQLParser.BETWEEN, 0)

        def BOTH(self):
            return self.getToken(HogQLParser.BOTH, 0)

        def BY(self):
            return self.getToken(HogQLParser.BY, 0)

        def CASE(self):
            return self.getToken(HogQLParser.CASE, 0)

        def CAST(self):
            return self.getToken(HogQLParser.CAST, 0)

        def CHECK(self):
            return self.getToken(HogQLParser.CHECK, 0)

        def CLEAR(self):
            return self.getToken(HogQLParser.CLEAR, 0)

        def CLUSTER(self):
            return self.getToken(HogQLParser.CLUSTER, 0)

        def CODEC(self):
            return self.getToken(HogQLParser.CODEC, 0)

        def COLLATE(self):
            return self.getToken(HogQLParser.COLLATE, 0)

        def COLUMN(self):
            return self.getToken(HogQLParser.COLUMN, 0)

        def COMMENT(self):
            return self.getToken(HogQLParser.COMMENT, 0)

        def CONSTRAINT(self):
            return self.getToken(HogQLParser.CONSTRAINT, 0)

        def CREATE(self):
            return self.getToken(HogQLParser.CREATE, 0)

        def CROSS(self):
            return self.getToken(HogQLParser.CROSS, 0)

        def CUBE(self):
            return self.getToken(HogQLParser.CUBE, 0)

        def CURRENT(self):
            return self.getToken(HogQLParser.CURRENT, 0)

        def DATABASE(self):
            return self.getToken(HogQLParser.DATABASE, 0)

        def DATABASES(self):
            return self.getToken(HogQLParser.DATABASES, 0)

        def DATE(self):
            return self.getToken(HogQLParser.DATE, 0)

        def DEDUPLICATE(self):
            return self.getToken(HogQLParser.DEDUPLICATE, 0)

        def DEFAULT(self):
            return self.getToken(HogQLParser.DEFAULT, 0)

        def DELAY(self):
            return self.getToken(HogQLParser.DELAY, 0)

        def DELETE(self):
            return self.getToken(HogQLParser.DELETE, 0)

        def DESCRIBE(self):
            return self.getToken(HogQLParser.DESCRIBE, 0)

        def DESC(self):
            return self.getToken(HogQLParser.DESC, 0)

        def DESCENDING(self):
            return self.getToken(HogQLParser.DESCENDING, 0)

        def DETACH(self):
            return self.getToken(HogQLParser.DETACH, 0)

        def DICTIONARIES(self):
            return self.getToken(HogQLParser.DICTIONARIES, 0)

        def DICTIONARY(self):
            return self.getToken(HogQLParser.DICTIONARY, 0)

        def DISK(self):
            return self.getToken(HogQLParser.DISK, 0)

        def DISTINCT(self):
            return self.getToken(HogQLParser.DISTINCT, 0)

        def DISTRIBUTED(self):
            return self.getToken(HogQLParser.DISTRIBUTED, 0)

        def DROP(self):
            return self.getToken(HogQLParser.DROP, 0)

        def ELSE(self):
            return self.getToken(HogQLParser.ELSE, 0)

        def END(self):
            return self.getToken(HogQLParser.END, 0)

        def ENGINE(self):
            return self.getToken(HogQLParser.ENGINE, 0)

        def EVENTS(self):
            return self.getToken(HogQLParser.EVENTS, 0)

        def EXISTS(self):
            return self.getToken(HogQLParser.EXISTS, 0)

        def EXPLAIN(self):
            return self.getToken(HogQLParser.EXPLAIN, 0)

        def EXPRESSION(self):
            return self.getToken(HogQLParser.EXPRESSION, 0)

        def EXTRACT(self):
            return self.getToken(HogQLParser.EXTRACT, 0)

        def FETCHES(self):
            return self.getToken(HogQLParser.FETCHES, 0)

        def FINAL(self):
            return self.getToken(HogQLParser.FINAL, 0)

        def FIRST(self):
            return self.getToken(HogQLParser.FIRST, 0)

        def FLUSH(self):
            return self.getToken(HogQLParser.FLUSH, 0)

        def FOR(self):
            return self.getToken(HogQLParser.FOR, 0)

        def FOLLOWING(self):
            return self.getToken(HogQLParser.FOLLOWING, 0)

        def FORMAT(self):
            return self.getToken(HogQLParser.FORMAT, 0)

        def FREEZE(self):
            return self.getToken(HogQLParser.FREEZE, 0)

        def FROM(self):
            return self.getToken(HogQLParser.FROM, 0)

        def FULL(self):
            return self.getToken(HogQLParser.FULL, 0)

        def FUNCTION(self):
            return self.getToken(HogQLParser.FUNCTION, 0)

        def GLOBAL(self):
            return self.getToken(HogQLParser.GLOBAL, 0)

        def GRANULARITY(self):
            return self.getToken(HogQLParser.GRANULARITY, 0)

        def GROUP(self):
            return self.getToken(HogQLParser.GROUP, 0)

        def HAVING(self):
            return self.getToken(HogQLParser.HAVING, 0)

        def HIERARCHICAL(self):
            return self.getToken(HogQLParser.HIERARCHICAL, 0)

        def ID(self):
            return self.getToken(HogQLParser.ID, 0)

        def IF(self):
            return self.getToken(HogQLParser.IF, 0)

        def ILIKE(self):
            return self.getToken(HogQLParser.ILIKE, 0)

        def IN(self):
            return self.getToken(HogQLParser.IN, 0)

        def INDEX(self):
            return self.getToken(HogQLParser.INDEX, 0)

        def INJECTIVE(self):
            return self.getToken(HogQLParser.INJECTIVE, 0)

        def INNER(self):
            return self.getToken(HogQLParser.INNER, 0)

        def INSERT(self):
            return self.getToken(HogQLParser.INSERT, 0)

        def INTERVAL(self):
            return self.getToken(HogQLParser.INTERVAL, 0)

        def INTO(self):
            return self.getToken(HogQLParser.INTO, 0)

        def IS(self):
            return self.getToken(HogQLParser.IS, 0)

        def IS_OBJECT_ID(self):
            return self.getToken(HogQLParser.IS_OBJECT_ID, 0)

        def JOIN(self):
            return self.getToken(HogQLParser.JOIN, 0)

        def JSON_FALSE(self):
            return self.getToken(HogQLParser.JSON_FALSE, 0)

        def JSON_TRUE(self):
            return self.getToken(HogQLParser.JSON_TRUE, 0)

        def KEY(self):
            return self.getToken(HogQLParser.KEY, 0)

        def KILL(self):
            return self.getToken(HogQLParser.KILL, 0)

        def LAST(self):
            return self.getToken(HogQLParser.LAST, 0)

        def LAYOUT(self):
            return self.getToken(HogQLParser.LAYOUT, 0)

        def LEADING(self):
            return self.getToken(HogQLParser.LEADING, 0)

        def LEFT(self):
            return self.getToken(HogQLParser.LEFT, 0)

        def LIFETIME(self):
            return self.getToken(HogQLParser.LIFETIME, 0)

        def LIKE(self):
            return self.getToken(HogQLParser.LIKE, 0)

        def LIMIT(self):
            return self.getToken(HogQLParser.LIMIT, 0)

        def LIVE(self):
            return self.getToken(HogQLParser.LIVE, 0)

        def LOCAL(self):
            return self.getToken(HogQLParser.LOCAL, 0)

        def LOGS(self):
            return self.getToken(HogQLParser.LOGS, 0)

        def MATERIALIZE(self):
            return self.getToken(HogQLParser.MATERIALIZE, 0)

        def MATERIALIZED(self):
            return self.getToken(HogQLParser.MATERIALIZED, 0)

        def MAX(self):
            return self.getToken(HogQLParser.MAX, 0)

        def MERGES(self):
            return self.getToken(HogQLParser.MERGES, 0)

        def MIN(self):
            return self.getToken(HogQLParser.MIN, 0)

        def MODIFY(self):
            return self.getToken(HogQLParser.MODIFY, 0)

        def MOVE(self):
            return self.getToken(HogQLParser.MOVE, 0)

        def MUTATION(self):
            return self.getToken(HogQLParser.MUTATION, 0)

        def NO(self):
            return self.getToken(HogQLParser.NO, 0)

        def NOT(self):
            return self.getToken(HogQLParser.NOT, 0)

        def NULLS(self):
            return self.getToken(HogQLParser.NULLS, 0)

        def OFFSET(self):
            return self.getToken(HogQLParser.OFFSET, 0)

        def ON(self):
            return self.getToken(HogQLParser.ON, 0)

        def OPTIMIZE(self):
            return self.getToken(HogQLParser.OPTIMIZE, 0)

        def OR(self):
            return self.getToken(HogQLParser.OR, 0)

        def ORDER(self):
            return self.getToken(HogQLParser.ORDER, 0)

        def OUTER(self):
            return self.getToken(HogQLParser.OUTER, 0)

        def OUTFILE(self):
            return self.getToken(HogQLParser.OUTFILE, 0)

        def OVER(self):
            return self.getToken(HogQLParser.OVER, 0)

        def PARTITION(self):
            return self.getToken(HogQLParser.PARTITION, 0)

        def POPULATE(self):
            return self.getToken(HogQLParser.POPULATE, 0)

        def PRECEDING(self):
            return self.getToken(HogQLParser.PRECEDING, 0)

        def PREWHERE(self):
            return self.getToken(HogQLParser.PREWHERE, 0)

        def PRIMARY(self):
            return self.getToken(HogQLParser.PRIMARY, 0)

        def RANGE(self):
            return self.getToken(HogQLParser.RANGE, 0)

        def RELOAD(self):
            return self.getToken(HogQLParser.RELOAD, 0)

        def REMOVE(self):
            return self.getToken(HogQLParser.REMOVE, 0)

        def RENAME(self):
            return self.getToken(HogQLParser.RENAME, 0)

        def REPLACE(self):
            return self.getToken(HogQLParser.REPLACE, 0)

        def REPLICA(self):
            return self.getToken(HogQLParser.REPLICA, 0)

        def REPLICATED(self):
            return self.getToken(HogQLParser.REPLICATED, 0)

        def RIGHT(self):
            return self.getToken(HogQLParser.RIGHT, 0)

        def ROLLUP(self):
            return self.getToken(HogQLParser.ROLLUP, 0)

        def ROW(self):
            return self.getToken(HogQLParser.ROW, 0)

        def ROWS(self):
            return self.getToken(HogQLParser.ROWS, 0)

        def SAMPLE(self):
            return self.getToken(HogQLParser.SAMPLE, 0)

        def SELECT(self):
            return self.getToken(HogQLParser.SELECT, 0)

        def SEMI(self):
            return self.getToken(HogQLParser.SEMI, 0)

        def SENDS(self):
            return self.getToken(HogQLParser.SENDS, 0)

        def SET(self):
            return self.getToken(HogQLParser.SET, 0)

        def SETTINGS(self):
            return self.getToken(HogQLParser.SETTINGS, 0)

        def SHOW(self):
            return self.getToken(HogQLParser.SHOW, 0)

        def SOURCE(self):
            return self.getToken(HogQLParser.SOURCE, 0)

        def START(self):
            return self.getToken(HogQLParser.START, 0)

        def STOP(self):
            return self.getToken(HogQLParser.STOP, 0)

        def SUBSTRING(self):
            return self.getToken(HogQLParser.SUBSTRING, 0)

        def SYNC(self):
            return self.getToken(HogQLParser.SYNC, 0)

        def SYNTAX(self):
            return self.getToken(HogQLParser.SYNTAX, 0)

        def SYSTEM(self):
            return self.getToken(HogQLParser.SYSTEM, 0)

        def TABLE(self):
            return self.getToken(HogQLParser.TABLE, 0)

        def TABLES(self):
            return self.getToken(HogQLParser.TABLES, 0)

        def TEMPORARY(self):
            return self.getToken(HogQLParser.TEMPORARY, 0)

        def TEST(self):
            return self.getToken(HogQLParser.TEST, 0)

        def THEN(self):
            return self.getToken(HogQLParser.THEN, 0)

        def TIES(self):
            return self.getToken(HogQLParser.TIES, 0)

        def TIMEOUT(self):
            return self.getToken(HogQLParser.TIMEOUT, 0)

        def TIMESTAMP(self):
            return self.getToken(HogQLParser.TIMESTAMP, 0)

        def TOTALS(self):
            return self.getToken(HogQLParser.TOTALS, 0)

        def TRAILING(self):
            return self.getToken(HogQLParser.TRAILING, 0)

        def TRIM(self):
            return self.getToken(HogQLParser.TRIM, 0)

        def TRUNCATE(self):
            return self.getToken(HogQLParser.TRUNCATE, 0)

        def TO(self):
            return self.getToken(HogQLParser.TO, 0)

        def TOP(self):
            return self.getToken(HogQLParser.TOP, 0)

        def TTL(self):
            return self.getToken(HogQLParser.TTL, 0)

        def TYPE(self):
            return self.getToken(HogQLParser.TYPE, 0)

        def UNBOUNDED(self):
            return self.getToken(HogQLParser.UNBOUNDED, 0)

        def UNION(self):
            return self.getToken(HogQLParser.UNION, 0)

        def UPDATE(self):
            return self.getToken(HogQLParser.UPDATE, 0)

        def USE(self):
            return self.getToken(HogQLParser.USE, 0)

        def USING(self):
            return self.getToken(HogQLParser.USING, 0)

        def UUID(self):
            return self.getToken(HogQLParser.UUID, 0)

        def VALUES(self):
            return self.getToken(HogQLParser.VALUES, 0)

        def VIEW(self):
            return self.getToken(HogQLParser.VIEW, 0)

        def VOLUME(self):
            return self.getToken(HogQLParser.VOLUME, 0)

        def WATCH(self):
            return self.getToken(HogQLParser.WATCH, 0)

        def WHEN(self):
            return self.getToken(HogQLParser.WHEN, 0)

        def WHERE(self):
            return self.getToken(HogQLParser.WHERE, 0)

        def WINDOW(self):
            return self.getToken(HogQLParser.WINDOW, 0)

        def WITH(self):
            return self.getToken(HogQLParser.WITH, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_keyword

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKeyword" ):
                return visitor.visitKeyword(self)
            else:
                return visitor.visitChildren(self)




    def keyword(self):

        localctx = HogQLParser.KeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_keyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 896
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & -68719476740) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -2577255255640065) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -2377900603251687437) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeywordForAliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATE(self):
            return self.getToken(HogQLParser.DATE, 0)

        def FIRST(self):
            return self.getToken(HogQLParser.FIRST, 0)

        def ID(self):
            return self.getToken(HogQLParser.ID, 0)

        def KEY(self):
            return self.getToken(HogQLParser.KEY, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_keywordForAlias

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKeywordForAlias" ):
                return visitor.visitKeywordForAlias(self)
            else:
                return visitor.visitChildren(self)




    def keywordForAlias(self):

        localctx = HogQLParser.KeywordForAliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_keywordForAlias)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 898
            _la = self._input.LA(1)
            if not(((((_la - 35)) & ~0x3f) == 0 and ((1 << (_la - 35)) & 36030996109328385) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(HogQLParser.IDENTIFIER, 0)

        def keywordForAlias(self):
            return self.getTypedRuleContext(HogQLParser.KeywordForAliasContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_alias

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlias" ):
                return visitor.visitAlias(self)
            else:
                return visitor.visitChildren(self)




    def alias(self):

        localctx = HogQLParser.AliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_alias)
        try:
            self.state = 902
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 900
                self.match(HogQLParser.IDENTIFIER)
                pass
            elif token in [35, 61, 76, 90]:
                self.enterOuterAlt(localctx, 2)
                self.state = 901
                self.keywordForAlias()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(HogQLParser.IDENTIFIER, 0)

        def interval(self):
            return self.getTypedRuleContext(HogQLParser.IntervalContext,0)


        def keyword(self):
            return self.getTypedRuleContext(HogQLParser.KeywordContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_identifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifier" ):
                return visitor.visitIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def identifier(self):

        localctx = HogQLParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_identifier)
        try:
            self.state = 907
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 904
                self.match(HogQLParser.IDENTIFIER)
                pass
            elif token in [36, 75, 107, 109, 131, 144, 184, 189]:
                self.enterOuterAlt(localctx, 2)
                self.state = 905
                self.interval()
                pass
            elif token in [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 110, 111, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 190, 191]:
                self.enterOuterAlt(localctx, 3)
                self.state = 906
                self.keyword()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierOrNullContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def NULL_SQL(self):
            return self.getToken(HogQLParser.NULL_SQL, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_identifierOrNull

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifierOrNull" ):
                return visitor.visitIdentifierOrNull(self)
            else:
                return visitor.visitChildren(self)




    def identifierOrNull(self):

        localctx = HogQLParser.IdentifierOrNullContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_identifierOrNull)
        try:
            self.state = 911
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 909
                self.identifier()
                pass
            elif token in [115]:
                self.enterOuterAlt(localctx, 2)
                self.state = 910
                self.match(HogQLParser.NULL_SQL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(HogQLParser.STRING_LITERAL, 0)

        def EQ_SINGLE(self):
            return self.getToken(HogQLParser.EQ_SINGLE, 0)

        def numberLiteral(self):
            return self.getTypedRuleContext(HogQLParser.NumberLiteralContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_enumValue

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumValue" ):
                return visitor.visitEnumValue(self)
            else:
                return visitor.visitChildren(self)




    def enumValue(self):

        localctx = HogQLParser.EnumValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_enumValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 913
            self.match(HogQLParser.STRING_LITERAL)
            self.state = 914
            self.match(HogQLParser.EQ_SINGLE)
            self.state = 915
            self.numberLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[17] = self.joinExpr_sempred
        self._predicates[38] = self.columnExpr_sempred
        self._predicates[46] = self.tableExpr_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def joinExpr_sempred(self, localctx:JoinExprContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 4)
         

    def columnExpr_sempred(self, localctx:ColumnExprContext, predIndex:int):
            if predIndex == 2:
                return self.precpred(self._ctx, 16)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 15)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 14)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 19)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 18)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 13)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 7)
         

    def tableExpr_sempred(self, localctx:TableExprContext, predIndex:int):
            if predIndex == 13:
                return self.precpred(self._ctx, 1)
         




