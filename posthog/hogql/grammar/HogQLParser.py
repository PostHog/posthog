# Generated from HogQLParser.g4 by ANTLR 4.13.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,149,1118,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,1,0,5,0,160,8,0,10,0,12,0,163,9,0,1,0,1,0,1,1,1,1,3,1,169,8,1,
        1,2,1,2,3,2,173,8,2,1,3,1,3,1,3,1,3,1,3,3,3,180,8,3,1,3,1,3,1,4,
        1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,5,5,193,8,5,10,5,12,5,196,9,5,1,
        6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,207,8,6,1,7,1,7,1,7,1,8,1,
        8,1,8,1,8,1,8,1,8,1,8,3,8,219,8,8,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,
        10,1,10,1,10,1,11,1,11,1,11,1,11,3,11,235,8,11,1,11,1,11,1,11,1,
        12,1,12,1,13,1,13,5,13,244,8,13,10,13,12,13,247,9,13,1,13,1,13,1,
        14,1,14,1,14,3,14,254,8,14,1,14,3,14,257,8,14,1,15,1,15,1,15,1,15,
        1,16,1,16,1,16,5,16,266,8,16,10,16,12,16,269,9,16,1,17,1,17,1,17,
        3,17,274,8,17,1,17,1,17,1,18,1,18,1,18,1,18,5,18,282,8,18,10,18,
        12,18,285,9,18,1,19,1,19,1,19,1,19,1,19,1,19,3,19,293,8,19,1,20,
        3,20,296,8,20,1,20,1,20,3,20,300,8,20,1,20,3,20,303,8,20,1,20,1,
        20,3,20,307,8,20,1,20,3,20,310,8,20,1,20,3,20,313,8,20,1,20,3,20,
        316,8,20,1,20,3,20,319,8,20,1,20,1,20,3,20,323,8,20,1,20,1,20,3,
        20,327,8,20,1,20,3,20,330,8,20,1,20,3,20,333,8,20,1,20,3,20,336,
        8,20,1,20,1,20,3,20,340,8,20,1,20,3,20,343,8,20,1,21,1,21,1,21,1,
        22,1,22,1,22,1,22,3,22,352,8,22,1,23,1,23,1,23,1,24,3,24,358,8,24,
        1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,
        1,25,1,25,1,25,1,25,5,25,377,8,25,10,25,12,25,380,9,25,1,26,1,26,
        1,26,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,3,28,
        396,8,28,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,
        1,32,1,32,1,32,1,32,3,32,413,8,32,1,32,1,32,1,32,1,32,3,32,419,8,
        32,1,32,1,32,1,32,1,32,3,32,425,8,32,1,32,1,32,1,32,1,32,1,32,1,
        32,1,32,1,32,1,32,3,32,436,8,32,3,32,438,8,32,1,33,1,33,1,33,1,34,
        1,34,1,34,1,35,1,35,1,35,3,35,449,8,35,1,35,3,35,452,8,35,1,35,1,
        35,1,35,1,35,3,35,458,8,35,1,35,1,35,1,35,1,35,1,35,1,35,3,35,466,
        8,35,1,35,1,35,1,35,1,35,5,35,472,8,35,10,35,12,35,475,9,35,1,36,
        3,36,478,8,36,1,36,1,36,1,36,3,36,483,8,36,1,36,3,36,486,8,36,1,
        36,3,36,489,8,36,1,36,1,36,3,36,493,8,36,1,36,1,36,3,36,497,8,36,
        1,36,3,36,500,8,36,3,36,502,8,36,1,36,3,36,505,8,36,1,36,1,36,3,
        36,509,8,36,1,36,1,36,3,36,513,8,36,1,36,3,36,516,8,36,3,36,518,
        8,36,3,36,520,8,36,1,37,1,37,1,37,3,37,525,8,37,1,38,1,38,1,38,1,
        38,1,38,1,38,1,38,1,38,1,38,3,38,536,8,38,1,39,1,39,1,39,1,39,3,
        39,542,8,39,1,40,1,40,1,40,5,40,547,8,40,10,40,12,40,550,9,40,1,
        41,1,41,3,41,554,8,41,1,41,1,41,3,41,558,8,41,1,41,1,41,3,41,562,
        8,41,1,42,1,42,1,42,1,42,3,42,568,8,42,3,42,570,8,42,1,43,1,43,1,
        43,5,43,575,8,43,10,43,12,43,578,9,43,1,44,1,44,1,44,1,44,1,45,3,
        45,585,8,45,1,45,3,45,588,8,45,1,45,3,45,591,8,45,1,46,1,46,1,46,
        1,46,1,47,1,47,1,47,1,47,1,48,1,48,1,48,1,49,1,49,1,49,1,49,1,49,
        1,49,3,49,610,8,49,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,
        1,50,1,50,1,50,3,50,624,8,50,1,51,1,51,1,51,1,52,1,52,1,52,1,52,
        1,52,1,52,1,52,1,52,1,52,5,52,638,8,52,10,52,12,52,641,9,52,1,52,
        1,52,1,52,1,52,1,52,1,52,1,52,5,52,650,8,52,10,52,12,52,653,9,52,
        1,52,1,52,1,52,1,52,1,52,1,52,1,52,5,52,662,8,52,10,52,12,52,665,
        9,52,1,52,1,52,1,52,1,52,1,52,3,52,672,8,52,1,52,1,52,3,52,676,8,
        52,1,53,1,53,1,53,5,53,681,8,53,10,53,12,53,684,9,53,1,54,1,54,1,
        54,3,54,689,8,54,1,54,1,54,1,54,1,54,1,54,4,54,696,8,54,11,54,12,
        54,697,1,54,1,54,3,54,702,8,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,
        1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,
        1,54,1,54,3,54,726,8,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,
        1,54,1,54,1,54,1,54,1,54,1,54,1,54,3,54,743,8,54,1,54,1,54,1,54,
        1,54,1,54,1,54,1,54,1,54,1,54,1,54,3,54,755,8,54,1,54,1,54,1,54,
        1,54,1,54,1,54,1,54,1,54,3,54,765,8,54,1,54,3,54,768,8,54,1,54,1,
        54,3,54,772,8,54,1,54,3,54,775,8,54,1,54,1,54,1,54,1,54,1,54,1,54,
        1,54,1,54,1,54,1,54,1,54,3,54,788,8,54,1,54,1,54,1,54,1,54,1,54,
        1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,3,54,805,8,54,
        1,54,1,54,3,54,809,8,54,1,54,1,54,1,54,1,54,3,54,815,8,54,1,54,1,
        54,1,54,1,54,1,54,3,54,822,8,54,1,54,1,54,1,54,1,54,1,54,1,54,1,
        54,1,54,1,54,1,54,3,54,834,8,54,1,54,1,54,3,54,838,8,54,1,54,3,54,
        841,8,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,3,54,850,8,54,1,54,1,
        54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,3,54,864,8,
        54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,
        54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,3,
        54,891,8,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,3,54,900,8,54,5,54,
        902,8,54,10,54,12,54,905,9,54,1,55,1,55,1,55,5,55,910,8,55,10,55,
        12,55,913,9,55,1,56,1,56,3,56,917,8,56,1,57,1,57,1,57,1,57,5,57,
        923,8,57,10,57,12,57,926,9,57,1,57,1,57,1,57,1,57,1,57,5,57,933,
        8,57,10,57,12,57,936,9,57,3,57,938,8,57,1,57,1,57,1,57,1,58,1,58,
        1,58,5,58,946,8,58,10,58,12,58,949,9,58,1,58,1,58,1,58,1,58,1,58,
        1,58,5,58,957,8,58,10,58,12,58,960,9,58,1,58,1,58,3,58,964,8,58,
        1,58,1,58,1,58,1,58,1,58,3,58,971,8,58,1,59,1,59,1,59,1,59,1,59,
        1,59,1,59,1,59,1,59,1,59,1,59,3,59,984,8,59,1,60,1,60,1,60,5,60,
        989,8,60,10,60,12,60,992,9,60,1,61,1,61,1,61,1,61,1,61,1,61,1,61,
        1,61,1,61,1,61,3,61,1004,8,61,1,62,1,62,1,62,1,62,3,62,1010,8,62,
        1,62,3,62,1013,8,62,1,63,1,63,1,63,5,63,1018,8,63,10,63,12,63,1021,
        9,63,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,3,64,1032,8,64,
        1,64,1,64,1,64,1,64,3,64,1038,8,64,5,64,1040,8,64,10,64,12,64,1043,
        9,64,1,65,1,65,1,65,3,65,1048,8,65,1,65,1,65,1,66,1,66,1,66,3,66,
        1055,8,66,1,66,1,66,1,67,1,67,1,67,5,67,1062,8,67,10,67,12,67,1065,
        9,67,1,68,1,68,1,69,1,69,1,69,1,69,1,69,1,69,3,69,1075,8,69,3,69,
        1077,8,69,1,70,3,70,1080,8,70,1,70,1,70,1,70,1,70,1,70,1,70,3,70,
        1088,8,70,1,71,1,71,1,71,3,71,1093,8,71,1,72,1,72,1,73,1,73,1,74,
        1,74,1,75,1,75,3,75,1103,8,75,1,76,1,76,1,76,3,76,1108,8,76,1,77,
        1,77,1,77,1,77,1,78,1,78,1,78,1,78,1,78,0,3,70,108,128,79,0,2,4,
        6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,
        50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,
        94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,
        128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,0,16,
        2,0,17,17,71,71,2,0,42,42,49,49,3,0,1,1,4,4,8,8,4,0,1,1,3,4,8,8,
        77,77,2,0,49,49,70,70,2,0,1,1,4,4,2,0,7,7,21,22,2,0,28,28,47,47,
        2,0,68,68,73,73,3,0,10,10,48,48,86,86,2,0,39,39,50,50,1,0,104,105,
        2,0,115,115,135,135,7,0,20,20,36,36,52,53,67,67,75,75,93,93,99,99,
        11,0,1,19,21,28,30,35,37,40,42,51,55,55,57,66,68,74,76,91,94,95,
        97,98,4,0,19,19,28,28,37,37,46,46,1247,0,161,1,0,0,0,2,168,1,0,0,
        0,4,172,1,0,0,0,6,174,1,0,0,0,8,183,1,0,0,0,10,189,1,0,0,0,12,206,
        1,0,0,0,14,208,1,0,0,0,16,211,1,0,0,0,18,220,1,0,0,0,20,226,1,0,
        0,0,22,230,1,0,0,0,24,239,1,0,0,0,26,241,1,0,0,0,28,256,1,0,0,0,
        30,258,1,0,0,0,32,262,1,0,0,0,34,273,1,0,0,0,36,277,1,0,0,0,38,292,
        1,0,0,0,40,295,1,0,0,0,42,344,1,0,0,0,44,347,1,0,0,0,46,353,1,0,
        0,0,48,357,1,0,0,0,50,363,1,0,0,0,52,381,1,0,0,0,54,384,1,0,0,0,
        56,387,1,0,0,0,58,397,1,0,0,0,60,400,1,0,0,0,62,404,1,0,0,0,64,437,
        1,0,0,0,66,439,1,0,0,0,68,442,1,0,0,0,70,457,1,0,0,0,72,519,1,0,
        0,0,74,524,1,0,0,0,76,535,1,0,0,0,78,537,1,0,0,0,80,543,1,0,0,0,
        82,551,1,0,0,0,84,569,1,0,0,0,86,571,1,0,0,0,88,579,1,0,0,0,90,584,
        1,0,0,0,92,592,1,0,0,0,94,596,1,0,0,0,96,600,1,0,0,0,98,609,1,0,
        0,0,100,623,1,0,0,0,102,625,1,0,0,0,104,675,1,0,0,0,106,677,1,0,
        0,0,108,808,1,0,0,0,110,906,1,0,0,0,112,916,1,0,0,0,114,937,1,0,
        0,0,116,970,1,0,0,0,118,983,1,0,0,0,120,985,1,0,0,0,122,1003,1,0,
        0,0,124,1012,1,0,0,0,126,1014,1,0,0,0,128,1031,1,0,0,0,130,1044,
        1,0,0,0,132,1054,1,0,0,0,134,1058,1,0,0,0,136,1066,1,0,0,0,138,1076,
        1,0,0,0,140,1079,1,0,0,0,142,1092,1,0,0,0,144,1094,1,0,0,0,146,1096,
        1,0,0,0,148,1098,1,0,0,0,150,1102,1,0,0,0,152,1107,1,0,0,0,154,1109,
        1,0,0,0,156,1113,1,0,0,0,158,160,3,2,1,0,159,158,1,0,0,0,160,163,
        1,0,0,0,161,159,1,0,0,0,161,162,1,0,0,0,162,164,1,0,0,0,163,161,
        1,0,0,0,164,165,5,0,0,1,165,1,1,0,0,0,166,169,3,6,3,0,167,169,3,
        12,6,0,168,166,1,0,0,0,168,167,1,0,0,0,169,3,1,0,0,0,170,173,3,108,
        54,0,171,173,3,28,14,0,172,170,1,0,0,0,172,171,1,0,0,0,173,5,1,0,
        0,0,174,175,5,92,0,0,175,179,3,152,76,0,176,177,5,112,0,0,177,178,
        5,119,0,0,178,180,3,4,2,0,179,176,1,0,0,0,179,180,1,0,0,0,180,181,
        1,0,0,0,181,182,5,144,0,0,182,7,1,0,0,0,183,184,3,152,76,0,184,185,
        5,112,0,0,185,186,5,119,0,0,186,187,3,4,2,0,187,188,5,144,0,0,188,
        9,1,0,0,0,189,194,3,152,76,0,190,191,5,113,0,0,191,193,3,152,76,
        0,192,190,1,0,0,0,193,196,1,0,0,0,194,192,1,0,0,0,194,195,1,0,0,
        0,195,11,1,0,0,0,196,194,1,0,0,0,197,207,3,20,10,0,198,207,3,24,
        12,0,199,207,3,14,7,0,200,207,3,16,8,0,201,207,3,18,9,0,202,207,
        3,22,11,0,203,207,3,8,4,0,204,207,3,20,10,0,205,207,3,26,13,0,206,
        197,1,0,0,0,206,198,1,0,0,0,206,199,1,0,0,0,206,200,1,0,0,0,206,
        201,1,0,0,0,206,202,1,0,0,0,206,203,1,0,0,0,206,204,1,0,0,0,206,
        205,1,0,0,0,207,13,1,0,0,0,208,209,3,4,2,0,209,210,5,144,0,0,210,
        15,1,0,0,0,211,212,5,38,0,0,212,213,5,127,0,0,213,214,3,4,2,0,214,
        215,5,143,0,0,215,218,3,12,6,0,216,217,5,24,0,0,217,219,3,12,6,0,
        218,216,1,0,0,0,218,219,1,0,0,0,219,17,1,0,0,0,220,221,5,96,0,0,
        221,222,5,127,0,0,222,223,3,4,2,0,223,224,5,143,0,0,224,225,3,12,
        6,0,225,19,1,0,0,0,226,227,5,69,0,0,227,228,3,4,2,0,228,229,5,144,
        0,0,229,21,1,0,0,0,230,231,5,29,0,0,231,232,3,152,76,0,232,234,5,
        127,0,0,233,235,3,10,5,0,234,233,1,0,0,0,234,235,1,0,0,0,235,236,
        1,0,0,0,236,237,5,143,0,0,237,238,3,26,13,0,238,23,1,0,0,0,239,240,
        5,144,0,0,240,25,1,0,0,0,241,245,5,125,0,0,242,244,3,2,1,0,243,242,
        1,0,0,0,244,247,1,0,0,0,245,243,1,0,0,0,245,246,1,0,0,0,246,248,
        1,0,0,0,247,245,1,0,0,0,248,249,5,141,0,0,249,27,1,0,0,0,250,257,
        1,0,0,0,251,253,5,125,0,0,252,254,3,32,16,0,253,252,1,0,0,0,253,
        254,1,0,0,0,254,255,1,0,0,0,255,257,5,141,0,0,256,250,1,0,0,0,256,
        251,1,0,0,0,257,29,1,0,0,0,258,259,3,4,2,0,259,260,5,112,0,0,260,
        261,3,4,2,0,261,31,1,0,0,0,262,267,3,30,15,0,263,264,5,113,0,0,264,
        266,3,30,15,0,265,263,1,0,0,0,266,269,1,0,0,0,267,265,1,0,0,0,267,
        268,1,0,0,0,268,33,1,0,0,0,269,267,1,0,0,0,270,274,3,36,18,0,271,
        274,3,40,20,0,272,274,3,116,58,0,273,270,1,0,0,0,273,271,1,0,0,0,
        273,272,1,0,0,0,274,275,1,0,0,0,275,276,5,0,0,1,276,35,1,0,0,0,277,
        283,3,38,19,0,278,279,5,90,0,0,279,280,5,1,0,0,280,282,3,38,19,0,
        281,278,1,0,0,0,282,285,1,0,0,0,283,281,1,0,0,0,283,284,1,0,0,0,
        284,37,1,0,0,0,285,283,1,0,0,0,286,293,3,40,20,0,287,288,5,127,0,
        0,288,289,3,36,18,0,289,290,5,143,0,0,290,293,1,0,0,0,291,293,3,
        156,78,0,292,286,1,0,0,0,292,287,1,0,0,0,292,291,1,0,0,0,293,39,
        1,0,0,0,294,296,3,42,21,0,295,294,1,0,0,0,295,296,1,0,0,0,296,297,
        1,0,0,0,297,299,5,76,0,0,298,300,5,23,0,0,299,298,1,0,0,0,299,300,
        1,0,0,0,300,302,1,0,0,0,301,303,3,44,22,0,302,301,1,0,0,0,302,303,
        1,0,0,0,303,304,1,0,0,0,304,306,3,106,53,0,305,307,3,46,23,0,306,
        305,1,0,0,0,306,307,1,0,0,0,307,309,1,0,0,0,308,310,3,48,24,0,309,
        308,1,0,0,0,309,310,1,0,0,0,310,312,1,0,0,0,311,313,3,52,26,0,312,
        311,1,0,0,0,312,313,1,0,0,0,313,315,1,0,0,0,314,316,3,54,27,0,315,
        314,1,0,0,0,315,316,1,0,0,0,316,318,1,0,0,0,317,319,3,56,28,0,318,
        317,1,0,0,0,318,319,1,0,0,0,319,322,1,0,0,0,320,321,5,98,0,0,321,
        323,7,0,0,0,322,320,1,0,0,0,322,323,1,0,0,0,323,326,1,0,0,0,324,
        325,5,98,0,0,325,327,5,85,0,0,326,324,1,0,0,0,326,327,1,0,0,0,327,
        329,1,0,0,0,328,330,3,58,29,0,329,328,1,0,0,0,329,330,1,0,0,0,330,
        332,1,0,0,0,331,333,3,50,25,0,332,331,1,0,0,0,332,333,1,0,0,0,333,
        335,1,0,0,0,334,336,3,60,30,0,335,334,1,0,0,0,335,336,1,0,0,0,336,
        339,1,0,0,0,337,340,3,64,32,0,338,340,3,66,33,0,339,337,1,0,0,0,
        339,338,1,0,0,0,339,340,1,0,0,0,340,342,1,0,0,0,341,343,3,68,34,
        0,342,341,1,0,0,0,342,343,1,0,0,0,343,41,1,0,0,0,344,345,5,98,0,
        0,345,346,3,120,60,0,346,43,1,0,0,0,347,348,5,84,0,0,348,351,5,105,
        0,0,349,350,5,98,0,0,350,352,5,81,0,0,351,349,1,0,0,0,351,352,1,
        0,0,0,352,45,1,0,0,0,353,354,5,32,0,0,354,355,3,70,35,0,355,47,1,
        0,0,0,356,358,7,1,0,0,357,356,1,0,0,0,357,358,1,0,0,0,358,359,1,
        0,0,0,359,360,5,5,0,0,360,361,5,45,0,0,361,362,3,106,53,0,362,49,
        1,0,0,0,363,364,5,97,0,0,364,365,3,152,76,0,365,366,5,6,0,0,366,
        367,5,127,0,0,367,368,3,90,45,0,368,378,5,143,0,0,369,370,5,113,
        0,0,370,371,3,152,76,0,371,372,5,6,0,0,372,373,5,127,0,0,373,374,
        3,90,45,0,374,375,5,143,0,0,375,377,1,0,0,0,376,369,1,0,0,0,377,
        380,1,0,0,0,378,376,1,0,0,0,378,379,1,0,0,0,379,51,1,0,0,0,380,378,
        1,0,0,0,381,382,5,66,0,0,382,383,3,108,54,0,383,53,1,0,0,0,384,385,
        5,95,0,0,385,386,3,108,54,0,386,55,1,0,0,0,387,388,5,34,0,0,388,
        395,5,11,0,0,389,390,7,0,0,0,390,391,5,127,0,0,391,392,3,106,53,
        0,392,393,5,143,0,0,393,396,1,0,0,0,394,396,3,106,53,0,395,389,1,
        0,0,0,395,394,1,0,0,0,396,57,1,0,0,0,397,398,5,35,0,0,398,399,3,
        108,54,0,399,59,1,0,0,0,400,401,5,61,0,0,401,402,5,11,0,0,402,403,
        3,80,40,0,403,61,1,0,0,0,404,405,5,61,0,0,405,406,5,11,0,0,406,407,
        3,106,53,0,407,63,1,0,0,0,408,409,5,51,0,0,409,412,3,108,54,0,410,
        411,5,113,0,0,411,413,3,108,54,0,412,410,1,0,0,0,412,413,1,0,0,0,
        413,418,1,0,0,0,414,415,5,98,0,0,415,419,5,81,0,0,416,417,5,11,0,
        0,417,419,3,106,53,0,418,414,1,0,0,0,418,416,1,0,0,0,418,419,1,0,
        0,0,419,438,1,0,0,0,420,421,5,51,0,0,421,424,3,108,54,0,422,423,
        5,98,0,0,423,425,5,81,0,0,424,422,1,0,0,0,424,425,1,0,0,0,425,426,
        1,0,0,0,426,427,5,58,0,0,427,428,3,108,54,0,428,438,1,0,0,0,429,
        430,5,51,0,0,430,431,3,108,54,0,431,432,5,58,0,0,432,435,3,108,54,
        0,433,434,5,11,0,0,434,436,3,106,53,0,435,433,1,0,0,0,435,436,1,
        0,0,0,436,438,1,0,0,0,437,408,1,0,0,0,437,420,1,0,0,0,437,429,1,
        0,0,0,438,65,1,0,0,0,439,440,5,58,0,0,440,441,3,108,54,0,441,67,
        1,0,0,0,442,443,5,78,0,0,443,444,3,86,43,0,444,69,1,0,0,0,445,446,
        6,35,-1,0,446,448,3,128,64,0,447,449,5,27,0,0,448,447,1,0,0,0,448,
        449,1,0,0,0,449,451,1,0,0,0,450,452,3,78,39,0,451,450,1,0,0,0,451,
        452,1,0,0,0,452,458,1,0,0,0,453,454,5,127,0,0,454,455,3,70,35,0,
        455,456,5,143,0,0,456,458,1,0,0,0,457,445,1,0,0,0,457,453,1,0,0,
        0,458,473,1,0,0,0,459,460,10,3,0,0,460,461,3,74,37,0,461,462,3,70,
        35,4,462,472,1,0,0,0,463,465,10,4,0,0,464,466,3,72,36,0,465,464,
        1,0,0,0,465,466,1,0,0,0,466,467,1,0,0,0,467,468,5,45,0,0,468,469,
        3,70,35,0,469,470,3,76,38,0,470,472,1,0,0,0,471,459,1,0,0,0,471,
        463,1,0,0,0,472,475,1,0,0,0,473,471,1,0,0,0,473,474,1,0,0,0,474,
        71,1,0,0,0,475,473,1,0,0,0,476,478,7,2,0,0,477,476,1,0,0,0,477,478,
        1,0,0,0,478,479,1,0,0,0,479,486,5,42,0,0,480,482,5,42,0,0,481,483,
        7,2,0,0,482,481,1,0,0,0,482,483,1,0,0,0,483,486,1,0,0,0,484,486,
        7,2,0,0,485,477,1,0,0,0,485,480,1,0,0,0,485,484,1,0,0,0,486,520,
        1,0,0,0,487,489,7,3,0,0,488,487,1,0,0,0,488,489,1,0,0,0,489,490,
        1,0,0,0,490,492,7,4,0,0,491,493,5,62,0,0,492,491,1,0,0,0,492,493,
        1,0,0,0,493,502,1,0,0,0,494,496,7,4,0,0,495,497,5,62,0,0,496,495,
        1,0,0,0,496,497,1,0,0,0,497,499,1,0,0,0,498,500,7,3,0,0,499,498,
        1,0,0,0,499,500,1,0,0,0,500,502,1,0,0,0,501,488,1,0,0,0,501,494,
        1,0,0,0,502,520,1,0,0,0,503,505,7,5,0,0,504,503,1,0,0,0,504,505,
        1,0,0,0,505,506,1,0,0,0,506,508,5,33,0,0,507,509,5,62,0,0,508,507,
        1,0,0,0,508,509,1,0,0,0,509,518,1,0,0,0,510,512,5,33,0,0,511,513,
        5,62,0,0,512,511,1,0,0,0,512,513,1,0,0,0,513,515,1,0,0,0,514,516,
        7,5,0,0,515,514,1,0,0,0,515,516,1,0,0,0,516,518,1,0,0,0,517,504,
        1,0,0,0,517,510,1,0,0,0,518,520,1,0,0,0,519,485,1,0,0,0,519,501,
        1,0,0,0,519,517,1,0,0,0,520,73,1,0,0,0,521,522,5,16,0,0,522,525,
        5,45,0,0,523,525,5,113,0,0,524,521,1,0,0,0,524,523,1,0,0,0,525,75,
        1,0,0,0,526,527,5,59,0,0,527,536,3,106,53,0,528,529,5,91,0,0,529,
        530,5,127,0,0,530,531,3,106,53,0,531,532,5,143,0,0,532,536,1,0,0,
        0,533,534,5,91,0,0,534,536,3,106,53,0,535,526,1,0,0,0,535,528,1,
        0,0,0,535,533,1,0,0,0,536,77,1,0,0,0,537,538,5,74,0,0,538,541,3,
        84,42,0,539,540,5,58,0,0,540,542,3,84,42,0,541,539,1,0,0,0,541,542,
        1,0,0,0,542,79,1,0,0,0,543,548,3,82,41,0,544,545,5,113,0,0,545,547,
        3,82,41,0,546,544,1,0,0,0,547,550,1,0,0,0,548,546,1,0,0,0,548,549,
        1,0,0,0,549,81,1,0,0,0,550,548,1,0,0,0,551,553,3,108,54,0,552,554,
        7,6,0,0,553,552,1,0,0,0,553,554,1,0,0,0,554,557,1,0,0,0,555,556,
        5,57,0,0,556,558,7,7,0,0,557,555,1,0,0,0,557,558,1,0,0,0,558,561,
        1,0,0,0,559,560,5,15,0,0,560,562,5,107,0,0,561,559,1,0,0,0,561,562,
        1,0,0,0,562,83,1,0,0,0,563,570,3,156,78,0,564,567,3,140,70,0,565,
        566,5,145,0,0,566,568,3,140,70,0,567,565,1,0,0,0,567,568,1,0,0,0,
        568,570,1,0,0,0,569,563,1,0,0,0,569,564,1,0,0,0,570,85,1,0,0,0,571,
        576,3,88,44,0,572,573,5,113,0,0,573,575,3,88,44,0,574,572,1,0,0,
        0,575,578,1,0,0,0,576,574,1,0,0,0,576,577,1,0,0,0,577,87,1,0,0,0,
        578,576,1,0,0,0,579,580,3,152,76,0,580,581,5,119,0,0,581,582,3,142,
        71,0,582,89,1,0,0,0,583,585,3,92,46,0,584,583,1,0,0,0,584,585,1,
        0,0,0,585,587,1,0,0,0,586,588,3,94,47,0,587,586,1,0,0,0,587,588,
        1,0,0,0,588,590,1,0,0,0,589,591,3,96,48,0,590,589,1,0,0,0,590,591,
        1,0,0,0,591,91,1,0,0,0,592,593,5,64,0,0,593,594,5,11,0,0,594,595,
        3,106,53,0,595,93,1,0,0,0,596,597,5,61,0,0,597,598,5,11,0,0,598,
        599,3,80,40,0,599,95,1,0,0,0,600,601,7,8,0,0,601,602,3,98,49,0,602,
        97,1,0,0,0,603,610,3,100,50,0,604,605,5,9,0,0,605,606,3,100,50,0,
        606,607,5,2,0,0,607,608,3,100,50,0,608,610,1,0,0,0,609,603,1,0,0,
        0,609,604,1,0,0,0,610,99,1,0,0,0,611,612,5,18,0,0,612,624,5,72,0,
        0,613,614,5,89,0,0,614,624,5,65,0,0,615,616,5,89,0,0,616,624,5,30,
        0,0,617,618,3,140,70,0,618,619,5,65,0,0,619,624,1,0,0,0,620,621,
        3,140,70,0,621,622,5,30,0,0,622,624,1,0,0,0,623,611,1,0,0,0,623,
        613,1,0,0,0,623,615,1,0,0,0,623,617,1,0,0,0,623,620,1,0,0,0,624,
        101,1,0,0,0,625,626,3,108,54,0,626,627,5,0,0,1,627,103,1,0,0,0,628,
        676,3,152,76,0,629,630,3,152,76,0,630,631,5,127,0,0,631,632,3,152,
        76,0,632,639,3,104,52,0,633,634,5,113,0,0,634,635,3,152,76,0,635,
        636,3,104,52,0,636,638,1,0,0,0,637,633,1,0,0,0,638,641,1,0,0,0,639,
        637,1,0,0,0,639,640,1,0,0,0,640,642,1,0,0,0,641,639,1,0,0,0,642,
        643,5,143,0,0,643,676,1,0,0,0,644,645,3,152,76,0,645,646,5,127,0,
        0,646,651,3,154,77,0,647,648,5,113,0,0,648,650,3,154,77,0,649,647,
        1,0,0,0,650,653,1,0,0,0,651,649,1,0,0,0,651,652,1,0,0,0,652,654,
        1,0,0,0,653,651,1,0,0,0,654,655,5,143,0,0,655,676,1,0,0,0,656,657,
        3,152,76,0,657,658,5,127,0,0,658,663,3,104,52,0,659,660,5,113,0,
        0,660,662,3,104,52,0,661,659,1,0,0,0,662,665,1,0,0,0,663,661,1,0,
        0,0,663,664,1,0,0,0,664,666,1,0,0,0,665,663,1,0,0,0,666,667,5,143,
        0,0,667,676,1,0,0,0,668,669,3,152,76,0,669,671,5,127,0,0,670,672,
        3,106,53,0,671,670,1,0,0,0,671,672,1,0,0,0,672,673,1,0,0,0,673,674,
        5,143,0,0,674,676,1,0,0,0,675,628,1,0,0,0,675,629,1,0,0,0,675,644,
        1,0,0,0,675,656,1,0,0,0,675,668,1,0,0,0,676,105,1,0,0,0,677,682,
        3,108,54,0,678,679,5,113,0,0,679,681,3,108,54,0,680,678,1,0,0,0,
        681,684,1,0,0,0,682,680,1,0,0,0,682,683,1,0,0,0,683,107,1,0,0,0,
        684,682,1,0,0,0,685,686,6,54,-1,0,686,688,5,12,0,0,687,689,3,108,
        54,0,688,687,1,0,0,0,688,689,1,0,0,0,689,695,1,0,0,0,690,691,5,94,
        0,0,691,692,3,108,54,0,692,693,5,80,0,0,693,694,3,108,54,0,694,696,
        1,0,0,0,695,690,1,0,0,0,696,697,1,0,0,0,697,695,1,0,0,0,697,698,
        1,0,0,0,698,701,1,0,0,0,699,700,5,24,0,0,700,702,3,108,54,0,701,
        699,1,0,0,0,701,702,1,0,0,0,702,703,1,0,0,0,703,704,5,25,0,0,704,
        809,1,0,0,0,705,706,5,13,0,0,706,707,5,127,0,0,707,708,3,108,54,
        0,708,709,5,6,0,0,709,710,3,104,52,0,710,711,5,143,0,0,711,809,1,
        0,0,0,712,713,5,19,0,0,713,809,5,107,0,0,714,715,5,43,0,0,715,716,
        3,108,54,0,716,717,3,144,72,0,717,809,1,0,0,0,718,719,5,79,0,0,719,
        720,5,127,0,0,720,721,3,108,54,0,721,722,5,32,0,0,722,725,3,108,
        54,0,723,724,5,31,0,0,724,726,3,108,54,0,725,723,1,0,0,0,725,726,
        1,0,0,0,726,727,1,0,0,0,727,728,5,143,0,0,728,809,1,0,0,0,729,730,
        5,82,0,0,730,809,5,107,0,0,731,732,5,87,0,0,732,733,5,127,0,0,733,
        734,7,9,0,0,734,735,5,107,0,0,735,736,5,32,0,0,736,737,3,108,54,
        0,737,738,5,143,0,0,738,809,1,0,0,0,739,740,3,152,76,0,740,742,5,
        127,0,0,741,743,3,106,53,0,742,741,1,0,0,0,742,743,1,0,0,0,743,744,
        1,0,0,0,744,745,5,143,0,0,745,746,1,0,0,0,746,747,5,63,0,0,747,748,
        5,127,0,0,748,749,3,90,45,0,749,750,5,143,0,0,750,809,1,0,0,0,751,
        752,3,152,76,0,752,754,5,127,0,0,753,755,3,106,53,0,754,753,1,0,
        0,0,754,755,1,0,0,0,755,756,1,0,0,0,756,757,5,143,0,0,757,758,1,
        0,0,0,758,759,5,63,0,0,759,760,3,152,76,0,760,809,1,0,0,0,761,767,
        3,152,76,0,762,764,5,127,0,0,763,765,3,106,53,0,764,763,1,0,0,0,
        764,765,1,0,0,0,765,766,1,0,0,0,766,768,5,143,0,0,767,762,1,0,0,
        0,767,768,1,0,0,0,768,769,1,0,0,0,769,771,5,127,0,0,770,772,5,23,
        0,0,771,770,1,0,0,0,771,772,1,0,0,0,772,774,1,0,0,0,773,775,3,110,
        55,0,774,773,1,0,0,0,774,775,1,0,0,0,775,776,1,0,0,0,776,777,5,143,
        0,0,777,809,1,0,0,0,778,809,3,116,58,0,779,809,3,142,71,0,780,781,
        5,115,0,0,781,809,3,108,54,18,782,783,5,55,0,0,783,809,3,108,54,
        12,784,785,3,132,66,0,785,786,5,117,0,0,786,788,1,0,0,0,787,784,
        1,0,0,0,787,788,1,0,0,0,788,789,1,0,0,0,789,809,5,109,0,0,790,791,
        5,127,0,0,791,792,3,36,18,0,792,793,5,143,0,0,793,809,1,0,0,0,794,
        795,5,127,0,0,795,796,3,108,54,0,796,797,5,143,0,0,797,809,1,0,0,
        0,798,799,5,127,0,0,799,800,3,106,53,0,800,801,5,143,0,0,801,809,
        1,0,0,0,802,804,5,126,0,0,803,805,3,106,53,0,804,803,1,0,0,0,804,
        805,1,0,0,0,805,806,1,0,0,0,806,809,5,142,0,0,807,809,3,124,62,0,
        808,685,1,0,0,0,808,705,1,0,0,0,808,712,1,0,0,0,808,714,1,0,0,0,
        808,718,1,0,0,0,808,729,1,0,0,0,808,731,1,0,0,0,808,739,1,0,0,0,
        808,751,1,0,0,0,808,761,1,0,0,0,808,778,1,0,0,0,808,779,1,0,0,0,
        808,780,1,0,0,0,808,782,1,0,0,0,808,787,1,0,0,0,808,790,1,0,0,0,
        808,794,1,0,0,0,808,798,1,0,0,0,808,802,1,0,0,0,808,807,1,0,0,0,
        809,903,1,0,0,0,810,814,10,17,0,0,811,815,5,109,0,0,812,815,5,145,
        0,0,813,815,5,134,0,0,814,811,1,0,0,0,814,812,1,0,0,0,814,813,1,
        0,0,0,815,816,1,0,0,0,816,902,3,108,54,18,817,821,10,16,0,0,818,
        822,5,135,0,0,819,822,5,115,0,0,820,822,5,114,0,0,821,818,1,0,0,
        0,821,819,1,0,0,0,821,820,1,0,0,0,822,823,1,0,0,0,823,902,3,108,
        54,17,824,849,10,15,0,0,825,850,5,118,0,0,826,850,5,119,0,0,827,
        850,5,130,0,0,828,850,5,128,0,0,829,850,5,129,0,0,830,850,5,120,
        0,0,831,850,5,121,0,0,832,834,5,55,0,0,833,832,1,0,0,0,833,834,1,
        0,0,0,834,835,1,0,0,0,835,837,5,40,0,0,836,838,5,14,0,0,837,836,
        1,0,0,0,837,838,1,0,0,0,838,850,1,0,0,0,839,841,5,55,0,0,840,839,
        1,0,0,0,840,841,1,0,0,0,841,842,1,0,0,0,842,850,7,10,0,0,843,850,
        5,139,0,0,844,850,5,140,0,0,845,850,5,132,0,0,846,850,5,123,0,0,
        847,850,5,124,0,0,848,850,5,131,0,0,849,825,1,0,0,0,849,826,1,0,
        0,0,849,827,1,0,0,0,849,828,1,0,0,0,849,829,1,0,0,0,849,830,1,0,
        0,0,849,831,1,0,0,0,849,833,1,0,0,0,849,840,1,0,0,0,849,843,1,0,
        0,0,849,844,1,0,0,0,849,845,1,0,0,0,849,846,1,0,0,0,849,847,1,0,
        0,0,849,848,1,0,0,0,850,851,1,0,0,0,851,902,3,108,54,16,852,853,
        10,13,0,0,853,854,5,133,0,0,854,902,3,108,54,14,855,856,10,11,0,
        0,856,857,5,2,0,0,857,902,3,108,54,12,858,859,10,10,0,0,859,860,
        5,60,0,0,860,902,3,108,54,11,861,863,10,9,0,0,862,864,5,55,0,0,863,
        862,1,0,0,0,863,864,1,0,0,0,864,865,1,0,0,0,865,866,5,9,0,0,866,
        867,3,108,54,0,867,868,5,2,0,0,868,869,3,108,54,10,869,902,1,0,0,
        0,870,871,10,8,0,0,871,872,5,136,0,0,872,873,3,108,54,0,873,874,
        5,112,0,0,874,875,3,108,54,8,875,902,1,0,0,0,876,877,10,21,0,0,877,
        878,5,126,0,0,878,879,3,108,54,0,879,880,5,142,0,0,880,902,1,0,0,
        0,881,882,10,20,0,0,882,883,5,117,0,0,883,902,5,105,0,0,884,885,
        10,19,0,0,885,886,5,117,0,0,886,902,3,152,76,0,887,888,10,14,0,0,
        888,890,5,44,0,0,889,891,5,55,0,0,890,889,1,0,0,0,890,891,1,0,0,
        0,891,892,1,0,0,0,892,902,5,56,0,0,893,899,10,7,0,0,894,900,3,150,
        75,0,895,896,5,6,0,0,896,900,3,152,76,0,897,898,5,6,0,0,898,900,
        5,107,0,0,899,894,1,0,0,0,899,895,1,0,0,0,899,897,1,0,0,0,900,902,
        1,0,0,0,901,810,1,0,0,0,901,817,1,0,0,0,901,824,1,0,0,0,901,852,
        1,0,0,0,901,855,1,0,0,0,901,858,1,0,0,0,901,861,1,0,0,0,901,870,
        1,0,0,0,901,876,1,0,0,0,901,881,1,0,0,0,901,884,1,0,0,0,901,887,
        1,0,0,0,901,893,1,0,0,0,902,905,1,0,0,0,903,901,1,0,0,0,903,904,
        1,0,0,0,904,109,1,0,0,0,905,903,1,0,0,0,906,911,3,112,56,0,907,908,
        5,113,0,0,908,910,3,112,56,0,909,907,1,0,0,0,910,913,1,0,0,0,911,
        909,1,0,0,0,911,912,1,0,0,0,912,111,1,0,0,0,913,911,1,0,0,0,914,
        917,3,114,57,0,915,917,3,108,54,0,916,914,1,0,0,0,916,915,1,0,0,
        0,917,113,1,0,0,0,918,919,5,127,0,0,919,924,3,152,76,0,920,921,5,
        113,0,0,921,923,3,152,76,0,922,920,1,0,0,0,923,926,1,0,0,0,924,922,
        1,0,0,0,924,925,1,0,0,0,925,927,1,0,0,0,926,924,1,0,0,0,927,928,
        5,143,0,0,928,938,1,0,0,0,929,934,3,152,76,0,930,931,5,113,0,0,931,
        933,3,152,76,0,932,930,1,0,0,0,933,936,1,0,0,0,934,932,1,0,0,0,934,
        935,1,0,0,0,935,938,1,0,0,0,936,934,1,0,0,0,937,918,1,0,0,0,937,
        929,1,0,0,0,938,939,1,0,0,0,939,940,5,108,0,0,940,941,3,108,54,0,
        941,115,1,0,0,0,942,943,5,129,0,0,943,947,3,152,76,0,944,946,3,118,
        59,0,945,944,1,0,0,0,946,949,1,0,0,0,947,945,1,0,0,0,947,948,1,0,
        0,0,948,950,1,0,0,0,949,947,1,0,0,0,950,951,5,145,0,0,951,952,5,
        121,0,0,952,971,1,0,0,0,953,954,5,129,0,0,954,958,3,152,76,0,955,
        957,3,118,59,0,956,955,1,0,0,0,957,960,1,0,0,0,958,956,1,0,0,0,958,
        959,1,0,0,0,959,961,1,0,0,0,960,958,1,0,0,0,961,963,5,121,0,0,962,
        964,3,116,58,0,963,962,1,0,0,0,963,964,1,0,0,0,964,965,1,0,0,0,965,
        966,5,129,0,0,966,967,5,145,0,0,967,968,3,152,76,0,968,969,5,121,
        0,0,969,971,1,0,0,0,970,942,1,0,0,0,970,953,1,0,0,0,971,117,1,0,
        0,0,972,973,3,152,76,0,973,974,5,119,0,0,974,975,5,107,0,0,975,984,
        1,0,0,0,976,977,3,152,76,0,977,978,5,119,0,0,978,979,5,125,0,0,979,
        980,3,108,54,0,980,981,5,141,0,0,981,984,1,0,0,0,982,984,3,152,76,
        0,983,972,1,0,0,0,983,976,1,0,0,0,983,982,1,0,0,0,984,119,1,0,0,
        0,985,990,3,122,61,0,986,987,5,113,0,0,987,989,3,122,61,0,988,986,
        1,0,0,0,989,992,1,0,0,0,990,988,1,0,0,0,990,991,1,0,0,0,991,121,
        1,0,0,0,992,990,1,0,0,0,993,994,3,152,76,0,994,995,5,6,0,0,995,996,
        5,127,0,0,996,997,3,36,18,0,997,998,5,143,0,0,998,1004,1,0,0,0,999,
        1000,3,108,54,0,1000,1001,5,6,0,0,1001,1002,3,152,76,0,1002,1004,
        1,0,0,0,1003,993,1,0,0,0,1003,999,1,0,0,0,1004,123,1,0,0,0,1005,
        1013,3,156,78,0,1006,1007,3,132,66,0,1007,1008,5,117,0,0,1008,1010,
        1,0,0,0,1009,1006,1,0,0,0,1009,1010,1,0,0,0,1010,1011,1,0,0,0,1011,
        1013,3,126,63,0,1012,1005,1,0,0,0,1012,1009,1,0,0,0,1013,125,1,0,
        0,0,1014,1019,3,152,76,0,1015,1016,5,117,0,0,1016,1018,3,152,76,
        0,1017,1015,1,0,0,0,1018,1021,1,0,0,0,1019,1017,1,0,0,0,1019,1020,
        1,0,0,0,1020,127,1,0,0,0,1021,1019,1,0,0,0,1022,1023,6,64,-1,0,1023,
        1032,3,132,66,0,1024,1032,3,130,65,0,1025,1026,5,127,0,0,1026,1027,
        3,36,18,0,1027,1028,5,143,0,0,1028,1032,1,0,0,0,1029,1032,3,116,
        58,0,1030,1032,3,156,78,0,1031,1022,1,0,0,0,1031,1024,1,0,0,0,1031,
        1025,1,0,0,0,1031,1029,1,0,0,0,1031,1030,1,0,0,0,1032,1041,1,0,0,
        0,1033,1037,10,3,0,0,1034,1038,3,150,75,0,1035,1036,5,6,0,0,1036,
        1038,3,152,76,0,1037,1034,1,0,0,0,1037,1035,1,0,0,0,1038,1040,1,
        0,0,0,1039,1033,1,0,0,0,1040,1043,1,0,0,0,1041,1039,1,0,0,0,1041,
        1042,1,0,0,0,1042,129,1,0,0,0,1043,1041,1,0,0,0,1044,1045,3,152,
        76,0,1045,1047,5,127,0,0,1046,1048,3,134,67,0,1047,1046,1,0,0,0,
        1047,1048,1,0,0,0,1048,1049,1,0,0,0,1049,1050,5,143,0,0,1050,131,
        1,0,0,0,1051,1052,3,136,68,0,1052,1053,5,117,0,0,1053,1055,1,0,0,
        0,1054,1051,1,0,0,0,1054,1055,1,0,0,0,1055,1056,1,0,0,0,1056,1057,
        3,152,76,0,1057,133,1,0,0,0,1058,1063,3,108,54,0,1059,1060,5,113,
        0,0,1060,1062,3,108,54,0,1061,1059,1,0,0,0,1062,1065,1,0,0,0,1063,
        1061,1,0,0,0,1063,1064,1,0,0,0,1064,135,1,0,0,0,1065,1063,1,0,0,
        0,1066,1067,3,152,76,0,1067,137,1,0,0,0,1068,1077,5,103,0,0,1069,
        1070,5,117,0,0,1070,1077,7,11,0,0,1071,1072,5,105,0,0,1072,1074,
        5,117,0,0,1073,1075,7,11,0,0,1074,1073,1,0,0,0,1074,1075,1,0,0,0,
        1075,1077,1,0,0,0,1076,1068,1,0,0,0,1076,1069,1,0,0,0,1076,1071,
        1,0,0,0,1077,139,1,0,0,0,1078,1080,7,12,0,0,1079,1078,1,0,0,0,1079,
        1080,1,0,0,0,1080,1087,1,0,0,0,1081,1088,3,138,69,0,1082,1088,5,
        104,0,0,1083,1088,5,105,0,0,1084,1088,5,106,0,0,1085,1088,5,41,0,
        0,1086,1088,5,54,0,0,1087,1081,1,0,0,0,1087,1082,1,0,0,0,1087,1083,
        1,0,0,0,1087,1084,1,0,0,0,1087,1085,1,0,0,0,1087,1086,1,0,0,0,1088,
        141,1,0,0,0,1089,1093,3,140,70,0,1090,1093,5,107,0,0,1091,1093,5,
        56,0,0,1092,1089,1,0,0,0,1092,1090,1,0,0,0,1092,1091,1,0,0,0,1093,
        143,1,0,0,0,1094,1095,7,13,0,0,1095,145,1,0,0,0,1096,1097,7,14,0,
        0,1097,147,1,0,0,0,1098,1099,7,15,0,0,1099,149,1,0,0,0,1100,1103,
        5,102,0,0,1101,1103,3,148,74,0,1102,1100,1,0,0,0,1102,1101,1,0,0,
        0,1103,151,1,0,0,0,1104,1108,5,102,0,0,1105,1108,3,144,72,0,1106,
        1108,3,146,73,0,1107,1104,1,0,0,0,1107,1105,1,0,0,0,1107,1106,1,
        0,0,0,1108,153,1,0,0,0,1109,1110,5,107,0,0,1110,1111,5,119,0,0,1111,
        1112,3,140,70,0,1112,155,1,0,0,0,1113,1114,5,125,0,0,1114,1115,3,
        152,76,0,1115,1116,5,141,0,0,1116,157,1,0,0,0,132,161,168,172,179,
        194,206,218,234,245,253,256,267,273,283,292,295,299,302,306,309,
        312,315,318,322,326,329,332,335,339,342,351,357,378,395,412,418,
        424,435,437,448,451,457,465,471,473,477,482,485,488,492,496,499,
        501,504,508,512,515,517,519,524,535,541,548,553,557,561,567,569,
        576,584,587,590,609,623,639,651,663,671,675,682,688,697,701,725,
        742,754,764,767,771,774,787,804,808,814,821,833,837,840,849,863,
        890,899,901,903,911,916,924,934,937,947,958,963,970,983,990,1003,
        1009,1012,1019,1031,1037,1041,1047,1054,1063,1074,1076,1079,1087,
        1092,1102,1107
    ]

class HogQLParser ( Parser ):

    grammarFileName = "HogQLParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'->'", "'*'", "'`'", "'\\'", "':'", "','", "'||'", 
                     "'-'", "'$'", "'.'", "'=='", "'='", "'>='", "'>'", 
                     "'#'", "'~*'", "'=~*'", "'{'", "'['", "'('", "'<='", 
                     "'<'", "<INVALID>", "'!~*'", "'!~'", "'??'", "'%'", 
                     "'+'", "'?'", "'\"'", "'''", "'~'", "'=~'", "'}'", 
                     "']'", "')'", "';'", "'/'", "'_'" ]

    symbolicNames = [ "<INVALID>", "ALL", "AND", "ANTI", "ANY", "ARRAY", 
                      "AS", "ASCENDING", "ASOF", "BETWEEN", "BOTH", "BY", 
                      "CASE", "CAST", "COHORT", "COLLATE", "CROSS", "CUBE", 
                      "CURRENT", "DATE", "DAY", "DESC", "DESCENDING", "DISTINCT", 
                      "ELSE", "END", "EXTRACT", "FINAL", "FIRST", "FN", 
                      "FOLLOWING", "FOR", "FROM", "FULL", "GROUP", "HAVING", 
                      "HOUR", "ID", "IF", "ILIKE", "IN", "INF", "INNER", 
                      "INTERVAL", "IS", "JOIN", "KEY", "LAST", "LEADING", 
                      "LEFT", "LIKE", "LIMIT", "MINUTE", "MONTH", "NAN_SQL", 
                      "NOT", "NULL_SQL", "NULLS", "OFFSET", "ON", "OR", 
                      "ORDER", "OUTER", "OVER", "PARTITION", "PRECEDING", 
                      "PREWHERE", "QUARTER", "RANGE", "RETURN", "RIGHT", 
                      "ROLLUP", "ROW", "ROWS", "SAMPLE", "SECOND", "SELECT", 
                      "SEMI", "SETTINGS", "SUBSTRING", "THEN", "TIES", "TIMESTAMP", 
                      "TO", "TOP", "TOTALS", "TRAILING", "TRIM", "TRUNCATE", 
                      "UNBOUNDED", "UNION", "USING", "VAR", "WEEK", "WHEN", 
                      "WHERE", "WHILE", "WINDOW", "WITH", "YEAR", "ESCAPE_CHAR_SINGLE", 
                      "ESCAPE_CHAR_DOUBLE", "IDENTIFIER", "FLOATING_LITERAL", 
                      "OCTAL_LITERAL", "DECIMAL_LITERAL", "HEXADECIMAL_LITERAL", 
                      "STRING_LITERAL", "ARROW", "ASTERISK", "BACKQUOTE", 
                      "BACKSLASH", "COLON", "COMMA", "CONCAT", "DASH", "DOLLAR", 
                      "DOT", "EQ_DOUBLE", "EQ_SINGLE", "GT_EQ", "GT", "HASH", 
                      "IREGEX_SINGLE", "IREGEX_DOUBLE", "LBRACE", "LBRACKET", 
                      "LPAREN", "LT_EQ", "LT", "NOT_EQ", "NOT_IREGEX", "NOT_REGEX", 
                      "NULLISH", "PERCENT", "PLUS", "QUERY", "QUOTE_DOUBLE", 
                      "QUOTE_SINGLE", "REGEX_SINGLE", "REGEX_DOUBLE", "RBRACE", 
                      "RBRACKET", "RPAREN", "SEMICOLON", "SLASH", "UNDERSCORE", 
                      "MULTI_LINE_COMMENT", "SINGLE_LINE_COMMENT", "WHITESPACE" ]

    RULE_program = 0
    RULE_declaration = 1
    RULE_expression = 2
    RULE_varDecl = 3
    RULE_varAssignment = 4
    RULE_identifierList = 5
    RULE_statement = 6
    RULE_exprStmt = 7
    RULE_ifStmt = 8
    RULE_whileStmt = 9
    RULE_returnStmt = 10
    RULE_funcStmt = 11
    RULE_emptyStmt = 12
    RULE_block = 13
    RULE_dict = 14
    RULE_kvPair = 15
    RULE_kvPairList = 16
    RULE_select = 17
    RULE_selectUnionStmt = 18
    RULE_selectStmtWithParens = 19
    RULE_selectStmt = 20
    RULE_withClause = 21
    RULE_topClause = 22
    RULE_fromClause = 23
    RULE_arrayJoinClause = 24
    RULE_windowClause = 25
    RULE_prewhereClause = 26
    RULE_whereClause = 27
    RULE_groupByClause = 28
    RULE_havingClause = 29
    RULE_orderByClause = 30
    RULE_projectionOrderByClause = 31
    RULE_limitAndOffsetClause = 32
    RULE_offsetOnlyClause = 33
    RULE_settingsClause = 34
    RULE_joinExpr = 35
    RULE_joinOp = 36
    RULE_joinOpCross = 37
    RULE_joinConstraintClause = 38
    RULE_sampleClause = 39
    RULE_orderExprList = 40
    RULE_orderExpr = 41
    RULE_ratioExpr = 42
    RULE_settingExprList = 43
    RULE_settingExpr = 44
    RULE_windowExpr = 45
    RULE_winPartitionByClause = 46
    RULE_winOrderByClause = 47
    RULE_winFrameClause = 48
    RULE_winFrameExtend = 49
    RULE_winFrameBound = 50
    RULE_expr = 51
    RULE_columnTypeExpr = 52
    RULE_columnExprList = 53
    RULE_columnExpr = 54
    RULE_columnArgList = 55
    RULE_columnArgExpr = 56
    RULE_columnLambdaExpr = 57
    RULE_hogqlxTagElement = 58
    RULE_hogqlxTagAttribute = 59
    RULE_withExprList = 60
    RULE_withExpr = 61
    RULE_columnIdentifier = 62
    RULE_nestedIdentifier = 63
    RULE_tableExpr = 64
    RULE_tableFunctionExpr = 65
    RULE_tableIdentifier = 66
    RULE_tableArgList = 67
    RULE_databaseIdentifier = 68
    RULE_floatingLiteral = 69
    RULE_numberLiteral = 70
    RULE_literal = 71
    RULE_interval = 72
    RULE_keyword = 73
    RULE_keywordForAlias = 74
    RULE_alias = 75
    RULE_identifier = 76
    RULE_enumValue = 77
    RULE_placeholder = 78

    ruleNames =  [ "program", "declaration", "expression", "varDecl", "varAssignment", 
                   "identifierList", "statement", "exprStmt", "ifStmt", 
                   "whileStmt", "returnStmt", "funcStmt", "emptyStmt", "block", 
                   "dict", "kvPair", "kvPairList", "select", "selectUnionStmt", 
                   "selectStmtWithParens", "selectStmt", "withClause", "topClause", 
                   "fromClause", "arrayJoinClause", "windowClause", "prewhereClause", 
                   "whereClause", "groupByClause", "havingClause", "orderByClause", 
                   "projectionOrderByClause", "limitAndOffsetClause", "offsetOnlyClause", 
                   "settingsClause", "joinExpr", "joinOp", "joinOpCross", 
                   "joinConstraintClause", "sampleClause", "orderExprList", 
                   "orderExpr", "ratioExpr", "settingExprList", "settingExpr", 
                   "windowExpr", "winPartitionByClause", "winOrderByClause", 
                   "winFrameClause", "winFrameExtend", "winFrameBound", 
                   "expr", "columnTypeExpr", "columnExprList", "columnExpr", 
                   "columnArgList", "columnArgExpr", "columnLambdaExpr", 
                   "hogqlxTagElement", "hogqlxTagAttribute", "withExprList", 
                   "withExpr", "columnIdentifier", "nestedIdentifier", "tableExpr", 
                   "tableFunctionExpr", "tableIdentifier", "tableArgList", 
                   "databaseIdentifier", "floatingLiteral", "numberLiteral", 
                   "literal", "interval", "keyword", "keywordForAlias", 
                   "alias", "identifier", "enumValue", "placeholder" ]

    EOF = Token.EOF
    ALL=1
    AND=2
    ANTI=3
    ANY=4
    ARRAY=5
    AS=6
    ASCENDING=7
    ASOF=8
    BETWEEN=9
    BOTH=10
    BY=11
    CASE=12
    CAST=13
    COHORT=14
    COLLATE=15
    CROSS=16
    CUBE=17
    CURRENT=18
    DATE=19
    DAY=20
    DESC=21
    DESCENDING=22
    DISTINCT=23
    ELSE=24
    END=25
    EXTRACT=26
    FINAL=27
    FIRST=28
    FN=29
    FOLLOWING=30
    FOR=31
    FROM=32
    FULL=33
    GROUP=34
    HAVING=35
    HOUR=36
    ID=37
    IF=38
    ILIKE=39
    IN=40
    INF=41
    INNER=42
    INTERVAL=43
    IS=44
    JOIN=45
    KEY=46
    LAST=47
    LEADING=48
    LEFT=49
    LIKE=50
    LIMIT=51
    MINUTE=52
    MONTH=53
    NAN_SQL=54
    NOT=55
    NULL_SQL=56
    NULLS=57
    OFFSET=58
    ON=59
    OR=60
    ORDER=61
    OUTER=62
    OVER=63
    PARTITION=64
    PRECEDING=65
    PREWHERE=66
    QUARTER=67
    RANGE=68
    RETURN=69
    RIGHT=70
    ROLLUP=71
    ROW=72
    ROWS=73
    SAMPLE=74
    SECOND=75
    SELECT=76
    SEMI=77
    SETTINGS=78
    SUBSTRING=79
    THEN=80
    TIES=81
    TIMESTAMP=82
    TO=83
    TOP=84
    TOTALS=85
    TRAILING=86
    TRIM=87
    TRUNCATE=88
    UNBOUNDED=89
    UNION=90
    USING=91
    VAR=92
    WEEK=93
    WHEN=94
    WHERE=95
    WHILE=96
    WINDOW=97
    WITH=98
    YEAR=99
    ESCAPE_CHAR_SINGLE=100
    ESCAPE_CHAR_DOUBLE=101
    IDENTIFIER=102
    FLOATING_LITERAL=103
    OCTAL_LITERAL=104
    DECIMAL_LITERAL=105
    HEXADECIMAL_LITERAL=106
    STRING_LITERAL=107
    ARROW=108
    ASTERISK=109
    BACKQUOTE=110
    BACKSLASH=111
    COLON=112
    COMMA=113
    CONCAT=114
    DASH=115
    DOLLAR=116
    DOT=117
    EQ_DOUBLE=118
    EQ_SINGLE=119
    GT_EQ=120
    GT=121
    HASH=122
    IREGEX_SINGLE=123
    IREGEX_DOUBLE=124
    LBRACE=125
    LBRACKET=126
    LPAREN=127
    LT_EQ=128
    LT=129
    NOT_EQ=130
    NOT_IREGEX=131
    NOT_REGEX=132
    NULLISH=133
    PERCENT=134
    PLUS=135
    QUERY=136
    QUOTE_DOUBLE=137
    QUOTE_SINGLE=138
    REGEX_SINGLE=139
    REGEX_DOUBLE=140
    RBRACE=141
    RBRACKET=142
    RPAREN=143
    SEMICOLON=144
    SLASH=145
    UNDERSCORE=146
    MULTI_LINE_COMMENT=147
    SINGLE_LINE_COMMENT=148
    WHITESPACE=149

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class ProgramContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(HogQLParser.EOF, 0)

        def declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.DeclarationContext)
            else:
                return self.getTypedRuleContext(HogQLParser.DeclarationContext,i)


        def getRuleIndex(self):
            return HogQLParser.RULE_program

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProgram" ):
                return visitor.visitProgram(self)
            else:
                return visitor.visitChildren(self)




    def program(self):

        localctx = HogQLParser.ProgramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_program)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 161
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -2) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -2294531439745564673) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 32833) != 0):
                self.state = 158
                self.declaration()
                self.state = 163
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 164
            self.match(HogQLParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def varDecl(self):
            return self.getTypedRuleContext(HogQLParser.VarDeclContext,0)


        def statement(self):
            return self.getTypedRuleContext(HogQLParser.StatementContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_declaration

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclaration" ):
                return visitor.visitDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def declaration(self):

        localctx = HogQLParser.DeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_declaration)
        try:
            self.state = 168
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [92]:
                self.enterOuterAlt(localctx, 1)
                self.state = 166
                self.varDecl()
                pass
            elif token in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 109, 115, 117, 125, 126, 127, 129, 135, 144]:
                self.enterOuterAlt(localctx, 2)
                self.state = 167
                self.statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def dict_(self):
            return self.getTypedRuleContext(HogQLParser.DictContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_expression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression" ):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)




    def expression(self):

        localctx = HogQLParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_expression)
        try:
            self.state = 172
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 170
                self.columnExpr(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 171
                self.dict_()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VAR(self):
            return self.getToken(HogQLParser.VAR, 0)

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def SEMICOLON(self):
            return self.getToken(HogQLParser.SEMICOLON, 0)

        def COLON(self):
            return self.getToken(HogQLParser.COLON, 0)

        def EQ_SINGLE(self):
            return self.getToken(HogQLParser.EQ_SINGLE, 0)

        def expression(self):
            return self.getTypedRuleContext(HogQLParser.ExpressionContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_varDecl

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarDecl" ):
                return visitor.visitVarDecl(self)
            else:
                return visitor.visitChildren(self)




    def varDecl(self):

        localctx = HogQLParser.VarDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_varDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 174
            self.match(HogQLParser.VAR)
            self.state = 175
            self.identifier()
            self.state = 179
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==112:
                self.state = 176
                self.match(HogQLParser.COLON)
                self.state = 177
                self.match(HogQLParser.EQ_SINGLE)
                self.state = 178
                self.expression()


            self.state = 181
            self.match(HogQLParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarAssignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def COLON(self):
            return self.getToken(HogQLParser.COLON, 0)

        def EQ_SINGLE(self):
            return self.getToken(HogQLParser.EQ_SINGLE, 0)

        def expression(self):
            return self.getTypedRuleContext(HogQLParser.ExpressionContext,0)


        def SEMICOLON(self):
            return self.getToken(HogQLParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_varAssignment

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarAssignment" ):
                return visitor.visitVarAssignment(self)
            else:
                return visitor.visitChildren(self)




    def varAssignment(self):

        localctx = HogQLParser.VarAssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_varAssignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 183
            self.identifier()
            self.state = 184
            self.match(HogQLParser.COLON)
            self.state = 185
            self.match(HogQLParser.EQ_SINGLE)
            self.state = 186
            self.expression()
            self.state = 187
            self.match(HogQLParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(HogQLParser.IdentifierContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_identifierList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifierList" ):
                return visitor.visitIdentifierList(self)
            else:
                return visitor.visitChildren(self)




    def identifierList(self):

        localctx = HogQLParser.IdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_identifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 189
            self.identifier()
            self.state = 194
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==113:
                self.state = 190
                self.match(HogQLParser.COMMA)
                self.state = 191
                self.identifier()
                self.state = 196
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def returnStmt(self):
            return self.getTypedRuleContext(HogQLParser.ReturnStmtContext,0)


        def emptyStmt(self):
            return self.getTypedRuleContext(HogQLParser.EmptyStmtContext,0)


        def exprStmt(self):
            return self.getTypedRuleContext(HogQLParser.ExprStmtContext,0)


        def ifStmt(self):
            return self.getTypedRuleContext(HogQLParser.IfStmtContext,0)


        def whileStmt(self):
            return self.getTypedRuleContext(HogQLParser.WhileStmtContext,0)


        def funcStmt(self):
            return self.getTypedRuleContext(HogQLParser.FuncStmtContext,0)


        def varAssignment(self):
            return self.getTypedRuleContext(HogQLParser.VarAssignmentContext,0)


        def block(self):
            return self.getTypedRuleContext(HogQLParser.BlockContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_statement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement" ):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)




    def statement(self):

        localctx = HogQLParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_statement)
        try:
            self.state = 206
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 197
                self.returnStmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 198
                self.emptyStmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 199
                self.exprStmt()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 200
                self.ifStmt()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 201
                self.whileStmt()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 202
                self.funcStmt()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 203
                self.varAssignment()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 204
                self.returnStmt()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 205
                self.block()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(HogQLParser.ExpressionContext,0)


        def SEMICOLON(self):
            return self.getToken(HogQLParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_exprStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExprStmt" ):
                return visitor.visitExprStmt(self)
            else:
                return visitor.visitChildren(self)




    def exprStmt(self):

        localctx = HogQLParser.ExprStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_exprStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 208
            self.expression()
            self.state = 209
            self.match(HogQLParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(HogQLParser.IF, 0)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(HogQLParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.StatementContext)
            else:
                return self.getTypedRuleContext(HogQLParser.StatementContext,i)


        def ELSE(self):
            return self.getToken(HogQLParser.ELSE, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_ifStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfStmt" ):
                return visitor.visitIfStmt(self)
            else:
                return visitor.visitChildren(self)




    def ifStmt(self):

        localctx = HogQLParser.IfStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_ifStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 211
            self.match(HogQLParser.IF)
            self.state = 212
            self.match(HogQLParser.LPAREN)
            self.state = 213
            self.expression()
            self.state = 214
            self.match(HogQLParser.RPAREN)
            self.state = 215
            self.statement()
            self.state = 218
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
            if la_ == 1:
                self.state = 216
                self.match(HogQLParser.ELSE)
                self.state = 217
                self.statement()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(HogQLParser.WHILE, 0)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(HogQLParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def statement(self):
            return self.getTypedRuleContext(HogQLParser.StatementContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_whileStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhileStmt" ):
                return visitor.visitWhileStmt(self)
            else:
                return visitor.visitChildren(self)




    def whileStmt(self):

        localctx = HogQLParser.WhileStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_whileStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 220
            self.match(HogQLParser.WHILE)
            self.state = 221
            self.match(HogQLParser.LPAREN)
            self.state = 222
            self.expression()
            self.state = 223
            self.match(HogQLParser.RPAREN)
            self.state = 224
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(HogQLParser.RETURN, 0)

        def expression(self):
            return self.getTypedRuleContext(HogQLParser.ExpressionContext,0)


        def SEMICOLON(self):
            return self.getToken(HogQLParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_returnStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturnStmt" ):
                return visitor.visitReturnStmt(self)
            else:
                return visitor.visitChildren(self)




    def returnStmt(self):

        localctx = HogQLParser.ReturnStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_returnStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 226
            self.match(HogQLParser.RETURN)
            self.state = 227
            self.expression()
            self.state = 228
            self.match(HogQLParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FuncStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FN(self):
            return self.getToken(HogQLParser.FN, 0)

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def block(self):
            return self.getTypedRuleContext(HogQLParser.BlockContext,0)


        def identifierList(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierListContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_funcStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFuncStmt" ):
                return visitor.visitFuncStmt(self)
            else:
                return visitor.visitChildren(self)




    def funcStmt(self):

        localctx = HogQLParser.FuncStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_funcStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 230
            self.match(HogQLParser.FN)
            self.state = 231
            self.identifier()
            self.state = 232
            self.match(HogQLParser.LPAREN)
            self.state = 234
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -90074192107536386) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 339033980927) != 0):
                self.state = 233
                self.identifierList()


            self.state = 236
            self.match(HogQLParser.RPAREN)
            self.state = 237
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EmptyStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMICOLON(self):
            return self.getToken(HogQLParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_emptyStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEmptyStmt" ):
                return visitor.visitEmptyStmt(self)
            else:
                return visitor.visitChildren(self)




    def emptyStmt(self):

        localctx = HogQLParser.EmptyStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_emptyStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 239
            self.match(HogQLParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(HogQLParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(HogQLParser.RBRACE, 0)

        def declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.DeclarationContext)
            else:
                return self.getTypedRuleContext(HogQLParser.DeclarationContext,i)


        def getRuleIndex(self):
            return HogQLParser.RULE_block

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlock" ):
                return visitor.visitBlock(self)
            else:
                return visitor.visitChildren(self)




    def block(self):

        localctx = HogQLParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 241
            self.match(HogQLParser.LBRACE)
            self.state = 245
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -2) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -2294531439745564673) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 32833) != 0):
                self.state = 242
                self.declaration()
                self.state = 247
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 248
            self.match(HogQLParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DictContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(HogQLParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(HogQLParser.RBRACE, 0)

        def kvPairList(self):
            return self.getTypedRuleContext(HogQLParser.KvPairListContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_dict

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDict" ):
                return visitor.visitDict(self)
            else:
                return visitor.visitChildren(self)




    def dict_(self):

        localctx = HogQLParser.DictContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_dict)
        self._la = 0 # Token type
        try:
            self.state = 256
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [112, 113, 141, 143, 144]:
                self.enterOuterAlt(localctx, 1)

                pass
            elif token in [125]:
                self.enterOuterAlt(localctx, 2)
                self.state = 251
                self.match(HogQLParser.LBRACE)
                self.state = 253
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -536870914) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -2294249969332256769) != 0) or _la==129 or _la==135:
                    self.state = 252
                    self.kvPairList()


                self.state = 255
                self.match(HogQLParser.RBRACE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KvPairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ExpressionContext,i)


        def COLON(self):
            return self.getToken(HogQLParser.COLON, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_kvPair

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKvPair" ):
                return visitor.visitKvPair(self)
            else:
                return visitor.visitChildren(self)




    def kvPair(self):

        localctx = HogQLParser.KvPairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_kvPair)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 258
            self.expression()
            self.state = 259
            self.match(HogQLParser.COLON)
            self.state = 260
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KvPairListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def kvPair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.KvPairContext)
            else:
                return self.getTypedRuleContext(HogQLParser.KvPairContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_kvPairList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKvPairList" ):
                return visitor.visitKvPairList(self)
            else:
                return visitor.visitChildren(self)




    def kvPairList(self):

        localctx = HogQLParser.KvPairListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_kvPairList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 262
            self.kvPair()
            self.state = 267
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==113:
                self.state = 263
                self.match(HogQLParser.COMMA)
                self.state = 264
                self.kvPair()
                self.state = 269
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(HogQLParser.EOF, 0)

        def selectUnionStmt(self):
            return self.getTypedRuleContext(HogQLParser.SelectUnionStmtContext,0)


        def selectStmt(self):
            return self.getTypedRuleContext(HogQLParser.SelectStmtContext,0)


        def hogqlxTagElement(self):
            return self.getTypedRuleContext(HogQLParser.HogqlxTagElementContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_select

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelect" ):
                return visitor.visitSelect(self)
            else:
                return visitor.visitChildren(self)




    def select(self):

        localctx = HogQLParser.SelectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_select)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 273
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
            if la_ == 1:
                self.state = 270
                self.selectUnionStmt()
                pass

            elif la_ == 2:
                self.state = 271
                self.selectStmt()
                pass

            elif la_ == 3:
                self.state = 272
                self.hogqlxTagElement()
                pass


            self.state = 275
            self.match(HogQLParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectUnionStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selectStmtWithParens(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.SelectStmtWithParensContext)
            else:
                return self.getTypedRuleContext(HogQLParser.SelectStmtWithParensContext,i)


        def UNION(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.UNION)
            else:
                return self.getToken(HogQLParser.UNION, i)

        def ALL(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.ALL)
            else:
                return self.getToken(HogQLParser.ALL, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_selectUnionStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectUnionStmt" ):
                return visitor.visitSelectUnionStmt(self)
            else:
                return visitor.visitChildren(self)




    def selectUnionStmt(self):

        localctx = HogQLParser.SelectUnionStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_selectUnionStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 277
            self.selectStmtWithParens()
            self.state = 283
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==90:
                self.state = 278
                self.match(HogQLParser.UNION)
                self.state = 279
                self.match(HogQLParser.ALL)
                self.state = 280
                self.selectStmtWithParens()
                self.state = 285
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectStmtWithParensContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selectStmt(self):
            return self.getTypedRuleContext(HogQLParser.SelectStmtContext,0)


        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)

        def selectUnionStmt(self):
            return self.getTypedRuleContext(HogQLParser.SelectUnionStmtContext,0)


        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def placeholder(self):
            return self.getTypedRuleContext(HogQLParser.PlaceholderContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_selectStmtWithParens

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectStmtWithParens" ):
                return visitor.visitSelectStmtWithParens(self)
            else:
                return visitor.visitChildren(self)




    def selectStmtWithParens(self):

        localctx = HogQLParser.SelectStmtWithParensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_selectStmtWithParens)
        try:
            self.state = 292
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [76, 98]:
                self.enterOuterAlt(localctx, 1)
                self.state = 286
                self.selectStmt()
                pass
            elif token in [127]:
                self.enterOuterAlt(localctx, 2)
                self.state = 287
                self.match(HogQLParser.LPAREN)
                self.state = 288
                self.selectUnionStmt()
                self.state = 289
                self.match(HogQLParser.RPAREN)
                pass
            elif token in [125]:
                self.enterOuterAlt(localctx, 3)
                self.state = 291
                self.placeholder()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.with_ = None # WithClauseContext
            self.columns = None # ColumnExprListContext
            self.from_ = None # FromClauseContext
            self.where = None # WhereClauseContext

        def SELECT(self):
            return self.getToken(HogQLParser.SELECT, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def DISTINCT(self):
            return self.getToken(HogQLParser.DISTINCT, 0)

        def topClause(self):
            return self.getTypedRuleContext(HogQLParser.TopClauseContext,0)


        def arrayJoinClause(self):
            return self.getTypedRuleContext(HogQLParser.ArrayJoinClauseContext,0)


        def prewhereClause(self):
            return self.getTypedRuleContext(HogQLParser.PrewhereClauseContext,0)


        def groupByClause(self):
            return self.getTypedRuleContext(HogQLParser.GroupByClauseContext,0)


        def WITH(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.WITH)
            else:
                return self.getToken(HogQLParser.WITH, i)

        def TOTALS(self):
            return self.getToken(HogQLParser.TOTALS, 0)

        def havingClause(self):
            return self.getTypedRuleContext(HogQLParser.HavingClauseContext,0)


        def windowClause(self):
            return self.getTypedRuleContext(HogQLParser.WindowClauseContext,0)


        def orderByClause(self):
            return self.getTypedRuleContext(HogQLParser.OrderByClauseContext,0)


        def limitAndOffsetClause(self):
            return self.getTypedRuleContext(HogQLParser.LimitAndOffsetClauseContext,0)


        def offsetOnlyClause(self):
            return self.getTypedRuleContext(HogQLParser.OffsetOnlyClauseContext,0)


        def settingsClause(self):
            return self.getTypedRuleContext(HogQLParser.SettingsClauseContext,0)


        def withClause(self):
            return self.getTypedRuleContext(HogQLParser.WithClauseContext,0)


        def fromClause(self):
            return self.getTypedRuleContext(HogQLParser.FromClauseContext,0)


        def whereClause(self):
            return self.getTypedRuleContext(HogQLParser.WhereClauseContext,0)


        def CUBE(self):
            return self.getToken(HogQLParser.CUBE, 0)

        def ROLLUP(self):
            return self.getToken(HogQLParser.ROLLUP, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_selectStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectStmt" ):
                return visitor.visitSelectStmt(self)
            else:
                return visitor.visitChildren(self)




    def selectStmt(self):

        localctx = HogQLParser.SelectStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_selectStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 295
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==98:
                self.state = 294
                localctx.with_ = self.withClause()


            self.state = 297
            self.match(HogQLParser.SELECT)
            self.state = 299
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
            if la_ == 1:
                self.state = 298
                self.match(HogQLParser.DISTINCT)


            self.state = 302
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
            if la_ == 1:
                self.state = 301
                self.topClause()


            self.state = 304
            localctx.columns = self.columnExprList()
            self.state = 306
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==32:
                self.state = 305
                localctx.from_ = self.fromClause()


            self.state = 309
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 567347999932448) != 0):
                self.state = 308
                self.arrayJoinClause()


            self.state = 312
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==66:
                self.state = 311
                self.prewhereClause()


            self.state = 315
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==95:
                self.state = 314
                localctx.where = self.whereClause()


            self.state = 318
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==34:
                self.state = 317
                self.groupByClause()


            self.state = 322
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,23,self._ctx)
            if la_ == 1:
                self.state = 320
                self.match(HogQLParser.WITH)
                self.state = 321
                _la = self._input.LA(1)
                if not(_la==17 or _la==71):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 326
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==98:
                self.state = 324
                self.match(HogQLParser.WITH)
                self.state = 325
                self.match(HogQLParser.TOTALS)


            self.state = 329
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==35:
                self.state = 328
                self.havingClause()


            self.state = 332
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==97:
                self.state = 331
                self.windowClause()


            self.state = 335
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==61:
                self.state = 334
                self.orderByClause()


            self.state = 339
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [51]:
                self.state = 337
                self.limitAndOffsetClause()
                pass
            elif token in [58]:
                self.state = 338
                self.offsetOnlyClause()
                pass
            elif token in [-1, 78, 90, 143]:
                pass
            else:
                pass
            self.state = 342
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==78:
                self.state = 341
                self.settingsClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WithClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(HogQLParser.WITH, 0)

        def withExprList(self):
            return self.getTypedRuleContext(HogQLParser.WithExprListContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_withClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWithClause" ):
                return visitor.visitWithClause(self)
            else:
                return visitor.visitChildren(self)




    def withClause(self):

        localctx = HogQLParser.WithClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_withClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 344
            self.match(HogQLParser.WITH)
            self.state = 345
            self.withExprList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TopClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TOP(self):
            return self.getToken(HogQLParser.TOP, 0)

        def DECIMAL_LITERAL(self):
            return self.getToken(HogQLParser.DECIMAL_LITERAL, 0)

        def WITH(self):
            return self.getToken(HogQLParser.WITH, 0)

        def TIES(self):
            return self.getToken(HogQLParser.TIES, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_topClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTopClause" ):
                return visitor.visitTopClause(self)
            else:
                return visitor.visitChildren(self)




    def topClause(self):

        localctx = HogQLParser.TopClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_topClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 347
            self.match(HogQLParser.TOP)
            self.state = 348
            self.match(HogQLParser.DECIMAL_LITERAL)
            self.state = 351
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
            if la_ == 1:
                self.state = 349
                self.match(HogQLParser.WITH)
                self.state = 350
                self.match(HogQLParser.TIES)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FromClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(HogQLParser.FROM, 0)

        def joinExpr(self):
            return self.getTypedRuleContext(HogQLParser.JoinExprContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_fromClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFromClause" ):
                return visitor.visitFromClause(self)
            else:
                return visitor.visitChildren(self)




    def fromClause(self):

        localctx = HogQLParser.FromClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_fromClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 353
            self.match(HogQLParser.FROM)
            self.state = 354
            self.joinExpr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayJoinClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ARRAY(self):
            return self.getToken(HogQLParser.ARRAY, 0)

        def JOIN(self):
            return self.getToken(HogQLParser.JOIN, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def LEFT(self):
            return self.getToken(HogQLParser.LEFT, 0)

        def INNER(self):
            return self.getToken(HogQLParser.INNER, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_arrayJoinClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayJoinClause" ):
                return visitor.visitArrayJoinClause(self)
            else:
                return visitor.visitChildren(self)




    def arrayJoinClause(self):

        localctx = HogQLParser.ArrayJoinClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_arrayJoinClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 357
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==42 or _la==49:
                self.state = 356
                _la = self._input.LA(1)
                if not(_la==42 or _la==49):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 359
            self.match(HogQLParser.ARRAY)
            self.state = 360
            self.match(HogQLParser.JOIN)
            self.state = 361
            self.columnExprList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WINDOW(self):
            return self.getToken(HogQLParser.WINDOW, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(HogQLParser.IdentifierContext,i)


        def AS(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.AS)
            else:
                return self.getToken(HogQLParser.AS, i)

        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.LPAREN)
            else:
                return self.getToken(HogQLParser.LPAREN, i)

        def windowExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.WindowExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.WindowExprContext,i)


        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.RPAREN)
            else:
                return self.getToken(HogQLParser.RPAREN, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_windowClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindowClause" ):
                return visitor.visitWindowClause(self)
            else:
                return visitor.visitChildren(self)




    def windowClause(self):

        localctx = HogQLParser.WindowClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_windowClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 363
            self.match(HogQLParser.WINDOW)
            self.state = 364
            self.identifier()
            self.state = 365
            self.match(HogQLParser.AS)
            self.state = 366
            self.match(HogQLParser.LPAREN)
            self.state = 367
            self.windowExpr()
            self.state = 368
            self.match(HogQLParser.RPAREN)
            self.state = 378
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==113:
                self.state = 369
                self.match(HogQLParser.COMMA)
                self.state = 370
                self.identifier()
                self.state = 371
                self.match(HogQLParser.AS)
                self.state = 372
                self.match(HogQLParser.LPAREN)
                self.state = 373
                self.windowExpr()
                self.state = 374
                self.match(HogQLParser.RPAREN)
                self.state = 380
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrewhereClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PREWHERE(self):
            return self.getToken(HogQLParser.PREWHERE, 0)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_prewhereClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrewhereClause" ):
                return visitor.visitPrewhereClause(self)
            else:
                return visitor.visitChildren(self)




    def prewhereClause(self):

        localctx = HogQLParser.PrewhereClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_prewhereClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 381
            self.match(HogQLParser.PREWHERE)
            self.state = 382
            self.columnExpr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhereClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(HogQLParser.WHERE, 0)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_whereClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhereClause" ):
                return visitor.visitWhereClause(self)
            else:
                return visitor.visitChildren(self)




    def whereClause(self):

        localctx = HogQLParser.WhereClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_whereClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 384
            self.match(HogQLParser.WHERE)
            self.state = 385
            self.columnExpr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GROUP(self):
            return self.getToken(HogQLParser.GROUP, 0)

        def BY(self):
            return self.getToken(HogQLParser.BY, 0)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def CUBE(self):
            return self.getToken(HogQLParser.CUBE, 0)

        def ROLLUP(self):
            return self.getToken(HogQLParser.ROLLUP, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_groupByClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroupByClause" ):
                return visitor.visitGroupByClause(self)
            else:
                return visitor.visitChildren(self)




    def groupByClause(self):

        localctx = HogQLParser.GroupByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_groupByClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 387
            self.match(HogQLParser.GROUP)
            self.state = 388
            self.match(HogQLParser.BY)
            self.state = 395
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
            if la_ == 1:
                self.state = 389
                _la = self._input.LA(1)
                if not(_la==17 or _la==71):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 390
                self.match(HogQLParser.LPAREN)
                self.state = 391
                self.columnExprList()
                self.state = 392
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 2:
                self.state = 394
                self.columnExprList()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HavingClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HAVING(self):
            return self.getToken(HogQLParser.HAVING, 0)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_havingClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHavingClause" ):
                return visitor.visitHavingClause(self)
            else:
                return visitor.visitChildren(self)




    def havingClause(self):

        localctx = HogQLParser.HavingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_havingClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 397
            self.match(HogQLParser.HAVING)
            self.state = 398
            self.columnExpr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(HogQLParser.ORDER, 0)

        def BY(self):
            return self.getToken(HogQLParser.BY, 0)

        def orderExprList(self):
            return self.getTypedRuleContext(HogQLParser.OrderExprListContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_orderByClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrderByClause" ):
                return visitor.visitOrderByClause(self)
            else:
                return visitor.visitChildren(self)




    def orderByClause(self):

        localctx = HogQLParser.OrderByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_orderByClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 400
            self.match(HogQLParser.ORDER)
            self.state = 401
            self.match(HogQLParser.BY)
            self.state = 402
            self.orderExprList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProjectionOrderByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(HogQLParser.ORDER, 0)

        def BY(self):
            return self.getToken(HogQLParser.BY, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_projectionOrderByClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProjectionOrderByClause" ):
                return visitor.visitProjectionOrderByClause(self)
            else:
                return visitor.visitChildren(self)




    def projectionOrderByClause(self):

        localctx = HogQLParser.ProjectionOrderByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_projectionOrderByClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 404
            self.match(HogQLParser.ORDER)
            self.state = 405
            self.match(HogQLParser.BY)
            self.state = 406
            self.columnExprList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LimitAndOffsetClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIMIT(self):
            return self.getToken(HogQLParser.LIMIT, 0)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)


        def COMMA(self):
            return self.getToken(HogQLParser.COMMA, 0)

        def BY(self):
            return self.getToken(HogQLParser.BY, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def WITH(self):
            return self.getToken(HogQLParser.WITH, 0)

        def TIES(self):
            return self.getToken(HogQLParser.TIES, 0)

        def OFFSET(self):
            return self.getToken(HogQLParser.OFFSET, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_limitAndOffsetClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLimitAndOffsetClause" ):
                return visitor.visitLimitAndOffsetClause(self)
            else:
                return visitor.visitChildren(self)




    def limitAndOffsetClause(self):

        localctx = HogQLParser.LimitAndOffsetClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_limitAndOffsetClause)
        self._la = 0 # Token type
        try:
            self.state = 437
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 408
                self.match(HogQLParser.LIMIT)
                self.state = 409
                self.columnExpr(0)
                self.state = 412
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==113:
                    self.state = 410
                    self.match(HogQLParser.COMMA)
                    self.state = 411
                    self.columnExpr(0)


                self.state = 418
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [98]:
                    self.state = 414
                    self.match(HogQLParser.WITH)
                    self.state = 415
                    self.match(HogQLParser.TIES)
                    pass
                elif token in [11]:
                    self.state = 416
                    self.match(HogQLParser.BY)
                    self.state = 417
                    self.columnExprList()
                    pass
                elif token in [-1, 78, 90, 143]:
                    pass
                else:
                    pass
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 420
                self.match(HogQLParser.LIMIT)
                self.state = 421
                self.columnExpr(0)
                self.state = 424
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==98:
                    self.state = 422
                    self.match(HogQLParser.WITH)
                    self.state = 423
                    self.match(HogQLParser.TIES)


                self.state = 426
                self.match(HogQLParser.OFFSET)
                self.state = 427
                self.columnExpr(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 429
                self.match(HogQLParser.LIMIT)
                self.state = 430
                self.columnExpr(0)
                self.state = 431
                self.match(HogQLParser.OFFSET)
                self.state = 432
                self.columnExpr(0)
                self.state = 435
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 433
                    self.match(HogQLParser.BY)
                    self.state = 434
                    self.columnExprList()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OffsetOnlyClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OFFSET(self):
            return self.getToken(HogQLParser.OFFSET, 0)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_offsetOnlyClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOffsetOnlyClause" ):
                return visitor.visitOffsetOnlyClause(self)
            else:
                return visitor.visitChildren(self)




    def offsetOnlyClause(self):

        localctx = HogQLParser.OffsetOnlyClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_offsetOnlyClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 439
            self.match(HogQLParser.OFFSET)
            self.state = 440
            self.columnExpr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SettingsClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SETTINGS(self):
            return self.getToken(HogQLParser.SETTINGS, 0)

        def settingExprList(self):
            return self.getTypedRuleContext(HogQLParser.SettingExprListContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_settingsClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSettingsClause" ):
                return visitor.visitSettingsClause(self)
            else:
                return visitor.visitChildren(self)




    def settingsClause(self):

        localctx = HogQLParser.SettingsClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_settingsClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 442
            self.match(HogQLParser.SETTINGS)
            self.state = 443
            self.settingExprList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return HogQLParser.RULE_joinExpr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class JoinExprOpContext(JoinExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.JoinExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def joinExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.JoinExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.JoinExprContext,i)

        def JOIN(self):
            return self.getToken(HogQLParser.JOIN, 0)
        def joinConstraintClause(self):
            return self.getTypedRuleContext(HogQLParser.JoinConstraintClauseContext,0)

        def joinOp(self):
            return self.getTypedRuleContext(HogQLParser.JoinOpContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinExprOp" ):
                return visitor.visitJoinExprOp(self)
            else:
                return visitor.visitChildren(self)


    class JoinExprTableContext(JoinExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.JoinExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tableExpr(self):
            return self.getTypedRuleContext(HogQLParser.TableExprContext,0)

        def FINAL(self):
            return self.getToken(HogQLParser.FINAL, 0)
        def sampleClause(self):
            return self.getTypedRuleContext(HogQLParser.SampleClauseContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinExprTable" ):
                return visitor.visitJoinExprTable(self)
            else:
                return visitor.visitChildren(self)


    class JoinExprParensContext(JoinExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.JoinExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def joinExpr(self):
            return self.getTypedRuleContext(HogQLParser.JoinExprContext,0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinExprParens" ):
                return visitor.visitJoinExprParens(self)
            else:
                return visitor.visitChildren(self)


    class JoinExprCrossOpContext(JoinExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.JoinExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def joinExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.JoinExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.JoinExprContext,i)

        def joinOpCross(self):
            return self.getTypedRuleContext(HogQLParser.JoinOpCrossContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinExprCrossOp" ):
                return visitor.visitJoinExprCrossOp(self)
            else:
                return visitor.visitChildren(self)



    def joinExpr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = HogQLParser.JoinExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 70
        self.enterRecursionRule(localctx, 70, self.RULE_joinExpr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 457
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
            if la_ == 1:
                localctx = HogQLParser.JoinExprTableContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 446
                self.tableExpr(0)
                self.state = 448
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
                if la_ == 1:
                    self.state = 447
                    self.match(HogQLParser.FINAL)


                self.state = 451
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
                if la_ == 1:
                    self.state = 450
                    self.sampleClause()


                pass

            elif la_ == 2:
                localctx = HogQLParser.JoinExprParensContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 453
                self.match(HogQLParser.LPAREN)
                self.state = 454
                self.joinExpr(0)
                self.state = 455
                self.match(HogQLParser.RPAREN)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 473
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,44,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 471
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
                    if la_ == 1:
                        localctx = HogQLParser.JoinExprCrossOpContext(self, HogQLParser.JoinExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_joinExpr)
                        self.state = 459
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 460
                        self.joinOpCross()
                        self.state = 461
                        self.joinExpr(4)
                        pass

                    elif la_ == 2:
                        localctx = HogQLParser.JoinExprOpContext(self, HogQLParser.JoinExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_joinExpr)
                        self.state = 463
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 465
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & 567356589867290) != 0) or _la==70 or _la==77:
                            self.state = 464
                            self.joinOp()


                        self.state = 467
                        self.match(HogQLParser.JOIN)
                        self.state = 468
                        self.joinExpr(0)
                        self.state = 469
                        self.joinConstraintClause()
                        pass

             
                self.state = 475
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,44,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class JoinOpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return HogQLParser.RULE_joinOp

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class JoinOpFullContext(JoinOpContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.JoinOpContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FULL(self):
            return self.getToken(HogQLParser.FULL, 0)
        def OUTER(self):
            return self.getToken(HogQLParser.OUTER, 0)
        def ALL(self):
            return self.getToken(HogQLParser.ALL, 0)
        def ANY(self):
            return self.getToken(HogQLParser.ANY, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinOpFull" ):
                return visitor.visitJoinOpFull(self)
            else:
                return visitor.visitChildren(self)


    class JoinOpInnerContext(JoinOpContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.JoinOpContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INNER(self):
            return self.getToken(HogQLParser.INNER, 0)
        def ALL(self):
            return self.getToken(HogQLParser.ALL, 0)
        def ANY(self):
            return self.getToken(HogQLParser.ANY, 0)
        def ASOF(self):
            return self.getToken(HogQLParser.ASOF, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinOpInner" ):
                return visitor.visitJoinOpInner(self)
            else:
                return visitor.visitChildren(self)


    class JoinOpLeftRightContext(JoinOpContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.JoinOpContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LEFT(self):
            return self.getToken(HogQLParser.LEFT, 0)
        def RIGHT(self):
            return self.getToken(HogQLParser.RIGHT, 0)
        def OUTER(self):
            return self.getToken(HogQLParser.OUTER, 0)
        def SEMI(self):
            return self.getToken(HogQLParser.SEMI, 0)
        def ALL(self):
            return self.getToken(HogQLParser.ALL, 0)
        def ANTI(self):
            return self.getToken(HogQLParser.ANTI, 0)
        def ANY(self):
            return self.getToken(HogQLParser.ANY, 0)
        def ASOF(self):
            return self.getToken(HogQLParser.ASOF, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinOpLeftRight" ):
                return visitor.visitJoinOpLeftRight(self)
            else:
                return visitor.visitChildren(self)



    def joinOp(self):

        localctx = HogQLParser.JoinOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_joinOp)
        self._la = 0 # Token type
        try:
            self.state = 519
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
            if la_ == 1:
                localctx = HogQLParser.JoinOpInnerContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 485
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
                if la_ == 1:
                    self.state = 477
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 274) != 0):
                        self.state = 476
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 274) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 479
                    self.match(HogQLParser.INNER)
                    pass

                elif la_ == 2:
                    self.state = 480
                    self.match(HogQLParser.INNER)
                    self.state = 482
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 274) != 0):
                        self.state = 481
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 274) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    pass

                elif la_ == 3:
                    self.state = 484
                    _la = self._input.LA(1)
                    if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 274) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass


                pass

            elif la_ == 2:
                localctx = HogQLParser.JoinOpLeftRightContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 501
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
                if la_ == 1:
                    self.state = 488
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 282) != 0) or _la==77:
                        self.state = 487
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 282) != 0) or _la==77):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 490
                    _la = self._input.LA(1)
                    if not(_la==49 or _la==70):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 492
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==62:
                        self.state = 491
                        self.match(HogQLParser.OUTER)


                    pass

                elif la_ == 2:
                    self.state = 494
                    _la = self._input.LA(1)
                    if not(_la==49 or _la==70):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 496
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==62:
                        self.state = 495
                        self.match(HogQLParser.OUTER)


                    self.state = 499
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 282) != 0) or _la==77:
                        self.state = 498
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 282) != 0) or _la==77):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    pass


                pass

            elif la_ == 3:
                localctx = HogQLParser.JoinOpFullContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 517
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
                if la_ == 1:
                    self.state = 504
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1 or _la==4:
                        self.state = 503
                        _la = self._input.LA(1)
                        if not(_la==1 or _la==4):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 506
                    self.match(HogQLParser.FULL)
                    self.state = 508
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==62:
                        self.state = 507
                        self.match(HogQLParser.OUTER)


                    pass

                elif la_ == 2:
                    self.state = 510
                    self.match(HogQLParser.FULL)
                    self.state = 512
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==62:
                        self.state = 511
                        self.match(HogQLParser.OUTER)


                    self.state = 515
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1 or _la==4:
                        self.state = 514
                        _la = self._input.LA(1)
                        if not(_la==1 or _la==4):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    pass


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinOpCrossContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CROSS(self):
            return self.getToken(HogQLParser.CROSS, 0)

        def JOIN(self):
            return self.getToken(HogQLParser.JOIN, 0)

        def COMMA(self):
            return self.getToken(HogQLParser.COMMA, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_joinOpCross

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinOpCross" ):
                return visitor.visitJoinOpCross(self)
            else:
                return visitor.visitChildren(self)




    def joinOpCross(self):

        localctx = HogQLParser.JoinOpCrossContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_joinOpCross)
        try:
            self.state = 524
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [16]:
                self.enterOuterAlt(localctx, 1)
                self.state = 521
                self.match(HogQLParser.CROSS)
                self.state = 522
                self.match(HogQLParser.JOIN)
                pass
            elif token in [113]:
                self.enterOuterAlt(localctx, 2)
                self.state = 523
                self.match(HogQLParser.COMMA)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinConstraintClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(HogQLParser.ON, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def USING(self):
            return self.getToken(HogQLParser.USING, 0)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_joinConstraintClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinConstraintClause" ):
                return visitor.visitJoinConstraintClause(self)
            else:
                return visitor.visitChildren(self)




    def joinConstraintClause(self):

        localctx = HogQLParser.JoinConstraintClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_joinConstraintClause)
        try:
            self.state = 535
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 526
                self.match(HogQLParser.ON)
                self.state = 527
                self.columnExprList()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 528
                self.match(HogQLParser.USING)
                self.state = 529
                self.match(HogQLParser.LPAREN)
                self.state = 530
                self.columnExprList()
                self.state = 531
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 533
                self.match(HogQLParser.USING)
                self.state = 534
                self.columnExprList()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SampleClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SAMPLE(self):
            return self.getToken(HogQLParser.SAMPLE, 0)

        def ratioExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.RatioExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.RatioExprContext,i)


        def OFFSET(self):
            return self.getToken(HogQLParser.OFFSET, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_sampleClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSampleClause" ):
                return visitor.visitSampleClause(self)
            else:
                return visitor.visitChildren(self)




    def sampleClause(self):

        localctx = HogQLParser.SampleClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_sampleClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 537
            self.match(HogQLParser.SAMPLE)
            self.state = 538
            self.ratioExpr()
            self.state = 541
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
            if la_ == 1:
                self.state = 539
                self.match(HogQLParser.OFFSET)
                self.state = 540
                self.ratioExpr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderExprListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def orderExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.OrderExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.OrderExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_orderExprList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrderExprList" ):
                return visitor.visitOrderExprList(self)
            else:
                return visitor.visitChildren(self)




    def orderExprList(self):

        localctx = HogQLParser.OrderExprListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_orderExprList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 543
            self.orderExpr()
            self.state = 548
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==113:
                self.state = 544
                self.match(HogQLParser.COMMA)
                self.state = 545
                self.orderExpr()
                self.state = 550
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def NULLS(self):
            return self.getToken(HogQLParser.NULLS, 0)

        def COLLATE(self):
            return self.getToken(HogQLParser.COLLATE, 0)

        def STRING_LITERAL(self):
            return self.getToken(HogQLParser.STRING_LITERAL, 0)

        def ASCENDING(self):
            return self.getToken(HogQLParser.ASCENDING, 0)

        def DESCENDING(self):
            return self.getToken(HogQLParser.DESCENDING, 0)

        def DESC(self):
            return self.getToken(HogQLParser.DESC, 0)

        def FIRST(self):
            return self.getToken(HogQLParser.FIRST, 0)

        def LAST(self):
            return self.getToken(HogQLParser.LAST, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_orderExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrderExpr" ):
                return visitor.visitOrderExpr(self)
            else:
                return visitor.visitChildren(self)




    def orderExpr(self):

        localctx = HogQLParser.OrderExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_orderExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 551
            self.columnExpr(0)
            self.state = 553
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 6291584) != 0):
                self.state = 552
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 6291584) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 557
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==57:
                self.state = 555
                self.match(HogQLParser.NULLS)
                self.state = 556
                _la = self._input.LA(1)
                if not(_la==28 or _la==47):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 561
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==15:
                self.state = 559
                self.match(HogQLParser.COLLATE)
                self.state = 560
                self.match(HogQLParser.STRING_LITERAL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RatioExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def placeholder(self):
            return self.getTypedRuleContext(HogQLParser.PlaceholderContext,0)


        def numberLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.NumberLiteralContext)
            else:
                return self.getTypedRuleContext(HogQLParser.NumberLiteralContext,i)


        def SLASH(self):
            return self.getToken(HogQLParser.SLASH, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_ratioExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRatioExpr" ):
                return visitor.visitRatioExpr(self)
            else:
                return visitor.visitChildren(self)




    def ratioExpr(self):

        localctx = HogQLParser.RatioExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_ratioExpr)
        try:
            self.state = 569
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [125]:
                self.enterOuterAlt(localctx, 1)
                self.state = 563
                self.placeholder()
                pass
            elif token in [41, 54, 103, 104, 105, 106, 115, 117, 135]:
                self.enterOuterAlt(localctx, 2)
                self.state = 564
                self.numberLiteral()
                self.state = 567
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
                if la_ == 1:
                    self.state = 565
                    self.match(HogQLParser.SLASH)
                    self.state = 566
                    self.numberLiteral()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SettingExprListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def settingExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.SettingExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.SettingExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_settingExprList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSettingExprList" ):
                return visitor.visitSettingExprList(self)
            else:
                return visitor.visitChildren(self)




    def settingExprList(self):

        localctx = HogQLParser.SettingExprListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_settingExprList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 571
            self.settingExpr()
            self.state = 576
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==113:
                self.state = 572
                self.match(HogQLParser.COMMA)
                self.state = 573
                self.settingExpr()
                self.state = 578
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SettingExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def EQ_SINGLE(self):
            return self.getToken(HogQLParser.EQ_SINGLE, 0)

        def literal(self):
            return self.getTypedRuleContext(HogQLParser.LiteralContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_settingExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSettingExpr" ):
                return visitor.visitSettingExpr(self)
            else:
                return visitor.visitChildren(self)




    def settingExpr(self):

        localctx = HogQLParser.SettingExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_settingExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 579
            self.identifier()
            self.state = 580
            self.match(HogQLParser.EQ_SINGLE)
            self.state = 581
            self.literal()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def winPartitionByClause(self):
            return self.getTypedRuleContext(HogQLParser.WinPartitionByClauseContext,0)


        def winOrderByClause(self):
            return self.getTypedRuleContext(HogQLParser.WinOrderByClauseContext,0)


        def winFrameClause(self):
            return self.getTypedRuleContext(HogQLParser.WinFrameClauseContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_windowExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindowExpr" ):
                return visitor.visitWindowExpr(self)
            else:
                return visitor.visitChildren(self)




    def windowExpr(self):

        localctx = HogQLParser.WindowExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_windowExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 584
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==64:
                self.state = 583
                self.winPartitionByClause()


            self.state = 587
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==61:
                self.state = 586
                self.winOrderByClause()


            self.state = 590
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==68 or _la==73:
                self.state = 589
                self.winFrameClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WinPartitionByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION(self):
            return self.getToken(HogQLParser.PARTITION, 0)

        def BY(self):
            return self.getToken(HogQLParser.BY, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_winPartitionByClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWinPartitionByClause" ):
                return visitor.visitWinPartitionByClause(self)
            else:
                return visitor.visitChildren(self)




    def winPartitionByClause(self):

        localctx = HogQLParser.WinPartitionByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_winPartitionByClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 592
            self.match(HogQLParser.PARTITION)
            self.state = 593
            self.match(HogQLParser.BY)
            self.state = 594
            self.columnExprList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WinOrderByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(HogQLParser.ORDER, 0)

        def BY(self):
            return self.getToken(HogQLParser.BY, 0)

        def orderExprList(self):
            return self.getTypedRuleContext(HogQLParser.OrderExprListContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_winOrderByClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWinOrderByClause" ):
                return visitor.visitWinOrderByClause(self)
            else:
                return visitor.visitChildren(self)




    def winOrderByClause(self):

        localctx = HogQLParser.WinOrderByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_winOrderByClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 596
            self.match(HogQLParser.ORDER)
            self.state = 597
            self.match(HogQLParser.BY)
            self.state = 598
            self.orderExprList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WinFrameClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def winFrameExtend(self):
            return self.getTypedRuleContext(HogQLParser.WinFrameExtendContext,0)


        def ROWS(self):
            return self.getToken(HogQLParser.ROWS, 0)

        def RANGE(self):
            return self.getToken(HogQLParser.RANGE, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_winFrameClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWinFrameClause" ):
                return visitor.visitWinFrameClause(self)
            else:
                return visitor.visitChildren(self)




    def winFrameClause(self):

        localctx = HogQLParser.WinFrameClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_winFrameClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 600
            _la = self._input.LA(1)
            if not(_la==68 or _la==73):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 601
            self.winFrameExtend()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WinFrameExtendContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return HogQLParser.RULE_winFrameExtend

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class FrameStartContext(WinFrameExtendContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.WinFrameExtendContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def winFrameBound(self):
            return self.getTypedRuleContext(HogQLParser.WinFrameBoundContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFrameStart" ):
                return visitor.visitFrameStart(self)
            else:
                return visitor.visitChildren(self)


    class FrameBetweenContext(WinFrameExtendContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.WinFrameExtendContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BETWEEN(self):
            return self.getToken(HogQLParser.BETWEEN, 0)
        def winFrameBound(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.WinFrameBoundContext)
            else:
                return self.getTypedRuleContext(HogQLParser.WinFrameBoundContext,i)

        def AND(self):
            return self.getToken(HogQLParser.AND, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFrameBetween" ):
                return visitor.visitFrameBetween(self)
            else:
                return visitor.visitChildren(self)



    def winFrameExtend(self):

        localctx = HogQLParser.WinFrameExtendContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_winFrameExtend)
        try:
            self.state = 609
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [18, 41, 54, 89, 103, 104, 105, 106, 115, 117, 135]:
                localctx = HogQLParser.FrameStartContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 603
                self.winFrameBound()
                pass
            elif token in [9]:
                localctx = HogQLParser.FrameBetweenContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 604
                self.match(HogQLParser.BETWEEN)
                self.state = 605
                self.winFrameBound()
                self.state = 606
                self.match(HogQLParser.AND)
                self.state = 607
                self.winFrameBound()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WinFrameBoundContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CURRENT(self):
            return self.getToken(HogQLParser.CURRENT, 0)

        def ROW(self):
            return self.getToken(HogQLParser.ROW, 0)

        def UNBOUNDED(self):
            return self.getToken(HogQLParser.UNBOUNDED, 0)

        def PRECEDING(self):
            return self.getToken(HogQLParser.PRECEDING, 0)

        def FOLLOWING(self):
            return self.getToken(HogQLParser.FOLLOWING, 0)

        def numberLiteral(self):
            return self.getTypedRuleContext(HogQLParser.NumberLiteralContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_winFrameBound

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWinFrameBound" ):
                return visitor.visitWinFrameBound(self)
            else:
                return visitor.visitChildren(self)




    def winFrameBound(self):

        localctx = HogQLParser.WinFrameBoundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_winFrameBound)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 623
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
            if la_ == 1:
                self.state = 611
                self.match(HogQLParser.CURRENT)
                self.state = 612
                self.match(HogQLParser.ROW)
                pass

            elif la_ == 2:
                self.state = 613
                self.match(HogQLParser.UNBOUNDED)
                self.state = 614
                self.match(HogQLParser.PRECEDING)
                pass

            elif la_ == 3:
                self.state = 615
                self.match(HogQLParser.UNBOUNDED)
                self.state = 616
                self.match(HogQLParser.FOLLOWING)
                pass

            elif la_ == 4:
                self.state = 617
                self.numberLiteral()
                self.state = 618
                self.match(HogQLParser.PRECEDING)
                pass

            elif la_ == 5:
                self.state = 620
                self.numberLiteral()
                self.state = 621
                self.match(HogQLParser.FOLLOWING)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def EOF(self):
            return self.getToken(HogQLParser.EOF, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_expr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpr" ):
                return visitor.visitExpr(self)
            else:
                return visitor.visitChildren(self)




    def expr(self):

        localctx = HogQLParser.ExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 625
            self.columnExpr(0)
            self.state = 626
            self.match(HogQLParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnTypeExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return HogQLParser.RULE_columnTypeExpr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ColumnTypeExprNestedContext(ColumnTypeExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnTypeExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(HogQLParser.IdentifierContext,i)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def columnTypeExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnTypeExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnTypeExprContext,i)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnTypeExprNested" ):
                return visitor.visitColumnTypeExprNested(self)
            else:
                return visitor.visitChildren(self)


    class ColumnTypeExprParamContext(ColumnTypeExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnTypeExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)
        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnTypeExprParam" ):
                return visitor.visitColumnTypeExprParam(self)
            else:
                return visitor.visitChildren(self)


    class ColumnTypeExprSimpleContext(ColumnTypeExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnTypeExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnTypeExprSimple" ):
                return visitor.visitColumnTypeExprSimple(self)
            else:
                return visitor.visitChildren(self)


    class ColumnTypeExprComplexContext(ColumnTypeExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnTypeExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def columnTypeExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnTypeExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnTypeExprContext,i)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnTypeExprComplex" ):
                return visitor.visitColumnTypeExprComplex(self)
            else:
                return visitor.visitChildren(self)


    class ColumnTypeExprEnumContext(ColumnTypeExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnTypeExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def enumValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.EnumValueContext)
            else:
                return self.getTypedRuleContext(HogQLParser.EnumValueContext,i)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnTypeExprEnum" ):
                return visitor.visitColumnTypeExprEnum(self)
            else:
                return visitor.visitChildren(self)



    def columnTypeExpr(self):

        localctx = HogQLParser.ColumnTypeExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_columnTypeExpr)
        self._la = 0 # Token type
        try:
            self.state = 675
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
            if la_ == 1:
                localctx = HogQLParser.ColumnTypeExprSimpleContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 628
                self.identifier()
                pass

            elif la_ == 2:
                localctx = HogQLParser.ColumnTypeExprNestedContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 629
                self.identifier()
                self.state = 630
                self.match(HogQLParser.LPAREN)
                self.state = 631
                self.identifier()
                self.state = 632
                self.columnTypeExpr()
                self.state = 639
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==113:
                    self.state = 633
                    self.match(HogQLParser.COMMA)
                    self.state = 634
                    self.identifier()
                    self.state = 635
                    self.columnTypeExpr()
                    self.state = 641
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 642
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 3:
                localctx = HogQLParser.ColumnTypeExprEnumContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 644
                self.identifier()
                self.state = 645
                self.match(HogQLParser.LPAREN)
                self.state = 646
                self.enumValue()
                self.state = 651
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==113:
                    self.state = 647
                    self.match(HogQLParser.COMMA)
                    self.state = 648
                    self.enumValue()
                    self.state = 653
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 654
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 4:
                localctx = HogQLParser.ColumnTypeExprComplexContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 656
                self.identifier()
                self.state = 657
                self.match(HogQLParser.LPAREN)
                self.state = 658
                self.columnTypeExpr()
                self.state = 663
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==113:
                    self.state = 659
                    self.match(HogQLParser.COMMA)
                    self.state = 660
                    self.columnTypeExpr()
                    self.state = 665
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 666
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 5:
                localctx = HogQLParser.ColumnTypeExprParamContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 668
                self.identifier()
                self.state = 669
                self.match(HogQLParser.LPAREN)
                self.state = 671
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -536870914) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -2294531444308967425) != 0) or _la==129 or _la==135:
                    self.state = 670
                    self.columnExprList()


                self.state = 673
                self.match(HogQLParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnExprListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_columnExprList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprList" ):
                return visitor.visitColumnExprList(self)
            else:
                return visitor.visitChildren(self)




    def columnExprList(self):

        localctx = HogQLParser.ColumnExprListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_columnExprList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 677
            self.columnExpr(0)
            self.state = 682
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,79,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 678
                    self.match(HogQLParser.COMMA)
                    self.state = 679
                    self.columnExpr(0) 
                self.state = 684
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,79,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return HogQLParser.RULE_columnExpr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class ColumnExprTernaryOpContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def QUERY(self):
            return self.getToken(HogQLParser.QUERY, 0)
        def COLON(self):
            return self.getToken(HogQLParser.COLON, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprTernaryOp" ):
                return visitor.visitColumnExprTernaryOp(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprAliasContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def alias(self):
            return self.getTypedRuleContext(HogQLParser.AliasContext,0)

        def AS(self):
            return self.getToken(HogQLParser.AS, 0)
        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)

        def STRING_LITERAL(self):
            return self.getToken(HogQLParser.STRING_LITERAL, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprAlias" ):
                return visitor.visitColumnExprAlias(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprNegateContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DASH(self):
            return self.getToken(HogQLParser.DASH, 0)
        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprNegate" ):
                return visitor.visitColumnExprNegate(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprSubqueryContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def selectUnionStmt(self):
            return self.getTypedRuleContext(HogQLParser.SelectUnionStmtContext,0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprSubquery" ):
                return visitor.visitColumnExprSubquery(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprLiteralContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def literal(self):
            return self.getTypedRuleContext(HogQLParser.LiteralContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprLiteral" ):
                return visitor.visitColumnExprLiteral(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprArrayContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LBRACKET(self):
            return self.getToken(HogQLParser.LBRACKET, 0)
        def RBRACKET(self):
            return self.getToken(HogQLParser.RBRACKET, 0)
        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprArray" ):
                return visitor.visitColumnExprArray(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprSubstringContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SUBSTRING(self):
            return self.getToken(HogQLParser.SUBSTRING, 0)
        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def FROM(self):
            return self.getToken(HogQLParser.FROM, 0)
        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)
        def FOR(self):
            return self.getToken(HogQLParser.FOR, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprSubstring" ):
                return visitor.visitColumnExprSubstring(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprCastContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CAST(self):
            return self.getToken(HogQLParser.CAST, 0)
        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def AS(self):
            return self.getToken(HogQLParser.AS, 0)
        def columnTypeExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnTypeExprContext,0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprCast" ):
                return visitor.visitColumnExprCast(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprOrContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def OR(self):
            return self.getToken(HogQLParser.OR, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprOr" ):
                return visitor.visitColumnExprOr(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprPrecedence1Context(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.left = None # ColumnExprContext
            self.operator = None # Token
            self.right = None # ColumnExprContext
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def ASTERISK(self):
            return self.getToken(HogQLParser.ASTERISK, 0)
        def SLASH(self):
            return self.getToken(HogQLParser.SLASH, 0)
        def PERCENT(self):
            return self.getToken(HogQLParser.PERCENT, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprPrecedence1" ):
                return visitor.visitColumnExprPrecedence1(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprPrecedence2Context(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.left = None # ColumnExprContext
            self.operator = None # Token
            self.right = None # ColumnExprContext
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def PLUS(self):
            return self.getToken(HogQLParser.PLUS, 0)
        def DASH(self):
            return self.getToken(HogQLParser.DASH, 0)
        def CONCAT(self):
            return self.getToken(HogQLParser.CONCAT, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprPrecedence2" ):
                return visitor.visitColumnExprPrecedence2(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprPrecedence3Context(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.left = None # ColumnExprContext
            self.operator = None # Token
            self.right = None # ColumnExprContext
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def IN(self):
            return self.getToken(HogQLParser.IN, 0)
        def EQ_DOUBLE(self):
            return self.getToken(HogQLParser.EQ_DOUBLE, 0)
        def EQ_SINGLE(self):
            return self.getToken(HogQLParser.EQ_SINGLE, 0)
        def NOT_EQ(self):
            return self.getToken(HogQLParser.NOT_EQ, 0)
        def LT_EQ(self):
            return self.getToken(HogQLParser.LT_EQ, 0)
        def LT(self):
            return self.getToken(HogQLParser.LT, 0)
        def GT_EQ(self):
            return self.getToken(HogQLParser.GT_EQ, 0)
        def GT(self):
            return self.getToken(HogQLParser.GT, 0)
        def LIKE(self):
            return self.getToken(HogQLParser.LIKE, 0)
        def ILIKE(self):
            return self.getToken(HogQLParser.ILIKE, 0)
        def REGEX_SINGLE(self):
            return self.getToken(HogQLParser.REGEX_SINGLE, 0)
        def REGEX_DOUBLE(self):
            return self.getToken(HogQLParser.REGEX_DOUBLE, 0)
        def NOT_REGEX(self):
            return self.getToken(HogQLParser.NOT_REGEX, 0)
        def IREGEX_SINGLE(self):
            return self.getToken(HogQLParser.IREGEX_SINGLE, 0)
        def IREGEX_DOUBLE(self):
            return self.getToken(HogQLParser.IREGEX_DOUBLE, 0)
        def NOT_IREGEX(self):
            return self.getToken(HogQLParser.NOT_IREGEX, 0)
        def COHORT(self):
            return self.getToken(HogQLParser.COHORT, 0)
        def NOT(self):
            return self.getToken(HogQLParser.NOT, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprPrecedence3" ):
                return visitor.visitColumnExprPrecedence3(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprIntervalContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INTERVAL(self):
            return self.getToken(HogQLParser.INTERVAL, 0)
        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def interval(self):
            return self.getTypedRuleContext(HogQLParser.IntervalContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprInterval" ):
                return visitor.visitColumnExprInterval(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprIsNullContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def IS(self):
            return self.getToken(HogQLParser.IS, 0)
        def NULL_SQL(self):
            return self.getToken(HogQLParser.NULL_SQL, 0)
        def NOT(self):
            return self.getToken(HogQLParser.NOT, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprIsNull" ):
                return visitor.visitColumnExprIsNull(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprWinFunctionTargetContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(HogQLParser.IdentifierContext,i)

        def OVER(self):
            return self.getToken(HogQLParser.OVER, 0)
        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)
        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprWinFunctionTarget" ):
                return visitor.visitColumnExprWinFunctionTarget(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprTrimContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TRIM(self):
            return self.getToken(HogQLParser.TRIM, 0)
        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def STRING_LITERAL(self):
            return self.getToken(HogQLParser.STRING_LITERAL, 0)
        def FROM(self):
            return self.getToken(HogQLParser.FROM, 0)
        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)
        def BOTH(self):
            return self.getToken(HogQLParser.BOTH, 0)
        def LEADING(self):
            return self.getToken(HogQLParser.LEADING, 0)
        def TRAILING(self):
            return self.getToken(HogQLParser.TRAILING, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprTrim" ):
                return visitor.visitColumnExprTrim(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprTagElementContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def hogqlxTagElement(self):
            return self.getTypedRuleContext(HogQLParser.HogqlxTagElementContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprTagElement" ):
                return visitor.visitColumnExprTagElement(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprTupleContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprTuple" ):
                return visitor.visitColumnExprTuple(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprArrayAccessContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def LBRACKET(self):
            return self.getToken(HogQLParser.LBRACKET, 0)
        def RBRACKET(self):
            return self.getToken(HogQLParser.RBRACKET, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprArrayAccess" ):
                return visitor.visitColumnExprArrayAccess(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprBetweenContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def BETWEEN(self):
            return self.getToken(HogQLParser.BETWEEN, 0)
        def AND(self):
            return self.getToken(HogQLParser.AND, 0)
        def NOT(self):
            return self.getToken(HogQLParser.NOT, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprBetween" ):
                return visitor.visitColumnExprBetween(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprPropertyAccessContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def DOT(self):
            return self.getToken(HogQLParser.DOT, 0)
        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprPropertyAccess" ):
                return visitor.visitColumnExprPropertyAccess(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprParensContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprParens" ):
                return visitor.visitColumnExprParens(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprTimestampContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TIMESTAMP(self):
            return self.getToken(HogQLParser.TIMESTAMP, 0)
        def STRING_LITERAL(self):
            return self.getToken(HogQLParser.STRING_LITERAL, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprTimestamp" ):
                return visitor.visitColumnExprTimestamp(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprNullishContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def NULLISH(self):
            return self.getToken(HogQLParser.NULLISH, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprNullish" ):
                return visitor.visitColumnExprNullish(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprAndContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def AND(self):
            return self.getToken(HogQLParser.AND, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprAnd" ):
                return visitor.visitColumnExprAnd(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprTupleAccessContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def DOT(self):
            return self.getToken(HogQLParser.DOT, 0)
        def DECIMAL_LITERAL(self):
            return self.getToken(HogQLParser.DECIMAL_LITERAL, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprTupleAccess" ):
                return visitor.visitColumnExprTupleAccess(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprCaseContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.caseExpr = None # ColumnExprContext
            self.whenExpr = None # ColumnExprContext
            self.thenExpr = None # ColumnExprContext
            self.elseExpr = None # ColumnExprContext
            self.copyFrom(ctx)

        def CASE(self):
            return self.getToken(HogQLParser.CASE, 0)
        def END(self):
            return self.getToken(HogQLParser.END, 0)
        def WHEN(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.WHEN)
            else:
                return self.getToken(HogQLParser.WHEN, i)
        def THEN(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.THEN)
            else:
                return self.getToken(HogQLParser.THEN, i)
        def ELSE(self):
            return self.getToken(HogQLParser.ELSE, 0)
        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprCase" ):
                return visitor.visitColumnExprCase(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprDateContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DATE(self):
            return self.getToken(HogQLParser.DATE, 0)
        def STRING_LITERAL(self):
            return self.getToken(HogQLParser.STRING_LITERAL, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprDate" ):
                return visitor.visitColumnExprDate(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprNotContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NOT(self):
            return self.getToken(HogQLParser.NOT, 0)
        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprNot" ):
                return visitor.visitColumnExprNot(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprWinFunctionContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)

        def OVER(self):
            return self.getToken(HogQLParser.OVER, 0)
        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.LPAREN)
            else:
                return self.getToken(HogQLParser.LPAREN, i)
        def windowExpr(self):
            return self.getTypedRuleContext(HogQLParser.WindowExprContext,0)

        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.RPAREN)
            else:
                return self.getToken(HogQLParser.RPAREN, i)
        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprWinFunction" ):
                return visitor.visitColumnExprWinFunction(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprIdentifierContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnIdentifier(self):
            return self.getTypedRuleContext(HogQLParser.ColumnIdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprIdentifier" ):
                return visitor.visitColumnExprIdentifier(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprFunctionContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)

        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.LPAREN)
            else:
                return self.getToken(HogQLParser.LPAREN, i)
        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.RPAREN)
            else:
                return self.getToken(HogQLParser.RPAREN, i)
        def DISTINCT(self):
            return self.getToken(HogQLParser.DISTINCT, 0)
        def columnArgList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnArgListContext,0)

        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprFunction" ):
                return visitor.visitColumnExprFunction(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprAsteriskContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ASTERISK(self):
            return self.getToken(HogQLParser.ASTERISK, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(HogQLParser.TableIdentifierContext,0)

        def DOT(self):
            return self.getToken(HogQLParser.DOT, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprAsterisk" ):
                return visitor.visitColumnExprAsterisk(self)
            else:
                return visitor.visitChildren(self)



    def columnExpr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = HogQLParser.ColumnExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 108
        self.enterRecursionRule(localctx, 108, self.RULE_columnExpr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 808
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
            if la_ == 1:
                localctx = HogQLParser.ColumnExprCaseContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 686
                self.match(HogQLParser.CASE)
                self.state = 688
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
                if la_ == 1:
                    self.state = 687
                    localctx.caseExpr = self.columnExpr(0)


                self.state = 695 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 690
                    self.match(HogQLParser.WHEN)
                    self.state = 691
                    localctx.whenExpr = self.columnExpr(0)
                    self.state = 692
                    self.match(HogQLParser.THEN)
                    self.state = 693
                    localctx.thenExpr = self.columnExpr(0)
                    self.state = 697 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==94):
                        break

                self.state = 701
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==24:
                    self.state = 699
                    self.match(HogQLParser.ELSE)
                    self.state = 700
                    localctx.elseExpr = self.columnExpr(0)


                self.state = 703
                self.match(HogQLParser.END)
                pass

            elif la_ == 2:
                localctx = HogQLParser.ColumnExprCastContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 705
                self.match(HogQLParser.CAST)
                self.state = 706
                self.match(HogQLParser.LPAREN)
                self.state = 707
                self.columnExpr(0)
                self.state = 708
                self.match(HogQLParser.AS)
                self.state = 709
                self.columnTypeExpr()
                self.state = 710
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 3:
                localctx = HogQLParser.ColumnExprDateContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 712
                self.match(HogQLParser.DATE)
                self.state = 713
                self.match(HogQLParser.STRING_LITERAL)
                pass

            elif la_ == 4:
                localctx = HogQLParser.ColumnExprIntervalContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 714
                self.match(HogQLParser.INTERVAL)
                self.state = 715
                self.columnExpr(0)
                self.state = 716
                self.interval()
                pass

            elif la_ == 5:
                localctx = HogQLParser.ColumnExprSubstringContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 718
                self.match(HogQLParser.SUBSTRING)
                self.state = 719
                self.match(HogQLParser.LPAREN)
                self.state = 720
                self.columnExpr(0)
                self.state = 721
                self.match(HogQLParser.FROM)
                self.state = 722
                self.columnExpr(0)
                self.state = 725
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==31:
                    self.state = 723
                    self.match(HogQLParser.FOR)
                    self.state = 724
                    self.columnExpr(0)


                self.state = 727
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 6:
                localctx = HogQLParser.ColumnExprTimestampContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 729
                self.match(HogQLParser.TIMESTAMP)
                self.state = 730
                self.match(HogQLParser.STRING_LITERAL)
                pass

            elif la_ == 7:
                localctx = HogQLParser.ColumnExprTrimContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 731
                self.match(HogQLParser.TRIM)
                self.state = 732
                self.match(HogQLParser.LPAREN)
                self.state = 733
                _la = self._input.LA(1)
                if not(_la==10 or _la==48 or _la==86):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 734
                self.match(HogQLParser.STRING_LITERAL)
                self.state = 735
                self.match(HogQLParser.FROM)
                self.state = 736
                self.columnExpr(0)
                self.state = 737
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 8:
                localctx = HogQLParser.ColumnExprWinFunctionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 739
                self.identifier()

                self.state = 740
                self.match(HogQLParser.LPAREN)
                self.state = 742
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -536870914) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -2294531444308967425) != 0) or _la==129 or _la==135:
                    self.state = 741
                    self.columnExprList()


                self.state = 744
                self.match(HogQLParser.RPAREN)
                self.state = 746
                self.match(HogQLParser.OVER)
                self.state = 747
                self.match(HogQLParser.LPAREN)
                self.state = 748
                self.windowExpr()
                self.state = 749
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 9:
                localctx = HogQLParser.ColumnExprWinFunctionTargetContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 751
                self.identifier()

                self.state = 752
                self.match(HogQLParser.LPAREN)
                self.state = 754
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -536870914) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -2294531444308967425) != 0) or _la==129 or _la==135:
                    self.state = 753
                    self.columnExprList()


                self.state = 756
                self.match(HogQLParser.RPAREN)
                self.state = 758
                self.match(HogQLParser.OVER)
                self.state = 759
                self.identifier()
                pass

            elif la_ == 10:
                localctx = HogQLParser.ColumnExprFunctionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 761
                self.identifier()
                self.state = 767
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
                if la_ == 1:
                    self.state = 762
                    self.match(HogQLParser.LPAREN)
                    self.state = 764
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & -536870914) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -2294531444308967425) != 0) or _la==129 or _la==135:
                        self.state = 763
                        self.columnExprList()


                    self.state = 766
                    self.match(HogQLParser.RPAREN)


                self.state = 769
                self.match(HogQLParser.LPAREN)
                self.state = 771
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
                if la_ == 1:
                    self.state = 770
                    self.match(HogQLParser.DISTINCT)


                self.state = 774
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -536870914) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -2294531444308967425) != 0) or _la==129 or _la==135:
                    self.state = 773
                    self.columnArgList()


                self.state = 776
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 11:
                localctx = HogQLParser.ColumnExprTagElementContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 778
                self.hogqlxTagElement()
                pass

            elif la_ == 12:
                localctx = HogQLParser.ColumnExprLiteralContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 779
                self.literal()
                pass

            elif la_ == 13:
                localctx = HogQLParser.ColumnExprNegateContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 780
                self.match(HogQLParser.DASH)
                self.state = 781
                self.columnExpr(18)
                pass

            elif la_ == 14:
                localctx = HogQLParser.ColumnExprNotContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 782
                self.match(HogQLParser.NOT)
                self.state = 783
                self.columnExpr(12)
                pass

            elif la_ == 15:
                localctx = HogQLParser.ColumnExprAsteriskContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 787
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -90074192107536386) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 339033980927) != 0):
                    self.state = 784
                    self.tableIdentifier()
                    self.state = 785
                    self.match(HogQLParser.DOT)


                self.state = 789
                self.match(HogQLParser.ASTERISK)
                pass

            elif la_ == 16:
                localctx = HogQLParser.ColumnExprSubqueryContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 790
                self.match(HogQLParser.LPAREN)
                self.state = 791
                self.selectUnionStmt()
                self.state = 792
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 17:
                localctx = HogQLParser.ColumnExprParensContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 794
                self.match(HogQLParser.LPAREN)
                self.state = 795
                self.columnExpr(0)
                self.state = 796
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 18:
                localctx = HogQLParser.ColumnExprTupleContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 798
                self.match(HogQLParser.LPAREN)
                self.state = 799
                self.columnExprList()
                self.state = 800
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 19:
                localctx = HogQLParser.ColumnExprArrayContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 802
                self.match(HogQLParser.LBRACKET)
                self.state = 804
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -536870914) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -2294531444308967425) != 0) or _la==129 or _la==135:
                    self.state = 803
                    self.columnExprList()


                self.state = 806
                self.match(HogQLParser.RBRACKET)
                pass

            elif la_ == 20:
                localctx = HogQLParser.ColumnExprIdentifierContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 807
                self.columnIdentifier()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 903
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,103,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 901
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,102,self._ctx)
                    if la_ == 1:
                        localctx = HogQLParser.ColumnExprPrecedence1Context(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 810
                        if not self.precpred(self._ctx, 17):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 17)")
                        self.state = 814
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [109]:
                            self.state = 811
                            localctx.operator = self.match(HogQLParser.ASTERISK)
                            pass
                        elif token in [145]:
                            self.state = 812
                            localctx.operator = self.match(HogQLParser.SLASH)
                            pass
                        elif token in [134]:
                            self.state = 813
                            localctx.operator = self.match(HogQLParser.PERCENT)
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 816
                        localctx.right = self.columnExpr(18)
                        pass

                    elif la_ == 2:
                        localctx = HogQLParser.ColumnExprPrecedence2Context(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 817
                        if not self.precpred(self._ctx, 16):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 16)")
                        self.state = 821
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [135]:
                            self.state = 818
                            localctx.operator = self.match(HogQLParser.PLUS)
                            pass
                        elif token in [115]:
                            self.state = 819
                            localctx.operator = self.match(HogQLParser.DASH)
                            pass
                        elif token in [114]:
                            self.state = 820
                            localctx.operator = self.match(HogQLParser.CONCAT)
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 823
                        localctx.right = self.columnExpr(17)
                        pass

                    elif la_ == 3:
                        localctx = HogQLParser.ColumnExprPrecedence3Context(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 824
                        if not self.precpred(self._ctx, 15):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 15)")
                        self.state = 849
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,98,self._ctx)
                        if la_ == 1:
                            self.state = 825
                            localctx.operator = self.match(HogQLParser.EQ_DOUBLE)
                            pass

                        elif la_ == 2:
                            self.state = 826
                            localctx.operator = self.match(HogQLParser.EQ_SINGLE)
                            pass

                        elif la_ == 3:
                            self.state = 827
                            localctx.operator = self.match(HogQLParser.NOT_EQ)
                            pass

                        elif la_ == 4:
                            self.state = 828
                            localctx.operator = self.match(HogQLParser.LT_EQ)
                            pass

                        elif la_ == 5:
                            self.state = 829
                            localctx.operator = self.match(HogQLParser.LT)
                            pass

                        elif la_ == 6:
                            self.state = 830
                            localctx.operator = self.match(HogQLParser.GT_EQ)
                            pass

                        elif la_ == 7:
                            self.state = 831
                            localctx.operator = self.match(HogQLParser.GT)
                            pass

                        elif la_ == 8:
                            self.state = 833
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==55:
                                self.state = 832
                                localctx.operator = self.match(HogQLParser.NOT)


                            self.state = 835
                            self.match(HogQLParser.IN)
                            self.state = 837
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
                            if la_ == 1:
                                self.state = 836
                                self.match(HogQLParser.COHORT)


                            pass

                        elif la_ == 9:
                            self.state = 840
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==55:
                                self.state = 839
                                localctx.operator = self.match(HogQLParser.NOT)


                            self.state = 842
                            _la = self._input.LA(1)
                            if not(_la==39 or _la==50):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            pass

                        elif la_ == 10:
                            self.state = 843
                            localctx.operator = self.match(HogQLParser.REGEX_SINGLE)
                            pass

                        elif la_ == 11:
                            self.state = 844
                            localctx.operator = self.match(HogQLParser.REGEX_DOUBLE)
                            pass

                        elif la_ == 12:
                            self.state = 845
                            localctx.operator = self.match(HogQLParser.NOT_REGEX)
                            pass

                        elif la_ == 13:
                            self.state = 846
                            localctx.operator = self.match(HogQLParser.IREGEX_SINGLE)
                            pass

                        elif la_ == 14:
                            self.state = 847
                            localctx.operator = self.match(HogQLParser.IREGEX_DOUBLE)
                            pass

                        elif la_ == 15:
                            self.state = 848
                            localctx.operator = self.match(HogQLParser.NOT_IREGEX)
                            pass


                        self.state = 851
                        localctx.right = self.columnExpr(16)
                        pass

                    elif la_ == 4:
                        localctx = HogQLParser.ColumnExprNullishContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 852
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 853
                        self.match(HogQLParser.NULLISH)
                        self.state = 854
                        self.columnExpr(14)
                        pass

                    elif la_ == 5:
                        localctx = HogQLParser.ColumnExprAndContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 855
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 856
                        self.match(HogQLParser.AND)
                        self.state = 857
                        self.columnExpr(12)
                        pass

                    elif la_ == 6:
                        localctx = HogQLParser.ColumnExprOrContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 858
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 859
                        self.match(HogQLParser.OR)
                        self.state = 860
                        self.columnExpr(11)
                        pass

                    elif la_ == 7:
                        localctx = HogQLParser.ColumnExprBetweenContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 861
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 863
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==55:
                            self.state = 862
                            self.match(HogQLParser.NOT)


                        self.state = 865
                        self.match(HogQLParser.BETWEEN)
                        self.state = 866
                        self.columnExpr(0)
                        self.state = 867
                        self.match(HogQLParser.AND)
                        self.state = 868
                        self.columnExpr(10)
                        pass

                    elif la_ == 8:
                        localctx = HogQLParser.ColumnExprTernaryOpContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 870
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 871
                        self.match(HogQLParser.QUERY)
                        self.state = 872
                        self.columnExpr(0)
                        self.state = 873
                        self.match(HogQLParser.COLON)
                        self.state = 874
                        self.columnExpr(8)
                        pass

                    elif la_ == 9:
                        localctx = HogQLParser.ColumnExprArrayAccessContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 876
                        if not self.precpred(self._ctx, 21):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 21)")
                        self.state = 877
                        self.match(HogQLParser.LBRACKET)
                        self.state = 878
                        self.columnExpr(0)
                        self.state = 879
                        self.match(HogQLParser.RBRACKET)
                        pass

                    elif la_ == 10:
                        localctx = HogQLParser.ColumnExprTupleAccessContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 881
                        if not self.precpred(self._ctx, 20):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 20)")
                        self.state = 882
                        self.match(HogQLParser.DOT)
                        self.state = 883
                        self.match(HogQLParser.DECIMAL_LITERAL)
                        pass

                    elif la_ == 11:
                        localctx = HogQLParser.ColumnExprPropertyAccessContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 884
                        if not self.precpred(self._ctx, 19):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 19)")
                        self.state = 885
                        self.match(HogQLParser.DOT)
                        self.state = 886
                        self.identifier()
                        pass

                    elif la_ == 12:
                        localctx = HogQLParser.ColumnExprIsNullContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 887
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 888
                        self.match(HogQLParser.IS)
                        self.state = 890
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==55:
                            self.state = 889
                            self.match(HogQLParser.NOT)


                        self.state = 892
                        self.match(HogQLParser.NULL_SQL)
                        pass

                    elif la_ == 13:
                        localctx = HogQLParser.ColumnExprAliasContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 893
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 899
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,101,self._ctx)
                        if la_ == 1:
                            self.state = 894
                            self.alias()
                            pass

                        elif la_ == 2:
                            self.state = 895
                            self.match(HogQLParser.AS)
                            self.state = 896
                            self.identifier()
                            pass

                        elif la_ == 3:
                            self.state = 897
                            self.match(HogQLParser.AS)
                            self.state = 898
                            self.match(HogQLParser.STRING_LITERAL)
                            pass


                        pass

             
                self.state = 905
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,103,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ColumnArgListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnArgExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnArgExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnArgExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_columnArgList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnArgList" ):
                return visitor.visitColumnArgList(self)
            else:
                return visitor.visitChildren(self)




    def columnArgList(self):

        localctx = HogQLParser.ColumnArgListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_columnArgList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 906
            self.columnArgExpr()
            self.state = 911
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==113:
                self.state = 907
                self.match(HogQLParser.COMMA)
                self.state = 908
                self.columnArgExpr()
                self.state = 913
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnArgExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnLambdaExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnLambdaExprContext,0)


        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_columnArgExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnArgExpr" ):
                return visitor.visitColumnArgExpr(self)
            else:
                return visitor.visitChildren(self)




    def columnArgExpr(self):

        localctx = HogQLParser.ColumnArgExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_columnArgExpr)
        try:
            self.state = 916
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 914
                self.columnLambdaExpr()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 915
                self.columnExpr(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnLambdaExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ARROW(self):
            return self.getToken(HogQLParser.ARROW, 0)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(HogQLParser.IdentifierContext,i)


        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_columnLambdaExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnLambdaExpr" ):
                return visitor.visitColumnLambdaExpr(self)
            else:
                return visitor.visitChildren(self)




    def columnLambdaExpr(self):

        localctx = HogQLParser.ColumnLambdaExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_columnLambdaExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 937
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [127]:
                self.state = 918
                self.match(HogQLParser.LPAREN)
                self.state = 919
                self.identifier()
                self.state = 924
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==113:
                    self.state = 920
                    self.match(HogQLParser.COMMA)
                    self.state = 921
                    self.identifier()
                    self.state = 926
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 927
                self.match(HogQLParser.RPAREN)
                pass
            elif token in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 97, 98, 99, 102]:
                self.state = 929
                self.identifier()
                self.state = 934
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==113:
                    self.state = 930
                    self.match(HogQLParser.COMMA)
                    self.state = 931
                    self.identifier()
                    self.state = 936
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

            self.state = 939
            self.match(HogQLParser.ARROW)
            self.state = 940
            self.columnExpr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HogqlxTagElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return HogQLParser.RULE_hogqlxTagElement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class HogqlxTagElementClosedContext(HogqlxTagElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.HogqlxTagElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LT(self):
            return self.getToken(HogQLParser.LT, 0)
        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)

        def SLASH(self):
            return self.getToken(HogQLParser.SLASH, 0)
        def GT(self):
            return self.getToken(HogQLParser.GT, 0)
        def hogqlxTagAttribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.HogqlxTagAttributeContext)
            else:
                return self.getTypedRuleContext(HogQLParser.HogqlxTagAttributeContext,i)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHogqlxTagElementClosed" ):
                return visitor.visitHogqlxTagElementClosed(self)
            else:
                return visitor.visitChildren(self)


    class HogqlxTagElementNestedContext(HogqlxTagElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.HogqlxTagElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LT(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.LT)
            else:
                return self.getToken(HogQLParser.LT, i)
        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(HogQLParser.IdentifierContext,i)

        def GT(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.GT)
            else:
                return self.getToken(HogQLParser.GT, i)
        def SLASH(self):
            return self.getToken(HogQLParser.SLASH, 0)
        def hogqlxTagAttribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.HogqlxTagAttributeContext)
            else:
                return self.getTypedRuleContext(HogQLParser.HogqlxTagAttributeContext,i)

        def hogqlxTagElement(self):
            return self.getTypedRuleContext(HogQLParser.HogqlxTagElementContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHogqlxTagElementNested" ):
                return visitor.visitHogqlxTagElementNested(self)
            else:
                return visitor.visitChildren(self)



    def hogqlxTagElement(self):

        localctx = HogQLParser.HogqlxTagElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_hogqlxTagElement)
        self._la = 0 # Token type
        try:
            self.state = 970
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,112,self._ctx)
            if la_ == 1:
                localctx = HogQLParser.HogqlxTagElementClosedContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 942
                self.match(HogQLParser.LT)
                self.state = 943
                self.identifier()
                self.state = 947
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & -90074192107536386) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 339033980927) != 0):
                    self.state = 944
                    self.hogqlxTagAttribute()
                    self.state = 949
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 950
                self.match(HogQLParser.SLASH)
                self.state = 951
                self.match(HogQLParser.GT)
                pass

            elif la_ == 2:
                localctx = HogQLParser.HogqlxTagElementNestedContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 953
                self.match(HogQLParser.LT)
                self.state = 954
                self.identifier()
                self.state = 958
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & -90074192107536386) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 339033980927) != 0):
                    self.state = 955
                    self.hogqlxTagAttribute()
                    self.state = 960
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 961
                self.match(HogQLParser.GT)
                self.state = 963
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,111,self._ctx)
                if la_ == 1:
                    self.state = 962
                    self.hogqlxTagElement()


                self.state = 965
                self.match(HogQLParser.LT)
                self.state = 966
                self.match(HogQLParser.SLASH)
                self.state = 967
                self.identifier()
                self.state = 968
                self.match(HogQLParser.GT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HogqlxTagAttributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def EQ_SINGLE(self):
            return self.getToken(HogQLParser.EQ_SINGLE, 0)

        def STRING_LITERAL(self):
            return self.getToken(HogQLParser.STRING_LITERAL, 0)

        def LBRACE(self):
            return self.getToken(HogQLParser.LBRACE, 0)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def RBRACE(self):
            return self.getToken(HogQLParser.RBRACE, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_hogqlxTagAttribute

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHogqlxTagAttribute" ):
                return visitor.visitHogqlxTagAttribute(self)
            else:
                return visitor.visitChildren(self)




    def hogqlxTagAttribute(self):

        localctx = HogQLParser.HogqlxTagAttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_hogqlxTagAttribute)
        try:
            self.state = 983
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 972
                self.identifier()
                self.state = 973
                self.match(HogQLParser.EQ_SINGLE)
                self.state = 974
                self.match(HogQLParser.STRING_LITERAL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 976
                self.identifier()
                self.state = 977
                self.match(HogQLParser.EQ_SINGLE)
                self.state = 978
                self.match(HogQLParser.LBRACE)
                self.state = 979
                self.columnExpr(0)
                self.state = 980
                self.match(HogQLParser.RBRACE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 982
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WithExprListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def withExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.WithExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.WithExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_withExprList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWithExprList" ):
                return visitor.visitWithExprList(self)
            else:
                return visitor.visitChildren(self)




    def withExprList(self):

        localctx = HogQLParser.WithExprListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_withExprList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 985
            self.withExpr()
            self.state = 990
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==113:
                self.state = 986
                self.match(HogQLParser.COMMA)
                self.state = 987
                self.withExpr()
                self.state = 992
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WithExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return HogQLParser.RULE_withExpr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class WithExprColumnContext(WithExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.WithExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def AS(self):
            return self.getToken(HogQLParser.AS, 0)
        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWithExprColumn" ):
                return visitor.visitWithExprColumn(self)
            else:
                return visitor.visitChildren(self)


    class WithExprSubqueryContext(WithExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.WithExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)

        def AS(self):
            return self.getToken(HogQLParser.AS, 0)
        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def selectUnionStmt(self):
            return self.getTypedRuleContext(HogQLParser.SelectUnionStmtContext,0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWithExprSubquery" ):
                return visitor.visitWithExprSubquery(self)
            else:
                return visitor.visitChildren(self)



    def withExpr(self):

        localctx = HogQLParser.WithExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_withExpr)
        try:
            self.state = 1003
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,115,self._ctx)
            if la_ == 1:
                localctx = HogQLParser.WithExprSubqueryContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 993
                self.identifier()
                self.state = 994
                self.match(HogQLParser.AS)
                self.state = 995
                self.match(HogQLParser.LPAREN)
                self.state = 996
                self.selectUnionStmt()
                self.state = 997
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 2:
                localctx = HogQLParser.WithExprColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 999
                self.columnExpr(0)
                self.state = 1000
                self.match(HogQLParser.AS)
                self.state = 1001
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def placeholder(self):
            return self.getTypedRuleContext(HogQLParser.PlaceholderContext,0)


        def nestedIdentifier(self):
            return self.getTypedRuleContext(HogQLParser.NestedIdentifierContext,0)


        def tableIdentifier(self):
            return self.getTypedRuleContext(HogQLParser.TableIdentifierContext,0)


        def DOT(self):
            return self.getToken(HogQLParser.DOT, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_columnIdentifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnIdentifier" ):
                return visitor.visitColumnIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def columnIdentifier(self):

        localctx = HogQLParser.ColumnIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_columnIdentifier)
        try:
            self.state = 1012
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [125]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1005
                self.placeholder()
                pass
            elif token in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 97, 98, 99, 102]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1009
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,116,self._ctx)
                if la_ == 1:
                    self.state = 1006
                    self.tableIdentifier()
                    self.state = 1007
                    self.match(HogQLParser.DOT)


                self.state = 1011
                self.nestedIdentifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NestedIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(HogQLParser.IdentifierContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.DOT)
            else:
                return self.getToken(HogQLParser.DOT, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_nestedIdentifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNestedIdentifier" ):
                return visitor.visitNestedIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def nestedIdentifier(self):

        localctx = HogQLParser.NestedIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_nestedIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1014
            self.identifier()
            self.state = 1019
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,118,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1015
                    self.match(HogQLParser.DOT)
                    self.state = 1016
                    self.identifier() 
                self.state = 1021
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,118,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return HogQLParser.RULE_tableExpr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class TableExprTagContext(TableExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.TableExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def hogqlxTagElement(self):
            return self.getTypedRuleContext(HogQLParser.HogqlxTagElementContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableExprTag" ):
                return visitor.visitTableExprTag(self)
            else:
                return visitor.visitChildren(self)


    class TableExprIdentifierContext(TableExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.TableExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tableIdentifier(self):
            return self.getTypedRuleContext(HogQLParser.TableIdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableExprIdentifier" ):
                return visitor.visitTableExprIdentifier(self)
            else:
                return visitor.visitChildren(self)


    class TableExprPlaceholderContext(TableExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.TableExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def placeholder(self):
            return self.getTypedRuleContext(HogQLParser.PlaceholderContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableExprPlaceholder" ):
                return visitor.visitTableExprPlaceholder(self)
            else:
                return visitor.visitChildren(self)


    class TableExprSubqueryContext(TableExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.TableExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def selectUnionStmt(self):
            return self.getTypedRuleContext(HogQLParser.SelectUnionStmtContext,0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableExprSubquery" ):
                return visitor.visitTableExprSubquery(self)
            else:
                return visitor.visitChildren(self)


    class TableExprAliasContext(TableExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.TableExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tableExpr(self):
            return self.getTypedRuleContext(HogQLParser.TableExprContext,0)

        def alias(self):
            return self.getTypedRuleContext(HogQLParser.AliasContext,0)

        def AS(self):
            return self.getToken(HogQLParser.AS, 0)
        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableExprAlias" ):
                return visitor.visitTableExprAlias(self)
            else:
                return visitor.visitChildren(self)


    class TableExprFunctionContext(TableExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.TableExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tableFunctionExpr(self):
            return self.getTypedRuleContext(HogQLParser.TableFunctionExprContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableExprFunction" ):
                return visitor.visitTableExprFunction(self)
            else:
                return visitor.visitChildren(self)



    def tableExpr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = HogQLParser.TableExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 128
        self.enterRecursionRule(localctx, 128, self.RULE_tableExpr, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1031
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
            if la_ == 1:
                localctx = HogQLParser.TableExprIdentifierContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 1023
                self.tableIdentifier()
                pass

            elif la_ == 2:
                localctx = HogQLParser.TableExprFunctionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1024
                self.tableFunctionExpr()
                pass

            elif la_ == 3:
                localctx = HogQLParser.TableExprSubqueryContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1025
                self.match(HogQLParser.LPAREN)
                self.state = 1026
                self.selectUnionStmt()
                self.state = 1027
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 4:
                localctx = HogQLParser.TableExprTagContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1029
                self.hogqlxTagElement()
                pass

            elif la_ == 5:
                localctx = HogQLParser.TableExprPlaceholderContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1030
                self.placeholder()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1041
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,121,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = HogQLParser.TableExprAliasContext(self, HogQLParser.TableExprContext(self, _parentctx, _parentState))
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_tableExpr)
                    self.state = 1033
                    if not self.precpred(self._ctx, 3):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                    self.state = 1037
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [19, 28, 37, 46, 102]:
                        self.state = 1034
                        self.alias()
                        pass
                    elif token in [6]:
                        self.state = 1035
                        self.match(HogQLParser.AS)
                        self.state = 1036
                        self.identifier()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 1043
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,121,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class TableFunctionExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def tableArgList(self):
            return self.getTypedRuleContext(HogQLParser.TableArgListContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_tableFunctionExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableFunctionExpr" ):
                return visitor.visitTableFunctionExpr(self)
            else:
                return visitor.visitChildren(self)




    def tableFunctionExpr(self):

        localctx = HogQLParser.TableFunctionExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_tableFunctionExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1044
            self.identifier()
            self.state = 1045
            self.match(HogQLParser.LPAREN)
            self.state = 1047
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -536870914) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -2294531444308967425) != 0) or _la==129 or _la==135:
                self.state = 1046
                self.tableArgList()


            self.state = 1049
            self.match(HogQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def databaseIdentifier(self):
            return self.getTypedRuleContext(HogQLParser.DatabaseIdentifierContext,0)


        def DOT(self):
            return self.getToken(HogQLParser.DOT, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_tableIdentifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableIdentifier" ):
                return visitor.visitTableIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def tableIdentifier(self):

        localctx = HogQLParser.TableIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_tableIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1054
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,123,self._ctx)
            if la_ == 1:
                self.state = 1051
                self.databaseIdentifier()
                self.state = 1052
                self.match(HogQLParser.DOT)


            self.state = 1056
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableArgListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_tableArgList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableArgList" ):
                return visitor.visitTableArgList(self)
            else:
                return visitor.visitChildren(self)




    def tableArgList(self):

        localctx = HogQLParser.TableArgListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_tableArgList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1058
            self.columnExpr(0)
            self.state = 1063
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==113:
                self.state = 1059
                self.match(HogQLParser.COMMA)
                self.state = 1060
                self.columnExpr(0)
                self.state = 1065
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DatabaseIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_databaseIdentifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDatabaseIdentifier" ):
                return visitor.visitDatabaseIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def databaseIdentifier(self):

        localctx = HogQLParser.DatabaseIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_databaseIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1066
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FloatingLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FLOATING_LITERAL(self):
            return self.getToken(HogQLParser.FLOATING_LITERAL, 0)

        def DOT(self):
            return self.getToken(HogQLParser.DOT, 0)

        def DECIMAL_LITERAL(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.DECIMAL_LITERAL)
            else:
                return self.getToken(HogQLParser.DECIMAL_LITERAL, i)

        def OCTAL_LITERAL(self):
            return self.getToken(HogQLParser.OCTAL_LITERAL, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_floatingLiteral

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFloatingLiteral" ):
                return visitor.visitFloatingLiteral(self)
            else:
                return visitor.visitChildren(self)




    def floatingLiteral(self):

        localctx = HogQLParser.FloatingLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_floatingLiteral)
        self._la = 0 # Token type
        try:
            self.state = 1076
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [103]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1068
                self.match(HogQLParser.FLOATING_LITERAL)
                pass
            elif token in [117]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1069
                self.match(HogQLParser.DOT)
                self.state = 1070
                _la = self._input.LA(1)
                if not(_la==104 or _la==105):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [105]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1071
                self.match(HogQLParser.DECIMAL_LITERAL)
                self.state = 1072
                self.match(HogQLParser.DOT)
                self.state = 1074
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,125,self._ctx)
                if la_ == 1:
                    self.state = 1073
                    _la = self._input.LA(1)
                    if not(_la==104 or _la==105):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumberLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def floatingLiteral(self):
            return self.getTypedRuleContext(HogQLParser.FloatingLiteralContext,0)


        def OCTAL_LITERAL(self):
            return self.getToken(HogQLParser.OCTAL_LITERAL, 0)

        def DECIMAL_LITERAL(self):
            return self.getToken(HogQLParser.DECIMAL_LITERAL, 0)

        def HEXADECIMAL_LITERAL(self):
            return self.getToken(HogQLParser.HEXADECIMAL_LITERAL, 0)

        def INF(self):
            return self.getToken(HogQLParser.INF, 0)

        def NAN_SQL(self):
            return self.getToken(HogQLParser.NAN_SQL, 0)

        def PLUS(self):
            return self.getToken(HogQLParser.PLUS, 0)

        def DASH(self):
            return self.getToken(HogQLParser.DASH, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_numberLiteral

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumberLiteral" ):
                return visitor.visitNumberLiteral(self)
            else:
                return visitor.visitChildren(self)




    def numberLiteral(self):

        localctx = HogQLParser.NumberLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_numberLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1079
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==115 or _la==135:
                self.state = 1078
                _la = self._input.LA(1)
                if not(_la==115 or _la==135):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1087
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,128,self._ctx)
            if la_ == 1:
                self.state = 1081
                self.floatingLiteral()
                pass

            elif la_ == 2:
                self.state = 1082
                self.match(HogQLParser.OCTAL_LITERAL)
                pass

            elif la_ == 3:
                self.state = 1083
                self.match(HogQLParser.DECIMAL_LITERAL)
                pass

            elif la_ == 4:
                self.state = 1084
                self.match(HogQLParser.HEXADECIMAL_LITERAL)
                pass

            elif la_ == 5:
                self.state = 1085
                self.match(HogQLParser.INF)
                pass

            elif la_ == 6:
                self.state = 1086
                self.match(HogQLParser.NAN_SQL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numberLiteral(self):
            return self.getTypedRuleContext(HogQLParser.NumberLiteralContext,0)


        def STRING_LITERAL(self):
            return self.getToken(HogQLParser.STRING_LITERAL, 0)

        def NULL_SQL(self):
            return self.getToken(HogQLParser.NULL_SQL, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_literal

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteral" ):
                return visitor.visitLiteral(self)
            else:
                return visitor.visitChildren(self)




    def literal(self):

        localctx = HogQLParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_literal)
        try:
            self.state = 1092
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [41, 54, 103, 104, 105, 106, 115, 117, 135]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1089
                self.numberLiteral()
                pass
            elif token in [107]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1090
                self.match(HogQLParser.STRING_LITERAL)
                pass
            elif token in [56]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1091
                self.match(HogQLParser.NULL_SQL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SECOND(self):
            return self.getToken(HogQLParser.SECOND, 0)

        def MINUTE(self):
            return self.getToken(HogQLParser.MINUTE, 0)

        def HOUR(self):
            return self.getToken(HogQLParser.HOUR, 0)

        def DAY(self):
            return self.getToken(HogQLParser.DAY, 0)

        def WEEK(self):
            return self.getToken(HogQLParser.WEEK, 0)

        def MONTH(self):
            return self.getToken(HogQLParser.MONTH, 0)

        def QUARTER(self):
            return self.getToken(HogQLParser.QUARTER, 0)

        def YEAR(self):
            return self.getToken(HogQLParser.YEAR, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_interval

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterval" ):
                return visitor.visitInterval(self)
            else:
                return visitor.visitChildren(self)




    def interval(self):

        localctx = HogQLParser.IntervalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_interval)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1094
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 13510867602636800) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 4362076417) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(HogQLParser.ALL, 0)

        def AND(self):
            return self.getToken(HogQLParser.AND, 0)

        def ANTI(self):
            return self.getToken(HogQLParser.ANTI, 0)

        def ANY(self):
            return self.getToken(HogQLParser.ANY, 0)

        def ARRAY(self):
            return self.getToken(HogQLParser.ARRAY, 0)

        def AS(self):
            return self.getToken(HogQLParser.AS, 0)

        def ASCENDING(self):
            return self.getToken(HogQLParser.ASCENDING, 0)

        def ASOF(self):
            return self.getToken(HogQLParser.ASOF, 0)

        def BETWEEN(self):
            return self.getToken(HogQLParser.BETWEEN, 0)

        def BOTH(self):
            return self.getToken(HogQLParser.BOTH, 0)

        def BY(self):
            return self.getToken(HogQLParser.BY, 0)

        def CASE(self):
            return self.getToken(HogQLParser.CASE, 0)

        def CAST(self):
            return self.getToken(HogQLParser.CAST, 0)

        def COHORT(self):
            return self.getToken(HogQLParser.COHORT, 0)

        def COLLATE(self):
            return self.getToken(HogQLParser.COLLATE, 0)

        def CROSS(self):
            return self.getToken(HogQLParser.CROSS, 0)

        def CUBE(self):
            return self.getToken(HogQLParser.CUBE, 0)

        def CURRENT(self):
            return self.getToken(HogQLParser.CURRENT, 0)

        def DATE(self):
            return self.getToken(HogQLParser.DATE, 0)

        def DESC(self):
            return self.getToken(HogQLParser.DESC, 0)

        def DESCENDING(self):
            return self.getToken(HogQLParser.DESCENDING, 0)

        def DISTINCT(self):
            return self.getToken(HogQLParser.DISTINCT, 0)

        def ELSE(self):
            return self.getToken(HogQLParser.ELSE, 0)

        def END(self):
            return self.getToken(HogQLParser.END, 0)

        def EXTRACT(self):
            return self.getToken(HogQLParser.EXTRACT, 0)

        def FINAL(self):
            return self.getToken(HogQLParser.FINAL, 0)

        def FIRST(self):
            return self.getToken(HogQLParser.FIRST, 0)

        def FOR(self):
            return self.getToken(HogQLParser.FOR, 0)

        def FOLLOWING(self):
            return self.getToken(HogQLParser.FOLLOWING, 0)

        def FROM(self):
            return self.getToken(HogQLParser.FROM, 0)

        def FULL(self):
            return self.getToken(HogQLParser.FULL, 0)

        def GROUP(self):
            return self.getToken(HogQLParser.GROUP, 0)

        def HAVING(self):
            return self.getToken(HogQLParser.HAVING, 0)

        def ID(self):
            return self.getToken(HogQLParser.ID, 0)

        def IF(self):
            return self.getToken(HogQLParser.IF, 0)

        def ILIKE(self):
            return self.getToken(HogQLParser.ILIKE, 0)

        def IN(self):
            return self.getToken(HogQLParser.IN, 0)

        def INNER(self):
            return self.getToken(HogQLParser.INNER, 0)

        def INTERVAL(self):
            return self.getToken(HogQLParser.INTERVAL, 0)

        def IS(self):
            return self.getToken(HogQLParser.IS, 0)

        def JOIN(self):
            return self.getToken(HogQLParser.JOIN, 0)

        def KEY(self):
            return self.getToken(HogQLParser.KEY, 0)

        def LAST(self):
            return self.getToken(HogQLParser.LAST, 0)

        def LEADING(self):
            return self.getToken(HogQLParser.LEADING, 0)

        def LEFT(self):
            return self.getToken(HogQLParser.LEFT, 0)

        def LIKE(self):
            return self.getToken(HogQLParser.LIKE, 0)

        def LIMIT(self):
            return self.getToken(HogQLParser.LIMIT, 0)

        def NOT(self):
            return self.getToken(HogQLParser.NOT, 0)

        def NULLS(self):
            return self.getToken(HogQLParser.NULLS, 0)

        def OFFSET(self):
            return self.getToken(HogQLParser.OFFSET, 0)

        def ON(self):
            return self.getToken(HogQLParser.ON, 0)

        def OR(self):
            return self.getToken(HogQLParser.OR, 0)

        def ORDER(self):
            return self.getToken(HogQLParser.ORDER, 0)

        def OUTER(self):
            return self.getToken(HogQLParser.OUTER, 0)

        def OVER(self):
            return self.getToken(HogQLParser.OVER, 0)

        def PARTITION(self):
            return self.getToken(HogQLParser.PARTITION, 0)

        def PRECEDING(self):
            return self.getToken(HogQLParser.PRECEDING, 0)

        def PREWHERE(self):
            return self.getToken(HogQLParser.PREWHERE, 0)

        def RANGE(self):
            return self.getToken(HogQLParser.RANGE, 0)

        def RETURN(self):
            return self.getToken(HogQLParser.RETURN, 0)

        def RIGHT(self):
            return self.getToken(HogQLParser.RIGHT, 0)

        def ROLLUP(self):
            return self.getToken(HogQLParser.ROLLUP, 0)

        def ROW(self):
            return self.getToken(HogQLParser.ROW, 0)

        def ROWS(self):
            return self.getToken(HogQLParser.ROWS, 0)

        def SAMPLE(self):
            return self.getToken(HogQLParser.SAMPLE, 0)

        def SELECT(self):
            return self.getToken(HogQLParser.SELECT, 0)

        def SEMI(self):
            return self.getToken(HogQLParser.SEMI, 0)

        def SETTINGS(self):
            return self.getToken(HogQLParser.SETTINGS, 0)

        def SUBSTRING(self):
            return self.getToken(HogQLParser.SUBSTRING, 0)

        def THEN(self):
            return self.getToken(HogQLParser.THEN, 0)

        def TIES(self):
            return self.getToken(HogQLParser.TIES, 0)

        def TIMESTAMP(self):
            return self.getToken(HogQLParser.TIMESTAMP, 0)

        def TOTALS(self):
            return self.getToken(HogQLParser.TOTALS, 0)

        def TRAILING(self):
            return self.getToken(HogQLParser.TRAILING, 0)

        def TRIM(self):
            return self.getToken(HogQLParser.TRIM, 0)

        def TRUNCATE(self):
            return self.getToken(HogQLParser.TRUNCATE, 0)

        def TO(self):
            return self.getToken(HogQLParser.TO, 0)

        def TOP(self):
            return self.getToken(HogQLParser.TOP, 0)

        def UNBOUNDED(self):
            return self.getToken(HogQLParser.UNBOUNDED, 0)

        def UNION(self):
            return self.getToken(HogQLParser.UNION, 0)

        def USING(self):
            return self.getToken(HogQLParser.USING, 0)

        def WHEN(self):
            return self.getToken(HogQLParser.WHEN, 0)

        def WHERE(self):
            return self.getToken(HogQLParser.WHERE, 0)

        def WINDOW(self):
            return self.getToken(HogQLParser.WINDOW, 0)

        def WITH(self):
            return self.getToken(HogQLParser.WITH, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_keyword

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKeyword" ):
                return visitor.visitKeyword(self)
            else:
                return visitor.visitChildren(self)




    def keyword(self):

        localctx = HogQLParser.KeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_keyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1096
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & -103585059710173186) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 29259462647) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeywordForAliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATE(self):
            return self.getToken(HogQLParser.DATE, 0)

        def FIRST(self):
            return self.getToken(HogQLParser.FIRST, 0)

        def ID(self):
            return self.getToken(HogQLParser.ID, 0)

        def KEY(self):
            return self.getToken(HogQLParser.KEY, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_keywordForAlias

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKeywordForAlias" ):
                return visitor.visitKeywordForAlias(self)
            else:
                return visitor.visitChildren(self)




    def keywordForAlias(self):

        localctx = HogQLParser.KeywordForAliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_keywordForAlias)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1098
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 70506452090880) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(HogQLParser.IDENTIFIER, 0)

        def keywordForAlias(self):
            return self.getTypedRuleContext(HogQLParser.KeywordForAliasContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_alias

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlias" ):
                return visitor.visitAlias(self)
            else:
                return visitor.visitChildren(self)




    def alias(self):

        localctx = HogQLParser.AliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_alias)
        try:
            self.state = 1102
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [102]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1100
                self.match(HogQLParser.IDENTIFIER)
                pass
            elif token in [19, 28, 37, 46]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1101
                self.keywordForAlias()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(HogQLParser.IDENTIFIER, 0)

        def interval(self):
            return self.getTypedRuleContext(HogQLParser.IntervalContext,0)


        def keyword(self):
            return self.getTypedRuleContext(HogQLParser.KeywordContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_identifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifier" ):
                return visitor.visitIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def identifier(self):

        localctx = HogQLParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_identifier)
        try:
            self.state = 1107
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [102]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1104
                self.match(HogQLParser.IDENTIFIER)
                pass
            elif token in [20, 36, 52, 53, 67, 75, 93, 99]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1105
                self.interval()
                pass
            elif token in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 95, 97, 98]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1106
                self.keyword()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(HogQLParser.STRING_LITERAL, 0)

        def EQ_SINGLE(self):
            return self.getToken(HogQLParser.EQ_SINGLE, 0)

        def numberLiteral(self):
            return self.getTypedRuleContext(HogQLParser.NumberLiteralContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_enumValue

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumValue" ):
                return visitor.visitEnumValue(self)
            else:
                return visitor.visitChildren(self)




    def enumValue(self):

        localctx = HogQLParser.EnumValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_enumValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1109
            self.match(HogQLParser.STRING_LITERAL)
            self.state = 1110
            self.match(HogQLParser.EQ_SINGLE)
            self.state = 1111
            self.numberLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PlaceholderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(HogQLParser.LBRACE, 0)

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def RBRACE(self):
            return self.getToken(HogQLParser.RBRACE, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_placeholder

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPlaceholder" ):
                return visitor.visitPlaceholder(self)
            else:
                return visitor.visitChildren(self)




    def placeholder(self):

        localctx = HogQLParser.PlaceholderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_placeholder)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1113
            self.match(HogQLParser.LBRACE)
            self.state = 1114
            self.identifier()
            self.state = 1115
            self.match(HogQLParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[35] = self.joinExpr_sempred
        self._predicates[54] = self.columnExpr_sempred
        self._predicates[64] = self.tableExpr_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def joinExpr_sempred(self, localctx:JoinExprContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 4)
         

    def columnExpr_sempred(self, localctx:ColumnExprContext, predIndex:int):
            if predIndex == 2:
                return self.precpred(self._ctx, 17)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 16)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 15)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 13)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 21)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 20)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 19)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 14)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 7)
         

    def tableExpr_sempred(self, localctx:TableExprContext, predIndex:int):
            if predIndex == 15:
                return self.precpred(self._ctx, 3)
         




