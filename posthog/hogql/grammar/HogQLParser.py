# Generated from HogQLParser.g4 by ANTLR 4.13.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,162,1311,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,1,0,5,0,176,8,0,10,0,12,0,179,9,0,1,0,1,0,1,1,
        1,1,3,1,185,8,1,1,2,1,2,1,3,1,3,1,3,1,3,1,3,3,3,194,8,3,1,4,1,4,
        1,4,5,4,199,8,4,10,4,12,4,202,9,4,1,4,3,4,205,8,4,1,5,1,5,1,5,1,
        5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,219,8,5,1,6,1,6,3,6,223,8,
        6,1,6,3,6,226,8,6,1,7,1,7,3,7,230,8,7,1,7,3,7,233,8,7,1,8,1,8,1,
        8,1,8,1,8,3,8,240,8,8,1,8,1,8,3,8,244,8,8,1,8,1,8,1,9,1,9,1,9,5,
        9,251,8,9,10,9,12,9,254,9,9,1,9,1,9,3,9,258,8,9,1,10,1,10,1,10,1,
        10,1,10,1,10,1,10,3,10,267,8,10,1,11,1,11,1,11,1,11,1,11,1,11,3,
        11,275,8,11,1,12,1,12,1,12,1,12,1,12,3,12,282,8,12,1,12,1,12,3,12,
        286,8,12,1,12,1,12,1,12,1,12,3,12,292,8,12,1,12,1,12,1,12,3,12,297,
        8,12,1,13,1,13,1,13,1,13,1,13,1,13,3,13,305,8,13,1,13,1,13,1,13,
        1,13,1,13,3,13,312,8,13,1,14,1,14,1,14,1,14,3,14,318,8,14,1,14,1,
        14,1,14,1,15,1,15,1,15,1,15,1,15,1,16,1,16,3,16,330,8,16,1,17,1,
        17,1,18,1,18,5,18,336,8,18,10,18,12,18,339,9,18,1,18,1,18,1,19,1,
        19,1,19,1,19,1,20,1,20,1,20,5,20,350,8,20,10,20,12,20,353,9,20,1,
        20,3,20,356,8,20,1,21,1,21,1,21,3,21,361,8,21,1,21,1,21,1,22,1,22,
        1,22,1,22,1,22,1,22,3,22,371,8,22,1,23,1,23,1,23,1,23,3,23,377,8,
        23,1,23,1,23,1,24,1,24,5,24,383,8,24,10,24,12,24,386,9,24,1,25,3,
        25,389,8,25,1,25,1,25,3,25,393,8,25,1,25,3,25,396,8,25,1,25,1,25,
        3,25,400,8,25,1,25,3,25,403,8,25,1,25,3,25,406,8,25,1,25,3,25,409,
        8,25,1,25,3,25,412,8,25,1,25,1,25,3,25,416,8,25,1,25,1,25,3,25,420,
        8,25,1,25,3,25,423,8,25,1,25,3,25,426,8,25,1,25,3,25,429,8,25,1,
        25,1,25,3,25,433,8,25,1,25,3,25,436,8,25,1,26,1,26,1,26,1,27,1,27,
        1,27,1,27,3,27,445,8,27,1,28,1,28,1,28,1,29,3,29,451,8,29,1,29,1,
        29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,
        30,1,30,1,30,5,30,470,8,30,10,30,12,30,473,9,30,1,31,1,31,1,31,1,
        32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,3,33,489,8,
        33,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,37,1,
        37,1,37,1,37,3,37,506,8,37,1,37,1,37,1,37,1,37,3,37,512,8,37,1,37,
        1,37,1,37,1,37,3,37,518,8,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,
        1,37,1,37,3,37,529,8,37,3,37,531,8,37,1,38,1,38,1,38,1,39,1,39,1,
        39,1,40,1,40,1,40,3,40,542,8,40,1,40,3,40,545,8,40,1,40,1,40,1,40,
        1,40,3,40,551,8,40,1,40,1,40,1,40,1,40,1,40,1,40,3,40,559,8,40,1,
        40,1,40,1,40,1,40,5,40,565,8,40,10,40,12,40,568,9,40,1,41,3,41,571,
        8,41,1,41,1,41,1,41,3,41,576,8,41,1,41,3,41,579,8,41,1,41,3,41,582,
        8,41,1,41,1,41,3,41,586,8,41,1,41,1,41,3,41,590,8,41,1,41,3,41,593,
        8,41,3,41,595,8,41,1,41,3,41,598,8,41,1,41,1,41,3,41,602,8,41,1,
        41,1,41,3,41,606,8,41,1,41,3,41,609,8,41,3,41,611,8,41,3,41,613,
        8,41,1,42,1,42,1,42,3,42,618,8,42,1,43,1,43,1,43,1,43,1,43,1,43,
        1,43,1,43,1,43,3,43,629,8,43,1,44,1,44,1,44,1,44,3,44,635,8,44,1,
        45,1,45,1,45,5,45,640,8,45,10,45,12,45,643,9,45,1,46,1,46,3,46,647,
        8,46,1,46,1,46,3,46,651,8,46,1,46,1,46,3,46,655,8,46,1,47,1,47,1,
        47,1,47,3,47,661,8,47,3,47,663,8,47,1,48,1,48,1,48,5,48,668,8,48,
        10,48,12,48,671,9,48,1,49,1,49,1,49,1,49,1,50,3,50,678,8,50,1,50,
        3,50,681,8,50,1,50,3,50,684,8,50,1,51,1,51,1,51,1,51,1,52,1,52,1,
        52,1,52,1,53,1,53,1,53,1,54,1,54,1,54,1,54,1,54,1,54,3,54,703,8,
        54,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,3,
        55,717,8,55,1,56,1,56,1,56,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,
        57,1,57,5,57,731,8,57,10,57,12,57,734,9,57,1,57,3,57,737,8,57,1,
        57,1,57,1,57,1,57,1,57,1,57,1,57,5,57,746,8,57,10,57,12,57,749,9,
        57,1,57,3,57,752,8,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,5,57,761,
        8,57,10,57,12,57,764,9,57,1,57,3,57,767,8,57,1,57,1,57,1,57,1,57,
        1,57,3,57,774,8,57,1,57,1,57,3,57,778,8,57,1,58,1,58,1,58,5,58,783,
        8,58,10,58,12,58,786,9,58,1,58,3,58,789,8,58,1,59,1,59,1,59,3,59,
        794,8,59,1,59,1,59,1,59,1,59,1,59,4,59,801,8,59,11,59,12,59,802,
        1,59,1,59,3,59,807,8,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,
        1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,
        1,59,3,59,831,8,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,
        1,59,1,59,1,59,1,59,1,59,1,59,3,59,848,8,59,1,59,1,59,1,59,1,59,
        3,59,854,8,59,1,59,3,59,857,8,59,1,59,3,59,860,8,59,1,59,1,59,1,
        59,1,59,1,59,1,59,1,59,1,59,3,59,870,8,59,1,59,1,59,1,59,1,59,3,
        59,876,8,59,1,59,3,59,879,8,59,1,59,3,59,882,8,59,1,59,1,59,1,59,
        1,59,1,59,1,59,3,59,890,8,59,1,59,3,59,893,8,59,1,59,1,59,3,59,897,
        8,59,1,59,3,59,900,8,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,
        1,59,1,59,1,59,1,59,3,59,914,8,59,1,59,1,59,1,59,1,59,1,59,1,59,
        1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,3,59,931,8,59,1,59,
        1,59,1,59,3,59,936,8,59,1,59,1,59,1,59,3,59,941,8,59,1,59,1,59,1,
        59,1,59,3,59,947,8,59,1,59,1,59,1,59,1,59,1,59,3,59,954,8,59,1,59,
        1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,3,59,966,8,59,1,59,
        1,59,3,59,970,8,59,1,59,3,59,973,8,59,1,59,1,59,1,59,1,59,1,59,1,
        59,1,59,3,59,982,8,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,
        59,1,59,1,59,1,59,3,59,996,8,59,1,59,1,59,1,59,1,59,1,59,1,59,1,
        59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,3,59,1012,8,59,1,59,1,59,1,
        59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,
        59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,3,59,1041,
        8,59,1,59,1,59,1,59,1,59,1,59,1,59,3,59,1049,8,59,5,59,1051,8,59,
        10,59,12,59,1054,9,59,1,60,1,60,1,60,1,60,5,60,1060,8,60,10,60,12,
        60,1063,9,60,1,60,3,60,1066,8,60,1,60,1,60,1,60,1,60,1,60,5,60,1073,
        8,60,10,60,12,60,1076,9,60,1,60,3,60,1079,8,60,1,60,1,60,3,60,1083,
        8,60,1,60,1,60,1,60,3,60,1088,8,60,1,61,1,61,1,61,5,61,1093,8,61,
        10,61,12,61,1096,9,61,1,61,1,61,1,61,1,61,1,61,1,61,5,61,1104,8,
        61,10,61,12,61,1107,9,61,1,61,1,61,1,61,1,61,1,61,1,61,3,61,1115,
        8,61,1,61,1,61,1,61,1,61,1,61,3,61,1122,8,61,1,62,1,62,1,62,1,62,
        1,62,1,62,1,62,1,62,1,62,1,62,1,62,3,62,1135,8,62,1,63,1,63,1,63,
        5,63,1140,8,63,10,63,12,63,1143,9,63,1,63,3,63,1146,8,63,1,64,1,
        64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,3,64,1158,8,64,1,65,1,
        65,1,65,1,65,3,65,1164,8,65,1,65,3,65,1167,8,65,1,66,1,66,1,66,5,
        66,1172,8,66,10,66,12,66,1175,9,66,1,67,1,67,1,67,1,67,1,67,1,67,
        1,67,1,67,1,67,3,67,1186,8,67,1,67,1,67,1,67,1,67,3,67,1192,8,67,
        5,67,1194,8,67,10,67,12,67,1197,9,67,1,68,1,68,1,68,3,68,1202,8,
        68,1,68,1,68,1,69,1,69,1,69,3,69,1209,8,69,1,69,1,69,1,70,1,70,1,
        70,5,70,1216,8,70,10,70,12,70,1219,9,70,1,70,3,70,1222,8,70,1,71,
        1,71,1,72,1,72,1,72,1,72,1,72,1,72,3,72,1232,8,72,3,72,1234,8,72,
        1,73,3,73,1237,8,73,1,73,1,73,1,73,1,73,1,73,1,73,3,73,1245,8,73,
        1,74,1,74,1,74,3,74,1250,8,74,1,75,1,75,1,76,1,76,1,77,1,77,1,78,
        1,78,3,78,1260,8,78,1,79,1,79,1,79,3,79,1265,8,79,1,80,1,80,1,80,
        1,80,1,81,1,81,1,81,1,81,1,82,1,82,3,82,1277,8,82,1,83,1,83,5,83,
        1281,8,83,10,83,12,83,1284,9,83,1,83,1,83,1,84,1,84,1,84,1,84,1,
        84,3,84,1293,8,84,1,85,1,85,5,85,1297,8,85,10,85,12,85,1300,9,85,
        1,85,1,85,1,86,1,86,1,86,1,86,1,86,3,86,1309,8,86,1,86,0,3,80,118,
        134,87,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,
        42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,
        86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,
        122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,
        154,156,158,160,162,164,166,168,170,172,0,17,2,0,32,32,37,37,2,0,
        18,18,77,77,2,0,46,46,54,54,3,0,1,1,4,4,8,8,4,0,1,1,3,4,8,8,83,83,
        2,0,54,54,76,76,2,0,1,1,4,4,2,0,7,7,22,23,2,0,31,31,52,52,2,0,74,
        74,79,79,3,0,10,10,53,53,93,93,2,0,43,43,56,56,1,0,110,111,2,0,121,
        121,142,142,7,0,21,21,40,40,58,59,73,73,81,81,100,100,106,106,19,
        0,1,13,15,20,22,26,28,29,31,31,33,36,38,39,41,44,46,46,48,54,56,
        57,61,61,63,72,74,80,82,86,88,95,97,99,101,102,104,105,4,0,20,20,
        31,31,41,41,51,51,1484,0,177,1,0,0,0,2,184,1,0,0,0,4,186,1,0,0,0,
        6,188,1,0,0,0,8,195,1,0,0,0,10,218,1,0,0,0,12,220,1,0,0,0,14,227,
        1,0,0,0,16,234,1,0,0,0,18,247,1,0,0,0,20,259,1,0,0,0,22,268,1,0,
        0,0,24,276,1,0,0,0,26,298,1,0,0,0,28,313,1,0,0,0,30,322,1,0,0,0,
        32,327,1,0,0,0,34,331,1,0,0,0,36,333,1,0,0,0,38,342,1,0,0,0,40,346,
        1,0,0,0,42,360,1,0,0,0,44,370,1,0,0,0,46,376,1,0,0,0,48,380,1,0,
        0,0,50,388,1,0,0,0,52,437,1,0,0,0,54,440,1,0,0,0,56,446,1,0,0,0,
        58,450,1,0,0,0,60,456,1,0,0,0,62,474,1,0,0,0,64,477,1,0,0,0,66,480,
        1,0,0,0,68,490,1,0,0,0,70,493,1,0,0,0,72,497,1,0,0,0,74,530,1,0,
        0,0,76,532,1,0,0,0,78,535,1,0,0,0,80,550,1,0,0,0,82,612,1,0,0,0,
        84,617,1,0,0,0,86,628,1,0,0,0,88,630,1,0,0,0,90,636,1,0,0,0,92,644,
        1,0,0,0,94,662,1,0,0,0,96,664,1,0,0,0,98,672,1,0,0,0,100,677,1,0,
        0,0,102,685,1,0,0,0,104,689,1,0,0,0,106,693,1,0,0,0,108,702,1,0,
        0,0,110,716,1,0,0,0,112,718,1,0,0,0,114,777,1,0,0,0,116,779,1,0,
        0,0,118,940,1,0,0,0,120,1082,1,0,0,0,122,1121,1,0,0,0,124,1134,1,
        0,0,0,126,1136,1,0,0,0,128,1157,1,0,0,0,130,1166,1,0,0,0,132,1168,
        1,0,0,0,134,1185,1,0,0,0,136,1198,1,0,0,0,138,1208,1,0,0,0,140,1212,
        1,0,0,0,142,1223,1,0,0,0,144,1233,1,0,0,0,146,1236,1,0,0,0,148,1249,
        1,0,0,0,150,1251,1,0,0,0,152,1253,1,0,0,0,154,1255,1,0,0,0,156,1259,
        1,0,0,0,158,1264,1,0,0,0,160,1266,1,0,0,0,162,1270,1,0,0,0,164,1276,
        1,0,0,0,166,1278,1,0,0,0,168,1292,1,0,0,0,170,1294,1,0,0,0,172,1308,
        1,0,0,0,174,176,3,2,1,0,175,174,1,0,0,0,176,179,1,0,0,0,177,175,
        1,0,0,0,177,178,1,0,0,0,178,180,1,0,0,0,179,177,1,0,0,0,180,181,
        5,0,0,1,181,1,1,0,0,0,182,185,3,6,3,0,183,185,3,10,5,0,184,182,1,
        0,0,0,184,183,1,0,0,0,185,3,1,0,0,0,186,187,3,118,59,0,187,5,1,0,
        0,0,188,189,5,55,0,0,189,193,3,158,79,0,190,191,5,118,0,0,191,192,
        5,125,0,0,192,194,3,4,2,0,193,190,1,0,0,0,193,194,1,0,0,0,194,7,
        1,0,0,0,195,200,3,158,79,0,196,197,5,119,0,0,197,199,3,158,79,0,
        198,196,1,0,0,0,199,202,1,0,0,0,200,198,1,0,0,0,200,201,1,0,0,0,
        201,204,1,0,0,0,202,200,1,0,0,0,203,205,5,119,0,0,204,203,1,0,0,
        0,204,205,1,0,0,0,205,9,1,0,0,0,206,219,3,12,6,0,207,219,3,14,7,
        0,208,219,3,18,9,0,209,219,3,20,10,0,210,219,3,22,11,0,211,219,3,
        26,13,0,212,219,3,24,12,0,213,219,3,28,14,0,214,219,3,30,15,0,215,
        219,3,36,18,0,216,219,3,32,16,0,217,219,3,34,17,0,218,206,1,0,0,
        0,218,207,1,0,0,0,218,208,1,0,0,0,218,209,1,0,0,0,218,210,1,0,0,
        0,218,211,1,0,0,0,218,212,1,0,0,0,218,213,1,0,0,0,218,214,1,0,0,
        0,218,215,1,0,0,0,218,216,1,0,0,0,218,217,1,0,0,0,219,11,1,0,0,0,
        220,222,5,75,0,0,221,223,3,4,2,0,222,221,1,0,0,0,222,223,1,0,0,0,
        223,225,1,0,0,0,224,226,5,153,0,0,225,224,1,0,0,0,225,226,1,0,0,
        0,226,13,1,0,0,0,227,229,5,87,0,0,228,230,3,4,2,0,229,228,1,0,0,
        0,229,230,1,0,0,0,230,232,1,0,0,0,231,233,5,153,0,0,232,231,1,0,
        0,0,232,233,1,0,0,0,233,15,1,0,0,0,234,243,5,14,0,0,235,236,5,133,
        0,0,236,239,3,158,79,0,237,238,5,118,0,0,238,240,3,158,79,0,239,
        237,1,0,0,0,239,240,1,0,0,0,240,241,1,0,0,0,241,242,5,152,0,0,242,
        244,1,0,0,0,243,235,1,0,0,0,243,244,1,0,0,0,244,245,1,0,0,0,245,
        246,3,36,18,0,246,17,1,0,0,0,247,248,5,96,0,0,248,252,3,36,18,0,
        249,251,3,16,8,0,250,249,1,0,0,0,251,254,1,0,0,0,252,250,1,0,0,0,
        252,253,1,0,0,0,253,257,1,0,0,0,254,252,1,0,0,0,255,256,5,30,0,0,
        256,258,3,36,18,0,257,255,1,0,0,0,257,258,1,0,0,0,258,19,1,0,0,0,
        259,260,5,42,0,0,260,261,5,133,0,0,261,262,3,4,2,0,262,263,5,152,
        0,0,263,266,3,10,5,0,264,265,5,25,0,0,265,267,3,10,5,0,266,264,1,
        0,0,0,266,267,1,0,0,0,267,21,1,0,0,0,268,269,5,103,0,0,269,270,5,
        133,0,0,270,271,3,4,2,0,271,272,5,152,0,0,272,274,3,10,5,0,273,275,
        5,153,0,0,274,273,1,0,0,0,274,275,1,0,0,0,275,23,1,0,0,0,276,277,
        5,34,0,0,277,281,5,133,0,0,278,282,3,6,3,0,279,282,3,30,15,0,280,
        282,3,4,2,0,281,278,1,0,0,0,281,279,1,0,0,0,281,280,1,0,0,0,281,
        282,1,0,0,0,282,283,1,0,0,0,283,285,5,153,0,0,284,286,3,4,2,0,285,
        284,1,0,0,0,285,286,1,0,0,0,286,287,1,0,0,0,287,291,5,153,0,0,288,
        292,3,6,3,0,289,292,3,30,15,0,290,292,3,4,2,0,291,288,1,0,0,0,291,
        289,1,0,0,0,291,290,1,0,0,0,291,292,1,0,0,0,292,293,1,0,0,0,293,
        294,5,152,0,0,294,296,3,10,5,0,295,297,5,153,0,0,296,295,1,0,0,0,
        296,297,1,0,0,0,297,25,1,0,0,0,298,299,5,34,0,0,299,300,5,133,0,
        0,300,301,5,55,0,0,301,304,3,158,79,0,302,303,5,119,0,0,303,305,
        3,158,79,0,304,302,1,0,0,0,304,305,1,0,0,0,305,306,1,0,0,0,306,307,
        5,44,0,0,307,308,3,4,2,0,308,309,5,152,0,0,309,311,3,10,5,0,310,
        312,5,153,0,0,311,310,1,0,0,0,311,312,1,0,0,0,312,27,1,0,0,0,313,
        314,7,0,0,0,314,315,3,158,79,0,315,317,5,133,0,0,316,318,3,8,4,0,
        317,316,1,0,0,0,317,318,1,0,0,0,318,319,1,0,0,0,319,320,5,152,0,
        0,320,321,3,36,18,0,321,29,1,0,0,0,322,323,3,4,2,0,323,324,5,118,
        0,0,324,325,5,125,0,0,325,326,3,4,2,0,326,31,1,0,0,0,327,329,3,4,
        2,0,328,330,5,153,0,0,329,328,1,0,0,0,329,330,1,0,0,0,330,33,1,0,
        0,0,331,332,5,153,0,0,332,35,1,0,0,0,333,337,5,131,0,0,334,336,3,
        2,1,0,335,334,1,0,0,0,336,339,1,0,0,0,337,335,1,0,0,0,337,338,1,
        0,0,0,338,340,1,0,0,0,339,337,1,0,0,0,340,341,5,150,0,0,341,37,1,
        0,0,0,342,343,3,4,2,0,343,344,5,118,0,0,344,345,3,4,2,0,345,39,1,
        0,0,0,346,351,3,38,19,0,347,348,5,119,0,0,348,350,3,38,19,0,349,
        347,1,0,0,0,350,353,1,0,0,0,351,349,1,0,0,0,351,352,1,0,0,0,352,
        355,1,0,0,0,353,351,1,0,0,0,354,356,5,119,0,0,355,354,1,0,0,0,355,
        356,1,0,0,0,356,41,1,0,0,0,357,361,3,48,24,0,358,361,3,50,25,0,359,
        361,3,122,61,0,360,357,1,0,0,0,360,358,1,0,0,0,360,359,1,0,0,0,361,
        362,1,0,0,0,362,363,5,0,0,1,363,43,1,0,0,0,364,371,3,50,25,0,365,
        366,5,133,0,0,366,367,3,48,24,0,367,368,5,152,0,0,368,371,1,0,0,
        0,369,371,3,162,81,0,370,364,1,0,0,0,370,365,1,0,0,0,370,369,1,0,
        0,0,371,45,1,0,0,0,372,377,5,27,0,0,373,374,5,98,0,0,374,377,5,1,
        0,0,375,377,5,47,0,0,376,372,1,0,0,0,376,373,1,0,0,0,376,375,1,0,
        0,0,377,378,1,0,0,0,378,379,3,44,22,0,379,47,1,0,0,0,380,384,3,44,
        22,0,381,383,3,46,23,0,382,381,1,0,0,0,383,386,1,0,0,0,384,382,1,
        0,0,0,384,385,1,0,0,0,385,49,1,0,0,0,386,384,1,0,0,0,387,389,3,52,
        26,0,388,387,1,0,0,0,388,389,1,0,0,0,389,390,1,0,0,0,390,392,5,82,
        0,0,391,393,5,24,0,0,392,391,1,0,0,0,392,393,1,0,0,0,393,395,1,0,
        0,0,394,396,3,54,27,0,395,394,1,0,0,0,395,396,1,0,0,0,396,397,1,
        0,0,0,397,399,3,116,58,0,398,400,3,56,28,0,399,398,1,0,0,0,399,400,
        1,0,0,0,400,402,1,0,0,0,401,403,3,58,29,0,402,401,1,0,0,0,402,403,
        1,0,0,0,403,405,1,0,0,0,404,406,3,62,31,0,405,404,1,0,0,0,405,406,
        1,0,0,0,406,408,1,0,0,0,407,409,3,64,32,0,408,407,1,0,0,0,408,409,
        1,0,0,0,409,411,1,0,0,0,410,412,3,66,33,0,411,410,1,0,0,0,411,412,
        1,0,0,0,412,415,1,0,0,0,413,414,5,105,0,0,414,416,7,1,0,0,415,413,
        1,0,0,0,415,416,1,0,0,0,416,419,1,0,0,0,417,418,5,105,0,0,418,420,
        5,92,0,0,419,417,1,0,0,0,419,420,1,0,0,0,420,422,1,0,0,0,421,423,
        3,68,34,0,422,421,1,0,0,0,422,423,1,0,0,0,423,425,1,0,0,0,424,426,
        3,60,30,0,425,424,1,0,0,0,425,426,1,0,0,0,426,428,1,0,0,0,427,429,
        3,70,35,0,428,427,1,0,0,0,428,429,1,0,0,0,429,432,1,0,0,0,430,433,
        3,74,37,0,431,433,3,76,38,0,432,430,1,0,0,0,432,431,1,0,0,0,432,
        433,1,0,0,0,433,435,1,0,0,0,434,436,3,78,39,0,435,434,1,0,0,0,435,
        436,1,0,0,0,436,51,1,0,0,0,437,438,5,105,0,0,438,439,3,126,63,0,
        439,53,1,0,0,0,440,441,5,91,0,0,441,444,5,111,0,0,442,443,5,105,
        0,0,443,445,5,88,0,0,444,442,1,0,0,0,444,445,1,0,0,0,445,55,1,0,
        0,0,446,447,5,35,0,0,447,448,3,80,40,0,448,57,1,0,0,0,449,451,7,
        2,0,0,450,449,1,0,0,0,450,451,1,0,0,0,451,452,1,0,0,0,452,453,5,
        5,0,0,453,454,5,50,0,0,454,455,3,116,58,0,455,59,1,0,0,0,456,457,
        5,104,0,0,457,458,3,158,79,0,458,459,5,6,0,0,459,460,5,133,0,0,460,
        461,3,100,50,0,461,471,5,152,0,0,462,463,5,119,0,0,463,464,3,158,
        79,0,464,465,5,6,0,0,465,466,5,133,0,0,466,467,3,100,50,0,467,468,
        5,152,0,0,468,470,1,0,0,0,469,462,1,0,0,0,470,473,1,0,0,0,471,469,
        1,0,0,0,471,472,1,0,0,0,472,61,1,0,0,0,473,471,1,0,0,0,474,475,5,
        72,0,0,475,476,3,118,59,0,476,63,1,0,0,0,477,478,5,102,0,0,478,479,
        3,118,59,0,479,65,1,0,0,0,480,481,5,38,0,0,481,488,5,11,0,0,482,
        483,7,1,0,0,483,484,5,133,0,0,484,485,3,116,58,0,485,486,5,152,0,
        0,486,489,1,0,0,0,487,489,3,116,58,0,488,482,1,0,0,0,488,487,1,0,
        0,0,489,67,1,0,0,0,490,491,5,39,0,0,491,492,3,118,59,0,492,69,1,
        0,0,0,493,494,5,67,0,0,494,495,5,11,0,0,495,496,3,90,45,0,496,71,
        1,0,0,0,497,498,5,67,0,0,498,499,5,11,0,0,499,500,3,116,58,0,500,
        73,1,0,0,0,501,502,5,57,0,0,502,505,3,118,59,0,503,504,5,119,0,0,
        504,506,3,118,59,0,505,503,1,0,0,0,505,506,1,0,0,0,506,511,1,0,0,
        0,507,508,5,105,0,0,508,512,5,88,0,0,509,510,5,11,0,0,510,512,3,
        116,58,0,511,507,1,0,0,0,511,509,1,0,0,0,511,512,1,0,0,0,512,531,
        1,0,0,0,513,514,5,57,0,0,514,517,3,118,59,0,515,516,5,105,0,0,516,
        518,5,88,0,0,517,515,1,0,0,0,517,518,1,0,0,0,518,519,1,0,0,0,519,
        520,5,64,0,0,520,521,3,118,59,0,521,531,1,0,0,0,522,523,5,57,0,0,
        523,524,3,118,59,0,524,525,5,64,0,0,525,528,3,118,59,0,526,527,5,
        11,0,0,527,529,3,116,58,0,528,526,1,0,0,0,528,529,1,0,0,0,529,531,
        1,0,0,0,530,501,1,0,0,0,530,513,1,0,0,0,530,522,1,0,0,0,531,75,1,
        0,0,0,532,533,5,64,0,0,533,534,3,118,59,0,534,77,1,0,0,0,535,536,
        5,84,0,0,536,537,3,96,48,0,537,79,1,0,0,0,538,539,6,40,-1,0,539,
        541,3,134,67,0,540,542,5,29,0,0,541,540,1,0,0,0,541,542,1,0,0,0,
        542,544,1,0,0,0,543,545,3,88,44,0,544,543,1,0,0,0,544,545,1,0,0,
        0,545,551,1,0,0,0,546,547,5,133,0,0,547,548,3,80,40,0,548,549,5,
        152,0,0,549,551,1,0,0,0,550,538,1,0,0,0,550,546,1,0,0,0,551,566,
        1,0,0,0,552,553,10,3,0,0,553,554,3,84,42,0,554,555,3,80,40,4,555,
        565,1,0,0,0,556,558,10,4,0,0,557,559,3,82,41,0,558,557,1,0,0,0,558,
        559,1,0,0,0,559,560,1,0,0,0,560,561,5,50,0,0,561,562,3,80,40,0,562,
        563,3,86,43,0,563,565,1,0,0,0,564,552,1,0,0,0,564,556,1,0,0,0,565,
        568,1,0,0,0,566,564,1,0,0,0,566,567,1,0,0,0,567,81,1,0,0,0,568,566,
        1,0,0,0,569,571,7,3,0,0,570,569,1,0,0,0,570,571,1,0,0,0,571,572,
        1,0,0,0,572,579,5,46,0,0,573,575,5,46,0,0,574,576,7,3,0,0,575,574,
        1,0,0,0,575,576,1,0,0,0,576,579,1,0,0,0,577,579,7,3,0,0,578,570,
        1,0,0,0,578,573,1,0,0,0,578,577,1,0,0,0,579,613,1,0,0,0,580,582,
        7,4,0,0,581,580,1,0,0,0,581,582,1,0,0,0,582,583,1,0,0,0,583,585,
        7,5,0,0,584,586,5,68,0,0,585,584,1,0,0,0,585,586,1,0,0,0,586,595,
        1,0,0,0,587,589,7,5,0,0,588,590,5,68,0,0,589,588,1,0,0,0,589,590,
        1,0,0,0,590,592,1,0,0,0,591,593,7,4,0,0,592,591,1,0,0,0,592,593,
        1,0,0,0,593,595,1,0,0,0,594,581,1,0,0,0,594,587,1,0,0,0,595,613,
        1,0,0,0,596,598,7,6,0,0,597,596,1,0,0,0,597,598,1,0,0,0,598,599,
        1,0,0,0,599,601,5,36,0,0,600,602,5,68,0,0,601,600,1,0,0,0,601,602,
        1,0,0,0,602,611,1,0,0,0,603,605,5,36,0,0,604,606,5,68,0,0,605,604,
        1,0,0,0,605,606,1,0,0,0,606,608,1,0,0,0,607,609,7,6,0,0,608,607,
        1,0,0,0,608,609,1,0,0,0,609,611,1,0,0,0,610,597,1,0,0,0,610,603,
        1,0,0,0,611,613,1,0,0,0,612,578,1,0,0,0,612,594,1,0,0,0,612,610,
        1,0,0,0,613,83,1,0,0,0,614,615,5,17,0,0,615,618,5,50,0,0,616,618,
        5,119,0,0,617,614,1,0,0,0,617,616,1,0,0,0,618,85,1,0,0,0,619,620,
        5,65,0,0,620,629,3,116,58,0,621,622,5,99,0,0,622,623,5,133,0,0,623,
        624,3,116,58,0,624,625,5,152,0,0,625,629,1,0,0,0,626,627,5,99,0,
        0,627,629,3,116,58,0,628,619,1,0,0,0,628,621,1,0,0,0,628,626,1,0,
        0,0,629,87,1,0,0,0,630,631,5,80,0,0,631,634,3,94,47,0,632,633,5,
        64,0,0,633,635,3,94,47,0,634,632,1,0,0,0,634,635,1,0,0,0,635,89,
        1,0,0,0,636,641,3,92,46,0,637,638,5,119,0,0,638,640,3,92,46,0,639,
        637,1,0,0,0,640,643,1,0,0,0,641,639,1,0,0,0,641,642,1,0,0,0,642,
        91,1,0,0,0,643,641,1,0,0,0,644,646,3,118,59,0,645,647,7,7,0,0,646,
        645,1,0,0,0,646,647,1,0,0,0,647,650,1,0,0,0,648,649,5,63,0,0,649,
        651,7,8,0,0,650,648,1,0,0,0,650,651,1,0,0,0,651,654,1,0,0,0,652,
        653,5,16,0,0,653,655,5,113,0,0,654,652,1,0,0,0,654,655,1,0,0,0,655,
        93,1,0,0,0,656,663,3,162,81,0,657,660,3,146,73,0,658,659,5,154,0,
        0,659,661,3,146,73,0,660,658,1,0,0,0,660,661,1,0,0,0,661,663,1,0,
        0,0,662,656,1,0,0,0,662,657,1,0,0,0,663,95,1,0,0,0,664,669,3,98,
        49,0,665,666,5,119,0,0,666,668,3,98,49,0,667,665,1,0,0,0,668,671,
        1,0,0,0,669,667,1,0,0,0,669,670,1,0,0,0,670,97,1,0,0,0,671,669,1,
        0,0,0,672,673,3,158,79,0,673,674,5,125,0,0,674,675,3,148,74,0,675,
        99,1,0,0,0,676,678,3,102,51,0,677,676,1,0,0,0,677,678,1,0,0,0,678,
        680,1,0,0,0,679,681,3,104,52,0,680,679,1,0,0,0,680,681,1,0,0,0,681,
        683,1,0,0,0,682,684,3,106,53,0,683,682,1,0,0,0,683,684,1,0,0,0,684,
        101,1,0,0,0,685,686,5,70,0,0,686,687,5,11,0,0,687,688,3,116,58,0,
        688,103,1,0,0,0,689,690,5,67,0,0,690,691,5,11,0,0,691,692,3,90,45,
        0,692,105,1,0,0,0,693,694,7,9,0,0,694,695,3,108,54,0,695,107,1,0,
        0,0,696,703,3,110,55,0,697,698,5,9,0,0,698,699,3,110,55,0,699,700,
        5,2,0,0,700,701,3,110,55,0,701,703,1,0,0,0,702,696,1,0,0,0,702,697,
        1,0,0,0,703,109,1,0,0,0,704,705,5,19,0,0,705,717,5,78,0,0,706,707,
        5,97,0,0,707,717,5,71,0,0,708,709,5,97,0,0,709,717,5,33,0,0,710,
        711,3,146,73,0,711,712,5,71,0,0,712,717,1,0,0,0,713,714,3,146,73,
        0,714,715,5,33,0,0,715,717,1,0,0,0,716,704,1,0,0,0,716,706,1,0,0,
        0,716,708,1,0,0,0,716,710,1,0,0,0,716,713,1,0,0,0,717,111,1,0,0,
        0,718,719,3,118,59,0,719,720,5,0,0,1,720,113,1,0,0,0,721,778,3,158,
        79,0,722,723,3,158,79,0,723,724,5,133,0,0,724,725,3,158,79,0,725,
        732,3,114,57,0,726,727,5,119,0,0,727,728,3,158,79,0,728,729,3,114,
        57,0,729,731,1,0,0,0,730,726,1,0,0,0,731,734,1,0,0,0,732,730,1,0,
        0,0,732,733,1,0,0,0,733,736,1,0,0,0,734,732,1,0,0,0,735,737,5,119,
        0,0,736,735,1,0,0,0,736,737,1,0,0,0,737,738,1,0,0,0,738,739,5,152,
        0,0,739,778,1,0,0,0,740,741,3,158,79,0,741,742,5,133,0,0,742,747,
        3,160,80,0,743,744,5,119,0,0,744,746,3,160,80,0,745,743,1,0,0,0,
        746,749,1,0,0,0,747,745,1,0,0,0,747,748,1,0,0,0,748,751,1,0,0,0,
        749,747,1,0,0,0,750,752,5,119,0,0,751,750,1,0,0,0,751,752,1,0,0,
        0,752,753,1,0,0,0,753,754,5,152,0,0,754,778,1,0,0,0,755,756,3,158,
        79,0,756,757,5,133,0,0,757,762,3,114,57,0,758,759,5,119,0,0,759,
        761,3,114,57,0,760,758,1,0,0,0,761,764,1,0,0,0,762,760,1,0,0,0,762,
        763,1,0,0,0,763,766,1,0,0,0,764,762,1,0,0,0,765,767,5,119,0,0,766,
        765,1,0,0,0,766,767,1,0,0,0,767,768,1,0,0,0,768,769,5,152,0,0,769,
        778,1,0,0,0,770,771,3,158,79,0,771,773,5,133,0,0,772,774,3,116,58,
        0,773,772,1,0,0,0,773,774,1,0,0,0,774,775,1,0,0,0,775,776,5,152,
        0,0,776,778,1,0,0,0,777,721,1,0,0,0,777,722,1,0,0,0,777,740,1,0,
        0,0,777,755,1,0,0,0,777,770,1,0,0,0,778,115,1,0,0,0,779,784,3,118,
        59,0,780,781,5,119,0,0,781,783,3,118,59,0,782,780,1,0,0,0,783,786,
        1,0,0,0,784,782,1,0,0,0,784,785,1,0,0,0,785,788,1,0,0,0,786,784,
        1,0,0,0,787,789,5,119,0,0,788,787,1,0,0,0,788,789,1,0,0,0,789,117,
        1,0,0,0,790,791,6,59,-1,0,791,793,5,12,0,0,792,794,3,118,59,0,793,
        792,1,0,0,0,793,794,1,0,0,0,794,800,1,0,0,0,795,796,5,101,0,0,796,
        797,3,118,59,0,797,798,5,86,0,0,798,799,3,118,59,0,799,801,1,0,0,
        0,800,795,1,0,0,0,801,802,1,0,0,0,802,800,1,0,0,0,802,803,1,0,0,
        0,803,806,1,0,0,0,804,805,5,25,0,0,805,807,3,118,59,0,806,804,1,
        0,0,0,806,807,1,0,0,0,807,808,1,0,0,0,808,809,5,26,0,0,809,941,1,
        0,0,0,810,811,5,13,0,0,811,812,5,133,0,0,812,813,3,118,59,0,813,
        814,5,6,0,0,814,815,3,114,57,0,815,816,5,152,0,0,816,941,1,0,0,0,
        817,818,5,20,0,0,818,941,5,113,0,0,819,820,5,48,0,0,820,821,3,118,
        59,0,821,822,3,150,75,0,822,941,1,0,0,0,823,824,5,85,0,0,824,825,
        5,133,0,0,825,826,3,118,59,0,826,827,5,35,0,0,827,830,3,118,59,0,
        828,829,5,34,0,0,829,831,3,118,59,0,830,828,1,0,0,0,830,831,1,0,
        0,0,831,832,1,0,0,0,832,833,5,152,0,0,833,941,1,0,0,0,834,835,5,
        89,0,0,835,941,5,113,0,0,836,837,5,94,0,0,837,838,5,133,0,0,838,
        839,7,10,0,0,839,840,3,164,82,0,840,841,5,35,0,0,841,842,3,118,59,
        0,842,843,5,152,0,0,843,941,1,0,0,0,844,845,3,158,79,0,845,847,5,
        133,0,0,846,848,3,116,58,0,847,846,1,0,0,0,847,848,1,0,0,0,848,849,
        1,0,0,0,849,850,5,152,0,0,850,859,1,0,0,0,851,853,5,133,0,0,852,
        854,5,24,0,0,853,852,1,0,0,0,853,854,1,0,0,0,854,856,1,0,0,0,855,
        857,3,116,58,0,856,855,1,0,0,0,856,857,1,0,0,0,857,858,1,0,0,0,858,
        860,5,152,0,0,859,851,1,0,0,0,859,860,1,0,0,0,860,861,1,0,0,0,861,
        862,5,69,0,0,862,863,5,133,0,0,863,864,3,100,50,0,864,865,5,152,
        0,0,865,941,1,0,0,0,866,867,3,158,79,0,867,869,5,133,0,0,868,870,
        3,116,58,0,869,868,1,0,0,0,869,870,1,0,0,0,870,871,1,0,0,0,871,872,
        5,152,0,0,872,881,1,0,0,0,873,875,5,133,0,0,874,876,5,24,0,0,875,
        874,1,0,0,0,875,876,1,0,0,0,876,878,1,0,0,0,877,879,3,116,58,0,878,
        877,1,0,0,0,878,879,1,0,0,0,879,880,1,0,0,0,880,882,5,152,0,0,881,
        873,1,0,0,0,881,882,1,0,0,0,882,883,1,0,0,0,883,884,5,69,0,0,884,
        885,3,158,79,0,885,941,1,0,0,0,886,892,3,158,79,0,887,889,5,133,
        0,0,888,890,3,116,58,0,889,888,1,0,0,0,889,890,1,0,0,0,890,891,1,
        0,0,0,891,893,5,152,0,0,892,887,1,0,0,0,892,893,1,0,0,0,893,894,
        1,0,0,0,894,896,5,133,0,0,895,897,5,24,0,0,896,895,1,0,0,0,896,897,
        1,0,0,0,897,899,1,0,0,0,898,900,3,116,58,0,899,898,1,0,0,0,899,900,
        1,0,0,0,900,901,1,0,0,0,901,902,5,152,0,0,902,941,1,0,0,0,903,941,
        3,122,61,0,904,941,3,166,83,0,905,941,3,148,74,0,906,907,5,121,0,
        0,907,941,3,118,59,20,908,909,5,61,0,0,909,941,3,118,59,14,910,911,
        3,138,69,0,911,912,5,123,0,0,912,914,1,0,0,0,913,910,1,0,0,0,913,
        914,1,0,0,0,914,915,1,0,0,0,915,941,5,115,0,0,916,917,5,133,0,0,
        917,918,3,48,24,0,918,919,5,152,0,0,919,941,1,0,0,0,920,921,5,133,
        0,0,921,922,3,118,59,0,922,923,5,152,0,0,923,941,1,0,0,0,924,925,
        5,133,0,0,925,926,3,116,58,0,926,927,5,152,0,0,927,941,1,0,0,0,928,
        930,5,132,0,0,929,931,3,116,58,0,930,929,1,0,0,0,930,931,1,0,0,0,
        931,932,1,0,0,0,932,941,5,151,0,0,933,935,5,131,0,0,934,936,3,40,
        20,0,935,934,1,0,0,0,935,936,1,0,0,0,936,937,1,0,0,0,937,941,5,150,
        0,0,938,941,3,120,60,0,939,941,3,130,65,0,940,790,1,0,0,0,940,810,
        1,0,0,0,940,817,1,0,0,0,940,819,1,0,0,0,940,823,1,0,0,0,940,834,
        1,0,0,0,940,836,1,0,0,0,940,844,1,0,0,0,940,866,1,0,0,0,940,886,
        1,0,0,0,940,903,1,0,0,0,940,904,1,0,0,0,940,905,1,0,0,0,940,906,
        1,0,0,0,940,908,1,0,0,0,940,913,1,0,0,0,940,916,1,0,0,0,940,920,
        1,0,0,0,940,924,1,0,0,0,940,928,1,0,0,0,940,933,1,0,0,0,940,938,
        1,0,0,0,940,939,1,0,0,0,941,1052,1,0,0,0,942,946,10,19,0,0,943,947,
        5,115,0,0,944,947,5,154,0,0,945,947,5,141,0,0,946,943,1,0,0,0,946,
        944,1,0,0,0,946,945,1,0,0,0,947,948,1,0,0,0,948,1051,3,118,59,20,
        949,953,10,18,0,0,950,954,5,142,0,0,951,954,5,121,0,0,952,954,5,
        120,0,0,953,950,1,0,0,0,953,951,1,0,0,0,953,952,1,0,0,0,954,955,
        1,0,0,0,955,1051,3,118,59,19,956,981,10,17,0,0,957,982,5,124,0,0,
        958,982,5,125,0,0,959,982,5,136,0,0,960,982,5,134,0,0,961,982,5,
        135,0,0,962,982,5,126,0,0,963,982,5,127,0,0,964,966,5,61,0,0,965,
        964,1,0,0,0,965,966,1,0,0,0,966,967,1,0,0,0,967,969,5,44,0,0,968,
        970,5,15,0,0,969,968,1,0,0,0,969,970,1,0,0,0,970,982,1,0,0,0,971,
        973,5,61,0,0,972,971,1,0,0,0,972,973,1,0,0,0,973,974,1,0,0,0,974,
        982,7,11,0,0,975,982,5,148,0,0,976,982,5,149,0,0,977,982,5,138,0,
        0,978,982,5,129,0,0,979,982,5,130,0,0,980,982,5,137,0,0,981,957,
        1,0,0,0,981,958,1,0,0,0,981,959,1,0,0,0,981,960,1,0,0,0,981,961,
        1,0,0,0,981,962,1,0,0,0,981,963,1,0,0,0,981,965,1,0,0,0,981,972,
        1,0,0,0,981,975,1,0,0,0,981,976,1,0,0,0,981,977,1,0,0,0,981,978,
        1,0,0,0,981,979,1,0,0,0,981,980,1,0,0,0,982,983,1,0,0,0,983,1051,
        3,118,59,18,984,985,10,15,0,0,985,986,5,140,0,0,986,1051,3,118,59,
        16,987,988,10,13,0,0,988,989,5,2,0,0,989,1051,3,118,59,14,990,991,
        10,12,0,0,991,992,5,66,0,0,992,1051,3,118,59,13,993,995,10,11,0,
        0,994,996,5,61,0,0,995,994,1,0,0,0,995,996,1,0,0,0,996,997,1,0,0,
        0,997,998,5,9,0,0,998,999,3,118,59,0,999,1000,5,2,0,0,1000,1001,
        3,118,59,12,1001,1051,1,0,0,0,1002,1003,10,10,0,0,1003,1004,5,143,
        0,0,1004,1005,3,118,59,0,1005,1006,5,118,0,0,1006,1007,3,118,59,
        10,1007,1051,1,0,0,0,1008,1009,10,30,0,0,1009,1011,5,133,0,0,1010,
        1012,3,116,58,0,1011,1010,1,0,0,0,1011,1012,1,0,0,0,1012,1013,1,
        0,0,0,1013,1051,5,152,0,0,1014,1015,10,26,0,0,1015,1016,5,132,0,
        0,1016,1017,3,118,59,0,1017,1018,5,151,0,0,1018,1051,1,0,0,0,1019,
        1020,10,25,0,0,1020,1021,5,123,0,0,1021,1051,5,111,0,0,1022,1023,
        10,24,0,0,1023,1024,5,123,0,0,1024,1051,3,158,79,0,1025,1026,10,
        23,0,0,1026,1027,5,139,0,0,1027,1028,5,132,0,0,1028,1029,3,118,59,
        0,1029,1030,5,151,0,0,1030,1051,1,0,0,0,1031,1032,10,22,0,0,1032,
        1033,5,139,0,0,1033,1051,5,111,0,0,1034,1035,10,21,0,0,1035,1036,
        5,139,0,0,1036,1051,3,158,79,0,1037,1038,10,16,0,0,1038,1040,5,49,
        0,0,1039,1041,5,61,0,0,1040,1039,1,0,0,0,1040,1041,1,0,0,0,1041,
        1042,1,0,0,0,1042,1051,5,62,0,0,1043,1048,10,9,0,0,1044,1045,5,6,
        0,0,1045,1049,3,158,79,0,1046,1047,5,6,0,0,1047,1049,5,113,0,0,1048,
        1044,1,0,0,0,1048,1046,1,0,0,0,1049,1051,1,0,0,0,1050,942,1,0,0,
        0,1050,949,1,0,0,0,1050,956,1,0,0,0,1050,984,1,0,0,0,1050,987,1,
        0,0,0,1050,990,1,0,0,0,1050,993,1,0,0,0,1050,1002,1,0,0,0,1050,1008,
        1,0,0,0,1050,1014,1,0,0,0,1050,1019,1,0,0,0,1050,1022,1,0,0,0,1050,
        1025,1,0,0,0,1050,1031,1,0,0,0,1050,1034,1,0,0,0,1050,1037,1,0,0,
        0,1050,1043,1,0,0,0,1051,1054,1,0,0,0,1052,1050,1,0,0,0,1052,1053,
        1,0,0,0,1053,119,1,0,0,0,1054,1052,1,0,0,0,1055,1056,5,133,0,0,1056,
        1061,3,158,79,0,1057,1058,5,119,0,0,1058,1060,3,158,79,0,1059,1057,
        1,0,0,0,1060,1063,1,0,0,0,1061,1059,1,0,0,0,1061,1062,1,0,0,0,1062,
        1065,1,0,0,0,1063,1061,1,0,0,0,1064,1066,5,119,0,0,1065,1064,1,0,
        0,0,1065,1066,1,0,0,0,1066,1067,1,0,0,0,1067,1068,5,152,0,0,1068,
        1083,1,0,0,0,1069,1074,3,158,79,0,1070,1071,5,119,0,0,1071,1073,
        3,158,79,0,1072,1070,1,0,0,0,1073,1076,1,0,0,0,1074,1072,1,0,0,0,
        1074,1075,1,0,0,0,1075,1078,1,0,0,0,1076,1074,1,0,0,0,1077,1079,
        5,119,0,0,1078,1077,1,0,0,0,1078,1079,1,0,0,0,1079,1083,1,0,0,0,
        1080,1081,5,133,0,0,1081,1083,5,152,0,0,1082,1055,1,0,0,0,1082,1069,
        1,0,0,0,1082,1080,1,0,0,0,1083,1084,1,0,0,0,1084,1087,5,114,0,0,
        1085,1088,3,118,59,0,1086,1088,3,36,18,0,1087,1085,1,0,0,0,1087,
        1086,1,0,0,0,1088,121,1,0,0,0,1089,1090,5,135,0,0,1090,1094,3,158,
        79,0,1091,1093,3,124,62,0,1092,1091,1,0,0,0,1093,1096,1,0,0,0,1094,
        1092,1,0,0,0,1094,1095,1,0,0,0,1095,1097,1,0,0,0,1096,1094,1,0,0,
        0,1097,1098,5,154,0,0,1098,1099,5,127,0,0,1099,1122,1,0,0,0,1100,
        1101,5,135,0,0,1101,1105,3,158,79,0,1102,1104,3,124,62,0,1103,1102,
        1,0,0,0,1104,1107,1,0,0,0,1105,1103,1,0,0,0,1105,1106,1,0,0,0,1106,
        1108,1,0,0,0,1107,1105,1,0,0,0,1108,1114,5,127,0,0,1109,1115,3,122,
        61,0,1110,1111,5,131,0,0,1111,1112,3,118,59,0,1112,1113,5,150,0,
        0,1113,1115,1,0,0,0,1114,1109,1,0,0,0,1114,1110,1,0,0,0,1114,1115,
        1,0,0,0,1115,1116,1,0,0,0,1116,1117,5,135,0,0,1117,1118,5,154,0,
        0,1118,1119,3,158,79,0,1119,1120,5,127,0,0,1120,1122,1,0,0,0,1121,
        1089,1,0,0,0,1121,1100,1,0,0,0,1122,123,1,0,0,0,1123,1124,3,158,
        79,0,1124,1125,5,125,0,0,1125,1126,3,164,82,0,1126,1135,1,0,0,0,
        1127,1128,3,158,79,0,1128,1129,5,125,0,0,1129,1130,5,131,0,0,1130,
        1131,3,118,59,0,1131,1132,5,150,0,0,1132,1135,1,0,0,0,1133,1135,
        3,158,79,0,1134,1123,1,0,0,0,1134,1127,1,0,0,0,1134,1133,1,0,0,0,
        1135,125,1,0,0,0,1136,1141,3,128,64,0,1137,1138,5,119,0,0,1138,1140,
        3,128,64,0,1139,1137,1,0,0,0,1140,1143,1,0,0,0,1141,1139,1,0,0,0,
        1141,1142,1,0,0,0,1142,1145,1,0,0,0,1143,1141,1,0,0,0,1144,1146,
        5,119,0,0,1145,1144,1,0,0,0,1145,1146,1,0,0,0,1146,127,1,0,0,0,1147,
        1148,3,158,79,0,1148,1149,5,6,0,0,1149,1150,5,133,0,0,1150,1151,
        3,48,24,0,1151,1152,5,152,0,0,1152,1158,1,0,0,0,1153,1154,3,118,
        59,0,1154,1155,5,6,0,0,1155,1156,3,158,79,0,1156,1158,1,0,0,0,1157,
        1147,1,0,0,0,1157,1153,1,0,0,0,1158,129,1,0,0,0,1159,1167,3,162,
        81,0,1160,1161,3,138,69,0,1161,1162,5,123,0,0,1162,1164,1,0,0,0,
        1163,1160,1,0,0,0,1163,1164,1,0,0,0,1164,1165,1,0,0,0,1165,1167,
        3,132,66,0,1166,1159,1,0,0,0,1166,1163,1,0,0,0,1167,131,1,0,0,0,
        1168,1173,3,158,79,0,1169,1170,5,123,0,0,1170,1172,3,158,79,0,1171,
        1169,1,0,0,0,1172,1175,1,0,0,0,1173,1171,1,0,0,0,1173,1174,1,0,0,
        0,1174,133,1,0,0,0,1175,1173,1,0,0,0,1176,1177,6,67,-1,0,1177,1186,
        3,138,69,0,1178,1186,3,136,68,0,1179,1180,5,133,0,0,1180,1181,3,
        48,24,0,1181,1182,5,152,0,0,1182,1186,1,0,0,0,1183,1186,3,122,61,
        0,1184,1186,3,162,81,0,1185,1176,1,0,0,0,1185,1178,1,0,0,0,1185,
        1179,1,0,0,0,1185,1183,1,0,0,0,1185,1184,1,0,0,0,1186,1195,1,0,0,
        0,1187,1191,10,3,0,0,1188,1192,3,156,78,0,1189,1190,5,6,0,0,1190,
        1192,3,158,79,0,1191,1188,1,0,0,0,1191,1189,1,0,0,0,1192,1194,1,
        0,0,0,1193,1187,1,0,0,0,1194,1197,1,0,0,0,1195,1193,1,0,0,0,1195,
        1196,1,0,0,0,1196,135,1,0,0,0,1197,1195,1,0,0,0,1198,1199,3,158,
        79,0,1199,1201,5,133,0,0,1200,1202,3,140,70,0,1201,1200,1,0,0,0,
        1201,1202,1,0,0,0,1202,1203,1,0,0,0,1203,1204,5,152,0,0,1204,137,
        1,0,0,0,1205,1206,3,142,71,0,1206,1207,5,123,0,0,1207,1209,1,0,0,
        0,1208,1205,1,0,0,0,1208,1209,1,0,0,0,1209,1210,1,0,0,0,1210,1211,
        3,158,79,0,1211,139,1,0,0,0,1212,1217,3,118,59,0,1213,1214,5,119,
        0,0,1214,1216,3,118,59,0,1215,1213,1,0,0,0,1216,1219,1,0,0,0,1217,
        1215,1,0,0,0,1217,1218,1,0,0,0,1218,1221,1,0,0,0,1219,1217,1,0,0,
        0,1220,1222,5,119,0,0,1221,1220,1,0,0,0,1221,1222,1,0,0,0,1222,141,
        1,0,0,0,1223,1224,3,158,79,0,1224,143,1,0,0,0,1225,1234,5,109,0,
        0,1226,1227,5,123,0,0,1227,1234,7,12,0,0,1228,1229,5,111,0,0,1229,
        1231,5,123,0,0,1230,1232,7,12,0,0,1231,1230,1,0,0,0,1231,1232,1,
        0,0,0,1232,1234,1,0,0,0,1233,1225,1,0,0,0,1233,1226,1,0,0,0,1233,
        1228,1,0,0,0,1234,145,1,0,0,0,1235,1237,7,13,0,0,1236,1235,1,0,0,
        0,1236,1237,1,0,0,0,1237,1244,1,0,0,0,1238,1245,3,144,72,0,1239,
        1245,5,110,0,0,1240,1245,5,111,0,0,1241,1245,5,112,0,0,1242,1245,
        5,45,0,0,1243,1245,5,60,0,0,1244,1238,1,0,0,0,1244,1239,1,0,0,0,
        1244,1240,1,0,0,0,1244,1241,1,0,0,0,1244,1242,1,0,0,0,1244,1243,
        1,0,0,0,1245,147,1,0,0,0,1246,1250,3,146,73,0,1247,1250,5,113,0,
        0,1248,1250,5,62,0,0,1249,1246,1,0,0,0,1249,1247,1,0,0,0,1249,1248,
        1,0,0,0,1250,149,1,0,0,0,1251,1252,7,14,0,0,1252,151,1,0,0,0,1253,
        1254,7,15,0,0,1254,153,1,0,0,0,1255,1256,7,16,0,0,1256,155,1,0,0,
        0,1257,1260,5,108,0,0,1258,1260,3,154,77,0,1259,1257,1,0,0,0,1259,
        1258,1,0,0,0,1260,157,1,0,0,0,1261,1265,5,108,0,0,1262,1265,3,150,
        75,0,1263,1265,3,152,76,0,1264,1261,1,0,0,0,1264,1262,1,0,0,0,1264,
        1263,1,0,0,0,1265,159,1,0,0,0,1266,1267,3,164,82,0,1267,1268,5,125,
        0,0,1268,1269,3,146,73,0,1269,161,1,0,0,0,1270,1271,5,131,0,0,1271,
        1272,3,118,59,0,1272,1273,5,150,0,0,1273,163,1,0,0,0,1274,1277,5,
        113,0,0,1275,1277,3,166,83,0,1276,1274,1,0,0,0,1276,1275,1,0,0,0,
        1277,165,1,0,0,0,1278,1282,5,145,0,0,1279,1281,3,168,84,0,1280,1279,
        1,0,0,0,1281,1284,1,0,0,0,1282,1280,1,0,0,0,1282,1283,1,0,0,0,1283,
        1285,1,0,0,0,1284,1282,1,0,0,0,1285,1286,5,147,0,0,1286,167,1,0,
        0,0,1287,1288,5,160,0,0,1288,1289,3,118,59,0,1289,1290,5,150,0,0,
        1290,1293,1,0,0,0,1291,1293,5,159,0,0,1292,1287,1,0,0,0,1292,1291,
        1,0,0,0,1293,169,1,0,0,0,1294,1298,5,146,0,0,1295,1297,3,172,86,
        0,1296,1295,1,0,0,0,1297,1300,1,0,0,0,1298,1296,1,0,0,0,1298,1299,
        1,0,0,0,1299,1301,1,0,0,0,1300,1298,1,0,0,0,1301,1302,5,0,0,1,1302,
        171,1,0,0,0,1303,1304,5,162,0,0,1304,1305,3,118,59,0,1305,1306,5,
        150,0,0,1306,1309,1,0,0,0,1307,1309,5,161,0,0,1308,1303,1,0,0,0,
        1308,1307,1,0,0,0,1309,173,1,0,0,0,168,177,184,193,200,204,218,222,
        225,229,232,239,243,252,257,266,274,281,285,291,296,304,311,317,
        329,337,351,355,360,370,376,384,388,392,395,399,402,405,408,411,
        415,419,422,425,428,432,435,444,450,471,488,505,511,517,528,530,
        541,544,550,558,564,566,570,575,578,581,585,589,592,594,597,601,
        605,608,610,612,617,628,634,641,646,650,654,660,662,669,677,680,
        683,702,716,732,736,747,751,762,766,773,777,784,788,793,802,806,
        830,847,853,856,859,869,875,878,881,889,892,896,899,913,930,935,
        940,946,953,965,969,972,981,995,1011,1040,1048,1050,1052,1061,1065,
        1074,1078,1082,1087,1094,1105,1114,1121,1134,1141,1145,1157,1163,
        1166,1173,1185,1191,1195,1201,1208,1217,1221,1231,1233,1236,1244,
        1249,1259,1264,1276,1282,1292,1298,1308
    ]

class HogQLParser ( Parser ):

    grammarFileName = "HogQLParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'->'", "'*'", "'`'", "'\\'", 
                     "':'", "','", "'||'", "'-'", "'$'", "'.'", "'=='", 
                     "'='", "'>='", "'>'", "'#'", "'~*'", "'=~*'", "'{'", 
                     "'['", "'('", "'<='", "'<'", "<INVALID>", "'!~*'", 
                     "'!~'", "'?.'", "'??'", "'%'", "'+'", "'?'", "'\"'", 
                     "'f''", "'F''", "'''", "'~'", "'=~'", "'}'", "']'", 
                     "')'", "';'", "'/'", "'_'" ]

    symbolicNames = [ "<INVALID>", "ALL", "AND", "ANTI", "ANY", "ARRAY", 
                      "AS", "ASCENDING", "ASOF", "BETWEEN", "BOTH", "BY", 
                      "CASE", "CAST", "CATCH", "COHORT", "COLLATE", "CROSS", 
                      "CUBE", "CURRENT", "DATE", "DAY", "DESC", "DESCENDING", 
                      "DISTINCT", "ELSE", "END", "EXCEPT", "EXTRACT", "FINAL", 
                      "FINALLY", "FIRST", "FN", "FOLLOWING", "FOR", "FROM", 
                      "FULL", "FUN", "GROUP", "HAVING", "HOUR", "ID", "IF", 
                      "ILIKE", "IN", "INF", "INNER", "INTERSECT", "INTERVAL", 
                      "IS", "JOIN", "KEY", "LAST", "LEADING", "LEFT", "LET", 
                      "LIKE", "LIMIT", "MINUTE", "MONTH", "NAN_SQL", "NOT", 
                      "NULL_SQL", "NULLS", "OFFSET", "ON", "OR", "ORDER", 
                      "OUTER", "OVER", "PARTITION", "PRECEDING", "PREWHERE", 
                      "QUARTER", "RANGE", "RETURN", "RIGHT", "ROLLUP", "ROW", 
                      "ROWS", "SAMPLE", "SECOND", "SELECT", "SEMI", "SETTINGS", 
                      "SUBSTRING", "THEN", "THROW", "TIES", "TIMESTAMP", 
                      "TO", "TOP", "TOTALS", "TRAILING", "TRIM", "TRUNCATE", 
                      "TRY", "UNBOUNDED", "UNION", "USING", "WEEK", "WHEN", 
                      "WHERE", "WHILE", "WINDOW", "WITH", "YEAR", "ESCAPE_CHAR_COMMON", 
                      "IDENTIFIER", "FLOATING_LITERAL", "OCTAL_LITERAL", 
                      "DECIMAL_LITERAL", "HEXADECIMAL_LITERAL", "STRING_LITERAL", 
                      "ARROW", "ASTERISK", "BACKQUOTE", "BACKSLASH", "COLON", 
                      "COMMA", "CONCAT", "DASH", "DOLLAR", "DOT", "EQ_DOUBLE", 
                      "EQ_SINGLE", "GT_EQ", "GT", "HASH", "IREGEX_SINGLE", 
                      "IREGEX_DOUBLE", "LBRACE", "LBRACKET", "LPAREN", "LT_EQ", 
                      "LT", "NOT_EQ", "NOT_IREGEX", "NOT_REGEX", "NULL_PROPERTY", 
                      "NULLISH", "PERCENT", "PLUS", "QUERY", "QUOTE_DOUBLE", 
                      "QUOTE_SINGLE_TEMPLATE", "QUOTE_SINGLE_TEMPLATE_FULL", 
                      "QUOTE_SINGLE", "REGEX_SINGLE", "REGEX_DOUBLE", "RBRACE", 
                      "RBRACKET", "RPAREN", "SEMICOLON", "SLASH", "UNDERSCORE", 
                      "MULTI_LINE_COMMENT", "SINGLE_LINE_COMMENT", "WHITESPACE", 
                      "STRING_TEXT", "STRING_ESCAPE_TRIGGER", "FULL_STRING_TEXT", 
                      "FULL_STRING_ESCAPE_TRIGGER" ]

    RULE_program = 0
    RULE_declaration = 1
    RULE_expression = 2
    RULE_varDecl = 3
    RULE_identifierList = 4
    RULE_statement = 5
    RULE_returnStmt = 6
    RULE_throwStmt = 7
    RULE_catchBlock = 8
    RULE_tryCatchStmt = 9
    RULE_ifStmt = 10
    RULE_whileStmt = 11
    RULE_forStmt = 12
    RULE_forInStmt = 13
    RULE_funcStmt = 14
    RULE_varAssignment = 15
    RULE_exprStmt = 16
    RULE_emptyStmt = 17
    RULE_block = 18
    RULE_kvPair = 19
    RULE_kvPairList = 20
    RULE_select = 21
    RULE_selectStmtWithParens = 22
    RULE_subsequentSelectSetClause = 23
    RULE_selectSetStmt = 24
    RULE_selectStmt = 25
    RULE_withClause = 26
    RULE_topClause = 27
    RULE_fromClause = 28
    RULE_arrayJoinClause = 29
    RULE_windowClause = 30
    RULE_prewhereClause = 31
    RULE_whereClause = 32
    RULE_groupByClause = 33
    RULE_havingClause = 34
    RULE_orderByClause = 35
    RULE_projectionOrderByClause = 36
    RULE_limitAndOffsetClause = 37
    RULE_offsetOnlyClause = 38
    RULE_settingsClause = 39
    RULE_joinExpr = 40
    RULE_joinOp = 41
    RULE_joinOpCross = 42
    RULE_joinConstraintClause = 43
    RULE_sampleClause = 44
    RULE_orderExprList = 45
    RULE_orderExpr = 46
    RULE_ratioExpr = 47
    RULE_settingExprList = 48
    RULE_settingExpr = 49
    RULE_windowExpr = 50
    RULE_winPartitionByClause = 51
    RULE_winOrderByClause = 52
    RULE_winFrameClause = 53
    RULE_winFrameExtend = 54
    RULE_winFrameBound = 55
    RULE_expr = 56
    RULE_columnTypeExpr = 57
    RULE_columnExprList = 58
    RULE_columnExpr = 59
    RULE_columnLambdaExpr = 60
    RULE_hogqlxTagElement = 61
    RULE_hogqlxTagAttribute = 62
    RULE_withExprList = 63
    RULE_withExpr = 64
    RULE_columnIdentifier = 65
    RULE_nestedIdentifier = 66
    RULE_tableExpr = 67
    RULE_tableFunctionExpr = 68
    RULE_tableIdentifier = 69
    RULE_tableArgList = 70
    RULE_databaseIdentifier = 71
    RULE_floatingLiteral = 72
    RULE_numberLiteral = 73
    RULE_literal = 74
    RULE_interval = 75
    RULE_keyword = 76
    RULE_keywordForAlias = 77
    RULE_alias = 78
    RULE_identifier = 79
    RULE_enumValue = 80
    RULE_placeholder = 81
    RULE_string = 82
    RULE_templateString = 83
    RULE_stringContents = 84
    RULE_fullTemplateString = 85
    RULE_stringContentsFull = 86

    ruleNames =  [ "program", "declaration", "expression", "varDecl", "identifierList", 
                   "statement", "returnStmt", "throwStmt", "catchBlock", 
                   "tryCatchStmt", "ifStmt", "whileStmt", "forStmt", "forInStmt", 
                   "funcStmt", "varAssignment", "exprStmt", "emptyStmt", 
                   "block", "kvPair", "kvPairList", "select", "selectStmtWithParens", 
                   "subsequentSelectSetClause", "selectSetStmt", "selectStmt", 
                   "withClause", "topClause", "fromClause", "arrayJoinClause", 
                   "windowClause", "prewhereClause", "whereClause", "groupByClause", 
                   "havingClause", "orderByClause", "projectionOrderByClause", 
                   "limitAndOffsetClause", "offsetOnlyClause", "settingsClause", 
                   "joinExpr", "joinOp", "joinOpCross", "joinConstraintClause", 
                   "sampleClause", "orderExprList", "orderExpr", "ratioExpr", 
                   "settingExprList", "settingExpr", "windowExpr", "winPartitionByClause", 
                   "winOrderByClause", "winFrameClause", "winFrameExtend", 
                   "winFrameBound", "expr", "columnTypeExpr", "columnExprList", 
                   "columnExpr", "columnLambdaExpr", "hogqlxTagElement", 
                   "hogqlxTagAttribute", "withExprList", "withExpr", "columnIdentifier", 
                   "nestedIdentifier", "tableExpr", "tableFunctionExpr", 
                   "tableIdentifier", "tableArgList", "databaseIdentifier", 
                   "floatingLiteral", "numberLiteral", "literal", "interval", 
                   "keyword", "keywordForAlias", "alias", "identifier", 
                   "enumValue", "placeholder", "string", "templateString", 
                   "stringContents", "fullTemplateString", "stringContentsFull" ]

    EOF = Token.EOF
    ALL=1
    AND=2
    ANTI=3
    ANY=4
    ARRAY=5
    AS=6
    ASCENDING=7
    ASOF=8
    BETWEEN=9
    BOTH=10
    BY=11
    CASE=12
    CAST=13
    CATCH=14
    COHORT=15
    COLLATE=16
    CROSS=17
    CUBE=18
    CURRENT=19
    DATE=20
    DAY=21
    DESC=22
    DESCENDING=23
    DISTINCT=24
    ELSE=25
    END=26
    EXCEPT=27
    EXTRACT=28
    FINAL=29
    FINALLY=30
    FIRST=31
    FN=32
    FOLLOWING=33
    FOR=34
    FROM=35
    FULL=36
    FUN=37
    GROUP=38
    HAVING=39
    HOUR=40
    ID=41
    IF=42
    ILIKE=43
    IN=44
    INF=45
    INNER=46
    INTERSECT=47
    INTERVAL=48
    IS=49
    JOIN=50
    KEY=51
    LAST=52
    LEADING=53
    LEFT=54
    LET=55
    LIKE=56
    LIMIT=57
    MINUTE=58
    MONTH=59
    NAN_SQL=60
    NOT=61
    NULL_SQL=62
    NULLS=63
    OFFSET=64
    ON=65
    OR=66
    ORDER=67
    OUTER=68
    OVER=69
    PARTITION=70
    PRECEDING=71
    PREWHERE=72
    QUARTER=73
    RANGE=74
    RETURN=75
    RIGHT=76
    ROLLUP=77
    ROW=78
    ROWS=79
    SAMPLE=80
    SECOND=81
    SELECT=82
    SEMI=83
    SETTINGS=84
    SUBSTRING=85
    THEN=86
    THROW=87
    TIES=88
    TIMESTAMP=89
    TO=90
    TOP=91
    TOTALS=92
    TRAILING=93
    TRIM=94
    TRUNCATE=95
    TRY=96
    UNBOUNDED=97
    UNION=98
    USING=99
    WEEK=100
    WHEN=101
    WHERE=102
    WHILE=103
    WINDOW=104
    WITH=105
    YEAR=106
    ESCAPE_CHAR_COMMON=107
    IDENTIFIER=108
    FLOATING_LITERAL=109
    OCTAL_LITERAL=110
    DECIMAL_LITERAL=111
    HEXADECIMAL_LITERAL=112
    STRING_LITERAL=113
    ARROW=114
    ASTERISK=115
    BACKQUOTE=116
    BACKSLASH=117
    COLON=118
    COMMA=119
    CONCAT=120
    DASH=121
    DOLLAR=122
    DOT=123
    EQ_DOUBLE=124
    EQ_SINGLE=125
    GT_EQ=126
    GT=127
    HASH=128
    IREGEX_SINGLE=129
    IREGEX_DOUBLE=130
    LBRACE=131
    LBRACKET=132
    LPAREN=133
    LT_EQ=134
    LT=135
    NOT_EQ=136
    NOT_IREGEX=137
    NOT_REGEX=138
    NULL_PROPERTY=139
    NULLISH=140
    PERCENT=141
    PLUS=142
    QUERY=143
    QUOTE_DOUBLE=144
    QUOTE_SINGLE_TEMPLATE=145
    QUOTE_SINGLE_TEMPLATE_FULL=146
    QUOTE_SINGLE=147
    REGEX_SINGLE=148
    REGEX_DOUBLE=149
    RBRACE=150
    RBRACKET=151
    RPAREN=152
    SEMICOLON=153
    SLASH=154
    UNDERSCORE=155
    MULTI_LINE_COMMENT=156
    SINGLE_LINE_COMMENT=157
    WHITESPACE=158
    STRING_TEXT=159
    STRING_ESCAPE_TRIGGER=160
    FULL_STRING_TEXT=161
    FULL_STRING_ESCAPE_TRIGGER=162

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class ProgramContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(HogQLParser.EOF, 0)

        def declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.DeclarationContext)
            else:
                return self.getTypedRuleContext(HogQLParser.DeclarationContext,i)


        def getRuleIndex(self):
            return HogQLParser.RULE_program

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProgram" ):
                return visitor.visitProgram(self)
            else:
                return visitor.visitChildren(self)




    def program(self):

        localctx = HogQLParser.ProgramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_program)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 177
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -140738696331266) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 723944844006785023) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & 4212759) != 0):
                self.state = 174
                self.declaration()
                self.state = 179
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 180
            self.match(HogQLParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def varDecl(self):
            return self.getTypedRuleContext(HogQLParser.VarDeclContext,0)


        def statement(self):
            return self.getTypedRuleContext(HogQLParser.StatementContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_declaration

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclaration" ):
                return visitor.visitDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def declaration(self):

        localctx = HogQLParser.DeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_declaration)
        try:
            self.state = 184
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [55]:
                self.enterOuterAlt(localctx, 1)
                self.state = 182
                self.varDecl()
                pass
            elif token in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 115, 121, 123, 131, 132, 133, 135, 142, 145, 153]:
                self.enterOuterAlt(localctx, 2)
                self.state = 183
                self.statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_expression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression" ):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)




    def expression(self):

        localctx = HogQLParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 186
            self.columnExpr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LET(self):
            return self.getToken(HogQLParser.LET, 0)

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def COLON(self):
            return self.getToken(HogQLParser.COLON, 0)

        def EQ_SINGLE(self):
            return self.getToken(HogQLParser.EQ_SINGLE, 0)

        def expression(self):
            return self.getTypedRuleContext(HogQLParser.ExpressionContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_varDecl

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarDecl" ):
                return visitor.visitVarDecl(self)
            else:
                return visitor.visitChildren(self)




    def varDecl(self):

        localctx = HogQLParser.VarDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_varDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 188
            self.match(HogQLParser.LET)
            self.state = 189
            self.identifier()
            self.state = 193
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==118:
                self.state = 190
                self.match(HogQLParser.COLON)
                self.state = 191
                self.match(HogQLParser.EQ_SINGLE)
                self.state = 192
                self.expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(HogQLParser.IdentifierContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_identifierList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifierList" ):
                return visitor.visitIdentifierList(self)
            else:
                return visitor.visitChildren(self)




    def identifierList(self):

        localctx = HogQLParser.IdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_identifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 195
            self.identifier()
            self.state = 200
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,3,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 196
                    self.match(HogQLParser.COMMA)
                    self.state = 197
                    self.identifier() 
                self.state = 202
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,3,self._ctx)

            self.state = 204
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119:
                self.state = 203
                self.match(HogQLParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def returnStmt(self):
            return self.getTypedRuleContext(HogQLParser.ReturnStmtContext,0)


        def throwStmt(self):
            return self.getTypedRuleContext(HogQLParser.ThrowStmtContext,0)


        def tryCatchStmt(self):
            return self.getTypedRuleContext(HogQLParser.TryCatchStmtContext,0)


        def ifStmt(self):
            return self.getTypedRuleContext(HogQLParser.IfStmtContext,0)


        def whileStmt(self):
            return self.getTypedRuleContext(HogQLParser.WhileStmtContext,0)


        def forInStmt(self):
            return self.getTypedRuleContext(HogQLParser.ForInStmtContext,0)


        def forStmt(self):
            return self.getTypedRuleContext(HogQLParser.ForStmtContext,0)


        def funcStmt(self):
            return self.getTypedRuleContext(HogQLParser.FuncStmtContext,0)


        def varAssignment(self):
            return self.getTypedRuleContext(HogQLParser.VarAssignmentContext,0)


        def block(self):
            return self.getTypedRuleContext(HogQLParser.BlockContext,0)


        def exprStmt(self):
            return self.getTypedRuleContext(HogQLParser.ExprStmtContext,0)


        def emptyStmt(self):
            return self.getTypedRuleContext(HogQLParser.EmptyStmtContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_statement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement" ):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)




    def statement(self):

        localctx = HogQLParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_statement)
        try:
            self.state = 218
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 206
                self.returnStmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 207
                self.throwStmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 208
                self.tryCatchStmt()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 209
                self.ifStmt()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 210
                self.whileStmt()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 211
                self.forInStmt()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 212
                self.forStmt()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 213
                self.funcStmt()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 214
                self.varAssignment()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 215
                self.block()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 216
                self.exprStmt()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 217
                self.emptyStmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(HogQLParser.RETURN, 0)

        def expression(self):
            return self.getTypedRuleContext(HogQLParser.ExpressionContext,0)


        def SEMICOLON(self):
            return self.getToken(HogQLParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_returnStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturnStmt" ):
                return visitor.visitReturnStmt(self)
            else:
                return visitor.visitChildren(self)




    def returnStmt(self):

        localctx = HogQLParser.ReturnStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_returnStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 220
            self.match(HogQLParser.RETURN)
            self.state = 222
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
            if la_ == 1:
                self.state = 221
                self.expression()


            self.state = 225
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.state = 224
                self.match(HogQLParser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ThrowStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def THROW(self):
            return self.getToken(HogQLParser.THROW, 0)

        def expression(self):
            return self.getTypedRuleContext(HogQLParser.ExpressionContext,0)


        def SEMICOLON(self):
            return self.getToken(HogQLParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_throwStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThrowStmt" ):
                return visitor.visitThrowStmt(self)
            else:
                return visitor.visitChildren(self)




    def throwStmt(self):

        localctx = HogQLParser.ThrowStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_throwStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 227
            self.match(HogQLParser.THROW)
            self.state = 229
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
            if la_ == 1:
                self.state = 228
                self.expression()


            self.state = 232
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
            if la_ == 1:
                self.state = 231
                self.match(HogQLParser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CatchBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.catchVar = None # IdentifierContext
            self.catchType = None # IdentifierContext
            self.catchStmt = None # BlockContext

        def CATCH(self):
            return self.getToken(HogQLParser.CATCH, 0)

        def block(self):
            return self.getTypedRuleContext(HogQLParser.BlockContext,0)


        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(HogQLParser.IdentifierContext,i)


        def COLON(self):
            return self.getToken(HogQLParser.COLON, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_catchBlock

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCatchBlock" ):
                return visitor.visitCatchBlock(self)
            else:
                return visitor.visitChildren(self)




    def catchBlock(self):

        localctx = HogQLParser.CatchBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_catchBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 234
            self.match(HogQLParser.CATCH)
            self.state = 243
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==133:
                self.state = 235
                self.match(HogQLParser.LPAREN)
                self.state = 236
                localctx.catchVar = self.identifier()
                self.state = 239
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==118:
                    self.state = 237
                    self.match(HogQLParser.COLON)
                    self.state = 238
                    localctx.catchType = self.identifier()


                self.state = 241
                self.match(HogQLParser.RPAREN)


            self.state = 245
            localctx.catchStmt = self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TryCatchStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.tryStmt = None # BlockContext
            self.finallyStmt = None # BlockContext

        def TRY(self):
            return self.getToken(HogQLParser.TRY, 0)

        def block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.BlockContext)
            else:
                return self.getTypedRuleContext(HogQLParser.BlockContext,i)


        def catchBlock(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.CatchBlockContext)
            else:
                return self.getTypedRuleContext(HogQLParser.CatchBlockContext,i)


        def FINALLY(self):
            return self.getToken(HogQLParser.FINALLY, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_tryCatchStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTryCatchStmt" ):
                return visitor.visitTryCatchStmt(self)
            else:
                return visitor.visitChildren(self)




    def tryCatchStmt(self):

        localctx = HogQLParser.TryCatchStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_tryCatchStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 247
            self.match(HogQLParser.TRY)
            self.state = 248
            localctx.tryStmt = self.block()
            self.state = 252
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==14:
                self.state = 249
                self.catchBlock()
                self.state = 254
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 257
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==30:
                self.state = 255
                self.match(HogQLParser.FINALLY)
                self.state = 256
                localctx.finallyStmt = self.block()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(HogQLParser.IF, 0)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(HogQLParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.StatementContext)
            else:
                return self.getTypedRuleContext(HogQLParser.StatementContext,i)


        def ELSE(self):
            return self.getToken(HogQLParser.ELSE, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_ifStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfStmt" ):
                return visitor.visitIfStmt(self)
            else:
                return visitor.visitChildren(self)




    def ifStmt(self):

        localctx = HogQLParser.IfStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_ifStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 259
            self.match(HogQLParser.IF)
            self.state = 260
            self.match(HogQLParser.LPAREN)
            self.state = 261
            self.expression()
            self.state = 262
            self.match(HogQLParser.RPAREN)
            self.state = 263
            self.statement()
            self.state = 266
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
            if la_ == 1:
                self.state = 264
                self.match(HogQLParser.ELSE)
                self.state = 265
                self.statement()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(HogQLParser.WHILE, 0)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(HogQLParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def statement(self):
            return self.getTypedRuleContext(HogQLParser.StatementContext,0)


        def SEMICOLON(self):
            return self.getToken(HogQLParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_whileStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhileStmt" ):
                return visitor.visitWhileStmt(self)
            else:
                return visitor.visitChildren(self)




    def whileStmt(self):

        localctx = HogQLParser.WhileStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_whileStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 268
            self.match(HogQLParser.WHILE)
            self.state = 269
            self.match(HogQLParser.LPAREN)
            self.state = 270
            self.expression()
            self.state = 271
            self.match(HogQLParser.RPAREN)
            self.state = 272
            self.statement()
            self.state = 274
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
            if la_ == 1:
                self.state = 273
                self.match(HogQLParser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.initializerVarDeclr = None # VarDeclContext
            self.initializerVarAssignment = None # VarAssignmentContext
            self.initializerExpression = None # ExpressionContext
            self.condition = None # ExpressionContext
            self.incrementVarDeclr = None # VarDeclContext
            self.incrementVarAssignment = None # VarAssignmentContext
            self.incrementExpression = None # ExpressionContext

        def FOR(self):
            return self.getToken(HogQLParser.FOR, 0)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)

        def SEMICOLON(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.SEMICOLON)
            else:
                return self.getToken(HogQLParser.SEMICOLON, i)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def statement(self):
            return self.getTypedRuleContext(HogQLParser.StatementContext,0)


        def varDecl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.VarDeclContext)
            else:
                return self.getTypedRuleContext(HogQLParser.VarDeclContext,i)


        def varAssignment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.VarAssignmentContext)
            else:
                return self.getTypedRuleContext(HogQLParser.VarAssignmentContext,i)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ExpressionContext,i)


        def getRuleIndex(self):
            return HogQLParser.RULE_forStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForStmt" ):
                return visitor.visitForStmt(self)
            else:
                return visitor.visitChildren(self)




    def forStmt(self):

        localctx = HogQLParser.ForStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_forStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 276
            self.match(HogQLParser.FOR)
            self.state = 277
            self.match(HogQLParser.LPAREN)
            self.state = 281
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
            if la_ == 1:
                self.state = 278
                localctx.initializerVarDeclr = self.varDecl()

            elif la_ == 2:
                self.state = 279
                localctx.initializerVarAssignment = self.varAssignment()

            elif la_ == 3:
                self.state = 280
                localctx.initializerExpression = self.expression()


            self.state = 283
            self.match(HogQLParser.SEMICOLON)
            self.state = 285
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -36169677449216002) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 723944289947615231) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & 18455) != 0):
                self.state = 284
                localctx.condition = self.expression()


            self.state = 287
            self.match(HogQLParser.SEMICOLON)
            self.state = 291
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
            if la_ == 1:
                self.state = 288
                localctx.incrementVarDeclr = self.varDecl()

            elif la_ == 2:
                self.state = 289
                localctx.incrementVarAssignment = self.varAssignment()

            elif la_ == 3:
                self.state = 290
                localctx.incrementExpression = self.expression()


            self.state = 293
            self.match(HogQLParser.RPAREN)
            self.state = 294
            self.statement()
            self.state = 296
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,19,self._ctx)
            if la_ == 1:
                self.state = 295
                self.match(HogQLParser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForInStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(HogQLParser.FOR, 0)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)

        def LET(self):
            return self.getToken(HogQLParser.LET, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(HogQLParser.IdentifierContext,i)


        def IN(self):
            return self.getToken(HogQLParser.IN, 0)

        def expression(self):
            return self.getTypedRuleContext(HogQLParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def statement(self):
            return self.getTypedRuleContext(HogQLParser.StatementContext,0)


        def COMMA(self):
            return self.getToken(HogQLParser.COMMA, 0)

        def SEMICOLON(self):
            return self.getToken(HogQLParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_forInStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForInStmt" ):
                return visitor.visitForInStmt(self)
            else:
                return visitor.visitChildren(self)




    def forInStmt(self):

        localctx = HogQLParser.ForInStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_forInStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 298
            self.match(HogQLParser.FOR)
            self.state = 299
            self.match(HogQLParser.LPAREN)
            self.state = 300
            self.match(HogQLParser.LET)
            self.state = 301
            self.identifier()
            self.state = 304
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119:
                self.state = 302
                self.match(HogQLParser.COMMA)
                self.state = 303
                self.identifier()


            self.state = 306
            self.match(HogQLParser.IN)
            self.state = 307
            self.expression()
            self.state = 308
            self.match(HogQLParser.RPAREN)
            self.state = 309
            self.statement()
            self.state = 311
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,21,self._ctx)
            if la_ == 1:
                self.state = 310
                self.match(HogQLParser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FuncStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def block(self):
            return self.getTypedRuleContext(HogQLParser.BlockContext,0)


        def FN(self):
            return self.getToken(HogQLParser.FN, 0)

        def FUN(self):
            return self.getToken(HogQLParser.FUN, 0)

        def identifierList(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierListContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_funcStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFuncStmt" ):
                return visitor.visitFuncStmt(self)
            else:
                return visitor.visitChildren(self)




    def funcStmt(self):

        localctx = HogQLParser.FuncStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_funcStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 313
            _la = self._input.LA(1)
            if not(_la==32 or _la==37):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 314
            self.identifier()
            self.state = 315
            self.match(HogQLParser.LPAREN)
            self.state = 317
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -5800812384855539714) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 25834219896831) != 0):
                self.state = 316
                self.identifierList()


            self.state = 319
            self.match(HogQLParser.RPAREN)
            self.state = 320
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarAssignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ExpressionContext,i)


        def COLON(self):
            return self.getToken(HogQLParser.COLON, 0)

        def EQ_SINGLE(self):
            return self.getToken(HogQLParser.EQ_SINGLE, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_varAssignment

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarAssignment" ):
                return visitor.visitVarAssignment(self)
            else:
                return visitor.visitChildren(self)




    def varAssignment(self):

        localctx = HogQLParser.VarAssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_varAssignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 322
            self.expression()
            self.state = 323
            self.match(HogQLParser.COLON)
            self.state = 324
            self.match(HogQLParser.EQ_SINGLE)
            self.state = 325
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(HogQLParser.ExpressionContext,0)


        def SEMICOLON(self):
            return self.getToken(HogQLParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_exprStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExprStmt" ):
                return visitor.visitExprStmt(self)
            else:
                return visitor.visitChildren(self)




    def exprStmt(self):

        localctx = HogQLParser.ExprStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_exprStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 327
            self.expression()
            self.state = 329
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,23,self._ctx)
            if la_ == 1:
                self.state = 328
                self.match(HogQLParser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EmptyStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMICOLON(self):
            return self.getToken(HogQLParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_emptyStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEmptyStmt" ):
                return visitor.visitEmptyStmt(self)
            else:
                return visitor.visitChildren(self)




    def emptyStmt(self):

        localctx = HogQLParser.EmptyStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_emptyStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 331
            self.match(HogQLParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(HogQLParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(HogQLParser.RBRACE, 0)

        def declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.DeclarationContext)
            else:
                return self.getTypedRuleContext(HogQLParser.DeclarationContext,i)


        def getRuleIndex(self):
            return HogQLParser.RULE_block

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlock" ):
                return visitor.visitBlock(self)
            else:
                return visitor.visitChildren(self)




    def block(self):

        localctx = HogQLParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 333
            self.match(HogQLParser.LBRACE)
            self.state = 337
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -140738696331266) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 723944844006785023) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & 4212759) != 0):
                self.state = 334
                self.declaration()
                self.state = 339
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 340
            self.match(HogQLParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KvPairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ExpressionContext,i)


        def COLON(self):
            return self.getToken(HogQLParser.COLON, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_kvPair

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKvPair" ):
                return visitor.visitKvPair(self)
            else:
                return visitor.visitChildren(self)




    def kvPair(self):

        localctx = HogQLParser.KvPairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_kvPair)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 342
            self.expression()
            self.state = 343
            self.match(HogQLParser.COLON)
            self.state = 344
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KvPairListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def kvPair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.KvPairContext)
            else:
                return self.getTypedRuleContext(HogQLParser.KvPairContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_kvPairList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKvPairList" ):
                return visitor.visitKvPairList(self)
            else:
                return visitor.visitChildren(self)




    def kvPairList(self):

        localctx = HogQLParser.KvPairListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_kvPairList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 346
            self.kvPair()
            self.state = 351
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,25,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 347
                    self.match(HogQLParser.COMMA)
                    self.state = 348
                    self.kvPair() 
                self.state = 353
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,25,self._ctx)

            self.state = 355
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119:
                self.state = 354
                self.match(HogQLParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(HogQLParser.EOF, 0)

        def selectSetStmt(self):
            return self.getTypedRuleContext(HogQLParser.SelectSetStmtContext,0)


        def selectStmt(self):
            return self.getTypedRuleContext(HogQLParser.SelectStmtContext,0)


        def hogqlxTagElement(self):
            return self.getTypedRuleContext(HogQLParser.HogqlxTagElementContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_select

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelect" ):
                return visitor.visitSelect(self)
            else:
                return visitor.visitChildren(self)




    def select(self):

        localctx = HogQLParser.SelectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_select)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 360
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
            if la_ == 1:
                self.state = 357
                self.selectSetStmt()
                pass

            elif la_ == 2:
                self.state = 358
                self.selectStmt()
                pass

            elif la_ == 3:
                self.state = 359
                self.hogqlxTagElement()
                pass


            self.state = 362
            self.match(HogQLParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectStmtWithParensContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selectStmt(self):
            return self.getTypedRuleContext(HogQLParser.SelectStmtContext,0)


        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)

        def selectSetStmt(self):
            return self.getTypedRuleContext(HogQLParser.SelectSetStmtContext,0)


        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def placeholder(self):
            return self.getTypedRuleContext(HogQLParser.PlaceholderContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_selectStmtWithParens

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectStmtWithParens" ):
                return visitor.visitSelectStmtWithParens(self)
            else:
                return visitor.visitChildren(self)




    def selectStmtWithParens(self):

        localctx = HogQLParser.SelectStmtWithParensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_selectStmtWithParens)
        try:
            self.state = 370
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [82, 105]:
                self.enterOuterAlt(localctx, 1)
                self.state = 364
                self.selectStmt()
                pass
            elif token in [133]:
                self.enterOuterAlt(localctx, 2)
                self.state = 365
                self.match(HogQLParser.LPAREN)
                self.state = 366
                self.selectSetStmt()
                self.state = 367
                self.match(HogQLParser.RPAREN)
                pass
            elif token in [131]:
                self.enterOuterAlt(localctx, 3)
                self.state = 369
                self.placeholder()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubsequentSelectSetClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selectStmtWithParens(self):
            return self.getTypedRuleContext(HogQLParser.SelectStmtWithParensContext,0)


        def EXCEPT(self):
            return self.getToken(HogQLParser.EXCEPT, 0)

        def UNION(self):
            return self.getToken(HogQLParser.UNION, 0)

        def ALL(self):
            return self.getToken(HogQLParser.ALL, 0)

        def INTERSECT(self):
            return self.getToken(HogQLParser.INTERSECT, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_subsequentSelectSetClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubsequentSelectSetClause" ):
                return visitor.visitSubsequentSelectSetClause(self)
            else:
                return visitor.visitChildren(self)




    def subsequentSelectSetClause(self):

        localctx = HogQLParser.SubsequentSelectSetClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_subsequentSelectSetClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 376
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [27]:
                self.state = 372
                self.match(HogQLParser.EXCEPT)
                pass
            elif token in [98]:
                self.state = 373
                self.match(HogQLParser.UNION)
                self.state = 374
                self.match(HogQLParser.ALL)
                pass
            elif token in [47]:
                self.state = 375
                self.match(HogQLParser.INTERSECT)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 378
            self.selectStmtWithParens()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectSetStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selectStmtWithParens(self):
            return self.getTypedRuleContext(HogQLParser.SelectStmtWithParensContext,0)


        def subsequentSelectSetClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.SubsequentSelectSetClauseContext)
            else:
                return self.getTypedRuleContext(HogQLParser.SubsequentSelectSetClauseContext,i)


        def getRuleIndex(self):
            return HogQLParser.RULE_selectSetStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectSetStmt" ):
                return visitor.visitSelectSetStmt(self)
            else:
                return visitor.visitChildren(self)




    def selectSetStmt(self):

        localctx = HogQLParser.SelectSetStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_selectSetStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 380
            self.selectStmtWithParens()
            self.state = 384
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==27 or _la==47 or _la==98:
                self.state = 381
                self.subsequentSelectSetClause()
                self.state = 386
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.with_ = None # WithClauseContext
            self.columns = None # ColumnExprListContext
            self.from_ = None # FromClauseContext
            self.where = None # WhereClauseContext

        def SELECT(self):
            return self.getToken(HogQLParser.SELECT, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def DISTINCT(self):
            return self.getToken(HogQLParser.DISTINCT, 0)

        def topClause(self):
            return self.getTypedRuleContext(HogQLParser.TopClauseContext,0)


        def arrayJoinClause(self):
            return self.getTypedRuleContext(HogQLParser.ArrayJoinClauseContext,0)


        def prewhereClause(self):
            return self.getTypedRuleContext(HogQLParser.PrewhereClauseContext,0)


        def groupByClause(self):
            return self.getTypedRuleContext(HogQLParser.GroupByClauseContext,0)


        def WITH(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.WITH)
            else:
                return self.getToken(HogQLParser.WITH, i)

        def TOTALS(self):
            return self.getToken(HogQLParser.TOTALS, 0)

        def havingClause(self):
            return self.getTypedRuleContext(HogQLParser.HavingClauseContext,0)


        def windowClause(self):
            return self.getTypedRuleContext(HogQLParser.WindowClauseContext,0)


        def orderByClause(self):
            return self.getTypedRuleContext(HogQLParser.OrderByClauseContext,0)


        def limitAndOffsetClause(self):
            return self.getTypedRuleContext(HogQLParser.LimitAndOffsetClauseContext,0)


        def offsetOnlyClause(self):
            return self.getTypedRuleContext(HogQLParser.OffsetOnlyClauseContext,0)


        def settingsClause(self):
            return self.getTypedRuleContext(HogQLParser.SettingsClauseContext,0)


        def withClause(self):
            return self.getTypedRuleContext(HogQLParser.WithClauseContext,0)


        def fromClause(self):
            return self.getTypedRuleContext(HogQLParser.FromClauseContext,0)


        def whereClause(self):
            return self.getTypedRuleContext(HogQLParser.WhereClauseContext,0)


        def CUBE(self):
            return self.getToken(HogQLParser.CUBE, 0)

        def ROLLUP(self):
            return self.getToken(HogQLParser.ROLLUP, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_selectStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectStmt" ):
                return visitor.visitSelectStmt(self)
            else:
                return visitor.visitChildren(self)




    def selectStmt(self):

        localctx = HogQLParser.SelectStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_selectStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 388
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==105:
                self.state = 387
                localctx.with_ = self.withClause()


            self.state = 390
            self.match(HogQLParser.SELECT)
            self.state = 392
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,32,self._ctx)
            if la_ == 1:
                self.state = 391
                self.match(HogQLParser.DISTINCT)


            self.state = 395
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
            if la_ == 1:
                self.state = 394
                self.topClause()


            self.state = 397
            localctx.columns = self.columnExprList()
            self.state = 399
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==35:
                self.state = 398
                localctx.from_ = self.fromClause()


            self.state = 402
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 18084767253659680) != 0):
                self.state = 401
                self.arrayJoinClause()


            self.state = 405
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==72:
                self.state = 404
                self.prewhereClause()


            self.state = 408
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==102:
                self.state = 407
                localctx.where = self.whereClause()


            self.state = 411
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==38:
                self.state = 410
                self.groupByClause()


            self.state = 415
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
            if la_ == 1:
                self.state = 413
                self.match(HogQLParser.WITH)
                self.state = 414
                _la = self._input.LA(1)
                if not(_la==18 or _la==77):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 419
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==105:
                self.state = 417
                self.match(HogQLParser.WITH)
                self.state = 418
                self.match(HogQLParser.TOTALS)


            self.state = 422
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==39:
                self.state = 421
                self.havingClause()


            self.state = 425
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==104:
                self.state = 424
                self.windowClause()


            self.state = 428
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==67:
                self.state = 427
                self.orderByClause()


            self.state = 432
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [57]:
                self.state = 430
                self.limitAndOffsetClause()
                pass
            elif token in [64]:
                self.state = 431
                self.offsetOnlyClause()
                pass
            elif token in [-1, 27, 47, 84, 98, 152]:
                pass
            else:
                pass
            self.state = 435
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==84:
                self.state = 434
                self.settingsClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WithClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(HogQLParser.WITH, 0)

        def withExprList(self):
            return self.getTypedRuleContext(HogQLParser.WithExprListContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_withClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWithClause" ):
                return visitor.visitWithClause(self)
            else:
                return visitor.visitChildren(self)




    def withClause(self):

        localctx = HogQLParser.WithClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_withClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 437
            self.match(HogQLParser.WITH)
            self.state = 438
            self.withExprList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TopClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TOP(self):
            return self.getToken(HogQLParser.TOP, 0)

        def DECIMAL_LITERAL(self):
            return self.getToken(HogQLParser.DECIMAL_LITERAL, 0)

        def WITH(self):
            return self.getToken(HogQLParser.WITH, 0)

        def TIES(self):
            return self.getToken(HogQLParser.TIES, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_topClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTopClause" ):
                return visitor.visitTopClause(self)
            else:
                return visitor.visitChildren(self)




    def topClause(self):

        localctx = HogQLParser.TopClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_topClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 440
            self.match(HogQLParser.TOP)
            self.state = 441
            self.match(HogQLParser.DECIMAL_LITERAL)
            self.state = 444
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
            if la_ == 1:
                self.state = 442
                self.match(HogQLParser.WITH)
                self.state = 443
                self.match(HogQLParser.TIES)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FromClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(HogQLParser.FROM, 0)

        def joinExpr(self):
            return self.getTypedRuleContext(HogQLParser.JoinExprContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_fromClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFromClause" ):
                return visitor.visitFromClause(self)
            else:
                return visitor.visitChildren(self)




    def fromClause(self):

        localctx = HogQLParser.FromClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_fromClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 446
            self.match(HogQLParser.FROM)
            self.state = 447
            self.joinExpr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayJoinClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ARRAY(self):
            return self.getToken(HogQLParser.ARRAY, 0)

        def JOIN(self):
            return self.getToken(HogQLParser.JOIN, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def LEFT(self):
            return self.getToken(HogQLParser.LEFT, 0)

        def INNER(self):
            return self.getToken(HogQLParser.INNER, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_arrayJoinClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayJoinClause" ):
                return visitor.visitArrayJoinClause(self)
            else:
                return visitor.visitChildren(self)




    def arrayJoinClause(self):

        localctx = HogQLParser.ArrayJoinClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_arrayJoinClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 450
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==46 or _la==54:
                self.state = 449
                _la = self._input.LA(1)
                if not(_la==46 or _la==54):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 452
            self.match(HogQLParser.ARRAY)
            self.state = 453
            self.match(HogQLParser.JOIN)
            self.state = 454
            self.columnExprList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WINDOW(self):
            return self.getToken(HogQLParser.WINDOW, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(HogQLParser.IdentifierContext,i)


        def AS(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.AS)
            else:
                return self.getToken(HogQLParser.AS, i)

        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.LPAREN)
            else:
                return self.getToken(HogQLParser.LPAREN, i)

        def windowExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.WindowExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.WindowExprContext,i)


        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.RPAREN)
            else:
                return self.getToken(HogQLParser.RPAREN, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_windowClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindowClause" ):
                return visitor.visitWindowClause(self)
            else:
                return visitor.visitChildren(self)




    def windowClause(self):

        localctx = HogQLParser.WindowClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_windowClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 456
            self.match(HogQLParser.WINDOW)
            self.state = 457
            self.identifier()
            self.state = 458
            self.match(HogQLParser.AS)
            self.state = 459
            self.match(HogQLParser.LPAREN)
            self.state = 460
            self.windowExpr()
            self.state = 461
            self.match(HogQLParser.RPAREN)
            self.state = 471
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==119:
                self.state = 462
                self.match(HogQLParser.COMMA)
                self.state = 463
                self.identifier()
                self.state = 464
                self.match(HogQLParser.AS)
                self.state = 465
                self.match(HogQLParser.LPAREN)
                self.state = 466
                self.windowExpr()
                self.state = 467
                self.match(HogQLParser.RPAREN)
                self.state = 473
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrewhereClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PREWHERE(self):
            return self.getToken(HogQLParser.PREWHERE, 0)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_prewhereClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrewhereClause" ):
                return visitor.visitPrewhereClause(self)
            else:
                return visitor.visitChildren(self)




    def prewhereClause(self):

        localctx = HogQLParser.PrewhereClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_prewhereClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 474
            self.match(HogQLParser.PREWHERE)
            self.state = 475
            self.columnExpr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhereClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(HogQLParser.WHERE, 0)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_whereClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhereClause" ):
                return visitor.visitWhereClause(self)
            else:
                return visitor.visitChildren(self)




    def whereClause(self):

        localctx = HogQLParser.WhereClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_whereClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 477
            self.match(HogQLParser.WHERE)
            self.state = 478
            self.columnExpr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GROUP(self):
            return self.getToken(HogQLParser.GROUP, 0)

        def BY(self):
            return self.getToken(HogQLParser.BY, 0)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def CUBE(self):
            return self.getToken(HogQLParser.CUBE, 0)

        def ROLLUP(self):
            return self.getToken(HogQLParser.ROLLUP, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_groupByClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroupByClause" ):
                return visitor.visitGroupByClause(self)
            else:
                return visitor.visitChildren(self)




    def groupByClause(self):

        localctx = HogQLParser.GroupByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_groupByClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 480
            self.match(HogQLParser.GROUP)
            self.state = 481
            self.match(HogQLParser.BY)
            self.state = 488
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,49,self._ctx)
            if la_ == 1:
                self.state = 482
                _la = self._input.LA(1)
                if not(_la==18 or _la==77):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 483
                self.match(HogQLParser.LPAREN)
                self.state = 484
                self.columnExprList()
                self.state = 485
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 2:
                self.state = 487
                self.columnExprList()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HavingClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HAVING(self):
            return self.getToken(HogQLParser.HAVING, 0)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_havingClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHavingClause" ):
                return visitor.visitHavingClause(self)
            else:
                return visitor.visitChildren(self)




    def havingClause(self):

        localctx = HogQLParser.HavingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_havingClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 490
            self.match(HogQLParser.HAVING)
            self.state = 491
            self.columnExpr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(HogQLParser.ORDER, 0)

        def BY(self):
            return self.getToken(HogQLParser.BY, 0)

        def orderExprList(self):
            return self.getTypedRuleContext(HogQLParser.OrderExprListContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_orderByClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrderByClause" ):
                return visitor.visitOrderByClause(self)
            else:
                return visitor.visitChildren(self)




    def orderByClause(self):

        localctx = HogQLParser.OrderByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_orderByClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 493
            self.match(HogQLParser.ORDER)
            self.state = 494
            self.match(HogQLParser.BY)
            self.state = 495
            self.orderExprList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProjectionOrderByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(HogQLParser.ORDER, 0)

        def BY(self):
            return self.getToken(HogQLParser.BY, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_projectionOrderByClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProjectionOrderByClause" ):
                return visitor.visitProjectionOrderByClause(self)
            else:
                return visitor.visitChildren(self)




    def projectionOrderByClause(self):

        localctx = HogQLParser.ProjectionOrderByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_projectionOrderByClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 497
            self.match(HogQLParser.ORDER)
            self.state = 498
            self.match(HogQLParser.BY)
            self.state = 499
            self.columnExprList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LimitAndOffsetClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIMIT(self):
            return self.getToken(HogQLParser.LIMIT, 0)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)


        def COMMA(self):
            return self.getToken(HogQLParser.COMMA, 0)

        def BY(self):
            return self.getToken(HogQLParser.BY, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def WITH(self):
            return self.getToken(HogQLParser.WITH, 0)

        def TIES(self):
            return self.getToken(HogQLParser.TIES, 0)

        def OFFSET(self):
            return self.getToken(HogQLParser.OFFSET, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_limitAndOffsetClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLimitAndOffsetClause" ):
                return visitor.visitLimitAndOffsetClause(self)
            else:
                return visitor.visitChildren(self)




    def limitAndOffsetClause(self):

        localctx = HogQLParser.LimitAndOffsetClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_limitAndOffsetClause)
        self._la = 0 # Token type
        try:
            self.state = 530
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 501
                self.match(HogQLParser.LIMIT)
                self.state = 502
                self.columnExpr(0)
                self.state = 505
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==119:
                    self.state = 503
                    self.match(HogQLParser.COMMA)
                    self.state = 504
                    self.columnExpr(0)


                self.state = 511
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [105]:
                    self.state = 507
                    self.match(HogQLParser.WITH)
                    self.state = 508
                    self.match(HogQLParser.TIES)
                    pass
                elif token in [11]:
                    self.state = 509
                    self.match(HogQLParser.BY)
                    self.state = 510
                    self.columnExprList()
                    pass
                elif token in [-1, 27, 47, 84, 98, 152]:
                    pass
                else:
                    pass
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 513
                self.match(HogQLParser.LIMIT)
                self.state = 514
                self.columnExpr(0)
                self.state = 517
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==105:
                    self.state = 515
                    self.match(HogQLParser.WITH)
                    self.state = 516
                    self.match(HogQLParser.TIES)


                self.state = 519
                self.match(HogQLParser.OFFSET)
                self.state = 520
                self.columnExpr(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 522
                self.match(HogQLParser.LIMIT)
                self.state = 523
                self.columnExpr(0)
                self.state = 524
                self.match(HogQLParser.OFFSET)
                self.state = 525
                self.columnExpr(0)
                self.state = 528
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 526
                    self.match(HogQLParser.BY)
                    self.state = 527
                    self.columnExprList()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OffsetOnlyClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OFFSET(self):
            return self.getToken(HogQLParser.OFFSET, 0)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_offsetOnlyClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOffsetOnlyClause" ):
                return visitor.visitOffsetOnlyClause(self)
            else:
                return visitor.visitChildren(self)




    def offsetOnlyClause(self):

        localctx = HogQLParser.OffsetOnlyClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_offsetOnlyClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 532
            self.match(HogQLParser.OFFSET)
            self.state = 533
            self.columnExpr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SettingsClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SETTINGS(self):
            return self.getToken(HogQLParser.SETTINGS, 0)

        def settingExprList(self):
            return self.getTypedRuleContext(HogQLParser.SettingExprListContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_settingsClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSettingsClause" ):
                return visitor.visitSettingsClause(self)
            else:
                return visitor.visitChildren(self)




    def settingsClause(self):

        localctx = HogQLParser.SettingsClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_settingsClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 535
            self.match(HogQLParser.SETTINGS)
            self.state = 536
            self.settingExprList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return HogQLParser.RULE_joinExpr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class JoinExprOpContext(JoinExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.JoinExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def joinExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.JoinExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.JoinExprContext,i)

        def JOIN(self):
            return self.getToken(HogQLParser.JOIN, 0)
        def joinConstraintClause(self):
            return self.getTypedRuleContext(HogQLParser.JoinConstraintClauseContext,0)

        def joinOp(self):
            return self.getTypedRuleContext(HogQLParser.JoinOpContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinExprOp" ):
                return visitor.visitJoinExprOp(self)
            else:
                return visitor.visitChildren(self)


    class JoinExprTableContext(JoinExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.JoinExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tableExpr(self):
            return self.getTypedRuleContext(HogQLParser.TableExprContext,0)

        def FINAL(self):
            return self.getToken(HogQLParser.FINAL, 0)
        def sampleClause(self):
            return self.getTypedRuleContext(HogQLParser.SampleClauseContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinExprTable" ):
                return visitor.visitJoinExprTable(self)
            else:
                return visitor.visitChildren(self)


    class JoinExprParensContext(JoinExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.JoinExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def joinExpr(self):
            return self.getTypedRuleContext(HogQLParser.JoinExprContext,0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinExprParens" ):
                return visitor.visitJoinExprParens(self)
            else:
                return visitor.visitChildren(self)


    class JoinExprCrossOpContext(JoinExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.JoinExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def joinExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.JoinExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.JoinExprContext,i)

        def joinOpCross(self):
            return self.getTypedRuleContext(HogQLParser.JoinOpCrossContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinExprCrossOp" ):
                return visitor.visitJoinExprCrossOp(self)
            else:
                return visitor.visitChildren(self)



    def joinExpr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = HogQLParser.JoinExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 80
        self.enterRecursionRule(localctx, 80, self.RULE_joinExpr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 550
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
            if la_ == 1:
                localctx = HogQLParser.JoinExprTableContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 539
                self.tableExpr(0)
                self.state = 541
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,55,self._ctx)
                if la_ == 1:
                    self.state = 540
                    self.match(HogQLParser.FINAL)


                self.state = 544
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
                if la_ == 1:
                    self.state = 543
                    self.sampleClause()


                pass

            elif la_ == 2:
                localctx = HogQLParser.JoinExprParensContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 546
                self.match(HogQLParser.LPAREN)
                self.state = 547
                self.joinExpr(0)
                self.state = 548
                self.match(HogQLParser.RPAREN)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 566
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,60,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 564
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
                    if la_ == 1:
                        localctx = HogQLParser.JoinExprCrossOpContext(self, HogQLParser.JoinExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_joinExpr)
                        self.state = 552
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 553
                        self.joinOpCross()
                        self.state = 554
                        self.joinExpr(4)
                        pass

                    elif la_ == 2:
                        localctx = HogQLParser.JoinExprOpContext(self, HogQLParser.JoinExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_joinExpr)
                        self.state = 556
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 558
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & 18084835973136666) != 0) or _la==76 or _la==83:
                            self.state = 557
                            self.joinOp()


                        self.state = 560
                        self.match(HogQLParser.JOIN)
                        self.state = 561
                        self.joinExpr(0)
                        self.state = 562
                        self.joinConstraintClause()
                        pass

             
                self.state = 568
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,60,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class JoinOpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return HogQLParser.RULE_joinOp

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class JoinOpFullContext(JoinOpContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.JoinOpContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FULL(self):
            return self.getToken(HogQLParser.FULL, 0)
        def OUTER(self):
            return self.getToken(HogQLParser.OUTER, 0)
        def ALL(self):
            return self.getToken(HogQLParser.ALL, 0)
        def ANY(self):
            return self.getToken(HogQLParser.ANY, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinOpFull" ):
                return visitor.visitJoinOpFull(self)
            else:
                return visitor.visitChildren(self)


    class JoinOpInnerContext(JoinOpContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.JoinOpContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INNER(self):
            return self.getToken(HogQLParser.INNER, 0)
        def ALL(self):
            return self.getToken(HogQLParser.ALL, 0)
        def ANY(self):
            return self.getToken(HogQLParser.ANY, 0)
        def ASOF(self):
            return self.getToken(HogQLParser.ASOF, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinOpInner" ):
                return visitor.visitJoinOpInner(self)
            else:
                return visitor.visitChildren(self)


    class JoinOpLeftRightContext(JoinOpContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.JoinOpContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LEFT(self):
            return self.getToken(HogQLParser.LEFT, 0)
        def RIGHT(self):
            return self.getToken(HogQLParser.RIGHT, 0)
        def OUTER(self):
            return self.getToken(HogQLParser.OUTER, 0)
        def SEMI(self):
            return self.getToken(HogQLParser.SEMI, 0)
        def ALL(self):
            return self.getToken(HogQLParser.ALL, 0)
        def ANTI(self):
            return self.getToken(HogQLParser.ANTI, 0)
        def ANY(self):
            return self.getToken(HogQLParser.ANY, 0)
        def ASOF(self):
            return self.getToken(HogQLParser.ASOF, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinOpLeftRight" ):
                return visitor.visitJoinOpLeftRight(self)
            else:
                return visitor.visitChildren(self)



    def joinOp(self):

        localctx = HogQLParser.JoinOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_joinOp)
        self._la = 0 # Token type
        try:
            self.state = 612
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
            if la_ == 1:
                localctx = HogQLParser.JoinOpInnerContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 578
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
                if la_ == 1:
                    self.state = 570
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 274) != 0):
                        self.state = 569
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 274) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 572
                    self.match(HogQLParser.INNER)
                    pass

                elif la_ == 2:
                    self.state = 573
                    self.match(HogQLParser.INNER)
                    self.state = 575
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 274) != 0):
                        self.state = 574
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 274) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    pass

                elif la_ == 3:
                    self.state = 577
                    _la = self._input.LA(1)
                    if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 274) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass


                pass

            elif la_ == 2:
                localctx = HogQLParser.JoinOpLeftRightContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 594
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
                if la_ == 1:
                    self.state = 581
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 282) != 0) or _la==83:
                        self.state = 580
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 282) != 0) or _la==83):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 583
                    _la = self._input.LA(1)
                    if not(_la==54 or _la==76):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 585
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==68:
                        self.state = 584
                        self.match(HogQLParser.OUTER)


                    pass

                elif la_ == 2:
                    self.state = 587
                    _la = self._input.LA(1)
                    if not(_la==54 or _la==76):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 589
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==68:
                        self.state = 588
                        self.match(HogQLParser.OUTER)


                    self.state = 592
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 282) != 0) or _la==83:
                        self.state = 591
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 282) != 0) or _la==83):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    pass


                pass

            elif la_ == 3:
                localctx = HogQLParser.JoinOpFullContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 610
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
                if la_ == 1:
                    self.state = 597
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1 or _la==4:
                        self.state = 596
                        _la = self._input.LA(1)
                        if not(_la==1 or _la==4):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 599
                    self.match(HogQLParser.FULL)
                    self.state = 601
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==68:
                        self.state = 600
                        self.match(HogQLParser.OUTER)


                    pass

                elif la_ == 2:
                    self.state = 603
                    self.match(HogQLParser.FULL)
                    self.state = 605
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==68:
                        self.state = 604
                        self.match(HogQLParser.OUTER)


                    self.state = 608
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1 or _la==4:
                        self.state = 607
                        _la = self._input.LA(1)
                        if not(_la==1 or _la==4):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    pass


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinOpCrossContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CROSS(self):
            return self.getToken(HogQLParser.CROSS, 0)

        def JOIN(self):
            return self.getToken(HogQLParser.JOIN, 0)

        def COMMA(self):
            return self.getToken(HogQLParser.COMMA, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_joinOpCross

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinOpCross" ):
                return visitor.visitJoinOpCross(self)
            else:
                return visitor.visitChildren(self)




    def joinOpCross(self):

        localctx = HogQLParser.JoinOpCrossContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_joinOpCross)
        try:
            self.state = 617
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [17]:
                self.enterOuterAlt(localctx, 1)
                self.state = 614
                self.match(HogQLParser.CROSS)
                self.state = 615
                self.match(HogQLParser.JOIN)
                pass
            elif token in [119]:
                self.enterOuterAlt(localctx, 2)
                self.state = 616
                self.match(HogQLParser.COMMA)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinConstraintClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(HogQLParser.ON, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def USING(self):
            return self.getToken(HogQLParser.USING, 0)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_joinConstraintClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinConstraintClause" ):
                return visitor.visitJoinConstraintClause(self)
            else:
                return visitor.visitChildren(self)




    def joinConstraintClause(self):

        localctx = HogQLParser.JoinConstraintClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_joinConstraintClause)
        try:
            self.state = 628
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 619
                self.match(HogQLParser.ON)
                self.state = 620
                self.columnExprList()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 621
                self.match(HogQLParser.USING)
                self.state = 622
                self.match(HogQLParser.LPAREN)
                self.state = 623
                self.columnExprList()
                self.state = 624
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 626
                self.match(HogQLParser.USING)
                self.state = 627
                self.columnExprList()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SampleClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SAMPLE(self):
            return self.getToken(HogQLParser.SAMPLE, 0)

        def ratioExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.RatioExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.RatioExprContext,i)


        def OFFSET(self):
            return self.getToken(HogQLParser.OFFSET, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_sampleClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSampleClause" ):
                return visitor.visitSampleClause(self)
            else:
                return visitor.visitChildren(self)




    def sampleClause(self):

        localctx = HogQLParser.SampleClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_sampleClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 630
            self.match(HogQLParser.SAMPLE)
            self.state = 631
            self.ratioExpr()
            self.state = 634
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
            if la_ == 1:
                self.state = 632
                self.match(HogQLParser.OFFSET)
                self.state = 633
                self.ratioExpr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderExprListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def orderExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.OrderExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.OrderExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_orderExprList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrderExprList" ):
                return visitor.visitOrderExprList(self)
            else:
                return visitor.visitChildren(self)




    def orderExprList(self):

        localctx = HogQLParser.OrderExprListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_orderExprList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 636
            self.orderExpr()
            self.state = 641
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==119:
                self.state = 637
                self.match(HogQLParser.COMMA)
                self.state = 638
                self.orderExpr()
                self.state = 643
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def NULLS(self):
            return self.getToken(HogQLParser.NULLS, 0)

        def COLLATE(self):
            return self.getToken(HogQLParser.COLLATE, 0)

        def STRING_LITERAL(self):
            return self.getToken(HogQLParser.STRING_LITERAL, 0)

        def ASCENDING(self):
            return self.getToken(HogQLParser.ASCENDING, 0)

        def DESCENDING(self):
            return self.getToken(HogQLParser.DESCENDING, 0)

        def DESC(self):
            return self.getToken(HogQLParser.DESC, 0)

        def FIRST(self):
            return self.getToken(HogQLParser.FIRST, 0)

        def LAST(self):
            return self.getToken(HogQLParser.LAST, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_orderExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrderExpr" ):
                return visitor.visitOrderExpr(self)
            else:
                return visitor.visitChildren(self)




    def orderExpr(self):

        localctx = HogQLParser.OrderExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_orderExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 644
            self.columnExpr(0)
            self.state = 646
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 12583040) != 0):
                self.state = 645
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 12583040) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 650
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==63:
                self.state = 648
                self.match(HogQLParser.NULLS)
                self.state = 649
                _la = self._input.LA(1)
                if not(_la==31 or _la==52):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 654
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==16:
                self.state = 652
                self.match(HogQLParser.COLLATE)
                self.state = 653
                self.match(HogQLParser.STRING_LITERAL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RatioExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def placeholder(self):
            return self.getTypedRuleContext(HogQLParser.PlaceholderContext,0)


        def numberLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.NumberLiteralContext)
            else:
                return self.getTypedRuleContext(HogQLParser.NumberLiteralContext,i)


        def SLASH(self):
            return self.getToken(HogQLParser.SLASH, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_ratioExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRatioExpr" ):
                return visitor.visitRatioExpr(self)
            else:
                return visitor.visitChildren(self)




    def ratioExpr(self):

        localctx = HogQLParser.RatioExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_ratioExpr)
        try:
            self.state = 662
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [131]:
                self.enterOuterAlt(localctx, 1)
                self.state = 656
                self.placeholder()
                pass
            elif token in [45, 60, 109, 110, 111, 112, 121, 123, 142]:
                self.enterOuterAlt(localctx, 2)
                self.state = 657
                self.numberLiteral()
                self.state = 660
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
                if la_ == 1:
                    self.state = 658
                    self.match(HogQLParser.SLASH)
                    self.state = 659
                    self.numberLiteral()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SettingExprListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def settingExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.SettingExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.SettingExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_settingExprList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSettingExprList" ):
                return visitor.visitSettingExprList(self)
            else:
                return visitor.visitChildren(self)




    def settingExprList(self):

        localctx = HogQLParser.SettingExprListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_settingExprList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 664
            self.settingExpr()
            self.state = 669
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==119:
                self.state = 665
                self.match(HogQLParser.COMMA)
                self.state = 666
                self.settingExpr()
                self.state = 671
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SettingExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def EQ_SINGLE(self):
            return self.getToken(HogQLParser.EQ_SINGLE, 0)

        def literal(self):
            return self.getTypedRuleContext(HogQLParser.LiteralContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_settingExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSettingExpr" ):
                return visitor.visitSettingExpr(self)
            else:
                return visitor.visitChildren(self)




    def settingExpr(self):

        localctx = HogQLParser.SettingExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_settingExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 672
            self.identifier()
            self.state = 673
            self.match(HogQLParser.EQ_SINGLE)
            self.state = 674
            self.literal()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def winPartitionByClause(self):
            return self.getTypedRuleContext(HogQLParser.WinPartitionByClauseContext,0)


        def winOrderByClause(self):
            return self.getTypedRuleContext(HogQLParser.WinOrderByClauseContext,0)


        def winFrameClause(self):
            return self.getTypedRuleContext(HogQLParser.WinFrameClauseContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_windowExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindowExpr" ):
                return visitor.visitWindowExpr(self)
            else:
                return visitor.visitChildren(self)




    def windowExpr(self):

        localctx = HogQLParser.WindowExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_windowExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 677
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==70:
                self.state = 676
                self.winPartitionByClause()


            self.state = 680
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==67:
                self.state = 679
                self.winOrderByClause()


            self.state = 683
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==74 or _la==79:
                self.state = 682
                self.winFrameClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WinPartitionByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION(self):
            return self.getToken(HogQLParser.PARTITION, 0)

        def BY(self):
            return self.getToken(HogQLParser.BY, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_winPartitionByClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWinPartitionByClause" ):
                return visitor.visitWinPartitionByClause(self)
            else:
                return visitor.visitChildren(self)




    def winPartitionByClause(self):

        localctx = HogQLParser.WinPartitionByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_winPartitionByClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 685
            self.match(HogQLParser.PARTITION)
            self.state = 686
            self.match(HogQLParser.BY)
            self.state = 687
            self.columnExprList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WinOrderByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(HogQLParser.ORDER, 0)

        def BY(self):
            return self.getToken(HogQLParser.BY, 0)

        def orderExprList(self):
            return self.getTypedRuleContext(HogQLParser.OrderExprListContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_winOrderByClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWinOrderByClause" ):
                return visitor.visitWinOrderByClause(self)
            else:
                return visitor.visitChildren(self)




    def winOrderByClause(self):

        localctx = HogQLParser.WinOrderByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_winOrderByClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 689
            self.match(HogQLParser.ORDER)
            self.state = 690
            self.match(HogQLParser.BY)
            self.state = 691
            self.orderExprList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WinFrameClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def winFrameExtend(self):
            return self.getTypedRuleContext(HogQLParser.WinFrameExtendContext,0)


        def ROWS(self):
            return self.getToken(HogQLParser.ROWS, 0)

        def RANGE(self):
            return self.getToken(HogQLParser.RANGE, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_winFrameClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWinFrameClause" ):
                return visitor.visitWinFrameClause(self)
            else:
                return visitor.visitChildren(self)




    def winFrameClause(self):

        localctx = HogQLParser.WinFrameClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_winFrameClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 693
            _la = self._input.LA(1)
            if not(_la==74 or _la==79):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 694
            self.winFrameExtend()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WinFrameExtendContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return HogQLParser.RULE_winFrameExtend

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class FrameStartContext(WinFrameExtendContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.WinFrameExtendContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def winFrameBound(self):
            return self.getTypedRuleContext(HogQLParser.WinFrameBoundContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFrameStart" ):
                return visitor.visitFrameStart(self)
            else:
                return visitor.visitChildren(self)


    class FrameBetweenContext(WinFrameExtendContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.WinFrameExtendContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BETWEEN(self):
            return self.getToken(HogQLParser.BETWEEN, 0)
        def winFrameBound(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.WinFrameBoundContext)
            else:
                return self.getTypedRuleContext(HogQLParser.WinFrameBoundContext,i)

        def AND(self):
            return self.getToken(HogQLParser.AND, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFrameBetween" ):
                return visitor.visitFrameBetween(self)
            else:
                return visitor.visitChildren(self)



    def winFrameExtend(self):

        localctx = HogQLParser.WinFrameExtendContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_winFrameExtend)
        try:
            self.state = 702
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [19, 45, 60, 97, 109, 110, 111, 112, 121, 123, 142]:
                localctx = HogQLParser.FrameStartContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 696
                self.winFrameBound()
                pass
            elif token in [9]:
                localctx = HogQLParser.FrameBetweenContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 697
                self.match(HogQLParser.BETWEEN)
                self.state = 698
                self.winFrameBound()
                self.state = 699
                self.match(HogQLParser.AND)
                self.state = 700
                self.winFrameBound()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WinFrameBoundContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CURRENT(self):
            return self.getToken(HogQLParser.CURRENT, 0)

        def ROW(self):
            return self.getToken(HogQLParser.ROW, 0)

        def UNBOUNDED(self):
            return self.getToken(HogQLParser.UNBOUNDED, 0)

        def PRECEDING(self):
            return self.getToken(HogQLParser.PRECEDING, 0)

        def FOLLOWING(self):
            return self.getToken(HogQLParser.FOLLOWING, 0)

        def numberLiteral(self):
            return self.getTypedRuleContext(HogQLParser.NumberLiteralContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_winFrameBound

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWinFrameBound" ):
                return visitor.visitWinFrameBound(self)
            else:
                return visitor.visitChildren(self)




    def winFrameBound(self):

        localctx = HogQLParser.WinFrameBoundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_winFrameBound)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 716
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,89,self._ctx)
            if la_ == 1:
                self.state = 704
                self.match(HogQLParser.CURRENT)
                self.state = 705
                self.match(HogQLParser.ROW)
                pass

            elif la_ == 2:
                self.state = 706
                self.match(HogQLParser.UNBOUNDED)
                self.state = 707
                self.match(HogQLParser.PRECEDING)
                pass

            elif la_ == 3:
                self.state = 708
                self.match(HogQLParser.UNBOUNDED)
                self.state = 709
                self.match(HogQLParser.FOLLOWING)
                pass

            elif la_ == 4:
                self.state = 710
                self.numberLiteral()
                self.state = 711
                self.match(HogQLParser.PRECEDING)
                pass

            elif la_ == 5:
                self.state = 713
                self.numberLiteral()
                self.state = 714
                self.match(HogQLParser.FOLLOWING)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def EOF(self):
            return self.getToken(HogQLParser.EOF, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_expr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpr" ):
                return visitor.visitExpr(self)
            else:
                return visitor.visitChildren(self)




    def expr(self):

        localctx = HogQLParser.ExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 718
            self.columnExpr(0)
            self.state = 719
            self.match(HogQLParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnTypeExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return HogQLParser.RULE_columnTypeExpr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ColumnTypeExprNestedContext(ColumnTypeExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnTypeExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(HogQLParser.IdentifierContext,i)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def columnTypeExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnTypeExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnTypeExprContext,i)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnTypeExprNested" ):
                return visitor.visitColumnTypeExprNested(self)
            else:
                return visitor.visitChildren(self)


    class ColumnTypeExprParamContext(ColumnTypeExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnTypeExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)
        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnTypeExprParam" ):
                return visitor.visitColumnTypeExprParam(self)
            else:
                return visitor.visitChildren(self)


    class ColumnTypeExprSimpleContext(ColumnTypeExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnTypeExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnTypeExprSimple" ):
                return visitor.visitColumnTypeExprSimple(self)
            else:
                return visitor.visitChildren(self)


    class ColumnTypeExprComplexContext(ColumnTypeExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnTypeExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def columnTypeExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnTypeExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnTypeExprContext,i)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnTypeExprComplex" ):
                return visitor.visitColumnTypeExprComplex(self)
            else:
                return visitor.visitChildren(self)


    class ColumnTypeExprEnumContext(ColumnTypeExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnTypeExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def enumValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.EnumValueContext)
            else:
                return self.getTypedRuleContext(HogQLParser.EnumValueContext,i)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnTypeExprEnum" ):
                return visitor.visitColumnTypeExprEnum(self)
            else:
                return visitor.visitChildren(self)



    def columnTypeExpr(self):

        localctx = HogQLParser.ColumnTypeExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_columnTypeExpr)
        self._la = 0 # Token type
        try:
            self.state = 777
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
            if la_ == 1:
                localctx = HogQLParser.ColumnTypeExprSimpleContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 721
                self.identifier()
                pass

            elif la_ == 2:
                localctx = HogQLParser.ColumnTypeExprNestedContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 722
                self.identifier()
                self.state = 723
                self.match(HogQLParser.LPAREN)
                self.state = 724
                self.identifier()
                self.state = 725
                self.columnTypeExpr()
                self.state = 732
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,90,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 726
                        self.match(HogQLParser.COMMA)
                        self.state = 727
                        self.identifier()
                        self.state = 728
                        self.columnTypeExpr() 
                    self.state = 734
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,90,self._ctx)

                self.state = 736
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==119:
                    self.state = 735
                    self.match(HogQLParser.COMMA)


                self.state = 738
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 3:
                localctx = HogQLParser.ColumnTypeExprEnumContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 740
                self.identifier()
                self.state = 741
                self.match(HogQLParser.LPAREN)
                self.state = 742
                self.enumValue()
                self.state = 747
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,92,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 743
                        self.match(HogQLParser.COMMA)
                        self.state = 744
                        self.enumValue() 
                    self.state = 749
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,92,self._ctx)

                self.state = 751
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==119:
                    self.state = 750
                    self.match(HogQLParser.COMMA)


                self.state = 753
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 4:
                localctx = HogQLParser.ColumnTypeExprComplexContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 755
                self.identifier()
                self.state = 756
                self.match(HogQLParser.LPAREN)
                self.state = 757
                self.columnTypeExpr()
                self.state = 762
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,94,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 758
                        self.match(HogQLParser.COMMA)
                        self.state = 759
                        self.columnTypeExpr() 
                    self.state = 764
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,94,self._ctx)

                self.state = 766
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==119:
                    self.state = 765
                    self.match(HogQLParser.COMMA)


                self.state = 768
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 5:
                localctx = HogQLParser.ColumnTypeExprParamContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 770
                self.identifier()
                self.state = 771
                self.match(HogQLParser.LPAREN)
                self.state = 773
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -36169677449216002) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 723944289947615231) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & 18455) != 0):
                    self.state = 772
                    self.columnExprList()


                self.state = 775
                self.match(HogQLParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnExprListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_columnExprList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprList" ):
                return visitor.visitColumnExprList(self)
            else:
                return visitor.visitChildren(self)




    def columnExprList(self):

        localctx = HogQLParser.ColumnExprListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_columnExprList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 779
            self.columnExpr(0)
            self.state = 784
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,98,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 780
                    self.match(HogQLParser.COMMA)
                    self.state = 781
                    self.columnExpr(0) 
                self.state = 786
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,98,self._ctx)

            self.state = 788
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,99,self._ctx)
            if la_ == 1:
                self.state = 787
                self.match(HogQLParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return HogQLParser.RULE_columnExpr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class ColumnExprTernaryOpContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def QUERY(self):
            return self.getToken(HogQLParser.QUERY, 0)
        def COLON(self):
            return self.getToken(HogQLParser.COLON, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprTernaryOp" ):
                return visitor.visitColumnExprTernaryOp(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprAliasContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def AS(self):
            return self.getToken(HogQLParser.AS, 0)
        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)

        def STRING_LITERAL(self):
            return self.getToken(HogQLParser.STRING_LITERAL, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprAlias" ):
                return visitor.visitColumnExprAlias(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprNegateContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DASH(self):
            return self.getToken(HogQLParser.DASH, 0)
        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprNegate" ):
                return visitor.visitColumnExprNegate(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprDictContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LBRACE(self):
            return self.getToken(HogQLParser.LBRACE, 0)
        def RBRACE(self):
            return self.getToken(HogQLParser.RBRACE, 0)
        def kvPairList(self):
            return self.getTypedRuleContext(HogQLParser.KvPairListContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprDict" ):
                return visitor.visitColumnExprDict(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprSubqueryContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def selectSetStmt(self):
            return self.getTypedRuleContext(HogQLParser.SelectSetStmtContext,0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprSubquery" ):
                return visitor.visitColumnExprSubquery(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprLiteralContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def literal(self):
            return self.getTypedRuleContext(HogQLParser.LiteralContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprLiteral" ):
                return visitor.visitColumnExprLiteral(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprArrayContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LBRACKET(self):
            return self.getToken(HogQLParser.LBRACKET, 0)
        def RBRACKET(self):
            return self.getToken(HogQLParser.RBRACKET, 0)
        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprArray" ):
                return visitor.visitColumnExprArray(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprSubstringContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SUBSTRING(self):
            return self.getToken(HogQLParser.SUBSTRING, 0)
        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def FROM(self):
            return self.getToken(HogQLParser.FROM, 0)
        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)
        def FOR(self):
            return self.getToken(HogQLParser.FOR, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprSubstring" ):
                return visitor.visitColumnExprSubstring(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprCastContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CAST(self):
            return self.getToken(HogQLParser.CAST, 0)
        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def AS(self):
            return self.getToken(HogQLParser.AS, 0)
        def columnTypeExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnTypeExprContext,0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprCast" ):
                return visitor.visitColumnExprCast(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprOrContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def OR(self):
            return self.getToken(HogQLParser.OR, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprOr" ):
                return visitor.visitColumnExprOr(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprNullTupleAccessContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def NULL_PROPERTY(self):
            return self.getToken(HogQLParser.NULL_PROPERTY, 0)
        def DECIMAL_LITERAL(self):
            return self.getToken(HogQLParser.DECIMAL_LITERAL, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprNullTupleAccess" ):
                return visitor.visitColumnExprNullTupleAccess(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprPrecedence1Context(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.left = None # ColumnExprContext
            self.operator = None # Token
            self.right = None # ColumnExprContext
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def ASTERISK(self):
            return self.getToken(HogQLParser.ASTERISK, 0)
        def SLASH(self):
            return self.getToken(HogQLParser.SLASH, 0)
        def PERCENT(self):
            return self.getToken(HogQLParser.PERCENT, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprPrecedence1" ):
                return visitor.visitColumnExprPrecedence1(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprPrecedence2Context(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.left = None # ColumnExprContext
            self.operator = None # Token
            self.right = None # ColumnExprContext
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def PLUS(self):
            return self.getToken(HogQLParser.PLUS, 0)
        def DASH(self):
            return self.getToken(HogQLParser.DASH, 0)
        def CONCAT(self):
            return self.getToken(HogQLParser.CONCAT, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprPrecedence2" ):
                return visitor.visitColumnExprPrecedence2(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprPrecedence3Context(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.left = None # ColumnExprContext
            self.operator = None # Token
            self.right = None # ColumnExprContext
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def IN(self):
            return self.getToken(HogQLParser.IN, 0)
        def EQ_DOUBLE(self):
            return self.getToken(HogQLParser.EQ_DOUBLE, 0)
        def EQ_SINGLE(self):
            return self.getToken(HogQLParser.EQ_SINGLE, 0)
        def NOT_EQ(self):
            return self.getToken(HogQLParser.NOT_EQ, 0)
        def LT_EQ(self):
            return self.getToken(HogQLParser.LT_EQ, 0)
        def LT(self):
            return self.getToken(HogQLParser.LT, 0)
        def GT_EQ(self):
            return self.getToken(HogQLParser.GT_EQ, 0)
        def GT(self):
            return self.getToken(HogQLParser.GT, 0)
        def LIKE(self):
            return self.getToken(HogQLParser.LIKE, 0)
        def ILIKE(self):
            return self.getToken(HogQLParser.ILIKE, 0)
        def REGEX_SINGLE(self):
            return self.getToken(HogQLParser.REGEX_SINGLE, 0)
        def REGEX_DOUBLE(self):
            return self.getToken(HogQLParser.REGEX_DOUBLE, 0)
        def NOT_REGEX(self):
            return self.getToken(HogQLParser.NOT_REGEX, 0)
        def IREGEX_SINGLE(self):
            return self.getToken(HogQLParser.IREGEX_SINGLE, 0)
        def IREGEX_DOUBLE(self):
            return self.getToken(HogQLParser.IREGEX_DOUBLE, 0)
        def NOT_IREGEX(self):
            return self.getToken(HogQLParser.NOT_IREGEX, 0)
        def COHORT(self):
            return self.getToken(HogQLParser.COHORT, 0)
        def NOT(self):
            return self.getToken(HogQLParser.NOT, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprPrecedence3" ):
                return visitor.visitColumnExprPrecedence3(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprIntervalContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INTERVAL(self):
            return self.getToken(HogQLParser.INTERVAL, 0)
        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def interval(self):
            return self.getTypedRuleContext(HogQLParser.IntervalContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprInterval" ):
                return visitor.visitColumnExprInterval(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprIsNullContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def IS(self):
            return self.getToken(HogQLParser.IS, 0)
        def NULL_SQL(self):
            return self.getToken(HogQLParser.NULL_SQL, 0)
        def NOT(self):
            return self.getToken(HogQLParser.NOT, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprIsNull" ):
                return visitor.visitColumnExprIsNull(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprWinFunctionTargetContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.columnExprs = None # ColumnExprListContext
            self.columnArgList = None # ColumnExprListContext
            self.copyFrom(ctx)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(HogQLParser.IdentifierContext,i)

        def OVER(self):
            return self.getToken(HogQLParser.OVER, 0)
        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.LPAREN)
            else:
                return self.getToken(HogQLParser.LPAREN, i)
        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.RPAREN)
            else:
                return self.getToken(HogQLParser.RPAREN, i)
        def columnExprList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprListContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,i)

        def DISTINCT(self):
            return self.getToken(HogQLParser.DISTINCT, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprWinFunctionTarget" ):
                return visitor.visitColumnExprWinFunctionTarget(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprNullPropertyAccessContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def NULL_PROPERTY(self):
            return self.getToken(HogQLParser.NULL_PROPERTY, 0)
        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprNullPropertyAccess" ):
                return visitor.visitColumnExprNullPropertyAccess(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprTrimContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TRIM(self):
            return self.getToken(HogQLParser.TRIM, 0)
        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def string(self):
            return self.getTypedRuleContext(HogQLParser.StringContext,0)

        def FROM(self):
            return self.getToken(HogQLParser.FROM, 0)
        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)
        def BOTH(self):
            return self.getToken(HogQLParser.BOTH, 0)
        def LEADING(self):
            return self.getToken(HogQLParser.LEADING, 0)
        def TRAILING(self):
            return self.getToken(HogQLParser.TRAILING, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprTrim" ):
                return visitor.visitColumnExprTrim(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprTagElementContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def hogqlxTagElement(self):
            return self.getTypedRuleContext(HogQLParser.HogqlxTagElementContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprTagElement" ):
                return visitor.visitColumnExprTagElement(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprTemplateStringContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def templateString(self):
            return self.getTypedRuleContext(HogQLParser.TemplateStringContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprTemplateString" ):
                return visitor.visitColumnExprTemplateString(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprTupleContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprTuple" ):
                return visitor.visitColumnExprTuple(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprCallContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)
        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprCall" ):
                return visitor.visitColumnExprCall(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprArrayAccessContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def LBRACKET(self):
            return self.getToken(HogQLParser.LBRACKET, 0)
        def RBRACKET(self):
            return self.getToken(HogQLParser.RBRACKET, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprArrayAccess" ):
                return visitor.visitColumnExprArrayAccess(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprBetweenContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def BETWEEN(self):
            return self.getToken(HogQLParser.BETWEEN, 0)
        def AND(self):
            return self.getToken(HogQLParser.AND, 0)
        def NOT(self):
            return self.getToken(HogQLParser.NOT, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprBetween" ):
                return visitor.visitColumnExprBetween(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprPropertyAccessContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def DOT(self):
            return self.getToken(HogQLParser.DOT, 0)
        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprPropertyAccess" ):
                return visitor.visitColumnExprPropertyAccess(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprParensContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprParens" ):
                return visitor.visitColumnExprParens(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprNullArrayAccessContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def NULL_PROPERTY(self):
            return self.getToken(HogQLParser.NULL_PROPERTY, 0)
        def LBRACKET(self):
            return self.getToken(HogQLParser.LBRACKET, 0)
        def RBRACKET(self):
            return self.getToken(HogQLParser.RBRACKET, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprNullArrayAccess" ):
                return visitor.visitColumnExprNullArrayAccess(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprTimestampContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TIMESTAMP(self):
            return self.getToken(HogQLParser.TIMESTAMP, 0)
        def STRING_LITERAL(self):
            return self.getToken(HogQLParser.STRING_LITERAL, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprTimestamp" ):
                return visitor.visitColumnExprTimestamp(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprNullishContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def NULLISH(self):
            return self.getToken(HogQLParser.NULLISH, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprNullish" ):
                return visitor.visitColumnExprNullish(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprAndContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def AND(self):
            return self.getToken(HogQLParser.AND, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprAnd" ):
                return visitor.visitColumnExprAnd(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprTupleAccessContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def DOT(self):
            return self.getToken(HogQLParser.DOT, 0)
        def DECIMAL_LITERAL(self):
            return self.getToken(HogQLParser.DECIMAL_LITERAL, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprTupleAccess" ):
                return visitor.visitColumnExprTupleAccess(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprCaseContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.caseExpr = None # ColumnExprContext
            self.whenExpr = None # ColumnExprContext
            self.thenExpr = None # ColumnExprContext
            self.elseExpr = None # ColumnExprContext
            self.copyFrom(ctx)

        def CASE(self):
            return self.getToken(HogQLParser.CASE, 0)
        def END(self):
            return self.getToken(HogQLParser.END, 0)
        def WHEN(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.WHEN)
            else:
                return self.getToken(HogQLParser.WHEN, i)
        def THEN(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.THEN)
            else:
                return self.getToken(HogQLParser.THEN, i)
        def ELSE(self):
            return self.getToken(HogQLParser.ELSE, 0)
        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprCase" ):
                return visitor.visitColumnExprCase(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprDateContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DATE(self):
            return self.getToken(HogQLParser.DATE, 0)
        def STRING_LITERAL(self):
            return self.getToken(HogQLParser.STRING_LITERAL, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprDate" ):
                return visitor.visitColumnExprDate(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprNotContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NOT(self):
            return self.getToken(HogQLParser.NOT, 0)
        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprNot" ):
                return visitor.visitColumnExprNot(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprWinFunctionContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.columnExprs = None # ColumnExprListContext
            self.columnArgList = None # ColumnExprListContext
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)

        def OVER(self):
            return self.getToken(HogQLParser.OVER, 0)
        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.LPAREN)
            else:
                return self.getToken(HogQLParser.LPAREN, i)
        def windowExpr(self):
            return self.getTypedRuleContext(HogQLParser.WindowExprContext,0)

        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.RPAREN)
            else:
                return self.getToken(HogQLParser.RPAREN, i)
        def columnExprList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprListContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,i)

        def DISTINCT(self):
            return self.getToken(HogQLParser.DISTINCT, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprWinFunction" ):
                return visitor.visitColumnExprWinFunction(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprLambdaContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnLambdaExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnLambdaExprContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprLambda" ):
                return visitor.visitColumnExprLambda(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprIdentifierContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnIdentifier(self):
            return self.getTypedRuleContext(HogQLParser.ColumnIdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprIdentifier" ):
                return visitor.visitColumnExprIdentifier(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprFunctionContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.columnExprs = None # ColumnExprListContext
            self.columnArgList = None # ColumnExprListContext
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)

        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.LPAREN)
            else:
                return self.getToken(HogQLParser.LPAREN, i)
        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.RPAREN)
            else:
                return self.getToken(HogQLParser.RPAREN, i)
        def DISTINCT(self):
            return self.getToken(HogQLParser.DISTINCT, 0)
        def columnExprList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprListContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,i)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprFunction" ):
                return visitor.visitColumnExprFunction(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprAsteriskContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ASTERISK(self):
            return self.getToken(HogQLParser.ASTERISK, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(HogQLParser.TableIdentifierContext,0)

        def DOT(self):
            return self.getToken(HogQLParser.DOT, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprAsterisk" ):
                return visitor.visitColumnExprAsterisk(self)
            else:
                return visitor.visitChildren(self)



    def columnExpr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = HogQLParser.ColumnExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 118
        self.enterRecursionRule(localctx, 118, self.RULE_columnExpr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 940
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
            if la_ == 1:
                localctx = HogQLParser.ColumnExprCaseContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 791
                self.match(HogQLParser.CASE)
                self.state = 793
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,100,self._ctx)
                if la_ == 1:
                    self.state = 792
                    localctx.caseExpr = self.columnExpr(0)


                self.state = 800 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 795
                    self.match(HogQLParser.WHEN)
                    self.state = 796
                    localctx.whenExpr = self.columnExpr(0)
                    self.state = 797
                    self.match(HogQLParser.THEN)
                    self.state = 798
                    localctx.thenExpr = self.columnExpr(0)
                    self.state = 802 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==101):
                        break

                self.state = 806
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==25:
                    self.state = 804
                    self.match(HogQLParser.ELSE)
                    self.state = 805
                    localctx.elseExpr = self.columnExpr(0)


                self.state = 808
                self.match(HogQLParser.END)
                pass

            elif la_ == 2:
                localctx = HogQLParser.ColumnExprCastContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 810
                self.match(HogQLParser.CAST)
                self.state = 811
                self.match(HogQLParser.LPAREN)
                self.state = 812
                self.columnExpr(0)
                self.state = 813
                self.match(HogQLParser.AS)
                self.state = 814
                self.columnTypeExpr()
                self.state = 815
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 3:
                localctx = HogQLParser.ColumnExprDateContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 817
                self.match(HogQLParser.DATE)
                self.state = 818
                self.match(HogQLParser.STRING_LITERAL)
                pass

            elif la_ == 4:
                localctx = HogQLParser.ColumnExprIntervalContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 819
                self.match(HogQLParser.INTERVAL)
                self.state = 820
                self.columnExpr(0)
                self.state = 821
                self.interval()
                pass

            elif la_ == 5:
                localctx = HogQLParser.ColumnExprSubstringContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 823
                self.match(HogQLParser.SUBSTRING)
                self.state = 824
                self.match(HogQLParser.LPAREN)
                self.state = 825
                self.columnExpr(0)
                self.state = 826
                self.match(HogQLParser.FROM)
                self.state = 827
                self.columnExpr(0)
                self.state = 830
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==34:
                    self.state = 828
                    self.match(HogQLParser.FOR)
                    self.state = 829
                    self.columnExpr(0)


                self.state = 832
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 6:
                localctx = HogQLParser.ColumnExprTimestampContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 834
                self.match(HogQLParser.TIMESTAMP)
                self.state = 835
                self.match(HogQLParser.STRING_LITERAL)
                pass

            elif la_ == 7:
                localctx = HogQLParser.ColumnExprTrimContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 836
                self.match(HogQLParser.TRIM)
                self.state = 837
                self.match(HogQLParser.LPAREN)
                self.state = 838
                _la = self._input.LA(1)
                if not(_la==10 or _la==53 or _la==93):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 839
                self.string()
                self.state = 840
                self.match(HogQLParser.FROM)
                self.state = 841
                self.columnExpr(0)
                self.state = 842
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 8:
                localctx = HogQLParser.ColumnExprWinFunctionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 844
                self.identifier()

                self.state = 845
                self.match(HogQLParser.LPAREN)
                self.state = 847
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -36169677449216002) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 723944289947615231) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & 18455) != 0):
                    self.state = 846
                    localctx.columnExprs = self.columnExprList()


                self.state = 849
                self.match(HogQLParser.RPAREN)
                self.state = 859
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==133:
                    self.state = 851
                    self.match(HogQLParser.LPAREN)
                    self.state = 853
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
                    if la_ == 1:
                        self.state = 852
                        self.match(HogQLParser.DISTINCT)


                    self.state = 856
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & -36169677449216002) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 723944289947615231) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & 18455) != 0):
                        self.state = 855
                        localctx.columnArgList = self.columnExprList()


                    self.state = 858
                    self.match(HogQLParser.RPAREN)


                self.state = 861
                self.match(HogQLParser.OVER)
                self.state = 862
                self.match(HogQLParser.LPAREN)
                self.state = 863
                self.windowExpr()
                self.state = 864
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 9:
                localctx = HogQLParser.ColumnExprWinFunctionTargetContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 866
                self.identifier()

                self.state = 867
                self.match(HogQLParser.LPAREN)
                self.state = 869
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -36169677449216002) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 723944289947615231) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & 18455) != 0):
                    self.state = 868
                    localctx.columnExprs = self.columnExprList()


                self.state = 871
                self.match(HogQLParser.RPAREN)
                self.state = 881
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==133:
                    self.state = 873
                    self.match(HogQLParser.LPAREN)
                    self.state = 875
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,109,self._ctx)
                    if la_ == 1:
                        self.state = 874
                        self.match(HogQLParser.DISTINCT)


                    self.state = 878
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & -36169677449216002) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 723944289947615231) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & 18455) != 0):
                        self.state = 877
                        localctx.columnArgList = self.columnExprList()


                    self.state = 880
                    self.match(HogQLParser.RPAREN)


                self.state = 883
                self.match(HogQLParser.OVER)
                self.state = 884
                self.identifier()
                pass

            elif la_ == 10:
                localctx = HogQLParser.ColumnExprFunctionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 886
                self.identifier()
                self.state = 892
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
                if la_ == 1:
                    self.state = 887
                    self.match(HogQLParser.LPAREN)
                    self.state = 889
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & -36169677449216002) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 723944289947615231) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & 18455) != 0):
                        self.state = 888
                        localctx.columnExprs = self.columnExprList()


                    self.state = 891
                    self.match(HogQLParser.RPAREN)


                self.state = 894
                self.match(HogQLParser.LPAREN)
                self.state = 896
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
                if la_ == 1:
                    self.state = 895
                    self.match(HogQLParser.DISTINCT)


                self.state = 899
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -36169677449216002) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 723944289947615231) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & 18455) != 0):
                    self.state = 898
                    localctx.columnArgList = self.columnExprList()


                self.state = 901
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 11:
                localctx = HogQLParser.ColumnExprTagElementContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 903
                self.hogqlxTagElement()
                pass

            elif la_ == 12:
                localctx = HogQLParser.ColumnExprTemplateStringContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 904
                self.templateString()
                pass

            elif la_ == 13:
                localctx = HogQLParser.ColumnExprLiteralContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 905
                self.literal()
                pass

            elif la_ == 14:
                localctx = HogQLParser.ColumnExprNegateContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 906
                self.match(HogQLParser.DASH)
                self.state = 907
                self.columnExpr(20)
                pass

            elif la_ == 15:
                localctx = HogQLParser.ColumnExprNotContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 908
                self.match(HogQLParser.NOT)
                self.state = 909
                self.columnExpr(14)
                pass

            elif la_ == 16:
                localctx = HogQLParser.ColumnExprAsteriskContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 913
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -5800812384855539714) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 25834219896831) != 0):
                    self.state = 910
                    self.tableIdentifier()
                    self.state = 911
                    self.match(HogQLParser.DOT)


                self.state = 915
                self.match(HogQLParser.ASTERISK)
                pass

            elif la_ == 17:
                localctx = HogQLParser.ColumnExprSubqueryContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 916
                self.match(HogQLParser.LPAREN)
                self.state = 917
                self.selectSetStmt()
                self.state = 918
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 18:
                localctx = HogQLParser.ColumnExprParensContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 920
                self.match(HogQLParser.LPAREN)
                self.state = 921
                self.columnExpr(0)
                self.state = 922
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 19:
                localctx = HogQLParser.ColumnExprTupleContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 924
                self.match(HogQLParser.LPAREN)
                self.state = 925
                self.columnExprList()
                self.state = 926
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 20:
                localctx = HogQLParser.ColumnExprArrayContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 928
                self.match(HogQLParser.LBRACKET)
                self.state = 930
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -36169677449216002) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 723944289947615231) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & 18455) != 0):
                    self.state = 929
                    self.columnExprList()


                self.state = 932
                self.match(HogQLParser.RBRACKET)
                pass

            elif la_ == 21:
                localctx = HogQLParser.ColumnExprDictContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 933
                self.match(HogQLParser.LBRACE)
                self.state = 935
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -36169677449216002) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 723944289947615231) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & 18455) != 0):
                    self.state = 934
                    self.kvPairList()


                self.state = 937
                self.match(HogQLParser.RBRACE)
                pass

            elif la_ == 22:
                localctx = HogQLParser.ColumnExprLambdaContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 938
                self.columnLambdaExpr()
                pass

            elif la_ == 23:
                localctx = HogQLParser.ColumnExprIdentifierContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 939
                self.columnIdentifier()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1052
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,131,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1050
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,130,self._ctx)
                    if la_ == 1:
                        localctx = HogQLParser.ColumnExprPrecedence1Context(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 942
                        if not self.precpred(self._ctx, 19):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 19)")
                        self.state = 946
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [115]:
                            self.state = 943
                            localctx.operator = self.match(HogQLParser.ASTERISK)
                            pass
                        elif token in [154]:
                            self.state = 944
                            localctx.operator = self.match(HogQLParser.SLASH)
                            pass
                        elif token in [141]:
                            self.state = 945
                            localctx.operator = self.match(HogQLParser.PERCENT)
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 948
                        localctx.right = self.columnExpr(20)
                        pass

                    elif la_ == 2:
                        localctx = HogQLParser.ColumnExprPrecedence2Context(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 949
                        if not self.precpred(self._ctx, 18):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 18)")
                        self.state = 953
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [142]:
                            self.state = 950
                            localctx.operator = self.match(HogQLParser.PLUS)
                            pass
                        elif token in [121]:
                            self.state = 951
                            localctx.operator = self.match(HogQLParser.DASH)
                            pass
                        elif token in [120]:
                            self.state = 952
                            localctx.operator = self.match(HogQLParser.CONCAT)
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 955
                        localctx.right = self.columnExpr(19)
                        pass

                    elif la_ == 3:
                        localctx = HogQLParser.ColumnExprPrecedence3Context(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 956
                        if not self.precpred(self._ctx, 17):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 17)")
                        self.state = 981
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,125,self._ctx)
                        if la_ == 1:
                            self.state = 957
                            localctx.operator = self.match(HogQLParser.EQ_DOUBLE)
                            pass

                        elif la_ == 2:
                            self.state = 958
                            localctx.operator = self.match(HogQLParser.EQ_SINGLE)
                            pass

                        elif la_ == 3:
                            self.state = 959
                            localctx.operator = self.match(HogQLParser.NOT_EQ)
                            pass

                        elif la_ == 4:
                            self.state = 960
                            localctx.operator = self.match(HogQLParser.LT_EQ)
                            pass

                        elif la_ == 5:
                            self.state = 961
                            localctx.operator = self.match(HogQLParser.LT)
                            pass

                        elif la_ == 6:
                            self.state = 962
                            localctx.operator = self.match(HogQLParser.GT_EQ)
                            pass

                        elif la_ == 7:
                            self.state = 963
                            localctx.operator = self.match(HogQLParser.GT)
                            pass

                        elif la_ == 8:
                            self.state = 965
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==61:
                                self.state = 964
                                localctx.operator = self.match(HogQLParser.NOT)


                            self.state = 967
                            self.match(HogQLParser.IN)
                            self.state = 969
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,123,self._ctx)
                            if la_ == 1:
                                self.state = 968
                                self.match(HogQLParser.COHORT)


                            pass

                        elif la_ == 9:
                            self.state = 972
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==61:
                                self.state = 971
                                localctx.operator = self.match(HogQLParser.NOT)


                            self.state = 974
                            _la = self._input.LA(1)
                            if not(_la==43 or _la==56):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            pass

                        elif la_ == 10:
                            self.state = 975
                            localctx.operator = self.match(HogQLParser.REGEX_SINGLE)
                            pass

                        elif la_ == 11:
                            self.state = 976
                            localctx.operator = self.match(HogQLParser.REGEX_DOUBLE)
                            pass

                        elif la_ == 12:
                            self.state = 977
                            localctx.operator = self.match(HogQLParser.NOT_REGEX)
                            pass

                        elif la_ == 13:
                            self.state = 978
                            localctx.operator = self.match(HogQLParser.IREGEX_SINGLE)
                            pass

                        elif la_ == 14:
                            self.state = 979
                            localctx.operator = self.match(HogQLParser.IREGEX_DOUBLE)
                            pass

                        elif la_ == 15:
                            self.state = 980
                            localctx.operator = self.match(HogQLParser.NOT_IREGEX)
                            pass


                        self.state = 983
                        localctx.right = self.columnExpr(18)
                        pass

                    elif la_ == 4:
                        localctx = HogQLParser.ColumnExprNullishContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 984
                        if not self.precpred(self._ctx, 15):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 15)")
                        self.state = 985
                        self.match(HogQLParser.NULLISH)
                        self.state = 986
                        self.columnExpr(16)
                        pass

                    elif la_ == 5:
                        localctx = HogQLParser.ColumnExprAndContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 987
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 988
                        self.match(HogQLParser.AND)
                        self.state = 989
                        self.columnExpr(14)
                        pass

                    elif la_ == 6:
                        localctx = HogQLParser.ColumnExprOrContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 990
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 991
                        self.match(HogQLParser.OR)
                        self.state = 992
                        self.columnExpr(13)
                        pass

                    elif la_ == 7:
                        localctx = HogQLParser.ColumnExprBetweenContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 993
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 995
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==61:
                            self.state = 994
                            self.match(HogQLParser.NOT)


                        self.state = 997
                        self.match(HogQLParser.BETWEEN)
                        self.state = 998
                        self.columnExpr(0)
                        self.state = 999
                        self.match(HogQLParser.AND)
                        self.state = 1000
                        self.columnExpr(12)
                        pass

                    elif la_ == 8:
                        localctx = HogQLParser.ColumnExprTernaryOpContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 1002
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 1003
                        self.match(HogQLParser.QUERY)
                        self.state = 1004
                        self.columnExpr(0)
                        self.state = 1005
                        self.match(HogQLParser.COLON)
                        self.state = 1006
                        self.columnExpr(10)
                        pass

                    elif la_ == 9:
                        localctx = HogQLParser.ColumnExprCallContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 1008
                        if not self.precpred(self._ctx, 30):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 30)")
                        self.state = 1009
                        self.match(HogQLParser.LPAREN)
                        self.state = 1011
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & -36169677449216002) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 723944289947615231) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & 18455) != 0):
                            self.state = 1010
                            self.columnExprList()


                        self.state = 1013
                        self.match(HogQLParser.RPAREN)
                        pass

                    elif la_ == 10:
                        localctx = HogQLParser.ColumnExprArrayAccessContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 1014
                        if not self.precpred(self._ctx, 26):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 26)")
                        self.state = 1015
                        self.match(HogQLParser.LBRACKET)
                        self.state = 1016
                        self.columnExpr(0)
                        self.state = 1017
                        self.match(HogQLParser.RBRACKET)
                        pass

                    elif la_ == 11:
                        localctx = HogQLParser.ColumnExprTupleAccessContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 1019
                        if not self.precpred(self._ctx, 25):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 25)")
                        self.state = 1020
                        self.match(HogQLParser.DOT)
                        self.state = 1021
                        self.match(HogQLParser.DECIMAL_LITERAL)
                        pass

                    elif la_ == 12:
                        localctx = HogQLParser.ColumnExprPropertyAccessContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 1022
                        if not self.precpred(self._ctx, 24):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 24)")
                        self.state = 1023
                        self.match(HogQLParser.DOT)
                        self.state = 1024
                        self.identifier()
                        pass

                    elif la_ == 13:
                        localctx = HogQLParser.ColumnExprNullArrayAccessContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 1025
                        if not self.precpred(self._ctx, 23):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 23)")
                        self.state = 1026
                        self.match(HogQLParser.NULL_PROPERTY)
                        self.state = 1027
                        self.match(HogQLParser.LBRACKET)
                        self.state = 1028
                        self.columnExpr(0)
                        self.state = 1029
                        self.match(HogQLParser.RBRACKET)
                        pass

                    elif la_ == 14:
                        localctx = HogQLParser.ColumnExprNullTupleAccessContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 1031
                        if not self.precpred(self._ctx, 22):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 22)")
                        self.state = 1032
                        self.match(HogQLParser.NULL_PROPERTY)
                        self.state = 1033
                        self.match(HogQLParser.DECIMAL_LITERAL)
                        pass

                    elif la_ == 15:
                        localctx = HogQLParser.ColumnExprNullPropertyAccessContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 1034
                        if not self.precpred(self._ctx, 21):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 21)")
                        self.state = 1035
                        self.match(HogQLParser.NULL_PROPERTY)
                        self.state = 1036
                        self.identifier()
                        pass

                    elif la_ == 16:
                        localctx = HogQLParser.ColumnExprIsNullContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 1037
                        if not self.precpred(self._ctx, 16):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 16)")
                        self.state = 1038
                        self.match(HogQLParser.IS)
                        self.state = 1040
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==61:
                            self.state = 1039
                            self.match(HogQLParser.NOT)


                        self.state = 1042
                        self.match(HogQLParser.NULL_SQL)
                        pass

                    elif la_ == 17:
                        localctx = HogQLParser.ColumnExprAliasContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 1043
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 1048
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,129,self._ctx)
                        if la_ == 1:
                            self.state = 1044
                            self.match(HogQLParser.AS)
                            self.state = 1045
                            self.identifier()
                            pass

                        elif la_ == 2:
                            self.state = 1046
                            self.match(HogQLParser.AS)
                            self.state = 1047
                            self.match(HogQLParser.STRING_LITERAL)
                            pass


                        pass

             
                self.state = 1054
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,131,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ColumnLambdaExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ARROW(self):
            return self.getToken(HogQLParser.ARROW, 0)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(HogQLParser.IdentifierContext,i)


        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def block(self):
            return self.getTypedRuleContext(HogQLParser.BlockContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_columnLambdaExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnLambdaExpr" ):
                return visitor.visitColumnLambdaExpr(self)
            else:
                return visitor.visitChildren(self)




    def columnLambdaExpr(self):

        localctx = HogQLParser.ColumnLambdaExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_columnLambdaExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1082
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,136,self._ctx)
            if la_ == 1:
                self.state = 1055
                self.match(HogQLParser.LPAREN)
                self.state = 1056
                self.identifier()
                self.state = 1061
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,132,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1057
                        self.match(HogQLParser.COMMA)
                        self.state = 1058
                        self.identifier() 
                    self.state = 1063
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,132,self._ctx)

                self.state = 1065
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==119:
                    self.state = 1064
                    self.match(HogQLParser.COMMA)


                self.state = 1067
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 2:
                self.state = 1069
                self.identifier()
                self.state = 1074
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,134,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1070
                        self.match(HogQLParser.COMMA)
                        self.state = 1071
                        self.identifier() 
                    self.state = 1076
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,134,self._ctx)

                self.state = 1078
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==119:
                    self.state = 1077
                    self.match(HogQLParser.COMMA)


                pass

            elif la_ == 3:
                self.state = 1080
                self.match(HogQLParser.LPAREN)
                self.state = 1081
                self.match(HogQLParser.RPAREN)
                pass


            self.state = 1084
            self.match(HogQLParser.ARROW)
            self.state = 1087
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,137,self._ctx)
            if la_ == 1:
                self.state = 1085
                self.columnExpr(0)
                pass

            elif la_ == 2:
                self.state = 1086
                self.block()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HogqlxTagElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return HogQLParser.RULE_hogqlxTagElement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class HogqlxTagElementClosedContext(HogqlxTagElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.HogqlxTagElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LT(self):
            return self.getToken(HogQLParser.LT, 0)
        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)

        def SLASH(self):
            return self.getToken(HogQLParser.SLASH, 0)
        def GT(self):
            return self.getToken(HogQLParser.GT, 0)
        def hogqlxTagAttribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.HogqlxTagAttributeContext)
            else:
                return self.getTypedRuleContext(HogQLParser.HogqlxTagAttributeContext,i)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHogqlxTagElementClosed" ):
                return visitor.visitHogqlxTagElementClosed(self)
            else:
                return visitor.visitChildren(self)


    class HogqlxTagElementNestedContext(HogqlxTagElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.HogqlxTagElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LT(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.LT)
            else:
                return self.getToken(HogQLParser.LT, i)
        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(HogQLParser.IdentifierContext,i)

        def GT(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.GT)
            else:
                return self.getToken(HogQLParser.GT, i)
        def SLASH(self):
            return self.getToken(HogQLParser.SLASH, 0)
        def hogqlxTagAttribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.HogqlxTagAttributeContext)
            else:
                return self.getTypedRuleContext(HogQLParser.HogqlxTagAttributeContext,i)

        def hogqlxTagElement(self):
            return self.getTypedRuleContext(HogQLParser.HogqlxTagElementContext,0)

        def LBRACE(self):
            return self.getToken(HogQLParser.LBRACE, 0)
        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def RBRACE(self):
            return self.getToken(HogQLParser.RBRACE, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHogqlxTagElementNested" ):
                return visitor.visitHogqlxTagElementNested(self)
            else:
                return visitor.visitChildren(self)



    def hogqlxTagElement(self):

        localctx = HogQLParser.HogqlxTagElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_hogqlxTagElement)
        self._la = 0 # Token type
        try:
            self.state = 1121
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,141,self._ctx)
            if la_ == 1:
                localctx = HogQLParser.HogqlxTagElementClosedContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1089
                self.match(HogQLParser.LT)
                self.state = 1090
                self.identifier()
                self.state = 1094
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & -5800812384855539714) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 25834219896831) != 0):
                    self.state = 1091
                    self.hogqlxTagAttribute()
                    self.state = 1096
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1097
                self.match(HogQLParser.SLASH)
                self.state = 1098
                self.match(HogQLParser.GT)
                pass

            elif la_ == 2:
                localctx = HogQLParser.HogqlxTagElementNestedContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1100
                self.match(HogQLParser.LT)
                self.state = 1101
                self.identifier()
                self.state = 1105
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & -5800812384855539714) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 25834219896831) != 0):
                    self.state = 1102
                    self.hogqlxTagAttribute()
                    self.state = 1107
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1108
                self.match(HogQLParser.GT)
                self.state = 1114
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,140,self._ctx)
                if la_ == 1:
                    self.state = 1109
                    self.hogqlxTagElement()

                elif la_ == 2:
                    self.state = 1110
                    self.match(HogQLParser.LBRACE)
                    self.state = 1111
                    self.columnExpr(0)
                    self.state = 1112
                    self.match(HogQLParser.RBRACE)


                self.state = 1116
                self.match(HogQLParser.LT)
                self.state = 1117
                self.match(HogQLParser.SLASH)
                self.state = 1118
                self.identifier()
                self.state = 1119
                self.match(HogQLParser.GT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HogqlxTagAttributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def EQ_SINGLE(self):
            return self.getToken(HogQLParser.EQ_SINGLE, 0)

        def string(self):
            return self.getTypedRuleContext(HogQLParser.StringContext,0)


        def LBRACE(self):
            return self.getToken(HogQLParser.LBRACE, 0)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def RBRACE(self):
            return self.getToken(HogQLParser.RBRACE, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_hogqlxTagAttribute

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHogqlxTagAttribute" ):
                return visitor.visitHogqlxTagAttribute(self)
            else:
                return visitor.visitChildren(self)




    def hogqlxTagAttribute(self):

        localctx = HogQLParser.HogqlxTagAttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_hogqlxTagAttribute)
        try:
            self.state = 1134
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,142,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1123
                self.identifier()
                self.state = 1124
                self.match(HogQLParser.EQ_SINGLE)
                self.state = 1125
                self.string()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1127
                self.identifier()
                self.state = 1128
                self.match(HogQLParser.EQ_SINGLE)
                self.state = 1129
                self.match(HogQLParser.LBRACE)
                self.state = 1130
                self.columnExpr(0)
                self.state = 1131
                self.match(HogQLParser.RBRACE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1133
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WithExprListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def withExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.WithExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.WithExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_withExprList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWithExprList" ):
                return visitor.visitWithExprList(self)
            else:
                return visitor.visitChildren(self)




    def withExprList(self):

        localctx = HogQLParser.WithExprListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_withExprList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1136
            self.withExpr()
            self.state = 1141
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,143,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1137
                    self.match(HogQLParser.COMMA)
                    self.state = 1138
                    self.withExpr() 
                self.state = 1143
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,143,self._ctx)

            self.state = 1145
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119:
                self.state = 1144
                self.match(HogQLParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WithExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return HogQLParser.RULE_withExpr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class WithExprColumnContext(WithExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.WithExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def AS(self):
            return self.getToken(HogQLParser.AS, 0)
        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWithExprColumn" ):
                return visitor.visitWithExprColumn(self)
            else:
                return visitor.visitChildren(self)


    class WithExprSubqueryContext(WithExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.WithExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)

        def AS(self):
            return self.getToken(HogQLParser.AS, 0)
        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def selectSetStmt(self):
            return self.getTypedRuleContext(HogQLParser.SelectSetStmtContext,0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWithExprSubquery" ):
                return visitor.visitWithExprSubquery(self)
            else:
                return visitor.visitChildren(self)



    def withExpr(self):

        localctx = HogQLParser.WithExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_withExpr)
        try:
            self.state = 1157
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,145,self._ctx)
            if la_ == 1:
                localctx = HogQLParser.WithExprSubqueryContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1147
                self.identifier()
                self.state = 1148
                self.match(HogQLParser.AS)
                self.state = 1149
                self.match(HogQLParser.LPAREN)
                self.state = 1150
                self.selectSetStmt()
                self.state = 1151
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 2:
                localctx = HogQLParser.WithExprColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1153
                self.columnExpr(0)
                self.state = 1154
                self.match(HogQLParser.AS)
                self.state = 1155
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def placeholder(self):
            return self.getTypedRuleContext(HogQLParser.PlaceholderContext,0)


        def nestedIdentifier(self):
            return self.getTypedRuleContext(HogQLParser.NestedIdentifierContext,0)


        def tableIdentifier(self):
            return self.getTypedRuleContext(HogQLParser.TableIdentifierContext,0)


        def DOT(self):
            return self.getToken(HogQLParser.DOT, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_columnIdentifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnIdentifier" ):
                return visitor.visitColumnIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def columnIdentifier(self):

        localctx = HogQLParser.ColumnIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_columnIdentifier)
        try:
            self.state = 1166
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [131]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1159
                self.placeholder()
                pass
            elif token in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 46, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 104, 105, 106, 108]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1163
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,146,self._ctx)
                if la_ == 1:
                    self.state = 1160
                    self.tableIdentifier()
                    self.state = 1161
                    self.match(HogQLParser.DOT)


                self.state = 1165
                self.nestedIdentifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NestedIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(HogQLParser.IdentifierContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.DOT)
            else:
                return self.getToken(HogQLParser.DOT, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_nestedIdentifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNestedIdentifier" ):
                return visitor.visitNestedIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def nestedIdentifier(self):

        localctx = HogQLParser.NestedIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_nestedIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1168
            self.identifier()
            self.state = 1173
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,148,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1169
                    self.match(HogQLParser.DOT)
                    self.state = 1170
                    self.identifier() 
                self.state = 1175
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,148,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return HogQLParser.RULE_tableExpr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class TableExprTagContext(TableExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.TableExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def hogqlxTagElement(self):
            return self.getTypedRuleContext(HogQLParser.HogqlxTagElementContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableExprTag" ):
                return visitor.visitTableExprTag(self)
            else:
                return visitor.visitChildren(self)


    class TableExprIdentifierContext(TableExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.TableExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tableIdentifier(self):
            return self.getTypedRuleContext(HogQLParser.TableIdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableExprIdentifier" ):
                return visitor.visitTableExprIdentifier(self)
            else:
                return visitor.visitChildren(self)


    class TableExprPlaceholderContext(TableExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.TableExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def placeholder(self):
            return self.getTypedRuleContext(HogQLParser.PlaceholderContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableExprPlaceholder" ):
                return visitor.visitTableExprPlaceholder(self)
            else:
                return visitor.visitChildren(self)


    class TableExprSubqueryContext(TableExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.TableExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def selectSetStmt(self):
            return self.getTypedRuleContext(HogQLParser.SelectSetStmtContext,0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableExprSubquery" ):
                return visitor.visitTableExprSubquery(self)
            else:
                return visitor.visitChildren(self)


    class TableExprAliasContext(TableExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.TableExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tableExpr(self):
            return self.getTypedRuleContext(HogQLParser.TableExprContext,0)

        def alias(self):
            return self.getTypedRuleContext(HogQLParser.AliasContext,0)

        def AS(self):
            return self.getToken(HogQLParser.AS, 0)
        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableExprAlias" ):
                return visitor.visitTableExprAlias(self)
            else:
                return visitor.visitChildren(self)


    class TableExprFunctionContext(TableExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.TableExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tableFunctionExpr(self):
            return self.getTypedRuleContext(HogQLParser.TableFunctionExprContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableExprFunction" ):
                return visitor.visitTableExprFunction(self)
            else:
                return visitor.visitChildren(self)



    def tableExpr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = HogQLParser.TableExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 134
        self.enterRecursionRule(localctx, 134, self.RULE_tableExpr, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1185
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,149,self._ctx)
            if la_ == 1:
                localctx = HogQLParser.TableExprIdentifierContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 1177
                self.tableIdentifier()
                pass

            elif la_ == 2:
                localctx = HogQLParser.TableExprFunctionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1178
                self.tableFunctionExpr()
                pass

            elif la_ == 3:
                localctx = HogQLParser.TableExprSubqueryContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1179
                self.match(HogQLParser.LPAREN)
                self.state = 1180
                self.selectSetStmt()
                self.state = 1181
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 4:
                localctx = HogQLParser.TableExprTagContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1183
                self.hogqlxTagElement()
                pass

            elif la_ == 5:
                localctx = HogQLParser.TableExprPlaceholderContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1184
                self.placeholder()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1195
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,151,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = HogQLParser.TableExprAliasContext(self, HogQLParser.TableExprContext(self, _parentctx, _parentState))
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_tableExpr)
                    self.state = 1187
                    if not self.precpred(self._ctx, 3):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                    self.state = 1191
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [20, 31, 41, 51, 108]:
                        self.state = 1188
                        self.alias()
                        pass
                    elif token in [6]:
                        self.state = 1189
                        self.match(HogQLParser.AS)
                        self.state = 1190
                        self.identifier()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 1197
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,151,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class TableFunctionExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def tableArgList(self):
            return self.getTypedRuleContext(HogQLParser.TableArgListContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_tableFunctionExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableFunctionExpr" ):
                return visitor.visitTableFunctionExpr(self)
            else:
                return visitor.visitChildren(self)




    def tableFunctionExpr(self):

        localctx = HogQLParser.TableFunctionExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_tableFunctionExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1198
            self.identifier()
            self.state = 1199
            self.match(HogQLParser.LPAREN)
            self.state = 1201
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -36169677449216002) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 723944289947615231) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & 18455) != 0):
                self.state = 1200
                self.tableArgList()


            self.state = 1203
            self.match(HogQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def databaseIdentifier(self):
            return self.getTypedRuleContext(HogQLParser.DatabaseIdentifierContext,0)


        def DOT(self):
            return self.getToken(HogQLParser.DOT, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_tableIdentifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableIdentifier" ):
                return visitor.visitTableIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def tableIdentifier(self):

        localctx = HogQLParser.TableIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_tableIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1208
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,153,self._ctx)
            if la_ == 1:
                self.state = 1205
                self.databaseIdentifier()
                self.state = 1206
                self.match(HogQLParser.DOT)


            self.state = 1210
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableArgListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_tableArgList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableArgList" ):
                return visitor.visitTableArgList(self)
            else:
                return visitor.visitChildren(self)




    def tableArgList(self):

        localctx = HogQLParser.TableArgListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_tableArgList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1212
            self.columnExpr(0)
            self.state = 1217
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,154,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1213
                    self.match(HogQLParser.COMMA)
                    self.state = 1214
                    self.columnExpr(0) 
                self.state = 1219
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,154,self._ctx)

            self.state = 1221
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119:
                self.state = 1220
                self.match(HogQLParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DatabaseIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_databaseIdentifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDatabaseIdentifier" ):
                return visitor.visitDatabaseIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def databaseIdentifier(self):

        localctx = HogQLParser.DatabaseIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_databaseIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1223
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FloatingLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FLOATING_LITERAL(self):
            return self.getToken(HogQLParser.FLOATING_LITERAL, 0)

        def DOT(self):
            return self.getToken(HogQLParser.DOT, 0)

        def DECIMAL_LITERAL(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.DECIMAL_LITERAL)
            else:
                return self.getToken(HogQLParser.DECIMAL_LITERAL, i)

        def OCTAL_LITERAL(self):
            return self.getToken(HogQLParser.OCTAL_LITERAL, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_floatingLiteral

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFloatingLiteral" ):
                return visitor.visitFloatingLiteral(self)
            else:
                return visitor.visitChildren(self)




    def floatingLiteral(self):

        localctx = HogQLParser.FloatingLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_floatingLiteral)
        self._la = 0 # Token type
        try:
            self.state = 1233
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [109]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1225
                self.match(HogQLParser.FLOATING_LITERAL)
                pass
            elif token in [123]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1226
                self.match(HogQLParser.DOT)
                self.state = 1227
                _la = self._input.LA(1)
                if not(_la==110 or _la==111):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [111]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1228
                self.match(HogQLParser.DECIMAL_LITERAL)
                self.state = 1229
                self.match(HogQLParser.DOT)
                self.state = 1231
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,156,self._ctx)
                if la_ == 1:
                    self.state = 1230
                    _la = self._input.LA(1)
                    if not(_la==110 or _la==111):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumberLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def floatingLiteral(self):
            return self.getTypedRuleContext(HogQLParser.FloatingLiteralContext,0)


        def OCTAL_LITERAL(self):
            return self.getToken(HogQLParser.OCTAL_LITERAL, 0)

        def DECIMAL_LITERAL(self):
            return self.getToken(HogQLParser.DECIMAL_LITERAL, 0)

        def HEXADECIMAL_LITERAL(self):
            return self.getToken(HogQLParser.HEXADECIMAL_LITERAL, 0)

        def INF(self):
            return self.getToken(HogQLParser.INF, 0)

        def NAN_SQL(self):
            return self.getToken(HogQLParser.NAN_SQL, 0)

        def PLUS(self):
            return self.getToken(HogQLParser.PLUS, 0)

        def DASH(self):
            return self.getToken(HogQLParser.DASH, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_numberLiteral

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumberLiteral" ):
                return visitor.visitNumberLiteral(self)
            else:
                return visitor.visitChildren(self)




    def numberLiteral(self):

        localctx = HogQLParser.NumberLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_numberLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1236
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==121 or _la==142:
                self.state = 1235
                _la = self._input.LA(1)
                if not(_la==121 or _la==142):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1244
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,159,self._ctx)
            if la_ == 1:
                self.state = 1238
                self.floatingLiteral()
                pass

            elif la_ == 2:
                self.state = 1239
                self.match(HogQLParser.OCTAL_LITERAL)
                pass

            elif la_ == 3:
                self.state = 1240
                self.match(HogQLParser.DECIMAL_LITERAL)
                pass

            elif la_ == 4:
                self.state = 1241
                self.match(HogQLParser.HEXADECIMAL_LITERAL)
                pass

            elif la_ == 5:
                self.state = 1242
                self.match(HogQLParser.INF)
                pass

            elif la_ == 6:
                self.state = 1243
                self.match(HogQLParser.NAN_SQL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numberLiteral(self):
            return self.getTypedRuleContext(HogQLParser.NumberLiteralContext,0)


        def STRING_LITERAL(self):
            return self.getToken(HogQLParser.STRING_LITERAL, 0)

        def NULL_SQL(self):
            return self.getToken(HogQLParser.NULL_SQL, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_literal

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteral" ):
                return visitor.visitLiteral(self)
            else:
                return visitor.visitChildren(self)




    def literal(self):

        localctx = HogQLParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_literal)
        try:
            self.state = 1249
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [45, 60, 109, 110, 111, 112, 121, 123, 142]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1246
                self.numberLiteral()
                pass
            elif token in [113]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1247
                self.match(HogQLParser.STRING_LITERAL)
                pass
            elif token in [62]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1248
                self.match(HogQLParser.NULL_SQL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SECOND(self):
            return self.getToken(HogQLParser.SECOND, 0)

        def MINUTE(self):
            return self.getToken(HogQLParser.MINUTE, 0)

        def HOUR(self):
            return self.getToken(HogQLParser.HOUR, 0)

        def DAY(self):
            return self.getToken(HogQLParser.DAY, 0)

        def WEEK(self):
            return self.getToken(HogQLParser.WEEK, 0)

        def MONTH(self):
            return self.getToken(HogQLParser.MONTH, 0)

        def QUARTER(self):
            return self.getToken(HogQLParser.QUARTER, 0)

        def YEAR(self):
            return self.getToken(HogQLParser.YEAR, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_interval

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterval" ):
                return visitor.visitInterval(self)
            else:
                return visitor.visitChildren(self)




    def interval(self):

        localctx = HogQLParser.IntervalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_interval)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1251
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 864692227968860160) != 0) or ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & 8724152577) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(HogQLParser.ALL, 0)

        def AND(self):
            return self.getToken(HogQLParser.AND, 0)

        def ANTI(self):
            return self.getToken(HogQLParser.ANTI, 0)

        def ANY(self):
            return self.getToken(HogQLParser.ANY, 0)

        def ARRAY(self):
            return self.getToken(HogQLParser.ARRAY, 0)

        def AS(self):
            return self.getToken(HogQLParser.AS, 0)

        def ASCENDING(self):
            return self.getToken(HogQLParser.ASCENDING, 0)

        def ASOF(self):
            return self.getToken(HogQLParser.ASOF, 0)

        def BETWEEN(self):
            return self.getToken(HogQLParser.BETWEEN, 0)

        def BOTH(self):
            return self.getToken(HogQLParser.BOTH, 0)

        def BY(self):
            return self.getToken(HogQLParser.BY, 0)

        def CASE(self):
            return self.getToken(HogQLParser.CASE, 0)

        def CAST(self):
            return self.getToken(HogQLParser.CAST, 0)

        def COHORT(self):
            return self.getToken(HogQLParser.COHORT, 0)

        def COLLATE(self):
            return self.getToken(HogQLParser.COLLATE, 0)

        def CROSS(self):
            return self.getToken(HogQLParser.CROSS, 0)

        def CUBE(self):
            return self.getToken(HogQLParser.CUBE, 0)

        def CURRENT(self):
            return self.getToken(HogQLParser.CURRENT, 0)

        def DATE(self):
            return self.getToken(HogQLParser.DATE, 0)

        def DESC(self):
            return self.getToken(HogQLParser.DESC, 0)

        def DESCENDING(self):
            return self.getToken(HogQLParser.DESCENDING, 0)

        def DISTINCT(self):
            return self.getToken(HogQLParser.DISTINCT, 0)

        def ELSE(self):
            return self.getToken(HogQLParser.ELSE, 0)

        def END(self):
            return self.getToken(HogQLParser.END, 0)

        def EXTRACT(self):
            return self.getToken(HogQLParser.EXTRACT, 0)

        def FINAL(self):
            return self.getToken(HogQLParser.FINAL, 0)

        def FIRST(self):
            return self.getToken(HogQLParser.FIRST, 0)

        def FOR(self):
            return self.getToken(HogQLParser.FOR, 0)

        def FOLLOWING(self):
            return self.getToken(HogQLParser.FOLLOWING, 0)

        def FROM(self):
            return self.getToken(HogQLParser.FROM, 0)

        def FULL(self):
            return self.getToken(HogQLParser.FULL, 0)

        def GROUP(self):
            return self.getToken(HogQLParser.GROUP, 0)

        def HAVING(self):
            return self.getToken(HogQLParser.HAVING, 0)

        def ID(self):
            return self.getToken(HogQLParser.ID, 0)

        def IS(self):
            return self.getToken(HogQLParser.IS, 0)

        def IF(self):
            return self.getToken(HogQLParser.IF, 0)

        def ILIKE(self):
            return self.getToken(HogQLParser.ILIKE, 0)

        def IN(self):
            return self.getToken(HogQLParser.IN, 0)

        def INNER(self):
            return self.getToken(HogQLParser.INNER, 0)

        def INTERVAL(self):
            return self.getToken(HogQLParser.INTERVAL, 0)

        def JOIN(self):
            return self.getToken(HogQLParser.JOIN, 0)

        def KEY(self):
            return self.getToken(HogQLParser.KEY, 0)

        def LAST(self):
            return self.getToken(HogQLParser.LAST, 0)

        def LEADING(self):
            return self.getToken(HogQLParser.LEADING, 0)

        def LEFT(self):
            return self.getToken(HogQLParser.LEFT, 0)

        def LIKE(self):
            return self.getToken(HogQLParser.LIKE, 0)

        def LIMIT(self):
            return self.getToken(HogQLParser.LIMIT, 0)

        def NOT(self):
            return self.getToken(HogQLParser.NOT, 0)

        def NULLS(self):
            return self.getToken(HogQLParser.NULLS, 0)

        def OFFSET(self):
            return self.getToken(HogQLParser.OFFSET, 0)

        def ON(self):
            return self.getToken(HogQLParser.ON, 0)

        def OR(self):
            return self.getToken(HogQLParser.OR, 0)

        def ORDER(self):
            return self.getToken(HogQLParser.ORDER, 0)

        def OUTER(self):
            return self.getToken(HogQLParser.OUTER, 0)

        def OVER(self):
            return self.getToken(HogQLParser.OVER, 0)

        def PARTITION(self):
            return self.getToken(HogQLParser.PARTITION, 0)

        def PRECEDING(self):
            return self.getToken(HogQLParser.PRECEDING, 0)

        def PREWHERE(self):
            return self.getToken(HogQLParser.PREWHERE, 0)

        def RANGE(self):
            return self.getToken(HogQLParser.RANGE, 0)

        def RETURN(self):
            return self.getToken(HogQLParser.RETURN, 0)

        def RIGHT(self):
            return self.getToken(HogQLParser.RIGHT, 0)

        def ROLLUP(self):
            return self.getToken(HogQLParser.ROLLUP, 0)

        def ROW(self):
            return self.getToken(HogQLParser.ROW, 0)

        def ROWS(self):
            return self.getToken(HogQLParser.ROWS, 0)

        def SAMPLE(self):
            return self.getToken(HogQLParser.SAMPLE, 0)

        def SELECT(self):
            return self.getToken(HogQLParser.SELECT, 0)

        def SEMI(self):
            return self.getToken(HogQLParser.SEMI, 0)

        def SETTINGS(self):
            return self.getToken(HogQLParser.SETTINGS, 0)

        def SUBSTRING(self):
            return self.getToken(HogQLParser.SUBSTRING, 0)

        def THEN(self):
            return self.getToken(HogQLParser.THEN, 0)

        def TIES(self):
            return self.getToken(HogQLParser.TIES, 0)

        def TIMESTAMP(self):
            return self.getToken(HogQLParser.TIMESTAMP, 0)

        def TOTALS(self):
            return self.getToken(HogQLParser.TOTALS, 0)

        def TRAILING(self):
            return self.getToken(HogQLParser.TRAILING, 0)

        def TRIM(self):
            return self.getToken(HogQLParser.TRIM, 0)

        def TRUNCATE(self):
            return self.getToken(HogQLParser.TRUNCATE, 0)

        def TO(self):
            return self.getToken(HogQLParser.TO, 0)

        def TOP(self):
            return self.getToken(HogQLParser.TOP, 0)

        def UNBOUNDED(self):
            return self.getToken(HogQLParser.UNBOUNDED, 0)

        def UNION(self):
            return self.getToken(HogQLParser.UNION, 0)

        def USING(self):
            return self.getToken(HogQLParser.USING, 0)

        def WHEN(self):
            return self.getToken(HogQLParser.WHEN, 0)

        def WHERE(self):
            return self.getToken(HogQLParser.WHERE, 0)

        def WINDOW(self):
            return self.getToken(HogQLParser.WINDOW, 0)

        def WITH(self):
            return self.getToken(HogQLParser.WITH, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_keyword

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKeyword" ):
                return visitor.visitKeyword(self)
            else:
                return visitor.visitChildren(self)




    def keyword(self):

        localctx = HogQLParser.KeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_keyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1253
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & -6665504612824399874) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 3775267732991) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeywordForAliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATE(self):
            return self.getToken(HogQLParser.DATE, 0)

        def FIRST(self):
            return self.getToken(HogQLParser.FIRST, 0)

        def ID(self):
            return self.getToken(HogQLParser.ID, 0)

        def KEY(self):
            return self.getToken(HogQLParser.KEY, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_keywordForAlias

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKeywordForAlias" ):
                return visitor.visitKeywordForAlias(self)
            else:
                return visitor.visitChildren(self)




    def keywordForAlias(self):

        localctx = HogQLParser.KeywordForAliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_keywordForAlias)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1255
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 2254000985473024) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(HogQLParser.IDENTIFIER, 0)

        def keywordForAlias(self):
            return self.getTypedRuleContext(HogQLParser.KeywordForAliasContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_alias

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlias" ):
                return visitor.visitAlias(self)
            else:
                return visitor.visitChildren(self)




    def alias(self):

        localctx = HogQLParser.AliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_alias)
        try:
            self.state = 1259
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [108]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1257
                self.match(HogQLParser.IDENTIFIER)
                pass
            elif token in [20, 31, 41, 51]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1258
                self.keywordForAlias()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(HogQLParser.IDENTIFIER, 0)

        def interval(self):
            return self.getTypedRuleContext(HogQLParser.IntervalContext,0)


        def keyword(self):
            return self.getTypedRuleContext(HogQLParser.KeywordContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_identifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifier" ):
                return visitor.visitIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def identifier(self):

        localctx = HogQLParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_identifier)
        try:
            self.state = 1264
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [108]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1261
                self.match(HogQLParser.IDENTIFIER)
                pass
            elif token in [21, 40, 58, 59, 73, 81, 100, 106]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1262
                self.interval()
                pass
            elif token in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 28, 29, 31, 33, 34, 35, 36, 38, 39, 41, 42, 43, 44, 46, 48, 49, 50, 51, 52, 53, 54, 56, 57, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 101, 102, 104, 105]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1263
                self.keyword()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def string(self):
            return self.getTypedRuleContext(HogQLParser.StringContext,0)


        def EQ_SINGLE(self):
            return self.getToken(HogQLParser.EQ_SINGLE, 0)

        def numberLiteral(self):
            return self.getTypedRuleContext(HogQLParser.NumberLiteralContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_enumValue

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumValue" ):
                return visitor.visitEnumValue(self)
            else:
                return visitor.visitChildren(self)




    def enumValue(self):

        localctx = HogQLParser.EnumValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_enumValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1266
            self.string()
            self.state = 1267
            self.match(HogQLParser.EQ_SINGLE)
            self.state = 1268
            self.numberLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PlaceholderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(HogQLParser.LBRACE, 0)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def RBRACE(self):
            return self.getToken(HogQLParser.RBRACE, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_placeholder

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPlaceholder" ):
                return visitor.visitPlaceholder(self)
            else:
                return visitor.visitChildren(self)




    def placeholder(self):

        localctx = HogQLParser.PlaceholderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_placeholder)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1270
            self.match(HogQLParser.LBRACE)
            self.state = 1271
            self.columnExpr(0)
            self.state = 1272
            self.match(HogQLParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(HogQLParser.STRING_LITERAL, 0)

        def templateString(self):
            return self.getTypedRuleContext(HogQLParser.TemplateStringContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_string

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitString" ):
                return visitor.visitString(self)
            else:
                return visitor.visitChildren(self)




    def string(self):

        localctx = HogQLParser.StringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_string)
        try:
            self.state = 1276
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [113]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1274
                self.match(HogQLParser.STRING_LITERAL)
                pass
            elif token in [145]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1275
                self.templateString()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TemplateStringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUOTE_SINGLE_TEMPLATE(self):
            return self.getToken(HogQLParser.QUOTE_SINGLE_TEMPLATE, 0)

        def QUOTE_SINGLE(self):
            return self.getToken(HogQLParser.QUOTE_SINGLE, 0)

        def stringContents(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.StringContentsContext)
            else:
                return self.getTypedRuleContext(HogQLParser.StringContentsContext,i)


        def getRuleIndex(self):
            return HogQLParser.RULE_templateString

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTemplateString" ):
                return visitor.visitTemplateString(self)
            else:
                return visitor.visitChildren(self)




    def templateString(self):

        localctx = HogQLParser.TemplateStringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_templateString)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1278
            self.match(HogQLParser.QUOTE_SINGLE_TEMPLATE)
            self.state = 1282
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==159 or _la==160:
                self.state = 1279
                self.stringContents()
                self.state = 1284
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1285
            self.match(HogQLParser.QUOTE_SINGLE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringContentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_ESCAPE_TRIGGER(self):
            return self.getToken(HogQLParser.STRING_ESCAPE_TRIGGER, 0)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def RBRACE(self):
            return self.getToken(HogQLParser.RBRACE, 0)

        def STRING_TEXT(self):
            return self.getToken(HogQLParser.STRING_TEXT, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_stringContents

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringContents" ):
                return visitor.visitStringContents(self)
            else:
                return visitor.visitChildren(self)




    def stringContents(self):

        localctx = HogQLParser.StringContentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_stringContents)
        try:
            self.state = 1292
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [160]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1287
                self.match(HogQLParser.STRING_ESCAPE_TRIGGER)
                self.state = 1288
                self.columnExpr(0)
                self.state = 1289
                self.match(HogQLParser.RBRACE)
                pass
            elif token in [159]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1291
                self.match(HogQLParser.STRING_TEXT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FullTemplateStringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUOTE_SINGLE_TEMPLATE_FULL(self):
            return self.getToken(HogQLParser.QUOTE_SINGLE_TEMPLATE_FULL, 0)

        def EOF(self):
            return self.getToken(HogQLParser.EOF, 0)

        def stringContentsFull(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.StringContentsFullContext)
            else:
                return self.getTypedRuleContext(HogQLParser.StringContentsFullContext,i)


        def getRuleIndex(self):
            return HogQLParser.RULE_fullTemplateString

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFullTemplateString" ):
                return visitor.visitFullTemplateString(self)
            else:
                return visitor.visitChildren(self)




    def fullTemplateString(self):

        localctx = HogQLParser.FullTemplateStringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_fullTemplateString)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1294
            self.match(HogQLParser.QUOTE_SINGLE_TEMPLATE_FULL)
            self.state = 1298
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==161 or _la==162:
                self.state = 1295
                self.stringContentsFull()
                self.state = 1300
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1301
            self.match(HogQLParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringContentsFullContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FULL_STRING_ESCAPE_TRIGGER(self):
            return self.getToken(HogQLParser.FULL_STRING_ESCAPE_TRIGGER, 0)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def RBRACE(self):
            return self.getToken(HogQLParser.RBRACE, 0)

        def FULL_STRING_TEXT(self):
            return self.getToken(HogQLParser.FULL_STRING_TEXT, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_stringContentsFull

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringContentsFull" ):
                return visitor.visitStringContentsFull(self)
            else:
                return visitor.visitChildren(self)




    def stringContentsFull(self):

        localctx = HogQLParser.StringContentsFullContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_stringContentsFull)
        try:
            self.state = 1308
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [162]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1303
                self.match(HogQLParser.FULL_STRING_ESCAPE_TRIGGER)
                self.state = 1304
                self.columnExpr(0)
                self.state = 1305
                self.match(HogQLParser.RBRACE)
                pass
            elif token in [161]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1307
                self.match(HogQLParser.FULL_STRING_TEXT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[40] = self.joinExpr_sempred
        self._predicates[59] = self.columnExpr_sempred
        self._predicates[67] = self.tableExpr_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def joinExpr_sempred(self, localctx:JoinExprContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 4)
         

    def columnExpr_sempred(self, localctx:ColumnExprContext, predIndex:int):
            if predIndex == 2:
                return self.precpred(self._ctx, 19)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 18)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 17)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 15)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 13)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 30)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 26)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 25)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 24)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 23)
         

            if predIndex == 15:
                return self.precpred(self._ctx, 22)
         

            if predIndex == 16:
                return self.precpred(self._ctx, 21)
         

            if predIndex == 17:
                return self.precpred(self._ctx, 16)
         

            if predIndex == 18:
                return self.precpred(self._ctx, 9)
         

    def tableExpr_sempred(self, localctx:TableExprContext, predIndex:int):
            if predIndex == 19:
                return self.precpred(self._ctx, 3)
         




