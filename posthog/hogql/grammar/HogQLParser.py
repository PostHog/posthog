# Generated from HogQLParser.g4 by ANTLR 4.13.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,154,1237,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,1,0,5,0,170,
        8,0,10,0,12,0,173,9,0,1,0,1,0,1,1,1,1,3,1,179,8,1,1,2,1,2,1,3,1,
        3,1,3,1,3,1,3,3,3,188,8,3,1,4,1,4,1,4,5,4,193,8,4,10,4,12,4,196,
        9,4,1,4,3,4,199,8,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,210,
        8,5,1,6,1,6,3,6,214,8,6,1,6,3,6,217,8,6,1,7,1,7,1,7,1,7,1,7,1,7,
        1,7,3,7,226,8,7,1,8,1,8,1,8,1,8,1,8,1,8,3,8,234,8,8,1,9,1,9,1,9,
        1,9,1,9,3,9,241,8,9,1,9,1,9,3,9,245,8,9,1,9,1,9,1,9,1,9,3,9,251,
        8,9,1,9,1,9,1,9,3,9,256,8,9,1,10,1,10,1,10,1,10,3,10,262,8,10,1,
        10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,12,1,12,3,12,274,8,12,1,
        13,1,13,1,14,1,14,5,14,280,8,14,10,14,12,14,283,9,14,1,14,1,14,1,
        15,1,15,1,15,1,15,1,16,1,16,1,16,5,16,294,8,16,10,16,12,16,297,9,
        16,1,16,3,16,300,8,16,1,17,1,17,1,17,3,17,305,8,17,1,17,1,17,1,18,
        1,18,1,18,1,18,5,18,313,8,18,10,18,12,18,316,9,18,1,19,1,19,1,19,
        1,19,1,19,1,19,3,19,324,8,19,1,20,3,20,327,8,20,1,20,1,20,3,20,331,
        8,20,1,20,3,20,334,8,20,1,20,1,20,3,20,338,8,20,1,20,3,20,341,8,
        20,1,20,3,20,344,8,20,1,20,3,20,347,8,20,1,20,3,20,350,8,20,1,20,
        1,20,3,20,354,8,20,1,20,1,20,3,20,358,8,20,1,20,3,20,361,8,20,1,
        20,3,20,364,8,20,1,20,3,20,367,8,20,1,20,1,20,3,20,371,8,20,1,20,
        3,20,374,8,20,1,21,1,21,1,21,1,22,1,22,1,22,1,22,3,22,383,8,22,1,
        23,1,23,1,23,1,24,3,24,389,8,24,1,24,1,24,1,24,1,24,1,25,1,25,1,
        25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,5,25,408,8,
        25,10,25,12,25,411,9,25,1,26,1,26,1,26,1,27,1,27,1,27,1,28,1,28,
        1,28,1,28,1,28,1,28,1,28,1,28,3,28,427,8,28,1,29,1,29,1,29,1,30,
        1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,3,32,444,
        8,32,1,32,1,32,1,32,1,32,3,32,450,8,32,1,32,1,32,1,32,1,32,3,32,
        456,8,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,3,32,467,8,
        32,3,32,469,8,32,1,33,1,33,1,33,1,34,1,34,1,34,1,35,1,35,1,35,3,
        35,480,8,35,1,35,3,35,483,8,35,1,35,1,35,1,35,1,35,3,35,489,8,35,
        1,35,1,35,1,35,1,35,1,35,1,35,3,35,497,8,35,1,35,1,35,1,35,1,35,
        5,35,503,8,35,10,35,12,35,506,9,35,1,36,3,36,509,8,36,1,36,1,36,
        1,36,3,36,514,8,36,1,36,3,36,517,8,36,1,36,3,36,520,8,36,1,36,1,
        36,3,36,524,8,36,1,36,1,36,3,36,528,8,36,1,36,3,36,531,8,36,3,36,
        533,8,36,1,36,3,36,536,8,36,1,36,1,36,3,36,540,8,36,1,36,1,36,3,
        36,544,8,36,1,36,3,36,547,8,36,3,36,549,8,36,3,36,551,8,36,1,37,
        1,37,1,37,3,37,556,8,37,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,
        1,38,3,38,567,8,38,1,39,1,39,1,39,1,39,3,39,573,8,39,1,40,1,40,1,
        40,5,40,578,8,40,10,40,12,40,581,9,40,1,41,1,41,3,41,585,8,41,1,
        41,1,41,3,41,589,8,41,1,41,1,41,3,41,593,8,41,1,42,1,42,1,42,1,42,
        3,42,599,8,42,3,42,601,8,42,1,43,1,43,1,43,5,43,606,8,43,10,43,12,
        43,609,9,43,1,44,1,44,1,44,1,44,1,45,3,45,616,8,45,1,45,3,45,619,
        8,45,1,45,3,45,622,8,45,1,46,1,46,1,46,1,46,1,47,1,47,1,47,1,47,
        1,48,1,48,1,48,1,49,1,49,1,49,1,49,1,49,1,49,3,49,641,8,49,1,50,
        1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,3,50,655,
        8,50,1,51,1,51,1,51,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,
        5,52,669,8,52,10,52,12,52,672,9,52,1,52,3,52,675,8,52,1,52,1,52,
        1,52,1,52,1,52,1,52,1,52,5,52,684,8,52,10,52,12,52,687,9,52,1,52,
        3,52,690,8,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,5,52,699,8,52,10,
        52,12,52,702,9,52,1,52,3,52,705,8,52,1,52,1,52,1,52,1,52,1,52,3,
        52,712,8,52,1,52,1,52,3,52,716,8,52,1,53,1,53,1,53,5,53,721,8,53,
        10,53,12,53,724,9,53,1,53,3,53,727,8,53,1,54,1,54,1,54,3,54,732,
        8,54,1,54,1,54,1,54,1,54,1,54,4,54,739,8,54,11,54,12,54,740,1,54,
        1,54,3,54,745,8,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,
        1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,
        3,54,769,8,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,
        1,54,1,54,1,54,1,54,1,54,3,54,786,8,54,1,54,1,54,1,54,1,54,3,54,
        792,8,54,1,54,3,54,795,8,54,1,54,3,54,798,8,54,1,54,1,54,1,54,1,
        54,1,54,1,54,1,54,1,54,3,54,808,8,54,1,54,1,54,1,54,1,54,3,54,814,
        8,54,1,54,3,54,817,8,54,1,54,3,54,820,8,54,1,54,1,54,1,54,1,54,1,
        54,1,54,3,54,828,8,54,1,54,3,54,831,8,54,1,54,1,54,3,54,835,8,54,
        1,54,3,54,838,8,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,
        1,54,1,54,1,54,3,54,852,8,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,
        1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,3,54,869,8,54,1,54,1,54,
        1,54,3,54,874,8,54,1,54,1,54,3,54,878,8,54,1,54,1,54,1,54,1,54,3,
        54,884,8,54,1,54,1,54,1,54,1,54,1,54,3,54,891,8,54,1,54,1,54,1,54,
        1,54,1,54,1,54,1,54,1,54,1,54,1,54,3,54,903,8,54,1,54,1,54,3,54,
        907,8,54,1,54,3,54,910,8,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,3,
        54,919,8,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,
        54,1,54,3,54,933,8,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,
        54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,
        54,1,54,1,54,1,54,3,54,960,8,54,1,54,1,54,1,54,1,54,1,54,1,54,3,
        54,968,8,54,5,54,970,8,54,10,54,12,54,973,9,54,1,55,1,55,1,55,5,
        55,978,8,55,10,55,12,55,981,9,55,1,55,3,55,984,8,55,1,56,1,56,3,
        56,988,8,56,1,57,1,57,1,57,1,57,5,57,994,8,57,10,57,12,57,997,9,
        57,1,57,3,57,1000,8,57,1,57,1,57,1,57,1,57,1,57,5,57,1007,8,57,10,
        57,12,57,1010,9,57,1,57,3,57,1013,8,57,3,57,1015,8,57,1,57,1,57,
        1,57,1,58,1,58,1,58,5,58,1023,8,58,10,58,12,58,1026,9,58,1,58,1,
        58,1,58,1,58,1,58,1,58,5,58,1034,8,58,10,58,12,58,1037,9,58,1,58,
        1,58,3,58,1041,8,58,1,58,1,58,1,58,1,58,1,58,3,58,1048,8,58,1,59,
        1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,3,59,1061,8,59,
        1,60,1,60,1,60,5,60,1066,8,60,10,60,12,60,1069,9,60,1,60,3,60,1072,
        8,60,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,3,61,1084,
        8,61,1,62,1,62,1,62,1,62,3,62,1090,8,62,1,62,3,62,1093,8,62,1,63,
        1,63,1,63,5,63,1098,8,63,10,63,12,63,1101,9,63,1,64,1,64,1,64,1,
        64,1,64,1,64,1,64,1,64,1,64,3,64,1112,8,64,1,64,1,64,1,64,1,64,3,
        64,1118,8,64,5,64,1120,8,64,10,64,12,64,1123,9,64,1,65,1,65,1,65,
        3,65,1128,8,65,1,65,1,65,1,66,1,66,1,66,3,66,1135,8,66,1,66,1,66,
        1,67,1,67,1,67,5,67,1142,8,67,10,67,12,67,1145,9,67,1,67,3,67,1148,
        8,67,1,68,1,68,1,69,1,69,1,69,1,69,1,69,1,69,3,69,1158,8,69,3,69,
        1160,8,69,1,70,3,70,1163,8,70,1,70,1,70,1,70,1,70,1,70,1,70,3,70,
        1171,8,70,1,71,1,71,1,71,3,71,1176,8,71,1,72,1,72,1,73,1,73,1,74,
        1,74,1,75,1,75,3,75,1186,8,75,1,76,1,76,1,76,3,76,1191,8,76,1,77,
        1,77,1,77,1,77,1,78,1,78,1,78,1,78,1,79,1,79,3,79,1203,8,79,1,80,
        1,80,5,80,1207,8,80,10,80,12,80,1210,9,80,1,80,1,80,1,81,1,81,1,
        81,1,81,1,81,3,81,1219,8,81,1,82,1,82,5,82,1223,8,82,10,82,12,82,
        1226,9,82,1,82,1,82,1,83,1,83,1,83,1,83,1,83,3,83,1235,8,83,1,83,
        0,3,70,108,128,84,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,
        34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,
        78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,
        116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,
        148,150,152,154,156,158,160,162,164,166,0,16,2,0,17,17,72,72,2,0,
        42,42,49,49,3,0,1,1,4,4,8,8,4,0,1,1,3,4,8,8,78,78,2,0,49,49,71,71,
        2,0,1,1,4,4,2,0,7,7,21,22,2,0,28,28,47,47,2,0,69,69,74,74,3,0,10,
        10,48,48,87,87,2,0,39,39,51,51,1,0,103,104,2,0,114,114,134,134,7,
        0,20,20,36,36,53,54,68,68,76,76,93,93,99,99,12,0,1,19,21,28,30,35,
        37,40,42,49,51,52,56,56,58,67,69,75,77,92,94,95,97,98,4,0,19,19,
        28,28,37,37,46,46,1394,0,171,1,0,0,0,2,178,1,0,0,0,4,180,1,0,0,0,
        6,182,1,0,0,0,8,189,1,0,0,0,10,209,1,0,0,0,12,211,1,0,0,0,14,218,
        1,0,0,0,16,227,1,0,0,0,18,235,1,0,0,0,20,257,1,0,0,0,22,266,1,0,
        0,0,24,271,1,0,0,0,26,275,1,0,0,0,28,277,1,0,0,0,30,286,1,0,0,0,
        32,290,1,0,0,0,34,304,1,0,0,0,36,308,1,0,0,0,38,323,1,0,0,0,40,326,
        1,0,0,0,42,375,1,0,0,0,44,378,1,0,0,0,46,384,1,0,0,0,48,388,1,0,
        0,0,50,394,1,0,0,0,52,412,1,0,0,0,54,415,1,0,0,0,56,418,1,0,0,0,
        58,428,1,0,0,0,60,431,1,0,0,0,62,435,1,0,0,0,64,468,1,0,0,0,66,470,
        1,0,0,0,68,473,1,0,0,0,70,488,1,0,0,0,72,550,1,0,0,0,74,555,1,0,
        0,0,76,566,1,0,0,0,78,568,1,0,0,0,80,574,1,0,0,0,82,582,1,0,0,0,
        84,600,1,0,0,0,86,602,1,0,0,0,88,610,1,0,0,0,90,615,1,0,0,0,92,623,
        1,0,0,0,94,627,1,0,0,0,96,631,1,0,0,0,98,640,1,0,0,0,100,654,1,0,
        0,0,102,656,1,0,0,0,104,715,1,0,0,0,106,717,1,0,0,0,108,877,1,0,
        0,0,110,974,1,0,0,0,112,987,1,0,0,0,114,1014,1,0,0,0,116,1047,1,
        0,0,0,118,1060,1,0,0,0,120,1062,1,0,0,0,122,1083,1,0,0,0,124,1092,
        1,0,0,0,126,1094,1,0,0,0,128,1111,1,0,0,0,130,1124,1,0,0,0,132,1134,
        1,0,0,0,134,1138,1,0,0,0,136,1149,1,0,0,0,138,1159,1,0,0,0,140,1162,
        1,0,0,0,142,1175,1,0,0,0,144,1177,1,0,0,0,146,1179,1,0,0,0,148,1181,
        1,0,0,0,150,1185,1,0,0,0,152,1190,1,0,0,0,154,1192,1,0,0,0,156,1196,
        1,0,0,0,158,1202,1,0,0,0,160,1204,1,0,0,0,162,1218,1,0,0,0,164,1220,
        1,0,0,0,166,1234,1,0,0,0,168,170,3,2,1,0,169,168,1,0,0,0,170,173,
        1,0,0,0,171,169,1,0,0,0,171,172,1,0,0,0,172,174,1,0,0,0,173,171,
        1,0,0,0,174,175,5,0,0,1,175,1,1,0,0,0,176,179,3,6,3,0,177,179,3,
        10,5,0,178,176,1,0,0,0,178,177,1,0,0,0,179,3,1,0,0,0,180,181,3,108,
        54,0,181,5,1,0,0,0,182,183,5,50,0,0,183,187,3,152,76,0,184,185,5,
        111,0,0,185,186,5,118,0,0,186,188,3,4,2,0,187,184,1,0,0,0,187,188,
        1,0,0,0,188,7,1,0,0,0,189,194,3,152,76,0,190,191,5,112,0,0,191,193,
        3,152,76,0,192,190,1,0,0,0,193,196,1,0,0,0,194,192,1,0,0,0,194,195,
        1,0,0,0,195,198,1,0,0,0,196,194,1,0,0,0,197,199,5,112,0,0,198,197,
        1,0,0,0,198,199,1,0,0,0,199,9,1,0,0,0,200,210,3,12,6,0,201,210,3,
        14,7,0,202,210,3,16,8,0,203,210,3,18,9,0,204,210,3,20,10,0,205,210,
        3,22,11,0,206,210,3,28,14,0,207,210,3,24,12,0,208,210,3,26,13,0,
        209,200,1,0,0,0,209,201,1,0,0,0,209,202,1,0,0,0,209,203,1,0,0,0,
        209,204,1,0,0,0,209,205,1,0,0,0,209,206,1,0,0,0,209,207,1,0,0,0,
        209,208,1,0,0,0,210,11,1,0,0,0,211,213,5,70,0,0,212,214,3,4,2,0,
        213,212,1,0,0,0,213,214,1,0,0,0,214,216,1,0,0,0,215,217,5,145,0,
        0,216,215,1,0,0,0,216,217,1,0,0,0,217,13,1,0,0,0,218,219,5,38,0,
        0,219,220,5,126,0,0,220,221,3,4,2,0,221,222,5,144,0,0,222,225,3,
        10,5,0,223,224,5,24,0,0,224,226,3,10,5,0,225,223,1,0,0,0,225,226,
        1,0,0,0,226,15,1,0,0,0,227,228,5,96,0,0,228,229,5,126,0,0,229,230,
        3,4,2,0,230,231,5,144,0,0,231,233,3,10,5,0,232,234,5,145,0,0,233,
        232,1,0,0,0,233,234,1,0,0,0,234,17,1,0,0,0,235,236,5,31,0,0,236,
        240,5,126,0,0,237,241,3,6,3,0,238,241,3,22,11,0,239,241,3,4,2,0,
        240,237,1,0,0,0,240,238,1,0,0,0,240,239,1,0,0,0,240,241,1,0,0,0,
        241,242,1,0,0,0,242,244,5,145,0,0,243,245,3,4,2,0,244,243,1,0,0,
        0,244,245,1,0,0,0,245,246,1,0,0,0,246,250,5,145,0,0,247,251,3,6,
        3,0,248,251,3,22,11,0,249,251,3,4,2,0,250,247,1,0,0,0,250,248,1,
        0,0,0,250,249,1,0,0,0,250,251,1,0,0,0,251,252,1,0,0,0,252,253,5,
        144,0,0,253,255,3,10,5,0,254,256,5,145,0,0,255,254,1,0,0,0,255,256,
        1,0,0,0,256,19,1,0,0,0,257,258,5,29,0,0,258,259,3,152,76,0,259,261,
        5,126,0,0,260,262,3,8,4,0,261,260,1,0,0,0,261,262,1,0,0,0,262,263,
        1,0,0,0,263,264,5,144,0,0,264,265,3,28,14,0,265,21,1,0,0,0,266,267,
        3,4,2,0,267,268,5,111,0,0,268,269,5,118,0,0,269,270,3,4,2,0,270,
        23,1,0,0,0,271,273,3,4,2,0,272,274,5,145,0,0,273,272,1,0,0,0,273,
        274,1,0,0,0,274,25,1,0,0,0,275,276,5,145,0,0,276,27,1,0,0,0,277,
        281,5,124,0,0,278,280,3,2,1,0,279,278,1,0,0,0,280,283,1,0,0,0,281,
        279,1,0,0,0,281,282,1,0,0,0,282,284,1,0,0,0,283,281,1,0,0,0,284,
        285,5,142,0,0,285,29,1,0,0,0,286,287,3,4,2,0,287,288,5,111,0,0,288,
        289,3,4,2,0,289,31,1,0,0,0,290,295,3,30,15,0,291,292,5,112,0,0,292,
        294,3,30,15,0,293,291,1,0,0,0,294,297,1,0,0,0,295,293,1,0,0,0,295,
        296,1,0,0,0,296,299,1,0,0,0,297,295,1,0,0,0,298,300,5,112,0,0,299,
        298,1,0,0,0,299,300,1,0,0,0,300,33,1,0,0,0,301,305,3,36,18,0,302,
        305,3,40,20,0,303,305,3,116,58,0,304,301,1,0,0,0,304,302,1,0,0,0,
        304,303,1,0,0,0,305,306,1,0,0,0,306,307,5,0,0,1,307,35,1,0,0,0,308,
        314,3,38,19,0,309,310,5,91,0,0,310,311,5,1,0,0,311,313,3,38,19,0,
        312,309,1,0,0,0,313,316,1,0,0,0,314,312,1,0,0,0,314,315,1,0,0,0,
        315,37,1,0,0,0,316,314,1,0,0,0,317,324,3,40,20,0,318,319,5,126,0,
        0,319,320,3,36,18,0,320,321,5,144,0,0,321,324,1,0,0,0,322,324,3,
        156,78,0,323,317,1,0,0,0,323,318,1,0,0,0,323,322,1,0,0,0,324,39,
        1,0,0,0,325,327,3,42,21,0,326,325,1,0,0,0,326,327,1,0,0,0,327,328,
        1,0,0,0,328,330,5,77,0,0,329,331,5,23,0,0,330,329,1,0,0,0,330,331,
        1,0,0,0,331,333,1,0,0,0,332,334,3,44,22,0,333,332,1,0,0,0,333,334,
        1,0,0,0,334,335,1,0,0,0,335,337,3,106,53,0,336,338,3,46,23,0,337,
        336,1,0,0,0,337,338,1,0,0,0,338,340,1,0,0,0,339,341,3,48,24,0,340,
        339,1,0,0,0,340,341,1,0,0,0,341,343,1,0,0,0,342,344,3,52,26,0,343,
        342,1,0,0,0,343,344,1,0,0,0,344,346,1,0,0,0,345,347,3,54,27,0,346,
        345,1,0,0,0,346,347,1,0,0,0,347,349,1,0,0,0,348,350,3,56,28,0,349,
        348,1,0,0,0,349,350,1,0,0,0,350,353,1,0,0,0,351,352,5,98,0,0,352,
        354,7,0,0,0,353,351,1,0,0,0,353,354,1,0,0,0,354,357,1,0,0,0,355,
        356,5,98,0,0,356,358,5,86,0,0,357,355,1,0,0,0,357,358,1,0,0,0,358,
        360,1,0,0,0,359,361,3,58,29,0,360,359,1,0,0,0,360,361,1,0,0,0,361,
        363,1,0,0,0,362,364,3,50,25,0,363,362,1,0,0,0,363,364,1,0,0,0,364,
        366,1,0,0,0,365,367,3,60,30,0,366,365,1,0,0,0,366,367,1,0,0,0,367,
        370,1,0,0,0,368,371,3,64,32,0,369,371,3,66,33,0,370,368,1,0,0,0,
        370,369,1,0,0,0,370,371,1,0,0,0,371,373,1,0,0,0,372,374,3,68,34,
        0,373,372,1,0,0,0,373,374,1,0,0,0,374,41,1,0,0,0,375,376,5,98,0,
        0,376,377,3,120,60,0,377,43,1,0,0,0,378,379,5,85,0,0,379,382,5,104,
        0,0,380,381,5,98,0,0,381,383,5,82,0,0,382,380,1,0,0,0,382,383,1,
        0,0,0,383,45,1,0,0,0,384,385,5,32,0,0,385,386,3,70,35,0,386,47,1,
        0,0,0,387,389,7,1,0,0,388,387,1,0,0,0,388,389,1,0,0,0,389,390,1,
        0,0,0,390,391,5,5,0,0,391,392,5,45,0,0,392,393,3,106,53,0,393,49,
        1,0,0,0,394,395,5,97,0,0,395,396,3,152,76,0,396,397,5,6,0,0,397,
        398,5,126,0,0,398,399,3,90,45,0,399,409,5,144,0,0,400,401,5,112,
        0,0,401,402,3,152,76,0,402,403,5,6,0,0,403,404,5,126,0,0,404,405,
        3,90,45,0,405,406,5,144,0,0,406,408,1,0,0,0,407,400,1,0,0,0,408,
        411,1,0,0,0,409,407,1,0,0,0,409,410,1,0,0,0,410,51,1,0,0,0,411,409,
        1,0,0,0,412,413,5,67,0,0,413,414,3,108,54,0,414,53,1,0,0,0,415,416,
        5,95,0,0,416,417,3,108,54,0,417,55,1,0,0,0,418,419,5,34,0,0,419,
        426,5,11,0,0,420,421,7,0,0,0,421,422,5,126,0,0,422,423,3,106,53,
        0,423,424,5,144,0,0,424,427,1,0,0,0,425,427,3,106,53,0,426,420,1,
        0,0,0,426,425,1,0,0,0,427,57,1,0,0,0,428,429,5,35,0,0,429,430,3,
        108,54,0,430,59,1,0,0,0,431,432,5,62,0,0,432,433,5,11,0,0,433,434,
        3,80,40,0,434,61,1,0,0,0,435,436,5,62,0,0,436,437,5,11,0,0,437,438,
        3,106,53,0,438,63,1,0,0,0,439,440,5,52,0,0,440,443,3,108,54,0,441,
        442,5,112,0,0,442,444,3,108,54,0,443,441,1,0,0,0,443,444,1,0,0,0,
        444,449,1,0,0,0,445,446,5,98,0,0,446,450,5,82,0,0,447,448,5,11,0,
        0,448,450,3,106,53,0,449,445,1,0,0,0,449,447,1,0,0,0,449,450,1,0,
        0,0,450,469,1,0,0,0,451,452,5,52,0,0,452,455,3,108,54,0,453,454,
        5,98,0,0,454,456,5,82,0,0,455,453,1,0,0,0,455,456,1,0,0,0,456,457,
        1,0,0,0,457,458,5,59,0,0,458,459,3,108,54,0,459,469,1,0,0,0,460,
        461,5,52,0,0,461,462,3,108,54,0,462,463,5,59,0,0,463,466,3,108,54,
        0,464,465,5,11,0,0,465,467,3,106,53,0,466,464,1,0,0,0,466,467,1,
        0,0,0,467,469,1,0,0,0,468,439,1,0,0,0,468,451,1,0,0,0,468,460,1,
        0,0,0,469,65,1,0,0,0,470,471,5,59,0,0,471,472,3,108,54,0,472,67,
        1,0,0,0,473,474,5,79,0,0,474,475,3,86,43,0,475,69,1,0,0,0,476,477,
        6,35,-1,0,477,479,3,128,64,0,478,480,5,27,0,0,479,478,1,0,0,0,479,
        480,1,0,0,0,480,482,1,0,0,0,481,483,3,78,39,0,482,481,1,0,0,0,482,
        483,1,0,0,0,483,489,1,0,0,0,484,485,5,126,0,0,485,486,3,70,35,0,
        486,487,5,144,0,0,487,489,1,0,0,0,488,476,1,0,0,0,488,484,1,0,0,
        0,489,504,1,0,0,0,490,491,10,3,0,0,491,492,3,74,37,0,492,493,3,70,
        35,4,493,503,1,0,0,0,494,496,10,4,0,0,495,497,3,72,36,0,496,495,
        1,0,0,0,496,497,1,0,0,0,497,498,1,0,0,0,498,499,5,45,0,0,499,500,
        3,70,35,0,500,501,3,76,38,0,501,503,1,0,0,0,502,490,1,0,0,0,502,
        494,1,0,0,0,503,506,1,0,0,0,504,502,1,0,0,0,504,505,1,0,0,0,505,
        71,1,0,0,0,506,504,1,0,0,0,507,509,7,2,0,0,508,507,1,0,0,0,508,509,
        1,0,0,0,509,510,1,0,0,0,510,517,5,42,0,0,511,513,5,42,0,0,512,514,
        7,2,0,0,513,512,1,0,0,0,513,514,1,0,0,0,514,517,1,0,0,0,515,517,
        7,2,0,0,516,508,1,0,0,0,516,511,1,0,0,0,516,515,1,0,0,0,517,551,
        1,0,0,0,518,520,7,3,0,0,519,518,1,0,0,0,519,520,1,0,0,0,520,521,
        1,0,0,0,521,523,7,4,0,0,522,524,5,63,0,0,523,522,1,0,0,0,523,524,
        1,0,0,0,524,533,1,0,0,0,525,527,7,4,0,0,526,528,5,63,0,0,527,526,
        1,0,0,0,527,528,1,0,0,0,528,530,1,0,0,0,529,531,7,3,0,0,530,529,
        1,0,0,0,530,531,1,0,0,0,531,533,1,0,0,0,532,519,1,0,0,0,532,525,
        1,0,0,0,533,551,1,0,0,0,534,536,7,5,0,0,535,534,1,0,0,0,535,536,
        1,0,0,0,536,537,1,0,0,0,537,539,5,33,0,0,538,540,5,63,0,0,539,538,
        1,0,0,0,539,540,1,0,0,0,540,549,1,0,0,0,541,543,5,33,0,0,542,544,
        5,63,0,0,543,542,1,0,0,0,543,544,1,0,0,0,544,546,1,0,0,0,545,547,
        7,5,0,0,546,545,1,0,0,0,546,547,1,0,0,0,547,549,1,0,0,0,548,535,
        1,0,0,0,548,541,1,0,0,0,549,551,1,0,0,0,550,516,1,0,0,0,550,532,
        1,0,0,0,550,548,1,0,0,0,551,73,1,0,0,0,552,553,5,16,0,0,553,556,
        5,45,0,0,554,556,5,112,0,0,555,552,1,0,0,0,555,554,1,0,0,0,556,75,
        1,0,0,0,557,558,5,60,0,0,558,567,3,106,53,0,559,560,5,92,0,0,560,
        561,5,126,0,0,561,562,3,106,53,0,562,563,5,144,0,0,563,567,1,0,0,
        0,564,565,5,92,0,0,565,567,3,106,53,0,566,557,1,0,0,0,566,559,1,
        0,0,0,566,564,1,0,0,0,567,77,1,0,0,0,568,569,5,75,0,0,569,572,3,
        84,42,0,570,571,5,59,0,0,571,573,3,84,42,0,572,570,1,0,0,0,572,573,
        1,0,0,0,573,79,1,0,0,0,574,579,3,82,41,0,575,576,5,112,0,0,576,578,
        3,82,41,0,577,575,1,0,0,0,578,581,1,0,0,0,579,577,1,0,0,0,579,580,
        1,0,0,0,580,81,1,0,0,0,581,579,1,0,0,0,582,584,3,108,54,0,583,585,
        7,6,0,0,584,583,1,0,0,0,584,585,1,0,0,0,585,588,1,0,0,0,586,587,
        5,58,0,0,587,589,7,7,0,0,588,586,1,0,0,0,588,589,1,0,0,0,589,592,
        1,0,0,0,590,591,5,15,0,0,591,593,5,106,0,0,592,590,1,0,0,0,592,593,
        1,0,0,0,593,83,1,0,0,0,594,601,3,156,78,0,595,598,3,140,70,0,596,
        597,5,146,0,0,597,599,3,140,70,0,598,596,1,0,0,0,598,599,1,0,0,0,
        599,601,1,0,0,0,600,594,1,0,0,0,600,595,1,0,0,0,601,85,1,0,0,0,602,
        607,3,88,44,0,603,604,5,112,0,0,604,606,3,88,44,0,605,603,1,0,0,
        0,606,609,1,0,0,0,607,605,1,0,0,0,607,608,1,0,0,0,608,87,1,0,0,0,
        609,607,1,0,0,0,610,611,3,152,76,0,611,612,5,118,0,0,612,613,3,142,
        71,0,613,89,1,0,0,0,614,616,3,92,46,0,615,614,1,0,0,0,615,616,1,
        0,0,0,616,618,1,0,0,0,617,619,3,94,47,0,618,617,1,0,0,0,618,619,
        1,0,0,0,619,621,1,0,0,0,620,622,3,96,48,0,621,620,1,0,0,0,621,622,
        1,0,0,0,622,91,1,0,0,0,623,624,5,65,0,0,624,625,5,11,0,0,625,626,
        3,106,53,0,626,93,1,0,0,0,627,628,5,62,0,0,628,629,5,11,0,0,629,
        630,3,80,40,0,630,95,1,0,0,0,631,632,7,8,0,0,632,633,3,98,49,0,633,
        97,1,0,0,0,634,641,3,100,50,0,635,636,5,9,0,0,636,637,3,100,50,0,
        637,638,5,2,0,0,638,639,3,100,50,0,639,641,1,0,0,0,640,634,1,0,0,
        0,640,635,1,0,0,0,641,99,1,0,0,0,642,643,5,18,0,0,643,655,5,73,0,
        0,644,645,5,90,0,0,645,655,5,66,0,0,646,647,5,90,0,0,647,655,5,30,
        0,0,648,649,3,140,70,0,649,650,5,66,0,0,650,655,1,0,0,0,651,652,
        3,140,70,0,652,653,5,30,0,0,653,655,1,0,0,0,654,642,1,0,0,0,654,
        644,1,0,0,0,654,646,1,0,0,0,654,648,1,0,0,0,654,651,1,0,0,0,655,
        101,1,0,0,0,656,657,3,108,54,0,657,658,5,0,0,1,658,103,1,0,0,0,659,
        716,3,152,76,0,660,661,3,152,76,0,661,662,5,126,0,0,662,663,3,152,
        76,0,663,670,3,104,52,0,664,665,5,112,0,0,665,666,3,152,76,0,666,
        667,3,104,52,0,667,669,1,0,0,0,668,664,1,0,0,0,669,672,1,0,0,0,670,
        668,1,0,0,0,670,671,1,0,0,0,671,674,1,0,0,0,672,670,1,0,0,0,673,
        675,5,112,0,0,674,673,1,0,0,0,674,675,1,0,0,0,675,676,1,0,0,0,676,
        677,5,144,0,0,677,716,1,0,0,0,678,679,3,152,76,0,679,680,5,126,0,
        0,680,685,3,154,77,0,681,682,5,112,0,0,682,684,3,154,77,0,683,681,
        1,0,0,0,684,687,1,0,0,0,685,683,1,0,0,0,685,686,1,0,0,0,686,689,
        1,0,0,0,687,685,1,0,0,0,688,690,5,112,0,0,689,688,1,0,0,0,689,690,
        1,0,0,0,690,691,1,0,0,0,691,692,5,144,0,0,692,716,1,0,0,0,693,694,
        3,152,76,0,694,695,5,126,0,0,695,700,3,104,52,0,696,697,5,112,0,
        0,697,699,3,104,52,0,698,696,1,0,0,0,699,702,1,0,0,0,700,698,1,0,
        0,0,700,701,1,0,0,0,701,704,1,0,0,0,702,700,1,0,0,0,703,705,5,112,
        0,0,704,703,1,0,0,0,704,705,1,0,0,0,705,706,1,0,0,0,706,707,5,144,
        0,0,707,716,1,0,0,0,708,709,3,152,76,0,709,711,5,126,0,0,710,712,
        3,106,53,0,711,710,1,0,0,0,711,712,1,0,0,0,712,713,1,0,0,0,713,714,
        5,144,0,0,714,716,1,0,0,0,715,659,1,0,0,0,715,660,1,0,0,0,715,678,
        1,0,0,0,715,693,1,0,0,0,715,708,1,0,0,0,716,105,1,0,0,0,717,722,
        3,108,54,0,718,719,5,112,0,0,719,721,3,108,54,0,720,718,1,0,0,0,
        721,724,1,0,0,0,722,720,1,0,0,0,722,723,1,0,0,0,723,726,1,0,0,0,
        724,722,1,0,0,0,725,727,5,112,0,0,726,725,1,0,0,0,726,727,1,0,0,
        0,727,107,1,0,0,0,728,729,6,54,-1,0,729,731,5,12,0,0,730,732,3,108,
        54,0,731,730,1,0,0,0,731,732,1,0,0,0,732,738,1,0,0,0,733,734,5,94,
        0,0,734,735,3,108,54,0,735,736,5,81,0,0,736,737,3,108,54,0,737,739,
        1,0,0,0,738,733,1,0,0,0,739,740,1,0,0,0,740,738,1,0,0,0,740,741,
        1,0,0,0,741,744,1,0,0,0,742,743,5,24,0,0,743,745,3,108,54,0,744,
        742,1,0,0,0,744,745,1,0,0,0,745,746,1,0,0,0,746,747,5,25,0,0,747,
        878,1,0,0,0,748,749,5,13,0,0,749,750,5,126,0,0,750,751,3,108,54,
        0,751,752,5,6,0,0,752,753,3,104,52,0,753,754,5,144,0,0,754,878,1,
        0,0,0,755,756,5,19,0,0,756,878,5,106,0,0,757,758,5,43,0,0,758,759,
        3,108,54,0,759,760,3,144,72,0,760,878,1,0,0,0,761,762,5,80,0,0,762,
        763,5,126,0,0,763,764,3,108,54,0,764,765,5,32,0,0,765,768,3,108,
        54,0,766,767,5,31,0,0,767,769,3,108,54,0,768,766,1,0,0,0,768,769,
        1,0,0,0,769,770,1,0,0,0,770,771,5,144,0,0,771,878,1,0,0,0,772,773,
        5,83,0,0,773,878,5,106,0,0,774,775,5,88,0,0,775,776,5,126,0,0,776,
        777,7,9,0,0,777,778,3,158,79,0,778,779,5,32,0,0,779,780,3,108,54,
        0,780,781,5,144,0,0,781,878,1,0,0,0,782,783,3,152,76,0,783,785,5,
        126,0,0,784,786,3,106,53,0,785,784,1,0,0,0,785,786,1,0,0,0,786,787,
        1,0,0,0,787,788,5,144,0,0,788,797,1,0,0,0,789,791,5,126,0,0,790,
        792,5,23,0,0,791,790,1,0,0,0,791,792,1,0,0,0,792,794,1,0,0,0,793,
        795,3,110,55,0,794,793,1,0,0,0,794,795,1,0,0,0,795,796,1,0,0,0,796,
        798,5,144,0,0,797,789,1,0,0,0,797,798,1,0,0,0,798,799,1,0,0,0,799,
        800,5,64,0,0,800,801,5,126,0,0,801,802,3,90,45,0,802,803,5,144,0,
        0,803,878,1,0,0,0,804,805,3,152,76,0,805,807,5,126,0,0,806,808,3,
        106,53,0,807,806,1,0,0,0,807,808,1,0,0,0,808,809,1,0,0,0,809,810,
        5,144,0,0,810,819,1,0,0,0,811,813,5,126,0,0,812,814,5,23,0,0,813,
        812,1,0,0,0,813,814,1,0,0,0,814,816,1,0,0,0,815,817,3,110,55,0,816,
        815,1,0,0,0,816,817,1,0,0,0,817,818,1,0,0,0,818,820,5,144,0,0,819,
        811,1,0,0,0,819,820,1,0,0,0,820,821,1,0,0,0,821,822,5,64,0,0,822,
        823,3,152,76,0,823,878,1,0,0,0,824,830,3,152,76,0,825,827,5,126,
        0,0,826,828,3,106,53,0,827,826,1,0,0,0,827,828,1,0,0,0,828,829,1,
        0,0,0,829,831,5,144,0,0,830,825,1,0,0,0,830,831,1,0,0,0,831,832,
        1,0,0,0,832,834,5,126,0,0,833,835,5,23,0,0,834,833,1,0,0,0,834,835,
        1,0,0,0,835,837,1,0,0,0,836,838,3,110,55,0,837,836,1,0,0,0,837,838,
        1,0,0,0,838,839,1,0,0,0,839,840,5,144,0,0,840,878,1,0,0,0,841,878,
        3,116,58,0,842,878,3,160,80,0,843,878,3,142,71,0,844,845,5,114,0,
        0,845,878,3,108,54,19,846,847,5,56,0,0,847,878,3,108,54,13,848,849,
        3,132,66,0,849,850,5,116,0,0,850,852,1,0,0,0,851,848,1,0,0,0,851,
        852,1,0,0,0,852,853,1,0,0,0,853,878,5,108,0,0,854,855,5,126,0,0,
        855,856,3,36,18,0,856,857,5,144,0,0,857,878,1,0,0,0,858,859,5,126,
        0,0,859,860,3,108,54,0,860,861,5,144,0,0,861,878,1,0,0,0,862,863,
        5,126,0,0,863,864,3,106,53,0,864,865,5,144,0,0,865,878,1,0,0,0,866,
        868,5,125,0,0,867,869,3,106,53,0,868,867,1,0,0,0,868,869,1,0,0,0,
        869,870,1,0,0,0,870,878,5,143,0,0,871,873,5,124,0,0,872,874,3,32,
        16,0,873,872,1,0,0,0,873,874,1,0,0,0,874,875,1,0,0,0,875,878,5,142,
        0,0,876,878,3,124,62,0,877,728,1,0,0,0,877,748,1,0,0,0,877,755,1,
        0,0,0,877,757,1,0,0,0,877,761,1,0,0,0,877,772,1,0,0,0,877,774,1,
        0,0,0,877,782,1,0,0,0,877,804,1,0,0,0,877,824,1,0,0,0,877,841,1,
        0,0,0,877,842,1,0,0,0,877,843,1,0,0,0,877,844,1,0,0,0,877,846,1,
        0,0,0,877,851,1,0,0,0,877,854,1,0,0,0,877,858,1,0,0,0,877,862,1,
        0,0,0,877,866,1,0,0,0,877,871,1,0,0,0,877,876,1,0,0,0,878,971,1,
        0,0,0,879,883,10,18,0,0,880,884,5,108,0,0,881,884,5,146,0,0,882,
        884,5,133,0,0,883,880,1,0,0,0,883,881,1,0,0,0,883,882,1,0,0,0,884,
        885,1,0,0,0,885,970,3,108,54,19,886,890,10,17,0,0,887,891,5,134,
        0,0,888,891,5,114,0,0,889,891,5,113,0,0,890,887,1,0,0,0,890,888,
        1,0,0,0,890,889,1,0,0,0,891,892,1,0,0,0,892,970,3,108,54,18,893,
        918,10,16,0,0,894,919,5,117,0,0,895,919,5,118,0,0,896,919,5,129,
        0,0,897,919,5,127,0,0,898,919,5,128,0,0,899,919,5,119,0,0,900,919,
        5,120,0,0,901,903,5,56,0,0,902,901,1,0,0,0,902,903,1,0,0,0,903,904,
        1,0,0,0,904,906,5,40,0,0,905,907,5,14,0,0,906,905,1,0,0,0,906,907,
        1,0,0,0,907,919,1,0,0,0,908,910,5,56,0,0,909,908,1,0,0,0,909,910,
        1,0,0,0,910,911,1,0,0,0,911,919,7,10,0,0,912,919,5,140,0,0,913,919,
        5,141,0,0,914,919,5,131,0,0,915,919,5,122,0,0,916,919,5,123,0,0,
        917,919,5,130,0,0,918,894,1,0,0,0,918,895,1,0,0,0,918,896,1,0,0,
        0,918,897,1,0,0,0,918,898,1,0,0,0,918,899,1,0,0,0,918,900,1,0,0,
        0,918,902,1,0,0,0,918,909,1,0,0,0,918,912,1,0,0,0,918,913,1,0,0,
        0,918,914,1,0,0,0,918,915,1,0,0,0,918,916,1,0,0,0,918,917,1,0,0,
        0,919,920,1,0,0,0,920,970,3,108,54,17,921,922,10,14,0,0,922,923,
        5,132,0,0,923,970,3,108,54,15,924,925,10,12,0,0,925,926,5,2,0,0,
        926,970,3,108,54,13,927,928,10,11,0,0,928,929,5,61,0,0,929,970,3,
        108,54,12,930,932,10,10,0,0,931,933,5,56,0,0,932,931,1,0,0,0,932,
        933,1,0,0,0,933,934,1,0,0,0,934,935,5,9,0,0,935,936,3,108,54,0,936,
        937,5,2,0,0,937,938,3,108,54,11,938,970,1,0,0,0,939,940,10,9,0,0,
        940,941,5,135,0,0,941,942,3,108,54,0,942,943,5,111,0,0,943,944,3,
        108,54,9,944,970,1,0,0,0,945,946,10,22,0,0,946,947,5,125,0,0,947,
        948,3,108,54,0,948,949,5,143,0,0,949,970,1,0,0,0,950,951,10,21,0,
        0,951,952,5,116,0,0,952,970,5,104,0,0,953,954,10,20,0,0,954,955,
        5,116,0,0,955,970,3,152,76,0,956,957,10,15,0,0,957,959,5,44,0,0,
        958,960,5,56,0,0,959,958,1,0,0,0,959,960,1,0,0,0,960,961,1,0,0,0,
        961,970,5,57,0,0,962,967,10,8,0,0,963,964,5,6,0,0,964,968,3,152,
        76,0,965,966,5,6,0,0,966,968,5,106,0,0,967,963,1,0,0,0,967,965,1,
        0,0,0,968,970,1,0,0,0,969,879,1,0,0,0,969,886,1,0,0,0,969,893,1,
        0,0,0,969,921,1,0,0,0,969,924,1,0,0,0,969,927,1,0,0,0,969,930,1,
        0,0,0,969,939,1,0,0,0,969,945,1,0,0,0,969,950,1,0,0,0,969,953,1,
        0,0,0,969,956,1,0,0,0,969,962,1,0,0,0,970,973,1,0,0,0,971,969,1,
        0,0,0,971,972,1,0,0,0,972,109,1,0,0,0,973,971,1,0,0,0,974,979,3,
        112,56,0,975,976,5,112,0,0,976,978,3,112,56,0,977,975,1,0,0,0,978,
        981,1,0,0,0,979,977,1,0,0,0,979,980,1,0,0,0,980,983,1,0,0,0,981,
        979,1,0,0,0,982,984,5,112,0,0,983,982,1,0,0,0,983,984,1,0,0,0,984,
        111,1,0,0,0,985,988,3,114,57,0,986,988,3,108,54,0,987,985,1,0,0,
        0,987,986,1,0,0,0,988,113,1,0,0,0,989,990,5,126,0,0,990,995,3,152,
        76,0,991,992,5,112,0,0,992,994,3,152,76,0,993,991,1,0,0,0,994,997,
        1,0,0,0,995,993,1,0,0,0,995,996,1,0,0,0,996,999,1,0,0,0,997,995,
        1,0,0,0,998,1000,5,112,0,0,999,998,1,0,0,0,999,1000,1,0,0,0,1000,
        1001,1,0,0,0,1001,1002,5,144,0,0,1002,1015,1,0,0,0,1003,1008,3,152,
        76,0,1004,1005,5,112,0,0,1005,1007,3,152,76,0,1006,1004,1,0,0,0,
        1007,1010,1,0,0,0,1008,1006,1,0,0,0,1008,1009,1,0,0,0,1009,1012,
        1,0,0,0,1010,1008,1,0,0,0,1011,1013,5,112,0,0,1012,1011,1,0,0,0,
        1012,1013,1,0,0,0,1013,1015,1,0,0,0,1014,989,1,0,0,0,1014,1003,1,
        0,0,0,1015,1016,1,0,0,0,1016,1017,5,107,0,0,1017,1018,3,108,54,0,
        1018,115,1,0,0,0,1019,1020,5,128,0,0,1020,1024,3,152,76,0,1021,1023,
        3,118,59,0,1022,1021,1,0,0,0,1023,1026,1,0,0,0,1024,1022,1,0,0,0,
        1024,1025,1,0,0,0,1025,1027,1,0,0,0,1026,1024,1,0,0,0,1027,1028,
        5,146,0,0,1028,1029,5,120,0,0,1029,1048,1,0,0,0,1030,1031,5,128,
        0,0,1031,1035,3,152,76,0,1032,1034,3,118,59,0,1033,1032,1,0,0,0,
        1034,1037,1,0,0,0,1035,1033,1,0,0,0,1035,1036,1,0,0,0,1036,1038,
        1,0,0,0,1037,1035,1,0,0,0,1038,1040,5,120,0,0,1039,1041,3,116,58,
        0,1040,1039,1,0,0,0,1040,1041,1,0,0,0,1041,1042,1,0,0,0,1042,1043,
        5,128,0,0,1043,1044,5,146,0,0,1044,1045,3,152,76,0,1045,1046,5,120,
        0,0,1046,1048,1,0,0,0,1047,1019,1,0,0,0,1047,1030,1,0,0,0,1048,117,
        1,0,0,0,1049,1050,3,152,76,0,1050,1051,5,118,0,0,1051,1052,3,158,
        79,0,1052,1061,1,0,0,0,1053,1054,3,152,76,0,1054,1055,5,118,0,0,
        1055,1056,5,124,0,0,1056,1057,3,108,54,0,1057,1058,5,142,0,0,1058,
        1061,1,0,0,0,1059,1061,3,152,76,0,1060,1049,1,0,0,0,1060,1053,1,
        0,0,0,1060,1059,1,0,0,0,1061,119,1,0,0,0,1062,1067,3,122,61,0,1063,
        1064,5,112,0,0,1064,1066,3,122,61,0,1065,1063,1,0,0,0,1066,1069,
        1,0,0,0,1067,1065,1,0,0,0,1067,1068,1,0,0,0,1068,1071,1,0,0,0,1069,
        1067,1,0,0,0,1070,1072,5,112,0,0,1071,1070,1,0,0,0,1071,1072,1,0,
        0,0,1072,121,1,0,0,0,1073,1074,3,152,76,0,1074,1075,5,6,0,0,1075,
        1076,5,126,0,0,1076,1077,3,36,18,0,1077,1078,5,144,0,0,1078,1084,
        1,0,0,0,1079,1080,3,108,54,0,1080,1081,5,6,0,0,1081,1082,3,152,76,
        0,1082,1084,1,0,0,0,1083,1073,1,0,0,0,1083,1079,1,0,0,0,1084,123,
        1,0,0,0,1085,1093,3,156,78,0,1086,1087,3,132,66,0,1087,1088,5,116,
        0,0,1088,1090,1,0,0,0,1089,1086,1,0,0,0,1089,1090,1,0,0,0,1090,1091,
        1,0,0,0,1091,1093,3,126,63,0,1092,1085,1,0,0,0,1092,1089,1,0,0,0,
        1093,125,1,0,0,0,1094,1099,3,152,76,0,1095,1096,5,116,0,0,1096,1098,
        3,152,76,0,1097,1095,1,0,0,0,1098,1101,1,0,0,0,1099,1097,1,0,0,0,
        1099,1100,1,0,0,0,1100,127,1,0,0,0,1101,1099,1,0,0,0,1102,1103,6,
        64,-1,0,1103,1112,3,132,66,0,1104,1112,3,130,65,0,1105,1106,5,126,
        0,0,1106,1107,3,36,18,0,1107,1108,5,144,0,0,1108,1112,1,0,0,0,1109,
        1112,3,116,58,0,1110,1112,3,156,78,0,1111,1102,1,0,0,0,1111,1104,
        1,0,0,0,1111,1105,1,0,0,0,1111,1109,1,0,0,0,1111,1110,1,0,0,0,1112,
        1121,1,0,0,0,1113,1117,10,3,0,0,1114,1118,3,150,75,0,1115,1116,5,
        6,0,0,1116,1118,3,152,76,0,1117,1114,1,0,0,0,1117,1115,1,0,0,0,1118,
        1120,1,0,0,0,1119,1113,1,0,0,0,1120,1123,1,0,0,0,1121,1119,1,0,0,
        0,1121,1122,1,0,0,0,1122,129,1,0,0,0,1123,1121,1,0,0,0,1124,1125,
        3,152,76,0,1125,1127,5,126,0,0,1126,1128,3,134,67,0,1127,1126,1,
        0,0,0,1127,1128,1,0,0,0,1128,1129,1,0,0,0,1129,1130,5,144,0,0,1130,
        131,1,0,0,0,1131,1132,3,136,68,0,1132,1133,5,116,0,0,1133,1135,1,
        0,0,0,1134,1131,1,0,0,0,1134,1135,1,0,0,0,1135,1136,1,0,0,0,1136,
        1137,3,152,76,0,1137,133,1,0,0,0,1138,1143,3,108,54,0,1139,1140,
        5,112,0,0,1140,1142,3,108,54,0,1141,1139,1,0,0,0,1142,1145,1,0,0,
        0,1143,1141,1,0,0,0,1143,1144,1,0,0,0,1144,1147,1,0,0,0,1145,1143,
        1,0,0,0,1146,1148,5,112,0,0,1147,1146,1,0,0,0,1147,1148,1,0,0,0,
        1148,135,1,0,0,0,1149,1150,3,152,76,0,1150,137,1,0,0,0,1151,1160,
        5,102,0,0,1152,1153,5,116,0,0,1153,1160,7,11,0,0,1154,1155,5,104,
        0,0,1155,1157,5,116,0,0,1156,1158,7,11,0,0,1157,1156,1,0,0,0,1157,
        1158,1,0,0,0,1158,1160,1,0,0,0,1159,1151,1,0,0,0,1159,1152,1,0,0,
        0,1159,1154,1,0,0,0,1160,139,1,0,0,0,1161,1163,7,12,0,0,1162,1161,
        1,0,0,0,1162,1163,1,0,0,0,1163,1170,1,0,0,0,1164,1171,3,138,69,0,
        1165,1171,5,103,0,0,1166,1171,5,104,0,0,1167,1171,5,105,0,0,1168,
        1171,5,41,0,0,1169,1171,5,55,0,0,1170,1164,1,0,0,0,1170,1165,1,0,
        0,0,1170,1166,1,0,0,0,1170,1167,1,0,0,0,1170,1168,1,0,0,0,1170,1169,
        1,0,0,0,1171,141,1,0,0,0,1172,1176,3,140,70,0,1173,1176,5,106,0,
        0,1174,1176,5,57,0,0,1175,1172,1,0,0,0,1175,1173,1,0,0,0,1175,1174,
        1,0,0,0,1176,143,1,0,0,0,1177,1178,7,13,0,0,1178,145,1,0,0,0,1179,
        1180,7,14,0,0,1180,147,1,0,0,0,1181,1182,7,15,0,0,1182,149,1,0,0,
        0,1183,1186,5,101,0,0,1184,1186,3,148,74,0,1185,1183,1,0,0,0,1185,
        1184,1,0,0,0,1186,151,1,0,0,0,1187,1191,5,101,0,0,1188,1191,3,144,
        72,0,1189,1191,3,146,73,0,1190,1187,1,0,0,0,1190,1188,1,0,0,0,1190,
        1189,1,0,0,0,1191,153,1,0,0,0,1192,1193,3,158,79,0,1193,1194,5,118,
        0,0,1194,1195,3,140,70,0,1195,155,1,0,0,0,1196,1197,5,124,0,0,1197,
        1198,3,152,76,0,1198,1199,5,142,0,0,1199,157,1,0,0,0,1200,1203,5,
        106,0,0,1201,1203,3,160,80,0,1202,1200,1,0,0,0,1202,1201,1,0,0,0,
        1203,159,1,0,0,0,1204,1208,5,137,0,0,1205,1207,3,162,81,0,1206,1205,
        1,0,0,0,1207,1210,1,0,0,0,1208,1206,1,0,0,0,1208,1209,1,0,0,0,1209,
        1211,1,0,0,0,1210,1208,1,0,0,0,1211,1212,5,139,0,0,1212,161,1,0,
        0,0,1213,1214,5,152,0,0,1214,1215,3,108,54,0,1215,1216,5,142,0,0,
        1216,1219,1,0,0,0,1217,1219,5,151,0,0,1218,1213,1,0,0,0,1218,1217,
        1,0,0,0,1219,163,1,0,0,0,1220,1224,5,138,0,0,1221,1223,3,166,83,
        0,1222,1221,1,0,0,0,1223,1226,1,0,0,0,1224,1222,1,0,0,0,1224,1225,
        1,0,0,0,1225,1227,1,0,0,0,1226,1224,1,0,0,0,1227,1228,5,0,0,1,1228,
        165,1,0,0,0,1229,1230,5,154,0,0,1230,1231,3,108,54,0,1231,1232,5,
        142,0,0,1232,1235,1,0,0,0,1233,1235,5,153,0,0,1234,1229,1,0,0,0,
        1234,1233,1,0,0,0,1235,167,1,0,0,0,160,171,178,187,194,198,209,213,
        216,225,233,240,244,250,255,261,273,281,295,299,304,314,323,326,
        330,333,337,340,343,346,349,353,357,360,363,366,370,373,382,388,
        409,426,443,449,455,466,468,479,482,488,496,502,504,508,513,516,
        519,523,527,530,532,535,539,543,546,548,550,555,566,572,579,584,
        588,592,598,600,607,615,618,621,640,654,670,674,685,689,700,704,
        711,715,722,726,731,740,744,768,785,791,794,797,807,813,816,819,
        827,830,834,837,851,868,873,877,883,890,902,906,909,918,932,959,
        967,969,971,979,983,987,995,999,1008,1012,1014,1024,1035,1040,1047,
        1060,1067,1071,1083,1089,1092,1099,1111,1117,1121,1127,1134,1143,
        1147,1157,1159,1162,1170,1175,1185,1190,1202,1208,1218,1224,1234
    ]

class HogQLParser ( Parser ):

    grammarFileName = "HogQLParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'->'", "'*'", 
                     "'`'", "'\\'", "':'", "','", "'||'", "'-'", "'$'", 
                     "'.'", "'=='", "'='", "'>='", "'>'", "'#'", "'~*'", 
                     "'=~*'", "'{'", "'['", "'('", "'<='", "'<'", "<INVALID>", 
                     "'!~*'", "'!~'", "'??'", "'%'", "'+'", "'?'", "'\"'", 
                     "'f''", "'F''", "'''", "'~'", "'=~'", "'}'", "']'", 
                     "')'", "';'", "'/'", "'_'" ]

    symbolicNames = [ "<INVALID>", "ALL", "AND", "ANTI", "ANY", "ARRAY", 
                      "AS", "ASCENDING", "ASOF", "BETWEEN", "BOTH", "BY", 
                      "CASE", "CAST", "COHORT", "COLLATE", "CROSS", "CUBE", 
                      "CURRENT", "DATE", "DAY", "DESC", "DESCENDING", "DISTINCT", 
                      "ELSE", "END", "EXTRACT", "FINAL", "FIRST", "FN", 
                      "FOLLOWING", "FOR", "FROM", "FULL", "GROUP", "HAVING", 
                      "HOUR", "ID", "IF", "ILIKE", "IN", "INF", "INNER", 
                      "INTERVAL", "IS", "JOIN", "KEY", "LAST", "LEADING", 
                      "LEFT", "LET", "LIKE", "LIMIT", "MINUTE", "MONTH", 
                      "NAN_SQL", "NOT", "NULL_SQL", "NULLS", "OFFSET", "ON", 
                      "OR", "ORDER", "OUTER", "OVER", "PARTITION", "PRECEDING", 
                      "PREWHERE", "QUARTER", "RANGE", "RETURN", "RIGHT", 
                      "ROLLUP", "ROW", "ROWS", "SAMPLE", "SECOND", "SELECT", 
                      "SEMI", "SETTINGS", "SUBSTRING", "THEN", "TIES", "TIMESTAMP", 
                      "TO", "TOP", "TOTALS", "TRAILING", "TRIM", "TRUNCATE", 
                      "UNBOUNDED", "UNION", "USING", "WEEK", "WHEN", "WHERE", 
                      "WHILE", "WINDOW", "WITH", "YEAR", "ESCAPE_CHAR_COMMON", 
                      "IDENTIFIER", "FLOATING_LITERAL", "OCTAL_LITERAL", 
                      "DECIMAL_LITERAL", "HEXADECIMAL_LITERAL", "STRING_LITERAL", 
                      "ARROW", "ASTERISK", "BACKQUOTE", "BACKSLASH", "COLON", 
                      "COMMA", "CONCAT", "DASH", "DOLLAR", "DOT", "EQ_DOUBLE", 
                      "EQ_SINGLE", "GT_EQ", "GT", "HASH", "IREGEX_SINGLE", 
                      "IREGEX_DOUBLE", "LBRACE", "LBRACKET", "LPAREN", "LT_EQ", 
                      "LT", "NOT_EQ", "NOT_IREGEX", "NOT_REGEX", "NULLISH", 
                      "PERCENT", "PLUS", "QUERY", "QUOTE_DOUBLE", "QUOTE_SINGLE_TEMPLATE", 
                      "QUOTE_SINGLE_TEMPLATE_FULL", "QUOTE_SINGLE", "REGEX_SINGLE", 
                      "REGEX_DOUBLE", "RBRACE", "RBRACKET", "RPAREN", "SEMICOLON", 
                      "SLASH", "UNDERSCORE", "MULTI_LINE_COMMENT", "SINGLE_LINE_COMMENT", 
                      "WHITESPACE", "STRING_TEXT", "STRING_ESCAPE_TRIGGER", 
                      "FULL_STRING_TEXT", "FULL_STRING_ESCAPE_TRIGGER" ]

    RULE_program = 0
    RULE_declaration = 1
    RULE_expression = 2
    RULE_varDecl = 3
    RULE_identifierList = 4
    RULE_statement = 5
    RULE_returnStmt = 6
    RULE_ifStmt = 7
    RULE_whileStmt = 8
    RULE_forStmt = 9
    RULE_funcStmt = 10
    RULE_varAssignment = 11
    RULE_exprStmt = 12
    RULE_emptyStmt = 13
    RULE_block = 14
    RULE_kvPair = 15
    RULE_kvPairList = 16
    RULE_select = 17
    RULE_selectUnionStmt = 18
    RULE_selectStmtWithParens = 19
    RULE_selectStmt = 20
    RULE_withClause = 21
    RULE_topClause = 22
    RULE_fromClause = 23
    RULE_arrayJoinClause = 24
    RULE_windowClause = 25
    RULE_prewhereClause = 26
    RULE_whereClause = 27
    RULE_groupByClause = 28
    RULE_havingClause = 29
    RULE_orderByClause = 30
    RULE_projectionOrderByClause = 31
    RULE_limitAndOffsetClause = 32
    RULE_offsetOnlyClause = 33
    RULE_settingsClause = 34
    RULE_joinExpr = 35
    RULE_joinOp = 36
    RULE_joinOpCross = 37
    RULE_joinConstraintClause = 38
    RULE_sampleClause = 39
    RULE_orderExprList = 40
    RULE_orderExpr = 41
    RULE_ratioExpr = 42
    RULE_settingExprList = 43
    RULE_settingExpr = 44
    RULE_windowExpr = 45
    RULE_winPartitionByClause = 46
    RULE_winOrderByClause = 47
    RULE_winFrameClause = 48
    RULE_winFrameExtend = 49
    RULE_winFrameBound = 50
    RULE_expr = 51
    RULE_columnTypeExpr = 52
    RULE_columnExprList = 53
    RULE_columnExpr = 54
    RULE_columnArgList = 55
    RULE_columnArgExpr = 56
    RULE_columnLambdaExpr = 57
    RULE_hogqlxTagElement = 58
    RULE_hogqlxTagAttribute = 59
    RULE_withExprList = 60
    RULE_withExpr = 61
    RULE_columnIdentifier = 62
    RULE_nestedIdentifier = 63
    RULE_tableExpr = 64
    RULE_tableFunctionExpr = 65
    RULE_tableIdentifier = 66
    RULE_tableArgList = 67
    RULE_databaseIdentifier = 68
    RULE_floatingLiteral = 69
    RULE_numberLiteral = 70
    RULE_literal = 71
    RULE_interval = 72
    RULE_keyword = 73
    RULE_keywordForAlias = 74
    RULE_alias = 75
    RULE_identifier = 76
    RULE_enumValue = 77
    RULE_placeholder = 78
    RULE_string = 79
    RULE_templateString = 80
    RULE_stringContents = 81
    RULE_fullTemplateString = 82
    RULE_stringContentsFull = 83

    ruleNames =  [ "program", "declaration", "expression", "varDecl", "identifierList", 
                   "statement", "returnStmt", "ifStmt", "whileStmt", "forStmt", 
                   "funcStmt", "varAssignment", "exprStmt", "emptyStmt", 
                   "block", "kvPair", "kvPairList", "select", "selectUnionStmt", 
                   "selectStmtWithParens", "selectStmt", "withClause", "topClause", 
                   "fromClause", "arrayJoinClause", "windowClause", "prewhereClause", 
                   "whereClause", "groupByClause", "havingClause", "orderByClause", 
                   "projectionOrderByClause", "limitAndOffsetClause", "offsetOnlyClause", 
                   "settingsClause", "joinExpr", "joinOp", "joinOpCross", 
                   "joinConstraintClause", "sampleClause", "orderExprList", 
                   "orderExpr", "ratioExpr", "settingExprList", "settingExpr", 
                   "windowExpr", "winPartitionByClause", "winOrderByClause", 
                   "winFrameClause", "winFrameExtend", "winFrameBound", 
                   "expr", "columnTypeExpr", "columnExprList", "columnExpr", 
                   "columnArgList", "columnArgExpr", "columnLambdaExpr", 
                   "hogqlxTagElement", "hogqlxTagAttribute", "withExprList", 
                   "withExpr", "columnIdentifier", "nestedIdentifier", "tableExpr", 
                   "tableFunctionExpr", "tableIdentifier", "tableArgList", 
                   "databaseIdentifier", "floatingLiteral", "numberLiteral", 
                   "literal", "interval", "keyword", "keywordForAlias", 
                   "alias", "identifier", "enumValue", "placeholder", "string", 
                   "templateString", "stringContents", "fullTemplateString", 
                   "stringContentsFull" ]

    EOF = Token.EOF
    ALL=1
    AND=2
    ANTI=3
    ANY=4
    ARRAY=5
    AS=6
    ASCENDING=7
    ASOF=8
    BETWEEN=9
    BOTH=10
    BY=11
    CASE=12
    CAST=13
    COHORT=14
    COLLATE=15
    CROSS=16
    CUBE=17
    CURRENT=18
    DATE=19
    DAY=20
    DESC=21
    DESCENDING=22
    DISTINCT=23
    ELSE=24
    END=25
    EXTRACT=26
    FINAL=27
    FIRST=28
    FN=29
    FOLLOWING=30
    FOR=31
    FROM=32
    FULL=33
    GROUP=34
    HAVING=35
    HOUR=36
    ID=37
    IF=38
    ILIKE=39
    IN=40
    INF=41
    INNER=42
    INTERVAL=43
    IS=44
    JOIN=45
    KEY=46
    LAST=47
    LEADING=48
    LEFT=49
    LET=50
    LIKE=51
    LIMIT=52
    MINUTE=53
    MONTH=54
    NAN_SQL=55
    NOT=56
    NULL_SQL=57
    NULLS=58
    OFFSET=59
    ON=60
    OR=61
    ORDER=62
    OUTER=63
    OVER=64
    PARTITION=65
    PRECEDING=66
    PREWHERE=67
    QUARTER=68
    RANGE=69
    RETURN=70
    RIGHT=71
    ROLLUP=72
    ROW=73
    ROWS=74
    SAMPLE=75
    SECOND=76
    SELECT=77
    SEMI=78
    SETTINGS=79
    SUBSTRING=80
    THEN=81
    TIES=82
    TIMESTAMP=83
    TO=84
    TOP=85
    TOTALS=86
    TRAILING=87
    TRIM=88
    TRUNCATE=89
    UNBOUNDED=90
    UNION=91
    USING=92
    WEEK=93
    WHEN=94
    WHERE=95
    WHILE=96
    WINDOW=97
    WITH=98
    YEAR=99
    ESCAPE_CHAR_COMMON=100
    IDENTIFIER=101
    FLOATING_LITERAL=102
    OCTAL_LITERAL=103
    DECIMAL_LITERAL=104
    HEXADECIMAL_LITERAL=105
    STRING_LITERAL=106
    ARROW=107
    ASTERISK=108
    BACKQUOTE=109
    BACKSLASH=110
    COLON=111
    COMMA=112
    CONCAT=113
    DASH=114
    DOLLAR=115
    DOT=116
    EQ_DOUBLE=117
    EQ_SINGLE=118
    GT_EQ=119
    GT=120
    HASH=121
    IREGEX_SINGLE=122
    IREGEX_DOUBLE=123
    LBRACE=124
    LBRACKET=125
    LPAREN=126
    LT_EQ=127
    LT=128
    NOT_EQ=129
    NOT_IREGEX=130
    NOT_REGEX=131
    NULLISH=132
    PERCENT=133
    PLUS=134
    QUERY=135
    QUOTE_DOUBLE=136
    QUOTE_SINGLE_TEMPLATE=137
    QUOTE_SINGLE_TEMPLATE_FULL=138
    QUOTE_SINGLE=139
    REGEX_SINGLE=140
    REGEX_DOUBLE=141
    RBRACE=142
    RBRACKET=143
    RPAREN=144
    SEMICOLON=145
    SLASH=146
    UNDERSCORE=147
    MULTI_LINE_COMMENT=148
    SINGLE_LINE_COMMENT=149
    WHITESPACE=150
    STRING_TEXT=151
    STRING_ESCAPE_TRIGGER=152
    FULL_STRING_TEXT=153
    FULL_STRING_ESCAPE_TRIGGER=154

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class ProgramContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(HogQLParser.EOF, 0)

        def declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.DeclarationContext)
            else:
                return self.getTypedRuleContext(HogQLParser.DeclarationContext,i)


        def getRuleIndex(self):
            return HogQLParser.RULE_program

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProgram" ):
                return visitor.visitProgram(self)
            else:
                return visitor.visitChildren(self)




    def program(self):

        localctx = HogQLParser.ProgramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_program)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 171
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -2) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 8076106351341731839) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 131649) != 0):
                self.state = 168
                self.declaration()
                self.state = 173
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 174
            self.match(HogQLParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def varDecl(self):
            return self.getTypedRuleContext(HogQLParser.VarDeclContext,0)


        def statement(self):
            return self.getTypedRuleContext(HogQLParser.StatementContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_declaration

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclaration" ):
                return visitor.visitDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def declaration(self):

        localctx = HogQLParser.DeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_declaration)
        try:
            self.state = 178
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [50]:
                self.enterOuterAlt(localctx, 1)
                self.state = 176
                self.varDecl()
                pass
            elif token in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 108, 114, 116, 124, 125, 126, 128, 134, 137, 145]:
                self.enterOuterAlt(localctx, 2)
                self.state = 177
                self.statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_expression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression" ):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)




    def expression(self):

        localctx = HogQLParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 180
            self.columnExpr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LET(self):
            return self.getToken(HogQLParser.LET, 0)

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def COLON(self):
            return self.getToken(HogQLParser.COLON, 0)

        def EQ_SINGLE(self):
            return self.getToken(HogQLParser.EQ_SINGLE, 0)

        def expression(self):
            return self.getTypedRuleContext(HogQLParser.ExpressionContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_varDecl

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarDecl" ):
                return visitor.visitVarDecl(self)
            else:
                return visitor.visitChildren(self)




    def varDecl(self):

        localctx = HogQLParser.VarDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_varDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 182
            self.match(HogQLParser.LET)
            self.state = 183
            self.identifier()
            self.state = 187
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==111:
                self.state = 184
                self.match(HogQLParser.COLON)
                self.state = 185
                self.match(HogQLParser.EQ_SINGLE)
                self.state = 186
                self.expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(HogQLParser.IdentifierContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_identifierList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifierList" ):
                return visitor.visitIdentifierList(self)
            else:
                return visitor.visitChildren(self)




    def identifierList(self):

        localctx = HogQLParser.IdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_identifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 189
            self.identifier()
            self.state = 194
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,3,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 190
                    self.match(HogQLParser.COMMA)
                    self.state = 191
                    self.identifier() 
                self.state = 196
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,3,self._ctx)

            self.state = 198
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==112:
                self.state = 197
                self.match(HogQLParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def returnStmt(self):
            return self.getTypedRuleContext(HogQLParser.ReturnStmtContext,0)


        def ifStmt(self):
            return self.getTypedRuleContext(HogQLParser.IfStmtContext,0)


        def whileStmt(self):
            return self.getTypedRuleContext(HogQLParser.WhileStmtContext,0)


        def forStmt(self):
            return self.getTypedRuleContext(HogQLParser.ForStmtContext,0)


        def funcStmt(self):
            return self.getTypedRuleContext(HogQLParser.FuncStmtContext,0)


        def varAssignment(self):
            return self.getTypedRuleContext(HogQLParser.VarAssignmentContext,0)


        def block(self):
            return self.getTypedRuleContext(HogQLParser.BlockContext,0)


        def exprStmt(self):
            return self.getTypedRuleContext(HogQLParser.ExprStmtContext,0)


        def emptyStmt(self):
            return self.getTypedRuleContext(HogQLParser.EmptyStmtContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_statement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement" ):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)




    def statement(self):

        localctx = HogQLParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_statement)
        try:
            self.state = 209
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 200
                self.returnStmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 201
                self.ifStmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 202
                self.whileStmt()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 203
                self.forStmt()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 204
                self.funcStmt()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 205
                self.varAssignment()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 206
                self.block()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 207
                self.exprStmt()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 208
                self.emptyStmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(HogQLParser.RETURN, 0)

        def expression(self):
            return self.getTypedRuleContext(HogQLParser.ExpressionContext,0)


        def SEMICOLON(self):
            return self.getToken(HogQLParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_returnStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturnStmt" ):
                return visitor.visitReturnStmt(self)
            else:
                return visitor.visitChildren(self)




    def returnStmt(self):

        localctx = HogQLParser.ReturnStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_returnStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 211
            self.match(HogQLParser.RETURN)
            self.state = 213
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
            if la_ == 1:
                self.state = 212
                self.expression()


            self.state = 216
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.state = 215
                self.match(HogQLParser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(HogQLParser.IF, 0)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(HogQLParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.StatementContext)
            else:
                return self.getTypedRuleContext(HogQLParser.StatementContext,i)


        def ELSE(self):
            return self.getToken(HogQLParser.ELSE, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_ifStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfStmt" ):
                return visitor.visitIfStmt(self)
            else:
                return visitor.visitChildren(self)




    def ifStmt(self):

        localctx = HogQLParser.IfStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_ifStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 218
            self.match(HogQLParser.IF)
            self.state = 219
            self.match(HogQLParser.LPAREN)
            self.state = 220
            self.expression()
            self.state = 221
            self.match(HogQLParser.RPAREN)
            self.state = 222
            self.statement()
            self.state = 225
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
            if la_ == 1:
                self.state = 223
                self.match(HogQLParser.ELSE)
                self.state = 224
                self.statement()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(HogQLParser.WHILE, 0)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(HogQLParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def statement(self):
            return self.getTypedRuleContext(HogQLParser.StatementContext,0)


        def SEMICOLON(self):
            return self.getToken(HogQLParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_whileStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhileStmt" ):
                return visitor.visitWhileStmt(self)
            else:
                return visitor.visitChildren(self)




    def whileStmt(self):

        localctx = HogQLParser.WhileStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_whileStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 227
            self.match(HogQLParser.WHILE)
            self.state = 228
            self.match(HogQLParser.LPAREN)
            self.state = 229
            self.expression()
            self.state = 230
            self.match(HogQLParser.RPAREN)
            self.state = 231
            self.statement()
            self.state = 233
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
            if la_ == 1:
                self.state = 232
                self.match(HogQLParser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.initializerVarDeclr = None # VarDeclContext
            self.initializerVarAssignment = None # VarAssignmentContext
            self.initializerExpression = None # ExpressionContext
            self.condition = None # ExpressionContext
            self.incrementVarDeclr = None # VarDeclContext
            self.incrementVarAssignment = None # VarAssignmentContext
            self.incrementExpression = None # ExpressionContext

        def FOR(self):
            return self.getToken(HogQLParser.FOR, 0)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)

        def SEMICOLON(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.SEMICOLON)
            else:
                return self.getToken(HogQLParser.SEMICOLON, i)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def statement(self):
            return self.getTypedRuleContext(HogQLParser.StatementContext,0)


        def varDecl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.VarDeclContext)
            else:
                return self.getTypedRuleContext(HogQLParser.VarDeclContext,i)


        def varAssignment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.VarAssignmentContext)
            else:
                return self.getTypedRuleContext(HogQLParser.VarAssignmentContext,i)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ExpressionContext,i)


        def getRuleIndex(self):
            return HogQLParser.RULE_forStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForStmt" ):
                return visitor.visitForStmt(self)
            else:
                return visitor.visitChildren(self)




    def forStmt(self):

        localctx = HogQLParser.ForStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_forStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 235
            self.match(HogQLParser.FOR)
            self.state = 236
            self.match(HogQLParser.LPAREN)
            self.state = 240
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.state = 237
                localctx.initializerVarDeclr = self.varDecl()

            elif la_ == 2:
                self.state = 238
                localctx.initializerVarAssignment = self.varAssignment()

            elif la_ == 3:
                self.state = 239
                localctx.initializerExpression = self.expression()


            self.state = 242
            self.match(HogQLParser.SEMICOLON)
            self.state = 244
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -1125900443713538) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 8076106347046764543) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 577) != 0):
                self.state = 243
                localctx.condition = self.expression()


            self.state = 246
            self.match(HogQLParser.SEMICOLON)
            self.state = 250
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
            if la_ == 1:
                self.state = 247
                localctx.incrementVarDeclr = self.varDecl()

            elif la_ == 2:
                self.state = 248
                localctx.incrementVarAssignment = self.varAssignment()

            elif la_ == 3:
                self.state = 249
                localctx.incrementExpression = self.expression()


            self.state = 252
            self.match(HogQLParser.RPAREN)
            self.state = 253
            self.statement()
            self.state = 255
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
            if la_ == 1:
                self.state = 254
                self.match(HogQLParser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FuncStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FN(self):
            return self.getToken(HogQLParser.FN, 0)

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def block(self):
            return self.getTypedRuleContext(HogQLParser.BlockContext,0)


        def identifierList(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierListContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_funcStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFuncStmt" ):
                return visitor.visitFuncStmt(self)
            else:
                return visitor.visitChildren(self)




    def funcStmt(self):

        localctx = HogQLParser.FuncStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_funcStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 257
            self.match(HogQLParser.FN)
            self.state = 258
            self.identifier()
            self.state = 259
            self.match(HogQLParser.LPAREN)
            self.state = 261
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -181272084561788930) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 201863462911) != 0):
                self.state = 260
                self.identifierList()


            self.state = 263
            self.match(HogQLParser.RPAREN)
            self.state = 264
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarAssignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ExpressionContext,i)


        def COLON(self):
            return self.getToken(HogQLParser.COLON, 0)

        def EQ_SINGLE(self):
            return self.getToken(HogQLParser.EQ_SINGLE, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_varAssignment

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarAssignment" ):
                return visitor.visitVarAssignment(self)
            else:
                return visitor.visitChildren(self)




    def varAssignment(self):

        localctx = HogQLParser.VarAssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_varAssignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 266
            self.expression()
            self.state = 267
            self.match(HogQLParser.COLON)
            self.state = 268
            self.match(HogQLParser.EQ_SINGLE)
            self.state = 269
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(HogQLParser.ExpressionContext,0)


        def SEMICOLON(self):
            return self.getToken(HogQLParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_exprStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExprStmt" ):
                return visitor.visitExprStmt(self)
            else:
                return visitor.visitChildren(self)




    def exprStmt(self):

        localctx = HogQLParser.ExprStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_exprStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 271
            self.expression()
            self.state = 273
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
            if la_ == 1:
                self.state = 272
                self.match(HogQLParser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EmptyStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMICOLON(self):
            return self.getToken(HogQLParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_emptyStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEmptyStmt" ):
                return visitor.visitEmptyStmt(self)
            else:
                return visitor.visitChildren(self)




    def emptyStmt(self):

        localctx = HogQLParser.EmptyStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_emptyStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 275
            self.match(HogQLParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(HogQLParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(HogQLParser.RBRACE, 0)

        def declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.DeclarationContext)
            else:
                return self.getTypedRuleContext(HogQLParser.DeclarationContext,i)


        def getRuleIndex(self):
            return HogQLParser.RULE_block

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlock" ):
                return visitor.visitBlock(self)
            else:
                return visitor.visitChildren(self)




    def block(self):

        localctx = HogQLParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 277
            self.match(HogQLParser.LBRACE)
            self.state = 281
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -2) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 8076106351341731839) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 131649) != 0):
                self.state = 278
                self.declaration()
                self.state = 283
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 284
            self.match(HogQLParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KvPairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ExpressionContext,i)


        def COLON(self):
            return self.getToken(HogQLParser.COLON, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_kvPair

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKvPair" ):
                return visitor.visitKvPair(self)
            else:
                return visitor.visitChildren(self)




    def kvPair(self):

        localctx = HogQLParser.KvPairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_kvPair)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 286
            self.expression()
            self.state = 287
            self.match(HogQLParser.COLON)
            self.state = 288
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KvPairListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def kvPair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.KvPairContext)
            else:
                return self.getTypedRuleContext(HogQLParser.KvPairContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_kvPairList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKvPairList" ):
                return visitor.visitKvPairList(self)
            else:
                return visitor.visitChildren(self)




    def kvPairList(self):

        localctx = HogQLParser.KvPairListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_kvPairList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 290
            self.kvPair()
            self.state = 295
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,17,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 291
                    self.match(HogQLParser.COMMA)
                    self.state = 292
                    self.kvPair() 
                self.state = 297
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,17,self._ctx)

            self.state = 299
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==112:
                self.state = 298
                self.match(HogQLParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(HogQLParser.EOF, 0)

        def selectUnionStmt(self):
            return self.getTypedRuleContext(HogQLParser.SelectUnionStmtContext,0)


        def selectStmt(self):
            return self.getTypedRuleContext(HogQLParser.SelectStmtContext,0)


        def hogqlxTagElement(self):
            return self.getTypedRuleContext(HogQLParser.HogqlxTagElementContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_select

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelect" ):
                return visitor.visitSelect(self)
            else:
                return visitor.visitChildren(self)




    def select(self):

        localctx = HogQLParser.SelectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_select)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 304
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,19,self._ctx)
            if la_ == 1:
                self.state = 301
                self.selectUnionStmt()
                pass

            elif la_ == 2:
                self.state = 302
                self.selectStmt()
                pass

            elif la_ == 3:
                self.state = 303
                self.hogqlxTagElement()
                pass


            self.state = 306
            self.match(HogQLParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectUnionStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selectStmtWithParens(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.SelectStmtWithParensContext)
            else:
                return self.getTypedRuleContext(HogQLParser.SelectStmtWithParensContext,i)


        def UNION(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.UNION)
            else:
                return self.getToken(HogQLParser.UNION, i)

        def ALL(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.ALL)
            else:
                return self.getToken(HogQLParser.ALL, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_selectUnionStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectUnionStmt" ):
                return visitor.visitSelectUnionStmt(self)
            else:
                return visitor.visitChildren(self)




    def selectUnionStmt(self):

        localctx = HogQLParser.SelectUnionStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_selectUnionStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 308
            self.selectStmtWithParens()
            self.state = 314
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==91:
                self.state = 309
                self.match(HogQLParser.UNION)
                self.state = 310
                self.match(HogQLParser.ALL)
                self.state = 311
                self.selectStmtWithParens()
                self.state = 316
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectStmtWithParensContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selectStmt(self):
            return self.getTypedRuleContext(HogQLParser.SelectStmtContext,0)


        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)

        def selectUnionStmt(self):
            return self.getTypedRuleContext(HogQLParser.SelectUnionStmtContext,0)


        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def placeholder(self):
            return self.getTypedRuleContext(HogQLParser.PlaceholderContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_selectStmtWithParens

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectStmtWithParens" ):
                return visitor.visitSelectStmtWithParens(self)
            else:
                return visitor.visitChildren(self)




    def selectStmtWithParens(self):

        localctx = HogQLParser.SelectStmtWithParensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_selectStmtWithParens)
        try:
            self.state = 323
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [77, 98]:
                self.enterOuterAlt(localctx, 1)
                self.state = 317
                self.selectStmt()
                pass
            elif token in [126]:
                self.enterOuterAlt(localctx, 2)
                self.state = 318
                self.match(HogQLParser.LPAREN)
                self.state = 319
                self.selectUnionStmt()
                self.state = 320
                self.match(HogQLParser.RPAREN)
                pass
            elif token in [124]:
                self.enterOuterAlt(localctx, 3)
                self.state = 322
                self.placeholder()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.with_ = None # WithClauseContext
            self.columns = None # ColumnExprListContext
            self.from_ = None # FromClauseContext
            self.where = None # WhereClauseContext

        def SELECT(self):
            return self.getToken(HogQLParser.SELECT, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def DISTINCT(self):
            return self.getToken(HogQLParser.DISTINCT, 0)

        def topClause(self):
            return self.getTypedRuleContext(HogQLParser.TopClauseContext,0)


        def arrayJoinClause(self):
            return self.getTypedRuleContext(HogQLParser.ArrayJoinClauseContext,0)


        def prewhereClause(self):
            return self.getTypedRuleContext(HogQLParser.PrewhereClauseContext,0)


        def groupByClause(self):
            return self.getTypedRuleContext(HogQLParser.GroupByClauseContext,0)


        def WITH(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.WITH)
            else:
                return self.getToken(HogQLParser.WITH, i)

        def TOTALS(self):
            return self.getToken(HogQLParser.TOTALS, 0)

        def havingClause(self):
            return self.getTypedRuleContext(HogQLParser.HavingClauseContext,0)


        def windowClause(self):
            return self.getTypedRuleContext(HogQLParser.WindowClauseContext,0)


        def orderByClause(self):
            return self.getTypedRuleContext(HogQLParser.OrderByClauseContext,0)


        def limitAndOffsetClause(self):
            return self.getTypedRuleContext(HogQLParser.LimitAndOffsetClauseContext,0)


        def offsetOnlyClause(self):
            return self.getTypedRuleContext(HogQLParser.OffsetOnlyClauseContext,0)


        def settingsClause(self):
            return self.getTypedRuleContext(HogQLParser.SettingsClauseContext,0)


        def withClause(self):
            return self.getTypedRuleContext(HogQLParser.WithClauseContext,0)


        def fromClause(self):
            return self.getTypedRuleContext(HogQLParser.FromClauseContext,0)


        def whereClause(self):
            return self.getTypedRuleContext(HogQLParser.WhereClauseContext,0)


        def CUBE(self):
            return self.getToken(HogQLParser.CUBE, 0)

        def ROLLUP(self):
            return self.getToken(HogQLParser.ROLLUP, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_selectStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectStmt" ):
                return visitor.visitSelectStmt(self)
            else:
                return visitor.visitChildren(self)




    def selectStmt(self):

        localctx = HogQLParser.SelectStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_selectStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 326
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==98:
                self.state = 325
                localctx.with_ = self.withClause()


            self.state = 328
            self.match(HogQLParser.SELECT)
            self.state = 330
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,23,self._ctx)
            if la_ == 1:
                self.state = 329
                self.match(HogQLParser.DISTINCT)


            self.state = 333
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
            if la_ == 1:
                self.state = 332
                self.topClause()


            self.state = 335
            localctx.columns = self.columnExprList()
            self.state = 337
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==32:
                self.state = 336
                localctx.from_ = self.fromClause()


            self.state = 340
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 567347999932448) != 0):
                self.state = 339
                self.arrayJoinClause()


            self.state = 343
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==67:
                self.state = 342
                self.prewhereClause()


            self.state = 346
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==95:
                self.state = 345
                localctx.where = self.whereClause()


            self.state = 349
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==34:
                self.state = 348
                self.groupByClause()


            self.state = 353
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
            if la_ == 1:
                self.state = 351
                self.match(HogQLParser.WITH)
                self.state = 352
                _la = self._input.LA(1)
                if not(_la==17 or _la==72):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 357
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==98:
                self.state = 355
                self.match(HogQLParser.WITH)
                self.state = 356
                self.match(HogQLParser.TOTALS)


            self.state = 360
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==35:
                self.state = 359
                self.havingClause()


            self.state = 363
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==97:
                self.state = 362
                self.windowClause()


            self.state = 366
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==62:
                self.state = 365
                self.orderByClause()


            self.state = 370
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [52]:
                self.state = 368
                self.limitAndOffsetClause()
                pass
            elif token in [59]:
                self.state = 369
                self.offsetOnlyClause()
                pass
            elif token in [-1, 79, 91, 144]:
                pass
            else:
                pass
            self.state = 373
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==79:
                self.state = 372
                self.settingsClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WithClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(HogQLParser.WITH, 0)

        def withExprList(self):
            return self.getTypedRuleContext(HogQLParser.WithExprListContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_withClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWithClause" ):
                return visitor.visitWithClause(self)
            else:
                return visitor.visitChildren(self)




    def withClause(self):

        localctx = HogQLParser.WithClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_withClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 375
            self.match(HogQLParser.WITH)
            self.state = 376
            self.withExprList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TopClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TOP(self):
            return self.getToken(HogQLParser.TOP, 0)

        def DECIMAL_LITERAL(self):
            return self.getToken(HogQLParser.DECIMAL_LITERAL, 0)

        def WITH(self):
            return self.getToken(HogQLParser.WITH, 0)

        def TIES(self):
            return self.getToken(HogQLParser.TIES, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_topClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTopClause" ):
                return visitor.visitTopClause(self)
            else:
                return visitor.visitChildren(self)




    def topClause(self):

        localctx = HogQLParser.TopClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_topClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 378
            self.match(HogQLParser.TOP)
            self.state = 379
            self.match(HogQLParser.DECIMAL_LITERAL)
            self.state = 382
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,37,self._ctx)
            if la_ == 1:
                self.state = 380
                self.match(HogQLParser.WITH)
                self.state = 381
                self.match(HogQLParser.TIES)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FromClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(HogQLParser.FROM, 0)

        def joinExpr(self):
            return self.getTypedRuleContext(HogQLParser.JoinExprContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_fromClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFromClause" ):
                return visitor.visitFromClause(self)
            else:
                return visitor.visitChildren(self)




    def fromClause(self):

        localctx = HogQLParser.FromClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_fromClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 384
            self.match(HogQLParser.FROM)
            self.state = 385
            self.joinExpr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayJoinClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ARRAY(self):
            return self.getToken(HogQLParser.ARRAY, 0)

        def JOIN(self):
            return self.getToken(HogQLParser.JOIN, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def LEFT(self):
            return self.getToken(HogQLParser.LEFT, 0)

        def INNER(self):
            return self.getToken(HogQLParser.INNER, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_arrayJoinClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayJoinClause" ):
                return visitor.visitArrayJoinClause(self)
            else:
                return visitor.visitChildren(self)




    def arrayJoinClause(self):

        localctx = HogQLParser.ArrayJoinClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_arrayJoinClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 388
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==42 or _la==49:
                self.state = 387
                _la = self._input.LA(1)
                if not(_la==42 or _la==49):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 390
            self.match(HogQLParser.ARRAY)
            self.state = 391
            self.match(HogQLParser.JOIN)
            self.state = 392
            self.columnExprList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WINDOW(self):
            return self.getToken(HogQLParser.WINDOW, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(HogQLParser.IdentifierContext,i)


        def AS(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.AS)
            else:
                return self.getToken(HogQLParser.AS, i)

        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.LPAREN)
            else:
                return self.getToken(HogQLParser.LPAREN, i)

        def windowExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.WindowExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.WindowExprContext,i)


        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.RPAREN)
            else:
                return self.getToken(HogQLParser.RPAREN, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_windowClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindowClause" ):
                return visitor.visitWindowClause(self)
            else:
                return visitor.visitChildren(self)




    def windowClause(self):

        localctx = HogQLParser.WindowClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_windowClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 394
            self.match(HogQLParser.WINDOW)
            self.state = 395
            self.identifier()
            self.state = 396
            self.match(HogQLParser.AS)
            self.state = 397
            self.match(HogQLParser.LPAREN)
            self.state = 398
            self.windowExpr()
            self.state = 399
            self.match(HogQLParser.RPAREN)
            self.state = 409
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==112:
                self.state = 400
                self.match(HogQLParser.COMMA)
                self.state = 401
                self.identifier()
                self.state = 402
                self.match(HogQLParser.AS)
                self.state = 403
                self.match(HogQLParser.LPAREN)
                self.state = 404
                self.windowExpr()
                self.state = 405
                self.match(HogQLParser.RPAREN)
                self.state = 411
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrewhereClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PREWHERE(self):
            return self.getToken(HogQLParser.PREWHERE, 0)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_prewhereClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrewhereClause" ):
                return visitor.visitPrewhereClause(self)
            else:
                return visitor.visitChildren(self)




    def prewhereClause(self):

        localctx = HogQLParser.PrewhereClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_prewhereClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 412
            self.match(HogQLParser.PREWHERE)
            self.state = 413
            self.columnExpr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhereClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(HogQLParser.WHERE, 0)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_whereClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhereClause" ):
                return visitor.visitWhereClause(self)
            else:
                return visitor.visitChildren(self)




    def whereClause(self):

        localctx = HogQLParser.WhereClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_whereClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 415
            self.match(HogQLParser.WHERE)
            self.state = 416
            self.columnExpr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GROUP(self):
            return self.getToken(HogQLParser.GROUP, 0)

        def BY(self):
            return self.getToken(HogQLParser.BY, 0)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def CUBE(self):
            return self.getToken(HogQLParser.CUBE, 0)

        def ROLLUP(self):
            return self.getToken(HogQLParser.ROLLUP, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_groupByClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroupByClause" ):
                return visitor.visitGroupByClause(self)
            else:
                return visitor.visitChildren(self)




    def groupByClause(self):

        localctx = HogQLParser.GroupByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_groupByClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 418
            self.match(HogQLParser.GROUP)
            self.state = 419
            self.match(HogQLParser.BY)
            self.state = 426
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
            if la_ == 1:
                self.state = 420
                _la = self._input.LA(1)
                if not(_la==17 or _la==72):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 421
                self.match(HogQLParser.LPAREN)
                self.state = 422
                self.columnExprList()
                self.state = 423
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 2:
                self.state = 425
                self.columnExprList()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HavingClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HAVING(self):
            return self.getToken(HogQLParser.HAVING, 0)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_havingClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHavingClause" ):
                return visitor.visitHavingClause(self)
            else:
                return visitor.visitChildren(self)




    def havingClause(self):

        localctx = HogQLParser.HavingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_havingClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 428
            self.match(HogQLParser.HAVING)
            self.state = 429
            self.columnExpr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(HogQLParser.ORDER, 0)

        def BY(self):
            return self.getToken(HogQLParser.BY, 0)

        def orderExprList(self):
            return self.getTypedRuleContext(HogQLParser.OrderExprListContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_orderByClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrderByClause" ):
                return visitor.visitOrderByClause(self)
            else:
                return visitor.visitChildren(self)




    def orderByClause(self):

        localctx = HogQLParser.OrderByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_orderByClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 431
            self.match(HogQLParser.ORDER)
            self.state = 432
            self.match(HogQLParser.BY)
            self.state = 433
            self.orderExprList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProjectionOrderByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(HogQLParser.ORDER, 0)

        def BY(self):
            return self.getToken(HogQLParser.BY, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_projectionOrderByClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProjectionOrderByClause" ):
                return visitor.visitProjectionOrderByClause(self)
            else:
                return visitor.visitChildren(self)




    def projectionOrderByClause(self):

        localctx = HogQLParser.ProjectionOrderByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_projectionOrderByClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 435
            self.match(HogQLParser.ORDER)
            self.state = 436
            self.match(HogQLParser.BY)
            self.state = 437
            self.columnExprList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LimitAndOffsetClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIMIT(self):
            return self.getToken(HogQLParser.LIMIT, 0)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)


        def COMMA(self):
            return self.getToken(HogQLParser.COMMA, 0)

        def BY(self):
            return self.getToken(HogQLParser.BY, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def WITH(self):
            return self.getToken(HogQLParser.WITH, 0)

        def TIES(self):
            return self.getToken(HogQLParser.TIES, 0)

        def OFFSET(self):
            return self.getToken(HogQLParser.OFFSET, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_limitAndOffsetClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLimitAndOffsetClause" ):
                return visitor.visitLimitAndOffsetClause(self)
            else:
                return visitor.visitChildren(self)




    def limitAndOffsetClause(self):

        localctx = HogQLParser.LimitAndOffsetClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_limitAndOffsetClause)
        self._la = 0 # Token type
        try:
            self.state = 468
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 439
                self.match(HogQLParser.LIMIT)
                self.state = 440
                self.columnExpr(0)
                self.state = 443
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==112:
                    self.state = 441
                    self.match(HogQLParser.COMMA)
                    self.state = 442
                    self.columnExpr(0)


                self.state = 449
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [98]:
                    self.state = 445
                    self.match(HogQLParser.WITH)
                    self.state = 446
                    self.match(HogQLParser.TIES)
                    pass
                elif token in [11]:
                    self.state = 447
                    self.match(HogQLParser.BY)
                    self.state = 448
                    self.columnExprList()
                    pass
                elif token in [-1, 79, 91, 144]:
                    pass
                else:
                    pass
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 451
                self.match(HogQLParser.LIMIT)
                self.state = 452
                self.columnExpr(0)
                self.state = 455
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==98:
                    self.state = 453
                    self.match(HogQLParser.WITH)
                    self.state = 454
                    self.match(HogQLParser.TIES)


                self.state = 457
                self.match(HogQLParser.OFFSET)
                self.state = 458
                self.columnExpr(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 460
                self.match(HogQLParser.LIMIT)
                self.state = 461
                self.columnExpr(0)
                self.state = 462
                self.match(HogQLParser.OFFSET)
                self.state = 463
                self.columnExpr(0)
                self.state = 466
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 464
                    self.match(HogQLParser.BY)
                    self.state = 465
                    self.columnExprList()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OffsetOnlyClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OFFSET(self):
            return self.getToken(HogQLParser.OFFSET, 0)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_offsetOnlyClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOffsetOnlyClause" ):
                return visitor.visitOffsetOnlyClause(self)
            else:
                return visitor.visitChildren(self)




    def offsetOnlyClause(self):

        localctx = HogQLParser.OffsetOnlyClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_offsetOnlyClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 470
            self.match(HogQLParser.OFFSET)
            self.state = 471
            self.columnExpr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SettingsClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SETTINGS(self):
            return self.getToken(HogQLParser.SETTINGS, 0)

        def settingExprList(self):
            return self.getTypedRuleContext(HogQLParser.SettingExprListContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_settingsClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSettingsClause" ):
                return visitor.visitSettingsClause(self)
            else:
                return visitor.visitChildren(self)




    def settingsClause(self):

        localctx = HogQLParser.SettingsClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_settingsClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 473
            self.match(HogQLParser.SETTINGS)
            self.state = 474
            self.settingExprList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return HogQLParser.RULE_joinExpr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class JoinExprOpContext(JoinExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.JoinExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def joinExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.JoinExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.JoinExprContext,i)

        def JOIN(self):
            return self.getToken(HogQLParser.JOIN, 0)
        def joinConstraintClause(self):
            return self.getTypedRuleContext(HogQLParser.JoinConstraintClauseContext,0)

        def joinOp(self):
            return self.getTypedRuleContext(HogQLParser.JoinOpContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinExprOp" ):
                return visitor.visitJoinExprOp(self)
            else:
                return visitor.visitChildren(self)


    class JoinExprTableContext(JoinExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.JoinExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tableExpr(self):
            return self.getTypedRuleContext(HogQLParser.TableExprContext,0)

        def FINAL(self):
            return self.getToken(HogQLParser.FINAL, 0)
        def sampleClause(self):
            return self.getTypedRuleContext(HogQLParser.SampleClauseContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinExprTable" ):
                return visitor.visitJoinExprTable(self)
            else:
                return visitor.visitChildren(self)


    class JoinExprParensContext(JoinExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.JoinExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def joinExpr(self):
            return self.getTypedRuleContext(HogQLParser.JoinExprContext,0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinExprParens" ):
                return visitor.visitJoinExprParens(self)
            else:
                return visitor.visitChildren(self)


    class JoinExprCrossOpContext(JoinExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.JoinExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def joinExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.JoinExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.JoinExprContext,i)

        def joinOpCross(self):
            return self.getTypedRuleContext(HogQLParser.JoinOpCrossContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinExprCrossOp" ):
                return visitor.visitJoinExprCrossOp(self)
            else:
                return visitor.visitChildren(self)



    def joinExpr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = HogQLParser.JoinExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 70
        self.enterRecursionRule(localctx, 70, self.RULE_joinExpr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 488
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
            if la_ == 1:
                localctx = HogQLParser.JoinExprTableContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 477
                self.tableExpr(0)
                self.state = 479
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
                if la_ == 1:
                    self.state = 478
                    self.match(HogQLParser.FINAL)


                self.state = 482
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
                if la_ == 1:
                    self.state = 481
                    self.sampleClause()


                pass

            elif la_ == 2:
                localctx = HogQLParser.JoinExprParensContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 484
                self.match(HogQLParser.LPAREN)
                self.state = 485
                self.joinExpr(0)
                self.state = 486
                self.match(HogQLParser.RPAREN)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 504
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,51,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 502
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
                    if la_ == 1:
                        localctx = HogQLParser.JoinExprCrossOpContext(self, HogQLParser.JoinExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_joinExpr)
                        self.state = 490
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 491
                        self.joinOpCross()
                        self.state = 492
                        self.joinExpr(4)
                        pass

                    elif la_ == 2:
                        localctx = HogQLParser.JoinExprOpContext(self, HogQLParser.JoinExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_joinExpr)
                        self.state = 494
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 496
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & 567356589867290) != 0) or _la==71 or _la==78:
                            self.state = 495
                            self.joinOp()


                        self.state = 498
                        self.match(HogQLParser.JOIN)
                        self.state = 499
                        self.joinExpr(0)
                        self.state = 500
                        self.joinConstraintClause()
                        pass

             
                self.state = 506
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,51,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class JoinOpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return HogQLParser.RULE_joinOp

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class JoinOpFullContext(JoinOpContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.JoinOpContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FULL(self):
            return self.getToken(HogQLParser.FULL, 0)
        def OUTER(self):
            return self.getToken(HogQLParser.OUTER, 0)
        def ALL(self):
            return self.getToken(HogQLParser.ALL, 0)
        def ANY(self):
            return self.getToken(HogQLParser.ANY, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinOpFull" ):
                return visitor.visitJoinOpFull(self)
            else:
                return visitor.visitChildren(self)


    class JoinOpInnerContext(JoinOpContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.JoinOpContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INNER(self):
            return self.getToken(HogQLParser.INNER, 0)
        def ALL(self):
            return self.getToken(HogQLParser.ALL, 0)
        def ANY(self):
            return self.getToken(HogQLParser.ANY, 0)
        def ASOF(self):
            return self.getToken(HogQLParser.ASOF, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinOpInner" ):
                return visitor.visitJoinOpInner(self)
            else:
                return visitor.visitChildren(self)


    class JoinOpLeftRightContext(JoinOpContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.JoinOpContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LEFT(self):
            return self.getToken(HogQLParser.LEFT, 0)
        def RIGHT(self):
            return self.getToken(HogQLParser.RIGHT, 0)
        def OUTER(self):
            return self.getToken(HogQLParser.OUTER, 0)
        def SEMI(self):
            return self.getToken(HogQLParser.SEMI, 0)
        def ALL(self):
            return self.getToken(HogQLParser.ALL, 0)
        def ANTI(self):
            return self.getToken(HogQLParser.ANTI, 0)
        def ANY(self):
            return self.getToken(HogQLParser.ANY, 0)
        def ASOF(self):
            return self.getToken(HogQLParser.ASOF, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinOpLeftRight" ):
                return visitor.visitJoinOpLeftRight(self)
            else:
                return visitor.visitChildren(self)



    def joinOp(self):

        localctx = HogQLParser.JoinOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_joinOp)
        self._la = 0 # Token type
        try:
            self.state = 550
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
            if la_ == 1:
                localctx = HogQLParser.JoinOpInnerContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 516
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
                if la_ == 1:
                    self.state = 508
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 274) != 0):
                        self.state = 507
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 274) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 510
                    self.match(HogQLParser.INNER)
                    pass

                elif la_ == 2:
                    self.state = 511
                    self.match(HogQLParser.INNER)
                    self.state = 513
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 274) != 0):
                        self.state = 512
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 274) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    pass

                elif la_ == 3:
                    self.state = 515
                    _la = self._input.LA(1)
                    if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 274) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass


                pass

            elif la_ == 2:
                localctx = HogQLParser.JoinOpLeftRightContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 532
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
                if la_ == 1:
                    self.state = 519
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 282) != 0) or _la==78:
                        self.state = 518
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 282) != 0) or _la==78):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 521
                    _la = self._input.LA(1)
                    if not(_la==49 or _la==71):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 523
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==63:
                        self.state = 522
                        self.match(HogQLParser.OUTER)


                    pass

                elif la_ == 2:
                    self.state = 525
                    _la = self._input.LA(1)
                    if not(_la==49 or _la==71):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 527
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==63:
                        self.state = 526
                        self.match(HogQLParser.OUTER)


                    self.state = 530
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 282) != 0) or _la==78:
                        self.state = 529
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 282) != 0) or _la==78):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    pass


                pass

            elif la_ == 3:
                localctx = HogQLParser.JoinOpFullContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 548
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
                if la_ == 1:
                    self.state = 535
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1 or _la==4:
                        self.state = 534
                        _la = self._input.LA(1)
                        if not(_la==1 or _la==4):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 537
                    self.match(HogQLParser.FULL)
                    self.state = 539
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==63:
                        self.state = 538
                        self.match(HogQLParser.OUTER)


                    pass

                elif la_ == 2:
                    self.state = 541
                    self.match(HogQLParser.FULL)
                    self.state = 543
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==63:
                        self.state = 542
                        self.match(HogQLParser.OUTER)


                    self.state = 546
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1 or _la==4:
                        self.state = 545
                        _la = self._input.LA(1)
                        if not(_la==1 or _la==4):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    pass


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinOpCrossContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CROSS(self):
            return self.getToken(HogQLParser.CROSS, 0)

        def JOIN(self):
            return self.getToken(HogQLParser.JOIN, 0)

        def COMMA(self):
            return self.getToken(HogQLParser.COMMA, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_joinOpCross

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinOpCross" ):
                return visitor.visitJoinOpCross(self)
            else:
                return visitor.visitChildren(self)




    def joinOpCross(self):

        localctx = HogQLParser.JoinOpCrossContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_joinOpCross)
        try:
            self.state = 555
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [16]:
                self.enterOuterAlt(localctx, 1)
                self.state = 552
                self.match(HogQLParser.CROSS)
                self.state = 553
                self.match(HogQLParser.JOIN)
                pass
            elif token in [112]:
                self.enterOuterAlt(localctx, 2)
                self.state = 554
                self.match(HogQLParser.COMMA)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinConstraintClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(HogQLParser.ON, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def USING(self):
            return self.getToken(HogQLParser.USING, 0)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_joinConstraintClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinConstraintClause" ):
                return visitor.visitJoinConstraintClause(self)
            else:
                return visitor.visitChildren(self)




    def joinConstraintClause(self):

        localctx = HogQLParser.JoinConstraintClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_joinConstraintClause)
        try:
            self.state = 566
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,67,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 557
                self.match(HogQLParser.ON)
                self.state = 558
                self.columnExprList()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 559
                self.match(HogQLParser.USING)
                self.state = 560
                self.match(HogQLParser.LPAREN)
                self.state = 561
                self.columnExprList()
                self.state = 562
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 564
                self.match(HogQLParser.USING)
                self.state = 565
                self.columnExprList()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SampleClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SAMPLE(self):
            return self.getToken(HogQLParser.SAMPLE, 0)

        def ratioExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.RatioExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.RatioExprContext,i)


        def OFFSET(self):
            return self.getToken(HogQLParser.OFFSET, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_sampleClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSampleClause" ):
                return visitor.visitSampleClause(self)
            else:
                return visitor.visitChildren(self)




    def sampleClause(self):

        localctx = HogQLParser.SampleClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_sampleClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 568
            self.match(HogQLParser.SAMPLE)
            self.state = 569
            self.ratioExpr()
            self.state = 572
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
            if la_ == 1:
                self.state = 570
                self.match(HogQLParser.OFFSET)
                self.state = 571
                self.ratioExpr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderExprListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def orderExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.OrderExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.OrderExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_orderExprList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrderExprList" ):
                return visitor.visitOrderExprList(self)
            else:
                return visitor.visitChildren(self)




    def orderExprList(self):

        localctx = HogQLParser.OrderExprListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_orderExprList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 574
            self.orderExpr()
            self.state = 579
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==112:
                self.state = 575
                self.match(HogQLParser.COMMA)
                self.state = 576
                self.orderExpr()
                self.state = 581
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def NULLS(self):
            return self.getToken(HogQLParser.NULLS, 0)

        def COLLATE(self):
            return self.getToken(HogQLParser.COLLATE, 0)

        def STRING_LITERAL(self):
            return self.getToken(HogQLParser.STRING_LITERAL, 0)

        def ASCENDING(self):
            return self.getToken(HogQLParser.ASCENDING, 0)

        def DESCENDING(self):
            return self.getToken(HogQLParser.DESCENDING, 0)

        def DESC(self):
            return self.getToken(HogQLParser.DESC, 0)

        def FIRST(self):
            return self.getToken(HogQLParser.FIRST, 0)

        def LAST(self):
            return self.getToken(HogQLParser.LAST, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_orderExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrderExpr" ):
                return visitor.visitOrderExpr(self)
            else:
                return visitor.visitChildren(self)




    def orderExpr(self):

        localctx = HogQLParser.OrderExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_orderExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 582
            self.columnExpr(0)
            self.state = 584
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 6291584) != 0):
                self.state = 583
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 6291584) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 588
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==58:
                self.state = 586
                self.match(HogQLParser.NULLS)
                self.state = 587
                _la = self._input.LA(1)
                if not(_la==28 or _la==47):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 592
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==15:
                self.state = 590
                self.match(HogQLParser.COLLATE)
                self.state = 591
                self.match(HogQLParser.STRING_LITERAL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RatioExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def placeholder(self):
            return self.getTypedRuleContext(HogQLParser.PlaceholderContext,0)


        def numberLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.NumberLiteralContext)
            else:
                return self.getTypedRuleContext(HogQLParser.NumberLiteralContext,i)


        def SLASH(self):
            return self.getToken(HogQLParser.SLASH, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_ratioExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRatioExpr" ):
                return visitor.visitRatioExpr(self)
            else:
                return visitor.visitChildren(self)




    def ratioExpr(self):

        localctx = HogQLParser.RatioExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_ratioExpr)
        try:
            self.state = 600
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [124]:
                self.enterOuterAlt(localctx, 1)
                self.state = 594
                self.placeholder()
                pass
            elif token in [41, 55, 102, 103, 104, 105, 114, 116, 134]:
                self.enterOuterAlt(localctx, 2)
                self.state = 595
                self.numberLiteral()
                self.state = 598
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
                if la_ == 1:
                    self.state = 596
                    self.match(HogQLParser.SLASH)
                    self.state = 597
                    self.numberLiteral()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SettingExprListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def settingExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.SettingExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.SettingExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_settingExprList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSettingExprList" ):
                return visitor.visitSettingExprList(self)
            else:
                return visitor.visitChildren(self)




    def settingExprList(self):

        localctx = HogQLParser.SettingExprListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_settingExprList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 602
            self.settingExpr()
            self.state = 607
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==112:
                self.state = 603
                self.match(HogQLParser.COMMA)
                self.state = 604
                self.settingExpr()
                self.state = 609
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SettingExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def EQ_SINGLE(self):
            return self.getToken(HogQLParser.EQ_SINGLE, 0)

        def literal(self):
            return self.getTypedRuleContext(HogQLParser.LiteralContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_settingExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSettingExpr" ):
                return visitor.visitSettingExpr(self)
            else:
                return visitor.visitChildren(self)




    def settingExpr(self):

        localctx = HogQLParser.SettingExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_settingExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 610
            self.identifier()
            self.state = 611
            self.match(HogQLParser.EQ_SINGLE)
            self.state = 612
            self.literal()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def winPartitionByClause(self):
            return self.getTypedRuleContext(HogQLParser.WinPartitionByClauseContext,0)


        def winOrderByClause(self):
            return self.getTypedRuleContext(HogQLParser.WinOrderByClauseContext,0)


        def winFrameClause(self):
            return self.getTypedRuleContext(HogQLParser.WinFrameClauseContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_windowExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindowExpr" ):
                return visitor.visitWindowExpr(self)
            else:
                return visitor.visitChildren(self)




    def windowExpr(self):

        localctx = HogQLParser.WindowExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_windowExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 615
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==65:
                self.state = 614
                self.winPartitionByClause()


            self.state = 618
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==62:
                self.state = 617
                self.winOrderByClause()


            self.state = 621
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==69 or _la==74:
                self.state = 620
                self.winFrameClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WinPartitionByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION(self):
            return self.getToken(HogQLParser.PARTITION, 0)

        def BY(self):
            return self.getToken(HogQLParser.BY, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_winPartitionByClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWinPartitionByClause" ):
                return visitor.visitWinPartitionByClause(self)
            else:
                return visitor.visitChildren(self)




    def winPartitionByClause(self):

        localctx = HogQLParser.WinPartitionByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_winPartitionByClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 623
            self.match(HogQLParser.PARTITION)
            self.state = 624
            self.match(HogQLParser.BY)
            self.state = 625
            self.columnExprList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WinOrderByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(HogQLParser.ORDER, 0)

        def BY(self):
            return self.getToken(HogQLParser.BY, 0)

        def orderExprList(self):
            return self.getTypedRuleContext(HogQLParser.OrderExprListContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_winOrderByClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWinOrderByClause" ):
                return visitor.visitWinOrderByClause(self)
            else:
                return visitor.visitChildren(self)




    def winOrderByClause(self):

        localctx = HogQLParser.WinOrderByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_winOrderByClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 627
            self.match(HogQLParser.ORDER)
            self.state = 628
            self.match(HogQLParser.BY)
            self.state = 629
            self.orderExprList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WinFrameClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def winFrameExtend(self):
            return self.getTypedRuleContext(HogQLParser.WinFrameExtendContext,0)


        def ROWS(self):
            return self.getToken(HogQLParser.ROWS, 0)

        def RANGE(self):
            return self.getToken(HogQLParser.RANGE, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_winFrameClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWinFrameClause" ):
                return visitor.visitWinFrameClause(self)
            else:
                return visitor.visitChildren(self)




    def winFrameClause(self):

        localctx = HogQLParser.WinFrameClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_winFrameClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 631
            _la = self._input.LA(1)
            if not(_la==69 or _la==74):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 632
            self.winFrameExtend()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WinFrameExtendContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return HogQLParser.RULE_winFrameExtend

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class FrameStartContext(WinFrameExtendContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.WinFrameExtendContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def winFrameBound(self):
            return self.getTypedRuleContext(HogQLParser.WinFrameBoundContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFrameStart" ):
                return visitor.visitFrameStart(self)
            else:
                return visitor.visitChildren(self)


    class FrameBetweenContext(WinFrameExtendContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.WinFrameExtendContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BETWEEN(self):
            return self.getToken(HogQLParser.BETWEEN, 0)
        def winFrameBound(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.WinFrameBoundContext)
            else:
                return self.getTypedRuleContext(HogQLParser.WinFrameBoundContext,i)

        def AND(self):
            return self.getToken(HogQLParser.AND, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFrameBetween" ):
                return visitor.visitFrameBetween(self)
            else:
                return visitor.visitChildren(self)



    def winFrameExtend(self):

        localctx = HogQLParser.WinFrameExtendContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_winFrameExtend)
        try:
            self.state = 640
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [18, 41, 55, 90, 102, 103, 104, 105, 114, 116, 134]:
                localctx = HogQLParser.FrameStartContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 634
                self.winFrameBound()
                pass
            elif token in [9]:
                localctx = HogQLParser.FrameBetweenContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 635
                self.match(HogQLParser.BETWEEN)
                self.state = 636
                self.winFrameBound()
                self.state = 637
                self.match(HogQLParser.AND)
                self.state = 638
                self.winFrameBound()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WinFrameBoundContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CURRENT(self):
            return self.getToken(HogQLParser.CURRENT, 0)

        def ROW(self):
            return self.getToken(HogQLParser.ROW, 0)

        def UNBOUNDED(self):
            return self.getToken(HogQLParser.UNBOUNDED, 0)

        def PRECEDING(self):
            return self.getToken(HogQLParser.PRECEDING, 0)

        def FOLLOWING(self):
            return self.getToken(HogQLParser.FOLLOWING, 0)

        def numberLiteral(self):
            return self.getTypedRuleContext(HogQLParser.NumberLiteralContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_winFrameBound

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWinFrameBound" ):
                return visitor.visitWinFrameBound(self)
            else:
                return visitor.visitChildren(self)




    def winFrameBound(self):

        localctx = HogQLParser.WinFrameBoundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_winFrameBound)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 654
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
            if la_ == 1:
                self.state = 642
                self.match(HogQLParser.CURRENT)
                self.state = 643
                self.match(HogQLParser.ROW)
                pass

            elif la_ == 2:
                self.state = 644
                self.match(HogQLParser.UNBOUNDED)
                self.state = 645
                self.match(HogQLParser.PRECEDING)
                pass

            elif la_ == 3:
                self.state = 646
                self.match(HogQLParser.UNBOUNDED)
                self.state = 647
                self.match(HogQLParser.FOLLOWING)
                pass

            elif la_ == 4:
                self.state = 648
                self.numberLiteral()
                self.state = 649
                self.match(HogQLParser.PRECEDING)
                pass

            elif la_ == 5:
                self.state = 651
                self.numberLiteral()
                self.state = 652
                self.match(HogQLParser.FOLLOWING)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def EOF(self):
            return self.getToken(HogQLParser.EOF, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_expr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpr" ):
                return visitor.visitExpr(self)
            else:
                return visitor.visitChildren(self)




    def expr(self):

        localctx = HogQLParser.ExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 656
            self.columnExpr(0)
            self.state = 657
            self.match(HogQLParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnTypeExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return HogQLParser.RULE_columnTypeExpr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ColumnTypeExprNestedContext(ColumnTypeExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnTypeExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(HogQLParser.IdentifierContext,i)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def columnTypeExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnTypeExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnTypeExprContext,i)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnTypeExprNested" ):
                return visitor.visitColumnTypeExprNested(self)
            else:
                return visitor.visitChildren(self)


    class ColumnTypeExprParamContext(ColumnTypeExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnTypeExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)
        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnTypeExprParam" ):
                return visitor.visitColumnTypeExprParam(self)
            else:
                return visitor.visitChildren(self)


    class ColumnTypeExprSimpleContext(ColumnTypeExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnTypeExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnTypeExprSimple" ):
                return visitor.visitColumnTypeExprSimple(self)
            else:
                return visitor.visitChildren(self)


    class ColumnTypeExprComplexContext(ColumnTypeExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnTypeExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def columnTypeExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnTypeExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnTypeExprContext,i)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnTypeExprComplex" ):
                return visitor.visitColumnTypeExprComplex(self)
            else:
                return visitor.visitChildren(self)


    class ColumnTypeExprEnumContext(ColumnTypeExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnTypeExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def enumValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.EnumValueContext)
            else:
                return self.getTypedRuleContext(HogQLParser.EnumValueContext,i)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnTypeExprEnum" ):
                return visitor.visitColumnTypeExprEnum(self)
            else:
                return visitor.visitChildren(self)



    def columnTypeExpr(self):

        localctx = HogQLParser.ColumnTypeExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_columnTypeExpr)
        self._la = 0 # Token type
        try:
            self.state = 715
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
            if la_ == 1:
                localctx = HogQLParser.ColumnTypeExprSimpleContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 659
                self.identifier()
                pass

            elif la_ == 2:
                localctx = HogQLParser.ColumnTypeExprNestedContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 660
                self.identifier()
                self.state = 661
                self.match(HogQLParser.LPAREN)
                self.state = 662
                self.identifier()
                self.state = 663
                self.columnTypeExpr()
                self.state = 670
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,81,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 664
                        self.match(HogQLParser.COMMA)
                        self.state = 665
                        self.identifier()
                        self.state = 666
                        self.columnTypeExpr() 
                    self.state = 672
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,81,self._ctx)

                self.state = 674
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==112:
                    self.state = 673
                    self.match(HogQLParser.COMMA)


                self.state = 676
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 3:
                localctx = HogQLParser.ColumnTypeExprEnumContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 678
                self.identifier()
                self.state = 679
                self.match(HogQLParser.LPAREN)
                self.state = 680
                self.enumValue()
                self.state = 685
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,83,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 681
                        self.match(HogQLParser.COMMA)
                        self.state = 682
                        self.enumValue() 
                    self.state = 687
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,83,self._ctx)

                self.state = 689
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==112:
                    self.state = 688
                    self.match(HogQLParser.COMMA)


                self.state = 691
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 4:
                localctx = HogQLParser.ColumnTypeExprComplexContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 693
                self.identifier()
                self.state = 694
                self.match(HogQLParser.LPAREN)
                self.state = 695
                self.columnTypeExpr()
                self.state = 700
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,85,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 696
                        self.match(HogQLParser.COMMA)
                        self.state = 697
                        self.columnTypeExpr() 
                    self.state = 702
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,85,self._ctx)

                self.state = 704
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==112:
                    self.state = 703
                    self.match(HogQLParser.COMMA)


                self.state = 706
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 5:
                localctx = HogQLParser.ColumnTypeExprParamContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 708
                self.identifier()
                self.state = 709
                self.match(HogQLParser.LPAREN)
                self.state = 711
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -1125900443713538) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 8076106347046764543) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 577) != 0):
                    self.state = 710
                    self.columnExprList()


                self.state = 713
                self.match(HogQLParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnExprListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_columnExprList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprList" ):
                return visitor.visitColumnExprList(self)
            else:
                return visitor.visitChildren(self)




    def columnExprList(self):

        localctx = HogQLParser.ColumnExprListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_columnExprList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 717
            self.columnExpr(0)
            self.state = 722
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,89,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 718
                    self.match(HogQLParser.COMMA)
                    self.state = 719
                    self.columnExpr(0) 
                self.state = 724
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,89,self._ctx)

            self.state = 726
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
            if la_ == 1:
                self.state = 725
                self.match(HogQLParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return HogQLParser.RULE_columnExpr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class ColumnExprTernaryOpContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def QUERY(self):
            return self.getToken(HogQLParser.QUERY, 0)
        def COLON(self):
            return self.getToken(HogQLParser.COLON, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprTernaryOp" ):
                return visitor.visitColumnExprTernaryOp(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprAliasContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def AS(self):
            return self.getToken(HogQLParser.AS, 0)
        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)

        def STRING_LITERAL(self):
            return self.getToken(HogQLParser.STRING_LITERAL, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprAlias" ):
                return visitor.visitColumnExprAlias(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprNegateContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DASH(self):
            return self.getToken(HogQLParser.DASH, 0)
        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprNegate" ):
                return visitor.visitColumnExprNegate(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprDictContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LBRACE(self):
            return self.getToken(HogQLParser.LBRACE, 0)
        def RBRACE(self):
            return self.getToken(HogQLParser.RBRACE, 0)
        def kvPairList(self):
            return self.getTypedRuleContext(HogQLParser.KvPairListContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprDict" ):
                return visitor.visitColumnExprDict(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprSubqueryContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def selectUnionStmt(self):
            return self.getTypedRuleContext(HogQLParser.SelectUnionStmtContext,0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprSubquery" ):
                return visitor.visitColumnExprSubquery(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprLiteralContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def literal(self):
            return self.getTypedRuleContext(HogQLParser.LiteralContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprLiteral" ):
                return visitor.visitColumnExprLiteral(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprArrayContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LBRACKET(self):
            return self.getToken(HogQLParser.LBRACKET, 0)
        def RBRACKET(self):
            return self.getToken(HogQLParser.RBRACKET, 0)
        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprArray" ):
                return visitor.visitColumnExprArray(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprSubstringContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SUBSTRING(self):
            return self.getToken(HogQLParser.SUBSTRING, 0)
        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def FROM(self):
            return self.getToken(HogQLParser.FROM, 0)
        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)
        def FOR(self):
            return self.getToken(HogQLParser.FOR, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprSubstring" ):
                return visitor.visitColumnExprSubstring(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprCastContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CAST(self):
            return self.getToken(HogQLParser.CAST, 0)
        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def AS(self):
            return self.getToken(HogQLParser.AS, 0)
        def columnTypeExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnTypeExprContext,0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprCast" ):
                return visitor.visitColumnExprCast(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprOrContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def OR(self):
            return self.getToken(HogQLParser.OR, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprOr" ):
                return visitor.visitColumnExprOr(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprPrecedence1Context(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.left = None # ColumnExprContext
            self.operator = None # Token
            self.right = None # ColumnExprContext
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def ASTERISK(self):
            return self.getToken(HogQLParser.ASTERISK, 0)
        def SLASH(self):
            return self.getToken(HogQLParser.SLASH, 0)
        def PERCENT(self):
            return self.getToken(HogQLParser.PERCENT, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprPrecedence1" ):
                return visitor.visitColumnExprPrecedence1(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprPrecedence2Context(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.left = None # ColumnExprContext
            self.operator = None # Token
            self.right = None # ColumnExprContext
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def PLUS(self):
            return self.getToken(HogQLParser.PLUS, 0)
        def DASH(self):
            return self.getToken(HogQLParser.DASH, 0)
        def CONCAT(self):
            return self.getToken(HogQLParser.CONCAT, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprPrecedence2" ):
                return visitor.visitColumnExprPrecedence2(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprPrecedence3Context(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.left = None # ColumnExprContext
            self.operator = None # Token
            self.right = None # ColumnExprContext
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def IN(self):
            return self.getToken(HogQLParser.IN, 0)
        def EQ_DOUBLE(self):
            return self.getToken(HogQLParser.EQ_DOUBLE, 0)
        def EQ_SINGLE(self):
            return self.getToken(HogQLParser.EQ_SINGLE, 0)
        def NOT_EQ(self):
            return self.getToken(HogQLParser.NOT_EQ, 0)
        def LT_EQ(self):
            return self.getToken(HogQLParser.LT_EQ, 0)
        def LT(self):
            return self.getToken(HogQLParser.LT, 0)
        def GT_EQ(self):
            return self.getToken(HogQLParser.GT_EQ, 0)
        def GT(self):
            return self.getToken(HogQLParser.GT, 0)
        def LIKE(self):
            return self.getToken(HogQLParser.LIKE, 0)
        def ILIKE(self):
            return self.getToken(HogQLParser.ILIKE, 0)
        def REGEX_SINGLE(self):
            return self.getToken(HogQLParser.REGEX_SINGLE, 0)
        def REGEX_DOUBLE(self):
            return self.getToken(HogQLParser.REGEX_DOUBLE, 0)
        def NOT_REGEX(self):
            return self.getToken(HogQLParser.NOT_REGEX, 0)
        def IREGEX_SINGLE(self):
            return self.getToken(HogQLParser.IREGEX_SINGLE, 0)
        def IREGEX_DOUBLE(self):
            return self.getToken(HogQLParser.IREGEX_DOUBLE, 0)
        def NOT_IREGEX(self):
            return self.getToken(HogQLParser.NOT_IREGEX, 0)
        def COHORT(self):
            return self.getToken(HogQLParser.COHORT, 0)
        def NOT(self):
            return self.getToken(HogQLParser.NOT, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprPrecedence3" ):
                return visitor.visitColumnExprPrecedence3(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprIntervalContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INTERVAL(self):
            return self.getToken(HogQLParser.INTERVAL, 0)
        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def interval(self):
            return self.getTypedRuleContext(HogQLParser.IntervalContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprInterval" ):
                return visitor.visitColumnExprInterval(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprIsNullContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def IS(self):
            return self.getToken(HogQLParser.IS, 0)
        def NULL_SQL(self):
            return self.getToken(HogQLParser.NULL_SQL, 0)
        def NOT(self):
            return self.getToken(HogQLParser.NOT, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprIsNull" ):
                return visitor.visitColumnExprIsNull(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprWinFunctionTargetContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(HogQLParser.IdentifierContext,i)

        def OVER(self):
            return self.getToken(HogQLParser.OVER, 0)
        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.LPAREN)
            else:
                return self.getToken(HogQLParser.LPAREN, i)
        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.RPAREN)
            else:
                return self.getToken(HogQLParser.RPAREN, i)
        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)

        def DISTINCT(self):
            return self.getToken(HogQLParser.DISTINCT, 0)
        def columnArgList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnArgListContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprWinFunctionTarget" ):
                return visitor.visitColumnExprWinFunctionTarget(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprTrimContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TRIM(self):
            return self.getToken(HogQLParser.TRIM, 0)
        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def string(self):
            return self.getTypedRuleContext(HogQLParser.StringContext,0)

        def FROM(self):
            return self.getToken(HogQLParser.FROM, 0)
        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)
        def BOTH(self):
            return self.getToken(HogQLParser.BOTH, 0)
        def LEADING(self):
            return self.getToken(HogQLParser.LEADING, 0)
        def TRAILING(self):
            return self.getToken(HogQLParser.TRAILING, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprTrim" ):
                return visitor.visitColumnExprTrim(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprTagElementContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def hogqlxTagElement(self):
            return self.getTypedRuleContext(HogQLParser.HogqlxTagElementContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprTagElement" ):
                return visitor.visitColumnExprTagElement(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprTemplateStringContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def templateString(self):
            return self.getTypedRuleContext(HogQLParser.TemplateStringContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprTemplateString" ):
                return visitor.visitColumnExprTemplateString(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprTupleContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprTuple" ):
                return visitor.visitColumnExprTuple(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprArrayAccessContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def LBRACKET(self):
            return self.getToken(HogQLParser.LBRACKET, 0)
        def RBRACKET(self):
            return self.getToken(HogQLParser.RBRACKET, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprArrayAccess" ):
                return visitor.visitColumnExprArrayAccess(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprBetweenContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def BETWEEN(self):
            return self.getToken(HogQLParser.BETWEEN, 0)
        def AND(self):
            return self.getToken(HogQLParser.AND, 0)
        def NOT(self):
            return self.getToken(HogQLParser.NOT, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprBetween" ):
                return visitor.visitColumnExprBetween(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprPropertyAccessContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def DOT(self):
            return self.getToken(HogQLParser.DOT, 0)
        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprPropertyAccess" ):
                return visitor.visitColumnExprPropertyAccess(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprParensContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprParens" ):
                return visitor.visitColumnExprParens(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprTimestampContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TIMESTAMP(self):
            return self.getToken(HogQLParser.TIMESTAMP, 0)
        def STRING_LITERAL(self):
            return self.getToken(HogQLParser.STRING_LITERAL, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprTimestamp" ):
                return visitor.visitColumnExprTimestamp(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprNullishContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def NULLISH(self):
            return self.getToken(HogQLParser.NULLISH, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprNullish" ):
                return visitor.visitColumnExprNullish(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprAndContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def AND(self):
            return self.getToken(HogQLParser.AND, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprAnd" ):
                return visitor.visitColumnExprAnd(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprTupleAccessContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def DOT(self):
            return self.getToken(HogQLParser.DOT, 0)
        def DECIMAL_LITERAL(self):
            return self.getToken(HogQLParser.DECIMAL_LITERAL, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprTupleAccess" ):
                return visitor.visitColumnExprTupleAccess(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprCaseContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.caseExpr = None # ColumnExprContext
            self.whenExpr = None # ColumnExprContext
            self.thenExpr = None # ColumnExprContext
            self.elseExpr = None # ColumnExprContext
            self.copyFrom(ctx)

        def CASE(self):
            return self.getToken(HogQLParser.CASE, 0)
        def END(self):
            return self.getToken(HogQLParser.END, 0)
        def WHEN(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.WHEN)
            else:
                return self.getToken(HogQLParser.WHEN, i)
        def THEN(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.THEN)
            else:
                return self.getToken(HogQLParser.THEN, i)
        def ELSE(self):
            return self.getToken(HogQLParser.ELSE, 0)
        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprCase" ):
                return visitor.visitColumnExprCase(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprDateContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DATE(self):
            return self.getToken(HogQLParser.DATE, 0)
        def STRING_LITERAL(self):
            return self.getToken(HogQLParser.STRING_LITERAL, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprDate" ):
                return visitor.visitColumnExprDate(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprNotContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NOT(self):
            return self.getToken(HogQLParser.NOT, 0)
        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprNot" ):
                return visitor.visitColumnExprNot(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprWinFunctionContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)

        def OVER(self):
            return self.getToken(HogQLParser.OVER, 0)
        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.LPAREN)
            else:
                return self.getToken(HogQLParser.LPAREN, i)
        def windowExpr(self):
            return self.getTypedRuleContext(HogQLParser.WindowExprContext,0)

        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.RPAREN)
            else:
                return self.getToken(HogQLParser.RPAREN, i)
        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)

        def DISTINCT(self):
            return self.getToken(HogQLParser.DISTINCT, 0)
        def columnArgList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnArgListContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprWinFunction" ):
                return visitor.visitColumnExprWinFunction(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprIdentifierContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnIdentifier(self):
            return self.getTypedRuleContext(HogQLParser.ColumnIdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprIdentifier" ):
                return visitor.visitColumnExprIdentifier(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprFunctionContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)

        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.LPAREN)
            else:
                return self.getToken(HogQLParser.LPAREN, i)
        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.RPAREN)
            else:
                return self.getToken(HogQLParser.RPAREN, i)
        def DISTINCT(self):
            return self.getToken(HogQLParser.DISTINCT, 0)
        def columnArgList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnArgListContext,0)

        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprFunction" ):
                return visitor.visitColumnExprFunction(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprAsteriskContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ASTERISK(self):
            return self.getToken(HogQLParser.ASTERISK, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(HogQLParser.TableIdentifierContext,0)

        def DOT(self):
            return self.getToken(HogQLParser.DOT, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprAsterisk" ):
                return visitor.visitColumnExprAsterisk(self)
            else:
                return visitor.visitChildren(self)



    def columnExpr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = HogQLParser.ColumnExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 108
        self.enterRecursionRule(localctx, 108, self.RULE_columnExpr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 877
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,110,self._ctx)
            if la_ == 1:
                localctx = HogQLParser.ColumnExprCaseContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 729
                self.match(HogQLParser.CASE)
                self.state = 731
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,91,self._ctx)
                if la_ == 1:
                    self.state = 730
                    localctx.caseExpr = self.columnExpr(0)


                self.state = 738 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 733
                    self.match(HogQLParser.WHEN)
                    self.state = 734
                    localctx.whenExpr = self.columnExpr(0)
                    self.state = 735
                    self.match(HogQLParser.THEN)
                    self.state = 736
                    localctx.thenExpr = self.columnExpr(0)
                    self.state = 740 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==94):
                        break

                self.state = 744
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==24:
                    self.state = 742
                    self.match(HogQLParser.ELSE)
                    self.state = 743
                    localctx.elseExpr = self.columnExpr(0)


                self.state = 746
                self.match(HogQLParser.END)
                pass

            elif la_ == 2:
                localctx = HogQLParser.ColumnExprCastContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 748
                self.match(HogQLParser.CAST)
                self.state = 749
                self.match(HogQLParser.LPAREN)
                self.state = 750
                self.columnExpr(0)
                self.state = 751
                self.match(HogQLParser.AS)
                self.state = 752
                self.columnTypeExpr()
                self.state = 753
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 3:
                localctx = HogQLParser.ColumnExprDateContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 755
                self.match(HogQLParser.DATE)
                self.state = 756
                self.match(HogQLParser.STRING_LITERAL)
                pass

            elif la_ == 4:
                localctx = HogQLParser.ColumnExprIntervalContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 757
                self.match(HogQLParser.INTERVAL)
                self.state = 758
                self.columnExpr(0)
                self.state = 759
                self.interval()
                pass

            elif la_ == 5:
                localctx = HogQLParser.ColumnExprSubstringContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 761
                self.match(HogQLParser.SUBSTRING)
                self.state = 762
                self.match(HogQLParser.LPAREN)
                self.state = 763
                self.columnExpr(0)
                self.state = 764
                self.match(HogQLParser.FROM)
                self.state = 765
                self.columnExpr(0)
                self.state = 768
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==31:
                    self.state = 766
                    self.match(HogQLParser.FOR)
                    self.state = 767
                    self.columnExpr(0)


                self.state = 770
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 6:
                localctx = HogQLParser.ColumnExprTimestampContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 772
                self.match(HogQLParser.TIMESTAMP)
                self.state = 773
                self.match(HogQLParser.STRING_LITERAL)
                pass

            elif la_ == 7:
                localctx = HogQLParser.ColumnExprTrimContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 774
                self.match(HogQLParser.TRIM)
                self.state = 775
                self.match(HogQLParser.LPAREN)
                self.state = 776
                _la = self._input.LA(1)
                if not(_la==10 or _la==48 or _la==87):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 777
                self.string()
                self.state = 778
                self.match(HogQLParser.FROM)
                self.state = 779
                self.columnExpr(0)
                self.state = 780
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 8:
                localctx = HogQLParser.ColumnExprWinFunctionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 782
                self.identifier()

                self.state = 783
                self.match(HogQLParser.LPAREN)
                self.state = 785
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -1125900443713538) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 8076106347046764543) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 577) != 0):
                    self.state = 784
                    self.columnExprList()


                self.state = 787
                self.match(HogQLParser.RPAREN)
                self.state = 797
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==126:
                    self.state = 789
                    self.match(HogQLParser.LPAREN)
                    self.state = 791
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
                    if la_ == 1:
                        self.state = 790
                        self.match(HogQLParser.DISTINCT)


                    self.state = 794
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & -1125900443713538) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 8076106347046764543) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 577) != 0):
                        self.state = 793
                        self.columnArgList()


                    self.state = 796
                    self.match(HogQLParser.RPAREN)


                self.state = 799
                self.match(HogQLParser.OVER)
                self.state = 800
                self.match(HogQLParser.LPAREN)
                self.state = 801
                self.windowExpr()
                self.state = 802
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 9:
                localctx = HogQLParser.ColumnExprWinFunctionTargetContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 804
                self.identifier()

                self.state = 805
                self.match(HogQLParser.LPAREN)
                self.state = 807
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -1125900443713538) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 8076106347046764543) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 577) != 0):
                    self.state = 806
                    self.columnExprList()


                self.state = 809
                self.match(HogQLParser.RPAREN)
                self.state = 819
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==126:
                    self.state = 811
                    self.match(HogQLParser.LPAREN)
                    self.state = 813
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,100,self._ctx)
                    if la_ == 1:
                        self.state = 812
                        self.match(HogQLParser.DISTINCT)


                    self.state = 816
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & -1125900443713538) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 8076106347046764543) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 577) != 0):
                        self.state = 815
                        self.columnArgList()


                    self.state = 818
                    self.match(HogQLParser.RPAREN)


                self.state = 821
                self.match(HogQLParser.OVER)
                self.state = 822
                self.identifier()
                pass

            elif la_ == 10:
                localctx = HogQLParser.ColumnExprFunctionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 824
                self.identifier()
                self.state = 830
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,104,self._ctx)
                if la_ == 1:
                    self.state = 825
                    self.match(HogQLParser.LPAREN)
                    self.state = 827
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & -1125900443713538) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 8076106347046764543) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 577) != 0):
                        self.state = 826
                        self.columnExprList()


                    self.state = 829
                    self.match(HogQLParser.RPAREN)


                self.state = 832
                self.match(HogQLParser.LPAREN)
                self.state = 834
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
                if la_ == 1:
                    self.state = 833
                    self.match(HogQLParser.DISTINCT)


                self.state = 837
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -1125900443713538) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 8076106347046764543) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 577) != 0):
                    self.state = 836
                    self.columnArgList()


                self.state = 839
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 11:
                localctx = HogQLParser.ColumnExprTagElementContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 841
                self.hogqlxTagElement()
                pass

            elif la_ == 12:
                localctx = HogQLParser.ColumnExprTemplateStringContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 842
                self.templateString()
                pass

            elif la_ == 13:
                localctx = HogQLParser.ColumnExprLiteralContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 843
                self.literal()
                pass

            elif la_ == 14:
                localctx = HogQLParser.ColumnExprNegateContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 844
                self.match(HogQLParser.DASH)
                self.state = 845
                self.columnExpr(19)
                pass

            elif la_ == 15:
                localctx = HogQLParser.ColumnExprNotContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 846
                self.match(HogQLParser.NOT)
                self.state = 847
                self.columnExpr(13)
                pass

            elif la_ == 16:
                localctx = HogQLParser.ColumnExprAsteriskContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 851
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -181272084561788930) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 201863462911) != 0):
                    self.state = 848
                    self.tableIdentifier()
                    self.state = 849
                    self.match(HogQLParser.DOT)


                self.state = 853
                self.match(HogQLParser.ASTERISK)
                pass

            elif la_ == 17:
                localctx = HogQLParser.ColumnExprSubqueryContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 854
                self.match(HogQLParser.LPAREN)
                self.state = 855
                self.selectUnionStmt()
                self.state = 856
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 18:
                localctx = HogQLParser.ColumnExprParensContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 858
                self.match(HogQLParser.LPAREN)
                self.state = 859
                self.columnExpr(0)
                self.state = 860
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 19:
                localctx = HogQLParser.ColumnExprTupleContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 862
                self.match(HogQLParser.LPAREN)
                self.state = 863
                self.columnExprList()
                self.state = 864
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 20:
                localctx = HogQLParser.ColumnExprArrayContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 866
                self.match(HogQLParser.LBRACKET)
                self.state = 868
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -1125900443713538) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 8076106347046764543) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 577) != 0):
                    self.state = 867
                    self.columnExprList()


                self.state = 870
                self.match(HogQLParser.RBRACKET)
                pass

            elif la_ == 21:
                localctx = HogQLParser.ColumnExprDictContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 871
                self.match(HogQLParser.LBRACE)
                self.state = 873
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -1125900443713538) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 8076106347046764543) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 577) != 0):
                    self.state = 872
                    self.kvPairList()


                self.state = 875
                self.match(HogQLParser.RBRACE)
                pass

            elif la_ == 22:
                localctx = HogQLParser.ColumnExprIdentifierContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 876
                self.columnIdentifier()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 971
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,121,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 969
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,120,self._ctx)
                    if la_ == 1:
                        localctx = HogQLParser.ColumnExprPrecedence1Context(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 879
                        if not self.precpred(self._ctx, 18):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 18)")
                        self.state = 883
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [108]:
                            self.state = 880
                            localctx.operator = self.match(HogQLParser.ASTERISK)
                            pass
                        elif token in [146]:
                            self.state = 881
                            localctx.operator = self.match(HogQLParser.SLASH)
                            pass
                        elif token in [133]:
                            self.state = 882
                            localctx.operator = self.match(HogQLParser.PERCENT)
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 885
                        localctx.right = self.columnExpr(19)
                        pass

                    elif la_ == 2:
                        localctx = HogQLParser.ColumnExprPrecedence2Context(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 886
                        if not self.precpred(self._ctx, 17):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 17)")
                        self.state = 890
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [134]:
                            self.state = 887
                            localctx.operator = self.match(HogQLParser.PLUS)
                            pass
                        elif token in [114]:
                            self.state = 888
                            localctx.operator = self.match(HogQLParser.DASH)
                            pass
                        elif token in [113]:
                            self.state = 889
                            localctx.operator = self.match(HogQLParser.CONCAT)
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 892
                        localctx.right = self.columnExpr(18)
                        pass

                    elif la_ == 3:
                        localctx = HogQLParser.ColumnExprPrecedence3Context(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 893
                        if not self.precpred(self._ctx, 16):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 16)")
                        self.state = 918
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,116,self._ctx)
                        if la_ == 1:
                            self.state = 894
                            localctx.operator = self.match(HogQLParser.EQ_DOUBLE)
                            pass

                        elif la_ == 2:
                            self.state = 895
                            localctx.operator = self.match(HogQLParser.EQ_SINGLE)
                            pass

                        elif la_ == 3:
                            self.state = 896
                            localctx.operator = self.match(HogQLParser.NOT_EQ)
                            pass

                        elif la_ == 4:
                            self.state = 897
                            localctx.operator = self.match(HogQLParser.LT_EQ)
                            pass

                        elif la_ == 5:
                            self.state = 898
                            localctx.operator = self.match(HogQLParser.LT)
                            pass

                        elif la_ == 6:
                            self.state = 899
                            localctx.operator = self.match(HogQLParser.GT_EQ)
                            pass

                        elif la_ == 7:
                            self.state = 900
                            localctx.operator = self.match(HogQLParser.GT)
                            pass

                        elif la_ == 8:
                            self.state = 902
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==56:
                                self.state = 901
                                localctx.operator = self.match(HogQLParser.NOT)


                            self.state = 904
                            self.match(HogQLParser.IN)
                            self.state = 906
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
                            if la_ == 1:
                                self.state = 905
                                self.match(HogQLParser.COHORT)


                            pass

                        elif la_ == 9:
                            self.state = 909
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==56:
                                self.state = 908
                                localctx.operator = self.match(HogQLParser.NOT)


                            self.state = 911
                            _la = self._input.LA(1)
                            if not(_la==39 or _la==51):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            pass

                        elif la_ == 10:
                            self.state = 912
                            localctx.operator = self.match(HogQLParser.REGEX_SINGLE)
                            pass

                        elif la_ == 11:
                            self.state = 913
                            localctx.operator = self.match(HogQLParser.REGEX_DOUBLE)
                            pass

                        elif la_ == 12:
                            self.state = 914
                            localctx.operator = self.match(HogQLParser.NOT_REGEX)
                            pass

                        elif la_ == 13:
                            self.state = 915
                            localctx.operator = self.match(HogQLParser.IREGEX_SINGLE)
                            pass

                        elif la_ == 14:
                            self.state = 916
                            localctx.operator = self.match(HogQLParser.IREGEX_DOUBLE)
                            pass

                        elif la_ == 15:
                            self.state = 917
                            localctx.operator = self.match(HogQLParser.NOT_IREGEX)
                            pass


                        self.state = 920
                        localctx.right = self.columnExpr(17)
                        pass

                    elif la_ == 4:
                        localctx = HogQLParser.ColumnExprNullishContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 921
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 922
                        self.match(HogQLParser.NULLISH)
                        self.state = 923
                        self.columnExpr(15)
                        pass

                    elif la_ == 5:
                        localctx = HogQLParser.ColumnExprAndContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 924
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 925
                        self.match(HogQLParser.AND)
                        self.state = 926
                        self.columnExpr(13)
                        pass

                    elif la_ == 6:
                        localctx = HogQLParser.ColumnExprOrContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 927
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 928
                        self.match(HogQLParser.OR)
                        self.state = 929
                        self.columnExpr(12)
                        pass

                    elif la_ == 7:
                        localctx = HogQLParser.ColumnExprBetweenContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 930
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 932
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==56:
                            self.state = 931
                            self.match(HogQLParser.NOT)


                        self.state = 934
                        self.match(HogQLParser.BETWEEN)
                        self.state = 935
                        self.columnExpr(0)
                        self.state = 936
                        self.match(HogQLParser.AND)
                        self.state = 937
                        self.columnExpr(11)
                        pass

                    elif la_ == 8:
                        localctx = HogQLParser.ColumnExprTernaryOpContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 939
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 940
                        self.match(HogQLParser.QUERY)
                        self.state = 941
                        self.columnExpr(0)
                        self.state = 942
                        self.match(HogQLParser.COLON)
                        self.state = 943
                        self.columnExpr(9)
                        pass

                    elif la_ == 9:
                        localctx = HogQLParser.ColumnExprArrayAccessContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 945
                        if not self.precpred(self._ctx, 22):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 22)")
                        self.state = 946
                        self.match(HogQLParser.LBRACKET)
                        self.state = 947
                        self.columnExpr(0)
                        self.state = 948
                        self.match(HogQLParser.RBRACKET)
                        pass

                    elif la_ == 10:
                        localctx = HogQLParser.ColumnExprTupleAccessContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 950
                        if not self.precpred(self._ctx, 21):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 21)")
                        self.state = 951
                        self.match(HogQLParser.DOT)
                        self.state = 952
                        self.match(HogQLParser.DECIMAL_LITERAL)
                        pass

                    elif la_ == 11:
                        localctx = HogQLParser.ColumnExprPropertyAccessContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 953
                        if not self.precpred(self._ctx, 20):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 20)")
                        self.state = 954
                        self.match(HogQLParser.DOT)
                        self.state = 955
                        self.identifier()
                        pass

                    elif la_ == 12:
                        localctx = HogQLParser.ColumnExprIsNullContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 956
                        if not self.precpred(self._ctx, 15):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 15)")
                        self.state = 957
                        self.match(HogQLParser.IS)
                        self.state = 959
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==56:
                            self.state = 958
                            self.match(HogQLParser.NOT)


                        self.state = 961
                        self.match(HogQLParser.NULL_SQL)
                        pass

                    elif la_ == 13:
                        localctx = HogQLParser.ColumnExprAliasContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 962
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 967
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
                        if la_ == 1:
                            self.state = 963
                            self.match(HogQLParser.AS)
                            self.state = 964
                            self.identifier()
                            pass

                        elif la_ == 2:
                            self.state = 965
                            self.match(HogQLParser.AS)
                            self.state = 966
                            self.match(HogQLParser.STRING_LITERAL)
                            pass


                        pass

             
                self.state = 973
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,121,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ColumnArgListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnArgExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnArgExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnArgExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_columnArgList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnArgList" ):
                return visitor.visitColumnArgList(self)
            else:
                return visitor.visitChildren(self)




    def columnArgList(self):

        localctx = HogQLParser.ColumnArgListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_columnArgList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 974
            self.columnArgExpr()
            self.state = 979
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,122,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 975
                    self.match(HogQLParser.COMMA)
                    self.state = 976
                    self.columnArgExpr() 
                self.state = 981
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,122,self._ctx)

            self.state = 983
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==112:
                self.state = 982
                self.match(HogQLParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnArgExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnLambdaExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnLambdaExprContext,0)


        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_columnArgExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnArgExpr" ):
                return visitor.visitColumnArgExpr(self)
            else:
                return visitor.visitChildren(self)




    def columnArgExpr(self):

        localctx = HogQLParser.ColumnArgExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_columnArgExpr)
        try:
            self.state = 987
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,124,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 985
                self.columnLambdaExpr()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 986
                self.columnExpr(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnLambdaExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ARROW(self):
            return self.getToken(HogQLParser.ARROW, 0)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(HogQLParser.IdentifierContext,i)


        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_columnLambdaExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnLambdaExpr" ):
                return visitor.visitColumnLambdaExpr(self)
            else:
                return visitor.visitChildren(self)




    def columnLambdaExpr(self):

        localctx = HogQLParser.ColumnLambdaExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_columnLambdaExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1014
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [126]:
                self.state = 989
                self.match(HogQLParser.LPAREN)
                self.state = 990
                self.identifier()
                self.state = 995
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,125,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 991
                        self.match(HogQLParser.COMMA)
                        self.state = 992
                        self.identifier() 
                    self.state = 997
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,125,self._ctx)

                self.state = 999
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==112:
                    self.state = 998
                    self.match(HogQLParser.COMMA)


                self.state = 1001
                self.match(HogQLParser.RPAREN)
                pass
            elif token in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 101]:
                self.state = 1003
                self.identifier()
                self.state = 1008
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,127,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1004
                        self.match(HogQLParser.COMMA)
                        self.state = 1005
                        self.identifier() 
                    self.state = 1010
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,127,self._ctx)

                self.state = 1012
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==112:
                    self.state = 1011
                    self.match(HogQLParser.COMMA)


                pass
            else:
                raise NoViableAltException(self)

            self.state = 1016
            self.match(HogQLParser.ARROW)
            self.state = 1017
            self.columnExpr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HogqlxTagElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return HogQLParser.RULE_hogqlxTagElement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class HogqlxTagElementClosedContext(HogqlxTagElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.HogqlxTagElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LT(self):
            return self.getToken(HogQLParser.LT, 0)
        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)

        def SLASH(self):
            return self.getToken(HogQLParser.SLASH, 0)
        def GT(self):
            return self.getToken(HogQLParser.GT, 0)
        def hogqlxTagAttribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.HogqlxTagAttributeContext)
            else:
                return self.getTypedRuleContext(HogQLParser.HogqlxTagAttributeContext,i)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHogqlxTagElementClosed" ):
                return visitor.visitHogqlxTagElementClosed(self)
            else:
                return visitor.visitChildren(self)


    class HogqlxTagElementNestedContext(HogqlxTagElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.HogqlxTagElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LT(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.LT)
            else:
                return self.getToken(HogQLParser.LT, i)
        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(HogQLParser.IdentifierContext,i)

        def GT(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.GT)
            else:
                return self.getToken(HogQLParser.GT, i)
        def SLASH(self):
            return self.getToken(HogQLParser.SLASH, 0)
        def hogqlxTagAttribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.HogqlxTagAttributeContext)
            else:
                return self.getTypedRuleContext(HogQLParser.HogqlxTagAttributeContext,i)

        def hogqlxTagElement(self):
            return self.getTypedRuleContext(HogQLParser.HogqlxTagElementContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHogqlxTagElementNested" ):
                return visitor.visitHogqlxTagElementNested(self)
            else:
                return visitor.visitChildren(self)



    def hogqlxTagElement(self):

        localctx = HogQLParser.HogqlxTagElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_hogqlxTagElement)
        self._la = 0 # Token type
        try:
            self.state = 1047
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,133,self._ctx)
            if la_ == 1:
                localctx = HogQLParser.HogqlxTagElementClosedContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1019
                self.match(HogQLParser.LT)
                self.state = 1020
                self.identifier()
                self.state = 1024
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & -181272084561788930) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 201863462911) != 0):
                    self.state = 1021
                    self.hogqlxTagAttribute()
                    self.state = 1026
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1027
                self.match(HogQLParser.SLASH)
                self.state = 1028
                self.match(HogQLParser.GT)
                pass

            elif la_ == 2:
                localctx = HogQLParser.HogqlxTagElementNestedContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1030
                self.match(HogQLParser.LT)
                self.state = 1031
                self.identifier()
                self.state = 1035
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & -181272084561788930) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 201863462911) != 0):
                    self.state = 1032
                    self.hogqlxTagAttribute()
                    self.state = 1037
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1038
                self.match(HogQLParser.GT)
                self.state = 1040
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,132,self._ctx)
                if la_ == 1:
                    self.state = 1039
                    self.hogqlxTagElement()


                self.state = 1042
                self.match(HogQLParser.LT)
                self.state = 1043
                self.match(HogQLParser.SLASH)
                self.state = 1044
                self.identifier()
                self.state = 1045
                self.match(HogQLParser.GT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HogqlxTagAttributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def EQ_SINGLE(self):
            return self.getToken(HogQLParser.EQ_SINGLE, 0)

        def string(self):
            return self.getTypedRuleContext(HogQLParser.StringContext,0)


        def LBRACE(self):
            return self.getToken(HogQLParser.LBRACE, 0)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def RBRACE(self):
            return self.getToken(HogQLParser.RBRACE, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_hogqlxTagAttribute

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHogqlxTagAttribute" ):
                return visitor.visitHogqlxTagAttribute(self)
            else:
                return visitor.visitChildren(self)




    def hogqlxTagAttribute(self):

        localctx = HogQLParser.HogqlxTagAttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_hogqlxTagAttribute)
        try:
            self.state = 1060
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,134,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1049
                self.identifier()
                self.state = 1050
                self.match(HogQLParser.EQ_SINGLE)
                self.state = 1051
                self.string()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1053
                self.identifier()
                self.state = 1054
                self.match(HogQLParser.EQ_SINGLE)
                self.state = 1055
                self.match(HogQLParser.LBRACE)
                self.state = 1056
                self.columnExpr(0)
                self.state = 1057
                self.match(HogQLParser.RBRACE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1059
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WithExprListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def withExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.WithExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.WithExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_withExprList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWithExprList" ):
                return visitor.visitWithExprList(self)
            else:
                return visitor.visitChildren(self)




    def withExprList(self):

        localctx = HogQLParser.WithExprListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_withExprList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1062
            self.withExpr()
            self.state = 1067
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,135,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1063
                    self.match(HogQLParser.COMMA)
                    self.state = 1064
                    self.withExpr() 
                self.state = 1069
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,135,self._ctx)

            self.state = 1071
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==112:
                self.state = 1070
                self.match(HogQLParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WithExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return HogQLParser.RULE_withExpr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class WithExprColumnContext(WithExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.WithExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def AS(self):
            return self.getToken(HogQLParser.AS, 0)
        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWithExprColumn" ):
                return visitor.visitWithExprColumn(self)
            else:
                return visitor.visitChildren(self)


    class WithExprSubqueryContext(WithExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.WithExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)

        def AS(self):
            return self.getToken(HogQLParser.AS, 0)
        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def selectUnionStmt(self):
            return self.getTypedRuleContext(HogQLParser.SelectUnionStmtContext,0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWithExprSubquery" ):
                return visitor.visitWithExprSubquery(self)
            else:
                return visitor.visitChildren(self)



    def withExpr(self):

        localctx = HogQLParser.WithExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_withExpr)
        try:
            self.state = 1083
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,137,self._ctx)
            if la_ == 1:
                localctx = HogQLParser.WithExprSubqueryContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1073
                self.identifier()
                self.state = 1074
                self.match(HogQLParser.AS)
                self.state = 1075
                self.match(HogQLParser.LPAREN)
                self.state = 1076
                self.selectUnionStmt()
                self.state = 1077
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 2:
                localctx = HogQLParser.WithExprColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1079
                self.columnExpr(0)
                self.state = 1080
                self.match(HogQLParser.AS)
                self.state = 1081
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def placeholder(self):
            return self.getTypedRuleContext(HogQLParser.PlaceholderContext,0)


        def nestedIdentifier(self):
            return self.getTypedRuleContext(HogQLParser.NestedIdentifierContext,0)


        def tableIdentifier(self):
            return self.getTypedRuleContext(HogQLParser.TableIdentifierContext,0)


        def DOT(self):
            return self.getToken(HogQLParser.DOT, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_columnIdentifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnIdentifier" ):
                return visitor.visitColumnIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def columnIdentifier(self):

        localctx = HogQLParser.ColumnIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_columnIdentifier)
        try:
            self.state = 1092
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [124]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1085
                self.placeholder()
                pass
            elif token in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 101]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1089
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,138,self._ctx)
                if la_ == 1:
                    self.state = 1086
                    self.tableIdentifier()
                    self.state = 1087
                    self.match(HogQLParser.DOT)


                self.state = 1091
                self.nestedIdentifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NestedIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(HogQLParser.IdentifierContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.DOT)
            else:
                return self.getToken(HogQLParser.DOT, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_nestedIdentifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNestedIdentifier" ):
                return visitor.visitNestedIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def nestedIdentifier(self):

        localctx = HogQLParser.NestedIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_nestedIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1094
            self.identifier()
            self.state = 1099
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,140,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1095
                    self.match(HogQLParser.DOT)
                    self.state = 1096
                    self.identifier() 
                self.state = 1101
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,140,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return HogQLParser.RULE_tableExpr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class TableExprTagContext(TableExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.TableExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def hogqlxTagElement(self):
            return self.getTypedRuleContext(HogQLParser.HogqlxTagElementContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableExprTag" ):
                return visitor.visitTableExprTag(self)
            else:
                return visitor.visitChildren(self)


    class TableExprIdentifierContext(TableExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.TableExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tableIdentifier(self):
            return self.getTypedRuleContext(HogQLParser.TableIdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableExprIdentifier" ):
                return visitor.visitTableExprIdentifier(self)
            else:
                return visitor.visitChildren(self)


    class TableExprPlaceholderContext(TableExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.TableExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def placeholder(self):
            return self.getTypedRuleContext(HogQLParser.PlaceholderContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableExprPlaceholder" ):
                return visitor.visitTableExprPlaceholder(self)
            else:
                return visitor.visitChildren(self)


    class TableExprSubqueryContext(TableExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.TableExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def selectUnionStmt(self):
            return self.getTypedRuleContext(HogQLParser.SelectUnionStmtContext,0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableExprSubquery" ):
                return visitor.visitTableExprSubquery(self)
            else:
                return visitor.visitChildren(self)


    class TableExprAliasContext(TableExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.TableExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tableExpr(self):
            return self.getTypedRuleContext(HogQLParser.TableExprContext,0)

        def alias(self):
            return self.getTypedRuleContext(HogQLParser.AliasContext,0)

        def AS(self):
            return self.getToken(HogQLParser.AS, 0)
        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableExprAlias" ):
                return visitor.visitTableExprAlias(self)
            else:
                return visitor.visitChildren(self)


    class TableExprFunctionContext(TableExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.TableExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tableFunctionExpr(self):
            return self.getTypedRuleContext(HogQLParser.TableFunctionExprContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableExprFunction" ):
                return visitor.visitTableExprFunction(self)
            else:
                return visitor.visitChildren(self)



    def tableExpr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = HogQLParser.TableExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 128
        self.enterRecursionRule(localctx, 128, self.RULE_tableExpr, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1111
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,141,self._ctx)
            if la_ == 1:
                localctx = HogQLParser.TableExprIdentifierContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 1103
                self.tableIdentifier()
                pass

            elif la_ == 2:
                localctx = HogQLParser.TableExprFunctionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1104
                self.tableFunctionExpr()
                pass

            elif la_ == 3:
                localctx = HogQLParser.TableExprSubqueryContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1105
                self.match(HogQLParser.LPAREN)
                self.state = 1106
                self.selectUnionStmt()
                self.state = 1107
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 4:
                localctx = HogQLParser.TableExprTagContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1109
                self.hogqlxTagElement()
                pass

            elif la_ == 5:
                localctx = HogQLParser.TableExprPlaceholderContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1110
                self.placeholder()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1121
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,143,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = HogQLParser.TableExprAliasContext(self, HogQLParser.TableExprContext(self, _parentctx, _parentState))
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_tableExpr)
                    self.state = 1113
                    if not self.precpred(self._ctx, 3):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                    self.state = 1117
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [19, 28, 37, 46, 101]:
                        self.state = 1114
                        self.alias()
                        pass
                    elif token in [6]:
                        self.state = 1115
                        self.match(HogQLParser.AS)
                        self.state = 1116
                        self.identifier()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 1123
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,143,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class TableFunctionExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def tableArgList(self):
            return self.getTypedRuleContext(HogQLParser.TableArgListContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_tableFunctionExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableFunctionExpr" ):
                return visitor.visitTableFunctionExpr(self)
            else:
                return visitor.visitChildren(self)




    def tableFunctionExpr(self):

        localctx = HogQLParser.TableFunctionExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_tableFunctionExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1124
            self.identifier()
            self.state = 1125
            self.match(HogQLParser.LPAREN)
            self.state = 1127
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -1125900443713538) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 8076106347046764543) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 577) != 0):
                self.state = 1126
                self.tableArgList()


            self.state = 1129
            self.match(HogQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def databaseIdentifier(self):
            return self.getTypedRuleContext(HogQLParser.DatabaseIdentifierContext,0)


        def DOT(self):
            return self.getToken(HogQLParser.DOT, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_tableIdentifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableIdentifier" ):
                return visitor.visitTableIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def tableIdentifier(self):

        localctx = HogQLParser.TableIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_tableIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1134
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,145,self._ctx)
            if la_ == 1:
                self.state = 1131
                self.databaseIdentifier()
                self.state = 1132
                self.match(HogQLParser.DOT)


            self.state = 1136
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableArgListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_tableArgList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableArgList" ):
                return visitor.visitTableArgList(self)
            else:
                return visitor.visitChildren(self)




    def tableArgList(self):

        localctx = HogQLParser.TableArgListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_tableArgList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1138
            self.columnExpr(0)
            self.state = 1143
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,146,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1139
                    self.match(HogQLParser.COMMA)
                    self.state = 1140
                    self.columnExpr(0) 
                self.state = 1145
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,146,self._ctx)

            self.state = 1147
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==112:
                self.state = 1146
                self.match(HogQLParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DatabaseIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_databaseIdentifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDatabaseIdentifier" ):
                return visitor.visitDatabaseIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def databaseIdentifier(self):

        localctx = HogQLParser.DatabaseIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_databaseIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1149
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FloatingLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FLOATING_LITERAL(self):
            return self.getToken(HogQLParser.FLOATING_LITERAL, 0)

        def DOT(self):
            return self.getToken(HogQLParser.DOT, 0)

        def DECIMAL_LITERAL(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.DECIMAL_LITERAL)
            else:
                return self.getToken(HogQLParser.DECIMAL_LITERAL, i)

        def OCTAL_LITERAL(self):
            return self.getToken(HogQLParser.OCTAL_LITERAL, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_floatingLiteral

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFloatingLiteral" ):
                return visitor.visitFloatingLiteral(self)
            else:
                return visitor.visitChildren(self)




    def floatingLiteral(self):

        localctx = HogQLParser.FloatingLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_floatingLiteral)
        self._la = 0 # Token type
        try:
            self.state = 1159
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [102]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1151
                self.match(HogQLParser.FLOATING_LITERAL)
                pass
            elif token in [116]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1152
                self.match(HogQLParser.DOT)
                self.state = 1153
                _la = self._input.LA(1)
                if not(_la==103 or _la==104):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [104]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1154
                self.match(HogQLParser.DECIMAL_LITERAL)
                self.state = 1155
                self.match(HogQLParser.DOT)
                self.state = 1157
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,148,self._ctx)
                if la_ == 1:
                    self.state = 1156
                    _la = self._input.LA(1)
                    if not(_la==103 or _la==104):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumberLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def floatingLiteral(self):
            return self.getTypedRuleContext(HogQLParser.FloatingLiteralContext,0)


        def OCTAL_LITERAL(self):
            return self.getToken(HogQLParser.OCTAL_LITERAL, 0)

        def DECIMAL_LITERAL(self):
            return self.getToken(HogQLParser.DECIMAL_LITERAL, 0)

        def HEXADECIMAL_LITERAL(self):
            return self.getToken(HogQLParser.HEXADECIMAL_LITERAL, 0)

        def INF(self):
            return self.getToken(HogQLParser.INF, 0)

        def NAN_SQL(self):
            return self.getToken(HogQLParser.NAN_SQL, 0)

        def PLUS(self):
            return self.getToken(HogQLParser.PLUS, 0)

        def DASH(self):
            return self.getToken(HogQLParser.DASH, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_numberLiteral

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumberLiteral" ):
                return visitor.visitNumberLiteral(self)
            else:
                return visitor.visitChildren(self)




    def numberLiteral(self):

        localctx = HogQLParser.NumberLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_numberLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1162
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==114 or _la==134:
                self.state = 1161
                _la = self._input.LA(1)
                if not(_la==114 or _la==134):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1170
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,151,self._ctx)
            if la_ == 1:
                self.state = 1164
                self.floatingLiteral()
                pass

            elif la_ == 2:
                self.state = 1165
                self.match(HogQLParser.OCTAL_LITERAL)
                pass

            elif la_ == 3:
                self.state = 1166
                self.match(HogQLParser.DECIMAL_LITERAL)
                pass

            elif la_ == 4:
                self.state = 1167
                self.match(HogQLParser.HEXADECIMAL_LITERAL)
                pass

            elif la_ == 5:
                self.state = 1168
                self.match(HogQLParser.INF)
                pass

            elif la_ == 6:
                self.state = 1169
                self.match(HogQLParser.NAN_SQL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numberLiteral(self):
            return self.getTypedRuleContext(HogQLParser.NumberLiteralContext,0)


        def STRING_LITERAL(self):
            return self.getToken(HogQLParser.STRING_LITERAL, 0)

        def NULL_SQL(self):
            return self.getToken(HogQLParser.NULL_SQL, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_literal

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteral" ):
                return visitor.visitLiteral(self)
            else:
                return visitor.visitChildren(self)




    def literal(self):

        localctx = HogQLParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_literal)
        try:
            self.state = 1175
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [41, 55, 102, 103, 104, 105, 114, 116, 134]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1172
                self.numberLiteral()
                pass
            elif token in [106]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1173
                self.match(HogQLParser.STRING_LITERAL)
                pass
            elif token in [57]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1174
                self.match(HogQLParser.NULL_SQL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SECOND(self):
            return self.getToken(HogQLParser.SECOND, 0)

        def MINUTE(self):
            return self.getToken(HogQLParser.MINUTE, 0)

        def HOUR(self):
            return self.getToken(HogQLParser.HOUR, 0)

        def DAY(self):
            return self.getToken(HogQLParser.DAY, 0)

        def WEEK(self):
            return self.getToken(HogQLParser.WEEK, 0)

        def MONTH(self):
            return self.getToken(HogQLParser.MONTH, 0)

        def QUARTER(self):
            return self.getToken(HogQLParser.QUARTER, 0)

        def YEAR(self):
            return self.getToken(HogQLParser.YEAR, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_interval

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterval" ):
                return visitor.visitInterval(self)
            else:
                return visitor.visitChildren(self)




    def interval(self):

        localctx = HogQLParser.IntervalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_interval)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1177
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 27021666484748288) != 0) or ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & 2181038337) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(HogQLParser.ALL, 0)

        def AND(self):
            return self.getToken(HogQLParser.AND, 0)

        def ANTI(self):
            return self.getToken(HogQLParser.ANTI, 0)

        def ANY(self):
            return self.getToken(HogQLParser.ANY, 0)

        def ARRAY(self):
            return self.getToken(HogQLParser.ARRAY, 0)

        def AS(self):
            return self.getToken(HogQLParser.AS, 0)

        def ASCENDING(self):
            return self.getToken(HogQLParser.ASCENDING, 0)

        def ASOF(self):
            return self.getToken(HogQLParser.ASOF, 0)

        def BETWEEN(self):
            return self.getToken(HogQLParser.BETWEEN, 0)

        def BOTH(self):
            return self.getToken(HogQLParser.BOTH, 0)

        def BY(self):
            return self.getToken(HogQLParser.BY, 0)

        def CASE(self):
            return self.getToken(HogQLParser.CASE, 0)

        def CAST(self):
            return self.getToken(HogQLParser.CAST, 0)

        def COHORT(self):
            return self.getToken(HogQLParser.COHORT, 0)

        def COLLATE(self):
            return self.getToken(HogQLParser.COLLATE, 0)

        def CROSS(self):
            return self.getToken(HogQLParser.CROSS, 0)

        def CUBE(self):
            return self.getToken(HogQLParser.CUBE, 0)

        def CURRENT(self):
            return self.getToken(HogQLParser.CURRENT, 0)

        def DATE(self):
            return self.getToken(HogQLParser.DATE, 0)

        def DESC(self):
            return self.getToken(HogQLParser.DESC, 0)

        def DESCENDING(self):
            return self.getToken(HogQLParser.DESCENDING, 0)

        def DISTINCT(self):
            return self.getToken(HogQLParser.DISTINCT, 0)

        def ELSE(self):
            return self.getToken(HogQLParser.ELSE, 0)

        def END(self):
            return self.getToken(HogQLParser.END, 0)

        def EXTRACT(self):
            return self.getToken(HogQLParser.EXTRACT, 0)

        def FINAL(self):
            return self.getToken(HogQLParser.FINAL, 0)

        def FIRST(self):
            return self.getToken(HogQLParser.FIRST, 0)

        def FOR(self):
            return self.getToken(HogQLParser.FOR, 0)

        def FOLLOWING(self):
            return self.getToken(HogQLParser.FOLLOWING, 0)

        def FROM(self):
            return self.getToken(HogQLParser.FROM, 0)

        def FULL(self):
            return self.getToken(HogQLParser.FULL, 0)

        def GROUP(self):
            return self.getToken(HogQLParser.GROUP, 0)

        def HAVING(self):
            return self.getToken(HogQLParser.HAVING, 0)

        def ID(self):
            return self.getToken(HogQLParser.ID, 0)

        def IS(self):
            return self.getToken(HogQLParser.IS, 0)

        def IF(self):
            return self.getToken(HogQLParser.IF, 0)

        def ILIKE(self):
            return self.getToken(HogQLParser.ILIKE, 0)

        def IN(self):
            return self.getToken(HogQLParser.IN, 0)

        def INNER(self):
            return self.getToken(HogQLParser.INNER, 0)

        def INTERVAL(self):
            return self.getToken(HogQLParser.INTERVAL, 0)

        def JOIN(self):
            return self.getToken(HogQLParser.JOIN, 0)

        def KEY(self):
            return self.getToken(HogQLParser.KEY, 0)

        def LAST(self):
            return self.getToken(HogQLParser.LAST, 0)

        def LEADING(self):
            return self.getToken(HogQLParser.LEADING, 0)

        def LEFT(self):
            return self.getToken(HogQLParser.LEFT, 0)

        def LIKE(self):
            return self.getToken(HogQLParser.LIKE, 0)

        def LIMIT(self):
            return self.getToken(HogQLParser.LIMIT, 0)

        def NOT(self):
            return self.getToken(HogQLParser.NOT, 0)

        def NULLS(self):
            return self.getToken(HogQLParser.NULLS, 0)

        def OFFSET(self):
            return self.getToken(HogQLParser.OFFSET, 0)

        def ON(self):
            return self.getToken(HogQLParser.ON, 0)

        def OR(self):
            return self.getToken(HogQLParser.OR, 0)

        def ORDER(self):
            return self.getToken(HogQLParser.ORDER, 0)

        def OUTER(self):
            return self.getToken(HogQLParser.OUTER, 0)

        def OVER(self):
            return self.getToken(HogQLParser.OVER, 0)

        def PARTITION(self):
            return self.getToken(HogQLParser.PARTITION, 0)

        def PRECEDING(self):
            return self.getToken(HogQLParser.PRECEDING, 0)

        def PREWHERE(self):
            return self.getToken(HogQLParser.PREWHERE, 0)

        def RANGE(self):
            return self.getToken(HogQLParser.RANGE, 0)

        def RETURN(self):
            return self.getToken(HogQLParser.RETURN, 0)

        def RIGHT(self):
            return self.getToken(HogQLParser.RIGHT, 0)

        def ROLLUP(self):
            return self.getToken(HogQLParser.ROLLUP, 0)

        def ROW(self):
            return self.getToken(HogQLParser.ROW, 0)

        def ROWS(self):
            return self.getToken(HogQLParser.ROWS, 0)

        def SAMPLE(self):
            return self.getToken(HogQLParser.SAMPLE, 0)

        def SELECT(self):
            return self.getToken(HogQLParser.SELECT, 0)

        def SEMI(self):
            return self.getToken(HogQLParser.SEMI, 0)

        def SETTINGS(self):
            return self.getToken(HogQLParser.SETTINGS, 0)

        def SUBSTRING(self):
            return self.getToken(HogQLParser.SUBSTRING, 0)

        def THEN(self):
            return self.getToken(HogQLParser.THEN, 0)

        def TIES(self):
            return self.getToken(HogQLParser.TIES, 0)

        def TIMESTAMP(self):
            return self.getToken(HogQLParser.TIMESTAMP, 0)

        def TOTALS(self):
            return self.getToken(HogQLParser.TOTALS, 0)

        def TRAILING(self):
            return self.getToken(HogQLParser.TRAILING, 0)

        def TRIM(self):
            return self.getToken(HogQLParser.TRIM, 0)

        def TRUNCATE(self):
            return self.getToken(HogQLParser.TRUNCATE, 0)

        def TO(self):
            return self.getToken(HogQLParser.TO, 0)

        def TOP(self):
            return self.getToken(HogQLParser.TOP, 0)

        def UNBOUNDED(self):
            return self.getToken(HogQLParser.UNBOUNDED, 0)

        def UNION(self):
            return self.getToken(HogQLParser.UNION, 0)

        def USING(self):
            return self.getToken(HogQLParser.USING, 0)

        def WHEN(self):
            return self.getToken(HogQLParser.WHEN, 0)

        def WHERE(self):
            return self.getToken(HogQLParser.WHERE, 0)

        def WINDOW(self):
            return self.getToken(HogQLParser.WINDOW, 0)

        def WITH(self):
            return self.getToken(HogQLParser.WITH, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_keyword

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKeyword" ):
                return visitor.visitKeyword(self)
            else:
                return visitor.visitChildren(self)




    def keyword(self):

        localctx = HogQLParser.KeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_keyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1179
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & -208293751046537218) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 29527896047) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeywordForAliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATE(self):
            return self.getToken(HogQLParser.DATE, 0)

        def FIRST(self):
            return self.getToken(HogQLParser.FIRST, 0)

        def ID(self):
            return self.getToken(HogQLParser.ID, 0)

        def KEY(self):
            return self.getToken(HogQLParser.KEY, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_keywordForAlias

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKeywordForAlias" ):
                return visitor.visitKeywordForAlias(self)
            else:
                return visitor.visitChildren(self)




    def keywordForAlias(self):

        localctx = HogQLParser.KeywordForAliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_keywordForAlias)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1181
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 70506452090880) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(HogQLParser.IDENTIFIER, 0)

        def keywordForAlias(self):
            return self.getTypedRuleContext(HogQLParser.KeywordForAliasContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_alias

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlias" ):
                return visitor.visitAlias(self)
            else:
                return visitor.visitChildren(self)




    def alias(self):

        localctx = HogQLParser.AliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_alias)
        try:
            self.state = 1185
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [101]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1183
                self.match(HogQLParser.IDENTIFIER)
                pass
            elif token in [19, 28, 37, 46]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1184
                self.keywordForAlias()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(HogQLParser.IDENTIFIER, 0)

        def interval(self):
            return self.getTypedRuleContext(HogQLParser.IntervalContext,0)


        def keyword(self):
            return self.getTypedRuleContext(HogQLParser.KeywordContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_identifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifier" ):
                return visitor.visitIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def identifier(self):

        localctx = HogQLParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_identifier)
        try:
            self.state = 1190
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [101]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1187
                self.match(HogQLParser.IDENTIFIER)
                pass
            elif token in [20, 36, 53, 54, 68, 76, 93, 99]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1188
                self.interval()
                pass
            elif token in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 97, 98]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1189
                self.keyword()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def string(self):
            return self.getTypedRuleContext(HogQLParser.StringContext,0)


        def EQ_SINGLE(self):
            return self.getToken(HogQLParser.EQ_SINGLE, 0)

        def numberLiteral(self):
            return self.getTypedRuleContext(HogQLParser.NumberLiteralContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_enumValue

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumValue" ):
                return visitor.visitEnumValue(self)
            else:
                return visitor.visitChildren(self)




    def enumValue(self):

        localctx = HogQLParser.EnumValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_enumValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1192
            self.string()
            self.state = 1193
            self.match(HogQLParser.EQ_SINGLE)
            self.state = 1194
            self.numberLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PlaceholderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(HogQLParser.LBRACE, 0)

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def RBRACE(self):
            return self.getToken(HogQLParser.RBRACE, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_placeholder

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPlaceholder" ):
                return visitor.visitPlaceholder(self)
            else:
                return visitor.visitChildren(self)




    def placeholder(self):

        localctx = HogQLParser.PlaceholderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_placeholder)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1196
            self.match(HogQLParser.LBRACE)
            self.state = 1197
            self.identifier()
            self.state = 1198
            self.match(HogQLParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(HogQLParser.STRING_LITERAL, 0)

        def templateString(self):
            return self.getTypedRuleContext(HogQLParser.TemplateStringContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_string

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitString" ):
                return visitor.visitString(self)
            else:
                return visitor.visitChildren(self)




    def string(self):

        localctx = HogQLParser.StringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_string)
        try:
            self.state = 1202
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [106]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1200
                self.match(HogQLParser.STRING_LITERAL)
                pass
            elif token in [137]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1201
                self.templateString()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TemplateStringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUOTE_SINGLE_TEMPLATE(self):
            return self.getToken(HogQLParser.QUOTE_SINGLE_TEMPLATE, 0)

        def QUOTE_SINGLE(self):
            return self.getToken(HogQLParser.QUOTE_SINGLE, 0)

        def stringContents(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.StringContentsContext)
            else:
                return self.getTypedRuleContext(HogQLParser.StringContentsContext,i)


        def getRuleIndex(self):
            return HogQLParser.RULE_templateString

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTemplateString" ):
                return visitor.visitTemplateString(self)
            else:
                return visitor.visitChildren(self)




    def templateString(self):

        localctx = HogQLParser.TemplateStringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_templateString)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1204
            self.match(HogQLParser.QUOTE_SINGLE_TEMPLATE)
            self.state = 1208
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==151 or _la==152:
                self.state = 1205
                self.stringContents()
                self.state = 1210
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1211
            self.match(HogQLParser.QUOTE_SINGLE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringContentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_ESCAPE_TRIGGER(self):
            return self.getToken(HogQLParser.STRING_ESCAPE_TRIGGER, 0)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def RBRACE(self):
            return self.getToken(HogQLParser.RBRACE, 0)

        def STRING_TEXT(self):
            return self.getToken(HogQLParser.STRING_TEXT, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_stringContents

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringContents" ):
                return visitor.visitStringContents(self)
            else:
                return visitor.visitChildren(self)




    def stringContents(self):

        localctx = HogQLParser.StringContentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_stringContents)
        try:
            self.state = 1218
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [152]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1213
                self.match(HogQLParser.STRING_ESCAPE_TRIGGER)
                self.state = 1214
                self.columnExpr(0)
                self.state = 1215
                self.match(HogQLParser.RBRACE)
                pass
            elif token in [151]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1217
                self.match(HogQLParser.STRING_TEXT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FullTemplateStringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUOTE_SINGLE_TEMPLATE_FULL(self):
            return self.getToken(HogQLParser.QUOTE_SINGLE_TEMPLATE_FULL, 0)

        def EOF(self):
            return self.getToken(HogQLParser.EOF, 0)

        def stringContentsFull(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.StringContentsFullContext)
            else:
                return self.getTypedRuleContext(HogQLParser.StringContentsFullContext,i)


        def getRuleIndex(self):
            return HogQLParser.RULE_fullTemplateString

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFullTemplateString" ):
                return visitor.visitFullTemplateString(self)
            else:
                return visitor.visitChildren(self)




    def fullTemplateString(self):

        localctx = HogQLParser.FullTemplateStringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_fullTemplateString)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1220
            self.match(HogQLParser.QUOTE_SINGLE_TEMPLATE_FULL)
            self.state = 1224
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==153 or _la==154:
                self.state = 1221
                self.stringContentsFull()
                self.state = 1226
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1227
            self.match(HogQLParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringContentsFullContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FULL_STRING_ESCAPE_TRIGGER(self):
            return self.getToken(HogQLParser.FULL_STRING_ESCAPE_TRIGGER, 0)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def RBRACE(self):
            return self.getToken(HogQLParser.RBRACE, 0)

        def FULL_STRING_TEXT(self):
            return self.getToken(HogQLParser.FULL_STRING_TEXT, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_stringContentsFull

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringContentsFull" ):
                return visitor.visitStringContentsFull(self)
            else:
                return visitor.visitChildren(self)




    def stringContentsFull(self):

        localctx = HogQLParser.StringContentsFullContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_stringContentsFull)
        try:
            self.state = 1234
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [154]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1229
                self.match(HogQLParser.FULL_STRING_ESCAPE_TRIGGER)
                self.state = 1230
                self.columnExpr(0)
                self.state = 1231
                self.match(HogQLParser.RBRACE)
                pass
            elif token in [153]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1233
                self.match(HogQLParser.FULL_STRING_TEXT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[35] = self.joinExpr_sempred
        self._predicates[54] = self.columnExpr_sempred
        self._predicates[64] = self.tableExpr_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def joinExpr_sempred(self, localctx:JoinExprContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 4)
         

    def columnExpr_sempred(self, localctx:ColumnExprContext, predIndex:int):
            if predIndex == 2:
                return self.precpred(self._ctx, 18)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 17)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 16)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 14)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 22)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 21)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 20)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 15)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 8)
         

    def tableExpr_sempred(self, localctx:TableExprContext, predIndex:int):
            if predIndex == 15:
                return self.precpred(self._ctx, 3)
         




