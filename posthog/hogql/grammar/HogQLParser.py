# Generated from HogQLParser.g4 by ANTLR 4.11.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,234,883,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,1,0,1,0,3,0,123,8,0,1,0,1,0,1,1,1,1,1,1,1,1,5,1,131,8,1,
        10,1,12,1,134,9,1,1,2,1,2,1,2,1,2,1,2,3,2,141,8,2,1,3,3,3,144,8,
        3,1,3,1,3,3,3,148,8,3,1,3,3,3,151,8,3,1,3,1,3,3,3,155,8,3,1,3,3,
        3,158,8,3,1,3,3,3,161,8,3,1,3,3,3,164,8,3,1,3,3,3,167,8,3,1,3,3,
        3,170,8,3,1,3,1,3,3,3,174,8,3,1,3,1,3,3,3,178,8,3,1,3,3,3,181,8,
        3,1,3,3,3,184,8,3,1,3,3,3,187,8,3,1,3,3,3,190,8,3,1,4,1,4,1,4,1,
        5,1,5,1,5,1,5,3,5,199,8,5,1,6,1,6,1,6,1,7,3,7,205,8,7,1,7,1,7,1,
        7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,10,1,11,
        1,11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,232,8,11,1,12,1,12,1,12,
        1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,
        1,15,3,15,251,8,15,1,16,1,16,1,16,1,17,1,17,1,17,3,17,259,8,17,1,
        17,3,17,262,8,17,1,17,1,17,1,17,1,17,3,17,268,8,17,1,17,1,17,1,17,
        1,17,1,17,1,17,3,17,276,8,17,1,17,3,17,279,8,17,1,17,1,17,1,17,1,
        17,5,17,285,8,17,10,17,12,17,288,9,17,1,18,3,18,291,8,18,1,18,1,
        18,1,18,3,18,296,8,18,1,18,3,18,299,8,18,1,18,3,18,302,8,18,1,18,
        1,18,3,18,306,8,18,1,18,1,18,3,18,310,8,18,1,18,3,18,313,8,18,3,
        18,315,8,18,1,18,3,18,318,8,18,1,18,1,18,3,18,322,8,18,1,18,1,18,
        3,18,326,8,18,1,18,3,18,329,8,18,3,18,331,8,18,3,18,333,8,18,1,19,
        3,19,336,8,19,1,19,1,19,1,19,3,19,341,8,19,1,20,1,20,1,20,1,20,1,
        20,1,20,1,20,1,20,1,20,3,20,352,8,20,1,21,1,21,1,21,1,21,3,21,358,
        8,21,1,22,1,22,1,22,3,22,363,8,22,1,23,1,23,1,23,5,23,368,8,23,10,
        23,12,23,371,9,23,1,24,1,24,3,24,375,8,24,1,24,1,24,3,24,379,8,24,
        1,24,1,24,3,24,383,8,24,1,25,1,25,1,25,3,25,388,8,25,1,26,1,26,1,
        26,5,26,393,8,26,10,26,12,26,396,9,26,1,27,1,27,1,27,1,27,1,28,3,
        28,403,8,28,1,28,3,28,406,8,28,1,28,3,28,409,8,28,1,29,1,29,1,29,
        1,29,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,
        1,32,3,32,428,8,32,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,
        1,33,1,33,1,33,3,33,442,8,33,1,34,1,34,1,34,1,35,1,35,1,35,1,35,
        1,35,1,35,1,35,1,35,1,35,5,35,456,8,35,10,35,12,35,459,9,35,1,35,
        1,35,1,35,1,35,1,35,1,35,1,35,5,35,468,8,35,10,35,12,35,471,9,35,
        1,35,1,35,1,35,1,35,1,35,1,35,1,35,5,35,480,8,35,10,35,12,35,483,
        9,35,1,35,1,35,1,35,1,35,1,35,3,35,490,8,35,1,35,1,35,3,35,494,8,
        35,1,36,1,36,1,36,5,36,499,8,36,10,36,12,36,502,9,36,1,37,1,37,1,
        37,3,37,507,8,37,1,37,1,37,1,37,1,37,1,37,1,37,3,37,515,8,37,1,38,
        1,38,1,38,3,38,520,8,38,1,38,1,38,1,38,1,38,1,38,4,38,527,8,38,11,
        38,12,38,528,1,38,1,38,3,38,533,8,38,1,38,1,38,1,38,1,38,1,38,1,
        38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,
        38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,3,38,564,8,
        38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,
        38,1,38,1,38,3,38,581,8,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,
        38,1,38,1,38,3,38,593,8,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,
        38,3,38,603,8,38,1,38,3,38,606,8,38,1,38,1,38,3,38,610,8,38,1,38,
        3,38,613,8,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,
        3,38,625,8,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,
        1,38,1,38,1,38,1,38,1,38,3,38,642,8,38,1,38,1,38,3,38,646,8,38,1,
        38,1,38,1,38,1,38,3,38,652,8,38,1,38,1,38,1,38,1,38,1,38,3,38,659,
        8,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,3,38,671,
        8,38,1,38,3,38,674,8,38,1,38,1,38,3,38,678,8,38,1,38,3,38,681,8,
        38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,3,38,692,8,38,1,
        38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,
        38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,3,38,716,8,38,1,38,1,
        38,1,38,1,38,1,38,1,38,1,38,3,38,725,8,38,5,38,727,8,38,10,38,12,
        38,730,9,38,1,39,1,39,1,39,5,39,735,8,39,10,39,12,39,738,9,39,1,
        40,1,40,3,40,742,8,40,1,41,1,41,1,41,1,41,5,41,748,8,41,10,41,12,
        41,751,9,41,1,41,1,41,1,41,1,41,1,41,5,41,758,8,41,10,41,12,41,761,
        9,41,3,41,763,8,41,1,41,1,41,1,41,1,42,1,42,1,42,1,42,3,42,772,8,
        42,1,42,3,42,775,8,42,1,43,1,43,1,43,5,43,780,8,43,10,43,12,43,783,
        9,43,1,44,1,44,1,44,1,44,1,44,1,44,1,44,3,44,792,8,44,1,44,1,44,
        1,44,1,44,3,44,798,8,44,5,44,800,8,44,10,44,12,44,803,9,44,1,45,
        1,45,1,45,3,45,808,8,45,1,45,1,45,1,46,1,46,1,46,3,46,815,8,46,1,
        46,1,46,1,47,1,47,1,47,5,47,822,8,47,10,47,12,47,825,9,47,1,48,1,
        48,1,48,3,48,830,8,48,1,49,1,49,1,50,1,50,1,50,1,50,1,50,1,50,3,
        50,840,8,50,3,50,842,8,50,1,51,3,51,845,8,51,1,51,1,51,1,51,1,51,
        1,51,1,51,3,51,853,8,51,1,52,1,52,1,52,3,52,858,8,52,1,53,1,53,1,
        54,1,54,1,55,1,55,1,56,1,56,3,56,868,8,56,1,57,1,57,1,57,3,57,873,
        8,57,1,58,1,58,3,58,877,8,58,1,59,1,59,1,59,1,59,1,59,0,3,34,76,
        88,60,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,
        42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,
        86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,0,18,
        2,0,31,31,140,140,2,0,83,83,95,95,2,0,70,70,100,100,3,0,4,4,8,8,
        12,12,4,0,4,4,7,8,12,12,146,146,2,0,95,95,139,139,2,0,4,4,8,8,2,
        0,117,117,205,205,2,0,11,11,41,42,2,0,61,61,92,92,2,0,132,132,142,
        142,3,0,17,17,94,94,169,169,2,0,78,78,97,97,1,0,195,196,2,0,207,
        207,222,222,8,0,36,36,75,75,107,107,109,109,131,131,144,144,184,
        184,189,189,12,0,2,35,37,74,76,80,82,106,108,108,110,111,113,114,
        116,129,132,143,145,183,185,188,190,191,4,0,35,35,61,61,76,76,90,
        90,993,0,122,1,0,0,0,2,126,1,0,0,0,4,140,1,0,0,0,6,143,1,0,0,0,8,
        191,1,0,0,0,10,194,1,0,0,0,12,200,1,0,0,0,14,204,1,0,0,0,16,210,
        1,0,0,0,18,217,1,0,0,0,20,220,1,0,0,0,22,223,1,0,0,0,24,233,1,0,
        0,0,26,236,1,0,0,0,28,240,1,0,0,0,30,244,1,0,0,0,32,252,1,0,0,0,
        34,267,1,0,0,0,36,332,1,0,0,0,38,340,1,0,0,0,40,351,1,0,0,0,42,353,
        1,0,0,0,44,359,1,0,0,0,46,364,1,0,0,0,48,372,1,0,0,0,50,384,1,0,
        0,0,52,389,1,0,0,0,54,397,1,0,0,0,56,402,1,0,0,0,58,410,1,0,0,0,
        60,414,1,0,0,0,62,418,1,0,0,0,64,427,1,0,0,0,66,441,1,0,0,0,68,443,
        1,0,0,0,70,493,1,0,0,0,72,495,1,0,0,0,74,514,1,0,0,0,76,645,1,0,
        0,0,78,731,1,0,0,0,80,741,1,0,0,0,82,762,1,0,0,0,84,774,1,0,0,0,
        86,776,1,0,0,0,88,791,1,0,0,0,90,804,1,0,0,0,92,814,1,0,0,0,94,818,
        1,0,0,0,96,829,1,0,0,0,98,831,1,0,0,0,100,841,1,0,0,0,102,844,1,
        0,0,0,104,857,1,0,0,0,106,859,1,0,0,0,108,861,1,0,0,0,110,863,1,
        0,0,0,112,867,1,0,0,0,114,872,1,0,0,0,116,876,1,0,0,0,118,878,1,
        0,0,0,120,123,3,2,1,0,121,123,3,6,3,0,122,120,1,0,0,0,122,121,1,
        0,0,0,123,124,1,0,0,0,124,125,5,0,0,1,125,1,1,0,0,0,126,132,3,4,
        2,0,127,128,5,175,0,0,128,129,5,4,0,0,129,131,3,4,2,0,130,127,1,
        0,0,0,131,134,1,0,0,0,132,130,1,0,0,0,132,133,1,0,0,0,133,3,1,0,
        0,0,134,132,1,0,0,0,135,141,3,6,3,0,136,137,5,218,0,0,137,138,3,
        2,1,0,138,139,5,228,0,0,139,141,1,0,0,0,140,135,1,0,0,0,140,136,
        1,0,0,0,141,5,1,0,0,0,142,144,3,8,4,0,143,142,1,0,0,0,143,144,1,
        0,0,0,144,145,1,0,0,0,145,147,5,145,0,0,146,148,5,48,0,0,147,146,
        1,0,0,0,147,148,1,0,0,0,148,150,1,0,0,0,149,151,3,10,5,0,150,149,
        1,0,0,0,150,151,1,0,0,0,151,152,1,0,0,0,152,154,3,72,36,0,153,155,
        3,12,6,0,154,153,1,0,0,0,154,155,1,0,0,0,155,157,1,0,0,0,156,158,
        3,14,7,0,157,156,1,0,0,0,157,158,1,0,0,0,158,160,1,0,0,0,159,161,
        3,16,8,0,160,159,1,0,0,0,160,161,1,0,0,0,161,163,1,0,0,0,162,164,
        3,18,9,0,163,162,1,0,0,0,163,164,1,0,0,0,164,166,1,0,0,0,165,167,
        3,20,10,0,166,165,1,0,0,0,166,167,1,0,0,0,167,169,1,0,0,0,168,170,
        3,22,11,0,169,168,1,0,0,0,169,170,1,0,0,0,170,173,1,0,0,0,171,172,
        5,188,0,0,172,174,7,0,0,0,173,171,1,0,0,0,173,174,1,0,0,0,174,177,
        1,0,0,0,175,176,5,188,0,0,176,178,5,168,0,0,177,175,1,0,0,0,177,
        178,1,0,0,0,178,180,1,0,0,0,179,181,3,24,12,0,180,179,1,0,0,0,180,
        181,1,0,0,0,181,183,1,0,0,0,182,184,3,26,13,0,183,182,1,0,0,0,183,
        184,1,0,0,0,184,186,1,0,0,0,185,187,3,30,15,0,186,185,1,0,0,0,186,
        187,1,0,0,0,187,189,1,0,0,0,188,190,3,32,16,0,189,188,1,0,0,0,189,
        190,1,0,0,0,190,7,1,0,0,0,191,192,5,188,0,0,192,193,3,72,36,0,193,
        9,1,0,0,0,194,195,5,167,0,0,195,198,5,196,0,0,196,197,5,188,0,0,
        197,199,5,163,0,0,198,196,1,0,0,0,198,199,1,0,0,0,199,11,1,0,0,0,
        200,201,5,67,0,0,201,202,3,34,17,0,202,13,1,0,0,0,203,205,7,1,0,
        0,204,203,1,0,0,0,204,205,1,0,0,0,205,206,1,0,0,0,206,207,5,9,0,
        0,207,208,5,89,0,0,208,209,3,72,36,0,209,15,1,0,0,0,210,211,5,187,
        0,0,211,212,3,114,57,0,212,213,5,10,0,0,213,214,5,218,0,0,214,215,
        3,56,28,0,215,216,5,228,0,0,216,17,1,0,0,0,217,218,5,128,0,0,218,
        219,3,76,38,0,219,19,1,0,0,0,220,221,5,186,0,0,221,222,3,76,38,0,
        222,21,1,0,0,0,223,224,5,72,0,0,224,231,5,18,0,0,225,226,7,0,0,0,
        226,227,5,218,0,0,227,228,3,72,36,0,228,229,5,228,0,0,229,232,1,
        0,0,0,230,232,3,72,36,0,231,225,1,0,0,0,231,230,1,0,0,0,232,23,1,
        0,0,0,233,234,5,73,0,0,234,235,3,76,38,0,235,25,1,0,0,0,236,237,
        5,121,0,0,237,238,5,18,0,0,238,239,3,46,23,0,239,27,1,0,0,0,240,
        241,5,121,0,0,241,242,5,18,0,0,242,243,3,72,36,0,243,29,1,0,0,0,
        244,245,5,98,0,0,245,250,3,44,22,0,246,247,5,188,0,0,247,251,5,163,
        0,0,248,249,5,18,0,0,249,251,3,72,36,0,250,246,1,0,0,0,250,248,1,
        0,0,0,250,251,1,0,0,0,251,31,1,0,0,0,252,253,5,149,0,0,253,254,3,
        52,26,0,254,33,1,0,0,0,255,256,6,17,-1,0,256,258,3,88,44,0,257,259,
        5,60,0,0,258,257,1,0,0,0,258,259,1,0,0,0,259,261,1,0,0,0,260,262,
        3,42,21,0,261,260,1,0,0,0,261,262,1,0,0,0,262,268,1,0,0,0,263,264,
        5,218,0,0,264,265,3,34,17,0,265,266,5,228,0,0,266,268,1,0,0,0,267,
        255,1,0,0,0,267,263,1,0,0,0,268,286,1,0,0,0,269,270,10,3,0,0,270,
        271,3,38,19,0,271,272,3,34,17,4,272,285,1,0,0,0,273,275,10,4,0,0,
        274,276,7,2,0,0,275,274,1,0,0,0,275,276,1,0,0,0,276,278,1,0,0,0,
        277,279,3,36,18,0,278,277,1,0,0,0,278,279,1,0,0,0,279,280,1,0,0,
        0,280,281,5,89,0,0,281,282,3,34,17,0,282,283,3,40,20,0,283,285,1,
        0,0,0,284,269,1,0,0,0,284,273,1,0,0,0,285,288,1,0,0,0,286,284,1,
        0,0,0,286,287,1,0,0,0,287,35,1,0,0,0,288,286,1,0,0,0,289,291,7,3,
        0,0,290,289,1,0,0,0,290,291,1,0,0,0,291,292,1,0,0,0,292,299,5,83,
        0,0,293,295,5,83,0,0,294,296,7,3,0,0,295,294,1,0,0,0,295,296,1,0,
        0,0,296,299,1,0,0,0,297,299,7,3,0,0,298,290,1,0,0,0,298,293,1,0,
        0,0,298,297,1,0,0,0,299,333,1,0,0,0,300,302,7,4,0,0,301,300,1,0,
        0,0,301,302,1,0,0,0,302,303,1,0,0,0,303,305,7,5,0,0,304,306,5,122,
        0,0,305,304,1,0,0,0,305,306,1,0,0,0,306,315,1,0,0,0,307,309,7,5,
        0,0,308,310,5,122,0,0,309,308,1,0,0,0,309,310,1,0,0,0,310,312,1,
        0,0,0,311,313,7,4,0,0,312,311,1,0,0,0,312,313,1,0,0,0,313,315,1,
        0,0,0,314,301,1,0,0,0,314,307,1,0,0,0,315,333,1,0,0,0,316,318,7,
        6,0,0,317,316,1,0,0,0,317,318,1,0,0,0,318,319,1,0,0,0,319,321,5,
        68,0,0,320,322,5,122,0,0,321,320,1,0,0,0,321,322,1,0,0,0,322,331,
        1,0,0,0,323,325,5,68,0,0,324,326,5,122,0,0,325,324,1,0,0,0,325,326,
        1,0,0,0,326,328,1,0,0,0,327,329,7,6,0,0,328,327,1,0,0,0,328,329,
        1,0,0,0,329,331,1,0,0,0,330,317,1,0,0,0,330,323,1,0,0,0,331,333,
        1,0,0,0,332,298,1,0,0,0,332,314,1,0,0,0,332,330,1,0,0,0,333,37,1,
        0,0,0,334,336,7,2,0,0,335,334,1,0,0,0,335,336,1,0,0,0,336,337,1,
        0,0,0,337,338,5,30,0,0,338,341,5,89,0,0,339,341,5,205,0,0,340,335,
        1,0,0,0,340,339,1,0,0,0,341,39,1,0,0,0,342,343,5,118,0,0,343,352,
        3,72,36,0,344,345,5,178,0,0,345,346,5,218,0,0,346,347,3,72,36,0,
        347,348,5,228,0,0,348,352,1,0,0,0,349,350,5,178,0,0,350,352,3,72,
        36,0,351,342,1,0,0,0,351,344,1,0,0,0,351,349,1,0,0,0,352,41,1,0,
        0,0,353,354,5,143,0,0,354,357,3,50,25,0,355,356,5,117,0,0,356,358,
        3,50,25,0,357,355,1,0,0,0,357,358,1,0,0,0,358,43,1,0,0,0,359,362,
        3,76,38,0,360,361,7,7,0,0,361,363,3,76,38,0,362,360,1,0,0,0,362,
        363,1,0,0,0,363,45,1,0,0,0,364,369,3,48,24,0,365,366,5,205,0,0,366,
        368,3,48,24,0,367,365,1,0,0,0,368,371,1,0,0,0,369,367,1,0,0,0,369,
        370,1,0,0,0,370,47,1,0,0,0,371,369,1,0,0,0,372,374,3,76,38,0,373,
        375,7,8,0,0,374,373,1,0,0,0,374,375,1,0,0,0,375,378,1,0,0,0,376,
        377,5,116,0,0,377,379,7,9,0,0,378,376,1,0,0,0,378,379,1,0,0,0,379,
        382,1,0,0,0,380,381,5,25,0,0,381,383,5,198,0,0,382,380,1,0,0,0,382,
        383,1,0,0,0,383,49,1,0,0,0,384,387,3,102,51,0,385,386,5,230,0,0,
        386,388,3,102,51,0,387,385,1,0,0,0,387,388,1,0,0,0,388,51,1,0,0,
        0,389,394,3,54,27,0,390,391,5,205,0,0,391,393,3,54,27,0,392,390,
        1,0,0,0,393,396,1,0,0,0,394,392,1,0,0,0,394,395,1,0,0,0,395,53,1,
        0,0,0,396,394,1,0,0,0,397,398,3,114,57,0,398,399,5,211,0,0,399,400,
        3,104,52,0,400,55,1,0,0,0,401,403,3,58,29,0,402,401,1,0,0,0,402,
        403,1,0,0,0,403,405,1,0,0,0,404,406,3,60,30,0,405,404,1,0,0,0,405,
        406,1,0,0,0,406,408,1,0,0,0,407,409,3,62,31,0,408,407,1,0,0,0,408,
        409,1,0,0,0,409,57,1,0,0,0,410,411,5,125,0,0,411,412,5,18,0,0,412,
        413,3,72,36,0,413,59,1,0,0,0,414,415,5,121,0,0,415,416,5,18,0,0,
        416,417,3,46,23,0,417,61,1,0,0,0,418,419,7,10,0,0,419,420,3,64,32,
        0,420,63,1,0,0,0,421,428,3,66,33,0,422,423,5,16,0,0,423,424,3,66,
        33,0,424,425,5,6,0,0,425,426,3,66,33,0,426,428,1,0,0,0,427,421,1,
        0,0,0,427,422,1,0,0,0,428,65,1,0,0,0,429,430,5,32,0,0,430,442,5,
        141,0,0,431,432,5,174,0,0,432,442,5,127,0,0,433,434,5,174,0,0,434,
        442,5,63,0,0,435,436,3,102,51,0,436,437,5,127,0,0,437,442,1,0,0,
        0,438,439,3,102,51,0,439,440,5,63,0,0,440,442,1,0,0,0,441,429,1,
        0,0,0,441,431,1,0,0,0,441,433,1,0,0,0,441,435,1,0,0,0,441,438,1,
        0,0,0,442,67,1,0,0,0,443,444,3,76,38,0,444,445,5,0,0,1,445,69,1,
        0,0,0,446,494,3,114,57,0,447,448,3,114,57,0,448,449,5,218,0,0,449,
        450,3,114,57,0,450,457,3,70,35,0,451,452,5,205,0,0,452,453,3,114,
        57,0,453,454,3,70,35,0,454,456,1,0,0,0,455,451,1,0,0,0,456,459,1,
        0,0,0,457,455,1,0,0,0,457,458,1,0,0,0,458,460,1,0,0,0,459,457,1,
        0,0,0,460,461,5,228,0,0,461,494,1,0,0,0,462,463,3,114,57,0,463,464,
        5,218,0,0,464,469,3,118,59,0,465,466,5,205,0,0,466,468,3,118,59,
        0,467,465,1,0,0,0,468,471,1,0,0,0,469,467,1,0,0,0,469,470,1,0,0,
        0,470,472,1,0,0,0,471,469,1,0,0,0,472,473,5,228,0,0,473,494,1,0,
        0,0,474,475,3,114,57,0,475,476,5,218,0,0,476,481,3,70,35,0,477,478,
        5,205,0,0,478,480,3,70,35,0,479,477,1,0,0,0,480,483,1,0,0,0,481,
        479,1,0,0,0,481,482,1,0,0,0,482,484,1,0,0,0,483,481,1,0,0,0,484,
        485,5,228,0,0,485,494,1,0,0,0,486,487,3,114,57,0,487,489,5,218,0,
        0,488,490,3,72,36,0,489,488,1,0,0,0,489,490,1,0,0,0,490,491,1,0,
        0,0,491,492,5,228,0,0,492,494,1,0,0,0,493,446,1,0,0,0,493,447,1,
        0,0,0,493,462,1,0,0,0,493,474,1,0,0,0,493,486,1,0,0,0,494,71,1,0,
        0,0,495,500,3,74,37,0,496,497,5,205,0,0,497,499,3,74,37,0,498,496,
        1,0,0,0,499,502,1,0,0,0,500,498,1,0,0,0,500,501,1,0,0,0,501,73,1,
        0,0,0,502,500,1,0,0,0,503,504,3,92,46,0,504,505,5,209,0,0,505,507,
        1,0,0,0,506,503,1,0,0,0,506,507,1,0,0,0,507,508,1,0,0,0,508,515,
        5,201,0,0,509,510,5,218,0,0,510,511,3,2,1,0,511,512,5,228,0,0,512,
        515,1,0,0,0,513,515,3,76,38,0,514,506,1,0,0,0,514,509,1,0,0,0,514,
        513,1,0,0,0,515,75,1,0,0,0,516,517,6,38,-1,0,517,519,5,19,0,0,518,
        520,3,76,38,0,519,518,1,0,0,0,519,520,1,0,0,0,520,526,1,0,0,0,521,
        522,5,185,0,0,522,523,3,76,38,0,523,524,5,162,0,0,524,525,3,76,38,
        0,525,527,1,0,0,0,526,521,1,0,0,0,527,528,1,0,0,0,528,526,1,0,0,
        0,528,529,1,0,0,0,529,532,1,0,0,0,530,531,5,51,0,0,531,533,3,76,
        38,0,532,530,1,0,0,0,532,533,1,0,0,0,533,534,1,0,0,0,534,535,5,52,
        0,0,535,646,1,0,0,0,536,537,5,20,0,0,537,538,5,218,0,0,538,539,3,
        76,38,0,539,540,5,10,0,0,540,541,3,70,35,0,541,542,5,228,0,0,542,
        646,1,0,0,0,543,544,5,35,0,0,544,646,5,198,0,0,545,546,5,58,0,0,
        546,547,5,218,0,0,547,548,3,106,53,0,548,549,5,67,0,0,549,550,3,
        76,38,0,550,551,5,228,0,0,551,646,1,0,0,0,552,553,5,85,0,0,553,554,
        3,76,38,0,554,555,3,106,53,0,555,646,1,0,0,0,556,557,5,154,0,0,557,
        558,5,218,0,0,558,559,3,76,38,0,559,560,5,67,0,0,560,563,3,76,38,
        0,561,562,5,64,0,0,562,564,3,76,38,0,563,561,1,0,0,0,563,564,1,0,
        0,0,564,565,1,0,0,0,565,566,5,228,0,0,566,646,1,0,0,0,567,568,5,
        165,0,0,568,646,5,198,0,0,569,570,5,170,0,0,570,571,5,218,0,0,571,
        572,7,11,0,0,572,573,5,198,0,0,573,574,5,67,0,0,574,575,3,76,38,
        0,575,576,5,228,0,0,576,646,1,0,0,0,577,578,3,114,57,0,578,580,5,
        218,0,0,579,581,3,72,36,0,580,579,1,0,0,0,580,581,1,0,0,0,581,582,
        1,0,0,0,582,583,5,228,0,0,583,584,1,0,0,0,584,585,5,124,0,0,585,
        586,5,218,0,0,586,587,3,56,28,0,587,588,5,228,0,0,588,646,1,0,0,
        0,589,590,3,114,57,0,590,592,5,218,0,0,591,593,3,72,36,0,592,591,
        1,0,0,0,592,593,1,0,0,0,593,594,1,0,0,0,594,595,5,228,0,0,595,596,
        1,0,0,0,596,597,5,124,0,0,597,598,3,114,57,0,598,646,1,0,0,0,599,
        605,3,114,57,0,600,602,5,218,0,0,601,603,3,72,36,0,602,601,1,0,0,
        0,602,603,1,0,0,0,603,604,1,0,0,0,604,606,5,228,0,0,605,600,1,0,
        0,0,605,606,1,0,0,0,606,607,1,0,0,0,607,609,5,218,0,0,608,610,5,
        48,0,0,609,608,1,0,0,0,609,610,1,0,0,0,610,612,1,0,0,0,611,613,3,
        78,39,0,612,611,1,0,0,0,612,613,1,0,0,0,613,614,1,0,0,0,614,615,
        5,228,0,0,615,646,1,0,0,0,616,646,3,104,52,0,617,618,5,207,0,0,618,
        646,3,76,38,17,619,620,5,114,0,0,620,646,3,76,38,12,621,622,3,92,
        46,0,622,623,5,209,0,0,623,625,1,0,0,0,624,621,1,0,0,0,624,625,1,
        0,0,0,625,626,1,0,0,0,626,646,5,201,0,0,627,628,5,218,0,0,628,629,
        3,2,1,0,629,630,5,228,0,0,630,646,1,0,0,0,631,632,5,218,0,0,632,
        633,3,76,38,0,633,634,5,228,0,0,634,646,1,0,0,0,635,636,5,218,0,
        0,636,637,3,72,36,0,637,638,5,228,0,0,638,646,1,0,0,0,639,641,5,
        216,0,0,640,642,3,72,36,0,641,640,1,0,0,0,641,642,1,0,0,0,642,643,
        1,0,0,0,643,646,5,227,0,0,644,646,3,84,42,0,645,516,1,0,0,0,645,
        536,1,0,0,0,645,543,1,0,0,0,645,545,1,0,0,0,645,552,1,0,0,0,645,
        556,1,0,0,0,645,567,1,0,0,0,645,569,1,0,0,0,645,577,1,0,0,0,645,
        589,1,0,0,0,645,599,1,0,0,0,645,616,1,0,0,0,645,617,1,0,0,0,645,
        619,1,0,0,0,645,624,1,0,0,0,645,627,1,0,0,0,645,631,1,0,0,0,645,
        635,1,0,0,0,645,639,1,0,0,0,645,644,1,0,0,0,646,728,1,0,0,0,647,
        651,10,16,0,0,648,652,5,201,0,0,649,652,5,230,0,0,650,652,5,221,
        0,0,651,648,1,0,0,0,651,649,1,0,0,0,651,650,1,0,0,0,652,653,1,0,
        0,0,653,727,3,76,38,17,654,658,10,15,0,0,655,659,5,222,0,0,656,659,
        5,207,0,0,657,659,5,206,0,0,658,655,1,0,0,0,658,656,1,0,0,0,658,
        657,1,0,0,0,659,660,1,0,0,0,660,727,3,76,38,16,661,680,10,14,0,0,
        662,681,5,210,0,0,663,681,5,211,0,0,664,681,5,220,0,0,665,681,5,
        217,0,0,666,681,5,212,0,0,667,681,5,219,0,0,668,681,5,213,0,0,669,
        671,5,70,0,0,670,669,1,0,0,0,670,671,1,0,0,0,671,673,1,0,0,0,672,
        674,5,114,0,0,673,672,1,0,0,0,673,674,1,0,0,0,674,675,1,0,0,0,675,
        681,5,79,0,0,676,678,5,114,0,0,677,676,1,0,0,0,677,678,1,0,0,0,678,
        679,1,0,0,0,679,681,7,12,0,0,680,662,1,0,0,0,680,663,1,0,0,0,680,
        664,1,0,0,0,680,665,1,0,0,0,680,666,1,0,0,0,680,667,1,0,0,0,680,
        668,1,0,0,0,680,670,1,0,0,0,680,677,1,0,0,0,681,682,1,0,0,0,682,
        727,3,76,38,15,683,684,10,11,0,0,684,685,5,6,0,0,685,727,3,76,38,
        12,686,687,10,10,0,0,687,688,5,120,0,0,688,727,3,76,38,11,689,691,
        10,9,0,0,690,692,5,114,0,0,691,690,1,0,0,0,691,692,1,0,0,0,692,693,
        1,0,0,0,693,694,5,16,0,0,694,695,3,76,38,0,695,696,5,6,0,0,696,697,
        3,76,38,10,697,727,1,0,0,0,698,699,10,8,0,0,699,700,5,223,0,0,700,
        701,3,76,38,0,701,702,5,204,0,0,702,703,3,76,38,8,703,727,1,0,0,
        0,704,705,10,19,0,0,705,706,5,216,0,0,706,707,3,76,38,0,707,708,
        5,227,0,0,708,727,1,0,0,0,709,710,10,18,0,0,710,711,5,209,0,0,711,
        727,5,196,0,0,712,713,10,13,0,0,713,715,5,87,0,0,714,716,5,114,0,
        0,715,714,1,0,0,0,715,716,1,0,0,0,716,717,1,0,0,0,717,727,5,115,
        0,0,718,724,10,7,0,0,719,725,3,112,56,0,720,721,5,10,0,0,721,725,
        3,114,57,0,722,723,5,10,0,0,723,725,5,198,0,0,724,719,1,0,0,0,724,
        720,1,0,0,0,724,722,1,0,0,0,725,727,1,0,0,0,726,647,1,0,0,0,726,
        654,1,0,0,0,726,661,1,0,0,0,726,683,1,0,0,0,726,686,1,0,0,0,726,
        689,1,0,0,0,726,698,1,0,0,0,726,704,1,0,0,0,726,709,1,0,0,0,726,
        712,1,0,0,0,726,718,1,0,0,0,727,730,1,0,0,0,728,726,1,0,0,0,728,
        729,1,0,0,0,729,77,1,0,0,0,730,728,1,0,0,0,731,736,3,80,40,0,732,
        733,5,205,0,0,733,735,3,80,40,0,734,732,1,0,0,0,735,738,1,0,0,0,
        736,734,1,0,0,0,736,737,1,0,0,0,737,79,1,0,0,0,738,736,1,0,0,0,739,
        742,3,82,41,0,740,742,3,76,38,0,741,739,1,0,0,0,741,740,1,0,0,0,
        742,81,1,0,0,0,743,744,5,218,0,0,744,749,3,114,57,0,745,746,5,205,
        0,0,746,748,3,114,57,0,747,745,1,0,0,0,748,751,1,0,0,0,749,747,1,
        0,0,0,749,750,1,0,0,0,750,752,1,0,0,0,751,749,1,0,0,0,752,753,5,
        228,0,0,753,763,1,0,0,0,754,759,3,114,57,0,755,756,5,205,0,0,756,
        758,3,114,57,0,757,755,1,0,0,0,758,761,1,0,0,0,759,757,1,0,0,0,759,
        760,1,0,0,0,760,763,1,0,0,0,761,759,1,0,0,0,762,743,1,0,0,0,762,
        754,1,0,0,0,763,764,1,0,0,0,764,765,5,200,0,0,765,766,3,76,38,0,
        766,83,1,0,0,0,767,775,5,199,0,0,768,769,3,92,46,0,769,770,5,209,
        0,0,770,772,1,0,0,0,771,768,1,0,0,0,771,772,1,0,0,0,772,773,1,0,
        0,0,773,775,3,86,43,0,774,767,1,0,0,0,774,771,1,0,0,0,775,85,1,0,
        0,0,776,781,3,114,57,0,777,778,5,209,0,0,778,780,3,114,57,0,779,
        777,1,0,0,0,780,783,1,0,0,0,781,779,1,0,0,0,781,782,1,0,0,0,782,
        87,1,0,0,0,783,781,1,0,0,0,784,785,6,44,-1,0,785,792,3,92,46,0,786,
        792,3,90,45,0,787,788,5,218,0,0,788,789,3,2,1,0,789,790,5,228,0,
        0,790,792,1,0,0,0,791,784,1,0,0,0,791,786,1,0,0,0,791,787,1,0,0,
        0,792,801,1,0,0,0,793,797,10,1,0,0,794,798,3,112,56,0,795,796,5,
        10,0,0,796,798,3,114,57,0,797,794,1,0,0,0,797,795,1,0,0,0,798,800,
        1,0,0,0,799,793,1,0,0,0,800,803,1,0,0,0,801,799,1,0,0,0,801,802,
        1,0,0,0,802,89,1,0,0,0,803,801,1,0,0,0,804,805,3,114,57,0,805,807,
        5,218,0,0,806,808,3,94,47,0,807,806,1,0,0,0,807,808,1,0,0,0,808,
        809,1,0,0,0,809,810,5,228,0,0,810,91,1,0,0,0,811,812,3,98,49,0,812,
        813,5,209,0,0,813,815,1,0,0,0,814,811,1,0,0,0,814,815,1,0,0,0,815,
        816,1,0,0,0,816,817,3,114,57,0,817,93,1,0,0,0,818,823,3,96,48,0,
        819,820,5,205,0,0,820,822,3,96,48,0,821,819,1,0,0,0,822,825,1,0,
        0,0,823,821,1,0,0,0,823,824,1,0,0,0,824,95,1,0,0,0,825,823,1,0,0,
        0,826,830,3,86,43,0,827,830,3,90,45,0,828,830,3,104,52,0,829,826,
        1,0,0,0,829,827,1,0,0,0,829,828,1,0,0,0,830,97,1,0,0,0,831,832,3,
        114,57,0,832,99,1,0,0,0,833,842,5,194,0,0,834,835,5,209,0,0,835,
        842,7,13,0,0,836,837,5,196,0,0,837,839,5,209,0,0,838,840,7,13,0,
        0,839,838,1,0,0,0,839,840,1,0,0,0,840,842,1,0,0,0,841,833,1,0,0,
        0,841,834,1,0,0,0,841,836,1,0,0,0,842,101,1,0,0,0,843,845,7,14,0,
        0,844,843,1,0,0,0,844,845,1,0,0,0,845,852,1,0,0,0,846,853,3,100,
        50,0,847,853,5,195,0,0,848,853,5,196,0,0,849,853,5,197,0,0,850,853,
        5,81,0,0,851,853,5,112,0,0,852,846,1,0,0,0,852,847,1,0,0,0,852,848,
        1,0,0,0,852,849,1,0,0,0,852,850,1,0,0,0,852,851,1,0,0,0,853,103,
        1,0,0,0,854,858,3,102,51,0,855,858,5,198,0,0,856,858,5,115,0,0,857,
        854,1,0,0,0,857,855,1,0,0,0,857,856,1,0,0,0,858,105,1,0,0,0,859,
        860,7,15,0,0,860,107,1,0,0,0,861,862,7,16,0,0,862,109,1,0,0,0,863,
        864,7,17,0,0,864,111,1,0,0,0,865,868,5,193,0,0,866,868,3,110,55,
        0,867,865,1,0,0,0,867,866,1,0,0,0,868,113,1,0,0,0,869,873,5,193,
        0,0,870,873,3,106,53,0,871,873,3,108,54,0,872,869,1,0,0,0,872,870,
        1,0,0,0,872,871,1,0,0,0,873,115,1,0,0,0,874,877,3,114,57,0,875,877,
        5,115,0,0,876,874,1,0,0,0,876,875,1,0,0,0,877,117,1,0,0,0,878,879,
        5,198,0,0,879,880,5,211,0,0,880,881,3,102,51,0,881,119,1,0,0,0,114,
        122,132,140,143,147,150,154,157,160,163,166,169,173,177,180,183,
        186,189,198,204,231,250,258,261,267,275,278,284,286,290,295,298,
        301,305,309,312,314,317,321,325,328,330,332,335,340,351,357,362,
        369,374,378,382,387,394,402,405,408,427,441,457,469,481,489,493,
        500,506,514,519,528,532,563,580,592,602,605,609,612,624,641,645,
        651,658,670,673,677,680,691,715,724,726,728,736,741,749,759,762,
        771,774,781,791,797,801,807,814,823,829,839,841,844,852,857,867,
        872,876
    ]

class HogQLParser ( Parser ):

    grammarFileName = "HogQLParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'false'", "'true'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'->'", "'*'", 
                     "'`'", "'\\'", "':'", "','", "'||'", "'-'", "'$'", 
                     "'.'", "'=='", "'='", "'>='", "'>'", "'#'", "'{'", 
                     "'['", "'<='", "'('", "'<'", "<INVALID>", "'%'", "'+'", 
                     "'?'", "'\"'", "'''", "'}'", "']'", "')'", "';'", "'/'", 
                     "'_'" ]

    symbolicNames = [ "<INVALID>", "ADD", "AFTER", "ALIAS", "ALL", "ALTER", 
                      "AND", "ANTI", "ANY", "ARRAY", "AS", "ASCENDING", 
                      "ASOF", "AST", "ASYNC", "ATTACH", "BETWEEN", "BOTH", 
                      "BY", "CASE", "CAST", "CHECK", "CLEAR", "CLUSTER", 
                      "CODEC", "COLLATE", "COLUMN", "COMMENT", "CONSTRAINT", 
                      "CREATE", "CROSS", "CUBE", "CURRENT", "DATABASE", 
                      "DATABASES", "DATE", "DAY", "DEDUPLICATE", "DEFAULT", 
                      "DELAY", "DELETE", "DESC", "DESCENDING", "DESCRIBE", 
                      "DETACH", "DICTIONARIES", "DICTIONARY", "DISK", "DISTINCT", 
                      "DISTRIBUTED", "DROP", "ELSE", "END", "ENGINE", "EVENTS", 
                      "EXISTS", "EXPLAIN", "EXPRESSION", "EXTRACT", "FETCHES", 
                      "FINAL", "FIRST", "FLUSH", "FOLLOWING", "FOR", "FORMAT", 
                      "FREEZE", "FROM", "FULL", "FUNCTION", "GLOBAL", "GRANULARITY", 
                      "GROUP", "HAVING", "HIERARCHICAL", "HOUR", "ID", "IF", 
                      "ILIKE", "IN", "INDEX", "INF", "INJECTIVE", "INNER", 
                      "INSERT", "INTERVAL", "INTO", "IS", "IS_OBJECT_ID", 
                      "JOIN", "KEY", "KILL", "LAST", "LAYOUT", "LEADING", 
                      "LEFT", "LIFETIME", "LIKE", "LIMIT", "LIVE", "LOCAL", 
                      "LOGS", "MATERIALIZE", "MATERIALIZED", "MAX", "MERGES", 
                      "MIN", "MINUTE", "MODIFY", "MONTH", "MOVE", "MUTATION", 
                      "NAN_SQL", "NO", "NOT", "NULL_SQL", "NULLS", "OFFSET", 
                      "ON", "OPTIMIZE", "OR", "ORDER", "OUTER", "OUTFILE", 
                      "OVER", "PARTITION", "POPULATE", "PRECEDING", "PREWHERE", 
                      "PRIMARY", "PROJECTION", "QUARTER", "RANGE", "RELOAD", 
                      "REMOVE", "RENAME", "REPLACE", "REPLICA", "REPLICATED", 
                      "RIGHT", "ROLLUP", "ROW", "ROWS", "SAMPLE", "SECOND", 
                      "SELECT", "SEMI", "SENDS", "SET", "SETTINGS", "SHOW", 
                      "SOURCE", "START", "STOP", "SUBSTRING", "SYNC", "SYNTAX", 
                      "SYSTEM", "TABLE", "TABLES", "TEMPORARY", "TEST", 
                      "THEN", "TIES", "TIMEOUT", "TIMESTAMP", "TO", "TOP", 
                      "TOTALS", "TRAILING", "TRIM", "TRUNCATE", "TTL", "TYPE", 
                      "UNBOUNDED", "UNION", "UPDATE", "USE", "USING", "UUID", 
                      "VALUES", "VIEW", "VOLUME", "WATCH", "WEEK", "WHEN", 
                      "WHERE", "WINDOW", "WITH", "YEAR", "JSON_FALSE", "JSON_TRUE", 
                      "ESCAPE_CHAR", "IDENTIFIER", "FLOATING_LITERAL", "OCTAL_LITERAL", 
                      "DECIMAL_LITERAL", "HEXADECIMAL_LITERAL", "STRING_LITERAL", 
                      "PLACEHOLDER", "ARROW", "ASTERISK", "BACKQUOTE", "BACKSLASH", 
                      "COLON", "COMMA", "CONCAT", "DASH", "DOLLAR", "DOT", 
                      "EQ_DOUBLE", "EQ_SINGLE", "GE", "GT", "HASH", "LBRACE", 
                      "LBRACKET", "LE", "LPAREN", "LT", "NOT_EQ", "PERCENT", 
                      "PLUS", "QUERY", "QUOTE_DOUBLE", "QUOTE_SINGLE", "RBRACE", 
                      "RBRACKET", "RPAREN", "SEMICOLON", "SLASH", "UNDERSCORE", 
                      "MULTI_LINE_COMMENT", "SINGLE_LINE_COMMENT", "WHITESPACE" ]

    RULE_select = 0
    RULE_selectUnionStmt = 1
    RULE_selectStmtWithParens = 2
    RULE_selectStmt = 3
    RULE_withClause = 4
    RULE_topClause = 5
    RULE_fromClause = 6
    RULE_arrayJoinClause = 7
    RULE_windowClause = 8
    RULE_prewhereClause = 9
    RULE_whereClause = 10
    RULE_groupByClause = 11
    RULE_havingClause = 12
    RULE_orderByClause = 13
    RULE_projectionOrderByClause = 14
    RULE_limitClause = 15
    RULE_settingsClause = 16
    RULE_joinExpr = 17
    RULE_joinOp = 18
    RULE_joinOpCross = 19
    RULE_joinConstraintClause = 20
    RULE_sampleClause = 21
    RULE_limitExpr = 22
    RULE_orderExprList = 23
    RULE_orderExpr = 24
    RULE_ratioExpr = 25
    RULE_settingExprList = 26
    RULE_settingExpr = 27
    RULE_windowExpr = 28
    RULE_winPartitionByClause = 29
    RULE_winOrderByClause = 30
    RULE_winFrameClause = 31
    RULE_winFrameExtend = 32
    RULE_winFrameBound = 33
    RULE_expr = 34
    RULE_columnTypeExpr = 35
    RULE_columnExprList = 36
    RULE_columnsExpr = 37
    RULE_columnExpr = 38
    RULE_columnArgList = 39
    RULE_columnArgExpr = 40
    RULE_columnLambdaExpr = 41
    RULE_columnIdentifier = 42
    RULE_nestedIdentifier = 43
    RULE_tableExpr = 44
    RULE_tableFunctionExpr = 45
    RULE_tableIdentifier = 46
    RULE_tableArgList = 47
    RULE_tableArgExpr = 48
    RULE_databaseIdentifier = 49
    RULE_floatingLiteral = 50
    RULE_numberLiteral = 51
    RULE_literal = 52
    RULE_interval = 53
    RULE_keyword = 54
    RULE_keywordForAlias = 55
    RULE_alias = 56
    RULE_identifier = 57
    RULE_identifierOrNull = 58
    RULE_enumValue = 59

    ruleNames =  [ "select", "selectUnionStmt", "selectStmtWithParens", 
                   "selectStmt", "withClause", "topClause", "fromClause", 
                   "arrayJoinClause", "windowClause", "prewhereClause", 
                   "whereClause", "groupByClause", "havingClause", "orderByClause", 
                   "projectionOrderByClause", "limitClause", "settingsClause", 
                   "joinExpr", "joinOp", "joinOpCross", "joinConstraintClause", 
                   "sampleClause", "limitExpr", "orderExprList", "orderExpr", 
                   "ratioExpr", "settingExprList", "settingExpr", "windowExpr", 
                   "winPartitionByClause", "winOrderByClause", "winFrameClause", 
                   "winFrameExtend", "winFrameBound", "expr", "columnTypeExpr", 
                   "columnExprList", "columnsExpr", "columnExpr", "columnArgList", 
                   "columnArgExpr", "columnLambdaExpr", "columnIdentifier", 
                   "nestedIdentifier", "tableExpr", "tableFunctionExpr", 
                   "tableIdentifier", "tableArgList", "tableArgExpr", "databaseIdentifier", 
                   "floatingLiteral", "numberLiteral", "literal", "interval", 
                   "keyword", "keywordForAlias", "alias", "identifier", 
                   "identifierOrNull", "enumValue" ]

    EOF = Token.EOF
    ADD=1
    AFTER=2
    ALIAS=3
    ALL=4
    ALTER=5
    AND=6
    ANTI=7
    ANY=8
    ARRAY=9
    AS=10
    ASCENDING=11
    ASOF=12
    AST=13
    ASYNC=14
    ATTACH=15
    BETWEEN=16
    BOTH=17
    BY=18
    CASE=19
    CAST=20
    CHECK=21
    CLEAR=22
    CLUSTER=23
    CODEC=24
    COLLATE=25
    COLUMN=26
    COMMENT=27
    CONSTRAINT=28
    CREATE=29
    CROSS=30
    CUBE=31
    CURRENT=32
    DATABASE=33
    DATABASES=34
    DATE=35
    DAY=36
    DEDUPLICATE=37
    DEFAULT=38
    DELAY=39
    DELETE=40
    DESC=41
    DESCENDING=42
    DESCRIBE=43
    DETACH=44
    DICTIONARIES=45
    DICTIONARY=46
    DISK=47
    DISTINCT=48
    DISTRIBUTED=49
    DROP=50
    ELSE=51
    END=52
    ENGINE=53
    EVENTS=54
    EXISTS=55
    EXPLAIN=56
    EXPRESSION=57
    EXTRACT=58
    FETCHES=59
    FINAL=60
    FIRST=61
    FLUSH=62
    FOLLOWING=63
    FOR=64
    FORMAT=65
    FREEZE=66
    FROM=67
    FULL=68
    FUNCTION=69
    GLOBAL=70
    GRANULARITY=71
    GROUP=72
    HAVING=73
    HIERARCHICAL=74
    HOUR=75
    ID=76
    IF=77
    ILIKE=78
    IN=79
    INDEX=80
    INF=81
    INJECTIVE=82
    INNER=83
    INSERT=84
    INTERVAL=85
    INTO=86
    IS=87
    IS_OBJECT_ID=88
    JOIN=89
    KEY=90
    KILL=91
    LAST=92
    LAYOUT=93
    LEADING=94
    LEFT=95
    LIFETIME=96
    LIKE=97
    LIMIT=98
    LIVE=99
    LOCAL=100
    LOGS=101
    MATERIALIZE=102
    MATERIALIZED=103
    MAX=104
    MERGES=105
    MIN=106
    MINUTE=107
    MODIFY=108
    MONTH=109
    MOVE=110
    MUTATION=111
    NAN_SQL=112
    NO=113
    NOT=114
    NULL_SQL=115
    NULLS=116
    OFFSET=117
    ON=118
    OPTIMIZE=119
    OR=120
    ORDER=121
    OUTER=122
    OUTFILE=123
    OVER=124
    PARTITION=125
    POPULATE=126
    PRECEDING=127
    PREWHERE=128
    PRIMARY=129
    PROJECTION=130
    QUARTER=131
    RANGE=132
    RELOAD=133
    REMOVE=134
    RENAME=135
    REPLACE=136
    REPLICA=137
    REPLICATED=138
    RIGHT=139
    ROLLUP=140
    ROW=141
    ROWS=142
    SAMPLE=143
    SECOND=144
    SELECT=145
    SEMI=146
    SENDS=147
    SET=148
    SETTINGS=149
    SHOW=150
    SOURCE=151
    START=152
    STOP=153
    SUBSTRING=154
    SYNC=155
    SYNTAX=156
    SYSTEM=157
    TABLE=158
    TABLES=159
    TEMPORARY=160
    TEST=161
    THEN=162
    TIES=163
    TIMEOUT=164
    TIMESTAMP=165
    TO=166
    TOP=167
    TOTALS=168
    TRAILING=169
    TRIM=170
    TRUNCATE=171
    TTL=172
    TYPE=173
    UNBOUNDED=174
    UNION=175
    UPDATE=176
    USE=177
    USING=178
    UUID=179
    VALUES=180
    VIEW=181
    VOLUME=182
    WATCH=183
    WEEK=184
    WHEN=185
    WHERE=186
    WINDOW=187
    WITH=188
    YEAR=189
    JSON_FALSE=190
    JSON_TRUE=191
    ESCAPE_CHAR=192
    IDENTIFIER=193
    FLOATING_LITERAL=194
    OCTAL_LITERAL=195
    DECIMAL_LITERAL=196
    HEXADECIMAL_LITERAL=197
    STRING_LITERAL=198
    PLACEHOLDER=199
    ARROW=200
    ASTERISK=201
    BACKQUOTE=202
    BACKSLASH=203
    COLON=204
    COMMA=205
    CONCAT=206
    DASH=207
    DOLLAR=208
    DOT=209
    EQ_DOUBLE=210
    EQ_SINGLE=211
    GE=212
    GT=213
    HASH=214
    LBRACE=215
    LBRACKET=216
    LE=217
    LPAREN=218
    LT=219
    NOT_EQ=220
    PERCENT=221
    PLUS=222
    QUERY=223
    QUOTE_DOUBLE=224
    QUOTE_SINGLE=225
    RBRACE=226
    RBRACKET=227
    RPAREN=228
    SEMICOLON=229
    SLASH=230
    UNDERSCORE=231
    MULTI_LINE_COMMENT=232
    SINGLE_LINE_COMMENT=233
    WHITESPACE=234

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class SelectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(HogQLParser.EOF, 0)

        def selectUnionStmt(self):
            return self.getTypedRuleContext(HogQLParser.SelectUnionStmtContext,0)


        def selectStmt(self):
            return self.getTypedRuleContext(HogQLParser.SelectStmtContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_select

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelect" ):
                return visitor.visitSelect(self)
            else:
                return visitor.visitChildren(self)




    def select(self):

        localctx = HogQLParser.SelectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_select)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 122
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
            if la_ == 1:
                self.state = 120
                self.selectUnionStmt()
                pass

            elif la_ == 2:
                self.state = 121
                self.selectStmt()
                pass


            self.state = 124
            self.match(HogQLParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectUnionStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selectStmtWithParens(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.SelectStmtWithParensContext)
            else:
                return self.getTypedRuleContext(HogQLParser.SelectStmtWithParensContext,i)


        def UNION(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.UNION)
            else:
                return self.getToken(HogQLParser.UNION, i)

        def ALL(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.ALL)
            else:
                return self.getToken(HogQLParser.ALL, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_selectUnionStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectUnionStmt" ):
                return visitor.visitSelectUnionStmt(self)
            else:
                return visitor.visitChildren(self)




    def selectUnionStmt(self):

        localctx = HogQLParser.SelectUnionStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_selectUnionStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 126
            self.selectStmtWithParens()
            self.state = 132
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==175:
                self.state = 127
                self.match(HogQLParser.UNION)
                self.state = 128
                self.match(HogQLParser.ALL)
                self.state = 129
                self.selectStmtWithParens()
                self.state = 134
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectStmtWithParensContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selectStmt(self):
            return self.getTypedRuleContext(HogQLParser.SelectStmtContext,0)


        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)

        def selectUnionStmt(self):
            return self.getTypedRuleContext(HogQLParser.SelectUnionStmtContext,0)


        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_selectStmtWithParens

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectStmtWithParens" ):
                return visitor.visitSelectStmtWithParens(self)
            else:
                return visitor.visitChildren(self)




    def selectStmtWithParens(self):

        localctx = HogQLParser.SelectStmtWithParensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_selectStmtWithParens)
        try:
            self.state = 140
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [145, 188]:
                self.enterOuterAlt(localctx, 1)
                self.state = 135
                self.selectStmt()
                pass
            elif token in [218]:
                self.enterOuterAlt(localctx, 2)
                self.state = 136
                self.match(HogQLParser.LPAREN)
                self.state = 137
                self.selectUnionStmt()
                self.state = 138
                self.match(HogQLParser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.with_ = None # WithClauseContext
            self.columns = None # ColumnExprListContext
            self.from_ = None # FromClauseContext
            self.where = None # WhereClauseContext

        def SELECT(self):
            return self.getToken(HogQLParser.SELECT, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def DISTINCT(self):
            return self.getToken(HogQLParser.DISTINCT, 0)

        def topClause(self):
            return self.getTypedRuleContext(HogQLParser.TopClauseContext,0)


        def arrayJoinClause(self):
            return self.getTypedRuleContext(HogQLParser.ArrayJoinClauseContext,0)


        def windowClause(self):
            return self.getTypedRuleContext(HogQLParser.WindowClauseContext,0)


        def prewhereClause(self):
            return self.getTypedRuleContext(HogQLParser.PrewhereClauseContext,0)


        def groupByClause(self):
            return self.getTypedRuleContext(HogQLParser.GroupByClauseContext,0)


        def WITH(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.WITH)
            else:
                return self.getToken(HogQLParser.WITH, i)

        def TOTALS(self):
            return self.getToken(HogQLParser.TOTALS, 0)

        def havingClause(self):
            return self.getTypedRuleContext(HogQLParser.HavingClauseContext,0)


        def orderByClause(self):
            return self.getTypedRuleContext(HogQLParser.OrderByClauseContext,0)


        def limitClause(self):
            return self.getTypedRuleContext(HogQLParser.LimitClauseContext,0)


        def settingsClause(self):
            return self.getTypedRuleContext(HogQLParser.SettingsClauseContext,0)


        def withClause(self):
            return self.getTypedRuleContext(HogQLParser.WithClauseContext,0)


        def fromClause(self):
            return self.getTypedRuleContext(HogQLParser.FromClauseContext,0)


        def whereClause(self):
            return self.getTypedRuleContext(HogQLParser.WhereClauseContext,0)


        def CUBE(self):
            return self.getToken(HogQLParser.CUBE, 0)

        def ROLLUP(self):
            return self.getToken(HogQLParser.ROLLUP, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_selectStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectStmt" ):
                return visitor.visitSelectStmt(self)
            else:
                return visitor.visitChildren(self)




    def selectStmt(self):

        localctx = HogQLParser.SelectStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_selectStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 143
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==188:
                self.state = 142
                localctx.with_ = self.withClause()


            self.state = 145
            self.match(HogQLParser.SELECT)
            self.state = 147
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
            if la_ == 1:
                self.state = 146
                self.match(HogQLParser.DISTINCT)


            self.state = 150
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.state = 149
                self.topClause()


            self.state = 152
            localctx.columns = self.columnExprList()
            self.state = 154
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==67:
                self.state = 153
                localctx.from_ = self.fromClause()


            self.state = 157
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9 or _la==83 or _la==95:
                self.state = 156
                self.arrayJoinClause()


            self.state = 160
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==187:
                self.state = 159
                self.windowClause()


            self.state = 163
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==128:
                self.state = 162
                self.prewhereClause()


            self.state = 166
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==186:
                self.state = 165
                localctx.where = self.whereClause()


            self.state = 169
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==72:
                self.state = 168
                self.groupByClause()


            self.state = 173
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
            if la_ == 1:
                self.state = 171
                self.match(HogQLParser.WITH)
                self.state = 172
                _la = self._input.LA(1)
                if not(_la==31 or _la==140):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 177
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==188:
                self.state = 175
                self.match(HogQLParser.WITH)
                self.state = 176
                self.match(HogQLParser.TOTALS)


            self.state = 180
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==73:
                self.state = 179
                self.havingClause()


            self.state = 183
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==121:
                self.state = 182
                self.orderByClause()


            self.state = 186
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==98:
                self.state = 185
                self.limitClause()


            self.state = 189
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==149:
                self.state = 188
                self.settingsClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WithClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(HogQLParser.WITH, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_withClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWithClause" ):
                return visitor.visitWithClause(self)
            else:
                return visitor.visitChildren(self)




    def withClause(self):

        localctx = HogQLParser.WithClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_withClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 191
            self.match(HogQLParser.WITH)
            self.state = 192
            self.columnExprList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TopClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TOP(self):
            return self.getToken(HogQLParser.TOP, 0)

        def DECIMAL_LITERAL(self):
            return self.getToken(HogQLParser.DECIMAL_LITERAL, 0)

        def WITH(self):
            return self.getToken(HogQLParser.WITH, 0)

        def TIES(self):
            return self.getToken(HogQLParser.TIES, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_topClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTopClause" ):
                return visitor.visitTopClause(self)
            else:
                return visitor.visitChildren(self)




    def topClause(self):

        localctx = HogQLParser.TopClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_topClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 194
            self.match(HogQLParser.TOP)
            self.state = 195
            self.match(HogQLParser.DECIMAL_LITERAL)
            self.state = 198
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
            if la_ == 1:
                self.state = 196
                self.match(HogQLParser.WITH)
                self.state = 197
                self.match(HogQLParser.TIES)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FromClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(HogQLParser.FROM, 0)

        def joinExpr(self):
            return self.getTypedRuleContext(HogQLParser.JoinExprContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_fromClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFromClause" ):
                return visitor.visitFromClause(self)
            else:
                return visitor.visitChildren(self)




    def fromClause(self):

        localctx = HogQLParser.FromClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_fromClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 200
            self.match(HogQLParser.FROM)
            self.state = 201
            self.joinExpr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayJoinClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ARRAY(self):
            return self.getToken(HogQLParser.ARRAY, 0)

        def JOIN(self):
            return self.getToken(HogQLParser.JOIN, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def LEFT(self):
            return self.getToken(HogQLParser.LEFT, 0)

        def INNER(self):
            return self.getToken(HogQLParser.INNER, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_arrayJoinClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayJoinClause" ):
                return visitor.visitArrayJoinClause(self)
            else:
                return visitor.visitChildren(self)




    def arrayJoinClause(self):

        localctx = HogQLParser.ArrayJoinClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_arrayJoinClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 204
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==83 or _la==95:
                self.state = 203
                _la = self._input.LA(1)
                if not(_la==83 or _la==95):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 206
            self.match(HogQLParser.ARRAY)
            self.state = 207
            self.match(HogQLParser.JOIN)
            self.state = 208
            self.columnExprList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WINDOW(self):
            return self.getToken(HogQLParser.WINDOW, 0)

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def AS(self):
            return self.getToken(HogQLParser.AS, 0)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)

        def windowExpr(self):
            return self.getTypedRuleContext(HogQLParser.WindowExprContext,0)


        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_windowClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindowClause" ):
                return visitor.visitWindowClause(self)
            else:
                return visitor.visitChildren(self)




    def windowClause(self):

        localctx = HogQLParser.WindowClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_windowClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 210
            self.match(HogQLParser.WINDOW)
            self.state = 211
            self.identifier()
            self.state = 212
            self.match(HogQLParser.AS)
            self.state = 213
            self.match(HogQLParser.LPAREN)
            self.state = 214
            self.windowExpr()
            self.state = 215
            self.match(HogQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrewhereClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PREWHERE(self):
            return self.getToken(HogQLParser.PREWHERE, 0)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_prewhereClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrewhereClause" ):
                return visitor.visitPrewhereClause(self)
            else:
                return visitor.visitChildren(self)




    def prewhereClause(self):

        localctx = HogQLParser.PrewhereClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_prewhereClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 217
            self.match(HogQLParser.PREWHERE)
            self.state = 218
            self.columnExpr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhereClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(HogQLParser.WHERE, 0)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_whereClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhereClause" ):
                return visitor.visitWhereClause(self)
            else:
                return visitor.visitChildren(self)




    def whereClause(self):

        localctx = HogQLParser.WhereClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_whereClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 220
            self.match(HogQLParser.WHERE)
            self.state = 221
            self.columnExpr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GROUP(self):
            return self.getToken(HogQLParser.GROUP, 0)

        def BY(self):
            return self.getToken(HogQLParser.BY, 0)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def CUBE(self):
            return self.getToken(HogQLParser.CUBE, 0)

        def ROLLUP(self):
            return self.getToken(HogQLParser.ROLLUP, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_groupByClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroupByClause" ):
                return visitor.visitGroupByClause(self)
            else:
                return visitor.visitChildren(self)




    def groupByClause(self):

        localctx = HogQLParser.GroupByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_groupByClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 223
            self.match(HogQLParser.GROUP)
            self.state = 224
            self.match(HogQLParser.BY)
            self.state = 231
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,20,self._ctx)
            if la_ == 1:
                self.state = 225
                _la = self._input.LA(1)
                if not(_la==31 or _la==140):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 226
                self.match(HogQLParser.LPAREN)
                self.state = 227
                self.columnExprList()
                self.state = 228
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 2:
                self.state = 230
                self.columnExprList()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HavingClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HAVING(self):
            return self.getToken(HogQLParser.HAVING, 0)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_havingClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHavingClause" ):
                return visitor.visitHavingClause(self)
            else:
                return visitor.visitChildren(self)




    def havingClause(self):

        localctx = HogQLParser.HavingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_havingClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 233
            self.match(HogQLParser.HAVING)
            self.state = 234
            self.columnExpr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(HogQLParser.ORDER, 0)

        def BY(self):
            return self.getToken(HogQLParser.BY, 0)

        def orderExprList(self):
            return self.getTypedRuleContext(HogQLParser.OrderExprListContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_orderByClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrderByClause" ):
                return visitor.visitOrderByClause(self)
            else:
                return visitor.visitChildren(self)




    def orderByClause(self):

        localctx = HogQLParser.OrderByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_orderByClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 236
            self.match(HogQLParser.ORDER)
            self.state = 237
            self.match(HogQLParser.BY)
            self.state = 238
            self.orderExprList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProjectionOrderByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(HogQLParser.ORDER, 0)

        def BY(self):
            return self.getToken(HogQLParser.BY, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_projectionOrderByClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProjectionOrderByClause" ):
                return visitor.visitProjectionOrderByClause(self)
            else:
                return visitor.visitChildren(self)




    def projectionOrderByClause(self):

        localctx = HogQLParser.ProjectionOrderByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_projectionOrderByClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 240
            self.match(HogQLParser.ORDER)
            self.state = 241
            self.match(HogQLParser.BY)
            self.state = 242
            self.columnExprList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LimitClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIMIT(self):
            return self.getToken(HogQLParser.LIMIT, 0)

        def limitExpr(self):
            return self.getTypedRuleContext(HogQLParser.LimitExprContext,0)


        def BY(self):
            return self.getToken(HogQLParser.BY, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def WITH(self):
            return self.getToken(HogQLParser.WITH, 0)

        def TIES(self):
            return self.getToken(HogQLParser.TIES, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_limitClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLimitClause" ):
                return visitor.visitLimitClause(self)
            else:
                return visitor.visitChildren(self)




    def limitClause(self):

        localctx = HogQLParser.LimitClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_limitClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 244
            self.match(HogQLParser.LIMIT)
            self.state = 245
            self.limitExpr()
            self.state = 250
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [188]:
                self.state = 246
                self.match(HogQLParser.WITH)
                self.state = 247
                self.match(HogQLParser.TIES)
                pass
            elif token in [18]:
                self.state = 248
                self.match(HogQLParser.BY)
                self.state = 249
                self.columnExprList()
                pass
            elif token in [-1, 149, 175, 228]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SettingsClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SETTINGS(self):
            return self.getToken(HogQLParser.SETTINGS, 0)

        def settingExprList(self):
            return self.getTypedRuleContext(HogQLParser.SettingExprListContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_settingsClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSettingsClause" ):
                return visitor.visitSettingsClause(self)
            else:
                return visitor.visitChildren(self)




    def settingsClause(self):

        localctx = HogQLParser.SettingsClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_settingsClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 252
            self.match(HogQLParser.SETTINGS)
            self.state = 253
            self.settingExprList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return HogQLParser.RULE_joinExpr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class JoinExprOpContext(JoinExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.JoinExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def joinExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.JoinExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.JoinExprContext,i)

        def JOIN(self):
            return self.getToken(HogQLParser.JOIN, 0)
        def joinConstraintClause(self):
            return self.getTypedRuleContext(HogQLParser.JoinConstraintClauseContext,0)

        def joinOp(self):
            return self.getTypedRuleContext(HogQLParser.JoinOpContext,0)

        def GLOBAL(self):
            return self.getToken(HogQLParser.GLOBAL, 0)
        def LOCAL(self):
            return self.getToken(HogQLParser.LOCAL, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinExprOp" ):
                return visitor.visitJoinExprOp(self)
            else:
                return visitor.visitChildren(self)


    class JoinExprTableContext(JoinExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.JoinExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tableExpr(self):
            return self.getTypedRuleContext(HogQLParser.TableExprContext,0)

        def FINAL(self):
            return self.getToken(HogQLParser.FINAL, 0)
        def sampleClause(self):
            return self.getTypedRuleContext(HogQLParser.SampleClauseContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinExprTable" ):
                return visitor.visitJoinExprTable(self)
            else:
                return visitor.visitChildren(self)


    class JoinExprParensContext(JoinExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.JoinExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def joinExpr(self):
            return self.getTypedRuleContext(HogQLParser.JoinExprContext,0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinExprParens" ):
                return visitor.visitJoinExprParens(self)
            else:
                return visitor.visitChildren(self)


    class JoinExprCrossOpContext(JoinExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.JoinExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def joinExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.JoinExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.JoinExprContext,i)

        def joinOpCross(self):
            return self.getTypedRuleContext(HogQLParser.JoinOpCrossContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinExprCrossOp" ):
                return visitor.visitJoinExprCrossOp(self)
            else:
                return visitor.visitChildren(self)



    def joinExpr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = HogQLParser.JoinExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 34
        self.enterRecursionRule(localctx, 34, self.RULE_joinExpr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 267
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
            if la_ == 1:
                localctx = HogQLParser.JoinExprTableContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 256
                self.tableExpr(0)
                self.state = 258
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,22,self._ctx)
                if la_ == 1:
                    self.state = 257
                    self.match(HogQLParser.FINAL)


                self.state = 261
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,23,self._ctx)
                if la_ == 1:
                    self.state = 260
                    self.sampleClause()


                pass

            elif la_ == 2:
                localctx = HogQLParser.JoinExprParensContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 263
                self.match(HogQLParser.LPAREN)
                self.state = 264
                self.joinExpr(0)
                self.state = 265
                self.match(HogQLParser.RPAREN)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 286
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,28,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 284
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
                    if la_ == 1:
                        localctx = HogQLParser.JoinExprCrossOpContext(self, HogQLParser.JoinExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_joinExpr)
                        self.state = 269
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 270
                        self.joinOpCross()
                        self.state = 271
                        self.joinExpr(4)
                        pass

                    elif la_ == 2:
                        localctx = HogQLParser.JoinExprOpContext(self, HogQLParser.JoinExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_joinExpr)
                        self.state = 273
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 275
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==70 or _la==100:
                            self.state = 274
                            _la = self._input.LA(1)
                            if not(_la==70 or _la==100):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()


                        self.state = 278
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if ((_la) & ~0x3f) == 0 and ((1 << _la) & 4496) != 0 or (((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & 134250497) != 0 or _la==139 or _la==146:
                            self.state = 277
                            self.joinOp()


                        self.state = 280
                        self.match(HogQLParser.JOIN)
                        self.state = 281
                        self.joinExpr(0)
                        self.state = 282
                        self.joinConstraintClause()
                        pass

             
                self.state = 288
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,28,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class JoinOpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return HogQLParser.RULE_joinOp

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class JoinOpFullContext(JoinOpContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.JoinOpContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FULL(self):
            return self.getToken(HogQLParser.FULL, 0)
        def OUTER(self):
            return self.getToken(HogQLParser.OUTER, 0)
        def ALL(self):
            return self.getToken(HogQLParser.ALL, 0)
        def ANY(self):
            return self.getToken(HogQLParser.ANY, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinOpFull" ):
                return visitor.visitJoinOpFull(self)
            else:
                return visitor.visitChildren(self)


    class JoinOpInnerContext(JoinOpContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.JoinOpContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INNER(self):
            return self.getToken(HogQLParser.INNER, 0)
        def ALL(self):
            return self.getToken(HogQLParser.ALL, 0)
        def ANY(self):
            return self.getToken(HogQLParser.ANY, 0)
        def ASOF(self):
            return self.getToken(HogQLParser.ASOF, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinOpInner" ):
                return visitor.visitJoinOpInner(self)
            else:
                return visitor.visitChildren(self)


    class JoinOpLeftRightContext(JoinOpContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.JoinOpContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LEFT(self):
            return self.getToken(HogQLParser.LEFT, 0)
        def RIGHT(self):
            return self.getToken(HogQLParser.RIGHT, 0)
        def OUTER(self):
            return self.getToken(HogQLParser.OUTER, 0)
        def SEMI(self):
            return self.getToken(HogQLParser.SEMI, 0)
        def ALL(self):
            return self.getToken(HogQLParser.ALL, 0)
        def ANTI(self):
            return self.getToken(HogQLParser.ANTI, 0)
        def ANY(self):
            return self.getToken(HogQLParser.ANY, 0)
        def ASOF(self):
            return self.getToken(HogQLParser.ASOF, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinOpLeftRight" ):
                return visitor.visitJoinOpLeftRight(self)
            else:
                return visitor.visitChildren(self)



    def joinOp(self):

        localctx = HogQLParser.JoinOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_joinOp)
        self._la = 0 # Token type
        try:
            self.state = 332
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
            if la_ == 1:
                localctx = HogQLParser.JoinOpInnerContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 298
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
                if la_ == 1:
                    self.state = 290
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((_la) & ~0x3f) == 0 and ((1 << _la) & 4368) != 0:
                        self.state = 289
                        _la = self._input.LA(1)
                        if not(((_la) & ~0x3f) == 0 and ((1 << _la) & 4368) != 0):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 292
                    self.match(HogQLParser.INNER)
                    pass

                elif la_ == 2:
                    self.state = 293
                    self.match(HogQLParser.INNER)
                    self.state = 295
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((_la) & ~0x3f) == 0 and ((1 << _la) & 4368) != 0:
                        self.state = 294
                        _la = self._input.LA(1)
                        if not(((_la) & ~0x3f) == 0 and ((1 << _la) & 4368) != 0):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    pass

                elif la_ == 3:
                    self.state = 297
                    _la = self._input.LA(1)
                    if not(((_la) & ~0x3f) == 0 and ((1 << _la) & 4368) != 0):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass


                pass

            elif la_ == 2:
                localctx = HogQLParser.JoinOpLeftRightContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 314
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
                if la_ == 1:
                    self.state = 301
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((_la) & ~0x3f) == 0 and ((1 << _la) & 4496) != 0 or _la==146:
                        self.state = 300
                        _la = self._input.LA(1)
                        if not(((_la) & ~0x3f) == 0 and ((1 << _la) & 4496) != 0 or _la==146):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 303
                    _la = self._input.LA(1)
                    if not(_la==95 or _la==139):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 305
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==122:
                        self.state = 304
                        self.match(HogQLParser.OUTER)


                    pass

                elif la_ == 2:
                    self.state = 307
                    _la = self._input.LA(1)
                    if not(_la==95 or _la==139):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 309
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==122:
                        self.state = 308
                        self.match(HogQLParser.OUTER)


                    self.state = 312
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((_la) & ~0x3f) == 0 and ((1 << _la) & 4496) != 0 or _la==146:
                        self.state = 311
                        _la = self._input.LA(1)
                        if not(((_la) & ~0x3f) == 0 and ((1 << _la) & 4496) != 0 or _la==146):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    pass


                pass

            elif la_ == 3:
                localctx = HogQLParser.JoinOpFullContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 330
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
                if la_ == 1:
                    self.state = 317
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==4 or _la==8:
                        self.state = 316
                        _la = self._input.LA(1)
                        if not(_la==4 or _la==8):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 319
                    self.match(HogQLParser.FULL)
                    self.state = 321
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==122:
                        self.state = 320
                        self.match(HogQLParser.OUTER)


                    pass

                elif la_ == 2:
                    self.state = 323
                    self.match(HogQLParser.FULL)
                    self.state = 325
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==122:
                        self.state = 324
                        self.match(HogQLParser.OUTER)


                    self.state = 328
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==4 or _la==8:
                        self.state = 327
                        _la = self._input.LA(1)
                        if not(_la==4 or _la==8):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    pass


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinOpCrossContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CROSS(self):
            return self.getToken(HogQLParser.CROSS, 0)

        def JOIN(self):
            return self.getToken(HogQLParser.JOIN, 0)

        def GLOBAL(self):
            return self.getToken(HogQLParser.GLOBAL, 0)

        def LOCAL(self):
            return self.getToken(HogQLParser.LOCAL, 0)

        def COMMA(self):
            return self.getToken(HogQLParser.COMMA, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_joinOpCross

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinOpCross" ):
                return visitor.visitJoinOpCross(self)
            else:
                return visitor.visitChildren(self)




    def joinOpCross(self):

        localctx = HogQLParser.JoinOpCrossContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_joinOpCross)
        self._la = 0 # Token type
        try:
            self.state = 340
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [30, 70, 100]:
                self.enterOuterAlt(localctx, 1)
                self.state = 335
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==70 or _la==100:
                    self.state = 334
                    _la = self._input.LA(1)
                    if not(_la==70 or _la==100):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 337
                self.match(HogQLParser.CROSS)
                self.state = 338
                self.match(HogQLParser.JOIN)
                pass
            elif token in [205]:
                self.enterOuterAlt(localctx, 2)
                self.state = 339
                self.match(HogQLParser.COMMA)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinConstraintClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(HogQLParser.ON, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def USING(self):
            return self.getToken(HogQLParser.USING, 0)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_joinConstraintClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinConstraintClause" ):
                return visitor.visitJoinConstraintClause(self)
            else:
                return visitor.visitChildren(self)




    def joinConstraintClause(self):

        localctx = HogQLParser.JoinConstraintClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_joinConstraintClause)
        try:
            self.state = 351
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 342
                self.match(HogQLParser.ON)
                self.state = 343
                self.columnExprList()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 344
                self.match(HogQLParser.USING)
                self.state = 345
                self.match(HogQLParser.LPAREN)
                self.state = 346
                self.columnExprList()
                self.state = 347
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 349
                self.match(HogQLParser.USING)
                self.state = 350
                self.columnExprList()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SampleClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SAMPLE(self):
            return self.getToken(HogQLParser.SAMPLE, 0)

        def ratioExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.RatioExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.RatioExprContext,i)


        def OFFSET(self):
            return self.getToken(HogQLParser.OFFSET, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_sampleClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSampleClause" ):
                return visitor.visitSampleClause(self)
            else:
                return visitor.visitChildren(self)




    def sampleClause(self):

        localctx = HogQLParser.SampleClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_sampleClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 353
            self.match(HogQLParser.SAMPLE)
            self.state = 354
            self.ratioExpr()
            self.state = 357
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
            if la_ == 1:
                self.state = 355
                self.match(HogQLParser.OFFSET)
                self.state = 356
                self.ratioExpr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LimitExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)


        def COMMA(self):
            return self.getToken(HogQLParser.COMMA, 0)

        def OFFSET(self):
            return self.getToken(HogQLParser.OFFSET, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_limitExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLimitExpr" ):
                return visitor.visitLimitExpr(self)
            else:
                return visitor.visitChildren(self)




    def limitExpr(self):

        localctx = HogQLParser.LimitExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_limitExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 359
            self.columnExpr(0)
            self.state = 362
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==117 or _la==205:
                self.state = 360
                _la = self._input.LA(1)
                if not(_la==117 or _la==205):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 361
                self.columnExpr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderExprListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def orderExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.OrderExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.OrderExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_orderExprList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrderExprList" ):
                return visitor.visitOrderExprList(self)
            else:
                return visitor.visitChildren(self)




    def orderExprList(self):

        localctx = HogQLParser.OrderExprListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_orderExprList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 364
            self.orderExpr()
            self.state = 369
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==205:
                self.state = 365
                self.match(HogQLParser.COMMA)
                self.state = 366
                self.orderExpr()
                self.state = 371
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def NULLS(self):
            return self.getToken(HogQLParser.NULLS, 0)

        def COLLATE(self):
            return self.getToken(HogQLParser.COLLATE, 0)

        def STRING_LITERAL(self):
            return self.getToken(HogQLParser.STRING_LITERAL, 0)

        def ASCENDING(self):
            return self.getToken(HogQLParser.ASCENDING, 0)

        def DESCENDING(self):
            return self.getToken(HogQLParser.DESCENDING, 0)

        def DESC(self):
            return self.getToken(HogQLParser.DESC, 0)

        def FIRST(self):
            return self.getToken(HogQLParser.FIRST, 0)

        def LAST(self):
            return self.getToken(HogQLParser.LAST, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_orderExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrderExpr" ):
                return visitor.visitOrderExpr(self)
            else:
                return visitor.visitChildren(self)




    def orderExpr(self):

        localctx = HogQLParser.OrderExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_orderExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 372
            self.columnExpr(0)
            self.state = 374
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 6597069768704) != 0:
                self.state = 373
                _la = self._input.LA(1)
                if not(((_la) & ~0x3f) == 0 and ((1 << _la) & 6597069768704) != 0):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 378
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==116:
                self.state = 376
                self.match(HogQLParser.NULLS)
                self.state = 377
                _la = self._input.LA(1)
                if not(_la==61 or _la==92):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 382
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==25:
                self.state = 380
                self.match(HogQLParser.COLLATE)
                self.state = 381
                self.match(HogQLParser.STRING_LITERAL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RatioExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numberLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.NumberLiteralContext)
            else:
                return self.getTypedRuleContext(HogQLParser.NumberLiteralContext,i)


        def SLASH(self):
            return self.getToken(HogQLParser.SLASH, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_ratioExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRatioExpr" ):
                return visitor.visitRatioExpr(self)
            else:
                return visitor.visitChildren(self)




    def ratioExpr(self):

        localctx = HogQLParser.RatioExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_ratioExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 384
            self.numberLiteral()
            self.state = 387
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
            if la_ == 1:
                self.state = 385
                self.match(HogQLParser.SLASH)
                self.state = 386
                self.numberLiteral()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SettingExprListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def settingExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.SettingExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.SettingExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_settingExprList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSettingExprList" ):
                return visitor.visitSettingExprList(self)
            else:
                return visitor.visitChildren(self)




    def settingExprList(self):

        localctx = HogQLParser.SettingExprListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_settingExprList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 389
            self.settingExpr()
            self.state = 394
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==205:
                self.state = 390
                self.match(HogQLParser.COMMA)
                self.state = 391
                self.settingExpr()
                self.state = 396
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SettingExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def EQ_SINGLE(self):
            return self.getToken(HogQLParser.EQ_SINGLE, 0)

        def literal(self):
            return self.getTypedRuleContext(HogQLParser.LiteralContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_settingExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSettingExpr" ):
                return visitor.visitSettingExpr(self)
            else:
                return visitor.visitChildren(self)




    def settingExpr(self):

        localctx = HogQLParser.SettingExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_settingExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 397
            self.identifier()
            self.state = 398
            self.match(HogQLParser.EQ_SINGLE)
            self.state = 399
            self.literal()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def winPartitionByClause(self):
            return self.getTypedRuleContext(HogQLParser.WinPartitionByClauseContext,0)


        def winOrderByClause(self):
            return self.getTypedRuleContext(HogQLParser.WinOrderByClauseContext,0)


        def winFrameClause(self):
            return self.getTypedRuleContext(HogQLParser.WinFrameClauseContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_windowExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindowExpr" ):
                return visitor.visitWindowExpr(self)
            else:
                return visitor.visitChildren(self)




    def windowExpr(self):

        localctx = HogQLParser.WindowExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_windowExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 402
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==125:
                self.state = 401
                self.winPartitionByClause()


            self.state = 405
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==121:
                self.state = 404
                self.winOrderByClause()


            self.state = 408
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==132 or _la==142:
                self.state = 407
                self.winFrameClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WinPartitionByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION(self):
            return self.getToken(HogQLParser.PARTITION, 0)

        def BY(self):
            return self.getToken(HogQLParser.BY, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_winPartitionByClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWinPartitionByClause" ):
                return visitor.visitWinPartitionByClause(self)
            else:
                return visitor.visitChildren(self)




    def winPartitionByClause(self):

        localctx = HogQLParser.WinPartitionByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_winPartitionByClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 410
            self.match(HogQLParser.PARTITION)
            self.state = 411
            self.match(HogQLParser.BY)
            self.state = 412
            self.columnExprList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WinOrderByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(HogQLParser.ORDER, 0)

        def BY(self):
            return self.getToken(HogQLParser.BY, 0)

        def orderExprList(self):
            return self.getTypedRuleContext(HogQLParser.OrderExprListContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_winOrderByClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWinOrderByClause" ):
                return visitor.visitWinOrderByClause(self)
            else:
                return visitor.visitChildren(self)




    def winOrderByClause(self):

        localctx = HogQLParser.WinOrderByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_winOrderByClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 414
            self.match(HogQLParser.ORDER)
            self.state = 415
            self.match(HogQLParser.BY)
            self.state = 416
            self.orderExprList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WinFrameClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def winFrameExtend(self):
            return self.getTypedRuleContext(HogQLParser.WinFrameExtendContext,0)


        def ROWS(self):
            return self.getToken(HogQLParser.ROWS, 0)

        def RANGE(self):
            return self.getToken(HogQLParser.RANGE, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_winFrameClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWinFrameClause" ):
                return visitor.visitWinFrameClause(self)
            else:
                return visitor.visitChildren(self)




    def winFrameClause(self):

        localctx = HogQLParser.WinFrameClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_winFrameClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 418
            _la = self._input.LA(1)
            if not(_la==132 or _la==142):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 419
            self.winFrameExtend()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WinFrameExtendContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return HogQLParser.RULE_winFrameExtend

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class FrameStartContext(WinFrameExtendContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.WinFrameExtendContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def winFrameBound(self):
            return self.getTypedRuleContext(HogQLParser.WinFrameBoundContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFrameStart" ):
                return visitor.visitFrameStart(self)
            else:
                return visitor.visitChildren(self)


    class FrameBetweenContext(WinFrameExtendContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.WinFrameExtendContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BETWEEN(self):
            return self.getToken(HogQLParser.BETWEEN, 0)
        def winFrameBound(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.WinFrameBoundContext)
            else:
                return self.getTypedRuleContext(HogQLParser.WinFrameBoundContext,i)

        def AND(self):
            return self.getToken(HogQLParser.AND, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFrameBetween" ):
                return visitor.visitFrameBetween(self)
            else:
                return visitor.visitChildren(self)



    def winFrameExtend(self):

        localctx = HogQLParser.WinFrameExtendContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_winFrameExtend)
        try:
            self.state = 427
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [32, 81, 112, 174, 194, 195, 196, 197, 207, 209, 222]:
                localctx = HogQLParser.FrameStartContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 421
                self.winFrameBound()
                pass
            elif token in [16]:
                localctx = HogQLParser.FrameBetweenContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 422
                self.match(HogQLParser.BETWEEN)
                self.state = 423
                self.winFrameBound()
                self.state = 424
                self.match(HogQLParser.AND)
                self.state = 425
                self.winFrameBound()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WinFrameBoundContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CURRENT(self):
            return self.getToken(HogQLParser.CURRENT, 0)

        def ROW(self):
            return self.getToken(HogQLParser.ROW, 0)

        def UNBOUNDED(self):
            return self.getToken(HogQLParser.UNBOUNDED, 0)

        def PRECEDING(self):
            return self.getToken(HogQLParser.PRECEDING, 0)

        def FOLLOWING(self):
            return self.getToken(HogQLParser.FOLLOWING, 0)

        def numberLiteral(self):
            return self.getTypedRuleContext(HogQLParser.NumberLiteralContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_winFrameBound

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWinFrameBound" ):
                return visitor.visitWinFrameBound(self)
            else:
                return visitor.visitChildren(self)




    def winFrameBound(self):

        localctx = HogQLParser.WinFrameBoundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_winFrameBound)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 441
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
            if la_ == 1:
                self.state = 429
                self.match(HogQLParser.CURRENT)
                self.state = 430
                self.match(HogQLParser.ROW)
                pass

            elif la_ == 2:
                self.state = 431
                self.match(HogQLParser.UNBOUNDED)
                self.state = 432
                self.match(HogQLParser.PRECEDING)
                pass

            elif la_ == 3:
                self.state = 433
                self.match(HogQLParser.UNBOUNDED)
                self.state = 434
                self.match(HogQLParser.FOLLOWING)
                pass

            elif la_ == 4:
                self.state = 435
                self.numberLiteral()
                self.state = 436
                self.match(HogQLParser.PRECEDING)
                pass

            elif la_ == 5:
                self.state = 438
                self.numberLiteral()
                self.state = 439
                self.match(HogQLParser.FOLLOWING)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def EOF(self):
            return self.getToken(HogQLParser.EOF, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_expr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpr" ):
                return visitor.visitExpr(self)
            else:
                return visitor.visitChildren(self)




    def expr(self):

        localctx = HogQLParser.ExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 443
            self.columnExpr(0)
            self.state = 444
            self.match(HogQLParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnTypeExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return HogQLParser.RULE_columnTypeExpr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ColumnTypeExprNestedContext(ColumnTypeExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnTypeExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(HogQLParser.IdentifierContext,i)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def columnTypeExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnTypeExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnTypeExprContext,i)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnTypeExprNested" ):
                return visitor.visitColumnTypeExprNested(self)
            else:
                return visitor.visitChildren(self)


    class ColumnTypeExprParamContext(ColumnTypeExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnTypeExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)
        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnTypeExprParam" ):
                return visitor.visitColumnTypeExprParam(self)
            else:
                return visitor.visitChildren(self)


    class ColumnTypeExprSimpleContext(ColumnTypeExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnTypeExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnTypeExprSimple" ):
                return visitor.visitColumnTypeExprSimple(self)
            else:
                return visitor.visitChildren(self)


    class ColumnTypeExprComplexContext(ColumnTypeExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnTypeExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def columnTypeExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnTypeExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnTypeExprContext,i)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnTypeExprComplex" ):
                return visitor.visitColumnTypeExprComplex(self)
            else:
                return visitor.visitChildren(self)


    class ColumnTypeExprEnumContext(ColumnTypeExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnTypeExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def enumValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.EnumValueContext)
            else:
                return self.getTypedRuleContext(HogQLParser.EnumValueContext,i)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnTypeExprEnum" ):
                return visitor.visitColumnTypeExprEnum(self)
            else:
                return visitor.visitChildren(self)



    def columnTypeExpr(self):

        localctx = HogQLParser.ColumnTypeExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_columnTypeExpr)
        self._la = 0 # Token type
        try:
            self.state = 493
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
            if la_ == 1:
                localctx = HogQLParser.ColumnTypeExprSimpleContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 446
                self.identifier()
                pass

            elif la_ == 2:
                localctx = HogQLParser.ColumnTypeExprNestedContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 447
                self.identifier()
                self.state = 448
                self.match(HogQLParser.LPAREN)
                self.state = 449
                self.identifier()
                self.state = 450
                self.columnTypeExpr()
                self.state = 457
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==205:
                    self.state = 451
                    self.match(HogQLParser.COMMA)
                    self.state = 452
                    self.identifier()
                    self.state = 453
                    self.columnTypeExpr()
                    self.state = 459
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 460
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 3:
                localctx = HogQLParser.ColumnTypeExprEnumContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 462
                self.identifier()
                self.state = 463
                self.match(HogQLParser.LPAREN)
                self.state = 464
                self.enumValue()
                self.state = 469
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==205:
                    self.state = 465
                    self.match(HogQLParser.COMMA)
                    self.state = 466
                    self.enumValue()
                    self.state = 471
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 472
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 4:
                localctx = HogQLParser.ColumnTypeExprComplexContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 474
                self.identifier()
                self.state = 475
                self.match(HogQLParser.LPAREN)
                self.state = 476
                self.columnTypeExpr()
                self.state = 481
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==205:
                    self.state = 477
                    self.match(HogQLParser.COMMA)
                    self.state = 478
                    self.columnTypeExpr()
                    self.state = 483
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 484
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 5:
                localctx = HogQLParser.ColumnTypeExprParamContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 486
                self.identifier()
                self.state = 487
                self.match(HogQLParser.LPAREN)
                self.state = 489
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((_la) & ~0x3f) == 0 and ((1 << _la) & -4) != 0 or (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1) != 0 or (((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -5) != 0 or (((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & 578896255) != 0:
                    self.state = 488
                    self.columnExprList()


                self.state = 491
                self.match(HogQLParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnExprListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnsExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnsExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnsExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_columnExprList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprList" ):
                return visitor.visitColumnExprList(self)
            else:
                return visitor.visitChildren(self)




    def columnExprList(self):

        localctx = HogQLParser.ColumnExprListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_columnExprList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 495
            self.columnsExpr()
            self.state = 500
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,64,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 496
                    self.match(HogQLParser.COMMA)
                    self.state = 497
                    self.columnsExpr() 
                self.state = 502
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,64,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnsExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return HogQLParser.RULE_columnsExpr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ColumnsExprColumnContext(ColumnsExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnsExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnsExprColumn" ):
                return visitor.visitColumnsExprColumn(self)
            else:
                return visitor.visitChildren(self)


    class ColumnsExprAsteriskContext(ColumnsExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnsExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ASTERISK(self):
            return self.getToken(HogQLParser.ASTERISK, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(HogQLParser.TableIdentifierContext,0)

        def DOT(self):
            return self.getToken(HogQLParser.DOT, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnsExprAsterisk" ):
                return visitor.visitColumnsExprAsterisk(self)
            else:
                return visitor.visitChildren(self)


    class ColumnsExprSubqueryContext(ColumnsExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnsExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def selectUnionStmt(self):
            return self.getTypedRuleContext(HogQLParser.SelectUnionStmtContext,0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnsExprSubquery" ):
                return visitor.visitColumnsExprSubquery(self)
            else:
                return visitor.visitChildren(self)



    def columnsExpr(self):

        localctx = HogQLParser.ColumnsExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_columnsExpr)
        self._la = 0 # Token type
        try:
            self.state = 514
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
            if la_ == 1:
                localctx = HogQLParser.ColumnsExprAsteriskContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 506
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la - 2)) & ~0x3f) == 0 and ((1 << (_la - 2)) & -1) != 0 or (((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & -633318697631745) != 0 or (((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & 6917529027641081855) != 0:
                    self.state = 503
                    self.tableIdentifier()
                    self.state = 504
                    self.match(HogQLParser.DOT)


                self.state = 508
                self.match(HogQLParser.ASTERISK)
                pass

            elif la_ == 2:
                localctx = HogQLParser.ColumnsExprSubqueryContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 509
                self.match(HogQLParser.LPAREN)
                self.state = 510
                self.selectUnionStmt()
                self.state = 511
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 3:
                localctx = HogQLParser.ColumnsExprColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 513
                self.columnExpr(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return HogQLParser.RULE_columnExpr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class ColumnExprTernaryOpContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def QUERY(self):
            return self.getToken(HogQLParser.QUERY, 0)
        def COLON(self):
            return self.getToken(HogQLParser.COLON, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprTernaryOp" ):
                return visitor.visitColumnExprTernaryOp(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprAliasContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def alias(self):
            return self.getTypedRuleContext(HogQLParser.AliasContext,0)

        def AS(self):
            return self.getToken(HogQLParser.AS, 0)
        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)

        def STRING_LITERAL(self):
            return self.getToken(HogQLParser.STRING_LITERAL, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprAlias" ):
                return visitor.visitColumnExprAlias(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprExtractContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXTRACT(self):
            return self.getToken(HogQLParser.EXTRACT, 0)
        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def interval(self):
            return self.getTypedRuleContext(HogQLParser.IntervalContext,0)

        def FROM(self):
            return self.getToken(HogQLParser.FROM, 0)
        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprExtract" ):
                return visitor.visitColumnExprExtract(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprNegateContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DASH(self):
            return self.getToken(HogQLParser.DASH, 0)
        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprNegate" ):
                return visitor.visitColumnExprNegate(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprSubqueryContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def selectUnionStmt(self):
            return self.getTypedRuleContext(HogQLParser.SelectUnionStmtContext,0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprSubquery" ):
                return visitor.visitColumnExprSubquery(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprLiteralContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def literal(self):
            return self.getTypedRuleContext(HogQLParser.LiteralContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprLiteral" ):
                return visitor.visitColumnExprLiteral(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprArrayContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LBRACKET(self):
            return self.getToken(HogQLParser.LBRACKET, 0)
        def RBRACKET(self):
            return self.getToken(HogQLParser.RBRACKET, 0)
        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprArray" ):
                return visitor.visitColumnExprArray(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprSubstringContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SUBSTRING(self):
            return self.getToken(HogQLParser.SUBSTRING, 0)
        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def FROM(self):
            return self.getToken(HogQLParser.FROM, 0)
        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)
        def FOR(self):
            return self.getToken(HogQLParser.FOR, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprSubstring" ):
                return visitor.visitColumnExprSubstring(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprCastContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CAST(self):
            return self.getToken(HogQLParser.CAST, 0)
        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def AS(self):
            return self.getToken(HogQLParser.AS, 0)
        def columnTypeExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnTypeExprContext,0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprCast" ):
                return visitor.visitColumnExprCast(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprOrContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def OR(self):
            return self.getToken(HogQLParser.OR, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprOr" ):
                return visitor.visitColumnExprOr(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprPrecedence1Context(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.left = None # ColumnExprContext
            self.operator = None # Token
            self.right = None # ColumnExprContext
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def ASTERISK(self):
            return self.getToken(HogQLParser.ASTERISK, 0)
        def SLASH(self):
            return self.getToken(HogQLParser.SLASH, 0)
        def PERCENT(self):
            return self.getToken(HogQLParser.PERCENT, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprPrecedence1" ):
                return visitor.visitColumnExprPrecedence1(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprPrecedence2Context(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.left = None # ColumnExprContext
            self.operator = None # Token
            self.right = None # ColumnExprContext
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def PLUS(self):
            return self.getToken(HogQLParser.PLUS, 0)
        def DASH(self):
            return self.getToken(HogQLParser.DASH, 0)
        def CONCAT(self):
            return self.getToken(HogQLParser.CONCAT, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprPrecedence2" ):
                return visitor.visitColumnExprPrecedence2(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprPrecedence3Context(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.left = None # ColumnExprContext
            self.operator = None # Token
            self.right = None # ColumnExprContext
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def IN(self):
            return self.getToken(HogQLParser.IN, 0)
        def EQ_DOUBLE(self):
            return self.getToken(HogQLParser.EQ_DOUBLE, 0)
        def EQ_SINGLE(self):
            return self.getToken(HogQLParser.EQ_SINGLE, 0)
        def NOT_EQ(self):
            return self.getToken(HogQLParser.NOT_EQ, 0)
        def LE(self):
            return self.getToken(HogQLParser.LE, 0)
        def GE(self):
            return self.getToken(HogQLParser.GE, 0)
        def LT(self):
            return self.getToken(HogQLParser.LT, 0)
        def GT(self):
            return self.getToken(HogQLParser.GT, 0)
        def LIKE(self):
            return self.getToken(HogQLParser.LIKE, 0)
        def ILIKE(self):
            return self.getToken(HogQLParser.ILIKE, 0)
        def NOT(self):
            return self.getToken(HogQLParser.NOT, 0)
        def GLOBAL(self):
            return self.getToken(HogQLParser.GLOBAL, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprPrecedence3" ):
                return visitor.visitColumnExprPrecedence3(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprIntervalContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INTERVAL(self):
            return self.getToken(HogQLParser.INTERVAL, 0)
        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def interval(self):
            return self.getTypedRuleContext(HogQLParser.IntervalContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprInterval" ):
                return visitor.visitColumnExprInterval(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprIsNullContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def IS(self):
            return self.getToken(HogQLParser.IS, 0)
        def NULL_SQL(self):
            return self.getToken(HogQLParser.NULL_SQL, 0)
        def NOT(self):
            return self.getToken(HogQLParser.NOT, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprIsNull" ):
                return visitor.visitColumnExprIsNull(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprWinFunctionTargetContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(HogQLParser.IdentifierContext,i)

        def OVER(self):
            return self.getToken(HogQLParser.OVER, 0)
        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)
        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprWinFunctionTarget" ):
                return visitor.visitColumnExprWinFunctionTarget(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprTrimContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TRIM(self):
            return self.getToken(HogQLParser.TRIM, 0)
        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def STRING_LITERAL(self):
            return self.getToken(HogQLParser.STRING_LITERAL, 0)
        def FROM(self):
            return self.getToken(HogQLParser.FROM, 0)
        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)
        def BOTH(self):
            return self.getToken(HogQLParser.BOTH, 0)
        def LEADING(self):
            return self.getToken(HogQLParser.LEADING, 0)
        def TRAILING(self):
            return self.getToken(HogQLParser.TRAILING, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprTrim" ):
                return visitor.visitColumnExprTrim(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprTupleContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprTuple" ):
                return visitor.visitColumnExprTuple(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprArrayAccessContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def LBRACKET(self):
            return self.getToken(HogQLParser.LBRACKET, 0)
        def RBRACKET(self):
            return self.getToken(HogQLParser.RBRACKET, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprArrayAccess" ):
                return visitor.visitColumnExprArrayAccess(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprBetweenContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def BETWEEN(self):
            return self.getToken(HogQLParser.BETWEEN, 0)
        def AND(self):
            return self.getToken(HogQLParser.AND, 0)
        def NOT(self):
            return self.getToken(HogQLParser.NOT, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprBetween" ):
                return visitor.visitColumnExprBetween(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprParensContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprParens" ):
                return visitor.visitColumnExprParens(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprTimestampContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TIMESTAMP(self):
            return self.getToken(HogQLParser.TIMESTAMP, 0)
        def STRING_LITERAL(self):
            return self.getToken(HogQLParser.STRING_LITERAL, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprTimestamp" ):
                return visitor.visitColumnExprTimestamp(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprAndContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def AND(self):
            return self.getToken(HogQLParser.AND, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprAnd" ):
                return visitor.visitColumnExprAnd(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprTupleAccessContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def DOT(self):
            return self.getToken(HogQLParser.DOT, 0)
        def DECIMAL_LITERAL(self):
            return self.getToken(HogQLParser.DECIMAL_LITERAL, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprTupleAccess" ):
                return visitor.visitColumnExprTupleAccess(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprCaseContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.caseExpr = None # ColumnExprContext
            self.whenExpr = None # ColumnExprContext
            self.thenExpr = None # ColumnExprContext
            self.elseExpr = None # ColumnExprContext
            self.copyFrom(ctx)

        def CASE(self):
            return self.getToken(HogQLParser.CASE, 0)
        def END(self):
            return self.getToken(HogQLParser.END, 0)
        def WHEN(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.WHEN)
            else:
                return self.getToken(HogQLParser.WHEN, i)
        def THEN(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.THEN)
            else:
                return self.getToken(HogQLParser.THEN, i)
        def ELSE(self):
            return self.getToken(HogQLParser.ELSE, 0)
        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprCase" ):
                return visitor.visitColumnExprCase(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprDateContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DATE(self):
            return self.getToken(HogQLParser.DATE, 0)
        def STRING_LITERAL(self):
            return self.getToken(HogQLParser.STRING_LITERAL, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprDate" ):
                return visitor.visitColumnExprDate(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprNotContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NOT(self):
            return self.getToken(HogQLParser.NOT, 0)
        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprNot" ):
                return visitor.visitColumnExprNot(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprWinFunctionContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)

        def OVER(self):
            return self.getToken(HogQLParser.OVER, 0)
        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.LPAREN)
            else:
                return self.getToken(HogQLParser.LPAREN, i)
        def windowExpr(self):
            return self.getTypedRuleContext(HogQLParser.WindowExprContext,0)

        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.RPAREN)
            else:
                return self.getToken(HogQLParser.RPAREN, i)
        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprWinFunction" ):
                return visitor.visitColumnExprWinFunction(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprIdentifierContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnIdentifier(self):
            return self.getTypedRuleContext(HogQLParser.ColumnIdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprIdentifier" ):
                return visitor.visitColumnExprIdentifier(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprFunctionContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)

        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.LPAREN)
            else:
                return self.getToken(HogQLParser.LPAREN, i)
        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.RPAREN)
            else:
                return self.getToken(HogQLParser.RPAREN, i)
        def DISTINCT(self):
            return self.getToken(HogQLParser.DISTINCT, 0)
        def columnArgList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnArgListContext,0)

        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprFunction" ):
                return visitor.visitColumnExprFunction(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprAsteriskContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ASTERISK(self):
            return self.getToken(HogQLParser.ASTERISK, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(HogQLParser.TableIdentifierContext,0)

        def DOT(self):
            return self.getToken(HogQLParser.DOT, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprAsterisk" ):
                return visitor.visitColumnExprAsterisk(self)
            else:
                return visitor.visitChildren(self)



    def columnExpr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = HogQLParser.ColumnExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 76
        self.enterRecursionRule(localctx, 76, self.RULE_columnExpr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 645
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,79,self._ctx)
            if la_ == 1:
                localctx = HogQLParser.ColumnExprCaseContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 517
                self.match(HogQLParser.CASE)
                self.state = 519
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,67,self._ctx)
                if la_ == 1:
                    self.state = 518
                    localctx.caseExpr = self.columnExpr(0)


                self.state = 526 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 521
                    self.match(HogQLParser.WHEN)
                    self.state = 522
                    localctx.whenExpr = self.columnExpr(0)
                    self.state = 523
                    self.match(HogQLParser.THEN)
                    self.state = 524
                    localctx.thenExpr = self.columnExpr(0)
                    self.state = 528 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==185):
                        break

                self.state = 532
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==51:
                    self.state = 530
                    self.match(HogQLParser.ELSE)
                    self.state = 531
                    localctx.elseExpr = self.columnExpr(0)


                self.state = 534
                self.match(HogQLParser.END)
                pass

            elif la_ == 2:
                localctx = HogQLParser.ColumnExprCastContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 536
                self.match(HogQLParser.CAST)
                self.state = 537
                self.match(HogQLParser.LPAREN)
                self.state = 538
                self.columnExpr(0)
                self.state = 539
                self.match(HogQLParser.AS)
                self.state = 540
                self.columnTypeExpr()
                self.state = 541
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 3:
                localctx = HogQLParser.ColumnExprDateContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 543
                self.match(HogQLParser.DATE)
                self.state = 544
                self.match(HogQLParser.STRING_LITERAL)
                pass

            elif la_ == 4:
                localctx = HogQLParser.ColumnExprExtractContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 545
                self.match(HogQLParser.EXTRACT)
                self.state = 546
                self.match(HogQLParser.LPAREN)
                self.state = 547
                self.interval()
                self.state = 548
                self.match(HogQLParser.FROM)
                self.state = 549
                self.columnExpr(0)
                self.state = 550
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 5:
                localctx = HogQLParser.ColumnExprIntervalContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 552
                self.match(HogQLParser.INTERVAL)
                self.state = 553
                self.columnExpr(0)
                self.state = 554
                self.interval()
                pass

            elif la_ == 6:
                localctx = HogQLParser.ColumnExprSubstringContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 556
                self.match(HogQLParser.SUBSTRING)
                self.state = 557
                self.match(HogQLParser.LPAREN)
                self.state = 558
                self.columnExpr(0)
                self.state = 559
                self.match(HogQLParser.FROM)
                self.state = 560
                self.columnExpr(0)
                self.state = 563
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==64:
                    self.state = 561
                    self.match(HogQLParser.FOR)
                    self.state = 562
                    self.columnExpr(0)


                self.state = 565
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 7:
                localctx = HogQLParser.ColumnExprTimestampContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 567
                self.match(HogQLParser.TIMESTAMP)
                self.state = 568
                self.match(HogQLParser.STRING_LITERAL)
                pass

            elif la_ == 8:
                localctx = HogQLParser.ColumnExprTrimContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 569
                self.match(HogQLParser.TRIM)
                self.state = 570
                self.match(HogQLParser.LPAREN)
                self.state = 571
                _la = self._input.LA(1)
                if not(_la==17 or _la==94 or _la==169):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 572
                self.match(HogQLParser.STRING_LITERAL)
                self.state = 573
                self.match(HogQLParser.FROM)
                self.state = 574
                self.columnExpr(0)
                self.state = 575
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 9:
                localctx = HogQLParser.ColumnExprWinFunctionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 577
                self.identifier()

                self.state = 578
                self.match(HogQLParser.LPAREN)
                self.state = 580
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((_la) & ~0x3f) == 0 and ((1 << _la) & -4) != 0 or (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1) != 0 or (((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -5) != 0 or (((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & 578896255) != 0:
                    self.state = 579
                    self.columnExprList()


                self.state = 582
                self.match(HogQLParser.RPAREN)
                self.state = 584
                self.match(HogQLParser.OVER)
                self.state = 585
                self.match(HogQLParser.LPAREN)
                self.state = 586
                self.windowExpr()
                self.state = 587
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 10:
                localctx = HogQLParser.ColumnExprWinFunctionTargetContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 589
                self.identifier()

                self.state = 590
                self.match(HogQLParser.LPAREN)
                self.state = 592
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((_la) & ~0x3f) == 0 and ((1 << _la) & -4) != 0 or (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1) != 0 or (((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -5) != 0 or (((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & 578896255) != 0:
                    self.state = 591
                    self.columnExprList()


                self.state = 594
                self.match(HogQLParser.RPAREN)
                self.state = 596
                self.match(HogQLParser.OVER)
                self.state = 597
                self.identifier()
                pass

            elif la_ == 11:
                localctx = HogQLParser.ColumnExprFunctionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 599
                self.identifier()
                self.state = 605
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
                if la_ == 1:
                    self.state = 600
                    self.match(HogQLParser.LPAREN)
                    self.state = 602
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((_la) & ~0x3f) == 0 and ((1 << _la) & -4) != 0 or (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1) != 0 or (((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -5) != 0 or (((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & 578896255) != 0:
                        self.state = 601
                        self.columnExprList()


                    self.state = 604
                    self.match(HogQLParser.RPAREN)


                self.state = 607
                self.match(HogQLParser.LPAREN)
                self.state = 609
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
                if la_ == 1:
                    self.state = 608
                    self.match(HogQLParser.DISTINCT)


                self.state = 612
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((_la) & ~0x3f) == 0 and ((1 << _la) & -4) != 0 or (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1) != 0 or (((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -5) != 0 or (((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & 578896255) != 0:
                    self.state = 611
                    self.columnArgList()


                self.state = 614
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 12:
                localctx = HogQLParser.ColumnExprLiteralContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 616
                self.literal()
                pass

            elif la_ == 13:
                localctx = HogQLParser.ColumnExprNegateContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 617
                self.match(HogQLParser.DASH)
                self.state = 618
                self.columnExpr(17)
                pass

            elif la_ == 14:
                localctx = HogQLParser.ColumnExprNotContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 619
                self.match(HogQLParser.NOT)
                self.state = 620
                self.columnExpr(12)
                pass

            elif la_ == 15:
                localctx = HogQLParser.ColumnExprAsteriskContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 624
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la - 2)) & ~0x3f) == 0 and ((1 << (_la - 2)) & -1) != 0 or (((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & -633318697631745) != 0 or (((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & 6917529027641081855) != 0:
                    self.state = 621
                    self.tableIdentifier()
                    self.state = 622
                    self.match(HogQLParser.DOT)


                self.state = 626
                self.match(HogQLParser.ASTERISK)
                pass

            elif la_ == 16:
                localctx = HogQLParser.ColumnExprSubqueryContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 627
                self.match(HogQLParser.LPAREN)
                self.state = 628
                self.selectUnionStmt()
                self.state = 629
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 17:
                localctx = HogQLParser.ColumnExprParensContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 631
                self.match(HogQLParser.LPAREN)
                self.state = 632
                self.columnExpr(0)
                self.state = 633
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 18:
                localctx = HogQLParser.ColumnExprTupleContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 635
                self.match(HogQLParser.LPAREN)
                self.state = 636
                self.columnExprList()
                self.state = 637
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 19:
                localctx = HogQLParser.ColumnExprArrayContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 639
                self.match(HogQLParser.LBRACKET)
                self.state = 641
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((_la) & ~0x3f) == 0 and ((1 << _la) & -4) != 0 or (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1) != 0 or (((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -5) != 0 or (((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & 578896255) != 0:
                    self.state = 640
                    self.columnExprList()


                self.state = 643
                self.match(HogQLParser.RBRACKET)
                pass

            elif la_ == 20:
                localctx = HogQLParser.ColumnExprIdentifierContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 644
                self.columnIdentifier()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 728
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,90,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 726
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,89,self._ctx)
                    if la_ == 1:
                        localctx = HogQLParser.ColumnExprPrecedence1Context(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 647
                        if not self.precpred(self._ctx, 16):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 16)")
                        self.state = 651
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [201]:
                            self.state = 648
                            localctx.operator = self.match(HogQLParser.ASTERISK)
                            pass
                        elif token in [230]:
                            self.state = 649
                            localctx.operator = self.match(HogQLParser.SLASH)
                            pass
                        elif token in [221]:
                            self.state = 650
                            localctx.operator = self.match(HogQLParser.PERCENT)
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 653
                        localctx.right = self.columnExpr(17)
                        pass

                    elif la_ == 2:
                        localctx = HogQLParser.ColumnExprPrecedence2Context(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 654
                        if not self.precpred(self._ctx, 15):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 15)")
                        self.state = 658
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [222]:
                            self.state = 655
                            localctx.operator = self.match(HogQLParser.PLUS)
                            pass
                        elif token in [207]:
                            self.state = 656
                            localctx.operator = self.match(HogQLParser.DASH)
                            pass
                        elif token in [206]:
                            self.state = 657
                            localctx.operator = self.match(HogQLParser.CONCAT)
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 660
                        localctx.right = self.columnExpr(16)
                        pass

                    elif la_ == 3:
                        localctx = HogQLParser.ColumnExprPrecedence3Context(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 661
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 680
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
                        if la_ == 1:
                            self.state = 662
                            localctx.operator = self.match(HogQLParser.EQ_DOUBLE)
                            pass

                        elif la_ == 2:
                            self.state = 663
                            localctx.operator = self.match(HogQLParser.EQ_SINGLE)
                            pass

                        elif la_ == 3:
                            self.state = 664
                            localctx.operator = self.match(HogQLParser.NOT_EQ)
                            pass

                        elif la_ == 4:
                            self.state = 665
                            localctx.operator = self.match(HogQLParser.LE)
                            pass

                        elif la_ == 5:
                            self.state = 666
                            localctx.operator = self.match(HogQLParser.GE)
                            pass

                        elif la_ == 6:
                            self.state = 667
                            localctx.operator = self.match(HogQLParser.LT)
                            pass

                        elif la_ == 7:
                            self.state = 668
                            localctx.operator = self.match(HogQLParser.GT)
                            pass

                        elif la_ == 8:
                            self.state = 670
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==70:
                                self.state = 669
                                localctx.operator = self.match(HogQLParser.GLOBAL)


                            self.state = 673
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==114:
                                self.state = 672
                                self.match(HogQLParser.NOT)


                            self.state = 675
                            self.match(HogQLParser.IN)
                            pass

                        elif la_ == 9:
                            self.state = 677
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==114:
                                self.state = 676
                                localctx.operator = self.match(HogQLParser.NOT)


                            self.state = 679
                            _la = self._input.LA(1)
                            if not(_la==78 or _la==97):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            pass


                        self.state = 682
                        localctx.right = self.columnExpr(15)
                        pass

                    elif la_ == 4:
                        localctx = HogQLParser.ColumnExprAndContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 683
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 684
                        self.match(HogQLParser.AND)
                        self.state = 685
                        self.columnExpr(12)
                        pass

                    elif la_ == 5:
                        localctx = HogQLParser.ColumnExprOrContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 686
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 687
                        self.match(HogQLParser.OR)
                        self.state = 688
                        self.columnExpr(11)
                        pass

                    elif la_ == 6:
                        localctx = HogQLParser.ColumnExprBetweenContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 689
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 691
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==114:
                            self.state = 690
                            self.match(HogQLParser.NOT)


                        self.state = 693
                        self.match(HogQLParser.BETWEEN)
                        self.state = 694
                        self.columnExpr(0)
                        self.state = 695
                        self.match(HogQLParser.AND)
                        self.state = 696
                        self.columnExpr(10)
                        pass

                    elif la_ == 7:
                        localctx = HogQLParser.ColumnExprTernaryOpContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 698
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 699
                        self.match(HogQLParser.QUERY)
                        self.state = 700
                        self.columnExpr(0)
                        self.state = 701
                        self.match(HogQLParser.COLON)
                        self.state = 702
                        self.columnExpr(8)
                        pass

                    elif la_ == 8:
                        localctx = HogQLParser.ColumnExprArrayAccessContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 704
                        if not self.precpred(self._ctx, 19):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 19)")
                        self.state = 705
                        self.match(HogQLParser.LBRACKET)
                        self.state = 706
                        self.columnExpr(0)
                        self.state = 707
                        self.match(HogQLParser.RBRACKET)
                        pass

                    elif la_ == 9:
                        localctx = HogQLParser.ColumnExprTupleAccessContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 709
                        if not self.precpred(self._ctx, 18):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 18)")
                        self.state = 710
                        self.match(HogQLParser.DOT)
                        self.state = 711
                        self.match(HogQLParser.DECIMAL_LITERAL)
                        pass

                    elif la_ == 10:
                        localctx = HogQLParser.ColumnExprIsNullContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 712
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 713
                        self.match(HogQLParser.IS)
                        self.state = 715
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==114:
                            self.state = 714
                            self.match(HogQLParser.NOT)


                        self.state = 717
                        self.match(HogQLParser.NULL_SQL)
                        pass

                    elif la_ == 11:
                        localctx = HogQLParser.ColumnExprAliasContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 718
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 724
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
                        if la_ == 1:
                            self.state = 719
                            self.alias()
                            pass

                        elif la_ == 2:
                            self.state = 720
                            self.match(HogQLParser.AS)
                            self.state = 721
                            self.identifier()
                            pass

                        elif la_ == 3:
                            self.state = 722
                            self.match(HogQLParser.AS)
                            self.state = 723
                            self.match(HogQLParser.STRING_LITERAL)
                            pass


                        pass

             
                self.state = 730
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,90,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ColumnArgListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnArgExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnArgExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnArgExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_columnArgList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnArgList" ):
                return visitor.visitColumnArgList(self)
            else:
                return visitor.visitChildren(self)




    def columnArgList(self):

        localctx = HogQLParser.ColumnArgListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_columnArgList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 731
            self.columnArgExpr()
            self.state = 736
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==205:
                self.state = 732
                self.match(HogQLParser.COMMA)
                self.state = 733
                self.columnArgExpr()
                self.state = 738
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnArgExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnLambdaExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnLambdaExprContext,0)


        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_columnArgExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnArgExpr" ):
                return visitor.visitColumnArgExpr(self)
            else:
                return visitor.visitChildren(self)




    def columnArgExpr(self):

        localctx = HogQLParser.ColumnArgExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_columnArgExpr)
        try:
            self.state = 741
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 739
                self.columnLambdaExpr()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 740
                self.columnExpr(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnLambdaExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ARROW(self):
            return self.getToken(HogQLParser.ARROW, 0)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(HogQLParser.IdentifierContext,i)


        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_columnLambdaExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnLambdaExpr" ):
                return visitor.visitColumnLambdaExpr(self)
            else:
                return visitor.visitChildren(self)




    def columnLambdaExpr(self):

        localctx = HogQLParser.ColumnLambdaExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_columnLambdaExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 762
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [218]:
                self.state = 743
                self.match(HogQLParser.LPAREN)
                self.state = 744
                self.identifier()
                self.state = 749
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==205:
                    self.state = 745
                    self.match(HogQLParser.COMMA)
                    self.state = 746
                    self.identifier()
                    self.state = 751
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 752
                self.match(HogQLParser.RPAREN)
                pass
            elif token in [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193]:
                self.state = 754
                self.identifier()
                self.state = 759
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==205:
                    self.state = 755
                    self.match(HogQLParser.COMMA)
                    self.state = 756
                    self.identifier()
                    self.state = 761
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

            self.state = 764
            self.match(HogQLParser.ARROW)
            self.state = 765
            self.columnExpr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLACEHOLDER(self):
            return self.getToken(HogQLParser.PLACEHOLDER, 0)

        def nestedIdentifier(self):
            return self.getTypedRuleContext(HogQLParser.NestedIdentifierContext,0)


        def tableIdentifier(self):
            return self.getTypedRuleContext(HogQLParser.TableIdentifierContext,0)


        def DOT(self):
            return self.getToken(HogQLParser.DOT, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_columnIdentifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnIdentifier" ):
                return visitor.visitColumnIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def columnIdentifier(self):

        localctx = HogQLParser.ColumnIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_columnIdentifier)
        try:
            self.state = 774
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [199]:
                self.enterOuterAlt(localctx, 1)
                self.state = 767
                self.match(HogQLParser.PLACEHOLDER)
                pass
            elif token in [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193]:
                self.enterOuterAlt(localctx, 2)
                self.state = 771
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
                if la_ == 1:
                    self.state = 768
                    self.tableIdentifier()
                    self.state = 769
                    self.match(HogQLParser.DOT)


                self.state = 773
                self.nestedIdentifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NestedIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(HogQLParser.IdentifierContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.DOT)
            else:
                return self.getToken(HogQLParser.DOT, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_nestedIdentifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNestedIdentifier" ):
                return visitor.visitNestedIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def nestedIdentifier(self):

        localctx = HogQLParser.NestedIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_nestedIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 776
            self.identifier()
            self.state = 781
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,98,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 777
                    self.match(HogQLParser.DOT)
                    self.state = 778
                    self.identifier() 
                self.state = 783
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,98,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return HogQLParser.RULE_tableExpr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class TableExprIdentifierContext(TableExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.TableExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tableIdentifier(self):
            return self.getTypedRuleContext(HogQLParser.TableIdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableExprIdentifier" ):
                return visitor.visitTableExprIdentifier(self)
            else:
                return visitor.visitChildren(self)


    class TableExprSubqueryContext(TableExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.TableExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def selectUnionStmt(self):
            return self.getTypedRuleContext(HogQLParser.SelectUnionStmtContext,0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableExprSubquery" ):
                return visitor.visitTableExprSubquery(self)
            else:
                return visitor.visitChildren(self)


    class TableExprAliasContext(TableExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.TableExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tableExpr(self):
            return self.getTypedRuleContext(HogQLParser.TableExprContext,0)

        def alias(self):
            return self.getTypedRuleContext(HogQLParser.AliasContext,0)

        def AS(self):
            return self.getToken(HogQLParser.AS, 0)
        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableExprAlias" ):
                return visitor.visitTableExprAlias(self)
            else:
                return visitor.visitChildren(self)


    class TableExprFunctionContext(TableExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.TableExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tableFunctionExpr(self):
            return self.getTypedRuleContext(HogQLParser.TableFunctionExprContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableExprFunction" ):
                return visitor.visitTableExprFunction(self)
            else:
                return visitor.visitChildren(self)



    def tableExpr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = HogQLParser.TableExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 88
        self.enterRecursionRule(localctx, 88, self.RULE_tableExpr, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 791
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,99,self._ctx)
            if la_ == 1:
                localctx = HogQLParser.TableExprIdentifierContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 785
                self.tableIdentifier()
                pass

            elif la_ == 2:
                localctx = HogQLParser.TableExprFunctionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 786
                self.tableFunctionExpr()
                pass

            elif la_ == 3:
                localctx = HogQLParser.TableExprSubqueryContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 787
                self.match(HogQLParser.LPAREN)
                self.state = 788
                self.selectUnionStmt()
                self.state = 789
                self.match(HogQLParser.RPAREN)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 801
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,101,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = HogQLParser.TableExprAliasContext(self, HogQLParser.TableExprContext(self, _parentctx, _parentState))
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_tableExpr)
                    self.state = 793
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 797
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [35, 61, 76, 90, 193]:
                        self.state = 794
                        self.alias()
                        pass
                    elif token in [10]:
                        self.state = 795
                        self.match(HogQLParser.AS)
                        self.state = 796
                        self.identifier()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 803
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,101,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class TableFunctionExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def tableArgList(self):
            return self.getTypedRuleContext(HogQLParser.TableArgListContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_tableFunctionExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableFunctionExpr" ):
                return visitor.visitTableFunctionExpr(self)
            else:
                return visitor.visitChildren(self)




    def tableFunctionExpr(self):

        localctx = HogQLParser.TableFunctionExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_tableFunctionExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 804
            self.identifier()
            self.state = 805
            self.match(HogQLParser.LPAREN)
            self.state = 807
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & -4) != 0 or (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1) != 0 or (((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -5) != 0 or (((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & 536952895) != 0:
                self.state = 806
                self.tableArgList()


            self.state = 809
            self.match(HogQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def databaseIdentifier(self):
            return self.getTypedRuleContext(HogQLParser.DatabaseIdentifierContext,0)


        def DOT(self):
            return self.getToken(HogQLParser.DOT, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_tableIdentifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableIdentifier" ):
                return visitor.visitTableIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def tableIdentifier(self):

        localctx = HogQLParser.TableIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_tableIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 814
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
            if la_ == 1:
                self.state = 811
                self.databaseIdentifier()
                self.state = 812
                self.match(HogQLParser.DOT)


            self.state = 816
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableArgListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableArgExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.TableArgExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.TableArgExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_tableArgList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableArgList" ):
                return visitor.visitTableArgList(self)
            else:
                return visitor.visitChildren(self)




    def tableArgList(self):

        localctx = HogQLParser.TableArgListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_tableArgList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 818
            self.tableArgExpr()
            self.state = 823
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==205:
                self.state = 819
                self.match(HogQLParser.COMMA)
                self.state = 820
                self.tableArgExpr()
                self.state = 825
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableArgExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nestedIdentifier(self):
            return self.getTypedRuleContext(HogQLParser.NestedIdentifierContext,0)


        def tableFunctionExpr(self):
            return self.getTypedRuleContext(HogQLParser.TableFunctionExprContext,0)


        def literal(self):
            return self.getTypedRuleContext(HogQLParser.LiteralContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_tableArgExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableArgExpr" ):
                return visitor.visitTableArgExpr(self)
            else:
                return visitor.visitChildren(self)




    def tableArgExpr(self):

        localctx = HogQLParser.TableArgExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_tableArgExpr)
        try:
            self.state = 829
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 826
                self.nestedIdentifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 827
                self.tableFunctionExpr()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 828
                self.literal()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DatabaseIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_databaseIdentifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDatabaseIdentifier" ):
                return visitor.visitDatabaseIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def databaseIdentifier(self):

        localctx = HogQLParser.DatabaseIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_databaseIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 831
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FloatingLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FLOATING_LITERAL(self):
            return self.getToken(HogQLParser.FLOATING_LITERAL, 0)

        def DOT(self):
            return self.getToken(HogQLParser.DOT, 0)

        def DECIMAL_LITERAL(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.DECIMAL_LITERAL)
            else:
                return self.getToken(HogQLParser.DECIMAL_LITERAL, i)

        def OCTAL_LITERAL(self):
            return self.getToken(HogQLParser.OCTAL_LITERAL, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_floatingLiteral

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFloatingLiteral" ):
                return visitor.visitFloatingLiteral(self)
            else:
                return visitor.visitChildren(self)




    def floatingLiteral(self):

        localctx = HogQLParser.FloatingLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_floatingLiteral)
        self._la = 0 # Token type
        try:
            self.state = 841
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [194]:
                self.enterOuterAlt(localctx, 1)
                self.state = 833
                self.match(HogQLParser.FLOATING_LITERAL)
                pass
            elif token in [209]:
                self.enterOuterAlt(localctx, 2)
                self.state = 834
                self.match(HogQLParser.DOT)
                self.state = 835
                _la = self._input.LA(1)
                if not(_la==195 or _la==196):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [196]:
                self.enterOuterAlt(localctx, 3)
                self.state = 836
                self.match(HogQLParser.DECIMAL_LITERAL)
                self.state = 837
                self.match(HogQLParser.DOT)
                self.state = 839
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
                if la_ == 1:
                    self.state = 838
                    _la = self._input.LA(1)
                    if not(_la==195 or _la==196):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumberLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def floatingLiteral(self):
            return self.getTypedRuleContext(HogQLParser.FloatingLiteralContext,0)


        def OCTAL_LITERAL(self):
            return self.getToken(HogQLParser.OCTAL_LITERAL, 0)

        def DECIMAL_LITERAL(self):
            return self.getToken(HogQLParser.DECIMAL_LITERAL, 0)

        def HEXADECIMAL_LITERAL(self):
            return self.getToken(HogQLParser.HEXADECIMAL_LITERAL, 0)

        def INF(self):
            return self.getToken(HogQLParser.INF, 0)

        def NAN_SQL(self):
            return self.getToken(HogQLParser.NAN_SQL, 0)

        def PLUS(self):
            return self.getToken(HogQLParser.PLUS, 0)

        def DASH(self):
            return self.getToken(HogQLParser.DASH, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_numberLiteral

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumberLiteral" ):
                return visitor.visitNumberLiteral(self)
            else:
                return visitor.visitChildren(self)




    def numberLiteral(self):

        localctx = HogQLParser.NumberLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_numberLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 844
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==207 or _la==222:
                self.state = 843
                _la = self._input.LA(1)
                if not(_la==207 or _la==222):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 852
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,109,self._ctx)
            if la_ == 1:
                self.state = 846
                self.floatingLiteral()
                pass

            elif la_ == 2:
                self.state = 847
                self.match(HogQLParser.OCTAL_LITERAL)
                pass

            elif la_ == 3:
                self.state = 848
                self.match(HogQLParser.DECIMAL_LITERAL)
                pass

            elif la_ == 4:
                self.state = 849
                self.match(HogQLParser.HEXADECIMAL_LITERAL)
                pass

            elif la_ == 5:
                self.state = 850
                self.match(HogQLParser.INF)
                pass

            elif la_ == 6:
                self.state = 851
                self.match(HogQLParser.NAN_SQL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numberLiteral(self):
            return self.getTypedRuleContext(HogQLParser.NumberLiteralContext,0)


        def STRING_LITERAL(self):
            return self.getToken(HogQLParser.STRING_LITERAL, 0)

        def NULL_SQL(self):
            return self.getToken(HogQLParser.NULL_SQL, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_literal

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteral" ):
                return visitor.visitLiteral(self)
            else:
                return visitor.visitChildren(self)




    def literal(self):

        localctx = HogQLParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_literal)
        try:
            self.state = 857
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [81, 112, 194, 195, 196, 197, 207, 209, 222]:
                self.enterOuterAlt(localctx, 1)
                self.state = 854
                self.numberLiteral()
                pass
            elif token in [198]:
                self.enterOuterAlt(localctx, 2)
                self.state = 855
                self.match(HogQLParser.STRING_LITERAL)
                pass
            elif token in [115]:
                self.enterOuterAlt(localctx, 3)
                self.state = 856
                self.match(HogQLParser.NULL_SQL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SECOND(self):
            return self.getToken(HogQLParser.SECOND, 0)

        def MINUTE(self):
            return self.getToken(HogQLParser.MINUTE, 0)

        def HOUR(self):
            return self.getToken(HogQLParser.HOUR, 0)

        def DAY(self):
            return self.getToken(HogQLParser.DAY, 0)

        def WEEK(self):
            return self.getToken(HogQLParser.WEEK, 0)

        def MONTH(self):
            return self.getToken(HogQLParser.MONTH, 0)

        def QUARTER(self):
            return self.getToken(HogQLParser.QUARTER, 0)

        def YEAR(self):
            return self.getToken(HogQLParser.YEAR, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_interval

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterval" ):
                return visitor.visitInterval(self)
            else:
                return visitor.visitChildren(self)




    def interval(self):

        localctx = HogQLParser.IntervalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_interval)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 859
            _la = self._input.LA(1)
            if not(_la==36 or (((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & 72057615512764417) != 0 or (((_la - 144)) & ~0x3f) == 0 and ((1 << (_la - 144)) & 36283883716609) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AFTER(self):
            return self.getToken(HogQLParser.AFTER, 0)

        def ALIAS(self):
            return self.getToken(HogQLParser.ALIAS, 0)

        def ALL(self):
            return self.getToken(HogQLParser.ALL, 0)

        def ALTER(self):
            return self.getToken(HogQLParser.ALTER, 0)

        def AND(self):
            return self.getToken(HogQLParser.AND, 0)

        def ANTI(self):
            return self.getToken(HogQLParser.ANTI, 0)

        def ANY(self):
            return self.getToken(HogQLParser.ANY, 0)

        def ARRAY(self):
            return self.getToken(HogQLParser.ARRAY, 0)

        def AS(self):
            return self.getToken(HogQLParser.AS, 0)

        def ASCENDING(self):
            return self.getToken(HogQLParser.ASCENDING, 0)

        def ASOF(self):
            return self.getToken(HogQLParser.ASOF, 0)

        def AST(self):
            return self.getToken(HogQLParser.AST, 0)

        def ASYNC(self):
            return self.getToken(HogQLParser.ASYNC, 0)

        def ATTACH(self):
            return self.getToken(HogQLParser.ATTACH, 0)

        def BETWEEN(self):
            return self.getToken(HogQLParser.BETWEEN, 0)

        def BOTH(self):
            return self.getToken(HogQLParser.BOTH, 0)

        def BY(self):
            return self.getToken(HogQLParser.BY, 0)

        def CASE(self):
            return self.getToken(HogQLParser.CASE, 0)

        def CAST(self):
            return self.getToken(HogQLParser.CAST, 0)

        def CHECK(self):
            return self.getToken(HogQLParser.CHECK, 0)

        def CLEAR(self):
            return self.getToken(HogQLParser.CLEAR, 0)

        def CLUSTER(self):
            return self.getToken(HogQLParser.CLUSTER, 0)

        def CODEC(self):
            return self.getToken(HogQLParser.CODEC, 0)

        def COLLATE(self):
            return self.getToken(HogQLParser.COLLATE, 0)

        def COLUMN(self):
            return self.getToken(HogQLParser.COLUMN, 0)

        def COMMENT(self):
            return self.getToken(HogQLParser.COMMENT, 0)

        def CONSTRAINT(self):
            return self.getToken(HogQLParser.CONSTRAINT, 0)

        def CREATE(self):
            return self.getToken(HogQLParser.CREATE, 0)

        def CROSS(self):
            return self.getToken(HogQLParser.CROSS, 0)

        def CUBE(self):
            return self.getToken(HogQLParser.CUBE, 0)

        def CURRENT(self):
            return self.getToken(HogQLParser.CURRENT, 0)

        def DATABASE(self):
            return self.getToken(HogQLParser.DATABASE, 0)

        def DATABASES(self):
            return self.getToken(HogQLParser.DATABASES, 0)

        def DATE(self):
            return self.getToken(HogQLParser.DATE, 0)

        def DEDUPLICATE(self):
            return self.getToken(HogQLParser.DEDUPLICATE, 0)

        def DEFAULT(self):
            return self.getToken(HogQLParser.DEFAULT, 0)

        def DELAY(self):
            return self.getToken(HogQLParser.DELAY, 0)

        def DELETE(self):
            return self.getToken(HogQLParser.DELETE, 0)

        def DESCRIBE(self):
            return self.getToken(HogQLParser.DESCRIBE, 0)

        def DESC(self):
            return self.getToken(HogQLParser.DESC, 0)

        def DESCENDING(self):
            return self.getToken(HogQLParser.DESCENDING, 0)

        def DETACH(self):
            return self.getToken(HogQLParser.DETACH, 0)

        def DICTIONARIES(self):
            return self.getToken(HogQLParser.DICTIONARIES, 0)

        def DICTIONARY(self):
            return self.getToken(HogQLParser.DICTIONARY, 0)

        def DISK(self):
            return self.getToken(HogQLParser.DISK, 0)

        def DISTINCT(self):
            return self.getToken(HogQLParser.DISTINCT, 0)

        def DISTRIBUTED(self):
            return self.getToken(HogQLParser.DISTRIBUTED, 0)

        def DROP(self):
            return self.getToken(HogQLParser.DROP, 0)

        def ELSE(self):
            return self.getToken(HogQLParser.ELSE, 0)

        def END(self):
            return self.getToken(HogQLParser.END, 0)

        def ENGINE(self):
            return self.getToken(HogQLParser.ENGINE, 0)

        def EVENTS(self):
            return self.getToken(HogQLParser.EVENTS, 0)

        def EXISTS(self):
            return self.getToken(HogQLParser.EXISTS, 0)

        def EXPLAIN(self):
            return self.getToken(HogQLParser.EXPLAIN, 0)

        def EXPRESSION(self):
            return self.getToken(HogQLParser.EXPRESSION, 0)

        def EXTRACT(self):
            return self.getToken(HogQLParser.EXTRACT, 0)

        def FETCHES(self):
            return self.getToken(HogQLParser.FETCHES, 0)

        def FINAL(self):
            return self.getToken(HogQLParser.FINAL, 0)

        def FIRST(self):
            return self.getToken(HogQLParser.FIRST, 0)

        def FLUSH(self):
            return self.getToken(HogQLParser.FLUSH, 0)

        def FOR(self):
            return self.getToken(HogQLParser.FOR, 0)

        def FOLLOWING(self):
            return self.getToken(HogQLParser.FOLLOWING, 0)

        def FORMAT(self):
            return self.getToken(HogQLParser.FORMAT, 0)

        def FREEZE(self):
            return self.getToken(HogQLParser.FREEZE, 0)

        def FROM(self):
            return self.getToken(HogQLParser.FROM, 0)

        def FULL(self):
            return self.getToken(HogQLParser.FULL, 0)

        def FUNCTION(self):
            return self.getToken(HogQLParser.FUNCTION, 0)

        def GLOBAL(self):
            return self.getToken(HogQLParser.GLOBAL, 0)

        def GRANULARITY(self):
            return self.getToken(HogQLParser.GRANULARITY, 0)

        def GROUP(self):
            return self.getToken(HogQLParser.GROUP, 0)

        def HAVING(self):
            return self.getToken(HogQLParser.HAVING, 0)

        def HIERARCHICAL(self):
            return self.getToken(HogQLParser.HIERARCHICAL, 0)

        def ID(self):
            return self.getToken(HogQLParser.ID, 0)

        def IF(self):
            return self.getToken(HogQLParser.IF, 0)

        def ILIKE(self):
            return self.getToken(HogQLParser.ILIKE, 0)

        def IN(self):
            return self.getToken(HogQLParser.IN, 0)

        def INDEX(self):
            return self.getToken(HogQLParser.INDEX, 0)

        def INJECTIVE(self):
            return self.getToken(HogQLParser.INJECTIVE, 0)

        def INNER(self):
            return self.getToken(HogQLParser.INNER, 0)

        def INSERT(self):
            return self.getToken(HogQLParser.INSERT, 0)

        def INTERVAL(self):
            return self.getToken(HogQLParser.INTERVAL, 0)

        def INTO(self):
            return self.getToken(HogQLParser.INTO, 0)

        def IS(self):
            return self.getToken(HogQLParser.IS, 0)

        def IS_OBJECT_ID(self):
            return self.getToken(HogQLParser.IS_OBJECT_ID, 0)

        def JOIN(self):
            return self.getToken(HogQLParser.JOIN, 0)

        def JSON_FALSE(self):
            return self.getToken(HogQLParser.JSON_FALSE, 0)

        def JSON_TRUE(self):
            return self.getToken(HogQLParser.JSON_TRUE, 0)

        def KEY(self):
            return self.getToken(HogQLParser.KEY, 0)

        def KILL(self):
            return self.getToken(HogQLParser.KILL, 0)

        def LAST(self):
            return self.getToken(HogQLParser.LAST, 0)

        def LAYOUT(self):
            return self.getToken(HogQLParser.LAYOUT, 0)

        def LEADING(self):
            return self.getToken(HogQLParser.LEADING, 0)

        def LEFT(self):
            return self.getToken(HogQLParser.LEFT, 0)

        def LIFETIME(self):
            return self.getToken(HogQLParser.LIFETIME, 0)

        def LIKE(self):
            return self.getToken(HogQLParser.LIKE, 0)

        def LIMIT(self):
            return self.getToken(HogQLParser.LIMIT, 0)

        def LIVE(self):
            return self.getToken(HogQLParser.LIVE, 0)

        def LOCAL(self):
            return self.getToken(HogQLParser.LOCAL, 0)

        def LOGS(self):
            return self.getToken(HogQLParser.LOGS, 0)

        def MATERIALIZE(self):
            return self.getToken(HogQLParser.MATERIALIZE, 0)

        def MATERIALIZED(self):
            return self.getToken(HogQLParser.MATERIALIZED, 0)

        def MAX(self):
            return self.getToken(HogQLParser.MAX, 0)

        def MERGES(self):
            return self.getToken(HogQLParser.MERGES, 0)

        def MIN(self):
            return self.getToken(HogQLParser.MIN, 0)

        def MODIFY(self):
            return self.getToken(HogQLParser.MODIFY, 0)

        def MOVE(self):
            return self.getToken(HogQLParser.MOVE, 0)

        def MUTATION(self):
            return self.getToken(HogQLParser.MUTATION, 0)

        def NO(self):
            return self.getToken(HogQLParser.NO, 0)

        def NOT(self):
            return self.getToken(HogQLParser.NOT, 0)

        def NULLS(self):
            return self.getToken(HogQLParser.NULLS, 0)

        def OFFSET(self):
            return self.getToken(HogQLParser.OFFSET, 0)

        def ON(self):
            return self.getToken(HogQLParser.ON, 0)

        def OPTIMIZE(self):
            return self.getToken(HogQLParser.OPTIMIZE, 0)

        def OR(self):
            return self.getToken(HogQLParser.OR, 0)

        def ORDER(self):
            return self.getToken(HogQLParser.ORDER, 0)

        def OUTER(self):
            return self.getToken(HogQLParser.OUTER, 0)

        def OUTFILE(self):
            return self.getToken(HogQLParser.OUTFILE, 0)

        def OVER(self):
            return self.getToken(HogQLParser.OVER, 0)

        def PARTITION(self):
            return self.getToken(HogQLParser.PARTITION, 0)

        def POPULATE(self):
            return self.getToken(HogQLParser.POPULATE, 0)

        def PRECEDING(self):
            return self.getToken(HogQLParser.PRECEDING, 0)

        def PREWHERE(self):
            return self.getToken(HogQLParser.PREWHERE, 0)

        def PRIMARY(self):
            return self.getToken(HogQLParser.PRIMARY, 0)

        def RANGE(self):
            return self.getToken(HogQLParser.RANGE, 0)

        def RELOAD(self):
            return self.getToken(HogQLParser.RELOAD, 0)

        def REMOVE(self):
            return self.getToken(HogQLParser.REMOVE, 0)

        def RENAME(self):
            return self.getToken(HogQLParser.RENAME, 0)

        def REPLACE(self):
            return self.getToken(HogQLParser.REPLACE, 0)

        def REPLICA(self):
            return self.getToken(HogQLParser.REPLICA, 0)

        def REPLICATED(self):
            return self.getToken(HogQLParser.REPLICATED, 0)

        def RIGHT(self):
            return self.getToken(HogQLParser.RIGHT, 0)

        def ROLLUP(self):
            return self.getToken(HogQLParser.ROLLUP, 0)

        def ROW(self):
            return self.getToken(HogQLParser.ROW, 0)

        def ROWS(self):
            return self.getToken(HogQLParser.ROWS, 0)

        def SAMPLE(self):
            return self.getToken(HogQLParser.SAMPLE, 0)

        def SELECT(self):
            return self.getToken(HogQLParser.SELECT, 0)

        def SEMI(self):
            return self.getToken(HogQLParser.SEMI, 0)

        def SENDS(self):
            return self.getToken(HogQLParser.SENDS, 0)

        def SET(self):
            return self.getToken(HogQLParser.SET, 0)

        def SETTINGS(self):
            return self.getToken(HogQLParser.SETTINGS, 0)

        def SHOW(self):
            return self.getToken(HogQLParser.SHOW, 0)

        def SOURCE(self):
            return self.getToken(HogQLParser.SOURCE, 0)

        def START(self):
            return self.getToken(HogQLParser.START, 0)

        def STOP(self):
            return self.getToken(HogQLParser.STOP, 0)

        def SUBSTRING(self):
            return self.getToken(HogQLParser.SUBSTRING, 0)

        def SYNC(self):
            return self.getToken(HogQLParser.SYNC, 0)

        def SYNTAX(self):
            return self.getToken(HogQLParser.SYNTAX, 0)

        def SYSTEM(self):
            return self.getToken(HogQLParser.SYSTEM, 0)

        def TABLE(self):
            return self.getToken(HogQLParser.TABLE, 0)

        def TABLES(self):
            return self.getToken(HogQLParser.TABLES, 0)

        def TEMPORARY(self):
            return self.getToken(HogQLParser.TEMPORARY, 0)

        def TEST(self):
            return self.getToken(HogQLParser.TEST, 0)

        def THEN(self):
            return self.getToken(HogQLParser.THEN, 0)

        def TIES(self):
            return self.getToken(HogQLParser.TIES, 0)

        def TIMEOUT(self):
            return self.getToken(HogQLParser.TIMEOUT, 0)

        def TIMESTAMP(self):
            return self.getToken(HogQLParser.TIMESTAMP, 0)

        def TOTALS(self):
            return self.getToken(HogQLParser.TOTALS, 0)

        def TRAILING(self):
            return self.getToken(HogQLParser.TRAILING, 0)

        def TRIM(self):
            return self.getToken(HogQLParser.TRIM, 0)

        def TRUNCATE(self):
            return self.getToken(HogQLParser.TRUNCATE, 0)

        def TO(self):
            return self.getToken(HogQLParser.TO, 0)

        def TOP(self):
            return self.getToken(HogQLParser.TOP, 0)

        def TTL(self):
            return self.getToken(HogQLParser.TTL, 0)

        def TYPE(self):
            return self.getToken(HogQLParser.TYPE, 0)

        def UNBOUNDED(self):
            return self.getToken(HogQLParser.UNBOUNDED, 0)

        def UNION(self):
            return self.getToken(HogQLParser.UNION, 0)

        def UPDATE(self):
            return self.getToken(HogQLParser.UPDATE, 0)

        def USE(self):
            return self.getToken(HogQLParser.USE, 0)

        def USING(self):
            return self.getToken(HogQLParser.USING, 0)

        def UUID(self):
            return self.getToken(HogQLParser.UUID, 0)

        def VALUES(self):
            return self.getToken(HogQLParser.VALUES, 0)

        def VIEW(self):
            return self.getToken(HogQLParser.VIEW, 0)

        def VOLUME(self):
            return self.getToken(HogQLParser.VOLUME, 0)

        def WATCH(self):
            return self.getToken(HogQLParser.WATCH, 0)

        def WHEN(self):
            return self.getToken(HogQLParser.WHEN, 0)

        def WHERE(self):
            return self.getToken(HogQLParser.WHERE, 0)

        def WINDOW(self):
            return self.getToken(HogQLParser.WINDOW, 0)

        def WITH(self):
            return self.getToken(HogQLParser.WITH, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_keyword

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKeyword" ):
                return visitor.visitKeyword(self)
            else:
                return visitor.visitChildren(self)




    def keyword(self):

        localctx = HogQLParser.KeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_keyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 861
            _la = self._input.LA(1)
            if not(((_la) & ~0x3f) == 0 and ((1 << _la) & -68719476740) != 0 or (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -2577255255640065) != 0 or (((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -2377900603251687437) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeywordForAliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATE(self):
            return self.getToken(HogQLParser.DATE, 0)

        def FIRST(self):
            return self.getToken(HogQLParser.FIRST, 0)

        def ID(self):
            return self.getToken(HogQLParser.ID, 0)

        def KEY(self):
            return self.getToken(HogQLParser.KEY, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_keywordForAlias

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKeywordForAlias" ):
                return visitor.visitKeywordForAlias(self)
            else:
                return visitor.visitChildren(self)




    def keywordForAlias(self):

        localctx = HogQLParser.KeywordForAliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_keywordForAlias)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 863
            _la = self._input.LA(1)
            if not((((_la - 35)) & ~0x3f) == 0 and ((1 << (_la - 35)) & 36030996109328385) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(HogQLParser.IDENTIFIER, 0)

        def keywordForAlias(self):
            return self.getTypedRuleContext(HogQLParser.KeywordForAliasContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_alias

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlias" ):
                return visitor.visitAlias(self)
            else:
                return visitor.visitChildren(self)




    def alias(self):

        localctx = HogQLParser.AliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_alias)
        try:
            self.state = 867
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 865
                self.match(HogQLParser.IDENTIFIER)
                pass
            elif token in [35, 61, 76, 90]:
                self.enterOuterAlt(localctx, 2)
                self.state = 866
                self.keywordForAlias()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(HogQLParser.IDENTIFIER, 0)

        def interval(self):
            return self.getTypedRuleContext(HogQLParser.IntervalContext,0)


        def keyword(self):
            return self.getTypedRuleContext(HogQLParser.KeywordContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_identifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifier" ):
                return visitor.visitIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def identifier(self):

        localctx = HogQLParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_identifier)
        try:
            self.state = 872
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 869
                self.match(HogQLParser.IDENTIFIER)
                pass
            elif token in [36, 75, 107, 109, 131, 144, 184, 189]:
                self.enterOuterAlt(localctx, 2)
                self.state = 870
                self.interval()
                pass
            elif token in [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 110, 111, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 190, 191]:
                self.enterOuterAlt(localctx, 3)
                self.state = 871
                self.keyword()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierOrNullContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def NULL_SQL(self):
            return self.getToken(HogQLParser.NULL_SQL, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_identifierOrNull

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifierOrNull" ):
                return visitor.visitIdentifierOrNull(self)
            else:
                return visitor.visitChildren(self)




    def identifierOrNull(self):

        localctx = HogQLParser.IdentifierOrNullContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_identifierOrNull)
        try:
            self.state = 876
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 874
                self.identifier()
                pass
            elif token in [115]:
                self.enterOuterAlt(localctx, 2)
                self.state = 875
                self.match(HogQLParser.NULL_SQL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(HogQLParser.STRING_LITERAL, 0)

        def EQ_SINGLE(self):
            return self.getToken(HogQLParser.EQ_SINGLE, 0)

        def numberLiteral(self):
            return self.getTypedRuleContext(HogQLParser.NumberLiteralContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_enumValue

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumValue" ):
                return visitor.visitEnumValue(self)
            else:
                return visitor.visitChildren(self)




    def enumValue(self):

        localctx = HogQLParser.EnumValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_enumValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 878
            self.match(HogQLParser.STRING_LITERAL)
            self.state = 879
            self.match(HogQLParser.EQ_SINGLE)
            self.state = 880
            self.numberLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[17] = self.joinExpr_sempred
        self._predicates[38] = self.columnExpr_sempred
        self._predicates[44] = self.tableExpr_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def joinExpr_sempred(self, localctx:JoinExprContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 4)
         

    def columnExpr_sempred(self, localctx:ColumnExprContext, predIndex:int):
            if predIndex == 2:
                return self.precpred(self._ctx, 16)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 15)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 14)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 19)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 18)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 13)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 7)
         

    def tableExpr_sempred(self, localctx:TableExprContext, predIndex:int):
            if predIndex == 13:
                return self.precpred(self._ctx, 1)
         




