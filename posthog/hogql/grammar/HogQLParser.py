# Generated from HogQLParser.g4 by ANTLR 4.13.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,154,1178,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,1,0,5,0,168,8,0,10,0,
        12,0,171,9,0,1,0,1,0,1,1,1,1,3,1,177,8,1,1,2,1,2,1,3,1,3,1,3,1,3,
        1,3,3,3,186,8,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,5,5,
        199,8,5,10,5,12,5,202,9,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,
        6,213,8,6,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,225,8,8,1,
        9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,3,
        11,241,8,11,1,11,1,11,1,11,1,12,1,12,1,13,1,13,5,13,250,8,13,10,
        13,12,13,253,9,13,1,13,1,13,1,14,1,14,1,14,1,14,1,15,1,15,1,15,5,
        15,264,8,15,10,15,12,15,267,9,15,1,16,1,16,1,16,3,16,272,8,16,1,
        16,1,16,1,17,1,17,1,17,1,17,5,17,280,8,17,10,17,12,17,283,9,17,1,
        18,1,18,1,18,1,18,1,18,1,18,3,18,291,8,18,1,19,3,19,294,8,19,1,19,
        1,19,3,19,298,8,19,1,19,3,19,301,8,19,1,19,1,19,3,19,305,8,19,1,
        19,3,19,308,8,19,1,19,3,19,311,8,19,1,19,3,19,314,8,19,1,19,3,19,
        317,8,19,1,19,1,19,3,19,321,8,19,1,19,1,19,3,19,325,8,19,1,19,3,
        19,328,8,19,1,19,3,19,331,8,19,1,19,3,19,334,8,19,1,19,1,19,3,19,
        338,8,19,1,19,3,19,341,8,19,1,20,1,20,1,20,1,21,1,21,1,21,1,21,3,
        21,350,8,21,1,22,1,22,1,22,1,23,3,23,356,8,23,1,23,1,23,1,23,1,23,
        1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,
        5,24,375,8,24,10,24,12,24,378,9,24,1,25,1,25,1,25,1,26,1,26,1,26,
        1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,3,27,394,8,27,1,28,1,28,
        1,28,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,
        3,31,411,8,31,1,31,1,31,1,31,1,31,3,31,417,8,31,1,31,1,31,1,31,1,
        31,3,31,423,8,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,3,
        31,434,8,31,3,31,436,8,31,1,32,1,32,1,32,1,33,1,33,1,33,1,34,1,34,
        1,34,3,34,447,8,34,1,34,3,34,450,8,34,1,34,1,34,1,34,1,34,3,34,456,
        8,34,1,34,1,34,1,34,1,34,1,34,1,34,3,34,464,8,34,1,34,1,34,1,34,
        1,34,5,34,470,8,34,10,34,12,34,473,9,34,1,35,3,35,476,8,35,1,35,
        1,35,1,35,3,35,481,8,35,1,35,3,35,484,8,35,1,35,3,35,487,8,35,1,
        35,1,35,3,35,491,8,35,1,35,1,35,3,35,495,8,35,1,35,3,35,498,8,35,
        3,35,500,8,35,1,35,3,35,503,8,35,1,35,1,35,3,35,507,8,35,1,35,1,
        35,3,35,511,8,35,1,35,3,35,514,8,35,3,35,516,8,35,3,35,518,8,35,
        1,36,1,36,1,36,3,36,523,8,36,1,37,1,37,1,37,1,37,1,37,1,37,1,37,
        1,37,1,37,3,37,534,8,37,1,38,1,38,1,38,1,38,3,38,540,8,38,1,39,1,
        39,1,39,5,39,545,8,39,10,39,12,39,548,9,39,1,40,1,40,3,40,552,8,
        40,1,40,1,40,3,40,556,8,40,1,40,1,40,3,40,560,8,40,1,41,1,41,1,41,
        1,41,3,41,566,8,41,3,41,568,8,41,1,42,1,42,1,42,5,42,573,8,42,10,
        42,12,42,576,9,42,1,43,1,43,1,43,1,43,1,44,3,44,583,8,44,1,44,3,
        44,586,8,44,1,44,3,44,589,8,44,1,45,1,45,1,45,1,45,1,46,1,46,1,46,
        1,46,1,47,1,47,1,47,1,48,1,48,1,48,1,48,1,48,1,48,3,48,608,8,48,
        1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,3,49,
        622,8,49,1,50,1,50,1,50,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,
        1,51,5,51,636,8,51,10,51,12,51,639,9,51,1,51,1,51,1,51,1,51,1,51,
        1,51,1,51,5,51,648,8,51,10,51,12,51,651,9,51,1,51,1,51,1,51,1,51,
        1,51,1,51,1,51,5,51,660,8,51,10,51,12,51,663,9,51,1,51,1,51,1,51,
        1,51,1,51,3,51,670,8,51,1,51,1,51,3,51,674,8,51,1,52,1,52,1,52,5,
        52,679,8,52,10,52,12,52,682,9,52,1,53,1,53,1,53,3,53,687,8,53,1,
        53,1,53,1,53,1,53,1,53,4,53,694,8,53,11,53,12,53,695,1,53,1,53,3,
        53,700,8,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,
        53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,3,53,724,
        8,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,
        1,53,1,53,1,53,3,53,741,8,53,1,53,1,53,1,53,1,53,3,53,747,8,53,1,
        53,3,53,750,8,53,1,53,3,53,753,8,53,1,53,1,53,1,53,1,53,1,53,1,53,
        1,53,1,53,3,53,763,8,53,1,53,1,53,1,53,1,53,3,53,769,8,53,1,53,3,
        53,772,8,53,1,53,3,53,775,8,53,1,53,1,53,1,53,1,53,1,53,1,53,3,53,
        783,8,53,1,53,3,53,786,8,53,1,53,1,53,3,53,790,8,53,1,53,3,53,793,
        8,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,
        3,53,807,8,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,
        1,53,1,53,1,53,1,53,1,53,3,53,824,8,53,1,53,1,53,1,53,3,53,829,8,
        53,1,53,1,53,3,53,833,8,53,1,53,1,53,1,53,1,53,3,53,839,8,53,1,53,
        1,53,1,53,1,53,1,53,3,53,846,8,53,1,53,1,53,1,53,1,53,1,53,1,53,
        1,53,1,53,1,53,1,53,3,53,858,8,53,1,53,1,53,3,53,862,8,53,1,53,3,
        53,865,8,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,3,53,874,8,53,1,53,
        1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,3,53,888,
        8,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,
        1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,
        3,53,915,8,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,3,53,924,8,53,5,
        53,926,8,53,10,53,12,53,929,9,53,1,54,1,54,1,54,5,54,934,8,54,10,
        54,12,54,937,9,54,1,55,1,55,3,55,941,8,55,1,56,1,56,1,56,1,56,5,
        56,947,8,56,10,56,12,56,950,9,56,1,56,1,56,1,56,1,56,1,56,5,56,957,
        8,56,10,56,12,56,960,9,56,3,56,962,8,56,1,56,1,56,1,56,1,57,1,57,
        1,57,5,57,970,8,57,10,57,12,57,973,9,57,1,57,1,57,1,57,1,57,1,57,
        1,57,5,57,981,8,57,10,57,12,57,984,9,57,1,57,1,57,3,57,988,8,57,
        1,57,1,57,1,57,1,57,1,57,3,57,995,8,57,1,58,1,58,1,58,1,58,1,58,
        1,58,1,58,1,58,1,58,1,58,1,58,3,58,1008,8,58,1,59,1,59,1,59,5,59,
        1013,8,59,10,59,12,59,1016,9,59,1,60,1,60,1,60,1,60,1,60,1,60,1,
        60,1,60,1,60,1,60,3,60,1028,8,60,1,61,1,61,1,61,1,61,3,61,1034,8,
        61,1,61,3,61,1037,8,61,1,62,1,62,1,62,5,62,1042,8,62,10,62,12,62,
        1045,9,62,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,3,63,1056,
        8,63,1,63,1,63,1,63,1,63,3,63,1062,8,63,5,63,1064,8,63,10,63,12,
        63,1067,9,63,1,64,1,64,1,64,3,64,1072,8,64,1,64,1,64,1,65,1,65,1,
        65,3,65,1079,8,65,1,65,1,65,1,66,1,66,1,66,5,66,1086,8,66,10,66,
        12,66,1089,9,66,1,67,1,67,1,68,1,68,1,68,1,68,1,68,1,68,3,68,1099,
        8,68,3,68,1101,8,68,1,69,3,69,1104,8,69,1,69,1,69,1,69,1,69,1,69,
        1,69,3,69,1112,8,69,1,70,1,70,1,70,3,70,1117,8,70,1,71,1,71,1,72,
        1,72,1,73,1,73,1,74,1,74,3,74,1127,8,74,1,75,1,75,1,75,3,75,1132,
        8,75,1,76,1,76,1,76,1,76,1,77,1,77,1,77,1,77,1,78,1,78,3,78,1144,
        8,78,1,79,1,79,5,79,1148,8,79,10,79,12,79,1151,9,79,1,79,1,79,1,
        80,1,80,1,80,1,80,1,80,3,80,1160,8,80,1,81,1,81,5,81,1164,8,81,10,
        81,12,81,1167,9,81,1,81,1,81,1,82,1,82,1,82,1,82,1,82,3,82,1176,
        8,82,1,82,0,3,68,106,126,83,0,2,4,6,8,10,12,14,16,18,20,22,24,26,
        28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,
        72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,
        112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,
        144,146,148,150,152,154,156,158,160,162,164,0,16,2,0,17,17,72,72,
        2,0,42,42,49,49,3,0,1,1,4,4,8,8,4,0,1,1,3,4,8,8,78,78,2,0,49,49,
        71,71,2,0,1,1,4,4,2,0,7,7,21,22,2,0,28,28,47,47,2,0,69,69,74,74,
        3,0,10,10,48,48,87,87,2,0,39,39,51,51,1,0,103,104,2,0,114,114,134,
        134,7,0,20,20,36,36,53,54,68,68,76,76,93,93,99,99,12,0,1,19,21,28,
        30,35,37,40,42,49,51,52,56,56,58,67,69,75,77,92,94,95,97,98,4,0,
        19,19,28,28,37,37,46,46,1314,0,169,1,0,0,0,2,176,1,0,0,0,4,178,1,
        0,0,0,6,180,1,0,0,0,8,189,1,0,0,0,10,195,1,0,0,0,12,212,1,0,0,0,
        14,214,1,0,0,0,16,217,1,0,0,0,18,226,1,0,0,0,20,232,1,0,0,0,22,236,
        1,0,0,0,24,245,1,0,0,0,26,247,1,0,0,0,28,256,1,0,0,0,30,260,1,0,
        0,0,32,271,1,0,0,0,34,275,1,0,0,0,36,290,1,0,0,0,38,293,1,0,0,0,
        40,342,1,0,0,0,42,345,1,0,0,0,44,351,1,0,0,0,46,355,1,0,0,0,48,361,
        1,0,0,0,50,379,1,0,0,0,52,382,1,0,0,0,54,385,1,0,0,0,56,395,1,0,
        0,0,58,398,1,0,0,0,60,402,1,0,0,0,62,435,1,0,0,0,64,437,1,0,0,0,
        66,440,1,0,0,0,68,455,1,0,0,0,70,517,1,0,0,0,72,522,1,0,0,0,74,533,
        1,0,0,0,76,535,1,0,0,0,78,541,1,0,0,0,80,549,1,0,0,0,82,567,1,0,
        0,0,84,569,1,0,0,0,86,577,1,0,0,0,88,582,1,0,0,0,90,590,1,0,0,0,
        92,594,1,0,0,0,94,598,1,0,0,0,96,607,1,0,0,0,98,621,1,0,0,0,100,
        623,1,0,0,0,102,673,1,0,0,0,104,675,1,0,0,0,106,832,1,0,0,0,108,
        930,1,0,0,0,110,940,1,0,0,0,112,961,1,0,0,0,114,994,1,0,0,0,116,
        1007,1,0,0,0,118,1009,1,0,0,0,120,1027,1,0,0,0,122,1036,1,0,0,0,
        124,1038,1,0,0,0,126,1055,1,0,0,0,128,1068,1,0,0,0,130,1078,1,0,
        0,0,132,1082,1,0,0,0,134,1090,1,0,0,0,136,1100,1,0,0,0,138,1103,
        1,0,0,0,140,1116,1,0,0,0,142,1118,1,0,0,0,144,1120,1,0,0,0,146,1122,
        1,0,0,0,148,1126,1,0,0,0,150,1131,1,0,0,0,152,1133,1,0,0,0,154,1137,
        1,0,0,0,156,1143,1,0,0,0,158,1145,1,0,0,0,160,1159,1,0,0,0,162,1161,
        1,0,0,0,164,1175,1,0,0,0,166,168,3,2,1,0,167,166,1,0,0,0,168,171,
        1,0,0,0,169,167,1,0,0,0,169,170,1,0,0,0,170,172,1,0,0,0,171,169,
        1,0,0,0,172,173,5,0,0,1,173,1,1,0,0,0,174,177,3,6,3,0,175,177,3,
        12,6,0,176,174,1,0,0,0,176,175,1,0,0,0,177,3,1,0,0,0,178,179,3,106,
        53,0,179,5,1,0,0,0,180,181,5,50,0,0,181,185,3,150,75,0,182,183,5,
        111,0,0,183,184,5,118,0,0,184,186,3,4,2,0,185,182,1,0,0,0,185,186,
        1,0,0,0,186,187,1,0,0,0,187,188,5,145,0,0,188,7,1,0,0,0,189,190,
        3,4,2,0,190,191,5,111,0,0,191,192,5,118,0,0,192,193,3,4,2,0,193,
        194,5,145,0,0,194,9,1,0,0,0,195,200,3,150,75,0,196,197,5,112,0,0,
        197,199,3,150,75,0,198,196,1,0,0,0,199,202,1,0,0,0,200,198,1,0,0,
        0,200,201,1,0,0,0,201,11,1,0,0,0,202,200,1,0,0,0,203,213,3,20,10,
        0,204,213,3,24,12,0,205,213,3,14,7,0,206,213,3,16,8,0,207,213,3,
        18,9,0,208,213,3,22,11,0,209,213,3,8,4,0,210,213,3,20,10,0,211,213,
        3,26,13,0,212,203,1,0,0,0,212,204,1,0,0,0,212,205,1,0,0,0,212,206,
        1,0,0,0,212,207,1,0,0,0,212,208,1,0,0,0,212,209,1,0,0,0,212,210,
        1,0,0,0,212,211,1,0,0,0,213,13,1,0,0,0,214,215,3,4,2,0,215,216,5,
        145,0,0,216,15,1,0,0,0,217,218,5,38,0,0,218,219,5,126,0,0,219,220,
        3,4,2,0,220,221,5,144,0,0,221,224,3,12,6,0,222,223,5,24,0,0,223,
        225,3,12,6,0,224,222,1,0,0,0,224,225,1,0,0,0,225,17,1,0,0,0,226,
        227,5,96,0,0,227,228,5,126,0,0,228,229,3,4,2,0,229,230,5,144,0,0,
        230,231,3,12,6,0,231,19,1,0,0,0,232,233,5,70,0,0,233,234,3,4,2,0,
        234,235,5,145,0,0,235,21,1,0,0,0,236,237,5,29,0,0,237,238,3,150,
        75,0,238,240,5,126,0,0,239,241,3,10,5,0,240,239,1,0,0,0,240,241,
        1,0,0,0,241,242,1,0,0,0,242,243,5,144,0,0,243,244,3,26,13,0,244,
        23,1,0,0,0,245,246,5,145,0,0,246,25,1,0,0,0,247,251,5,124,0,0,248,
        250,3,2,1,0,249,248,1,0,0,0,250,253,1,0,0,0,251,249,1,0,0,0,251,
        252,1,0,0,0,252,254,1,0,0,0,253,251,1,0,0,0,254,255,5,142,0,0,255,
        27,1,0,0,0,256,257,3,4,2,0,257,258,5,111,0,0,258,259,3,4,2,0,259,
        29,1,0,0,0,260,265,3,28,14,0,261,262,5,112,0,0,262,264,3,28,14,0,
        263,261,1,0,0,0,264,267,1,0,0,0,265,263,1,0,0,0,265,266,1,0,0,0,
        266,31,1,0,0,0,267,265,1,0,0,0,268,272,3,34,17,0,269,272,3,38,19,
        0,270,272,3,114,57,0,271,268,1,0,0,0,271,269,1,0,0,0,271,270,1,0,
        0,0,272,273,1,0,0,0,273,274,5,0,0,1,274,33,1,0,0,0,275,281,3,36,
        18,0,276,277,5,91,0,0,277,278,5,1,0,0,278,280,3,36,18,0,279,276,
        1,0,0,0,280,283,1,0,0,0,281,279,1,0,0,0,281,282,1,0,0,0,282,35,1,
        0,0,0,283,281,1,0,0,0,284,291,3,38,19,0,285,286,5,126,0,0,286,287,
        3,34,17,0,287,288,5,144,0,0,288,291,1,0,0,0,289,291,3,154,77,0,290,
        284,1,0,0,0,290,285,1,0,0,0,290,289,1,0,0,0,291,37,1,0,0,0,292,294,
        3,40,20,0,293,292,1,0,0,0,293,294,1,0,0,0,294,295,1,0,0,0,295,297,
        5,77,0,0,296,298,5,23,0,0,297,296,1,0,0,0,297,298,1,0,0,0,298,300,
        1,0,0,0,299,301,3,42,21,0,300,299,1,0,0,0,300,301,1,0,0,0,301,302,
        1,0,0,0,302,304,3,104,52,0,303,305,3,44,22,0,304,303,1,0,0,0,304,
        305,1,0,0,0,305,307,1,0,0,0,306,308,3,46,23,0,307,306,1,0,0,0,307,
        308,1,0,0,0,308,310,1,0,0,0,309,311,3,50,25,0,310,309,1,0,0,0,310,
        311,1,0,0,0,311,313,1,0,0,0,312,314,3,52,26,0,313,312,1,0,0,0,313,
        314,1,0,0,0,314,316,1,0,0,0,315,317,3,54,27,0,316,315,1,0,0,0,316,
        317,1,0,0,0,317,320,1,0,0,0,318,319,5,98,0,0,319,321,7,0,0,0,320,
        318,1,0,0,0,320,321,1,0,0,0,321,324,1,0,0,0,322,323,5,98,0,0,323,
        325,5,86,0,0,324,322,1,0,0,0,324,325,1,0,0,0,325,327,1,0,0,0,326,
        328,3,56,28,0,327,326,1,0,0,0,327,328,1,0,0,0,328,330,1,0,0,0,329,
        331,3,48,24,0,330,329,1,0,0,0,330,331,1,0,0,0,331,333,1,0,0,0,332,
        334,3,58,29,0,333,332,1,0,0,0,333,334,1,0,0,0,334,337,1,0,0,0,335,
        338,3,62,31,0,336,338,3,64,32,0,337,335,1,0,0,0,337,336,1,0,0,0,
        337,338,1,0,0,0,338,340,1,0,0,0,339,341,3,66,33,0,340,339,1,0,0,
        0,340,341,1,0,0,0,341,39,1,0,0,0,342,343,5,98,0,0,343,344,3,118,
        59,0,344,41,1,0,0,0,345,346,5,85,0,0,346,349,5,104,0,0,347,348,5,
        98,0,0,348,350,5,82,0,0,349,347,1,0,0,0,349,350,1,0,0,0,350,43,1,
        0,0,0,351,352,5,32,0,0,352,353,3,68,34,0,353,45,1,0,0,0,354,356,
        7,1,0,0,355,354,1,0,0,0,355,356,1,0,0,0,356,357,1,0,0,0,357,358,
        5,5,0,0,358,359,5,45,0,0,359,360,3,104,52,0,360,47,1,0,0,0,361,362,
        5,97,0,0,362,363,3,150,75,0,363,364,5,6,0,0,364,365,5,126,0,0,365,
        366,3,88,44,0,366,376,5,144,0,0,367,368,5,112,0,0,368,369,3,150,
        75,0,369,370,5,6,0,0,370,371,5,126,0,0,371,372,3,88,44,0,372,373,
        5,144,0,0,373,375,1,0,0,0,374,367,1,0,0,0,375,378,1,0,0,0,376,374,
        1,0,0,0,376,377,1,0,0,0,377,49,1,0,0,0,378,376,1,0,0,0,379,380,5,
        67,0,0,380,381,3,106,53,0,381,51,1,0,0,0,382,383,5,95,0,0,383,384,
        3,106,53,0,384,53,1,0,0,0,385,386,5,34,0,0,386,393,5,11,0,0,387,
        388,7,0,0,0,388,389,5,126,0,0,389,390,3,104,52,0,390,391,5,144,0,
        0,391,394,1,0,0,0,392,394,3,104,52,0,393,387,1,0,0,0,393,392,1,0,
        0,0,394,55,1,0,0,0,395,396,5,35,0,0,396,397,3,106,53,0,397,57,1,
        0,0,0,398,399,5,62,0,0,399,400,5,11,0,0,400,401,3,78,39,0,401,59,
        1,0,0,0,402,403,5,62,0,0,403,404,5,11,0,0,404,405,3,104,52,0,405,
        61,1,0,0,0,406,407,5,52,0,0,407,410,3,106,53,0,408,409,5,112,0,0,
        409,411,3,106,53,0,410,408,1,0,0,0,410,411,1,0,0,0,411,416,1,0,0,
        0,412,413,5,98,0,0,413,417,5,82,0,0,414,415,5,11,0,0,415,417,3,104,
        52,0,416,412,1,0,0,0,416,414,1,0,0,0,416,417,1,0,0,0,417,436,1,0,
        0,0,418,419,5,52,0,0,419,422,3,106,53,0,420,421,5,98,0,0,421,423,
        5,82,0,0,422,420,1,0,0,0,422,423,1,0,0,0,423,424,1,0,0,0,424,425,
        5,59,0,0,425,426,3,106,53,0,426,436,1,0,0,0,427,428,5,52,0,0,428,
        429,3,106,53,0,429,430,5,59,0,0,430,433,3,106,53,0,431,432,5,11,
        0,0,432,434,3,104,52,0,433,431,1,0,0,0,433,434,1,0,0,0,434,436,1,
        0,0,0,435,406,1,0,0,0,435,418,1,0,0,0,435,427,1,0,0,0,436,63,1,0,
        0,0,437,438,5,59,0,0,438,439,3,106,53,0,439,65,1,0,0,0,440,441,5,
        79,0,0,441,442,3,84,42,0,442,67,1,0,0,0,443,444,6,34,-1,0,444,446,
        3,126,63,0,445,447,5,27,0,0,446,445,1,0,0,0,446,447,1,0,0,0,447,
        449,1,0,0,0,448,450,3,76,38,0,449,448,1,0,0,0,449,450,1,0,0,0,450,
        456,1,0,0,0,451,452,5,126,0,0,452,453,3,68,34,0,453,454,5,144,0,
        0,454,456,1,0,0,0,455,443,1,0,0,0,455,451,1,0,0,0,456,471,1,0,0,
        0,457,458,10,3,0,0,458,459,3,72,36,0,459,460,3,68,34,4,460,470,1,
        0,0,0,461,463,10,4,0,0,462,464,3,70,35,0,463,462,1,0,0,0,463,464,
        1,0,0,0,464,465,1,0,0,0,465,466,5,45,0,0,466,467,3,68,34,0,467,468,
        3,74,37,0,468,470,1,0,0,0,469,457,1,0,0,0,469,461,1,0,0,0,470,473,
        1,0,0,0,471,469,1,0,0,0,471,472,1,0,0,0,472,69,1,0,0,0,473,471,1,
        0,0,0,474,476,7,2,0,0,475,474,1,0,0,0,475,476,1,0,0,0,476,477,1,
        0,0,0,477,484,5,42,0,0,478,480,5,42,0,0,479,481,7,2,0,0,480,479,
        1,0,0,0,480,481,1,0,0,0,481,484,1,0,0,0,482,484,7,2,0,0,483,475,
        1,0,0,0,483,478,1,0,0,0,483,482,1,0,0,0,484,518,1,0,0,0,485,487,
        7,3,0,0,486,485,1,0,0,0,486,487,1,0,0,0,487,488,1,0,0,0,488,490,
        7,4,0,0,489,491,5,63,0,0,490,489,1,0,0,0,490,491,1,0,0,0,491,500,
        1,0,0,0,492,494,7,4,0,0,493,495,5,63,0,0,494,493,1,0,0,0,494,495,
        1,0,0,0,495,497,1,0,0,0,496,498,7,3,0,0,497,496,1,0,0,0,497,498,
        1,0,0,0,498,500,1,0,0,0,499,486,1,0,0,0,499,492,1,0,0,0,500,518,
        1,0,0,0,501,503,7,5,0,0,502,501,1,0,0,0,502,503,1,0,0,0,503,504,
        1,0,0,0,504,506,5,33,0,0,505,507,5,63,0,0,506,505,1,0,0,0,506,507,
        1,0,0,0,507,516,1,0,0,0,508,510,5,33,0,0,509,511,5,63,0,0,510,509,
        1,0,0,0,510,511,1,0,0,0,511,513,1,0,0,0,512,514,7,5,0,0,513,512,
        1,0,0,0,513,514,1,0,0,0,514,516,1,0,0,0,515,502,1,0,0,0,515,508,
        1,0,0,0,516,518,1,0,0,0,517,483,1,0,0,0,517,499,1,0,0,0,517,515,
        1,0,0,0,518,71,1,0,0,0,519,520,5,16,0,0,520,523,5,45,0,0,521,523,
        5,112,0,0,522,519,1,0,0,0,522,521,1,0,0,0,523,73,1,0,0,0,524,525,
        5,60,0,0,525,534,3,104,52,0,526,527,5,92,0,0,527,528,5,126,0,0,528,
        529,3,104,52,0,529,530,5,144,0,0,530,534,1,0,0,0,531,532,5,92,0,
        0,532,534,3,104,52,0,533,524,1,0,0,0,533,526,1,0,0,0,533,531,1,0,
        0,0,534,75,1,0,0,0,535,536,5,75,0,0,536,539,3,82,41,0,537,538,5,
        59,0,0,538,540,3,82,41,0,539,537,1,0,0,0,539,540,1,0,0,0,540,77,
        1,0,0,0,541,546,3,80,40,0,542,543,5,112,0,0,543,545,3,80,40,0,544,
        542,1,0,0,0,545,548,1,0,0,0,546,544,1,0,0,0,546,547,1,0,0,0,547,
        79,1,0,0,0,548,546,1,0,0,0,549,551,3,106,53,0,550,552,7,6,0,0,551,
        550,1,0,0,0,551,552,1,0,0,0,552,555,1,0,0,0,553,554,5,58,0,0,554,
        556,7,7,0,0,555,553,1,0,0,0,555,556,1,0,0,0,556,559,1,0,0,0,557,
        558,5,15,0,0,558,560,5,106,0,0,559,557,1,0,0,0,559,560,1,0,0,0,560,
        81,1,0,0,0,561,568,3,154,77,0,562,565,3,138,69,0,563,564,5,146,0,
        0,564,566,3,138,69,0,565,563,1,0,0,0,565,566,1,0,0,0,566,568,1,0,
        0,0,567,561,1,0,0,0,567,562,1,0,0,0,568,83,1,0,0,0,569,574,3,86,
        43,0,570,571,5,112,0,0,571,573,3,86,43,0,572,570,1,0,0,0,573,576,
        1,0,0,0,574,572,1,0,0,0,574,575,1,0,0,0,575,85,1,0,0,0,576,574,1,
        0,0,0,577,578,3,150,75,0,578,579,5,118,0,0,579,580,3,140,70,0,580,
        87,1,0,0,0,581,583,3,90,45,0,582,581,1,0,0,0,582,583,1,0,0,0,583,
        585,1,0,0,0,584,586,3,92,46,0,585,584,1,0,0,0,585,586,1,0,0,0,586,
        588,1,0,0,0,587,589,3,94,47,0,588,587,1,0,0,0,588,589,1,0,0,0,589,
        89,1,0,0,0,590,591,5,65,0,0,591,592,5,11,0,0,592,593,3,104,52,0,
        593,91,1,0,0,0,594,595,5,62,0,0,595,596,5,11,0,0,596,597,3,78,39,
        0,597,93,1,0,0,0,598,599,7,8,0,0,599,600,3,96,48,0,600,95,1,0,0,
        0,601,608,3,98,49,0,602,603,5,9,0,0,603,604,3,98,49,0,604,605,5,
        2,0,0,605,606,3,98,49,0,606,608,1,0,0,0,607,601,1,0,0,0,607,602,
        1,0,0,0,608,97,1,0,0,0,609,610,5,18,0,0,610,622,5,73,0,0,611,612,
        5,90,0,0,612,622,5,66,0,0,613,614,5,90,0,0,614,622,5,30,0,0,615,
        616,3,138,69,0,616,617,5,66,0,0,617,622,1,0,0,0,618,619,3,138,69,
        0,619,620,5,30,0,0,620,622,1,0,0,0,621,609,1,0,0,0,621,611,1,0,0,
        0,621,613,1,0,0,0,621,615,1,0,0,0,621,618,1,0,0,0,622,99,1,0,0,0,
        623,624,3,106,53,0,624,625,5,0,0,1,625,101,1,0,0,0,626,674,3,150,
        75,0,627,628,3,150,75,0,628,629,5,126,0,0,629,630,3,150,75,0,630,
        637,3,102,51,0,631,632,5,112,0,0,632,633,3,150,75,0,633,634,3,102,
        51,0,634,636,1,0,0,0,635,631,1,0,0,0,636,639,1,0,0,0,637,635,1,0,
        0,0,637,638,1,0,0,0,638,640,1,0,0,0,639,637,1,0,0,0,640,641,5,144,
        0,0,641,674,1,0,0,0,642,643,3,150,75,0,643,644,5,126,0,0,644,649,
        3,152,76,0,645,646,5,112,0,0,646,648,3,152,76,0,647,645,1,0,0,0,
        648,651,1,0,0,0,649,647,1,0,0,0,649,650,1,0,0,0,650,652,1,0,0,0,
        651,649,1,0,0,0,652,653,5,144,0,0,653,674,1,0,0,0,654,655,3,150,
        75,0,655,656,5,126,0,0,656,661,3,102,51,0,657,658,5,112,0,0,658,
        660,3,102,51,0,659,657,1,0,0,0,660,663,1,0,0,0,661,659,1,0,0,0,661,
        662,1,0,0,0,662,664,1,0,0,0,663,661,1,0,0,0,664,665,5,144,0,0,665,
        674,1,0,0,0,666,667,3,150,75,0,667,669,5,126,0,0,668,670,3,104,52,
        0,669,668,1,0,0,0,669,670,1,0,0,0,670,671,1,0,0,0,671,672,5,144,
        0,0,672,674,1,0,0,0,673,626,1,0,0,0,673,627,1,0,0,0,673,642,1,0,
        0,0,673,654,1,0,0,0,673,666,1,0,0,0,674,103,1,0,0,0,675,680,3,106,
        53,0,676,677,5,112,0,0,677,679,3,106,53,0,678,676,1,0,0,0,679,682,
        1,0,0,0,680,678,1,0,0,0,680,681,1,0,0,0,681,105,1,0,0,0,682,680,
        1,0,0,0,683,684,6,53,-1,0,684,686,5,12,0,0,685,687,3,106,53,0,686,
        685,1,0,0,0,686,687,1,0,0,0,687,693,1,0,0,0,688,689,5,94,0,0,689,
        690,3,106,53,0,690,691,5,81,0,0,691,692,3,106,53,0,692,694,1,0,0,
        0,693,688,1,0,0,0,694,695,1,0,0,0,695,693,1,0,0,0,695,696,1,0,0,
        0,696,699,1,0,0,0,697,698,5,24,0,0,698,700,3,106,53,0,699,697,1,
        0,0,0,699,700,1,0,0,0,700,701,1,0,0,0,701,702,5,25,0,0,702,833,1,
        0,0,0,703,704,5,13,0,0,704,705,5,126,0,0,705,706,3,106,53,0,706,
        707,5,6,0,0,707,708,3,102,51,0,708,709,5,144,0,0,709,833,1,0,0,0,
        710,711,5,19,0,0,711,833,5,106,0,0,712,713,5,43,0,0,713,714,3,106,
        53,0,714,715,3,142,71,0,715,833,1,0,0,0,716,717,5,80,0,0,717,718,
        5,126,0,0,718,719,3,106,53,0,719,720,5,32,0,0,720,723,3,106,53,0,
        721,722,5,31,0,0,722,724,3,106,53,0,723,721,1,0,0,0,723,724,1,0,
        0,0,724,725,1,0,0,0,725,726,5,144,0,0,726,833,1,0,0,0,727,728,5,
        83,0,0,728,833,5,106,0,0,729,730,5,88,0,0,730,731,5,126,0,0,731,
        732,7,9,0,0,732,733,3,156,78,0,733,734,5,32,0,0,734,735,3,106,53,
        0,735,736,5,144,0,0,736,833,1,0,0,0,737,738,3,150,75,0,738,740,5,
        126,0,0,739,741,3,104,52,0,740,739,1,0,0,0,740,741,1,0,0,0,741,742,
        1,0,0,0,742,743,5,144,0,0,743,752,1,0,0,0,744,746,5,126,0,0,745,
        747,5,23,0,0,746,745,1,0,0,0,746,747,1,0,0,0,747,749,1,0,0,0,748,
        750,3,108,54,0,749,748,1,0,0,0,749,750,1,0,0,0,750,751,1,0,0,0,751,
        753,5,144,0,0,752,744,1,0,0,0,752,753,1,0,0,0,753,754,1,0,0,0,754,
        755,5,64,0,0,755,756,5,126,0,0,756,757,3,88,44,0,757,758,5,144,0,
        0,758,833,1,0,0,0,759,760,3,150,75,0,760,762,5,126,0,0,761,763,3,
        104,52,0,762,761,1,0,0,0,762,763,1,0,0,0,763,764,1,0,0,0,764,765,
        5,144,0,0,765,774,1,0,0,0,766,768,5,126,0,0,767,769,5,23,0,0,768,
        767,1,0,0,0,768,769,1,0,0,0,769,771,1,0,0,0,770,772,3,108,54,0,771,
        770,1,0,0,0,771,772,1,0,0,0,772,773,1,0,0,0,773,775,5,144,0,0,774,
        766,1,0,0,0,774,775,1,0,0,0,775,776,1,0,0,0,776,777,5,64,0,0,777,
        778,3,150,75,0,778,833,1,0,0,0,779,785,3,150,75,0,780,782,5,126,
        0,0,781,783,3,104,52,0,782,781,1,0,0,0,782,783,1,0,0,0,783,784,1,
        0,0,0,784,786,5,144,0,0,785,780,1,0,0,0,785,786,1,0,0,0,786,787,
        1,0,0,0,787,789,5,126,0,0,788,790,5,23,0,0,789,788,1,0,0,0,789,790,
        1,0,0,0,790,792,1,0,0,0,791,793,3,108,54,0,792,791,1,0,0,0,792,793,
        1,0,0,0,793,794,1,0,0,0,794,795,5,144,0,0,795,833,1,0,0,0,796,833,
        3,114,57,0,797,833,3,158,79,0,798,833,3,140,70,0,799,800,5,114,0,
        0,800,833,3,106,53,19,801,802,5,56,0,0,802,833,3,106,53,13,803,804,
        3,130,65,0,804,805,5,116,0,0,805,807,1,0,0,0,806,803,1,0,0,0,806,
        807,1,0,0,0,807,808,1,0,0,0,808,833,5,108,0,0,809,810,5,126,0,0,
        810,811,3,34,17,0,811,812,5,144,0,0,812,833,1,0,0,0,813,814,5,126,
        0,0,814,815,3,106,53,0,815,816,5,144,0,0,816,833,1,0,0,0,817,818,
        5,126,0,0,818,819,3,104,52,0,819,820,5,144,0,0,820,833,1,0,0,0,821,
        823,5,125,0,0,822,824,3,104,52,0,823,822,1,0,0,0,823,824,1,0,0,0,
        824,825,1,0,0,0,825,833,5,143,0,0,826,828,5,124,0,0,827,829,3,30,
        15,0,828,827,1,0,0,0,828,829,1,0,0,0,829,830,1,0,0,0,830,833,5,142,
        0,0,831,833,3,122,61,0,832,683,1,0,0,0,832,703,1,0,0,0,832,710,1,
        0,0,0,832,712,1,0,0,0,832,716,1,0,0,0,832,727,1,0,0,0,832,729,1,
        0,0,0,832,737,1,0,0,0,832,759,1,0,0,0,832,779,1,0,0,0,832,796,1,
        0,0,0,832,797,1,0,0,0,832,798,1,0,0,0,832,799,1,0,0,0,832,801,1,
        0,0,0,832,806,1,0,0,0,832,809,1,0,0,0,832,813,1,0,0,0,832,817,1,
        0,0,0,832,821,1,0,0,0,832,826,1,0,0,0,832,831,1,0,0,0,833,927,1,
        0,0,0,834,838,10,18,0,0,835,839,5,108,0,0,836,839,5,146,0,0,837,
        839,5,133,0,0,838,835,1,0,0,0,838,836,1,0,0,0,838,837,1,0,0,0,839,
        840,1,0,0,0,840,926,3,106,53,19,841,845,10,17,0,0,842,846,5,134,
        0,0,843,846,5,114,0,0,844,846,5,113,0,0,845,842,1,0,0,0,845,843,
        1,0,0,0,845,844,1,0,0,0,846,847,1,0,0,0,847,926,3,106,53,18,848,
        873,10,16,0,0,849,874,5,117,0,0,850,874,5,118,0,0,851,874,5,129,
        0,0,852,874,5,127,0,0,853,874,5,128,0,0,854,874,5,119,0,0,855,874,
        5,120,0,0,856,858,5,56,0,0,857,856,1,0,0,0,857,858,1,0,0,0,858,859,
        1,0,0,0,859,861,5,40,0,0,860,862,5,14,0,0,861,860,1,0,0,0,861,862,
        1,0,0,0,862,874,1,0,0,0,863,865,5,56,0,0,864,863,1,0,0,0,864,865,
        1,0,0,0,865,866,1,0,0,0,866,874,7,10,0,0,867,874,5,140,0,0,868,874,
        5,141,0,0,869,874,5,131,0,0,870,874,5,122,0,0,871,874,5,123,0,0,
        872,874,5,130,0,0,873,849,1,0,0,0,873,850,1,0,0,0,873,851,1,0,0,
        0,873,852,1,0,0,0,873,853,1,0,0,0,873,854,1,0,0,0,873,855,1,0,0,
        0,873,857,1,0,0,0,873,864,1,0,0,0,873,867,1,0,0,0,873,868,1,0,0,
        0,873,869,1,0,0,0,873,870,1,0,0,0,873,871,1,0,0,0,873,872,1,0,0,
        0,874,875,1,0,0,0,875,926,3,106,53,17,876,877,10,14,0,0,877,878,
        5,132,0,0,878,926,3,106,53,15,879,880,10,12,0,0,880,881,5,2,0,0,
        881,926,3,106,53,13,882,883,10,11,0,0,883,884,5,61,0,0,884,926,3,
        106,53,12,885,887,10,10,0,0,886,888,5,56,0,0,887,886,1,0,0,0,887,
        888,1,0,0,0,888,889,1,0,0,0,889,890,5,9,0,0,890,891,3,106,53,0,891,
        892,5,2,0,0,892,893,3,106,53,11,893,926,1,0,0,0,894,895,10,9,0,0,
        895,896,5,135,0,0,896,897,3,106,53,0,897,898,5,111,0,0,898,899,3,
        106,53,9,899,926,1,0,0,0,900,901,10,22,0,0,901,902,5,125,0,0,902,
        903,3,106,53,0,903,904,5,143,0,0,904,926,1,0,0,0,905,906,10,21,0,
        0,906,907,5,116,0,0,907,926,5,104,0,0,908,909,10,20,0,0,909,910,
        5,116,0,0,910,926,3,150,75,0,911,912,10,15,0,0,912,914,5,44,0,0,
        913,915,5,56,0,0,914,913,1,0,0,0,914,915,1,0,0,0,915,916,1,0,0,0,
        916,926,5,57,0,0,917,923,10,8,0,0,918,924,3,148,74,0,919,920,5,6,
        0,0,920,924,3,150,75,0,921,922,5,6,0,0,922,924,5,106,0,0,923,918,
        1,0,0,0,923,919,1,0,0,0,923,921,1,0,0,0,924,926,1,0,0,0,925,834,
        1,0,0,0,925,841,1,0,0,0,925,848,1,0,0,0,925,876,1,0,0,0,925,879,
        1,0,0,0,925,882,1,0,0,0,925,885,1,0,0,0,925,894,1,0,0,0,925,900,
        1,0,0,0,925,905,1,0,0,0,925,908,1,0,0,0,925,911,1,0,0,0,925,917,
        1,0,0,0,926,929,1,0,0,0,927,925,1,0,0,0,927,928,1,0,0,0,928,107,
        1,0,0,0,929,927,1,0,0,0,930,935,3,110,55,0,931,932,5,112,0,0,932,
        934,3,110,55,0,933,931,1,0,0,0,934,937,1,0,0,0,935,933,1,0,0,0,935,
        936,1,0,0,0,936,109,1,0,0,0,937,935,1,0,0,0,938,941,3,112,56,0,939,
        941,3,106,53,0,940,938,1,0,0,0,940,939,1,0,0,0,941,111,1,0,0,0,942,
        943,5,126,0,0,943,948,3,150,75,0,944,945,5,112,0,0,945,947,3,150,
        75,0,946,944,1,0,0,0,947,950,1,0,0,0,948,946,1,0,0,0,948,949,1,0,
        0,0,949,951,1,0,0,0,950,948,1,0,0,0,951,952,5,144,0,0,952,962,1,
        0,0,0,953,958,3,150,75,0,954,955,5,112,0,0,955,957,3,150,75,0,956,
        954,1,0,0,0,957,960,1,0,0,0,958,956,1,0,0,0,958,959,1,0,0,0,959,
        962,1,0,0,0,960,958,1,0,0,0,961,942,1,0,0,0,961,953,1,0,0,0,962,
        963,1,0,0,0,963,964,5,107,0,0,964,965,3,106,53,0,965,113,1,0,0,0,
        966,967,5,128,0,0,967,971,3,150,75,0,968,970,3,116,58,0,969,968,
        1,0,0,0,970,973,1,0,0,0,971,969,1,0,0,0,971,972,1,0,0,0,972,974,
        1,0,0,0,973,971,1,0,0,0,974,975,5,146,0,0,975,976,5,120,0,0,976,
        995,1,0,0,0,977,978,5,128,0,0,978,982,3,150,75,0,979,981,3,116,58,
        0,980,979,1,0,0,0,981,984,1,0,0,0,982,980,1,0,0,0,982,983,1,0,0,
        0,983,985,1,0,0,0,984,982,1,0,0,0,985,987,5,120,0,0,986,988,3,114,
        57,0,987,986,1,0,0,0,987,988,1,0,0,0,988,989,1,0,0,0,989,990,5,128,
        0,0,990,991,5,146,0,0,991,992,3,150,75,0,992,993,5,120,0,0,993,995,
        1,0,0,0,994,966,1,0,0,0,994,977,1,0,0,0,995,115,1,0,0,0,996,997,
        3,150,75,0,997,998,5,118,0,0,998,999,3,156,78,0,999,1008,1,0,0,0,
        1000,1001,3,150,75,0,1001,1002,5,118,0,0,1002,1003,5,124,0,0,1003,
        1004,3,106,53,0,1004,1005,5,142,0,0,1005,1008,1,0,0,0,1006,1008,
        3,150,75,0,1007,996,1,0,0,0,1007,1000,1,0,0,0,1007,1006,1,0,0,0,
        1008,117,1,0,0,0,1009,1014,3,120,60,0,1010,1011,5,112,0,0,1011,1013,
        3,120,60,0,1012,1010,1,0,0,0,1013,1016,1,0,0,0,1014,1012,1,0,0,0,
        1014,1015,1,0,0,0,1015,119,1,0,0,0,1016,1014,1,0,0,0,1017,1018,3,
        150,75,0,1018,1019,5,6,0,0,1019,1020,5,126,0,0,1020,1021,3,34,17,
        0,1021,1022,5,144,0,0,1022,1028,1,0,0,0,1023,1024,3,106,53,0,1024,
        1025,5,6,0,0,1025,1026,3,150,75,0,1026,1028,1,0,0,0,1027,1017,1,
        0,0,0,1027,1023,1,0,0,0,1028,121,1,0,0,0,1029,1037,3,154,77,0,1030,
        1031,3,130,65,0,1031,1032,5,116,0,0,1032,1034,1,0,0,0,1033,1030,
        1,0,0,0,1033,1034,1,0,0,0,1034,1035,1,0,0,0,1035,1037,3,124,62,0,
        1036,1029,1,0,0,0,1036,1033,1,0,0,0,1037,123,1,0,0,0,1038,1043,3,
        150,75,0,1039,1040,5,116,0,0,1040,1042,3,150,75,0,1041,1039,1,0,
        0,0,1042,1045,1,0,0,0,1043,1041,1,0,0,0,1043,1044,1,0,0,0,1044,125,
        1,0,0,0,1045,1043,1,0,0,0,1046,1047,6,63,-1,0,1047,1056,3,130,65,
        0,1048,1056,3,128,64,0,1049,1050,5,126,0,0,1050,1051,3,34,17,0,1051,
        1052,5,144,0,0,1052,1056,1,0,0,0,1053,1056,3,114,57,0,1054,1056,
        3,154,77,0,1055,1046,1,0,0,0,1055,1048,1,0,0,0,1055,1049,1,0,0,0,
        1055,1053,1,0,0,0,1055,1054,1,0,0,0,1056,1065,1,0,0,0,1057,1061,
        10,3,0,0,1058,1062,3,148,74,0,1059,1060,5,6,0,0,1060,1062,3,150,
        75,0,1061,1058,1,0,0,0,1061,1059,1,0,0,0,1062,1064,1,0,0,0,1063,
        1057,1,0,0,0,1064,1067,1,0,0,0,1065,1063,1,0,0,0,1065,1066,1,0,0,
        0,1066,127,1,0,0,0,1067,1065,1,0,0,0,1068,1069,3,150,75,0,1069,1071,
        5,126,0,0,1070,1072,3,132,66,0,1071,1070,1,0,0,0,1071,1072,1,0,0,
        0,1072,1073,1,0,0,0,1073,1074,5,144,0,0,1074,129,1,0,0,0,1075,1076,
        3,134,67,0,1076,1077,5,116,0,0,1077,1079,1,0,0,0,1078,1075,1,0,0,
        0,1078,1079,1,0,0,0,1079,1080,1,0,0,0,1080,1081,3,150,75,0,1081,
        131,1,0,0,0,1082,1087,3,106,53,0,1083,1084,5,112,0,0,1084,1086,3,
        106,53,0,1085,1083,1,0,0,0,1086,1089,1,0,0,0,1087,1085,1,0,0,0,1087,
        1088,1,0,0,0,1088,133,1,0,0,0,1089,1087,1,0,0,0,1090,1091,3,150,
        75,0,1091,135,1,0,0,0,1092,1101,5,102,0,0,1093,1094,5,116,0,0,1094,
        1101,7,11,0,0,1095,1096,5,104,0,0,1096,1098,5,116,0,0,1097,1099,
        7,11,0,0,1098,1097,1,0,0,0,1098,1099,1,0,0,0,1099,1101,1,0,0,0,1100,
        1092,1,0,0,0,1100,1093,1,0,0,0,1100,1095,1,0,0,0,1101,137,1,0,0,
        0,1102,1104,7,12,0,0,1103,1102,1,0,0,0,1103,1104,1,0,0,0,1104,1111,
        1,0,0,0,1105,1112,3,136,68,0,1106,1112,5,103,0,0,1107,1112,5,104,
        0,0,1108,1112,5,105,0,0,1109,1112,5,41,0,0,1110,1112,5,55,0,0,1111,
        1105,1,0,0,0,1111,1106,1,0,0,0,1111,1107,1,0,0,0,1111,1108,1,0,0,
        0,1111,1109,1,0,0,0,1111,1110,1,0,0,0,1112,139,1,0,0,0,1113,1117,
        3,138,69,0,1114,1117,5,106,0,0,1115,1117,5,57,0,0,1116,1113,1,0,
        0,0,1116,1114,1,0,0,0,1116,1115,1,0,0,0,1117,141,1,0,0,0,1118,1119,
        7,13,0,0,1119,143,1,0,0,0,1120,1121,7,14,0,0,1121,145,1,0,0,0,1122,
        1123,7,15,0,0,1123,147,1,0,0,0,1124,1127,5,101,0,0,1125,1127,3,146,
        73,0,1126,1124,1,0,0,0,1126,1125,1,0,0,0,1127,149,1,0,0,0,1128,1132,
        5,101,0,0,1129,1132,3,142,71,0,1130,1132,3,144,72,0,1131,1128,1,
        0,0,0,1131,1129,1,0,0,0,1131,1130,1,0,0,0,1132,151,1,0,0,0,1133,
        1134,3,156,78,0,1134,1135,5,118,0,0,1135,1136,3,138,69,0,1136,153,
        1,0,0,0,1137,1138,5,124,0,0,1138,1139,3,150,75,0,1139,1140,5,142,
        0,0,1140,155,1,0,0,0,1141,1144,5,106,0,0,1142,1144,3,158,79,0,1143,
        1141,1,0,0,0,1143,1142,1,0,0,0,1144,157,1,0,0,0,1145,1149,5,137,
        0,0,1146,1148,3,160,80,0,1147,1146,1,0,0,0,1148,1151,1,0,0,0,1149,
        1147,1,0,0,0,1149,1150,1,0,0,0,1150,1152,1,0,0,0,1151,1149,1,0,0,
        0,1152,1153,5,139,0,0,1153,159,1,0,0,0,1154,1155,5,152,0,0,1155,
        1156,3,106,53,0,1156,1157,5,142,0,0,1157,1160,1,0,0,0,1158,1160,
        5,151,0,0,1159,1154,1,0,0,0,1159,1158,1,0,0,0,1160,161,1,0,0,0,1161,
        1165,5,138,0,0,1162,1164,3,164,82,0,1163,1162,1,0,0,0,1164,1167,
        1,0,0,0,1165,1163,1,0,0,0,1165,1166,1,0,0,0,1166,1168,1,0,0,0,1167,
        1165,1,0,0,0,1168,1169,5,0,0,1,1169,163,1,0,0,0,1170,1171,5,154,
        0,0,1171,1172,3,106,53,0,1172,1173,5,142,0,0,1173,1176,1,0,0,0,1174,
        1176,5,153,0,0,1175,1170,1,0,0,0,1175,1174,1,0,0,0,1176,165,1,0,
        0,0,141,169,176,185,200,212,224,240,251,265,271,281,290,293,297,
        300,304,307,310,313,316,320,324,327,330,333,337,340,349,355,376,
        393,410,416,422,433,435,446,449,455,463,469,471,475,480,483,486,
        490,494,497,499,502,506,510,513,515,517,522,533,539,546,551,555,
        559,565,567,574,582,585,588,607,621,637,649,661,669,673,680,686,
        695,699,723,740,746,749,752,762,768,771,774,782,785,789,792,806,
        823,828,832,838,845,857,861,864,873,887,914,923,925,927,935,940,
        948,958,961,971,982,987,994,1007,1014,1027,1033,1036,1043,1055,1061,
        1065,1071,1078,1087,1098,1100,1103,1111,1116,1126,1131,1143,1149,
        1159,1165,1175
    ]

class HogQLParser ( Parser ):

    grammarFileName = "HogQLParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'->'", "'*'", 
                     "'`'", "'\\'", "':'", "','", "'||'", "'-'", "'$'", 
                     "'.'", "'=='", "'='", "'>='", "'>'", "'#'", "'~*'", 
                     "'=~*'", "'{'", "'['", "'('", "'<='", "'<'", "<INVALID>", 
                     "'!~*'", "'!~'", "'??'", "'%'", "'+'", "'?'", "'\"'", 
                     "'f''", "'F''", "'''", "'~'", "'=~'", "'}'", "']'", 
                     "')'", "';'", "'/'", "'_'" ]

    symbolicNames = [ "<INVALID>", "ALL", "AND", "ANTI", "ANY", "ARRAY", 
                      "AS", "ASCENDING", "ASOF", "BETWEEN", "BOTH", "BY", 
                      "CASE", "CAST", "COHORT", "COLLATE", "CROSS", "CUBE", 
                      "CURRENT", "DATE", "DAY", "DESC", "DESCENDING", "DISTINCT", 
                      "ELSE", "END", "EXTRACT", "FINAL", "FIRST", "FN", 
                      "FOLLOWING", "FOR", "FROM", "FULL", "GROUP", "HAVING", 
                      "HOUR", "ID", "IF", "ILIKE", "IN", "INF", "INNER", 
                      "INTERVAL", "IS", "JOIN", "KEY", "LAST", "LEADING", 
                      "LEFT", "LET", "LIKE", "LIMIT", "MINUTE", "MONTH", 
                      "NAN_SQL", "NOT", "NULL_SQL", "NULLS", "OFFSET", "ON", 
                      "OR", "ORDER", "OUTER", "OVER", "PARTITION", "PRECEDING", 
                      "PREWHERE", "QUARTER", "RANGE", "RETURN", "RIGHT", 
                      "ROLLUP", "ROW", "ROWS", "SAMPLE", "SECOND", "SELECT", 
                      "SEMI", "SETTINGS", "SUBSTRING", "THEN", "TIES", "TIMESTAMP", 
                      "TO", "TOP", "TOTALS", "TRAILING", "TRIM", "TRUNCATE", 
                      "UNBOUNDED", "UNION", "USING", "WEEK", "WHEN", "WHERE", 
                      "WHILE", "WINDOW", "WITH", "YEAR", "ESCAPE_CHAR_COMMON", 
                      "IDENTIFIER", "FLOATING_LITERAL", "OCTAL_LITERAL", 
                      "DECIMAL_LITERAL", "HEXADECIMAL_LITERAL", "STRING_LITERAL", 
                      "ARROW", "ASTERISK", "BACKQUOTE", "BACKSLASH", "COLON", 
                      "COMMA", "CONCAT", "DASH", "DOLLAR", "DOT", "EQ_DOUBLE", 
                      "EQ_SINGLE", "GT_EQ", "GT", "HASH", "IREGEX_SINGLE", 
                      "IREGEX_DOUBLE", "LBRACE", "LBRACKET", "LPAREN", "LT_EQ", 
                      "LT", "NOT_EQ", "NOT_IREGEX", "NOT_REGEX", "NULLISH", 
                      "PERCENT", "PLUS", "QUERY", "QUOTE_DOUBLE", "QUOTE_SINGLE_TEMPLATE", 
                      "QUOTE_SINGLE_TEMPLATE_FULL", "QUOTE_SINGLE", "REGEX_SINGLE", 
                      "REGEX_DOUBLE", "RBRACE", "RBRACKET", "RPAREN", "SEMICOLON", 
                      "SLASH", "UNDERSCORE", "MULTI_LINE_COMMENT", "SINGLE_LINE_COMMENT", 
                      "WHITESPACE", "STRING_TEXT", "STRING_ESCAPE_TRIGGER", 
                      "FULL_STRING_TEXT", "FULL_STRING_ESCAPE_TRIGGER" ]

    RULE_program = 0
    RULE_declaration = 1
    RULE_expression = 2
    RULE_varDecl = 3
    RULE_varAssignment = 4
    RULE_identifierList = 5
    RULE_statement = 6
    RULE_exprStmt = 7
    RULE_ifStmt = 8
    RULE_whileStmt = 9
    RULE_returnStmt = 10
    RULE_funcStmt = 11
    RULE_emptyStmt = 12
    RULE_block = 13
    RULE_kvPair = 14
    RULE_kvPairList = 15
    RULE_select = 16
    RULE_selectUnionStmt = 17
    RULE_selectStmtWithParens = 18
    RULE_selectStmt = 19
    RULE_withClause = 20
    RULE_topClause = 21
    RULE_fromClause = 22
    RULE_arrayJoinClause = 23
    RULE_windowClause = 24
    RULE_prewhereClause = 25
    RULE_whereClause = 26
    RULE_groupByClause = 27
    RULE_havingClause = 28
    RULE_orderByClause = 29
    RULE_projectionOrderByClause = 30
    RULE_limitAndOffsetClause = 31
    RULE_offsetOnlyClause = 32
    RULE_settingsClause = 33
    RULE_joinExpr = 34
    RULE_joinOp = 35
    RULE_joinOpCross = 36
    RULE_joinConstraintClause = 37
    RULE_sampleClause = 38
    RULE_orderExprList = 39
    RULE_orderExpr = 40
    RULE_ratioExpr = 41
    RULE_settingExprList = 42
    RULE_settingExpr = 43
    RULE_windowExpr = 44
    RULE_winPartitionByClause = 45
    RULE_winOrderByClause = 46
    RULE_winFrameClause = 47
    RULE_winFrameExtend = 48
    RULE_winFrameBound = 49
    RULE_expr = 50
    RULE_columnTypeExpr = 51
    RULE_columnExprList = 52
    RULE_columnExpr = 53
    RULE_columnArgList = 54
    RULE_columnArgExpr = 55
    RULE_columnLambdaExpr = 56
    RULE_hogqlxTagElement = 57
    RULE_hogqlxTagAttribute = 58
    RULE_withExprList = 59
    RULE_withExpr = 60
    RULE_columnIdentifier = 61
    RULE_nestedIdentifier = 62
    RULE_tableExpr = 63
    RULE_tableFunctionExpr = 64
    RULE_tableIdentifier = 65
    RULE_tableArgList = 66
    RULE_databaseIdentifier = 67
    RULE_floatingLiteral = 68
    RULE_numberLiteral = 69
    RULE_literal = 70
    RULE_interval = 71
    RULE_keyword = 72
    RULE_keywordForAlias = 73
    RULE_alias = 74
    RULE_identifier = 75
    RULE_enumValue = 76
    RULE_placeholder = 77
    RULE_string = 78
    RULE_templateString = 79
    RULE_stringContents = 80
    RULE_fullTemplateString = 81
    RULE_stringContentsFull = 82

    ruleNames =  [ "program", "declaration", "expression", "varDecl", "varAssignment", 
                   "identifierList", "statement", "exprStmt", "ifStmt", 
                   "whileStmt", "returnStmt", "funcStmt", "emptyStmt", "block", 
                   "kvPair", "kvPairList", "select", "selectUnionStmt", 
                   "selectStmtWithParens", "selectStmt", "withClause", "topClause", 
                   "fromClause", "arrayJoinClause", "windowClause", "prewhereClause", 
                   "whereClause", "groupByClause", "havingClause", "orderByClause", 
                   "projectionOrderByClause", "limitAndOffsetClause", "offsetOnlyClause", 
                   "settingsClause", "joinExpr", "joinOp", "joinOpCross", 
                   "joinConstraintClause", "sampleClause", "orderExprList", 
                   "orderExpr", "ratioExpr", "settingExprList", "settingExpr", 
                   "windowExpr", "winPartitionByClause", "winOrderByClause", 
                   "winFrameClause", "winFrameExtend", "winFrameBound", 
                   "expr", "columnTypeExpr", "columnExprList", "columnExpr", 
                   "columnArgList", "columnArgExpr", "columnLambdaExpr", 
                   "hogqlxTagElement", "hogqlxTagAttribute", "withExprList", 
                   "withExpr", "columnIdentifier", "nestedIdentifier", "tableExpr", 
                   "tableFunctionExpr", "tableIdentifier", "tableArgList", 
                   "databaseIdentifier", "floatingLiteral", "numberLiteral", 
                   "literal", "interval", "keyword", "keywordForAlias", 
                   "alias", "identifier", "enumValue", "placeholder", "string", 
                   "templateString", "stringContents", "fullTemplateString", 
                   "stringContentsFull" ]

    EOF = Token.EOF
    ALL=1
    AND=2
    ANTI=3
    ANY=4
    ARRAY=5
    AS=6
    ASCENDING=7
    ASOF=8
    BETWEEN=9
    BOTH=10
    BY=11
    CASE=12
    CAST=13
    COHORT=14
    COLLATE=15
    CROSS=16
    CUBE=17
    CURRENT=18
    DATE=19
    DAY=20
    DESC=21
    DESCENDING=22
    DISTINCT=23
    ELSE=24
    END=25
    EXTRACT=26
    FINAL=27
    FIRST=28
    FN=29
    FOLLOWING=30
    FOR=31
    FROM=32
    FULL=33
    GROUP=34
    HAVING=35
    HOUR=36
    ID=37
    IF=38
    ILIKE=39
    IN=40
    INF=41
    INNER=42
    INTERVAL=43
    IS=44
    JOIN=45
    KEY=46
    LAST=47
    LEADING=48
    LEFT=49
    LET=50
    LIKE=51
    LIMIT=52
    MINUTE=53
    MONTH=54
    NAN_SQL=55
    NOT=56
    NULL_SQL=57
    NULLS=58
    OFFSET=59
    ON=60
    OR=61
    ORDER=62
    OUTER=63
    OVER=64
    PARTITION=65
    PRECEDING=66
    PREWHERE=67
    QUARTER=68
    RANGE=69
    RETURN=70
    RIGHT=71
    ROLLUP=72
    ROW=73
    ROWS=74
    SAMPLE=75
    SECOND=76
    SELECT=77
    SEMI=78
    SETTINGS=79
    SUBSTRING=80
    THEN=81
    TIES=82
    TIMESTAMP=83
    TO=84
    TOP=85
    TOTALS=86
    TRAILING=87
    TRIM=88
    TRUNCATE=89
    UNBOUNDED=90
    UNION=91
    USING=92
    WEEK=93
    WHEN=94
    WHERE=95
    WHILE=96
    WINDOW=97
    WITH=98
    YEAR=99
    ESCAPE_CHAR_COMMON=100
    IDENTIFIER=101
    FLOATING_LITERAL=102
    OCTAL_LITERAL=103
    DECIMAL_LITERAL=104
    HEXADECIMAL_LITERAL=105
    STRING_LITERAL=106
    ARROW=107
    ASTERISK=108
    BACKQUOTE=109
    BACKSLASH=110
    COLON=111
    COMMA=112
    CONCAT=113
    DASH=114
    DOLLAR=115
    DOT=116
    EQ_DOUBLE=117
    EQ_SINGLE=118
    GT_EQ=119
    GT=120
    HASH=121
    IREGEX_SINGLE=122
    IREGEX_DOUBLE=123
    LBRACE=124
    LBRACKET=125
    LPAREN=126
    LT_EQ=127
    LT=128
    NOT_EQ=129
    NOT_IREGEX=130
    NOT_REGEX=131
    NULLISH=132
    PERCENT=133
    PLUS=134
    QUERY=135
    QUOTE_DOUBLE=136
    QUOTE_SINGLE_TEMPLATE=137
    QUOTE_SINGLE_TEMPLATE_FULL=138
    QUOTE_SINGLE=139
    REGEX_SINGLE=140
    REGEX_DOUBLE=141
    RBRACE=142
    RBRACKET=143
    RPAREN=144
    SEMICOLON=145
    SLASH=146
    UNDERSCORE=147
    MULTI_LINE_COMMENT=148
    SINGLE_LINE_COMMENT=149
    WHITESPACE=150
    STRING_TEXT=151
    STRING_ESCAPE_TRIGGER=152
    FULL_STRING_TEXT=153
    FULL_STRING_ESCAPE_TRIGGER=154

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class ProgramContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(HogQLParser.EOF, 0)

        def declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.DeclarationContext)
            else:
                return self.getTypedRuleContext(HogQLParser.DeclarationContext,i)


        def getRuleIndex(self):
            return HogQLParser.RULE_program

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProgram" ):
                return visitor.visitProgram(self)
            else:
                return visitor.visitChildren(self)




    def program(self):

        localctx = HogQLParser.ProgramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_program)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 169
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -2) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 8076106351341731839) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 131649) != 0):
                self.state = 166
                self.declaration()
                self.state = 171
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 172
            self.match(HogQLParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def varDecl(self):
            return self.getTypedRuleContext(HogQLParser.VarDeclContext,0)


        def statement(self):
            return self.getTypedRuleContext(HogQLParser.StatementContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_declaration

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclaration" ):
                return visitor.visitDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def declaration(self):

        localctx = HogQLParser.DeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_declaration)
        try:
            self.state = 176
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [50]:
                self.enterOuterAlt(localctx, 1)
                self.state = 174
                self.varDecl()
                pass
            elif token in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 108, 114, 116, 124, 125, 126, 128, 134, 137, 145]:
                self.enterOuterAlt(localctx, 2)
                self.state = 175
                self.statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_expression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression" ):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)




    def expression(self):

        localctx = HogQLParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 178
            self.columnExpr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LET(self):
            return self.getToken(HogQLParser.LET, 0)

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def SEMICOLON(self):
            return self.getToken(HogQLParser.SEMICOLON, 0)

        def COLON(self):
            return self.getToken(HogQLParser.COLON, 0)

        def EQ_SINGLE(self):
            return self.getToken(HogQLParser.EQ_SINGLE, 0)

        def expression(self):
            return self.getTypedRuleContext(HogQLParser.ExpressionContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_varDecl

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarDecl" ):
                return visitor.visitVarDecl(self)
            else:
                return visitor.visitChildren(self)




    def varDecl(self):

        localctx = HogQLParser.VarDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_varDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 180
            self.match(HogQLParser.LET)
            self.state = 181
            self.identifier()
            self.state = 185
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==111:
                self.state = 182
                self.match(HogQLParser.COLON)
                self.state = 183
                self.match(HogQLParser.EQ_SINGLE)
                self.state = 184
                self.expression()


            self.state = 187
            self.match(HogQLParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarAssignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ExpressionContext,i)


        def COLON(self):
            return self.getToken(HogQLParser.COLON, 0)

        def EQ_SINGLE(self):
            return self.getToken(HogQLParser.EQ_SINGLE, 0)

        def SEMICOLON(self):
            return self.getToken(HogQLParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_varAssignment

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarAssignment" ):
                return visitor.visitVarAssignment(self)
            else:
                return visitor.visitChildren(self)




    def varAssignment(self):

        localctx = HogQLParser.VarAssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_varAssignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 189
            self.expression()
            self.state = 190
            self.match(HogQLParser.COLON)
            self.state = 191
            self.match(HogQLParser.EQ_SINGLE)
            self.state = 192
            self.expression()
            self.state = 193
            self.match(HogQLParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(HogQLParser.IdentifierContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_identifierList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifierList" ):
                return visitor.visitIdentifierList(self)
            else:
                return visitor.visitChildren(self)




    def identifierList(self):

        localctx = HogQLParser.IdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_identifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 195
            self.identifier()
            self.state = 200
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==112:
                self.state = 196
                self.match(HogQLParser.COMMA)
                self.state = 197
                self.identifier()
                self.state = 202
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def returnStmt(self):
            return self.getTypedRuleContext(HogQLParser.ReturnStmtContext,0)


        def emptyStmt(self):
            return self.getTypedRuleContext(HogQLParser.EmptyStmtContext,0)


        def exprStmt(self):
            return self.getTypedRuleContext(HogQLParser.ExprStmtContext,0)


        def ifStmt(self):
            return self.getTypedRuleContext(HogQLParser.IfStmtContext,0)


        def whileStmt(self):
            return self.getTypedRuleContext(HogQLParser.WhileStmtContext,0)


        def funcStmt(self):
            return self.getTypedRuleContext(HogQLParser.FuncStmtContext,0)


        def varAssignment(self):
            return self.getTypedRuleContext(HogQLParser.VarAssignmentContext,0)


        def block(self):
            return self.getTypedRuleContext(HogQLParser.BlockContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_statement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement" ):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)




    def statement(self):

        localctx = HogQLParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_statement)
        try:
            self.state = 212
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 203
                self.returnStmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 204
                self.emptyStmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 205
                self.exprStmt()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 206
                self.ifStmt()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 207
                self.whileStmt()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 208
                self.funcStmt()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 209
                self.varAssignment()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 210
                self.returnStmt()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 211
                self.block()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(HogQLParser.ExpressionContext,0)


        def SEMICOLON(self):
            return self.getToken(HogQLParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_exprStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExprStmt" ):
                return visitor.visitExprStmt(self)
            else:
                return visitor.visitChildren(self)




    def exprStmt(self):

        localctx = HogQLParser.ExprStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_exprStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 214
            self.expression()
            self.state = 215
            self.match(HogQLParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(HogQLParser.IF, 0)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(HogQLParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.StatementContext)
            else:
                return self.getTypedRuleContext(HogQLParser.StatementContext,i)


        def ELSE(self):
            return self.getToken(HogQLParser.ELSE, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_ifStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfStmt" ):
                return visitor.visitIfStmt(self)
            else:
                return visitor.visitChildren(self)




    def ifStmt(self):

        localctx = HogQLParser.IfStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_ifStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 217
            self.match(HogQLParser.IF)
            self.state = 218
            self.match(HogQLParser.LPAREN)
            self.state = 219
            self.expression()
            self.state = 220
            self.match(HogQLParser.RPAREN)
            self.state = 221
            self.statement()
            self.state = 224
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.state = 222
                self.match(HogQLParser.ELSE)
                self.state = 223
                self.statement()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(HogQLParser.WHILE, 0)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(HogQLParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def statement(self):
            return self.getTypedRuleContext(HogQLParser.StatementContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_whileStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhileStmt" ):
                return visitor.visitWhileStmt(self)
            else:
                return visitor.visitChildren(self)




    def whileStmt(self):

        localctx = HogQLParser.WhileStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_whileStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 226
            self.match(HogQLParser.WHILE)
            self.state = 227
            self.match(HogQLParser.LPAREN)
            self.state = 228
            self.expression()
            self.state = 229
            self.match(HogQLParser.RPAREN)
            self.state = 230
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(HogQLParser.RETURN, 0)

        def expression(self):
            return self.getTypedRuleContext(HogQLParser.ExpressionContext,0)


        def SEMICOLON(self):
            return self.getToken(HogQLParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_returnStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturnStmt" ):
                return visitor.visitReturnStmt(self)
            else:
                return visitor.visitChildren(self)




    def returnStmt(self):

        localctx = HogQLParser.ReturnStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_returnStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 232
            self.match(HogQLParser.RETURN)
            self.state = 233
            self.expression()
            self.state = 234
            self.match(HogQLParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FuncStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FN(self):
            return self.getToken(HogQLParser.FN, 0)

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def block(self):
            return self.getTypedRuleContext(HogQLParser.BlockContext,0)


        def identifierList(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierListContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_funcStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFuncStmt" ):
                return visitor.visitFuncStmt(self)
            else:
                return visitor.visitChildren(self)




    def funcStmt(self):

        localctx = HogQLParser.FuncStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_funcStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 236
            self.match(HogQLParser.FN)
            self.state = 237
            self.identifier()
            self.state = 238
            self.match(HogQLParser.LPAREN)
            self.state = 240
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -181272084561788930) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 201863462911) != 0):
                self.state = 239
                self.identifierList()


            self.state = 242
            self.match(HogQLParser.RPAREN)
            self.state = 243
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EmptyStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMICOLON(self):
            return self.getToken(HogQLParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_emptyStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEmptyStmt" ):
                return visitor.visitEmptyStmt(self)
            else:
                return visitor.visitChildren(self)




    def emptyStmt(self):

        localctx = HogQLParser.EmptyStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_emptyStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 245
            self.match(HogQLParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(HogQLParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(HogQLParser.RBRACE, 0)

        def declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.DeclarationContext)
            else:
                return self.getTypedRuleContext(HogQLParser.DeclarationContext,i)


        def getRuleIndex(self):
            return HogQLParser.RULE_block

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlock" ):
                return visitor.visitBlock(self)
            else:
                return visitor.visitChildren(self)




    def block(self):

        localctx = HogQLParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 247
            self.match(HogQLParser.LBRACE)
            self.state = 251
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -2) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 8076106351341731839) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 131649) != 0):
                self.state = 248
                self.declaration()
                self.state = 253
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 254
            self.match(HogQLParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KvPairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ExpressionContext,i)


        def COLON(self):
            return self.getToken(HogQLParser.COLON, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_kvPair

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKvPair" ):
                return visitor.visitKvPair(self)
            else:
                return visitor.visitChildren(self)




    def kvPair(self):

        localctx = HogQLParser.KvPairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_kvPair)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 256
            self.expression()
            self.state = 257
            self.match(HogQLParser.COLON)
            self.state = 258
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KvPairListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def kvPair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.KvPairContext)
            else:
                return self.getTypedRuleContext(HogQLParser.KvPairContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_kvPairList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKvPairList" ):
                return visitor.visitKvPairList(self)
            else:
                return visitor.visitChildren(self)




    def kvPairList(self):

        localctx = HogQLParser.KvPairListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_kvPairList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 260
            self.kvPair()
            self.state = 265
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==112:
                self.state = 261
                self.match(HogQLParser.COMMA)
                self.state = 262
                self.kvPair()
                self.state = 267
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(HogQLParser.EOF, 0)

        def selectUnionStmt(self):
            return self.getTypedRuleContext(HogQLParser.SelectUnionStmtContext,0)


        def selectStmt(self):
            return self.getTypedRuleContext(HogQLParser.SelectStmtContext,0)


        def hogqlxTagElement(self):
            return self.getTypedRuleContext(HogQLParser.HogqlxTagElementContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_select

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelect" ):
                return visitor.visitSelect(self)
            else:
                return visitor.visitChildren(self)




    def select(self):

        localctx = HogQLParser.SelectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_select)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 271
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
            if la_ == 1:
                self.state = 268
                self.selectUnionStmt()
                pass

            elif la_ == 2:
                self.state = 269
                self.selectStmt()
                pass

            elif la_ == 3:
                self.state = 270
                self.hogqlxTagElement()
                pass


            self.state = 273
            self.match(HogQLParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectUnionStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selectStmtWithParens(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.SelectStmtWithParensContext)
            else:
                return self.getTypedRuleContext(HogQLParser.SelectStmtWithParensContext,i)


        def UNION(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.UNION)
            else:
                return self.getToken(HogQLParser.UNION, i)

        def ALL(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.ALL)
            else:
                return self.getToken(HogQLParser.ALL, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_selectUnionStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectUnionStmt" ):
                return visitor.visitSelectUnionStmt(self)
            else:
                return visitor.visitChildren(self)




    def selectUnionStmt(self):

        localctx = HogQLParser.SelectUnionStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_selectUnionStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 275
            self.selectStmtWithParens()
            self.state = 281
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==91:
                self.state = 276
                self.match(HogQLParser.UNION)
                self.state = 277
                self.match(HogQLParser.ALL)
                self.state = 278
                self.selectStmtWithParens()
                self.state = 283
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectStmtWithParensContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selectStmt(self):
            return self.getTypedRuleContext(HogQLParser.SelectStmtContext,0)


        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)

        def selectUnionStmt(self):
            return self.getTypedRuleContext(HogQLParser.SelectUnionStmtContext,0)


        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def placeholder(self):
            return self.getTypedRuleContext(HogQLParser.PlaceholderContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_selectStmtWithParens

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectStmtWithParens" ):
                return visitor.visitSelectStmtWithParens(self)
            else:
                return visitor.visitChildren(self)




    def selectStmtWithParens(self):

        localctx = HogQLParser.SelectStmtWithParensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_selectStmtWithParens)
        try:
            self.state = 290
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [77, 98]:
                self.enterOuterAlt(localctx, 1)
                self.state = 284
                self.selectStmt()
                pass
            elif token in [126]:
                self.enterOuterAlt(localctx, 2)
                self.state = 285
                self.match(HogQLParser.LPAREN)
                self.state = 286
                self.selectUnionStmt()
                self.state = 287
                self.match(HogQLParser.RPAREN)
                pass
            elif token in [124]:
                self.enterOuterAlt(localctx, 3)
                self.state = 289
                self.placeholder()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.with_ = None # WithClauseContext
            self.columns = None # ColumnExprListContext
            self.from_ = None # FromClauseContext
            self.where = None # WhereClauseContext

        def SELECT(self):
            return self.getToken(HogQLParser.SELECT, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def DISTINCT(self):
            return self.getToken(HogQLParser.DISTINCT, 0)

        def topClause(self):
            return self.getTypedRuleContext(HogQLParser.TopClauseContext,0)


        def arrayJoinClause(self):
            return self.getTypedRuleContext(HogQLParser.ArrayJoinClauseContext,0)


        def prewhereClause(self):
            return self.getTypedRuleContext(HogQLParser.PrewhereClauseContext,0)


        def groupByClause(self):
            return self.getTypedRuleContext(HogQLParser.GroupByClauseContext,0)


        def WITH(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.WITH)
            else:
                return self.getToken(HogQLParser.WITH, i)

        def TOTALS(self):
            return self.getToken(HogQLParser.TOTALS, 0)

        def havingClause(self):
            return self.getTypedRuleContext(HogQLParser.HavingClauseContext,0)


        def windowClause(self):
            return self.getTypedRuleContext(HogQLParser.WindowClauseContext,0)


        def orderByClause(self):
            return self.getTypedRuleContext(HogQLParser.OrderByClauseContext,0)


        def limitAndOffsetClause(self):
            return self.getTypedRuleContext(HogQLParser.LimitAndOffsetClauseContext,0)


        def offsetOnlyClause(self):
            return self.getTypedRuleContext(HogQLParser.OffsetOnlyClauseContext,0)


        def settingsClause(self):
            return self.getTypedRuleContext(HogQLParser.SettingsClauseContext,0)


        def withClause(self):
            return self.getTypedRuleContext(HogQLParser.WithClauseContext,0)


        def fromClause(self):
            return self.getTypedRuleContext(HogQLParser.FromClauseContext,0)


        def whereClause(self):
            return self.getTypedRuleContext(HogQLParser.WhereClauseContext,0)


        def CUBE(self):
            return self.getToken(HogQLParser.CUBE, 0)

        def ROLLUP(self):
            return self.getToken(HogQLParser.ROLLUP, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_selectStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectStmt" ):
                return visitor.visitSelectStmt(self)
            else:
                return visitor.visitChildren(self)




    def selectStmt(self):

        localctx = HogQLParser.SelectStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_selectStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 293
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==98:
                self.state = 292
                localctx.with_ = self.withClause()


            self.state = 295
            self.match(HogQLParser.SELECT)
            self.state = 297
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
            if la_ == 1:
                self.state = 296
                self.match(HogQLParser.DISTINCT)


            self.state = 300
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
            if la_ == 1:
                self.state = 299
                self.topClause()


            self.state = 302
            localctx.columns = self.columnExprList()
            self.state = 304
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==32:
                self.state = 303
                localctx.from_ = self.fromClause()


            self.state = 307
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 567347999932448) != 0):
                self.state = 306
                self.arrayJoinClause()


            self.state = 310
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==67:
                self.state = 309
                self.prewhereClause()


            self.state = 313
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==95:
                self.state = 312
                localctx.where = self.whereClause()


            self.state = 316
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==34:
                self.state = 315
                self.groupByClause()


            self.state = 320
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,20,self._ctx)
            if la_ == 1:
                self.state = 318
                self.match(HogQLParser.WITH)
                self.state = 319
                _la = self._input.LA(1)
                if not(_la==17 or _la==72):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 324
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==98:
                self.state = 322
                self.match(HogQLParser.WITH)
                self.state = 323
                self.match(HogQLParser.TOTALS)


            self.state = 327
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==35:
                self.state = 326
                self.havingClause()


            self.state = 330
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==97:
                self.state = 329
                self.windowClause()


            self.state = 333
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==62:
                self.state = 332
                self.orderByClause()


            self.state = 337
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [52]:
                self.state = 335
                self.limitAndOffsetClause()
                pass
            elif token in [59]:
                self.state = 336
                self.offsetOnlyClause()
                pass
            elif token in [-1, 79, 91, 144]:
                pass
            else:
                pass
            self.state = 340
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==79:
                self.state = 339
                self.settingsClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WithClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(HogQLParser.WITH, 0)

        def withExprList(self):
            return self.getTypedRuleContext(HogQLParser.WithExprListContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_withClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWithClause" ):
                return visitor.visitWithClause(self)
            else:
                return visitor.visitChildren(self)




    def withClause(self):

        localctx = HogQLParser.WithClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_withClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 342
            self.match(HogQLParser.WITH)
            self.state = 343
            self.withExprList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TopClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TOP(self):
            return self.getToken(HogQLParser.TOP, 0)

        def DECIMAL_LITERAL(self):
            return self.getToken(HogQLParser.DECIMAL_LITERAL, 0)

        def WITH(self):
            return self.getToken(HogQLParser.WITH, 0)

        def TIES(self):
            return self.getToken(HogQLParser.TIES, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_topClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTopClause" ):
                return visitor.visitTopClause(self)
            else:
                return visitor.visitChildren(self)




    def topClause(self):

        localctx = HogQLParser.TopClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_topClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 345
            self.match(HogQLParser.TOP)
            self.state = 346
            self.match(HogQLParser.DECIMAL_LITERAL)
            self.state = 349
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
            if la_ == 1:
                self.state = 347
                self.match(HogQLParser.WITH)
                self.state = 348
                self.match(HogQLParser.TIES)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FromClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(HogQLParser.FROM, 0)

        def joinExpr(self):
            return self.getTypedRuleContext(HogQLParser.JoinExprContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_fromClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFromClause" ):
                return visitor.visitFromClause(self)
            else:
                return visitor.visitChildren(self)




    def fromClause(self):

        localctx = HogQLParser.FromClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_fromClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 351
            self.match(HogQLParser.FROM)
            self.state = 352
            self.joinExpr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayJoinClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ARRAY(self):
            return self.getToken(HogQLParser.ARRAY, 0)

        def JOIN(self):
            return self.getToken(HogQLParser.JOIN, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def LEFT(self):
            return self.getToken(HogQLParser.LEFT, 0)

        def INNER(self):
            return self.getToken(HogQLParser.INNER, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_arrayJoinClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayJoinClause" ):
                return visitor.visitArrayJoinClause(self)
            else:
                return visitor.visitChildren(self)




    def arrayJoinClause(self):

        localctx = HogQLParser.ArrayJoinClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_arrayJoinClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 355
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==42 or _la==49:
                self.state = 354
                _la = self._input.LA(1)
                if not(_la==42 or _la==49):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 357
            self.match(HogQLParser.ARRAY)
            self.state = 358
            self.match(HogQLParser.JOIN)
            self.state = 359
            self.columnExprList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WINDOW(self):
            return self.getToken(HogQLParser.WINDOW, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(HogQLParser.IdentifierContext,i)


        def AS(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.AS)
            else:
                return self.getToken(HogQLParser.AS, i)

        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.LPAREN)
            else:
                return self.getToken(HogQLParser.LPAREN, i)

        def windowExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.WindowExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.WindowExprContext,i)


        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.RPAREN)
            else:
                return self.getToken(HogQLParser.RPAREN, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_windowClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindowClause" ):
                return visitor.visitWindowClause(self)
            else:
                return visitor.visitChildren(self)




    def windowClause(self):

        localctx = HogQLParser.WindowClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_windowClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 361
            self.match(HogQLParser.WINDOW)
            self.state = 362
            self.identifier()
            self.state = 363
            self.match(HogQLParser.AS)
            self.state = 364
            self.match(HogQLParser.LPAREN)
            self.state = 365
            self.windowExpr()
            self.state = 366
            self.match(HogQLParser.RPAREN)
            self.state = 376
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==112:
                self.state = 367
                self.match(HogQLParser.COMMA)
                self.state = 368
                self.identifier()
                self.state = 369
                self.match(HogQLParser.AS)
                self.state = 370
                self.match(HogQLParser.LPAREN)
                self.state = 371
                self.windowExpr()
                self.state = 372
                self.match(HogQLParser.RPAREN)
                self.state = 378
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrewhereClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PREWHERE(self):
            return self.getToken(HogQLParser.PREWHERE, 0)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_prewhereClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrewhereClause" ):
                return visitor.visitPrewhereClause(self)
            else:
                return visitor.visitChildren(self)




    def prewhereClause(self):

        localctx = HogQLParser.PrewhereClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_prewhereClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 379
            self.match(HogQLParser.PREWHERE)
            self.state = 380
            self.columnExpr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhereClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(HogQLParser.WHERE, 0)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_whereClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhereClause" ):
                return visitor.visitWhereClause(self)
            else:
                return visitor.visitChildren(self)




    def whereClause(self):

        localctx = HogQLParser.WhereClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_whereClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 382
            self.match(HogQLParser.WHERE)
            self.state = 383
            self.columnExpr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GROUP(self):
            return self.getToken(HogQLParser.GROUP, 0)

        def BY(self):
            return self.getToken(HogQLParser.BY, 0)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def CUBE(self):
            return self.getToken(HogQLParser.CUBE, 0)

        def ROLLUP(self):
            return self.getToken(HogQLParser.ROLLUP, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_groupByClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroupByClause" ):
                return visitor.visitGroupByClause(self)
            else:
                return visitor.visitChildren(self)




    def groupByClause(self):

        localctx = HogQLParser.GroupByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_groupByClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 385
            self.match(HogQLParser.GROUP)
            self.state = 386
            self.match(HogQLParser.BY)
            self.state = 393
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
            if la_ == 1:
                self.state = 387
                _la = self._input.LA(1)
                if not(_la==17 or _la==72):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 388
                self.match(HogQLParser.LPAREN)
                self.state = 389
                self.columnExprList()
                self.state = 390
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 2:
                self.state = 392
                self.columnExprList()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HavingClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HAVING(self):
            return self.getToken(HogQLParser.HAVING, 0)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_havingClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHavingClause" ):
                return visitor.visitHavingClause(self)
            else:
                return visitor.visitChildren(self)




    def havingClause(self):

        localctx = HogQLParser.HavingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_havingClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 395
            self.match(HogQLParser.HAVING)
            self.state = 396
            self.columnExpr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(HogQLParser.ORDER, 0)

        def BY(self):
            return self.getToken(HogQLParser.BY, 0)

        def orderExprList(self):
            return self.getTypedRuleContext(HogQLParser.OrderExprListContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_orderByClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrderByClause" ):
                return visitor.visitOrderByClause(self)
            else:
                return visitor.visitChildren(self)




    def orderByClause(self):

        localctx = HogQLParser.OrderByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_orderByClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 398
            self.match(HogQLParser.ORDER)
            self.state = 399
            self.match(HogQLParser.BY)
            self.state = 400
            self.orderExprList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProjectionOrderByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(HogQLParser.ORDER, 0)

        def BY(self):
            return self.getToken(HogQLParser.BY, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_projectionOrderByClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProjectionOrderByClause" ):
                return visitor.visitProjectionOrderByClause(self)
            else:
                return visitor.visitChildren(self)




    def projectionOrderByClause(self):

        localctx = HogQLParser.ProjectionOrderByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_projectionOrderByClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 402
            self.match(HogQLParser.ORDER)
            self.state = 403
            self.match(HogQLParser.BY)
            self.state = 404
            self.columnExprList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LimitAndOffsetClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIMIT(self):
            return self.getToken(HogQLParser.LIMIT, 0)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)


        def COMMA(self):
            return self.getToken(HogQLParser.COMMA, 0)

        def BY(self):
            return self.getToken(HogQLParser.BY, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def WITH(self):
            return self.getToken(HogQLParser.WITH, 0)

        def TIES(self):
            return self.getToken(HogQLParser.TIES, 0)

        def OFFSET(self):
            return self.getToken(HogQLParser.OFFSET, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_limitAndOffsetClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLimitAndOffsetClause" ):
                return visitor.visitLimitAndOffsetClause(self)
            else:
                return visitor.visitChildren(self)




    def limitAndOffsetClause(self):

        localctx = HogQLParser.LimitAndOffsetClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_limitAndOffsetClause)
        self._la = 0 # Token type
        try:
            self.state = 435
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 406
                self.match(HogQLParser.LIMIT)
                self.state = 407
                self.columnExpr(0)
                self.state = 410
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==112:
                    self.state = 408
                    self.match(HogQLParser.COMMA)
                    self.state = 409
                    self.columnExpr(0)


                self.state = 416
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [98]:
                    self.state = 412
                    self.match(HogQLParser.WITH)
                    self.state = 413
                    self.match(HogQLParser.TIES)
                    pass
                elif token in [11]:
                    self.state = 414
                    self.match(HogQLParser.BY)
                    self.state = 415
                    self.columnExprList()
                    pass
                elif token in [-1, 79, 91, 144]:
                    pass
                else:
                    pass
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 418
                self.match(HogQLParser.LIMIT)
                self.state = 419
                self.columnExpr(0)
                self.state = 422
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==98:
                    self.state = 420
                    self.match(HogQLParser.WITH)
                    self.state = 421
                    self.match(HogQLParser.TIES)


                self.state = 424
                self.match(HogQLParser.OFFSET)
                self.state = 425
                self.columnExpr(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 427
                self.match(HogQLParser.LIMIT)
                self.state = 428
                self.columnExpr(0)
                self.state = 429
                self.match(HogQLParser.OFFSET)
                self.state = 430
                self.columnExpr(0)
                self.state = 433
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 431
                    self.match(HogQLParser.BY)
                    self.state = 432
                    self.columnExprList()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OffsetOnlyClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OFFSET(self):
            return self.getToken(HogQLParser.OFFSET, 0)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_offsetOnlyClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOffsetOnlyClause" ):
                return visitor.visitOffsetOnlyClause(self)
            else:
                return visitor.visitChildren(self)




    def offsetOnlyClause(self):

        localctx = HogQLParser.OffsetOnlyClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_offsetOnlyClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 437
            self.match(HogQLParser.OFFSET)
            self.state = 438
            self.columnExpr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SettingsClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SETTINGS(self):
            return self.getToken(HogQLParser.SETTINGS, 0)

        def settingExprList(self):
            return self.getTypedRuleContext(HogQLParser.SettingExprListContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_settingsClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSettingsClause" ):
                return visitor.visitSettingsClause(self)
            else:
                return visitor.visitChildren(self)




    def settingsClause(self):

        localctx = HogQLParser.SettingsClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_settingsClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 440
            self.match(HogQLParser.SETTINGS)
            self.state = 441
            self.settingExprList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return HogQLParser.RULE_joinExpr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class JoinExprOpContext(JoinExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.JoinExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def joinExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.JoinExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.JoinExprContext,i)

        def JOIN(self):
            return self.getToken(HogQLParser.JOIN, 0)
        def joinConstraintClause(self):
            return self.getTypedRuleContext(HogQLParser.JoinConstraintClauseContext,0)

        def joinOp(self):
            return self.getTypedRuleContext(HogQLParser.JoinOpContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinExprOp" ):
                return visitor.visitJoinExprOp(self)
            else:
                return visitor.visitChildren(self)


    class JoinExprTableContext(JoinExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.JoinExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tableExpr(self):
            return self.getTypedRuleContext(HogQLParser.TableExprContext,0)

        def FINAL(self):
            return self.getToken(HogQLParser.FINAL, 0)
        def sampleClause(self):
            return self.getTypedRuleContext(HogQLParser.SampleClauseContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinExprTable" ):
                return visitor.visitJoinExprTable(self)
            else:
                return visitor.visitChildren(self)


    class JoinExprParensContext(JoinExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.JoinExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def joinExpr(self):
            return self.getTypedRuleContext(HogQLParser.JoinExprContext,0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinExprParens" ):
                return visitor.visitJoinExprParens(self)
            else:
                return visitor.visitChildren(self)


    class JoinExprCrossOpContext(JoinExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.JoinExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def joinExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.JoinExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.JoinExprContext,i)

        def joinOpCross(self):
            return self.getTypedRuleContext(HogQLParser.JoinOpCrossContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinExprCrossOp" ):
                return visitor.visitJoinExprCrossOp(self)
            else:
                return visitor.visitChildren(self)



    def joinExpr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = HogQLParser.JoinExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 68
        self.enterRecursionRule(localctx, 68, self.RULE_joinExpr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 455
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
            if la_ == 1:
                localctx = HogQLParser.JoinExprTableContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 444
                self.tableExpr(0)
                self.state = 446
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
                if la_ == 1:
                    self.state = 445
                    self.match(HogQLParser.FINAL)


                self.state = 449
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,37,self._ctx)
                if la_ == 1:
                    self.state = 448
                    self.sampleClause()


                pass

            elif la_ == 2:
                localctx = HogQLParser.JoinExprParensContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 451
                self.match(HogQLParser.LPAREN)
                self.state = 452
                self.joinExpr(0)
                self.state = 453
                self.match(HogQLParser.RPAREN)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 471
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,41,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 469
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
                    if la_ == 1:
                        localctx = HogQLParser.JoinExprCrossOpContext(self, HogQLParser.JoinExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_joinExpr)
                        self.state = 457
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 458
                        self.joinOpCross()
                        self.state = 459
                        self.joinExpr(4)
                        pass

                    elif la_ == 2:
                        localctx = HogQLParser.JoinExprOpContext(self, HogQLParser.JoinExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_joinExpr)
                        self.state = 461
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 463
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & 567356589867290) != 0) or _la==71 or _la==78:
                            self.state = 462
                            self.joinOp()


                        self.state = 465
                        self.match(HogQLParser.JOIN)
                        self.state = 466
                        self.joinExpr(0)
                        self.state = 467
                        self.joinConstraintClause()
                        pass

             
                self.state = 473
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,41,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class JoinOpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return HogQLParser.RULE_joinOp

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class JoinOpFullContext(JoinOpContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.JoinOpContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FULL(self):
            return self.getToken(HogQLParser.FULL, 0)
        def OUTER(self):
            return self.getToken(HogQLParser.OUTER, 0)
        def ALL(self):
            return self.getToken(HogQLParser.ALL, 0)
        def ANY(self):
            return self.getToken(HogQLParser.ANY, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinOpFull" ):
                return visitor.visitJoinOpFull(self)
            else:
                return visitor.visitChildren(self)


    class JoinOpInnerContext(JoinOpContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.JoinOpContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INNER(self):
            return self.getToken(HogQLParser.INNER, 0)
        def ALL(self):
            return self.getToken(HogQLParser.ALL, 0)
        def ANY(self):
            return self.getToken(HogQLParser.ANY, 0)
        def ASOF(self):
            return self.getToken(HogQLParser.ASOF, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinOpInner" ):
                return visitor.visitJoinOpInner(self)
            else:
                return visitor.visitChildren(self)


    class JoinOpLeftRightContext(JoinOpContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.JoinOpContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LEFT(self):
            return self.getToken(HogQLParser.LEFT, 0)
        def RIGHT(self):
            return self.getToken(HogQLParser.RIGHT, 0)
        def OUTER(self):
            return self.getToken(HogQLParser.OUTER, 0)
        def SEMI(self):
            return self.getToken(HogQLParser.SEMI, 0)
        def ALL(self):
            return self.getToken(HogQLParser.ALL, 0)
        def ANTI(self):
            return self.getToken(HogQLParser.ANTI, 0)
        def ANY(self):
            return self.getToken(HogQLParser.ANY, 0)
        def ASOF(self):
            return self.getToken(HogQLParser.ASOF, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinOpLeftRight" ):
                return visitor.visitJoinOpLeftRight(self)
            else:
                return visitor.visitChildren(self)



    def joinOp(self):

        localctx = HogQLParser.JoinOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_joinOp)
        self._la = 0 # Token type
        try:
            self.state = 517
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,55,self._ctx)
            if la_ == 1:
                localctx = HogQLParser.JoinOpInnerContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 483
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
                if la_ == 1:
                    self.state = 475
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 274) != 0):
                        self.state = 474
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 274) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 477
                    self.match(HogQLParser.INNER)
                    pass

                elif la_ == 2:
                    self.state = 478
                    self.match(HogQLParser.INNER)
                    self.state = 480
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 274) != 0):
                        self.state = 479
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 274) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    pass

                elif la_ == 3:
                    self.state = 482
                    _la = self._input.LA(1)
                    if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 274) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass


                pass

            elif la_ == 2:
                localctx = HogQLParser.JoinOpLeftRightContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 499
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,49,self._ctx)
                if la_ == 1:
                    self.state = 486
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 282) != 0) or _la==78:
                        self.state = 485
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 282) != 0) or _la==78):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 488
                    _la = self._input.LA(1)
                    if not(_la==49 or _la==71):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 490
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==63:
                        self.state = 489
                        self.match(HogQLParser.OUTER)


                    pass

                elif la_ == 2:
                    self.state = 492
                    _la = self._input.LA(1)
                    if not(_la==49 or _la==71):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 494
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==63:
                        self.state = 493
                        self.match(HogQLParser.OUTER)


                    self.state = 497
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 282) != 0) or _la==78:
                        self.state = 496
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 282) != 0) or _la==78):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    pass


                pass

            elif la_ == 3:
                localctx = HogQLParser.JoinOpFullContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 515
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
                if la_ == 1:
                    self.state = 502
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1 or _la==4:
                        self.state = 501
                        _la = self._input.LA(1)
                        if not(_la==1 or _la==4):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 504
                    self.match(HogQLParser.FULL)
                    self.state = 506
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==63:
                        self.state = 505
                        self.match(HogQLParser.OUTER)


                    pass

                elif la_ == 2:
                    self.state = 508
                    self.match(HogQLParser.FULL)
                    self.state = 510
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==63:
                        self.state = 509
                        self.match(HogQLParser.OUTER)


                    self.state = 513
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1 or _la==4:
                        self.state = 512
                        _la = self._input.LA(1)
                        if not(_la==1 or _la==4):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    pass


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinOpCrossContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CROSS(self):
            return self.getToken(HogQLParser.CROSS, 0)

        def JOIN(self):
            return self.getToken(HogQLParser.JOIN, 0)

        def COMMA(self):
            return self.getToken(HogQLParser.COMMA, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_joinOpCross

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinOpCross" ):
                return visitor.visitJoinOpCross(self)
            else:
                return visitor.visitChildren(self)




    def joinOpCross(self):

        localctx = HogQLParser.JoinOpCrossContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_joinOpCross)
        try:
            self.state = 522
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [16]:
                self.enterOuterAlt(localctx, 1)
                self.state = 519
                self.match(HogQLParser.CROSS)
                self.state = 520
                self.match(HogQLParser.JOIN)
                pass
            elif token in [112]:
                self.enterOuterAlt(localctx, 2)
                self.state = 521
                self.match(HogQLParser.COMMA)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinConstraintClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(HogQLParser.ON, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def USING(self):
            return self.getToken(HogQLParser.USING, 0)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_joinConstraintClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinConstraintClause" ):
                return visitor.visitJoinConstraintClause(self)
            else:
                return visitor.visitChildren(self)




    def joinConstraintClause(self):

        localctx = HogQLParser.JoinConstraintClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_joinConstraintClause)
        try:
            self.state = 533
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 524
                self.match(HogQLParser.ON)
                self.state = 525
                self.columnExprList()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 526
                self.match(HogQLParser.USING)
                self.state = 527
                self.match(HogQLParser.LPAREN)
                self.state = 528
                self.columnExprList()
                self.state = 529
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 531
                self.match(HogQLParser.USING)
                self.state = 532
                self.columnExprList()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SampleClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SAMPLE(self):
            return self.getToken(HogQLParser.SAMPLE, 0)

        def ratioExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.RatioExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.RatioExprContext,i)


        def OFFSET(self):
            return self.getToken(HogQLParser.OFFSET, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_sampleClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSampleClause" ):
                return visitor.visitSampleClause(self)
            else:
                return visitor.visitChildren(self)




    def sampleClause(self):

        localctx = HogQLParser.SampleClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_sampleClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 535
            self.match(HogQLParser.SAMPLE)
            self.state = 536
            self.ratioExpr()
            self.state = 539
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
            if la_ == 1:
                self.state = 537
                self.match(HogQLParser.OFFSET)
                self.state = 538
                self.ratioExpr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderExprListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def orderExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.OrderExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.OrderExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_orderExprList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrderExprList" ):
                return visitor.visitOrderExprList(self)
            else:
                return visitor.visitChildren(self)




    def orderExprList(self):

        localctx = HogQLParser.OrderExprListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_orderExprList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 541
            self.orderExpr()
            self.state = 546
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==112:
                self.state = 542
                self.match(HogQLParser.COMMA)
                self.state = 543
                self.orderExpr()
                self.state = 548
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def NULLS(self):
            return self.getToken(HogQLParser.NULLS, 0)

        def COLLATE(self):
            return self.getToken(HogQLParser.COLLATE, 0)

        def STRING_LITERAL(self):
            return self.getToken(HogQLParser.STRING_LITERAL, 0)

        def ASCENDING(self):
            return self.getToken(HogQLParser.ASCENDING, 0)

        def DESCENDING(self):
            return self.getToken(HogQLParser.DESCENDING, 0)

        def DESC(self):
            return self.getToken(HogQLParser.DESC, 0)

        def FIRST(self):
            return self.getToken(HogQLParser.FIRST, 0)

        def LAST(self):
            return self.getToken(HogQLParser.LAST, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_orderExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrderExpr" ):
                return visitor.visitOrderExpr(self)
            else:
                return visitor.visitChildren(self)




    def orderExpr(self):

        localctx = HogQLParser.OrderExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_orderExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 549
            self.columnExpr(0)
            self.state = 551
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 6291584) != 0):
                self.state = 550
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 6291584) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 555
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==58:
                self.state = 553
                self.match(HogQLParser.NULLS)
                self.state = 554
                _la = self._input.LA(1)
                if not(_la==28 or _la==47):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 559
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==15:
                self.state = 557
                self.match(HogQLParser.COLLATE)
                self.state = 558
                self.match(HogQLParser.STRING_LITERAL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RatioExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def placeholder(self):
            return self.getTypedRuleContext(HogQLParser.PlaceholderContext,0)


        def numberLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.NumberLiteralContext)
            else:
                return self.getTypedRuleContext(HogQLParser.NumberLiteralContext,i)


        def SLASH(self):
            return self.getToken(HogQLParser.SLASH, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_ratioExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRatioExpr" ):
                return visitor.visitRatioExpr(self)
            else:
                return visitor.visitChildren(self)




    def ratioExpr(self):

        localctx = HogQLParser.RatioExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_ratioExpr)
        try:
            self.state = 567
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [124]:
                self.enterOuterAlt(localctx, 1)
                self.state = 561
                self.placeholder()
                pass
            elif token in [41, 55, 102, 103, 104, 105, 114, 116, 134]:
                self.enterOuterAlt(localctx, 2)
                self.state = 562
                self.numberLiteral()
                self.state = 565
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
                if la_ == 1:
                    self.state = 563
                    self.match(HogQLParser.SLASH)
                    self.state = 564
                    self.numberLiteral()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SettingExprListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def settingExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.SettingExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.SettingExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_settingExprList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSettingExprList" ):
                return visitor.visitSettingExprList(self)
            else:
                return visitor.visitChildren(self)




    def settingExprList(self):

        localctx = HogQLParser.SettingExprListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_settingExprList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 569
            self.settingExpr()
            self.state = 574
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==112:
                self.state = 570
                self.match(HogQLParser.COMMA)
                self.state = 571
                self.settingExpr()
                self.state = 576
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SettingExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def EQ_SINGLE(self):
            return self.getToken(HogQLParser.EQ_SINGLE, 0)

        def literal(self):
            return self.getTypedRuleContext(HogQLParser.LiteralContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_settingExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSettingExpr" ):
                return visitor.visitSettingExpr(self)
            else:
                return visitor.visitChildren(self)




    def settingExpr(self):

        localctx = HogQLParser.SettingExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_settingExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 577
            self.identifier()
            self.state = 578
            self.match(HogQLParser.EQ_SINGLE)
            self.state = 579
            self.literal()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def winPartitionByClause(self):
            return self.getTypedRuleContext(HogQLParser.WinPartitionByClauseContext,0)


        def winOrderByClause(self):
            return self.getTypedRuleContext(HogQLParser.WinOrderByClauseContext,0)


        def winFrameClause(self):
            return self.getTypedRuleContext(HogQLParser.WinFrameClauseContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_windowExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindowExpr" ):
                return visitor.visitWindowExpr(self)
            else:
                return visitor.visitChildren(self)




    def windowExpr(self):

        localctx = HogQLParser.WindowExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_windowExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 582
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==65:
                self.state = 581
                self.winPartitionByClause()


            self.state = 585
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==62:
                self.state = 584
                self.winOrderByClause()


            self.state = 588
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==69 or _la==74:
                self.state = 587
                self.winFrameClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WinPartitionByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION(self):
            return self.getToken(HogQLParser.PARTITION, 0)

        def BY(self):
            return self.getToken(HogQLParser.BY, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_winPartitionByClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWinPartitionByClause" ):
                return visitor.visitWinPartitionByClause(self)
            else:
                return visitor.visitChildren(self)




    def winPartitionByClause(self):

        localctx = HogQLParser.WinPartitionByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_winPartitionByClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 590
            self.match(HogQLParser.PARTITION)
            self.state = 591
            self.match(HogQLParser.BY)
            self.state = 592
            self.columnExprList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WinOrderByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(HogQLParser.ORDER, 0)

        def BY(self):
            return self.getToken(HogQLParser.BY, 0)

        def orderExprList(self):
            return self.getTypedRuleContext(HogQLParser.OrderExprListContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_winOrderByClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWinOrderByClause" ):
                return visitor.visitWinOrderByClause(self)
            else:
                return visitor.visitChildren(self)




    def winOrderByClause(self):

        localctx = HogQLParser.WinOrderByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_winOrderByClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 594
            self.match(HogQLParser.ORDER)
            self.state = 595
            self.match(HogQLParser.BY)
            self.state = 596
            self.orderExprList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WinFrameClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def winFrameExtend(self):
            return self.getTypedRuleContext(HogQLParser.WinFrameExtendContext,0)


        def ROWS(self):
            return self.getToken(HogQLParser.ROWS, 0)

        def RANGE(self):
            return self.getToken(HogQLParser.RANGE, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_winFrameClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWinFrameClause" ):
                return visitor.visitWinFrameClause(self)
            else:
                return visitor.visitChildren(self)




    def winFrameClause(self):

        localctx = HogQLParser.WinFrameClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_winFrameClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 598
            _la = self._input.LA(1)
            if not(_la==69 or _la==74):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 599
            self.winFrameExtend()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WinFrameExtendContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return HogQLParser.RULE_winFrameExtend

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class FrameStartContext(WinFrameExtendContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.WinFrameExtendContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def winFrameBound(self):
            return self.getTypedRuleContext(HogQLParser.WinFrameBoundContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFrameStart" ):
                return visitor.visitFrameStart(self)
            else:
                return visitor.visitChildren(self)


    class FrameBetweenContext(WinFrameExtendContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.WinFrameExtendContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BETWEEN(self):
            return self.getToken(HogQLParser.BETWEEN, 0)
        def winFrameBound(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.WinFrameBoundContext)
            else:
                return self.getTypedRuleContext(HogQLParser.WinFrameBoundContext,i)

        def AND(self):
            return self.getToken(HogQLParser.AND, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFrameBetween" ):
                return visitor.visitFrameBetween(self)
            else:
                return visitor.visitChildren(self)



    def winFrameExtend(self):

        localctx = HogQLParser.WinFrameExtendContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_winFrameExtend)
        try:
            self.state = 607
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [18, 41, 55, 90, 102, 103, 104, 105, 114, 116, 134]:
                localctx = HogQLParser.FrameStartContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 601
                self.winFrameBound()
                pass
            elif token in [9]:
                localctx = HogQLParser.FrameBetweenContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 602
                self.match(HogQLParser.BETWEEN)
                self.state = 603
                self.winFrameBound()
                self.state = 604
                self.match(HogQLParser.AND)
                self.state = 605
                self.winFrameBound()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WinFrameBoundContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CURRENT(self):
            return self.getToken(HogQLParser.CURRENT, 0)

        def ROW(self):
            return self.getToken(HogQLParser.ROW, 0)

        def UNBOUNDED(self):
            return self.getToken(HogQLParser.UNBOUNDED, 0)

        def PRECEDING(self):
            return self.getToken(HogQLParser.PRECEDING, 0)

        def FOLLOWING(self):
            return self.getToken(HogQLParser.FOLLOWING, 0)

        def numberLiteral(self):
            return self.getTypedRuleContext(HogQLParser.NumberLiteralContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_winFrameBound

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWinFrameBound" ):
                return visitor.visitWinFrameBound(self)
            else:
                return visitor.visitChildren(self)




    def winFrameBound(self):

        localctx = HogQLParser.WinFrameBoundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_winFrameBound)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 621
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
            if la_ == 1:
                self.state = 609
                self.match(HogQLParser.CURRENT)
                self.state = 610
                self.match(HogQLParser.ROW)
                pass

            elif la_ == 2:
                self.state = 611
                self.match(HogQLParser.UNBOUNDED)
                self.state = 612
                self.match(HogQLParser.PRECEDING)
                pass

            elif la_ == 3:
                self.state = 613
                self.match(HogQLParser.UNBOUNDED)
                self.state = 614
                self.match(HogQLParser.FOLLOWING)
                pass

            elif la_ == 4:
                self.state = 615
                self.numberLiteral()
                self.state = 616
                self.match(HogQLParser.PRECEDING)
                pass

            elif la_ == 5:
                self.state = 618
                self.numberLiteral()
                self.state = 619
                self.match(HogQLParser.FOLLOWING)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def EOF(self):
            return self.getToken(HogQLParser.EOF, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_expr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpr" ):
                return visitor.visitExpr(self)
            else:
                return visitor.visitChildren(self)




    def expr(self):

        localctx = HogQLParser.ExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 623
            self.columnExpr(0)
            self.state = 624
            self.match(HogQLParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnTypeExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return HogQLParser.RULE_columnTypeExpr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ColumnTypeExprNestedContext(ColumnTypeExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnTypeExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(HogQLParser.IdentifierContext,i)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def columnTypeExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnTypeExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnTypeExprContext,i)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnTypeExprNested" ):
                return visitor.visitColumnTypeExprNested(self)
            else:
                return visitor.visitChildren(self)


    class ColumnTypeExprParamContext(ColumnTypeExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnTypeExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)
        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnTypeExprParam" ):
                return visitor.visitColumnTypeExprParam(self)
            else:
                return visitor.visitChildren(self)


    class ColumnTypeExprSimpleContext(ColumnTypeExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnTypeExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnTypeExprSimple" ):
                return visitor.visitColumnTypeExprSimple(self)
            else:
                return visitor.visitChildren(self)


    class ColumnTypeExprComplexContext(ColumnTypeExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnTypeExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def columnTypeExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnTypeExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnTypeExprContext,i)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnTypeExprComplex" ):
                return visitor.visitColumnTypeExprComplex(self)
            else:
                return visitor.visitChildren(self)


    class ColumnTypeExprEnumContext(ColumnTypeExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnTypeExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def enumValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.EnumValueContext)
            else:
                return self.getTypedRuleContext(HogQLParser.EnumValueContext,i)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnTypeExprEnum" ):
                return visitor.visitColumnTypeExprEnum(self)
            else:
                return visitor.visitChildren(self)



    def columnTypeExpr(self):

        localctx = HogQLParser.ColumnTypeExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_columnTypeExpr)
        self._la = 0 # Token type
        try:
            self.state = 673
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
            if la_ == 1:
                localctx = HogQLParser.ColumnTypeExprSimpleContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 626
                self.identifier()
                pass

            elif la_ == 2:
                localctx = HogQLParser.ColumnTypeExprNestedContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 627
                self.identifier()
                self.state = 628
                self.match(HogQLParser.LPAREN)
                self.state = 629
                self.identifier()
                self.state = 630
                self.columnTypeExpr()
                self.state = 637
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==112:
                    self.state = 631
                    self.match(HogQLParser.COMMA)
                    self.state = 632
                    self.identifier()
                    self.state = 633
                    self.columnTypeExpr()
                    self.state = 639
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 640
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 3:
                localctx = HogQLParser.ColumnTypeExprEnumContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 642
                self.identifier()
                self.state = 643
                self.match(HogQLParser.LPAREN)
                self.state = 644
                self.enumValue()
                self.state = 649
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==112:
                    self.state = 645
                    self.match(HogQLParser.COMMA)
                    self.state = 646
                    self.enumValue()
                    self.state = 651
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 652
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 4:
                localctx = HogQLParser.ColumnTypeExprComplexContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 654
                self.identifier()
                self.state = 655
                self.match(HogQLParser.LPAREN)
                self.state = 656
                self.columnTypeExpr()
                self.state = 661
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==112:
                    self.state = 657
                    self.match(HogQLParser.COMMA)
                    self.state = 658
                    self.columnTypeExpr()
                    self.state = 663
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 664
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 5:
                localctx = HogQLParser.ColumnTypeExprParamContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 666
                self.identifier()
                self.state = 667
                self.match(HogQLParser.LPAREN)
                self.state = 669
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -1125900443713538) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 8076106347046764543) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 577) != 0):
                    self.state = 668
                    self.columnExprList()


                self.state = 671
                self.match(HogQLParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnExprListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_columnExprList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprList" ):
                return visitor.visitColumnExprList(self)
            else:
                return visitor.visitChildren(self)




    def columnExprList(self):

        localctx = HogQLParser.ColumnExprListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_columnExprList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 675
            self.columnExpr(0)
            self.state = 680
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,76,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 676
                    self.match(HogQLParser.COMMA)
                    self.state = 677
                    self.columnExpr(0) 
                self.state = 682
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,76,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return HogQLParser.RULE_columnExpr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class ColumnExprTernaryOpContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def QUERY(self):
            return self.getToken(HogQLParser.QUERY, 0)
        def COLON(self):
            return self.getToken(HogQLParser.COLON, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprTernaryOp" ):
                return visitor.visitColumnExprTernaryOp(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprAliasContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def alias(self):
            return self.getTypedRuleContext(HogQLParser.AliasContext,0)

        def AS(self):
            return self.getToken(HogQLParser.AS, 0)
        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)

        def STRING_LITERAL(self):
            return self.getToken(HogQLParser.STRING_LITERAL, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprAlias" ):
                return visitor.visitColumnExprAlias(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprNegateContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DASH(self):
            return self.getToken(HogQLParser.DASH, 0)
        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprNegate" ):
                return visitor.visitColumnExprNegate(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprDictContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LBRACE(self):
            return self.getToken(HogQLParser.LBRACE, 0)
        def RBRACE(self):
            return self.getToken(HogQLParser.RBRACE, 0)
        def kvPairList(self):
            return self.getTypedRuleContext(HogQLParser.KvPairListContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprDict" ):
                return visitor.visitColumnExprDict(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprSubqueryContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def selectUnionStmt(self):
            return self.getTypedRuleContext(HogQLParser.SelectUnionStmtContext,0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprSubquery" ):
                return visitor.visitColumnExprSubquery(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprLiteralContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def literal(self):
            return self.getTypedRuleContext(HogQLParser.LiteralContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprLiteral" ):
                return visitor.visitColumnExprLiteral(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprArrayContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LBRACKET(self):
            return self.getToken(HogQLParser.LBRACKET, 0)
        def RBRACKET(self):
            return self.getToken(HogQLParser.RBRACKET, 0)
        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprArray" ):
                return visitor.visitColumnExprArray(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprSubstringContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SUBSTRING(self):
            return self.getToken(HogQLParser.SUBSTRING, 0)
        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def FROM(self):
            return self.getToken(HogQLParser.FROM, 0)
        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)
        def FOR(self):
            return self.getToken(HogQLParser.FOR, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprSubstring" ):
                return visitor.visitColumnExprSubstring(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprCastContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CAST(self):
            return self.getToken(HogQLParser.CAST, 0)
        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def AS(self):
            return self.getToken(HogQLParser.AS, 0)
        def columnTypeExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnTypeExprContext,0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprCast" ):
                return visitor.visitColumnExprCast(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprOrContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def OR(self):
            return self.getToken(HogQLParser.OR, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprOr" ):
                return visitor.visitColumnExprOr(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprPrecedence1Context(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.left = None # ColumnExprContext
            self.operator = None # Token
            self.right = None # ColumnExprContext
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def ASTERISK(self):
            return self.getToken(HogQLParser.ASTERISK, 0)
        def SLASH(self):
            return self.getToken(HogQLParser.SLASH, 0)
        def PERCENT(self):
            return self.getToken(HogQLParser.PERCENT, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprPrecedence1" ):
                return visitor.visitColumnExprPrecedence1(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprPrecedence2Context(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.left = None # ColumnExprContext
            self.operator = None # Token
            self.right = None # ColumnExprContext
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def PLUS(self):
            return self.getToken(HogQLParser.PLUS, 0)
        def DASH(self):
            return self.getToken(HogQLParser.DASH, 0)
        def CONCAT(self):
            return self.getToken(HogQLParser.CONCAT, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprPrecedence2" ):
                return visitor.visitColumnExprPrecedence2(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprPrecedence3Context(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.left = None # ColumnExprContext
            self.operator = None # Token
            self.right = None # ColumnExprContext
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def IN(self):
            return self.getToken(HogQLParser.IN, 0)
        def EQ_DOUBLE(self):
            return self.getToken(HogQLParser.EQ_DOUBLE, 0)
        def EQ_SINGLE(self):
            return self.getToken(HogQLParser.EQ_SINGLE, 0)
        def NOT_EQ(self):
            return self.getToken(HogQLParser.NOT_EQ, 0)
        def LT_EQ(self):
            return self.getToken(HogQLParser.LT_EQ, 0)
        def LT(self):
            return self.getToken(HogQLParser.LT, 0)
        def GT_EQ(self):
            return self.getToken(HogQLParser.GT_EQ, 0)
        def GT(self):
            return self.getToken(HogQLParser.GT, 0)
        def LIKE(self):
            return self.getToken(HogQLParser.LIKE, 0)
        def ILIKE(self):
            return self.getToken(HogQLParser.ILIKE, 0)
        def REGEX_SINGLE(self):
            return self.getToken(HogQLParser.REGEX_SINGLE, 0)
        def REGEX_DOUBLE(self):
            return self.getToken(HogQLParser.REGEX_DOUBLE, 0)
        def NOT_REGEX(self):
            return self.getToken(HogQLParser.NOT_REGEX, 0)
        def IREGEX_SINGLE(self):
            return self.getToken(HogQLParser.IREGEX_SINGLE, 0)
        def IREGEX_DOUBLE(self):
            return self.getToken(HogQLParser.IREGEX_DOUBLE, 0)
        def NOT_IREGEX(self):
            return self.getToken(HogQLParser.NOT_IREGEX, 0)
        def COHORT(self):
            return self.getToken(HogQLParser.COHORT, 0)
        def NOT(self):
            return self.getToken(HogQLParser.NOT, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprPrecedence3" ):
                return visitor.visitColumnExprPrecedence3(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprIntervalContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INTERVAL(self):
            return self.getToken(HogQLParser.INTERVAL, 0)
        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def interval(self):
            return self.getTypedRuleContext(HogQLParser.IntervalContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprInterval" ):
                return visitor.visitColumnExprInterval(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprIsNullContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def IS(self):
            return self.getToken(HogQLParser.IS, 0)
        def NULL_SQL(self):
            return self.getToken(HogQLParser.NULL_SQL, 0)
        def NOT(self):
            return self.getToken(HogQLParser.NOT, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprIsNull" ):
                return visitor.visitColumnExprIsNull(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprWinFunctionTargetContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(HogQLParser.IdentifierContext,i)

        def OVER(self):
            return self.getToken(HogQLParser.OVER, 0)
        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.LPAREN)
            else:
                return self.getToken(HogQLParser.LPAREN, i)
        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.RPAREN)
            else:
                return self.getToken(HogQLParser.RPAREN, i)
        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)

        def DISTINCT(self):
            return self.getToken(HogQLParser.DISTINCT, 0)
        def columnArgList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnArgListContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprWinFunctionTarget" ):
                return visitor.visitColumnExprWinFunctionTarget(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprTrimContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TRIM(self):
            return self.getToken(HogQLParser.TRIM, 0)
        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def string(self):
            return self.getTypedRuleContext(HogQLParser.StringContext,0)

        def FROM(self):
            return self.getToken(HogQLParser.FROM, 0)
        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)
        def BOTH(self):
            return self.getToken(HogQLParser.BOTH, 0)
        def LEADING(self):
            return self.getToken(HogQLParser.LEADING, 0)
        def TRAILING(self):
            return self.getToken(HogQLParser.TRAILING, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprTrim" ):
                return visitor.visitColumnExprTrim(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprTagElementContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def hogqlxTagElement(self):
            return self.getTypedRuleContext(HogQLParser.HogqlxTagElementContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprTagElement" ):
                return visitor.visitColumnExprTagElement(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprTemplateStringContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def templateString(self):
            return self.getTypedRuleContext(HogQLParser.TemplateStringContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprTemplateString" ):
                return visitor.visitColumnExprTemplateString(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprTupleContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprTuple" ):
                return visitor.visitColumnExprTuple(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprArrayAccessContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def LBRACKET(self):
            return self.getToken(HogQLParser.LBRACKET, 0)
        def RBRACKET(self):
            return self.getToken(HogQLParser.RBRACKET, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprArrayAccess" ):
                return visitor.visitColumnExprArrayAccess(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprBetweenContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def BETWEEN(self):
            return self.getToken(HogQLParser.BETWEEN, 0)
        def AND(self):
            return self.getToken(HogQLParser.AND, 0)
        def NOT(self):
            return self.getToken(HogQLParser.NOT, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprBetween" ):
                return visitor.visitColumnExprBetween(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprPropertyAccessContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def DOT(self):
            return self.getToken(HogQLParser.DOT, 0)
        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprPropertyAccess" ):
                return visitor.visitColumnExprPropertyAccess(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprParensContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprParens" ):
                return visitor.visitColumnExprParens(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprTimestampContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TIMESTAMP(self):
            return self.getToken(HogQLParser.TIMESTAMP, 0)
        def STRING_LITERAL(self):
            return self.getToken(HogQLParser.STRING_LITERAL, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprTimestamp" ):
                return visitor.visitColumnExprTimestamp(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprNullishContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def NULLISH(self):
            return self.getToken(HogQLParser.NULLISH, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprNullish" ):
                return visitor.visitColumnExprNullish(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprAndContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def AND(self):
            return self.getToken(HogQLParser.AND, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprAnd" ):
                return visitor.visitColumnExprAnd(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprTupleAccessContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def DOT(self):
            return self.getToken(HogQLParser.DOT, 0)
        def DECIMAL_LITERAL(self):
            return self.getToken(HogQLParser.DECIMAL_LITERAL, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprTupleAccess" ):
                return visitor.visitColumnExprTupleAccess(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprCaseContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.caseExpr = None # ColumnExprContext
            self.whenExpr = None # ColumnExprContext
            self.thenExpr = None # ColumnExprContext
            self.elseExpr = None # ColumnExprContext
            self.copyFrom(ctx)

        def CASE(self):
            return self.getToken(HogQLParser.CASE, 0)
        def END(self):
            return self.getToken(HogQLParser.END, 0)
        def WHEN(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.WHEN)
            else:
                return self.getToken(HogQLParser.WHEN, i)
        def THEN(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.THEN)
            else:
                return self.getToken(HogQLParser.THEN, i)
        def ELSE(self):
            return self.getToken(HogQLParser.ELSE, 0)
        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprCase" ):
                return visitor.visitColumnExprCase(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprDateContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DATE(self):
            return self.getToken(HogQLParser.DATE, 0)
        def STRING_LITERAL(self):
            return self.getToken(HogQLParser.STRING_LITERAL, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprDate" ):
                return visitor.visitColumnExprDate(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprNotContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NOT(self):
            return self.getToken(HogQLParser.NOT, 0)
        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprNot" ):
                return visitor.visitColumnExprNot(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprWinFunctionContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)

        def OVER(self):
            return self.getToken(HogQLParser.OVER, 0)
        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.LPAREN)
            else:
                return self.getToken(HogQLParser.LPAREN, i)
        def windowExpr(self):
            return self.getTypedRuleContext(HogQLParser.WindowExprContext,0)

        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.RPAREN)
            else:
                return self.getToken(HogQLParser.RPAREN, i)
        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)

        def DISTINCT(self):
            return self.getToken(HogQLParser.DISTINCT, 0)
        def columnArgList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnArgListContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprWinFunction" ):
                return visitor.visitColumnExprWinFunction(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprIdentifierContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnIdentifier(self):
            return self.getTypedRuleContext(HogQLParser.ColumnIdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprIdentifier" ):
                return visitor.visitColumnExprIdentifier(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprFunctionContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)

        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.LPAREN)
            else:
                return self.getToken(HogQLParser.LPAREN, i)
        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.RPAREN)
            else:
                return self.getToken(HogQLParser.RPAREN, i)
        def DISTINCT(self):
            return self.getToken(HogQLParser.DISTINCT, 0)
        def columnArgList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnArgListContext,0)

        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprFunction" ):
                return visitor.visitColumnExprFunction(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprAsteriskContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ASTERISK(self):
            return self.getToken(HogQLParser.ASTERISK, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(HogQLParser.TableIdentifierContext,0)

        def DOT(self):
            return self.getToken(HogQLParser.DOT, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprAsterisk" ):
                return visitor.visitColumnExprAsterisk(self)
            else:
                return visitor.visitChildren(self)



    def columnExpr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = HogQLParser.ColumnExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 106
        self.enterRecursionRule(localctx, 106, self.RULE_columnExpr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 832
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
            if la_ == 1:
                localctx = HogQLParser.ColumnExprCaseContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 684
                self.match(HogQLParser.CASE)
                self.state = 686
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
                if la_ == 1:
                    self.state = 685
                    localctx.caseExpr = self.columnExpr(0)


                self.state = 693 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 688
                    self.match(HogQLParser.WHEN)
                    self.state = 689
                    localctx.whenExpr = self.columnExpr(0)
                    self.state = 690
                    self.match(HogQLParser.THEN)
                    self.state = 691
                    localctx.thenExpr = self.columnExpr(0)
                    self.state = 695 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==94):
                        break

                self.state = 699
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==24:
                    self.state = 697
                    self.match(HogQLParser.ELSE)
                    self.state = 698
                    localctx.elseExpr = self.columnExpr(0)


                self.state = 701
                self.match(HogQLParser.END)
                pass

            elif la_ == 2:
                localctx = HogQLParser.ColumnExprCastContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 703
                self.match(HogQLParser.CAST)
                self.state = 704
                self.match(HogQLParser.LPAREN)
                self.state = 705
                self.columnExpr(0)
                self.state = 706
                self.match(HogQLParser.AS)
                self.state = 707
                self.columnTypeExpr()
                self.state = 708
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 3:
                localctx = HogQLParser.ColumnExprDateContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 710
                self.match(HogQLParser.DATE)
                self.state = 711
                self.match(HogQLParser.STRING_LITERAL)
                pass

            elif la_ == 4:
                localctx = HogQLParser.ColumnExprIntervalContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 712
                self.match(HogQLParser.INTERVAL)
                self.state = 713
                self.columnExpr(0)
                self.state = 714
                self.interval()
                pass

            elif la_ == 5:
                localctx = HogQLParser.ColumnExprSubstringContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 716
                self.match(HogQLParser.SUBSTRING)
                self.state = 717
                self.match(HogQLParser.LPAREN)
                self.state = 718
                self.columnExpr(0)
                self.state = 719
                self.match(HogQLParser.FROM)
                self.state = 720
                self.columnExpr(0)
                self.state = 723
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==31:
                    self.state = 721
                    self.match(HogQLParser.FOR)
                    self.state = 722
                    self.columnExpr(0)


                self.state = 725
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 6:
                localctx = HogQLParser.ColumnExprTimestampContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 727
                self.match(HogQLParser.TIMESTAMP)
                self.state = 728
                self.match(HogQLParser.STRING_LITERAL)
                pass

            elif la_ == 7:
                localctx = HogQLParser.ColumnExprTrimContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 729
                self.match(HogQLParser.TRIM)
                self.state = 730
                self.match(HogQLParser.LPAREN)
                self.state = 731
                _la = self._input.LA(1)
                if not(_la==10 or _la==48 or _la==87):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 732
                self.string()
                self.state = 733
                self.match(HogQLParser.FROM)
                self.state = 734
                self.columnExpr(0)
                self.state = 735
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 8:
                localctx = HogQLParser.ColumnExprWinFunctionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 737
                self.identifier()

                self.state = 738
                self.match(HogQLParser.LPAREN)
                self.state = 740
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -1125900443713538) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 8076106347046764543) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 577) != 0):
                    self.state = 739
                    self.columnExprList()


                self.state = 742
                self.match(HogQLParser.RPAREN)
                self.state = 752
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==126:
                    self.state = 744
                    self.match(HogQLParser.LPAREN)
                    self.state = 746
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
                    if la_ == 1:
                        self.state = 745
                        self.match(HogQLParser.DISTINCT)


                    self.state = 749
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & -1125900443713538) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 8076106347046764543) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 577) != 0):
                        self.state = 748
                        self.columnArgList()


                    self.state = 751
                    self.match(HogQLParser.RPAREN)


                self.state = 754
                self.match(HogQLParser.OVER)
                self.state = 755
                self.match(HogQLParser.LPAREN)
                self.state = 756
                self.windowExpr()
                self.state = 757
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 9:
                localctx = HogQLParser.ColumnExprWinFunctionTargetContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 759
                self.identifier()

                self.state = 760
                self.match(HogQLParser.LPAREN)
                self.state = 762
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -1125900443713538) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 8076106347046764543) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 577) != 0):
                    self.state = 761
                    self.columnExprList()


                self.state = 764
                self.match(HogQLParser.RPAREN)
                self.state = 774
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==126:
                    self.state = 766
                    self.match(HogQLParser.LPAREN)
                    self.state = 768
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
                    if la_ == 1:
                        self.state = 767
                        self.match(HogQLParser.DISTINCT)


                    self.state = 771
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & -1125900443713538) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 8076106347046764543) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 577) != 0):
                        self.state = 770
                        self.columnArgList()


                    self.state = 773
                    self.match(HogQLParser.RPAREN)


                self.state = 776
                self.match(HogQLParser.OVER)
                self.state = 777
                self.identifier()
                pass

            elif la_ == 10:
                localctx = HogQLParser.ColumnExprFunctionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 779
                self.identifier()
                self.state = 785
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
                if la_ == 1:
                    self.state = 780
                    self.match(HogQLParser.LPAREN)
                    self.state = 782
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & -1125900443713538) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 8076106347046764543) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 577) != 0):
                        self.state = 781
                        self.columnExprList()


                    self.state = 784
                    self.match(HogQLParser.RPAREN)


                self.state = 787
                self.match(HogQLParser.LPAREN)
                self.state = 789
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,91,self._ctx)
                if la_ == 1:
                    self.state = 788
                    self.match(HogQLParser.DISTINCT)


                self.state = 792
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -1125900443713538) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 8076106347046764543) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 577) != 0):
                    self.state = 791
                    self.columnArgList()


                self.state = 794
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 11:
                localctx = HogQLParser.ColumnExprTagElementContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 796
                self.hogqlxTagElement()
                pass

            elif la_ == 12:
                localctx = HogQLParser.ColumnExprTemplateStringContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 797
                self.templateString()
                pass

            elif la_ == 13:
                localctx = HogQLParser.ColumnExprLiteralContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 798
                self.literal()
                pass

            elif la_ == 14:
                localctx = HogQLParser.ColumnExprNegateContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 799
                self.match(HogQLParser.DASH)
                self.state = 800
                self.columnExpr(19)
                pass

            elif la_ == 15:
                localctx = HogQLParser.ColumnExprNotContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 801
                self.match(HogQLParser.NOT)
                self.state = 802
                self.columnExpr(13)
                pass

            elif la_ == 16:
                localctx = HogQLParser.ColumnExprAsteriskContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 806
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -181272084561788930) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 201863462911) != 0):
                    self.state = 803
                    self.tableIdentifier()
                    self.state = 804
                    self.match(HogQLParser.DOT)


                self.state = 808
                self.match(HogQLParser.ASTERISK)
                pass

            elif la_ == 17:
                localctx = HogQLParser.ColumnExprSubqueryContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 809
                self.match(HogQLParser.LPAREN)
                self.state = 810
                self.selectUnionStmt()
                self.state = 811
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 18:
                localctx = HogQLParser.ColumnExprParensContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 813
                self.match(HogQLParser.LPAREN)
                self.state = 814
                self.columnExpr(0)
                self.state = 815
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 19:
                localctx = HogQLParser.ColumnExprTupleContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 817
                self.match(HogQLParser.LPAREN)
                self.state = 818
                self.columnExprList()
                self.state = 819
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 20:
                localctx = HogQLParser.ColumnExprArrayContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 821
                self.match(HogQLParser.LBRACKET)
                self.state = 823
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -1125900443713538) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 8076106347046764543) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 577) != 0):
                    self.state = 822
                    self.columnExprList()


                self.state = 825
                self.match(HogQLParser.RBRACKET)
                pass

            elif la_ == 21:
                localctx = HogQLParser.ColumnExprDictContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 826
                self.match(HogQLParser.LBRACE)
                self.state = 828
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -1125900443713538) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 8076106347046764543) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 577) != 0):
                    self.state = 827
                    self.kvPairList()


                self.state = 830
                self.match(HogQLParser.RBRACE)
                pass

            elif la_ == 22:
                localctx = HogQLParser.ColumnExprIdentifierContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 831
                self.columnIdentifier()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 927
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,107,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 925
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
                    if la_ == 1:
                        localctx = HogQLParser.ColumnExprPrecedence1Context(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 834
                        if not self.precpred(self._ctx, 18):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 18)")
                        self.state = 838
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [108]:
                            self.state = 835
                            localctx.operator = self.match(HogQLParser.ASTERISK)
                            pass
                        elif token in [146]:
                            self.state = 836
                            localctx.operator = self.match(HogQLParser.SLASH)
                            pass
                        elif token in [133]:
                            self.state = 837
                            localctx.operator = self.match(HogQLParser.PERCENT)
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 840
                        localctx.right = self.columnExpr(19)
                        pass

                    elif la_ == 2:
                        localctx = HogQLParser.ColumnExprPrecedence2Context(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 841
                        if not self.precpred(self._ctx, 17):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 17)")
                        self.state = 845
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [134]:
                            self.state = 842
                            localctx.operator = self.match(HogQLParser.PLUS)
                            pass
                        elif token in [114]:
                            self.state = 843
                            localctx.operator = self.match(HogQLParser.DASH)
                            pass
                        elif token in [113]:
                            self.state = 844
                            localctx.operator = self.match(HogQLParser.CONCAT)
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 847
                        localctx.right = self.columnExpr(18)
                        pass

                    elif la_ == 3:
                        localctx = HogQLParser.ColumnExprPrecedence3Context(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 848
                        if not self.precpred(self._ctx, 16):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 16)")
                        self.state = 873
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,102,self._ctx)
                        if la_ == 1:
                            self.state = 849
                            localctx.operator = self.match(HogQLParser.EQ_DOUBLE)
                            pass

                        elif la_ == 2:
                            self.state = 850
                            localctx.operator = self.match(HogQLParser.EQ_SINGLE)
                            pass

                        elif la_ == 3:
                            self.state = 851
                            localctx.operator = self.match(HogQLParser.NOT_EQ)
                            pass

                        elif la_ == 4:
                            self.state = 852
                            localctx.operator = self.match(HogQLParser.LT_EQ)
                            pass

                        elif la_ == 5:
                            self.state = 853
                            localctx.operator = self.match(HogQLParser.LT)
                            pass

                        elif la_ == 6:
                            self.state = 854
                            localctx.operator = self.match(HogQLParser.GT_EQ)
                            pass

                        elif la_ == 7:
                            self.state = 855
                            localctx.operator = self.match(HogQLParser.GT)
                            pass

                        elif la_ == 8:
                            self.state = 857
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==56:
                                self.state = 856
                                localctx.operator = self.match(HogQLParser.NOT)


                            self.state = 859
                            self.match(HogQLParser.IN)
                            self.state = 861
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,100,self._ctx)
                            if la_ == 1:
                                self.state = 860
                                self.match(HogQLParser.COHORT)


                            pass

                        elif la_ == 9:
                            self.state = 864
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==56:
                                self.state = 863
                                localctx.operator = self.match(HogQLParser.NOT)


                            self.state = 866
                            _la = self._input.LA(1)
                            if not(_la==39 or _la==51):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            pass

                        elif la_ == 10:
                            self.state = 867
                            localctx.operator = self.match(HogQLParser.REGEX_SINGLE)
                            pass

                        elif la_ == 11:
                            self.state = 868
                            localctx.operator = self.match(HogQLParser.REGEX_DOUBLE)
                            pass

                        elif la_ == 12:
                            self.state = 869
                            localctx.operator = self.match(HogQLParser.NOT_REGEX)
                            pass

                        elif la_ == 13:
                            self.state = 870
                            localctx.operator = self.match(HogQLParser.IREGEX_SINGLE)
                            pass

                        elif la_ == 14:
                            self.state = 871
                            localctx.operator = self.match(HogQLParser.IREGEX_DOUBLE)
                            pass

                        elif la_ == 15:
                            self.state = 872
                            localctx.operator = self.match(HogQLParser.NOT_IREGEX)
                            pass


                        self.state = 875
                        localctx.right = self.columnExpr(17)
                        pass

                    elif la_ == 4:
                        localctx = HogQLParser.ColumnExprNullishContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 876
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 877
                        self.match(HogQLParser.NULLISH)
                        self.state = 878
                        self.columnExpr(15)
                        pass

                    elif la_ == 5:
                        localctx = HogQLParser.ColumnExprAndContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 879
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 880
                        self.match(HogQLParser.AND)
                        self.state = 881
                        self.columnExpr(13)
                        pass

                    elif la_ == 6:
                        localctx = HogQLParser.ColumnExprOrContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 882
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 883
                        self.match(HogQLParser.OR)
                        self.state = 884
                        self.columnExpr(12)
                        pass

                    elif la_ == 7:
                        localctx = HogQLParser.ColumnExprBetweenContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 885
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 887
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==56:
                            self.state = 886
                            self.match(HogQLParser.NOT)


                        self.state = 889
                        self.match(HogQLParser.BETWEEN)
                        self.state = 890
                        self.columnExpr(0)
                        self.state = 891
                        self.match(HogQLParser.AND)
                        self.state = 892
                        self.columnExpr(11)
                        pass

                    elif la_ == 8:
                        localctx = HogQLParser.ColumnExprTernaryOpContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 894
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 895
                        self.match(HogQLParser.QUERY)
                        self.state = 896
                        self.columnExpr(0)
                        self.state = 897
                        self.match(HogQLParser.COLON)
                        self.state = 898
                        self.columnExpr(9)
                        pass

                    elif la_ == 9:
                        localctx = HogQLParser.ColumnExprArrayAccessContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 900
                        if not self.precpred(self._ctx, 22):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 22)")
                        self.state = 901
                        self.match(HogQLParser.LBRACKET)
                        self.state = 902
                        self.columnExpr(0)
                        self.state = 903
                        self.match(HogQLParser.RBRACKET)
                        pass

                    elif la_ == 10:
                        localctx = HogQLParser.ColumnExprTupleAccessContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 905
                        if not self.precpred(self._ctx, 21):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 21)")
                        self.state = 906
                        self.match(HogQLParser.DOT)
                        self.state = 907
                        self.match(HogQLParser.DECIMAL_LITERAL)
                        pass

                    elif la_ == 11:
                        localctx = HogQLParser.ColumnExprPropertyAccessContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 908
                        if not self.precpred(self._ctx, 20):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 20)")
                        self.state = 909
                        self.match(HogQLParser.DOT)
                        self.state = 910
                        self.identifier()
                        pass

                    elif la_ == 12:
                        localctx = HogQLParser.ColumnExprIsNullContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 911
                        if not self.precpred(self._ctx, 15):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 15)")
                        self.state = 912
                        self.match(HogQLParser.IS)
                        self.state = 914
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==56:
                            self.state = 913
                            self.match(HogQLParser.NOT)


                        self.state = 916
                        self.match(HogQLParser.NULL_SQL)
                        pass

                    elif la_ == 13:
                        localctx = HogQLParser.ColumnExprAliasContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 917
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 923
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
                        if la_ == 1:
                            self.state = 918
                            self.alias()
                            pass

                        elif la_ == 2:
                            self.state = 919
                            self.match(HogQLParser.AS)
                            self.state = 920
                            self.identifier()
                            pass

                        elif la_ == 3:
                            self.state = 921
                            self.match(HogQLParser.AS)
                            self.state = 922
                            self.match(HogQLParser.STRING_LITERAL)
                            pass


                        pass

             
                self.state = 929
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,107,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ColumnArgListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnArgExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnArgExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnArgExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_columnArgList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnArgList" ):
                return visitor.visitColumnArgList(self)
            else:
                return visitor.visitChildren(self)




    def columnArgList(self):

        localctx = HogQLParser.ColumnArgListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_columnArgList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 930
            self.columnArgExpr()
            self.state = 935
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==112:
                self.state = 931
                self.match(HogQLParser.COMMA)
                self.state = 932
                self.columnArgExpr()
                self.state = 937
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnArgExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnLambdaExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnLambdaExprContext,0)


        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_columnArgExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnArgExpr" ):
                return visitor.visitColumnArgExpr(self)
            else:
                return visitor.visitChildren(self)




    def columnArgExpr(self):

        localctx = HogQLParser.ColumnArgExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_columnArgExpr)
        try:
            self.state = 940
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,109,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 938
                self.columnLambdaExpr()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 939
                self.columnExpr(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnLambdaExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ARROW(self):
            return self.getToken(HogQLParser.ARROW, 0)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(HogQLParser.IdentifierContext,i)


        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_columnLambdaExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnLambdaExpr" ):
                return visitor.visitColumnLambdaExpr(self)
            else:
                return visitor.visitChildren(self)




    def columnLambdaExpr(self):

        localctx = HogQLParser.ColumnLambdaExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_columnLambdaExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 961
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [126]:
                self.state = 942
                self.match(HogQLParser.LPAREN)
                self.state = 943
                self.identifier()
                self.state = 948
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==112:
                    self.state = 944
                    self.match(HogQLParser.COMMA)
                    self.state = 945
                    self.identifier()
                    self.state = 950
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 951
                self.match(HogQLParser.RPAREN)
                pass
            elif token in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 101]:
                self.state = 953
                self.identifier()
                self.state = 958
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==112:
                    self.state = 954
                    self.match(HogQLParser.COMMA)
                    self.state = 955
                    self.identifier()
                    self.state = 960
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

            self.state = 963
            self.match(HogQLParser.ARROW)
            self.state = 964
            self.columnExpr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HogqlxTagElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return HogQLParser.RULE_hogqlxTagElement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class HogqlxTagElementClosedContext(HogqlxTagElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.HogqlxTagElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LT(self):
            return self.getToken(HogQLParser.LT, 0)
        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)

        def SLASH(self):
            return self.getToken(HogQLParser.SLASH, 0)
        def GT(self):
            return self.getToken(HogQLParser.GT, 0)
        def hogqlxTagAttribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.HogqlxTagAttributeContext)
            else:
                return self.getTypedRuleContext(HogQLParser.HogqlxTagAttributeContext,i)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHogqlxTagElementClosed" ):
                return visitor.visitHogqlxTagElementClosed(self)
            else:
                return visitor.visitChildren(self)


    class HogqlxTagElementNestedContext(HogqlxTagElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.HogqlxTagElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LT(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.LT)
            else:
                return self.getToken(HogQLParser.LT, i)
        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(HogQLParser.IdentifierContext,i)

        def GT(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.GT)
            else:
                return self.getToken(HogQLParser.GT, i)
        def SLASH(self):
            return self.getToken(HogQLParser.SLASH, 0)
        def hogqlxTagAttribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.HogqlxTagAttributeContext)
            else:
                return self.getTypedRuleContext(HogQLParser.HogqlxTagAttributeContext,i)

        def hogqlxTagElement(self):
            return self.getTypedRuleContext(HogQLParser.HogqlxTagElementContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHogqlxTagElementNested" ):
                return visitor.visitHogqlxTagElementNested(self)
            else:
                return visitor.visitChildren(self)



    def hogqlxTagElement(self):

        localctx = HogQLParser.HogqlxTagElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_hogqlxTagElement)
        self._la = 0 # Token type
        try:
            self.state = 994
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,116,self._ctx)
            if la_ == 1:
                localctx = HogQLParser.HogqlxTagElementClosedContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 966
                self.match(HogQLParser.LT)
                self.state = 967
                self.identifier()
                self.state = 971
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & -181272084561788930) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 201863462911) != 0):
                    self.state = 968
                    self.hogqlxTagAttribute()
                    self.state = 973
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 974
                self.match(HogQLParser.SLASH)
                self.state = 975
                self.match(HogQLParser.GT)
                pass

            elif la_ == 2:
                localctx = HogQLParser.HogqlxTagElementNestedContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 977
                self.match(HogQLParser.LT)
                self.state = 978
                self.identifier()
                self.state = 982
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & -181272084561788930) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 201863462911) != 0):
                    self.state = 979
                    self.hogqlxTagAttribute()
                    self.state = 984
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 985
                self.match(HogQLParser.GT)
                self.state = 987
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,115,self._ctx)
                if la_ == 1:
                    self.state = 986
                    self.hogqlxTagElement()


                self.state = 989
                self.match(HogQLParser.LT)
                self.state = 990
                self.match(HogQLParser.SLASH)
                self.state = 991
                self.identifier()
                self.state = 992
                self.match(HogQLParser.GT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HogqlxTagAttributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def EQ_SINGLE(self):
            return self.getToken(HogQLParser.EQ_SINGLE, 0)

        def string(self):
            return self.getTypedRuleContext(HogQLParser.StringContext,0)


        def LBRACE(self):
            return self.getToken(HogQLParser.LBRACE, 0)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def RBRACE(self):
            return self.getToken(HogQLParser.RBRACE, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_hogqlxTagAttribute

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHogqlxTagAttribute" ):
                return visitor.visitHogqlxTagAttribute(self)
            else:
                return visitor.visitChildren(self)




    def hogqlxTagAttribute(self):

        localctx = HogQLParser.HogqlxTagAttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_hogqlxTagAttribute)
        try:
            self.state = 1007
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,117,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 996
                self.identifier()
                self.state = 997
                self.match(HogQLParser.EQ_SINGLE)
                self.state = 998
                self.string()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1000
                self.identifier()
                self.state = 1001
                self.match(HogQLParser.EQ_SINGLE)
                self.state = 1002
                self.match(HogQLParser.LBRACE)
                self.state = 1003
                self.columnExpr(0)
                self.state = 1004
                self.match(HogQLParser.RBRACE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1006
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WithExprListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def withExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.WithExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.WithExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_withExprList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWithExprList" ):
                return visitor.visitWithExprList(self)
            else:
                return visitor.visitChildren(self)




    def withExprList(self):

        localctx = HogQLParser.WithExprListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_withExprList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1009
            self.withExpr()
            self.state = 1014
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==112:
                self.state = 1010
                self.match(HogQLParser.COMMA)
                self.state = 1011
                self.withExpr()
                self.state = 1016
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WithExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return HogQLParser.RULE_withExpr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class WithExprColumnContext(WithExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.WithExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def AS(self):
            return self.getToken(HogQLParser.AS, 0)
        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWithExprColumn" ):
                return visitor.visitWithExprColumn(self)
            else:
                return visitor.visitChildren(self)


    class WithExprSubqueryContext(WithExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.WithExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)

        def AS(self):
            return self.getToken(HogQLParser.AS, 0)
        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def selectUnionStmt(self):
            return self.getTypedRuleContext(HogQLParser.SelectUnionStmtContext,0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWithExprSubquery" ):
                return visitor.visitWithExprSubquery(self)
            else:
                return visitor.visitChildren(self)



    def withExpr(self):

        localctx = HogQLParser.WithExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_withExpr)
        try:
            self.state = 1027
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
            if la_ == 1:
                localctx = HogQLParser.WithExprSubqueryContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1017
                self.identifier()
                self.state = 1018
                self.match(HogQLParser.AS)
                self.state = 1019
                self.match(HogQLParser.LPAREN)
                self.state = 1020
                self.selectUnionStmt()
                self.state = 1021
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 2:
                localctx = HogQLParser.WithExprColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1023
                self.columnExpr(0)
                self.state = 1024
                self.match(HogQLParser.AS)
                self.state = 1025
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def placeholder(self):
            return self.getTypedRuleContext(HogQLParser.PlaceholderContext,0)


        def nestedIdentifier(self):
            return self.getTypedRuleContext(HogQLParser.NestedIdentifierContext,0)


        def tableIdentifier(self):
            return self.getTypedRuleContext(HogQLParser.TableIdentifierContext,0)


        def DOT(self):
            return self.getToken(HogQLParser.DOT, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_columnIdentifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnIdentifier" ):
                return visitor.visitColumnIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def columnIdentifier(self):

        localctx = HogQLParser.ColumnIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_columnIdentifier)
        try:
            self.state = 1036
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [124]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1029
                self.placeholder()
                pass
            elif token in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 101]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1033
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,120,self._ctx)
                if la_ == 1:
                    self.state = 1030
                    self.tableIdentifier()
                    self.state = 1031
                    self.match(HogQLParser.DOT)


                self.state = 1035
                self.nestedIdentifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NestedIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(HogQLParser.IdentifierContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.DOT)
            else:
                return self.getToken(HogQLParser.DOT, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_nestedIdentifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNestedIdentifier" ):
                return visitor.visitNestedIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def nestedIdentifier(self):

        localctx = HogQLParser.NestedIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_nestedIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1038
            self.identifier()
            self.state = 1043
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,122,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1039
                    self.match(HogQLParser.DOT)
                    self.state = 1040
                    self.identifier() 
                self.state = 1045
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,122,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return HogQLParser.RULE_tableExpr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class TableExprTagContext(TableExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.TableExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def hogqlxTagElement(self):
            return self.getTypedRuleContext(HogQLParser.HogqlxTagElementContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableExprTag" ):
                return visitor.visitTableExprTag(self)
            else:
                return visitor.visitChildren(self)


    class TableExprIdentifierContext(TableExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.TableExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tableIdentifier(self):
            return self.getTypedRuleContext(HogQLParser.TableIdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableExprIdentifier" ):
                return visitor.visitTableExprIdentifier(self)
            else:
                return visitor.visitChildren(self)


    class TableExprPlaceholderContext(TableExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.TableExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def placeholder(self):
            return self.getTypedRuleContext(HogQLParser.PlaceholderContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableExprPlaceholder" ):
                return visitor.visitTableExprPlaceholder(self)
            else:
                return visitor.visitChildren(self)


    class TableExprSubqueryContext(TableExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.TableExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def selectUnionStmt(self):
            return self.getTypedRuleContext(HogQLParser.SelectUnionStmtContext,0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableExprSubquery" ):
                return visitor.visitTableExprSubquery(self)
            else:
                return visitor.visitChildren(self)


    class TableExprAliasContext(TableExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.TableExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tableExpr(self):
            return self.getTypedRuleContext(HogQLParser.TableExprContext,0)

        def alias(self):
            return self.getTypedRuleContext(HogQLParser.AliasContext,0)

        def AS(self):
            return self.getToken(HogQLParser.AS, 0)
        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableExprAlias" ):
                return visitor.visitTableExprAlias(self)
            else:
                return visitor.visitChildren(self)


    class TableExprFunctionContext(TableExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.TableExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tableFunctionExpr(self):
            return self.getTypedRuleContext(HogQLParser.TableFunctionExprContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableExprFunction" ):
                return visitor.visitTableExprFunction(self)
            else:
                return visitor.visitChildren(self)



    def tableExpr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = HogQLParser.TableExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 126
        self.enterRecursionRule(localctx, 126, self.RULE_tableExpr, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1055
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,123,self._ctx)
            if la_ == 1:
                localctx = HogQLParser.TableExprIdentifierContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 1047
                self.tableIdentifier()
                pass

            elif la_ == 2:
                localctx = HogQLParser.TableExprFunctionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1048
                self.tableFunctionExpr()
                pass

            elif la_ == 3:
                localctx = HogQLParser.TableExprSubqueryContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1049
                self.match(HogQLParser.LPAREN)
                self.state = 1050
                self.selectUnionStmt()
                self.state = 1051
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 4:
                localctx = HogQLParser.TableExprTagContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1053
                self.hogqlxTagElement()
                pass

            elif la_ == 5:
                localctx = HogQLParser.TableExprPlaceholderContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1054
                self.placeholder()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1065
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,125,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = HogQLParser.TableExprAliasContext(self, HogQLParser.TableExprContext(self, _parentctx, _parentState))
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_tableExpr)
                    self.state = 1057
                    if not self.precpred(self._ctx, 3):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                    self.state = 1061
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [19, 28, 37, 46, 101]:
                        self.state = 1058
                        self.alias()
                        pass
                    elif token in [6]:
                        self.state = 1059
                        self.match(HogQLParser.AS)
                        self.state = 1060
                        self.identifier()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 1067
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,125,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class TableFunctionExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def tableArgList(self):
            return self.getTypedRuleContext(HogQLParser.TableArgListContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_tableFunctionExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableFunctionExpr" ):
                return visitor.visitTableFunctionExpr(self)
            else:
                return visitor.visitChildren(self)




    def tableFunctionExpr(self):

        localctx = HogQLParser.TableFunctionExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_tableFunctionExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1068
            self.identifier()
            self.state = 1069
            self.match(HogQLParser.LPAREN)
            self.state = 1071
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -1125900443713538) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 8076106347046764543) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 577) != 0):
                self.state = 1070
                self.tableArgList()


            self.state = 1073
            self.match(HogQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def databaseIdentifier(self):
            return self.getTypedRuleContext(HogQLParser.DatabaseIdentifierContext,0)


        def DOT(self):
            return self.getToken(HogQLParser.DOT, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_tableIdentifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableIdentifier" ):
                return visitor.visitTableIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def tableIdentifier(self):

        localctx = HogQLParser.TableIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_tableIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1078
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,127,self._ctx)
            if la_ == 1:
                self.state = 1075
                self.databaseIdentifier()
                self.state = 1076
                self.match(HogQLParser.DOT)


            self.state = 1080
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableArgListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_tableArgList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableArgList" ):
                return visitor.visitTableArgList(self)
            else:
                return visitor.visitChildren(self)




    def tableArgList(self):

        localctx = HogQLParser.TableArgListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_tableArgList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1082
            self.columnExpr(0)
            self.state = 1087
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==112:
                self.state = 1083
                self.match(HogQLParser.COMMA)
                self.state = 1084
                self.columnExpr(0)
                self.state = 1089
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DatabaseIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_databaseIdentifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDatabaseIdentifier" ):
                return visitor.visitDatabaseIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def databaseIdentifier(self):

        localctx = HogQLParser.DatabaseIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_databaseIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1090
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FloatingLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FLOATING_LITERAL(self):
            return self.getToken(HogQLParser.FLOATING_LITERAL, 0)

        def DOT(self):
            return self.getToken(HogQLParser.DOT, 0)

        def DECIMAL_LITERAL(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.DECIMAL_LITERAL)
            else:
                return self.getToken(HogQLParser.DECIMAL_LITERAL, i)

        def OCTAL_LITERAL(self):
            return self.getToken(HogQLParser.OCTAL_LITERAL, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_floatingLiteral

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFloatingLiteral" ):
                return visitor.visitFloatingLiteral(self)
            else:
                return visitor.visitChildren(self)




    def floatingLiteral(self):

        localctx = HogQLParser.FloatingLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_floatingLiteral)
        self._la = 0 # Token type
        try:
            self.state = 1100
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [102]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1092
                self.match(HogQLParser.FLOATING_LITERAL)
                pass
            elif token in [116]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1093
                self.match(HogQLParser.DOT)
                self.state = 1094
                _la = self._input.LA(1)
                if not(_la==103 or _la==104):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [104]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1095
                self.match(HogQLParser.DECIMAL_LITERAL)
                self.state = 1096
                self.match(HogQLParser.DOT)
                self.state = 1098
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,129,self._ctx)
                if la_ == 1:
                    self.state = 1097
                    _la = self._input.LA(1)
                    if not(_la==103 or _la==104):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumberLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def floatingLiteral(self):
            return self.getTypedRuleContext(HogQLParser.FloatingLiteralContext,0)


        def OCTAL_LITERAL(self):
            return self.getToken(HogQLParser.OCTAL_LITERAL, 0)

        def DECIMAL_LITERAL(self):
            return self.getToken(HogQLParser.DECIMAL_LITERAL, 0)

        def HEXADECIMAL_LITERAL(self):
            return self.getToken(HogQLParser.HEXADECIMAL_LITERAL, 0)

        def INF(self):
            return self.getToken(HogQLParser.INF, 0)

        def NAN_SQL(self):
            return self.getToken(HogQLParser.NAN_SQL, 0)

        def PLUS(self):
            return self.getToken(HogQLParser.PLUS, 0)

        def DASH(self):
            return self.getToken(HogQLParser.DASH, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_numberLiteral

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumberLiteral" ):
                return visitor.visitNumberLiteral(self)
            else:
                return visitor.visitChildren(self)




    def numberLiteral(self):

        localctx = HogQLParser.NumberLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_numberLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1103
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==114 or _la==134:
                self.state = 1102
                _la = self._input.LA(1)
                if not(_la==114 or _la==134):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1111
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,132,self._ctx)
            if la_ == 1:
                self.state = 1105
                self.floatingLiteral()
                pass

            elif la_ == 2:
                self.state = 1106
                self.match(HogQLParser.OCTAL_LITERAL)
                pass

            elif la_ == 3:
                self.state = 1107
                self.match(HogQLParser.DECIMAL_LITERAL)
                pass

            elif la_ == 4:
                self.state = 1108
                self.match(HogQLParser.HEXADECIMAL_LITERAL)
                pass

            elif la_ == 5:
                self.state = 1109
                self.match(HogQLParser.INF)
                pass

            elif la_ == 6:
                self.state = 1110
                self.match(HogQLParser.NAN_SQL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numberLiteral(self):
            return self.getTypedRuleContext(HogQLParser.NumberLiteralContext,0)


        def STRING_LITERAL(self):
            return self.getToken(HogQLParser.STRING_LITERAL, 0)

        def NULL_SQL(self):
            return self.getToken(HogQLParser.NULL_SQL, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_literal

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteral" ):
                return visitor.visitLiteral(self)
            else:
                return visitor.visitChildren(self)




    def literal(self):

        localctx = HogQLParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_literal)
        try:
            self.state = 1116
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [41, 55, 102, 103, 104, 105, 114, 116, 134]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1113
                self.numberLiteral()
                pass
            elif token in [106]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1114
                self.match(HogQLParser.STRING_LITERAL)
                pass
            elif token in [57]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1115
                self.match(HogQLParser.NULL_SQL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SECOND(self):
            return self.getToken(HogQLParser.SECOND, 0)

        def MINUTE(self):
            return self.getToken(HogQLParser.MINUTE, 0)

        def HOUR(self):
            return self.getToken(HogQLParser.HOUR, 0)

        def DAY(self):
            return self.getToken(HogQLParser.DAY, 0)

        def WEEK(self):
            return self.getToken(HogQLParser.WEEK, 0)

        def MONTH(self):
            return self.getToken(HogQLParser.MONTH, 0)

        def QUARTER(self):
            return self.getToken(HogQLParser.QUARTER, 0)

        def YEAR(self):
            return self.getToken(HogQLParser.YEAR, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_interval

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterval" ):
                return visitor.visitInterval(self)
            else:
                return visitor.visitChildren(self)




    def interval(self):

        localctx = HogQLParser.IntervalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_interval)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1118
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 27021666484748288) != 0) or ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & 2181038337) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(HogQLParser.ALL, 0)

        def AND(self):
            return self.getToken(HogQLParser.AND, 0)

        def ANTI(self):
            return self.getToken(HogQLParser.ANTI, 0)

        def ANY(self):
            return self.getToken(HogQLParser.ANY, 0)

        def ARRAY(self):
            return self.getToken(HogQLParser.ARRAY, 0)

        def AS(self):
            return self.getToken(HogQLParser.AS, 0)

        def ASCENDING(self):
            return self.getToken(HogQLParser.ASCENDING, 0)

        def ASOF(self):
            return self.getToken(HogQLParser.ASOF, 0)

        def BETWEEN(self):
            return self.getToken(HogQLParser.BETWEEN, 0)

        def BOTH(self):
            return self.getToken(HogQLParser.BOTH, 0)

        def BY(self):
            return self.getToken(HogQLParser.BY, 0)

        def CASE(self):
            return self.getToken(HogQLParser.CASE, 0)

        def CAST(self):
            return self.getToken(HogQLParser.CAST, 0)

        def COHORT(self):
            return self.getToken(HogQLParser.COHORT, 0)

        def COLLATE(self):
            return self.getToken(HogQLParser.COLLATE, 0)

        def CROSS(self):
            return self.getToken(HogQLParser.CROSS, 0)

        def CUBE(self):
            return self.getToken(HogQLParser.CUBE, 0)

        def CURRENT(self):
            return self.getToken(HogQLParser.CURRENT, 0)

        def DATE(self):
            return self.getToken(HogQLParser.DATE, 0)

        def DESC(self):
            return self.getToken(HogQLParser.DESC, 0)

        def DESCENDING(self):
            return self.getToken(HogQLParser.DESCENDING, 0)

        def DISTINCT(self):
            return self.getToken(HogQLParser.DISTINCT, 0)

        def ELSE(self):
            return self.getToken(HogQLParser.ELSE, 0)

        def END(self):
            return self.getToken(HogQLParser.END, 0)

        def EXTRACT(self):
            return self.getToken(HogQLParser.EXTRACT, 0)

        def FINAL(self):
            return self.getToken(HogQLParser.FINAL, 0)

        def FIRST(self):
            return self.getToken(HogQLParser.FIRST, 0)

        def FOR(self):
            return self.getToken(HogQLParser.FOR, 0)

        def FOLLOWING(self):
            return self.getToken(HogQLParser.FOLLOWING, 0)

        def FROM(self):
            return self.getToken(HogQLParser.FROM, 0)

        def FULL(self):
            return self.getToken(HogQLParser.FULL, 0)

        def GROUP(self):
            return self.getToken(HogQLParser.GROUP, 0)

        def HAVING(self):
            return self.getToken(HogQLParser.HAVING, 0)

        def ID(self):
            return self.getToken(HogQLParser.ID, 0)

        def IF(self):
            return self.getToken(HogQLParser.IF, 0)

        def ILIKE(self):
            return self.getToken(HogQLParser.ILIKE, 0)

        def IN(self):
            return self.getToken(HogQLParser.IN, 0)

        def INNER(self):
            return self.getToken(HogQLParser.INNER, 0)

        def INTERVAL(self):
            return self.getToken(HogQLParser.INTERVAL, 0)

        def IS(self):
            return self.getToken(HogQLParser.IS, 0)

        def JOIN(self):
            return self.getToken(HogQLParser.JOIN, 0)

        def KEY(self):
            return self.getToken(HogQLParser.KEY, 0)

        def LAST(self):
            return self.getToken(HogQLParser.LAST, 0)

        def LEADING(self):
            return self.getToken(HogQLParser.LEADING, 0)

        def LEFT(self):
            return self.getToken(HogQLParser.LEFT, 0)

        def LIKE(self):
            return self.getToken(HogQLParser.LIKE, 0)

        def LIMIT(self):
            return self.getToken(HogQLParser.LIMIT, 0)

        def NOT(self):
            return self.getToken(HogQLParser.NOT, 0)

        def NULLS(self):
            return self.getToken(HogQLParser.NULLS, 0)

        def OFFSET(self):
            return self.getToken(HogQLParser.OFFSET, 0)

        def ON(self):
            return self.getToken(HogQLParser.ON, 0)

        def OR(self):
            return self.getToken(HogQLParser.OR, 0)

        def ORDER(self):
            return self.getToken(HogQLParser.ORDER, 0)

        def OUTER(self):
            return self.getToken(HogQLParser.OUTER, 0)

        def OVER(self):
            return self.getToken(HogQLParser.OVER, 0)

        def PARTITION(self):
            return self.getToken(HogQLParser.PARTITION, 0)

        def PRECEDING(self):
            return self.getToken(HogQLParser.PRECEDING, 0)

        def PREWHERE(self):
            return self.getToken(HogQLParser.PREWHERE, 0)

        def RANGE(self):
            return self.getToken(HogQLParser.RANGE, 0)

        def RETURN(self):
            return self.getToken(HogQLParser.RETURN, 0)

        def RIGHT(self):
            return self.getToken(HogQLParser.RIGHT, 0)

        def ROLLUP(self):
            return self.getToken(HogQLParser.ROLLUP, 0)

        def ROW(self):
            return self.getToken(HogQLParser.ROW, 0)

        def ROWS(self):
            return self.getToken(HogQLParser.ROWS, 0)

        def SAMPLE(self):
            return self.getToken(HogQLParser.SAMPLE, 0)

        def SELECT(self):
            return self.getToken(HogQLParser.SELECT, 0)

        def SEMI(self):
            return self.getToken(HogQLParser.SEMI, 0)

        def SETTINGS(self):
            return self.getToken(HogQLParser.SETTINGS, 0)

        def SUBSTRING(self):
            return self.getToken(HogQLParser.SUBSTRING, 0)

        def THEN(self):
            return self.getToken(HogQLParser.THEN, 0)

        def TIES(self):
            return self.getToken(HogQLParser.TIES, 0)

        def TIMESTAMP(self):
            return self.getToken(HogQLParser.TIMESTAMP, 0)

        def TOTALS(self):
            return self.getToken(HogQLParser.TOTALS, 0)

        def TRAILING(self):
            return self.getToken(HogQLParser.TRAILING, 0)

        def TRIM(self):
            return self.getToken(HogQLParser.TRIM, 0)

        def TRUNCATE(self):
            return self.getToken(HogQLParser.TRUNCATE, 0)

        def TO(self):
            return self.getToken(HogQLParser.TO, 0)

        def TOP(self):
            return self.getToken(HogQLParser.TOP, 0)

        def UNBOUNDED(self):
            return self.getToken(HogQLParser.UNBOUNDED, 0)

        def UNION(self):
            return self.getToken(HogQLParser.UNION, 0)

        def USING(self):
            return self.getToken(HogQLParser.USING, 0)

        def WHEN(self):
            return self.getToken(HogQLParser.WHEN, 0)

        def WHERE(self):
            return self.getToken(HogQLParser.WHERE, 0)

        def WINDOW(self):
            return self.getToken(HogQLParser.WINDOW, 0)

        def WITH(self):
            return self.getToken(HogQLParser.WITH, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_keyword

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKeyword" ):
                return visitor.visitKeyword(self)
            else:
                return visitor.visitChildren(self)




    def keyword(self):

        localctx = HogQLParser.KeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_keyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1120
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & -208293751046537218) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 29527896047) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeywordForAliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATE(self):
            return self.getToken(HogQLParser.DATE, 0)

        def FIRST(self):
            return self.getToken(HogQLParser.FIRST, 0)

        def ID(self):
            return self.getToken(HogQLParser.ID, 0)

        def KEY(self):
            return self.getToken(HogQLParser.KEY, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_keywordForAlias

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKeywordForAlias" ):
                return visitor.visitKeywordForAlias(self)
            else:
                return visitor.visitChildren(self)




    def keywordForAlias(self):

        localctx = HogQLParser.KeywordForAliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_keywordForAlias)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1122
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 70506452090880) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(HogQLParser.IDENTIFIER, 0)

        def keywordForAlias(self):
            return self.getTypedRuleContext(HogQLParser.KeywordForAliasContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_alias

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlias" ):
                return visitor.visitAlias(self)
            else:
                return visitor.visitChildren(self)




    def alias(self):

        localctx = HogQLParser.AliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_alias)
        try:
            self.state = 1126
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [101]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1124
                self.match(HogQLParser.IDENTIFIER)
                pass
            elif token in [19, 28, 37, 46]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1125
                self.keywordForAlias()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(HogQLParser.IDENTIFIER, 0)

        def interval(self):
            return self.getTypedRuleContext(HogQLParser.IntervalContext,0)


        def keyword(self):
            return self.getTypedRuleContext(HogQLParser.KeywordContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_identifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifier" ):
                return visitor.visitIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def identifier(self):

        localctx = HogQLParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_identifier)
        try:
            self.state = 1131
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [101]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1128
                self.match(HogQLParser.IDENTIFIER)
                pass
            elif token in [20, 36, 53, 54, 68, 76, 93, 99]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1129
                self.interval()
                pass
            elif token in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 97, 98]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1130
                self.keyword()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def string(self):
            return self.getTypedRuleContext(HogQLParser.StringContext,0)


        def EQ_SINGLE(self):
            return self.getToken(HogQLParser.EQ_SINGLE, 0)

        def numberLiteral(self):
            return self.getTypedRuleContext(HogQLParser.NumberLiteralContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_enumValue

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumValue" ):
                return visitor.visitEnumValue(self)
            else:
                return visitor.visitChildren(self)




    def enumValue(self):

        localctx = HogQLParser.EnumValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_enumValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1133
            self.string()
            self.state = 1134
            self.match(HogQLParser.EQ_SINGLE)
            self.state = 1135
            self.numberLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PlaceholderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(HogQLParser.LBRACE, 0)

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def RBRACE(self):
            return self.getToken(HogQLParser.RBRACE, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_placeholder

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPlaceholder" ):
                return visitor.visitPlaceholder(self)
            else:
                return visitor.visitChildren(self)




    def placeholder(self):

        localctx = HogQLParser.PlaceholderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_placeholder)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1137
            self.match(HogQLParser.LBRACE)
            self.state = 1138
            self.identifier()
            self.state = 1139
            self.match(HogQLParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(HogQLParser.STRING_LITERAL, 0)

        def templateString(self):
            return self.getTypedRuleContext(HogQLParser.TemplateStringContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_string

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitString" ):
                return visitor.visitString(self)
            else:
                return visitor.visitChildren(self)




    def string(self):

        localctx = HogQLParser.StringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_string)
        try:
            self.state = 1143
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [106]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1141
                self.match(HogQLParser.STRING_LITERAL)
                pass
            elif token in [137]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1142
                self.templateString()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TemplateStringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUOTE_SINGLE_TEMPLATE(self):
            return self.getToken(HogQLParser.QUOTE_SINGLE_TEMPLATE, 0)

        def QUOTE_SINGLE(self):
            return self.getToken(HogQLParser.QUOTE_SINGLE, 0)

        def stringContents(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.StringContentsContext)
            else:
                return self.getTypedRuleContext(HogQLParser.StringContentsContext,i)


        def getRuleIndex(self):
            return HogQLParser.RULE_templateString

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTemplateString" ):
                return visitor.visitTemplateString(self)
            else:
                return visitor.visitChildren(self)




    def templateString(self):

        localctx = HogQLParser.TemplateStringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_templateString)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1145
            self.match(HogQLParser.QUOTE_SINGLE_TEMPLATE)
            self.state = 1149
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==151 or _la==152:
                self.state = 1146
                self.stringContents()
                self.state = 1151
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1152
            self.match(HogQLParser.QUOTE_SINGLE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringContentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_ESCAPE_TRIGGER(self):
            return self.getToken(HogQLParser.STRING_ESCAPE_TRIGGER, 0)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def RBRACE(self):
            return self.getToken(HogQLParser.RBRACE, 0)

        def STRING_TEXT(self):
            return self.getToken(HogQLParser.STRING_TEXT, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_stringContents

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringContents" ):
                return visitor.visitStringContents(self)
            else:
                return visitor.visitChildren(self)




    def stringContents(self):

        localctx = HogQLParser.StringContentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_stringContents)
        try:
            self.state = 1159
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [152]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1154
                self.match(HogQLParser.STRING_ESCAPE_TRIGGER)
                self.state = 1155
                self.columnExpr(0)
                self.state = 1156
                self.match(HogQLParser.RBRACE)
                pass
            elif token in [151]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1158
                self.match(HogQLParser.STRING_TEXT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FullTemplateStringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUOTE_SINGLE_TEMPLATE_FULL(self):
            return self.getToken(HogQLParser.QUOTE_SINGLE_TEMPLATE_FULL, 0)

        def EOF(self):
            return self.getToken(HogQLParser.EOF, 0)

        def stringContentsFull(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.StringContentsFullContext)
            else:
                return self.getTypedRuleContext(HogQLParser.StringContentsFullContext,i)


        def getRuleIndex(self):
            return HogQLParser.RULE_fullTemplateString

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFullTemplateString" ):
                return visitor.visitFullTemplateString(self)
            else:
                return visitor.visitChildren(self)




    def fullTemplateString(self):

        localctx = HogQLParser.FullTemplateStringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_fullTemplateString)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1161
            self.match(HogQLParser.QUOTE_SINGLE_TEMPLATE_FULL)
            self.state = 1165
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==153 or _la==154:
                self.state = 1162
                self.stringContentsFull()
                self.state = 1167
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1168
            self.match(HogQLParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringContentsFullContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FULL_STRING_ESCAPE_TRIGGER(self):
            return self.getToken(HogQLParser.FULL_STRING_ESCAPE_TRIGGER, 0)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def RBRACE(self):
            return self.getToken(HogQLParser.RBRACE, 0)

        def FULL_STRING_TEXT(self):
            return self.getToken(HogQLParser.FULL_STRING_TEXT, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_stringContentsFull

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringContentsFull" ):
                return visitor.visitStringContentsFull(self)
            else:
                return visitor.visitChildren(self)




    def stringContentsFull(self):

        localctx = HogQLParser.StringContentsFullContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_stringContentsFull)
        try:
            self.state = 1175
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [154]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1170
                self.match(HogQLParser.FULL_STRING_ESCAPE_TRIGGER)
                self.state = 1171
                self.columnExpr(0)
                self.state = 1172
                self.match(HogQLParser.RBRACE)
                pass
            elif token in [153]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1174
                self.match(HogQLParser.FULL_STRING_TEXT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[34] = self.joinExpr_sempred
        self._predicates[53] = self.columnExpr_sempred
        self._predicates[63] = self.tableExpr_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def joinExpr_sempred(self, localctx:JoinExprContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 4)
         

    def columnExpr_sempred(self, localctx:ColumnExprContext, predIndex:int):
            if predIndex == 2:
                return self.precpred(self._ctx, 18)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 17)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 16)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 14)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 22)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 21)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 20)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 15)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 8)
         

    def tableExpr_sempred(self, localctx:TableExprContext, predIndex:int):
            if predIndex == 15:
                return self.precpred(self._ctx, 3)
         




