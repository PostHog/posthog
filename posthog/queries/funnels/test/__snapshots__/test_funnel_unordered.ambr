# name: TestFunnelUnorderedStepsBreakdown.test_funnel_breakdown_correct_breakdown_props_are_chosen
  '
  
  SELECT groupArray(value)
  FROM
    (SELECT array(replaceRegexpAll(JSONExtractRaw(properties, '$browser'), '^"|"$', '')) AS value,
            count(*) as count
     FROM events e
     WHERE team_id = 2
       AND event IN ['buy', 'sign up']
       AND timestamp >= toDateTime('2020-01-01 00:00:00')
       AND timestamp <= toDateTime('2020-01-08 23:59:59')
     GROUP BY value
     ORDER BY count DESC, value DESC
     LIMIT 25
     OFFSET 0)
  '
---
# name: TestFunnelUnorderedStepsBreakdown.test_funnel_breakdown_correct_breakdown_props_are_chosen.1
  '
  
  SELECT groupArray(value)
  FROM
    (SELECT array(replaceRegexpAll(JSONExtractRaw(properties, '$browser'), '^"|"$', '')) AS value,
            count(*) as count
     FROM events e
     WHERE team_id = 2
       AND event IN ['buy', 'sign up']
       AND timestamp >= toDateTime('2020-01-01 00:00:00')
       AND timestamp <= toDateTime('2020-01-08 23:59:59')
     GROUP BY value
     ORDER BY count DESC, value DESC
     LIMIT 25
     OFFSET 0)
  '
---
# name: TestFunnelUnorderedStepsBreakdown.test_funnel_breakdown_correct_breakdown_props_are_chosen.2
  '
  
  SELECT countIf(steps = 1) step_1,
         countIf(steps = 2) step_2,
         avg(step_1_average_conversion_time_inner) step_1_average_conversion_time,
         median(step_1_median_conversion_time_inner) step_1_median_conversion_time,
         prop
  FROM
    (SELECT aggregation_target,
            steps,
            avg(step_1_conversion_time) step_1_average_conversion_time_inner,
            median(step_1_conversion_time) step_1_median_conversion_time_inner,
            prop
     FROM
       (SELECT aggregation_target,
               steps,
               max(steps) over (PARTITION BY aggregation_target,
                                             prop) as max_steps,
                               step_1_conversion_time,
                               prop
        FROM
          (SELECT *,
                  arraySort([latest_0,latest_1]) as event_times,
                  arraySum([if(latest_0 < latest_1 AND latest_1 <= latest_0 + INTERVAL 7 DAY, 1, 0), 1]) AS steps ,
                  arraySort([latest_0,latest_1]) as conversion_times,
                  if(isNotNull(conversion_times[2])
                     AND conversion_times[2] <= conversion_times[1] + INTERVAL 7 DAY, dateDiff('second', conversion_times[1], conversion_times[2]), NULL) step_1_conversion_time
           FROM
             (SELECT aggregation_target,
                     timestamp,
                     step_0,
                     latest_0,
                     step_1,
                     min(latest_1) over (PARTITION by aggregation_target,
                                                      prop
                                         ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_1 ,
                                        if(has([[''], ['Mac'], ['Chrome'], ['Safari']], prop), prop, ['Other']) as prop
              FROM
                (SELECT *,
                        if(notEmpty(arrayFilter(x -> notEmpty(x), prop_vals)), prop_vals, ['']) as prop
                 FROM
                   (SELECT aggregation_target,
                           timestamp,
                           if(event = 'sign up', 1, 0) as step_0,
                           if(step_0 = 1, timestamp, null) as latest_0,
                           if(event = 'buy'
                              AND (has(['xyz'], replaceRegexpAll(JSONExtractRaw(properties, '$version'), '^"|"$', ''))), 1, 0) as step_1,
                           if(step_1 = 1, timestamp, null) as latest_1,
                           array(replaceRegexpAll(JSONExtractRaw(properties, '$browser'), '^"|"$', '')) AS prop_basic,
                           prop_basic as prop,
                           argMinIf(prop, timestamp, notEmpty(arrayFilter(x -> notEmpty(x), prop))) over (PARTITION by aggregation_target) as prop_vals
                    FROM
                      (SELECT e.event as event,
                              e.team_id as team_id,
                              e.distinct_id as distinct_id,
                              e.timestamp as timestamp,
                              pdi.person_id as aggregation_target,
                              e."properties" as "properties",
                              pdi.person_id as person_id
                       FROM events e
                       INNER JOIN
                         (SELECT distinct_id,
                                 argMax(person_id, version) as person_id
                          FROM person_distinct_id2
                          WHERE team_id = 2
                          GROUP BY distinct_id
                          HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
                       WHERE team_id = 2
                         AND event IN ['buy', 'sign up']
                         AND timestamp >= toDateTime('2020-01-01 00:00:00')
                         AND timestamp <= toDateTime('2020-01-08 23:59:59') ) events
                    WHERE (step_0 = 1
                           OR step_1 = 1) )))
           WHERE step_0 = 1
           UNION ALL SELECT *,
                            arraySort([latest_0,latest_1]) as event_times,
                            arraySum([if(latest_0 < latest_1 AND latest_1 <= latest_0 + INTERVAL 7 DAY, 1, 0), 1]) AS steps ,
                            arraySort([latest_0,latest_1]) as conversion_times,
                            if(isNotNull(conversion_times[2])
                               AND conversion_times[2] <= conversion_times[1] + INTERVAL 7 DAY, dateDiff('second', conversion_times[1], conversion_times[2]), NULL) step_1_conversion_time
           FROM
             (SELECT aggregation_target,
                     timestamp,
                     step_0,
                     latest_0,
                     step_1,
                     min(latest_1) over (PARTITION by aggregation_target,
                                                      prop
                                         ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_1 ,
                                        if(has([[''], ['Mac'], ['Chrome'], ['Safari']], prop), prop, ['Other']) as prop
              FROM
                (SELECT *,
                        if(notEmpty(arrayFilter(x -> notEmpty(x), prop_vals)), prop_vals, ['']) as prop
                 FROM
                   (SELECT aggregation_target,
                           timestamp,
                           if(event = 'buy'
                              AND (has(['xyz'], replaceRegexpAll(JSONExtractRaw(properties, '$version'), '^"|"$', ''))), 1, 0) as step_0,
                           if(step_0 = 1, timestamp, null) as latest_0,
                           if(event = 'sign up', 1, 0) as step_1,
                           if(step_1 = 1, timestamp, null) as latest_1,
                           array(replaceRegexpAll(JSONExtractRaw(properties, '$browser'), '^"|"$', '')) AS prop_basic,
                           prop_basic as prop,
                           argMinIf(prop, timestamp, notEmpty(arrayFilter(x -> notEmpty(x), prop))) over (PARTITION by aggregation_target) as prop_vals
                    FROM
                      (SELECT e.event as event,
                              e.team_id as team_id,
                              e.distinct_id as distinct_id,
                              e.timestamp as timestamp,
                              pdi.person_id as aggregation_target,
                              e."properties" as "properties",
                              pdi.person_id as person_id
                       FROM events e
                       INNER JOIN
                         (SELECT distinct_id,
                                 argMax(person_id, version) as person_id
                          FROM person_distinct_id2
                          WHERE team_id = 2
                          GROUP BY distinct_id
                          HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
                       WHERE team_id = 2
                         AND event IN ['buy', 'sign up']
                         AND timestamp >= toDateTime('2020-01-01 00:00:00')
                         AND timestamp <= toDateTime('2020-01-08 23:59:59') ) events
                    WHERE (step_0 = 1
                           OR step_1 = 1) )))
           WHERE step_0 = 1 ))
     GROUP BY aggregation_target,
              steps,
              prop
     HAVING steps = max_steps)
  GROUP BY prop SETTINGS allow_experimental_window_functions = 1
  '
---
# name: TestFunnelUnorderedStepsBreakdown.test_funnel_breakdown_correct_breakdown_props_are_chosen_for_step
  '
  
  SELECT groupArray(value)
  FROM
    (SELECT array(replaceRegexpAll(JSONExtractRaw(properties, '$browser'), '^"|"$', '')) AS value,
            count(*) as count
     FROM events e
     WHERE team_id = 2
       AND event IN ['buy', 'sign up']
       AND timestamp >= toDateTime('2020-01-01 00:00:00')
       AND timestamp <= toDateTime('2020-01-08 23:59:59')
     GROUP BY value
     ORDER BY count DESC, value DESC
     LIMIT 25
     OFFSET 0)
  '
---
# name: TestFunnelUnorderedStepsBreakdown.test_funnel_breakdown_correct_breakdown_props_are_chosen_for_step.1
  '
  
  SELECT groupArray(value)
  FROM
    (SELECT array(replaceRegexpAll(JSONExtractRaw(properties, '$browser'), '^"|"$', '')) AS value,
            count(*) as count
     FROM events e
     WHERE team_id = 2
       AND event IN ['buy', 'sign up']
       AND timestamp >= toDateTime('2020-01-01 00:00:00')
       AND timestamp <= toDateTime('2020-01-08 23:59:59')
     GROUP BY value
     ORDER BY count DESC, value DESC
     LIMIT 25
     OFFSET 0)
  '
---
# name: TestFunnelUnorderedStepsBreakdown.test_funnel_breakdown_correct_breakdown_props_are_chosen_for_step.2
  '
  
  SELECT countIf(steps = 1) step_1,
         countIf(steps = 2) step_2,
         avg(step_1_average_conversion_time_inner) step_1_average_conversion_time,
         median(step_1_median_conversion_time_inner) step_1_median_conversion_time,
         prop
  FROM
    (SELECT aggregation_target,
            steps,
            avg(step_1_conversion_time) step_1_average_conversion_time_inner,
            median(step_1_conversion_time) step_1_median_conversion_time_inner,
            prop
     FROM
       (SELECT aggregation_target,
               steps,
               max(steps) over (PARTITION BY aggregation_target,
                                             prop) as max_steps,
                               step_1_conversion_time,
                               prop
        FROM
          (SELECT *,
                  arraySort([latest_0,latest_1]) as event_times,
                  arraySum([if(latest_0 < latest_1 AND latest_1 <= latest_0 + INTERVAL 7 DAY, 1, 0), 1]) AS steps ,
                  arraySort([latest_0,latest_1]) as conversion_times,
                  if(isNotNull(conversion_times[2])
                     AND conversion_times[2] <= conversion_times[1] + INTERVAL 7 DAY, dateDiff('second', conversion_times[1], conversion_times[2]), NULL) step_1_conversion_time
           FROM
             (SELECT aggregation_target,
                     timestamp,
                     step_0,
                     latest_0,
                     step_1,
                     min(latest_1) over (PARTITION by aggregation_target,
                                                      prop
                                         ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_1 ,
                                        if(has([[''], ['Mac'], ['Chrome'], ['Safari']], prop), prop, ['Other']) as prop
              FROM
                (SELECT *,
                        prop
                 FROM
                   (SELECT aggregation_target,
                           timestamp,
                           if(event = 'sign up', 1, 0) as step_0,
                           if(step_0 = 1, timestamp, null) as latest_0,
                           if(event = 'buy'
                              AND (has(['xyz'], replaceRegexpAll(JSONExtractRaw(properties, '$version'), '^"|"$', ''))), 1, 0) as step_1,
                           if(step_1 = 1, timestamp, null) as latest_1,
                           array(replaceRegexpAll(JSONExtractRaw(properties, '$browser'), '^"|"$', '')) AS prop_basic,
                           if(step_0 = 1, prop_basic, []) as prop_0,
                           if(step_1 = 1, prop_basic, []) as prop_1,
                           prop_1 as prop,
                           groupUniqArray(prop) over (PARTITION by aggregation_target) as prop_vals
                    FROM
                      (SELECT e.event as event,
                              e.team_id as team_id,
                              e.distinct_id as distinct_id,
                              e.timestamp as timestamp,
                              pdi.person_id as aggregation_target,
                              e."properties" as "properties",
                              pdi.person_id as person_id
                       FROM events e
                       INNER JOIN
                         (SELECT distinct_id,
                                 argMax(person_id, version) as person_id
                          FROM person_distinct_id2
                          WHERE team_id = 2
                          GROUP BY distinct_id
                          HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
                       WHERE team_id = 2
                         AND event IN ['buy', 'sign up']
                         AND timestamp >= toDateTime('2020-01-01 00:00:00')
                         AND timestamp <= toDateTime('2020-01-08 23:59:59') ) events
                    WHERE (step_0 = 1
                           OR step_1 = 1) ) ARRAY
                 JOIN prop_vals as prop
                 WHERE prop != [] ))
           WHERE step_0 = 1
           UNION ALL SELECT *,
                            arraySort([latest_0,latest_1]) as event_times,
                            arraySum([if(latest_0 < latest_1 AND latest_1 <= latest_0 + INTERVAL 7 DAY, 1, 0), 1]) AS steps ,
                            arraySort([latest_0,latest_1]) as conversion_times,
                            if(isNotNull(conversion_times[2])
                               AND conversion_times[2] <= conversion_times[1] + INTERVAL 7 DAY, dateDiff('second', conversion_times[1], conversion_times[2]), NULL) step_1_conversion_time
           FROM
             (SELECT aggregation_target,
                     timestamp,
                     step_0,
                     latest_0,
                     step_1,
                     min(latest_1) over (PARTITION by aggregation_target,
                                                      prop
                                         ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_1 ,
                                        if(has([[''], ['Mac'], ['Chrome'], ['Safari']], prop), prop, ['Other']) as prop
              FROM
                (SELECT *,
                        prop
                 FROM
                   (SELECT aggregation_target,
                           timestamp,
                           if(event = 'buy'
                              AND (has(['xyz'], replaceRegexpAll(JSONExtractRaw(properties, '$version'), '^"|"$', ''))), 1, 0) as step_0,
                           if(step_0 = 1, timestamp, null) as latest_0,
                           if(event = 'sign up', 1, 0) as step_1,
                           if(step_1 = 1, timestamp, null) as latest_1,
                           array(replaceRegexpAll(JSONExtractRaw(properties, '$browser'), '^"|"$', '')) AS prop_basic,
                           if(step_0 = 1, prop_basic, []) as prop_0,
                           if(step_1 = 1, prop_basic, []) as prop_1,
                           prop_1 as prop,
                           groupUniqArray(prop) over (PARTITION by aggregation_target) as prop_vals
                    FROM
                      (SELECT e.event as event,
                              e.team_id as team_id,
                              e.distinct_id as distinct_id,
                              e.timestamp as timestamp,
                              pdi.person_id as aggregation_target,
                              e."properties" as "properties",
                              pdi.person_id as person_id
                       FROM events e
                       INNER JOIN
                         (SELECT distinct_id,
                                 argMax(person_id, version) as person_id
                          FROM person_distinct_id2
                          WHERE team_id = 2
                          GROUP BY distinct_id
                          HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
                       WHERE team_id = 2
                         AND event IN ['buy', 'sign up']
                         AND timestamp >= toDateTime('2020-01-01 00:00:00')
                         AND timestamp <= toDateTime('2020-01-08 23:59:59') ) events
                    WHERE (step_0 = 1
                           OR step_1 = 1) ) ARRAY
                 JOIN prop_vals as prop
                 WHERE prop != [] ))
           WHERE step_0 = 1 ))
     GROUP BY aggregation_target,
              steps,
              prop
     HAVING steps = max_steps)
  GROUP BY prop SETTINGS allow_experimental_window_functions = 1
  '
---
# name: TestFunnelUnorderedStepsBreakdown.test_funnel_step_multiple_breakdown_snapshot
  '
  
  SELECT groupArray(value)
  FROM
    (SELECT array(replaceRegexpAll(JSONExtractRaw(properties, '$browser'), '^"|"$', ''), replaceRegexpAll(JSONExtractRaw(properties, '$version'), '^"|"$', '')) AS value,
            count(*) as count
     FROM events e
     WHERE team_id = 2
       AND event IN ['buy', 'sign up']
       AND timestamp >= toDateTime('2020-01-01 00:00:00')
       AND timestamp <= toDateTime('2020-01-08 23:59:59')
     GROUP BY value
     ORDER BY count DESC, value DESC
     LIMIT 25
     OFFSET 0)
  '
---
# name: TestFunnelUnorderedStepsBreakdown.test_funnel_step_multiple_breakdown_snapshot.1
  '
  
  SELECT groupArray(value)
  FROM
    (SELECT array(replaceRegexpAll(JSONExtractRaw(properties, '$browser'), '^"|"$', ''), replaceRegexpAll(JSONExtractRaw(properties, '$version'), '^"|"$', '')) AS value,
            count(*) as count
     FROM events e
     WHERE team_id = 2
       AND event IN ['buy', 'sign up']
       AND timestamp >= toDateTime('2020-01-01 00:00:00')
       AND timestamp <= toDateTime('2020-01-08 23:59:59')
     GROUP BY value
     ORDER BY count DESC, value DESC
     LIMIT 25
     OFFSET 0)
  '
---
# name: TestFunnelUnorderedStepsBreakdown.test_funnel_step_multiple_breakdown_snapshot.2
  '
  
  SELECT countIf(steps = 1) step_1,
         countIf(steps = 2) step_2,
         avg(step_1_average_conversion_time_inner) step_1_average_conversion_time,
         median(step_1_median_conversion_time_inner) step_1_median_conversion_time,
         prop
  FROM
    (SELECT aggregation_target,
            steps,
            avg(step_1_conversion_time) step_1_average_conversion_time_inner,
            median(step_1_conversion_time) step_1_median_conversion_time_inner,
            prop
     FROM
       (SELECT aggregation_target,
               steps,
               max(steps) over (PARTITION BY aggregation_target,
                                             prop) as max_steps,
                               step_1_conversion_time,
                               prop
        FROM
          (SELECT *,
                  arraySort([latest_0,latest_1]) as event_times,
                  arraySum([if(latest_0 < latest_1 AND latest_1 <= latest_0 + INTERVAL 7 DAY, 1, 0), 1]) AS steps ,
                  arraySort([latest_0,latest_1]) as conversion_times,
                  if(isNotNull(conversion_times[2])
                     AND conversion_times[2] <= conversion_times[1] + INTERVAL 7 DAY, dateDiff('second', conversion_times[1], conversion_times[2]), NULL) step_1_conversion_time
           FROM
             (SELECT aggregation_target,
                     timestamp,
                     step_0,
                     latest_0,
                     step_1,
                     min(latest_1) over (PARTITION by aggregation_target,
                                                      prop
                                         ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_1 ,
                                        if(has([['', ''], ['alakazam', ''], ['Safari', 'xyz'], ['Mac', ''], ['Chrome', 'xyz'], ['0', '0'], ['', 'no-mac']], prop), prop, ['Other']) as prop
              FROM
                (SELECT *,
                        if(notEmpty(arrayFilter(x -> notEmpty(x), prop_vals)), prop_vals, ['','']) as prop
                 FROM
                   (SELECT aggregation_target,
                           timestamp,
                           if(event = 'sign up', 1, 0) as step_0,
                           if(step_0 = 1, timestamp, null) as latest_0,
                           if(event = 'buy', 1, 0) as step_1,
                           if(step_1 = 1, timestamp, null) as latest_1,
                           array(replaceRegexpAll(JSONExtractRaw(properties, '$browser'), '^"|"$', ''), replaceRegexpAll(JSONExtractRaw(properties, '$version'), '^"|"$', '')) AS prop_basic,
                           prop_basic as prop,
                           argMinIf(prop, timestamp, notEmpty(arrayFilter(x -> notEmpty(x), prop))) over (PARTITION by aggregation_target) as prop_vals
                    FROM
                      (SELECT e.event as event,
                              e.team_id as team_id,
                              e.distinct_id as distinct_id,
                              e.timestamp as timestamp,
                              pdi.person_id as aggregation_target,
                              e."properties" as "properties",
                              pdi.person_id as person_id
                       FROM events e
                       INNER JOIN
                         (SELECT distinct_id,
                                 argMax(person_id, version) as person_id
                          FROM person_distinct_id2
                          WHERE team_id = 2
                          GROUP BY distinct_id
                          HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
                       WHERE team_id = 2
                         AND event IN ['buy', 'sign up']
                         AND timestamp >= toDateTime('2020-01-01 00:00:00')
                         AND timestamp <= toDateTime('2020-01-08 23:59:59') ) events
                    WHERE (step_0 = 1
                           OR step_1 = 1) )))
           WHERE step_0 = 1
           UNION ALL SELECT *,
                            arraySort([latest_0,latest_1]) as event_times,
                            arraySum([if(latest_0 < latest_1 AND latest_1 <= latest_0 + INTERVAL 7 DAY, 1, 0), 1]) AS steps ,
                            arraySort([latest_0,latest_1]) as conversion_times,
                            if(isNotNull(conversion_times[2])
                               AND conversion_times[2] <= conversion_times[1] + INTERVAL 7 DAY, dateDiff('second', conversion_times[1], conversion_times[2]), NULL) step_1_conversion_time
           FROM
             (SELECT aggregation_target,
                     timestamp,
                     step_0,
                     latest_0,
                     step_1,
                     min(latest_1) over (PARTITION by aggregation_target,
                                                      prop
                                         ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_1 ,
                                        if(has([['', ''], ['alakazam', ''], ['Safari', 'xyz'], ['Mac', ''], ['Chrome', 'xyz'], ['0', '0'], ['', 'no-mac']], prop), prop, ['Other']) as prop
              FROM
                (SELECT *,
                        if(notEmpty(arrayFilter(x -> notEmpty(x), prop_vals)), prop_vals, ['','']) as prop
                 FROM
                   (SELECT aggregation_target,
                           timestamp,
                           if(event = 'buy', 1, 0) as step_0,
                           if(step_0 = 1, timestamp, null) as latest_0,
                           if(event = 'sign up', 1, 0) as step_1,
                           if(step_1 = 1, timestamp, null) as latest_1,
                           array(replaceRegexpAll(JSONExtractRaw(properties, '$browser'), '^"|"$', ''), replaceRegexpAll(JSONExtractRaw(properties, '$version'), '^"|"$', '')) AS prop_basic,
                           prop_basic as prop,
                           argMinIf(prop, timestamp, notEmpty(arrayFilter(x -> notEmpty(x), prop))) over (PARTITION by aggregation_target) as prop_vals
                    FROM
                      (SELECT e.event as event,
                              e.team_id as team_id,
                              e.distinct_id as distinct_id,
                              e.timestamp as timestamp,
                              pdi.person_id as aggregation_target,
                              e."properties" as "properties",
                              pdi.person_id as person_id
                       FROM events e
                       INNER JOIN
                         (SELECT distinct_id,
                                 argMax(person_id, version) as person_id
                          FROM person_distinct_id2
                          WHERE team_id = 2
                          GROUP BY distinct_id
                          HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
                       WHERE team_id = 2
                         AND event IN ['buy', 'sign up']
                         AND timestamp >= toDateTime('2020-01-01 00:00:00')
                         AND timestamp <= toDateTime('2020-01-08 23:59:59') ) events
                    WHERE (step_0 = 1
                           OR step_1 = 1) )))
           WHERE step_0 = 1 ))
     GROUP BY aggregation_target,
              steps,
              prop
     HAVING steps = max_steps)
  GROUP BY prop SETTINGS allow_experimental_window_functions = 1
  '
---
