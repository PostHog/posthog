# name: TestFOSSFunnel.test_funnel_conversion_window_seconds
  '
  
  SELECT countIf(steps = 1) step_1,
         countIf(steps = 2) step_2,
         countIf(steps = 3) step_3,
         avg(step_1_average_conversion_time_inner) step_1_average_conversion_time,
         avg(step_2_average_conversion_time_inner) step_2_average_conversion_time,
         median(step_1_median_conversion_time_inner) step_1_median_conversion_time,
         median(step_2_median_conversion_time_inner) step_2_median_conversion_time
  FROM
    (SELECT aggregation_target,
            steps,
            avg(step_1_conversion_time) step_1_average_conversion_time_inner,
            avg(step_2_conversion_time) step_2_average_conversion_time_inner,
            median(step_1_conversion_time) step_1_median_conversion_time_inner,
            median(step_2_conversion_time) step_2_median_conversion_time_inner
     FROM
       (SELECT aggregation_target,
               steps,
               max(steps) over (PARTITION BY aggregation_target) as max_steps,
                               step_1_conversion_time,
                               step_2_conversion_time
        FROM
          (SELECT *,
                  if(latest_0 <= latest_1
                     AND latest_1 <= latest_0 + INTERVAL 15 SECOND
                     AND latest_1 <= latest_2
                     AND latest_2 <= latest_0 + INTERVAL 15 SECOND, 3, if(latest_0 <= latest_1
                                                                          AND latest_1 <= latest_0 + INTERVAL 15 SECOND, 2, 1)) AS steps ,
                  if(isNotNull(latest_1)
                     AND latest_1 <= latest_0 + INTERVAL 15 SECOND, dateDiff('second', toDateTime(latest_0), toDateTime(latest_1)), NULL) step_1_conversion_time,
                  if(isNotNull(latest_2)
                     AND latest_2 <= latest_1 + INTERVAL 15 SECOND, dateDiff('second', toDateTime(latest_1), toDateTime(latest_2)), NULL) step_2_conversion_time
           FROM
             (SELECT aggregation_target, timestamp, step_0,
                                                    latest_0,
                                                    step_1,
                                                    latest_1,
                                                    step_2,
                                                    min(latest_2) over (PARTITION by aggregation_target
                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_2
              FROM
                (SELECT aggregation_target, timestamp, step_0,
                                                       latest_0,
                                                       step_1,
                                                       latest_1,
                                                       step_2,
                                                       if(latest_2 < latest_1, NULL, latest_2) as latest_2
                 FROM
                   (SELECT aggregation_target, timestamp, step_0,
                                                          latest_0,
                                                          step_1,
                                                          min(latest_1) over (PARTITION by aggregation_target
                                                                              ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_1,
                                                                             step_2,
                                                                             min(latest_2) over (PARTITION by aggregation_target
                                                                                                 ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_2
                    FROM
                      (SELECT e.timestamp as timestamp,
                              pdi.person_id as aggregation_target,
                              pdi.person_id as person_id ,
                              if(event = 'step one', 1, 0) as step_0,
                              if(step_0 = 1, timestamp, null) as latest_0,
                              if(event = 'step two', 1, 0) as step_1,
                              if(step_1 = 1, timestamp, null) as latest_1,
                              if(event = 'step three', 1, 0) as step_2,
                              if(step_2 = 1, timestamp, null) as latest_2
                       FROM events e
                       INNER JOIN
                         (SELECT distinct_id,
                                 argMax(person_id, version) as person_id
                          FROM person_distinct_id2
                          WHERE team_id = 2
                          GROUP BY distinct_id
                          HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
                       WHERE team_id = 2
                         AND event IN ['step one', 'step three', 'step two']
                         AND toTimeZone(timestamp, 'UTC') >= toDateTime('2021-05-01 00:00:00', 'UTC')
                         AND toTimeZone(timestamp, 'UTC') <= toDateTime('2021-05-14 23:59:59', 'UTC')
                         AND (step_0 = 1
                              OR step_1 = 1
                              OR step_2 = 1) ))))
           WHERE step_0 = 1 ))
     GROUP BY aggregation_target,
              steps
     HAVING steps = max_steps)
  '
---
# name: TestFOSSFunnel.test_funnel_conversion_window_seconds.1
  '
  
  SELECT aggregation_target AS actor_id
  FROM
    (SELECT aggregation_target,
            steps,
            avg(step_1_conversion_time) step_1_average_conversion_time_inner,
            avg(step_2_conversion_time) step_2_average_conversion_time_inner,
            median(step_1_conversion_time) step_1_median_conversion_time_inner,
            median(step_2_conversion_time) step_2_median_conversion_time_inner
     FROM
       (SELECT aggregation_target,
               steps,
               max(steps) over (PARTITION BY aggregation_target) as max_steps,
                               step_1_conversion_time,
                               step_2_conversion_time
        FROM
          (SELECT *,
                  if(latest_0 <= latest_1
                     AND latest_1 <= latest_0 + INTERVAL 15 SECOND
                     AND latest_1 <= latest_2
                     AND latest_2 <= latest_0 + INTERVAL 15 SECOND, 3, if(latest_0 <= latest_1
                                                                          AND latest_1 <= latest_0 + INTERVAL 15 SECOND, 2, 1)) AS steps ,
                  if(isNotNull(latest_1)
                     AND latest_1 <= latest_0 + INTERVAL 15 SECOND, dateDiff('second', toDateTime(latest_0), toDateTime(latest_1)), NULL) step_1_conversion_time,
                  if(isNotNull(latest_2)
                     AND latest_2 <= latest_1 + INTERVAL 15 SECOND, dateDiff('second', toDateTime(latest_1), toDateTime(latest_2)), NULL) step_2_conversion_time
           FROM
             (SELECT aggregation_target, timestamp, step_0,
                                                    latest_0,
                                                    step_1,
                                                    latest_1,
                                                    step_2,
                                                    min(latest_2) over (PARTITION by aggregation_target
                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_2
              FROM
                (SELECT aggregation_target, timestamp, step_0,
                                                       latest_0,
                                                       step_1,
                                                       latest_1,
                                                       step_2,
                                                       if(latest_2 < latest_1, NULL, latest_2) as latest_2
                 FROM
                   (SELECT aggregation_target, timestamp, step_0,
                                                          latest_0,
                                                          step_1,
                                                          min(latest_1) over (PARTITION by aggregation_target
                                                                              ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_1,
                                                                             step_2,
                                                                             min(latest_2) over (PARTITION by aggregation_target
                                                                                                 ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_2
                    FROM
                      (SELECT e.timestamp as timestamp,
                              pdi.person_id as aggregation_target,
                              pdi.person_id as person_id ,
                              if(event = 'step one', 1, 0) as step_0,
                              if(step_0 = 1, timestamp, null) as latest_0,
                              if(event = 'step two', 1, 0) as step_1,
                              if(step_1 = 1, timestamp, null) as latest_1,
                              if(event = 'step three', 1, 0) as step_2,
                              if(step_2 = 1, timestamp, null) as latest_2
                       FROM events e
                       INNER JOIN
                         (SELECT distinct_id,
                                 argMax(person_id, version) as person_id
                          FROM person_distinct_id2
                          WHERE team_id = 2
                          GROUP BY distinct_id
                          HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
                       WHERE team_id = 2
                         AND event IN ['step one', 'step three', 'step two']
                         AND toTimeZone(timestamp, 'UTC') >= toDateTime('2021-05-01 00:00:00', 'UTC')
                         AND toTimeZone(timestamp, 'UTC') <= toDateTime('2021-05-14 23:59:59', 'UTC')
                         AND (step_0 = 1
                              OR step_1 = 1
                              OR step_2 = 1) ))))
           WHERE step_0 = 1 ))
     GROUP BY aggregation_target,
              steps
     HAVING steps = max_steps)
  WHERE steps IN [2, 3]
  ORDER BY aggregation_target
  LIMIT 100
  OFFSET 0
  '
---
# name: TestFOSSFunnel.test_funnel_events_with_person_on_events_v2
  '
  
  SELECT distinct_id,
         person_id
  FROM events
  WHERE team_id = 2
    AND distinct_id IN ('stopped_after_signup',
                        'stopped_after_pay')
  GROUP BY distinct_id,
           person_id
  ORDER BY if(distinct_id = 'stopped_after_signup', -1, 0)
  '
---
# name: TestFOSSFunnel.test_funnel_events_with_person_on_events_v2.1
  '
  
  SELECT countIf(steps = 1) step_1,
         countIf(steps = 2) step_2,
         countIf(steps = 3) step_3,
         avg(step_1_average_conversion_time_inner) step_1_average_conversion_time,
         avg(step_2_average_conversion_time_inner) step_2_average_conversion_time,
         median(step_1_median_conversion_time_inner) step_1_median_conversion_time,
         median(step_2_median_conversion_time_inner) step_2_median_conversion_time
  FROM
    (SELECT aggregation_target,
            steps,
            avg(step_1_conversion_time) step_1_average_conversion_time_inner,
            avg(step_2_conversion_time) step_2_average_conversion_time_inner,
            median(step_1_conversion_time) step_1_median_conversion_time_inner,
            median(step_2_conversion_time) step_2_median_conversion_time_inner
     FROM
       (SELECT aggregation_target,
               steps,
               max(steps) over (PARTITION BY aggregation_target) as max_steps,
                               step_1_conversion_time,
                               step_2_conversion_time
        FROM
          (SELECT *,
                  if(latest_0 <= latest_1
                     AND latest_1 <= latest_0 + INTERVAL 14 DAY
                     AND latest_1 <= latest_2
                     AND latest_2 <= latest_0 + INTERVAL 14 DAY, 3, if(latest_0 <= latest_1
                                                                       AND latest_1 <= latest_0 + INTERVAL 14 DAY, 2, 1)) AS steps ,
                  if(isNotNull(latest_1)
                     AND latest_1 <= latest_0 + INTERVAL 14 DAY, dateDiff('second', toDateTime(latest_0), toDateTime(latest_1)), NULL) step_1_conversion_time,
                  if(isNotNull(latest_2)
                     AND latest_2 <= latest_1 + INTERVAL 14 DAY, dateDiff('second', toDateTime(latest_1), toDateTime(latest_2)), NULL) step_2_conversion_time
           FROM
             (SELECT aggregation_target, timestamp, step_0,
                                                    latest_0,
                                                    step_1,
                                                    latest_1,
                                                    step_2,
                                                    min(latest_2) over (PARTITION by aggregation_target
                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_2
              FROM
                (SELECT aggregation_target, timestamp, step_0,
                                                       latest_0,
                                                       step_1,
                                                       latest_1,
                                                       step_2,
                                                       if(latest_2 < latest_1, NULL, latest_2) as latest_2
                 FROM
                   (SELECT aggregation_target, timestamp, step_0,
                                                          latest_0,
                                                          step_1,
                                                          min(latest_1) over (PARTITION by aggregation_target
                                                                              ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_1,
                                                                             step_2,
                                                                             min(latest_2) over (PARTITION by aggregation_target
                                                                                                 ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_2
                    FROM
                      (SELECT e.timestamp as timestamp,
                              if(notEmpty(overrides.person_id), overrides.person_id, e.person_id) as aggregation_target,
                              if(notEmpty(overrides.person_id), overrides.person_id, e.person_id) as person_id ,
                              if(event = 'user signed up', 1, 0) as step_0,
                              if(step_0 = 1, timestamp, null) as latest_0,
                              if((((match(elements_chain, '(^|;)button(\\.|$|;|:)'))
                                   AND (match(elements_chain, '(text="Pay\\ \\$10")'))
                                   AND event = '$autocapture')) , 1, 0) as step_1,
                              if(step_1 = 1, timestamp, null) as latest_1,
                              if((((match(elements_chain, '(^|;)a(\\.|$|;|:)'))
                                   AND (match(elements_chain, '(href="/movie")'))
                                   AND event = '$autocapture')) , 1, 0) as step_2,
                              if(step_2 = 1, timestamp, null) as latest_2
                       FROM events e
                       LEFT OUTER JOIN
                         (SELECT argMax(override_person_id, version) as person_id,
                                 old_person_id
                          FROM person_overrides
                          WHERE team_id = 2
                          GROUP BY old_person_id) AS overrides ON e.person_id = overrides.old_person_id
                       WHERE team_id = 2
                         AND event IN ['$autocapture', 'user signed up', '$autocapture', '$autocapture']
                         AND toTimeZone(timestamp, 'UTC') >= toDateTime('2011-12-25 00:00:00', 'UTC')
                         AND toTimeZone(timestamp, 'UTC') <= toDateTime('2012-01-01 23:59:59', 'UTC')
                         AND notEmpty(e.person_id)
                         AND (step_0 = 1
                              OR step_1 = 1
                              OR step_2 = 1) ))))
           WHERE step_0 = 1 ))
     GROUP BY aggregation_target,
              steps
     HAVING steps = max_steps)
  '
---
# name: TestFOSSFunnel.test_funnel_with_cohorts_step_filter
  '
  
  SELECT countIf(steps = 1) step_1,
         countIf(steps = 2) step_2,
         avg(step_1_average_conversion_time_inner) step_1_average_conversion_time,
         median(step_1_median_conversion_time_inner) step_1_median_conversion_time
  FROM
    (SELECT aggregation_target,
            steps,
            avg(step_1_conversion_time) step_1_average_conversion_time_inner,
            median(step_1_conversion_time) step_1_median_conversion_time_inner
     FROM
       (SELECT aggregation_target,
               steps,
               max(steps) over (PARTITION BY aggregation_target) as max_steps,
                               step_1_conversion_time
        FROM
          (SELECT *,
                  if(latest_0 <= latest_1
                     AND latest_1 <= latest_0 + INTERVAL 14 DAY, 2, 1) AS steps ,
                  if(isNotNull(latest_1)
                     AND latest_1 <= latest_0 + INTERVAL 14 DAY, dateDiff('second', toDateTime(latest_0), toDateTime(latest_1)), NULL) step_1_conversion_time
           FROM
             (SELECT aggregation_target, timestamp, step_0,
                                                    latest_0,
                                                    step_1,
                                                    min(latest_1) over (PARTITION by aggregation_target
                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_1
              FROM
                (SELECT e.timestamp as timestamp,
                        pdi.person_id as aggregation_target,
                        pdi.person_id as person_id ,
                        if(event = 'user signed up'
                           AND (person_id IN
                                  (SELECT id
                                   FROM person
                                   WHERE team_id = 2
                                     AND id IN
                                       (SELECT id
                                        FROM person
                                        WHERE team_id = 2
                                          AND ((replaceRegexpAll(JSONExtractRaw(properties, 'email'), '^"|"$', '') ILIKE '%.com%')) )
                                   GROUP BY id
                                   HAVING max(is_deleted) = 0
                                   AND ((replaceRegexpAll(JSONExtractRaw(argMax(person.properties, version), 'email'), '^"|"$', '') ILIKE '%.com%')) SETTINGS optimize_aggregation_in_order = 1)), 1, 0) as step_0,
                        if(step_0 = 1, timestamp, null) as latest_0,
                        if(event = 'paid', 1, 0) as step_1,
                        if(step_1 = 1, timestamp, null) as latest_1
                 FROM events e
                 INNER JOIN
                   (SELECT distinct_id,
                           argMax(person_id, version) as person_id
                    FROM person_distinct_id2
                    WHERE team_id = 2
                    GROUP BY distinct_id
                    HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
                 INNER JOIN
                   (SELECT id
                    FROM person
                    WHERE team_id = 2
                    GROUP BY id
                    HAVING max(is_deleted) = 0 SETTINGS optimize_aggregation_in_order = 1) person ON person.id = pdi.person_id
                 WHERE team_id = 2
                   AND event IN ['paid', 'user signed up']
                   AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
                   AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-14 23:59:59', 'UTC')
                   AND (step_0 = 1
                        OR step_1 = 1) ))
           WHERE step_0 = 1 ))
     GROUP BY aggregation_target,
              steps
     HAVING steps = max_steps)
  '
---
# name: TestFOSSFunnel.test_funnel_with_precalculated_cohort_step_filter
  '
  
  SELECT count(DISTINCT person_id)
  FROM cohortpeople
  WHERE team_id = 2
    AND cohort_id = 2
    AND version = NULL
  '
---
# name: TestFOSSFunnel.test_funnel_with_precalculated_cohort_step_filter.1
  '
  
  SELECT count(DISTINCT person_id)
  FROM cohortpeople
  WHERE team_id = 2
    AND cohort_id = 2
    AND version = 0
  '
---
# name: TestFOSSFunnel.test_funnel_with_precalculated_cohort_step_filter.2
  '
  
  SELECT countIf(steps = 1) step_1,
         countIf(steps = 2) step_2,
         avg(step_1_average_conversion_time_inner) step_1_average_conversion_time,
         median(step_1_median_conversion_time_inner) step_1_median_conversion_time
  FROM
    (SELECT aggregation_target,
            steps,
            avg(step_1_conversion_time) step_1_average_conversion_time_inner,
            median(step_1_conversion_time) step_1_median_conversion_time_inner
     FROM
       (SELECT aggregation_target,
               steps,
               max(steps) over (PARTITION BY aggregation_target) as max_steps,
                               step_1_conversion_time
        FROM
          (SELECT *,
                  if(latest_0 <= latest_1
                     AND latest_1 <= latest_0 + INTERVAL 14 DAY, 2, 1) AS steps ,
                  if(isNotNull(latest_1)
                     AND latest_1 <= latest_0 + INTERVAL 14 DAY, dateDiff('second', toDateTime(latest_0), toDateTime(latest_1)), NULL) step_1_conversion_time
           FROM
             (SELECT aggregation_target, timestamp, step_0,
                                                    latest_0,
                                                    step_1,
                                                    min(latest_1) over (PARTITION by aggregation_target
                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_1
              FROM
                (SELECT e.timestamp as timestamp,
                        pdi.person_id as aggregation_target,
                        pdi.person_id as person_id ,
                        if(event = 'user signed up'
                           AND (person_id IN
                                  (SELECT DISTINCT person_id
                                   FROM cohortpeople
                                   WHERE team_id = 2
                                     AND cohort_id = 2
                                     AND version = 0 )), 1, 0) as step_0,
                        if(step_0 = 1, timestamp, null) as latest_0,
                        if(event = 'paid', 1, 0) as step_1,
                        if(step_1 = 1, timestamp, null) as latest_1
                 FROM events e
                 INNER JOIN
                   (SELECT distinct_id,
                           argMax(person_id, version) as person_id
                    FROM person_distinct_id2
                    WHERE team_id = 2
                    GROUP BY distinct_id
                    HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
                 INNER JOIN
                   (SELECT id
                    FROM person
                    WHERE team_id = 2
                    GROUP BY id
                    HAVING max(is_deleted) = 0 SETTINGS optimize_aggregation_in_order = 1) person ON person.id = pdi.person_id
                 WHERE team_id = 2
                   AND event IN ['paid', 'user signed up']
                   AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
                   AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-14 23:59:59', 'UTC')
                   AND (step_0 = 1
                        OR step_1 = 1) ))
           WHERE step_0 = 1 ))
     GROUP BY aggregation_target,
              steps
     HAVING steps = max_steps)
  '
---
# name: TestFOSSFunnel.test_funnel_with_property_groups
  '
  
  SELECT countIf(steps = 1) step_1,
         countIf(steps = 2) step_2,
         countIf(steps = 3) step_3,
         avg(step_1_average_conversion_time_inner) step_1_average_conversion_time,
         avg(step_2_average_conversion_time_inner) step_2_average_conversion_time,
         median(step_1_median_conversion_time_inner) step_1_median_conversion_time,
         median(step_2_median_conversion_time_inner) step_2_median_conversion_time
  FROM
    (SELECT aggregation_target,
            steps,
            avg(step_1_conversion_time) step_1_average_conversion_time_inner,
            avg(step_2_conversion_time) step_2_average_conversion_time_inner,
            median(step_1_conversion_time) step_1_median_conversion_time_inner,
            median(step_2_conversion_time) step_2_median_conversion_time_inner
     FROM
       (SELECT aggregation_target,
               steps,
               max(steps) over (PARTITION BY aggregation_target) as max_steps,
                               step_1_conversion_time,
                               step_2_conversion_time
        FROM
          (SELECT *,
                  if(latest_0 <= latest_1
                     AND latest_1 <= latest_0 + INTERVAL 14 DAY
                     AND latest_1 <= latest_2
                     AND latest_2 <= latest_0 + INTERVAL 14 DAY, 3, if(latest_0 <= latest_1
                                                                       AND latest_1 <= latest_0 + INTERVAL 14 DAY, 2, 1)) AS steps ,
                  if(isNotNull(latest_1)
                     AND latest_1 <= latest_0 + INTERVAL 14 DAY, dateDiff('second', toDateTime(latest_0), toDateTime(latest_1)), NULL) step_1_conversion_time,
                  if(isNotNull(latest_2)
                     AND latest_2 <= latest_1 + INTERVAL 14 DAY, dateDiff('second', toDateTime(latest_1), toDateTime(latest_2)), NULL) step_2_conversion_time
           FROM
             (SELECT aggregation_target, timestamp, step_0,
                                                    latest_0,
                                                    step_1,
                                                    latest_1,
                                                    step_2,
                                                    min(latest_2) over (PARTITION by aggregation_target
                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_2
              FROM
                (SELECT aggregation_target, timestamp, step_0,
                                                       latest_0,
                                                       step_1,
                                                       latest_1,
                                                       step_2,
                                                       if(latest_2 < latest_1, NULL, latest_2) as latest_2
                 FROM
                   (SELECT aggregation_target, timestamp, step_0,
                                                          latest_0,
                                                          step_1,
                                                          min(latest_1) over (PARTITION by aggregation_target
                                                                              ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_1,
                                                                             step_2,
                                                                             min(latest_2) over (PARTITION by aggregation_target
                                                                                                 ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_2
                    FROM
                      (SELECT e.timestamp as timestamp,
                              pdi.person_id as aggregation_target,
                              pdi.person_id as person_id ,
                              if(event = 'user signed up', 1, 0) as step_0,
                              if(step_0 = 1, timestamp, null) as latest_0,
                              if(event = '$pageview'
                                 AND (has(['aloha.com'], replaceRegexpAll(JSONExtractRaw(properties, '$current_url'), '^"|"$', ''))), 1, 0) as step_1,
                              if(step_1 = 1, timestamp, null) as latest_1,
                              if(event = '$pageview'
                                 AND (has(['aloha2.com'], replaceRegexpAll(JSONExtractRaw(properties, '$current_url'), '^"|"$', ''))), 1, 0) as step_2,
                              if(step_2 = 1, timestamp, null) as latest_2
                       FROM events e
                       INNER JOIN
                         (SELECT distinct_id,
                                 argMax(person_id, version) as person_id
                          FROM person_distinct_id2
                          WHERE team_id = 2
                          GROUP BY distinct_id
                          HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
                       INNER JOIN
                         (SELECT id
                          FROM person
                          WHERE team_id = 2
                            AND id IN
                              (SELECT id
                               FROM person
                               WHERE team_id = 2
                                 AND ((replaceRegexpAll(JSONExtractRaw(properties, 'email'), '^"|"$', '') ILIKE '%.com%'
                                       AND has(['20'], replaceRegexpAll(JSONExtractRaw(properties, 'age'), '^"|"$', '')))
                                      OR (replaceRegexpAll(JSONExtractRaw(properties, 'email'), '^"|"$', '') ILIKE '%.org%'
                                          OR has(['28'], replaceRegexpAll(JSONExtractRaw(properties, 'age'), '^"|"$', '')))) )
                          GROUP BY id
                          HAVING max(is_deleted) = 0
                          AND ((replaceRegexpAll(JSONExtractRaw(argMax(person.properties, version), 'email'), '^"|"$', '') ILIKE '%.com%'
                                AND has(['20'], replaceRegexpAll(JSONExtractRaw(argMax(person.properties, version), 'age'), '^"|"$', '')))
                               OR (replaceRegexpAll(JSONExtractRaw(argMax(person.properties, version), 'email'), '^"|"$', '') ILIKE '%.org%'
                                   OR has(['28'], replaceRegexpAll(JSONExtractRaw(argMax(person.properties, version), 'age'), '^"|"$', '')))) SETTINGS optimize_aggregation_in_order = 1) person ON person.id = pdi.person_id
                       WHERE team_id = 2
                         AND event IN ['$pageview', 'user signed up']
                         AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
                         AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-07-01 23:59:59', 'UTC')
                         AND (step_0 = 1
                              OR step_1 = 1
                              OR step_2 = 1) ))))
           WHERE step_0 = 1 ))
     GROUP BY aggregation_target,
              steps
     HAVING steps = max_steps)
  '
---
# name: TestFOSSFunnel.test_funnel_with_property_groups.1
  '
  
  SELECT aggregation_target AS actor_id
  FROM
    (SELECT aggregation_target,
            steps,
            avg(step_1_conversion_time) step_1_average_conversion_time_inner,
            avg(step_2_conversion_time) step_2_average_conversion_time_inner,
            median(step_1_conversion_time) step_1_median_conversion_time_inner,
            median(step_2_conversion_time) step_2_median_conversion_time_inner
     FROM
       (SELECT aggregation_target,
               steps,
               max(steps) over (PARTITION BY aggregation_target) as max_steps,
                               step_1_conversion_time,
                               step_2_conversion_time
        FROM
          (SELECT *,
                  if(latest_0 <= latest_1
                     AND latest_1 <= latest_0 + INTERVAL 14 DAY
                     AND latest_1 <= latest_2
                     AND latest_2 <= latest_0 + INTERVAL 14 DAY, 3, if(latest_0 <= latest_1
                                                                       AND latest_1 <= latest_0 + INTERVAL 14 DAY, 2, 1)) AS steps ,
                  if(isNotNull(latest_1)
                     AND latest_1 <= latest_0 + INTERVAL 14 DAY, dateDiff('second', toDateTime(latest_0), toDateTime(latest_1)), NULL) step_1_conversion_time,
                  if(isNotNull(latest_2)
                     AND latest_2 <= latest_1 + INTERVAL 14 DAY, dateDiff('second', toDateTime(latest_1), toDateTime(latest_2)), NULL) step_2_conversion_time
           FROM
             (SELECT aggregation_target, timestamp, step_0,
                                                    latest_0,
                                                    step_1,
                                                    latest_1,
                                                    step_2,
                                                    min(latest_2) over (PARTITION by aggregation_target
                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_2
              FROM
                (SELECT aggregation_target, timestamp, step_0,
                                                       latest_0,
                                                       step_1,
                                                       latest_1,
                                                       step_2,
                                                       if(latest_2 < latest_1, NULL, latest_2) as latest_2
                 FROM
                   (SELECT aggregation_target, timestamp, step_0,
                                                          latest_0,
                                                          step_1,
                                                          min(latest_1) over (PARTITION by aggregation_target
                                                                              ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_1,
                                                                             step_2,
                                                                             min(latest_2) over (PARTITION by aggregation_target
                                                                                                 ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_2
                    FROM
                      (SELECT e.timestamp as timestamp,
                              pdi.person_id as aggregation_target,
                              pdi.person_id as person_id ,
                              if(event = 'user signed up', 1, 0) as step_0,
                              if(step_0 = 1, timestamp, null) as latest_0,
                              if(event = '$pageview'
                                 AND (has(['aloha.com'], replaceRegexpAll(JSONExtractRaw(properties, '$current_url'), '^"|"$', ''))), 1, 0) as step_1,
                              if(step_1 = 1, timestamp, null) as latest_1,
                              if(event = '$pageview'
                                 AND (has(['aloha2.com'], replaceRegexpAll(JSONExtractRaw(properties, '$current_url'), '^"|"$', ''))), 1, 0) as step_2,
                              if(step_2 = 1, timestamp, null) as latest_2
                       FROM events e
                       INNER JOIN
                         (SELECT distinct_id,
                                 argMax(person_id, version) as person_id
                          FROM person_distinct_id2
                          WHERE team_id = 2
                          GROUP BY distinct_id
                          HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
                       INNER JOIN
                         (SELECT id
                          FROM person
                          WHERE team_id = 2
                            AND id IN
                              (SELECT id
                               FROM person
                               WHERE team_id = 2
                                 AND ((replaceRegexpAll(JSONExtractRaw(properties, 'email'), '^"|"$', '') ILIKE '%.com%'
                                       AND has(['20'], replaceRegexpAll(JSONExtractRaw(properties, 'age'), '^"|"$', '')))
                                      OR (replaceRegexpAll(JSONExtractRaw(properties, 'email'), '^"|"$', '') ILIKE '%.org%'
                                          OR has(['28'], replaceRegexpAll(JSONExtractRaw(properties, 'age'), '^"|"$', '')))) )
                          GROUP BY id
                          HAVING max(is_deleted) = 0
                          AND ((replaceRegexpAll(JSONExtractRaw(argMax(person.properties, version), 'email'), '^"|"$', '') ILIKE '%.com%'
                                AND has(['20'], replaceRegexpAll(JSONExtractRaw(argMax(person.properties, version), 'age'), '^"|"$', '')))
                               OR (replaceRegexpAll(JSONExtractRaw(argMax(person.properties, version), 'email'), '^"|"$', '') ILIKE '%.org%'
                                   OR has(['28'], replaceRegexpAll(JSONExtractRaw(argMax(person.properties, version), 'age'), '^"|"$', '')))) SETTINGS optimize_aggregation_in_order = 1) person ON person.id = pdi.person_id
                       WHERE team_id = 2
                         AND event IN ['$pageview', 'user signed up']
                         AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
                         AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-07-01 23:59:59', 'UTC')
                         AND (step_0 = 1
                              OR step_1 = 1
                              OR step_2 = 1) ))))
           WHERE step_0 = 1 ))
     GROUP BY aggregation_target,
              steps
     HAVING steps = max_steps)
  WHERE steps IN [1, 2, 3]
  ORDER BY aggregation_target
  LIMIT 100
  OFFSET 0
  '
---
# name: TestFOSSFunnel.test_funnel_with_property_groups.2
  '
  
  SELECT aggregation_target AS actor_id
  FROM
    (SELECT aggregation_target,
            steps,
            avg(step_1_conversion_time) step_1_average_conversion_time_inner,
            avg(step_2_conversion_time) step_2_average_conversion_time_inner,
            median(step_1_conversion_time) step_1_median_conversion_time_inner,
            median(step_2_conversion_time) step_2_median_conversion_time_inner
     FROM
       (SELECT aggregation_target,
               steps,
               max(steps) over (PARTITION BY aggregation_target) as max_steps,
                               step_1_conversion_time,
                               step_2_conversion_time
        FROM
          (SELECT *,
                  if(latest_0 <= latest_1
                     AND latest_1 <= latest_0 + INTERVAL 14 DAY
                     AND latest_1 <= latest_2
                     AND latest_2 <= latest_0 + INTERVAL 14 DAY, 3, if(latest_0 <= latest_1
                                                                       AND latest_1 <= latest_0 + INTERVAL 14 DAY, 2, 1)) AS steps ,
                  if(isNotNull(latest_1)
                     AND latest_1 <= latest_0 + INTERVAL 14 DAY, dateDiff('second', toDateTime(latest_0), toDateTime(latest_1)), NULL) step_1_conversion_time,
                  if(isNotNull(latest_2)
                     AND latest_2 <= latest_1 + INTERVAL 14 DAY, dateDiff('second', toDateTime(latest_1), toDateTime(latest_2)), NULL) step_2_conversion_time
           FROM
             (SELECT aggregation_target, timestamp, step_0,
                                                    latest_0,
                                                    step_1,
                                                    latest_1,
                                                    step_2,
                                                    min(latest_2) over (PARTITION by aggregation_target
                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_2
              FROM
                (SELECT aggregation_target, timestamp, step_0,
                                                       latest_0,
                                                       step_1,
                                                       latest_1,
                                                       step_2,
                                                       if(latest_2 < latest_1, NULL, latest_2) as latest_2
                 FROM
                   (SELECT aggregation_target, timestamp, step_0,
                                                          latest_0,
                                                          step_1,
                                                          min(latest_1) over (PARTITION by aggregation_target
                                                                              ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_1,
                                                                             step_2,
                                                                             min(latest_2) over (PARTITION by aggregation_target
                                                                                                 ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_2
                    FROM
                      (SELECT e.timestamp as timestamp,
                              pdi.person_id as aggregation_target,
                              pdi.person_id as person_id ,
                              if(event = 'user signed up', 1, 0) as step_0,
                              if(step_0 = 1, timestamp, null) as latest_0,
                              if(event = '$pageview'
                                 AND (has(['aloha.com'], replaceRegexpAll(JSONExtractRaw(properties, '$current_url'), '^"|"$', ''))), 1, 0) as step_1,
                              if(step_1 = 1, timestamp, null) as latest_1,
                              if(event = '$pageview'
                                 AND (has(['aloha2.com'], replaceRegexpAll(JSONExtractRaw(properties, '$current_url'), '^"|"$', ''))), 1, 0) as step_2,
                              if(step_2 = 1, timestamp, null) as latest_2
                       FROM events e
                       INNER JOIN
                         (SELECT distinct_id,
                                 argMax(person_id, version) as person_id
                          FROM person_distinct_id2
                          WHERE team_id = 2
                          GROUP BY distinct_id
                          HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
                       INNER JOIN
                         (SELECT id
                          FROM person
                          WHERE team_id = 2
                            AND id IN
                              (SELECT id
                               FROM person
                               WHERE team_id = 2
                                 AND ((replaceRegexpAll(JSONExtractRaw(properties, 'email'), '^"|"$', '') ILIKE '%.com%'
                                       AND has(['20'], replaceRegexpAll(JSONExtractRaw(properties, 'age'), '^"|"$', '')))
                                      OR (replaceRegexpAll(JSONExtractRaw(properties, 'email'), '^"|"$', '') ILIKE '%.org%'
                                          OR has(['28'], replaceRegexpAll(JSONExtractRaw(properties, 'age'), '^"|"$', '')))) )
                          GROUP BY id
                          HAVING max(is_deleted) = 0
                          AND ((replaceRegexpAll(JSONExtractRaw(argMax(person.properties, version), 'email'), '^"|"$', '') ILIKE '%.com%'
                                AND has(['20'], replaceRegexpAll(JSONExtractRaw(argMax(person.properties, version), 'age'), '^"|"$', '')))
                               OR (replaceRegexpAll(JSONExtractRaw(argMax(person.properties, version), 'email'), '^"|"$', '') ILIKE '%.org%'
                                   OR has(['28'], replaceRegexpAll(JSONExtractRaw(argMax(person.properties, version), 'age'), '^"|"$', '')))) SETTINGS optimize_aggregation_in_order = 1) person ON person.id = pdi.person_id
                       WHERE team_id = 2
                         AND event IN ['$pageview', 'user signed up']
                         AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
                         AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-07-01 23:59:59', 'UTC')
                         AND (step_0 = 1
                              OR step_1 = 1
                              OR step_2 = 1) ))))
           WHERE step_0 = 1 ))
     GROUP BY aggregation_target,
              steps
     HAVING steps = max_steps)
  WHERE steps IN [2, 3]
  ORDER BY aggregation_target
  LIMIT 100
  OFFSET 0
  '
---
# name: TestFOSSFunnel.test_funnel_with_property_groups.3
  '
  
  SELECT aggregation_target AS actor_id
  FROM
    (SELECT aggregation_target,
            steps,
            avg(step_1_conversion_time) step_1_average_conversion_time_inner,
            avg(step_2_conversion_time) step_2_average_conversion_time_inner,
            median(step_1_conversion_time) step_1_median_conversion_time_inner,
            median(step_2_conversion_time) step_2_median_conversion_time_inner
     FROM
       (SELECT aggregation_target,
               steps,
               max(steps) over (PARTITION BY aggregation_target) as max_steps,
                               step_1_conversion_time,
                               step_2_conversion_time
        FROM
          (SELECT *,
                  if(latest_0 <= latest_1
                     AND latest_1 <= latest_0 + INTERVAL 14 DAY
                     AND latest_1 <= latest_2
                     AND latest_2 <= latest_0 + INTERVAL 14 DAY, 3, if(latest_0 <= latest_1
                                                                       AND latest_1 <= latest_0 + INTERVAL 14 DAY, 2, 1)) AS steps ,
                  if(isNotNull(latest_1)
                     AND latest_1 <= latest_0 + INTERVAL 14 DAY, dateDiff('second', toDateTime(latest_0), toDateTime(latest_1)), NULL) step_1_conversion_time,
                  if(isNotNull(latest_2)
                     AND latest_2 <= latest_1 + INTERVAL 14 DAY, dateDiff('second', toDateTime(latest_1), toDateTime(latest_2)), NULL) step_2_conversion_time
           FROM
             (SELECT aggregation_target, timestamp, step_0,
                                                    latest_0,
                                                    step_1,
                                                    latest_1,
                                                    step_2,
                                                    min(latest_2) over (PARTITION by aggregation_target
                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_2
              FROM
                (SELECT aggregation_target, timestamp, step_0,
                                                       latest_0,
                                                       step_1,
                                                       latest_1,
                                                       step_2,
                                                       if(latest_2 < latest_1, NULL, latest_2) as latest_2
                 FROM
                   (SELECT aggregation_target, timestamp, step_0,
                                                          latest_0,
                                                          step_1,
                                                          min(latest_1) over (PARTITION by aggregation_target
                                                                              ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_1,
                                                                             step_2,
                                                                             min(latest_2) over (PARTITION by aggregation_target
                                                                                                 ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_2
                    FROM
                      (SELECT e.timestamp as timestamp,
                              pdi.person_id as aggregation_target,
                              pdi.person_id as person_id ,
                              if(event = 'user signed up', 1, 0) as step_0,
                              if(step_0 = 1, timestamp, null) as latest_0,
                              if(event = '$pageview'
                                 AND (has(['aloha.com'], replaceRegexpAll(JSONExtractRaw(properties, '$current_url'), '^"|"$', ''))), 1, 0) as step_1,
                              if(step_1 = 1, timestamp, null) as latest_1,
                              if(event = '$pageview'
                                 AND (has(['aloha2.com'], replaceRegexpAll(JSONExtractRaw(properties, '$current_url'), '^"|"$', ''))), 1, 0) as step_2,
                              if(step_2 = 1, timestamp, null) as latest_2
                       FROM events e
                       INNER JOIN
                         (SELECT distinct_id,
                                 argMax(person_id, version) as person_id
                          FROM person_distinct_id2
                          WHERE team_id = 2
                          GROUP BY distinct_id
                          HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
                       INNER JOIN
                         (SELECT id
                          FROM person
                          WHERE team_id = 2
                            AND id IN
                              (SELECT id
                               FROM person
                               WHERE team_id = 2
                                 AND ((replaceRegexpAll(JSONExtractRaw(properties, 'email'), '^"|"$', '') ILIKE '%.com%'
                                       AND has(['20'], replaceRegexpAll(JSONExtractRaw(properties, 'age'), '^"|"$', '')))
                                      OR (replaceRegexpAll(JSONExtractRaw(properties, 'email'), '^"|"$', '') ILIKE '%.org%'
                                          OR has(['28'], replaceRegexpAll(JSONExtractRaw(properties, 'age'), '^"|"$', '')))) )
                          GROUP BY id
                          HAVING max(is_deleted) = 0
                          AND ((replaceRegexpAll(JSONExtractRaw(argMax(person.properties, version), 'email'), '^"|"$', '') ILIKE '%.com%'
                                AND has(['20'], replaceRegexpAll(JSONExtractRaw(argMax(person.properties, version), 'age'), '^"|"$', '')))
                               OR (replaceRegexpAll(JSONExtractRaw(argMax(person.properties, version), 'email'), '^"|"$', '') ILIKE '%.org%'
                                   OR has(['28'], replaceRegexpAll(JSONExtractRaw(argMax(person.properties, version), 'age'), '^"|"$', '')))) SETTINGS optimize_aggregation_in_order = 1) person ON person.id = pdi.person_id
                       WHERE team_id = 2
                         AND event IN ['$pageview', 'user signed up']
                         AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
                         AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-07-01 23:59:59', 'UTC')
                         AND (step_0 = 1
                              OR step_1 = 1
                              OR step_2 = 1) ))))
           WHERE step_0 = 1 ))
     GROUP BY aggregation_target,
              steps
     HAVING steps = max_steps)
  WHERE steps IN [3]
  ORDER BY aggregation_target
  LIMIT 100
  OFFSET 0
  '
---
# name: TestFOSSFunnel.test_funnel_with_static_cohort_step_filter
  '
  
  SELECT count(DISTINCT person_id)
  FROM person_static_cohort
  WHERE team_id = 2
    AND cohort_id = 2
  '
---
# name: TestFOSSFunnel.test_funnel_with_static_cohort_step_filter.1
  '
  
  SELECT countIf(steps = 1) step_1,
         countIf(steps = 2) step_2,
         avg(step_1_average_conversion_time_inner) step_1_average_conversion_time,
         median(step_1_median_conversion_time_inner) step_1_median_conversion_time
  FROM
    (SELECT aggregation_target,
            steps,
            avg(step_1_conversion_time) step_1_average_conversion_time_inner,
            median(step_1_conversion_time) step_1_median_conversion_time_inner
     FROM
       (SELECT aggregation_target,
               steps,
               max(steps) over (PARTITION BY aggregation_target) as max_steps,
                               step_1_conversion_time
        FROM
          (SELECT *,
                  if(latest_0 <= latest_1
                     AND latest_1 <= latest_0 + INTERVAL 14 DAY, 2, 1) AS steps ,
                  if(isNotNull(latest_1)
                     AND latest_1 <= latest_0 + INTERVAL 14 DAY, dateDiff('second', toDateTime(latest_0), toDateTime(latest_1)), NULL) step_1_conversion_time
           FROM
             (SELECT aggregation_target, timestamp, step_0,
                                                    latest_0,
                                                    step_1,
                                                    min(latest_1) over (PARTITION by aggregation_target
                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_1
              FROM
                (SELECT e.timestamp as timestamp,
                        pdi.person_id as aggregation_target,
                        pdi.person_id as person_id ,
                        if(event = 'user signed up'
                           AND (person_id IN
                                  (SELECT person_id as id
                                   FROM person_static_cohort
                                   WHERE cohort_id = 2
                                     AND team_id = 2)), 1, 0) as step_0,
                        if(step_0 = 1, timestamp, null) as latest_0,
                        if(event = 'paid', 1, 0) as step_1,
                        if(step_1 = 1, timestamp, null) as latest_1
                 FROM events e
                 INNER JOIN
                   (SELECT distinct_id,
                           argMax(person_id, version) as person_id
                    FROM person_distinct_id2
                    WHERE team_id = 2
                    GROUP BY distinct_id
                    HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
                 INNER JOIN
                   (SELECT id
                    FROM person
                    WHERE team_id = 2
                    GROUP BY id
                    HAVING max(is_deleted) = 0 SETTINGS optimize_aggregation_in_order = 1) person ON person.id = pdi.person_id
                 WHERE team_id = 2
                   AND event IN ['paid', 'user signed up']
                   AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
                   AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-14 23:59:59', 'UTC')
                   AND (step_0 = 1
                        OR step_1 = 1) ))
           WHERE step_0 = 1 ))
     GROUP BY aggregation_target,
              steps
     HAVING steps = max_steps)
  '
---
# name: TestFOSSFunnel.test_timezones
  '
  
  SELECT countIf(steps = 1) step_1,
         countIf(steps = 2) step_2,
         avg(step_1_average_conversion_time_inner) step_1_average_conversion_time,
         median(step_1_median_conversion_time_inner) step_1_median_conversion_time
  FROM
    (SELECT aggregation_target,
            steps,
            avg(step_1_conversion_time) step_1_average_conversion_time_inner,
            median(step_1_conversion_time) step_1_median_conversion_time_inner
     FROM
       (SELECT aggregation_target,
               steps,
               max(steps) over (PARTITION BY aggregation_target) as max_steps,
                               step_1_conversion_time
        FROM
          (SELECT *,
                  if(latest_0 <= latest_1
                     AND latest_1 <= latest_0 + INTERVAL 14 DAY, 2, 1) AS steps ,
                  if(isNotNull(latest_1)
                     AND latest_1 <= latest_0 + INTERVAL 14 DAY, dateDiff('second', toDateTime(latest_0), toDateTime(latest_1)), NULL) step_1_conversion_time
           FROM
             (SELECT aggregation_target, timestamp, step_0,
                                                    latest_0,
                                                    step_1,
                                                    min(latest_1) over (PARTITION by aggregation_target
                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_1
              FROM
                (SELECT e.timestamp as timestamp,
                        pdi.person_id as aggregation_target,
                        pdi.person_id as person_id ,
                        if(event = 'user signed up', 1, 0) as step_0,
                        if(step_0 = 1, timestamp, null) as latest_0,
                        if(event = 'paid', 1, 0) as step_1,
                        if(step_1 = 1, timestamp, null) as latest_1
                 FROM events e
                 INNER JOIN
                   (SELECT distinct_id,
                           argMax(person_id, version) as person_id
                    FROM person_distinct_id2
                    WHERE team_id = 2
                    GROUP BY distinct_id
                    HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
                 WHERE team_id = 2
                   AND event IN ['paid', 'user signed up']
                   AND toTimeZone(timestamp, 'US/Pacific') >= toDateTime('2020-01-01 00:00:00', 'US/Pacific')
                   AND toTimeZone(timestamp, 'US/Pacific') <= toDateTime('2020-01-14 23:59:59', 'US/Pacific')
                   AND (step_0 = 1
                        OR step_1 = 1) ))
           WHERE step_0 = 1 ))
     GROUP BY aggregation_target,
              steps
     HAVING steps = max_steps)
  '
---
# name: TestFunnelBreakdown.test_funnel_breakdown_correct_breakdown_props_are_chosen
  '
  
  SELECT groupArray(value)
  FROM
    (SELECT array(replaceRegexpAll(JSONExtractRaw(properties, '$browser'), '^"|"$', '')) AS value,
            count(*) as count
     FROM events e
     WHERE team_id = 2
       AND event IN ['buy', 'sign up']
       AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
       AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-08 23:59:59', 'UTC')
     GROUP BY value
     ORDER BY count DESC, value DESC
     LIMIT 25
     OFFSET 0)
  '
---
# name: TestFunnelBreakdown.test_funnel_breakdown_correct_breakdown_props_are_chosen.1
  '
  
  SELECT countIf(steps = 1) step_1,
         countIf(steps = 2) step_2,
         avg(step_1_average_conversion_time_inner) step_1_average_conversion_time,
         median(step_1_median_conversion_time_inner) step_1_median_conversion_time,
         prop
  FROM
    (SELECT aggregation_target,
            steps,
            avg(step_1_conversion_time) step_1_average_conversion_time_inner,
            median(step_1_conversion_time) step_1_median_conversion_time_inner ,
            prop
     FROM
       (SELECT aggregation_target,
               steps,
               max(steps) over (PARTITION BY aggregation_target,
                                             prop) as max_steps,
                               step_1_conversion_time ,
                               prop
        FROM
          (SELECT *,
                  if(latest_0 <= latest_1
                     AND latest_1 <= latest_0 + INTERVAL 7 DAY, 2, 1) AS steps ,
                  if(isNotNull(latest_1)
                     AND latest_1 <= latest_0 + INTERVAL 7 DAY, dateDiff('second', toDateTime(latest_0), toDateTime(latest_1)), NULL) step_1_conversion_time,
                  prop
           FROM
             (SELECT aggregation_target, timestamp, step_0,
                                                    latest_0,
                                                    step_1,
                                                    min(latest_1) over (PARTITION by aggregation_target,
                                                                                     prop
                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_1 ,
                                                                       if(has([[''], ['Mac'], ['Chrome'], ['Safari']], prop), prop, ['Other']) as prop
              FROM
                (SELECT *,
                        if(notEmpty(arrayFilter(x -> notEmpty(x), prop_vals)), prop_vals, ['']) as prop
                 FROM
                   (SELECT e.timestamp as timestamp,
                           pdi.person_id as aggregation_target,
                           pdi.person_id as person_id ,
                           if(event = 'sign up', 1, 0) as step_0,
                           if(step_0 = 1, timestamp, null) as latest_0,
                           if(event = 'buy'
                              AND (has(['xyz'], replaceRegexpAll(JSONExtractRaw(properties, '$version'), '^"|"$', ''))), 1, 0) as step_1,
                           if(step_1 = 1, timestamp, null) as latest_1,
                           array(replaceRegexpAll(JSONExtractRaw(properties, '$browser'), '^"|"$', '')) AS prop_basic,
                           prop_basic as prop,
                           argMinIf(prop, timestamp, notEmpty(arrayFilter(x -> notEmpty(x), prop))) over (PARTITION by aggregation_target) as prop_vals
                    FROM events e
                    INNER JOIN
                      (SELECT distinct_id,
                              argMax(person_id, version) as person_id
                       FROM person_distinct_id2
                       WHERE team_id = 2
                       GROUP BY distinct_id
                       HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
                    WHERE team_id = 2
                      AND event IN ['buy', 'sign up']
                      AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
                      AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-08 23:59:59', 'UTC')
                      AND (step_0 = 1
                           OR step_1 = 1) )))
           WHERE step_0 = 1 ))
     GROUP BY aggregation_target,
              steps,
              prop
     HAVING steps = max_steps)
  GROUP BY prop
  '
---
# name: TestFunnelBreakdown.test_funnel_breakdown_correct_breakdown_props_are_chosen_for_step
  '
  
  SELECT groupArray(value)
  FROM
    (SELECT array(replaceRegexpAll(JSONExtractRaw(properties, '$browser'), '^"|"$', '')) AS value,
            count(*) as count
     FROM events e
     WHERE team_id = 2
       AND event = 'buy'
       AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
       AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-08 23:59:59', 'UTC')
       AND (has(['xyz'], replaceRegexpAll(JSONExtractRaw(e.properties, '$version'), '^"|"$', '')))
     GROUP BY value
     ORDER BY count DESC, value DESC
     LIMIT 25
     OFFSET 0)
  '
---
# name: TestFunnelBreakdown.test_funnel_breakdown_correct_breakdown_props_are_chosen_for_step.1
  '
  
  SELECT countIf(steps = 1) step_1,
         countIf(steps = 2) step_2,
         avg(step_1_average_conversion_time_inner) step_1_average_conversion_time,
         median(step_1_median_conversion_time_inner) step_1_median_conversion_time,
         prop
  FROM
    (SELECT aggregation_target,
            steps,
            avg(step_1_conversion_time) step_1_average_conversion_time_inner,
            median(step_1_conversion_time) step_1_median_conversion_time_inner ,
            prop
     FROM
       (SELECT aggregation_target,
               steps,
               max(steps) over (PARTITION BY aggregation_target,
                                             prop) as max_steps,
                               step_1_conversion_time ,
                               prop
        FROM
          (SELECT *,
                  if(latest_0 <= latest_1
                     AND latest_1 <= latest_0 + INTERVAL 7 DAY, 2, 1) AS steps ,
                  if(isNotNull(latest_1)
                     AND latest_1 <= latest_0 + INTERVAL 7 DAY, dateDiff('second', toDateTime(latest_0), toDateTime(latest_1)), NULL) step_1_conversion_time,
                  prop
           FROM
             (SELECT aggregation_target, timestamp, step_0,
                                                    latest_0,
                                                    step_1,
                                                    min(latest_1) over (PARTITION by aggregation_target,
                                                                                     prop
                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_1 ,
                                                                       if(has([['Safari'], ['Mac']], prop), prop, ['Other']) as prop
              FROM
                (SELECT *,
                        prop
                 FROM
                   (SELECT e.timestamp as timestamp,
                           pdi.person_id as aggregation_target,
                           pdi.person_id as person_id ,
                           if(event = 'sign up', 1, 0) as step_0,
                           if(step_0 = 1, timestamp, null) as latest_0,
                           if(event = 'buy'
                              AND (has(['xyz'], replaceRegexpAll(JSONExtractRaw(properties, '$version'), '^"|"$', ''))), 1, 0) as step_1,
                           if(step_1 = 1, timestamp, null) as latest_1,
                           array(replaceRegexpAll(JSONExtractRaw(properties, '$browser'), '^"|"$', '')) AS prop_basic,
                           if(step_0 = 1, prop_basic, []) as prop_0,
                           if(step_1 = 1, prop_basic, []) as prop_1,
                           prop_1 as prop,
                           groupUniqArray(prop) over (PARTITION by aggregation_target) as prop_vals
                    FROM events e
                    INNER JOIN
                      (SELECT distinct_id,
                              argMax(person_id, version) as person_id
                       FROM person_distinct_id2
                       WHERE team_id = 2
                       GROUP BY distinct_id
                       HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
                    WHERE team_id = 2
                      AND event IN ['buy', 'sign up']
                      AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
                      AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-08 23:59:59', 'UTC')
                      AND (step_0 = 1
                           OR step_1 = 1) ) ARRAY
                 JOIN prop_vals as prop
                 WHERE prop != [] ))
           WHERE step_0 = 1 ))
     GROUP BY aggregation_target,
              steps,
              prop
     HAVING steps = max_steps)
  GROUP BY prop
  '
---
# name: TestFunnelBreakdown.test_funnel_step_multiple_breakdown_snapshot
  '
  
  SELECT groupArray(value)
  FROM
    (SELECT array(replaceRegexpAll(JSONExtractRaw(properties, '$browser'), '^"|"$', ''), replaceRegexpAll(JSONExtractRaw(properties, '$version'), '^"|"$', '')) AS value,
            count(*) as count
     FROM events e
     WHERE team_id = 2
       AND event IN ['buy', 'sign up']
       AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
       AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-08 23:59:59', 'UTC')
     GROUP BY value
     ORDER BY count DESC, value DESC
     LIMIT 25
     OFFSET 0)
  '
---
# name: TestFunnelBreakdown.test_funnel_step_multiple_breakdown_snapshot.1
  '
  
  SELECT countIf(steps = 1) step_1,
         countIf(steps = 2) step_2,
         avg(step_1_average_conversion_time_inner) step_1_average_conversion_time,
         median(step_1_median_conversion_time_inner) step_1_median_conversion_time,
         prop
  FROM
    (SELECT aggregation_target,
            steps,
            avg(step_1_conversion_time) step_1_average_conversion_time_inner,
            median(step_1_conversion_time) step_1_median_conversion_time_inner ,
            prop
     FROM
       (SELECT aggregation_target,
               steps,
               max(steps) over (PARTITION BY aggregation_target,
                                             prop) as max_steps,
                               step_1_conversion_time ,
                               prop
        FROM
          (SELECT *,
                  if(latest_0 <= latest_1
                     AND latest_1 <= latest_0 + INTERVAL 7 DAY, 2, 1) AS steps ,
                  if(isNotNull(latest_1)
                     AND latest_1 <= latest_0 + INTERVAL 7 DAY, dateDiff('second', toDateTime(latest_0), toDateTime(latest_1)), NULL) step_1_conversion_time,
                  prop
           FROM
             (SELECT aggregation_target, timestamp, step_0,
                                                    latest_0,
                                                    step_1,
                                                    min(latest_1) over (PARTITION by aggregation_target,
                                                                                     prop
                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_1 ,
                                                                       if(has([['', ''], ['alakazam', ''], ['Safari', 'xyz'], ['Mac', ''], ['Chrome', 'xyz'], ['0', '0'], ['', 'no-mac']], prop), prop, ['Other']) as prop
              FROM
                (SELECT *,
                        if(notEmpty(arrayFilter(x -> notEmpty(x), prop_vals)), prop_vals, ['','']) as prop
                 FROM
                   (SELECT e.timestamp as timestamp,
                           pdi.person_id as aggregation_target,
                           pdi.person_id as person_id ,
                           if(event = 'sign up', 1, 0) as step_0,
                           if(step_0 = 1, timestamp, null) as latest_0,
                           if(event = 'buy', 1, 0) as step_1,
                           if(step_1 = 1, timestamp, null) as latest_1,
                           array(replaceRegexpAll(JSONExtractRaw(properties, '$browser'), '^"|"$', ''), replaceRegexpAll(JSONExtractRaw(properties, '$version'), '^"|"$', '')) AS prop_basic,
                           prop_basic as prop,
                           argMinIf(prop, timestamp, notEmpty(arrayFilter(x -> notEmpty(x), prop))) over (PARTITION by aggregation_target) as prop_vals
                    FROM events e
                    INNER JOIN
                      (SELECT distinct_id,
                              argMax(person_id, version) as person_id
                       FROM person_distinct_id2
                       WHERE team_id = 2
                       GROUP BY distinct_id
                       HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
                    WHERE team_id = 2
                      AND event IN ['buy', 'sign up']
                      AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
                      AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-08 23:59:59', 'UTC')
                      AND (step_0 = 1
                           OR step_1 = 1) )))
           WHERE step_0 = 1 ))
     GROUP BY aggregation_target,
              steps,
              prop
     HAVING steps = max_steps)
  GROUP BY prop
  '
---
