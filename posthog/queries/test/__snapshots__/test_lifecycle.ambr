# name: TestLifecycle.test_sampling
  '
  WITH 'day' AS selected_period,
       periods AS
    (SELECT dateSub(day, number, dateTrunc(selected_period, toDateTime('2020-01-19 23:59:59', 'UTC'))) AS start_of_period
     FROM numbers(dateDiff('day', dateTrunc('day', toDateTime('2020-01-12 00:00:00', 'UTC')), dateTrunc('day', toDateTime('2020-01-19 23:59:59', 'UTC') + INTERVAL 1 day))))
  SELECT groupArray(start_of_period) AS date,
         groupArray(counts) AS total,
         status
  FROM
    (SELECT if(status = 'dormant', toInt64(SUM(counts)) * toInt16(-1), toInt64(SUM(counts))) as counts,
            start_of_period,
            status
     FROM
       (SELECT periods.start_of_period as start_of_period,
               toUInt16(0) AS counts,
               status
        FROM periods
        CROSS JOIN
          (SELECT status
           FROM
             (SELECT ['new', 'returning', 'resurrecting', 'dormant'] as status) ARRAY
           JOIN status) as sec
        ORDER BY status,
                 start_of_period
        UNION ALL SELECT start_of_period,
                         count(DISTINCT person_id) counts,
                         status
        FROM
          (SELECT pdi.person_id as person_id,
                  arraySort(groupUniqArray(dateTrunc('day', toTimeZone(toDateTime(events.timestamp, 'UTC'), 'UTC')))) AS all_activity,
                  arrayPopBack(arrayPushFront(all_activity, dateTrunc('day', toTimeZone(toDateTime(min(person.created_at), 'UTC'), 'UTC')))) as previous_activity,
                  arrayPopFront(arrayPushBack(all_activity, dateTrunc('day', toDateTime('1970-01-01')))) as following_activity,
                  arrayMap((previous, current, index) -> if(previous = current, 'new', if(current - INTERVAL 1 day = previous
                                                                                          AND index != 1, 'returning', 'resurrecting')), previous_activity, all_activity, arrayEnumerate(all_activity)) as initial_status,
                  arrayMap((current, next) -> if(current + INTERVAL 1 day = next, '', 'dormant'), all_activity, following_activity) as dormant_status,
                  arrayMap(x -> x + INTERVAL 1 day, arrayFilter((current, is_dormant) -> is_dormant = 'dormant', all_activity, dormant_status)) as dormant_periods,
                  arrayMap(x -> 'dormant', dormant_periods) as dormant_label,
                  arrayConcat(arrayZip(all_activity, initial_status), arrayZip(dormant_periods, dormant_label)) as temp_concat,
                  arrayJoin(temp_concat) as period_status_pairs,
                  period_status_pairs.1 as start_of_period,
                  period_status_pairs.2 as status,
                  toDateTime(min(person.created_at), 'UTC') AS created_at
           FROM events AS e SAMPLE 0.1
           INNER JOIN
             (SELECT distinct_id,
                     argMax(person_id, version) as person_id
              FROM person_distinct_id2
              WHERE team_id = 2
              GROUP BY distinct_id
              HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
           INNER JOIN
             (SELECT id,
                     argMax(created_at, version) as created_at
              FROM person
              WHERE team_id = 2
              GROUP BY id
              HAVING max(is_deleted) = 0 SETTINGS optimize_aggregation_in_order = 1) person ON person.id = pdi.person_id
           WHERE team_id = 2
             AND event = '$pageview'
             AND timestamp >= toDateTime(dateTrunc('day', toDateTime('2020-01-12 00:00:00', 'UTC'))) - INTERVAL 1 day
             AND timestamp < toDateTime(dateTrunc('day', toDateTime('2020-01-19 23:59:59', 'UTC'))) + INTERVAL 1 day
           GROUP BY pdi.person_id)
        GROUP BY start_of_period,
                 status)
     WHERE start_of_period <= dateTrunc('day', toDateTime('2020-01-19 23:59:59', 'UTC'))
       AND start_of_period >= dateTrunc('day', toDateTime('2020-01-12 00:00:00', 'UTC'))
     GROUP BY start_of_period,
              status
     ORDER BY start_of_period ASC)
  GROUP BY status
  '
---
# name: TestLifecycle.test_timezones
  '
  WITH 'day' AS selected_period,
       periods AS
    (SELECT dateSub(day, number, dateTrunc(selected_period, toDateTime('2020-01-19 23:59:59', 'UTC'))) AS start_of_period
     FROM numbers(dateDiff('day', dateTrunc('day', toDateTime('2020-01-12 00:00:00', 'UTC')), dateTrunc('day', toDateTime('2020-01-19 23:59:59', 'UTC') + INTERVAL 1 day))))
  SELECT groupArray(start_of_period) AS date,
         groupArray(counts) AS total,
         status
  FROM
    (SELECT if(status = 'dormant', toInt64(SUM(counts)) * toInt16(-1), toInt64(SUM(counts))) as counts,
            start_of_period,
            status
     FROM
       (SELECT periods.start_of_period as start_of_period,
               toUInt16(0) AS counts,
               status
        FROM periods
        CROSS JOIN
          (SELECT status
           FROM
             (SELECT ['new', 'returning', 'resurrecting', 'dormant'] as status) ARRAY
           JOIN status) as sec
        ORDER BY status,
                 start_of_period
        UNION ALL SELECT start_of_period,
                         count(DISTINCT person_id) counts,
                         status
        FROM
          (SELECT pdi.person_id as person_id,
                  arraySort(groupUniqArray(dateTrunc('day', toTimeZone(toDateTime(events.timestamp, 'UTC'), 'UTC')))) AS all_activity,
                  arrayPopBack(arrayPushFront(all_activity, dateTrunc('day', toTimeZone(toDateTime(min(person.created_at), 'UTC'), 'UTC')))) as previous_activity,
                  arrayPopFront(arrayPushBack(all_activity, dateTrunc('day', toDateTime('1970-01-01')))) as following_activity,
                  arrayMap((previous, current, index) -> if(previous = current, 'new', if(current - INTERVAL 1 day = previous
                                                                                          AND index != 1, 'returning', 'resurrecting')), previous_activity, all_activity, arrayEnumerate(all_activity)) as initial_status,
                  arrayMap((current, next) -> if(current + INTERVAL 1 day = next, '', 'dormant'), all_activity, following_activity) as dormant_status,
                  arrayMap(x -> x + INTERVAL 1 day, arrayFilter((current, is_dormant) -> is_dormant = 'dormant', all_activity, dormant_status)) as dormant_periods,
                  arrayMap(x -> 'dormant', dormant_periods) as dormant_label,
                  arrayConcat(arrayZip(all_activity, initial_status), arrayZip(dormant_periods, dormant_label)) as temp_concat,
                  arrayJoin(temp_concat) as period_status_pairs,
                  period_status_pairs.1 as start_of_period,
                  period_status_pairs.2 as status,
                  toDateTime(min(person.created_at), 'UTC') AS created_at
           FROM events AS e
           INNER JOIN
             (SELECT distinct_id,
                     argMax(person_id, version) as person_id
              FROM person_distinct_id2
              WHERE team_id = 2
              GROUP BY distinct_id
              HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
           INNER JOIN
             (SELECT id,
                     argMax(created_at, version) as created_at
              FROM person
              WHERE team_id = 2
              GROUP BY id
              HAVING max(is_deleted) = 0 SETTINGS optimize_aggregation_in_order = 1) person ON person.id = pdi.person_id
           WHERE team_id = 2
             AND event = '$pageview'
             AND timestamp >= toDateTime(dateTrunc('day', toDateTime('2020-01-12 00:00:00', 'UTC'))) - INTERVAL 1 day
             AND timestamp < toDateTime(dateTrunc('day', toDateTime('2020-01-19 23:59:59', 'UTC'))) + INTERVAL 1 day
           GROUP BY pdi.person_id)
        GROUP BY start_of_period,
                 status)
     WHERE start_of_period <= dateTrunc('day', toDateTime('2020-01-19 23:59:59', 'UTC'))
       AND start_of_period >= dateTrunc('day', toDateTime('2020-01-12 00:00:00', 'UTC'))
     GROUP BY start_of_period,
              status
     ORDER BY start_of_period ASC)
  GROUP BY status
  '
---
# name: TestLifecycle.test_timezones.1
  '
  WITH 'day' AS selected_period,
       periods AS
    (SELECT dateSub(day, number, dateTrunc(selected_period, toDateTime('2020-01-19 23:59:59', 'US/Pacific'))) AS start_of_period
     FROM numbers(dateDiff('day', dateTrunc('day', toDateTime('2020-01-12 00:00:00', 'US/Pacific')), dateTrunc('day', toDateTime('2020-01-19 23:59:59', 'US/Pacific') + INTERVAL 1 day))))
  SELECT groupArray(start_of_period) AS date,
         groupArray(counts) AS total,
         status
  FROM
    (SELECT if(status = 'dormant', toInt64(SUM(counts)) * toInt16(-1), toInt64(SUM(counts))) as counts,
            start_of_period,
            status
     FROM
       (SELECT periods.start_of_period as start_of_period,
               toUInt16(0) AS counts,
               status
        FROM periods
        CROSS JOIN
          (SELECT status
           FROM
             (SELECT ['new', 'returning', 'resurrecting', 'dormant'] as status) ARRAY
           JOIN status) as sec
        ORDER BY status,
                 start_of_period
        UNION ALL SELECT start_of_period,
                         count(DISTINCT person_id) counts,
                         status
        FROM
          (SELECT pdi.person_id as person_id,
                  arraySort(groupUniqArray(dateTrunc('day', toTimeZone(toDateTime(events.timestamp, 'US/Pacific'), 'US/Pacific')))) AS all_activity,
                  arrayPopBack(arrayPushFront(all_activity, dateTrunc('day', toTimeZone(toDateTime(min(person.created_at), 'US/Pacific'), 'US/Pacific')))) as previous_activity,
                  arrayPopFront(arrayPushBack(all_activity, dateTrunc('day', toDateTime('1970-01-01')))) as following_activity,
                  arrayMap((previous, current, index) -> if(previous = current, 'new', if(current - INTERVAL 1 day = previous
                                                                                          AND index != 1, 'returning', 'resurrecting')), previous_activity, all_activity, arrayEnumerate(all_activity)) as initial_status,
                  arrayMap((current, next) -> if(current + INTERVAL 1 day = next, '', 'dormant'), all_activity, following_activity) as dormant_status,
                  arrayMap(x -> x + INTERVAL 1 day, arrayFilter((current, is_dormant) -> is_dormant = 'dormant', all_activity, dormant_status)) as dormant_periods,
                  arrayMap(x -> 'dormant', dormant_periods) as dormant_label,
                  arrayConcat(arrayZip(all_activity, initial_status), arrayZip(dormant_periods, dormant_label)) as temp_concat,
                  arrayJoin(temp_concat) as period_status_pairs,
                  period_status_pairs.1 as start_of_period,
                  period_status_pairs.2 as status,
                  toDateTime(min(person.created_at), 'US/Pacific') AS created_at
           FROM events AS e
           INNER JOIN
             (SELECT distinct_id,
                     argMax(person_id, version) as person_id
              FROM person_distinct_id2
              WHERE team_id = 2
              GROUP BY distinct_id
              HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
           INNER JOIN
             (SELECT id,
                     argMax(created_at, version) as created_at
              FROM person
              WHERE team_id = 2
              GROUP BY id
              HAVING max(is_deleted) = 0 SETTINGS optimize_aggregation_in_order = 1) person ON person.id = pdi.person_id
           WHERE team_id = 2
             AND event = '$pageview'
             AND timestamp >= toDateTime(dateTrunc('day', toDateTime('2020-01-12 00:00:00', 'US/Pacific'))) - INTERVAL 1 day
             AND timestamp < toDateTime(dateTrunc('day', toDateTime('2020-01-19 23:59:59', 'US/Pacific'))) + INTERVAL 1 day
           GROUP BY pdi.person_id)
        GROUP BY start_of_period,
                 status)
     WHERE start_of_period <= dateTrunc('day', toDateTime('2020-01-19 23:59:59', 'US/Pacific'))
       AND start_of_period >= dateTrunc('day', toDateTime('2020-01-12 00:00:00', 'US/Pacific'))
     GROUP BY start_of_period,
              status
     ORDER BY start_of_period ASC)
  GROUP BY status
  '
---
