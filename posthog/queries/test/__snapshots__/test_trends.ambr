# name: TestTrends.test_action_filtering_with_cohort
  '
  
  SELECT count(DISTINCT person_id)
  FROM cohortpeople
  WHERE team_id = 2
    AND cohort_id = 2
    AND version = NULL
  '
---
# name: TestTrends.test_action_filtering_with_cohort.1
  '
  
  SELECT count(DISTINCT person_id)
  FROM cohortpeople
  WHERE team_id = 2
    AND cohort_id = 2
    AND version = 2
  '
---
# name: TestTrends.test_action_filtering_with_cohort.2
  '
  /* celery:posthog.tasks.calculate_cohort.clear_stale_cohort */
  SELECT count()
  FROM cohortpeople
  WHERE team_id = 2
    AND cohort_id = 2
    AND version < 2
  '
---
# name: TestTrends.test_action_filtering_with_cohort.3
  '
  
  SELECT groupArray(day_start) as date,
         groupArray(count) AS total
  FROM
    (SELECT SUM(total) AS count,
            day_start
     FROM
       (SELECT toUInt16(0) AS total,
               toStartOfDay(toDateTime('2020-01-07 23:59:59', 'UTC')) - toIntervalDay(number) AS day_start
        FROM numbers(dateDiff('day', toStartOfDay(toDateTime('2020-01-01 00:00:00', 'UTC')), toDateTime('2020-01-07 23:59:59', 'UTC')))
        UNION ALL SELECT toUInt16(0) AS total,
                         toStartOfDay(toDateTime('2020-01-01 00:00:00', 'UTC'))
        UNION ALL SELECT count(*) AS total,
                         toStartOfDay(toTimeZone(toDateTime(timestamp, 'UTC'), 'UTC')) AS date
        FROM events e
        INNER JOIN
          (SELECT distinct_id,
                  argMax(person_id, version) as person_id
           FROM person_distinct_id2
           WHERE team_id = 2
           GROUP BY distinct_id
           HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
        INNER JOIN
          (SELECT id
           FROM person
           WHERE team_id = 2
             AND id IN
               (SELECT id
                FROM person
                WHERE team_id = 2
                  AND (has(['x'], replaceRegexpAll(JSONExtractRaw(properties, '$bool_prop'), '^"|"$', ''))) )
           GROUP BY id
           HAVING max(is_deleted) = 0
           AND (has(['x'], replaceRegexpAll(JSONExtractRaw(argMax(person.properties, version), '$bool_prop'), '^"|"$', ''))) SETTINGS optimize_aggregation_in_order = 1) person ON person.id = pdi.person_id
        WHERE team_id = 2
          AND ((event = 'sign up'
                AND (pdi.person_id IN
                       (SELECT DISTINCT person_id
                        FROM cohortpeople
                        WHERE team_id = 2
                          AND cohort_id = 2
                          AND version = 2 ))))
          AND toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfDay(toDateTime('2020-01-01 00:00:00', 'UTC')), 'UTC')
          AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-07 23:59:59', 'UTC')
        GROUP BY date)
     GROUP BY day_start
     ORDER BY day_start)
  '
---
# name: TestTrends.test_action_filtering_with_cohort_poe_v2
  '
  
  SELECT count(DISTINCT person_id)
  FROM cohortpeople
  WHERE team_id = 2
    AND cohort_id = 2
    AND version = NULL
  '
---
# name: TestTrends.test_action_filtering_with_cohort_poe_v2.1
  '
  
  SELECT count(DISTINCT person_id)
  FROM cohortpeople
  WHERE team_id = 2
    AND cohort_id = 2
    AND version = 2
  '
---
# name: TestTrends.test_action_filtering_with_cohort_poe_v2.2
  '
  /* celery:posthog.tasks.calculate_cohort.clear_stale_cohort */
  SELECT count()
  FROM cohortpeople
  WHERE team_id = 2
    AND cohort_id = 2
    AND version < 2
  '
---
# name: TestTrends.test_action_filtering_with_cohort_poe_v2.3
  '
  
  SELECT groupArray(day_start) as date,
         groupArray(count) AS total
  FROM
    (SELECT SUM(total) AS count,
            day_start
     FROM
       (SELECT toUInt16(0) AS total,
               toStartOfDay(toDateTime('2020-01-07 23:59:59', 'UTC')) - toIntervalDay(number) AS day_start
        FROM numbers(dateDiff('day', toStartOfDay(toDateTime('2020-01-01 00:00:00', 'UTC')), toDateTime('2020-01-07 23:59:59', 'UTC')))
        UNION ALL SELECT toUInt16(0) AS total,
                         toStartOfDay(toDateTime('2020-01-01 00:00:00', 'UTC'))
        UNION ALL SELECT count(*) AS total,
                         toStartOfDay(toTimeZone(toDateTime(timestamp, 'UTC'), 'UTC')) AS date
        FROM events e
        LEFT OUTER JOIN
          (SELECT argMax(override_person_id, version) as person_id,
                  old_person_id
           FROM person_overrides
           WHERE team_id = 2
           GROUP BY old_person_id) AS overrides ON e.person_id = overrides.old_person_id
        WHERE team_id = 2
          AND ((event = 'sign up'
                AND (if(notEmpty(overrides.person_id), overrides.person_id, e.person_id) IN
                       (SELECT DISTINCT person_id
                        FROM cohortpeople
                        WHERE team_id = 2
                          AND cohort_id = 2
                          AND version = 2 ))))
          AND toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfDay(toDateTime('2020-01-01 00:00:00', 'UTC')), 'UTC')
          AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-07 23:59:59', 'UTC')
          AND (has(['x'], replaceRegexpAll(JSONExtractRaw(e.person_properties, '$bool_prop'), '^"|"$', '')))
          AND notEmpty(e.person_id)
        GROUP BY date)
     GROUP BY day_start
     ORDER BY day_start)
  '
---
# name: TestTrends.test_breakdown_by_group_props_person_on_events
  '
  
  SELECT groupArray(value)
  FROM
    (SELECT replaceRegexpAll(JSONExtractRaw(group0_properties, 'industry'), '^"|"$', '') AS value,
            count(*) as count
     FROM events e
     LEFT JOIN
       (SELECT group_key,
               argMax(group_properties, _timestamp) AS group_properties_0
        FROM groups
        WHERE team_id = 2
          AND group_type_index = 0
        GROUP BY group_key) groups_0 ON "$group_0" == groups_0.group_key
     WHERE team_id = 2
       AND event = 'sign up'
       AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
       AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-12 23:59:59', 'UTC')
       AND notEmpty(e.person_id)
     GROUP BY value
     ORDER BY count DESC, value DESC
     LIMIT 25
     OFFSET 0)
  '
---
# name: TestTrends.test_breakdown_by_group_props_person_on_events.1
  '
  
  SELECT groupArray(day_start) as date,
         groupArray(count) AS total,
         breakdown_value
  FROM
    (SELECT SUM(total) as count,
            day_start,
            breakdown_value
     FROM
       (SELECT *
        FROM
          (SELECT toUInt16(0) AS total,
                  ticks.day_start as day_start,
                  breakdown_value
           FROM
             (SELECT toStartOfDay(toDateTime('2020-01-12 23:59:59', 'UTC')) - toIntervalDay(number) as day_start
              FROM numbers(12)
              UNION ALL SELECT toStartOfDay(toDateTime('2020-01-01 00:00:00', 'UTC')) as day_start) as ticks
           CROSS JOIN
             (SELECT breakdown_value
              FROM
                (SELECT ['finance', 'technology'] as breakdown_value) ARRAY
              JOIN breakdown_value) as sec
           ORDER BY breakdown_value,
                    day_start
           UNION ALL SELECT count(*) as total,
                            toStartOfDay(toTimeZone(toDateTime(timestamp, 'UTC'), 'UTC')) as day_start,
                            replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '') as breakdown_value
           FROM events e
           LEFT JOIN
             (SELECT group_key,
                     argMax(group_properties, _timestamp) AS group_properties_0
              FROM groups
              WHERE team_id = 2
                AND group_type_index = 0
              GROUP BY group_key) groups_0 ON "$group_0" == groups_0.group_key
           WHERE e.team_id = 2
             AND event = 'sign up'
             AND toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfDay(toDateTime('2020-01-01 00:00:00', 'UTC')), 'UTC')
             AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-12 23:59:59', 'UTC')
             AND notEmpty(e.person_id)
             AND replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '') in (['finance', 'technology'])
             AND notEmpty(e.person_id)
           GROUP BY day_start,
                    breakdown_value))
     GROUP BY day_start,
              breakdown_value
     ORDER BY breakdown_value,
              day_start)
  GROUP BY breakdown_value
  ORDER BY breakdown_value
  '
---
# name: TestTrends.test_breakdown_by_group_props_person_on_events.2
  '
  /* user_id:0 request:_snapshot_ */
  SELECT person_id AS actor_id,
         count() AS actor_value
  FROM
    (SELECT e.timestamp as timestamp,
            e.person_id as person_id,
            e.distinct_id as distinct_id,
            e.team_id as team_id
     FROM events e
     LEFT JOIN
       (SELECT group_key,
               argMax(group_properties, _timestamp) AS group_properties_0
        FROM groups
        WHERE team_id = 2
          AND group_type_index = 0
        GROUP BY group_key) groups_0 ON "$group_0" == groups_0.group_key
     WHERE team_id = 2
       AND event = 'sign up'
       AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-02 00:00:00', 'UTC')
       AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-02 23:59:59', 'UTC')
       AND (has(['technology'], replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '')))
       AND notEmpty(e.person_id) )
  GROUP BY actor_id
  ORDER BY actor_value DESC,
           actor_id DESC
  LIMIT 100
  OFFSET 0
  '
---
# name: TestTrends.test_breakdown_by_group_props_with_person_filter_person_on_events
  '
  
  SELECT groupArray(value)
  FROM
    (SELECT replaceRegexpAll(JSONExtractRaw(group0_properties, 'industry'), '^"|"$', '') AS value,
            count(*) as count
     FROM events e
     LEFT JOIN
       (SELECT group_key,
               argMax(group_properties, _timestamp) AS group_properties_0
        FROM groups
        WHERE team_id = 2
          AND group_type_index = 0
        GROUP BY group_key) groups_0 ON "$group_0" == groups_0.group_key
     WHERE team_id = 2
       AND event = 'sign up'
       AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
       AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-12 23:59:59', 'UTC')
       AND (has(['value'], replaceRegexpAll(JSONExtractRaw(e.person_properties, 'key'), '^"|"$', '')))
       AND notEmpty(e.person_id)
     GROUP BY value
     ORDER BY count DESC, value DESC
     LIMIT 25
     OFFSET 0)
  '
---
# name: TestTrends.test_breakdown_by_group_props_with_person_filter_person_on_events.1
  '
  
  SELECT groupArray(day_start) as date,
         groupArray(count) AS total,
         breakdown_value
  FROM
    (SELECT SUM(total) as count,
            day_start,
            breakdown_value
     FROM
       (SELECT *
        FROM
          (SELECT toUInt16(0) AS total,
                  ticks.day_start as day_start,
                  breakdown_value
           FROM
             (SELECT toStartOfDay(toDateTime('2020-01-12 23:59:59', 'UTC')) - toIntervalDay(number) as day_start
              FROM numbers(12)
              UNION ALL SELECT toStartOfDay(toDateTime('2020-01-01 00:00:00', 'UTC')) as day_start) as ticks
           CROSS JOIN
             (SELECT breakdown_value
              FROM
                (SELECT ['finance'] as breakdown_value) ARRAY
              JOIN breakdown_value) as sec
           ORDER BY breakdown_value,
                    day_start
           UNION ALL SELECT count(*) as total,
                            toStartOfDay(toTimeZone(toDateTime(timestamp, 'UTC'), 'UTC')) as day_start,
                            replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '') as breakdown_value
           FROM events e
           LEFT JOIN
             (SELECT group_key,
                     argMax(group_properties, _timestamp) AS group_properties_0
              FROM groups
              WHERE team_id = 2
                AND group_type_index = 0
              GROUP BY group_key) groups_0 ON "$group_0" == groups_0.group_key
           WHERE e.team_id = 2
             AND event = 'sign up'
             AND (has(['value'], replaceRegexpAll(JSONExtractRaw(e.person_properties, 'key'), '^"|"$', '')))
             AND toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfDay(toDateTime('2020-01-01 00:00:00', 'UTC')), 'UTC')
             AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-12 23:59:59', 'UTC')
             AND notEmpty(e.person_id)
             AND replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '') in (['finance'])
             AND notEmpty(e.person_id)
           GROUP BY day_start,
                    breakdown_value))
     GROUP BY day_start,
              breakdown_value
     ORDER BY breakdown_value,
              day_start)
  GROUP BY breakdown_value
  ORDER BY breakdown_value
  '
---
# name: TestTrends.test_breakdown_filtering_with_properties_in_new_format
  '
  
  SELECT groupArray(value)
  FROM
    (SELECT replaceRegexpAll(JSONExtractRaw(properties, '$current_url'), '^"|"$', '') AS value,
            count(*) as count
     FROM events e
     WHERE team_id = 2
       AND event = 'sign up'
       AND toTimeZone(timestamp, 'UTC') >= toDateTime('2019-12-22 00:00:00', 'UTC')
       AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-05 23:59:59', 'UTC')
       AND (((has(['Firefox'], replaceRegexpAll(JSONExtractRaw(e.properties, '$browser'), '^"|"$', '')))
             OR (has(['Windows'], replaceRegexpAll(JSONExtractRaw(e.properties, '$os'), '^"|"$', ''))))
            AND (has(['Mac'], replaceRegexpAll(JSONExtractRaw(e.properties, '$os'), '^"|"$', ''))))
     GROUP BY value
     ORDER BY count DESC, value DESC
     LIMIT 25
     OFFSET 0)
  '
---
# name: TestTrends.test_breakdown_filtering_with_properties_in_new_format.1
  '
  
  SELECT groupArray(day_start) as date,
         groupArray(count) AS total,
         breakdown_value
  FROM
    (SELECT SUM(total) as count,
            day_start,
            breakdown_value
     FROM
       (SELECT *
        FROM
          (SELECT toUInt16(0) AS total,
                  ticks.day_start as day_start,
                  breakdown_value
           FROM
             (SELECT toStartOfDay(toDateTime('2020-01-05 23:59:59', 'UTC')) - toIntervalDay(number) as day_start
              FROM numbers(15)
              UNION ALL SELECT toStartOfDay(toDateTime('2019-12-22 00:00:00', 'UTC')) as day_start) as ticks
           CROSS JOIN
             (SELECT breakdown_value
              FROM
                (SELECT ['second url'] as breakdown_value) ARRAY
              JOIN breakdown_value) as sec
           ORDER BY breakdown_value,
                    day_start
           UNION ALL SELECT count(*) as total,
                            toStartOfDay(toTimeZone(toDateTime(timestamp, 'UTC'), 'UTC')) as day_start,
                            replaceRegexpAll(JSONExtractRaw(properties, '$current_url'), '^"|"$', '') as breakdown_value
           FROM events e
           WHERE e.team_id = 2
             AND event = 'sign up'
             AND (((has(['Firefox'], replaceRegexpAll(JSONExtractRaw(e.properties, '$browser'), '^"|"$', '')))
                   OR (has(['Windows'], replaceRegexpAll(JSONExtractRaw(e.properties, '$os'), '^"|"$', ''))))
                  AND (has(['Mac'], replaceRegexpAll(JSONExtractRaw(e.properties, '$os'), '^"|"$', ''))))
             AND toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfDay(toDateTime('2019-12-22 00:00:00', 'UTC')), 'UTC')
             AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-05 23:59:59', 'UTC')
             AND replaceRegexpAll(JSONExtractRaw(properties, '$current_url'), '^"|"$', '') in (['second url'])
           GROUP BY day_start,
                    breakdown_value))
     GROUP BY day_start,
              breakdown_value
     ORDER BY breakdown_value,
              day_start)
  GROUP BY breakdown_value
  ORDER BY breakdown_value
  '
---
# name: TestTrends.test_breakdown_filtering_with_properties_in_new_format.2
  '
  
  SELECT groupArray(value)
  FROM
    (SELECT replaceRegexpAll(JSONExtractRaw(properties, '$current_url'), '^"|"$', '') AS value,
            count(*) as count
     FROM events e
     WHERE team_id = 2
       AND event = 'sign up'
       AND toTimeZone(timestamp, 'UTC') >= toDateTime('2019-12-22 00:00:00', 'UTC')
       AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-05 23:59:59', 'UTC')
       AND (((has(['Firefox'], replaceRegexpAll(JSONExtractRaw(e.properties, '$browser'), '^"|"$', '')))
             AND (has(['Windows'], replaceRegexpAll(JSONExtractRaw(e.properties, '$os'), '^"|"$', ''))))
            AND (has(['Mac'], replaceRegexpAll(JSONExtractRaw(e.properties, '$os'), '^"|"$', ''))))
     GROUP BY value
     ORDER BY count DESC, value DESC
     LIMIT 25
     OFFSET 0)
  '
---
# name: TestTrends.test_breakdown_filtering_with_properties_in_new_format.3
  '
  SELECT [now()] AS date,
         [0] AS total,
         '' AS breakdown_value
  LIMIT 0
  '
---
# name: TestTrends.test_breakdown_weekly_active_users_aggregated
  '
  
  SELECT groupArray(value)
  FROM
    (SELECT replaceRegexpAll(JSONExtractRaw(properties, 'key'), '^"|"$', '') AS value,
            count(DISTINCT pdi.person_id) as count
     FROM events e
     INNER JOIN
       (SELECT distinct_id,
               argMax(person_id, version) as person_id
        FROM person_distinct_id2
        WHERE team_id = 2
        GROUP BY distinct_id
        HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
     WHERE team_id = 2
       AND event = '$pageview'
       AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-11 00:00:00', 'UTC')
       AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-11 23:59:59', 'UTC')
     GROUP BY value
     ORDER BY count DESC, value DESC
     LIMIT 25
     OFFSET 0)
  '
---
# name: TestTrends.test_breakdown_weekly_active_users_aggregated.1
  '
  
  SELECT count(DISTINCT pdi.person_id) AS total,
         replaceRegexpAll(JSONExtractRaw(properties, 'key'), '^"|"$', '') as breakdown_value
  FROM events AS e
  INNER JOIN
    (SELECT distinct_id,
            argMax(person_id, version) as person_id
     FROM person_distinct_id2
     WHERE team_id = 2
     GROUP BY distinct_id
     HAVING argMax(is_deleted, version) = 0) as pdi ON events.distinct_id = pdi.distinct_id
  WHERE e.team_id = 2
    AND event = '$pageview'
    AND toDateTime(timestamp, 'UTC') >= toDateTime('2020-01-04 23:59:59', 'UTC')
    AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-11 23:59:59', 'UTC')
    AND toDateTime(timestamp, 'UTC') >= toDateTime('2020-01-04 23:59:59', 'UTC') - INTERVAL 6 DAY
    AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-11 23:59:59', 'UTC')
  GROUP BY breakdown_value
  ORDER BY breakdown_value
  '
---
# name: TestTrends.test_breakdown_weekly_active_users_aggregated_materialized
  '
  
  SELECT groupArray(value)
  FROM
    (SELECT "mat_key" AS value,
            count(DISTINCT pdi.person_id) as count
     FROM events e
     INNER JOIN
       (SELECT distinct_id,
               argMax(person_id, version) as person_id
        FROM person_distinct_id2
        WHERE team_id = 2
        GROUP BY distinct_id
        HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
     WHERE team_id = 2
       AND event = '$pageview'
       AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-11 00:00:00', 'UTC')
       AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-11 23:59:59', 'UTC')
     GROUP BY value
     ORDER BY count DESC, value DESC
     LIMIT 25
     OFFSET 0)
  '
---
# name: TestTrends.test_breakdown_weekly_active_users_aggregated_materialized.1
  '
  
  SELECT count(DISTINCT pdi.person_id) AS total,
         "mat_key" as breakdown_value
  FROM events AS e
  INNER JOIN
    (SELECT distinct_id,
            argMax(person_id, version) as person_id
     FROM person_distinct_id2
     WHERE team_id = 2
     GROUP BY distinct_id
     HAVING argMax(is_deleted, version) = 0) as pdi ON events.distinct_id = pdi.distinct_id
  WHERE e.team_id = 2
    AND event = '$pageview'
    AND toDateTime(timestamp, 'UTC') >= toDateTime('2020-01-04 23:59:59', 'UTC')
    AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-11 23:59:59', 'UTC')
    AND toDateTime(timestamp, 'UTC') >= toDateTime('2020-01-04 23:59:59', 'UTC') - INTERVAL 6 DAY
    AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-11 23:59:59', 'UTC')
  GROUP BY breakdown_value
  ORDER BY breakdown_value
  '
---
# name: TestTrends.test_breakdown_weekly_active_users_daily_based_on_action
  '
  
  SELECT groupArray(value)
  FROM
    (SELECT replaceRegexpAll(JSONExtractRaw(properties, 'key'), '^"|"$', '') AS value,
            count(DISTINCT pdi.person_id) as count
     FROM events e
     INNER JOIN
       (SELECT distinct_id,
               argMax(person_id, version) as person_id
        FROM person_distinct_id2
        WHERE team_id = 2
        GROUP BY distinct_id
        HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
     INNER JOIN
       (SELECT id,
               argMax(properties, version) as person_props
        FROM person
        WHERE team_id = 2
        GROUP BY id
        HAVING max(is_deleted) = 0 SETTINGS optimize_aggregation_in_order = 1) person ON pdi.person_id = person.id
     WHERE team_id = 2
       AND ((event = '$pageview'
             AND (has(['p1', 'p2', 'p3'], replaceRegexpAll(JSONExtractRaw(person_props, 'name'), '^"|"$', ''))
                  AND pdi.person_id IN
                    (SELECT id
                     FROM person
                     WHERE team_id = 2
                       AND id IN
                         (SELECT id
                          FROM person
                          WHERE team_id = 2
                            AND ((has(['p1', 'p2'], replaceRegexpAll(JSONExtractRaw(properties, 'name'), '^"|"$', '')))) )
                     GROUP BY id
                     HAVING max(is_deleted) = 0
                     AND ((has(['p1', 'p2'], replaceRegexpAll(JSONExtractRaw(argMax(person.properties, version), 'name'), '^"|"$', '')))) SETTINGS optimize_aggregation_in_order = 1))))
       AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
       AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-12 23:59:59', 'UTC')
     GROUP BY value
     ORDER BY count DESC, value DESC
     LIMIT 25
     OFFSET 0)
  '
---
# name: TestTrends.test_breakdown_weekly_active_users_daily_based_on_action.1
  '
  
  SELECT groupArray(day_start) as date,
         groupArray(count) AS total,
         breakdown_value
  FROM
    (SELECT SUM(total) as count,
            day_start,
            breakdown_value
     FROM
       (SELECT *
        FROM
          (SELECT toUInt16(0) AS total,
                  ticks.day_start as day_start,
                  breakdown_value
           FROM
             (SELECT toStartOfDay(toDateTime('2020-01-12 23:59:59', 'UTC')) - toIntervalDay(number) as day_start
              FROM numbers(12)
              UNION ALL SELECT toStartOfDay(toDateTime('2020-01-01 00:00:00', 'UTC')) as day_start) as ticks
           CROSS JOIN
             (SELECT breakdown_value
              FROM
                (SELECT ['val'] as breakdown_value) ARRAY
              JOIN breakdown_value) as sec
           ORDER BY breakdown_value,
                    day_start
           UNION ALL SELECT counts AS total,
                            timestamp AS day_start,
                            breakdown_value
           FROM
             (SELECT d.timestamp,
                     COUNT(DISTINCT person_id) counts,
                     breakdown_value
              FROM
                (SELECT toStartOfDay(toTimeZone(toDateTime(timestamp, 'UTC'), 'UTC')) AS timestamp
                 FROM events e
                 WHERE team_id = 2
                   AND toDateTime(timestamp, 'UTC') >= toDateTime('2019-12-25 00:00:00', 'UTC')
                   AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-12 23:59:59', 'UTC')
                 GROUP BY timestamp) d
              CROSS JOIN
                (SELECT toStartOfDay(toTimeZone(toDateTime(timestamp, 'UTC'), 'UTC')) AS timestamp,
                        pdi.person_id AS person_id,
                        replaceRegexpAll(JSONExtractRaw(properties, 'key'), '^"|"$', '') AS breakdown_value
                 FROM events e
                 INNER JOIN
                   (SELECT distinct_id,
                           argMax(person_id, version) as person_id
                    FROM person_distinct_id2
                    WHERE team_id = 2
                    GROUP BY distinct_id
                    HAVING argMax(is_deleted, version) = 0) as pdi ON events.distinct_id = pdi.distinct_id
                 INNER JOIN
                   (SELECT id,
                           argMax(properties, version) as person_props
                    FROM person
                    WHERE team_id = 2
                    GROUP BY id
                    HAVING max(is_deleted) = 0 SETTINGS optimize_aggregation_in_order = 1) person ON person.id = pdi.person_id
                 WHERE e.team_id = 2
                   AND toDateTime(timestamp, 'UTC') >= toDateTime('2019-12-25 00:00:00', 'UTC')
                   AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-12 23:59:59', 'UTC')
                   AND ((event = '$pageview'
                         AND (has(['p1', 'p2', 'p3'], replaceRegexpAll(JSONExtractRaw(person_props, 'name'), '^"|"$', ''))
                              AND pdi.person_id IN
                                (SELECT id
                                 FROM person
                                 WHERE team_id = 2
                                   AND id IN
                                     (SELECT id
                                      FROM person
                                      WHERE team_id = 2
                                        AND ((has(['p1', 'p2'], replaceRegexpAll(JSONExtractRaw(properties, 'name'), '^"|"$', '')))) )
                                 GROUP BY id
                                 HAVING max(is_deleted) = 0
                                 AND ((has(['p1', 'p2'], replaceRegexpAll(JSONExtractRaw(argMax(person.properties, version), 'name'), '^"|"$', '')))) SETTINGS optimize_aggregation_in_order = 1))))
                 GROUP BY timestamp, person_id,
                                     breakdown_value) e
              WHERE e.timestamp <= d.timestamp
                AND e.timestamp > d.timestamp - INTERVAL 6 DAY
              GROUP BY d.timestamp,
                       breakdown_value
              ORDER BY d.timestamp)
           WHERE 11111 = 11111
             AND toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfDay(toDateTime('2020-01-01 00:00:00', 'UTC')), 'UTC')
             AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-12 23:59:59', 'UTC') ))
     GROUP BY day_start,
              breakdown_value
     ORDER BY breakdown_value,
              day_start)
  GROUP BY breakdown_value
  ORDER BY breakdown_value
  '
---
# name: TestTrends.test_breakdown_with_filter_groups_person_on_events
  '
  
  SELECT groupArray(value)
  FROM
    (SELECT replaceRegexpAll(JSONExtractRaw(properties, 'key'), '^"|"$', '') AS value,
            count(*) as count
     FROM events e
     LEFT JOIN
       (SELECT group_key,
               argMax(group_properties, _timestamp) AS group_properties_0
        FROM groups
        WHERE team_id = 2
          AND group_type_index = 0
        GROUP BY group_key) groups_0 ON "$group_0" == groups_0.group_key
     WHERE team_id = 2
       AND event = 'sign up'
       AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
       AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-12 23:59:59', 'UTC')
       AND (has(['finance'], replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '')))
     GROUP BY value
     ORDER BY count DESC, value DESC
     LIMIT 25
     OFFSET 0)
  '
---
# name: TestTrends.test_breakdown_with_filter_groups_person_on_events.1
  '
  
  SELECT groupArray(day_start) as date,
         groupArray(count) AS total,
         breakdown_value
  FROM
    (SELECT SUM(total) as count,
            day_start,
            breakdown_value
     FROM
       (SELECT *
        FROM
          (SELECT toUInt16(0) AS total,
                  ticks.day_start as day_start,
                  breakdown_value
           FROM
             (SELECT toStartOfDay(toDateTime('2020-01-12 23:59:59', 'UTC')) - toIntervalDay(number) as day_start
              FROM numbers(12)
              UNION ALL SELECT toStartOfDay(toDateTime('2020-01-01 00:00:00', 'UTC')) as day_start) as ticks
           CROSS JOIN
             (SELECT breakdown_value
              FROM
                (SELECT ['uh', 'oh'] as breakdown_value) ARRAY
              JOIN breakdown_value) as sec
           ORDER BY breakdown_value,
                    day_start
           UNION ALL SELECT count(*) as total,
                            toStartOfDay(toTimeZone(toDateTime(timestamp, 'UTC'), 'UTC')) as day_start,
                            replaceRegexpAll(JSONExtractRaw(properties, 'key'), '^"|"$', '') as breakdown_value
           FROM events e
           LEFT JOIN
             (SELECT group_key,
                     argMax(group_properties, _timestamp) AS group_properties_0
              FROM groups
              WHERE team_id = 2
                AND group_type_index = 0
              GROUP BY group_key) groups_0 ON "$group_0" == groups_0.group_key
           WHERE e.team_id = 2
             AND event = 'sign up'
             AND (has(['finance'], replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '')))
             AND toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfDay(toDateTime('2020-01-01 00:00:00', 'UTC')), 'UTC')
             AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-12 23:59:59', 'UTC')
             AND replaceRegexpAll(JSONExtractRaw(properties, 'key'), '^"|"$', '') in (['uh', 'oh'])
           GROUP BY day_start,
                    breakdown_value))
     GROUP BY day_start,
              breakdown_value
     ORDER BY breakdown_value,
              day_start)
  GROUP BY breakdown_value
  ORDER BY breakdown_value
  '
---
# name: TestTrends.test_breakdown_with_filter_groups_person_on_events_v2
  '
  
  SELECT distinct_id,
         person_id
  FROM events
  WHERE team_id = 2
    AND distinct_id IN ('test_breakdown_d1',
                        'test_breakdown_d2')
  GROUP BY distinct_id,
           person_id
  ORDER BY if(distinct_id = 'test_breakdown_d1', -1, 0)
  '
---
# name: TestTrends.test_breakdown_with_filter_groups_person_on_events_v2.1
  '
  
  SELECT groupArray(value)
  FROM
    (SELECT replaceRegexpAll(JSONExtractRaw(properties, 'key'), '^"|"$', '') AS value,
            count(*) as count
     FROM events e
     LEFT OUTER JOIN
       (SELECT argMax(override_person_id, version) as person_id,
               old_person_id
        FROM person_overrides
        WHERE team_id = 2
        GROUP BY old_person_id) AS overrides ON e.person_id = overrides.old_person_id
     LEFT JOIN
       (SELECT group_key,
               argMax(group_properties, _timestamp) AS group_properties_0
        FROM groups
        WHERE team_id = 2
          AND group_type_index = 0
        GROUP BY group_key) groups_0 ON "$group_0" == groups_0.group_key
     WHERE team_id = 2
       AND event = 'sign up'
       AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
       AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-12 23:59:59', 'UTC')
       AND (has(['finance'], replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '')))
       AND notEmpty(e.person_id)
     GROUP BY value
     ORDER BY count DESC, value DESC
     LIMIT 25
     OFFSET 0)
  '
---
# name: TestTrends.test_breakdown_with_filter_groups_person_on_events_v2.2
  '
  
  SELECT groupArray(day_start) as date,
         groupArray(count) AS total,
         breakdown_value
  FROM
    (SELECT SUM(total) as count,
            day_start,
            breakdown_value
     FROM
       (SELECT *
        FROM
          (SELECT toUInt16(0) AS total,
                  ticks.day_start as day_start,
                  breakdown_value
           FROM
             (SELECT toStartOfDay(toDateTime('2020-01-12 23:59:59', 'UTC')) - toIntervalDay(number) as day_start
              FROM numbers(12)
              UNION ALL SELECT toStartOfDay(toDateTime('2020-01-01 00:00:00', 'UTC')) as day_start) as ticks
           CROSS JOIN
             (SELECT breakdown_value
              FROM
                (SELECT ['uh', 'oh'] as breakdown_value) ARRAY
              JOIN breakdown_value) as sec
           ORDER BY breakdown_value,
                    day_start
           UNION ALL SELECT count(DISTINCT if(notEmpty(overrides.person_id), overrides.person_id, e.person_id)) as total,
                            toStartOfDay(toTimeZone(toDateTime(timestamp, 'UTC'), 'UTC')) as day_start,
                            replaceRegexpAll(JSONExtractRaw(properties, 'key'), '^"|"$', '') as breakdown_value
           FROM events e
           LEFT OUTER JOIN
             (SELECT argMax(override_person_id, version) as person_id,
                     old_person_id
              FROM person_overrides
              WHERE team_id = 2
              GROUP BY old_person_id) AS overrides ON e.person_id = overrides.old_person_id
           LEFT JOIN
             (SELECT group_key,
                     argMax(group_properties, _timestamp) AS group_properties_0
              FROM groups
              WHERE team_id = 2
                AND group_type_index = 0
              GROUP BY group_key) groups_0 ON "$group_0" == groups_0.group_key
           WHERE e.team_id = 2
             AND event = 'sign up'
             AND (has(['finance'], replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '')))
             AND toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfDay(toDateTime('2020-01-01 00:00:00', 'UTC')), 'UTC')
             AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-12 23:59:59', 'UTC')
             AND notEmpty(e.person_id)
             AND replaceRegexpAll(JSONExtractRaw(properties, 'key'), '^"|"$', '') in (['uh', 'oh'])
             AND notEmpty(e.person_id)
           GROUP BY day_start,
                    breakdown_value))
     GROUP BY day_start,
              breakdown_value
     ORDER BY breakdown_value,
              day_start)
  GROUP BY breakdown_value
  ORDER BY breakdown_value
  '
---
# name: TestTrends.test_dau_with_breakdown_filtering_with_sampling
  '
  
  SELECT groupArray(value)
  FROM
    (SELECT replaceRegexpAll(JSONExtractRaw(properties, '$some_property'), '^"|"$', '') AS value,
            count(*) as count
     FROM events e SAMPLE 1.0
     WHERE team_id = 2
       AND ((event = 'sign up'))
       AND toTimeZone(timestamp, 'UTC') >= toDateTime('2019-12-28 00:00:00', 'UTC')
       AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-04 23:59:59', 'UTC')
     GROUP BY value
     ORDER BY count DESC, value DESC
     LIMIT 25
     OFFSET 0)
  '
---
# name: TestTrends.test_dau_with_breakdown_filtering_with_sampling.1
  '
  
  SELECT groupArray(day_start) as date,
         groupArray(count) AS total,
         breakdown_value
  FROM
    (SELECT SUM(total) as count,
            day_start,
            breakdown_value
     FROM
       (SELECT *
        FROM
          (SELECT toUInt16(0) AS total,
                  ticks.day_start as day_start,
                  breakdown_value
           FROM
             (SELECT toStartOfDay(toDateTime('2020-01-04 23:59:59', 'UTC')) - toIntervalDay(number) as day_start
              FROM numbers(8)
              UNION ALL SELECT toStartOfDay(toDateTime('2019-12-28 00:00:00', 'UTC')) as day_start) as ticks
           CROSS JOIN
             (SELECT breakdown_value
              FROM
                (SELECT ['other_value', '', 'value'] as breakdown_value) ARRAY
              JOIN breakdown_value) as sec
           ORDER BY breakdown_value,
                    day_start
           UNION ALL SELECT count(DISTINCT pdi.person_id) as total,
                            toStartOfDay(toTimeZone(toDateTime(timestamp, 'UTC'), 'UTC')) as day_start,
                            replaceRegexpAll(JSONExtractRaw(properties, '$some_property'), '^"|"$', '') as breakdown_value
           FROM events e SAMPLE 1.0
           INNER JOIN
             (SELECT distinct_id,
                     argMax(person_id, version) as person_id
              FROM person_distinct_id2
              WHERE team_id = 2
              GROUP BY distinct_id
              HAVING argMax(is_deleted, version) = 0) as pdi ON events.distinct_id = pdi.distinct_id
           WHERE e.team_id = 2
             AND toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfDay(toDateTime('2019-12-28 00:00:00', 'UTC')), 'UTC')
             AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-04 23:59:59', 'UTC')
             AND replaceRegexpAll(JSONExtractRaw(properties, '$some_property'), '^"|"$', '') in (['other_value', '', 'value'])
             AND ((event = 'sign up'))
           GROUP BY day_start,
                    breakdown_value))
     GROUP BY day_start,
              breakdown_value
     ORDER BY breakdown_value,
              day_start)
  GROUP BY breakdown_value
  ORDER BY breakdown_value
  '
---
# name: TestTrends.test_dau_with_breakdown_filtering_with_sampling.2
  '
  
  SELECT groupArray(value)
  FROM
    (SELECT replaceRegexpAll(JSONExtractRaw(properties, '$some_property'), '^"|"$', '') AS value,
            count(*) as count
     FROM events e SAMPLE 1.0
     WHERE team_id = 2
       AND event = 'sign up'
       AND toTimeZone(timestamp, 'UTC') >= toDateTime('2019-12-28 00:00:00', 'UTC')
       AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-04 23:59:59', 'UTC')
     GROUP BY value
     ORDER BY count DESC, value DESC
     LIMIT 25
     OFFSET 0)
  '
---
# name: TestTrends.test_dau_with_breakdown_filtering_with_sampling.3
  '
  
  SELECT groupArray(day_start) as date,
         groupArray(count) AS total,
         breakdown_value
  FROM
    (SELECT SUM(total) as count,
            day_start,
            breakdown_value
     FROM
       (SELECT *
        FROM
          (SELECT toUInt16(0) AS total,
                  ticks.day_start as day_start,
                  breakdown_value
           FROM
             (SELECT toStartOfDay(toDateTime('2020-01-04 23:59:59', 'UTC')) - toIntervalDay(number) as day_start
              FROM numbers(8)
              UNION ALL SELECT toStartOfDay(toDateTime('2019-12-28 00:00:00', 'UTC')) as day_start) as ticks
           CROSS JOIN
             (SELECT breakdown_value
              FROM
                (SELECT ['other_value', '', 'value'] as breakdown_value) ARRAY
              JOIN breakdown_value) as sec
           ORDER BY breakdown_value,
                    day_start
           UNION ALL SELECT count(DISTINCT pdi.person_id) as total,
                            toStartOfDay(toTimeZone(toDateTime(timestamp, 'UTC'), 'UTC')) as day_start,
                            replaceRegexpAll(JSONExtractRaw(properties, '$some_property'), '^"|"$', '') as breakdown_value
           FROM events e SAMPLE 1.0
           INNER JOIN
             (SELECT distinct_id,
                     argMax(person_id, version) as person_id
              FROM person_distinct_id2
              WHERE team_id = 2
              GROUP BY distinct_id
              HAVING argMax(is_deleted, version) = 0) as pdi ON events.distinct_id = pdi.distinct_id
           WHERE e.team_id = 2
             AND event = 'sign up'
             AND toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfDay(toDateTime('2019-12-28 00:00:00', 'UTC')), 'UTC')
             AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-04 23:59:59', 'UTC')
             AND replaceRegexpAll(JSONExtractRaw(properties, '$some_property'), '^"|"$', '') in (['other_value', '', 'value'])
           GROUP BY day_start,
                    breakdown_value))
     GROUP BY day_start,
              breakdown_value
     ORDER BY breakdown_value,
              day_start)
  GROUP BY breakdown_value
  ORDER BY breakdown_value
  '
---
# name: TestTrends.test_filter_events_by_precalculated_cohort
  '
  
  SELECT count(DISTINCT person_id)
  FROM cohortpeople
  WHERE team_id = 2
    AND cohort_id = 2
    AND version = NULL
  '
---
# name: TestTrends.test_filter_events_by_precalculated_cohort.1
  '
  
  SELECT count(DISTINCT person_id)
  FROM cohortpeople
  WHERE team_id = 2
    AND cohort_id = 2
    AND version = 0
  '
---
# name: TestTrends.test_filter_events_by_precalculated_cohort.2
  '
  
  SELECT groupArray(day_start) as date,
         groupArray(count) AS total
  FROM
    (SELECT SUM(total) AS count,
            day_start
     FROM
       (SELECT toUInt16(0) AS total,
               toStartOfDay(toDateTime('2020-01-02 23:59:59', 'UTC')) - toIntervalDay(number) AS day_start
        FROM numbers(dateDiff('day', toStartOfDay(toDateTime('2019-12-26 00:00:00', 'UTC')), toDateTime('2020-01-02 23:59:59', 'UTC')))
        UNION ALL SELECT toUInt16(0) AS total,
                         toStartOfDay(toDateTime('2019-12-26 00:00:00', 'UTC'))
        UNION ALL SELECT count(*) AS total,
                         toStartOfDay(toTimeZone(toDateTime(timestamp, 'UTC'), 'UTC')) AS date
        FROM events e
        INNER JOIN
          (SELECT distinct_id,
                  argMax(person_id, version) as person_id
           FROM person_distinct_id2
           WHERE team_id = 2
           GROUP BY distinct_id
           HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
        INNER JOIN
          (SELECT id
           FROM person
           WHERE team_id = 2
             AND id IN
               (SELECT id
                FROM person
                WHERE team_id = 2
                  AND (has(['Jane'], replaceRegexpAll(JSONExtractRaw(properties, 'name'), '^"|"$', ''))) )
           GROUP BY id
           HAVING max(is_deleted) = 0
           AND (has(['Jane'], replaceRegexpAll(JSONExtractRaw(argMax(person.properties, version), 'name'), '^"|"$', ''))) SETTINGS optimize_aggregation_in_order = 1) person ON person.id = pdi.person_id
        WHERE team_id = 2
          AND event = 'event_name'
          AND toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfDay(toDateTime('2019-12-26 00:00:00', 'UTC')), 'UTC')
          AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-02 23:59:59', 'UTC')
        GROUP BY date)
     GROUP BY day_start
     ORDER BY day_start)
  '
---
# name: TestTrends.test_filter_events_by_precalculated_cohort_poe_v2
  '
  
  SELECT count(DISTINCT person_id)
  FROM cohortpeople
  WHERE team_id = 2
    AND cohort_id = 2
    AND version = NULL
  '
---
# name: TestTrends.test_filter_events_by_precalculated_cohort_poe_v2.1
  '
  
  SELECT count(DISTINCT person_id)
  FROM cohortpeople
  WHERE team_id = 2
    AND cohort_id = 2
    AND version = 0
  '
---
# name: TestTrends.test_filter_events_by_precalculated_cohort_poe_v2.2
  '
  
  SELECT groupArray(day_start) as date,
         groupArray(count) AS total
  FROM
    (SELECT SUM(total) AS count,
            day_start
     FROM
       (SELECT toUInt16(0) AS total,
               toStartOfDay(toDateTime('2020-01-02 23:59:59', 'UTC')) - toIntervalDay(number) AS day_start
        FROM numbers(dateDiff('day', toStartOfDay(toDateTime('2019-12-26 00:00:00', 'UTC')), toDateTime('2020-01-02 23:59:59', 'UTC')))
        UNION ALL SELECT toUInt16(0) AS total,
                         toStartOfDay(toDateTime('2019-12-26 00:00:00', 'UTC'))
        UNION ALL SELECT count(*) AS total,
                         toStartOfDay(toTimeZone(toDateTime(timestamp, 'UTC'), 'UTC')) AS date
        FROM events e
        WHERE team_id = 2
          AND event = 'event_name'
          AND toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfDay(toDateTime('2019-12-26 00:00:00', 'UTC')), 'UTC')
          AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-02 23:59:59', 'UTC')
          AND (has(['Jane'], replaceRegexpAll(JSONExtractRaw(e.person_properties, 'name'), '^"|"$', '')))
          AND notEmpty(e.person_id)
        GROUP BY date)
     GROUP BY day_start
     ORDER BY day_start)
  '
---
# name: TestTrends.test_filtering_by_multiple_groups_person_on_events
  '
  
  SELECT groupArray(day_start) as date,
         groupArray(count) AS total
  FROM
    (SELECT SUM(total) AS count,
            day_start
     FROM
       (SELECT toUInt16(0) AS total,
               toStartOfDay(toDateTime('2020-01-12 23:59:59', 'UTC')) - toIntervalDay(number) AS day_start
        FROM numbers(dateDiff('day', toStartOfDay(toDateTime('2020-01-01 00:00:00', 'UTC')), toDateTime('2020-01-12 23:59:59', 'UTC')))
        UNION ALL SELECT toUInt16(0) AS total,
                         toStartOfDay(toDateTime('2020-01-01 00:00:00', 'UTC'))
        UNION ALL SELECT count(*) AS total,
                         toStartOfDay(toTimeZone(toDateTime(timestamp, 'UTC'), 'UTC')) AS date
        FROM events e
        LEFT JOIN
          (SELECT group_key,
                  argMax(group_properties, _timestamp) AS group_properties_0
           FROM groups
           WHERE team_id = 2
             AND group_type_index = 0
           GROUP BY group_key) groups_0 ON "$group_0" == groups_0.group_key
        LEFT JOIN
          (SELECT group_key,
                  argMax(group_properties, _timestamp) AS group_properties_2
           FROM groups
           WHERE team_id = 2
             AND group_type_index = 2
           GROUP BY group_key) groups_2 ON "$group_2" == groups_2.group_key
        WHERE team_id = 2
          AND event = 'sign up'
          AND toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfDay(toDateTime('2020-01-01 00:00:00', 'UTC')), 'UTC')
          AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-12 23:59:59', 'UTC')
          AND ((has(['finance'], replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '')))
               AND (has(['six'], replaceRegexpAll(JSONExtractRaw(group_properties_2, 'name'), '^"|"$', ''))))
          AND notEmpty(e.person_id)
        GROUP BY date)
     GROUP BY day_start
     ORDER BY day_start)
  '
---
# name: TestTrends.test_filtering_by_multiple_groups_person_on_events.1
  '
  /* user_id:0 request:_snapshot_ */
  SELECT person_id AS actor_id,
         count() AS actor_value
  FROM
    (SELECT e.timestamp as timestamp,
            e.person_id as person_id,
            e.distinct_id as distinct_id,
            e.team_id as team_id
     FROM events e
     LEFT JOIN
       (SELECT group_key,
               argMax(group_properties, _timestamp) AS group_properties_0
        FROM groups
        WHERE team_id = 2
          AND group_type_index = 0
        GROUP BY group_key) groups_0 ON "$group_0" == groups_0.group_key
     LEFT JOIN
       (SELECT group_key,
               argMax(group_properties, _timestamp) AS group_properties_2
        FROM groups
        WHERE team_id = 2
          AND group_type_index = 2
        GROUP BY group_key) groups_2 ON "$group_2" == groups_2.group_key
     WHERE team_id = 2
       AND event = 'sign up'
       AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-02 00:00:00', 'UTC')
       AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-02 23:59:59', 'UTC')
       AND ((has(['finance'], replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '')))
            AND (has(['six'], replaceRegexpAll(JSONExtractRaw(group_properties_2, 'name'), '^"|"$', ''))))
       AND notEmpty(e.person_id) )
  GROUP BY actor_id
  ORDER BY actor_value DESC,
           actor_id DESC
  LIMIT 100
  OFFSET 0
  '
---
# name: TestTrends.test_filtering_with_group_props_person_on_events
  '
  
  SELECT groupArray(day_start) as date,
         groupArray(count) AS total
  FROM
    (SELECT SUM(total) AS count,
            day_start
     FROM
       (SELECT toUInt16(0) AS total,
               toStartOfDay(toDateTime('2020-01-12 23:59:59', 'UTC')) - toIntervalDay(number) AS day_start
        FROM numbers(dateDiff('day', toStartOfDay(toDateTime('2020-01-01 00:00:00', 'UTC')), toDateTime('2020-01-12 23:59:59', 'UTC')))
        UNION ALL SELECT toUInt16(0) AS total,
                         toStartOfDay(toDateTime('2020-01-01 00:00:00', 'UTC'))
        UNION ALL SELECT count(*) AS total,
                         toStartOfDay(toTimeZone(toDateTime(timestamp, 'UTC'), 'UTC')) AS date
        FROM events e
        LEFT JOIN
          (SELECT group_key,
                  argMax(group_properties, _timestamp) AS group_properties_0
           FROM groups
           WHERE team_id = 2
             AND group_type_index = 0
           GROUP BY group_key) groups_0 ON "$group_0" == groups_0.group_key
        WHERE team_id = 2
          AND event = '$pageview'
          AND toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfDay(toDateTime('2020-01-01 00:00:00', 'UTC')), 'UTC')
          AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-12 23:59:59', 'UTC')
          AND ((has(['finance'], replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '')))
               AND (has(['value'], replaceRegexpAll(JSONExtractRaw(e.person_properties, 'key'), '^"|"$', ''))))
          AND notEmpty(e.person_id)
        GROUP BY date)
     GROUP BY day_start
     ORDER BY day_start)
  '
---
# name: TestTrends.test_mau_with_breakdown_filtering_and_prop_filter
  '
  
  SELECT groupArray(value)
  FROM
    (SELECT replaceRegexpAll(JSONExtractRaw(person_props, '$some_prop'), '^"|"$', '') AS value,
            count(DISTINCT pdi.person_id) as count
     FROM events e
     INNER JOIN
       (SELECT distinct_id,
               argMax(person_id, version) as person_id
        FROM person_distinct_id2
        WHERE team_id = 2
        GROUP BY distinct_id
        HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
     INNER JOIN
       (SELECT id,
               argMax(properties, version) as person_props
        FROM person
        WHERE team_id = 2
          AND id IN
            (SELECT id
             FROM person
             WHERE team_id = 2
               AND (has(['filter_val'], replaceRegexpAll(JSONExtractRaw(properties, 'filter_prop'), '^"|"$', ''))) )
        GROUP BY id
        HAVING max(is_deleted) = 0
        AND (has(['filter_val'], replaceRegexpAll(JSONExtractRaw(argMax(person.properties, version), 'filter_prop'), '^"|"$', ''))) SETTINGS optimize_aggregation_in_order = 1) person ON pdi.person_id = person.id
     WHERE team_id = 2
       AND event = 'sign up'
       AND toTimeZone(timestamp, 'UTC') >= toDateTime('2019-12-28 00:00:00', 'UTC')
       AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-04 23:59:59', 'UTC')
     GROUP BY value
     ORDER BY count DESC, value DESC
     LIMIT 25
     OFFSET 0)
  '
---
# name: TestTrends.test_mau_with_breakdown_filtering_and_prop_filter.1
  '
  
  SELECT groupArray(day_start) as date,
         groupArray(count) AS total,
         breakdown_value
  FROM
    (SELECT SUM(total) as count,
            day_start,
            breakdown_value
     FROM
       (SELECT *
        FROM
          (SELECT toUInt16(0) AS total,
                  ticks.day_start as day_start,
                  breakdown_value
           FROM
             (SELECT toStartOfDay(toDateTime('2020-01-04 23:59:59', 'UTC')) - toIntervalDay(number) as day_start
              FROM numbers(8)
              UNION ALL SELECT toStartOfDay(toDateTime('2019-12-28 00:00:00', 'UTC')) as day_start) as ticks
           CROSS JOIN
             (SELECT breakdown_value
              FROM
                (SELECT ['some_val2', 'some_val'] as breakdown_value) ARRAY
              JOIN breakdown_value) as sec
           ORDER BY breakdown_value,
                    day_start
           UNION ALL SELECT counts AS total,
                            timestamp AS day_start,
                            breakdown_value
           FROM
             (SELECT d.timestamp,
                     COUNT(DISTINCT person_id) counts,
                     breakdown_value
              FROM
                (SELECT toStartOfDay(toTimeZone(toDateTime(timestamp, 'UTC'), 'UTC')) AS timestamp
                 FROM events e
                 WHERE team_id = 2
                   AND toDateTime(timestamp, 'UTC') >= toDateTime('2019-11-28 00:00:00', 'UTC')
                   AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-04 23:59:59', 'UTC')
                 GROUP BY timestamp) d
              CROSS JOIN
                (SELECT toStartOfDay(toTimeZone(toDateTime(timestamp, 'UTC'), 'UTC')) AS timestamp,
                        pdi.person_id AS person_id,
                        replaceRegexpAll(JSONExtractRaw(person_props, '$some_prop'), '^"|"$', '') AS breakdown_value
                 FROM events e
                 INNER JOIN
                   (SELECT distinct_id,
                           argMax(person_id, version) as person_id
                    FROM person_distinct_id2
                    WHERE team_id = 2
                    GROUP BY distinct_id
                    HAVING argMax(is_deleted, version) = 0) as pdi ON events.distinct_id = pdi.distinct_id
                 INNER JOIN
                   (SELECT id,
                           argMax(properties, version) as person_props
                    FROM person
                    WHERE team_id = 2
                      AND id IN
                        (SELECT id
                         FROM person
                         WHERE team_id = 2
                           AND (has(['filter_val'], replaceRegexpAll(JSONExtractRaw(properties, 'filter_prop'), '^"|"$', ''))) )
                    GROUP BY id
                    HAVING max(is_deleted) = 0
                    AND (has(['filter_val'], replaceRegexpAll(JSONExtractRaw(argMax(person.properties, version), 'filter_prop'), '^"|"$', ''))) SETTINGS optimize_aggregation_in_order = 1) person ON person.id = pdi.person_id
                 WHERE e.team_id = 2
                   AND event = 'sign up'
                   AND toDateTime(timestamp, 'UTC') >= toDateTime('2019-11-28 00:00:00', 'UTC')
                   AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-04 23:59:59', 'UTC')
                 GROUP BY timestamp, person_id,
                                     breakdown_value) e
              WHERE e.timestamp <= d.timestamp
                AND e.timestamp > d.timestamp - INTERVAL 29 DAY
              GROUP BY d.timestamp,
                       breakdown_value
              ORDER BY d.timestamp)
           WHERE 11111 = 11111
             AND toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfDay(toDateTime('2019-12-28 00:00:00', 'UTC')), 'UTC')
             AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-04 23:59:59', 'UTC') ))
     GROUP BY day_start,
              breakdown_value
     ORDER BY breakdown_value,
              day_start)
  GROUP BY breakdown_value
  ORDER BY breakdown_value
  '
---
# name: TestTrends.test_mau_with_breakdown_filtering_and_prop_filter_poe_v2
  '
  
  SELECT groupArray(value)
  FROM
    (SELECT replaceRegexpAll(JSONExtractRaw(person_properties, '$some_prop'), '^"|"$', '') AS value,
            count(DISTINCT if(notEmpty(overrides.person_id), overrides.person_id, e.person_id)) as count
     FROM events e
     LEFT OUTER JOIN
       (SELECT argMax(override_person_id, version) as person_id,
               old_person_id
        FROM person_overrides
        WHERE team_id = 2
        GROUP BY old_person_id) AS overrides ON e.person_id = overrides.old_person_id
     WHERE team_id = 2
       AND event = 'sign up'
       AND toTimeZone(timestamp, 'UTC') >= toDateTime('2019-12-28 00:00:00', 'UTC')
       AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-04 23:59:59', 'UTC')
       AND (has(['filter_val'], replaceRegexpAll(JSONExtractRaw(e.person_properties, 'filter_prop'), '^"|"$', '')))
       AND notEmpty(e.person_id)
     GROUP BY value
     ORDER BY count DESC, value DESC
     LIMIT 25
     OFFSET 0)
  '
---
# name: TestTrends.test_mau_with_breakdown_filtering_and_prop_filter_poe_v2.1
  '
  
  SELECT groupArray(day_start) as date,
         groupArray(count) AS total,
         breakdown_value
  FROM
    (SELECT SUM(total) as count,
            day_start,
            breakdown_value
     FROM
       (SELECT *
        FROM
          (SELECT toUInt16(0) AS total,
                  ticks.day_start as day_start,
                  breakdown_value
           FROM
             (SELECT toStartOfDay(toDateTime('2020-01-04 23:59:59', 'UTC')) - toIntervalDay(number) as day_start
              FROM numbers(8)
              UNION ALL SELECT toStartOfDay(toDateTime('2019-12-28 00:00:00', 'UTC')) as day_start) as ticks
           CROSS JOIN
             (SELECT breakdown_value
              FROM
                (SELECT ['some_val2', 'some_val'] as breakdown_value) ARRAY
              JOIN breakdown_value) as sec
           ORDER BY breakdown_value,
                    day_start
           UNION ALL SELECT counts AS total,
                            timestamp AS day_start,
                            breakdown_value
           FROM
             (SELECT d.timestamp,
                     COUNT(DISTINCT person_id) counts,
                     breakdown_value
              FROM
                (SELECT toStartOfDay(toTimeZone(toDateTime(timestamp, 'UTC'), 'UTC')) AS timestamp
                 FROM events e
                 WHERE team_id = 2
                   AND toDateTime(timestamp, 'UTC') >= toDateTime('2019-11-28 00:00:00', 'UTC')
                   AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-04 23:59:59', 'UTC')
                 GROUP BY timestamp) d
              CROSS JOIN
                (SELECT toStartOfDay(toTimeZone(toDateTime(timestamp, 'UTC'), 'UTC')) AS timestamp,
                        if(notEmpty(overrides.person_id), overrides.person_id, e.person_id) AS person_id,
                        replaceRegexpAll(JSONExtractRaw(person_properties, '$some_prop'), '^"|"$', '') AS breakdown_value
                 FROM events e
                 LEFT OUTER JOIN
                   (SELECT argMax(override_person_id, version) as person_id,
                           old_person_id
                    FROM person_overrides
                    WHERE team_id = 2
                    GROUP BY old_person_id) AS overrides ON e.person_id = overrides.old_person_id
                 WHERE e.team_id = 2
                   AND event = 'sign up'
                   AND (has(['filter_val'], replaceRegexpAll(JSONExtractRaw(e.person_properties, 'filter_prop'), '^"|"$', '')))
                   AND toDateTime(timestamp, 'UTC') >= toDateTime('2019-11-28 00:00:00', 'UTC')
                   AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-04 23:59:59', 'UTC')
                   AND notEmpty(e.person_id)
                   AND notEmpty(e.person_id)
                 GROUP BY timestamp, person_id,
                                     breakdown_value) e
              WHERE e.timestamp <= d.timestamp
                AND e.timestamp > d.timestamp - INTERVAL 29 DAY
              GROUP BY d.timestamp,
                       breakdown_value
              ORDER BY d.timestamp)
           WHERE 11111 = 11111
             AND toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfDay(toDateTime('2019-12-28 00:00:00', 'UTC')), 'UTC')
             AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-04 23:59:59', 'UTC') ))
     GROUP BY day_start,
              breakdown_value
     ORDER BY breakdown_value,
              day_start)
  GROUP BY breakdown_value
  ORDER BY breakdown_value
  '
---
# name: TestTrends.test_non_deterministic_timezones
  '
  
  SELECT groupArray(day_start) as date,
         groupArray(count) AS total
  FROM
    (SELECT SUM(total) AS count,
            day_start
     FROM
       (SELECT toUInt16(0) AS total,
               toStartOfWeek(toDateTime('2022-11-30 23:59:59', 'US/Pacific'), 0) - toIntervalWeek(number) AS day_start
        FROM numbers(dateDiff('week', toStartOfWeek(toDateTime('2022-10-31 00:00:00', 'US/Pacific'), 0), toDateTime('2022-11-30 23:59:59', 'US/Pacific')))
        UNION ALL SELECT toUInt16(0) AS total,
                         toStartOfWeek(toDateTime('2022-10-31 00:00:00', 'US/Pacific'), 0)
        UNION ALL SELECT count(*) AS total,
                         toStartOfWeek(toTimeZone(toDateTime(timestamp, 'UTC'), 'US/Pacific'), 0) AS date
        FROM events e
        WHERE team_id = 2
          AND event = 'sign up'
          AND toTimeZone(timestamp, 'US/Pacific') >= toDateTime(toStartOfWeek(toDateTime('2022-10-31 00:00:00', 'US/Pacific'), 0), 'US/Pacific')
          AND toTimeZone(timestamp, 'US/Pacific') <= toDateTime('2022-11-30 23:59:59', 'US/Pacific')
        GROUP BY date)
     GROUP BY day_start
     ORDER BY day_start)
  '
---
# name: TestTrends.test_person_filtering_in_cohort_in_action
  '
  
  SELECT groupArray(value)
  FROM
    (SELECT replaceRegexpAll(JSONExtractRaw(properties, '$some_property'), '^"|"$', '') AS value,
            count(*) as count
     FROM events e
     INNER JOIN
       (SELECT distinct_id,
               argMax(person_id, version) as person_id
        FROM person_distinct_id2
        WHERE team_id = 2
        GROUP BY distinct_id
        HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
     WHERE team_id = 2
       AND ((event = 'sign up'
             AND (pdi.person_id IN
                    (SELECT id
                     FROM person
                     WHERE team_id = 2
                       AND id IN
                         (SELECT id
                          FROM person
                          WHERE team_id = 2
                            AND ((has(['some_val'], replaceRegexpAll(JSONExtractRaw(properties, '$some_prop'), '^"|"$', '')))) )
                     GROUP BY id
                     HAVING max(is_deleted) = 0
                     AND ((has(['some_val'], replaceRegexpAll(JSONExtractRaw(argMax(person.properties, version), '$some_prop'), '^"|"$', '')))) SETTINGS optimize_aggregation_in_order = 1))))
       AND toTimeZone(timestamp, 'UTC') >= toDateTime('2019-12-28 00:00:00', 'UTC')
       AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-04 23:59:59', 'UTC')
     GROUP BY value
     ORDER BY count DESC, value DESC
     LIMIT 25
     OFFSET 0)
  '
---
# name: TestTrends.test_person_filtering_in_cohort_in_action.1
  '
  
  SELECT groupArray(day_start) as date,
         groupArray(count) AS total,
         breakdown_value
  FROM
    (SELECT SUM(total) as count,
            day_start,
            breakdown_value
     FROM
       (SELECT *
        FROM
          (SELECT toUInt16(0) AS total,
                  ticks.day_start as day_start,
                  breakdown_value
           FROM
             (SELECT toStartOfDay(toDateTime('2020-01-04 23:59:59', 'UTC')) - toIntervalDay(number) as day_start
              FROM numbers(8)
              UNION ALL SELECT toStartOfDay(toDateTime('2019-12-28 00:00:00', 'UTC')) as day_start) as ticks
           CROSS JOIN
             (SELECT breakdown_value
              FROM
                (SELECT ['', 'value', 'other_value'] as breakdown_value) ARRAY
              JOIN breakdown_value) as sec
           ORDER BY breakdown_value,
                    day_start
           UNION ALL SELECT count(*) as total,
                            toStartOfDay(toTimeZone(toDateTime(timestamp, 'UTC'), 'UTC')) as day_start,
                            replaceRegexpAll(JSONExtractRaw(properties, '$some_property'), '^"|"$', '') as breakdown_value
           FROM events e
           INNER JOIN
             (SELECT distinct_id,
                     argMax(person_id, version) as person_id
              FROM person_distinct_id2
              WHERE team_id = 2
              GROUP BY distinct_id
              HAVING argMax(is_deleted, version) = 0) as pdi ON events.distinct_id = pdi.distinct_id
           WHERE e.team_id = 2
             AND toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfDay(toDateTime('2019-12-28 00:00:00', 'UTC')), 'UTC')
             AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-04 23:59:59', 'UTC')
             AND replaceRegexpAll(JSONExtractRaw(properties, '$some_property'), '^"|"$', '') in (['', 'value', 'other_value'])
             AND ((event = 'sign up'
                   AND (pdi.person_id IN
                          (SELECT id
                           FROM person
                           WHERE team_id = 2
                             AND id IN
                               (SELECT id
                                FROM person
                                WHERE team_id = 2
                                  AND ((has(['some_val'], replaceRegexpAll(JSONExtractRaw(properties, '$some_prop'), '^"|"$', '')))) )
                           GROUP BY id
                           HAVING max(is_deleted) = 0
                           AND ((has(['some_val'], replaceRegexpAll(JSONExtractRaw(argMax(person.properties, version), '$some_prop'), '^"|"$', '')))) SETTINGS optimize_aggregation_in_order = 1))))
           GROUP BY day_start,
                    breakdown_value))
     GROUP BY day_start,
              breakdown_value
     ORDER BY breakdown_value,
              day_start)
  GROUP BY breakdown_value
  ORDER BY breakdown_value
  '
---
# name: TestTrends.test_person_filtering_in_cohort_in_action_poe_v2
  '
  
  SELECT groupArray(value)
  FROM
    (SELECT replaceRegexpAll(JSONExtractRaw(properties, '$some_property'), '^"|"$', '') AS value,
            count(*) as count
     FROM events e
     LEFT OUTER JOIN
       (SELECT argMax(override_person_id, version) as person_id,
               old_person_id
        FROM person_overrides
        WHERE team_id = 2
        GROUP BY old_person_id) AS overrides ON e.person_id = overrides.old_person_id
     WHERE team_id = 2
       AND ((event = 'sign up'
             AND (if(notEmpty(overrides.person_id), overrides.person_id, e.person_id) IN
                    (SELECT id
                     FROM person
                     WHERE team_id = 2
                       AND id IN
                         (SELECT id
                          FROM person
                          WHERE team_id = 2
                            AND ((has(['some_val'], replaceRegexpAll(JSONExtractRaw(properties, '$some_prop'), '^"|"$', '')))) )
                     GROUP BY id
                     HAVING max(is_deleted) = 0
                     AND ((has(['some_val'], replaceRegexpAll(JSONExtractRaw(argMax(person.properties, version), '$some_prop'), '^"|"$', '')))) SETTINGS optimize_aggregation_in_order = 1))))
       AND toTimeZone(timestamp, 'UTC') >= toDateTime('2019-12-28 00:00:00', 'UTC')
       AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-04 23:59:59', 'UTC')
       AND notEmpty(e.person_id)
     GROUP BY value
     ORDER BY count DESC, value DESC
     LIMIT 25
     OFFSET 0)
  '
---
# name: TestTrends.test_person_filtering_in_cohort_in_action_poe_v2.1
  '
  
  SELECT groupArray(day_start) as date,
         groupArray(count) AS total,
         breakdown_value
  FROM
    (SELECT SUM(total) as count,
            day_start,
            breakdown_value
     FROM
       (SELECT *
        FROM
          (SELECT toUInt16(0) AS total,
                  ticks.day_start as day_start,
                  breakdown_value
           FROM
             (SELECT toStartOfDay(toDateTime('2020-01-04 23:59:59', 'UTC')) - toIntervalDay(number) as day_start
              FROM numbers(8)
              UNION ALL SELECT toStartOfDay(toDateTime('2019-12-28 00:00:00', 'UTC')) as day_start) as ticks
           CROSS JOIN
             (SELECT breakdown_value
              FROM
                (SELECT ['', 'value', 'other_value'] as breakdown_value) ARRAY
              JOIN breakdown_value) as sec
           ORDER BY breakdown_value,
                    day_start
           UNION ALL SELECT count(*) as total,
                            toStartOfDay(toTimeZone(toDateTime(timestamp, 'UTC'), 'UTC')) as day_start,
                            replaceRegexpAll(JSONExtractRaw(properties, '$some_property'), '^"|"$', '') as breakdown_value
           FROM events e
           LEFT OUTER JOIN
             (SELECT argMax(override_person_id, version) as person_id,
                     old_person_id
              FROM person_overrides
              WHERE team_id = 2
              GROUP BY old_person_id) AS overrides ON e.person_id = overrides.old_person_id
           WHERE e.team_id = 2
             AND toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfDay(toDateTime('2019-12-28 00:00:00', 'UTC')), 'UTC')
             AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-04 23:59:59', 'UTC')
             AND notEmpty(e.person_id)
             AND replaceRegexpAll(JSONExtractRaw(properties, '$some_property'), '^"|"$', '') in (['', 'value', 'other_value'])
             AND ((event = 'sign up'
                   AND (if(notEmpty(overrides.person_id), overrides.person_id, e.person_id) IN
                          (SELECT id
                           FROM person
                           WHERE team_id = 2
                             AND id IN
                               (SELECT id
                                FROM person
                                WHERE team_id = 2
                                  AND ((has(['some_val'], replaceRegexpAll(JSONExtractRaw(properties, '$some_prop'), '^"|"$', '')))) )
                           GROUP BY id
                           HAVING max(is_deleted) = 0
                           AND ((has(['some_val'], replaceRegexpAll(JSONExtractRaw(argMax(person.properties, version), '$some_prop'), '^"|"$', '')))) SETTINGS optimize_aggregation_in_order = 1))))
             AND notEmpty(e.person_id)
           GROUP BY day_start,
                    breakdown_value))
     GROUP BY day_start,
              breakdown_value
     ORDER BY breakdown_value,
              day_start)
  GROUP BY breakdown_value
  ORDER BY breakdown_value
  '
---
# name: TestTrends.test_person_property_filtering
  '
  
  SELECT groupArray(day_start) as date,
         groupArray(count) AS total
  FROM
    (SELECT SUM(total) AS count,
            day_start
     FROM
       (SELECT toUInt16(0) AS total,
               toStartOfDay(toDateTime('2020-01-04 23:59:59', 'UTC')) - toIntervalDay(number) AS day_start
        FROM numbers(dateDiff('day', toStartOfDay(toDateTime('2019-12-28 00:00:00', 'UTC')), toDateTime('2020-01-04 23:59:59', 'UTC')))
        UNION ALL SELECT toUInt16(0) AS total,
                         toStartOfDay(toDateTime('2019-12-28 00:00:00', 'UTC'))
        UNION ALL SELECT count(*) AS total,
                         toStartOfDay(toTimeZone(toDateTime(timestamp, 'UTC'), 'UTC')) AS date
        FROM events e
        INNER JOIN
          (SELECT distinct_id,
                  argMax(person_id, version) as person_id
           FROM person_distinct_id2
           WHERE team_id = 2
           GROUP BY distinct_id
           HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
        INNER JOIN
          (SELECT id
           FROM person
           WHERE team_id = 2
             AND id IN
               (SELECT id
                FROM person
                WHERE team_id = 2
                  AND (has(['person1'], replaceRegexpAll(JSONExtractRaw(properties, 'name'), '^"|"$', ''))) )
           GROUP BY id
           HAVING max(is_deleted) = 0
           AND (has(['person1'], replaceRegexpAll(JSONExtractRaw(argMax(person.properties, version), 'name'), '^"|"$', ''))) SETTINGS optimize_aggregation_in_order = 1) person ON person.id = pdi.person_id
        WHERE team_id = 2
          AND event = 'watched movie'
          AND toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfDay(toDateTime('2019-12-28 00:00:00', 'UTC')), 'UTC')
          AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-04 23:59:59', 'UTC')
        GROUP BY date)
     GROUP BY day_start
     ORDER BY day_start)
  '
---
# name: TestTrends.test_person_property_filtering_clashing_with_event_property
  '
  
  SELECT groupArray(day_start) as date,
         groupArray(count) AS total
  FROM
    (SELECT SUM(total) AS count,
            day_start
     FROM
       (SELECT toUInt16(0) AS total,
               toStartOfDay(toDateTime('2020-01-04 23:59:59', 'UTC')) - toIntervalDay(number) AS day_start
        FROM numbers(dateDiff('day', toStartOfDay(toDateTime('2019-12-28 00:00:00', 'UTC')), toDateTime('2020-01-04 23:59:59', 'UTC')))
        UNION ALL SELECT toUInt16(0) AS total,
                         toStartOfDay(toDateTime('2019-12-28 00:00:00', 'UTC'))
        UNION ALL SELECT count(*) AS total,
                         toStartOfDay(toTimeZone(toDateTime(timestamp, 'UTC'), 'UTC')) AS date
        FROM events e
        INNER JOIN
          (SELECT distinct_id,
                  argMax(person_id, version) as person_id
           FROM person_distinct_id2
           WHERE team_id = 2
           GROUP BY distinct_id
           HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
        INNER JOIN
          (SELECT id
           FROM person
           WHERE team_id = 2
             AND id IN
               (SELECT id
                FROM person
                WHERE team_id = 2
                  AND (has(['person1'], replaceRegexpAll(JSONExtractRaw(properties, 'name'), '^"|"$', ''))) )
           GROUP BY id
           HAVING max(is_deleted) = 0
           AND (has(['person1'], replaceRegexpAll(JSONExtractRaw(argMax(person.properties, version), 'name'), '^"|"$', ''))) SETTINGS optimize_aggregation_in_order = 1) person ON person.id = pdi.person_id
        WHERE team_id = 2
          AND event = 'watched movie'
          AND toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfDay(toDateTime('2019-12-28 00:00:00', 'UTC')), 'UTC')
          AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-04 23:59:59', 'UTC')
        GROUP BY date)
     GROUP BY day_start
     ORDER BY day_start)
  '
---
# name: TestTrends.test_person_property_filtering_clashing_with_event_property.1
  '
  
  SELECT groupArray(day_start) as date,
         groupArray(count) AS total
  FROM
    (SELECT SUM(total) AS count,
            day_start
     FROM
       (SELECT toUInt16(0) AS total,
               toStartOfDay(toDateTime('2020-01-04 23:59:59', 'UTC')) - toIntervalDay(number) AS day_start
        FROM numbers(dateDiff('day', toStartOfDay(toDateTime('2019-12-28 00:00:00', 'UTC')), toDateTime('2020-01-04 23:59:59', 'UTC')))
        UNION ALL SELECT toUInt16(0) AS total,
                         toStartOfDay(toDateTime('2019-12-28 00:00:00', 'UTC'))
        UNION ALL SELECT count(*) AS total,
                         toStartOfDay(toTimeZone(toDateTime(timestamp, 'UTC'), 'UTC')) AS date
        FROM events e
        WHERE team_id = 2
          AND event = 'watched movie'
          AND toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfDay(toDateTime('2019-12-28 00:00:00', 'UTC')), 'UTC')
          AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-04 23:59:59', 'UTC')
          AND (has(['1'], replaceRegexpAll(JSONExtractRaw(e.properties, 'name'), '^"|"$', '')))
        GROUP BY date)
     GROUP BY day_start
     ORDER BY day_start)
  '
---
# name: TestTrends.test_person_property_filtering_clashing_with_event_property_materialized
  '
  
  SELECT groupArray(day_start) as date,
         groupArray(count) AS total
  FROM
    (SELECT SUM(total) AS count,
            day_start
     FROM
       (SELECT toUInt16(0) AS total,
               toStartOfDay(toDateTime('2020-01-04 23:59:59', 'UTC')) - toIntervalDay(number) AS day_start
        FROM numbers(dateDiff('day', toStartOfDay(toDateTime('2019-12-28 00:00:00', 'UTC')), toDateTime('2020-01-04 23:59:59', 'UTC')))
        UNION ALL SELECT toUInt16(0) AS total,
                         toStartOfDay(toDateTime('2019-12-28 00:00:00', 'UTC'))
        UNION ALL SELECT count(*) AS total,
                         toStartOfDay(toTimeZone(toDateTime(timestamp, 'UTC'), 'UTC')) AS date
        FROM events e
        INNER JOIN
          (SELECT distinct_id,
                  argMax(person_id, version) as person_id
           FROM person_distinct_id2
           WHERE team_id = 2
           GROUP BY distinct_id
           HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
        INNER JOIN
          (SELECT id
           FROM person
           WHERE team_id = 2
             AND id IN
               (SELECT id
                FROM person
                WHERE team_id = 2
                  AND (has(['person1'], "pmat_name")) )
           GROUP BY id
           HAVING max(is_deleted) = 0
           AND (has(['person1'], argMax(person."pmat_name", version))) SETTINGS optimize_aggregation_in_order = 1) person ON person.id = pdi.person_id
        WHERE team_id = 2
          AND event = 'watched movie'
          AND toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfDay(toDateTime('2019-12-28 00:00:00', 'UTC')), 'UTC')
          AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-04 23:59:59', 'UTC')
        GROUP BY date)
     GROUP BY day_start
     ORDER BY day_start)
  '
---
# name: TestTrends.test_person_property_filtering_clashing_with_event_property_materialized.1
  '
  
  SELECT groupArray(day_start) as date,
         groupArray(count) AS total
  FROM
    (SELECT SUM(total) AS count,
            day_start
     FROM
       (SELECT toUInt16(0) AS total,
               toStartOfDay(toDateTime('2020-01-04 23:59:59', 'UTC')) - toIntervalDay(number) AS day_start
        FROM numbers(dateDiff('day', toStartOfDay(toDateTime('2019-12-28 00:00:00', 'UTC')), toDateTime('2020-01-04 23:59:59', 'UTC')))
        UNION ALL SELECT toUInt16(0) AS total,
                         toStartOfDay(toDateTime('2019-12-28 00:00:00', 'UTC'))
        UNION ALL SELECT count(*) AS total,
                         toStartOfDay(toTimeZone(toDateTime(timestamp, 'UTC'), 'UTC')) AS date
        FROM events e
        WHERE team_id = 2
          AND event = 'watched movie'
          AND toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfDay(toDateTime('2019-12-28 00:00:00', 'UTC')), 'UTC')
          AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-04 23:59:59', 'UTC')
          AND (has(['1'], "mat_name"))
        GROUP BY date)
     GROUP BY day_start
     ORDER BY day_start)
  '
---
# name: TestTrends.test_person_property_filtering_materialized
  '
  
  SELECT groupArray(day_start) as date,
         groupArray(count) AS total
  FROM
    (SELECT SUM(total) AS count,
            day_start
     FROM
       (SELECT toUInt16(0) AS total,
               toStartOfDay(toDateTime('2020-01-04 23:59:59', 'UTC')) - toIntervalDay(number) AS day_start
        FROM numbers(dateDiff('day', toStartOfDay(toDateTime('2019-12-28 00:00:00', 'UTC')), toDateTime('2020-01-04 23:59:59', 'UTC')))
        UNION ALL SELECT toUInt16(0) AS total,
                         toStartOfDay(toDateTime('2019-12-28 00:00:00', 'UTC'))
        UNION ALL SELECT count(*) AS total,
                         toStartOfDay(toTimeZone(toDateTime(timestamp, 'UTC'), 'UTC')) AS date
        FROM events e
        INNER JOIN
          (SELECT distinct_id,
                  argMax(person_id, version) as person_id
           FROM person_distinct_id2
           WHERE team_id = 2
           GROUP BY distinct_id
           HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
        INNER JOIN
          (SELECT id
           FROM person
           WHERE team_id = 2
             AND id IN
               (SELECT id
                FROM person
                WHERE team_id = 2
                  AND (has(['person1'], "pmat_name")) )
           GROUP BY id
           HAVING max(is_deleted) = 0
           AND (has(['person1'], argMax(person."pmat_name", version))) SETTINGS optimize_aggregation_in_order = 1) person ON person.id = pdi.person_id
        WHERE team_id = 2
          AND event = 'watched movie'
          AND toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfDay(toDateTime('2019-12-28 00:00:00', 'UTC')), 'UTC')
          AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-04 23:59:59', 'UTC')
        GROUP BY date)
     GROUP BY day_start
     ORDER BY day_start)
  '
---
# name: TestTrends.test_same_day_with_person_on_events_v2
  '
  
  SELECT distinct_id,
         person_id
  FROM events
  WHERE team_id = 2
    AND distinct_id IN ('distinctid1',
                        'distinctid2')
  GROUP BY distinct_id,
           person_id
  ORDER BY if(distinct_id = 'distinctid1', -1, 0)
  '
---
# name: TestTrends.test_same_day_with_person_on_events_v2.1
  '
  
  SELECT groupArray(day_start) as date,
         groupArray(count) AS total
  FROM
    (SELECT SUM(total) AS count,
            day_start
     FROM
       (SELECT toUInt16(0) AS total,
               toStartOfDay(toDateTime('2020-01-03 23:59:59', 'UTC')) - toIntervalDay(number) AS day_start
        FROM numbers(dateDiff('day', toStartOfDay(toDateTime('2020-01-03 00:00:00', 'UTC')), toDateTime('2020-01-03 23:59:59', 'UTC')))
        UNION ALL SELECT toUInt16(0) AS total,
                         toStartOfDay(toDateTime('2020-01-03 00:00:00', 'UTC'))
        UNION ALL SELECT count(*) AS total,
                         toStartOfDay(toTimeZone(toDateTime(timestamp, 'UTC'), 'UTC')) AS date
        FROM events e
        WHERE team_id = 2
          AND event = 'sign up'
          AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-03 00:00:00', 'UTC')
          AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-03 23:59:59', 'UTC')
          AND notEmpty(e.person_id)
        GROUP BY date)
     GROUP BY day_start
     ORDER BY day_start)
  '
---
# name: TestTrends.test_same_day_with_person_on_events_v2.2
  '
  
  SELECT groupArray(day_start) as date,
         groupArray(count) AS total
  FROM
    (SELECT SUM(total) AS count,
            day_start
     FROM
       (SELECT toUInt16(0) AS total,
               toStartOfDay(toDateTime('2020-01-03 23:59:59', 'UTC')) - toIntervalDay(number) AS day_start
        FROM numbers(dateDiff('day', toStartOfDay(toDateTime('2020-01-03 00:00:00', 'UTC')), toDateTime('2020-01-03 23:59:59', 'UTC')))
        UNION ALL SELECT toUInt16(0) AS total,
                         toStartOfDay(toDateTime('2020-01-03 00:00:00', 'UTC'))
        UNION ALL SELECT count(DISTINCT if(notEmpty(overrides.person_id), overrides.person_id, e.person_id)) AS total,
                         toStartOfDay(toTimeZone(toDateTime(timestamp, 'UTC'), 'UTC')) AS date
        FROM events e
        LEFT OUTER JOIN
          (SELECT argMax(override_person_id, version) as person_id,
                  old_person_id
           FROM person_overrides
           WHERE team_id = 2
           GROUP BY old_person_id) AS overrides ON e.person_id = overrides.old_person_id
        WHERE team_id = 2
          AND event = 'sign up'
          AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-03 00:00:00', 'UTC')
          AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-03 23:59:59', 'UTC')
          AND notEmpty(e.person_id)
        GROUP BY date)
     GROUP BY day_start
     ORDER BY day_start)
  '
---
# name: TestTrends.test_same_day_with_person_on_events_v2_latest_override
  '
  
  SELECT distinct_id,
         person_id
  FROM events
  WHERE team_id = 2
    AND distinct_id IN ('distinctid1',
                        'distinctid2')
  GROUP BY distinct_id,
           person_id
  ORDER BY if(distinct_id = 'distinctid1', -1, 0)
  '
---
# name: TestTrends.test_same_day_with_person_on_events_v2_latest_override.1
  '
  
  SELECT groupArray(day_start) as date,
         groupArray(count) AS total
  FROM
    (SELECT SUM(total) AS count,
            day_start
     FROM
       (SELECT toUInt16(0) AS total,
               toStartOfDay(toDateTime('2020-01-03 23:59:59', 'UTC')) - toIntervalDay(number) AS day_start
        FROM numbers(dateDiff('day', toStartOfDay(toDateTime('2020-01-03 00:00:00', 'UTC')), toDateTime('2020-01-03 23:59:59', 'UTC')))
        UNION ALL SELECT toUInt16(0) AS total,
                         toStartOfDay(toDateTime('2020-01-03 00:00:00', 'UTC'))
        UNION ALL SELECT count(DISTINCT if(notEmpty(overrides.person_id), overrides.person_id, e.person_id)) AS total,
                         toStartOfDay(toTimeZone(toDateTime(timestamp, 'UTC'), 'UTC')) AS date
        FROM events e
        LEFT OUTER JOIN
          (SELECT argMax(override_person_id, version) as person_id,
                  old_person_id
           FROM person_overrides
           WHERE team_id = 2
           GROUP BY old_person_id) AS overrides ON e.person_id = overrides.old_person_id
        WHERE team_id = 2
          AND event = 'sign up'
          AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-03 00:00:00', 'UTC')
          AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-03 23:59:59', 'UTC')
          AND notEmpty(e.person_id)
        GROUP BY date)
     GROUP BY day_start
     ORDER BY day_start)
  '
---
# name: TestTrends.test_same_day_with_person_on_events_v2_latest_override.2
  '
  
  SELECT distinct_id,
         person_id
  FROM events
  WHERE team_id = 2
    AND distinct_id IN ('distinctid1',
                        'distinctid3')
  GROUP BY distinct_id,
           person_id
  ORDER BY if(distinct_id = 'distinctid1', -1, 0)
  '
---
# name: TestTrends.test_same_day_with_person_on_events_v2_latest_override.3
  '
  
  SELECT groupArray(day_start) as date,
         groupArray(count) AS total
  FROM
    (SELECT SUM(total) AS count,
            day_start
     FROM
       (SELECT toUInt16(0) AS total,
               toStartOfDay(toDateTime('2020-01-03 23:59:59', 'UTC')) - toIntervalDay(number) AS day_start
        FROM numbers(dateDiff('day', toStartOfDay(toDateTime('2020-01-03 00:00:00', 'UTC')), toDateTime('2020-01-03 23:59:59', 'UTC')))
        UNION ALL SELECT toUInt16(0) AS total,
                         toStartOfDay(toDateTime('2020-01-03 00:00:00', 'UTC'))
        UNION ALL SELECT count(DISTINCT if(notEmpty(overrides.person_id), overrides.person_id, e.person_id)) AS total,
                         toStartOfDay(toTimeZone(toDateTime(timestamp, 'UTC'), 'UTC')) AS date
        FROM events e
        LEFT OUTER JOIN
          (SELECT argMax(override_person_id, version) as person_id,
                  old_person_id
           FROM person_overrides
           WHERE team_id = 2
           GROUP BY old_person_id) AS overrides ON e.person_id = overrides.old_person_id
        WHERE team_id = 2
          AND event = 'sign up'
          AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-03 00:00:00', 'UTC')
          AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-03 23:59:59', 'UTC')
          AND notEmpty(e.person_id)
        GROUP BY date)
     GROUP BY day_start
     ORDER BY day_start)
  '
---
# name: TestTrends.test_same_day_with_person_on_events_v2_latest_override.4
  '
  
  SELECT distinct_id,
         person_id
  FROM events
  WHERE team_id = 2
    AND distinct_id IN ('distinctid1',
                        'distinctid2')
  GROUP BY distinct_id,
           person_id
  ORDER BY if(distinct_id = 'distinctid1', -1, 0)
  '
---
# name: TestTrends.test_same_day_with_person_on_events_v2_latest_override.5
  '
  
  SELECT groupArray(day_start) as date,
         groupArray(count) AS total
  FROM
    (SELECT SUM(total) AS count,
            day_start
     FROM
       (SELECT toUInt16(0) AS total,
               toStartOfDay(toDateTime('2020-01-03 23:59:59', 'UTC')) - toIntervalDay(number) AS day_start
        FROM numbers(dateDiff('day', toStartOfDay(toDateTime('2020-01-03 00:00:00', 'UTC')), toDateTime('2020-01-03 23:59:59', 'UTC')))
        UNION ALL SELECT toUInt16(0) AS total,
                         toStartOfDay(toDateTime('2020-01-03 00:00:00', 'UTC'))
        UNION ALL SELECT count(DISTINCT if(notEmpty(overrides.person_id), overrides.person_id, e.person_id)) AS total,
                         toStartOfDay(toTimeZone(toDateTime(timestamp, 'UTC'), 'UTC')) AS date
        FROM events e
        LEFT OUTER JOIN
          (SELECT argMax(override_person_id, version) as person_id,
                  old_person_id
           FROM person_overrides
           WHERE team_id = 2
           GROUP BY old_person_id) AS overrides ON e.person_id = overrides.old_person_id
        WHERE team_id = 2
          AND event = 'sign up'
          AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-03 00:00:00', 'UTC')
          AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-03 23:59:59', 'UTC')
          AND notEmpty(e.person_id)
        GROUP BY date)
     GROUP BY day_start
     ORDER BY day_start)
  '
---
# name: TestTrends.test_timezones_daily
  '
  
  SELECT groupArray(day_start) as date,
         groupArray(count) AS total
  FROM
    (SELECT SUM(total) AS count,
            day_start
     FROM
       (SELECT toUInt16(0) AS total,
               toStartOfDay(toDateTime('2020-01-05 23:59:59', 'UTC')) - toIntervalDay(number) AS day_start
        FROM numbers(dateDiff('day', toStartOfDay(toDateTime('2019-12-29 00:00:00', 'UTC')), toDateTime('2020-01-05 23:59:59', 'UTC')))
        UNION ALL SELECT toUInt16(0) AS total,
                         toStartOfDay(toDateTime('2019-12-29 00:00:00', 'UTC'))
        UNION ALL SELECT count(*) AS total,
                         toStartOfDay(toTimeZone(toDateTime(timestamp, 'UTC'), 'UTC')) AS date
        FROM events e
        WHERE team_id = 2
          AND event = 'sign up'
          AND toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfDay(toDateTime('2019-12-29 00:00:00', 'UTC')), 'UTC')
          AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-05 23:59:59', 'UTC')
        GROUP BY date)
     GROUP BY day_start
     ORDER BY day_start)
  '
---
# name: TestTrends.test_timezones_daily.1
  '
  
  SELECT groupArray(day_start) as date,
         groupArray(count) AS total
  FROM
    (SELECT SUM(total) AS count,
            day_start
     FROM
       (SELECT toUInt16(0) AS total,
               toStartOfDay(toDateTime('2020-01-05 23:59:59', 'UTC')) - toIntervalDay(number) AS day_start
        FROM numbers(dateDiff('day', toStartOfDay(toDateTime('2019-12-22 00:00:00', 'UTC')), toDateTime('2020-01-05 23:59:59', 'UTC')))
        UNION ALL SELECT toUInt16(0) AS total,
                         toStartOfDay(toDateTime('2019-12-22 00:00:00', 'UTC'))
        UNION ALL SELECT count(DISTINCT pdi.person_id) AS total,
                         toStartOfDay(toTimeZone(toDateTime(timestamp, 'UTC'), 'UTC')) AS date
        FROM events e
        INNER JOIN
          (SELECT distinct_id,
                  argMax(person_id, version) as person_id
           FROM person_distinct_id2
           WHERE team_id = 2
           GROUP BY distinct_id
           HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
        WHERE team_id = 2
          AND event = 'sign up'
          AND toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfDay(toDateTime('2019-12-22 00:00:00', 'UTC')), 'UTC')
          AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-05 23:59:59', 'UTC')
        GROUP BY date)
     GROUP BY day_start
     ORDER BY day_start)
  '
---
# name: TestTrends.test_timezones_daily.2
  '
  
  SELECT groupArray(day_start) as date,
         groupArray(count) AS total
  FROM
    (SELECT SUM(total) AS count,
            day_start
     FROM
       (SELECT toUInt16(0) AS total,
               toStartOfDay(toDateTime('2020-01-05 23:59:59', 'UTC')) - toIntervalDay(number) AS day_start
        FROM numbers(dateDiff('day', toStartOfDay(toDateTime('2019-12-29 00:00:00', 'UTC')), toDateTime('2020-01-05 23:59:59', 'UTC')))
        UNION ALL SELECT toUInt16(0) AS total,
                         toStartOfDay(toDateTime('2019-12-29 00:00:00', 'UTC'))
        UNION ALL SELECT counts AS total,
                         timestamp AS day_start
        FROM
          (SELECT d.timestamp,
                  COUNT(DISTINCT actor_id) AS counts
           FROM
             (SELECT toDateTime(toStartOfDay(toDateTime('2020-01-05 23:59:59', 'UTC')) - toIntervalDay(number)) AS timestamp
              FROM numbers(dateDiff('day', toStartOfDay(toDateTime('2019-12-22 00:00:00', 'UTC')), toDateTime('2020-01-05 23:59:59', 'UTC')))) d
           CROSS JOIN
             (SELECT toTimeZone(toDateTime(timestamp, 'UTC'), 'UTC') AS timestamp,
                     pdi.person_id AS actor_id
              FROM events e
              INNER JOIN
                (SELECT distinct_id,
                        argMax(person_id, version) as person_id
                 FROM person_distinct_id2
                 WHERE team_id = 2
                 GROUP BY distinct_id
                 HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
              WHERE team_id = 2
                AND event = 'sign up'
                AND toDateTime(timestamp, 'UTC') >= toDateTime('2019-12-22 00:00:00', 'UTC')
                AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-05 23:59:59', 'UTC')
              GROUP BY timestamp, actor_id) e
           WHERE e.timestamp <= d.timestamp + INTERVAL 1 DAY
             AND e.timestamp > d.timestamp - INTERVAL 6 DAY
           GROUP BY d.timestamp
           ORDER BY d.timestamp)
        WHERE 1 = 1
          AND toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfDay(toDateTime('2019-12-29 00:00:00', 'UTC')), 'UTC')
          AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-05 23:59:59', 'UTC') )
     GROUP BY day_start
     ORDER BY day_start)
  '
---
# name: TestTrends.test_timezones_daily.3
  '
  
  SELECT groupArray(day_start) as date,
         groupArray(count) AS total
  FROM
    (SELECT SUM(total) AS count,
            day_start
     FROM
       (SELECT toUInt16(0) AS total,
               toStartOfDay(toDateTime('2020-01-05 23:59:59', 'UTC')) - toIntervalDay(number) AS day_start
        FROM numbers(dateDiff('day', toStartOfDay(toDateTime('2019-12-29 00:00:00', 'UTC')), toDateTime('2020-01-05 23:59:59', 'UTC')))
        UNION ALL SELECT toUInt16(0) AS total,
                         toStartOfDay(toDateTime('2019-12-29 00:00:00', 'UTC'))
        UNION ALL SELECT count(*) AS total,
                         toStartOfDay(toTimeZone(toDateTime(timestamp, 'UTC'), 'UTC')) AS date
        FROM events e
        WHERE team_id = 2
          AND event = 'sign up'
          AND toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfDay(toDateTime('2019-12-29 00:00:00', 'UTC')), 'UTC')
          AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-05 23:59:59', 'UTC')
        GROUP BY date)
     GROUP BY day_start
     ORDER BY day_start)
  '
---
# name: TestTrends.test_timezones_daily.4
  '
  
  SELECT groupArray(value)
  FROM
    (SELECT replaceRegexpAll(JSONExtractRaw(properties, '$os'), '^"|"$', '') AS value,
            count(*) as count
     FROM events e
     WHERE team_id = 2
       AND event = 'sign up'
       AND toTimeZone(timestamp, 'UTC') >= toDateTime('2019-12-29 00:00:00', 'UTC')
       AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-05 23:59:59', 'UTC')
     GROUP BY value
     ORDER BY count DESC, value DESC
     LIMIT 25
     OFFSET 0)
  '
---
# name: TestTrends.test_timezones_daily.5
  '
  
  SELECT groupArray(day_start) as date,
         groupArray(count) AS total,
         breakdown_value
  FROM
    (SELECT SUM(total) as count,
            day_start,
            breakdown_value
     FROM
       (SELECT *
        FROM
          (SELECT toUInt16(0) AS total,
                  ticks.day_start as day_start,
                  breakdown_value
           FROM
             (SELECT toStartOfDay(toDateTime('2020-01-05 23:59:59', 'UTC')) - toIntervalDay(number) as day_start
              FROM numbers(8)
              UNION ALL SELECT toStartOfDay(toDateTime('2019-12-29 00:00:00', 'UTC')) as day_start) as ticks
           CROSS JOIN
             (SELECT breakdown_value
              FROM
                (SELECT ['Mac'] as breakdown_value) ARRAY
              JOIN breakdown_value) as sec
           ORDER BY breakdown_value,
                    day_start
           UNION ALL SELECT count(DISTINCT pdi.person_id) as total,
                            toStartOfDay(toTimeZone(toDateTime(timestamp, 'UTC'), 'UTC')) as day_start,
                            replaceRegexpAll(JSONExtractRaw(properties, '$os'), '^"|"$', '') as breakdown_value
           FROM events e
           INNER JOIN
             (SELECT distinct_id,
                     argMax(person_id, version) as person_id
              FROM person_distinct_id2
              WHERE team_id = 2
              GROUP BY distinct_id
              HAVING argMax(is_deleted, version) = 0) as pdi ON events.distinct_id = pdi.distinct_id
           WHERE e.team_id = 2
             AND event = 'sign up'
             AND toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfDay(toDateTime('2019-12-29 00:00:00', 'UTC')), 'UTC')
             AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-05 23:59:59', 'UTC')
             AND replaceRegexpAll(JSONExtractRaw(properties, '$os'), '^"|"$', '') in (['Mac'])
           GROUP BY day_start,
                    breakdown_value))
     GROUP BY day_start,
              breakdown_value
     ORDER BY breakdown_value,
              day_start)
  GROUP BY breakdown_value
  ORDER BY breakdown_value
  '
---
# name: TestTrends.test_timezones_daily_minus_utc
  '
  
  SELECT groupArray(day_start) as date,
         groupArray(count) AS total
  FROM
    (SELECT SUM(total) AS count,
            day_start
     FROM
       (SELECT toUInt16(0) AS total,
               toStartOfDay(toDateTime('2020-01-05 23:59:59', 'America/Phoenix')) - toIntervalDay(number) AS day_start
        FROM numbers(dateDiff('day', toStartOfDay(toDateTime('2019-12-29 00:00:00', 'America/Phoenix')), toDateTime('2020-01-05 23:59:59', 'America/Phoenix')))
        UNION ALL SELECT toUInt16(0) AS total,
                         toStartOfDay(toDateTime('2019-12-29 00:00:00', 'America/Phoenix'))
        UNION ALL SELECT count(*) AS total,
                         toStartOfDay(toTimeZone(toDateTime(timestamp, 'UTC'), 'America/Phoenix')) AS date
        FROM events e
        WHERE team_id = 2
          AND event = 'sign up'
          AND toTimeZone(timestamp, 'America/Phoenix') >= toDateTime(toStartOfDay(toDateTime('2019-12-29 00:00:00', 'America/Phoenix')), 'America/Phoenix')
          AND toTimeZone(timestamp, 'America/Phoenix') <= toDateTime('2020-01-05 23:59:59', 'America/Phoenix')
        GROUP BY date)
     GROUP BY day_start
     ORDER BY day_start)
  '
---
# name: TestTrends.test_timezones_daily_minus_utc.1
  '
  
  SELECT groupArray(day_start) as date,
         groupArray(count) AS total
  FROM
    (SELECT SUM(total) AS count,
            day_start
     FROM
       (SELECT toUInt16(0) AS total,
               toStartOfDay(toDateTime('2020-01-05 23:59:59', 'America/Phoenix')) - toIntervalDay(number) AS day_start
        FROM numbers(dateDiff('day', toStartOfDay(toDateTime('2019-12-22 00:00:00', 'America/Phoenix')), toDateTime('2020-01-05 23:59:59', 'America/Phoenix')))
        UNION ALL SELECT toUInt16(0) AS total,
                         toStartOfDay(toDateTime('2019-12-22 00:00:00', 'America/Phoenix'))
        UNION ALL SELECT count(DISTINCT pdi.person_id) AS total,
                         toStartOfDay(toTimeZone(toDateTime(timestamp, 'UTC'), 'America/Phoenix')) AS date
        FROM events e
        INNER JOIN
          (SELECT distinct_id,
                  argMax(person_id, version) as person_id
           FROM person_distinct_id2
           WHERE team_id = 2
           GROUP BY distinct_id
           HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
        WHERE team_id = 2
          AND event = 'sign up'
          AND toTimeZone(timestamp, 'America/Phoenix') >= toDateTime(toStartOfDay(toDateTime('2019-12-22 00:00:00', 'America/Phoenix')), 'America/Phoenix')
          AND toTimeZone(timestamp, 'America/Phoenix') <= toDateTime('2020-01-05 23:59:59', 'America/Phoenix')
        GROUP BY date)
     GROUP BY day_start
     ORDER BY day_start)
  '
---
# name: TestTrends.test_timezones_daily_minus_utc.2
  '
  
  SELECT groupArray(day_start) as date,
         groupArray(count) AS total
  FROM
    (SELECT SUM(total) AS count,
            day_start
     FROM
       (SELECT toUInt16(0) AS total,
               toStartOfDay(toDateTime('2020-01-05 23:59:59', 'America/Phoenix')) - toIntervalDay(number) AS day_start
        FROM numbers(dateDiff('day', toStartOfDay(toDateTime('2019-12-29 00:00:00', 'America/Phoenix')), toDateTime('2020-01-05 23:59:59', 'America/Phoenix')))
        UNION ALL SELECT toUInt16(0) AS total,
                         toStartOfDay(toDateTime('2019-12-29 00:00:00', 'America/Phoenix'))
        UNION ALL SELECT counts AS total,
                         timestamp AS day_start
        FROM
          (SELECT d.timestamp,
                  COUNT(DISTINCT actor_id) AS counts
           FROM
             (SELECT toDateTime(toStartOfDay(toDateTime('2020-01-05 23:59:59', 'America/Phoenix')) - toIntervalDay(number)) AS timestamp
              FROM numbers(dateDiff('day', toStartOfDay(toDateTime('2019-12-22 00:00:00', 'America/Phoenix')), toDateTime('2020-01-05 23:59:59', 'America/Phoenix')))) d
           CROSS JOIN
             (SELECT toTimeZone(toDateTime(timestamp, 'UTC'), 'America/Phoenix') AS timestamp,
                     pdi.person_id AS actor_id
              FROM events e
              INNER JOIN
                (SELECT distinct_id,
                        argMax(person_id, version) as person_id
                 FROM person_distinct_id2
                 WHERE team_id = 2
                 GROUP BY distinct_id
                 HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
              WHERE team_id = 2
                AND event = 'sign up'
                AND toDateTime(timestamp, 'UTC') >= toDateTime('2019-12-22 00:00:00', 'America/Phoenix')
                AND toTimeZone(timestamp, 'America/Phoenix') <= toDateTime('2020-01-05 23:59:59', 'America/Phoenix')
              GROUP BY timestamp, actor_id) e
           WHERE e.timestamp <= d.timestamp + INTERVAL 1 DAY
             AND e.timestamp > d.timestamp - INTERVAL 6 DAY
           GROUP BY d.timestamp
           ORDER BY d.timestamp)
        WHERE 1 = 1
          AND toTimeZone(timestamp, 'America/Phoenix') >= toDateTime(toStartOfDay(toDateTime('2019-12-29 00:00:00', 'America/Phoenix')), 'America/Phoenix')
          AND toTimeZone(timestamp, 'America/Phoenix') <= toDateTime('2020-01-05 23:59:59', 'America/Phoenix') )
     GROUP BY day_start
     ORDER BY day_start)
  '
---
# name: TestTrends.test_timezones_daily_minus_utc.3
  '
  
  SELECT groupArray(day_start) as date,
         groupArray(count) AS total
  FROM
    (SELECT SUM(total) AS count,
            day_start
     FROM
       (SELECT toUInt16(0) AS total,
               toStartOfDay(toDateTime('2020-01-05 23:59:59', 'America/Phoenix')) - toIntervalDay(number) AS day_start
        FROM numbers(dateDiff('day', toStartOfDay(toDateTime('2019-12-29 00:00:00', 'America/Phoenix')), toDateTime('2020-01-05 23:59:59', 'America/Phoenix')))
        UNION ALL SELECT toUInt16(0) AS total,
                         toStartOfDay(toDateTime('2019-12-29 00:00:00', 'America/Phoenix'))
        UNION ALL SELECT count(*) AS total,
                         toStartOfDay(toTimeZone(toDateTime(timestamp, 'UTC'), 'America/Phoenix')) AS date
        FROM events e
        WHERE team_id = 2
          AND event = 'sign up'
          AND toTimeZone(timestamp, 'America/Phoenix') >= toDateTime(toStartOfDay(toDateTime('2019-12-29 00:00:00', 'America/Phoenix')), 'America/Phoenix')
          AND toTimeZone(timestamp, 'America/Phoenix') <= toDateTime('2020-01-05 23:59:59', 'America/Phoenix')
        GROUP BY date)
     GROUP BY day_start
     ORDER BY day_start)
  '
---
# name: TestTrends.test_timezones_daily_minus_utc.4
  '
  
  SELECT groupArray(value)
  FROM
    (SELECT replaceRegexpAll(JSONExtractRaw(properties, '$os'), '^"|"$', '') AS value,
            count(*) as count
     FROM events e
     WHERE team_id = 2
       AND event = 'sign up'
       AND toTimeZone(timestamp, 'America/Phoenix') >= toDateTime('2019-12-29 00:00:00', 'America/Phoenix')
       AND toTimeZone(timestamp, 'America/Phoenix') <= toDateTime('2020-01-05 23:59:59', 'America/Phoenix')
     GROUP BY value
     ORDER BY count DESC, value DESC
     LIMIT 25
     OFFSET 0)
  '
---
# name: TestTrends.test_timezones_daily_minus_utc.5
  '
  
  SELECT groupArray(day_start) as date,
         groupArray(count) AS total,
         breakdown_value
  FROM
    (SELECT SUM(total) as count,
            day_start,
            breakdown_value
     FROM
       (SELECT *
        FROM
          (SELECT toUInt16(0) AS total,
                  ticks.day_start as day_start,
                  breakdown_value
           FROM
             (SELECT toStartOfDay(toDateTime('2020-01-05 23:59:59', 'America/Phoenix')) - toIntervalDay(number) as day_start
              FROM numbers(8)
              UNION ALL SELECT toStartOfDay(toDateTime('2019-12-29 00:00:00', 'America/Phoenix')) as day_start) as ticks
           CROSS JOIN
             (SELECT breakdown_value
              FROM
                (SELECT ['Mac'] as breakdown_value) ARRAY
              JOIN breakdown_value) as sec
           ORDER BY breakdown_value,
                    day_start
           UNION ALL SELECT count(DISTINCT pdi.person_id) as total,
                            toStartOfDay(toTimeZone(toDateTime(timestamp, 'UTC'), 'America/Phoenix')) as day_start,
                            replaceRegexpAll(JSONExtractRaw(properties, '$os'), '^"|"$', '') as breakdown_value
           FROM events e
           INNER JOIN
             (SELECT distinct_id,
                     argMax(person_id, version) as person_id
              FROM person_distinct_id2
              WHERE team_id = 2
              GROUP BY distinct_id
              HAVING argMax(is_deleted, version) = 0) as pdi ON events.distinct_id = pdi.distinct_id
           WHERE e.team_id = 2
             AND event = 'sign up'
             AND toTimeZone(timestamp, 'America/Phoenix') >= toDateTime(toStartOfDay(toDateTime('2019-12-29 00:00:00', 'America/Phoenix')), 'America/Phoenix')
             AND toTimeZone(timestamp, 'America/Phoenix') <= toDateTime('2020-01-05 23:59:59', 'America/Phoenix')
             AND replaceRegexpAll(JSONExtractRaw(properties, '$os'), '^"|"$', '') in (['Mac'])
           GROUP BY day_start,
                    breakdown_value))
     GROUP BY day_start,
              breakdown_value
     ORDER BY breakdown_value,
              day_start)
  GROUP BY breakdown_value
  ORDER BY breakdown_value
  '
---
# name: TestTrends.test_timezones_daily_plus_utc
  '
  
  SELECT groupArray(day_start) as date,
         groupArray(count) AS total
  FROM
    (SELECT SUM(total) AS count,
            day_start
     FROM
       (SELECT toUInt16(0) AS total,
               toStartOfDay(toDateTime('2020-01-05 23:59:59', 'Asia/Tokyo')) - toIntervalDay(number) AS day_start
        FROM numbers(dateDiff('day', toStartOfDay(toDateTime('2019-12-29 00:00:00', 'Asia/Tokyo')), toDateTime('2020-01-05 23:59:59', 'Asia/Tokyo')))
        UNION ALL SELECT toUInt16(0) AS total,
                         toStartOfDay(toDateTime('2019-12-29 00:00:00', 'Asia/Tokyo'))
        UNION ALL SELECT count(*) AS total,
                         toStartOfDay(toTimeZone(toDateTime(timestamp, 'UTC'), 'Asia/Tokyo')) AS date
        FROM events e
        WHERE team_id = 2
          AND event = 'sign up'
          AND toTimeZone(timestamp, 'Asia/Tokyo') >= toDateTime(toStartOfDay(toDateTime('2019-12-29 00:00:00', 'Asia/Tokyo')), 'Asia/Tokyo')
          AND toTimeZone(timestamp, 'Asia/Tokyo') <= toDateTime('2020-01-05 23:59:59', 'Asia/Tokyo')
        GROUP BY date)
     GROUP BY day_start
     ORDER BY day_start)
  '
---
# name: TestTrends.test_timezones_daily_plus_utc.1
  '
  
  SELECT groupArray(day_start) as date,
         groupArray(count) AS total
  FROM
    (SELECT SUM(total) AS count,
            day_start
     FROM
       (SELECT toUInt16(0) AS total,
               toStartOfDay(toDateTime('2020-01-05 23:59:59', 'Asia/Tokyo')) - toIntervalDay(number) AS day_start
        FROM numbers(dateDiff('day', toStartOfDay(toDateTime('2019-12-22 00:00:00', 'Asia/Tokyo')), toDateTime('2020-01-05 23:59:59', 'Asia/Tokyo')))
        UNION ALL SELECT toUInt16(0) AS total,
                         toStartOfDay(toDateTime('2019-12-22 00:00:00', 'Asia/Tokyo'))
        UNION ALL SELECT count(DISTINCT pdi.person_id) AS total,
                         toStartOfDay(toTimeZone(toDateTime(timestamp, 'UTC'), 'Asia/Tokyo')) AS date
        FROM events e
        INNER JOIN
          (SELECT distinct_id,
                  argMax(person_id, version) as person_id
           FROM person_distinct_id2
           WHERE team_id = 2
           GROUP BY distinct_id
           HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
        WHERE team_id = 2
          AND event = 'sign up'
          AND toTimeZone(timestamp, 'Asia/Tokyo') >= toDateTime(toStartOfDay(toDateTime('2019-12-22 00:00:00', 'Asia/Tokyo')), 'Asia/Tokyo')
          AND toTimeZone(timestamp, 'Asia/Tokyo') <= toDateTime('2020-01-05 23:59:59', 'Asia/Tokyo')
        GROUP BY date)
     GROUP BY day_start
     ORDER BY day_start)
  '
---
# name: TestTrends.test_timezones_daily_plus_utc.2
  '
  
  SELECT groupArray(day_start) as date,
         groupArray(count) AS total
  FROM
    (SELECT SUM(total) AS count,
            day_start
     FROM
       (SELECT toUInt16(0) AS total,
               toStartOfDay(toDateTime('2020-01-05 23:59:59', 'Asia/Tokyo')) - toIntervalDay(number) AS day_start
        FROM numbers(dateDiff('day', toStartOfDay(toDateTime('2019-12-29 00:00:00', 'Asia/Tokyo')), toDateTime('2020-01-05 23:59:59', 'Asia/Tokyo')))
        UNION ALL SELECT toUInt16(0) AS total,
                         toStartOfDay(toDateTime('2019-12-29 00:00:00', 'Asia/Tokyo'))
        UNION ALL SELECT counts AS total,
                         timestamp AS day_start
        FROM
          (SELECT d.timestamp,
                  COUNT(DISTINCT actor_id) AS counts
           FROM
             (SELECT toDateTime(toStartOfDay(toDateTime('2020-01-05 23:59:59', 'Asia/Tokyo')) - toIntervalDay(number)) AS timestamp
              FROM numbers(dateDiff('day', toStartOfDay(toDateTime('2019-12-22 00:00:00', 'Asia/Tokyo')), toDateTime('2020-01-05 23:59:59', 'Asia/Tokyo')))) d
           CROSS JOIN
             (SELECT toTimeZone(toDateTime(timestamp, 'UTC'), 'Asia/Tokyo') AS timestamp,
                     pdi.person_id AS actor_id
              FROM events e
              INNER JOIN
                (SELECT distinct_id,
                        argMax(person_id, version) as person_id
                 FROM person_distinct_id2
                 WHERE team_id = 2
                 GROUP BY distinct_id
                 HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
              WHERE team_id = 2
                AND event = 'sign up'
                AND toDateTime(timestamp, 'UTC') >= toDateTime('2019-12-22 00:00:00', 'Asia/Tokyo')
                AND toTimeZone(timestamp, 'Asia/Tokyo') <= toDateTime('2020-01-05 23:59:59', 'Asia/Tokyo')
              GROUP BY timestamp, actor_id) e
           WHERE e.timestamp <= d.timestamp + INTERVAL 1 DAY
             AND e.timestamp > d.timestamp - INTERVAL 6 DAY
           GROUP BY d.timestamp
           ORDER BY d.timestamp)
        WHERE 1 = 1
          AND toTimeZone(timestamp, 'Asia/Tokyo') >= toDateTime(toStartOfDay(toDateTime('2019-12-29 00:00:00', 'Asia/Tokyo')), 'Asia/Tokyo')
          AND toTimeZone(timestamp, 'Asia/Tokyo') <= toDateTime('2020-01-05 23:59:59', 'Asia/Tokyo') )
     GROUP BY day_start
     ORDER BY day_start)
  '
---
# name: TestTrends.test_timezones_daily_plus_utc.3
  '
  
  SELECT groupArray(day_start) as date,
         groupArray(count) AS total
  FROM
    (SELECT SUM(total) AS count,
            day_start
     FROM
       (SELECT toUInt16(0) AS total,
               toStartOfDay(toDateTime('2020-01-05 23:59:59', 'Asia/Tokyo')) - toIntervalDay(number) AS day_start
        FROM numbers(dateDiff('day', toStartOfDay(toDateTime('2019-12-29 00:00:00', 'Asia/Tokyo')), toDateTime('2020-01-05 23:59:59', 'Asia/Tokyo')))
        UNION ALL SELECT toUInt16(0) AS total,
                         toStartOfDay(toDateTime('2019-12-29 00:00:00', 'Asia/Tokyo'))
        UNION ALL SELECT count(*) AS total,
                         toStartOfDay(toTimeZone(toDateTime(timestamp, 'UTC'), 'Asia/Tokyo')) AS date
        FROM events e
        WHERE team_id = 2
          AND event = 'sign up'
          AND toTimeZone(timestamp, 'Asia/Tokyo') >= toDateTime(toStartOfDay(toDateTime('2019-12-29 00:00:00', 'Asia/Tokyo')), 'Asia/Tokyo')
          AND toTimeZone(timestamp, 'Asia/Tokyo') <= toDateTime('2020-01-05 23:59:59', 'Asia/Tokyo')
        GROUP BY date)
     GROUP BY day_start
     ORDER BY day_start)
  '
---
# name: TestTrends.test_timezones_daily_plus_utc.4
  '
  
  SELECT groupArray(value)
  FROM
    (SELECT replaceRegexpAll(JSONExtractRaw(properties, '$os'), '^"|"$', '') AS value,
            count(*) as count
     FROM events e
     WHERE team_id = 2
       AND event = 'sign up'
       AND toTimeZone(timestamp, 'Asia/Tokyo') >= toDateTime('2019-12-29 00:00:00', 'Asia/Tokyo')
       AND toTimeZone(timestamp, 'Asia/Tokyo') <= toDateTime('2020-01-05 23:59:59', 'Asia/Tokyo')
     GROUP BY value
     ORDER BY count DESC, value DESC
     LIMIT 25
     OFFSET 0)
  '
---
# name: TestTrends.test_timezones_daily_plus_utc.5
  '
  
  SELECT groupArray(day_start) as date,
         groupArray(count) AS total,
         breakdown_value
  FROM
    (SELECT SUM(total) as count,
            day_start,
            breakdown_value
     FROM
       (SELECT *
        FROM
          (SELECT toUInt16(0) AS total,
                  ticks.day_start as day_start,
                  breakdown_value
           FROM
             (SELECT toStartOfDay(toDateTime('2020-01-05 23:59:59', 'Asia/Tokyo')) - toIntervalDay(number) as day_start
              FROM numbers(8)
              UNION ALL SELECT toStartOfDay(toDateTime('2019-12-29 00:00:00', 'Asia/Tokyo')) as day_start) as ticks
           CROSS JOIN
             (SELECT breakdown_value
              FROM
                (SELECT ['Mac'] as breakdown_value) ARRAY
              JOIN breakdown_value) as sec
           ORDER BY breakdown_value,
                    day_start
           UNION ALL SELECT count(DISTINCT pdi.person_id) as total,
                            toStartOfDay(toTimeZone(toDateTime(timestamp, 'UTC'), 'Asia/Tokyo')) as day_start,
                            replaceRegexpAll(JSONExtractRaw(properties, '$os'), '^"|"$', '') as breakdown_value
           FROM events e
           INNER JOIN
             (SELECT distinct_id,
                     argMax(person_id, version) as person_id
              FROM person_distinct_id2
              WHERE team_id = 2
              GROUP BY distinct_id
              HAVING argMax(is_deleted, version) = 0) as pdi ON events.distinct_id = pdi.distinct_id
           WHERE e.team_id = 2
             AND event = 'sign up'
             AND toTimeZone(timestamp, 'Asia/Tokyo') >= toDateTime(toStartOfDay(toDateTime('2019-12-29 00:00:00', 'Asia/Tokyo')), 'Asia/Tokyo')
             AND toTimeZone(timestamp, 'Asia/Tokyo') <= toDateTime('2020-01-05 23:59:59', 'Asia/Tokyo')
             AND replaceRegexpAll(JSONExtractRaw(properties, '$os'), '^"|"$', '') in (['Mac'])
           GROUP BY day_start,
                    breakdown_value))
     GROUP BY day_start,
              breakdown_value
     ORDER BY breakdown_value,
              day_start)
  GROUP BY breakdown_value
  ORDER BY breakdown_value
  '
---
# name: TestTrends.test_timezones_hourly_relative_from
  '
  
  SELECT groupArray(day_start) as date,
         groupArray(count) AS total
  FROM
    (SELECT SUM(total) AS count,
            day_start
     FROM
       (SELECT toUInt16(0) AS total,
               toStartOfHour(toDateTime('2020-01-05 10:59:59', 'UTC')) - toIntervalHour(number) AS day_start
        FROM numbers(dateDiff('hour', toStartOfHour(toDateTime('2020-01-05 00:00:00', 'UTC')), toDateTime('2020-01-05 10:59:59', 'UTC')))
        UNION ALL SELECT toUInt16(0) AS total,
                         toStartOfHour(toDateTime('2020-01-05 00:00:00', 'UTC'))
        UNION ALL SELECT count(DISTINCT pdi.person_id) AS total,
                         toStartOfHour(toTimeZone(toDateTime(timestamp, 'UTC'), 'UTC')) AS date
        FROM events e
        INNER JOIN
          (SELECT distinct_id,
                  argMax(person_id, version) as person_id
           FROM person_distinct_id2
           WHERE team_id = 2
           GROUP BY distinct_id
           HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
        WHERE team_id = 2
          AND event = 'sign up'
          AND toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfHour(toDateTime('2020-01-05 00:00:00', 'UTC')), 'UTC')
          AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-05 10:59:59', 'UTC')
        GROUP BY date)
     GROUP BY day_start
     ORDER BY day_start)
  '
---
# name: TestTrends.test_timezones_hourly_relative_from.1
  '
  /* user_id:0 request:_snapshot_ */
  SELECT person_id AS actor_id,
         count() AS actor_value
  FROM
    (SELECT e.timestamp as timestamp,
            pdi.person_id as person_id,
            e.distinct_id as distinct_id,
            e.team_id as team_id
     FROM events e
     INNER JOIN
       (SELECT distinct_id,
               argMax(person_id, version) as person_id
        FROM person_distinct_id2
        WHERE team_id = 2
        GROUP BY distinct_id
        HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
     WHERE team_id = 2
       AND event = 'sign up'
       AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-05 07:00:00', 'UTC')
       AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-05 08:00:00', 'UTC') )
  GROUP BY actor_id
  ORDER BY actor_value DESC,
           actor_id DESC
  LIMIT 100
  OFFSET 0
  '
---
# name: TestTrends.test_timezones_hourly_relative_from.2
  '
  
  SELECT groupArray(day_start) as date,
         groupArray(count) AS total
  FROM
    (SELECT SUM(total) AS count,
            day_start
     FROM
       (SELECT toUInt16(0) AS total,
               toStartOfHour(toDateTime('2020-01-05 10:59:59', 'UTC')) - toIntervalHour(number) AS day_start
        FROM numbers(dateDiff('hour', toStartOfHour(toDateTime('2020-01-05 00:00:00', 'UTC')), toDateTime('2020-01-05 10:59:59', 'UTC')))
        UNION ALL SELECT toUInt16(0) AS total,
                         toStartOfHour(toDateTime('2020-01-05 00:00:00', 'UTC'))
        UNION ALL SELECT count(*) AS total,
                         toStartOfHour(toTimeZone(toDateTime(timestamp, 'UTC'), 'UTC')) AS date
        FROM events e
        WHERE team_id = 2
          AND event = 'sign up'
          AND toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfHour(toDateTime('2020-01-05 00:00:00', 'UTC')), 'UTC')
          AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-05 10:59:59', 'UTC')
        GROUP BY date)
     GROUP BY day_start
     ORDER BY day_start)
  '
---
# name: TestTrends.test_timezones_hourly_relative_from_minus_utc
  '
  
  SELECT groupArray(day_start) as date,
         groupArray(count) AS total
  FROM
    (SELECT SUM(total) AS count,
            day_start
     FROM
       (SELECT toUInt16(0) AS total,
               toStartOfHour(toDateTime('2020-01-05 10:59:59', 'America/Phoenix')) - toIntervalHour(number) AS day_start
        FROM numbers(dateDiff('hour', toStartOfHour(toDateTime('2020-01-05 00:00:00', 'America/Phoenix')), toDateTime('2020-01-05 10:59:59', 'America/Phoenix')))
        UNION ALL SELECT toUInt16(0) AS total,
                         toStartOfHour(toDateTime('2020-01-05 00:00:00', 'America/Phoenix'))
        UNION ALL SELECT count(DISTINCT pdi.person_id) AS total,
                         toStartOfHour(toTimeZone(toDateTime(timestamp, 'UTC'), 'America/Phoenix')) AS date
        FROM events e
        INNER JOIN
          (SELECT distinct_id,
                  argMax(person_id, version) as person_id
           FROM person_distinct_id2
           WHERE team_id = 2
           GROUP BY distinct_id
           HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
        WHERE team_id = 2
          AND event = 'sign up'
          AND toTimeZone(timestamp, 'America/Phoenix') >= toDateTime(toStartOfHour(toDateTime('2020-01-05 00:00:00', 'America/Phoenix')), 'America/Phoenix')
          AND toTimeZone(timestamp, 'America/Phoenix') <= toDateTime('2020-01-05 10:59:59', 'America/Phoenix')
        GROUP BY date)
     GROUP BY day_start
     ORDER BY day_start)
  '
---
# name: TestTrends.test_timezones_hourly_relative_from_minus_utc.1
  '
  /* user_id:0 request:_snapshot_ */
  SELECT person_id AS actor_id,
         count() AS actor_value
  FROM
    (SELECT e.timestamp as timestamp,
            pdi.person_id as person_id,
            e.distinct_id as distinct_id,
            e.team_id as team_id
     FROM events e
     INNER JOIN
       (SELECT distinct_id,
               argMax(person_id, version) as person_id
        FROM person_distinct_id2
        WHERE team_id = 2
        GROUP BY distinct_id
        HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
     WHERE team_id = 2
       AND event = 'sign up'
       AND toTimeZone(timestamp, 'America/Phoenix') >= toDateTime('2020-01-05 07:00:00', 'America/Phoenix')
       AND toTimeZone(timestamp, 'America/Phoenix') <= toDateTime('2020-01-05 08:00:00', 'America/Phoenix') )
  GROUP BY actor_id
  ORDER BY actor_value DESC,
           actor_id DESC
  LIMIT 100
  OFFSET 0
  '
---
# name: TestTrends.test_timezones_hourly_relative_from_minus_utc.2
  '
  
  SELECT groupArray(day_start) as date,
         groupArray(count) AS total
  FROM
    (SELECT SUM(total) AS count,
            day_start
     FROM
       (SELECT toUInt16(0) AS total,
               toStartOfHour(toDateTime('2020-01-05 10:59:59', 'America/Phoenix')) - toIntervalHour(number) AS day_start
        FROM numbers(dateDiff('hour', toStartOfHour(toDateTime('2020-01-05 00:00:00', 'America/Phoenix')), toDateTime('2020-01-05 10:59:59', 'America/Phoenix')))
        UNION ALL SELECT toUInt16(0) AS total,
                         toStartOfHour(toDateTime('2020-01-05 00:00:00', 'America/Phoenix'))
        UNION ALL SELECT count(*) AS total,
                         toStartOfHour(toTimeZone(toDateTime(timestamp, 'UTC'), 'America/Phoenix')) AS date
        FROM events e
        WHERE team_id = 2
          AND event = 'sign up'
          AND toTimeZone(timestamp, 'America/Phoenix') >= toDateTime(toStartOfHour(toDateTime('2020-01-05 00:00:00', 'America/Phoenix')), 'America/Phoenix')
          AND toTimeZone(timestamp, 'America/Phoenix') <= toDateTime('2020-01-05 10:59:59', 'America/Phoenix')
        GROUP BY date)
     GROUP BY day_start
     ORDER BY day_start)
  '
---
# name: TestTrends.test_timezones_hourly_relative_from_plus_utc
  '
  
  SELECT groupArray(day_start) as date,
         groupArray(count) AS total
  FROM
    (SELECT SUM(total) AS count,
            day_start
     FROM
       (SELECT toUInt16(0) AS total,
               toStartOfHour(toDateTime('2020-01-05 10:59:59', 'Asia/Tokyo')) - toIntervalHour(number) AS day_start
        FROM numbers(dateDiff('hour', toStartOfHour(toDateTime('2020-01-05 00:00:00', 'Asia/Tokyo')), toDateTime('2020-01-05 10:59:59', 'Asia/Tokyo')))
        UNION ALL SELECT toUInt16(0) AS total,
                         toStartOfHour(toDateTime('2020-01-05 00:00:00', 'Asia/Tokyo'))
        UNION ALL SELECT count(DISTINCT pdi.person_id) AS total,
                         toStartOfHour(toTimeZone(toDateTime(timestamp, 'UTC'), 'Asia/Tokyo')) AS date
        FROM events e
        INNER JOIN
          (SELECT distinct_id,
                  argMax(person_id, version) as person_id
           FROM person_distinct_id2
           WHERE team_id = 2
           GROUP BY distinct_id
           HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
        WHERE team_id = 2
          AND event = 'sign up'
          AND toTimeZone(timestamp, 'Asia/Tokyo') >= toDateTime(toStartOfHour(toDateTime('2020-01-05 00:00:00', 'Asia/Tokyo')), 'Asia/Tokyo')
          AND toTimeZone(timestamp, 'Asia/Tokyo') <= toDateTime('2020-01-05 10:59:59', 'Asia/Tokyo')
        GROUP BY date)
     GROUP BY day_start
     ORDER BY day_start)
  '
---
# name: TestTrends.test_timezones_hourly_relative_from_plus_utc.1
  '
  /* user_id:0 request:_snapshot_ */
  SELECT person_id AS actor_id,
         count() AS actor_value
  FROM
    (SELECT e.timestamp as timestamp,
            pdi.person_id as person_id,
            e.distinct_id as distinct_id,
            e.team_id as team_id
     FROM events e
     INNER JOIN
       (SELECT distinct_id,
               argMax(person_id, version) as person_id
        FROM person_distinct_id2
        WHERE team_id = 2
        GROUP BY distinct_id
        HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
     WHERE team_id = 2
       AND event = 'sign up'
       AND toTimeZone(timestamp, 'Asia/Tokyo') >= toDateTime('2020-01-05 07:00:00', 'Asia/Tokyo')
       AND toTimeZone(timestamp, 'Asia/Tokyo') <= toDateTime('2020-01-05 08:00:00', 'Asia/Tokyo') )
  GROUP BY actor_id
  ORDER BY actor_value DESC,
           actor_id DESC
  LIMIT 100
  OFFSET 0
  '
---
# name: TestTrends.test_timezones_hourly_relative_from_plus_utc.2
  '
  
  SELECT groupArray(day_start) as date,
         groupArray(count) AS total
  FROM
    (SELECT SUM(total) AS count,
            day_start
     FROM
       (SELECT toUInt16(0) AS total,
               toStartOfHour(toDateTime('2020-01-05 10:59:59', 'Asia/Tokyo')) - toIntervalHour(number) AS day_start
        FROM numbers(dateDiff('hour', toStartOfHour(toDateTime('2020-01-05 00:00:00', 'Asia/Tokyo')), toDateTime('2020-01-05 10:59:59', 'Asia/Tokyo')))
        UNION ALL SELECT toUInt16(0) AS total,
                         toStartOfHour(toDateTime('2020-01-05 00:00:00', 'Asia/Tokyo'))
        UNION ALL SELECT count(*) AS total,
                         toStartOfHour(toTimeZone(toDateTime(timestamp, 'UTC'), 'Asia/Tokyo')) AS date
        FROM events e
        WHERE team_id = 2
          AND event = 'sign up'
          AND toTimeZone(timestamp, 'Asia/Tokyo') >= toDateTime(toStartOfHour(toDateTime('2020-01-05 00:00:00', 'Asia/Tokyo')), 'Asia/Tokyo')
          AND toTimeZone(timestamp, 'Asia/Tokyo') <= toDateTime('2020-01-05 10:59:59', 'Asia/Tokyo')
        GROUP BY date)
     GROUP BY day_start
     ORDER BY day_start)
  '
---
# name: TestTrends.test_timezones_weekly
  '
  
  SELECT groupArray(day_start) as date,
         groupArray(count) AS total
  FROM
    (SELECT SUM(total) AS count,
            day_start
     FROM
       (SELECT toUInt16(0) AS total,
               toStartOfWeek(toDateTime('2020-01-26 23:59:59', 'UTC'), 0) - toIntervalWeek(number) AS day_start
        FROM numbers(dateDiff('week', toStartOfWeek(toDateTime('2020-01-12 00:00:00', 'UTC'), 0), toDateTime('2020-01-26 23:59:59', 'UTC')))
        UNION ALL SELECT toUInt16(0) AS total,
                         toStartOfWeek(toDateTime('2020-01-12 00:00:00', 'UTC'), 0)
        UNION ALL SELECT count(*) AS total,
                         toStartOfWeek(toTimeZone(toDateTime(timestamp, 'UTC'), 'UTC'), 0) AS date
        FROM events e
        WHERE team_id = 2
          AND event = 'sign up'
          AND toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfWeek(toDateTime('2020-01-12 00:00:00', 'UTC'), 0), 'UTC')
          AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-26 23:59:59', 'UTC')
        GROUP BY date)
     GROUP BY day_start
     ORDER BY day_start)
  '
---
# name: TestTrends.test_timezones_weekly.1
  '
  
  SELECT groupArray(day_start) as date,
         groupArray(count) AS total
  FROM
    (SELECT SUM(total) AS count,
            day_start
     FROM
       (SELECT toUInt16(0) AS total,
               toStartOfWeek(toDateTime('2020-01-26 23:59:59', 'UTC'), 3) - toIntervalWeek(number) AS day_start
        FROM numbers(dateDiff('week', toStartOfWeek(toDateTime('2020-01-12 00:00:00', 'UTC'), 3), toDateTime('2020-01-26 23:59:59', 'UTC')))
        UNION ALL SELECT toUInt16(0) AS total,
                         toStartOfWeek(toDateTime('2020-01-12 00:00:00', 'UTC'), 3)
        UNION ALL SELECT count(*) AS total,
                         toStartOfWeek(toTimeZone(toDateTime(timestamp, 'UTC'), 'UTC'), 3) AS date
        FROM events e
        WHERE team_id = 2
          AND event = 'sign up'
          AND toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfWeek(toDateTime('2020-01-12 00:00:00', 'UTC'), 3), 'UTC')
          AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-26 23:59:59', 'UTC')
        GROUP BY date)
     GROUP BY day_start
     ORDER BY day_start)
  '
---
# name: TestTrends.test_timezones_weekly_minus_utc
  '
  
  SELECT groupArray(day_start) as date,
         groupArray(count) AS total
  FROM
    (SELECT SUM(total) AS count,
            day_start
     FROM
       (SELECT toUInt16(0) AS total,
               toStartOfWeek(toDateTime('2020-01-26 23:59:59', 'America/Phoenix'), 0) - toIntervalWeek(number) AS day_start
        FROM numbers(dateDiff('week', toStartOfWeek(toDateTime('2020-01-12 00:00:00', 'America/Phoenix'), 0), toDateTime('2020-01-26 23:59:59', 'America/Phoenix')))
        UNION ALL SELECT toUInt16(0) AS total,
                         toStartOfWeek(toDateTime('2020-01-12 00:00:00', 'America/Phoenix'), 0)
        UNION ALL SELECT count(*) AS total,
                         toStartOfWeek(toTimeZone(toDateTime(timestamp, 'UTC'), 'America/Phoenix'), 0) AS date
        FROM events e
        WHERE team_id = 2
          AND event = 'sign up'
          AND toTimeZone(timestamp, 'America/Phoenix') >= toDateTime(toStartOfWeek(toDateTime('2020-01-12 00:00:00', 'America/Phoenix'), 0), 'America/Phoenix')
          AND toTimeZone(timestamp, 'America/Phoenix') <= toDateTime('2020-01-26 23:59:59', 'America/Phoenix')
        GROUP BY date)
     GROUP BY day_start
     ORDER BY day_start)
  '
---
# name: TestTrends.test_timezones_weekly_minus_utc.1
  '
  
  SELECT groupArray(day_start) as date,
         groupArray(count) AS total
  FROM
    (SELECT SUM(total) AS count,
            day_start
     FROM
       (SELECT toUInt16(0) AS total,
               toStartOfWeek(toDateTime('2020-01-26 23:59:59', 'America/Phoenix'), 3) - toIntervalWeek(number) AS day_start
        FROM numbers(dateDiff('week', toStartOfWeek(toDateTime('2020-01-12 00:00:00', 'America/Phoenix'), 3), toDateTime('2020-01-26 23:59:59', 'America/Phoenix')))
        UNION ALL SELECT toUInt16(0) AS total,
                         toStartOfWeek(toDateTime('2020-01-12 00:00:00', 'America/Phoenix'), 3)
        UNION ALL SELECT count(*) AS total,
                         toStartOfWeek(toTimeZone(toDateTime(timestamp, 'UTC'), 'America/Phoenix'), 3) AS date
        FROM events e
        WHERE team_id = 2
          AND event = 'sign up'
          AND toTimeZone(timestamp, 'America/Phoenix') >= toDateTime(toStartOfWeek(toDateTime('2020-01-12 00:00:00', 'America/Phoenix'), 3), 'America/Phoenix')
          AND toTimeZone(timestamp, 'America/Phoenix') <= toDateTime('2020-01-26 23:59:59', 'America/Phoenix')
        GROUP BY date)
     GROUP BY day_start
     ORDER BY day_start)
  '
---
# name: TestTrends.test_timezones_weekly_plus_utc
  '
  
  SELECT groupArray(day_start) as date,
         groupArray(count) AS total
  FROM
    (SELECT SUM(total) AS count,
            day_start
     FROM
       (SELECT toUInt16(0) AS total,
               toStartOfWeek(toDateTime('2020-01-26 23:59:59', 'Asia/Tokyo'), 0) - toIntervalWeek(number) AS day_start
        FROM numbers(dateDiff('week', toStartOfWeek(toDateTime('2020-01-12 00:00:00', 'Asia/Tokyo'), 0), toDateTime('2020-01-26 23:59:59', 'Asia/Tokyo')))
        UNION ALL SELECT toUInt16(0) AS total,
                         toStartOfWeek(toDateTime('2020-01-12 00:00:00', 'Asia/Tokyo'), 0)
        UNION ALL SELECT count(*) AS total,
                         toStartOfWeek(toTimeZone(toDateTime(timestamp, 'UTC'), 'Asia/Tokyo'), 0) AS date
        FROM events e
        WHERE team_id = 2
          AND event = 'sign up'
          AND toTimeZone(timestamp, 'Asia/Tokyo') >= toDateTime(toStartOfWeek(toDateTime('2020-01-12 00:00:00', 'Asia/Tokyo'), 0), 'Asia/Tokyo')
          AND toTimeZone(timestamp, 'Asia/Tokyo') <= toDateTime('2020-01-26 23:59:59', 'Asia/Tokyo')
        GROUP BY date)
     GROUP BY day_start
     ORDER BY day_start)
  '
---
# name: TestTrends.test_timezones_weekly_plus_utc.1
  '
  
  SELECT groupArray(day_start) as date,
         groupArray(count) AS total
  FROM
    (SELECT SUM(total) AS count,
            day_start
     FROM
       (SELECT toUInt16(0) AS total,
               toStartOfWeek(toDateTime('2020-01-26 23:59:59', 'Asia/Tokyo'), 3) - toIntervalWeek(number) AS day_start
        FROM numbers(dateDiff('week', toStartOfWeek(toDateTime('2020-01-12 00:00:00', 'Asia/Tokyo'), 3), toDateTime('2020-01-26 23:59:59', 'Asia/Tokyo')))
        UNION ALL SELECT toUInt16(0) AS total,
                         toStartOfWeek(toDateTime('2020-01-12 00:00:00', 'Asia/Tokyo'), 3)
        UNION ALL SELECT count(*) AS total,
                         toStartOfWeek(toTimeZone(toDateTime(timestamp, 'UTC'), 'Asia/Tokyo'), 3) AS date
        FROM events e
        WHERE team_id = 2
          AND event = 'sign up'
          AND toTimeZone(timestamp, 'Asia/Tokyo') >= toDateTime(toStartOfWeek(toDateTime('2020-01-12 00:00:00', 'Asia/Tokyo'), 3), 'Asia/Tokyo')
          AND toTimeZone(timestamp, 'Asia/Tokyo') <= toDateTime('2020-01-26 23:59:59', 'Asia/Tokyo')
        GROUP BY date)
     GROUP BY day_start
     ORDER BY day_start)
  '
---
# name: TestTrends.test_trend_actors_person_on_events_pagination_with_alias_inconsistencies
  '
  
  SELECT groupArray(day_start) as date,
         groupArray(count) AS total
  FROM
    (SELECT SUM(total) AS count,
            day_start
     FROM
       (SELECT toUInt16(0) AS total,
               toStartOfDay(toDateTime('2020-01-04 23:59:59', 'UTC')) - toIntervalDay(number) AS day_start
        FROM numbers(dateDiff('day', toStartOfDay(toDateTime('2019-12-28 00:00:00', 'UTC')), toDateTime('2020-01-04 23:59:59', 'UTC')))
        UNION ALL SELECT toUInt16(0) AS total,
                         toStartOfDay(toDateTime('2019-12-28 00:00:00', 'UTC'))
        UNION ALL SELECT count(DISTINCT e.person_id) AS total,
                         toStartOfDay(toTimeZone(toDateTime(timestamp, 'UTC'), 'UTC')) AS date
        FROM events e
        INNER JOIN
          (SELECT distinct_id,
                  argMax(person_id, version) as person_id
           FROM person_distinct_id2
           WHERE team_id = 2
           GROUP BY distinct_id
           HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
        WHERE team_id = 2
          AND event = 'sign up'
          AND toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfDay(toDateTime('2019-12-28 00:00:00', 'UTC')), 'UTC')
          AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-04 23:59:59', 'UTC')
          AND notEmpty(e.person_id)
        GROUP BY date)
     GROUP BY day_start
     ORDER BY day_start)
  '
---
# name: TestTrends.test_trend_actors_person_on_events_pagination_with_alias_inconsistencies.1
  '
  /* user_id:0 request:_snapshot_ */
  SELECT person_id AS actor_id,
         count() AS actor_value
  FROM
    (SELECT e.timestamp as timestamp,
            e.person_id as person_id,
            e.distinct_id as distinct_id,
            e.team_id as team_id
     FROM events e
     INNER JOIN
       (SELECT distinct_id,
               argMax(person_id, version) as person_id
        FROM person_distinct_id2
        WHERE team_id = 2
        GROUP BY distinct_id
        HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
     WHERE team_id = 2
       AND event = 'sign up'
       AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-04 00:00:00', 'UTC')
       AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-04 23:59:59', 'UTC')
       AND notEmpty(e.person_id) )
  GROUP BY actor_id
  ORDER BY actor_value DESC,
           actor_id DESC
  LIMIT 5
  OFFSET 0
  '
---
# name: TestTrends.test_trend_actors_person_on_events_pagination_with_alias_inconsistencies.2
  '
  /* user_id:0 request:_snapshot_ */
  SELECT person_id AS actor_id,
         count() AS actor_value
  FROM
    (SELECT e.timestamp as timestamp,
            e.person_id as person_id,
            e.distinct_id as distinct_id,
            e.team_id as team_id
     FROM events e
     INNER JOIN
       (SELECT distinct_id,
               argMax(person_id, version) as person_id
        FROM person_distinct_id2
        WHERE team_id = 2
        GROUP BY distinct_id
        HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
     WHERE team_id = 2
       AND event = 'sign up'
       AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-04 00:00:00', 'UTC')
       AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-04 23:59:59', 'UTC')
       AND notEmpty(e.person_id) )
  GROUP BY actor_id
  ORDER BY actor_value DESC,
           actor_id DESC
  LIMIT 5
  OFFSET 5
  '
---
# name: TestTrends.test_trend_actors_person_on_events_pagination_with_alias_inconsistencies.3
  '
  /* user_id:0 request:_snapshot_ */
  SELECT person_id AS actor_id,
         count() AS actor_value
  FROM
    (SELECT e.timestamp as timestamp,
            e.person_id as person_id,
            e.distinct_id as distinct_id,
            e.team_id as team_id
     FROM events e
     INNER JOIN
       (SELECT distinct_id,
               argMax(person_id, version) as person_id
        FROM person_distinct_id2
        WHERE team_id = 2
        GROUP BY distinct_id
        HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
     WHERE team_id = 2
       AND event = 'sign up'
       AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-04 00:00:00', 'UTC')
       AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-04 23:59:59', 'UTC')
       AND notEmpty(e.person_id) )
  GROUP BY actor_id
  ORDER BY actor_value DESC,
           actor_id DESC
  LIMIT 5
  OFFSET 10
  '
---
# name: TestTrends.test_trend_breakdown_user_props_with_filter_with_partial_property_pushdowns
  '
  
  SELECT groupArray(value)
  FROM
    (SELECT replaceRegexpAll(JSONExtractRaw(person_props, 'email'), '^"|"$', '') AS value,
            count(*) as count
     FROM events e
     INNER JOIN
       (SELECT distinct_id,
               argMax(person_id, version) as person_id
        FROM person_distinct_id2
        WHERE team_id = 2
        GROUP BY distinct_id
        HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
     INNER JOIN
       (SELECT id,
               argMax(properties, version) as person_props
        FROM person
        WHERE team_id = 2
          AND id IN
            (SELECT id
             FROM person
             WHERE team_id = 2
               AND (((has(['android'], replaceRegexpAll(JSONExtractRaw(properties, '$os'), '^"|"$', '')))
                     OR (has(['safari'], replaceRegexpAll(JSONExtractRaw(properties, '$browser'), '^"|"$', ''))))) )
        GROUP BY id
        HAVING max(is_deleted) = 0
        AND (((has(['android'], replaceRegexpAll(JSONExtractRaw(argMax(person.properties, version), '$os'), '^"|"$', '')))
              OR (has(['safari'], replaceRegexpAll(JSONExtractRaw(argMax(person.properties, version), '$browser'), '^"|"$', ''))))) SETTINGS optimize_aggregation_in_order = 1) person ON pdi.person_id = person.id
     WHERE team_id = 2
       AND event = 'sign up'
       AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
       AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-07-01 23:59:59', 'UTC')
       AND (((NOT (replaceRegexpAll(JSONExtractRaw(person_props, 'email'), '^"|"$', '') ILIKE '%@posthog.com%'))
             OR (has(['val'], replaceRegexpAll(JSONExtractRaw(e.properties, 'key'), '^"|"$', '')))))
     GROUP BY value
     ORDER BY count DESC, value DESC
     LIMIT 25
     OFFSET 0)
  '
---
# name: TestTrends.test_trend_breakdown_user_props_with_filter_with_partial_property_pushdowns.1
  '
  
  SELECT groupArray(day_start) as date,
         groupArray(count) AS total,
         breakdown_value
  FROM
    (SELECT SUM(total) as count,
            day_start,
            breakdown_value
     FROM
       (SELECT *
        FROM
          (SELECT toUInt16(0) AS total,
                  ticks.day_start as day_start,
                  breakdown_value
           FROM
             (SELECT toStartOfDay(toDateTime('2020-07-01 23:59:59', 'UTC')) - toIntervalDay(number) as day_start
              FROM numbers(183)
              UNION ALL SELECT toStartOfDay(toDateTime('2020-01-01 00:00:00', 'UTC')) as day_start) as ticks
           CROSS JOIN
             (SELECT breakdown_value
              FROM
                (SELECT ['test2@posthog.com', 'test@gmail.com', 'test5@posthog.com', 'test4@posthog.com', 'test3@posthog.com'] as breakdown_value) ARRAY
              JOIN breakdown_value) as sec
           ORDER BY breakdown_value,
                    day_start
           UNION ALL SELECT count(*) as total,
                            toStartOfDay(toTimeZone(toDateTime(timestamp, 'UTC'), 'UTC')) as day_start,
                            replaceRegexpAll(JSONExtractRaw(person_props, 'email'), '^"|"$', '') as breakdown_value
           FROM events e
           INNER JOIN
             (SELECT distinct_id,
                     argMax(person_id, version) as person_id
              FROM person_distinct_id2
              WHERE team_id = 2
              GROUP BY distinct_id
              HAVING argMax(is_deleted, version) = 0) as pdi ON events.distinct_id = pdi.distinct_id
           INNER JOIN
             (SELECT id,
                     argMax(properties, version) as person_props
              FROM person
              WHERE team_id = 2
                AND id IN
                  (SELECT id
                   FROM person
                   WHERE team_id = 2
                     AND (((has(['android'], replaceRegexpAll(JSONExtractRaw(properties, '$os'), '^"|"$', '')))
                           OR (has(['safari'], replaceRegexpAll(JSONExtractRaw(properties, '$browser'), '^"|"$', ''))))) )
              GROUP BY id
              HAVING max(is_deleted) = 0
              AND (((has(['android'], replaceRegexpAll(JSONExtractRaw(argMax(person.properties, version), '$os'), '^"|"$', '')))
                    OR (has(['safari'], replaceRegexpAll(JSONExtractRaw(argMax(person.properties, version), '$browser'), '^"|"$', ''))))) SETTINGS optimize_aggregation_in_order = 1) person ON person.id = pdi.person_id
           WHERE e.team_id = 2
             AND event = 'sign up'
             AND (((NOT (replaceRegexpAll(JSONExtractRaw(person_props, 'email'), '^"|"$', '') ILIKE '%@posthog.com%'))
                   OR (has(['val'], replaceRegexpAll(JSONExtractRaw(e.properties, 'key'), '^"|"$', '')))))
             AND toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfDay(toDateTime('2020-01-01 00:00:00', 'UTC')), 'UTC')
             AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-07-01 23:59:59', 'UTC')
             AND replaceRegexpAll(JSONExtractRaw(person_props, 'email'), '^"|"$', '') in (['test2@posthog.com', 'test@gmail.com', 'test5@posthog.com', 'test4@posthog.com', 'test3@posthog.com'])
           GROUP BY day_start,
                    breakdown_value))
     GROUP BY day_start,
              breakdown_value
     ORDER BY breakdown_value,
              day_start)
  GROUP BY breakdown_value
  ORDER BY breakdown_value
  '
---
# name: TestTrends.test_trend_breakdown_user_props_with_filter_with_partial_property_pushdowns.2
  '
  
  SELECT groupArray(value)
  FROM
    (SELECT replaceRegexpAll(JSONExtractRaw(person_props, 'email'), '^"|"$', '') AS value,
            count(*) as count
     FROM events e
     INNER JOIN
       (SELECT distinct_id,
               argMax(person_id, version) as person_id
        FROM person_distinct_id2
        WHERE team_id = 2
        GROUP BY distinct_id
        HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
     INNER JOIN
       (SELECT id,
               argMax(properties, version) as person_props
        FROM person
        WHERE team_id = 2
          AND id IN
            (SELECT id
             FROM person
             WHERE team_id = 2
               AND ((((has(['android'], replaceRegexpAll(JSONExtractRaw(properties, '$os'), '^"|"$', '')))
                      AND (has(['chrome'], replaceRegexpAll(JSONExtractRaw(properties, '$browser'), '^"|"$', '')))))
                    AND (replaceRegexpAll(JSONExtractRaw(properties, 'email'), '^"|"$', '') ILIKE '%@posthog.com%')) )
        GROUP BY id
        HAVING max(is_deleted) = 0
        AND ((((has(['android'], replaceRegexpAll(JSONExtractRaw(argMax(person.properties, version), '$os'), '^"|"$', '')))
               AND (has(['chrome'], replaceRegexpAll(JSONExtractRaw(argMax(person.properties, version), '$browser'), '^"|"$', '')))))
             AND (replaceRegexpAll(JSONExtractRaw(argMax(person.properties, version), 'email'), '^"|"$', '') ILIKE '%@posthog.com%')) SETTINGS optimize_aggregation_in_order = 1) person ON pdi.person_id = person.id
     WHERE team_id = 2
       AND event = 'sign up'
       AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
       AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-07-01 23:59:59', 'UTC')
       AND ((has(['val'], replaceRegexpAll(JSONExtractRaw(e.properties, 'key'), '^"|"$', ''))))
     GROUP BY value
     ORDER BY count DESC, value DESC
     LIMIT 25
     OFFSET 0)
  '
---
# name: TestTrends.test_trend_breakdown_user_props_with_filter_with_partial_property_pushdowns.3
  '
  
  SELECT groupArray(day_start) as date,
         groupArray(count) AS total,
         breakdown_value
  FROM
    (SELECT SUM(total) as count,
            day_start,
            breakdown_value
     FROM
       (SELECT *
        FROM
          (SELECT toUInt16(0) AS total,
                  ticks.day_start as day_start,
                  breakdown_value
           FROM
             (SELECT toStartOfDay(toDateTime('2020-07-01 23:59:59', 'UTC')) - toIntervalDay(number) as day_start
              FROM numbers(183)
              UNION ALL SELECT toStartOfDay(toDateTime('2020-01-01 00:00:00', 'UTC')) as day_start) as ticks
           CROSS JOIN
             (SELECT breakdown_value
              FROM
                (SELECT ['test2@posthog.com'] as breakdown_value) ARRAY
              JOIN breakdown_value) as sec
           ORDER BY breakdown_value,
                    day_start
           UNION ALL SELECT count(*) as total,
                            toStartOfDay(toTimeZone(toDateTime(timestamp, 'UTC'), 'UTC')) as day_start,
                            replaceRegexpAll(JSONExtractRaw(person_props, 'email'), '^"|"$', '') as breakdown_value
           FROM events e
           INNER JOIN
             (SELECT distinct_id,
                     argMax(person_id, version) as person_id
              FROM person_distinct_id2
              WHERE team_id = 2
              GROUP BY distinct_id
              HAVING argMax(is_deleted, version) = 0) as pdi ON events.distinct_id = pdi.distinct_id
           INNER JOIN
             (SELECT id,
                     argMax(properties, version) as person_props
              FROM person
              WHERE team_id = 2
                AND id IN
                  (SELECT id
                   FROM person
                   WHERE team_id = 2
                     AND ((((has(['android'], replaceRegexpAll(JSONExtractRaw(properties, '$os'), '^"|"$', '')))
                            AND (has(['chrome'], replaceRegexpAll(JSONExtractRaw(properties, '$browser'), '^"|"$', '')))))
                          AND (replaceRegexpAll(JSONExtractRaw(properties, 'email'), '^"|"$', '') ILIKE '%@posthog.com%')) )
              GROUP BY id
              HAVING max(is_deleted) = 0
              AND ((((has(['android'], replaceRegexpAll(JSONExtractRaw(argMax(person.properties, version), '$os'), '^"|"$', '')))
                     AND (has(['chrome'], replaceRegexpAll(JSONExtractRaw(argMax(person.properties, version), '$browser'), '^"|"$', '')))))
                   AND (replaceRegexpAll(JSONExtractRaw(argMax(person.properties, version), 'email'), '^"|"$', '') ILIKE '%@posthog.com%')) SETTINGS optimize_aggregation_in_order = 1) person ON person.id = pdi.person_id
           WHERE e.team_id = 2
             AND event = 'sign up'
             AND ((has(['val'], replaceRegexpAll(JSONExtractRaw(e.properties, 'key'), '^"|"$', ''))))
             AND toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfDay(toDateTime('2020-01-01 00:00:00', 'UTC')), 'UTC')
             AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-07-01 23:59:59', 'UTC')
             AND replaceRegexpAll(JSONExtractRaw(person_props, 'email'), '^"|"$', '') in (['test2@posthog.com'])
           GROUP BY day_start,
                    breakdown_value))
     GROUP BY day_start,
              breakdown_value
     ORDER BY breakdown_value,
              day_start)
  GROUP BY breakdown_value
  ORDER BY breakdown_value
  '
---
# name: TestTrends.test_trends_aggregate_by_distinct_id
  '
  
  SELECT groupArray(day_start) as date,
         groupArray(count) AS total
  FROM
    (SELECT SUM(total) AS count,
            day_start
     FROM
       (SELECT toUInt16(0) AS total,
               toStartOfDay(toDateTime('2019-12-31 23:59:59', 'UTC')) - toIntervalDay(number) AS day_start
        FROM numbers(dateDiff('day', toStartOfDay(toDateTime('2019-12-24 00:00:00', 'UTC')), toDateTime('2019-12-31 23:59:59', 'UTC')))
        UNION ALL SELECT toUInt16(0) AS total,
                         toStartOfDay(toDateTime('2019-12-24 00:00:00', 'UTC'))
        UNION ALL SELECT count(DISTINCT e.distinct_id) AS total,
                         toStartOfDay(toTimeZone(toDateTime(timestamp, 'UTC'), 'UTC')) AS date
        FROM events e
        WHERE team_id = 2
          AND event = 'sign up'
          AND toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfDay(toDateTime('2019-12-24 00:00:00', 'UTC')), 'UTC')
          AND toTimeZone(timestamp, 'UTC') <= toDateTime('2019-12-31 23:59:59', 'UTC')
        GROUP BY date)
     GROUP BY day_start
     ORDER BY day_start)
  '
---
# name: TestTrends.test_trends_aggregate_by_distinct_id.1
  '
  
  SELECT groupArray(day_start) as date,
         groupArray(count) AS total
  FROM
    (SELECT SUM(total) AS count,
            day_start
     FROM
       (SELECT toUInt16(0) AS total,
               toStartOfDay(toDateTime('2019-12-31 23:59:59', 'UTC')) - toIntervalDay(number) AS day_start
        FROM numbers(dateDiff('day', toStartOfDay(toDateTime('2019-12-24 00:00:00', 'UTC')), toDateTime('2019-12-31 23:59:59', 'UTC')))
        UNION ALL SELECT toUInt16(0) AS total,
                         toStartOfDay(toDateTime('2019-12-24 00:00:00', 'UTC'))
        UNION ALL SELECT count(DISTINCT e.distinct_id) AS total,
                         toStartOfDay(toTimeZone(toDateTime(timestamp, 'UTC'), 'UTC')) AS date
        FROM events e
        INNER JOIN
          (SELECT distinct_id,
                  argMax(person_id, version) as person_id
           FROM person_distinct_id2
           WHERE team_id = 2
           GROUP BY distinct_id
           HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
        INNER JOIN
          (SELECT id
           FROM person
           WHERE team_id = 2
             AND id IN
               (SELECT id
                FROM person
                WHERE team_id = 2
                  AND (has(['some_val'], replaceRegexpAll(JSONExtractRaw(properties, '$some_prop'), '^"|"$', ''))) )
           GROUP BY id
           HAVING max(is_deleted) = 0
           AND (has(['some_val'], replaceRegexpAll(JSONExtractRaw(argMax(person.properties, version), '$some_prop'), '^"|"$', ''))) SETTINGS optimize_aggregation_in_order = 1) person ON person.id = pdi.person_id
        WHERE team_id = 2
          AND event = 'sign up'
          AND toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfDay(toDateTime('2019-12-24 00:00:00', 'UTC')), 'UTC')
          AND toTimeZone(timestamp, 'UTC') <= toDateTime('2019-12-31 23:59:59', 'UTC')
        GROUP BY date)
     GROUP BY day_start
     ORDER BY day_start)
  '
---
# name: TestTrends.test_trends_aggregate_by_distinct_id.2
  '
  
  SELECT groupArray(value)
  FROM
    (SELECT replaceRegexpAll(JSONExtractRaw(person_props, '$some_prop'), '^"|"$', '') AS value,
            count(*) as count
     FROM events e
     INNER JOIN
       (SELECT distinct_id,
               argMax(person_id, version) as person_id
        FROM person_distinct_id2
        WHERE team_id = 2
        GROUP BY distinct_id
        HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
     INNER JOIN
       (SELECT id,
               argMax(properties, version) as person_props
        FROM person
        WHERE team_id = 2
        GROUP BY id
        HAVING max(is_deleted) = 0 SETTINGS optimize_aggregation_in_order = 1) person ON pdi.person_id = person.id
     WHERE team_id = 2
       AND event = 'sign up'
       AND toTimeZone(timestamp, 'UTC') >= toDateTime('2019-12-24 00:00:00', 'UTC')
       AND toTimeZone(timestamp, 'UTC') <= toDateTime('2019-12-31 23:59:59', 'UTC')
     GROUP BY value
     ORDER BY count DESC, value DESC
     LIMIT 25
     OFFSET 0)
  '
---
# name: TestTrends.test_trends_aggregate_by_distinct_id.3
  '
  
  SELECT groupArray(day_start) as date,
         groupArray(count) AS total,
         breakdown_value
  FROM
    (SELECT SUM(total) as count,
            day_start,
            breakdown_value
     FROM
       (SELECT *
        FROM
          (SELECT toUInt16(0) AS total,
                  ticks.day_start as day_start,
                  breakdown_value
           FROM
             (SELECT toStartOfDay(toDateTime('2019-12-31 23:59:59', 'UTC')) - toIntervalDay(number) as day_start
              FROM numbers(8)
              UNION ALL SELECT toStartOfDay(toDateTime('2019-12-24 00:00:00', 'UTC')) as day_start) as ticks
           CROSS JOIN
             (SELECT breakdown_value
              FROM
                (SELECT ['some_val', ''] as breakdown_value) ARRAY
              JOIN breakdown_value) as sec
           ORDER BY breakdown_value,
                    day_start
           UNION ALL SELECT count(DISTINCT e.distinct_id) as total,
                            toStartOfDay(toTimeZone(toDateTime(timestamp, 'UTC'), 'UTC')) as day_start,
                            replaceRegexpAll(JSONExtractRaw(person_props, '$some_prop'), '^"|"$', '') as breakdown_value
           FROM events e
           INNER JOIN
             (SELECT distinct_id,
                     argMax(person_id, version) as person_id
              FROM person_distinct_id2
              WHERE team_id = 2
              GROUP BY distinct_id
              HAVING argMax(is_deleted, version) = 0) as pdi ON events.distinct_id = pdi.distinct_id
           INNER JOIN
             (SELECT id,
                     argMax(properties, version) as person_props
              FROM person
              WHERE team_id = 2
              GROUP BY id
              HAVING max(is_deleted) = 0 SETTINGS optimize_aggregation_in_order = 1) person ON person.id = pdi.person_id
           WHERE e.team_id = 2
             AND event = 'sign up'
             AND toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfDay(toDateTime('2019-12-24 00:00:00', 'UTC')), 'UTC')
             AND toTimeZone(timestamp, 'UTC') <= toDateTime('2019-12-31 23:59:59', 'UTC')
             AND replaceRegexpAll(JSONExtractRaw(person_props, '$some_prop'), '^"|"$', '') in (['some_val', ''])
           GROUP BY day_start,
                    breakdown_value))
     GROUP BY day_start,
              breakdown_value
     ORDER BY breakdown_value,
              day_start)
  GROUP BY breakdown_value
  ORDER BY breakdown_value
  '
---
# name: TestTrends.test_trends_aggregate_by_distinct_id.4
  '
  
  SELECT groupArray(day_start) as date,
         groupArray(count) AS total
  FROM
    (SELECT SUM(total) AS count,
            day_start
     FROM
       (SELECT toUInt16(0) AS total,
               toStartOfDay(toDateTime('2019-12-31 23:59:59', 'UTC')) - toIntervalDay(number) AS day_start
        FROM numbers(dateDiff('day', toStartOfDay(toDateTime('2019-12-24 00:00:00', 'UTC')), toDateTime('2019-12-31 23:59:59', 'UTC')))
        UNION ALL SELECT toUInt16(0) AS total,
                         toStartOfDay(toDateTime('2019-12-24 00:00:00', 'UTC'))
        UNION ALL SELECT counts AS total,
                         timestamp AS day_start
        FROM
          (SELECT d.timestamp,
                  COUNT(DISTINCT actor_id) AS counts
           FROM
             (SELECT toDateTime(toStartOfDay(toDateTime('2019-12-31 23:59:59', 'UTC')) - toIntervalDay(number)) AS timestamp
              FROM numbers(dateDiff('day', toStartOfDay(toDateTime('2019-11-24 00:00:00', 'UTC')), toDateTime('2019-12-31 23:59:59', 'UTC')))) d
           CROSS JOIN
             (SELECT toTimeZone(toDateTime(timestamp, 'UTC'), 'UTC') AS timestamp,
                     e.distinct_id AS actor_id
              FROM events e
              WHERE team_id = 2
                AND event = 'sign up'
                AND toDateTime(timestamp, 'UTC') >= toDateTime('2019-11-24 00:00:00', 'UTC')
                AND toTimeZone(timestamp, 'UTC') <= toDateTime('2019-12-31 23:59:59', 'UTC')
              GROUP BY timestamp, actor_id) e
           WHERE e.timestamp <= d.timestamp + INTERVAL 1 DAY
             AND e.timestamp > d.timestamp - INTERVAL 29 DAY
           GROUP BY d.timestamp
           ORDER BY d.timestamp)
        WHERE 1 = 1
          AND toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfDay(toDateTime('2019-12-24 00:00:00', 'UTC')), 'UTC')
          AND toTimeZone(timestamp, 'UTC') <= toDateTime('2019-12-31 23:59:59', 'UTC') )
     GROUP BY day_start
     ORDER BY day_start)
  '
---
# name: TestTrends.test_trends_aggregate_by_distinct_id.5
  '
  
  SELECT groupArray(day_start) as date,
         groupArray(count) AS total
  FROM
    (SELECT SUM(total) AS count,
            day_start
     FROM
       (SELECT toUInt16(0) AS total,
               toStartOfDay(toDateTime('2019-12-31 23:59:59', 'UTC')) - toIntervalDay(number) AS day_start
        FROM numbers(dateDiff('day', toStartOfDay(toDateTime('2019-12-24 00:00:00', 'UTC')), toDateTime('2019-12-31 23:59:59', 'UTC')))
        UNION ALL SELECT toUInt16(0) AS total,
                         toStartOfDay(toDateTime('2019-12-24 00:00:00', 'UTC'))
        UNION ALL SELECT counts AS total,
                         timestamp AS day_start
        FROM
          (SELECT d.timestamp,
                  COUNT(DISTINCT actor_id) AS counts
           FROM
             (SELECT toDateTime(toStartOfDay(toDateTime('2019-12-31 23:59:59', 'UTC')) - toIntervalDay(number)) AS timestamp
              FROM numbers(dateDiff('day', toStartOfDay(toDateTime('2019-12-17 00:00:00', 'UTC')), toDateTime('2019-12-31 23:59:59', 'UTC')))) d
           CROSS JOIN
             (SELECT toTimeZone(toDateTime(timestamp, 'UTC'), 'UTC') AS timestamp,
                     e.distinct_id AS actor_id
              FROM events e
              WHERE team_id = 2
                AND event = 'sign up'
                AND toDateTime(timestamp, 'UTC') >= toDateTime('2019-12-17 00:00:00', 'UTC')
                AND toTimeZone(timestamp, 'UTC') <= toDateTime('2019-12-31 23:59:59', 'UTC')
              GROUP BY timestamp, actor_id) e
           WHERE e.timestamp <= d.timestamp + INTERVAL 1 DAY
             AND e.timestamp > d.timestamp - INTERVAL 6 DAY
           GROUP BY d.timestamp
           ORDER BY d.timestamp)
        WHERE 1 = 1
          AND toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfDay(toDateTime('2019-12-24 00:00:00', 'UTC')), 'UTC')
          AND toTimeZone(timestamp, 'UTC') <= toDateTime('2019-12-31 23:59:59', 'UTC') )
     GROUP BY day_start
     ORDER BY day_start)
  '
---
# name: TestTrends.test_trends_aggregate_by_distinct_id.6
  '
  
  SELECT groupArray(value)
  FROM
    (SELECT replaceRegexpAll(JSONExtractRaw(properties, '$some_prop'), '^"|"$', '') AS value,
            count(*) as count
     FROM events e
     WHERE team_id = 2
       AND event = 'sign up'
       AND toTimeZone(timestamp, 'UTC') >= toDateTime('2019-12-24 00:00:00', 'UTC')
       AND toTimeZone(timestamp, 'UTC') <= toDateTime('2019-12-31 23:59:59', 'UTC')
     GROUP BY value
     ORDER BY count DESC, value DESC
     LIMIT 25
     OFFSET 0)
  '
---
# name: TestTrends.test_trends_aggregate_by_distinct_id.7
  '
  
  SELECT groupArray(day_start) as date,
         groupArray(count) AS total,
         breakdown_value
  FROM
    (SELECT SUM(total) as count,
            day_start,
            breakdown_value
     FROM
       (SELECT *
        FROM
          (SELECT toUInt16(0) AS total,
                  ticks.day_start as day_start,
                  breakdown_value
           FROM
             (SELECT toStartOfDay(toDateTime('2019-12-31 23:59:59', 'UTC')) - toIntervalDay(number) as day_start
              FROM numbers(8)
              UNION ALL SELECT toStartOfDay(toDateTime('2019-12-24 00:00:00', 'UTC')) as day_start) as ticks
           CROSS JOIN
             (SELECT breakdown_value
              FROM
                (SELECT [''] as breakdown_value) ARRAY
              JOIN breakdown_value) as sec
           ORDER BY breakdown_value,
                    day_start
           UNION ALL SELECT count(DISTINCT e.distinct_id) as total,
                            toStartOfDay(toTimeZone(toDateTime(timestamp, 'UTC'), 'UTC')) as day_start,
                            replaceRegexpAll(JSONExtractRaw(properties, '$some_prop'), '^"|"$', '') as breakdown_value
           FROM events e
           WHERE e.team_id = 2
             AND event = 'sign up'
             AND toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfDay(toDateTime('2019-12-24 00:00:00', 'UTC')), 'UTC')
             AND toTimeZone(timestamp, 'UTC') <= toDateTime('2019-12-31 23:59:59', 'UTC')
             AND replaceRegexpAll(JSONExtractRaw(properties, '$some_prop'), '^"|"$', '') in ([''])
           GROUP BY day_start,
                    breakdown_value))
     GROUP BY day_start,
              breakdown_value
     ORDER BY breakdown_value,
              day_start)
  GROUP BY breakdown_value
  ORDER BY breakdown_value
  '
---
# name: TestTrends.test_trends_any_event_total_count
  '
  
  SELECT groupArray(day_start) as date,
         groupArray(count) AS total
  FROM
    (SELECT SUM(total) AS count,
            day_start
     FROM
       (SELECT toUInt16(0) AS total,
               toStartOfDay(toDateTime('2020-01-04 23:59:59', 'UTC')) - toIntervalDay(number) AS day_start
        FROM numbers(dateDiff('day', toStartOfDay(toDateTime('2019-12-28 00:00:00', 'UTC')), toDateTime('2020-01-04 23:59:59', 'UTC')))
        UNION ALL SELECT toUInt16(0) AS total,
                         toStartOfDay(toDateTime('2019-12-28 00:00:00', 'UTC'))
        UNION ALL SELECT count(*) AS total,
                         toStartOfDay(toTimeZone(toDateTime(timestamp, 'UTC'), 'UTC')) AS date
        FROM events e
        WHERE team_id = 2
          AND 1 = 1
          AND toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfDay(toDateTime('2019-12-28 00:00:00', 'UTC')), 'UTC')
          AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-04 23:59:59', 'UTC')
        GROUP BY date)
     GROUP BY day_start
     ORDER BY day_start)
  '
---
# name: TestTrends.test_trends_any_event_total_count.1
  '
  
  SELECT groupArray(day_start) as date,
         groupArray(count) AS total
  FROM
    (SELECT SUM(total) AS count,
            day_start
     FROM
       (SELECT toUInt16(0) AS total,
               toStartOfDay(toDateTime('2020-01-04 23:59:59', 'UTC')) - toIntervalDay(number) AS day_start
        FROM numbers(dateDiff('day', toStartOfDay(toDateTime('2019-12-28 00:00:00', 'UTC')), toDateTime('2020-01-04 23:59:59', 'UTC')))
        UNION ALL SELECT toUInt16(0) AS total,
                         toStartOfDay(toDateTime('2019-12-28 00:00:00', 'UTC'))
        UNION ALL SELECT count(*) AS total,
                         toStartOfDay(toTimeZone(toDateTime(timestamp, 'UTC'), 'UTC')) AS date
        FROM events e
        WHERE team_id = 2
          AND event = 'sign up'
          AND toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfDay(toDateTime('2019-12-28 00:00:00', 'UTC')), 'UTC')
          AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-04 23:59:59', 'UTC')
        GROUP BY date)
     GROUP BY day_start
     ORDER BY day_start)
  '
---
# name: TestTrends.test_trends_breakdown_cumulative
  '
  
  SELECT groupArray(value)
  FROM
    (SELECT replaceRegexpAll(JSONExtractRaw(properties, '$some_property'), '^"|"$', '') AS value,
            count(*) as count
     FROM events e
     WHERE team_id = 2
       AND event = 'sign up'
       AND toTimeZone(timestamp, 'UTC') >= toDateTime('2019-12-28 00:00:00', 'UTC')
       AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-04 23:59:59', 'UTC')
     GROUP BY value
     ORDER BY count DESC, value DESC
     LIMIT 25
     OFFSET 0)
  '
---
# name: TestTrends.test_trends_breakdown_cumulative.1
  '
  
  SELECT groupArray(day_start) as date,
         groupArray(count) AS total,
         breakdown_value
  FROM
    (SELECT SUM(total) as count,
            day_start,
            breakdown_value
     FROM
       (SELECT *
        FROM
          (SELECT toUInt16(0) AS total,
                  ticks.day_start as day_start,
                  breakdown_value
           FROM
             (SELECT toStartOfDay(toDateTime('2020-01-04 23:59:59', 'UTC')) - toIntervalDay(number) as day_start
              FROM numbers(8)
              UNION ALL SELECT toStartOfDay(toDateTime('2019-12-28 00:00:00', 'UTC')) as day_start) as ticks
           CROSS JOIN
             (SELECT breakdown_value
              FROM
                (SELECT ['', 'value', 'other_value'] as breakdown_value) ARRAY
              JOIN breakdown_value) as sec
           ORDER BY breakdown_value,
                    day_start
           UNION ALL SELECT count(DISTINCT person_id) as total,
                            toStartOfDay(toTimeZone(toDateTime(timestamp, 'UTC'), 'UTC')) as day_start,
                            breakdown_value
           FROM
             (SELECT person_id,
                     min(timestamp) as timestamp,
                     breakdown_value
              FROM
                (SELECT pdi.person_id as person_id, timestamp, replaceRegexpAll(JSONExtractRaw(properties, '$some_property'), '^"|"$', '') as breakdown_value
                 FROM events e
                 INNER JOIN
                   (SELECT distinct_id,
                           argMax(person_id, version) as person_id
                    FROM person_distinct_id2
                    WHERE team_id = 2
                    GROUP BY distinct_id
                    HAVING argMax(is_deleted, version) = 0) as pdi ON events.distinct_id = pdi.distinct_id
                 WHERE e.team_id = 2
                   AND event = 'sign up'
                   AND toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfDay(toDateTime('2019-12-28 00:00:00', 'UTC')), 'UTC')
                   AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-04 23:59:59', 'UTC')
                   AND replaceRegexpAll(JSONExtractRaw(properties, '$some_property'), '^"|"$', '') in (['', 'value', 'other_value']) )
              GROUP BY person_id,
                       breakdown_value) AS pdi
           GROUP BY day_start,
                    breakdown_value))
     GROUP BY day_start,
              breakdown_value
     ORDER BY breakdown_value,
              day_start)
  GROUP BY breakdown_value
  ORDER BY breakdown_value
  '
---
# name: TestTrends.test_trends_breakdown_cumulative_poe_v2
  '
  
  SELECT groupArray(value)
  FROM
    (SELECT replaceRegexpAll(JSONExtractRaw(properties, '$some_property'), '^"|"$', '') AS value,
            count(*) as count
     FROM events e
     LEFT OUTER JOIN
       (SELECT argMax(override_person_id, version) as person_id,
               old_person_id
        FROM person_overrides
        WHERE team_id = 2
        GROUP BY old_person_id) AS overrides ON e.person_id = overrides.old_person_id
     WHERE team_id = 2
       AND event = 'sign up'
       AND toTimeZone(timestamp, 'UTC') >= toDateTime('2019-12-28 00:00:00', 'UTC')
       AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-04 23:59:59', 'UTC')
       AND notEmpty(e.person_id)
     GROUP BY value
     ORDER BY count DESC, value DESC
     LIMIT 25
     OFFSET 0)
  '
---
# name: TestTrends.test_trends_breakdown_cumulative_poe_v2.1
  '
  
  SELECT groupArray(day_start) as date,
         groupArray(count) AS total,
         breakdown_value
  FROM
    (SELECT SUM(total) as count,
            day_start,
            breakdown_value
     FROM
       (SELECT *
        FROM
          (SELECT toUInt16(0) AS total,
                  ticks.day_start as day_start,
                  breakdown_value
           FROM
             (SELECT toStartOfDay(toDateTime('2020-01-04 23:59:59', 'UTC')) - toIntervalDay(number) as day_start
              FROM numbers(8)
              UNION ALL SELECT toStartOfDay(toDateTime('2019-12-28 00:00:00', 'UTC')) as day_start) as ticks
           CROSS JOIN
             (SELECT breakdown_value
              FROM
                (SELECT ['', 'value', 'other_value'] as breakdown_value) ARRAY
              JOIN breakdown_value) as sec
           ORDER BY breakdown_value,
                    day_start
           UNION ALL SELECT count(DISTINCT person_id) as total,
                            toStartOfDay(toTimeZone(toDateTime(timestamp, 'UTC'), 'UTC')) as day_start,
                            breakdown_value
           FROM
             (SELECT person_id,
                     min(timestamp) as timestamp,
                     breakdown_value
              FROM
                (SELECT if(notEmpty(overrides.person_id), overrides.person_id, e.person_id) as person_id, timestamp, replaceRegexpAll(JSONExtractRaw(properties, '$some_property'), '^"|"$', '') as breakdown_value
                 FROM events e
                 LEFT OUTER JOIN
                   (SELECT argMax(override_person_id, version) as person_id,
                           old_person_id
                    FROM person_overrides
                    WHERE team_id = 2
                    GROUP BY old_person_id) AS overrides ON e.person_id = overrides.old_person_id
                 WHERE e.team_id = 2
                   AND event = 'sign up'
                   AND toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfDay(toDateTime('2019-12-28 00:00:00', 'UTC')), 'UTC')
                   AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-04 23:59:59', 'UTC')
                   AND notEmpty(e.person_id)
                   AND replaceRegexpAll(JSONExtractRaw(properties, '$some_property'), '^"|"$', '') in (['', 'value', 'other_value'])
                   AND notEmpty(e.person_id) )
              GROUP BY person_id,
                       breakdown_value) AS pdi
           GROUP BY day_start,
                    breakdown_value))
     GROUP BY day_start,
              breakdown_value
     ORDER BY breakdown_value,
              day_start)
  GROUP BY breakdown_value
  ORDER BY breakdown_value
  '
---
# name: TestTrends.test_trends_breakdown_with_session_property_single_aggregate_math_and_breakdown
  '
  
  SELECT groupArray(value)
  FROM
    (SELECT replaceRegexpAll(JSONExtractRaw(properties, '$some_property'), '^"|"$', '') AS value,
            quantile(0.50)(session_duration) as count
     FROM events e
     INNER JOIN
       (SELECT "$session_id",
               dateDiff('second', min(timestamp), max(timestamp)) as session_duration
        FROM events
        WHERE "$session_id" != ''
          AND team_id = 2
          AND toTimeZone(timestamp, 'UTC') >= toDateTime('2019-12-28 00:00:00', 'UTC') - INTERVAL 24 HOUR
          AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-04 23:59:59', 'UTC') + INTERVAL 24 HOUR
        GROUP BY "$session_id") AS sessions ON sessions."$session_id" = e."$session_id"
     WHERE team_id = 2
       AND event = 'sign up'
       AND toTimeZone(timestamp, 'UTC') >= toDateTime('2019-12-28 00:00:00', 'UTC')
       AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-04 23:59:59', 'UTC')
     GROUP BY value
     ORDER BY count DESC, value DESC
     LIMIT 25
     OFFSET 0)
  '
---
# name: TestTrends.test_trends_breakdown_with_session_property_single_aggregate_math_and_breakdown.1
  '
  
  SELECT quantile(0.50)(session_duration) AS total,
         breakdown_value
  FROM
    (SELECT any(session_duration) as session_duration,
            breakdown_value
     FROM
       (SELECT sessions.$session_id,
                        session_duration,
                        replaceRegexpAll(JSONExtractRaw(properties, '$some_property'), '^"|"$', '') AS breakdown_value
        FROM events e
        INNER JOIN
          (SELECT "$session_id",
                  dateDiff('second', min(timestamp), max(timestamp)) as session_duration
           FROM events
           WHERE "$session_id" != ''
             AND team_id = 2
             AND toTimeZone(timestamp, 'UTC') >= toDateTime('2019-12-28 00:00:00', 'UTC') - INTERVAL 24 HOUR
             AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-04 23:59:59', 'UTC') + INTERVAL 24 HOUR
           GROUP BY "$session_id") sessions ON sessions."$session_id" = e."$session_id"
        WHERE e.team_id = 2
          AND event = 'sign up'
          AND toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfWeek(toDateTime('2019-12-28 00:00:00', 'UTC'), 0), 'UTC')
          AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-04 23:59:59', 'UTC')
          AND replaceRegexpAll(JSONExtractRaw(properties, '$some_property'), '^"|"$', '') in (['value2', 'value1', '']) )
     GROUP BY sessions.$session_id,
                       breakdown_value)
  GROUP BY breakdown_value
  ORDER BY breakdown_value
  '
---
# name: TestTrends.test_trends_breakdown_with_session_property_single_aggregate_math_and_breakdown.2
  '
  
  SELECT groupArray(value)
  FROM
    (SELECT replaceRegexpAll(JSONExtractRaw(properties, '$some_property'), '^"|"$', '') AS value,
            quantile(0.50)(session_duration) as count
     FROM events e
     INNER JOIN
       (SELECT "$session_id",
               dateDiff('second', min(timestamp), max(timestamp)) as session_duration
        FROM events
        WHERE "$session_id" != ''
          AND team_id = 2
          AND toTimeZone(timestamp, 'UTC') >= toDateTime('2019-12-28 00:00:00', 'UTC') - INTERVAL 24 HOUR
          AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-04 23:59:59', 'UTC') + INTERVAL 24 HOUR
        GROUP BY "$session_id") AS sessions ON sessions."$session_id" = e."$session_id"
     WHERE team_id = 2
       AND event = 'sign up'
       AND toTimeZone(timestamp, 'UTC') >= toDateTime('2019-12-28 00:00:00', 'UTC')
       AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-04 23:59:59', 'UTC')
     GROUP BY value
     ORDER BY count DESC, value DESC
     LIMIT 25
     OFFSET 0)
  '
---
# name: TestTrends.test_trends_breakdown_with_session_property_single_aggregate_math_and_breakdown.3
  '
  
  SELECT quantile(0.50)(session_duration) AS total,
         breakdown_value
  FROM
    (SELECT any(session_duration) as session_duration,
            breakdown_value
     FROM
       (SELECT sessions.$session_id,
                        session_duration,
                        replaceRegexpAll(JSONExtractRaw(properties, '$some_property'), '^"|"$', '') AS breakdown_value
        FROM events e
        INNER JOIN
          (SELECT "$session_id",
                  dateDiff('second', min(timestamp), max(timestamp)) as session_duration
           FROM events
           WHERE "$session_id" != ''
             AND team_id = 2
             AND toTimeZone(timestamp, 'UTC') >= toDateTime('2019-12-28 00:00:00', 'UTC') - INTERVAL 24 HOUR
             AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-04 23:59:59', 'UTC') + INTERVAL 24 HOUR
           GROUP BY "$session_id") sessions ON sessions."$session_id" = e."$session_id"
        WHERE e.team_id = 2
          AND event = 'sign up'
          AND toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfDay(toDateTime('2019-12-28 00:00:00', 'UTC')), 'UTC')
          AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-04 23:59:59', 'UTC')
          AND replaceRegexpAll(JSONExtractRaw(properties, '$some_property'), '^"|"$', '') in (['value2', 'value1', '']) )
     GROUP BY sessions.$session_id,
                       breakdown_value)
  GROUP BY breakdown_value
  ORDER BY breakdown_value
  '
---
# name: TestTrends.test_trends_compare_day_interval_relative_range
  '
  
  SELECT groupArray(day_start) as date,
         groupArray(count) AS total
  FROM
    (SELECT SUM(total) AS count,
            day_start
     FROM
       (SELECT toUInt16(0) AS total,
               toStartOfDay(toDateTime('2020-01-04 23:59:59', 'UTC')) - toIntervalDay(number) AS day_start
        FROM numbers(dateDiff('day', toStartOfDay(toDateTime('2019-12-28 00:00:00', 'UTC')), toDateTime('2020-01-04 23:59:59', 'UTC')))
        UNION ALL SELECT toUInt16(0) AS total,
                         toStartOfDay(toDateTime('2019-12-28 00:00:00', 'UTC'))
        UNION ALL SELECT count(*) AS total,
                         toStartOfDay(toTimeZone(toDateTime(timestamp, 'UTC'), 'UTC')) AS date
        FROM events e
        WHERE team_id = 2
          AND event = 'sign up'
          AND toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfDay(toDateTime('2019-12-28 00:00:00', 'UTC')), 'UTC')
          AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-04 23:59:59', 'UTC')
        GROUP BY date)
     GROUP BY day_start
     ORDER BY day_start)
  '
---
# name: TestTrends.test_trends_compare_day_interval_relative_range.1
  '
  
  SELECT groupArray(day_start) as date,
         groupArray(count) AS total
  FROM
    (SELECT SUM(total) AS count,
            day_start
     FROM
       (SELECT toUInt16(0) AS total,
               toStartOfDay(toDateTime('2019-12-28 23:59:59', 'UTC')) - toIntervalDay(number) AS day_start
        FROM numbers(dateDiff('day', toStartOfDay(toDateTime('2019-12-21 00:00:00', 'UTC')), toDateTime('2019-12-28 23:59:59', 'UTC')))
        UNION ALL SELECT toUInt16(0) AS total,
                         toStartOfDay(toDateTime('2019-12-21 00:00:00', 'UTC'))
        UNION ALL SELECT count(*) AS total,
                         toStartOfDay(toTimeZone(toDateTime(timestamp, 'UTC'), 'UTC')) AS date
        FROM events e
        WHERE team_id = 2
          AND event = 'sign up'
          AND toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfDay(toDateTime('2019-12-21 00:00:00', 'UTC')), 'UTC')
          AND toTimeZone(timestamp, 'UTC') <= toDateTime('2019-12-28 23:59:59', 'UTC')
        GROUP BY date)
     GROUP BY day_start
     ORDER BY day_start)
  '
---
# name: TestTrends.test_trends_compare_day_interval_relative_range.2
  '
  
  SELECT groupArray(day_start) as date,
         groupArray(count) AS total
  FROM
    (SELECT SUM(total) AS count,
            day_start
     FROM
       (SELECT toUInt16(0) AS total,
               toStartOfDay(toDateTime('2020-01-04 23:59:59', 'UTC')) - toIntervalDay(number) AS day_start
        FROM numbers(dateDiff('day', toStartOfDay(toDateTime('2019-12-28 00:00:00', 'UTC')), toDateTime('2020-01-04 23:59:59', 'UTC')))
        UNION ALL SELECT toUInt16(0) AS total,
                         toStartOfDay(toDateTime('2019-12-28 00:00:00', 'UTC'))
        UNION ALL SELECT count(*) AS total,
                         toStartOfDay(toTimeZone(toDateTime(timestamp, 'UTC'), 'UTC')) AS date
        FROM events e
        WHERE team_id = 2
          AND event = 'sign up'
          AND toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfDay(toDateTime('2019-12-28 00:00:00', 'UTC')), 'UTC')
          AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-04 23:59:59', 'UTC')
        GROUP BY date)
     GROUP BY day_start
     ORDER BY day_start)
  '
---
# name: TestTrends.test_trends_count_per_group_average_aggregated
  '
  
  SELECT avg(intermediate_count) AS total
  FROM
    (SELECT count() AS intermediate_count
     FROM events e
     WHERE team_id = 2
       AND event = 'viewed video'
       AND toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfDay(toDateTime('2020-01-01 00:00:00', 'UTC')), 'UTC')
       AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-07 23:59:59', 'UTC')
       AND "$group_0" != ''
     GROUP BY "$group_0") events
  '
---
# name: TestTrends.test_trends_count_per_group_average_daily
  '
  
  SELECT groupArray(day_start) as date,
         groupArray(count) AS total
  FROM
    (SELECT SUM(total) AS count,
            day_start
     FROM
       (SELECT toUInt16(0) AS total,
               toStartOfDay(toDateTime('2020-01-07 23:59:59', 'UTC')) - toIntervalDay(number) AS day_start
        FROM numbers(dateDiff('day', toStartOfDay(toDateTime('2020-01-01 00:00:00', 'UTC')), toDateTime('2020-01-07 23:59:59', 'UTC')))
        UNION ALL SELECT toUInt16(0) AS total,
                         toStartOfDay(toDateTime('2020-01-01 00:00:00', 'UTC'))
        UNION ALL SELECT avg(intermediate_count) AS total, date
        FROM
          (SELECT count() AS intermediate_count,
                  toStartOfDay(toTimeZone(toDateTime(timestamp, 'UTC'), 'UTC')) AS date
           FROM events e
           WHERE team_id = 2
             AND event = 'viewed video'
             AND toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfDay(toDateTime('2020-01-01 00:00:00', 'UTC')), 'UTC')
             AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-07 23:59:59', 'UTC')
             AND "$group_0" != ''
           GROUP BY "$group_0", date)
        GROUP BY date)
     GROUP BY day_start
     ORDER BY day_start)
  '
---
# name: TestTrends.test_trends_count_per_user_average_aggregated
  '
  
  SELECT avg(intermediate_count) AS total
  FROM
    (SELECT count() AS intermediate_count
     FROM events e
     INNER JOIN
       (SELECT distinct_id,
               argMax(person_id, version) as person_id
        FROM person_distinct_id2
        WHERE team_id = 2
        GROUP BY distinct_id
        HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
     INNER JOIN
       (SELECT id
        FROM person
        WHERE team_id = 2
        GROUP BY id
        HAVING max(is_deleted) = 0 SETTINGS optimize_aggregation_in_order = 1) person ON person.id = pdi.person_id
     WHERE team_id = 2
       AND event = 'viewed video'
       AND toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfDay(toDateTime('2020-01-01 00:00:00', 'UTC')), 'UTC')
       AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-07 23:59:59', 'UTC')
     GROUP BY pdi.person_id) events
  '
---
# name: TestTrends.test_trends_count_per_user_average_aggregated_poe_v2
  '
  
  SELECT avg(intermediate_count) AS total
  FROM
    (SELECT count() AS intermediate_count
     FROM events e
     LEFT OUTER JOIN
       (SELECT argMax(override_person_id, version) as person_id,
               old_person_id
        FROM person_overrides
        WHERE team_id = 2
        GROUP BY old_person_id) AS overrides ON e.person_id = overrides.old_person_id
     WHERE team_id = 2
       AND event = 'viewed video'
       AND toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfDay(toDateTime('2020-01-01 00:00:00', 'UTC')), 'UTC')
       AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-07 23:59:59', 'UTC')
       AND notEmpty(e.person_id)
     GROUP BY if(notEmpty(overrides.person_id), overrides.person_id, e.person_id)) events
  '
---
# name: TestTrends.test_trends_count_per_user_average_aggregated_with_event_property_breakdown_with_sampling
  '
  
  SELECT groupArray(value)
  FROM
    (SELECT replaceRegexpAll(JSONExtractRaw(properties, 'color'), '^"|"$', '') AS value,
            count(*) as count
     FROM events e SAMPLE 1.0
     INNER JOIN
       (SELECT distinct_id,
               argMax(person_id, version) as person_id
        FROM person_distinct_id2
        WHERE team_id = 2
        GROUP BY distinct_id
        HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
     INNER JOIN
       (SELECT id
        FROM person
        WHERE team_id = 2
        GROUP BY id
        HAVING max(is_deleted) = 0 SETTINGS optimize_aggregation_in_order = 1) person ON pdi.person_id = person.id
     WHERE team_id = 2
       AND event = 'viewed video'
       AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
       AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-07 23:59:59', 'UTC')
     GROUP BY value
     ORDER BY count DESC, value DESC
     LIMIT 25
     OFFSET 0)
  '
---
# name: TestTrends.test_trends_count_per_user_average_aggregated_with_event_property_breakdown_with_sampling.1
  '
  
  SELECT avg(intermediate_count) AS total,
         breakdown_value
  FROM
    (SELECT COUNT(*) AS intermediate_count,
            pdi.person_id,
            replaceRegexpAll(JSONExtractRaw(properties, 'color'), '^"|"$', '') AS breakdown_value
     FROM events AS e SAMPLE 1.0
     INNER JOIN
       (SELECT distinct_id,
               argMax(person_id, version) as person_id
        FROM person_distinct_id2
        WHERE team_id = 2
        GROUP BY distinct_id
        HAVING argMax(is_deleted, version) = 0) as pdi ON events.distinct_id = pdi.distinct_id
     INNER JOIN
       (SELECT id
        FROM person
        WHERE team_id = 2
        GROUP BY id
        HAVING max(is_deleted) = 0 SETTINGS optimize_aggregation_in_order = 1) person ON person.id = pdi.person_id
     WHERE e.team_id = 2
       AND event = 'viewed video'
       AND toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfDay(toDateTime('2020-01-01 00:00:00', 'UTC')), 'UTC')
       AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-07 23:59:59', 'UTC')
       AND replaceRegexpAll(JSONExtractRaw(properties, 'color'), '^"|"$', '') in (['red', 'blue', ''])
     GROUP BY pdi.person_id,
              breakdown_value)
  GROUP BY breakdown_value
  ORDER BY breakdown_value
  '
---
# name: TestTrends.test_trends_count_per_user_average_daily
  '
  
  SELECT groupArray(day_start) as date,
         groupArray(count) AS total
  FROM
    (SELECT SUM(total) AS count,
            day_start
     FROM
       (SELECT toUInt16(0) AS total,
               toStartOfDay(toDateTime('2020-01-07 23:59:59', 'UTC')) - toIntervalDay(number) AS day_start
        FROM numbers(dateDiff('day', toStartOfDay(toDateTime('2020-01-01 00:00:00', 'UTC')), toDateTime('2020-01-07 23:59:59', 'UTC')))
        UNION ALL SELECT toUInt16(0) AS total,
                         toStartOfDay(toDateTime('2020-01-01 00:00:00', 'UTC'))
        UNION ALL SELECT avg(intermediate_count) AS total, date
        FROM
          (SELECT count() AS intermediate_count,
                  toStartOfDay(toTimeZone(toDateTime(timestamp, 'UTC'), 'UTC')) AS date
           FROM events e
           INNER JOIN
             (SELECT distinct_id,
                     argMax(person_id, version) as person_id
              FROM person_distinct_id2
              WHERE team_id = 2
              GROUP BY distinct_id
              HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
           INNER JOIN
             (SELECT id
              FROM person
              WHERE team_id = 2
              GROUP BY id
              HAVING max(is_deleted) = 0 SETTINGS optimize_aggregation_in_order = 1) person ON person.id = pdi.person_id
           WHERE team_id = 2
             AND event = 'viewed video'
             AND toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfDay(toDateTime('2020-01-01 00:00:00', 'UTC')), 'UTC')
             AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-07 23:59:59', 'UTC')
           GROUP BY pdi.person_id, date)
        GROUP BY date)
     GROUP BY day_start
     ORDER BY day_start)
  '
---
# name: TestTrends.test_trends_count_per_user_average_daily_poe_v2
  '
  
  SELECT groupArray(day_start) as date,
         groupArray(count) AS total
  FROM
    (SELECT SUM(total) AS count,
            day_start
     FROM
       (SELECT toUInt16(0) AS total,
               toStartOfDay(toDateTime('2020-01-07 23:59:59', 'UTC')) - toIntervalDay(number) AS day_start
        FROM numbers(dateDiff('day', toStartOfDay(toDateTime('2020-01-01 00:00:00', 'UTC')), toDateTime('2020-01-07 23:59:59', 'UTC')))
        UNION ALL SELECT toUInt16(0) AS total,
                         toStartOfDay(toDateTime('2020-01-01 00:00:00', 'UTC'))
        UNION ALL SELECT avg(intermediate_count) AS total, date
        FROM
          (SELECT count() AS intermediate_count,
                  toStartOfDay(toTimeZone(toDateTime(timestamp, 'UTC'), 'UTC')) AS date
           FROM events e
           LEFT OUTER JOIN
             (SELECT argMax(override_person_id, version) as person_id,
                     old_person_id
              FROM person_overrides
              WHERE team_id = 2
              GROUP BY old_person_id) AS overrides ON e.person_id = overrides.old_person_id
           WHERE team_id = 2
             AND event = 'viewed video'
             AND toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfDay(toDateTime('2020-01-01 00:00:00', 'UTC')), 'UTC')
             AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-07 23:59:59', 'UTC')
             AND notEmpty(e.person_id)
           GROUP BY if(notEmpty(overrides.person_id), overrides.person_id, e.person_id), date)
        GROUP BY date)
     GROUP BY day_start
     ORDER BY day_start)
  '
---
# name: TestTrends.test_trends_groups_per_day_cumulative
  '
  
  SELECT groupArray(day_start) as date,
         groupArray(count) AS total
  FROM
    (SELECT SUM(total) AS count,
            day_start
     FROM
       (SELECT toUInt16(0) AS total,
               toStartOfDay(toDateTime('2020-01-06 23:59:59', 'UTC')) - toIntervalDay(number) AS day_start
        FROM numbers(dateDiff('day', toStartOfDay(toDateTime('2019-12-30 00:00:00', 'UTC')), toDateTime('2020-01-06 23:59:59', 'UTC')))
        UNION ALL SELECT toUInt16(0) AS total,
                         toStartOfDay(toDateTime('2019-12-30 00:00:00', 'UTC'))
        UNION ALL SELECT COUNT(DISTINCT actor_id) AS total,
                         toStartOfDay(toTimeZone(toDateTime(first_seen_timestamp, 'UTC'), 'UTC')) AS date
        FROM
          (SELECT "$group_0" AS actor_id,
                  min(timestamp) AS first_seen_timestamp
           FROM events e
           WHERE team_id = 2
             AND event = 'viewed video'
             AND toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfDay(toDateTime('2019-12-30 00:00:00', 'UTC')), 'UTC')
             AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-06 23:59:59', 'UTC')
             AND (NOT has([''], "$group_0"))
             AND "$group_0" != ''
           GROUP BY actor_id)
        GROUP BY date)
     GROUP BY day_start
     ORDER BY day_start)
  '
---
# name: TestTrends.test_trends_per_day_cumulative
  '
  
  SELECT groupArray(day_start) as date,
         groupArray(count) AS total
  FROM
    (SELECT SUM(total) AS count,
            day_start
     FROM
       (SELECT toUInt16(0) AS total,
               toStartOfDay(toDateTime('2020-01-04 23:59:59', 'UTC')) - toIntervalDay(number) AS day_start
        FROM numbers(dateDiff('day', toStartOfDay(toDateTime('2019-12-28 00:00:00', 'UTC')), toDateTime('2020-01-04 23:59:59', 'UTC')))
        UNION ALL SELECT toUInt16(0) AS total,
                         toStartOfDay(toDateTime('2019-12-28 00:00:00', 'UTC'))
        UNION ALL SELECT count(*) AS total,
                         toStartOfDay(toTimeZone(toDateTime(timestamp, 'UTC'), 'UTC')) AS date
        FROM events e
        WHERE team_id = 2
          AND event = 'sign up'
          AND toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfDay(toDateTime('2019-12-28 00:00:00', 'UTC')), 'UTC')
          AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-04 23:59:59', 'UTC')
        GROUP BY date)
     GROUP BY day_start
     ORDER BY day_start)
  '
---
# name: TestTrends.test_trends_person_breakdown_with_session_property_single_aggregate_math_and_breakdown
  '
  
  SELECT groupArray(value)
  FROM
    (SELECT replaceRegexpAll(JSONExtractRaw(person_props, '$some_prop'), '^"|"$', '') AS value,
            quantile(0.50)(session_duration) as count
     FROM events e
     INNER JOIN
       (SELECT distinct_id,
               argMax(person_id, version) as person_id
        FROM person_distinct_id2
        WHERE team_id = 2
        GROUP BY distinct_id
        HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
     INNER JOIN
       (SELECT id,
               argMax(properties, version) as person_props
        FROM person
        WHERE team_id = 2
        GROUP BY id
        HAVING max(is_deleted) = 0 SETTINGS optimize_aggregation_in_order = 1) person ON pdi.person_id = person.id
     INNER JOIN
       (SELECT "$session_id",
               dateDiff('second', min(timestamp), max(timestamp)) as session_duration
        FROM events
        WHERE "$session_id" != ''
          AND team_id = 2
          AND toTimeZone(timestamp, 'UTC') >= toDateTime('2019-12-28 00:00:00', 'UTC') - INTERVAL 24 HOUR
          AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-04 23:59:59', 'UTC') + INTERVAL 24 HOUR
        GROUP BY "$session_id") AS sessions ON sessions."$session_id" = e."$session_id"
     WHERE team_id = 2
       AND event = 'sign up'
       AND toTimeZone(timestamp, 'UTC') >= toDateTime('2019-12-28 00:00:00', 'UTC')
       AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-04 23:59:59', 'UTC')
     GROUP BY value
     ORDER BY count DESC, value DESC
     LIMIT 25
     OFFSET 0)
  '
---
# name: TestTrends.test_trends_person_breakdown_with_session_property_single_aggregate_math_and_breakdown.1
  '
  
  SELECT quantile(0.50)(session_duration) AS total,
         breakdown_value
  FROM
    (SELECT any(session_duration) as session_duration,
            breakdown_value
     FROM
       (SELECT sessions.$session_id,
                        session_duration,
                        replaceRegexpAll(JSONExtractRaw(person_props, '$some_prop'), '^"|"$', '') AS breakdown_value
        FROM events e
        INNER JOIN
          (SELECT distinct_id,
                  argMax(person_id, version) as person_id
           FROM person_distinct_id2
           WHERE team_id = 2
           GROUP BY distinct_id
           HAVING argMax(is_deleted, version) = 0) as pdi ON events.distinct_id = pdi.distinct_id
        INNER JOIN
          (SELECT id,
                  argMax(properties, version) as person_props
           FROM person
           WHERE team_id = 2
           GROUP BY id
           HAVING max(is_deleted) = 0 SETTINGS optimize_aggregation_in_order = 1) person ON person.id = pdi.person_id
        INNER JOIN
          (SELECT "$session_id",
                  dateDiff('second', min(timestamp), max(timestamp)) as session_duration
           FROM events
           WHERE "$session_id" != ''
             AND team_id = 2
             AND toTimeZone(timestamp, 'UTC') >= toDateTime('2019-12-28 00:00:00', 'UTC') - INTERVAL 24 HOUR
             AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-04 23:59:59', 'UTC') + INTERVAL 24 HOUR
           GROUP BY "$session_id") sessions ON sessions."$session_id" = e."$session_id"
        WHERE e.team_id = 2
          AND event = 'sign up'
          AND toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfWeek(toDateTime('2019-12-28 00:00:00', 'UTC'), 0), 'UTC')
          AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-04 23:59:59', 'UTC')
          AND replaceRegexpAll(JSONExtractRaw(person_props, '$some_prop'), '^"|"$', '') in (['some_val', 'another_val']) )
     GROUP BY sessions.$session_id,
                       breakdown_value)
  GROUP BY breakdown_value
  ORDER BY breakdown_value
  '
---
# name: TestTrends.test_trends_with_hogql_math
  '
  
  SELECT groupArray(day_start) as date,
         groupArray(count) AS total
  FROM
    (SELECT SUM(total) AS count,
            day_start
     FROM
       (SELECT toUInt16(0) AS total,
               toStartOfWeek(toDateTime('2020-01-04 23:59:59', 'UTC'), 0) - toIntervalWeek(number) AS day_start
        FROM numbers(dateDiff('week', toStartOfWeek(toDateTime('2019-12-28 00:00:00', 'UTC'), 0), toDateTime('2020-01-04 23:59:59', 'UTC')))
        UNION ALL SELECT toUInt16(0) AS total,
                         toStartOfWeek(toDateTime('2019-12-28 00:00:00', 'UTC'), 0)
        UNION ALL SELECT plus(avg(toInt64OrNull(nullIf(nullIf(events.`$session_id`, ''), 'null'))), 1000) AS total,
                         toStartOfWeek(toTimeZone(toDateTime(timestamp, 'UTC'), 'UTC'), 0) AS date
        FROM events e
        WHERE team_id = 2
          AND event = 'sign up'
          AND toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfWeek(toDateTime('2019-12-28 00:00:00', 'UTC'), 0), 'UTC')
          AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-04 23:59:59', 'UTC')
        GROUP BY date)
     GROUP BY day_start
     ORDER BY day_start)
  '
---
# name: TestTrends.test_trends_with_session_property_single_aggregate_math
  '
  
  SELECT quantile(0.50)(session_duration) AS total
  FROM
    (SELECT any(session_duration) as session_duration
     FROM events e
     INNER JOIN
       (SELECT "$session_id",
               dateDiff('second', min(timestamp), max(timestamp)) as session_duration
        FROM events
        WHERE "$session_id" != ''
          AND team_id = 2
          AND toTimeZone(timestamp, 'UTC') >= toDateTime('2019-12-28 00:00:00', 'UTC') - INTERVAL 24 HOUR
          AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-04 23:59:59', 'UTC') + INTERVAL 24 HOUR
        GROUP BY "$session_id") as sessions ON sessions."$session_id" = e."$session_id"
     WHERE team_id = 2
       AND event = 'sign up'
       AND toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfWeek(toDateTime('2019-12-28 00:00:00', 'UTC'), 0), 'UTC')
       AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-04 23:59:59', 'UTC')
     GROUP BY e."$session_id")
  '
---
# name: TestTrends.test_trends_with_session_property_single_aggregate_math.1
  '
  
  SELECT quantile(0.50)(session_duration) AS total
  FROM
    (SELECT any(session_duration) as session_duration
     FROM events e
     INNER JOIN
       (SELECT "$session_id",
               dateDiff('second', min(timestamp), max(timestamp)) as session_duration
        FROM events
        WHERE "$session_id" != ''
          AND team_id = 2
          AND toTimeZone(timestamp, 'UTC') >= toDateTime('2019-12-28 00:00:00', 'UTC') - INTERVAL 24 HOUR
          AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-04 23:59:59', 'UTC') + INTERVAL 24 HOUR
        GROUP BY "$session_id") as sessions ON sessions."$session_id" = e."$session_id"
     WHERE team_id = 2
       AND event = 'sign up'
       AND toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfDay(toDateTime('2019-12-28 00:00:00', 'UTC')), 'UTC')
       AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-04 23:59:59', 'UTC')
     GROUP BY e."$session_id")
  '
---
# name: TestTrends.test_trends_with_session_property_total_volume_math
  '
  
  SELECT groupArray(day_start) as date,
         groupArray(count) AS total
  FROM
    (SELECT SUM(total) AS count,
            day_start
     FROM
       (SELECT toUInt16(0) AS total,
               toStartOfWeek(toDateTime('2020-01-04 23:59:59', 'UTC'), 0) - toIntervalWeek(number) AS day_start
        FROM numbers(dateDiff('week', toStartOfWeek(toDateTime('2019-12-28 00:00:00', 'UTC'), 0), toDateTime('2020-01-04 23:59:59', 'UTC')))
        UNION ALL SELECT toUInt16(0) AS total,
                         toStartOfWeek(toDateTime('2019-12-28 00:00:00', 'UTC'), 0)
        UNION ALL SELECT quantile(0.50)(session_duration) AS total, date
        FROM
          (SELECT toStartOfWeek(toTimeZone(toDateTime(timestamp, 'UTC'), 'UTC'), 0) as date,
                  any(sessions.session_duration) as session_duration
           FROM events e
           INNER JOIN
             (SELECT "$session_id",
                     dateDiff('second', min(timestamp), max(timestamp)) as session_duration
              FROM events
              WHERE "$session_id" != ''
                AND team_id = 2
                AND toTimeZone(timestamp, 'UTC') >= toDateTime('2019-12-28 00:00:00', 'UTC') - INTERVAL 24 HOUR
                AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-04 23:59:59', 'UTC') + INTERVAL 24 HOUR
              GROUP BY "$session_id") as sessions ON sessions."$session_id" = e."$session_id"
           WHERE team_id = 2
             AND event = 'sign up'
             AND toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfWeek(toDateTime('2019-12-28 00:00:00', 'UTC'), 0), 'UTC')
             AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-04 23:59:59', 'UTC')
           GROUP BY e."$session_id", date)
        GROUP BY date)
     GROUP BY day_start
     ORDER BY day_start)
  '
---
# name: TestTrends.test_trends_with_session_property_total_volume_math.1
  '
  
  SELECT groupArray(day_start) as date,
         groupArray(count) AS total
  FROM
    (SELECT SUM(total) AS count,
            day_start
     FROM
       (SELECT toUInt16(0) AS total,
               toStartOfDay(toDateTime('2020-01-04 23:59:59', 'UTC')) - toIntervalDay(number) AS day_start
        FROM numbers(dateDiff('day', toStartOfDay(toDateTime('2019-12-28 00:00:00', 'UTC')), toDateTime('2020-01-04 23:59:59', 'UTC')))
        UNION ALL SELECT toUInt16(0) AS total,
                         toStartOfDay(toDateTime('2019-12-28 00:00:00', 'UTC'))
        UNION ALL SELECT quantile(0.50)(session_duration) AS total, date
        FROM
          (SELECT toStartOfDay(toTimeZone(toDateTime(timestamp, 'UTC'), 'UTC')) as date,
                  any(sessions.session_duration) as session_duration
           FROM events e
           INNER JOIN
             (SELECT "$session_id",
                     dateDiff('second', min(timestamp), max(timestamp)) as session_duration
              FROM events
              WHERE "$session_id" != ''
                AND team_id = 2
                AND toTimeZone(timestamp, 'UTC') >= toDateTime('2019-12-28 00:00:00', 'UTC') - INTERVAL 24 HOUR
                AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-04 23:59:59', 'UTC') + INTERVAL 24 HOUR
              GROUP BY "$session_id") as sessions ON sessions."$session_id" = e."$session_id"
           WHERE team_id = 2
             AND event = 'sign up'
             AND toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfDay(toDateTime('2019-12-28 00:00:00', 'UTC')), 'UTC')
             AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-04 23:59:59', 'UTC')
           GROUP BY e."$session_id", date)
        GROUP BY date)
     GROUP BY day_start
     ORDER BY day_start)
  '
---
# name: TestTrends.test_trends_with_session_property_total_volume_math_with_breakdowns
  '
  
  SELECT groupArray(value)
  FROM
    (SELECT replaceRegexpAll(JSONExtractRaw(properties, '$some_property'), '^"|"$', '') AS value,
            quantile(0.50)(session_duration) as count
     FROM events e
     INNER JOIN
       (SELECT "$session_id",
               dateDiff('second', min(timestamp), max(timestamp)) as session_duration
        FROM events
        WHERE "$session_id" != ''
          AND team_id = 2
          AND toTimeZone(timestamp, 'UTC') >= toDateTime('2019-12-28 00:00:00', 'UTC') - INTERVAL 24 HOUR
          AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-04 23:59:59', 'UTC') + INTERVAL 24 HOUR
        GROUP BY "$session_id") AS sessions ON sessions."$session_id" = e."$session_id"
     WHERE team_id = 2
       AND event = 'sign up'
       AND toTimeZone(timestamp, 'UTC') >= toDateTime('2019-12-28 00:00:00', 'UTC')
       AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-04 23:59:59', 'UTC')
     GROUP BY value
     ORDER BY count DESC, value DESC
     LIMIT 25
     OFFSET 0)
  '
---
# name: TestTrends.test_trends_with_session_property_total_volume_math_with_breakdowns.1
  '
  
  SELECT groupArray(day_start) as date,
         groupArray(count) AS total,
         breakdown_value
  FROM
    (SELECT SUM(total) as count,
            day_start,
            breakdown_value
     FROM
       (SELECT *
        FROM
          (SELECT toUInt16(0) AS total,
                  ticks.day_start as day_start,
                  breakdown_value
           FROM
             (SELECT toStartOfWeek(toDateTime('2020-01-04 23:59:59', 'UTC'), 0) - toIntervalWeek(number) as day_start
              FROM numbers(2)
              UNION ALL SELECT toStartOfWeek(toDateTime('2019-12-28 00:00:00', 'UTC'), 0) as day_start) as ticks
           CROSS JOIN
             (SELECT breakdown_value
              FROM
                (SELECT ['value2', 'value1'] as breakdown_value) ARRAY
              JOIN breakdown_value) as sec
           ORDER BY breakdown_value,
                    day_start
           UNION ALL SELECT quantile(0.50)(session_duration) as total,
                            day_start,
                            breakdown_value
           FROM
             (SELECT any(session_duration) as session_duration,
                     day_start,
                     breakdown_value
              FROM
                (SELECT sessions.$session_id,
                                 session_duration,
                                 toStartOfWeek(toTimeZone(toDateTime(timestamp, 'UTC'), 'UTC'), 0) as day_start,
                                 replaceRegexpAll(JSONExtractRaw(properties, '$some_property'), '^"|"$', '') as breakdown_value
                 FROM events AS e
                 INNER JOIN
                   (SELECT "$session_id",
                           dateDiff('second', min(timestamp), max(timestamp)) as session_duration
                    FROM events
                    WHERE "$session_id" != ''
                      AND team_id = 2
                      AND toTimeZone(timestamp, 'UTC') >= toDateTime('2019-12-28 00:00:00', 'UTC') - INTERVAL 24 HOUR
                      AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-04 23:59:59', 'UTC') + INTERVAL 24 HOUR
                    GROUP BY "$session_id") sessions ON sessions."$session_id" = e."$session_id"
                 WHERE e.team_id = 2
                   AND event = 'sign up'
                   AND toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfWeek(toDateTime('2019-12-28 00:00:00', 'UTC'), 0), 'UTC')
                   AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-04 23:59:59', 'UTC')
                   AND replaceRegexpAll(JSONExtractRaw(properties, '$some_property'), '^"|"$', '') in (['value2', 'value1']) )
              GROUP BY sessions.$session_id,
                                day_start,
                                breakdown_value)
           GROUP BY day_start,
                    breakdown_value))
     GROUP BY day_start,
              breakdown_value
     ORDER BY breakdown_value,
              day_start)
  GROUP BY breakdown_value
  ORDER BY breakdown_value
  '
---
# name: TestTrends.test_trends_with_session_property_total_volume_math_with_breakdowns.2
  '
  
  SELECT groupArray(value)
  FROM
    (SELECT replaceRegexpAll(JSONExtractRaw(properties, '$some_property'), '^"|"$', '') AS value,
            quantile(0.50)(session_duration) as count
     FROM events e
     INNER JOIN
       (SELECT "$session_id",
               dateDiff('second', min(timestamp), max(timestamp)) as session_duration
        FROM events
        WHERE "$session_id" != ''
          AND team_id = 2
          AND toTimeZone(timestamp, 'UTC') >= toDateTime('2019-12-28 00:00:00', 'UTC') - INTERVAL 24 HOUR
          AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-04 23:59:59', 'UTC') + INTERVAL 24 HOUR
        GROUP BY "$session_id") AS sessions ON sessions."$session_id" = e."$session_id"
     WHERE team_id = 2
       AND event = 'sign up'
       AND toTimeZone(timestamp, 'UTC') >= toDateTime('2019-12-28 00:00:00', 'UTC')
       AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-04 23:59:59', 'UTC')
     GROUP BY value
     ORDER BY count DESC, value DESC
     LIMIT 25
     OFFSET 0)
  '
---
# name: TestTrends.test_trends_with_session_property_total_volume_math_with_breakdowns.3
  '
  
  SELECT groupArray(day_start) as date,
         groupArray(count) AS total,
         breakdown_value
  FROM
    (SELECT SUM(total) as count,
            day_start,
            breakdown_value
     FROM
       (SELECT *
        FROM
          (SELECT toUInt16(0) AS total,
                  ticks.day_start as day_start,
                  breakdown_value
           FROM
             (SELECT toStartOfDay(toDateTime('2020-01-04 23:59:59', 'UTC')) - toIntervalDay(number) as day_start
              FROM numbers(8)
              UNION ALL SELECT toStartOfDay(toDateTime('2019-12-28 00:00:00', 'UTC')) as day_start) as ticks
           CROSS JOIN
             (SELECT breakdown_value
              FROM
                (SELECT ['value2', 'value1'] as breakdown_value) ARRAY
              JOIN breakdown_value) as sec
           ORDER BY breakdown_value,
                    day_start
           UNION ALL SELECT quantile(0.50)(session_duration) as total,
                            day_start,
                            breakdown_value
           FROM
             (SELECT any(session_duration) as session_duration,
                     day_start,
                     breakdown_value
              FROM
                (SELECT sessions.$session_id,
                                 session_duration,
                                 toStartOfDay(toTimeZone(toDateTime(timestamp, 'UTC'), 'UTC')) as day_start,
                                 replaceRegexpAll(JSONExtractRaw(properties, '$some_property'), '^"|"$', '') as breakdown_value
                 FROM events AS e
                 INNER JOIN
                   (SELECT "$session_id",
                           dateDiff('second', min(timestamp), max(timestamp)) as session_duration
                    FROM events
                    WHERE "$session_id" != ''
                      AND team_id = 2
                      AND toTimeZone(timestamp, 'UTC') >= toDateTime('2019-12-28 00:00:00', 'UTC') - INTERVAL 24 HOUR
                      AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-04 23:59:59', 'UTC') + INTERVAL 24 HOUR
                    GROUP BY "$session_id") sessions ON sessions."$session_id" = e."$session_id"
                 WHERE e.team_id = 2
                   AND event = 'sign up'
                   AND toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfDay(toDateTime('2019-12-28 00:00:00', 'UTC')), 'UTC')
                   AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-04 23:59:59', 'UTC')
                   AND replaceRegexpAll(JSONExtractRaw(properties, '$some_property'), '^"|"$', '') in (['value2', 'value1']) )
              GROUP BY sessions.$session_id,
                                day_start,
                                breakdown_value)
           GROUP BY day_start,
                    breakdown_value))
     GROUP BY day_start,
              breakdown_value
     ORDER BY breakdown_value,
              day_start)
  GROUP BY breakdown_value
  ORDER BY breakdown_value
  '
---
# name: TestTrends.test_weekly_active_users_aggregated_range_narrower_than_week
  '
  
  SELECT count(DISTINCT pdi.person_id) AS total
  FROM events e
  INNER JOIN
    (SELECT distinct_id,
            argMax(person_id, version) as person_id
     FROM person_distinct_id2
     WHERE team_id = 2
     GROUP BY distinct_id
     HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
  WHERE team_id = 2
    AND event = '$pageview'
    AND toDateTime(timestamp, 'UTC') >= toDateTime('2020-01-05 23:59:59', 'UTC')
    AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-12 23:59:59', 'UTC')
  '
---
# name: TestTrends.test_weekly_active_users_aggregated_range_wider_than_week
  '
  
  SELECT count(DISTINCT pdi.person_id) AS total
  FROM events e
  INNER JOIN
    (SELECT distinct_id,
            argMax(person_id, version) as person_id
     FROM person_distinct_id2
     WHERE team_id = 2
     GROUP BY distinct_id
     HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
  WHERE team_id = 2
    AND event = '$pageview'
    AND toDateTime(timestamp, 'UTC') >= toDateTime('2020-01-01 23:59:59', 'UTC')
    AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-08 23:59:59', 'UTC')
  '
---
# name: TestTrends.test_weekly_active_users_aggregated_range_wider_than_week_with_sampling
  '
  
  SELECT count(DISTINCT pdi.person_id) AS total
  FROM events e SAMPLE 1.0
  INNER JOIN
    (SELECT distinct_id,
            argMax(person_id, version) as person_id
     FROM person_distinct_id2
     WHERE team_id = 2
     GROUP BY distinct_id
     HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
  WHERE team_id = 2
    AND event = '$pageview'
    AND toDateTime(timestamp, 'UTC') >= toDateTime('2020-01-01 23:59:59', 'UTC')
    AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-08 23:59:59', 'UTC')
  '
---
# name: TestTrends.test_weekly_active_users_daily
  '
  
  SELECT groupArray(day_start) as date,
         groupArray(count) AS total
  FROM
    (SELECT SUM(total) AS count,
            day_start
     FROM
       (SELECT toUInt16(0) AS total,
               toStartOfDay(toDateTime('2020-01-19 23:59:59', 'UTC')) - toIntervalDay(number) AS day_start
        FROM numbers(dateDiff('day', toStartOfDay(toDateTime('2020-01-08 00:00:00', 'UTC')), toDateTime('2020-01-19 23:59:59', 'UTC')))
        UNION ALL SELECT toUInt16(0) AS total,
                         toStartOfDay(toDateTime('2020-01-08 00:00:00', 'UTC'))
        UNION ALL SELECT counts AS total,
                         timestamp AS day_start
        FROM
          (SELECT d.timestamp,
                  COUNT(DISTINCT actor_id) AS counts
           FROM
             (SELECT toDateTime(toStartOfDay(toDateTime('2020-01-19 23:59:59', 'UTC')) - toIntervalDay(number)) AS timestamp
              FROM numbers(dateDiff('day', toStartOfDay(toDateTime('2020-01-01 00:00:00', 'UTC')), toDateTime('2020-01-19 23:59:59', 'UTC')))) d
           CROSS JOIN
             (SELECT toTimeZone(toDateTime(timestamp, 'UTC'), 'UTC') AS timestamp,
                     pdi.person_id AS actor_id
              FROM events e
              INNER JOIN
                (SELECT distinct_id,
                        argMax(person_id, version) as person_id
                 FROM person_distinct_id2
                 WHERE team_id = 2
                 GROUP BY distinct_id
                 HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
              WHERE team_id = 2
                AND event = '$pageview'
                AND toDateTime(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
                AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-19 23:59:59', 'UTC')
              GROUP BY timestamp, actor_id) e
           WHERE e.timestamp <= d.timestamp + INTERVAL 1 DAY
             AND e.timestamp > d.timestamp - INTERVAL 6 DAY
           GROUP BY d.timestamp
           ORDER BY d.timestamp)
        WHERE 1 = 1
          AND toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfDay(toDateTime('2020-01-08 00:00:00', 'UTC')), 'UTC')
          AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-19 23:59:59', 'UTC') )
     GROUP BY day_start
     ORDER BY day_start)
  '
---
# name: TestTrends.test_weekly_active_users_daily_minus_utc
  '
  
  SELECT groupArray(day_start) as date,
         groupArray(count) AS total
  FROM
    (SELECT SUM(total) AS count,
            day_start
     FROM
       (SELECT toUInt16(0) AS total,
               toStartOfDay(toDateTime('2020-01-19 23:59:59', 'America/Phoenix')) - toIntervalDay(number) AS day_start
        FROM numbers(dateDiff('day', toStartOfDay(toDateTime('2020-01-08 00:00:00', 'America/Phoenix')), toDateTime('2020-01-19 23:59:59', 'America/Phoenix')))
        UNION ALL SELECT toUInt16(0) AS total,
                         toStartOfDay(toDateTime('2020-01-08 00:00:00', 'America/Phoenix'))
        UNION ALL SELECT counts AS total,
                         timestamp AS day_start
        FROM
          (SELECT d.timestamp,
                  COUNT(DISTINCT actor_id) AS counts
           FROM
             (SELECT toDateTime(toStartOfDay(toDateTime('2020-01-19 23:59:59', 'America/Phoenix')) - toIntervalDay(number)) AS timestamp
              FROM numbers(dateDiff('day', toStartOfDay(toDateTime('2020-01-01 00:00:00', 'America/Phoenix')), toDateTime('2020-01-19 23:59:59', 'America/Phoenix')))) d
           CROSS JOIN
             (SELECT toTimeZone(toDateTime(timestamp, 'UTC'), 'America/Phoenix') AS timestamp,
                     pdi.person_id AS actor_id
              FROM events e
              INNER JOIN
                (SELECT distinct_id,
                        argMax(person_id, version) as person_id
                 FROM person_distinct_id2
                 WHERE team_id = 2
                 GROUP BY distinct_id
                 HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
              WHERE team_id = 2
                AND event = '$pageview'
                AND toDateTime(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'America/Phoenix')
                AND toTimeZone(timestamp, 'America/Phoenix') <= toDateTime('2020-01-19 23:59:59', 'America/Phoenix')
              GROUP BY timestamp, actor_id) e
           WHERE e.timestamp <= d.timestamp + INTERVAL 1 DAY
             AND e.timestamp > d.timestamp - INTERVAL 6 DAY
           GROUP BY d.timestamp
           ORDER BY d.timestamp)
        WHERE 1 = 1
          AND toTimeZone(timestamp, 'America/Phoenix') >= toDateTime(toStartOfDay(toDateTime('2020-01-08 00:00:00', 'America/Phoenix')), 'America/Phoenix')
          AND toTimeZone(timestamp, 'America/Phoenix') <= toDateTime('2020-01-19 23:59:59', 'America/Phoenix') )
     GROUP BY day_start
     ORDER BY day_start)
  '
---
# name: TestTrends.test_weekly_active_users_daily_plus_utc
  '
  
  SELECT groupArray(day_start) as date,
         groupArray(count) AS total
  FROM
    (SELECT SUM(total) AS count,
            day_start
     FROM
       (SELECT toUInt16(0) AS total,
               toStartOfDay(toDateTime('2020-01-19 23:59:59', 'Asia/Tokyo')) - toIntervalDay(number) AS day_start
        FROM numbers(dateDiff('day', toStartOfDay(toDateTime('2020-01-08 00:00:00', 'Asia/Tokyo')), toDateTime('2020-01-19 23:59:59', 'Asia/Tokyo')))
        UNION ALL SELECT toUInt16(0) AS total,
                         toStartOfDay(toDateTime('2020-01-08 00:00:00', 'Asia/Tokyo'))
        UNION ALL SELECT counts AS total,
                         timestamp AS day_start
        FROM
          (SELECT d.timestamp,
                  COUNT(DISTINCT actor_id) AS counts
           FROM
             (SELECT toDateTime(toStartOfDay(toDateTime('2020-01-19 23:59:59', 'Asia/Tokyo')) - toIntervalDay(number)) AS timestamp
              FROM numbers(dateDiff('day', toStartOfDay(toDateTime('2020-01-01 00:00:00', 'Asia/Tokyo')), toDateTime('2020-01-19 23:59:59', 'Asia/Tokyo')))) d
           CROSS JOIN
             (SELECT toTimeZone(toDateTime(timestamp, 'UTC'), 'Asia/Tokyo') AS timestamp,
                     pdi.person_id AS actor_id
              FROM events e
              INNER JOIN
                (SELECT distinct_id,
                        argMax(person_id, version) as person_id
                 FROM person_distinct_id2
                 WHERE team_id = 2
                 GROUP BY distinct_id
                 HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
              WHERE team_id = 2
                AND event = '$pageview'
                AND toDateTime(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'Asia/Tokyo')
                AND toTimeZone(timestamp, 'Asia/Tokyo') <= toDateTime('2020-01-19 23:59:59', 'Asia/Tokyo')
              GROUP BY timestamp, actor_id) e
           WHERE e.timestamp <= d.timestamp + INTERVAL 1 DAY
             AND e.timestamp > d.timestamp - INTERVAL 6 DAY
           GROUP BY d.timestamp
           ORDER BY d.timestamp)
        WHERE 1 = 1
          AND toTimeZone(timestamp, 'Asia/Tokyo') >= toDateTime(toStartOfDay(toDateTime('2020-01-08 00:00:00', 'Asia/Tokyo')), 'Asia/Tokyo')
          AND toTimeZone(timestamp, 'Asia/Tokyo') <= toDateTime('2020-01-19 23:59:59', 'Asia/Tokyo') )
     GROUP BY day_start
     ORDER BY day_start)
  '
---
# name: TestTrends.test_weekly_active_users_filtering
  '
  
  SELECT groupArray(day_start) as date,
         groupArray(count) AS total
  FROM
    (SELECT SUM(total) AS count,
            day_start
     FROM
       (SELECT toUInt16(0) AS total,
               toStartOfDay(toDateTime('2020-01-12 23:59:59', 'UTC')) - toIntervalDay(number) AS day_start
        FROM numbers(dateDiff('day', toStartOfDay(toDateTime('2020-01-01 00:00:00', 'UTC')), toDateTime('2020-01-12 23:59:59', 'UTC')))
        UNION ALL SELECT toUInt16(0) AS total,
                         toStartOfDay(toDateTime('2020-01-01 00:00:00', 'UTC'))
        UNION ALL SELECT counts AS total,
                         timestamp AS day_start
        FROM
          (SELECT d.timestamp,
                  COUNT(DISTINCT actor_id) AS counts
           FROM
             (SELECT toDateTime(toStartOfDay(toDateTime('2020-01-12 23:59:59', 'UTC')) - toIntervalDay(number)) AS timestamp
              FROM numbers(dateDiff('day', toStartOfDay(toDateTime('2019-12-25 00:00:00', 'UTC')), toDateTime('2020-01-12 23:59:59', 'UTC')))) d
           CROSS JOIN
             (SELECT toTimeZone(toDateTime(timestamp, 'UTC'), 'UTC') AS timestamp,
                     pdi.person_id AS actor_id
              FROM events e
              INNER JOIN
                (SELECT distinct_id,
                        argMax(person_id, version) as person_id
                 FROM person_distinct_id2
                 WHERE team_id = 2
                 GROUP BY distinct_id
                 HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
              INNER JOIN
                (SELECT id
                 FROM person
                 WHERE team_id = 2
                   AND id IN
                     (SELECT id
                      FROM person
                      WHERE team_id = 2
                        AND (has(['person-1', 'person-2'], replaceRegexpAll(JSONExtractRaw(properties, 'name'), '^"|"$', ''))) )
                 GROUP BY id
                 HAVING max(is_deleted) = 0
                 AND (has(['person-1', 'person-2'], replaceRegexpAll(JSONExtractRaw(argMax(person.properties, version), 'name'), '^"|"$', ''))) SETTINGS optimize_aggregation_in_order = 1) person ON person.id = pdi.person_id
              WHERE team_id = 2
                AND event = '$pageview'
                AND toDateTime(timestamp, 'UTC') >= toDateTime('2019-12-25 00:00:00', 'UTC')
                AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-12 23:59:59', 'UTC')
              GROUP BY timestamp, actor_id) e
           WHERE e.timestamp <= d.timestamp + INTERVAL 1 DAY
             AND e.timestamp > d.timestamp - INTERVAL 6 DAY
           GROUP BY d.timestamp
           ORDER BY d.timestamp)
        WHERE 1 = 1
          AND toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfDay(toDateTime('2020-01-01 00:00:00', 'UTC')), 'UTC')
          AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-12 23:59:59', 'UTC') )
     GROUP BY day_start
     ORDER BY day_start)
  '
---
# name: TestTrends.test_weekly_active_users_filtering_materialized
  '
  
  SELECT groupArray(day_start) as date,
         groupArray(count) AS total
  FROM
    (SELECT SUM(total) AS count,
            day_start
     FROM
       (SELECT toUInt16(0) AS total,
               toStartOfDay(toDateTime('2020-01-12 23:59:59', 'UTC')) - toIntervalDay(number) AS day_start
        FROM numbers(dateDiff('day', toStartOfDay(toDateTime('2020-01-01 00:00:00', 'UTC')), toDateTime('2020-01-12 23:59:59', 'UTC')))
        UNION ALL SELECT toUInt16(0) AS total,
                         toStartOfDay(toDateTime('2020-01-01 00:00:00', 'UTC'))
        UNION ALL SELECT counts AS total,
                         timestamp AS day_start
        FROM
          (SELECT d.timestamp,
                  COUNT(DISTINCT actor_id) AS counts
           FROM
             (SELECT toDateTime(toStartOfDay(toDateTime('2020-01-12 23:59:59', 'UTC')) - toIntervalDay(number)) AS timestamp
              FROM numbers(dateDiff('day', toStartOfDay(toDateTime('2019-12-25 00:00:00', 'UTC')), toDateTime('2020-01-12 23:59:59', 'UTC')))) d
           CROSS JOIN
             (SELECT toTimeZone(toDateTime(timestamp, 'UTC'), 'UTC') AS timestamp,
                     pdi.person_id AS actor_id
              FROM events e
              INNER JOIN
                (SELECT distinct_id,
                        argMax(person_id, version) as person_id
                 FROM person_distinct_id2
                 WHERE team_id = 2
                 GROUP BY distinct_id
                 HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
              INNER JOIN
                (SELECT id
                 FROM person
                 WHERE team_id = 2
                   AND id IN
                     (SELECT id
                      FROM person
                      WHERE team_id = 2
                        AND (has(['person-1', 'person-2'], "pmat_name")) )
                 GROUP BY id
                 HAVING max(is_deleted) = 0
                 AND (has(['person-1', 'person-2'], argMax(person."pmat_name", version))) SETTINGS optimize_aggregation_in_order = 1) person ON person.id = pdi.person_id
              WHERE team_id = 2
                AND event = '$pageview'
                AND toDateTime(timestamp, 'UTC') >= toDateTime('2019-12-25 00:00:00', 'UTC')
                AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-12 23:59:59', 'UTC')
              GROUP BY timestamp, actor_id) e
           WHERE e.timestamp <= d.timestamp + INTERVAL 1 DAY
             AND e.timestamp > d.timestamp - INTERVAL 6 DAY
           GROUP BY d.timestamp
           ORDER BY d.timestamp)
        WHERE 1 = 1
          AND toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfDay(toDateTime('2020-01-01 00:00:00', 'UTC')), 'UTC')
          AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-12 23:59:59', 'UTC') )
     GROUP BY day_start
     ORDER BY day_start)
  '
---
# name: TestTrends.test_weekly_active_users_hourly
  '
  
  SELECT groupArray(day_start) as date,
         groupArray(count) AS total
  FROM
    (SELECT SUM(total) AS count,
            day_start
     FROM
       (SELECT toUInt16(0) AS total,
               toStartOfHour(toDateTime('2020-01-09 17:00:00', 'UTC')) - toIntervalHour(number) AS day_start
        FROM numbers(dateDiff('hour', toStartOfHour(toDateTime('2020-01-09 06:00:00', 'UTC')), toDateTime('2020-01-09 17:00:00', 'UTC')))
        UNION ALL SELECT toUInt16(0) AS total,
                         toStartOfHour(toDateTime('2020-01-09 06:00:00', 'UTC'))
        UNION ALL SELECT counts AS total,
                         timestamp AS day_start
        FROM
          (SELECT d.timestamp,
                  COUNT(DISTINCT actor_id) AS counts
           FROM
             (SELECT toDateTime(toStartOfHour(toDateTime('2020-01-09 17:00:00', 'UTC')) - toIntervalHour(number)) AS timestamp
              FROM numbers(dateDiff('hour', toStartOfHour(toDateTime('2020-01-02 06:00:00', 'UTC')), toDateTime('2020-01-09 17:00:00', 'UTC')))) d
           CROSS JOIN
             (SELECT toTimeZone(toDateTime(timestamp, 'UTC'), 'UTC') AS timestamp,
                     pdi.person_id AS actor_id
              FROM events e
              INNER JOIN
                (SELECT distinct_id,
                        argMax(person_id, version) as person_id
                 FROM person_distinct_id2
                 WHERE team_id = 2
                 GROUP BY distinct_id
                 HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
              WHERE team_id = 2
                AND event = '$pageview'
                AND toDateTime(timestamp, 'UTC') >= toDateTime('2020-01-02 06:00:00', 'UTC')
                AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-09 17:00:00', 'UTC')
              GROUP BY timestamp, actor_id) e
           WHERE e.timestamp <= d.timestamp + INTERVAL 1 DAY
             AND e.timestamp > d.timestamp - INTERVAL 6 DAY
           GROUP BY d.timestamp
           ORDER BY d.timestamp)
        WHERE 1 = 1
          AND toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfHour(toDateTime('2020-01-09 06:00:00', 'UTC')), 'UTC')
          AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-09 17:00:00', 'UTC') )
     GROUP BY day_start
     ORDER BY day_start)
  '
---
# name: TestTrends.test_weekly_active_users_monthly
  '
  
  SELECT groupArray(day_start) as date,
         groupArray(count) AS total
  FROM
    (SELECT SUM(total) AS count,
            day_start
     FROM
       (SELECT toUInt16(0) AS total,
               toStartOfMonth(toDateTime('2020-02-29 23:59:59', 'UTC')) - toIntervalMonth(number) AS day_start
        FROM numbers(dateDiff('month', toStartOfMonth(toDateTime('2019-12-01 00:00:00', 'UTC')), toDateTime('2020-02-29 23:59:59', 'UTC')))
        UNION ALL SELECT toUInt16(0) AS total,
                         toStartOfMonth(toDateTime('2019-12-01 00:00:00', 'UTC'))
        UNION ALL SELECT counts AS total,
                         timestamp AS day_start
        FROM
          (SELECT d.timestamp,
                  COUNT(DISTINCT actor_id) AS counts
           FROM
             (SELECT toDateTime(toStartOfMonth(toDateTime('2020-02-29 23:59:59', 'UTC')) - toIntervalMonth(number)) AS timestamp
              FROM numbers(dateDiff('month', toStartOfMonth(toDateTime('2019-11-24 00:00:00', 'UTC')), toDateTime('2020-02-29 23:59:59', 'UTC')))) d
           CROSS JOIN
             (SELECT toTimeZone(toDateTime(timestamp, 'UTC'), 'UTC') AS timestamp,
                     pdi.person_id AS actor_id
              FROM events e
              INNER JOIN
                (SELECT distinct_id,
                        argMax(person_id, version) as person_id
                 FROM person_distinct_id2
                 WHERE team_id = 2
                 GROUP BY distinct_id
                 HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
              WHERE team_id = 2
                AND event = '$pageview'
                AND toDateTime(timestamp, 'UTC') >= toDateTime('2019-11-24 00:00:00', 'UTC')
                AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-02-29 23:59:59', 'UTC')
              GROUP BY timestamp, actor_id) e
           WHERE e.timestamp <= d.timestamp + INTERVAL 1 DAY
             AND e.timestamp > d.timestamp - INTERVAL 6 DAY
           GROUP BY d.timestamp
           ORDER BY d.timestamp)
        WHERE 1 = 1
          AND toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfMonth(toDateTime('2019-12-01 00:00:00', 'UTC')), 'UTC')
          AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-02-29 23:59:59', 'UTC') )
     GROUP BY day_start
     ORDER BY day_start)
  '
---
# name: TestTrends.test_weekly_active_users_monthly_minus_utc
  '
  
  SELECT groupArray(day_start) as date,
         groupArray(count) AS total
  FROM
    (SELECT SUM(total) AS count,
            day_start
     FROM
       (SELECT toUInt16(0) AS total,
               toStartOfMonth(toDateTime('2020-02-29 23:59:59', 'America/Phoenix')) - toIntervalMonth(number) AS day_start
        FROM numbers(dateDiff('month', toStartOfMonth(toDateTime('2019-12-01 00:00:00', 'America/Phoenix')), toDateTime('2020-02-29 23:59:59', 'America/Phoenix')))
        UNION ALL SELECT toUInt16(0) AS total,
                         toStartOfMonth(toDateTime('2019-12-01 00:00:00', 'America/Phoenix'))
        UNION ALL SELECT counts AS total,
                         timestamp AS day_start
        FROM
          (SELECT d.timestamp,
                  COUNT(DISTINCT actor_id) AS counts
           FROM
             (SELECT toDateTime(toStartOfMonth(toDateTime('2020-02-29 23:59:59', 'America/Phoenix')) - toIntervalMonth(number)) AS timestamp
              FROM numbers(dateDiff('month', toStartOfMonth(toDateTime('2019-11-24 00:00:00', 'America/Phoenix')), toDateTime('2020-02-29 23:59:59', 'America/Phoenix')))) d
           CROSS JOIN
             (SELECT toTimeZone(toDateTime(timestamp, 'UTC'), 'America/Phoenix') AS timestamp,
                     pdi.person_id AS actor_id
              FROM events e
              INNER JOIN
                (SELECT distinct_id,
                        argMax(person_id, version) as person_id
                 FROM person_distinct_id2
                 WHERE team_id = 2
                 GROUP BY distinct_id
                 HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
              WHERE team_id = 2
                AND event = '$pageview'
                AND toDateTime(timestamp, 'UTC') >= toDateTime('2019-11-24 00:00:00', 'America/Phoenix')
                AND toTimeZone(timestamp, 'America/Phoenix') <= toDateTime('2020-02-29 23:59:59', 'America/Phoenix')
              GROUP BY timestamp, actor_id) e
           WHERE e.timestamp <= d.timestamp + INTERVAL 1 DAY
             AND e.timestamp > d.timestamp - INTERVAL 6 DAY
           GROUP BY d.timestamp
           ORDER BY d.timestamp)
        WHERE 1 = 1
          AND toTimeZone(timestamp, 'America/Phoenix') >= toDateTime(toStartOfMonth(toDateTime('2019-12-01 00:00:00', 'America/Phoenix')), 'America/Phoenix')
          AND toTimeZone(timestamp, 'America/Phoenix') <= toDateTime('2020-02-29 23:59:59', 'America/Phoenix') )
     GROUP BY day_start
     ORDER BY day_start)
  '
---
# name: TestTrends.test_weekly_active_users_monthly_plus_utc
  '
  
  SELECT groupArray(day_start) as date,
         groupArray(count) AS total
  FROM
    (SELECT SUM(total) AS count,
            day_start
     FROM
       (SELECT toUInt16(0) AS total,
               toStartOfMonth(toDateTime('2020-02-29 23:59:59', 'Asia/Tokyo')) - toIntervalMonth(number) AS day_start
        FROM numbers(dateDiff('month', toStartOfMonth(toDateTime('2019-12-01 00:00:00', 'Asia/Tokyo')), toDateTime('2020-02-29 23:59:59', 'Asia/Tokyo')))
        UNION ALL SELECT toUInt16(0) AS total,
                         toStartOfMonth(toDateTime('2019-12-01 00:00:00', 'Asia/Tokyo'))
        UNION ALL SELECT counts AS total,
                         timestamp AS day_start
        FROM
          (SELECT d.timestamp,
                  COUNT(DISTINCT actor_id) AS counts
           FROM
             (SELECT toDateTime(toStartOfMonth(toDateTime('2020-02-29 23:59:59', 'Asia/Tokyo')) - toIntervalMonth(number)) AS timestamp
              FROM numbers(dateDiff('month', toStartOfMonth(toDateTime('2019-11-24 00:00:00', 'Asia/Tokyo')), toDateTime('2020-02-29 23:59:59', 'Asia/Tokyo')))) d
           CROSS JOIN
             (SELECT toTimeZone(toDateTime(timestamp, 'UTC'), 'Asia/Tokyo') AS timestamp,
                     pdi.person_id AS actor_id
              FROM events e
              INNER JOIN
                (SELECT distinct_id,
                        argMax(person_id, version) as person_id
                 FROM person_distinct_id2
                 WHERE team_id = 2
                 GROUP BY distinct_id
                 HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
              WHERE team_id = 2
                AND event = '$pageview'
                AND toDateTime(timestamp, 'UTC') >= toDateTime('2019-11-24 00:00:00', 'Asia/Tokyo')
                AND toTimeZone(timestamp, 'Asia/Tokyo') <= toDateTime('2020-02-29 23:59:59', 'Asia/Tokyo')
              GROUP BY timestamp, actor_id) e
           WHERE e.timestamp <= d.timestamp + INTERVAL 1 DAY
             AND e.timestamp > d.timestamp - INTERVAL 6 DAY
           GROUP BY d.timestamp
           ORDER BY d.timestamp)
        WHERE 1 = 1
          AND toTimeZone(timestamp, 'Asia/Tokyo') >= toDateTime(toStartOfMonth(toDateTime('2019-12-01 00:00:00', 'Asia/Tokyo')), 'Asia/Tokyo')
          AND toTimeZone(timestamp, 'Asia/Tokyo') <= toDateTime('2020-02-29 23:59:59', 'Asia/Tokyo') )
     GROUP BY day_start
     ORDER BY day_start)
  '
---
# name: TestTrends.test_weekly_active_users_weekly
  '
  
  SELECT groupArray(day_start) as date,
         groupArray(count) AS total
  FROM
    (SELECT SUM(total) AS count,
            day_start
     FROM
       (SELECT toUInt16(0) AS total,
               toStartOfWeek(toDateTime('2020-01-18 23:59:59', 'UTC'), 0) - toIntervalWeek(number) AS day_start
        FROM numbers(dateDiff('week', toStartOfWeek(toDateTime('2019-12-29 00:00:00', 'UTC'), 0), toDateTime('2020-01-18 23:59:59', 'UTC')))
        UNION ALL SELECT toUInt16(0) AS total,
                         toStartOfWeek(toDateTime('2019-12-29 00:00:00', 'UTC'), 0)
        UNION ALL SELECT counts AS total,
                         timestamp AS day_start
        FROM
          (SELECT d.timestamp,
                  COUNT(DISTINCT actor_id) AS counts
           FROM
             (SELECT toDateTime(toStartOfWeek(toDateTime('2020-01-18 23:59:59', 'UTC'), 0) - toIntervalWeek(number)) AS timestamp
              FROM numbers(dateDiff('week', toStartOfWeek(toDateTime('2019-12-22 00:00:00', 'UTC'), 0), toDateTime('2020-01-18 23:59:59', 'UTC')))) d
           CROSS JOIN
             (SELECT toTimeZone(toDateTime(timestamp, 'UTC'), 'UTC') AS timestamp,
                     pdi.person_id AS actor_id
              FROM events e
              INNER JOIN
                (SELECT distinct_id,
                        argMax(person_id, version) as person_id
                 FROM person_distinct_id2
                 WHERE team_id = 2
                 GROUP BY distinct_id
                 HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
              WHERE team_id = 2
                AND event = '$pageview'
                AND toDateTime(timestamp, 'UTC') >= toDateTime('2019-12-22 00:00:00', 'UTC')
                AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-18 23:59:59', 'UTC')
              GROUP BY timestamp, actor_id) e
           WHERE e.timestamp <= d.timestamp + INTERVAL 1 DAY
             AND e.timestamp > d.timestamp - INTERVAL 6 DAY
           GROUP BY d.timestamp
           ORDER BY d.timestamp)
        WHERE 1 = 1
          AND toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfWeek(toDateTime('2019-12-29 00:00:00', 'UTC'), 0), 'UTC')
          AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-18 23:59:59', 'UTC') )
     GROUP BY day_start
     ORDER BY day_start)
  '
---
# name: TestTrends.test_weekly_active_users_weekly_minus_utc
  '
  
  SELECT groupArray(day_start) as date,
         groupArray(count) AS total
  FROM
    (SELECT SUM(total) AS count,
            day_start
     FROM
       (SELECT toUInt16(0) AS total,
               toStartOfWeek(toDateTime('2020-01-18 23:59:59', 'America/Phoenix'), 0) - toIntervalWeek(number) AS day_start
        FROM numbers(dateDiff('week', toStartOfWeek(toDateTime('2019-12-29 00:00:00', 'America/Phoenix'), 0), toDateTime('2020-01-18 23:59:59', 'America/Phoenix')))
        UNION ALL SELECT toUInt16(0) AS total,
                         toStartOfWeek(toDateTime('2019-12-29 00:00:00', 'America/Phoenix'), 0)
        UNION ALL SELECT counts AS total,
                         timestamp AS day_start
        FROM
          (SELECT d.timestamp,
                  COUNT(DISTINCT actor_id) AS counts
           FROM
             (SELECT toDateTime(toStartOfWeek(toDateTime('2020-01-18 23:59:59', 'America/Phoenix'), 0) - toIntervalWeek(number)) AS timestamp
              FROM numbers(dateDiff('week', toStartOfWeek(toDateTime('2019-12-22 00:00:00', 'America/Phoenix'), 0), toDateTime('2020-01-18 23:59:59', 'America/Phoenix')))) d
           CROSS JOIN
             (SELECT toTimeZone(toDateTime(timestamp, 'UTC'), 'America/Phoenix') AS timestamp,
                     pdi.person_id AS actor_id
              FROM events e
              INNER JOIN
                (SELECT distinct_id,
                        argMax(person_id, version) as person_id
                 FROM person_distinct_id2
                 WHERE team_id = 2
                 GROUP BY distinct_id
                 HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
              WHERE team_id = 2
                AND event = '$pageview'
                AND toDateTime(timestamp, 'UTC') >= toDateTime('2019-12-22 00:00:00', 'America/Phoenix')
                AND toTimeZone(timestamp, 'America/Phoenix') <= toDateTime('2020-01-18 23:59:59', 'America/Phoenix')
              GROUP BY timestamp, actor_id) e
           WHERE e.timestamp <= d.timestamp + INTERVAL 1 DAY
             AND e.timestamp > d.timestamp - INTERVAL 6 DAY
           GROUP BY d.timestamp
           ORDER BY d.timestamp)
        WHERE 1 = 1
          AND toTimeZone(timestamp, 'America/Phoenix') >= toDateTime(toStartOfWeek(toDateTime('2019-12-29 00:00:00', 'America/Phoenix'), 0), 'America/Phoenix')
          AND toTimeZone(timestamp, 'America/Phoenix') <= toDateTime('2020-01-18 23:59:59', 'America/Phoenix') )
     GROUP BY day_start
     ORDER BY day_start)
  '
---
# name: TestTrends.test_weekly_active_users_weekly_plus_utc
  '
  
  SELECT groupArray(day_start) as date,
         groupArray(count) AS total
  FROM
    (SELECT SUM(total) AS count,
            day_start
     FROM
       (SELECT toUInt16(0) AS total,
               toStartOfWeek(toDateTime('2020-01-18 23:59:59', 'Asia/Tokyo'), 0) - toIntervalWeek(number) AS day_start
        FROM numbers(dateDiff('week', toStartOfWeek(toDateTime('2019-12-29 00:00:00', 'Asia/Tokyo'), 0), toDateTime('2020-01-18 23:59:59', 'Asia/Tokyo')))
        UNION ALL SELECT toUInt16(0) AS total,
                         toStartOfWeek(toDateTime('2019-12-29 00:00:00', 'Asia/Tokyo'), 0)
        UNION ALL SELECT counts AS total,
                         timestamp AS day_start
        FROM
          (SELECT d.timestamp,
                  COUNT(DISTINCT actor_id) AS counts
           FROM
             (SELECT toDateTime(toStartOfWeek(toDateTime('2020-01-18 23:59:59', 'Asia/Tokyo'), 0) - toIntervalWeek(number)) AS timestamp
              FROM numbers(dateDiff('week', toStartOfWeek(toDateTime('2019-12-22 00:00:00', 'Asia/Tokyo'), 0), toDateTime('2020-01-18 23:59:59', 'Asia/Tokyo')))) d
           CROSS JOIN
             (SELECT toTimeZone(toDateTime(timestamp, 'UTC'), 'Asia/Tokyo') AS timestamp,
                     pdi.person_id AS actor_id
              FROM events e
              INNER JOIN
                (SELECT distinct_id,
                        argMax(person_id, version) as person_id
                 FROM person_distinct_id2
                 WHERE team_id = 2
                 GROUP BY distinct_id
                 HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
              WHERE team_id = 2
                AND event = '$pageview'
                AND toDateTime(timestamp, 'UTC') >= toDateTime('2019-12-22 00:00:00', 'Asia/Tokyo')
                AND toTimeZone(timestamp, 'Asia/Tokyo') <= toDateTime('2020-01-18 23:59:59', 'Asia/Tokyo')
              GROUP BY timestamp, actor_id) e
           WHERE e.timestamp <= d.timestamp + INTERVAL 1 DAY
             AND e.timestamp > d.timestamp - INTERVAL 6 DAY
           GROUP BY d.timestamp
           ORDER BY d.timestamp)
        WHERE 1 = 1
          AND toTimeZone(timestamp, 'Asia/Tokyo') >= toDateTime(toStartOfWeek(toDateTime('2019-12-29 00:00:00', 'Asia/Tokyo'), 0), 'Asia/Tokyo')
          AND toTimeZone(timestamp, 'Asia/Tokyo') <= toDateTime('2020-01-18 23:59:59', 'Asia/Tokyo') )
     GROUP BY day_start
     ORDER BY day_start)
  '
---
