# name: TestFormula.test_aggregated_one_without_events
  '
  SELECT '' as date,
         arrayMap((A, B) -> B + A, [ifNull(sub_A.total, 0)], [ifNull(sub_B.total, 0)])
  FROM
    (SELECT sum(toFloat64OrNull(replaceRegexpAll(JSONExtractRaw(properties, 'session duration'), '^"|"$', ''))) AS total
     FROM events e
     WHERE team_id = 2
       AND event = 'session start'
       AND toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfDay(toDateTime('2019-12-28 00:00:00', 'UTC')), 'UTC')
       AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-04 23:59:59', 'UTC') ) as sub_A
  CROSS JOIN
    (SELECT sum(toFloat64OrNull(replaceRegexpAll(JSONExtractRaw(properties, 'session not here'), '^"|"$', ''))) AS total
     FROM events e
     WHERE team_id = 2
       AND event = 'session error'
       AND toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfDay(toDateTime('2019-12-28 00:00:00', 'UTC')), 'UTC')
       AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-04 23:59:59', 'UTC') ) as sub_B
  '
---
# name: TestFormula.test_breakdown
  '
  
  SELECT groupArray(value)
  FROM
    (SELECT replaceRegexpAll(JSONExtractRaw(properties, 'location'), '^"|"$', '') AS value,
            sum(toFloat64OrNull(replaceRegexpAll(JSONExtractRaw(properties, 'session duration'), '^"|"$', ''))) as count
     FROM events e
     WHERE team_id = 2
       AND event = 'session start'
       AND toTimeZone(timestamp, 'UTC') >= toDateTime('2019-12-28 00:00:00', 'UTC')
       AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-04 23:59:59', 'UTC')
     GROUP BY value
     ORDER BY count DESC, value DESC
     LIMIT 25
     OFFSET 0)
  '
---
# name: TestFormula.test_breakdown.1
  '
  
  SELECT groupArray(value)
  FROM
    (SELECT replaceRegexpAll(JSONExtractRaw(properties, 'location'), '^"|"$', '') AS value,
            avg(toFloat64OrNull(replaceRegexpAll(JSONExtractRaw(properties, 'session duration'), '^"|"$', ''))) as count
     FROM events e
     WHERE team_id = 2
       AND event = 'session start'
       AND toTimeZone(timestamp, 'UTC') >= toDateTime('2019-12-28 00:00:00', 'UTC')
       AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-04 23:59:59', 'UTC')
     GROUP BY value
     ORDER BY count DESC, value DESC
     LIMIT 25
     OFFSET 0)
  '
---
# name: TestFormula.test_breakdown.2
  '
  SELECT sub_A.date,
         arrayMap((A, B) -> A - B, arrayResize(sub_A.total, max_length, 0), arrayResize(sub_B.total, max_length, 0)) ,
         arrayFilter(x -> notEmpty(x), [replaceRegexpAll(sub_A.breakdown_value, '^"|"$', ''), replaceRegexpAll(sub_B.breakdown_value, '^"|"$', '')])[1] ,
         arrayMax([length(sub_A.total), length(sub_B.total)]) as max_length
  FROM
    (SELECT groupArray(day_start) as date,
            groupArray(count) AS total,
            breakdown_value
     FROM
       (SELECT SUM(total) as count,
               day_start,
               breakdown_value
        FROM
          (SELECT *
           FROM
             (SELECT toUInt16(0) AS total,
                     ticks.day_start as day_start,
                     breakdown_value
              FROM
                (SELECT toStartOfDay(toDateTime('2020-01-04 23:59:59', 'UTC')) - toIntervalDay(number) as day_start
                 FROM numbers(8)
                 UNION ALL SELECT toStartOfDay(toDateTime('2019-12-28 00:00:00', 'UTC')) as day_start) as ticks
              CROSS JOIN
                (SELECT breakdown_value
                 FROM
                   (SELECT ['London', 'Paris'] as breakdown_value) ARRAY
                 JOIN breakdown_value) as sec
              ORDER BY breakdown_value,
                       day_start
              UNION ALL SELECT sum(toFloat64OrNull(replaceRegexpAll(JSONExtractRaw(properties, 'session duration'), '^"|"$', ''))) as total,
                               toStartOfDay(toTimeZone(toDateTime(timestamp, 'UTC'), 'UTC')) as day_start,
                               replaceRegexpAll(JSONExtractRaw(properties, 'location'), '^"|"$', '') as breakdown_value
              FROM events e
              WHERE e.team_id = 2
                AND event = 'session start'
                AND toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfDay(toDateTime('2019-12-28 00:00:00', 'UTC')), 'UTC')
                AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-04 23:59:59', 'UTC')
                AND replaceRegexpAll(JSONExtractRaw(properties, 'location'), '^"|"$', '') in (['London', 'Paris'])
              GROUP BY day_start,
                       breakdown_value))
        GROUP BY day_start,
                 breakdown_value
        ORDER BY breakdown_value,
                 day_start)
     GROUP BY breakdown_value
     ORDER BY breakdown_value) as sub_A
  FULL OUTER JOIN
    (SELECT groupArray(day_start) as date,
            groupArray(count) AS total,
            breakdown_value
     FROM
       (SELECT SUM(total) as count,
               day_start,
               breakdown_value
        FROM
          (SELECT *
           FROM
             (SELECT toUInt16(0) AS total,
                     ticks.day_start as day_start,
                     breakdown_value
              FROM
                (SELECT toStartOfDay(toDateTime('2020-01-04 23:59:59', 'UTC')) - toIntervalDay(number) as day_start
                 FROM numbers(8)
                 UNION ALL SELECT toStartOfDay(toDateTime('2019-12-28 00:00:00', 'UTC')) as day_start) as ticks
              CROSS JOIN
                (SELECT breakdown_value
                 FROM
                   (SELECT ['London', 'Paris'] as breakdown_value) ARRAY
                 JOIN breakdown_value) as sec
              ORDER BY breakdown_value,
                       day_start
              UNION ALL SELECT avg(toFloat64OrNull(replaceRegexpAll(JSONExtractRaw(properties, 'session duration'), '^"|"$', ''))) as total,
                               toStartOfDay(toTimeZone(toDateTime(timestamp, 'UTC'), 'UTC')) as day_start,
                               replaceRegexpAll(JSONExtractRaw(properties, 'location'), '^"|"$', '') as breakdown_value
              FROM events e
              WHERE e.team_id = 2
                AND event = 'session start'
                AND toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfDay(toDateTime('2019-12-28 00:00:00', 'UTC')), 'UTC')
                AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-04 23:59:59', 'UTC')
                AND replaceRegexpAll(JSONExtractRaw(properties, 'location'), '^"|"$', '') in (['London', 'Paris'])
              GROUP BY day_start,
                       breakdown_value))
        GROUP BY day_start,
                 breakdown_value
        ORDER BY breakdown_value,
                 day_start)
     GROUP BY breakdown_value
     ORDER BY breakdown_value) as sub_B ON sub_A.breakdown_value = sub_B.breakdown_value
  '
---
# name: TestFormula.test_breakdown_aggregated
  '
  
  SELECT groupArray(value)
  FROM
    (SELECT replaceRegexpAll(JSONExtractRaw(properties, 'location'), '^"|"$', '') AS value,
            sum(toFloat64OrNull(replaceRegexpAll(JSONExtractRaw(properties, 'session duration'), '^"|"$', ''))) as count
     FROM events e
     WHERE team_id = 2
       AND event = 'session start'
       AND toTimeZone(timestamp, 'UTC') >= toDateTime('2019-12-28 00:00:00', 'UTC')
       AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-04 23:59:59', 'UTC')
     GROUP BY value
     ORDER BY count DESC, value DESC
     LIMIT 25
     OFFSET 0)
  '
---
# name: TestFormula.test_breakdown_aggregated.1
  '
  
  SELECT groupArray(value)
  FROM
    (SELECT replaceRegexpAll(JSONExtractRaw(properties, 'location'), '^"|"$', '') AS value,
            avg(toFloat64OrNull(replaceRegexpAll(JSONExtractRaw(properties, 'session duration'), '^"|"$', ''))) as count
     FROM events e
     WHERE team_id = 2
       AND event = 'session start'
       AND toTimeZone(timestamp, 'UTC') >= toDateTime('2019-12-28 00:00:00', 'UTC')
       AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-04 23:59:59', 'UTC')
     GROUP BY value
     ORDER BY count DESC, value DESC
     LIMIT 25
     OFFSET 0)
  '
---
# name: TestFormula.test_breakdown_aggregated.2
  '
  SELECT '' as date,
         arrayMap((A, B) -> A - B, [ifNull(sub_A.total, 0)], [ifNull(sub_B.total, 0)]) ,
         arrayFilter(x -> notEmpty(x), [replaceRegexpAll(sub_A.breakdown_value, '^"|"$', ''), replaceRegexpAll(sub_B.breakdown_value, '^"|"$', '')])[1]
  FROM
    (SELECT sum(toFloat64OrNull(replaceRegexpAll(JSONExtractRaw(properties, 'session duration'), '^"|"$', ''))) AS total,
            replaceRegexpAll(JSONExtractRaw(properties, 'location'), '^"|"$', '') AS breakdown_value
     FROM events e
     WHERE e.team_id = 2
       AND event = 'session start'
       AND toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfDay(toDateTime('2019-12-28 00:00:00', 'UTC')), 'UTC')
       AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-04 23:59:59', 'UTC')
       AND replaceRegexpAll(JSONExtractRaw(properties, 'location'), '^"|"$', '') in (['London', 'Paris'])
     GROUP BY breakdown_value
     ORDER BY breakdown_value) as sub_A
  FULL OUTER JOIN
    (SELECT avg(toFloat64OrNull(replaceRegexpAll(JSONExtractRaw(properties, 'session duration'), '^"|"$', ''))) AS total,
            replaceRegexpAll(JSONExtractRaw(properties, 'location'), '^"|"$', '') AS breakdown_value
     FROM events e
     WHERE e.team_id = 2
       AND event = 'session start'
       AND toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfDay(toDateTime('2019-12-28 00:00:00', 'UTC')), 'UTC')
       AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-04 23:59:59', 'UTC')
       AND replaceRegexpAll(JSONExtractRaw(properties, 'location'), '^"|"$', '') in (['London', 'Paris'])
     GROUP BY breakdown_value
     ORDER BY breakdown_value) as sub_B ON sub_A.breakdown_value = sub_B.breakdown_value
  '
---
# name: TestFormula.test_breakdown_cohort
  '
  SELECT sub_A.date,
         arrayMap((A, B) -> A + B, arrayResize(sub_A.total, max_length, 0), arrayResize(sub_B.total, max_length, 0)) ,
         arrayFilter(x -> x != 0, [sub_A.breakdown_value, sub_B.breakdown_value])[1] ,
         arrayMax([length(sub_A.total), length(sub_B.total)]) as max_length
  FROM
    (SELECT groupArray(day_start) as date,
            groupArray(count) AS total,
            breakdown_value
     FROM
       (SELECT SUM(total) as count,
               day_start,
               breakdown_value
        FROM
          (SELECT *
           FROM
             (SELECT toUInt16(0) AS total,
                     ticks.day_start as day_start,
                     breakdown_value
              FROM
                (SELECT toStartOfDay(toDateTime('2020-01-04 23:59:59', 'UTC')) - toIntervalDay(number) as day_start
                 FROM numbers(8)
                 UNION ALL SELECT toStartOfDay(toDateTime('2019-12-28 00:00:00', 'UTC')) as day_start) as ticks
              CROSS JOIN
                (SELECT breakdown_value
                 FROM
                   (SELECT [1, 2] as breakdown_value) ARRAY
                 JOIN breakdown_value) as sec
              ORDER BY breakdown_value,
                       day_start
              UNION ALL SELECT sum(toFloat64OrNull(replaceRegexpAll(JSONExtractRaw(properties, 'session duration'), '^"|"$', ''))) as total,
                               toStartOfDay(toTimeZone(toDateTime(timestamp, 'UTC'), 'UTC')) as day_start,
                               value as breakdown_value
              FROM events e
              INNER JOIN
                (SELECT distinct_id,
                        1 as value
                 FROM
                   (SELECT distinct_id,
                           argMax(person_id, version) as person_id
                    FROM person_distinct_id2
                    WHERE team_id = 2
                    GROUP BY distinct_id
                    HAVING argMax(is_deleted, version) = 0)
                 WHERE person_id IN
                     (SELECT id
                      FROM person
                      WHERE team_id = 2
                        AND id IN
                          (SELECT id
                           FROM person
                           WHERE team_id = 2
                             AND ((has(['some_val'], replaceRegexpAll(JSONExtractRaw(properties, '$some_prop'), '^"|"$', '')))) )
                      GROUP BY id
                      HAVING max(is_deleted) = 0
                      AND ((has(['some_val'], replaceRegexpAll(JSONExtractRaw(argMax(person.properties, version), '$some_prop'), '^"|"$', '')))) SETTINGS optimize_aggregation_in_order = 1)
                 UNION ALL SELECT DISTINCT distinct_id,
                                           0 as value
                 FROM events all_events
                 WHERE team_id = 2
                   AND toTimeZone(all_events.timestamp, 'UTC') >= toDateTime('2019-12-28 00:00:00', 'UTC')
                   AND toTimeZone(all_events.timestamp, 'UTC') <= toDateTime('2020-01-04 23:59:59', 'UTC') ) ep ON e.distinct_id = ep.distinct_id
              where team_id = 2
                AND event = 'session start'
                AND toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfDay(toDateTime('2019-12-28 00:00:00', 'UTC')), 'UTC')
                AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-04 23:59:59', 'UTC')
              GROUP BY day_start,
                       breakdown_value))
        GROUP BY day_start,
                 breakdown_value
        ORDER BY breakdown_value,
                 day_start)
     GROUP BY breakdown_value
     ORDER BY breakdown_value) as sub_A
  FULL OUTER JOIN
    (SELECT groupArray(day_start) as date,
            groupArray(count) AS total,
            breakdown_value
     FROM
       (SELECT SUM(total) as count,
               day_start,
               breakdown_value
        FROM
          (SELECT *
           FROM
             (SELECT toUInt16(0) AS total,
                     ticks.day_start as day_start,
                     breakdown_value
              FROM
                (SELECT toStartOfDay(toDateTime('2020-01-04 23:59:59', 'UTC')) - toIntervalDay(number) as day_start
                 FROM numbers(8)
                 UNION ALL SELECT toStartOfDay(toDateTime('2019-12-28 00:00:00', 'UTC')) as day_start) as ticks
              CROSS JOIN
                (SELECT breakdown_value
                 FROM
                   (SELECT [1, 2] as breakdown_value) ARRAY
                 JOIN breakdown_value) as sec
              ORDER BY breakdown_value,
                       day_start
              UNION ALL SELECT avg(toFloat64OrNull(replaceRegexpAll(JSONExtractRaw(properties, 'session duration'), '^"|"$', ''))) as total,
                               toStartOfDay(toTimeZone(toDateTime(timestamp, 'UTC'), 'UTC')) as day_start,
                               value as breakdown_value
              FROM events e
              INNER JOIN
                (SELECT distinct_id,
                        1 as value
                 FROM
                   (SELECT distinct_id,
                           argMax(person_id, version) as person_id
                    FROM person_distinct_id2
                    WHERE team_id = 2
                    GROUP BY distinct_id
                    HAVING argMax(is_deleted, version) = 0)
                 WHERE person_id IN
                     (SELECT id
                      FROM person
                      WHERE team_id = 2
                        AND id IN
                          (SELECT id
                           FROM person
                           WHERE team_id = 2
                             AND ((has(['some_val'], replaceRegexpAll(JSONExtractRaw(properties, '$some_prop'), '^"|"$', '')))) )
                      GROUP BY id
                      HAVING max(is_deleted) = 0
                      AND ((has(['some_val'], replaceRegexpAll(JSONExtractRaw(argMax(person.properties, version), '$some_prop'), '^"|"$', '')))) SETTINGS optimize_aggregation_in_order = 1)
                 UNION ALL SELECT DISTINCT distinct_id,
                                           0 as value
                 FROM events all_events
                 WHERE team_id = 2
                   AND toTimeZone(all_events.timestamp, 'UTC') >= toDateTime('2019-12-28 00:00:00', 'UTC')
                   AND toTimeZone(all_events.timestamp, 'UTC') <= toDateTime('2020-01-04 23:59:59', 'UTC') ) ep ON e.distinct_id = ep.distinct_id
              where team_id = 2
                AND event = 'session start'
                AND toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfDay(toDateTime('2019-12-28 00:00:00', 'UTC')), 'UTC')
                AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-04 23:59:59', 'UTC')
              GROUP BY day_start,
                       breakdown_value))
        GROUP BY day_start,
                 breakdown_value
        ORDER BY breakdown_value,
                 day_start)
     GROUP BY breakdown_value
     ORDER BY breakdown_value) as sub_B ON sub_A.breakdown_value = sub_B.breakdown_value
  '
---
# name: TestFormula.test_breakdown_hogql
  '
  
  SELECT groupArray(value)
  FROM
    (SELECT concat(ifNull(toString(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person_properties, '$some_prop'), ''), 'null'), '^"|"$', '')), ''), ' : ', ifNull(toString(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, 'location'), ''), 'null'), '^"|"$', '')), '')) AS value,
            sum(toFloat64OrNull(replaceRegexpAll(JSONExtractRaw(properties, 'session duration'), '^"|"$', ''))) as count
     FROM events e
     INNER JOIN
       (SELECT distinct_id,
               argMax(person_id, version) as person_id
        FROM person_distinct_id2
        WHERE team_id = 2
        GROUP BY distinct_id
        HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
     INNER JOIN
       (SELECT id,
               argMax(properties, version) as person_props
        FROM person
        WHERE team_id = 2
        GROUP BY id
        HAVING max(is_deleted) = 0 SETTINGS optimize_aggregation_in_order = 1) person ON pdi.person_id = person.id
     WHERE team_id = 2
       AND event = 'session start'
       AND toTimeZone(timestamp, 'UTC') >= toDateTime('2019-12-28 00:00:00', 'UTC')
       AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-04 23:59:59', 'UTC')
     GROUP BY value
     ORDER BY count DESC, value DESC
     LIMIT 25
     OFFSET 0)
  '
---
# name: TestFormula.test_breakdown_hogql.1
  '
  
  SELECT groupArray(value)
  FROM
    (SELECT concat(ifNull(toString(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person_properties, '$some_prop'), ''), 'null'), '^"|"$', '')), ''), ' : ', ifNull(toString(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, 'location'), ''), 'null'), '^"|"$', '')), '')) AS value,
            avg(toFloat64OrNull(replaceRegexpAll(JSONExtractRaw(properties, 'session duration'), '^"|"$', ''))) as count
     FROM events e
     INNER JOIN
       (SELECT distinct_id,
               argMax(person_id, version) as person_id
        FROM person_distinct_id2
        WHERE team_id = 2
        GROUP BY distinct_id
        HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
     INNER JOIN
       (SELECT id,
               argMax(properties, version) as person_props
        FROM person
        WHERE team_id = 2
        GROUP BY id
        HAVING max(is_deleted) = 0 SETTINGS optimize_aggregation_in_order = 1) person ON pdi.person_id = person.id
     WHERE team_id = 2
       AND event = 'session start'
       AND toTimeZone(timestamp, 'UTC') >= toDateTime('2019-12-28 00:00:00', 'UTC')
       AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-04 23:59:59', 'UTC')
     GROUP BY value
     ORDER BY count DESC, value DESC
     LIMIT 25
     OFFSET 0)
  '
---
# name: TestFormula.test_breakdown_hogql.2
  '
  SELECT sub_A.date,
         arrayMap((A, B) -> A + B, arrayResize(sub_A.total, max_length, 0), arrayResize(sub_B.total, max_length, 0)) ,
         arrayFilter(x -> notEmpty(x), [replaceRegexpAll(sub_A.breakdown_value, '^"|"$', ''), replaceRegexpAll(sub_B.breakdown_value, '^"|"$', '')])[1] ,
         arrayMax([length(sub_A.total), length(sub_B.total)]) as max_length
  FROM
    (SELECT groupArray(day_start) as date,
            groupArray(count) AS total,
            breakdown_value
     FROM
       (SELECT SUM(total) as count,
               day_start,
               breakdown_value
        FROM
          (SELECT *
           FROM
             (SELECT toUInt16(0) AS total,
                     ticks.day_start as day_start,
                     breakdown_value
              FROM
                (SELECT toStartOfDay(toDateTime('2020-01-04 23:59:59', 'UTC')) - toIntervalDay(number) as day_start
                 FROM numbers(8)
                 UNION ALL SELECT toStartOfDay(toDateTime('2019-12-28 00:00:00', 'UTC')) as day_start) as ticks
              CROSS JOIN
                (SELECT breakdown_value
                 FROM
                   (SELECT ['some_val : London', 'some_val : Paris'] as breakdown_value) ARRAY
                 JOIN breakdown_value) as sec
              ORDER BY breakdown_value,
                       day_start
              UNION ALL SELECT sum(toFloat64OrNull(replaceRegexpAll(JSONExtractRaw(properties, 'session duration'), '^"|"$', ''))) as total,
                               toStartOfDay(toTimeZone(toDateTime(timestamp, 'UTC'), 'UTC')) as day_start,
                               concat(ifNull(toString(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person_properties, '$some_prop'), ''), 'null'), '^"|"$', '')), ''), ' : ', ifNull(toString(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, 'location'), ''), 'null'), '^"|"$', '')), '')) as breakdown_value
              FROM events e
              INNER JOIN
                (SELECT distinct_id,
                        argMax(person_id, version) as person_id
                 FROM person_distinct_id2
                 WHERE team_id = 2
                 GROUP BY distinct_id
                 HAVING argMax(is_deleted, version) = 0) as pdi ON events.distinct_id = pdi.distinct_id
              INNER JOIN
                (SELECT id,
                        argMax(properties, version) as person_props
                 FROM person
                 WHERE team_id = 2
                 GROUP BY id
                 HAVING max(is_deleted) = 0 SETTINGS optimize_aggregation_in_order = 1) person ON person.id = pdi.person_id
              WHERE e.team_id = 2
                AND event = 'session start'
                AND toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfDay(toDateTime('2019-12-28 00:00:00', 'UTC')), 'UTC')
                AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-04 23:59:59', 'UTC')
                AND concat(ifNull(toString(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person_properties, '$some_prop'), ''), 'null'), '^"|"$', '')), ''), ' : ', ifNull(toString(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, 'location'), ''), 'null'), '^"|"$', '')), '')) in (['some_val : London', 'some_val : Paris'])
              GROUP BY day_start,
                       breakdown_value))
        GROUP BY day_start,
                 breakdown_value
        ORDER BY breakdown_value,
                 day_start)
     GROUP BY breakdown_value
     ORDER BY breakdown_value) as sub_A
  FULL OUTER JOIN
    (SELECT groupArray(day_start) as date,
            groupArray(count) AS total,
            breakdown_value
     FROM
       (SELECT SUM(total) as count,
               day_start,
               breakdown_value
        FROM
          (SELECT *
           FROM
             (SELECT toUInt16(0) AS total,
                     ticks.day_start as day_start,
                     breakdown_value
              FROM
                (SELECT toStartOfDay(toDateTime('2020-01-04 23:59:59', 'UTC')) - toIntervalDay(number) as day_start
                 FROM numbers(8)
                 UNION ALL SELECT toStartOfDay(toDateTime('2019-12-28 00:00:00', 'UTC')) as day_start) as ticks
              CROSS JOIN
                (SELECT breakdown_value
                 FROM
                   (SELECT ['some_val : London', 'some_val : Paris'] as breakdown_value) ARRAY
                 JOIN breakdown_value) as sec
              ORDER BY breakdown_value,
                       day_start
              UNION ALL SELECT avg(toFloat64OrNull(replaceRegexpAll(JSONExtractRaw(properties, 'session duration'), '^"|"$', ''))) as total,
                               toStartOfDay(toTimeZone(toDateTime(timestamp, 'UTC'), 'UTC')) as day_start,
                               concat(ifNull(toString(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person_properties, '$some_prop'), ''), 'null'), '^"|"$', '')), ''), ' : ', ifNull(toString(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, 'location'), ''), 'null'), '^"|"$', '')), '')) as breakdown_value
              FROM events e
              INNER JOIN
                (SELECT distinct_id,
                        argMax(person_id, version) as person_id
                 FROM person_distinct_id2
                 WHERE team_id = 2
                 GROUP BY distinct_id
                 HAVING argMax(is_deleted, version) = 0) as pdi ON events.distinct_id = pdi.distinct_id
              INNER JOIN
                (SELECT id,
                        argMax(properties, version) as person_props
                 FROM person
                 WHERE team_id = 2
                 GROUP BY id
                 HAVING max(is_deleted) = 0 SETTINGS optimize_aggregation_in_order = 1) person ON person.id = pdi.person_id
              WHERE e.team_id = 2
                AND event = 'session start'
                AND toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfDay(toDateTime('2019-12-28 00:00:00', 'UTC')), 'UTC')
                AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-04 23:59:59', 'UTC')
                AND concat(ifNull(toString(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person_properties, '$some_prop'), ''), 'null'), '^"|"$', '')), ''), ' : ', ifNull(toString(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, 'location'), ''), 'null'), '^"|"$', '')), '')) in (['some_val : London', 'some_val : Paris'])
              GROUP BY day_start,
                       breakdown_value))
        GROUP BY day_start,
                 breakdown_value
        ORDER BY breakdown_value,
                 day_start)
     GROUP BY breakdown_value
     ORDER BY breakdown_value) as sub_B ON sub_A.breakdown_value = sub_B.breakdown_value
  '
---
# name: TestFormula.test_breakdown_with_different_breakdown_values_per_series
  '
  
  SELECT groupArray(value)
  FROM
    (SELECT replaceRegexpAll(JSONExtractRaw(properties, 'location'), '^"|"$', '') AS value,
            sum(toFloat64OrNull(replaceRegexpAll(JSONExtractRaw(properties, 'session duration'), '^"|"$', ''))) as count
     FROM events e
     WHERE team_id = 2
       AND event = 'session start'
       AND toTimeZone(timestamp, 'UTC') >= toDateTime('2019-12-28 00:00:00', 'UTC')
       AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-04 23:59:59', 'UTC')
     GROUP BY value
     ORDER BY count DESC, value DESC
     LIMIT 25
     OFFSET 0)
  '
---
# name: TestFormula.test_breakdown_with_different_breakdown_values_per_series.1
  '
  
  SELECT groupArray(value)
  FROM
    (SELECT replaceRegexpAll(JSONExtractRaw(properties, 'location'), '^"|"$', '') AS value,
            sum(toFloat64OrNull(replaceRegexpAll(JSONExtractRaw(properties, 'session duration'), '^"|"$', ''))) as count
     FROM events e
     WHERE team_id = 2
       AND event = 'session end'
       AND toTimeZone(timestamp, 'UTC') >= toDateTime('2019-12-28 00:00:00', 'UTC')
       AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-04 23:59:59', 'UTC')
     GROUP BY value
     ORDER BY count DESC, value DESC
     LIMIT 25
     OFFSET 0)
  '
---
# name: TestFormula.test_breakdown_with_different_breakdown_values_per_series.2
  '
  SELECT sub_A.date,
         arrayMap((A, B) -> A + B, arrayResize(sub_A.total, max_length, 0), arrayResize(sub_B.total, max_length, 0)) ,
         arrayFilter(x -> notEmpty(x), [replaceRegexpAll(sub_A.breakdown_value, '^"|"$', ''), replaceRegexpAll(sub_B.breakdown_value, '^"|"$', '')])[1] ,
         arrayMax([length(sub_A.total), length(sub_B.total)]) as max_length
  FROM
    (SELECT groupArray(day_start) as date,
            groupArray(count) AS total,
            breakdown_value
     FROM
       (SELECT SUM(total) as count,
               day_start,
               breakdown_value
        FROM
          (SELECT *
           FROM
             (SELECT toUInt16(0) AS total,
                     ticks.day_start as day_start,
                     breakdown_value
              FROM
                (SELECT toStartOfDay(toDateTime('2020-01-04 23:59:59', 'UTC')) - toIntervalDay(number) as day_start
                 FROM numbers(8)
                 UNION ALL SELECT toStartOfDay(toDateTime('2019-12-28 00:00:00', 'UTC')) as day_start) as ticks
              CROSS JOIN
                (SELECT breakdown_value
                 FROM
                   (SELECT ['London', 'Paris'] as breakdown_value) ARRAY
                 JOIN breakdown_value) as sec
              ORDER BY breakdown_value,
                       day_start
              UNION ALL SELECT sum(toFloat64OrNull(replaceRegexpAll(JSONExtractRaw(properties, 'session duration'), '^"|"$', ''))) as total,
                               toStartOfDay(toTimeZone(toDateTime(timestamp, 'UTC'), 'UTC')) as day_start,
                               replaceRegexpAll(JSONExtractRaw(properties, 'location'), '^"|"$', '') as breakdown_value
              FROM events e
              WHERE e.team_id = 2
                AND event = 'session start'
                AND toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfDay(toDateTime('2019-12-28 00:00:00', 'UTC')), 'UTC')
                AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-04 23:59:59', 'UTC')
                AND replaceRegexpAll(JSONExtractRaw(properties, 'location'), '^"|"$', '') in (['London', 'Paris'])
              GROUP BY day_start,
                       breakdown_value))
        GROUP BY day_start,
                 breakdown_value
        ORDER BY breakdown_value,
                 day_start)
     GROUP BY breakdown_value
     ORDER BY breakdown_value) as sub_A
  FULL OUTER JOIN
    (SELECT groupArray(day_start) as date,
            groupArray(count) AS total,
            breakdown_value
     FROM
       (SELECT SUM(total) as count,
               day_start,
               breakdown_value
        FROM
          (SELECT *
           FROM
             (SELECT toUInt16(0) AS total,
                     ticks.day_start as day_start,
                     breakdown_value
              FROM
                (SELECT toStartOfDay(toDateTime('2020-01-04 23:59:59', 'UTC')) - toIntervalDay(number) as day_start
                 FROM numbers(8)
                 UNION ALL SELECT toStartOfDay(toDateTime('2019-12-28 00:00:00', 'UTC')) as day_start) as ticks
              CROSS JOIN
                (SELECT breakdown_value
                 FROM
                   (SELECT ['London', 'Belo Horizonte', ''] as breakdown_value) ARRAY
                 JOIN breakdown_value) as sec
              ORDER BY breakdown_value,
                       day_start
              UNION ALL SELECT sum(toFloat64OrNull(replaceRegexpAll(JSONExtractRaw(properties, 'session duration'), '^"|"$', ''))) as total,
                               toStartOfDay(toTimeZone(toDateTime(timestamp, 'UTC'), 'UTC')) as day_start,
                               replaceRegexpAll(JSONExtractRaw(properties, 'location'), '^"|"$', '') as breakdown_value
              FROM events e
              WHERE e.team_id = 2
                AND event = 'session end'
                AND toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfDay(toDateTime('2019-12-28 00:00:00', 'UTC')), 'UTC')
                AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-04 23:59:59', 'UTC')
                AND replaceRegexpAll(JSONExtractRaw(properties, 'location'), '^"|"$', '') in (['London', 'Belo Horizonte', ''])
              GROUP BY day_start,
                       breakdown_value))
        GROUP BY day_start,
                 breakdown_value
        ORDER BY breakdown_value,
                 day_start)
     GROUP BY breakdown_value
     ORDER BY breakdown_value) as sub_B ON sub_A.breakdown_value = sub_B.breakdown_value
  '
---
# name: TestFormula.test_formula_with_unique_sessions
  '
  SELECT sub_A.date,
         arrayMap((A, B) -> A / B, arrayResize(sub_A.total, max_length, 0), arrayResize(sub_B.total, max_length, 0)) ,
         arrayMax([length(sub_A.total), length(sub_B.total)]) as max_length
  FROM
    (SELECT groupArray(day_start) as date,
            groupArray(count) AS total
     FROM
       (SELECT SUM(total) AS count,
               day_start
        FROM
          (SELECT toUInt16(0) AS total,
                  toStartOfDay(toDateTime('2020-01-04 23:59:59', 'UTC')) - toIntervalDay(number) AS day_start
           FROM numbers(dateDiff('day', toStartOfDay(toDateTime('2019-12-28 00:00:00', 'UTC')), toDateTime('2020-01-04 23:59:59', 'UTC')))
           UNION ALL SELECT toUInt16(0) AS total,
                            toStartOfDay(toDateTime('2019-12-28 00:00:00', 'UTC'))
           UNION ALL SELECT count(DISTINCT e."$session_id") AS total,
                            toStartOfDay(toTimeZone(toDateTime(timestamp, 'UTC'), 'UTC')) AS date
           FROM events e
           WHERE team_id = 2
             AND event = 'session start'
             AND toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfDay(toDateTime('2019-12-28 00:00:00', 'UTC')), 'UTC')
             AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-04 23:59:59', 'UTC')
           GROUP BY date)
        GROUP BY day_start
        ORDER BY day_start)) as sub_A
  CROSS JOIN
    (SELECT groupArray(day_start) as date,
            groupArray(count) AS total
     FROM
       (SELECT SUM(total) AS count,
               day_start
        FROM
          (SELECT toUInt16(0) AS total,
                  toStartOfDay(toDateTime('2020-01-04 23:59:59', 'UTC')) - toIntervalDay(number) AS day_start
           FROM numbers(dateDiff('day', toStartOfDay(toDateTime('2019-12-28 00:00:00', 'UTC')), toDateTime('2020-01-04 23:59:59', 'UTC')))
           UNION ALL SELECT toUInt16(0) AS total,
                            toStartOfDay(toDateTime('2019-12-28 00:00:00', 'UTC'))
           UNION ALL SELECT count(DISTINCT pdi.person_id) AS total,
                            toStartOfDay(toTimeZone(toDateTime(timestamp, 'UTC'), 'UTC')) AS date
           FROM events e
           INNER JOIN
             (SELECT distinct_id,
                     argMax(person_id, version) as person_id
              FROM person_distinct_id2
              WHERE team_id = 2
              GROUP BY distinct_id
              HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
           WHERE team_id = 2
             AND event = 'session start'
             AND toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfDay(toDateTime('2019-12-28 00:00:00', 'UTC')), 'UTC')
             AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-04 23:59:59', 'UTC')
           GROUP BY date)
        GROUP BY day_start
        ORDER BY day_start)) as sub_B
  '
---
# name: TestFormula.test_hour_interval
  '
  SELECT sub_A.date,
         arrayMap((A, B) -> A + B, arrayResize(sub_A.total, max_length, 0), arrayResize(sub_B.total, max_length, 0)) ,
         arrayMax([length(sub_A.total), length(sub_B.total)]) as max_length
  FROM
    (SELECT groupArray(day_start) as date,
            groupArray(count) AS total
     FROM
       (SELECT SUM(total) AS count,
               day_start
        FROM
          (SELECT toUInt16(0) AS total,
                  toStartOfHour(toDateTime('2020-01-03 13:59:59', 'UTC') - toIntervalHour(number)) AS day_start
           FROM numbers(dateDiff('hour', toStartOfHour(toDateTime('2020-01-02 13:00:00', 'UTC')), toDateTime('2020-01-03 13:59:59', 'UTC')))
           UNION ALL SELECT toUInt16(0) AS total,
                            toStartOfHour(toDateTime('2020-01-02 13:00:00', 'UTC'))
           UNION ALL SELECT sum(toFloat64OrNull(replaceRegexpAll(JSONExtractRaw(properties, 'session duration'), '^"|"$', ''))) AS total,
                            toStartOfHour(toTimeZone(toDateTime(timestamp, 'UTC'), 'UTC')) AS date
           FROM events e
           WHERE team_id = 2
             AND event = 'session start'
             AND toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfHour(toDateTime('2020-01-02 13:00:00', 'UTC')), 'UTC')
             AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-03 13:59:59', 'UTC')
           GROUP BY date)
        GROUP BY day_start
        ORDER BY day_start)) as sub_A
  CROSS JOIN
    (SELECT groupArray(day_start) as date,
            groupArray(count) AS total
     FROM
       (SELECT SUM(total) AS count,
               day_start
        FROM
          (SELECT toUInt16(0) AS total,
                  toStartOfHour(toDateTime('2020-01-03 13:59:59', 'UTC') - toIntervalHour(number)) AS day_start
           FROM numbers(dateDiff('hour', toStartOfHour(toDateTime('2020-01-02 13:00:00', 'UTC')), toDateTime('2020-01-03 13:59:59', 'UTC')))
           UNION ALL SELECT toUInt16(0) AS total,
                            toStartOfHour(toDateTime('2020-01-02 13:00:00', 'UTC'))
           UNION ALL SELECT avg(toFloat64OrNull(replaceRegexpAll(JSONExtractRaw(properties, 'session duration'), '^"|"$', ''))) AS total,
                            toStartOfHour(toTimeZone(toDateTime(timestamp, 'UTC'), 'UTC')) AS date
           FROM events e
           WHERE team_id = 2
             AND event = 'session start'
             AND toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfHour(toDateTime('2020-01-02 13:00:00', 'UTC')), 'UTC')
             AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-03 13:59:59', 'UTC')
           GROUP BY date)
        GROUP BY day_start
        ORDER BY day_start)) as sub_B
  '
---
# name: TestFormula.test_hour_interval_day_level_relative
  '
  SELECT sub_A.date,
         arrayMap((A, B) -> A + B, arrayResize(sub_A.total, max_length, 0), arrayResize(sub_B.total, max_length, 0)) ,
         arrayMax([length(sub_A.total), length(sub_B.total)]) as max_length
  FROM
    (SELECT groupArray(day_start) as date,
            groupArray(count) AS total
     FROM
       (SELECT SUM(total) AS count,
               day_start
        FROM
          (SELECT toUInt16(0) AS total,
                  toStartOfHour(toDateTime('2020-01-03 13:59:59', 'UTC')) - toIntervalHour(number) AS day_start
           FROM numbers(dateDiff('hour', toStartOfHour(toDateTime('2020-01-02 13:05:01', 'UTC')), toDateTime('2020-01-03 13:59:59', 'UTC')))
           UNION ALL SELECT toUInt16(0) AS total,
                            toStartOfHour(toDateTime('2020-01-02 13:05:01', 'UTC'))
           UNION ALL SELECT sum(toFloat64OrNull(replaceRegexpAll(JSONExtractRaw(properties, 'session duration'), '^"|"$', ''))) AS total,
                            toStartOfHour(toTimeZone(toDateTime(timestamp, 'UTC'), 'UTC')) AS date
           FROM events e
           WHERE team_id = 2
             AND event = 'session start'
             AND toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfHour(toDateTime('2020-01-02 13:05:01', 'UTC')), 'UTC')
             AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-03 13:59:59', 'UTC')
           GROUP BY date)
        GROUP BY day_start
        ORDER BY day_start)) as sub_A
  CROSS JOIN
    (SELECT groupArray(day_start) as date,
            groupArray(count) AS total
     FROM
       (SELECT SUM(total) AS count,
               day_start
        FROM
          (SELECT toUInt16(0) AS total,
                  toStartOfHour(toDateTime('2020-01-03 13:59:59', 'UTC')) - toIntervalHour(number) AS day_start
           FROM numbers(dateDiff('hour', toStartOfHour(toDateTime('2020-01-02 13:05:01', 'UTC')), toDateTime('2020-01-03 13:59:59', 'UTC')))
           UNION ALL SELECT toUInt16(0) AS total,
                            toStartOfHour(toDateTime('2020-01-02 13:05:01', 'UTC'))
           UNION ALL SELECT avg(toFloat64OrNull(replaceRegexpAll(JSONExtractRaw(properties, 'session duration'), '^"|"$', ''))) AS total,
                            toStartOfHour(toTimeZone(toDateTime(timestamp, 'UTC'), 'UTC')) AS date
           FROM events e
           WHERE team_id = 2
             AND event = 'session start'
             AND toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfHour(toDateTime('2020-01-02 13:05:01', 'UTC')), 'UTC')
             AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-03 13:59:59', 'UTC')
           GROUP BY date)
        GROUP BY day_start
        ORDER BY day_start)) as sub_B
  '
---
# name: TestFormula.test_hour_interval_hour_level_relative
  '
  SELECT sub_A.date,
         arrayMap((A, B) -> A + B, arrayResize(sub_A.total, max_length, 0), arrayResize(sub_B.total, max_length, 0)) ,
         arrayMax([length(sub_A.total), length(sub_B.total)]) as max_length
  FROM
    (SELECT groupArray(day_start) as date,
            groupArray(count) AS total
     FROM
       (SELECT SUM(total) AS count,
               day_start
        FROM
          (SELECT toUInt16(0) AS total,
                  toStartOfHour(toDateTime('2020-01-03 13:59:59', 'UTC')) - toIntervalHour(number) AS day_start
           FROM numbers(dateDiff('hour', toStartOfHour(toDateTime('2020-01-02 13:05:01', 'UTC')), toDateTime('2020-01-03 13:59:59', 'UTC')))
           UNION ALL SELECT toUInt16(0) AS total,
                            toStartOfHour(toDateTime('2020-01-02 13:05:01', 'UTC'))
           UNION ALL SELECT sum(toFloat64OrNull(replaceRegexpAll(JSONExtractRaw(properties, 'session duration'), '^"|"$', ''))) AS total,
                            toStartOfHour(toTimeZone(toDateTime(timestamp, 'UTC'), 'UTC')) AS date
           FROM events e
           WHERE team_id = 2
             AND event = 'session start'
             AND toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfHour(toDateTime('2020-01-02 13:05:01', 'UTC')), 'UTC')
             AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-03 13:59:59', 'UTC')
           GROUP BY date)
        GROUP BY day_start
        ORDER BY day_start)) as sub_A
  CROSS JOIN
    (SELECT groupArray(day_start) as date,
            groupArray(count) AS total
     FROM
       (SELECT SUM(total) AS count,
               day_start
        FROM
          (SELECT toUInt16(0) AS total,
                  toStartOfHour(toDateTime('2020-01-03 13:59:59', 'UTC')) - toIntervalHour(number) AS day_start
           FROM numbers(dateDiff('hour', toStartOfHour(toDateTime('2020-01-02 13:05:01', 'UTC')), toDateTime('2020-01-03 13:59:59', 'UTC')))
           UNION ALL SELECT toUInt16(0) AS total,
                            toStartOfHour(toDateTime('2020-01-02 13:05:01', 'UTC'))
           UNION ALL SELECT avg(toFloat64OrNull(replaceRegexpAll(JSONExtractRaw(properties, 'session duration'), '^"|"$', ''))) AS total,
                            toStartOfHour(toTimeZone(toDateTime(timestamp, 'UTC'), 'UTC')) AS date
           FROM events e
           WHERE team_id = 2
             AND event = 'session start'
             AND toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfHour(toDateTime('2020-01-02 13:05:01', 'UTC')), 'UTC')
             AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-03 13:59:59', 'UTC')
           GROUP BY date)
        GROUP BY day_start
        ORDER BY day_start)) as sub_B
  '
---
# name: TestFormula.test_regression_formula_with_session_duration_aggregation
  '
  SELECT sub_A.date,
         arrayMap((A, B) -> A / B, arrayResize(sub_A.total, max_length, 0), arrayResize(sub_B.total, max_length, 0)) ,
         arrayMax([length(sub_A.total), length(sub_B.total)]) as max_length
  FROM
    (SELECT groupArray(day_start) as date,
            groupArray(count) AS total
     FROM
       (SELECT SUM(total) AS count,
               day_start
        FROM
          (SELECT toUInt16(0) AS total,
                  toStartOfDay(toDateTime('2020-01-04 23:59:59', 'UTC')) - toIntervalDay(number) AS day_start
           FROM numbers(dateDiff('day', toStartOfDay(toDateTime('2019-12-28 00:00:00', 'UTC')), toDateTime('2020-01-04 23:59:59', 'UTC')))
           UNION ALL SELECT toUInt16(0) AS total,
                            toStartOfDay(toDateTime('2019-12-28 00:00:00', 'UTC'))
           UNION ALL SELECT avg(session_duration) AS total, date
           FROM
             (SELECT toStartOfDay(toTimeZone(toDateTime(timestamp, 'UTC'), 'UTC')) as date,
                     any(sessions.session_duration) as session_duration
              FROM events e
              INNER JOIN
                (SELECT "$session_id" AS session_id_0,
                        dateDiff('second', min(timestamp), max(timestamp)) as session_duration
                 FROM events
                 WHERE session_id_0 != ''
                   AND team_id = 2
                   AND toTimeZone(timestamp, 'UTC') >= toDateTime('2019-12-28 00:00:00', 'UTC') - INTERVAL 24 HOUR
                   AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-04 23:59:59', 'UTC') + INTERVAL 24 HOUR
                 GROUP BY session_id_0) as sessions ON sessions."session_id_0" = e."$session_id"
              WHERE team_id = 2
                AND event = 'session start'
                AND toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfDay(toDateTime('2019-12-28 00:00:00', 'UTC')), 'UTC')
                AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-04 23:59:59', 'UTC')
              GROUP BY e."$session_id", date)
           GROUP BY date)
        GROUP BY day_start
        ORDER BY day_start)) as sub_A
  CROSS JOIN
    (SELECT groupArray(day_start) as date,
            groupArray(count) AS total
     FROM
       (SELECT SUM(total) AS count,
               day_start
        FROM
          (SELECT toUInt16(0) AS total,
                  toStartOfDay(toDateTime('2020-01-04 23:59:59', 'UTC')) - toIntervalDay(number) AS day_start
           FROM numbers(dateDiff('day', toStartOfDay(toDateTime('2019-12-28 00:00:00', 'UTC')), toDateTime('2020-01-04 23:59:59', 'UTC')))
           UNION ALL SELECT toUInt16(0) AS total,
                            toStartOfDay(toDateTime('2019-12-28 00:00:00', 'UTC'))
           UNION ALL SELECT count(*) AS total,
                            toStartOfDay(toTimeZone(toDateTime(timestamp, 'UTC'), 'UTC')) AS date
           FROM events e
           INNER JOIN
             (SELECT "$session_id" AS session_id_1,
                     dateDiff('second', min(timestamp), max(timestamp)) as session_duration
              FROM events
              WHERE session_id_1 != ''
                AND team_id = 2
                AND toTimeZone(timestamp, 'UTC') >= toDateTime('2019-12-28 00:00:00', 'UTC') - INTERVAL 24 HOUR
                AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-04 23:59:59', 'UTC') + INTERVAL 24 HOUR
              GROUP BY session_id_1) as sessions ON sessions."session_id_1" = e."$session_id"
           WHERE team_id = 2
             AND event = 'session end'
             AND toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfDay(toDateTime('2019-12-28 00:00:00', 'UTC')), 'UTC')
             AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-04 23:59:59', 'UTC')
           GROUP BY date)
        GROUP BY day_start
        ORDER BY day_start)) as sub_B
  '
---
# name: TestFormula.test_regression_formula_with_unique_sessions_2x_and_duration_filter
  '
  SELECT sub_A.date,
         arrayMap((A, B) -> A / B, arrayResize(sub_A.total, max_length, 0), arrayResize(sub_B.total, max_length, 0)) ,
         arrayMax([length(sub_A.total), length(sub_B.total)]) as max_length
  FROM
    (SELECT groupArray(day_start) as date,
            groupArray(count) AS total
     FROM
       (SELECT SUM(total) AS count,
               day_start
        FROM
          (SELECT toUInt16(0) AS total,
                  toStartOfDay(toDateTime('2020-01-04 23:59:59', 'UTC')) - toIntervalDay(number) AS day_start
           FROM numbers(dateDiff('day', toStartOfDay(toDateTime('2019-12-28 00:00:00', 'UTC')), toDateTime('2020-01-04 23:59:59', 'UTC')))
           UNION ALL SELECT toUInt16(0) AS total,
                            toStartOfDay(toDateTime('2019-12-28 00:00:00', 'UTC'))
           UNION ALL SELECT count(DISTINCT e."$session_id") AS total,
                            toStartOfDay(toTimeZone(toDateTime(timestamp, 'UTC'), 'UTC')) AS date
           FROM events e
           INNER JOIN
             (SELECT "$session_id" AS session_id_0,
                     dateDiff('second', min(timestamp), max(timestamp)) as session_duration
              FROM events
              WHERE session_id_0 != ''
                AND team_id = 2
                AND toTimeZone(timestamp, 'UTC') >= toDateTime('2019-12-28 00:00:00', 'UTC') - INTERVAL 24 HOUR
                AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-04 23:59:59', 'UTC') + INTERVAL 24 HOUR
              GROUP BY session_id_0) as sessions ON sessions."session_id_0" = e."$session_id"
           WHERE team_id = 2
             AND event = 'session start'
             AND toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfDay(toDateTime('2019-12-28 00:00:00', 'UTC')), 'UTC')
             AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-04 23:59:59', 'UTC')
             AND (sessions.session_duration > 12.0)
           GROUP BY date)
        GROUP BY day_start
        ORDER BY day_start)) as sub_A
  CROSS JOIN
    (SELECT groupArray(day_start) as date,
            groupArray(count) AS total
     FROM
       (SELECT SUM(total) AS count,
               day_start
        FROM
          (SELECT toUInt16(0) AS total,
                  toStartOfDay(toDateTime('2020-01-04 23:59:59', 'UTC')) - toIntervalDay(number) AS day_start
           FROM numbers(dateDiff('day', toStartOfDay(toDateTime('2019-12-28 00:00:00', 'UTC')), toDateTime('2020-01-04 23:59:59', 'UTC')))
           UNION ALL SELECT toUInt16(0) AS total,
                            toStartOfDay(toDateTime('2019-12-28 00:00:00', 'UTC'))
           UNION ALL SELECT count(DISTINCT e."$session_id") AS total,
                            toStartOfDay(toTimeZone(toDateTime(timestamp, 'UTC'), 'UTC')) AS date
           FROM events e
           INNER JOIN
             (SELECT "$session_id" AS session_id_1,
                     dateDiff('second', min(timestamp), max(timestamp)) as session_duration
              FROM events
              WHERE session_id_1 != ''
                AND team_id = 2
                AND toTimeZone(timestamp, 'UTC') >= toDateTime('2019-12-28 00:00:00', 'UTC') - INTERVAL 24 HOUR
                AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-04 23:59:59', 'UTC') + INTERVAL 24 HOUR
              GROUP BY session_id_1) as sessions ON sessions."session_id_1" = e."$session_id"
           WHERE team_id = 2
             AND event = 'session start'
             AND toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfDay(toDateTime('2019-12-28 00:00:00', 'UTC')), 'UTC')
             AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-04 23:59:59', 'UTC')
           GROUP BY date)
        GROUP BY day_start
        ORDER BY day_start)) as sub_B
  '
---
# name: TestFormula.test_regression_formula_with_unique_sessions_2x_and_duration_filter_2x
  '
  SELECT sub_A.date,
         arrayMap((A, B) -> B, arrayResize(sub_A.total, max_length, 0), arrayResize(sub_B.total, max_length, 0)) ,
         arrayMax([length(sub_A.total), length(sub_B.total)]) as max_length
  FROM
    (SELECT groupArray(day_start) as date,
            groupArray(count) AS total
     FROM
       (SELECT SUM(total) AS count,
               day_start
        FROM
          (SELECT toUInt16(0) AS total,
                  toStartOfDay(toDateTime('2020-01-04 23:59:59', 'UTC')) - toIntervalDay(number) AS day_start
           FROM numbers(dateDiff('day', toStartOfDay(toDateTime('2019-12-28 00:00:00', 'UTC')), toDateTime('2020-01-04 23:59:59', 'UTC')))
           UNION ALL SELECT toUInt16(0) AS total,
                            toStartOfDay(toDateTime('2019-12-28 00:00:00', 'UTC'))
           UNION ALL SELECT count(DISTINCT e."$session_id") AS total,
                            toStartOfDay(toTimeZone(toDateTime(timestamp, 'UTC'), 'UTC')) AS date
           FROM events e
           INNER JOIN
             (SELECT "$session_id" AS session_id_0,
                     dateDiff('second', min(timestamp), max(timestamp)) as session_duration
              FROM events
              WHERE session_id_0 != ''
                AND team_id = 2
                AND toTimeZone(timestamp, 'UTC') >= toDateTime('2019-12-28 00:00:00', 'UTC') - INTERVAL 24 HOUR
                AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-04 23:59:59', 'UTC') + INTERVAL 24 HOUR
              GROUP BY session_id_0) as sessions ON sessions."session_id_0" = e."$session_id"
           WHERE team_id = 2
             AND event = '$autocapture'
             AND toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfDay(toDateTime('2019-12-28 00:00:00', 'UTC')), 'UTC')
             AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-04 23:59:59', 'UTC')
             AND (sessions.session_duration < 30.0)
           GROUP BY date)
        GROUP BY day_start
        ORDER BY day_start)) as sub_A
  CROSS JOIN
    (SELECT groupArray(day_start) as date,
            groupArray(count) AS total
     FROM
       (SELECT SUM(total) AS count,
               day_start
        FROM
          (SELECT toUInt16(0) AS total,
                  toStartOfDay(toDateTime('2020-01-04 23:59:59', 'UTC')) - toIntervalDay(number) AS day_start
           FROM numbers(dateDiff('day', toStartOfDay(toDateTime('2019-12-28 00:00:00', 'UTC')), toDateTime('2020-01-04 23:59:59', 'UTC')))
           UNION ALL SELECT toUInt16(0) AS total,
                            toStartOfDay(toDateTime('2019-12-28 00:00:00', 'UTC'))
           UNION ALL SELECT count(DISTINCT e."$session_id") AS total,
                            toStartOfDay(toTimeZone(toDateTime(timestamp, 'UTC'), 'UTC')) AS date
           FROM events e
           INNER JOIN
             (SELECT "$session_id" AS session_id_1,
                     dateDiff('second', min(timestamp), max(timestamp)) as session_duration
              FROM events
              WHERE session_id_1 != ''
                AND team_id = 2
                AND toTimeZone(timestamp, 'UTC') >= toDateTime('2019-12-28 00:00:00', 'UTC') - INTERVAL 24 HOUR
                AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-04 23:59:59', 'UTC') + INTERVAL 24 HOUR
              GROUP BY session_id_1) as sessions ON sessions."session_id_1" = e."$session_id"
           WHERE team_id = 2
             AND event = 'session start'
             AND toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfDay(toDateTime('2019-12-28 00:00:00', 'UTC')), 'UTC')
             AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-04 23:59:59', 'UTC')
             AND (sessions.session_duration > 500.0)
           GROUP BY date)
        GROUP BY day_start
        ORDER BY day_start)) as sub_B
  '
---
