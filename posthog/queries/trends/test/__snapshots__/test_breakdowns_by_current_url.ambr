# serializer version: 1
# name: TestBreakdownsByCurrentURL.test_breakdown_by_current_url
  '''
  
  SELECT if(empty(trim(TRAILING '/?#'
                       from replaceRegexpAll(JSONExtractRaw(properties, '$current_url'), '^"|"$', ''))), '/', trim(TRAILING '/?#'
                                                                                                                   from replaceRegexpAll(JSONExtractRaw(properties, '$current_url'), '^"|"$', ''))) AS value,
         count(*) as count
  FROM events e
  WHERE team_id = 2
    AND event = 'watched movie'
    AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-02 00:00:00', 'UTC')
    AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-12 23:59:59', 'UTC')
  GROUP BY value
  ORDER BY count DESC, value DESC
  LIMIT 26
  OFFSET 0
  '''
# ---
# name: TestBreakdownsByCurrentURL.test_breakdown_by_current_url.1
  '''
  SELECT groupArray(day_start) as date,
         groupArray(count) AS total,
         breakdown_value
  FROM
    (SELECT SUM(total) as count,
            day_start,
            breakdown_value
     FROM
       (SELECT *
        FROM
          (-- Create a table with 1 row for each interval for the requested date range
   -- This acts as a method of zero filling, i.e. when there are no data points
   -- for a given interval, we'll still have a row for the group by interval with
   -- a 0 value.
   --
   -- It's essentially a cross product of graph "ticks" and breakdown values.
   --
   -- TODO: we're relying on num_intervals, seconds_int_interval etc. being passed
   --       in as a parameter. To reduce the coupling between here and the
   --       calling code, we could perform calculations for these within the query
   --       itself based on date_to/date_from. We could also pass in the intervals
   --       explicitly, although we'll be relying on the date handling between python
   --       and ClickHouse to be the same.
   --
   -- NOTE: there is the ORDER BY ... WITH FILL Expression but I'm not sure how we'd
   --       handle the edge cases:
   --
   --          https://clickhouse.com/docs/en/sql-reference/statements/select/order-by/#orderby-with-fill
   --
   SELECT toUInt16(0) AS total,
          ticks.day_start as day_start,
          breakdown_value
           FROM
             (-- Generates all the intervals/ticks in the date range
   -- NOTE: we build this range by including successive intervals back from the
   --       upper bound, then including the lower bound in the query also.
   SELECT toStartOfDay(toDateTime('2020-01-12 23:59:59', 'UTC')) - toIntervalDay(number) as day_start
              FROM numbers(11)
              UNION ALL SELECT toStartOfDay(toDateTime('2020-01-02 00:00:00', 'UTC')) as day_start) as ticks -- Zero fill for all values for the specified breakdown
  
           CROSS JOIN
             (SELECT breakdown_value
              FROM
                (SELECT ['https://example.com/home', 'https://example.com'] as breakdown_value) ARRAY
              JOIN breakdown_value) as sec
           ORDER BY breakdown_value,
                    day_start
           UNION ALL SELECT count(*) as total,
                            toStartOfDay(toTimeZone(toDateTime(timestamp, 'UTC'), 'UTC')) as day_start,
                            transform(ifNull(nullIf(if(empty(trim(TRAILING '/?#'
                                                                  from replaceRegexpAll(JSONExtractRaw(properties, '$current_url'), '^"|"$', ''))), '/', trim(TRAILING '/?#'
                                                                                                                                                              from replaceRegexpAll(JSONExtractRaw(properties, '$current_url'), '^"|"$', ''))), ''), '$$_posthog_breakdown_null_$$'), (['https://example.com/home', 'https://example.com']), (['https://example.com/home', 'https://example.com']), '$$_posthog_breakdown_other_$$') as breakdown_value
           FROM events e
           WHERE e.team_id = 2
             AND event = 'watched movie'
             AND toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfDay(toDateTime('2020-01-02 00:00:00', 'UTC')), 'UTC')
             AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-12 23:59:59', 'UTC')
           GROUP BY day_start,
                    breakdown_value))
     GROUP BY day_start,
              breakdown_value
     ORDER BY breakdown_value,
              day_start)
  GROUP BY breakdown_value
  ORDER BY breakdown_value
  '''
# ---
# name: TestBreakdownsByCurrentURL.test_breakdown_by_pathname
  '''
  
  SELECT if(empty(trim(TRAILING '/?#'
                       from replaceRegexpAll(JSONExtractRaw(properties, '$pathname'), '^"|"$', ''))), '/', trim(TRAILING '/?#'
                                                                                                                from replaceRegexpAll(JSONExtractRaw(properties, '$pathname'), '^"|"$', ''))) AS value,
         count(*) as count
  FROM events e
  WHERE team_id = 2
    AND event = 'watched movie'
    AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-02 00:00:00', 'UTC')
    AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-12 23:59:59', 'UTC')
  GROUP BY value
  ORDER BY count DESC, value DESC
  LIMIT 26
  OFFSET 0
  '''
# ---
# name: TestBreakdownsByCurrentURL.test_breakdown_by_pathname.1
  '''
  SELECT groupArray(day_start) as date,
         groupArray(count) AS total,
         breakdown_value
  FROM
    (SELECT SUM(total) as count,
            day_start,
            breakdown_value
     FROM
       (SELECT *
        FROM
          (-- Create a table with 1 row for each interval for the requested date range
   -- This acts as a method of zero filling, i.e. when there are no data points
   -- for a given interval, we'll still have a row for the group by interval with
   -- a 0 value.
   --
   -- It's essentially a cross product of graph "ticks" and breakdown values.
   --
   -- TODO: we're relying on num_intervals, seconds_int_interval etc. being passed
   --       in as a parameter. To reduce the coupling between here and the
   --       calling code, we could perform calculations for these within the query
   --       itself based on date_to/date_from. We could also pass in the intervals
   --       explicitly, although we'll be relying on the date handling between python
   --       and ClickHouse to be the same.
   --
   -- NOTE: there is the ORDER BY ... WITH FILL Expression but I'm not sure how we'd
   --       handle the edge cases:
   --
   --          https://clickhouse.com/docs/en/sql-reference/statements/select/order-by/#orderby-with-fill
   --
   SELECT toUInt16(0) AS total,
          ticks.day_start as day_start,
          breakdown_value
           FROM
             (-- Generates all the intervals/ticks in the date range
   -- NOTE: we build this range by including successive intervals back from the
   --       upper bound, then including the lower bound in the query also.
   SELECT toStartOfDay(toDateTime('2020-01-12 23:59:59', 'UTC')) - toIntervalDay(number) as day_start
              FROM numbers(11)
              UNION ALL SELECT toStartOfDay(toDateTime('2020-01-02 00:00:00', 'UTC')) as day_start) as ticks -- Zero fill for all values for the specified breakdown
  
           CROSS JOIN
             (SELECT breakdown_value
              FROM
                (SELECT ['/home', '/'] as breakdown_value) ARRAY
              JOIN breakdown_value) as sec
           ORDER BY breakdown_value,
                    day_start
           UNION ALL SELECT count(*) as total,
                            toStartOfDay(toTimeZone(toDateTime(timestamp, 'UTC'), 'UTC')) as day_start,
                            transform(ifNull(nullIf(if(empty(trim(TRAILING '/?#'
                                                                  from replaceRegexpAll(JSONExtractRaw(properties, '$pathname'), '^"|"$', ''))), '/', trim(TRAILING '/?#'
                                                                                                                                                           from replaceRegexpAll(JSONExtractRaw(properties, '$pathname'), '^"|"$', ''))), ''), '$$_posthog_breakdown_null_$$'), (['/home', '/']), (['/home', '/']), '$$_posthog_breakdown_other_$$') as breakdown_value
           FROM events e
           WHERE e.team_id = 2
             AND event = 'watched movie'
             AND toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfDay(toDateTime('2020-01-02 00:00:00', 'UTC')), 'UTC')
             AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-12 23:59:59', 'UTC')
           GROUP BY day_start,
                    breakdown_value))
     GROUP BY day_start,
              breakdown_value
     ORDER BY breakdown_value,
              day_start)
  GROUP BY breakdown_value
  ORDER BY breakdown_value
  '''
# ---
