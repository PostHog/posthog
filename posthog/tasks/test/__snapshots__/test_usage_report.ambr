# serializer version: 1
# name: TestFeatureFlagsUsageReport.test_usage_report_decide_requests
  '''
  
  SELECT team_id,
         multiIf(event LIKE 'helicone%', 'helicone_events', event LIKE 'langfuse%', 'langfuse_events', event LIKE 'keywords_ai%', 'keywords_ai_events', event LIKE 'traceloop%', 'traceloop_events', replaceRegexpAll(JSONExtractRaw(properties, '$lib'), '^"|"$', '') = 'web', 'web_events', replaceRegexpAll(JSONExtractRaw(properties, '$lib'), '^"|"$', '') = 'js', 'web_lite_events', replaceRegexpAll(JSONExtractRaw(properties, '$lib'), '^"|"$', '') = 'posthog-node', 'node_events', replaceRegexpAll(JSONExtractRaw(properties, '$lib'), '^"|"$', '') = 'posthog-android', 'android_events', replaceRegexpAll(JSONExtractRaw(properties, '$lib'), '^"|"$', '') = 'posthog-flutter', 'flutter_events', replaceRegexpAll(JSONExtractRaw(properties, '$lib'), '^"|"$', '') = 'posthog-ios', 'ios_events', replaceRegexpAll(JSONExtractRaw(properties, '$lib'), '^"|"$', '') = 'posthog-go', 'go_events', replaceRegexpAll(JSONExtractRaw(properties, '$lib'), '^"|"$', '') = 'posthog-java', 'java_events', replaceRegexpAll(JSONExtractRaw(properties, '$lib'), '^"|"$', '') = 'posthog-react-native', 'react_native_events', replaceRegexpAll(JSONExtractRaw(properties, '$lib'), '^"|"$', '') = 'posthog-ruby', 'ruby_events', replaceRegexpAll(JSONExtractRaw(properties, '$lib'), '^"|"$', '') = 'posthog-python', 'python_events', replaceRegexpAll(JSONExtractRaw(properties, '$lib'), '^"|"$', '') = 'posthog-php', 'php_events', replaceRegexpAll(JSONExtractRaw(properties, '$lib'), '^"|"$', '') = 'posthog-dotnet', 'dotnet_events', replaceRegexpAll(JSONExtractRaw(properties, '$lib'), '^"|"$', '') = 'posthog-elixir', 'elixir_events', 'other') AS metric,
         count(1) as count
  FROM events
  WHERE timestamp BETWEEN '2022-01-10 00:00:00' AND '2022-01-10 12:00:00'
  GROUP BY team_id,
           metric
  HAVING metric != 'other'
  '''
# ---
# name: TestFeatureFlagsUsageReport.test_usage_report_decide_requests.1
  '''
  
  SELECT team_id,
         multiIf(event LIKE 'helicone%', 'helicone_events', event LIKE 'langfuse%', 'langfuse_events', event LIKE 'keywords_ai%', 'keywords_ai_events', event LIKE 'traceloop%', 'traceloop_events', replaceRegexpAll(JSONExtractRaw(properties, '$lib'), '^"|"$', '') = 'web', 'web_events', replaceRegexpAll(JSONExtractRaw(properties, '$lib'), '^"|"$', '') = 'js', 'web_lite_events', replaceRegexpAll(JSONExtractRaw(properties, '$lib'), '^"|"$', '') = 'posthog-node', 'node_events', replaceRegexpAll(JSONExtractRaw(properties, '$lib'), '^"|"$', '') = 'posthog-android', 'android_events', replaceRegexpAll(JSONExtractRaw(properties, '$lib'), '^"|"$', '') = 'posthog-flutter', 'flutter_events', replaceRegexpAll(JSONExtractRaw(properties, '$lib'), '^"|"$', '') = 'posthog-ios', 'ios_events', replaceRegexpAll(JSONExtractRaw(properties, '$lib'), '^"|"$', '') = 'posthog-go', 'go_events', replaceRegexpAll(JSONExtractRaw(properties, '$lib'), '^"|"$', '') = 'posthog-java', 'java_events', replaceRegexpAll(JSONExtractRaw(properties, '$lib'), '^"|"$', '') = 'posthog-react-native', 'react_native_events', replaceRegexpAll(JSONExtractRaw(properties, '$lib'), '^"|"$', '') = 'posthog-ruby', 'ruby_events', replaceRegexpAll(JSONExtractRaw(properties, '$lib'), '^"|"$', '') = 'posthog-python', 'python_events', replaceRegexpAll(JSONExtractRaw(properties, '$lib'), '^"|"$', '') = 'posthog-php', 'php_events', replaceRegexpAll(JSONExtractRaw(properties, '$lib'), '^"|"$', '') = 'posthog-dotnet', 'dotnet_events', replaceRegexpAll(JSONExtractRaw(properties, '$lib'), '^"|"$', '') = 'posthog-elixir', 'elixir_events', 'other') AS metric,
         count(1) as count
  FROM events
  WHERE timestamp BETWEEN '2022-01-10 12:00:00' AND '2022-01-10 23:59:59'
  GROUP BY team_id,
           metric
  HAVING metric != 'other'
  '''
# ---
# name: TestFeatureFlagsUsageReport.test_usage_report_decide_requests.10
  '''
  
  SELECT team_id,
         count(distinct session_id) as count
  FROM
    (SELECT any(team_id) as team_id,
            session_id
     FROM session_replay_events
     WHERE min_first_timestamp BETWEEN '2022-01-10 00:00:00' AND '2022-01-10 23:59:59'
     GROUP BY session_id
     HAVING ifNull(argMinMerge(snapshot_source), 'web') == 'mobile')
  WHERE session_id NOT IN
      (SELECT DISTINCT session_id
       FROM session_replay_events
       WHERE min_first_timestamp BETWEEN '2022-01-09 00:00:00' AND '2022-01-10 00:00:00'
       GROUP BY session_id)
  GROUP BY team_id
  '''
# ---
# name: TestFeatureFlagsUsageReport.test_usage_report_decide_requests.11
  '''
  
  SELECT team_id,
         sum(total_size) as bytes
  FROM
    (SELECT any(team_id) as team_id,
            session_id,
            sum(size) as total_size
     FROM session_replay_events
     WHERE min_first_timestamp BETWEEN '2022-01-10 00:00:00' AND '2022-01-10 23:59:59'
     GROUP BY session_id
     HAVING ifNull(argMinMerge(snapshot_source), 'web') == 'mobile')
  WHERE session_id NOT IN
      (SELECT DISTINCT session_id
       FROM session_replay_events
       WHERE min_first_timestamp BETWEEN '2022-01-09 00:00:00' AND '2022-01-10 00:00:00'
       GROUP BY session_id)
  GROUP BY team_id
  '''
# ---
# name: TestFeatureFlagsUsageReport.test_usage_report_decide_requests.12
  '''
  
  SELECT team_id,
         count(distinct session_id) as count
  FROM
    (SELECT any(team_id) as team_id,
            session_id
     FROM session_replay_events
     WHERE min_first_timestamp BETWEEN '2022-01-10 00:00:00' AND '2022-01-10 23:59:59'
     GROUP BY session_id
     HAVING (ifNull(argMinMerge(snapshot_source), '') == 'mobile'
             AND ifNull(argMinMerge(snapshot_library), '') IN ('posthog-ios',
                                                               'posthog-android',
                                                               'posthog-react-native')))
  WHERE session_id NOT IN
      (SELECT DISTINCT session_id
       FROM session_replay_events
       WHERE min_first_timestamp BETWEEN '2022-01-09 00:00:00' AND '2022-01-10 00:00:00'
       GROUP BY session_id)
  GROUP BY team_id
  '''
# ---
# name: TestFeatureFlagsUsageReport.test_usage_report_decide_requests.13
  '''
  
  SELECT distinct_id as team,
         sum(JSONExtractInt(properties, 'count')) as sum
  FROM events
  WHERE team_id = 99999
    AND event='decide usage'
    AND timestamp between '2022-01-10 00:00:00' AND '2022-01-10 23:59:59'
    AND has(['correct'], replaceRegexpAll(JSONExtractRaw(properties, 'token'), '^"|"$', ''))
  GROUP BY team
  '''
# ---
# name: TestFeatureFlagsUsageReport.test_usage_report_decide_requests.14
  '''
  
  SELECT distinct_id as team,
         sum(JSONExtractInt(properties, 'count')) as sum
  FROM events
  WHERE team_id = 99999
    AND event='local evaluation usage'
    AND timestamp between '2022-01-10 00:00:00' AND '2022-01-10 23:59:59'
    AND has(['correct'], replaceRegexpAll(JSONExtractRaw(properties, 'token'), '^"|"$', ''))
  GROUP BY team
  '''
# ---
# name: TestFeatureFlagsUsageReport.test_usage_report_decide_requests.15
  '''
  WITH JSONExtractInt(log_comment, 'team_id') as team_id,
       JSONExtractString(log_comment, 'query_type') as query_type,
       JSONExtractString(log_comment, 'access_method') as access_method
  SELECT team_id,
         sum(read_bytes) as count
  FROM clusterAllReplicas(posthog, system.query_log)
  WHERE (type = 'QueryFinish'
         OR type = 'ExceptionWhileProcessing')
    AND is_initial_query = 1
    AND query_start_time between '2022-01-10 00:00:00' AND '2022-01-10 23:59:59'
    AND access_method = ''
  GROUP BY team_id
  '''
# ---
# name: TestFeatureFlagsUsageReport.test_usage_report_decide_requests.16
  '''
  WITH JSONExtractInt(log_comment, 'team_id') as team_id,
       JSONExtractString(log_comment, 'query_type') as query_type,
       JSONExtractString(log_comment, 'access_method') as access_method
  SELECT team_id,
         sum(read_rows) as count
  FROM clusterAllReplicas(posthog, system.query_log)
  WHERE (type = 'QueryFinish'
         OR type = 'ExceptionWhileProcessing')
    AND is_initial_query = 1
    AND query_start_time between '2022-01-10 00:00:00' AND '2022-01-10 23:59:59'
    AND access_method = ''
  GROUP BY team_id
  '''
# ---
# name: TestFeatureFlagsUsageReport.test_usage_report_decide_requests.17
  '''
  WITH JSONExtractInt(log_comment, 'team_id') as team_id,
       JSONExtractString(log_comment, 'query_type') as query_type,
       JSONExtractString(log_comment, 'access_method') as access_method
  SELECT team_id,
         sum(query_duration_ms) as count
  FROM clusterAllReplicas(posthog, system.query_log)
  WHERE (type = 'QueryFinish'
         OR type = 'ExceptionWhileProcessing')
    AND is_initial_query = 1
    AND query_start_time between '2022-01-10 00:00:00' AND '2022-01-10 23:59:59'
    AND access_method = ''
  GROUP BY team_id
  '''
# ---
# name: TestFeatureFlagsUsageReport.test_usage_report_decide_requests.18
  '''
  WITH JSONExtractInt(log_comment, 'team_id') as team_id,
       JSONExtractString(log_comment, 'query_type') as query_type,
       JSONExtractString(log_comment, 'access_method') as access_method
  SELECT team_id,
         sum(read_bytes) as count
  FROM clusterAllReplicas(posthog, system.query_log)
  WHERE (type = 'QueryFinish'
         OR type = 'ExceptionWhileProcessing')
    AND is_initial_query = 1
    AND query_start_time between '2022-01-10 00:00:00' AND '2022-01-10 23:59:59'
    AND access_method = 'personal_api_key'
  GROUP BY team_id
  '''
# ---
# name: TestFeatureFlagsUsageReport.test_usage_report_decide_requests.19
  '''
  WITH JSONExtractInt(log_comment, 'team_id') as team_id,
       JSONExtractString(log_comment, 'query_type') as query_type,
       JSONExtractString(log_comment, 'access_method') as access_method
  SELECT team_id,
         sum(read_rows) as count
  FROM clusterAllReplicas(posthog, system.query_log)
  WHERE (type = 'QueryFinish'
         OR type = 'ExceptionWhileProcessing')
    AND is_initial_query = 1
    AND query_start_time between '2022-01-10 00:00:00' AND '2022-01-10 23:59:59'
    AND access_method = 'personal_api_key'
  GROUP BY team_id
  '''
# ---
# name: TestFeatureFlagsUsageReport.test_usage_report_decide_requests.2
  '''
  
  SELECT JSONExtractInt(log_comment, 'team_id') team_id,
         count(1) cnt,
         sum(read_bytes) read_bytes
  FROM clusterAllReplicas(posthog, system.query_log)
  WHERE type = 'QueryFinish'
    AND is_initial_query
    AND event_time between '2022-01-10 00:00:00' AND '2022-01-10 23:59:59'
    AND team_id > 0
    AND JSONExtractBool(log_comment, 'chargeable')
  GROUP BY team_id
  '''
# ---
# name: TestFeatureFlagsUsageReport.test_usage_report_decide_requests.20
  '''
  WITH JSONExtractInt(log_comment, 'team_id') as team_id,
       JSONExtractString(log_comment, 'query_type') as query_type,
       JSONExtractString(log_comment, 'access_method') as access_method
  SELECT team_id,
         sum(query_duration_ms) as count
  FROM clusterAllReplicas(posthog, system.query_log)
  WHERE (type = 'QueryFinish'
         OR type = 'ExceptionWhileProcessing')
    AND is_initial_query = 1
    AND query_start_time between '2022-01-10 00:00:00' AND '2022-01-10 23:59:59'
    AND access_method = 'personal_api_key'
  GROUP BY team_id
  '''
# ---
# name: TestFeatureFlagsUsageReport.test_usage_report_decide_requests.21
  '''
  WITH JSONExtractInt(log_comment, 'team_id') as team_id,
       JSONExtractString(log_comment, 'query_type') as query_type,
       JSONExtractString(log_comment, 'access_method') as access_method
  SELECT team_id,
         sum(read_bytes) as count
  FROM clusterAllReplicas(posthog, system.query_log)
  WHERE (type = 'QueryFinish'
         OR type = 'ExceptionWhileProcessing')
    AND is_initial_query = 1
    AND query_type IN (['EventsQuery'])
    AND query_start_time between '2022-01-10 00:00:00' AND '2022-01-10 23:59:59'
    AND access_method = ''
  GROUP BY team_id
  '''
# ---
# name: TestFeatureFlagsUsageReport.test_usage_report_decide_requests.22
  '''
  WITH JSONExtractInt(log_comment, 'team_id') as team_id,
       JSONExtractString(log_comment, 'query_type') as query_type,
       JSONExtractString(log_comment, 'access_method') as access_method
  SELECT team_id,
         sum(read_rows) as count
  FROM clusterAllReplicas(posthog, system.query_log)
  WHERE (type = 'QueryFinish'
         OR type = 'ExceptionWhileProcessing')
    AND is_initial_query = 1
    AND query_type IN (['EventsQuery'])
    AND query_start_time between '2022-01-10 00:00:00' AND '2022-01-10 23:59:59'
    AND access_method = ''
  GROUP BY team_id
  '''
# ---
# name: TestFeatureFlagsUsageReport.test_usage_report_decide_requests.23
  '''
  WITH JSONExtractInt(log_comment, 'team_id') as team_id,
       JSONExtractString(log_comment, 'query_type') as query_type,
       JSONExtractString(log_comment, 'access_method') as access_method
  SELECT team_id,
         sum(query_duration_ms) as count
  FROM clusterAllReplicas(posthog, system.query_log)
  WHERE (type = 'QueryFinish'
         OR type = 'ExceptionWhileProcessing')
    AND is_initial_query = 1
    AND query_type IN (['EventsQuery'])
    AND query_start_time between '2022-01-10 00:00:00' AND '2022-01-10 23:59:59'
    AND access_method = ''
  GROUP BY team_id
  '''
# ---
# name: TestFeatureFlagsUsageReport.test_usage_report_decide_requests.24
  '''
  WITH JSONExtractInt(log_comment, 'team_id') as team_id,
       JSONExtractString(log_comment, 'query_type') as query_type,
       JSONExtractString(log_comment, 'access_method') as access_method
  SELECT team_id,
         sum(read_bytes) as count
  FROM clusterAllReplicas(posthog, system.query_log)
  WHERE (type = 'QueryFinish'
         OR type = 'ExceptionWhileProcessing')
    AND is_initial_query = 1
    AND query_type IN (['EventsQuery'])
    AND query_start_time between '2022-01-10 00:00:00' AND '2022-01-10 23:59:59'
    AND access_method = 'personal_api_key'
  GROUP BY team_id
  '''
# ---
# name: TestFeatureFlagsUsageReport.test_usage_report_decide_requests.25
  '''
  WITH JSONExtractInt(log_comment, 'team_id') as team_id,
       JSONExtractString(log_comment, 'query_type') as query_type,
       JSONExtractString(log_comment, 'access_method') as access_method
  SELECT team_id,
         sum(read_rows) as count
  FROM clusterAllReplicas(posthog, system.query_log)
  WHERE (type = 'QueryFinish'
         OR type = 'ExceptionWhileProcessing')
    AND is_initial_query = 1
    AND query_type IN (['EventsQuery'])
    AND query_start_time between '2022-01-10 00:00:00' AND '2022-01-10 23:59:59'
    AND access_method = 'personal_api_key'
  GROUP BY team_id
  '''
# ---
# name: TestFeatureFlagsUsageReport.test_usage_report_decide_requests.26
  '''
  WITH JSONExtractInt(log_comment, 'team_id') as team_id,
       JSONExtractString(log_comment, 'query_type') as query_type,
       JSONExtractString(log_comment, 'access_method') as access_method
  SELECT team_id,
         sum(query_duration_ms) as count
  FROM clusterAllReplicas(posthog, system.query_log)
  WHERE (type = 'QueryFinish'
         OR type = 'ExceptionWhileProcessing')
    AND is_initial_query = 1
    AND query_type IN (['EventsQuery'])
    AND query_start_time between '2022-01-10 00:00:00' AND '2022-01-10 23:59:59'
    AND access_method = 'personal_api_key'
  GROUP BY team_id
  '''
# ---
# name: TestFeatureFlagsUsageReport.test_usage_report_decide_requests.27
  '''
  
  SELECT team_id,
         COUNT() as count
  FROM events
  WHERE event = 'survey sent'
    AND timestamp between '2022-01-10 00:00:00' AND '2022-01-10 23:59:59'
  GROUP BY team_id
  '''
# ---
# name: TestFeatureFlagsUsageReport.test_usage_report_decide_requests.28
  '''
  
  SELECT team_id,
         COUNT() as count
  FROM events
  WHERE event = '$exception'
    AND timestamp between '2022-01-10 00:00:00' AND '2022-01-10 23:59:59'
  GROUP BY team_id
  '''
# ---
# name: TestFeatureFlagsUsageReport.test_usage_report_decide_requests.29
  '''
  
  SELECT team_id,
         SUM(count) as count
  FROM app_metrics2
  WHERE app_source='hog_function'
    AND metric_name IN ('succeeded',
                        'failed')
    AND timestamp between '2022-01-10 00:00:00' AND '2022-01-10 23:59:59'
  GROUP BY team_id,
           metric_name
  '''
# ---
# name: TestFeatureFlagsUsageReport.test_usage_report_decide_requests.3
  '''
  
  SELECT team_id,
         count(distinct toDate(timestamp), event, cityHash64(distinct_id), cityHash64(uuid)) as count
  FROM events
  WHERE timestamp between '2022-01-10 00:00:00' AND '2022-01-10 12:00:00'
    AND event NOT IN ('$feature_flag_called',
                      'survey sent',
                      'survey shown',
                      'survey dismissed',
                      '$exception')
  GROUP BY team_id
  '''
# ---
# name: TestFeatureFlagsUsageReport.test_usage_report_decide_requests.30
  '''
  
  SELECT team_id,
         SUM(count) as count
  FROM app_metrics2
  WHERE app_source='hog_function'
    AND metric_name IN ('fetch')
    AND timestamp between '2022-01-10 00:00:00' AND '2022-01-10 23:59:59'
  GROUP BY team_id,
           metric_name
  '''
# ---
# name: TestFeatureFlagsUsageReport.test_usage_report_decide_requests.31
  '''
  
  SELECT team_id,
         COUNT() as count
  FROM events
  WHERE event LIKE '$ai_%'
    AND timestamp between '2022-01-10 00:00:00' AND '2022-01-10 23:59:59'
  GROUP BY team_id
  '''
# ---
# name: TestFeatureFlagsUsageReport.test_usage_report_decide_requests.4
  '''
  
  SELECT team_id,
         count(distinct toDate(timestamp), event, cityHash64(distinct_id), cityHash64(uuid)) as count
  FROM events
  WHERE timestamp between '2022-01-10 12:00:00' AND '2022-01-10 23:59:59'
    AND event NOT IN ('$feature_flag_called',
                      'survey sent',
                      'survey shown',
                      'survey dismissed',
                      '$exception')
  GROUP BY team_id
  '''
# ---
# name: TestFeatureFlagsUsageReport.test_usage_report_decide_requests.5
  '''
  
  SELECT team_id,
         count(distinct toDate(timestamp), event, cityHash64(distinct_id), cityHash64(uuid)) as count
  FROM events
  WHERE timestamp between '2022-01-10 00:00:00' AND '2022-01-10 12:00:00'
    AND event NOT IN ('$feature_flag_called',
                      'survey sent',
                      'survey shown',
                      'survey dismissed',
                      '$exception')
    AND person_mode IN ('full',
                        'force_upgrade')
  GROUP BY team_id
  '''
# ---
# name: TestFeatureFlagsUsageReport.test_usage_report_decide_requests.6
  '''
  
  SELECT team_id,
         count(distinct toDate(timestamp), event, cityHash64(distinct_id), cityHash64(uuid)) as count
  FROM events
  WHERE timestamp between '2022-01-10 12:00:00' AND '2022-01-10 23:59:59'
    AND event NOT IN ('$feature_flag_called',
                      'survey sent',
                      'survey shown',
                      'survey dismissed',
                      '$exception')
    AND person_mode IN ('full',
                        'force_upgrade')
  GROUP BY team_id
  '''
# ---
# name: TestFeatureFlagsUsageReport.test_usage_report_decide_requests.7
  '''
  
  SELECT team_id,
         count(1) as count
  FROM events
  WHERE timestamp between '2022-01-10 00:00:00' AND '2022-01-10 23:59:59'
    AND ($group_0 != ''
         OR $group_1 != ''
         OR $group_2 != ''
         OR $group_3 != ''
         OR $group_4 != '')
  GROUP BY team_id
  '''
# ---
# name: TestFeatureFlagsUsageReport.test_usage_report_decide_requests.8
  '''
  
  SELECT team_id,
         count(distinct session_id) as count
  FROM
    (SELECT any(team_id) as team_id,
            session_id
     FROM session_replay_events
     WHERE min_first_timestamp BETWEEN '2022-01-10 00:00:00' AND '2022-01-10 23:59:59'
     GROUP BY session_id
     HAVING ifNull(argMinMerge(snapshot_source), 'web') == 'web')
  WHERE session_id NOT IN
      (SELECT DISTINCT session_id
       FROM session_replay_events
       WHERE min_first_timestamp BETWEEN '2022-01-09 00:00:00' AND '2022-01-10 00:00:00'
       GROUP BY session_id)
  GROUP BY team_id
  '''
# ---
# name: TestFeatureFlagsUsageReport.test_usage_report_decide_requests.9
  '''
  
  SELECT team_id,
         sum(total_size) as bytes
  FROM
    (SELECT any(team_id) as team_id,
            session_id,
            sum(size) as total_size
     FROM session_replay_events
     WHERE min_first_timestamp BETWEEN '2022-01-10 00:00:00' AND '2022-01-10 23:59:59'
     GROUP BY session_id
     HAVING ifNull(argMinMerge(snapshot_source), 'web') == 'web')
  WHERE session_id NOT IN
      (SELECT DISTINCT session_id
       FROM session_replay_events
       WHERE min_first_timestamp BETWEEN '2022-01-09 00:00:00' AND '2022-01-10 00:00:00'
       GROUP BY session_id)
  GROUP BY team_id
  '''
# ---
