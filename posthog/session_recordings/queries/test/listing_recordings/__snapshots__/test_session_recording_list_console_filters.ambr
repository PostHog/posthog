# serializer version: 1
# name: TestSessionRecordingListConsoleFilters.test_filter_for_recordings_by_console_text_0_OR_operand_message_4_matches_in_warn_and_error
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id) AS `any(s.team_id)`,
         any(s.distinct_id) AS `any(s.distinct_id)`,
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count) AS click_count,
         sum(s.keypress_count) AS keypress_count,
         sum(s.mouse_activity_count) AS mouse_activity_count,
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count,
         greaterOrEquals(max(toTimeZone(s._timestamp, 'UTC')), toDateTime64('2021-01-21 19:55:00.000000', 6, 'UTC')) AS ongoing,
         round(multiply(divide(plus(plus(plus(divide(sum(s.active_milliseconds), 1000), sum(s.click_count)), sum(s.keypress_count)), sum(s.console_error_count)), plus(plus(plus(plus(sum(s.mouse_activity_count), dateDiff('SECOND', start_time, end_time)), sum(s.console_error_count)), sum(s.console_log_count)), sum(s.console_warn_count))), 100), 2) AS activity_score
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 99999), greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-31 20:00:00.000000', 6, 'UTC')), greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-18 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-21 20:00:00.000000', 6, 'UTC')), in(s.session_id,
                                                                                                                                                                                                                                                                                                                                                                                           (SELECT console_logs_log_entries.log_source_id AS log_source_id
                                                                                                                                                                                                                                                                                                                                                                                            FROM
                                                                                                                                                                                                                                                                                                                                                                                              (SELECT log_entries.log_source_id AS log_source_id, log_entries.level AS level, log_entries.message AS message
                                                                                                                                                                                                                                                                                                                                                                                               FROM log_entries
                                                                                                                                                                                                                                                                                                                                                                                               WHERE and(equals(log_entries.team_id, 99999), equals(log_entries.log_source, 'session_replay'))) AS console_logs_log_entries
                                                                                                                                                                                                                                                                                                                                                                                            WHERE or(in(console_logs_log_entries.level, tuple('warn', 'error')), ilike(toString(console_logs_log_entries.message), '%message 4%')))))
  GROUP BY s.session_id
  HAVING 1
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=4000000,
                    max_expanded_ast_elements=4000000,
                    max_bytes_before_external_group_by=0,
                    transform_null_in=1,
                    optimize_min_equality_disjunction_chain_length=4294967295,
                    allow_experimental_join_condition=1
  '''
# ---
# name: TestSessionRecordingListConsoleFilters.test_filter_for_recordings_by_console_text_1_AND_operand_message_4_matches_in_log_warn_and_error
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id) AS `any(s.team_id)`,
         any(s.distinct_id) AS `any(s.distinct_id)`,
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count) AS click_count,
         sum(s.keypress_count) AS keypress_count,
         sum(s.mouse_activity_count) AS mouse_activity_count,
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count,
         greaterOrEquals(max(toTimeZone(s._timestamp, 'UTC')), toDateTime64('2021-01-21 19:55:00.000000', 6, 'UTC')) AS ongoing,
         round(multiply(divide(plus(plus(plus(divide(sum(s.active_milliseconds), 1000), sum(s.click_count)), sum(s.keypress_count)), sum(s.console_error_count)), plus(plus(plus(plus(sum(s.mouse_activity_count), dateDiff('SECOND', start_time, end_time)), sum(s.console_error_count)), sum(s.console_log_count)), sum(s.console_warn_count))), 100), 2) AS activity_score
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 99999), greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-31 20:00:00.000000', 6, 'UTC')), greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-18 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-21 20:00:00.000000', 6, 'UTC')), in(s.session_id,
                                                                                                                                                                                                                                                                                                                                                                                           (SELECT console_logs_log_entries.log_source_id AS log_source_id
                                                                                                                                                                                                                                                                                                                                                                                            FROM
                                                                                                                                                                                                                                                                                                                                                                                              (SELECT log_entries.log_source_id AS log_source_id, log_entries.level AS level, log_entries.message AS message
                                                                                                                                                                                                                                                                                                                                                                                               FROM log_entries
                                                                                                                                                                                                                                                                                                                                                                                               WHERE and(equals(log_entries.team_id, 99999), equals(log_entries.log_source, 'session_replay'))) AS console_logs_log_entries
                                                                                                                                                                                                                                                                                                                                                                                            WHERE and(in(console_logs_log_entries.level, tuple('warn', 'error')), ilike(toString(console_logs_log_entries.message), '%message 4%')))))
  GROUP BY s.session_id
  HAVING 1
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=4000000,
                    max_expanded_ast_elements=4000000,
                    max_bytes_before_external_group_by=0,
                    transform_null_in=1,
                    optimize_min_equality_disjunction_chain_length=4294967295,
                    allow_experimental_join_condition=1
  '''
# ---
# name: TestSessionRecordingListConsoleFilters.test_filter_for_recordings_by_console_text_2_AND_operand_message_5_matches_only_in_warn
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id) AS `any(s.team_id)`,
         any(s.distinct_id) AS `any(s.distinct_id)`,
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count) AS click_count,
         sum(s.keypress_count) AS keypress_count,
         sum(s.mouse_activity_count) AS mouse_activity_count,
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count,
         greaterOrEquals(max(toTimeZone(s._timestamp, 'UTC')), toDateTime64('2021-01-21 19:55:00.000000', 6, 'UTC')) AS ongoing,
         round(multiply(divide(plus(plus(plus(divide(sum(s.active_milliseconds), 1000), sum(s.click_count)), sum(s.keypress_count)), sum(s.console_error_count)), plus(plus(plus(plus(sum(s.mouse_activity_count), dateDiff('SECOND', start_time, end_time)), sum(s.console_error_count)), sum(s.console_log_count)), sum(s.console_warn_count))), 100), 2) AS activity_score
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 99999), greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-31 20:00:00.000000', 6, 'UTC')), greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-18 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-21 20:00:00.000000', 6, 'UTC')), in(s.session_id,
                                                                                                                                                                                                                                                                                                                                                                                           (SELECT console_logs_log_entries.log_source_id AS log_source_id
                                                                                                                                                                                                                                                                                                                                                                                            FROM
                                                                                                                                                                                                                                                                                                                                                                                              (SELECT log_entries.log_source_id AS log_source_id, log_entries.level AS level, log_entries.message AS message
                                                                                                                                                                                                                                                                                                                                                                                               FROM log_entries
                                                                                                                                                                                                                                                                                                                                                                                               WHERE and(equals(log_entries.team_id, 99999), equals(log_entries.log_source, 'session_replay'))) AS console_logs_log_entries
                                                                                                                                                                                                                                                                                                                                                                                            WHERE and(in(console_logs_log_entries.level, tuple('warn', 'error')), ilike(toString(console_logs_log_entries.message), '%message 5%')))))
  GROUP BY s.session_id
  HAVING 1
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=4000000,
                    max_expanded_ast_elements=4000000,
                    max_bytes_before_external_group_by=0,
                    transform_null_in=1,
                    optimize_min_equality_disjunction_chain_length=4294967295,
                    allow_experimental_join_condition=1
  '''
# ---
# name: TestSessionRecordingListConsoleFilters.test_filter_for_recordings_by_console_text_3_AND_operand_message_5_does_not_match_log_level_info
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id) AS `any(s.team_id)`,
         any(s.distinct_id) AS `any(s.distinct_id)`,
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count) AS click_count,
         sum(s.keypress_count) AS keypress_count,
         sum(s.mouse_activity_count) AS mouse_activity_count,
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count,
         greaterOrEquals(max(toTimeZone(s._timestamp, 'UTC')), toDateTime64('2021-01-21 19:55:00.000000', 6, 'UTC')) AS ongoing,
         round(multiply(divide(plus(plus(plus(divide(sum(s.active_milliseconds), 1000), sum(s.click_count)), sum(s.keypress_count)), sum(s.console_error_count)), plus(plus(plus(plus(sum(s.mouse_activity_count), dateDiff('SECOND', start_time, end_time)), sum(s.console_error_count)), sum(s.console_log_count)), sum(s.console_warn_count))), 100), 2) AS activity_score
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 99999), greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-31 20:00:00.000000', 6, 'UTC')), greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-18 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-21 20:00:00.000000', 6, 'UTC')), in(s.session_id,
                                                                                                                                                                                                                                                                                                                                                                                           (SELECT console_logs_log_entries.log_source_id AS log_source_id
                                                                                                                                                                                                                                                                                                                                                                                            FROM
                                                                                                                                                                                                                                                                                                                                                                                              (SELECT log_entries.log_source_id AS log_source_id, log_entries.level AS level, log_entries.message AS message
                                                                                                                                                                                                                                                                                                                                                                                               FROM log_entries
                                                                                                                                                                                                                                                                                                                                                                                               WHERE and(equals(log_entries.team_id, 99999), equals(log_entries.log_source, 'session_replay'))) AS console_logs_log_entries
                                                                                                                                                                                                                                                                                                                                                                                            WHERE and(ifNull(equals(console_logs_log_entries.level, 'info'), 0), ilike(toString(console_logs_log_entries.message), '%message 5%')))))
  GROUP BY s.session_id
  HAVING 1
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=4000000,
                    max_expanded_ast_elements=4000000,
                    max_bytes_before_external_group_by=0,
                    transform_null_in=1,
                    optimize_min_equality_disjunction_chain_length=4294967295,
                    allow_experimental_join_condition=1
  '''
# ---
# name: TestSessionRecordingListConsoleFilters.test_filter_for_recordings_by_snapshot_source
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id) AS `any(s.team_id)`,
         any(s.distinct_id) AS `any(s.distinct_id)`,
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count) AS click_count,
         sum(s.keypress_count) AS keypress_count,
         sum(s.mouse_activity_count) AS mouse_activity_count,
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count,
         greaterOrEquals(max(toTimeZone(s._timestamp, 'UTC')), toDateTime64('today', 6, 'UTC')) AS ongoing,
         round(multiply(divide(plus(plus(plus(divide(sum(s.active_milliseconds), 1000), sum(s.click_count)), sum(s.keypress_count)), sum(s.console_error_count)), plus(plus(plus(plus(sum(s.mouse_activity_count), dateDiff('SECOND', start_time, end_time)), sum(s.console_error_count)), sum(s.console_log_count)), sum(s.console_warn_count))), 100), 2) AS activity_score
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 99999), greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2025-07-26 21:38:55.150661', 6, 'UTC')), greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2025-08-13 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('today', 6, 'UTC')))
  GROUP BY s.session_id
  HAVING ifNull(equals(argMinMerge(s.snapshot_source), 'web'), 0)
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=4000000,
                    max_expanded_ast_elements=4000000,
                    max_bytes_before_external_group_by=0,
                    transform_null_in=1,
                    optimize_min_equality_disjunction_chain_length=4294967295,
                    allow_experimental_join_condition=1
  '''
# ---
# name: TestSessionRecordingListConsoleFilters.test_filter_for_recordings_by_snapshot_source.1
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id) AS `any(s.team_id)`,
         any(s.distinct_id) AS `any(s.distinct_id)`,
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count) AS click_count,
         sum(s.keypress_count) AS keypress_count,
         sum(s.mouse_activity_count) AS mouse_activity_count,
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count,
         greaterOrEquals(max(toTimeZone(s._timestamp, 'UTC')), toDateTime64('today', 6, 'UTC')) AS ongoing,
         round(multiply(divide(plus(plus(plus(divide(sum(s.active_milliseconds), 1000), sum(s.click_count)), sum(s.keypress_count)), sum(s.console_error_count)), plus(plus(plus(plus(sum(s.mouse_activity_count), dateDiff('SECOND', start_time, end_time)), sum(s.console_error_count)), sum(s.console_log_count)), sum(s.console_warn_count))), 100), 2) AS activity_score
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 99999), greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2025-07-26 21:38:55.286580', 6, 'UTC')), greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2025-08-13 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('today', 6, 'UTC')))
  GROUP BY s.session_id
  HAVING ifNull(equals(argMinMerge(s.snapshot_source), 'mobile'), 0)
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=4000000,
                    max_expanded_ast_elements=4000000,
                    max_bytes_before_external_group_by=0,
                    transform_null_in=1,
                    optimize_min_equality_disjunction_chain_length=4294967295,
                    allow_experimental_join_condition=1
  '''
# ---
# name: TestSessionRecordingListConsoleFilters.test_filter_for_recordings_with_console_errors
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id) AS `any(s.team_id)`,
         any(s.distinct_id) AS `any(s.distinct_id)`,
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count) AS click_count,
         sum(s.keypress_count) AS keypress_count,
         sum(s.mouse_activity_count) AS mouse_activity_count,
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count,
         greaterOrEquals(max(toTimeZone(s._timestamp, 'UTC')), toDateTime64('2021-01-21 19:55:00.000000', 6, 'UTC')) AS ongoing,
         round(multiply(divide(plus(plus(plus(divide(sum(s.active_milliseconds), 1000), sum(s.click_count)), sum(s.keypress_count)), sum(s.console_error_count)), plus(plus(plus(plus(sum(s.mouse_activity_count), dateDiff('SECOND', start_time, end_time)), sum(s.console_error_count)), sum(s.console_log_count)), sum(s.console_warn_count))), 100), 2) AS activity_score
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 99999), greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-31 20:00:00.000000', 6, 'UTC')), greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-18 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-21 20:00:00.000000', 6, 'UTC')), in(s.session_id,
                                                                                                                                                                                                                                                                                                                                                                                           (SELECT console_logs_log_entries.log_source_id AS log_source_id
                                                                                                                                                                                                                                                                                                                                                                                            FROM
                                                                                                                                                                                                                                                                                                                                                                                              (SELECT log_entries.log_source_id AS log_source_id, log_entries.level AS level
                                                                                                                                                                                                                                                                                                                                                                                               FROM log_entries
                                                                                                                                                                                                                                                                                                                                                                                               WHERE and(equals(log_entries.team_id, 99999), equals(log_entries.log_source, 'session_replay'))) AS console_logs_log_entries
                                                                                                                                                                                                                                                                                                                                                                                            WHERE ifNull(equals(console_logs_log_entries.level, 'error'), 0))))
  GROUP BY s.session_id
  HAVING 1
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=4000000,
                    max_expanded_ast_elements=4000000,
                    max_bytes_before_external_group_by=0,
                    transform_null_in=1,
                    optimize_min_equality_disjunction_chain_length=4294967295,
                    allow_experimental_join_condition=1
  '''
# ---
# name: TestSessionRecordingListConsoleFilters.test_filter_for_recordings_with_console_errors.1
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id) AS `any(s.team_id)`,
         any(s.distinct_id) AS `any(s.distinct_id)`,
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count) AS click_count,
         sum(s.keypress_count) AS keypress_count,
         sum(s.mouse_activity_count) AS mouse_activity_count,
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count,
         greaterOrEquals(max(toTimeZone(s._timestamp, 'UTC')), toDateTime64('2021-01-21 19:55:00.000000', 6, 'UTC')) AS ongoing,
         round(multiply(divide(plus(plus(plus(divide(sum(s.active_milliseconds), 1000), sum(s.click_count)), sum(s.keypress_count)), sum(s.console_error_count)), plus(plus(plus(plus(sum(s.mouse_activity_count), dateDiff('SECOND', start_time, end_time)), sum(s.console_error_count)), sum(s.console_log_count)), sum(s.console_warn_count))), 100), 2) AS activity_score
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 99999), greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-31 20:00:00.000000', 6, 'UTC')), greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-18 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-21 20:00:00.000000', 6, 'UTC')), in(s.session_id,
                                                                                                                                                                                                                                                                                                                                                                                           (SELECT console_logs_log_entries.log_source_id AS log_source_id
                                                                                                                                                                                                                                                                                                                                                                                            FROM
                                                                                                                                                                                                                                                                                                                                                                                              (SELECT log_entries.log_source_id AS log_source_id, log_entries.level AS level
                                                                                                                                                                                                                                                                                                                                                                                               FROM log_entries
                                                                                                                                                                                                                                                                                                                                                                                               WHERE and(equals(log_entries.team_id, 99999), equals(log_entries.log_source, 'session_replay'))) AS console_logs_log_entries
                                                                                                                                                                                                                                                                                                                                                                                            WHERE ifNull(equals(console_logs_log_entries.level, 'info'), 0))))
  GROUP BY s.session_id
  HAVING 1
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=4000000,
                    max_expanded_ast_elements=4000000,
                    max_bytes_before_external_group_by=0,
                    transform_null_in=1,
                    optimize_min_equality_disjunction_chain_length=4294967295,
                    allow_experimental_join_condition=1
  '''
# ---
# name: TestSessionRecordingListConsoleFilters.test_filter_for_recordings_with_console_logs
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id) AS `any(s.team_id)`,
         any(s.distinct_id) AS `any(s.distinct_id)`,
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count) AS click_count,
         sum(s.keypress_count) AS keypress_count,
         sum(s.mouse_activity_count) AS mouse_activity_count,
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count,
         greaterOrEquals(max(toTimeZone(s._timestamp, 'UTC')), toDateTime64('2021-01-21 19:55:00.000000', 6, 'UTC')) AS ongoing,
         round(multiply(divide(plus(plus(plus(divide(sum(s.active_milliseconds), 1000), sum(s.click_count)), sum(s.keypress_count)), sum(s.console_error_count)), plus(plus(plus(plus(sum(s.mouse_activity_count), dateDiff('SECOND', start_time, end_time)), sum(s.console_error_count)), sum(s.console_log_count)), sum(s.console_warn_count))), 100), 2) AS activity_score
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 99999), greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-31 20:00:00.000000', 6, 'UTC')), greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-18 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-21 20:00:00.000000', 6, 'UTC')), in(s.session_id,
                                                                                                                                                                                                                                                                                                                                                                                           (SELECT console_logs_log_entries.log_source_id AS log_source_id
                                                                                                                                                                                                                                                                                                                                                                                            FROM
                                                                                                                                                                                                                                                                                                                                                                                              (SELECT log_entries.log_source_id AS log_source_id, log_entries.level AS level
                                                                                                                                                                                                                                                                                                                                                                                               FROM log_entries
                                                                                                                                                                                                                                                                                                                                                                                               WHERE and(equals(log_entries.team_id, 99999), equals(log_entries.log_source, 'session_replay'))) AS console_logs_log_entries
                                                                                                                                                                                                                                                                                                                                                                                            WHERE ifNull(equals(console_logs_log_entries.level, 'info'), 0))))
  GROUP BY s.session_id
  HAVING 1
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=4000000,
                    max_expanded_ast_elements=4000000,
                    max_bytes_before_external_group_by=0,
                    transform_null_in=1,
                    optimize_min_equality_disjunction_chain_length=4294967295,
                    allow_experimental_join_condition=1
  '''
# ---
# name: TestSessionRecordingListConsoleFilters.test_filter_for_recordings_with_console_logs.1
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id) AS `any(s.team_id)`,
         any(s.distinct_id) AS `any(s.distinct_id)`,
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count) AS click_count,
         sum(s.keypress_count) AS keypress_count,
         sum(s.mouse_activity_count) AS mouse_activity_count,
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count,
         greaterOrEquals(max(toTimeZone(s._timestamp, 'UTC')), toDateTime64('2021-01-21 19:55:00.000000', 6, 'UTC')) AS ongoing,
         round(multiply(divide(plus(plus(plus(divide(sum(s.active_milliseconds), 1000), sum(s.click_count)), sum(s.keypress_count)), sum(s.console_error_count)), plus(plus(plus(plus(sum(s.mouse_activity_count), dateDiff('SECOND', start_time, end_time)), sum(s.console_error_count)), sum(s.console_log_count)), sum(s.console_warn_count))), 100), 2) AS activity_score
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 99999), greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-31 20:00:00.000000', 6, 'UTC')), greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-18 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-21 20:00:00.000000', 6, 'UTC')), in(s.session_id,
                                                                                                                                                                                                                                                                                                                                                                                           (SELECT console_logs_log_entries.log_source_id AS log_source_id
                                                                                                                                                                                                                                                                                                                                                                                            FROM
                                                                                                                                                                                                                                                                                                                                                                                              (SELECT log_entries.log_source_id AS log_source_id, log_entries.level AS level
                                                                                                                                                                                                                                                                                                                                                                                               FROM log_entries
                                                                                                                                                                                                                                                                                                                                                                                               WHERE and(equals(log_entries.team_id, 99999), equals(log_entries.log_source, 'session_replay'))) AS console_logs_log_entries
                                                                                                                                                                                                                                                                                                                                                                                            WHERE ifNull(equals(console_logs_log_entries.level, 'warn'), 0))))
  GROUP BY s.session_id
  HAVING 1
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=4000000,
                    max_expanded_ast_elements=4000000,
                    max_bytes_before_external_group_by=0,
                    transform_null_in=1,
                    optimize_min_equality_disjunction_chain_length=4294967295,
                    allow_experimental_join_condition=1
  '''
# ---
# name: TestSessionRecordingListConsoleFilters.test_filter_for_recordings_with_console_warns
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id) AS `any(s.team_id)`,
         any(s.distinct_id) AS `any(s.distinct_id)`,
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count) AS click_count,
         sum(s.keypress_count) AS keypress_count,
         sum(s.mouse_activity_count) AS mouse_activity_count,
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count,
         greaterOrEquals(max(toTimeZone(s._timestamp, 'UTC')), toDateTime64('2021-01-21 19:55:00.000000', 6, 'UTC')) AS ongoing,
         round(multiply(divide(plus(plus(plus(divide(sum(s.active_milliseconds), 1000), sum(s.click_count)), sum(s.keypress_count)), sum(s.console_error_count)), plus(plus(plus(plus(sum(s.mouse_activity_count), dateDiff('SECOND', start_time, end_time)), sum(s.console_error_count)), sum(s.console_log_count)), sum(s.console_warn_count))), 100), 2) AS activity_score
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 99999), greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-31 20:00:00.000000', 6, 'UTC')), greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-18 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-21 20:00:00.000000', 6, 'UTC')), in(s.session_id,
                                                                                                                                                                                                                                                                                                                                                                                           (SELECT console_logs_log_entries.log_source_id AS log_source_id
                                                                                                                                                                                                                                                                                                                                                                                            FROM
                                                                                                                                                                                                                                                                                                                                                                                              (SELECT log_entries.log_source_id AS log_source_id, log_entries.level AS level
                                                                                                                                                                                                                                                                                                                                                                                               FROM log_entries
                                                                                                                                                                                                                                                                                                                                                                                               WHERE and(equals(log_entries.team_id, 99999), equals(log_entries.log_source, 'session_replay'))) AS console_logs_log_entries
                                                                                                                                                                                                                                                                                                                                                                                            WHERE ifNull(equals(console_logs_log_entries.level, 'warn'), 0))))
  GROUP BY s.session_id
  HAVING 1
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=4000000,
                    max_expanded_ast_elements=4000000,
                    max_bytes_before_external_group_by=0,
                    transform_null_in=1,
                    optimize_min_equality_disjunction_chain_length=4294967295,
                    allow_experimental_join_condition=1
  '''
# ---
# name: TestSessionRecordingListConsoleFilters.test_filter_for_recordings_with_console_warns.1
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id) AS `any(s.team_id)`,
         any(s.distinct_id) AS `any(s.distinct_id)`,
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count) AS click_count,
         sum(s.keypress_count) AS keypress_count,
         sum(s.mouse_activity_count) AS mouse_activity_count,
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count,
         greaterOrEquals(max(toTimeZone(s._timestamp, 'UTC')), toDateTime64('2021-01-21 19:55:00.000000', 6, 'UTC')) AS ongoing,
         round(multiply(divide(plus(plus(plus(divide(sum(s.active_milliseconds), 1000), sum(s.click_count)), sum(s.keypress_count)), sum(s.console_error_count)), plus(plus(plus(plus(sum(s.mouse_activity_count), dateDiff('SECOND', start_time, end_time)), sum(s.console_error_count)), sum(s.console_log_count)), sum(s.console_warn_count))), 100), 2) AS activity_score
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 99999), greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-31 20:00:00.000000', 6, 'UTC')), greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-18 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-21 20:00:00.000000', 6, 'UTC')), in(s.session_id,
                                                                                                                                                                                                                                                                                                                                                                                           (SELECT console_logs_log_entries.log_source_id AS log_source_id
                                                                                                                                                                                                                                                                                                                                                                                            FROM
                                                                                                                                                                                                                                                                                                                                                                                              (SELECT log_entries.log_source_id AS log_source_id, log_entries.level AS level
                                                                                                                                                                                                                                                                                                                                                                                               FROM log_entries
                                                                                                                                                                                                                                                                                                                                                                                               WHERE and(equals(log_entries.team_id, 99999), equals(log_entries.log_source, 'session_replay'))) AS console_logs_log_entries
                                                                                                                                                                                                                                                                                                                                                                                            WHERE ifNull(equals(console_logs_log_entries.level, 'info'), 0))))
  GROUP BY s.session_id
  HAVING 1
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=4000000,
                    max_expanded_ast_elements=4000000,
                    max_bytes_before_external_group_by=0,
                    transform_null_in=1,
                    optimize_min_equality_disjunction_chain_length=4294967295,
                    allow_experimental_join_condition=1
  '''
# ---
# name: TestSessionRecordingListConsoleFilters.test_filter_for_recordings_with_mixed_console_counts
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id) AS `any(s.team_id)`,
         any(s.distinct_id) AS `any(s.distinct_id)`,
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count) AS click_count,
         sum(s.keypress_count) AS keypress_count,
         sum(s.mouse_activity_count) AS mouse_activity_count,
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count,
         greaterOrEquals(max(toTimeZone(s._timestamp, 'UTC')), toDateTime64('2021-01-21 19:55:00.000000', 6, 'UTC')) AS ongoing,
         round(multiply(divide(plus(plus(plus(divide(sum(s.active_milliseconds), 1000), sum(s.click_count)), sum(s.keypress_count)), sum(s.console_error_count)), plus(plus(plus(plus(sum(s.mouse_activity_count), dateDiff('SECOND', start_time, end_time)), sum(s.console_error_count)), sum(s.console_log_count)), sum(s.console_warn_count))), 100), 2) AS activity_score
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 99999), greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-31 20:00:00.000000', 6, 'UTC')), greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-18 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-21 20:00:00.000000', 6, 'UTC')), in(s.session_id,
                                                                                                                                                                                                                                                                                                                                                                                           (SELECT console_logs_log_entries.log_source_id AS log_source_id
                                                                                                                                                                                                                                                                                                                                                                                            FROM
                                                                                                                                                                                                                                                                                                                                                                                              (SELECT log_entries.log_source_id AS log_source_id, log_entries.level AS level
                                                                                                                                                                                                                                                                                                                                                                                               FROM log_entries
                                                                                                                                                                                                                                                                                                                                                                                               WHERE and(equals(log_entries.team_id, 99999), equals(log_entries.log_source, 'session_replay'))) AS console_logs_log_entries
                                                                                                                                                                                                                                                                                                                                                                                            WHERE in(console_logs_log_entries.level, tuple('warn', 'error')))))
  GROUP BY s.session_id
  HAVING 1
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=4000000,
                    max_expanded_ast_elements=4000000,
                    max_bytes_before_external_group_by=0,
                    transform_null_in=1,
                    optimize_min_equality_disjunction_chain_length=4294967295,
                    allow_experimental_join_condition=1
  '''
# ---
# name: TestSessionRecordingListConsoleFilters.test_filter_for_recordings_with_mixed_console_counts.1
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id) AS `any(s.team_id)`,
         any(s.distinct_id) AS `any(s.distinct_id)`,
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count) AS click_count,
         sum(s.keypress_count) AS keypress_count,
         sum(s.mouse_activity_count) AS mouse_activity_count,
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count,
         greaterOrEquals(max(toTimeZone(s._timestamp, 'UTC')), toDateTime64('2021-01-21 19:55:00.000000', 6, 'UTC')) AS ongoing,
         round(multiply(divide(plus(plus(plus(divide(sum(s.active_milliseconds), 1000), sum(s.click_count)), sum(s.keypress_count)), sum(s.console_error_count)), plus(plus(plus(plus(sum(s.mouse_activity_count), dateDiff('SECOND', start_time, end_time)), sum(s.console_error_count)), sum(s.console_log_count)), sum(s.console_warn_count))), 100), 2) AS activity_score
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 99999), greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-31 20:00:00.000000', 6, 'UTC')), greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-18 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-21 20:00:00.000000', 6, 'UTC')), in(s.session_id,
                                                                                                                                                                                                                                                                                                                                                                                           (SELECT console_logs_log_entries.log_source_id AS log_source_id
                                                                                                                                                                                                                                                                                                                                                                                            FROM
                                                                                                                                                                                                                                                                                                                                                                                              (SELECT log_entries.log_source_id AS log_source_id, log_entries.level AS level
                                                                                                                                                                                                                                                                                                                                                                                               FROM log_entries
                                                                                                                                                                                                                                                                                                                                                                                               WHERE and(equals(log_entries.team_id, 99999), equals(log_entries.log_source, 'session_replay'))) AS console_logs_log_entries
                                                                                                                                                                                                                                                                                                                                                                                            WHERE ifNull(equals(console_logs_log_entries.level, 'info'), 0))))
  GROUP BY s.session_id
  HAVING 1
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=4000000,
                    max_expanded_ast_elements=4000000,
                    max_bytes_before_external_group_by=0,
                    transform_null_in=1,
                    optimize_min_equality_disjunction_chain_length=4294967295,
                    allow_experimental_join_condition=1
  '''
# ---
