# name: TestClickhouseSessionRecordingsListFromSessionReplay.test_action_filter
  '
  
  SELECT s.session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(s.min_first_timestamp) as start_time,
         max(s.max_last_timestamp) as end_time,
         dateDiff('SECOND', start_time, end_time) as duration,
         argMinMerge(s.first_url) as first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         sum(s.active_milliseconds)/1000 as active_seconds,
         duration-active_seconds as inactive_seconds,
         sum(s.console_log_count) as console_log_count,
         sum(s.console_warn_count) as console_warn_count,
         sum(s.console_error_count) as console_error_count
  FROM session_replay_events s
  WHERE s.team_id = 2
    AND s.min_first_timestamp >= '2022-12-14 00:00:00'
    AND s.min_first_timestamp >= '2022-12-28 00:00:00'
    AND s.max_last_timestamp <= '2023-01-04 00:00:00'
    AND s.session_id in
      (select `$session_id` as session_id
       from
         (SELECT groupUniqArray(event) as event_names,
                 `$session_id`
          FROM events e PREWHERE team_id = 2
          AND e.timestamp >= '2022-12-14 00:00:00'
          AND e.timestamp <= now()
          WHERE notEmpty(`$session_id`)
            AND timestamp >= '2022-12-27 12:00:00'
            AND timestamp <= '2023-01-04 12:00:00'
            AND (((event = 'custom-event'
                   AND (has(['Firefox'], replaceRegexpAll(JSONExtractRaw(properties, '$browser'), '^"|"$', ''))
                        AND has(['test_action_filter-session-one'], "$session_id")
                        AND has(['test_action_filter-window-id'], "$window_id")))))
          GROUP BY `$session_id`
          HAVING 1=1
          AND hasAll(event_names, ['custom-event'])) as session_events_sub_query)
  GROUP BY session_id
  HAVING 1=1
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0
  '
---
# name: TestClickhouseSessionRecordingsListFromSessionReplay.test_action_filter.1
  '
  
  SELECT s.session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(s.min_first_timestamp) as start_time,
         max(s.max_last_timestamp) as end_time,
         dateDiff('SECOND', start_time, end_time) as duration,
         argMinMerge(s.first_url) as first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         sum(s.active_milliseconds)/1000 as active_seconds,
         duration-active_seconds as inactive_seconds,
         sum(s.console_log_count) as console_log_count,
         sum(s.console_warn_count) as console_warn_count,
         sum(s.console_error_count) as console_error_count
  FROM session_replay_events s
  WHERE s.team_id = 2
    AND s.min_first_timestamp >= '2022-12-14 00:00:00'
    AND s.min_first_timestamp >= '2022-12-28 00:00:00'
    AND s.max_last_timestamp <= '2023-01-04 00:00:00'
    AND s.session_id in
      (select `$session_id` as session_id
       from
         (SELECT groupUniqArray(event) as event_names,
                 `$session_id`
          FROM events e PREWHERE team_id = 2
          AND e.timestamp >= '2022-12-14 00:00:00'
          AND e.timestamp <= now()
          WHERE notEmpty(`$session_id`)
            AND timestamp >= '2022-12-27 12:00:00'
            AND timestamp <= '2023-01-04 12:00:00'
            AND (((event = 'custom-event'
                   AND (has(['test_action_filter-session-one'], "$session_id")
                        AND has(['test_action_filter-window-id'], "$window_id")))))
          GROUP BY `$session_id`
          HAVING 1=1
          AND hasAll(event_names, ['custom-event'])) as session_events_sub_query)
  GROUP BY session_id
  HAVING 1=1
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0
  '
---
# name: TestClickhouseSessionRecordingsListFromSessionReplay.test_action_filter.2
  '
  
  SELECT s.session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(s.min_first_timestamp) as start_time,
         max(s.max_last_timestamp) as end_time,
         dateDiff('SECOND', start_time, end_time) as duration,
         argMinMerge(s.first_url) as first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         sum(s.active_milliseconds)/1000 as active_seconds,
         duration-active_seconds as inactive_seconds,
         sum(s.console_log_count) as console_log_count,
         sum(s.console_warn_count) as console_warn_count,
         sum(s.console_error_count) as console_error_count
  FROM session_replay_events s
  WHERE s.team_id = 2
    AND s.min_first_timestamp >= '2022-12-14 00:00:00'
    AND s.min_first_timestamp >= '2022-12-28 00:00:00'
    AND s.max_last_timestamp <= '2023-01-04 00:00:00'
    AND s.session_id in
      (select `$session_id` as session_id
       from
         (SELECT groupUniqArray(event) as event_names,
                 `$session_id`
          FROM events e PREWHERE team_id = 2
          AND e.timestamp >= '2022-12-14 00:00:00'
          AND e.timestamp <= now()
          WHERE notEmpty(`$session_id`)
            AND timestamp >= '2022-12-27 12:00:00'
            AND timestamp <= '2023-01-04 12:00:00'
            AND (((event = 'custom-event'
                   AND (has(['test_action_filter-session-one'], "$session_id")
                        AND has(['test_action_filter-window-id'], "$window_id"))))
                 AND (has(['Firefox'], replaceRegexpAll(JSONExtractRaw(properties, '$browser'), '^"|"$', ''))))
          GROUP BY `$session_id`
          HAVING 1=1
          AND hasAll(event_names, ['custom-event'])) as session_events_sub_query)
  GROUP BY session_id
  HAVING 1=1
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0
  '
---
# name: TestClickhouseSessionRecordingsListFromSessionReplay.test_action_filter.3
  '
  
  SELECT s.session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(s.min_first_timestamp) as start_time,
         max(s.max_last_timestamp) as end_time,
         dateDiff('SECOND', start_time, end_time) as duration,
         argMinMerge(s.first_url) as first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         sum(s.active_milliseconds)/1000 as active_seconds,
         duration-active_seconds as inactive_seconds,
         sum(s.console_log_count) as console_log_count,
         sum(s.console_warn_count) as console_warn_count,
         sum(s.console_error_count) as console_error_count
  FROM session_replay_events s
  WHERE s.team_id = 2
    AND s.min_first_timestamp >= '2022-12-14 00:00:00'
    AND s.min_first_timestamp >= '2022-12-28 00:00:00'
    AND s.max_last_timestamp <= '2023-01-04 00:00:00'
    AND s.session_id in
      (select `$session_id` as session_id
       from
         (SELECT groupUniqArray(event) as event_names,
                 `$session_id`
          FROM events e PREWHERE team_id = 2
          AND e.timestamp >= '2022-12-14 00:00:00'
          AND e.timestamp <= now()
          WHERE notEmpty(`$session_id`)
            AND timestamp >= '2022-12-27 12:00:00'
            AND timestamp <= '2023-01-04 12:00:00'
            AND (((event = 'custom-event'
                   AND (has(['test_action_filter-session-one'], "$session_id")
                        AND has(['test_action_filter-window-id'], "$window_id"))))
                 AND (has(['Chrome'], replaceRegexpAll(JSONExtractRaw(properties, '$browser'), '^"|"$', ''))))
          GROUP BY `$session_id`
          HAVING 1=1
          AND hasAll(event_names, ['custom-event'])) as session_events_sub_query)
  GROUP BY session_id
  HAVING 1=1
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0
  '
---
# name: TestClickhouseSessionRecordingsListFromSessionReplay.test_all_filters_at_once
  '
  
  SELECT s.session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(s.min_first_timestamp) as start_time,
         max(s.max_last_timestamp) as end_time,
         dateDiff('SECOND', start_time, end_time) as duration,
         argMinMerge(s.first_url) as first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         sum(s.active_milliseconds)/1000 as active_seconds,
         duration-active_seconds as inactive_seconds,
         sum(s.console_log_count) as console_log_count,
         sum(s.console_warn_count) as console_warn_count,
         sum(s.console_error_count) as console_error_count
  FROM session_replay_events s
  WHERE s.team_id = 2
    AND s.min_first_timestamp >= '2020-12-11 13:46:23'
    AND s.min_first_timestamp >= '2020-12-22 00:00:00'
    AND s.max_last_timestamp <= '2021-01-04 23:59:59'
    AND s.distinct_id in
      (select distinct_id
       from
         (SELECT distinct_id,
                 argMax(person_id, version) as person_id
          FROM person_distinct_id2 as pdi
          WHERE team_id = 2
          GROUP BY distinct_id
          HAVING argMax(is_deleted, version) = 0
          and person_id = '00000000-0000-0000-0000-000000000000') as session_persons_sub_query)
    AND s.session_id in
      (select `$session_id` as session_id
       from
         (SELECT groupUniqArray(event) as event_names,
                 `$session_id`
          FROM events e PREWHERE team_id = 2
          AND e.timestamp >= '2020-12-11 13:46:23'
          AND e.timestamp <= now()
          WHERE notEmpty(`$session_id`)
            AND timestamp >= '2020-12-21 12:00:00'
            AND timestamp <= '2021-01-05 11:59:59'
            AND ((event = '$pageview')
                 OR ((event = 'custom-event')))
            AND e.distinct_id in
              (select distinct_id
               from
                 (SELECT distinct_id,
                         argMax(person_id, version) as person_id
                  FROM person_distinct_id2 as pdi
                  WHERE team_id = 2
                  GROUP BY distinct_id
                  HAVING argMax(is_deleted, version) = 0
                  and person_id = '00000000-0000-0000-0000-000000000000') as events_persons_sub_query)
          GROUP BY `$session_id`
          HAVING 1=1
          AND hasAll(event_names, ['$pageview', 'custom-event'])) as session_events_sub_query)
  GROUP BY session_id
  HAVING 1=1
  AND duration > 60
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0
  '
---
# name: TestClickhouseSessionRecordingsListFromSessionReplay.test_any_event_filter_with_properties
  '
  
  SELECT s.session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(s.min_first_timestamp) as start_time,
         max(s.max_last_timestamp) as end_time,
         dateDiff('SECOND', start_time, end_time) as duration,
         argMinMerge(s.first_url) as first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         sum(s.active_milliseconds)/1000 as active_seconds,
         duration-active_seconds as inactive_seconds,
         sum(s.console_log_count) as console_log_count,
         sum(s.console_warn_count) as console_warn_count,
         sum(s.console_error_count) as console_error_count
  FROM session_replay_events s
  WHERE s.team_id = 2
    AND s.min_first_timestamp >= '2020-12-31 20:00:00'
    AND s.min_first_timestamp >= '2021-01-14 00:00:00'
    AND s.max_last_timestamp <= '2021-01-21 20:00:00'
    AND s.session_id in
      (select `$session_id` as session_id
       from
         (SELECT `$session_id`
          FROM events e PREWHERE team_id = 2
          AND e.timestamp >= '2020-12-31 20:00:00'
          AND e.timestamp <= now()
          WHERE notEmpty(`$session_id`)
            AND timestamp >= '2021-01-13 12:00:00'
            AND timestamp <= '2021-01-22 08:00:00'
            AND (1 = 1)
          GROUP BY `$session_id`
          HAVING 1=1) as session_events_sub_query)
  GROUP BY session_id
  HAVING 1=1
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0
  '
---
# name: TestClickhouseSessionRecordingsListFromSessionReplay.test_any_event_filter_with_properties.1
  '
  
  SELECT s.session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(s.min_first_timestamp) as start_time,
         max(s.max_last_timestamp) as end_time,
         dateDiff('SECOND', start_time, end_time) as duration,
         argMinMerge(s.first_url) as first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         sum(s.active_milliseconds)/1000 as active_seconds,
         duration-active_seconds as inactive_seconds,
         sum(s.console_log_count) as console_log_count,
         sum(s.console_warn_count) as console_warn_count,
         sum(s.console_error_count) as console_error_count
  FROM session_replay_events s
  WHERE s.team_id = 2
    AND s.min_first_timestamp >= '2020-12-31 20:00:00'
    AND s.min_first_timestamp >= '2021-01-14 00:00:00'
    AND s.max_last_timestamp <= '2021-01-21 20:00:00'
    AND s.session_id in
      (select `$session_id` as session_id
       from
         (SELECT `$session_id`
          FROM events e PREWHERE team_id = 2
          AND e.timestamp >= '2020-12-31 20:00:00'
          AND e.timestamp <= now()
          WHERE notEmpty(`$session_id`)
            AND timestamp >= '2021-01-13 12:00:00'
            AND timestamp <= '2021-01-22 08:00:00'
            AND (1 = 1
                 AND (has(['Chrome'], replaceRegexpAll(JSONExtractRaw(properties, '$browser'), '^"|"$', ''))))
          GROUP BY `$session_id`
          HAVING 1=1) as session_events_sub_query)
  GROUP BY session_id
  HAVING 1=1
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0
  '
---
# name: TestClickhouseSessionRecordingsListFromSessionReplay.test_any_event_filter_with_properties.2
  '
  
  SELECT s.session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(s.min_first_timestamp) as start_time,
         max(s.max_last_timestamp) as end_time,
         dateDiff('SECOND', start_time, end_time) as duration,
         argMinMerge(s.first_url) as first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         sum(s.active_milliseconds)/1000 as active_seconds,
         duration-active_seconds as inactive_seconds,
         sum(s.console_log_count) as console_log_count,
         sum(s.console_warn_count) as console_warn_count,
         sum(s.console_error_count) as console_error_count
  FROM session_replay_events s
  WHERE s.team_id = 2
    AND s.min_first_timestamp >= '2020-12-31 20:00:00'
    AND s.min_first_timestamp >= '2021-01-14 00:00:00'
    AND s.max_last_timestamp <= '2021-01-21 20:00:00'
    AND s.session_id in
      (select `$session_id` as session_id
       from
         (SELECT `$session_id`
          FROM events e PREWHERE team_id = 2
          AND e.timestamp >= '2020-12-31 20:00:00'
          AND e.timestamp <= now()
          WHERE notEmpty(`$session_id`)
            AND timestamp >= '2021-01-13 12:00:00'
            AND timestamp <= '2021-01-22 08:00:00'
            AND (1 = 1
                 AND (has(['Firefox'], replaceRegexpAll(JSONExtractRaw(properties, '$browser'), '^"|"$', ''))))
          GROUP BY `$session_id`
          HAVING 1=1) as session_events_sub_query)
  GROUP BY session_id
  HAVING 1=1
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0
  '
---
# name: TestClickhouseSessionRecordingsListFromSessionReplay.test_any_event_filter_with_properties_materialized
  '
  
  SELECT s.session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(s.min_first_timestamp) as start_time,
         max(s.max_last_timestamp) as end_time,
         dateDiff('SECOND', start_time, end_time) as duration,
         argMinMerge(s.first_url) as first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         sum(s.active_milliseconds)/1000 as active_seconds,
         duration-active_seconds as inactive_seconds,
         sum(s.console_log_count) as console_log_count,
         sum(s.console_warn_count) as console_warn_count,
         sum(s.console_error_count) as console_error_count
  FROM session_replay_events s
  WHERE s.team_id = 2
    AND s.min_first_timestamp >= '2020-12-31 20:00:00'
    AND s.min_first_timestamp >= '2021-01-14 00:00:00'
    AND s.max_last_timestamp <= '2021-01-21 20:00:00'
    AND s.session_id in
      (select `$session_id` as session_id
       from
         (SELECT `$session_id`
          FROM events e PREWHERE team_id = 2
          AND e.timestamp >= '2020-12-31 20:00:00'
          AND e.timestamp <= now()
          WHERE notEmpty(`$session_id`)
            AND timestamp >= '2021-01-13 12:00:00'
            AND timestamp <= '2021-01-22 08:00:00'
            AND (1 = 1)
          GROUP BY `$session_id`
          HAVING 1=1) as session_events_sub_query)
  GROUP BY session_id
  HAVING 1=1
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0
  '
---
# name: TestClickhouseSessionRecordingsListFromSessionReplay.test_any_event_filter_with_properties_materialized.1
  '
  
  SELECT s.session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(s.min_first_timestamp) as start_time,
         max(s.max_last_timestamp) as end_time,
         dateDiff('SECOND', start_time, end_time) as duration,
         argMinMerge(s.first_url) as first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         sum(s.active_milliseconds)/1000 as active_seconds,
         duration-active_seconds as inactive_seconds,
         sum(s.console_log_count) as console_log_count,
         sum(s.console_warn_count) as console_warn_count,
         sum(s.console_error_count) as console_error_count
  FROM session_replay_events s
  WHERE s.team_id = 2
    AND s.min_first_timestamp >= '2020-12-31 20:00:00'
    AND s.min_first_timestamp >= '2021-01-14 00:00:00'
    AND s.max_last_timestamp <= '2021-01-21 20:00:00'
    AND s.session_id in
      (select `$session_id` as session_id
       from
         (SELECT `$session_id`
          FROM events e PREWHERE team_id = 2
          AND e.timestamp >= '2020-12-31 20:00:00'
          AND e.timestamp <= now()
          WHERE notEmpty(`$session_id`)
            AND timestamp >= '2021-01-13 12:00:00'
            AND timestamp <= '2021-01-22 08:00:00'
            AND (1 = 1
                 AND (has(['Chrome'], "mat_$browser")))
          GROUP BY `$session_id`
          HAVING 1=1) as session_events_sub_query)
  GROUP BY session_id
  HAVING 1=1
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0
  '
---
# name: TestClickhouseSessionRecordingsListFromSessionReplay.test_any_event_filter_with_properties_materialized.2
  '
  
  SELECT s.session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(s.min_first_timestamp) as start_time,
         max(s.max_last_timestamp) as end_time,
         dateDiff('SECOND', start_time, end_time) as duration,
         argMinMerge(s.first_url) as first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         sum(s.active_milliseconds)/1000 as active_seconds,
         duration-active_seconds as inactive_seconds,
         sum(s.console_log_count) as console_log_count,
         sum(s.console_warn_count) as console_warn_count,
         sum(s.console_error_count) as console_error_count
  FROM session_replay_events s
  WHERE s.team_id = 2
    AND s.min_first_timestamp >= '2020-12-31 20:00:00'
    AND s.min_first_timestamp >= '2021-01-14 00:00:00'
    AND s.max_last_timestamp <= '2021-01-21 20:00:00'
    AND s.session_id in
      (select `$session_id` as session_id
       from
         (SELECT `$session_id`
          FROM events e PREWHERE team_id = 2
          AND e.timestamp >= '2020-12-31 20:00:00'
          AND e.timestamp <= now()
          WHERE notEmpty(`$session_id`)
            AND timestamp >= '2021-01-13 12:00:00'
            AND timestamp <= '2021-01-22 08:00:00'
            AND (1 = 1
                 AND (has(['Firefox'], "mat_$browser")))
          GROUP BY `$session_id`
          HAVING 1=1) as session_events_sub_query)
  GROUP BY session_id
  HAVING 1=1
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0
  '
---
# name: TestClickhouseSessionRecordingsListFromSessionReplay.test_basic_query
  '
  
  SELECT s.session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(s.min_first_timestamp) as start_time,
         max(s.max_last_timestamp) as end_time,
         dateDiff('SECOND', start_time, end_time) as duration,
         argMinMerge(s.first_url) as first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         sum(s.active_milliseconds)/1000 as active_seconds,
         duration-active_seconds as inactive_seconds,
         sum(s.console_log_count) as console_log_count,
         sum(s.console_warn_count) as console_warn_count,
         sum(s.console_error_count) as console_error_count
  FROM session_replay_events s
  WHERE s.team_id = 2
    AND s.min_first_timestamp >= '2020-12-11 13:46:23'
    AND s.min_first_timestamp >= '2020-12-25 00:00:00'
    AND s.max_last_timestamp <= '2021-01-01 13:46:23'
  GROUP BY session_id
  HAVING 1=1
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0
  '
---
# name: TestClickhouseSessionRecordingsListFromSessionReplay.test_basic_query_active_sessions
  '
  
  SELECT s.session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(s.min_first_timestamp) as start_time,
         max(s.max_last_timestamp) as end_time,
         dateDiff('SECOND', start_time, end_time) as duration,
         argMinMerge(s.first_url) as first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         sum(s.active_milliseconds)/1000 as active_seconds,
         duration-active_seconds as inactive_seconds,
         sum(s.console_log_count) as console_log_count,
         sum(s.console_warn_count) as console_warn_count,
         sum(s.console_error_count) as console_error_count
  FROM session_replay_events s
  WHERE s.team_id = 2
    AND s.min_first_timestamp >= '2020-12-11 13:46:23'
    AND s.min_first_timestamp >= '2020-12-25 00:00:00'
    AND s.max_last_timestamp <= '2021-01-01 13:46:23'
  GROUP BY session_id
  HAVING 1=1
  AND duration > 60
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0
  '
---
# name: TestClickhouseSessionRecordingsListFromSessionReplay.test_basic_query_active_sessions.1
  '
  
  SELECT s.session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(s.min_first_timestamp) as start_time,
         max(s.max_last_timestamp) as end_time,
         dateDiff('SECOND', start_time, end_time) as duration,
         argMinMerge(s.first_url) as first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         sum(s.active_milliseconds)/1000 as active_seconds,
         duration-active_seconds as inactive_seconds,
         sum(s.console_log_count) as console_log_count,
         sum(s.console_warn_count) as console_warn_count,
         sum(s.console_error_count) as console_error_count
  FROM session_replay_events s
  WHERE s.team_id = 2
    AND s.min_first_timestamp >= '2020-12-11 13:46:23'
    AND s.min_first_timestamp >= '2020-12-25 00:00:00'
    AND s.max_last_timestamp <= '2021-01-01 13:46:23'
  GROUP BY session_id
  HAVING 1=1
  AND active_seconds > 60
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0
  '
---
# name: TestClickhouseSessionRecordingsListFromSessionReplay.test_basic_query_active_sessions.2
  '
  
  SELECT s.session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(s.min_first_timestamp) as start_time,
         max(s.max_last_timestamp) as end_time,
         dateDiff('SECOND', start_time, end_time) as duration,
         argMinMerge(s.first_url) as first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         sum(s.active_milliseconds)/1000 as active_seconds,
         duration-active_seconds as inactive_seconds,
         sum(s.console_log_count) as console_log_count,
         sum(s.console_warn_count) as console_warn_count,
         sum(s.console_error_count) as console_error_count
  FROM session_replay_events s
  WHERE s.team_id = 2
    AND s.min_first_timestamp >= '2020-12-11 13:46:23'
    AND s.min_first_timestamp >= '2020-12-25 00:00:00'
    AND s.max_last_timestamp <= '2021-01-01 13:46:23'
  GROUP BY session_id
  HAVING 1=1
  AND inactive_seconds > 60
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0
  '
---
# name: TestClickhouseSessionRecordingsListFromSessionReplay.test_basic_query_with_paging
  '
  
  SELECT s.session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(s.min_first_timestamp) as start_time,
         max(s.max_last_timestamp) as end_time,
         dateDiff('SECOND', start_time, end_time) as duration,
         argMinMerge(s.first_url) as first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         sum(s.active_milliseconds)/1000 as active_seconds,
         duration-active_seconds as inactive_seconds,
         sum(s.console_log_count) as console_log_count,
         sum(s.console_warn_count) as console_warn_count,
         sum(s.console_error_count) as console_error_count
  FROM session_replay_events s
  WHERE s.team_id = 2
    AND s.min_first_timestamp >= '2020-12-11 13:46:23'
    AND s.min_first_timestamp >= '2020-12-25 00:00:00'
    AND s.max_last_timestamp <= '2021-01-01 13:46:23'
  GROUP BY session_id
  HAVING 1=1
  ORDER BY start_time DESC
  LIMIT 2
  OFFSET 0
  '
---
# name: TestClickhouseSessionRecordingsListFromSessionReplay.test_basic_query_with_paging.1
  '
  
  SELECT s.session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(s.min_first_timestamp) as start_time,
         max(s.max_last_timestamp) as end_time,
         dateDiff('SECOND', start_time, end_time) as duration,
         argMinMerge(s.first_url) as first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         sum(s.active_milliseconds)/1000 as active_seconds,
         duration-active_seconds as inactive_seconds,
         sum(s.console_log_count) as console_log_count,
         sum(s.console_warn_count) as console_warn_count,
         sum(s.console_error_count) as console_error_count
  FROM session_replay_events s
  WHERE s.team_id = 2
    AND s.min_first_timestamp >= '2020-12-11 13:46:23'
    AND s.min_first_timestamp >= '2020-12-25 00:00:00'
    AND s.max_last_timestamp <= '2021-01-01 13:46:23'
  GROUP BY session_id
  HAVING 1=1
  ORDER BY start_time DESC
  LIMIT 2
  OFFSET 1
  '
---
# name: TestClickhouseSessionRecordingsListFromSessionReplay.test_basic_query_with_paging.2
  '
  
  SELECT s.session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(s.min_first_timestamp) as start_time,
         max(s.max_last_timestamp) as end_time,
         dateDiff('SECOND', start_time, end_time) as duration,
         argMinMerge(s.first_url) as first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         sum(s.active_milliseconds)/1000 as active_seconds,
         duration-active_seconds as inactive_seconds,
         sum(s.console_log_count) as console_log_count,
         sum(s.console_warn_count) as console_warn_count,
         sum(s.console_error_count) as console_error_count
  FROM session_replay_events s
  WHERE s.team_id = 2
    AND s.min_first_timestamp >= '2020-12-11 13:46:23'
    AND s.min_first_timestamp >= '2020-12-25 00:00:00'
    AND s.max_last_timestamp <= '2021-01-01 13:46:23'
  GROUP BY session_id
  HAVING 1=1
  ORDER BY start_time DESC
  LIMIT 2
  OFFSET 2
  '
---
# name: TestClickhouseSessionRecordingsListFromSessionReplay.test_date_from_filter
  '
  
  SELECT s.session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(s.min_first_timestamp) as start_time,
         max(s.max_last_timestamp) as end_time,
         dateDiff('SECOND', start_time, end_time) as duration,
         argMinMerge(s.first_url) as first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         sum(s.active_milliseconds)/1000 as active_seconds,
         duration-active_seconds as inactive_seconds,
         sum(s.console_log_count) as console_log_count,
         sum(s.console_warn_count) as console_warn_count,
         sum(s.console_error_count) as console_error_count
  FROM session_replay_events s
  WHERE s.team_id = 2
    AND s.min_first_timestamp >= '2020-12-11 13:46:23'
    AND s.min_first_timestamp >= '2021-01-01 00:00:00'
    AND s.max_last_timestamp <= '2021-01-01 13:46:23'
  GROUP BY session_id
  HAVING 1=1
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0
  '
---
# name: TestClickhouseSessionRecordingsListFromSessionReplay.test_date_from_filter.1
  '
  
  SELECT s.session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(s.min_first_timestamp) as start_time,
         max(s.max_last_timestamp) as end_time,
         dateDiff('SECOND', start_time, end_time) as duration,
         argMinMerge(s.first_url) as first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         sum(s.active_milliseconds)/1000 as active_seconds,
         duration-active_seconds as inactive_seconds,
         sum(s.console_log_count) as console_log_count,
         sum(s.console_warn_count) as console_warn_count,
         sum(s.console_error_count) as console_error_count
  FROM session_replay_events s
  WHERE s.team_id = 2
    AND s.min_first_timestamp >= '2020-12-11 13:46:23'
    AND s.min_first_timestamp >= '2020-12-30 00:00:00'
    AND s.max_last_timestamp <= '2021-01-01 13:46:23'
  GROUP BY session_id
  HAVING 1=1
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0
  '
---
# name: TestClickhouseSessionRecordingsListFromSessionReplay.test_date_from_filter_cannot_search_before_ttl
  '
  
  SELECT s.session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(s.min_first_timestamp) as start_time,
         max(s.max_last_timestamp) as end_time,
         dateDiff('SECOND', start_time, end_time) as duration,
         argMinMerge(s.first_url) as first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         sum(s.active_milliseconds)/1000 as active_seconds,
         duration-active_seconds as inactive_seconds,
         sum(s.console_log_count) as console_log_count,
         sum(s.console_warn_count) as console_warn_count,
         sum(s.console_error_count) as console_error_count
  FROM session_replay_events s
  WHERE s.team_id = 2
    AND s.min_first_timestamp >= '2020-12-11 12:46:00'
    AND s.min_first_timestamp >= '2020-12-12 00:00:00'
    AND s.max_last_timestamp <= '2021-01-01 12:46:00'
  GROUP BY session_id
  HAVING 1=1
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0
  '
---
# name: TestClickhouseSessionRecordingsListFromSessionReplay.test_date_from_filter_cannot_search_before_ttl.1
  '
  
  SELECT s.session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(s.min_first_timestamp) as start_time,
         max(s.max_last_timestamp) as end_time,
         dateDiff('SECOND', start_time, end_time) as duration,
         argMinMerge(s.first_url) as first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         sum(s.active_milliseconds)/1000 as active_seconds,
         duration-active_seconds as inactive_seconds,
         sum(s.console_log_count) as console_log_count,
         sum(s.console_warn_count) as console_warn_count,
         sum(s.console_error_count) as console_error_count
  FROM session_replay_events s
  WHERE s.team_id = 2
    AND s.min_first_timestamp >= '2020-12-11 12:46:00'
    AND s.min_first_timestamp >= '2020-12-11 00:00:00'
    AND s.max_last_timestamp <= '2021-01-01 12:46:00'
  GROUP BY session_id
  HAVING 1=1
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0
  '
---
# name: TestClickhouseSessionRecordingsListFromSessionReplay.test_date_from_filter_cannot_search_before_ttl.2
  '
  
  SELECT s.session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(s.min_first_timestamp) as start_time,
         max(s.max_last_timestamp) as end_time,
         dateDiff('SECOND', start_time, end_time) as duration,
         argMinMerge(s.first_url) as first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         sum(s.active_milliseconds)/1000 as active_seconds,
         duration-active_seconds as inactive_seconds,
         sum(s.console_log_count) as console_log_count,
         sum(s.console_warn_count) as console_warn_count,
         sum(s.console_error_count) as console_error_count
  FROM session_replay_events s
  WHERE s.team_id = 2
    AND s.min_first_timestamp >= '2020-12-11 12:46:00'
    AND s.min_first_timestamp >= '2020-12-10 00:00:00'
    AND s.max_last_timestamp <= '2021-01-01 12:46:00'
  GROUP BY session_id
  HAVING 1=1
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0
  '
---
# name: TestClickhouseSessionRecordingsListFromSessionReplay.test_date_to_filter
  '
  
  SELECT s.session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(s.min_first_timestamp) as start_time,
         max(s.max_last_timestamp) as end_time,
         dateDiff('SECOND', start_time, end_time) as duration,
         argMinMerge(s.first_url) as first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         sum(s.active_milliseconds)/1000 as active_seconds,
         duration-active_seconds as inactive_seconds,
         sum(s.console_log_count) as console_log_count,
         sum(s.console_warn_count) as console_warn_count,
         sum(s.console_error_count) as console_error_count
  FROM session_replay_events s
  WHERE s.team_id = 2
    AND s.min_first_timestamp >= '2020-12-11 13:46:23'
    AND s.min_first_timestamp >= '2020-12-25 00:00:00'
    AND s.max_last_timestamp <= '2020-12-28 23:59:59'
  GROUP BY session_id
  HAVING 1=1
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0
  '
---
# name: TestClickhouseSessionRecordingsListFromSessionReplay.test_date_to_filter.1
  '
  
  SELECT s.session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(s.min_first_timestamp) as start_time,
         max(s.max_last_timestamp) as end_time,
         dateDiff('SECOND', start_time, end_time) as duration,
         argMinMerge(s.first_url) as first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         sum(s.active_milliseconds)/1000 as active_seconds,
         duration-active_seconds as inactive_seconds,
         sum(s.console_log_count) as console_log_count,
         sum(s.console_warn_count) as console_warn_count,
         sum(s.console_error_count) as console_error_count
  FROM session_replay_events s
  WHERE s.team_id = 2
    AND s.min_first_timestamp >= '2020-12-11 13:46:23'
    AND s.min_first_timestamp >= '2020-12-25 00:00:00'
    AND s.max_last_timestamp <= '2020-12-29 23:59:59'
  GROUP BY session_id
  HAVING 1=1
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0
  '
---
# name: TestClickhouseSessionRecordingsListFromSessionReplay.test_duration_filter
  '
  
  SELECT s.session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(s.min_first_timestamp) as start_time,
         max(s.max_last_timestamp) as end_time,
         dateDiff('SECOND', start_time, end_time) as duration,
         argMinMerge(s.first_url) as first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         sum(s.active_milliseconds)/1000 as active_seconds,
         duration-active_seconds as inactive_seconds,
         sum(s.console_log_count) as console_log_count,
         sum(s.console_warn_count) as console_warn_count,
         sum(s.console_error_count) as console_error_count
  FROM session_replay_events s
  WHERE s.team_id = 2
    AND s.min_first_timestamp >= '2020-12-11 13:46:23'
    AND s.min_first_timestamp >= '2020-12-25 00:00:00'
    AND s.max_last_timestamp <= '2021-01-01 13:46:23'
  GROUP BY session_id
  HAVING 1=1
  AND duration > 60
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0
  '
---
# name: TestClickhouseSessionRecordingsListFromSessionReplay.test_duration_filter.1
  '
  
  SELECT s.session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(s.min_first_timestamp) as start_time,
         max(s.max_last_timestamp) as end_time,
         dateDiff('SECOND', start_time, end_time) as duration,
         argMinMerge(s.first_url) as first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         sum(s.active_milliseconds)/1000 as active_seconds,
         duration-active_seconds as inactive_seconds,
         sum(s.console_log_count) as console_log_count,
         sum(s.console_warn_count) as console_warn_count,
         sum(s.console_error_count) as console_error_count
  FROM session_replay_events s
  WHERE s.team_id = 2
    AND s.min_first_timestamp >= '2020-12-11 13:46:23'
    AND s.min_first_timestamp >= '2020-12-25 00:00:00'
    AND s.max_last_timestamp <= '2021-01-01 13:46:23'
  GROUP BY session_id
  HAVING 1=1
  AND duration < 60
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0
  '
---
# name: TestClickhouseSessionRecordingsListFromSessionReplay.test_event_filter
  '
  
  SELECT s.session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(s.min_first_timestamp) as start_time,
         max(s.max_last_timestamp) as end_time,
         dateDiff('SECOND', start_time, end_time) as duration,
         argMinMerge(s.first_url) as first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         sum(s.active_milliseconds)/1000 as active_seconds,
         duration-active_seconds as inactive_seconds,
         sum(s.console_log_count) as console_log_count,
         sum(s.console_warn_count) as console_warn_count,
         sum(s.console_error_count) as console_error_count
  FROM session_replay_events s
  WHERE s.team_id = 2
    AND s.min_first_timestamp >= '2020-12-11 13:46:23'
    AND s.min_first_timestamp >= '2020-12-25 00:00:00'
    AND s.max_last_timestamp <= '2021-01-01 13:46:23'
    AND s.session_id in
      (select `$session_id` as session_id
       from
         (SELECT groupUniqArray(event) as event_names,
                 `$session_id`
          FROM events e PREWHERE team_id = 2
          AND e.timestamp >= '2020-12-11 13:46:23'
          AND e.timestamp <= now()
          WHERE notEmpty(`$session_id`)
            AND timestamp >= '2020-12-24 12:00:00'
            AND timestamp <= '2021-01-02 01:46:23'
            AND (event = '$pageview')
          GROUP BY `$session_id`
          HAVING 1=1
          AND hasAll(event_names, ['$pageview'])) as session_events_sub_query)
  GROUP BY session_id
  HAVING 1=1
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0
  '
---
# name: TestClickhouseSessionRecordingsListFromSessionReplay.test_event_filter.1
  '
  
  SELECT s.session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(s.min_first_timestamp) as start_time,
         max(s.max_last_timestamp) as end_time,
         dateDiff('SECOND', start_time, end_time) as duration,
         argMinMerge(s.first_url) as first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         sum(s.active_milliseconds)/1000 as active_seconds,
         duration-active_seconds as inactive_seconds,
         sum(s.console_log_count) as console_log_count,
         sum(s.console_warn_count) as console_warn_count,
         sum(s.console_error_count) as console_error_count
  FROM session_replay_events s
  WHERE s.team_id = 2
    AND s.min_first_timestamp >= '2020-12-11 13:46:23'
    AND s.min_first_timestamp >= '2020-12-25 00:00:00'
    AND s.max_last_timestamp <= '2021-01-01 13:46:23'
    AND s.session_id in
      (select `$session_id` as session_id
       from
         (SELECT groupUniqArray(event) as event_names,
                 `$session_id`
          FROM events e PREWHERE team_id = 2
          AND e.timestamp >= '2020-12-11 13:46:23'
          AND e.timestamp <= now()
          WHERE notEmpty(`$session_id`)
            AND timestamp >= '2020-12-24 12:00:00'
            AND timestamp <= '2021-01-02 01:46:23'
            AND (event = '$autocapture')
          GROUP BY `$session_id`
          HAVING 1=1
          AND hasAll(event_names, ['$autocapture'])) as session_events_sub_query)
  GROUP BY session_id
  HAVING 1=1
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0
  '
---
# name: TestClickhouseSessionRecordingsListFromSessionReplay.test_event_filter_has_ttl_applied_too
  '
  
  SELECT s.session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(s.min_first_timestamp) as start_time,
         max(s.max_last_timestamp) as end_time,
         dateDiff('SECOND', start_time, end_time) as duration,
         argMinMerge(s.first_url) as first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         sum(s.active_milliseconds)/1000 as active_seconds,
         duration-active_seconds as inactive_seconds,
         sum(s.console_log_count) as console_log_count,
         sum(s.console_warn_count) as console_warn_count,
         sum(s.console_error_count) as console_error_count
  FROM session_replay_events s
  WHERE s.team_id = 2
    AND s.min_first_timestamp >= '2020-12-11 13:46:23'
    AND s.min_first_timestamp >= '2020-12-25 00:00:00'
    AND s.max_last_timestamp <= '2021-01-01 13:46:23'
    AND s.session_id in
      (select `$session_id` as session_id
       from
         (SELECT groupUniqArray(event) as event_names,
                 `$session_id`
          FROM events e PREWHERE team_id = 2
          AND e.timestamp >= '2020-12-11 13:46:23'
          AND e.timestamp <= now()
          WHERE notEmpty(`$session_id`)
            AND timestamp >= '2020-12-24 12:00:00'
            AND timestamp <= '2021-01-02 01:46:23'
            AND (event = '$pageview')
          GROUP BY `$session_id`
          HAVING 1=1
          AND hasAll(event_names, ['$pageview'])) as session_events_sub_query)
  GROUP BY session_id
  HAVING 1=1
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0
  '
---
# name: TestClickhouseSessionRecordingsListFromSessionReplay.test_event_filter_has_ttl_applied_too.1
  '
  
  SELECT s.session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(s.min_first_timestamp) as start_time,
         max(s.max_last_timestamp) as end_time,
         dateDiff('SECOND', start_time, end_time) as duration,
         argMinMerge(s.first_url) as first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         sum(s.active_milliseconds)/1000 as active_seconds,
         duration-active_seconds as inactive_seconds,
         sum(s.console_log_count) as console_log_count,
         sum(s.console_warn_count) as console_warn_count,
         sum(s.console_error_count) as console_error_count
  FROM session_replay_events s
  WHERE s.team_id = 2
    AND s.min_first_timestamp >= '2020-12-11 13:46:23'
    AND s.min_first_timestamp >= '2020-12-25 00:00:00'
    AND s.max_last_timestamp <= '2021-01-01 13:46:23'
  GROUP BY session_id
  HAVING 1=1
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0
  '
---
# name: TestClickhouseSessionRecordingsListFromSessionReplay.test_event_filter_with_active_sessions
  '
  
  SELECT s.session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(s.min_first_timestamp) as start_time,
         max(s.max_last_timestamp) as end_time,
         dateDiff('SECOND', start_time, end_time) as duration,
         argMinMerge(s.first_url) as first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         sum(s.active_milliseconds)/1000 as active_seconds,
         duration-active_seconds as inactive_seconds,
         sum(s.console_log_count) as console_log_count,
         sum(s.console_warn_count) as console_warn_count,
         sum(s.console_error_count) as console_error_count
  FROM session_replay_events s
  WHERE s.team_id = 2
    AND s.min_first_timestamp >= '2020-12-11 13:46:23'
    AND s.min_first_timestamp >= '2020-12-25 00:00:00'
    AND s.max_last_timestamp <= '2021-01-01 13:46:23'
    AND s.session_id in
      (select `$session_id` as session_id
       from
         (SELECT groupUniqArray(event) as event_names,
                 `$session_id`
          FROM events e PREWHERE team_id = 2
          AND e.timestamp >= '2020-12-11 13:46:23'
          AND e.timestamp <= now()
          WHERE notEmpty(`$session_id`)
            AND timestamp >= '2020-12-24 12:00:00'
            AND timestamp <= '2021-01-02 01:46:23'
            AND (event = '$pageview')
          GROUP BY `$session_id`
          HAVING 1=1
          AND hasAll(event_names, ['$pageview'])) as session_events_sub_query)
  GROUP BY session_id
  HAVING 1=1
  AND duration > 60
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0
  '
---
# name: TestClickhouseSessionRecordingsListFromSessionReplay.test_event_filter_with_active_sessions.1
  '
  
  SELECT s.session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(s.min_first_timestamp) as start_time,
         max(s.max_last_timestamp) as end_time,
         dateDiff('SECOND', start_time, end_time) as duration,
         argMinMerge(s.first_url) as first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         sum(s.active_milliseconds)/1000 as active_seconds,
         duration-active_seconds as inactive_seconds,
         sum(s.console_log_count) as console_log_count,
         sum(s.console_warn_count) as console_warn_count,
         sum(s.console_error_count) as console_error_count
  FROM session_replay_events s
  WHERE s.team_id = 2
    AND s.min_first_timestamp >= '2020-12-11 13:46:23'
    AND s.min_first_timestamp >= '2020-12-25 00:00:00'
    AND s.max_last_timestamp <= '2021-01-01 13:46:23'
    AND s.session_id in
      (select `$session_id` as session_id
       from
         (SELECT groupUniqArray(event) as event_names,
                 `$session_id`
          FROM events e PREWHERE team_id = 2
          AND e.timestamp >= '2020-12-11 13:46:23'
          AND e.timestamp <= now()
          WHERE notEmpty(`$session_id`)
            AND timestamp >= '2020-12-24 12:00:00'
            AND timestamp <= '2021-01-02 01:46:23'
            AND (event = '$pageview')
          GROUP BY `$session_id`
          HAVING 1=1
          AND hasAll(event_names, ['$pageview'])) as session_events_sub_query)
  GROUP BY session_id
  HAVING 1=1
  AND active_seconds > 60
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0
  '
---
# name: TestClickhouseSessionRecordingsListFromSessionReplay.test_event_filter_with_group_filter
  '
  
  SELECT s.session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(s.min_first_timestamp) as start_time,
         max(s.max_last_timestamp) as end_time,
         dateDiff('SECOND', start_time, end_time) as duration,
         argMinMerge(s.first_url) as first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         sum(s.active_milliseconds)/1000 as active_seconds,
         duration-active_seconds as inactive_seconds,
         sum(s.console_log_count) as console_log_count,
         sum(s.console_warn_count) as console_warn_count,
         sum(s.console_error_count) as console_error_count
  FROM session_replay_events s
  WHERE s.team_id = 2
    AND s.min_first_timestamp >= '2020-12-31 20:00:00'
    AND s.min_first_timestamp >= '2021-01-14 00:00:00'
    AND s.max_last_timestamp <= '2021-01-21 20:00:00'
    AND s.session_id in
      (select `$session_id` as session_id
       from
         (SELECT groupUniqArray(event) as event_names,
                 `$session_id`
          FROM events e
          LEFT JOIN
            (SELECT group_key,
                    argMax(group_properties, _timestamp) AS group_properties_1
             FROM groups
             WHERE team_id = 2
               AND group_type_index = 1
             GROUP BY group_key) groups_1 ON "$group_1" == groups_1.group_key PREWHERE team_id = 2
          AND e.timestamp >= '2020-12-31 20:00:00'
          AND e.timestamp <= now()
          WHERE notEmpty(`$session_id`)
            AND timestamp >= '2021-01-13 12:00:00'
            AND timestamp <= '2021-01-22 08:00:00'
            AND (event = '$pageview'
                 AND (has(['org one'], replaceRegexpAll(JSONExtractRaw(group_properties_1, 'name'), '^"|"$', ''))))
          GROUP BY `$session_id`
          HAVING 1=1
          AND hasAll(event_names, ['$pageview'])) as session_events_sub_query)
  GROUP BY session_id
  HAVING 1=1
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0
  '
---
# name: TestClickhouseSessionRecordingsListFromSessionReplay.test_event_filter_with_hogql_event_properties_test_accounts_excluded
  '
  
  SELECT s.session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(s.min_first_timestamp) as start_time,
         max(s.max_last_timestamp) as end_time,
         dateDiff('SECOND', start_time, end_time) as duration,
         argMinMerge(s.first_url) as first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         sum(s.active_milliseconds)/1000 as active_seconds,
         duration-active_seconds as inactive_seconds,
         sum(s.console_log_count) as console_log_count,
         sum(s.console_warn_count) as console_warn_count,
         sum(s.console_error_count) as console_error_count
  FROM session_replay_events s
  WHERE s.team_id = 2
    AND s.min_first_timestamp >= '2020-12-31 20:00:00'
    AND s.min_first_timestamp >= '2021-01-14 00:00:00'
    AND s.max_last_timestamp <= '2021-01-21 20:00:00'
    AND s.session_id in
      (select `$session_id` as session_id
       from
         (SELECT groupUniqArray(event) as event_names,
                 `$session_id`
          FROM events e PREWHERE team_id = 2
          AND e.timestamp >= '2020-12-31 20:00:00'
          AND e.timestamp <= now()
          WHERE notEmpty(`$session_id`)
            AND timestamp >= '2021-01-13 12:00:00'
            AND timestamp <= '2021-01-22 08:00:00'
            AND (event = '$pageview')
          GROUP BY `$session_id`
          HAVING 1=1
          AND hasAll(event_names, ['$pageview'])) as session_events_sub_query)
  GROUP BY session_id
  HAVING 1=1
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0
  '
---
# name: TestClickhouseSessionRecordingsListFromSessionReplay.test_event_filter_with_hogql_event_properties_test_accounts_excluded.1
  '
  
  SELECT s.session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(s.min_first_timestamp) as start_time,
         max(s.max_last_timestamp) as end_time,
         dateDiff('SECOND', start_time, end_time) as duration,
         argMinMerge(s.first_url) as first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         sum(s.active_milliseconds)/1000 as active_seconds,
         duration-active_seconds as inactive_seconds,
         sum(s.console_log_count) as console_log_count,
         sum(s.console_warn_count) as console_warn_count,
         sum(s.console_error_count) as console_error_count
  FROM session_replay_events s
  WHERE s.team_id = 2
    AND s.min_first_timestamp >= '2020-12-31 20:00:00'
    AND s.min_first_timestamp >= '2021-01-14 00:00:00'
    AND s.max_last_timestamp <= '2021-01-21 20:00:00'
    AND s.distinct_id in
      (select distinct_id
       from
         (SELECT distinct_id,
                 argMax(person_id, version) as person_id ,
                 argMax(person_props, version) as person_props
          FROM person_distinct_id2 as pdi
          INNER JOIN
            (SELECT id,
                    argMax(properties, version) as person_props
             FROM person
             WHERE team_id = 2
             GROUP BY id
             HAVING max(is_deleted) = 0 SETTINGS optimize_aggregation_in_order = 1) person ON person.id = pdi.person_id
          WHERE team_id = 2
          GROUP BY distinct_id
          HAVING argMax(is_deleted, version) = 0
          AND (ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person_props, 'email'), ''), 'null'), '^"|"$', ''), 'bla'), 0))) as session_persons_sub_query)
    AND s.session_id in
      (select `$session_id` as session_id
       from
         (SELECT groupUniqArray(event) as event_names,
                 `$session_id`
          FROM events e PREWHERE team_id = 2
          AND e.timestamp >= '2020-12-31 20:00:00'
          AND e.timestamp <= now()
          WHERE notEmpty(`$session_id`)
            AND timestamp >= '2021-01-13 12:00:00'
            AND timestamp <= '2021-01-22 08:00:00'
            AND (event = '$pageview')
            AND e.distinct_id in
              (select distinct_id
               from
                 (SELECT distinct_id,
                         argMax(person_id, version) as person_id ,
                         argMax(person_props, version) as person_props
                  FROM person_distinct_id2 as pdi
                  INNER JOIN
                    (SELECT id,
                            argMax(properties, version) as person_props
                     FROM person
                     WHERE team_id = 2
                     GROUP BY id
                     HAVING max(is_deleted) = 0 SETTINGS optimize_aggregation_in_order = 1) person ON person.id = pdi.person_id
                  WHERE team_id = 2
                  GROUP BY distinct_id
                  HAVING argMax(is_deleted, version) = 0
                  AND (ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person_props, 'email'), ''), 'null'), '^"|"$', ''), 'bla'), 0))) as events_persons_sub_query)
          GROUP BY `$session_id`
          HAVING 1=1
          AND hasAll(event_names, ['$pageview'])) as session_events_sub_query)
  GROUP BY session_id
  HAVING 1=1
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0
  '
---
# name: TestClickhouseSessionRecordingsListFromSessionReplay.test_event_filter_with_hogql_event_properties_test_accounts_excluded.2
  '
  
  SELECT s.session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(s.min_first_timestamp) as start_time,
         max(s.max_last_timestamp) as end_time,
         dateDiff('SECOND', start_time, end_time) as duration,
         argMinMerge(s.first_url) as first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         sum(s.active_milliseconds)/1000 as active_seconds,
         duration-active_seconds as inactive_seconds,
         sum(s.console_log_count) as console_log_count,
         sum(s.console_warn_count) as console_warn_count,
         sum(s.console_error_count) as console_error_count
  FROM session_replay_events s
  WHERE s.team_id = 2
    AND s.min_first_timestamp >= '2020-12-31 20:00:00'
    AND s.min_first_timestamp >= '2021-01-14 00:00:00'
    AND s.max_last_timestamp <= '2021-01-21 20:00:00'
    AND s.distinct_id in
      (select distinct_id
       from
         (SELECT distinct_id,
                 argMax(person_id, version) as person_id ,
                 argMax(person_props, version) as person_props
          FROM person_distinct_id2 as pdi
          INNER JOIN
            (SELECT id,
                    argMax(properties, version) as person_props
             FROM person
             WHERE team_id = 2
             GROUP BY id
             HAVING max(is_deleted) = 0 SETTINGS optimize_aggregation_in_order = 1) person ON person.id = pdi.person_id
          WHERE team_id = 2
          GROUP BY distinct_id
          HAVING argMax(is_deleted, version) = 0
          AND (ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person_props, 'email'), ''), 'null'), '^"|"$', ''), 'bla'), 0))) as session_persons_sub_query)
    AND s.session_id in
      (select `$session_id` as session_id
       from
         (SELECT `$session_id`
          FROM events e PREWHERE team_id = 2
          AND e.timestamp >= '2020-12-31 20:00:00'
          AND e.timestamp <= now()
          WHERE notEmpty(`$session_id`)
            AND timestamp >= '2021-01-13 12:00:00'
            AND timestamp <= '2021-01-22 08:00:00'
            AND (ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(properties, '$browser'), ''), 'null'), '^"|"$', ''), 'Chrome'), 0))
            AND e.distinct_id in
              (select distinct_id
               from
                 (SELECT distinct_id,
                         argMax(person_id, version) as person_id ,
                         argMax(person_props, version) as person_props
                  FROM person_distinct_id2 as pdi
                  INNER JOIN
                    (SELECT id,
                            argMax(properties, version) as person_props
                     FROM person
                     WHERE team_id = 2
                     GROUP BY id
                     HAVING max(is_deleted) = 0 SETTINGS optimize_aggregation_in_order = 1) person ON person.id = pdi.person_id
                  WHERE team_id = 2
                  GROUP BY distinct_id
                  HAVING argMax(is_deleted, version) = 0
                  AND (ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person_props, 'email'), ''), 'null'), '^"|"$', ''), 'bla'), 0))) as events_persons_sub_query)
          GROUP BY `$session_id`
          HAVING 1=1) as session_events_sub_query)
  GROUP BY session_id
  HAVING 1=1
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0
  '
---
# name: TestClickhouseSessionRecordingsListFromSessionReplay.test_event_filter_with_hogql_event_properties_test_accounts_excluded_materialized
  '
  
  SELECT s.session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(s.min_first_timestamp) as start_time,
         max(s.max_last_timestamp) as end_time,
         dateDiff('SECOND', start_time, end_time) as duration,
         argMinMerge(s.first_url) as first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         sum(s.active_milliseconds)/1000 as active_seconds,
         duration-active_seconds as inactive_seconds,
         sum(s.console_log_count) as console_log_count,
         sum(s.console_warn_count) as console_warn_count,
         sum(s.console_error_count) as console_error_count
  FROM session_replay_events s
  WHERE s.team_id = 2
    AND s.min_first_timestamp >= '2020-12-31 20:00:00'
    AND s.min_first_timestamp >= '2021-01-14 00:00:00'
    AND s.max_last_timestamp <= '2021-01-21 20:00:00'
    AND s.session_id in
      (select `$session_id` as session_id
       from
         (SELECT groupUniqArray(event) as event_names,
                 `$session_id`
          FROM events e PREWHERE team_id = 2
          AND e.timestamp >= '2020-12-31 20:00:00'
          AND e.timestamp <= now()
          WHERE notEmpty(`$session_id`)
            AND timestamp >= '2021-01-13 12:00:00'
            AND timestamp <= '2021-01-22 08:00:00'
            AND (event = '$pageview')
          GROUP BY `$session_id`
          HAVING 1=1
          AND hasAll(event_names, ['$pageview'])) as session_events_sub_query)
  GROUP BY session_id
  HAVING 1=1
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0
  '
---
# name: TestClickhouseSessionRecordingsListFromSessionReplay.test_event_filter_with_hogql_event_properties_test_accounts_excluded_materialized.1
  '
  
  SELECT s.session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(s.min_first_timestamp) as start_time,
         max(s.max_last_timestamp) as end_time,
         dateDiff('SECOND', start_time, end_time) as duration,
         argMinMerge(s.first_url) as first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         sum(s.active_milliseconds)/1000 as active_seconds,
         duration-active_seconds as inactive_seconds,
         sum(s.console_log_count) as console_log_count,
         sum(s.console_warn_count) as console_warn_count,
         sum(s.console_error_count) as console_error_count
  FROM session_replay_events s
  WHERE s.team_id = 2
    AND s.min_first_timestamp >= '2020-12-31 20:00:00'
    AND s.min_first_timestamp >= '2021-01-14 00:00:00'
    AND s.max_last_timestamp <= '2021-01-21 20:00:00'
    AND s.distinct_id in
      (select distinct_id
       from
         (SELECT distinct_id,
                 argMax(person_id, version) as person_id
          FROM person_distinct_id2 as pdi
          INNER JOIN
            (SELECT id,
                    argMax(pmat_email, version) as pmat_email
             FROM person
             WHERE team_id = 2
             GROUP BY id
             HAVING max(is_deleted) = 0 SETTINGS optimize_aggregation_in_order = 1) person ON person.id = pdi.person_id
          WHERE team_id = 2
          GROUP BY distinct_id
          HAVING argMax(is_deleted, version) = 0
          AND (ifNull(equals(nullIf(nullIf(pmat_email, ''), 'null'), 'bla'), 0))) as session_persons_sub_query)
    AND s.session_id in
      (select `$session_id` as session_id
       from
         (SELECT groupUniqArray(event) as event_names,
                 `$session_id`
          FROM events e PREWHERE team_id = 2
          AND e.timestamp >= '2020-12-31 20:00:00'
          AND e.timestamp <= now()
          WHERE notEmpty(`$session_id`)
            AND timestamp >= '2021-01-13 12:00:00'
            AND timestamp <= '2021-01-22 08:00:00'
            AND (event = '$pageview')
            AND e.distinct_id in
              (select distinct_id
               from
                 (SELECT distinct_id,
                         argMax(person_id, version) as person_id
                  FROM person_distinct_id2 as pdi
                  INNER JOIN
                    (SELECT id,
                            argMax(pmat_email, version) as pmat_email
                     FROM person
                     WHERE team_id = 2
                     GROUP BY id
                     HAVING max(is_deleted) = 0 SETTINGS optimize_aggregation_in_order = 1) person ON person.id = pdi.person_id
                  WHERE team_id = 2
                  GROUP BY distinct_id
                  HAVING argMax(is_deleted, version) = 0
                  AND (ifNull(equals(nullIf(nullIf(pmat_email, ''), 'null'), 'bla'), 0))) as events_persons_sub_query)
          GROUP BY `$session_id`
          HAVING 1=1
          AND hasAll(event_names, ['$pageview'])) as session_events_sub_query)
  GROUP BY session_id
  HAVING 1=1
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0
  '
---
# name: TestClickhouseSessionRecordingsListFromSessionReplay.test_event_filter_with_hogql_event_properties_test_accounts_excluded_materialized.2
  '
  
  SELECT s.session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(s.min_first_timestamp) as start_time,
         max(s.max_last_timestamp) as end_time,
         dateDiff('SECOND', start_time, end_time) as duration,
         argMinMerge(s.first_url) as first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         sum(s.active_milliseconds)/1000 as active_seconds,
         duration-active_seconds as inactive_seconds,
         sum(s.console_log_count) as console_log_count,
         sum(s.console_warn_count) as console_warn_count,
         sum(s.console_error_count) as console_error_count
  FROM session_replay_events s
  WHERE s.team_id = 2
    AND s.min_first_timestamp >= '2020-12-31 20:00:00'
    AND s.min_first_timestamp >= '2021-01-14 00:00:00'
    AND s.max_last_timestamp <= '2021-01-21 20:00:00'
    AND s.distinct_id in
      (select distinct_id
       from
         (SELECT distinct_id,
                 argMax(person_id, version) as person_id
          FROM person_distinct_id2 as pdi
          INNER JOIN
            (SELECT id,
                    argMax(pmat_email, version) as pmat_email
             FROM person
             WHERE team_id = 2
             GROUP BY id
             HAVING max(is_deleted) = 0 SETTINGS optimize_aggregation_in_order = 1) person ON person.id = pdi.person_id
          WHERE team_id = 2
          GROUP BY distinct_id
          HAVING argMax(is_deleted, version) = 0
          AND (ifNull(equals(nullIf(nullIf(pmat_email, ''), 'null'), 'bla'), 0))) as session_persons_sub_query)
    AND s.session_id in
      (select `$session_id` as session_id
       from
         (SELECT `$session_id`
          FROM events e PREWHERE team_id = 2
          AND e.timestamp >= '2020-12-31 20:00:00'
          AND e.timestamp <= now()
          WHERE notEmpty(`$session_id`)
            AND timestamp >= '2021-01-13 12:00:00'
            AND timestamp <= '2021-01-22 08:00:00'
            AND (ifNull(equals(nullIf(nullIf(events.`mat_$browser`, ''), 'null'), 'Chrome'), 0))
            AND e.distinct_id in
              (select distinct_id
               from
                 (SELECT distinct_id,
                         argMax(person_id, version) as person_id
                  FROM person_distinct_id2 as pdi
                  INNER JOIN
                    (SELECT id,
                            argMax(pmat_email, version) as pmat_email
                     FROM person
                     WHERE team_id = 2
                     GROUP BY id
                     HAVING max(is_deleted) = 0 SETTINGS optimize_aggregation_in_order = 1) person ON person.id = pdi.person_id
                  WHERE team_id = 2
                  GROUP BY distinct_id
                  HAVING argMax(is_deleted, version) = 0
                  AND (ifNull(equals(nullIf(nullIf(pmat_email, ''), 'null'), 'bla'), 0))) as events_persons_sub_query)
          GROUP BY `$session_id`
          HAVING 1=1) as session_events_sub_query)
  GROUP BY session_id
  HAVING 1=1
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0
  '
---
# name: TestClickhouseSessionRecordingsListFromSessionReplay.test_event_filter_with_hogql_person_properties
  '
  
  SELECT s.session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(s.min_first_timestamp) as start_time,
         max(s.max_last_timestamp) as end_time,
         dateDiff('SECOND', start_time, end_time) as duration,
         argMinMerge(s.first_url) as first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         sum(s.active_milliseconds)/1000 as active_seconds,
         duration-active_seconds as inactive_seconds,
         sum(s.console_log_count) as console_log_count,
         sum(s.console_warn_count) as console_warn_count,
         sum(s.console_error_count) as console_error_count
  FROM session_replay_events s
  WHERE s.team_id = 2
    AND s.min_first_timestamp >= '2020-12-11 13:46:23'
    AND s.min_first_timestamp >= '2020-12-25 00:00:00'
    AND s.max_last_timestamp <= '2021-01-01 13:46:23'
    AND s.distinct_id in
      (select distinct_id
       from
         (SELECT distinct_id,
                 argMax(person_id, version) as person_id ,
                 argMax(person_props, version) as person_props
          FROM person_distinct_id2 as pdi
          INNER JOIN
            (SELECT id,
                    argMax(properties, version) as person_props
             FROM person
             WHERE team_id = 2
             GROUP BY id
             HAVING max(is_deleted) = 0 SETTINGS optimize_aggregation_in_order = 1) person ON person.id = pdi.person_id
          WHERE team_id = 2
          GROUP BY distinct_id
          HAVING argMax(is_deleted, version) = 0) as session_persons_sub_query)
    AND s.session_id in
      (select `$session_id` as session_id
       from
         (SELECT groupUniqArray(event) as event_names,
                 `$session_id`
          FROM events e
          JOIN
            (SELECT distinct_id,
                    argMax(person_id, version) as person_id ,
                    argMax(person_props, version) as person_props
             FROM person_distinct_id2 as pdi
             INNER JOIN
               (SELECT id,
                       argMax(properties, version) as person_props
                FROM person
                WHERE team_id = 2
                GROUP BY id
                HAVING max(is_deleted) = 0 SETTINGS optimize_aggregation_in_order = 1) person ON person.id = pdi.person_id
             WHERE team_id = 2
             GROUP BY distinct_id
             HAVING argMax(is_deleted, version) = 0) as pdi on pdi.distinct_id = e.distinct_id PREWHERE team_id = 2
          AND e.timestamp >= '2020-12-11 13:46:23'
          AND e.timestamp <= now()
          WHERE notEmpty(`$session_id`)
            AND timestamp >= '2020-12-24 12:00:00'
            AND timestamp <= '2021-01-02 01:46:23'
            AND (event = '$pageview'
                 AND (ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person_props, 'email'), ''), 'null'), '^"|"$', ''), 'bla'), 0)))
          GROUP BY `$session_id`
          HAVING 1=1
          AND hasAll(event_names, ['$pageview'])) as session_events_sub_query)
  GROUP BY session_id
  HAVING 1=1
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0
  '
---
# name: TestClickhouseSessionRecordingsListFromSessionReplay.test_event_filter_with_hogql_person_properties.1
  '
  
  SELECT s.session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(s.min_first_timestamp) as start_time,
         max(s.max_last_timestamp) as end_time,
         dateDiff('SECOND', start_time, end_time) as duration,
         argMinMerge(s.first_url) as first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         sum(s.active_milliseconds)/1000 as active_seconds,
         duration-active_seconds as inactive_seconds,
         sum(s.console_log_count) as console_log_count,
         sum(s.console_warn_count) as console_warn_count,
         sum(s.console_error_count) as console_error_count
  FROM session_replay_events s
  WHERE s.team_id = 2
    AND s.min_first_timestamp >= '2020-12-11 13:46:23'
    AND s.min_first_timestamp >= '2020-12-25 00:00:00'
    AND s.max_last_timestamp <= '2021-01-01 13:46:23'
    AND s.distinct_id in
      (select distinct_id
       from
         (SELECT distinct_id,
                 argMax(person_id, version) as person_id ,
                 argMax(person_props, version) as person_props
          FROM person_distinct_id2 as pdi
          INNER JOIN
            (SELECT id,
                    argMax(properties, version) as person_props
             FROM person
             WHERE team_id = 2
             GROUP BY id
             HAVING max(is_deleted) = 0 SETTINGS optimize_aggregation_in_order = 1) person ON person.id = pdi.person_id
          WHERE team_id = 2
          GROUP BY distinct_id
          HAVING argMax(is_deleted, version) = 0) as session_persons_sub_query)
    AND s.session_id in
      (select `$session_id` as session_id
       from
         (SELECT groupUniqArray(event) as event_names,
                 `$session_id`
          FROM events e
          JOIN
            (SELECT distinct_id,
                    argMax(person_id, version) as person_id ,
                    argMax(person_props, version) as person_props
             FROM person_distinct_id2 as pdi
             INNER JOIN
               (SELECT id,
                       argMax(properties, version) as person_props
                FROM person
                WHERE team_id = 2
                GROUP BY id
                HAVING max(is_deleted) = 0 SETTINGS optimize_aggregation_in_order = 1) person ON person.id = pdi.person_id
             WHERE team_id = 2
             GROUP BY distinct_id
             HAVING argMax(is_deleted, version) = 0) as pdi on pdi.distinct_id = e.distinct_id PREWHERE team_id = 2
          AND e.timestamp >= '2020-12-11 13:46:23'
          AND e.timestamp <= now()
          WHERE notEmpty(`$session_id`)
            AND timestamp >= '2020-12-24 12:00:00'
            AND timestamp <= '2021-01-02 01:46:23'
            AND (event = '$pageview'
                 AND (ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person_props, 'email'), ''), 'null'), '^"|"$', ''), 'something else'), 0)))
          GROUP BY `$session_id`
          HAVING 1=1
          AND hasAll(event_names, ['$pageview'])) as session_events_sub_query)
  GROUP BY session_id
  HAVING 1=1
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0
  '
---
# name: TestClickhouseSessionRecordingsListFromSessionReplay.test_event_filter_with_hogql_properties
  '
  
  SELECT s.session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(s.min_first_timestamp) as start_time,
         max(s.max_last_timestamp) as end_time,
         dateDiff('SECOND', start_time, end_time) as duration,
         argMinMerge(s.first_url) as first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         sum(s.active_milliseconds)/1000 as active_seconds,
         duration-active_seconds as inactive_seconds,
         sum(s.console_log_count) as console_log_count,
         sum(s.console_warn_count) as console_warn_count,
         sum(s.console_error_count) as console_error_count
  FROM session_replay_events s
  WHERE s.team_id = 2
    AND s.min_first_timestamp >= '2020-12-11 13:46:23'
    AND s.min_first_timestamp >= '2020-12-25 00:00:00'
    AND s.max_last_timestamp <= '2021-01-01 13:46:23'
    AND s.session_id in
      (select `$session_id` as session_id
       from
         (SELECT groupUniqArray(event) as event_names,
                 `$session_id`
          FROM events e PREWHERE team_id = 2
          AND e.timestamp >= '2020-12-11 13:46:23'
          AND e.timestamp <= now()
          WHERE notEmpty(`$session_id`)
            AND timestamp >= '2020-12-24 12:00:00'
            AND timestamp <= '2021-01-02 01:46:23'
            AND (event = '$pageview'
                 AND (ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(properties, '$browser'), ''), 'null'), '^"|"$', ''), 'Chrome'), 0)))
          GROUP BY `$session_id`
          HAVING 1=1
          AND hasAll(event_names, ['$pageview'])) as session_events_sub_query)
  GROUP BY session_id
  HAVING 1=1
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0
  '
---
# name: TestClickhouseSessionRecordingsListFromSessionReplay.test_event_filter_with_hogql_properties.1
  '
  
  SELECT s.session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(s.min_first_timestamp) as start_time,
         max(s.max_last_timestamp) as end_time,
         dateDiff('SECOND', start_time, end_time) as duration,
         argMinMerge(s.first_url) as first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         sum(s.active_milliseconds)/1000 as active_seconds,
         duration-active_seconds as inactive_seconds,
         sum(s.console_log_count) as console_log_count,
         sum(s.console_warn_count) as console_warn_count,
         sum(s.console_error_count) as console_error_count
  FROM session_replay_events s
  WHERE s.team_id = 2
    AND s.min_first_timestamp >= '2020-12-11 13:46:23'
    AND s.min_first_timestamp >= '2020-12-25 00:00:00'
    AND s.max_last_timestamp <= '2021-01-01 13:46:23'
    AND s.session_id in
      (select `$session_id` as session_id
       from
         (SELECT groupUniqArray(event) as event_names,
                 `$session_id`
          FROM events e PREWHERE team_id = 2
          AND e.timestamp >= '2020-12-11 13:46:23'
          AND e.timestamp <= now()
          WHERE notEmpty(`$session_id`)
            AND timestamp >= '2020-12-24 12:00:00'
            AND timestamp <= '2021-01-02 01:46:23'
            AND (event = '$pageview'
                 AND (ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(properties, '$browser'), ''), 'null'), '^"|"$', ''), 'Firefox'), 0)))
          GROUP BY `$session_id`
          HAVING 1=1
          AND hasAll(event_names, ['$pageview'])) as session_events_sub_query)
  GROUP BY session_id
  HAVING 1=1
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0
  '
---
# name: TestClickhouseSessionRecordingsListFromSessionReplay.test_event_filter_with_hogql_properties_materialized
  '
  
  SELECT s.session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(s.min_first_timestamp) as start_time,
         max(s.max_last_timestamp) as end_time,
         dateDiff('SECOND', start_time, end_time) as duration,
         argMinMerge(s.first_url) as first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         sum(s.active_milliseconds)/1000 as active_seconds,
         duration-active_seconds as inactive_seconds,
         sum(s.console_log_count) as console_log_count,
         sum(s.console_warn_count) as console_warn_count,
         sum(s.console_error_count) as console_error_count
  FROM session_replay_events s
  WHERE s.team_id = 2
    AND s.min_first_timestamp >= '2020-12-11 13:46:23'
    AND s.min_first_timestamp >= '2020-12-25 00:00:00'
    AND s.max_last_timestamp <= '2021-01-01 13:46:23'
    AND s.session_id in
      (select `$session_id` as session_id
       from
         (SELECT groupUniqArray(event) as event_names,
                 `$session_id`
          FROM events e PREWHERE team_id = 2
          AND e.timestamp >= '2020-12-11 13:46:23'
          AND e.timestamp <= now()
          WHERE notEmpty(`$session_id`)
            AND timestamp >= '2020-12-24 12:00:00'
            AND timestamp <= '2021-01-02 01:46:23'
            AND (event = '$pageview'
                 AND (ifNull(equals(nullIf(nullIf(events.`mat_$browser`, ''), 'null'), 'Chrome'), 0)))
          GROUP BY `$session_id`
          HAVING 1=1
          AND hasAll(event_names, ['$pageview'])) as session_events_sub_query)
  GROUP BY session_id
  HAVING 1=1
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0
  '
---
# name: TestClickhouseSessionRecordingsListFromSessionReplay.test_event_filter_with_hogql_properties_materialized.1
  '
  
  SELECT s.session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(s.min_first_timestamp) as start_time,
         max(s.max_last_timestamp) as end_time,
         dateDiff('SECOND', start_time, end_time) as duration,
         argMinMerge(s.first_url) as first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         sum(s.active_milliseconds)/1000 as active_seconds,
         duration-active_seconds as inactive_seconds,
         sum(s.console_log_count) as console_log_count,
         sum(s.console_warn_count) as console_warn_count,
         sum(s.console_error_count) as console_error_count
  FROM session_replay_events s
  WHERE s.team_id = 2
    AND s.min_first_timestamp >= '2020-12-11 13:46:23'
    AND s.min_first_timestamp >= '2020-12-25 00:00:00'
    AND s.max_last_timestamp <= '2021-01-01 13:46:23'
    AND s.session_id in
      (select `$session_id` as session_id
       from
         (SELECT groupUniqArray(event) as event_names,
                 `$session_id`
          FROM events e PREWHERE team_id = 2
          AND e.timestamp >= '2020-12-11 13:46:23'
          AND e.timestamp <= now()
          WHERE notEmpty(`$session_id`)
            AND timestamp >= '2020-12-24 12:00:00'
            AND timestamp <= '2021-01-02 01:46:23'
            AND (event = '$pageview'
                 AND (ifNull(equals(nullIf(nullIf(events.`mat_$browser`, ''), 'null'), 'Firefox'), 0)))
          GROUP BY `$session_id`
          HAVING 1=1
          AND hasAll(event_names, ['$pageview'])) as session_events_sub_query)
  GROUP BY session_id
  HAVING 1=1
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0
  '
---
# name: TestClickhouseSessionRecordingsListFromSessionReplay.test_event_filter_with_matching_on_session_id
  '
  
  SELECT s.session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(s.min_first_timestamp) as start_time,
         max(s.max_last_timestamp) as end_time,
         dateDiff('SECOND', start_time, end_time) as duration,
         argMinMerge(s.first_url) as first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         sum(s.active_milliseconds)/1000 as active_seconds,
         duration-active_seconds as inactive_seconds,
         sum(s.console_log_count) as console_log_count,
         sum(s.console_warn_count) as console_warn_count,
         sum(s.console_error_count) as console_error_count
  FROM session_replay_events s
  WHERE s.team_id = 2
    AND s.min_first_timestamp >= '2020-12-11 13:46:23'
    AND s.min_first_timestamp >= '2020-12-25 00:00:00'
    AND s.max_last_timestamp <= '2021-01-01 13:46:23'
    AND s.session_id in
      (select `$session_id` as session_id
       from
         (SELECT groupUniqArray(event) as event_names,
                 `$session_id`
          FROM events e PREWHERE team_id = 2
          AND e.timestamp >= '2020-12-11 13:46:23'
          AND e.timestamp <= now()
          WHERE notEmpty(`$session_id`)
            AND timestamp >= '2020-12-24 12:00:00'
            AND timestamp <= '2021-01-02 01:46:23'
            AND (event = '$pageview')
          GROUP BY `$session_id`
          HAVING 1=1
          AND hasAll(event_names, ['$pageview'])) as session_events_sub_query)
  GROUP BY session_id
  HAVING 1=1
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0
  '
---
# name: TestClickhouseSessionRecordingsListFromSessionReplay.test_event_filter_with_matching_on_session_id.1
  '
  
  SELECT s.session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(s.min_first_timestamp) as start_time,
         max(s.max_last_timestamp) as end_time,
         dateDiff('SECOND', start_time, end_time) as duration,
         argMinMerge(s.first_url) as first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         sum(s.active_milliseconds)/1000 as active_seconds,
         duration-active_seconds as inactive_seconds,
         sum(s.console_log_count) as console_log_count,
         sum(s.console_warn_count) as console_warn_count,
         sum(s.console_error_count) as console_error_count
  FROM session_replay_events s
  WHERE s.team_id = 2
    AND s.min_first_timestamp >= '2020-12-11 13:46:23'
    AND s.min_first_timestamp >= '2020-12-25 00:00:00'
    AND s.max_last_timestamp <= '2021-01-01 13:46:23'
    AND s.session_id in
      (select `$session_id` as session_id
       from
         (SELECT groupUniqArray(event) as event_names,
                 `$session_id`
          FROM events e PREWHERE team_id = 2
          AND e.timestamp >= '2020-12-11 13:46:23'
          AND e.timestamp <= now()
          WHERE notEmpty(`$session_id`)
            AND timestamp >= '2020-12-24 12:00:00'
            AND timestamp <= '2021-01-02 01:46:23'
            AND (event = '$autocapture')
          GROUP BY `$session_id`
          HAVING 1=1
          AND hasAll(event_names, ['$autocapture'])) as session_events_sub_query)
  GROUP BY session_id
  HAVING 1=1
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0
  '
---
# name: TestClickhouseSessionRecordingsListFromSessionReplay.test_event_filter_with_person_properties
  '
  
  SELECT s.session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(s.min_first_timestamp) as start_time,
         max(s.max_last_timestamp) as end_time,
         dateDiff('SECOND', start_time, end_time) as duration,
         argMinMerge(s.first_url) as first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         sum(s.active_milliseconds)/1000 as active_seconds,
         duration-active_seconds as inactive_seconds,
         sum(s.console_log_count) as console_log_count,
         sum(s.console_warn_count) as console_warn_count,
         sum(s.console_error_count) as console_error_count
  FROM session_replay_events s
  WHERE s.team_id = 2
    AND s.min_first_timestamp >= '2020-12-11 13:46:23'
    AND s.min_first_timestamp >= '2020-12-25 00:00:00'
    AND s.max_last_timestamp <= '2021-01-01 13:46:23'
    AND s.distinct_id in
      (select distinct_id
       from
         (SELECT distinct_id,
                 argMax(person_id, version) as person_id
          FROM person_distinct_id2 as pdi
          INNER JOIN
            (SELECT id
             FROM person
             WHERE team_id = 2
               AND id IN
                 (SELECT id
                  FROM person
                  WHERE team_id = 2
                    AND (has(['bla'], replaceRegexpAll(JSONExtractRaw(properties, 'email'), '^"|"$', ''))) )
             GROUP BY id
             HAVING max(is_deleted) = 0
             AND (has(['bla'], replaceRegexpAll(JSONExtractRaw(argMax(person.properties, version), 'email'), '^"|"$', ''))) SETTINGS optimize_aggregation_in_order = 1) person ON person.id = pdi.person_id
          WHERE team_id = 2
          GROUP BY distinct_id
          HAVING argMax(is_deleted, version) = 0) as session_persons_sub_query)
  GROUP BY session_id
  HAVING 1=1
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0
  '
---
# name: TestClickhouseSessionRecordingsListFromSessionReplay.test_event_filter_with_properties
  '
  
  SELECT s.session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(s.min_first_timestamp) as start_time,
         max(s.max_last_timestamp) as end_time,
         dateDiff('SECOND', start_time, end_time) as duration,
         argMinMerge(s.first_url) as first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         sum(s.active_milliseconds)/1000 as active_seconds,
         duration-active_seconds as inactive_seconds,
         sum(s.console_log_count) as console_log_count,
         sum(s.console_warn_count) as console_warn_count,
         sum(s.console_error_count) as console_error_count
  FROM session_replay_events s
  WHERE s.team_id = 2
    AND s.min_first_timestamp >= '2020-12-11 13:46:23'
    AND s.min_first_timestamp >= '2020-12-25 00:00:00'
    AND s.max_last_timestamp <= '2021-01-01 13:46:23'
    AND s.session_id in
      (select `$session_id` as session_id
       from
         (SELECT groupUniqArray(event) as event_names,
                 `$session_id`
          FROM events e PREWHERE team_id = 2
          AND e.timestamp >= '2020-12-11 13:46:23'
          AND e.timestamp <= now()
          WHERE notEmpty(`$session_id`)
            AND timestamp >= '2020-12-24 12:00:00'
            AND timestamp <= '2021-01-02 01:46:23'
            AND (event = '$pageview'
                 AND (has(['Chrome'], replaceRegexpAll(JSONExtractRaw(properties, '$browser'), '^"|"$', ''))))
          GROUP BY `$session_id`
          HAVING 1=1
          AND hasAll(event_names, ['$pageview'])) as session_events_sub_query)
  GROUP BY session_id
  HAVING 1=1
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0
  '
---
# name: TestClickhouseSessionRecordingsListFromSessionReplay.test_event_filter_with_properties.1
  '
  
  SELECT s.session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(s.min_first_timestamp) as start_time,
         max(s.max_last_timestamp) as end_time,
         dateDiff('SECOND', start_time, end_time) as duration,
         argMinMerge(s.first_url) as first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         sum(s.active_milliseconds)/1000 as active_seconds,
         duration-active_seconds as inactive_seconds,
         sum(s.console_log_count) as console_log_count,
         sum(s.console_warn_count) as console_warn_count,
         sum(s.console_error_count) as console_error_count
  FROM session_replay_events s
  WHERE s.team_id = 2
    AND s.min_first_timestamp >= '2020-12-11 13:46:23'
    AND s.min_first_timestamp >= '2020-12-25 00:00:00'
    AND s.max_last_timestamp <= '2021-01-01 13:46:23'
    AND s.session_id in
      (select `$session_id` as session_id
       from
         (SELECT groupUniqArray(event) as event_names,
                 `$session_id`
          FROM events e PREWHERE team_id = 2
          AND e.timestamp >= '2020-12-11 13:46:23'
          AND e.timestamp <= now()
          WHERE notEmpty(`$session_id`)
            AND timestamp >= '2020-12-24 12:00:00'
            AND timestamp <= '2021-01-02 01:46:23'
            AND (event = '$pageview'
                 AND (has(['Firefox'], replaceRegexpAll(JSONExtractRaw(properties, '$browser'), '^"|"$', ''))))
          GROUP BY `$session_id`
          HAVING 1=1
          AND hasAll(event_names, ['$pageview'])) as session_events_sub_query)
  GROUP BY session_id
  HAVING 1=1
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0
  '
---
# name: TestClickhouseSessionRecordingsListFromSessionReplay.test_event_filter_with_properties_materialized
  '
  
  SELECT s.session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(s.min_first_timestamp) as start_time,
         max(s.max_last_timestamp) as end_time,
         dateDiff('SECOND', start_time, end_time) as duration,
         argMinMerge(s.first_url) as first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         sum(s.active_milliseconds)/1000 as active_seconds,
         duration-active_seconds as inactive_seconds,
         sum(s.console_log_count) as console_log_count,
         sum(s.console_warn_count) as console_warn_count,
         sum(s.console_error_count) as console_error_count
  FROM session_replay_events s
  WHERE s.team_id = 2
    AND s.min_first_timestamp >= '2020-12-11 13:46:23'
    AND s.min_first_timestamp >= '2020-12-25 00:00:00'
    AND s.max_last_timestamp <= '2021-01-01 13:46:23'
    AND s.session_id in
      (select `$session_id` as session_id
       from
         (SELECT groupUniqArray(event) as event_names,
                 `$session_id`
          FROM events e PREWHERE team_id = 2
          AND e.timestamp >= '2020-12-11 13:46:23'
          AND e.timestamp <= now()
          WHERE notEmpty(`$session_id`)
            AND timestamp >= '2020-12-24 12:00:00'
            AND timestamp <= '2021-01-02 01:46:23'
            AND (event = '$pageview'
                 AND (has(['Chrome'], "mat_$browser")))
          GROUP BY `$session_id`
          HAVING 1=1
          AND hasAll(event_names, ['$pageview'])) as session_events_sub_query)
  GROUP BY session_id
  HAVING 1=1
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0
  '
---
# name: TestClickhouseSessionRecordingsListFromSessionReplay.test_event_filter_with_properties_materialized.1
  '
  
  SELECT s.session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(s.min_first_timestamp) as start_time,
         max(s.max_last_timestamp) as end_time,
         dateDiff('SECOND', start_time, end_time) as duration,
         argMinMerge(s.first_url) as first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         sum(s.active_milliseconds)/1000 as active_seconds,
         duration-active_seconds as inactive_seconds,
         sum(s.console_log_count) as console_log_count,
         sum(s.console_warn_count) as console_warn_count,
         sum(s.console_error_count) as console_error_count
  FROM session_replay_events s
  WHERE s.team_id = 2
    AND s.min_first_timestamp >= '2020-12-11 13:46:23'
    AND s.min_first_timestamp >= '2020-12-25 00:00:00'
    AND s.max_last_timestamp <= '2021-01-01 13:46:23'
    AND s.session_id in
      (select `$session_id` as session_id
       from
         (SELECT groupUniqArray(event) as event_names,
                 `$session_id`
          FROM events e PREWHERE team_id = 2
          AND e.timestamp >= '2020-12-11 13:46:23'
          AND e.timestamp <= now()
          WHERE notEmpty(`$session_id`)
            AND timestamp >= '2020-12-24 12:00:00'
            AND timestamp <= '2021-01-02 01:46:23'
            AND (event = '$pageview'
                 AND (has(['Firefox'], "mat_$browser")))
          GROUP BY `$session_id`
          HAVING 1=1
          AND hasAll(event_names, ['$pageview'])) as session_events_sub_query)
  GROUP BY session_id
  HAVING 1=1
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0
  '
---
# name: TestClickhouseSessionRecordingsListFromSessionReplay.test_event_filter_with_test_accounts_excluded
  '
  
  SELECT s.session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(s.min_first_timestamp) as start_time,
         max(s.max_last_timestamp) as end_time,
         dateDiff('SECOND', start_time, end_time) as duration,
         argMinMerge(s.first_url) as first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         sum(s.active_milliseconds)/1000 as active_seconds,
         duration-active_seconds as inactive_seconds,
         sum(s.console_log_count) as console_log_count,
         sum(s.console_warn_count) as console_warn_count,
         sum(s.console_error_count) as console_error_count
  FROM session_replay_events s
  WHERE s.team_id = 2
    AND s.min_first_timestamp >= '2020-12-31 20:00:00'
    AND s.min_first_timestamp >= '2021-01-14 00:00:00'
    AND s.max_last_timestamp <= '2021-01-21 20:00:00'
    AND s.distinct_id in
      (select distinct_id
       from
         (SELECT distinct_id,
                 argMax(person_id, version) as person_id
          FROM person_distinct_id2 as pdi
          INNER JOIN
            (SELECT id
             FROM person
             WHERE team_id = 2
               AND id IN
                 (SELECT id
                  FROM person
                  WHERE team_id = 2
                    AND ((NOT (replaceRegexpAll(JSONExtractRaw(properties, 'email'), '^"|"$', '') ILIKE '%@posthog.com%'))) )
             GROUP BY id
             HAVING max(is_deleted) = 0
             AND ((NOT (replaceRegexpAll(JSONExtractRaw(argMax(person.properties, version), 'email'), '^"|"$', '') ILIKE '%@posthog.com%'))) SETTINGS optimize_aggregation_in_order = 1) person ON person.id = pdi.person_id
          WHERE team_id = 2
          GROUP BY distinct_id
          HAVING argMax(is_deleted, version) = 0) as session_persons_sub_query)
    AND s.session_id in
      (select `$session_id` as session_id
       from
         (SELECT groupUniqArray(event) as event_names,
                 `$session_id`
          FROM events e PREWHERE team_id = 2
          AND e.timestamp >= '2020-12-31 20:00:00'
          AND e.timestamp <= now()
          WHERE notEmpty(`$session_id`)
            AND timestamp >= '2021-01-13 12:00:00'
            AND timestamp <= '2021-01-22 08:00:00'
            AND (event = '$pageview')
            AND (has(['false'], replaceRegexpAll(JSONExtractRaw(e.properties, 'is_internal_user'), '^"|"$', ''))
                 AND ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(properties, '$browser'), ''), 'null'), '^"|"$', ''), 'Chrome'), 0))
            AND e.distinct_id in
              (select distinct_id
               from
                 (SELECT distinct_id,
                         argMax(person_id, version) as person_id
                  FROM person_distinct_id2 as pdi
                  INNER JOIN
                    (SELECT id
                     FROM person
                     WHERE team_id = 2
                       AND id IN
                         (SELECT id
                          FROM person
                          WHERE team_id = 2
                            AND ((NOT (replaceRegexpAll(JSONExtractRaw(properties, 'email'), '^"|"$', '') ILIKE '%@posthog.com%'))) )
                     GROUP BY id
                     HAVING max(is_deleted) = 0
                     AND ((NOT (replaceRegexpAll(JSONExtractRaw(argMax(person.properties, version), 'email'), '^"|"$', '') ILIKE '%@posthog.com%'))) SETTINGS optimize_aggregation_in_order = 1) person ON person.id = pdi.person_id
                  WHERE team_id = 2
                  GROUP BY distinct_id
                  HAVING argMax(is_deleted, version) = 0) as events_persons_sub_query)
          GROUP BY `$session_id`
          HAVING 1=1
          AND hasAll(event_names, ['$pageview'])) as session_events_sub_query)
  GROUP BY session_id
  HAVING 1=1
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0
  '
---
# name: TestClickhouseSessionRecordingsListFromSessionReplay.test_event_filter_with_test_accounts_excluded.1
  '
  
  SELECT s.session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(s.min_first_timestamp) as start_time,
         max(s.max_last_timestamp) as end_time,
         dateDiff('SECOND', start_time, end_time) as duration,
         argMinMerge(s.first_url) as first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         sum(s.active_milliseconds)/1000 as active_seconds,
         duration-active_seconds as inactive_seconds,
         sum(s.console_log_count) as console_log_count,
         sum(s.console_warn_count) as console_warn_count,
         sum(s.console_error_count) as console_error_count
  FROM session_replay_events s
  WHERE s.team_id = 2
    AND s.min_first_timestamp >= '2020-12-31 20:00:00'
    AND s.min_first_timestamp >= '2021-01-14 00:00:00'
    AND s.max_last_timestamp <= '2021-01-21 20:00:00'
    AND s.session_id in
      (select `$session_id` as session_id
       from
         (SELECT groupUniqArray(event) as event_names,
                 `$session_id`
          FROM events e PREWHERE team_id = 2
          AND e.timestamp >= '2020-12-31 20:00:00'
          AND e.timestamp <= now()
          WHERE notEmpty(`$session_id`)
            AND timestamp >= '2021-01-13 12:00:00'
            AND timestamp <= '2021-01-22 08:00:00'
            AND (event = '$pageview')
          GROUP BY `$session_id`
          HAVING 1=1
          AND hasAll(event_names, ['$pageview'])) as session_events_sub_query)
  GROUP BY session_id
  HAVING 1=1
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0
  '
---
# name: TestClickhouseSessionRecordingsListFromSessionReplay.test_event_filter_with_test_accounts_excluded_materialized
  '
  
  SELECT s.session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(s.min_first_timestamp) as start_time,
         max(s.max_last_timestamp) as end_time,
         dateDiff('SECOND', start_time, end_time) as duration,
         argMinMerge(s.first_url) as first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         sum(s.active_milliseconds)/1000 as active_seconds,
         duration-active_seconds as inactive_seconds,
         sum(s.console_log_count) as console_log_count,
         sum(s.console_warn_count) as console_warn_count,
         sum(s.console_error_count) as console_error_count
  FROM session_replay_events s
  WHERE s.team_id = 2
    AND s.min_first_timestamp >= '2020-12-31 20:00:00'
    AND s.min_first_timestamp >= '2021-01-14 00:00:00'
    AND s.max_last_timestamp <= '2021-01-21 20:00:00'
    AND s.distinct_id in
      (select distinct_id
       from
         (SELECT distinct_id,
                 argMax(person_id, version) as person_id
          FROM person_distinct_id2 as pdi
          INNER JOIN
            (SELECT id
             FROM person
             WHERE team_id = 2
               AND id IN
                 (SELECT id
                  FROM person
                  WHERE team_id = 2
                    AND ((NOT ("pmat_email" ILIKE '%@posthog.com%'))) )
             GROUP BY id
             HAVING max(is_deleted) = 0
             AND ((NOT (argMax(person."pmat_email", version) ILIKE '%@posthog.com%'))) SETTINGS optimize_aggregation_in_order = 1) person ON person.id = pdi.person_id
          WHERE team_id = 2
          GROUP BY distinct_id
          HAVING argMax(is_deleted, version) = 0) as session_persons_sub_query)
    AND s.session_id in
      (select `$session_id` as session_id
       from
         (SELECT groupUniqArray(event) as event_names,
                 `$session_id`
          FROM events e PREWHERE team_id = 2
          AND e.timestamp >= '2020-12-31 20:00:00'
          AND e.timestamp <= now()
          WHERE notEmpty(`$session_id`)
            AND timestamp >= '2021-01-13 12:00:00'
            AND timestamp <= '2021-01-22 08:00:00'
            AND (event = '$pageview')
            AND (has(['false'], "mat_is_internal_user")
                 AND ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(properties, '$browser'), ''), 'null'), '^"|"$', ''), 'Chrome'), 0))
            AND e.distinct_id in
              (select distinct_id
               from
                 (SELECT distinct_id,
                         argMax(person_id, version) as person_id
                  FROM person_distinct_id2 as pdi
                  INNER JOIN
                    (SELECT id
                     FROM person
                     WHERE team_id = 2
                       AND id IN
                         (SELECT id
                          FROM person
                          WHERE team_id = 2
                            AND ((NOT ("pmat_email" ILIKE '%@posthog.com%'))) )
                     GROUP BY id
                     HAVING max(is_deleted) = 0
                     AND ((NOT (argMax(person."pmat_email", version) ILIKE '%@posthog.com%'))) SETTINGS optimize_aggregation_in_order = 1) person ON person.id = pdi.person_id
                  WHERE team_id = 2
                  GROUP BY distinct_id
                  HAVING argMax(is_deleted, version) = 0) as events_persons_sub_query)
          GROUP BY `$session_id`
          HAVING 1=1
          AND hasAll(event_names, ['$pageview'])) as session_events_sub_query)
  GROUP BY session_id
  HAVING 1=1
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0
  '
---
# name: TestClickhouseSessionRecordingsListFromSessionReplay.test_event_filter_with_test_accounts_excluded_materialized.1
  '
  
  SELECT s.session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(s.min_first_timestamp) as start_time,
         max(s.max_last_timestamp) as end_time,
         dateDiff('SECOND', start_time, end_time) as duration,
         argMinMerge(s.first_url) as first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         sum(s.active_milliseconds)/1000 as active_seconds,
         duration-active_seconds as inactive_seconds,
         sum(s.console_log_count) as console_log_count,
         sum(s.console_warn_count) as console_warn_count,
         sum(s.console_error_count) as console_error_count
  FROM session_replay_events s
  WHERE s.team_id = 2
    AND s.min_first_timestamp >= '2020-12-31 20:00:00'
    AND s.min_first_timestamp >= '2021-01-14 00:00:00'
    AND s.max_last_timestamp <= '2021-01-21 20:00:00'
    AND s.session_id in
      (select `$session_id` as session_id
       from
         (SELECT groupUniqArray(event) as event_names,
                 `$session_id`
          FROM events e PREWHERE team_id = 2
          AND e.timestamp >= '2020-12-31 20:00:00'
          AND e.timestamp <= now()
          WHERE notEmpty(`$session_id`)
            AND timestamp >= '2021-01-13 12:00:00'
            AND timestamp <= '2021-01-22 08:00:00'
            AND (event = '$pageview')
          GROUP BY `$session_id`
          HAVING 1=1
          AND hasAll(event_names, ['$pageview'])) as session_events_sub_query)
  GROUP BY session_id
  HAVING 1=1
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0
  '
---
# name: TestClickhouseSessionRecordingsListFromSessionReplay.test_event_filter_with_two_events_and_multiple_teams
  '
  
  SELECT s.session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(s.min_first_timestamp) as start_time,
         max(s.max_last_timestamp) as end_time,
         dateDiff('SECOND', start_time, end_time) as duration,
         argMinMerge(s.first_url) as first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         sum(s.active_milliseconds)/1000 as active_seconds,
         duration-active_seconds as inactive_seconds,
         sum(s.console_log_count) as console_log_count,
         sum(s.console_warn_count) as console_warn_count,
         sum(s.console_error_count) as console_error_count
  FROM session_replay_events s
  WHERE s.team_id = 2
    AND s.min_first_timestamp >= '2020-12-31 20:00:00'
    AND s.min_first_timestamp >= '2021-01-14 00:00:00'
    AND s.max_last_timestamp <= '2021-01-21 20:00:00'
    AND s.session_id in
      (select `$session_id` as session_id
       from
         (SELECT groupUniqArray(event) as event_names,
                 `$session_id`
          FROM events e PREWHERE team_id = 2
          AND e.timestamp >= '2020-12-31 20:00:00'
          AND e.timestamp <= now()
          WHERE notEmpty(`$session_id`)
            AND timestamp >= '2021-01-13 12:00:00'
            AND timestamp <= '2021-01-22 08:00:00'
            AND ((event = '$pageview')
                 OR event = '$pageleave')
          GROUP BY `$session_id`
          HAVING 1=1
          AND hasAll(event_names, ['$pageview', '$pageleave'])) as session_events_sub_query)
  GROUP BY session_id
  HAVING 1=1
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0
  '
---
# name: TestClickhouseSessionRecordingsListFromSessionReplay.test_filter_for_recordings_by_console_text
  '
  
  SELECT s.session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(s.min_first_timestamp) as start_time,
         max(s.max_last_timestamp) as end_time,
         dateDiff('SECOND', start_time, end_time) as duration,
         argMinMerge(s.first_url) as first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         sum(s.active_milliseconds)/1000 as active_seconds,
         duration-active_seconds as inactive_seconds,
         sum(s.console_log_count) as console_log_count,
         sum(s.console_warn_count) as console_warn_count,
         sum(s.console_error_count) as console_error_count
  FROM session_replay_events s
  WHERE s.team_id = 2
    AND s.min_first_timestamp >= '2020-12-31 20:00:00'
    AND s.min_first_timestamp >= '2021-01-14 00:00:00'
    AND s.max_last_timestamp <= '2021-01-21 20:00:00'
    AND "session_id" in
      (SELECT distinct log_source_id as session_id
       FROM log_entries PREWHERE team_id = 2
       AND timestamp >= '2020-12-31 20:00:00'
       AND timestamp <= now()
       AND timestamp >= '2021-01-13 12:00:00'
       AND timestamp <= '2021-01-22 08:00:00'
       WHERE 1=1
         AND level in ['warn', 'error']
         AND positionCaseInsensitive(message, 'message 4') > 0 ) as log_text_matching
  GROUP BY session_id
  HAVING 1=1
  AND (console_warn_count > 0
       OR console_error_count > 0)
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0
  '
---
# name: TestClickhouseSessionRecordingsListFromSessionReplay.test_filter_for_recordings_by_console_text.1
  '
  
  SELECT s.session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(s.min_first_timestamp) as start_time,
         max(s.max_last_timestamp) as end_time,
         dateDiff('SECOND', start_time, end_time) as duration,
         argMinMerge(s.first_url) as first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         sum(s.active_milliseconds)/1000 as active_seconds,
         duration-active_seconds as inactive_seconds,
         sum(s.console_log_count) as console_log_count,
         sum(s.console_warn_count) as console_warn_count,
         sum(s.console_error_count) as console_error_count
  FROM session_replay_events s
  WHERE s.team_id = 2
    AND s.min_first_timestamp >= '2020-12-31 20:00:00'
    AND s.min_first_timestamp >= '2021-01-14 00:00:00'
    AND s.max_last_timestamp <= '2021-01-21 20:00:00'
    AND "session_id" in
      (SELECT distinct log_source_id as session_id
       FROM log_entries PREWHERE team_id = 2
       AND timestamp >= '2020-12-31 20:00:00'
       AND timestamp <= now()
       AND timestamp >= '2021-01-13 12:00:00'
       AND timestamp <= '2021-01-22 08:00:00'
       WHERE 1=1
         AND level in ['warn', 'error']
         AND positionCaseInsensitive(message, 'message 5') > 0 ) as log_text_matching
  GROUP BY session_id
  HAVING 1=1
  AND (console_warn_count > 0
       OR console_error_count > 0)
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0
  '
---
# name: TestClickhouseSessionRecordingsListFromSessionReplay.test_filter_for_recordings_by_console_text.2
  '
  
  SELECT s.session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(s.min_first_timestamp) as start_time,
         max(s.max_last_timestamp) as end_time,
         dateDiff('SECOND', start_time, end_time) as duration,
         argMinMerge(s.first_url) as first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         sum(s.active_milliseconds)/1000 as active_seconds,
         duration-active_seconds as inactive_seconds,
         sum(s.console_log_count) as console_log_count,
         sum(s.console_warn_count) as console_warn_count,
         sum(s.console_error_count) as console_error_count
  FROM session_replay_events s
  WHERE s.team_id = 2
    AND s.min_first_timestamp >= '2020-12-31 20:00:00'
    AND s.min_first_timestamp >= '2021-01-14 00:00:00'
    AND s.max_last_timestamp <= '2021-01-21 20:00:00'
    AND "session_id" in
      (SELECT distinct log_source_id as session_id
       FROM log_entries PREWHERE team_id = 2
       AND timestamp >= '2020-12-31 20:00:00'
       AND timestamp <= now()
       AND timestamp >= '2021-01-13 12:00:00'
       AND timestamp <= '2021-01-22 08:00:00'
       WHERE 1=1
         AND level in ['warn', 'error']
         AND positionCaseInsensitive(message, 'MESSAGE 5') > 0 ) as log_text_matching
  GROUP BY session_id
  HAVING 1=1
  AND (console_warn_count > 0
       OR console_error_count > 0)
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0
  '
---
# name: TestClickhouseSessionRecordingsListFromSessionReplay.test_filter_for_recordings_by_console_text.3
  '
  
  SELECT s.session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(s.min_first_timestamp) as start_time,
         max(s.max_last_timestamp) as end_time,
         dateDiff('SECOND', start_time, end_time) as duration,
         argMinMerge(s.first_url) as first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         sum(s.active_milliseconds)/1000 as active_seconds,
         duration-active_seconds as inactive_seconds,
         sum(s.console_log_count) as console_log_count,
         sum(s.console_warn_count) as console_warn_count,
         sum(s.console_error_count) as console_error_count
  FROM session_replay_events s
  WHERE s.team_id = 2
    AND s.min_first_timestamp >= '2020-12-31 20:00:00'
    AND s.min_first_timestamp >= '2021-01-14 00:00:00'
    AND s.max_last_timestamp <= '2021-01-21 20:00:00'
    AND "session_id" in
      (SELECT distinct log_source_id as session_id
       FROM log_entries PREWHERE team_id = 2
       AND timestamp >= '2020-12-31 20:00:00'
       AND timestamp <= now()
       AND timestamp >= '2021-01-13 12:00:00'
       AND timestamp <= '2021-01-22 08:00:00'
       WHERE 1=1
         AND level in ['log']
         AND positionCaseInsensitive(message, 'message 5') > 0 ) as log_text_matching
  GROUP BY session_id
  HAVING 1=1
  AND (console_log_count > 0)
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0
  '
---
# name: TestClickhouseSessionRecordingsListFromSessionReplay.test_filter_for_recordings_by_console_text.4
  '
  
  SELECT s.session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(s.min_first_timestamp) as start_time,
         max(s.max_last_timestamp) as end_time,
         dateDiff('SECOND', start_time, end_time) as duration,
         argMinMerge(s.first_url) as first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         sum(s.active_milliseconds)/1000 as active_seconds,
         duration-active_seconds as inactive_seconds,
         sum(s.console_log_count) as console_log_count,
         sum(s.console_warn_count) as console_warn_count,
         sum(s.console_error_count) as console_error_count
  FROM session_replay_events s
  WHERE s.team_id = 2
    AND s.min_first_timestamp >= '2020-12-31 20:00:00'
    AND s.min_first_timestamp >= '2021-01-14 00:00:00'
    AND s.max_last_timestamp <= '2021-01-21 20:00:00'
    AND "session_id" in
      (SELECT distinct log_source_id as session_id
       FROM log_entries PREWHERE team_id = 2
       AND timestamp >= '2020-12-31 20:00:00'
       AND timestamp <= now()
       AND timestamp >= '2021-01-13 12:00:00'
       AND timestamp <= '2021-01-22 08:00:00'
       WHERE 1=1
         AND level in ['log']
         AND positionCaseInsensitive(message, 'message 5') > 0 ) as log_text_matching
  GROUP BY session_id
  HAVING 1=1
  AND (console_log_count > 0)
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0
  '
---
# name: TestClickhouseSessionRecordingsListFromSessionReplay.test_filter_for_recordings_by_console_text.5
  '
  
  SELECT s.session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(s.min_first_timestamp) as start_time,
         max(s.max_last_timestamp) as end_time,
         dateDiff('SECOND', start_time, end_time) as duration,
         argMinMerge(s.first_url) as first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         sum(s.active_milliseconds)/1000 as active_seconds,
         duration-active_seconds as inactive_seconds,
         sum(s.console_log_count) as console_log_count,
         sum(s.console_warn_count) as console_warn_count,
         sum(s.console_error_count) as console_error_count
  FROM session_replay_events s
  WHERE s.team_id = 2
    AND s.min_first_timestamp >= '2020-12-31 20:00:00'
    AND s.min_first_timestamp >= '2021-01-14 00:00:00'
    AND s.max_last_timestamp <= '2021-01-21 20:00:00'
    AND "session_id" in ['with-warns-session']
  GROUP BY session_id
  HAVING 1=1
  AND (console_warn_count > 0
       OR console_error_count > 0)
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0
  '
---
# name: TestClickhouseSessionRecordingsListFromSessionReplay.test_filter_for_recordings_by_console_text.6
  '
  
  SELECT distinct log_source_id as session_id
  FROM log_entries PREWHERE team_id = 2
  AND timestamp >= '2020-12-31 20:00:00'
  AND timestamp <= now()
  AND timestamp >= '2021-01-13 12:00:00'
  AND timestamp <= '2021-01-22 08:00:00'
  WHERE 1=1
    AND level in ['log']
    AND positionCaseInsensitive(message, 'message 5') > 0
  '
---
# name: TestClickhouseSessionRecordingsListFromSessionReplay.test_filter_for_recordings_by_console_text.7
  '
  
  SELECT s.session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(s.min_first_timestamp) as start_time,
         max(s.max_last_timestamp) as end_time,
         dateDiff('SECOND', start_time, end_time) as duration,
         argMinMerge(s.first_url) as first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         sum(s.active_milliseconds)/1000 as active_seconds,
         duration-active_seconds as inactive_seconds,
         sum(s.console_log_count) as console_log_count,
         sum(s.console_warn_count) as console_warn_count,
         sum(s.console_error_count) as console_error_count
  FROM session_replay_events s
  WHERE s.team_id = 2
    AND s.min_first_timestamp >= '2020-12-31 20:00:00'
    AND s.min_first_timestamp >= '2021-01-14 00:00:00'
    AND s.max_last_timestamp <= '2021-01-21 20:00:00'
    AND "session_id" in []
  GROUP BY session_id
  HAVING 1=1
  AND (console_log_count > 0)
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0
  '
---
# name: TestClickhouseSessionRecordingsListFromSessionReplay.test_filter_for_recordings_by_console_text.8
  '
  
  SELECT distinct log_source_id as session_id
  FROM log_entries PREWHERE team_id = 2
  AND timestamp >= '2020-12-31 20:00:00'
  AND timestamp <= now()
  AND timestamp >= '2021-01-13 12:00:00'
  AND timestamp <= '2021-01-22 08:00:00'
  WHERE 1=1
    AND level in ['log']
    AND positionCaseInsensitive(message, 'message 5') > 0
  '
---
# name: TestClickhouseSessionRecordingsListFromSessionReplay.test_filter_for_recordings_by_console_text.9
  '
  
  SELECT s.session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(s.min_first_timestamp) as start_time,
         max(s.max_last_timestamp) as end_time,
         dateDiff('SECOND', start_time, end_time) as duration,
         argMinMerge(s.first_url) as first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         sum(s.active_milliseconds)/1000 as active_seconds,
         duration-active_seconds as inactive_seconds,
         sum(s.console_log_count) as console_log_count,
         sum(s.console_warn_count) as console_warn_count,
         sum(s.console_error_count) as console_error_count
  FROM session_replay_events s
  WHERE s.team_id = 2
    AND s.min_first_timestamp >= '2020-12-31 20:00:00'
    AND s.min_first_timestamp >= '2021-01-14 00:00:00'
    AND s.max_last_timestamp <= '2021-01-21 20:00:00'
    AND "session_id" in []
  GROUP BY session_id
  HAVING 1=1
  AND (console_log_count > 0)
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0
  '
---
# name: TestClickhouseSessionRecordingsListFromSessionReplay.test_filter_for_recordings_with_console_errors
  '
  
  SELECT s.session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(s.min_first_timestamp) as start_time,
         max(s.max_last_timestamp) as end_time,
         dateDiff('SECOND', start_time, end_time) as duration,
         argMinMerge(s.first_url) as first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         sum(s.active_milliseconds)/1000 as active_seconds,
         duration-active_seconds as inactive_seconds,
         sum(s.console_log_count) as console_log_count,
         sum(s.console_warn_count) as console_warn_count,
         sum(s.console_error_count) as console_error_count
  FROM session_replay_events s
  WHERE s.team_id = 2
    AND s.min_first_timestamp >= '2020-12-31 20:00:00'
    AND s.min_first_timestamp >= '2021-01-14 00:00:00'
    AND s.max_last_timestamp <= '2021-01-21 20:00:00'
  GROUP BY session_id
  HAVING 1=1
  AND (console_error_count > 0)
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0
  '
---
# name: TestClickhouseSessionRecordingsListFromSessionReplay.test_filter_for_recordings_with_console_errors.1
  '
  
  SELECT s.session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(s.min_first_timestamp) as start_time,
         max(s.max_last_timestamp) as end_time,
         dateDiff('SECOND', start_time, end_time) as duration,
         argMinMerge(s.first_url) as first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         sum(s.active_milliseconds)/1000 as active_seconds,
         duration-active_seconds as inactive_seconds,
         sum(s.console_log_count) as console_log_count,
         sum(s.console_warn_count) as console_warn_count,
         sum(s.console_error_count) as console_error_count
  FROM session_replay_events s
  WHERE s.team_id = 2
    AND s.min_first_timestamp >= '2020-12-31 20:00:00'
    AND s.min_first_timestamp >= '2021-01-14 00:00:00'
    AND s.max_last_timestamp <= '2021-01-21 20:00:00'
  GROUP BY session_id
  HAVING 1=1
  AND (console_log_count > 0)
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0
  '
---
# name: TestClickhouseSessionRecordingsListFromSessionReplay.test_filter_for_recordings_with_console_errors.2
  '
  
  SELECT s.session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(s.min_first_timestamp) as start_time,
         max(s.max_last_timestamp) as end_time,
         dateDiff('SECOND', start_time, end_time) as duration,
         argMinMerge(s.first_url) as first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         sum(s.active_milliseconds)/1000 as active_seconds,
         duration-active_seconds as inactive_seconds,
         sum(s.console_log_count) as console_log_count,
         sum(s.console_warn_count) as console_warn_count,
         sum(s.console_error_count) as console_error_count
  FROM session_replay_events s
  WHERE s.team_id = 2
    AND s.min_first_timestamp >= '2020-12-31 20:00:00'
    AND s.min_first_timestamp >= '2021-01-14 00:00:00'
    AND s.max_last_timestamp <= '2021-01-21 20:00:00'
  GROUP BY session_id
  HAVING 1=1
  AND (console_log_count > 0)
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0
  '
---
# name: TestClickhouseSessionRecordingsListFromSessionReplay.test_filter_for_recordings_with_console_logs
  '
  
  SELECT s.session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(s.min_first_timestamp) as start_time,
         max(s.max_last_timestamp) as end_time,
         dateDiff('SECOND', start_time, end_time) as duration,
         argMinMerge(s.first_url) as first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         sum(s.active_milliseconds)/1000 as active_seconds,
         duration-active_seconds as inactive_seconds,
         sum(s.console_log_count) as console_log_count,
         sum(s.console_warn_count) as console_warn_count,
         sum(s.console_error_count) as console_error_count
  FROM session_replay_events s
  WHERE s.team_id = 2
    AND s.min_first_timestamp >= '2020-12-31 20:00:00'
    AND s.min_first_timestamp >= '2021-01-14 00:00:00'
    AND s.max_last_timestamp <= '2021-01-21 20:00:00'
  GROUP BY session_id
  HAVING 1=1
  AND (console_log_count > 0)
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0
  '
---
# name: TestClickhouseSessionRecordingsListFromSessionReplay.test_filter_for_recordings_with_console_logs.1
  '
  
  SELECT s.session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(s.min_first_timestamp) as start_time,
         max(s.max_last_timestamp) as end_time,
         dateDiff('SECOND', start_time, end_time) as duration,
         argMinMerge(s.first_url) as first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         sum(s.active_milliseconds)/1000 as active_seconds,
         duration-active_seconds as inactive_seconds,
         sum(s.console_log_count) as console_log_count,
         sum(s.console_warn_count) as console_warn_count,
         sum(s.console_error_count) as console_error_count
  FROM session_replay_events s
  WHERE s.team_id = 2
    AND s.min_first_timestamp >= '2020-12-31 20:00:00'
    AND s.min_first_timestamp >= '2021-01-14 00:00:00'
    AND s.max_last_timestamp <= '2021-01-21 20:00:00'
  GROUP BY session_id
  HAVING 1=1
  AND (console_warn_count > 0)
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0
  '
---
# name: TestClickhouseSessionRecordingsListFromSessionReplay.test_filter_for_recordings_with_console_logs.2
  '
  
  SELECT s.session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(s.min_first_timestamp) as start_time,
         max(s.max_last_timestamp) as end_time,
         dateDiff('SECOND', start_time, end_time) as duration,
         argMinMerge(s.first_url) as first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         sum(s.active_milliseconds)/1000 as active_seconds,
         duration-active_seconds as inactive_seconds,
         sum(s.console_log_count) as console_log_count,
         sum(s.console_warn_count) as console_warn_count,
         sum(s.console_error_count) as console_error_count
  FROM session_replay_events s
  WHERE s.team_id = 2
    AND s.min_first_timestamp >= '2020-12-31 20:00:00'
    AND s.min_first_timestamp >= '2021-01-14 00:00:00'
    AND s.max_last_timestamp <= '2021-01-21 20:00:00'
  GROUP BY session_id
  HAVING 1=1
  AND (console_warn_count > 0)
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0
  '
---
# name: TestClickhouseSessionRecordingsListFromSessionReplay.test_filter_for_recordings_with_console_warns
  '
  
  SELECT s.session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(s.min_first_timestamp) as start_time,
         max(s.max_last_timestamp) as end_time,
         dateDiff('SECOND', start_time, end_time) as duration,
         argMinMerge(s.first_url) as first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         sum(s.active_milliseconds)/1000 as active_seconds,
         duration-active_seconds as inactive_seconds,
         sum(s.console_log_count) as console_log_count,
         sum(s.console_warn_count) as console_warn_count,
         sum(s.console_error_count) as console_error_count
  FROM session_replay_events s
  WHERE s.team_id = 2
    AND s.min_first_timestamp >= '2020-12-31 20:00:00'
    AND s.min_first_timestamp >= '2021-01-14 00:00:00'
    AND s.max_last_timestamp <= '2021-01-21 20:00:00'
  GROUP BY session_id
  HAVING 1=1
  AND (console_warn_count > 0)
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0
  '
---
# name: TestClickhouseSessionRecordingsListFromSessionReplay.test_filter_for_recordings_with_console_warns.1
  '
  
  SELECT s.session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(s.min_first_timestamp) as start_time,
         max(s.max_last_timestamp) as end_time,
         dateDiff('SECOND', start_time, end_time) as duration,
         argMinMerge(s.first_url) as first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         sum(s.active_milliseconds)/1000 as active_seconds,
         duration-active_seconds as inactive_seconds,
         sum(s.console_log_count) as console_log_count,
         sum(s.console_warn_count) as console_warn_count,
         sum(s.console_error_count) as console_error_count
  FROM session_replay_events s
  WHERE s.team_id = 2
    AND s.min_first_timestamp >= '2020-12-31 20:00:00'
    AND s.min_first_timestamp >= '2021-01-14 00:00:00'
    AND s.max_last_timestamp <= '2021-01-21 20:00:00'
  GROUP BY session_id
  HAVING 1=1
  AND (console_log_count > 0)
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0
  '
---
# name: TestClickhouseSessionRecordingsListFromSessionReplay.test_filter_for_recordings_with_console_warns.2
  '
  
  SELECT s.session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(s.min_first_timestamp) as start_time,
         max(s.max_last_timestamp) as end_time,
         dateDiff('SECOND', start_time, end_time) as duration,
         argMinMerge(s.first_url) as first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         sum(s.active_milliseconds)/1000 as active_seconds,
         duration-active_seconds as inactive_seconds,
         sum(s.console_log_count) as console_log_count,
         sum(s.console_warn_count) as console_warn_count,
         sum(s.console_error_count) as console_error_count
  FROM session_replay_events s
  WHERE s.team_id = 2
    AND s.min_first_timestamp >= '2020-12-31 20:00:00'
    AND s.min_first_timestamp >= '2021-01-14 00:00:00'
    AND s.max_last_timestamp <= '2021-01-21 20:00:00'
  GROUP BY session_id
  HAVING 1=1
  AND (console_log_count > 0)
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0
  '
---
# name: TestClickhouseSessionRecordingsListFromSessionReplay.test_filter_for_recordings_with_mixed_console_counts
  '
  
  SELECT s.session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(s.min_first_timestamp) as start_time,
         max(s.max_last_timestamp) as end_time,
         dateDiff('SECOND', start_time, end_time) as duration,
         argMinMerge(s.first_url) as first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         sum(s.active_milliseconds)/1000 as active_seconds,
         duration-active_seconds as inactive_seconds,
         sum(s.console_log_count) as console_log_count,
         sum(s.console_warn_count) as console_warn_count,
         sum(s.console_error_count) as console_error_count
  FROM session_replay_events s
  WHERE s.team_id = 2
    AND s.min_first_timestamp >= '2020-12-31 20:00:00'
    AND s.min_first_timestamp >= '2021-01-14 00:00:00'
    AND s.max_last_timestamp <= '2021-01-21 20:00:00'
  GROUP BY session_id
  HAVING 1=1
  AND (console_warn_count > 0
       OR console_error_count > 0)
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0
  '
---
# name: TestClickhouseSessionRecordingsListFromSessionReplay.test_filter_for_recordings_with_mixed_console_counts.1
  '
  
  SELECT s.session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(s.min_first_timestamp) as start_time,
         max(s.max_last_timestamp) as end_time,
         dateDiff('SECOND', start_time, end_time) as duration,
         argMinMerge(s.first_url) as first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         sum(s.active_milliseconds)/1000 as active_seconds,
         duration-active_seconds as inactive_seconds,
         sum(s.console_log_count) as console_log_count,
         sum(s.console_warn_count) as console_warn_count,
         sum(s.console_error_count) as console_error_count
  FROM session_replay_events s
  WHERE s.team_id = 2
    AND s.min_first_timestamp >= '2020-12-31 20:00:00'
    AND s.min_first_timestamp >= '2021-01-14 00:00:00'
    AND s.max_last_timestamp <= '2021-01-21 20:00:00'
  GROUP BY session_id
  HAVING 1=1
  AND (console_log_count > 0)
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0
  '
---
# name: TestClickhouseSessionRecordingsListFromSessionReplay.test_filter_for_recordings_with_mixed_console_counts.2
  '
  
  SELECT s.session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(s.min_first_timestamp) as start_time,
         max(s.max_last_timestamp) as end_time,
         dateDiff('SECOND', start_time, end_time) as duration,
         argMinMerge(s.first_url) as first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         sum(s.active_milliseconds)/1000 as active_seconds,
         duration-active_seconds as inactive_seconds,
         sum(s.console_log_count) as console_log_count,
         sum(s.console_warn_count) as console_warn_count,
         sum(s.console_error_count) as console_error_count
  FROM session_replay_events s
  WHERE s.team_id = 2
    AND s.min_first_timestamp >= '2020-12-31 20:00:00'
    AND s.min_first_timestamp >= '2021-01-14 00:00:00'
    AND s.max_last_timestamp <= '2021-01-21 20:00:00'
  GROUP BY session_id
  HAVING 1=1
  AND (console_log_count > 0)
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0
  '
---
# name: TestClickhouseSessionRecordingsListFromSessionReplay.test_filter_with_cohort_properties
  '
  
  SELECT count(DISTINCT person_id)
  FROM cohortpeople
  WHERE team_id = 2
    AND cohort_id = 2
    AND version = NULL
  '
---
# name: TestClickhouseSessionRecordingsListFromSessionReplay.test_filter_with_cohort_properties.1
  '
  
  SELECT count(DISTINCT person_id)
  FROM cohortpeople
  WHERE team_id = 2
    AND cohort_id = 2
    AND version = 0
  '
---
# name: TestClickhouseSessionRecordingsListFromSessionReplay.test_filter_with_cohort_properties.2
  '
  
  SELECT s.session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(s.min_first_timestamp) as start_time,
         max(s.max_last_timestamp) as end_time,
         dateDiff('SECOND', start_time, end_time) as duration,
         argMinMerge(s.first_url) as first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         sum(s.active_milliseconds)/1000 as active_seconds,
         duration-active_seconds as inactive_seconds,
         sum(s.console_log_count) as console_log_count,
         sum(s.console_warn_count) as console_warn_count,
         sum(s.console_error_count) as console_error_count
  FROM session_replay_events s
  WHERE s.team_id = 2
    AND s.min_first_timestamp >= '2021-07-31 20:00:00'
    AND s.min_first_timestamp >= '2021-08-14 00:00:00'
    AND s.max_last_timestamp <= '2021-08-21 20:00:00'
    AND s.distinct_id in
      (select distinct_id
       from
         (SELECT distinct_id,
                 argMax(person_id, version) as person_id
          FROM person_distinct_id2 as pdi
          INNER JOIN
            (SELECT id
             FROM person
             WHERE team_id = 2
             GROUP BY id
             HAVING max(is_deleted) = 0 SETTINGS optimize_aggregation_in_order = 1) person ON person.id = pdi.person_id
          WHERE team_id = 2
            AND (pdi.person_id IN
                   (SELECT DISTINCT person_id
                    FROM cohortpeople
                    WHERE team_id = 2
                      AND cohort_id = 2
                      AND version = 0 ))
          GROUP BY distinct_id
          HAVING argMax(is_deleted, version) = 0) as session_persons_sub_query)
  GROUP BY session_id
  HAVING 1=1
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0
  '
---
# name: TestClickhouseSessionRecordingsListFromSessionReplay.test_filter_with_events_and_cohorts
  '
  
  SELECT count(DISTINCT person_id)
  FROM cohortpeople
  WHERE team_id = 2
    AND cohort_id = 2
    AND version = NULL
  '
---
# name: TestClickhouseSessionRecordingsListFromSessionReplay.test_filter_with_events_and_cohorts.1
  '
  
  SELECT count(DISTINCT person_id)
  FROM cohortpeople
  WHERE team_id = 2
    AND cohort_id = 2
    AND version = 0
  '
---
# name: TestClickhouseSessionRecordingsListFromSessionReplay.test_filter_with_events_and_cohorts.2
  '
  
  SELECT s.session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(s.min_first_timestamp) as start_time,
         max(s.max_last_timestamp) as end_time,
         dateDiff('SECOND', start_time, end_time) as duration,
         argMinMerge(s.first_url) as first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         sum(s.active_milliseconds)/1000 as active_seconds,
         duration-active_seconds as inactive_seconds,
         sum(s.console_log_count) as console_log_count,
         sum(s.console_warn_count) as console_warn_count,
         sum(s.console_error_count) as console_error_count
  FROM session_replay_events s
  WHERE s.team_id = 2
    AND s.min_first_timestamp >= '2021-07-31 20:00:00'
    AND s.min_first_timestamp >= '2021-08-14 00:00:00'
    AND s.max_last_timestamp <= '2021-08-21 20:00:00'
    AND s.distinct_id in
      (select distinct_id
       from
         (SELECT distinct_id,
                 argMax(person_id, version) as person_id
          FROM person_distinct_id2 as pdi
          INNER JOIN
            (SELECT id
             FROM person
             WHERE team_id = 2
             GROUP BY id
             HAVING max(is_deleted) = 0 SETTINGS optimize_aggregation_in_order = 1) person ON person.id = pdi.person_id
          WHERE team_id = 2
            AND (pdi.person_id IN
                   (SELECT DISTINCT person_id
                    FROM cohortpeople
                    WHERE team_id = 2
                      AND cohort_id = 2
                      AND version = 0 ))
          GROUP BY distinct_id
          HAVING argMax(is_deleted, version) = 0) as session_persons_sub_query)
    AND s.session_id in
      (select `$session_id` as session_id
       from
         (SELECT groupUniqArray(event) as event_names,
                 `$session_id`
          FROM events e PREWHERE team_id = 2
          AND e.timestamp >= '2021-07-31 20:00:00'
          AND e.timestamp <= now()
          WHERE notEmpty(`$session_id`)
            AND timestamp >= '2021-08-13 12:00:00'
            AND timestamp <= '2021-08-22 08:00:00'
            AND (event = '$pageview')
            AND e.distinct_id in
              (select distinct_id
               from
                 (SELECT distinct_id,
                         argMax(person_id, version) as person_id
                  FROM person_distinct_id2 as pdi
                  INNER JOIN
                    (SELECT id
                     FROM person
                     WHERE team_id = 2
                     GROUP BY id
                     HAVING max(is_deleted) = 0 SETTINGS optimize_aggregation_in_order = 1) person ON person.id = pdi.person_id
                  WHERE team_id = 2
                    AND (pdi.person_id IN
                           (SELECT DISTINCT person_id
                            FROM cohortpeople
                            WHERE team_id = 2
                              AND cohort_id = 2
                              AND version = 0 ))
                  GROUP BY distinct_id
                  HAVING argMax(is_deleted, version) = 0) as events_persons_sub_query)
          GROUP BY `$session_id`
          HAVING 1=1
          AND hasAll(event_names, ['$pageview'])) as session_events_sub_query)
  GROUP BY session_id
  HAVING 1=1
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0
  '
---
# name: TestClickhouseSessionRecordingsListFromSessionReplay.test_filter_with_events_and_cohorts.3
  '
  
  SELECT s.session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(s.min_first_timestamp) as start_time,
         max(s.max_last_timestamp) as end_time,
         dateDiff('SECOND', start_time, end_time) as duration,
         argMinMerge(s.first_url) as first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         sum(s.active_milliseconds)/1000 as active_seconds,
         duration-active_seconds as inactive_seconds,
         sum(s.console_log_count) as console_log_count,
         sum(s.console_warn_count) as console_warn_count,
         sum(s.console_error_count) as console_error_count
  FROM session_replay_events s
  WHERE s.team_id = 2
    AND s.min_first_timestamp >= '2021-07-31 20:00:00'
    AND s.min_first_timestamp >= '2021-08-14 00:00:00'
    AND s.max_last_timestamp <= '2021-08-21 20:00:00'
    AND s.distinct_id in
      (select distinct_id
       from
         (SELECT distinct_id,
                 argMax(person_id, version) as person_id
          FROM person_distinct_id2 as pdi
          INNER JOIN
            (SELECT id
             FROM person
             WHERE team_id = 2
             GROUP BY id
             HAVING max(is_deleted) = 0 SETTINGS optimize_aggregation_in_order = 1) person ON person.id = pdi.person_id
          WHERE team_id = 2
            AND (pdi.person_id IN
                   (SELECT DISTINCT person_id
                    FROM cohortpeople
                    WHERE team_id = 2
                      AND cohort_id = 2
                      AND version = 0 ))
          GROUP BY distinct_id
          HAVING argMax(is_deleted, version) = 0) as session_persons_sub_query)
    AND s.session_id in
      (select `$session_id` as session_id
       from
         (SELECT groupUniqArray(event) as event_names,
                 `$session_id`
          FROM events e PREWHERE team_id = 2
          AND e.timestamp >= '2021-07-31 20:00:00'
          AND e.timestamp <= now()
          WHERE notEmpty(`$session_id`)
            AND timestamp >= '2021-08-13 12:00:00'
            AND timestamp <= '2021-08-22 08:00:00'
            AND (event = 'custom_event')
            AND e.distinct_id in
              (select distinct_id
               from
                 (SELECT distinct_id,
                         argMax(person_id, version) as person_id
                  FROM person_distinct_id2 as pdi
                  INNER JOIN
                    (SELECT id
                     FROM person
                     WHERE team_id = 2
                     GROUP BY id
                     HAVING max(is_deleted) = 0 SETTINGS optimize_aggregation_in_order = 1) person ON person.id = pdi.person_id
                  WHERE team_id = 2
                    AND (pdi.person_id IN
                           (SELECT DISTINCT person_id
                            FROM cohortpeople
                            WHERE team_id = 2
                              AND cohort_id = 2
                              AND version = 0 ))
                  GROUP BY distinct_id
                  HAVING argMax(is_deleted, version) = 0) as events_persons_sub_query)
          GROUP BY `$session_id`
          HAVING 1=1
          AND hasAll(event_names, ['custom_event'])) as session_events_sub_query)
  GROUP BY session_id
  HAVING 1=1
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0
  '
---
# name: TestClickhouseSessionRecordingsListFromSessionReplay.test_multiple_event_filters
  '
  
  SELECT s.session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(s.min_first_timestamp) as start_time,
         max(s.max_last_timestamp) as end_time,
         dateDiff('SECOND', start_time, end_time) as duration,
         argMinMerge(s.first_url) as first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         sum(s.active_milliseconds)/1000 as active_seconds,
         duration-active_seconds as inactive_seconds,
         sum(s.console_log_count) as console_log_count,
         sum(s.console_warn_count) as console_warn_count,
         sum(s.console_error_count) as console_error_count
  FROM session_replay_events s
  WHERE s.team_id = 2
    AND s.min_first_timestamp >= '2020-12-11 13:46:23'
    AND s.min_first_timestamp >= '2020-12-25 00:00:00'
    AND s.max_last_timestamp <= '2021-01-01 13:46:23'
    AND s.session_id in
      (select `$session_id` as session_id
       from
         (SELECT groupUniqArray(event) as event_names,
                 `$session_id`
          FROM events e PREWHERE team_id = 2
          AND e.timestamp >= '2020-12-11 13:46:23'
          AND e.timestamp <= now()
          WHERE notEmpty(`$session_id`)
            AND timestamp >= '2020-12-24 12:00:00'
            AND timestamp <= '2021-01-02 01:46:23'
            AND ((event = '$pageview')
                 OR event = 'new-event')
          GROUP BY `$session_id`
          HAVING 1=1
          AND hasAll(event_names, ['$pageview', 'new-event'])) as session_events_sub_query)
  GROUP BY session_id
  HAVING 1=1
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0
  '
---
# name: TestClickhouseSessionRecordingsListFromSessionReplay.test_multiple_event_filters.1
  '
  
  SELECT s.session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(s.min_first_timestamp) as start_time,
         max(s.max_last_timestamp) as end_time,
         dateDiff('SECOND', start_time, end_time) as duration,
         argMinMerge(s.first_url) as first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         sum(s.active_milliseconds)/1000 as active_seconds,
         duration-active_seconds as inactive_seconds,
         sum(s.console_log_count) as console_log_count,
         sum(s.console_warn_count) as console_warn_count,
         sum(s.console_error_count) as console_error_count
  FROM session_replay_events s
  WHERE s.team_id = 2
    AND s.min_first_timestamp >= '2020-12-11 13:46:23'
    AND s.min_first_timestamp >= '2020-12-25 00:00:00'
    AND s.max_last_timestamp <= '2021-01-01 13:46:23'
    AND s.session_id in
      (select `$session_id` as session_id
       from
         (SELECT groupUniqArray(event) as event_names,
                 `$session_id`
          FROM events e PREWHERE team_id = 2
          AND e.timestamp >= '2020-12-11 13:46:23'
          AND e.timestamp <= now()
          WHERE notEmpty(`$session_id`)
            AND timestamp >= '2020-12-24 12:00:00'
            AND timestamp <= '2021-01-02 01:46:23'
            AND ((event = '$pageview')
                 OR event = 'new-event2')
          GROUP BY `$session_id`
          HAVING 1=1
          AND hasAll(event_names, ['$pageview', 'new-event2'])) as session_events_sub_query)
  GROUP BY session_id
  HAVING 1=1
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0
  '
---
# name: TestClickhouseSessionRecordingsListFromSessionReplay.test_person_id_filter
  '
  
  SELECT s.session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(s.min_first_timestamp) as start_time,
         max(s.max_last_timestamp) as end_time,
         dateDiff('SECOND', start_time, end_time) as duration,
         argMinMerge(s.first_url) as first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         sum(s.active_milliseconds)/1000 as active_seconds,
         duration-active_seconds as inactive_seconds,
         sum(s.console_log_count) as console_log_count,
         sum(s.console_warn_count) as console_warn_count,
         sum(s.console_error_count) as console_error_count
  FROM session_replay_events s
  WHERE s.team_id = 2
    AND s.min_first_timestamp >= '2020-12-11 13:46:23'
    AND s.min_first_timestamp >= '2020-12-25 00:00:00'
    AND s.max_last_timestamp <= '2021-01-01 13:46:23'
    AND s.distinct_id in
      (select distinct_id
       from
         (SELECT distinct_id,
                 argMax(person_id, version) as person_id
          FROM person_distinct_id2 as pdi
          WHERE team_id = 2
          GROUP BY distinct_id
          HAVING argMax(is_deleted, version) = 0
          and person_id = '00000000-0000-0000-0000-000000000000') as session_persons_sub_query)
  GROUP BY session_id
  HAVING 1=1
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0
  '
---
# name: TestClickhouseSessionRecordingsListFromSessionReplay.test_top_level_event_property_test_account_filter
  '
  
  SELECT s.session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(s.min_first_timestamp) as start_time,
         max(s.max_last_timestamp) as end_time,
         dateDiff('SECOND', start_time, end_time) as duration,
         argMinMerge(s.first_url) as first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         sum(s.active_milliseconds)/1000 as active_seconds,
         duration-active_seconds as inactive_seconds,
         sum(s.console_log_count) as console_log_count,
         sum(s.console_warn_count) as console_warn_count,
         sum(s.console_error_count) as console_error_count
  FROM session_replay_events s
  WHERE s.team_id = 2
    AND s.min_first_timestamp >= '2020-12-31 20:00:00'
    AND s.min_first_timestamp >= '2021-01-14 00:00:00'
    AND s.max_last_timestamp <= '2021-01-21 20:00:00'
    AND s.session_id in
      (select `$session_id` as session_id
       from
         (SELECT groupUniqArray(event) as event_names,
                 `$session_id`
          FROM events e PREWHERE team_id = 2
          AND e.timestamp >= '2020-12-31 20:00:00'
          AND e.timestamp <= now()
          WHERE notEmpty(`$session_id`)
            AND timestamp >= '2021-01-13 12:00:00'
            AND timestamp <= '2021-01-22 08:00:00'
            AND (event = '$pageview')
          GROUP BY `$session_id`
          HAVING 1=1
          AND hasAll(event_names, ['$pageview'])) as session_events_sub_query)
  GROUP BY session_id
  HAVING 1=1
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0
  '
---
# name: TestClickhouseSessionRecordingsListFromSessionReplay.test_top_level_event_property_test_account_filter.1
  '
  
  SELECT s.session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(s.min_first_timestamp) as start_time,
         max(s.max_last_timestamp) as end_time,
         dateDiff('SECOND', start_time, end_time) as duration,
         argMinMerge(s.first_url) as first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         sum(s.active_milliseconds)/1000 as active_seconds,
         duration-active_seconds as inactive_seconds,
         sum(s.console_log_count) as console_log_count,
         sum(s.console_warn_count) as console_warn_count,
         sum(s.console_error_count) as console_error_count
  FROM session_replay_events s
  WHERE s.team_id = 2
    AND s.min_first_timestamp >= '2020-12-31 20:00:00'
    AND s.min_first_timestamp >= '2021-01-14 00:00:00'
    AND s.max_last_timestamp <= '2021-01-21 20:00:00'
    AND s.session_id in
      (select `$session_id` as session_id
       from
         (SELECT `$session_id`
          FROM events e PREWHERE team_id = 2
          AND e.timestamp >= '2020-12-31 20:00:00'
          AND e.timestamp <= now()
          WHERE notEmpty(`$session_id`)
            AND timestamp >= '2021-01-13 12:00:00'
            AND timestamp <= '2021-01-22 08:00:00'
            AND (has(['false'], replaceRegexpAll(JSONExtractRaw(e.properties, 'is_internal_user'), '^"|"$', '')))
          GROUP BY `$session_id`
          HAVING 1=1) as session_events_sub_query)
  GROUP BY session_id
  HAVING 1=1
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0
  '
---
# name: TestClickhouseSessionRecordingsListFromSessionReplay.test_top_level_event_property_test_account_filter_materialized
  '
  
  SELECT s.session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(s.min_first_timestamp) as start_time,
         max(s.max_last_timestamp) as end_time,
         dateDiff('SECOND', start_time, end_time) as duration,
         argMinMerge(s.first_url) as first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         sum(s.active_milliseconds)/1000 as active_seconds,
         duration-active_seconds as inactive_seconds,
         sum(s.console_log_count) as console_log_count,
         sum(s.console_warn_count) as console_warn_count,
         sum(s.console_error_count) as console_error_count
  FROM session_replay_events s
  WHERE s.team_id = 2
    AND s.min_first_timestamp >= '2020-12-31 20:00:00'
    AND s.min_first_timestamp >= '2021-01-14 00:00:00'
    AND s.max_last_timestamp <= '2021-01-21 20:00:00'
    AND s.session_id in
      (select `$session_id` as session_id
       from
         (SELECT groupUniqArray(event) as event_names,
                 `$session_id`
          FROM events e PREWHERE team_id = 2
          AND e.timestamp >= '2020-12-31 20:00:00'
          AND e.timestamp <= now()
          WHERE notEmpty(`$session_id`)
            AND timestamp >= '2021-01-13 12:00:00'
            AND timestamp <= '2021-01-22 08:00:00'
            AND (event = '$pageview')
          GROUP BY `$session_id`
          HAVING 1=1
          AND hasAll(event_names, ['$pageview'])) as session_events_sub_query)
  GROUP BY session_id
  HAVING 1=1
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0
  '
---
# name: TestClickhouseSessionRecordingsListFromSessionReplay.test_top_level_event_property_test_account_filter_materialized.1
  '
  
  SELECT s.session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(s.min_first_timestamp) as start_time,
         max(s.max_last_timestamp) as end_time,
         dateDiff('SECOND', start_time, end_time) as duration,
         argMinMerge(s.first_url) as first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         sum(s.active_milliseconds)/1000 as active_seconds,
         duration-active_seconds as inactive_seconds,
         sum(s.console_log_count) as console_log_count,
         sum(s.console_warn_count) as console_warn_count,
         sum(s.console_error_count) as console_error_count
  FROM session_replay_events s
  WHERE s.team_id = 2
    AND s.min_first_timestamp >= '2020-12-31 20:00:00'
    AND s.min_first_timestamp >= '2021-01-14 00:00:00'
    AND s.max_last_timestamp <= '2021-01-21 20:00:00'
    AND s.session_id in
      (select `$session_id` as session_id
       from
         (SELECT `$session_id`
          FROM events e PREWHERE team_id = 2
          AND e.timestamp >= '2020-12-31 20:00:00'
          AND e.timestamp <= now()
          WHERE notEmpty(`$session_id`)
            AND timestamp >= '2021-01-13 12:00:00'
            AND timestamp <= '2021-01-22 08:00:00'
            AND (has(['false'], "mat_is_internal_user"))
          GROUP BY `$session_id`
          HAVING 1=1) as session_events_sub_query)
  GROUP BY session_id
  HAVING 1=1
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0
  '
---
# name: TestClickhouseSessionRecordingsListFromSessionReplay.test_top_level_hogql_event_property_test_account_filter
  '
  
  SELECT s.session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(s.min_first_timestamp) as start_time,
         max(s.max_last_timestamp) as end_time,
         dateDiff('SECOND', start_time, end_time) as duration,
         argMinMerge(s.first_url) as first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         sum(s.active_milliseconds)/1000 as active_seconds,
         duration-active_seconds as inactive_seconds,
         sum(s.console_log_count) as console_log_count,
         sum(s.console_warn_count) as console_warn_count,
         sum(s.console_error_count) as console_error_count
  FROM session_replay_events s
  WHERE s.team_id = 2
    AND s.min_first_timestamp >= '2020-12-31 20:00:00'
    AND s.min_first_timestamp >= '2021-01-14 00:00:00'
    AND s.max_last_timestamp <= '2021-01-21 20:00:00'
    AND s.session_id in
      (select `$session_id` as session_id
       from
         (SELECT groupUniqArray(event) as event_names,
                 `$session_id`
          FROM events e PREWHERE team_id = 2
          AND e.timestamp >= '2020-12-31 20:00:00'
          AND e.timestamp <= now()
          WHERE notEmpty(`$session_id`)
            AND timestamp >= '2021-01-13 12:00:00'
            AND timestamp <= '2021-01-22 08:00:00'
            AND (event = '$pageview')
          GROUP BY `$session_id`
          HAVING 1=1
          AND hasAll(event_names, ['$pageview'])) as session_events_sub_query)
  GROUP BY session_id
  HAVING 1=1
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0
  '
---
# name: TestClickhouseSessionRecordingsListFromSessionReplay.test_top_level_hogql_event_property_test_account_filter.1
  '
  
  SELECT s.session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(s.min_first_timestamp) as start_time,
         max(s.max_last_timestamp) as end_time,
         dateDiff('SECOND', start_time, end_time) as duration,
         argMinMerge(s.first_url) as first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         sum(s.active_milliseconds)/1000 as active_seconds,
         duration-active_seconds as inactive_seconds,
         sum(s.console_log_count) as console_log_count,
         sum(s.console_warn_count) as console_warn_count,
         sum(s.console_error_count) as console_error_count
  FROM session_replay_events s
  WHERE s.team_id = 2
    AND s.min_first_timestamp >= '2020-12-31 20:00:00'
    AND s.min_first_timestamp >= '2021-01-14 00:00:00'
    AND s.max_last_timestamp <= '2021-01-21 20:00:00'
    AND s.session_id in
      (select `$session_id` as session_id
       from
         (SELECT `$session_id`
          FROM events e PREWHERE team_id = 2
          AND e.timestamp >= '2020-12-31 20:00:00'
          AND e.timestamp <= now()
          WHERE notEmpty(`$session_id`)
            AND timestamp >= '2021-01-13 12:00:00'
            AND timestamp <= '2021-01-22 08:00:00'
            AND (ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(properties, 'is_internal_user'), ''), 'null'), '^"|"$', ''), 'true'), 0))
          GROUP BY `$session_id`
          HAVING 1=1) as session_events_sub_query)
  GROUP BY session_id
  HAVING 1=1
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0
  '
---
# name: TestClickhouseSessionRecordingsListFromSessionReplay.test_top_level_hogql_event_property_test_account_filter_materialized
  '
  
  SELECT s.session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(s.min_first_timestamp) as start_time,
         max(s.max_last_timestamp) as end_time,
         dateDiff('SECOND', start_time, end_time) as duration,
         argMinMerge(s.first_url) as first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         sum(s.active_milliseconds)/1000 as active_seconds,
         duration-active_seconds as inactive_seconds,
         sum(s.console_log_count) as console_log_count,
         sum(s.console_warn_count) as console_warn_count,
         sum(s.console_error_count) as console_error_count
  FROM session_replay_events s
  WHERE s.team_id = 2
    AND s.min_first_timestamp >= '2020-12-31 20:00:00'
    AND s.min_first_timestamp >= '2021-01-14 00:00:00'
    AND s.max_last_timestamp <= '2021-01-21 20:00:00'
    AND s.session_id in
      (select `$session_id` as session_id
       from
         (SELECT groupUniqArray(event) as event_names,
                 `$session_id`
          FROM events e PREWHERE team_id = 2
          AND e.timestamp >= '2020-12-31 20:00:00'
          AND e.timestamp <= now()
          WHERE notEmpty(`$session_id`)
            AND timestamp >= '2021-01-13 12:00:00'
            AND timestamp <= '2021-01-22 08:00:00'
            AND (event = '$pageview')
          GROUP BY `$session_id`
          HAVING 1=1
          AND hasAll(event_names, ['$pageview'])) as session_events_sub_query)
  GROUP BY session_id
  HAVING 1=1
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0
  '
---
# name: TestClickhouseSessionRecordingsListFromSessionReplay.test_top_level_hogql_event_property_test_account_filter_materialized.1
  '
  
  SELECT s.session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(s.min_first_timestamp) as start_time,
         max(s.max_last_timestamp) as end_time,
         dateDiff('SECOND', start_time, end_time) as duration,
         argMinMerge(s.first_url) as first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         sum(s.active_milliseconds)/1000 as active_seconds,
         duration-active_seconds as inactive_seconds,
         sum(s.console_log_count) as console_log_count,
         sum(s.console_warn_count) as console_warn_count,
         sum(s.console_error_count) as console_error_count
  FROM session_replay_events s
  WHERE s.team_id = 2
    AND s.min_first_timestamp >= '2020-12-31 20:00:00'
    AND s.min_first_timestamp >= '2021-01-14 00:00:00'
    AND s.max_last_timestamp <= '2021-01-21 20:00:00'
    AND s.session_id in
      (select `$session_id` as session_id
       from
         (SELECT `$session_id`
          FROM events e PREWHERE team_id = 2
          AND e.timestamp >= '2020-12-31 20:00:00'
          AND e.timestamp <= now()
          WHERE notEmpty(`$session_id`)
            AND timestamp >= '2021-01-13 12:00:00'
            AND timestamp <= '2021-01-22 08:00:00'
            AND (ifNull(equals(nullIf(nullIf(events.mat_is_internal_user, ''), 'null'), 'true'), 0))
          GROUP BY `$session_id`
          HAVING 1=1) as session_events_sub_query)
  GROUP BY session_id
  HAVING 1=1
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0
  '
---
# name: TestClickhouseSessionRecordingsListFromSessionReplay.test_top_level_hogql_person_property_test_account_filter
  '
  
  SELECT s.session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(s.min_first_timestamp) as start_time,
         max(s.max_last_timestamp) as end_time,
         dateDiff('SECOND', start_time, end_time) as duration,
         argMinMerge(s.first_url) as first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         sum(s.active_milliseconds)/1000 as active_seconds,
         duration-active_seconds as inactive_seconds,
         sum(s.console_log_count) as console_log_count,
         sum(s.console_warn_count) as console_warn_count,
         sum(s.console_error_count) as console_error_count
  FROM session_replay_events s
  WHERE s.team_id = 2
    AND s.min_first_timestamp >= '2020-12-31 20:00:00'
    AND s.min_first_timestamp >= '2021-01-14 00:00:00'
    AND s.max_last_timestamp <= '2021-01-21 20:00:00'
    AND s.session_id in
      (select `$session_id` as session_id
       from
         (SELECT groupUniqArray(event) as event_names,
                 `$session_id`
          FROM events e PREWHERE team_id = 2
          AND e.timestamp >= '2020-12-31 20:00:00'
          AND e.timestamp <= now()
          WHERE notEmpty(`$session_id`)
            AND timestamp >= '2021-01-13 12:00:00'
            AND timestamp <= '2021-01-22 08:00:00'
            AND (event = '$pageview')
          GROUP BY `$session_id`
          HAVING 1=1
          AND hasAll(event_names, ['$pageview'])) as session_events_sub_query)
  GROUP BY session_id
  HAVING 1=1
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0
  '
---
# name: TestClickhouseSessionRecordingsListFromSessionReplay.test_top_level_hogql_person_property_test_account_filter.1
  '
  
  SELECT s.session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(s.min_first_timestamp) as start_time,
         max(s.max_last_timestamp) as end_time,
         dateDiff('SECOND', start_time, end_time) as duration,
         argMinMerge(s.first_url) as first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         sum(s.active_milliseconds)/1000 as active_seconds,
         duration-active_seconds as inactive_seconds,
         sum(s.console_log_count) as console_log_count,
         sum(s.console_warn_count) as console_warn_count,
         sum(s.console_error_count) as console_error_count
  FROM session_replay_events s
  WHERE s.team_id = 2
    AND s.min_first_timestamp >= '2020-12-31 20:00:00'
    AND s.min_first_timestamp >= '2021-01-14 00:00:00'
    AND s.max_last_timestamp <= '2021-01-21 20:00:00'
    AND s.distinct_id in
      (select distinct_id
       from
         (SELECT distinct_id,
                 argMax(person_id, version) as person_id ,
                 argMax(person_props, version) as person_props
          FROM person_distinct_id2 as pdi
          INNER JOIN
            (SELECT id,
                    argMax(properties, version) as person_props
             FROM person
             WHERE team_id = 2
             GROUP BY id
             HAVING max(is_deleted) = 0 SETTINGS optimize_aggregation_in_order = 1) person ON person.id = pdi.person_id
          WHERE team_id = 2
          GROUP BY distinct_id
          HAVING argMax(is_deleted, version) = 0
          AND (ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person_props, 'email'), ''), 'null'), '^"|"$', ''), 'bla'), 0))) as session_persons_sub_query)
  GROUP BY session_id
  HAVING 1=1
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0
  '
---
# name: TestClickhouseSessionRecordingsListFromSessionReplay.test_top_level_hogql_person_property_test_account_filter_materialized
  '
  
  SELECT s.session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(s.min_first_timestamp) as start_time,
         max(s.max_last_timestamp) as end_time,
         dateDiff('SECOND', start_time, end_time) as duration,
         argMinMerge(s.first_url) as first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         sum(s.active_milliseconds)/1000 as active_seconds,
         duration-active_seconds as inactive_seconds,
         sum(s.console_log_count) as console_log_count,
         sum(s.console_warn_count) as console_warn_count,
         sum(s.console_error_count) as console_error_count
  FROM session_replay_events s
  WHERE s.team_id = 2
    AND s.min_first_timestamp >= '2020-12-31 20:00:00'
    AND s.min_first_timestamp >= '2021-01-14 00:00:00'
    AND s.max_last_timestamp <= '2021-01-21 20:00:00'
    AND s.session_id in
      (select `$session_id` as session_id
       from
         (SELECT groupUniqArray(event) as event_names,
                 `$session_id`
          FROM events e PREWHERE team_id = 2
          AND e.timestamp >= '2020-12-31 20:00:00'
          AND e.timestamp <= now()
          WHERE notEmpty(`$session_id`)
            AND timestamp >= '2021-01-13 12:00:00'
            AND timestamp <= '2021-01-22 08:00:00'
            AND (event = '$pageview')
          GROUP BY `$session_id`
          HAVING 1=1
          AND hasAll(event_names, ['$pageview'])) as session_events_sub_query)
  GROUP BY session_id
  HAVING 1=1
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0
  '
---
# name: TestClickhouseSessionRecordingsListFromSessionReplay.test_top_level_hogql_person_property_test_account_filter_materialized.1
  '
  
  SELECT s.session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(s.min_first_timestamp) as start_time,
         max(s.max_last_timestamp) as end_time,
         dateDiff('SECOND', start_time, end_time) as duration,
         argMinMerge(s.first_url) as first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         sum(s.active_milliseconds)/1000 as active_seconds,
         duration-active_seconds as inactive_seconds,
         sum(s.console_log_count) as console_log_count,
         sum(s.console_warn_count) as console_warn_count,
         sum(s.console_error_count) as console_error_count
  FROM session_replay_events s
  WHERE s.team_id = 2
    AND s.min_first_timestamp >= '2020-12-31 20:00:00'
    AND s.min_first_timestamp >= '2021-01-14 00:00:00'
    AND s.max_last_timestamp <= '2021-01-21 20:00:00'
    AND s.distinct_id in
      (select distinct_id
       from
         (SELECT distinct_id,
                 argMax(person_id, version) as person_id
          FROM person_distinct_id2 as pdi
          INNER JOIN
            (SELECT id,
                    argMax(pmat_email, version) as pmat_email
             FROM person
             WHERE team_id = 2
             GROUP BY id
             HAVING max(is_deleted) = 0 SETTINGS optimize_aggregation_in_order = 1) person ON person.id = pdi.person_id
          WHERE team_id = 2
          GROUP BY distinct_id
          HAVING argMax(is_deleted, version) = 0
          AND (ifNull(equals(nullIf(nullIf(pmat_email, ''), 'null'), 'bla'), 0))) as session_persons_sub_query)
  GROUP BY session_id
  HAVING 1=1
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0
  '
---
# name: TestClickhouseSessionRecordingsListFromSessionReplay.test_top_level_person_property_test_account_filter
  '
  
  SELECT s.session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(s.min_first_timestamp) as start_time,
         max(s.max_last_timestamp) as end_time,
         dateDiff('SECOND', start_time, end_time) as duration,
         argMinMerge(s.first_url) as first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         sum(s.active_milliseconds)/1000 as active_seconds,
         duration-active_seconds as inactive_seconds,
         sum(s.console_log_count) as console_log_count,
         sum(s.console_warn_count) as console_warn_count,
         sum(s.console_error_count) as console_error_count
  FROM session_replay_events s
  WHERE s.team_id = 2
    AND s.min_first_timestamp >= '2020-12-31 20:00:00'
    AND s.min_first_timestamp >= '2021-01-14 00:00:00'
    AND s.max_last_timestamp <= '2021-01-21 20:00:00'
    AND s.session_id in
      (select `$session_id` as session_id
       from
         (SELECT groupUniqArray(event) as event_names,
                 `$session_id`
          FROM events e PREWHERE team_id = 2
          AND e.timestamp >= '2020-12-31 20:00:00'
          AND e.timestamp <= now()
          WHERE notEmpty(`$session_id`)
            AND timestamp >= '2021-01-13 12:00:00'
            AND timestamp <= '2021-01-22 08:00:00'
            AND (event = '$pageview')
          GROUP BY `$session_id`
          HAVING 1=1
          AND hasAll(event_names, ['$pageview'])) as session_events_sub_query)
  GROUP BY session_id
  HAVING 1=1
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0
  '
---
# name: TestClickhouseSessionRecordingsListFromSessionReplay.test_top_level_person_property_test_account_filter.1
  '
  
  SELECT s.session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(s.min_first_timestamp) as start_time,
         max(s.max_last_timestamp) as end_time,
         dateDiff('SECOND', start_time, end_time) as duration,
         argMinMerge(s.first_url) as first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         sum(s.active_milliseconds)/1000 as active_seconds,
         duration-active_seconds as inactive_seconds,
         sum(s.console_log_count) as console_log_count,
         sum(s.console_warn_count) as console_warn_count,
         sum(s.console_error_count) as console_error_count
  FROM session_replay_events s
  WHERE s.team_id = 2
    AND s.min_first_timestamp >= '2020-12-31 20:00:00'
    AND s.min_first_timestamp >= '2021-01-14 00:00:00'
    AND s.max_last_timestamp <= '2021-01-21 20:00:00'
    AND s.distinct_id in
      (select distinct_id
       from
         (SELECT distinct_id,
                 argMax(person_id, version) as person_id
          FROM person_distinct_id2 as pdi
          INNER JOIN
            (SELECT id
             FROM person
             WHERE team_id = 2
               AND id IN
                 (SELECT id
                  FROM person
                  WHERE team_id = 2
                    AND (has(['bla'], replaceRegexpAll(JSONExtractRaw(properties, 'email'), '^"|"$', ''))) )
             GROUP BY id
             HAVING max(is_deleted) = 0
             AND (has(['bla'], replaceRegexpAll(JSONExtractRaw(argMax(person.properties, version), 'email'), '^"|"$', ''))) SETTINGS optimize_aggregation_in_order = 1) person ON person.id = pdi.person_id
          WHERE team_id = 2
          GROUP BY distinct_id
          HAVING argMax(is_deleted, version) = 0) as session_persons_sub_query)
  GROUP BY session_id
  HAVING 1=1
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0
  '
---
# name: TestClickhouseSessionRecordingsListFromSessionReplay.test_top_level_person_property_test_account_filter_materialized
  '
  
  SELECT s.session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(s.min_first_timestamp) as start_time,
         max(s.max_last_timestamp) as end_time,
         dateDiff('SECOND', start_time, end_time) as duration,
         argMinMerge(s.first_url) as first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         sum(s.active_milliseconds)/1000 as active_seconds,
         duration-active_seconds as inactive_seconds,
         sum(s.console_log_count) as console_log_count,
         sum(s.console_warn_count) as console_warn_count,
         sum(s.console_error_count) as console_error_count
  FROM session_replay_events s
  WHERE s.team_id = 2
    AND s.min_first_timestamp >= '2020-12-31 20:00:00'
    AND s.min_first_timestamp >= '2021-01-14 00:00:00'
    AND s.max_last_timestamp <= '2021-01-21 20:00:00'
    AND s.session_id in
      (select `$session_id` as session_id
       from
         (SELECT groupUniqArray(event) as event_names,
                 `$session_id`
          FROM events e PREWHERE team_id = 2
          AND e.timestamp >= '2020-12-31 20:00:00'
          AND e.timestamp <= now()
          WHERE notEmpty(`$session_id`)
            AND timestamp >= '2021-01-13 12:00:00'
            AND timestamp <= '2021-01-22 08:00:00'
            AND (event = '$pageview')
          GROUP BY `$session_id`
          HAVING 1=1
          AND hasAll(event_names, ['$pageview'])) as session_events_sub_query)
  GROUP BY session_id
  HAVING 1=1
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0
  '
---
# name: TestClickhouseSessionRecordingsListFromSessionReplay.test_top_level_person_property_test_account_filter_materialized.1
  '
  
  SELECT s.session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(s.min_first_timestamp) as start_time,
         max(s.max_last_timestamp) as end_time,
         dateDiff('SECOND', start_time, end_time) as duration,
         argMinMerge(s.first_url) as first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         sum(s.active_milliseconds)/1000 as active_seconds,
         duration-active_seconds as inactive_seconds,
         sum(s.console_log_count) as console_log_count,
         sum(s.console_warn_count) as console_warn_count,
         sum(s.console_error_count) as console_error_count
  FROM session_replay_events s
  WHERE s.team_id = 2
    AND s.min_first_timestamp >= '2020-12-31 20:00:00'
    AND s.min_first_timestamp >= '2021-01-14 00:00:00'
    AND s.max_last_timestamp <= '2021-01-21 20:00:00'
    AND s.distinct_id in
      (select distinct_id
       from
         (SELECT distinct_id,
                 argMax(person_id, version) as person_id
          FROM person_distinct_id2 as pdi
          INNER JOIN
            (SELECT id
             FROM person
             WHERE team_id = 2
               AND id IN
                 (SELECT id
                  FROM person
                  WHERE team_id = 2
                    AND (has(['bla'], "pmat_email")) )
             GROUP BY id
             HAVING max(is_deleted) = 0
             AND (has(['bla'], argMax(person."pmat_email", version))) SETTINGS optimize_aggregation_in_order = 1) person ON person.id = pdi.person_id
          WHERE team_id = 2
          GROUP BY distinct_id
          HAVING argMax(is_deleted, version) = 0) as session_persons_sub_query)
  GROUP BY session_id
  HAVING 1=1
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0
  '
---
