# serializer version: 1
# name: TestSessionRecordingsListFromFilters.test_action_filter
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 2), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2022-12-14 00:00:00.000000', 6, 'UTC')), 0), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2022-12-28 00:00:00.000000', 6, 'UTC')), 0), ifNull(lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2023-01-04 00:00:00.000000', 6, 'UTC')), 0), in(s.session_id,
                                                                                                                                                                                                                                                                                                                                                                                                                        (SELECT events.`$session_id` AS session_id
                                                                                                                                                                                                                                                                                                                                                                                                                         FROM events
                                                                                                                                                                                                                                                                                                                                                                                                                         WHERE and(equals(events.team_id, 2), notEmpty(events.`$session_id`), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2022-12-14 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), now64(6, 'UTC')), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2022-12-27 23:58:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2023-01-04 00:00:00.000000', 6, 'UTC')), and(and(equals(events.event, 'custom-event'), and(ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$browser'), ''), 'null'), '^"|"$', ''), 'Firefox'), 0), ifNull(equals(nullIf(nullIf(events.`$session_id`, ''), 'null'), 'test_action_filter-session-one'), 0), ifNull(equals(nullIf(nullIf(events.`$window_id`, ''), 'null'), 'test_action_filter-window-id'), 0))), true))
                                                                                                                                                                                                                                                                                                                                                                                                                         GROUP BY events.`$session_id`
                                                                                                                                                                                                                                                                                                                                                                                                                         HAVING hasAll(groupUniqArray(events.event), ['custom-event']))))
  GROUP BY s.session_id
  HAVING true
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_action_filter.1
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 2), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2022-12-14 00:00:00.000000', 6, 'UTC')), 0), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2022-12-28 00:00:00.000000', 6, 'UTC')), 0), ifNull(lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2023-01-04 00:00:00.000000', 6, 'UTC')), 0), in(s.session_id,
                                                                                                                                                                                                                                                                                                                                                                                                                        (SELECT events.`$session_id` AS session_id
                                                                                                                                                                                                                                                                                                                                                                                                                         FROM events
                                                                                                                                                                                                                                                                                                                                                                                                                         WHERE and(equals(events.team_id, 2), notEmpty(events.`$session_id`), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2022-12-14 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), now64(6, 'UTC')), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2022-12-27 23:58:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2023-01-04 00:00:00.000000', 6, 'UTC')), and(and(equals(events.event, 'custom-event'), and(ifNull(equals(nullIf(nullIf(events.`$session_id`, ''), 'null'), 'test_action_filter-session-one'), 0), ifNull(equals(nullIf(nullIf(events.`$window_id`, ''), 'null'), 'test_action_filter-window-id'), 0))), true))
                                                                                                                                                                                                                                                                                                                                                                                                                         GROUP BY events.`$session_id`
                                                                                                                                                                                                                                                                                                                                                                                                                         HAVING hasAll(groupUniqArray(events.event), ['custom-event']))))
  GROUP BY s.session_id
  HAVING true
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_action_filter.2
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 2), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2022-12-14 00:00:00.000000', 6, 'UTC')), 0), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2022-12-28 00:00:00.000000', 6, 'UTC')), 0), ifNull(lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2023-01-04 00:00:00.000000', 6, 'UTC')), 0), in(s.session_id,
                                                                                                                                                                                                                                                                                                                                                                                                                        (SELECT events.`$session_id` AS session_id
                                                                                                                                                                                                                                                                                                                                                                                                                         FROM events
                                                                                                                                                                                                                                                                                                                                                                                                                         WHERE and(equals(events.team_id, 2), notEmpty(events.`$session_id`), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2022-12-14 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), now64(6, 'UTC')), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2022-12-27 23:58:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2023-01-04 00:00:00.000000', 6, 'UTC')), and(and(equals(events.event, 'custom-event'), and(ifNull(equals(nullIf(nullIf(events.`$session_id`, ''), 'null'), 'test_action_filter-session-one'), 0), ifNull(equals(nullIf(nullIf(events.`$window_id`, ''), 'null'), 'test_action_filter-window-id'), 0))), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$browser'), ''), 'null'), '^"|"$', ''), 'Firefox'), 0)))
                                                                                                                                                                                                                                                                                                                                                                                                                         GROUP BY events.`$session_id`
                                                                                                                                                                                                                                                                                                                                                                                                                         HAVING hasAll(groupUniqArray(events.event), ['custom-event']))))
  GROUP BY s.session_id
  HAVING true
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_action_filter.3
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 2), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2022-12-14 00:00:00.000000', 6, 'UTC')), 0), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2022-12-28 00:00:00.000000', 6, 'UTC')), 0), ifNull(lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2023-01-04 00:00:00.000000', 6, 'UTC')), 0), in(s.session_id,
                                                                                                                                                                                                                                                                                                                                                                                                                        (SELECT events.`$session_id` AS session_id
                                                                                                                                                                                                                                                                                                                                                                                                                         FROM events
                                                                                                                                                                                                                                                                                                                                                                                                                         WHERE and(equals(events.team_id, 2), notEmpty(events.`$session_id`), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2022-12-14 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), now64(6, 'UTC')), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2022-12-27 23:58:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2023-01-04 00:00:00.000000', 6, 'UTC')), and(and(equals(events.event, 'custom-event'), and(ifNull(equals(nullIf(nullIf(events.`$session_id`, ''), 'null'), 'test_action_filter-session-one'), 0), ifNull(equals(nullIf(nullIf(events.`$window_id`, ''), 'null'), 'test_action_filter-window-id'), 0))), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$browser'), ''), 'null'), '^"|"$', ''), 'Chrome'), 0)))
                                                                                                                                                                                                                                                                                                                                                                                                                         GROUP BY events.`$session_id`
                                                                                                                                                                                                                                                                                                                                                                                                                         HAVING hasAll(groupUniqArray(events.event), ['custom-event']))))
  GROUP BY s.session_id
  HAVING true
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_all_filters_at_once
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 2), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-11 13:46:23.000000', 6, 'UTC')), 0), in(s.distinct_id,
                                                                                                                                                                   (SELECT person_distinct_ids.distinct_id AS distinct_id
                                                                                                                                                                    FROM
                                                                                                                                                                      (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id, person_distinct_id2.distinct_id AS distinct_id
                                                                                                                                                                       FROM person_distinct_id2
                                                                                                                                                                       WHERE equals(person_distinct_id2.team_id, 2)
                                                                                                                                                                       GROUP BY person_distinct_id2.distinct_id
                                                                                                                                                                       HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS person_distinct_ids
                                                                                                                                                                    WHERE ifNull(equals(person_distinct_ids.person_id, '00000000-0000-0000-0000-000000000000'), 0))), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-22 00:00:00.000000', 6, 'UTC')), 0), ifNull(lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-04 23:59:59.999999', 6, 'UTC')), 0), in(s.session_id,
events.`$session_id` AS session_id
events
and(equals(events.team_id, 2), notEmpty(events.`$session_id`), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-12-11 13:46:23.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), now64(6, 'UTC')), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-12-21 23:58:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2021-01-04 23:59:59.999999', 6, 'UTC')), or(and(equals(events.event, '$pageview'), true), and(equals(events.event, 'custom-event'), true)))
events.`$session_id`
hasAll(groupUniqArray(events.event), ['$pageview', 'custom-event']))))
  GROUP BY s.session_id
  HAVING ifNull(greaterOrEquals(duration, 60), 0)
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_any_event_filter_with_properties
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 2), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-31 20:00:00.000000', 6, 'UTC')), 0), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-14 00:00:00.000000', 6, 'UTC')), 0), ifNull(lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-21 20:00:00.000000', 6, 'UTC')), 0), in(s.session_id,
                                                                                                                                                                                                                                                                                                                                                                                                                        (SELECT events.`$session_id` AS session_id
                                                                                                                                                                                                                                                                                                                                                                                                                         FROM events
                                                                                                                                                                                                                                                                                                                                                                                                                         WHERE and(equals(events.team_id, 2), notEmpty(events.`$session_id`), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-12-31 20:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), now64(6, 'UTC')), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2021-01-13 23:58:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2021-01-21 20:00:00.000000', 6, 'UTC')), and(true, true))
                                                                                                                                                                                                                                                                                                                                                                                                                         GROUP BY events.`$session_id`
                                                                                                                                                                                                                                                                                                                                                                                                                         HAVING true)))
  GROUP BY s.session_id
  HAVING true
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_any_event_filter_with_properties.1
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 2), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-31 20:00:00.000000', 6, 'UTC')), 0), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-14 00:00:00.000000', 6, 'UTC')), 0), ifNull(lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-21 20:00:00.000000', 6, 'UTC')), 0), in(s.session_id,
                                                                                                                                                                                                                                                                                                                                                                                                                        (SELECT events.`$session_id` AS session_id
                                                                                                                                                                                                                                                                                                                                                                                                                         FROM events
                                                                                                                                                                                                                                                                                                                                                                                                                         WHERE and(equals(events.team_id, 2), notEmpty(events.`$session_id`), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-12-31 20:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), now64(6, 'UTC')), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2021-01-13 23:58:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2021-01-21 20:00:00.000000', 6, 'UTC')), and(true, ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$browser'), ''), 'null'), '^"|"$', ''), 'Chrome'), 0)))
                                                                                                                                                                                                                                                                                                                                                                                                                         GROUP BY events.`$session_id`
                                                                                                                                                                                                                                                                                                                                                                                                                         HAVING true)))
  GROUP BY s.session_id
  HAVING true
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_any_event_filter_with_properties.2
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 2), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-31 20:00:00.000000', 6, 'UTC')), 0), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-14 00:00:00.000000', 6, 'UTC')), 0), ifNull(lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-21 20:00:00.000000', 6, 'UTC')), 0), in(s.session_id,
                                                                                                                                                                                                                                                                                                                                                                                                                        (SELECT events.`$session_id` AS session_id
                                                                                                                                                                                                                                                                                                                                                                                                                         FROM events
                                                                                                                                                                                                                                                                                                                                                                                                                         WHERE and(equals(events.team_id, 2), notEmpty(events.`$session_id`), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-12-31 20:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), now64(6, 'UTC')), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2021-01-13 23:58:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2021-01-21 20:00:00.000000', 6, 'UTC')), and(true, ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$browser'), ''), 'null'), '^"|"$', ''), 'Firefox'), 0)))
                                                                                                                                                                                                                                                                                                                                                                                                                         GROUP BY events.`$session_id`
                                                                                                                                                                                                                                                                                                                                                                                                                         HAVING true)))
  GROUP BY s.session_id
  HAVING true
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_any_event_filter_with_properties_materialized
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 2), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-31 20:00:00.000000', 6, 'UTC')), 0), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-14 00:00:00.000000', 6, 'UTC')), 0), ifNull(lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-21 20:00:00.000000', 6, 'UTC')), 0), in(s.session_id,
                                                                                                                                                                                                                                                                                                                                                                                                                        (SELECT events.`$session_id` AS session_id
                                                                                                                                                                                                                                                                                                                                                                                                                         FROM events
                                                                                                                                                                                                                                                                                                                                                                                                                         WHERE and(equals(events.team_id, 2), notEmpty(events.`$session_id`), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-12-31 20:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), now64(6, 'UTC')), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2021-01-13 23:58:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2021-01-21 20:00:00.000000', 6, 'UTC')), and(true, true))
                                                                                                                                                                                                                                                                                                                                                                                                                         GROUP BY events.`$session_id`
                                                                                                                                                                                                                                                                                                                                                                                                                         HAVING true)))
  GROUP BY s.session_id
  HAVING true
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_any_event_filter_with_properties_materialized.1
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 2), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-31 20:00:00.000000', 6, 'UTC')), 0), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-14 00:00:00.000000', 6, 'UTC')), 0), ifNull(lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-21 20:00:00.000000', 6, 'UTC')), 0), in(s.session_id,
                                                                                                                                                                                                                                                                                                                                                                                                                        (SELECT events.`$session_id` AS session_id
                                                                                                                                                                                                                                                                                                                                                                                                                         FROM events
                                                                                                                                                                                                                                                                                                                                                                                                                         WHERE and(equals(events.team_id, 2), notEmpty(events.`$session_id`), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-12-31 20:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), now64(6, 'UTC')), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2021-01-13 23:58:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2021-01-21 20:00:00.000000', 6, 'UTC')), and(true, ifNull(equals(nullIf(nullIf(events.`mat_$browser`, ''), 'null'), 'Chrome'), 0)))
                                                                                                                                                                                                                                                                                                                                                                                                                         GROUP BY events.`$session_id`
                                                                                                                                                                                                                                                                                                                                                                                                                         HAVING true)))
  GROUP BY s.session_id
  HAVING true
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_any_event_filter_with_properties_materialized.2
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 2), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-31 20:00:00.000000', 6, 'UTC')), 0), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-14 00:00:00.000000', 6, 'UTC')), 0), ifNull(lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-21 20:00:00.000000', 6, 'UTC')), 0), in(s.session_id,
                                                                                                                                                                                                                                                                                                                                                                                                                        (SELECT events.`$session_id` AS session_id
                                                                                                                                                                                                                                                                                                                                                                                                                         FROM events
                                                                                                                                                                                                                                                                                                                                                                                                                         WHERE and(equals(events.team_id, 2), notEmpty(events.`$session_id`), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-12-31 20:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), now64(6, 'UTC')), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2021-01-13 23:58:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2021-01-21 20:00:00.000000', 6, 'UTC')), and(true, ifNull(equals(nullIf(nullIf(events.`mat_$browser`, ''), 'null'), 'Firefox'), 0)))
                                                                                                                                                                                                                                                                                                                                                                                                                         GROUP BY events.`$session_id`
                                                                                                                                                                                                                                                                                                                                                                                                                         HAVING true)))
  GROUP BY s.session_id
  HAVING true
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_basic_query
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 2), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-11 13:46:23.000000', 6, 'UTC')), 0), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-25 00:00:00.000000', 6, 'UTC')), 0), ifNull(lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-01 13:46:23.000000', 6, 'UTC')), 0))
  GROUP BY s.session_id
  HAVING true
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_basic_query_active_sessions
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 2), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-11 13:46:23.000000', 6, 'UTC')), 0), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-25 00:00:00.000000', 6, 'UTC')), 0), ifNull(lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-01 13:46:23.000000', 6, 'UTC')), 0))
  GROUP BY s.session_id
  HAVING ifNull(greaterOrEquals(duration, 60), 0)
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_basic_query_active_sessions.1
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 2), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-11 13:46:23.000000', 6, 'UTC')), 0), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-25 00:00:00.000000', 6, 'UTC')), 0), ifNull(lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-01 13:46:23.000000', 6, 'UTC')), 0))
  GROUP BY s.session_id
  HAVING ifNull(greaterOrEquals(active_seconds, 60), 0)
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_basic_query_active_sessions.2
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 2), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-11 13:46:23.000000', 6, 'UTC')), 0), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-25 00:00:00.000000', 6, 'UTC')), 0), ifNull(lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-01 13:46:23.000000', 6, 'UTC')), 0))
  GROUP BY s.session_id
  HAVING ifNull(greaterOrEquals(inactive_seconds, 60), 0)
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_basic_query_with_ordering
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 2), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-11 13:46:23.000000', 6, 'UTC')), 0), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-25 00:00:00.000000', 6, 'UTC')), 0), ifNull(lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-01 13:46:23.000000', 6, 'UTC')), 0))
  GROUP BY s.session_id
  HAVING true
  ORDER BY active_seconds DESC
  LIMIT 4
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_basic_query_with_ordering.1
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 2), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-11 13:46:23.000000', 6, 'UTC')), 0), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-25 00:00:00.000000', 6, 'UTC')), 0), ifNull(lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-01 13:46:23.000000', 6, 'UTC')), 0))
  GROUP BY s.session_id
  HAVING true
  ORDER BY console_error_count DESC
  LIMIT 4
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_basic_query_with_ordering.2
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 2), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-11 13:46:23.000000', 6, 'UTC')), 0), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-25 00:00:00.000000', 6, 'UTC')), 0), ifNull(lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-01 13:46:23.000000', 6, 'UTC')), 0))
  GROUP BY s.session_id
  HAVING true
  ORDER BY start_time DESC
  LIMIT 4
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_basic_query_with_paging
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 2), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-11 13:46:23.000000', 6, 'UTC')), 0), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-25 00:00:00.000000', 6, 'UTC')), 0), ifNull(lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-01 13:46:23.000000', 6, 'UTC')), 0))
  GROUP BY s.session_id
  HAVING true
  ORDER BY start_time DESC
  LIMIT 2
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_basic_query_with_paging.1
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 2), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-11 13:46:23.000000', 6, 'UTC')), 0), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-25 00:00:00.000000', 6, 'UTC')), 0), ifNull(lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-01 13:46:23.000000', 6, 'UTC')), 0))
  GROUP BY s.session_id
  HAVING true
  ORDER BY start_time DESC
  LIMIT 2
  OFFSET 1 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_basic_query_with_paging.2
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 2), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-11 13:46:23.000000', 6, 'UTC')), 0), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-25 00:00:00.000000', 6, 'UTC')), 0), ifNull(lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-01 13:46:23.000000', 6, 'UTC')), 0))
  GROUP BY s.session_id
  HAVING true
  ORDER BY start_time DESC
  LIMIT 2
  OFFSET 2 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_date_from_filter
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 2), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-11 13:46:23.000000', 6, 'UTC')), 0), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-01 00:00:00.000000', 6, 'UTC')), 0), ifNull(lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-01 13:46:23.000000', 6, 'UTC')), 0))
  GROUP BY s.session_id
  HAVING true
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_date_from_filter.1
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 2), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-11 13:46:23.000000', 6, 'UTC')), 0), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-30 00:00:00.000000', 6, 'UTC')), 0), ifNull(lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-01 13:46:23.000000', 6, 'UTC')), 0))
  GROUP BY s.session_id
  HAVING true
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_date_from_filter_cannot_search_before_ttl
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 2), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-11 12:46:00.000000', 6, 'UTC')), 0), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-12 00:00:00.000000', 6, 'UTC')), 0), ifNull(lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-01 12:46:00.000000', 6, 'UTC')), 0))
  GROUP BY s.session_id
  HAVING true
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_date_from_filter_cannot_search_before_ttl.1
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 2), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-11 12:46:00.000000', 6, 'UTC')), 0), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-11 00:00:00.000000', 6, 'UTC')), 0), ifNull(lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-01 12:46:00.000000', 6, 'UTC')), 0))
  GROUP BY s.session_id
  HAVING true
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_date_from_filter_cannot_search_before_ttl.2
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 2), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-11 12:46:00.000000', 6, 'UTC')), 0), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-10 00:00:00.000000', 6, 'UTC')), 0), ifNull(lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-01 12:46:00.000000', 6, 'UTC')), 0))
  GROUP BY s.session_id
  HAVING true
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_date_to_filter
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 2), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-11 13:46:23.000000', 6, 'UTC')), 0), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-25 00:00:00.000000', 6, 'UTC')), 0), ifNull(lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-28 23:59:59.999999', 6, 'UTC')), 0))
  GROUP BY s.session_id
  HAVING true
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_date_to_filter.1
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 2), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-11 13:46:23.000000', 6, 'UTC')), 0), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-25 00:00:00.000000', 6, 'UTC')), 0), ifNull(lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-29 23:59:59.999999', 6, 'UTC')), 0))
  GROUP BY s.session_id
  HAVING true
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_duration_filter
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 2), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-11 13:46:23.000000', 6, 'UTC')), 0), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-25 00:00:00.000000', 6, 'UTC')), 0), ifNull(lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-01 13:46:23.000000', 6, 'UTC')), 0))
  GROUP BY s.session_id
  HAVING ifNull(greaterOrEquals(duration, 60), 0)
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_duration_filter.1
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 2), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-11 13:46:23.000000', 6, 'UTC')), 0), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-25 00:00:00.000000', 6, 'UTC')), 0), ifNull(lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-01 13:46:23.000000', 6, 'UTC')), 0))
  GROUP BY s.session_id
  HAVING ifNull(lessOrEquals(duration, 60), 0)
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_event_filter
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 2), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-11 13:46:23.000000', 6, 'UTC')), 0), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-25 00:00:00.000000', 6, 'UTC')), 0), ifNull(lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-01 13:46:23.000000', 6, 'UTC')), 0), in(s.session_id,
                                                                                                                                                                                                                                                                                                                                                                                                                        (SELECT events.`$session_id` AS session_id
                                                                                                                                                                                                                                                                                                                                                                                                                         FROM events
                                                                                                                                                                                                                                                                                                                                                                                                                         WHERE and(equals(events.team_id, 2), notEmpty(events.`$session_id`), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-12-11 13:46:23.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), now64(6, 'UTC')), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-12-24 23:58:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2021-01-01 13:46:23.000000', 6, 'UTC')), and(equals(events.event, '$pageview'), true))
                                                                                                                                                                                                                                                                                                                                                                                                                         GROUP BY events.`$session_id`
                                                                                                                                                                                                                                                                                                                                                                                                                         HAVING hasAll(groupUniqArray(events.event), ['$pageview']))))
  GROUP BY s.session_id
  HAVING true
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_event_filter.1
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 2), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-11 13:46:23.000000', 6, 'UTC')), 0), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-25 00:00:00.000000', 6, 'UTC')), 0), ifNull(lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-01 13:46:23.000000', 6, 'UTC')), 0), in(s.session_id,
                                                                                                                                                                                                                                                                                                                                                                                                                        (SELECT events.`$session_id` AS session_id
                                                                                                                                                                                                                                                                                                                                                                                                                         FROM events
                                                                                                                                                                                                                                                                                                                                                                                                                         WHERE and(equals(events.team_id, 2), notEmpty(events.`$session_id`), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-12-11 13:46:23.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), now64(6, 'UTC')), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-12-24 23:58:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2021-01-01 13:46:23.000000', 6, 'UTC')), and(equals(events.event, '$autocapture'), true))
                                                                                                                                                                                                                                                                                                                                                                                                                         GROUP BY events.`$session_id`
                                                                                                                                                                                                                                                                                                                                                                                                                         HAVING hasAll(groupUniqArray(events.event), ['$autocapture']))))
  GROUP BY s.session_id
  HAVING true
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_event_filter_has_ttl_applied_too
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 2), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-11 13:46:23.000000', 6, 'UTC')), 0), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-25 00:00:00.000000', 6, 'UTC')), 0), ifNull(lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-01 13:46:23.000000', 6, 'UTC')), 0), in(s.session_id,
                                                                                                                                                                                                                                                                                                                                                                                                                        (SELECT events.`$session_id` AS session_id
                                                                                                                                                                                                                                                                                                                                                                                                                         FROM events
                                                                                                                                                                                                                                                                                                                                                                                                                         WHERE and(equals(events.team_id, 2), notEmpty(events.`$session_id`), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-12-11 13:46:23.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), now64(6, 'UTC')), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-12-24 23:58:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2021-01-01 13:46:23.000000', 6, 'UTC')), and(equals(events.event, '$pageview'), true))
                                                                                                                                                                                                                                                                                                                                                                                                                         GROUP BY events.`$session_id`
                                                                                                                                                                                                                                                                                                                                                                                                                         HAVING hasAll(groupUniqArray(events.event), ['$pageview']))))
  GROUP BY s.session_id
  HAVING true
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_event_filter_has_ttl_applied_too.1
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 2), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-11 13:46:23.000000', 6, 'UTC')), 0), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-25 00:00:00.000000', 6, 'UTC')), 0), ifNull(lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-01 13:46:23.000000', 6, 'UTC')), 0))
  GROUP BY s.session_id
  HAVING true
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_event_filter_with_active_sessions
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 2), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-11 13:46:23.000000', 6, 'UTC')), 0), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-25 00:00:00.000000', 6, 'UTC')), 0), ifNull(lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-01 13:46:23.000000', 6, 'UTC')), 0), in(s.session_id,
                                                                                                                                                                                                                                                                                                                                                                                                                        (SELECT events.`$session_id` AS session_id
                                                                                                                                                                                                                                                                                                                                                                                                                         FROM events
                                                                                                                                                                                                                                                                                                                                                                                                                         WHERE and(equals(events.team_id, 2), notEmpty(events.`$session_id`), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-12-11 13:46:23.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), now64(6, 'UTC')), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-12-24 23:58:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2021-01-01 13:46:23.000000', 6, 'UTC')), and(equals(events.event, '$pageview'), true))
                                                                                                                                                                                                                                                                                                                                                                                                                         GROUP BY events.`$session_id`
                                                                                                                                                                                                                                                                                                                                                                                                                         HAVING hasAll(groupUniqArray(events.event), ['$pageview']))))
  GROUP BY s.session_id
  HAVING ifNull(greaterOrEquals(duration, 60), 0)
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_event_filter_with_active_sessions.1
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 2), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-11 13:46:23.000000', 6, 'UTC')), 0), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-25 00:00:00.000000', 6, 'UTC')), 0), ifNull(lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-01 13:46:23.000000', 6, 'UTC')), 0), in(s.session_id,
                                                                                                                                                                                                                                                                                                                                                                                                                        (SELECT events.`$session_id` AS session_id
                                                                                                                                                                                                                                                                                                                                                                                                                         FROM events
                                                                                                                                                                                                                                                                                                                                                                                                                         WHERE and(equals(events.team_id, 2), notEmpty(events.`$session_id`), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-12-11 13:46:23.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), now64(6, 'UTC')), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-12-24 23:58:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2021-01-01 13:46:23.000000', 6, 'UTC')), and(equals(events.event, '$pageview'), true))
                                                                                                                                                                                                                                                                                                                                                                                                                         GROUP BY events.`$session_id`
                                                                                                                                                                                                                                                                                                                                                                                                                         HAVING hasAll(groupUniqArray(events.event), ['$pageview']))))
  GROUP BY s.session_id
  HAVING ifNull(greaterOrEquals(active_seconds, 60), 0)
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_event_filter_with_group_filter
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 2), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-31 20:00:00.000000', 6, 'UTC')), 0), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-14 00:00:00.000000', 6, 'UTC')), 0), ifNull(lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-21 20:00:00.000000', 6, 'UTC')), 0), in(s.session_id,
                                                                                                                                                                                                                                                                                                                                                                                                                        (SELECT events.`$session_id` AS session_id
                                                                                                                                                                                                                                                                                                                                                                                                                         FROM events
                                                                                                                                                                                                                                                                                                                                                                                                                         LEFT JOIN
                                                                                                                                                                                                                                                                                                                                                                                                                           (SELECT argMax(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(groups.group_properties, 'name'), ''), 'null'), '^"|"$', ''), groups._timestamp) AS properties___name, groups.group_type_index AS index, groups.group_key AS key
                                                                                                                                                                                                                                                                                                                                                                                                                            FROM groups
                                                                                                                                                                                                                                                                                                                                                                                                                            WHERE and(equals(groups.team_id, 2), ifNull(equals(index, 1), 0))
                                                                                                                                                                                                                                                                                                                                                                                                                            GROUP BY groups.group_type_index, groups.group_key) AS events__group_1 ON equals(events.`$group_1`, events__group_1.key)
                                                                                                                                                                                                                                                                                                                                                                                                                         WHERE and(equals(events.team_id, 2), notEmpty(events.`$session_id`), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-12-31 20:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), now64(6, 'UTC')), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2021-01-13 23:58:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2021-01-21 20:00:00.000000', 6, 'UTC')), and(equals(events.event, '$pageview'), ifNull(equals(events__group_1.properties___name, 'org one'), 0)))
                                                                                                                                                                                                                                                                                                                                                                                                                         GROUP BY events.`$session_id`
                                                                                                                                                                                                                                                                                                                                                                                                                         HAVING hasAll(groupUniqArray(events.event), ['$pageview']))))
  GROUP BY s.session_id
  HAVING true
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_event_filter_with_hogql_event_properties_test_accounts_excluded
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 2), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-31 20:00:00.000000', 6, 'UTC')), 0), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-14 00:00:00.000000', 6, 'UTC')), 0), ifNull(lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-21 20:00:00.000000', 6, 'UTC')), 0), in(s.session_id,
                                                                                                                                                                                                                                                                                                                                                                                                                        (SELECT events.`$session_id` AS session_id
                                                                                                                                                                                                                                                                                                                                                                                                                         FROM events
                                                                                                                                                                                                                                                                                                                                                                                                                         WHERE and(equals(events.team_id, 2), notEmpty(events.`$session_id`), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-12-31 20:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), now64(6, 'UTC')), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2021-01-13 23:58:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2021-01-21 20:00:00.000000', 6, 'UTC')), and(equals(events.event, '$pageview'), true))
                                                                                                                                                                                                                                                                                                                                                                                                                         GROUP BY events.`$session_id`
                                                                                                                                                                                                                                                                                                                                                                                                                         HAVING hasAll(groupUniqArray(events.event), ['$pageview']))))
  GROUP BY s.session_id
  HAVING true
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_event_filter_with_hogql_event_properties_test_accounts_excluded.1
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 2), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-31 20:00:00.000000', 6, 'UTC')), 0), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-14 00:00:00.000000', 6, 'UTC')), 0), ifNull(lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-21 20:00:00.000000', 6, 'UTC')), 0), and(in(s.session_id,
                                                                                                                                                                                                                                                                                                                                                                                                                            (SELECT events.`$session_id` AS session_id
                                                                                                                                                                                                                                                                                                                                                                                                                             FROM events
                                                                                                                                                                                                                                                                                                                                                                                                                             INNER JOIN
                                                                                                                                                                                                                                                                                                                                                                                                                               (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS events__pdi___person_id, argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id, person_distinct_id2.distinct_id AS distinct_id
                                                                                                                                                                                                                                                                                                                                                                                                                                FROM person_distinct_id2
                                                                                                                                                                                                                                                                                                                                                                                                                                WHERE equals(person_distinct_id2.team_id, 2)
                                                                                                                                                                                                                                                                                                                                                                                                                                GROUP BY person_distinct_id2.distinct_id
                                                                                                                                                                                                                                                                                                                                                                                                                                HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS events__pdi ON equals(events.distinct_id, events__pdi.distinct_id)
                                                                                                                                                                                                                                                                                                                                                                                                                             LEFT JOIN
                                                                                                                                                                                                                                                                                                                                                                                                                               (SELECT person.id AS id, replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, 'email'), ''), 'null'), '^"|"$', '') AS properties___email
                                                                                                                                                                                                                                                                                                                                                                                                                                FROM person
                                                                                                                                                                                                                                                                                                                                                                                                                                WHERE and(equals(person.team_id, 2), ifNull(in(tuple(person.id, person.version),
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 (SELECT person.id AS id, max(person.version) AS version
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  FROM person
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  WHERE equals(person.team_id, 2)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  GROUP BY person.id
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  HAVING and(ifNull(equals(argMax(person.is_deleted, person.version), 0), 0), ifNull(less(argMax(person.created_at, person.version), plus(now64(6, 'UTC'), toIntervalDay(1))), 0)))), 0)) SETTINGS optimize_aggregation_in_order=1) AS events__pdi__person ON equals(events__pdi.events__pdi___person_id, events__pdi__person.id)
                                                                                                                                                                                                                                                                                                                                                                                                                             WHERE and(equals(events.team_id, 2), notEmpty(events.`$session_id`), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-12-31 20:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), now64(6, 'UTC')), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2021-01-13 23:58:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2021-01-21 20:00:00.000000', 6, 'UTC')), and(equals(events.event, '$pageview'), true), ifNull(equals(events__pdi__person.properties___email, 'bla'), 0))
                                                                                                                                                                                                                                                                                                                                                                                                                             GROUP BY events.`$session_id`
                                                                                                                                                                                                                                                                                                                                                                                                                             HAVING hasAll(groupUniqArray(events.event), ['$pageview']))), in(s.distinct_id,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                (SELECT person_distinct_ids.distinct_id AS distinct_id
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 FROM
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_distinct_ids___person_id, argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id, person_distinct_id2.distinct_id AS distinct_id
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    FROM person_distinct_id2
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    WHERE equals(person_distinct_id2.team_id, 2)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    GROUP BY person_distinct_id2.distinct_id
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS person_distinct_ids
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 LEFT JOIN
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   (SELECT person.id AS id, replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, 'email'), ''), 'null'), '^"|"$', '') AS properties___email
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    FROM person
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    WHERE and(equals(person.team_id, 2), ifNull(in(tuple(person.id, person.version),
person.id AS id, max(person.version) AS version
person
equals(person.team_id, 2)
person.id
and(ifNull(equals(argMax(person.is_deleted, person.version), 0), 0), ifNull(less(argMax(person.created_at, person.version), plus(now64(6, 'UTC'), toIntervalDay(1))), 0)))), 0)) SETTINGS optimize_aggregation_in_order=1) AS person_distinct_ids__person ON equals(person_distinct_ids.person_distinct_ids___person_id, person_distinct_ids__person.id)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 WHERE ifNull(equals(person_distinct_ids__person.properties___email, 'bla'), 0)))))
  GROUP BY s.session_id
  HAVING true
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_event_filter_with_hogql_event_properties_test_accounts_excluded.2
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 2), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-31 20:00:00.000000', 6, 'UTC')), 0), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-14 00:00:00.000000', 6, 'UTC')), 0), ifNull(lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-21 20:00:00.000000', 6, 'UTC')), 0), and(in(s.session_id,
                                                                                                                                                                                                                                                                                                                                                                                                                            (SELECT events.`$session_id` AS session_id
                                                                                                                                                                                                                                                                                                                                                                                                                             FROM events
                                                                                                                                                                                                                                                                                                                                                                                                                             INNER JOIN
                                                                                                                                                                                                                                                                                                                                                                                                                               (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS events__pdi___person_id, argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id, person_distinct_id2.distinct_id AS distinct_id
                                                                                                                                                                                                                                                                                                                                                                                                                                FROM person_distinct_id2
                                                                                                                                                                                                                                                                                                                                                                                                                                WHERE equals(person_distinct_id2.team_id, 2)
                                                                                                                                                                                                                                                                                                                                                                                                                                GROUP BY person_distinct_id2.distinct_id
                                                                                                                                                                                                                                                                                                                                                                                                                                HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS events__pdi ON equals(events.distinct_id, events__pdi.distinct_id)
                                                                                                                                                                                                                                                                                                                                                                                                                             LEFT JOIN
                                                                                                                                                                                                                                                                                                                                                                                                                               (SELECT person.id AS id, replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, 'email'), ''), 'null'), '^"|"$', '') AS properties___email
                                                                                                                                                                                                                                                                                                                                                                                                                                FROM person
                                                                                                                                                                                                                                                                                                                                                                                                                                WHERE and(equals(person.team_id, 2), ifNull(in(tuple(person.id, person.version),
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 (SELECT person.id AS id, max(person.version) AS version
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  FROM person
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  WHERE equals(person.team_id, 2)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  GROUP BY person.id
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  HAVING and(ifNull(equals(argMax(person.is_deleted, person.version), 0), 0), ifNull(less(argMax(person.created_at, person.version), plus(now64(6, 'UTC'), toIntervalDay(1))), 0)))), 0)) SETTINGS optimize_aggregation_in_order=1) AS events__pdi__person ON equals(events__pdi.events__pdi___person_id, events__pdi__person.id)
                                                                                                                                                                                                                                                                                                                                                                                                                             WHERE and(equals(events.team_id, 2), notEmpty(events.`$session_id`), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-12-31 20:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), now64(6, 'UTC')), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2021-01-13 23:58:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2021-01-21 20:00:00.000000', 6, 'UTC')), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$browser'), ''), 'null'), '^"|"$', ''), 'Chrome'), 0), ifNull(equals(events__pdi__person.properties___email, 'bla'), 0))
                                                                                                                                                                                                                                                                                                                                                                                                                             GROUP BY events.`$session_id`
                                                                                                                                                                                                                                                                                                                                                                                                                             HAVING true)), in(s.distinct_id,
                                                                                                                                                                                                                                                                                                                                                                                                                                                 (SELECT person_distinct_ids.distinct_id AS distinct_id
                                                                                                                                                                                                                                                                                                                                                                                                                                                  FROM
                                                                                                                                                                                                                                                                                                                                                                                                                                                    (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_distinct_ids___person_id, argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id, person_distinct_id2.distinct_id AS distinct_id
                                                                                                                                                                                                                                                                                                                                                                                                                                                     FROM person_distinct_id2
                                                                                                                                                                                                                                                                                                                                                                                                                                                     WHERE equals(person_distinct_id2.team_id, 2)
                                                                                                                                                                                                                                                                                                                                                                                                                                                     GROUP BY person_distinct_id2.distinct_id
                                                                                                                                                                                                                                                                                                                                                                                                                                                     HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS person_distinct_ids
                                                                                                                                                                                                                                                                                                                                                                                                                                                  LEFT JOIN
                                                                                                                                                                                                                                                                                                                                                                                                                                                    (SELECT person.id AS id, replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, 'email'), ''), 'null'), '^"|"$', '') AS properties___email
                                                                                                                                                                                                                                                                                                                                                                                                                                                     FROM person
                                                                                                                                                                                                                                                                                                                                                                                                                                                     WHERE and(equals(person.team_id, 2), ifNull(in(tuple(person.id, person.version),
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      (SELECT person.id AS id, max(person.version) AS version
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       FROM person
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       WHERE equals(person.team_id, 2)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       GROUP BY person.id
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       HAVING and(ifNull(equals(argMax(person.is_deleted, person.version), 0), 0), ifNull(less(argMax(person.created_at, person.version), plus(now64(6, 'UTC'), toIntervalDay(1))), 0)))), 0)) SETTINGS optimize_aggregation_in_order=1) AS person_distinct_ids__person ON equals(person_distinct_ids.person_distinct_ids___person_id, person_distinct_ids__person.id)
                                                                                                                                                                                                                                                                                                                                                                                                                                                  WHERE ifNull(equals(person_distinct_ids__person.properties___email, 'bla'), 0)))))
  GROUP BY s.session_id
  HAVING true
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_event_filter_with_hogql_event_properties_test_accounts_excluded_materialized
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 2), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-31 20:00:00.000000', 6, 'UTC')), 0), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-14 00:00:00.000000', 6, 'UTC')), 0), ifNull(lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-21 20:00:00.000000', 6, 'UTC')), 0), in(s.session_id,
                                                                                                                                                                                                                                                                                                                                                                                                                        (SELECT events.`$session_id` AS session_id
                                                                                                                                                                                                                                                                                                                                                                                                                         FROM events
                                                                                                                                                                                                                                                                                                                                                                                                                         WHERE and(equals(events.team_id, 2), notEmpty(events.`$session_id`), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-12-31 20:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), now64(6, 'UTC')), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2021-01-13 23:58:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2021-01-21 20:00:00.000000', 6, 'UTC')), and(equals(events.event, '$pageview'), true))
                                                                                                                                                                                                                                                                                                                                                                                                                         GROUP BY events.`$session_id`
                                                                                                                                                                                                                                                                                                                                                                                                                         HAVING hasAll(groupUniqArray(events.event), ['$pageview']))))
  GROUP BY s.session_id
  HAVING true
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_event_filter_with_hogql_event_properties_test_accounts_excluded_materialized.1
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 2), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-31 20:00:00.000000', 6, 'UTC')), 0), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-14 00:00:00.000000', 6, 'UTC')), 0), ifNull(lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-21 20:00:00.000000', 6, 'UTC')), 0), and(in(s.session_id,
                                                                                                                                                                                                                                                                                                                                                                                                                            (SELECT events.`$session_id` AS session_id
                                                                                                                                                                                                                                                                                                                                                                                                                             FROM events
                                                                                                                                                                                                                                                                                                                                                                                                                             INNER JOIN
                                                                                                                                                                                                                                                                                                                                                                                                                               (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS events__pdi___person_id, argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id, person_distinct_id2.distinct_id AS distinct_id
                                                                                                                                                                                                                                                                                                                                                                                                                                FROM person_distinct_id2
                                                                                                                                                                                                                                                                                                                                                                                                                                WHERE equals(person_distinct_id2.team_id, 2)
                                                                                                                                                                                                                                                                                                                                                                                                                                GROUP BY person_distinct_id2.distinct_id
                                                                                                                                                                                                                                                                                                                                                                                                                                HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS events__pdi ON equals(events.distinct_id, events__pdi.distinct_id)
                                                                                                                                                                                                                                                                                                                                                                                                                             LEFT JOIN
                                                                                                                                                                                                                                                                                                                                                                                                                               (SELECT person.id AS id, nullIf(nullIf(person.pmat_email, ''), 'null') AS properties___email
                                                                                                                                                                                                                                                                                                                                                                                                                                FROM person
                                                                                                                                                                                                                                                                                                                                                                                                                                WHERE and(equals(person.team_id, 2), ifNull(in(tuple(person.id, person.version),
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 (SELECT person.id AS id, max(person.version) AS version
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  FROM person
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  WHERE equals(person.team_id, 2)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  GROUP BY person.id
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  HAVING and(ifNull(equals(argMax(person.is_deleted, person.version), 0), 0), ifNull(less(argMax(person.created_at, person.version), plus(now64(6, 'UTC'), toIntervalDay(1))), 0)))), 0)) SETTINGS optimize_aggregation_in_order=1) AS events__pdi__person ON equals(events__pdi.events__pdi___person_id, events__pdi__person.id)
                                                                                                                                                                                                                                                                                                                                                                                                                             WHERE and(equals(events.team_id, 2), notEmpty(events.`$session_id`), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-12-31 20:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), now64(6, 'UTC')), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2021-01-13 23:58:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2021-01-21 20:00:00.000000', 6, 'UTC')), and(equals(events.event, '$pageview'), true), ifNull(equals(events__pdi__person.properties___email, 'bla'), 0))
                                                                                                                                                                                                                                                                                                                                                                                                                             GROUP BY events.`$session_id`
                                                                                                                                                                                                                                                                                                                                                                                                                             HAVING hasAll(groupUniqArray(events.event), ['$pageview']))), in(s.distinct_id,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                (SELECT person_distinct_ids.distinct_id AS distinct_id
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 FROM
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_distinct_ids___person_id, argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id, person_distinct_id2.distinct_id AS distinct_id
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    FROM person_distinct_id2
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    WHERE equals(person_distinct_id2.team_id, 2)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    GROUP BY person_distinct_id2.distinct_id
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS person_distinct_ids
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 LEFT JOIN
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   (SELECT person.id AS id, nullIf(nullIf(person.pmat_email, ''), 'null') AS properties___email
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    FROM person
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    WHERE and(equals(person.team_id, 2), ifNull(in(tuple(person.id, person.version),
person.id AS id, max(person.version) AS version
person
equals(person.team_id, 2)
person.id
and(ifNull(equals(argMax(person.is_deleted, person.version), 0), 0), ifNull(less(argMax(person.created_at, person.version), plus(now64(6, 'UTC'), toIntervalDay(1))), 0)))), 0)) SETTINGS optimize_aggregation_in_order=1) AS person_distinct_ids__person ON equals(person_distinct_ids.person_distinct_ids___person_id, person_distinct_ids__person.id)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 WHERE ifNull(equals(person_distinct_ids__person.properties___email, 'bla'), 0)))))
  GROUP BY s.session_id
  HAVING true
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_event_filter_with_hogql_event_properties_test_accounts_excluded_materialized.2
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 2), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-31 20:00:00.000000', 6, 'UTC')), 0), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-14 00:00:00.000000', 6, 'UTC')), 0), ifNull(lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-21 20:00:00.000000', 6, 'UTC')), 0), and(in(s.session_id,
                                                                                                                                                                                                                                                                                                                                                                                                                            (SELECT events.`$session_id` AS session_id
                                                                                                                                                                                                                                                                                                                                                                                                                             FROM events
                                                                                                                                                                                                                                                                                                                                                                                                                             INNER JOIN
                                                                                                                                                                                                                                                                                                                                                                                                                               (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS events__pdi___person_id, argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id, person_distinct_id2.distinct_id AS distinct_id
                                                                                                                                                                                                                                                                                                                                                                                                                                FROM person_distinct_id2
                                                                                                                                                                                                                                                                                                                                                                                                                                WHERE equals(person_distinct_id2.team_id, 2)
                                                                                                                                                                                                                                                                                                                                                                                                                                GROUP BY person_distinct_id2.distinct_id
                                                                                                                                                                                                                                                                                                                                                                                                                                HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS events__pdi ON equals(events.distinct_id, events__pdi.distinct_id)
                                                                                                                                                                                                                                                                                                                                                                                                                             LEFT JOIN
                                                                                                                                                                                                                                                                                                                                                                                                                               (SELECT person.id AS id, nullIf(nullIf(person.pmat_email, ''), 'null') AS properties___email
                                                                                                                                                                                                                                                                                                                                                                                                                                FROM person
                                                                                                                                                                                                                                                                                                                                                                                                                                WHERE and(equals(person.team_id, 2), ifNull(in(tuple(person.id, person.version),
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 (SELECT person.id AS id, max(person.version) AS version
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  FROM person
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  WHERE equals(person.team_id, 2)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  GROUP BY person.id
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  HAVING and(ifNull(equals(argMax(person.is_deleted, person.version), 0), 0), ifNull(less(argMax(person.created_at, person.version), plus(now64(6, 'UTC'), toIntervalDay(1))), 0)))), 0)) SETTINGS optimize_aggregation_in_order=1) AS events__pdi__person ON equals(events__pdi.events__pdi___person_id, events__pdi__person.id)
                                                                                                                                                                                                                                                                                                                                                                                                                             WHERE and(equals(events.team_id, 2), notEmpty(events.`$session_id`), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-12-31 20:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), now64(6, 'UTC')), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2021-01-13 23:58:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2021-01-21 20:00:00.000000', 6, 'UTC')), ifNull(equals(nullIf(nullIf(events.`mat_$browser`, ''), 'null'), 'Chrome'), 0), ifNull(equals(events__pdi__person.properties___email, 'bla'), 0))
                                                                                                                                                                                                                                                                                                                                                                                                                             GROUP BY events.`$session_id`
                                                                                                                                                                                                                                                                                                                                                                                                                             HAVING true)), in(s.distinct_id,
                                                                                                                                                                                                                                                                                                                                                                                                                                                 (SELECT person_distinct_ids.distinct_id AS distinct_id
                                                                                                                                                                                                                                                                                                                                                                                                                                                  FROM
                                                                                                                                                                                                                                                                                                                                                                                                                                                    (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_distinct_ids___person_id, argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id, person_distinct_id2.distinct_id AS distinct_id
                                                                                                                                                                                                                                                                                                                                                                                                                                                     FROM person_distinct_id2
                                                                                                                                                                                                                                                                                                                                                                                                                                                     WHERE equals(person_distinct_id2.team_id, 2)
                                                                                                                                                                                                                                                                                                                                                                                                                                                     GROUP BY person_distinct_id2.distinct_id
                                                                                                                                                                                                                                                                                                                                                                                                                                                     HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS person_distinct_ids
                                                                                                                                                                                                                                                                                                                                                                                                                                                  LEFT JOIN
                                                                                                                                                                                                                                                                                                                                                                                                                                                    (SELECT person.id AS id, nullIf(nullIf(person.pmat_email, ''), 'null') AS properties___email
                                                                                                                                                                                                                                                                                                                                                                                                                                                     FROM person
                                                                                                                                                                                                                                                                                                                                                                                                                                                     WHERE and(equals(person.team_id, 2), ifNull(in(tuple(person.id, person.version),
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      (SELECT person.id AS id, max(person.version) AS version
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       FROM person
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       WHERE equals(person.team_id, 2)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       GROUP BY person.id
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       HAVING and(ifNull(equals(argMax(person.is_deleted, person.version), 0), 0), ifNull(less(argMax(person.created_at, person.version), plus(now64(6, 'UTC'), toIntervalDay(1))), 0)))), 0)) SETTINGS optimize_aggregation_in_order=1) AS person_distinct_ids__person ON equals(person_distinct_ids.person_distinct_ids___person_id, person_distinct_ids__person.id)
                                                                                                                                                                                                                                                                                                                                                                                                                                                  WHERE ifNull(equals(person_distinct_ids__person.properties___email, 'bla'), 0)))))
  GROUP BY s.session_id
  HAVING true
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_event_filter_with_hogql_person_properties
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 2), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-11 13:46:23.000000', 6, 'UTC')), 0), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-25 00:00:00.000000', 6, 'UTC')), 0), ifNull(lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-01 13:46:23.000000', 6, 'UTC')), 0), in(s.session_id,
                                                                                                                                                                                                                                                                                                                                                                                                                        (SELECT events.`$session_id` AS session_id
                                                                                                                                                                                                                                                                                                                                                                                                                         FROM events
                                                                                                                                                                                                                                                                                                                                                                                                                         INNER JOIN
                                                                                                                                                                                                                                                                                                                                                                                                                           (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS events__pdi___person_id, argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id, person_distinct_id2.distinct_id AS distinct_id
                                                                                                                                                                                                                                                                                                                                                                                                                            FROM person_distinct_id2
                                                                                                                                                                                                                                                                                                                                                                                                                            WHERE equals(person_distinct_id2.team_id, 2)
                                                                                                                                                                                                                                                                                                                                                                                                                            GROUP BY person_distinct_id2.distinct_id
                                                                                                                                                                                                                                                                                                                                                                                                                            HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS events__pdi ON equals(events.distinct_id, events__pdi.distinct_id)
                                                                                                                                                                                                                                                                                                                                                                                                                         LEFT JOIN
                                                                                                                                                                                                                                                                                                                                                                                                                           (SELECT person.id AS id, replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, 'email'), ''), 'null'), '^"|"$', '') AS properties___email
                                                                                                                                                                                                                                                                                                                                                                                                                            FROM person
                                                                                                                                                                                                                                                                                                                                                                                                                            WHERE and(equals(person.team_id, 2), ifNull(in(tuple(person.id, person.version),
                                                                                                                                                                                                                                                                                                                                                                                                                                                                             (SELECT person.id AS id, max(person.version) AS version
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              FROM person
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              WHERE equals(person.team_id, 2)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              GROUP BY person.id
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              HAVING and(ifNull(equals(argMax(person.is_deleted, person.version), 0), 0), ifNull(less(argMax(person.created_at, person.version), plus(now64(6, 'UTC'), toIntervalDay(1))), 0)))), 0)) SETTINGS optimize_aggregation_in_order=1) AS events__pdi__person ON equals(events__pdi.events__pdi___person_id, events__pdi__person.id)
                                                                                                                                                                                                                                                                                                                                                                                                                         WHERE and(equals(events.team_id, 2), notEmpty(events.`$session_id`), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-12-11 13:46:23.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), now64(6, 'UTC')), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-12-24 23:58:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2021-01-01 13:46:23.000000', 6, 'UTC')), and(equals(events.event, '$pageview'), ifNull(equals(events__pdi__person.properties___email, 'bla'), 0)))
                                                                                                                                                                                                                                                                                                                                                                                                                         GROUP BY events.`$session_id`
                                                                                                                                                                                                                                                                                                                                                                                                                         HAVING hasAll(groupUniqArray(events.event), ['$pageview']))))
  GROUP BY s.session_id
  HAVING true
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_event_filter_with_hogql_person_properties.1
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 2), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-11 13:46:23.000000', 6, 'UTC')), 0), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-25 00:00:00.000000', 6, 'UTC')), 0), ifNull(lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-01 13:46:23.000000', 6, 'UTC')), 0), in(s.session_id,
                                                                                                                                                                                                                                                                                                                                                                                                                        (SELECT events.`$session_id` AS session_id
                                                                                                                                                                                                                                                                                                                                                                                                                         FROM events
                                                                                                                                                                                                                                                                                                                                                                                                                         INNER JOIN
                                                                                                                                                                                                                                                                                                                                                                                                                           (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS events__pdi___person_id, argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id, person_distinct_id2.distinct_id AS distinct_id
                                                                                                                                                                                                                                                                                                                                                                                                                            FROM person_distinct_id2
                                                                                                                                                                                                                                                                                                                                                                                                                            WHERE equals(person_distinct_id2.team_id, 2)
                                                                                                                                                                                                                                                                                                                                                                                                                            GROUP BY person_distinct_id2.distinct_id
                                                                                                                                                                                                                                                                                                                                                                                                                            HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS events__pdi ON equals(events.distinct_id, events__pdi.distinct_id)
                                                                                                                                                                                                                                                                                                                                                                                                                         LEFT JOIN
                                                                                                                                                                                                                                                                                                                                                                                                                           (SELECT person.id AS id, replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, 'email'), ''), 'null'), '^"|"$', '') AS properties___email
                                                                                                                                                                                                                                                                                                                                                                                                                            FROM person
                                                                                                                                                                                                                                                                                                                                                                                                                            WHERE and(equals(person.team_id, 2), ifNull(in(tuple(person.id, person.version),
                                                                                                                                                                                                                                                                                                                                                                                                                                                                             (SELECT person.id AS id, max(person.version) AS version
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              FROM person
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              WHERE equals(person.team_id, 2)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              GROUP BY person.id
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              HAVING and(ifNull(equals(argMax(person.is_deleted, person.version), 0), 0), ifNull(less(argMax(person.created_at, person.version), plus(now64(6, 'UTC'), toIntervalDay(1))), 0)))), 0)) SETTINGS optimize_aggregation_in_order=1) AS events__pdi__person ON equals(events__pdi.events__pdi___person_id, events__pdi__person.id)
                                                                                                                                                                                                                                                                                                                                                                                                                         WHERE and(equals(events.team_id, 2), notEmpty(events.`$session_id`), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-12-11 13:46:23.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), now64(6, 'UTC')), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-12-24 23:58:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2021-01-01 13:46:23.000000', 6, 'UTC')), and(equals(events.event, '$pageview'), ifNull(equals(events__pdi__person.properties___email, 'something else'), 0)))
                                                                                                                                                                                                                                                                                                                                                                                                                         GROUP BY events.`$session_id`
                                                                                                                                                                                                                                                                                                                                                                                                                         HAVING hasAll(groupUniqArray(events.event), ['$pageview']))))
  GROUP BY s.session_id
  HAVING true
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_event_filter_with_hogql_properties
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 2), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-11 13:46:23.000000', 6, 'UTC')), 0), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-25 00:00:00.000000', 6, 'UTC')), 0), ifNull(lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-01 13:46:23.000000', 6, 'UTC')), 0), in(s.session_id,
                                                                                                                                                                                                                                                                                                                                                                                                                        (SELECT events.`$session_id` AS session_id
                                                                                                                                                                                                                                                                                                                                                                                                                         FROM events
                                                                                                                                                                                                                                                                                                                                                                                                                         WHERE and(equals(events.team_id, 2), notEmpty(events.`$session_id`), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-12-11 13:46:23.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), now64(6, 'UTC')), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-12-24 23:58:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2021-01-01 13:46:23.000000', 6, 'UTC')), and(equals(events.event, '$pageview'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$browser'), ''), 'null'), '^"|"$', ''), 'Chrome'), 0)))
                                                                                                                                                                                                                                                                                                                                                                                                                         GROUP BY events.`$session_id`
                                                                                                                                                                                                                                                                                                                                                                                                                         HAVING hasAll(groupUniqArray(events.event), ['$pageview']))))
  GROUP BY s.session_id
  HAVING true
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_event_filter_with_hogql_properties.1
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 2), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-11 13:46:23.000000', 6, 'UTC')), 0), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-25 00:00:00.000000', 6, 'UTC')), 0), ifNull(lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-01 13:46:23.000000', 6, 'UTC')), 0), in(s.session_id,
                                                                                                                                                                                                                                                                                                                                                                                                                        (SELECT events.`$session_id` AS session_id
                                                                                                                                                                                                                                                                                                                                                                                                                         FROM events
                                                                                                                                                                                                                                                                                                                                                                                                                         WHERE and(equals(events.team_id, 2), notEmpty(events.`$session_id`), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-12-11 13:46:23.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), now64(6, 'UTC')), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-12-24 23:58:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2021-01-01 13:46:23.000000', 6, 'UTC')), and(equals(events.event, '$pageview'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$browser'), ''), 'null'), '^"|"$', ''), 'Firefox'), 0)))
                                                                                                                                                                                                                                                                                                                                                                                                                         GROUP BY events.`$session_id`
                                                                                                                                                                                                                                                                                                                                                                                                                         HAVING hasAll(groupUniqArray(events.event), ['$pageview']))))
  GROUP BY s.session_id
  HAVING true
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_event_filter_with_hogql_properties_materialized
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 2), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-11 13:46:23.000000', 6, 'UTC')), 0), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-25 00:00:00.000000', 6, 'UTC')), 0), ifNull(lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-01 13:46:23.000000', 6, 'UTC')), 0), in(s.session_id,
                                                                                                                                                                                                                                                                                                                                                                                                                        (SELECT events.`$session_id` AS session_id
                                                                                                                                                                                                                                                                                                                                                                                                                         FROM events
                                                                                                                                                                                                                                                                                                                                                                                                                         WHERE and(equals(events.team_id, 2), notEmpty(events.`$session_id`), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-12-11 13:46:23.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), now64(6, 'UTC')), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-12-24 23:58:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2021-01-01 13:46:23.000000', 6, 'UTC')), and(equals(events.event, '$pageview'), ifNull(equals(nullIf(nullIf(events.`mat_$browser`, ''), 'null'), 'Chrome'), 0)))
                                                                                                                                                                                                                                                                                                                                                                                                                         GROUP BY events.`$session_id`
                                                                                                                                                                                                                                                                                                                                                                                                                         HAVING hasAll(groupUniqArray(events.event), ['$pageview']))))
  GROUP BY s.session_id
  HAVING true
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_event_filter_with_hogql_properties_materialized.1
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 2), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-11 13:46:23.000000', 6, 'UTC')), 0), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-25 00:00:00.000000', 6, 'UTC')), 0), ifNull(lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-01 13:46:23.000000', 6, 'UTC')), 0), in(s.session_id,
                                                                                                                                                                                                                                                                                                                                                                                                                        (SELECT events.`$session_id` AS session_id
                                                                                                                                                                                                                                                                                                                                                                                                                         FROM events
                                                                                                                                                                                                                                                                                                                                                                                                                         WHERE and(equals(events.team_id, 2), notEmpty(events.`$session_id`), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-12-11 13:46:23.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), now64(6, 'UTC')), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-12-24 23:58:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2021-01-01 13:46:23.000000', 6, 'UTC')), and(equals(events.event, '$pageview'), ifNull(equals(nullIf(nullIf(events.`mat_$browser`, ''), 'null'), 'Firefox'), 0)))
                                                                                                                                                                                                                                                                                                                                                                                                                         GROUP BY events.`$session_id`
                                                                                                                                                                                                                                                                                                                                                                                                                         HAVING hasAll(groupUniqArray(events.event), ['$pageview']))))
  GROUP BY s.session_id
  HAVING true
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_event_filter_with_matching_on_session_id
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 2), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-11 13:46:23.000000', 6, 'UTC')), 0), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-25 00:00:00.000000', 6, 'UTC')), 0), ifNull(lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-01 13:46:23.000000', 6, 'UTC')), 0), in(s.session_id,
                                                                                                                                                                                                                                                                                                                                                                                                                        (SELECT events.`$session_id` AS session_id
                                                                                                                                                                                                                                                                                                                                                                                                                         FROM events
                                                                                                                                                                                                                                                                                                                                                                                                                         WHERE and(equals(events.team_id, 2), notEmpty(events.`$session_id`), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-12-11 13:46:23.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), now64(6, 'UTC')), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-12-24 23:58:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2021-01-01 13:46:23.000000', 6, 'UTC')), and(equals(events.event, '$pageview'), true))
                                                                                                                                                                                                                                                                                                                                                                                                                         GROUP BY events.`$session_id`
                                                                                                                                                                                                                                                                                                                                                                                                                         HAVING hasAll(groupUniqArray(events.event), ['$pageview']))))
  GROUP BY s.session_id
  HAVING true
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_event_filter_with_matching_on_session_id.1
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 2), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-11 13:46:23.000000', 6, 'UTC')), 0), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-25 00:00:00.000000', 6, 'UTC')), 0), ifNull(lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-01 13:46:23.000000', 6, 'UTC')), 0), in(s.session_id,
                                                                                                                                                                                                                                                                                                                                                                                                                        (SELECT events.`$session_id` AS session_id
                                                                                                                                                                                                                                                                                                                                                                                                                         FROM events
                                                                                                                                                                                                                                                                                                                                                                                                                         WHERE and(equals(events.team_id, 2), notEmpty(events.`$session_id`), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-12-11 13:46:23.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), now64(6, 'UTC')), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-12-24 23:58:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2021-01-01 13:46:23.000000', 6, 'UTC')), and(equals(events.event, '$autocapture'), true))
                                                                                                                                                                                                                                                                                                                                                                                                                         GROUP BY events.`$session_id`
                                                                                                                                                                                                                                                                                                                                                                                                                         HAVING hasAll(groupUniqArray(events.event), ['$autocapture']))))
  GROUP BY s.session_id
  HAVING true
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_event_filter_with_properties
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 2), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-11 13:46:23.000000', 6, 'UTC')), 0), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-25 00:00:00.000000', 6, 'UTC')), 0), ifNull(lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-01 13:46:23.000000', 6, 'UTC')), 0), in(s.session_id,
                                                                                                                                                                                                                                                                                                                                                                                                                        (SELECT events.`$session_id` AS session_id
                                                                                                                                                                                                                                                                                                                                                                                                                         FROM events
                                                                                                                                                                                                                                                                                                                                                                                                                         WHERE and(equals(events.team_id, 2), notEmpty(events.`$session_id`), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-12-11 13:46:23.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), now64(6, 'UTC')), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-12-24 23:58:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2021-01-01 13:46:23.000000', 6, 'UTC')), and(equals(events.event, '$pageview'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$browser'), ''), 'null'), '^"|"$', ''), 'Chrome'), 0)))
                                                                                                                                                                                                                                                                                                                                                                                                                         GROUP BY events.`$session_id`
                                                                                                                                                                                                                                                                                                                                                                                                                         HAVING hasAll(groupUniqArray(events.event), ['$pageview']))))
  GROUP BY s.session_id
  HAVING true
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_event_filter_with_properties.1
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 2), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-11 13:46:23.000000', 6, 'UTC')), 0), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-25 00:00:00.000000', 6, 'UTC')), 0), ifNull(lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-01 13:46:23.000000', 6, 'UTC')), 0), in(s.session_id,
                                                                                                                                                                                                                                                                                                                                                                                                                        (SELECT events.`$session_id` AS session_id
                                                                                                                                                                                                                                                                                                                                                                                                                         FROM events
                                                                                                                                                                                                                                                                                                                                                                                                                         WHERE and(equals(events.team_id, 2), notEmpty(events.`$session_id`), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-12-11 13:46:23.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), now64(6, 'UTC')), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-12-24 23:58:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2021-01-01 13:46:23.000000', 6, 'UTC')), and(equals(events.event, '$pageview'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$browser'), ''), 'null'), '^"|"$', ''), 'Firefox'), 0)))
                                                                                                                                                                                                                                                                                                                                                                                                                         GROUP BY events.`$session_id`
                                                                                                                                                                                                                                                                                                                                                                                                                         HAVING hasAll(groupUniqArray(events.event), ['$pageview']))))
  GROUP BY s.session_id
  HAVING true
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_event_filter_with_properties.2
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 2), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-11 13:46:23.000000', 6, 'UTC')), 0), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-25 00:00:00.000000', 6, 'UTC')), 0), ifNull(lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-01 13:46:23.000000', 6, 'UTC')), 0), in(s.session_id,
                                                                                                                                                                                                                                                                                                                                                                                                                        (SELECT events.`$session_id` AS session_id
                                                                                                                                                                                                                                                                                                                                                                                                                         FROM events
                                                                                                                                                                                                                                                                                                                                                                                                                         WHERE and(equals(events.team_id, 2), notEmpty(events.`$session_id`), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-12-11 13:46:23.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), now64(6, 'UTC')), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-12-24 23:58:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2021-01-01 13:46:23.000000', 6, 'UTC')), and(equals(events.event, 'a_different_event'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$browser'), ''), 'null'), '^"|"$', ''), 'Chrome'), 0)))
                                                                                                                                                                                                                                                                                                                                                                                                                         GROUP BY events.`$session_id`
                                                                                                                                                                                                                                                                                                                                                                                                                         HAVING hasAll(groupUniqArray(events.event), ['a_different_event']))))
  GROUP BY s.session_id
  HAVING true
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_event_filter_with_properties.3
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 2), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-11 13:46:23.000000', 6, 'UTC')), 0), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-25 00:00:00.000000', 6, 'UTC')), 0), ifNull(lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-01 13:46:23.000000', 6, 'UTC')), 0), in(s.session_id,
                                                                                                                                                                                                                                                                                                                                                                                                                        (SELECT events.`$session_id` AS session_id
                                                                                                                                                                                                                                                                                                                                                                                                                         FROM events
                                                                                                                                                                                                                                                                                                                                                                                                                         WHERE and(equals(events.team_id, 2), notEmpty(events.`$session_id`), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-12-11 13:46:23.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), now64(6, 'UTC')), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-12-24 23:58:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2021-01-01 13:46:23.000000', 6, 'UTC')), and(equals(events.event, 'a_different_event'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$browser'), ''), 'null'), '^"|"$', ''), 'Safari'), 0)))
                                                                                                                                                                                                                                                                                                                                                                                                                         GROUP BY events.`$session_id`
                                                                                                                                                                                                                                                                                                                                                                                                                         HAVING hasAll(groupUniqArray(events.event), ['a_different_event']))))
  GROUP BY s.session_id
  HAVING true
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_event_filter_with_properties_materialized
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 2), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-11 13:46:23.000000', 6, 'UTC')), 0), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-25 00:00:00.000000', 6, 'UTC')), 0), ifNull(lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-01 13:46:23.000000', 6, 'UTC')), 0), in(s.session_id,
                                                                                                                                                                                                                                                                                                                                                                                                                        (SELECT events.`$session_id` AS session_id
                                                                                                                                                                                                                                                                                                                                                                                                                         FROM events
                                                                                                                                                                                                                                                                                                                                                                                                                         WHERE and(equals(events.team_id, 2), notEmpty(events.`$session_id`), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-12-11 13:46:23.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), now64(6, 'UTC')), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-12-24 23:58:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2021-01-01 13:46:23.000000', 6, 'UTC')), and(equals(events.event, '$pageview'), ifNull(equals(nullIf(nullIf(events.`mat_$browser`, ''), 'null'), 'Chrome'), 0)))
                                                                                                                                                                                                                                                                                                                                                                                                                         GROUP BY events.`$session_id`
                                                                                                                                                                                                                                                                                                                                                                                                                         HAVING hasAll(groupUniqArray(events.event), ['$pageview']))))
  GROUP BY s.session_id
  HAVING true
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_event_filter_with_properties_materialized.1
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 2), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-11 13:46:23.000000', 6, 'UTC')), 0), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-25 00:00:00.000000', 6, 'UTC')), 0), ifNull(lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-01 13:46:23.000000', 6, 'UTC')), 0), in(s.session_id,
                                                                                                                                                                                                                                                                                                                                                                                                                        (SELECT events.`$session_id` AS session_id
                                                                                                                                                                                                                                                                                                                                                                                                                         FROM events
                                                                                                                                                                                                                                                                                                                                                                                                                         WHERE and(equals(events.team_id, 2), notEmpty(events.`$session_id`), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-12-11 13:46:23.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), now64(6, 'UTC')), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-12-24 23:58:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2021-01-01 13:46:23.000000', 6, 'UTC')), and(equals(events.event, '$pageview'), ifNull(equals(nullIf(nullIf(events.`mat_$browser`, ''), 'null'), 'Firefox'), 0)))
                                                                                                                                                                                                                                                                                                                                                                                                                         GROUP BY events.`$session_id`
                                                                                                                                                                                                                                                                                                                                                                                                                         HAVING hasAll(groupUniqArray(events.event), ['$pageview']))))
  GROUP BY s.session_id
  HAVING true
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_event_filter_with_properties_materialized.2
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 2), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-11 13:46:23.000000', 6, 'UTC')), 0), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-25 00:00:00.000000', 6, 'UTC')), 0), ifNull(lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-01 13:46:23.000000', 6, 'UTC')), 0), in(s.session_id,
                                                                                                                                                                                                                                                                                                                                                                                                                        (SELECT events.`$session_id` AS session_id
                                                                                                                                                                                                                                                                                                                                                                                                                         FROM events
                                                                                                                                                                                                                                                                                                                                                                                                                         WHERE and(equals(events.team_id, 2), notEmpty(events.`$session_id`), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-12-11 13:46:23.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), now64(6, 'UTC')), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-12-24 23:58:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2021-01-01 13:46:23.000000', 6, 'UTC')), and(equals(events.event, 'a_different_event'), ifNull(equals(nullIf(nullIf(events.`mat_$browser`, ''), 'null'), 'Chrome'), 0)))
                                                                                                                                                                                                                                                                                                                                                                                                                         GROUP BY events.`$session_id`
                                                                                                                                                                                                                                                                                                                                                                                                                         HAVING hasAll(groupUniqArray(events.event), ['a_different_event']))))
  GROUP BY s.session_id
  HAVING true
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_event_filter_with_properties_materialized.3
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 2), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-11 13:46:23.000000', 6, 'UTC')), 0), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-25 00:00:00.000000', 6, 'UTC')), 0), ifNull(lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-01 13:46:23.000000', 6, 'UTC')), 0), in(s.session_id,
                                                                                                                                                                                                                                                                                                                                                                                                                        (SELECT events.`$session_id` AS session_id
                                                                                                                                                                                                                                                                                                                                                                                                                         FROM events
                                                                                                                                                                                                                                                                                                                                                                                                                         WHERE and(equals(events.team_id, 2), notEmpty(events.`$session_id`), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-12-11 13:46:23.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), now64(6, 'UTC')), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-12-24 23:58:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2021-01-01 13:46:23.000000', 6, 'UTC')), and(equals(events.event, 'a_different_event'), ifNull(equals(nullIf(nullIf(events.`mat_$browser`, ''), 'null'), 'Safari'), 0)))
                                                                                                                                                                                                                                                                                                                                                                                                                         GROUP BY events.`$session_id`
                                                                                                                                                                                                                                                                                                                                                                                                                         HAVING hasAll(groupUniqArray(events.event), ['a_different_event']))))
  GROUP BY s.session_id
  HAVING true
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_event_filter_with_test_accounts_excluded
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 2), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-31 20:00:00.000000', 6, 'UTC')), 0), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-14 00:00:00.000000', 6, 'UTC')), 0), ifNull(lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-21 20:00:00.000000', 6, 'UTC')), 0), and(in(s.session_id,
                                                                                                                                                                                                                                                                                                                                                                                                                            (SELECT events.`$session_id` AS session_id
                                                                                                                                                                                                                                                                                                                                                                                                                             FROM events
                                                                                                                                                                                                                                                                                                                                                                                                                             INNER JOIN
                                                                                                                                                                                                                                                                                                                                                                                                                               (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS events__pdi___person_id, argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id, person_distinct_id2.distinct_id AS distinct_id
                                                                                                                                                                                                                                                                                                                                                                                                                                FROM person_distinct_id2
                                                                                                                                                                                                                                                                                                                                                                                                                                WHERE equals(person_distinct_id2.team_id, 2)
                                                                                                                                                                                                                                                                                                                                                                                                                                GROUP BY person_distinct_id2.distinct_id
                                                                                                                                                                                                                                                                                                                                                                                                                                HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS events__pdi ON equals(events.distinct_id, events__pdi.distinct_id)
                                                                                                                                                                                                                                                                                                                                                                                                                             LEFT JOIN
                                                                                                                                                                                                                                                                                                                                                                                                                               (SELECT person.id AS id, replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, 'email'), ''), 'null'), '^"|"$', '') AS properties___email
                                                                                                                                                                                                                                                                                                                                                                                                                                FROM person
                                                                                                                                                                                                                                                                                                                                                                                                                                WHERE and(equals(person.team_id, 2), ifNull(in(tuple(person.id, person.version),
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 (SELECT person.id AS id, max(person.version) AS version
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  FROM person
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  WHERE equals(person.team_id, 2)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  GROUP BY person.id
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  HAVING and(ifNull(equals(argMax(person.is_deleted, person.version), 0), 0), ifNull(less(argMax(person.created_at, person.version), plus(now64(6, 'UTC'), toIntervalDay(1))), 0)))), 0)) SETTINGS optimize_aggregation_in_order=1) AS events__pdi__person ON equals(events__pdi.events__pdi___person_id, events__pdi__person.id)
                                                                                                                                                                                                                                                                                                                                                                                                                             WHERE and(equals(events.team_id, 2), notEmpty(events.`$session_id`), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-12-31 20:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), now64(6, 'UTC')), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2021-01-13 23:58:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2021-01-21 20:00:00.000000', 6, 'UTC')), and(equals(events.event, '$pageview'), true), and(ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, 'is_internal_user'), ''), 'null'), '^"|"$', ''), 'false'), 0), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$browser'), ''), 'null'), '^"|"$', ''), 'Chrome'), 0)), ifNull(notILike(events__pdi__person.properties___email, '%@posthog.com%'), 1))
                                                                                                                                                                                                                                                                                                                                                                                                                             GROUP BY events.`$session_id`
                                                                                                                                                                                                                                                                                                                                                                                                                             HAVING hasAll(groupUniqArray(events.event), ['$pageview']))), in(s.distinct_id,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                (SELECT person_distinct_ids.distinct_id AS distinct_id
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 FROM
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_distinct_ids___person_id, argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id, person_distinct_id2.distinct_id AS distinct_id
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    FROM person_distinct_id2
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    WHERE equals(person_distinct_id2.team_id, 2)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    GROUP BY person_distinct_id2.distinct_id
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS person_distinct_ids
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 LEFT JOIN
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   (SELECT person.id AS id, replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, 'email'), ''), 'null'), '^"|"$', '') AS properties___email
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    FROM person
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    WHERE and(equals(person.team_id, 2), ifNull(in(tuple(person.id, person.version),
person.id AS id, max(person.version) AS version
person
equals(person.team_id, 2)
person.id
and(ifNull(equals(argMax(person.is_deleted, person.version), 0), 0), ifNull(less(argMax(person.created_at, person.version), plus(now64(6, 'UTC'), toIntervalDay(1))), 0)))), 0)) SETTINGS optimize_aggregation_in_order=1) AS person_distinct_ids__person ON equals(person_distinct_ids.person_distinct_ids___person_id, person_distinct_ids__person.id)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 WHERE ifNull(notILike(person_distinct_ids__person.properties___email, '%@posthog.com%'), 1)))))
  GROUP BY s.session_id
  HAVING true
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_event_filter_with_test_accounts_excluded.1
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 2), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-31 20:00:00.000000', 6, 'UTC')), 0), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-14 00:00:00.000000', 6, 'UTC')), 0), ifNull(lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-21 20:00:00.000000', 6, 'UTC')), 0), in(s.session_id,
                                                                                                                                                                                                                                                                                                                                                                                                                        (SELECT events.`$session_id` AS session_id
                                                                                                                                                                                                                                                                                                                                                                                                                         FROM events
                                                                                                                                                                                                                                                                                                                                                                                                                         WHERE and(equals(events.team_id, 2), notEmpty(events.`$session_id`), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-12-31 20:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), now64(6, 'UTC')), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2021-01-13 23:58:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2021-01-21 20:00:00.000000', 6, 'UTC')), and(equals(events.event, '$pageview'), true))
                                                                                                                                                                                                                                                                                                                                                                                                                         GROUP BY events.`$session_id`
                                                                                                                                                                                                                                                                                                                                                                                                                         HAVING hasAll(groupUniqArray(events.event), ['$pageview']))))
  GROUP BY s.session_id
  HAVING true
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_event_filter_with_test_accounts_excluded_materialized
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 2), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-31 20:00:00.000000', 6, 'UTC')), 0), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-14 00:00:00.000000', 6, 'UTC')), 0), ifNull(lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-21 20:00:00.000000', 6, 'UTC')), 0), and(in(s.session_id,
                                                                                                                                                                                                                                                                                                                                                                                                                            (SELECT events.`$session_id` AS session_id
                                                                                                                                                                                                                                                                                                                                                                                                                             FROM events
                                                                                                                                                                                                                                                                                                                                                                                                                             INNER JOIN
                                                                                                                                                                                                                                                                                                                                                                                                                               (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS events__pdi___person_id, argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id, person_distinct_id2.distinct_id AS distinct_id
                                                                                                                                                                                                                                                                                                                                                                                                                                FROM person_distinct_id2
                                                                                                                                                                                                                                                                                                                                                                                                                                WHERE equals(person_distinct_id2.team_id, 2)
                                                                                                                                                                                                                                                                                                                                                                                                                                GROUP BY person_distinct_id2.distinct_id
                                                                                                                                                                                                                                                                                                                                                                                                                                HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS events__pdi ON equals(events.distinct_id, events__pdi.distinct_id)
                                                                                                                                                                                                                                                                                                                                                                                                                             LEFT JOIN
                                                                                                                                                                                                                                                                                                                                                                                                                               (SELECT person.id AS id, nullIf(nullIf(person.pmat_email, ''), 'null') AS properties___email
                                                                                                                                                                                                                                                                                                                                                                                                                                FROM person
                                                                                                                                                                                                                                                                                                                                                                                                                                WHERE and(equals(person.team_id, 2), ifNull(in(tuple(person.id, person.version),
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 (SELECT person.id AS id, max(person.version) AS version
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  FROM person
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  WHERE equals(person.team_id, 2)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  GROUP BY person.id
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  HAVING and(ifNull(equals(argMax(person.is_deleted, person.version), 0), 0), ifNull(less(argMax(person.created_at, person.version), plus(now64(6, 'UTC'), toIntervalDay(1))), 0)))), 0)) SETTINGS optimize_aggregation_in_order=1) AS events__pdi__person ON equals(events__pdi.events__pdi___person_id, events__pdi__person.id)
                                                                                                                                                                                                                                                                                                                                                                                                                             WHERE and(equals(events.team_id, 2), notEmpty(events.`$session_id`), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-12-31 20:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), now64(6, 'UTC')), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2021-01-13 23:58:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2021-01-21 20:00:00.000000', 6, 'UTC')), and(equals(events.event, '$pageview'), true), and(ifNull(equals(nullIf(nullIf(events.mat_is_internal_user, ''), 'null'), 'false'), 0), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$browser'), ''), 'null'), '^"|"$', ''), 'Chrome'), 0)), ifNull(notILike(events__pdi__person.properties___email, '%@posthog.com%'), 1))
                                                                                                                                                                                                                                                                                                                                                                                                                             GROUP BY events.`$session_id`
                                                                                                                                                                                                                                                                                                                                                                                                                             HAVING hasAll(groupUniqArray(events.event), ['$pageview']))), in(s.distinct_id,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                (SELECT person_distinct_ids.distinct_id AS distinct_id
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 FROM
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_distinct_ids___person_id, argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id, person_distinct_id2.distinct_id AS distinct_id
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    FROM person_distinct_id2
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    WHERE equals(person_distinct_id2.team_id, 2)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    GROUP BY person_distinct_id2.distinct_id
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS person_distinct_ids
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 LEFT JOIN
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   (SELECT person.id AS id, nullIf(nullIf(person.pmat_email, ''), 'null') AS properties___email
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    FROM person
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    WHERE and(equals(person.team_id, 2), ifNull(in(tuple(person.id, person.version),
person.id AS id, max(person.version) AS version
person
equals(person.team_id, 2)
person.id
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      HAVING and(ifNull(equals(argMax(person.is_deleted, person.version), 0), 0), ifNull(less(argMax(person.created_at, person.version), plus(now64(6, 'UTC'), toIntervalDay(1))), 0)))), 0)) SETTINGS optimize_aggregation_in_order=1) AS person_distinct_ids__person ON equals(person_distinct_ids.person_distinct_ids___person_id, person_distinct_ids__person.id)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 WHERE ifNull(notILike(person_distinct_ids__person.properties___email, '%@posthog.com%'), 1)))))
  GROUP BY s.session_id
  HAVING true
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_event_filter_with_test_accounts_excluded_materialized.1
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 2), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-31 20:00:00.000000', 6, 'UTC')), 0), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-14 00:00:00.000000', 6, 'UTC')), 0), ifNull(lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-21 20:00:00.000000', 6, 'UTC')), 0), in(s.session_id,
                                                                                                                                                                                                                                                                                                                                                                                                                        (SELECT events.`$session_id` AS session_id
                                                                                                                                                                                                                                                                                                                                                                                                                         FROM events
                                                                                                                                                                                                                                                                                                                                                                                                                         WHERE and(equals(events.team_id, 2), notEmpty(events.`$session_id`), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-12-31 20:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), now64(6, 'UTC')), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2021-01-13 23:58:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2021-01-21 20:00:00.000000', 6, 'UTC')), and(equals(events.event, '$pageview'), true))
                                                                                                                                                                                                                                                                                                                                                                                                                         GROUP BY events.`$session_id`
                                                                                                                                                                                                                                                                                                                                                                                                                         HAVING hasAll(groupUniqArray(events.event), ['$pageview']))))
  GROUP BY s.session_id
  HAVING true
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_event_filter_with_two_events_and_multiple_teams
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 2), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-31 20:00:00.000000', 6, 'UTC')), 0), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-14 00:00:00.000000', 6, 'UTC')), 0), ifNull(lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-21 20:00:00.000000', 6, 'UTC')), 0), in(s.session_id,
                                                                                                                                                                                                                                                                                                                                                                                                                        (SELECT events.`$session_id` AS session_id
                                                                                                                                                                                                                                                                                                                                                                                                                         FROM events
                                                                                                                                                                                                                                                                                                                                                                                                                         WHERE and(equals(events.team_id, 2), notEmpty(events.`$session_id`), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-12-31 20:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), now64(6, 'UTC')), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2021-01-13 23:58:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2021-01-21 20:00:00.000000', 6, 'UTC')), or(and(equals(events.event, '$pageview'), true), and(equals(events.event, '$pageleave'), true)))
                                                                                                                                                                                                                                                                                                                                                                                                                         GROUP BY events.`$session_id`
                                                                                                                                                                                                                                                                                                                                                                                                                         HAVING hasAll(groupUniqArray(events.event), ['$pageleave', '$pageview']))))
  GROUP BY s.session_id
  HAVING true
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_filter_for_recordings_by_console_text
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 2), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-31 20:00:00.000000', 6, 'UTC')), 0), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-14 00:00:00.000000', 6, 'UTC')), 0), ifNull(lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-21 20:00:00.000000', 6, 'UTC')), 0), in(s.session_id,
                                                                                                                                                                                                                                                                                                                                                                                                                        (SELECT console_logs_log_entries.log_source_id AS log_source_id
                                                                                                                                                                                                                                                                                                                                                                                                                         FROM
                                                                                                                                                                                                                                                                                                                                                                                                                           (SELECT log_entries.log_source_id AS log_source_id, log_entries.level AS level, log_entries.message AS message
                                                                                                                                                                                                                                                                                                                                                                                                                            FROM log_entries
                                                                                                                                                                                                                                                                                                                                                                                                                            WHERE and(equals(log_entries.team_id, 2), equals(log_entries.log_source, 'session_replay'))) AS console_logs_log_entries
                                                                                                                                                                                                                                                                                                                                                                                                                         WHERE and(ifNull(in(console_logs_log_entries.level, ['warn', 'error']), 0), ifNull(greater(positionCaseInsensitive(console_logs_log_entries.message, 'message 4'), 0), 0)))))
  GROUP BY s.session_id
  HAVING true
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_filter_for_recordings_by_console_text.1
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 2), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-31 20:00:00.000000', 6, 'UTC')), 0), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-14 00:00:00.000000', 6, 'UTC')), 0), ifNull(lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-21 20:00:00.000000', 6, 'UTC')), 0), in(s.session_id,
                                                                                                                                                                                                                                                                                                                                                                                                                        (SELECT console_logs_log_entries.log_source_id AS log_source_id
                                                                                                                                                                                                                                                                                                                                                                                                                         FROM
                                                                                                                                                                                                                                                                                                                                                                                                                           (SELECT log_entries.log_source_id AS log_source_id, log_entries.level AS level, log_entries.message AS message
                                                                                                                                                                                                                                                                                                                                                                                                                            FROM log_entries
                                                                                                                                                                                                                                                                                                                                                                                                                            WHERE and(equals(log_entries.team_id, 2), equals(log_entries.log_source, 'session_replay'))) AS console_logs_log_entries
                                                                                                                                                                                                                                                                                                                                                                                                                         WHERE and(ifNull(in(console_logs_log_entries.level, ['warn', 'error']), 0), ifNull(greater(positionCaseInsensitive(console_logs_log_entries.message, 'message 5'), 0), 0)))))
  GROUP BY s.session_id
  HAVING true
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_filter_for_recordings_by_console_text.2
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 2), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-31 20:00:00.000000', 6, 'UTC')), 0), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-14 00:00:00.000000', 6, 'UTC')), 0), ifNull(lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-21 20:00:00.000000', 6, 'UTC')), 0), in(s.session_id,
                                                                                                                                                                                                                                                                                                                                                                                                                        (SELECT console_logs_log_entries.log_source_id AS log_source_id
                                                                                                                                                                                                                                                                                                                                                                                                                         FROM
                                                                                                                                                                                                                                                                                                                                                                                                                           (SELECT log_entries.log_source_id AS log_source_id, log_entries.level AS level, log_entries.message AS message
                                                                                                                                                                                                                                                                                                                                                                                                                            FROM log_entries
                                                                                                                                                                                                                                                                                                                                                                                                                            WHERE and(equals(log_entries.team_id, 2), equals(log_entries.log_source, 'session_replay'))) AS console_logs_log_entries
                                                                                                                                                                                                                                                                                                                                                                                                                         WHERE and(ifNull(in(console_logs_log_entries.level, ['warn', 'error']), 0), ifNull(greater(positionCaseInsensitive(console_logs_log_entries.message, 'MESSAGE 5'), 0), 0)))))
  GROUP BY s.session_id
  HAVING true
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_filter_for_recordings_by_console_text.3
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 2), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-31 20:00:00.000000', 6, 'UTC')), 0), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-14 00:00:00.000000', 6, 'UTC')), 0), ifNull(lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-21 20:00:00.000000', 6, 'UTC')), 0), in(s.session_id,
                                                                                                                                                                                                                                                                                                                                                                                                                        (SELECT console_logs_log_entries.log_source_id AS log_source_id
                                                                                                                                                                                                                                                                                                                                                                                                                         FROM
                                                                                                                                                                                                                                                                                                                                                                                                                           (SELECT log_entries.log_source_id AS log_source_id, log_entries.level AS level, log_entries.message AS message
                                                                                                                                                                                                                                                                                                                                                                                                                            FROM log_entries
                                                                                                                                                                                                                                                                                                                                                                                                                            WHERE and(equals(log_entries.team_id, 2), equals(log_entries.log_source, 'session_replay'))) AS console_logs_log_entries
                                                                                                                                                                                                                                                                                                                                                                                                                         WHERE and(ifNull(in(console_logs_log_entries.level, ['info']), 0), ifNull(greater(positionCaseInsensitive(console_logs_log_entries.message, 'message 5'), 0), 0)))))
  GROUP BY s.session_id
  HAVING true
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_filter_for_recordings_by_snapshot_source
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 2), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-11 13:46:23.000000', 6, 'UTC')), 0), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-25 00:00:00.000000', 6, 'UTC')), 0), ifNull(lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-01 13:46:23.000000', 6, 'UTC')), 0))
  GROUP BY s.session_id
  HAVING ifNull(in(argMinMerge(s.snapshot_source), ['web']), 0)
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_filter_for_recordings_by_snapshot_source.1
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 2), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-11 13:46:23.000000', 6, 'UTC')), 0), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-25 00:00:00.000000', 6, 'UTC')), 0), ifNull(lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-01 13:46:23.000000', 6, 'UTC')), 0))
  GROUP BY s.session_id
  HAVING ifNull(in(argMinMerge(s.snapshot_source), ['mobile']), 0)
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_filter_for_recordings_with_console_errors
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 2), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-31 20:00:00.000000', 6, 'UTC')), 0), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-14 00:00:00.000000', 6, 'UTC')), 0), ifNull(lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-21 20:00:00.000000', 6, 'UTC')), 0), in(s.session_id,
                                                                                                                                                                                                                                                                                                                                                                                                                        (SELECT console_logs_log_entries.log_source_id AS log_source_id
                                                                                                                                                                                                                                                                                                                                                                                                                         FROM
                                                                                                                                                                                                                                                                                                                                                                                                                           (SELECT log_entries.log_source_id AS log_source_id, log_entries.level AS level
                                                                                                                                                                                                                                                                                                                                                                                                                            FROM log_entries
                                                                                                                                                                                                                                                                                                                                                                                                                            WHERE and(equals(log_entries.team_id, 2), equals(log_entries.log_source, 'session_replay'))) AS console_logs_log_entries
                                                                                                                                                                                                                                                                                                                                                                                                                         WHERE ifNull(in(console_logs_log_entries.level, ['error']), 0))))
  GROUP BY s.session_id
  HAVING true
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_filter_for_recordings_with_console_errors.1
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 2), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-31 20:00:00.000000', 6, 'UTC')), 0), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-14 00:00:00.000000', 6, 'UTC')), 0), ifNull(lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-21 20:00:00.000000', 6, 'UTC')), 0), in(s.session_id,
                                                                                                                                                                                                                                                                                                                                                                                                                        (SELECT console_logs_log_entries.log_source_id AS log_source_id
                                                                                                                                                                                                                                                                                                                                                                                                                         FROM
                                                                                                                                                                                                                                                                                                                                                                                                                           (SELECT log_entries.log_source_id AS log_source_id, log_entries.level AS level
                                                                                                                                                                                                                                                                                                                                                                                                                            FROM log_entries
                                                                                                                                                                                                                                                                                                                                                                                                                            WHERE and(equals(log_entries.team_id, 2), equals(log_entries.log_source, 'session_replay'))) AS console_logs_log_entries
                                                                                                                                                                                                                                                                                                                                                                                                                         WHERE ifNull(in(console_logs_log_entries.level, ['info']), 0))))
  GROUP BY s.session_id
  HAVING true
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_filter_for_recordings_with_console_logs
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 2), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-31 20:00:00.000000', 6, 'UTC')), 0), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-14 00:00:00.000000', 6, 'UTC')), 0), ifNull(lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-21 20:00:00.000000', 6, 'UTC')), 0), in(s.session_id,
                                                                                                                                                                                                                                                                                                                                                                                                                        (SELECT console_logs_log_entries.log_source_id AS log_source_id
                                                                                                                                                                                                                                                                                                                                                                                                                         FROM
                                                                                                                                                                                                                                                                                                                                                                                                                           (SELECT log_entries.log_source_id AS log_source_id, log_entries.level AS level
                                                                                                                                                                                                                                                                                                                                                                                                                            FROM log_entries
                                                                                                                                                                                                                                                                                                                                                                                                                            WHERE and(equals(log_entries.team_id, 2), equals(log_entries.log_source, 'session_replay'))) AS console_logs_log_entries
                                                                                                                                                                                                                                                                                                                                                                                                                         WHERE ifNull(in(console_logs_log_entries.level, ['info']), 0))))
  GROUP BY s.session_id
  HAVING true
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_filter_for_recordings_with_console_logs.1
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 2), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-31 20:00:00.000000', 6, 'UTC')), 0), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-14 00:00:00.000000', 6, 'UTC')), 0), ifNull(lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-21 20:00:00.000000', 6, 'UTC')), 0), in(s.session_id,
                                                                                                                                                                                                                                                                                                                                                                                                                        (SELECT console_logs_log_entries.log_source_id AS log_source_id
                                                                                                                                                                                                                                                                                                                                                                                                                         FROM
                                                                                                                                                                                                                                                                                                                                                                                                                           (SELECT log_entries.log_source_id AS log_source_id, log_entries.level AS level
                                                                                                                                                                                                                                                                                                                                                                                                                            FROM log_entries
                                                                                                                                                                                                                                                                                                                                                                                                                            WHERE and(equals(log_entries.team_id, 2), equals(log_entries.log_source, 'session_replay'))) AS console_logs_log_entries
                                                                                                                                                                                                                                                                                                                                                                                                                         WHERE ifNull(in(console_logs_log_entries.level, ['warn']), 0))))
  GROUP BY s.session_id
  HAVING true
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_filter_for_recordings_with_console_warns
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 2), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-31 20:00:00.000000', 6, 'UTC')), 0), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-14 00:00:00.000000', 6, 'UTC')), 0), ifNull(lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-21 20:00:00.000000', 6, 'UTC')), 0), in(s.session_id,
                                                                                                                                                                                                                                                                                                                                                                                                                        (SELECT console_logs_log_entries.log_source_id AS log_source_id
                                                                                                                                                                                                                                                                                                                                                                                                                         FROM
                                                                                                                                                                                                                                                                                                                                                                                                                           (SELECT log_entries.log_source_id AS log_source_id, log_entries.level AS level
                                                                                                                                                                                                                                                                                                                                                                                                                            FROM log_entries
                                                                                                                                                                                                                                                                                                                                                                                                                            WHERE and(equals(log_entries.team_id, 2), equals(log_entries.log_source, 'session_replay'))) AS console_logs_log_entries
                                                                                                                                                                                                                                                                                                                                                                                                                         WHERE ifNull(in(console_logs_log_entries.level, ['warn']), 0))))
  GROUP BY s.session_id
  HAVING true
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_filter_for_recordings_with_console_warns.1
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 2), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-31 20:00:00.000000', 6, 'UTC')), 0), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-14 00:00:00.000000', 6, 'UTC')), 0), ifNull(lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-21 20:00:00.000000', 6, 'UTC')), 0), in(s.session_id,
                                                                                                                                                                                                                                                                                                                                                                                                                        (SELECT console_logs_log_entries.log_source_id AS log_source_id
                                                                                                                                                                                                                                                                                                                                                                                                                         FROM
                                                                                                                                                                                                                                                                                                                                                                                                                           (SELECT log_entries.log_source_id AS log_source_id, log_entries.level AS level
                                                                                                                                                                                                                                                                                                                                                                                                                            FROM log_entries
                                                                                                                                                                                                                                                                                                                                                                                                                            WHERE and(equals(log_entries.team_id, 2), equals(log_entries.log_source, 'session_replay'))) AS console_logs_log_entries
                                                                                                                                                                                                                                                                                                                                                                                                                         WHERE ifNull(in(console_logs_log_entries.level, ['info']), 0))))
  GROUP BY s.session_id
  HAVING true
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_filter_for_recordings_with_mixed_console_counts
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 2), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-31 20:00:00.000000', 6, 'UTC')), 0), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-14 00:00:00.000000', 6, 'UTC')), 0), ifNull(lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-21 20:00:00.000000', 6, 'UTC')), 0), in(s.session_id,
                                                                                                                                                                                                                                                                                                                                                                                                                        (SELECT console_logs_log_entries.log_source_id AS log_source_id
                                                                                                                                                                                                                                                                                                                                                                                                                         FROM
                                                                                                                                                                                                                                                                                                                                                                                                                           (SELECT log_entries.log_source_id AS log_source_id, log_entries.level AS level
                                                                                                                                                                                                                                                                                                                                                                                                                            FROM log_entries
                                                                                                                                                                                                                                                                                                                                                                                                                            WHERE and(equals(log_entries.team_id, 2), equals(log_entries.log_source, 'session_replay'))) AS console_logs_log_entries
                                                                                                                                                                                                                                                                                                                                                                                                                         WHERE ifNull(in(console_logs_log_entries.level, ['warn', 'error']), 0))))
  GROUP BY s.session_id
  HAVING true
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_filter_for_recordings_with_mixed_console_counts.1
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 2), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-31 20:00:00.000000', 6, 'UTC')), 0), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-14 00:00:00.000000', 6, 'UTC')), 0), ifNull(lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-21 20:00:00.000000', 6, 'UTC')), 0), in(s.session_id,
                                                                                                                                                                                                                                                                                                                                                                                                                        (SELECT console_logs_log_entries.log_source_id AS log_source_id
                                                                                                                                                                                                                                                                                                                                                                                                                         FROM
                                                                                                                                                                                                                                                                                                                                                                                                                           (SELECT log_entries.log_source_id AS log_source_id, log_entries.level AS level
                                                                                                                                                                                                                                                                                                                                                                                                                            FROM log_entries
                                                                                                                                                                                                                                                                                                                                                                                                                            WHERE and(equals(log_entries.team_id, 2), equals(log_entries.log_source, 'session_replay'))) AS console_logs_log_entries
                                                                                                                                                                                                                                                                                                                                                                                                                         WHERE ifNull(in(console_logs_log_entries.level, ['info']), 0))))
  GROUP BY s.session_id
  HAVING true
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_filter_on_session_ids
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 2),
            ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-11 13:46:23.000000', 6, 'UTC')), 0),
            in(s.session_id,
               ['00000000-0000-0000-0000-000000000000', '00000000-0000-0000-0000-000000000001' /* ... */],
               ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-25 00:00:00.000000', 6, 'UTC')), 0),
               ifNull(lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-01 13:46:23.000000', 6, 'UTC')), 0))
  GROUP BY s.session_id
  HAVING true
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_filter_on_session_ids.1
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 2),
            ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-11 13:46:23.000000', 6, 'UTC')), 0),
            in(s.session_id,
               ['00000000-0000-0000-0000-000000000000', '00000000-0000-0000-0000-000000000001' /* ... */],
               ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-25 00:00:00.000000', 6, 'UTC')), 0),
               ifNull(lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-01 13:46:23.000000', 6, 'UTC')), 0))
  GROUP BY s.session_id
  HAVING true
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_filter_with_cohort_properties
  '''
  
  SELECT count(DISTINCT person_id)
  FROM cohortpeople
  WHERE team_id = 2
    AND cohort_id = 2
    AND version = NULL
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_filter_with_cohort_properties.1
  '''
  /* cohort_calculation: */
  SELECT count(DISTINCT person_id)
  FROM cohortpeople
  WHERE team_id = 2
    AND cohort_id = 2
    AND version = 0
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_filter_with_cohort_properties.2
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count
  FROM session_replay_events AS s
  INNER JOIN
    (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
            person_distinct_id2.distinct_id AS distinct_id
     FROM person_distinct_id2
     WHERE equals(person_distinct_id2.team_id, 2)
     GROUP BY person_distinct_id2.distinct_id
     HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS s__pdi ON equals(s.distinct_id, s__pdi.distinct_id)
  WHERE and(equals(s.team_id, 2), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-07-31 20:00:00.000000', 6, 'UTC')), 0), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-08-14 00:00:00.000000', 6, 'UTC')), 0), ifNull(lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-08-21 20:00:00.000000', 6, 'UTC')), 0), ifNull(in(s__pdi.person_id,
                                                                                                                                                                                                                                                                                                                                                                                                                               (SELECT cohortpeople.person_id AS person_id
                                                                                                                                                                                                                                                                                                                                                                                                                                FROM cohortpeople
                                                                                                                                                                                                                                                                                                                                                                                                                                WHERE and(equals(cohortpeople.team_id, 2), equals(cohortpeople.cohort_id, 2), equals(cohortpeople.version, 0)))), 0))
  GROUP BY s.session_id
  HAVING true
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_filter_with_events_and_cohorts
  '''
  
  SELECT count(DISTINCT person_id)
  FROM cohortpeople
  WHERE team_id = 2
    AND cohort_id = 2
    AND version = NULL
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_filter_with_events_and_cohorts.1
  '''
  /* cohort_calculation: */
  SELECT count(DISTINCT person_id)
  FROM cohortpeople
  WHERE team_id = 2
    AND cohort_id = 2
    AND version = 0
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_filter_with_events_and_cohorts.2
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count
  FROM session_replay_events AS s
  INNER JOIN
    (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
            person_distinct_id2.distinct_id AS distinct_id
     FROM person_distinct_id2
     WHERE equals(person_distinct_id2.team_id, 2)
     GROUP BY person_distinct_id2.distinct_id
     HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS s__pdi ON equals(s.distinct_id, s__pdi.distinct_id)
  WHERE and(equals(s.team_id, 2), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-07-31 20:00:00.000000', 6, 'UTC')), 0), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-08-14 00:00:00.000000', 6, 'UTC')), 0), ifNull(lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-08-21 20:00:00.000000', 6, 'UTC')), 0), and(in(s.session_id,
                                                                                                                                                                                                                                                                                                                                                                                                                            (SELECT events.`$session_id` AS session_id
                                                                                                                                                                                                                                                                                                                                                                                                                             FROM events
                                                                                                                                                                                                                                                                                                                                                                                                                             WHERE and(equals(events.team_id, 2), notEmpty(events.`$session_id`), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2021-07-31 20:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), now64(6, 'UTC')), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2021-08-13 23:58:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2021-08-21 20:00:00.000000', 6, 'UTC')), and(equals(events.event, '$pageview'), true))
                                                                                                                                                                                                                                                                                                                                                                                                                             GROUP BY events.`$session_id`
                                                                                                                                                                                                                                                                                                                                                                                                                             HAVING hasAll(groupUniqArray(events.event), ['$pageview']))), ifNull(in(s__pdi.person_id,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       (SELECT cohortpeople.person_id AS person_id
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        FROM cohortpeople
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        WHERE and(equals(cohortpeople.team_id, 2), equals(cohortpeople.cohort_id, 2), equals(cohortpeople.version, 0)))), 0)))
  GROUP BY s.session_id
  HAVING true
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_filter_with_events_and_cohorts.3
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count
  FROM session_replay_events AS s
  INNER JOIN
    (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
            person_distinct_id2.distinct_id AS distinct_id
     FROM person_distinct_id2
     WHERE equals(person_distinct_id2.team_id, 2)
     GROUP BY person_distinct_id2.distinct_id
     HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS s__pdi ON equals(s.distinct_id, s__pdi.distinct_id)
  WHERE and(equals(s.team_id, 2), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-07-31 20:00:00.000000', 6, 'UTC')), 0), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-08-14 00:00:00.000000', 6, 'UTC')), 0), ifNull(lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-08-21 20:00:00.000000', 6, 'UTC')), 0), and(in(s.session_id,
                                                                                                                                                                                                                                                                                                                                                                                                                            (SELECT events.`$session_id` AS session_id
                                                                                                                                                                                                                                                                                                                                                                                                                             FROM events
                                                                                                                                                                                                                                                                                                                                                                                                                             WHERE and(equals(events.team_id, 2), notEmpty(events.`$session_id`), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2021-07-31 20:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), now64(6, 'UTC')), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2021-08-13 23:58:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2021-08-21 20:00:00.000000', 6, 'UTC')), and(equals(events.event, 'custom_event'), true))
                                                                                                                                                                                                                                                                                                                                                                                                                             GROUP BY events.`$session_id`
                                                                                                                                                                                                                                                                                                                                                                                                                             HAVING hasAll(groupUniqArray(events.event), ['custom_event']))), ifNull(in(s__pdi.person_id,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          (SELECT cohortpeople.person_id AS person_id
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           FROM cohortpeople
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           WHERE and(equals(cohortpeople.team_id, 2), equals(cohortpeople.cohort_id, 2), equals(cohortpeople.version, 0)))), 0)))
  GROUP BY s.session_id
  HAVING true
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_filter_with_person_properties_exact
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 2), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-11 13:46:23.000000', 6, 'UTC')), 0), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-25 00:00:00.000000', 6, 'UTC')), 0), ifNull(lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-01 13:46:23.000000', 6, 'UTC')), 0), in(s.distinct_id,
                                                                                                                                                                                                                                                                                                                                                                                                                        (SELECT person_distinct_ids.distinct_id AS distinct_id
                                                                                                                                                                                                                                                                                                                                                                                                                         FROM
                                                                                                                                                                                                                                                                                                                                                                                                                           (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_distinct_ids___person_id, argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id, person_distinct_id2.distinct_id AS distinct_id
                                                                                                                                                                                                                                                                                                                                                                                                                            FROM person_distinct_id2
                                                                                                                                                                                                                                                                                                                                                                                                                            WHERE equals(person_distinct_id2.team_id, 2)
                                                                                                                                                                                                                                                                                                                                                                                                                            GROUP BY person_distinct_id2.distinct_id
                                                                                                                                                                                                                                                                                                                                                                                                                            HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS person_distinct_ids
                                                                                                                                                                                                                                                                                                                                                                                                                         LEFT JOIN
                                                                                                                                                                                                                                                                                                                                                                                                                           (SELECT person.id AS id, replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, 'email'), ''), 'null'), '^"|"$', '') AS properties___email
                                                                                                                                                                                                                                                                                                                                                                                                                            FROM person
                                                                                                                                                                                                                                                                                                                                                                                                                            WHERE and(equals(person.team_id, 2), ifNull(in(tuple(person.id, person.version),
                                                                                                                                                                                                                                                                                                                                                                                                                                                                             (SELECT person.id AS id, max(person.version) AS version
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              FROM person
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              WHERE equals(person.team_id, 2)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              GROUP BY person.id
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              HAVING and(ifNull(equals(argMax(person.is_deleted, person.version), 0), 0), ifNull(less(argMax(person.created_at, person.version), plus(now64(6, 'UTC'), toIntervalDay(1))), 0)))), 0)) SETTINGS optimize_aggregation_in_order=1) AS person_distinct_ids__person ON equals(person_distinct_ids.person_distinct_ids___person_id, person_distinct_ids__person.id)
                                                                                                                                                                                                                                                                                                                                                                                                                         WHERE ifNull(equals(person_distinct_ids__person.properties___email, 'bla@gmail.com'), 0))))
  GROUP BY s.session_id
  HAVING true
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_filter_with_person_properties_not_contains
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 2), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-11 13:46:23.000000', 6, 'UTC')), 0), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-25 00:00:00.000000', 6, 'UTC')), 0), ifNull(lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-01 13:46:23.000000', 6, 'UTC')), 0), in(s.distinct_id,
                                                                                                                                                                                                                                                                                                                                                                                                                        (SELECT person_distinct_ids.distinct_id AS distinct_id
                                                                                                                                                                                                                                                                                                                                                                                                                         FROM
                                                                                                                                                                                                                                                                                                                                                                                                                           (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_distinct_ids___person_id, argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id, person_distinct_id2.distinct_id AS distinct_id
                                                                                                                                                                                                                                                                                                                                                                                                                            FROM person_distinct_id2
                                                                                                                                                                                                                                                                                                                                                                                                                            WHERE equals(person_distinct_id2.team_id, 2)
                                                                                                                                                                                                                                                                                                                                                                                                                            GROUP BY person_distinct_id2.distinct_id
                                                                                                                                                                                                                                                                                                                                                                                                                            HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS person_distinct_ids
                                                                                                                                                                                                                                                                                                                                                                                                                         LEFT JOIN
                                                                                                                                                                                                                                                                                                                                                                                                                           (SELECT person.id AS id, replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, 'email'), ''), 'null'), '^"|"$', '') AS properties___email
                                                                                                                                                                                                                                                                                                                                                                                                                            FROM person
                                                                                                                                                                                                                                                                                                                                                                                                                            WHERE and(equals(person.team_id, 2), ifNull(in(tuple(person.id, person.version),
                                                                                                                                                                                                                                                                                                                                                                                                                                                                             (SELECT person.id AS id, max(person.version) AS version
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              FROM person
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              WHERE equals(person.team_id, 2)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              GROUP BY person.id
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              HAVING and(ifNull(equals(argMax(person.is_deleted, person.version), 0), 0), ifNull(less(argMax(person.created_at, person.version), plus(now64(6, 'UTC'), toIntervalDay(1))), 0)))), 0)) SETTINGS optimize_aggregation_in_order=1) AS person_distinct_ids__person ON equals(person_distinct_ids.person_distinct_ids___person_id, person_distinct_ids__person.id)
                                                                                                                                                                                                                                                                                                                                                                                                                         WHERE ifNull(notILike(person_distinct_ids__person.properties___email, '%gmail.com%'), 1))))
  GROUP BY s.session_id
  HAVING true
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_multiple_event_filters
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 2), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-11 13:46:23.000000', 6, 'UTC')), 0), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-25 00:00:00.000000', 6, 'UTC')), 0), ifNull(lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-01 13:46:23.000000', 6, 'UTC')), 0), in(s.session_id,
                                                                                                                                                                                                                                                                                                                                                                                                                        (SELECT events.`$session_id` AS session_id
                                                                                                                                                                                                                                                                                                                                                                                                                         FROM events
                                                                                                                                                                                                                                                                                                                                                                                                                         WHERE and(equals(events.team_id, 2), notEmpty(events.`$session_id`), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-12-11 13:46:23.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), now64(6, 'UTC')), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-12-24 23:58:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2021-01-01 13:46:23.000000', 6, 'UTC')), or(and(equals(events.event, '$pageview'), true), and(equals(events.event, 'new-event'), true)))
                                                                                                                                                                                                                                                                                                                                                                                                                         GROUP BY events.`$session_id`
                                                                                                                                                                                                                                                                                                                                                                                                                         HAVING hasAll(groupUniqArray(events.event), ['$pageview', 'new-event']))))
  GROUP BY s.session_id
  HAVING true
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_multiple_event_filters.1
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 2), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-11 13:46:23.000000', 6, 'UTC')), 0), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-25 00:00:00.000000', 6, 'UTC')), 0), ifNull(lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-01 13:46:23.000000', 6, 'UTC')), 0), in(s.session_id,
                                                                                                                                                                                                                                                                                                                                                                                                                        (SELECT events.`$session_id` AS session_id
                                                                                                                                                                                                                                                                                                                                                                                                                         FROM events
                                                                                                                                                                                                                                                                                                                                                                                                                         WHERE and(equals(events.team_id, 2), notEmpty(events.`$session_id`), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-12-11 13:46:23.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), now64(6, 'UTC')), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-12-24 23:58:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2021-01-01 13:46:23.000000', 6, 'UTC')), or(and(equals(events.event, '$pageview'), true), and(equals(events.event, 'new-event2'), true)))
                                                                                                                                                                                                                                                                                                                                                                                                                         GROUP BY events.`$session_id`
                                                                                                                                                                                                                                                                                                                                                                                                                         HAVING hasAll(groupUniqArray(events.event), ['$pageview', 'new-event2']))))
  GROUP BY s.session_id
  HAVING true
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_operand_or_event_filters
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 2), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-11 13:46:23.000000', 6, 'UTC')), 0), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-25 00:00:00.000000', 6, 'UTC')), 0), ifNull(lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-01 13:46:23.000000', 6, 'UTC')), 0), in(s.session_id,
                                                                                                                                                                                                                                                                                                                                                                                                                        (SELECT events.`$session_id` AS session_id
                                                                                                                                                                                                                                                                                                                                                                                                                         FROM events
                                                                                                                                                                                                                                                                                                                                                                                                                         WHERE and(equals(events.team_id, 2), notEmpty(events.`$session_id`), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-12-11 13:46:23.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), now64(6, 'UTC')), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-12-24 23:58:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2021-01-01 13:46:23.000000', 6, 'UTC')), and(and(equals(events.event, '$pageview'), true), and(equals(events.event, 'custom_event'), true)))
                                                                                                                                                                                                                                                                                                                                                                                                                         GROUP BY events.`$session_id`
                                                                                                                                                                                                                                                                                                                                                                                                                         HAVING hasAll(groupUniqArray(events.event), ['$pageview', 'custom_event']))))
  GROUP BY s.session_id
  HAVING true
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_operand_or_event_filters.1
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 2), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-11 13:46:23.000000', 6, 'UTC')), 0), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-25 00:00:00.000000', 6, 'UTC')), 0), ifNull(lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-01 13:46:23.000000', 6, 'UTC')), 0), in(s.session_id,
                                                                                                                                                                                                                                                                                                                                                                                                                        (SELECT events.`$session_id` AS session_id
                                                                                                                                                                                                                                                                                                                                                                                                                         FROM events
                                                                                                                                                                                                                                                                                                                                                                                                                         WHERE and(equals(events.team_id, 2), notEmpty(events.`$session_id`), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-12-11 13:46:23.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), now64(6, 'UTC')), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-12-24 23:58:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2021-01-01 13:46:23.000000', 6, 'UTC')), or(and(equals(events.event, '$pageview'), true), and(equals(events.event, 'custom_event'), true)))
                                                                                                                                                                                                                                                                                                                                                                                                                         GROUP BY events.`$session_id`
                                                                                                                                                                                                                                                                                                                                                                                                                         HAVING hasAny(groupUniqArray(events.event), ['$pageview', 'custom_event']))))
  GROUP BY s.session_id
  HAVING true
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_operand_or_filters
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 2), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-11 13:46:23.000000', 6, 'UTC')), 0), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-25 00:00:00.000000', 6, 'UTC')), 0), ifNull(lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-01 13:46:23.000000', 6, 'UTC')), 0), in(s.session_id,
                                                                                                                                                                                                                                                                                                                                                                                                                        (SELECT console_logs_log_entries.log_source_id AS log_source_id
                                                                                                                                                                                                                                                                                                                                                                                                                         FROM
                                                                                                                                                                                                                                                                                                                                                                                                                           (SELECT log_entries.log_source_id AS log_source_id, log_entries.level AS level, log_entries.message AS message
                                                                                                                                                                                                                                                                                                                                                                                                                            FROM log_entries
                                                                                                                                                                                                                                                                                                                                                                                                                            WHERE and(equals(log_entries.team_id, 2), equals(log_entries.log_source, 'session_replay'))) AS console_logs_log_entries
                                                                                                                                                                                                                                                                                                                                                                                                                         WHERE and(ifNull(in(console_logs_log_entries.level, ['warn']), 0), ifNull(greater(positionCaseInsensitive(console_logs_log_entries.message, 'random'), 0), 0)))))
  GROUP BY s.session_id
  HAVING true
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_operand_or_filters.1
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 2), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-11 13:46:23.000000', 6, 'UTC')), 0), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-25 00:00:00.000000', 6, 'UTC')), 0), ifNull(lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-01 13:46:23.000000', 6, 'UTC')), 0), in(s.session_id,
                                                                                                                                                                                                                                                                                                                                                                                                                        (SELECT console_logs_log_entries.log_source_id AS log_source_id
                                                                                                                                                                                                                                                                                                                                                                                                                         FROM
                                                                                                                                                                                                                                                                                                                                                                                                                           (SELECT log_entries.log_source_id AS log_source_id, log_entries.level AS level, log_entries.message AS message
                                                                                                                                                                                                                                                                                                                                                                                                                            FROM log_entries
                                                                                                                                                                                                                                                                                                                                                                                                                            WHERE and(equals(log_entries.team_id, 2), equals(log_entries.log_source, 'session_replay'))) AS console_logs_log_entries
                                                                                                                                                                                                                                                                                                                                                                                                                         WHERE or(ifNull(in(console_logs_log_entries.level, ['warn']), 0), ifNull(greater(positionCaseInsensitive(console_logs_log_entries.message, 'random'), 0), 0)))))
  GROUP BY s.session_id
  HAVING true
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_operand_or_mandatory_filters
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 2), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-11 13:46:23.000000', 6, 'UTC')), 0), in(s.distinct_id,
                                                                                                                                                                   (SELECT person_distinct_ids.distinct_id AS distinct_id
                                                                                                                                                                    FROM
                                                                                                                                                                      (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id, person_distinct_id2.distinct_id AS distinct_id
                                                                                                                                                                       FROM person_distinct_id2
                                                                                                                                                                       WHERE equals(person_distinct_id2.team_id, 2)
                                                                                                                                                                       GROUP BY person_distinct_id2.distinct_id
                                                                                                                                                                       HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS person_distinct_ids
                                                                                                                                                                    WHERE ifNull(equals(person_distinct_ids.person_id, '00000000-0000-0000-0000-000000000000'), 0))), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-25 00:00:00.000000', 6, 'UTC')), 0), ifNull(lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-01 13:46:23.000000', 6, 'UTC')), 0), in(s.session_id,
events.`$session_id` AS session_id
events
and(equals(events.team_id, 2), notEmpty(events.`$session_id`), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-12-11 13:46:23.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), now64(6, 'UTC')), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-12-24 23:58:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2021-01-01 13:46:23.000000', 6, 'UTC')), and(equals(events.event, '$pageview'), true))
events.`$session_id`
hasAny(groupUniqArray(events.event), ['$pageview']))))
  GROUP BY s.session_id
  HAVING true
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_operand_or_mandatory_filters.1
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 2), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-11 13:46:23.000000', 6, 'UTC')), 0), in(s.distinct_id,
                                                                                                                                                                   (SELECT person_distinct_ids.distinct_id AS distinct_id
                                                                                                                                                                    FROM
                                                                                                                                                                      (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id, person_distinct_id2.distinct_id AS distinct_id
                                                                                                                                                                       FROM person_distinct_id2
                                                                                                                                                                       WHERE equals(person_distinct_id2.team_id, 2)
                                                                                                                                                                       GROUP BY person_distinct_id2.distinct_id
                                                                                                                                                                       HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS person_distinct_ids
                                                                                                                                                                    WHERE ifNull(equals(person_distinct_ids.person_id, '00000000-0000-0000-0000-000000000000'), 0))), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-25 00:00:00.000000', 6, 'UTC')), 0), ifNull(lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-01 13:46:23.000000', 6, 'UTC')), 0), in(s.session_id,
events.`$session_id` AS session_id
events
and(equals(events.team_id, 2), notEmpty(events.`$session_id`), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-12-11 13:46:23.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), now64(6, 'UTC')), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-12-24 23:58:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2021-01-01 13:46:23.000000', 6, 'UTC')), and(equals(events.event, '$pageview'), true))
events.`$session_id`
hasAny(groupUniqArray(events.event), ['$pageview']))))
  GROUP BY s.session_id
  HAVING true
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_operand_or_mandatory_filters.2
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 2), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-11 13:46:23.000000', 6, 'UTC')), 0), in(s.session_id, ['session_id_one']), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-25 00:00:00.000000', 6, 'UTC')), 0), ifNull(lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-01 13:46:23.000000', 6, 'UTC')), 0), in(s.session_id,
                                                                                                                                                                                                                                                                                                                                                                                                                                                              (SELECT events.`$session_id` AS session_id
                                                                                                                                                                                                                                                                                                                                                                                                                                                               FROM events
                                                                                                                                                                                                                                                                                                                                                                                                                                                               WHERE and(equals(events.team_id, 2), notEmpty(events.`$session_id`), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-12-11 13:46:23.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), now64(6, 'UTC')), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-12-24 23:58:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2021-01-01 13:46:23.000000', 6, 'UTC')), and(equals(events.event, '$pageview'), true), in(events.`$session_id`, ['session_id_one']))
                                                                                                                                                                                                                                                                                                                                                                                                                                                               GROUP BY events.`$session_id`
                                                                                                                                                                                                                                                                                                                                                                                                                                                               HAVING hasAny(groupUniqArray(events.event), ['$pageview']))))
  GROUP BY s.session_id
  HAVING true
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_operand_or_mandatory_filters.3
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 2), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-11 13:46:23.000000', 6, 'UTC')), 0), in(s.session_id, ['session_id_two']), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-25 00:00:00.000000', 6, 'UTC')), 0), ifNull(lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-01 13:46:23.000000', 6, 'UTC')), 0), in(s.session_id,
                                                                                                                                                                                                                                                                                                                                                                                                                                                              (SELECT events.`$session_id` AS session_id
                                                                                                                                                                                                                                                                                                                                                                                                                                                               FROM events
                                                                                                                                                                                                                                                                                                                                                                                                                                                               WHERE and(equals(events.team_id, 2), notEmpty(events.`$session_id`), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-12-11 13:46:23.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), now64(6, 'UTC')), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-12-24 23:58:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2021-01-01 13:46:23.000000', 6, 'UTC')), and(equals(events.event, '$pageview'), true), in(events.`$session_id`, ['session_id_two']))
                                                                                                                                                                                                                                                                                                                                                                                                                                                               GROUP BY events.`$session_id`
                                                                                                                                                                                                                                                                                                                                                                                                                                                               HAVING hasAny(groupUniqArray(events.event), ['$pageview']))))
  GROUP BY s.session_id
  HAVING true
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_operand_or_person_filters
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 2), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-11 13:46:23.000000', 6, 'UTC')), 0), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-25 00:00:00.000000', 6, 'UTC')), 0), ifNull(lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-01 13:46:23.000000', 6, 'UTC')), 0), in(s.distinct_id,
                                                                                                                                                                                                                                                                                                                                                                                                                        (SELECT person_distinct_ids.distinct_id AS distinct_id
                                                                                                                                                                                                                                                                                                                                                                                                                         FROM
                                                                                                                                                                                                                                                                                                                                                                                                                           (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_distinct_ids___person_id, argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id, person_distinct_id2.distinct_id AS distinct_id
                                                                                                                                                                                                                                                                                                                                                                                                                            FROM person_distinct_id2
                                                                                                                                                                                                                                                                                                                                                                                                                            WHERE equals(person_distinct_id2.team_id, 2)
                                                                                                                                                                                                                                                                                                                                                                                                                            GROUP BY person_distinct_id2.distinct_id
                                                                                                                                                                                                                                                                                                                                                                                                                            HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS person_distinct_ids
                                                                                                                                                                                                                                                                                                                                                                                                                         LEFT JOIN
                                                                                                                                                                                                                                                                                                                                                                                                                           (SELECT person.id AS id, replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, 'email'), ''), 'null'), '^"|"$', '') AS properties___email
                                                                                                                                                                                                                                                                                                                                                                                                                            FROM person
                                                                                                                                                                                                                                                                                                                                                                                                                            WHERE and(equals(person.team_id, 2), ifNull(in(tuple(person.id, person.version),
                                                                                                                                                                                                                                                                                                                                                                                                                                                                             (SELECT person.id AS id, max(person.version) AS version
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              FROM person
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              WHERE equals(person.team_id, 2)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              GROUP BY person.id
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              HAVING and(ifNull(equals(argMax(person.is_deleted, person.version), 0), 0), ifNull(less(argMax(person.created_at, person.version), plus(now64(6, 'UTC'), toIntervalDay(1))), 0)))), 0)) SETTINGS optimize_aggregation_in_order=1) AS person_distinct_ids__person ON equals(person_distinct_ids.person_distinct_ids___person_id, person_distinct_ids__person.id)
                                                                                                                                                                                                                                                                                                                                                                                                                         WHERE and(ifNull(equals(person_distinct_ids__person.properties___email, 'test@posthog.com'), 0), ifNull(equals(person_distinct_ids__person.properties___email, 'david@posthog.com'), 0)))))
  GROUP BY s.session_id
  HAVING true
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_operand_or_person_filters.1
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 2), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-11 13:46:23.000000', 6, 'UTC')), 0), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-25 00:00:00.000000', 6, 'UTC')), 0), ifNull(lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-01 13:46:23.000000', 6, 'UTC')), 0), in(s.distinct_id,
                                                                                                                                                                                                                                                                                                                                                                                                                        (SELECT person_distinct_ids.distinct_id AS distinct_id
                                                                                                                                                                                                                                                                                                                                                                                                                         FROM
                                                                                                                                                                                                                                                                                                                                                                                                                           (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_distinct_ids___person_id, argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id, person_distinct_id2.distinct_id AS distinct_id
                                                                                                                                                                                                                                                                                                                                                                                                                            FROM person_distinct_id2
                                                                                                                                                                                                                                                                                                                                                                                                                            WHERE equals(person_distinct_id2.team_id, 2)
                                                                                                                                                                                                                                                                                                                                                                                                                            GROUP BY person_distinct_id2.distinct_id
                                                                                                                                                                                                                                                                                                                                                                                                                            HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS person_distinct_ids
                                                                                                                                                                                                                                                                                                                                                                                                                         LEFT JOIN
                                                                                                                                                                                                                                                                                                                                                                                                                           (SELECT person.id AS id, replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, 'email'), ''), 'null'), '^"|"$', '') AS properties___email
                                                                                                                                                                                                                                                                                                                                                                                                                            FROM person
                                                                                                                                                                                                                                                                                                                                                                                                                            WHERE and(equals(person.team_id, 2), ifNull(in(tuple(person.id, person.version),
                                                                                                                                                                                                                                                                                                                                                                                                                                                                             (SELECT person.id AS id, max(person.version) AS version
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              FROM person
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              WHERE equals(person.team_id, 2)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              GROUP BY person.id
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              HAVING and(ifNull(equals(argMax(person.is_deleted, person.version), 0), 0), ifNull(less(argMax(person.created_at, person.version), plus(now64(6, 'UTC'), toIntervalDay(1))), 0)))), 0)) SETTINGS optimize_aggregation_in_order=1) AS person_distinct_ids__person ON equals(person_distinct_ids.person_distinct_ids___person_id, person_distinct_ids__person.id)
                                                                                                                                                                                                                                                                                                                                                                                                                         WHERE or(ifNull(equals(person_distinct_ids__person.properties___email, 'test@posthog.com'), 0), ifNull(equals(person_distinct_ids__person.properties___email, 'david@posthog.com'), 0)))))
  GROUP BY s.session_id
  HAVING true
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_person_id_filter
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 2), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-11 13:46:23.000000', 6, 'UTC')), 0), in(s.distinct_id,
                                                                                                                                                                   (SELECT person_distinct_ids.distinct_id AS distinct_id
                                                                                                                                                                    FROM
                                                                                                                                                                      (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id, person_distinct_id2.distinct_id AS distinct_id
                                                                                                                                                                       FROM person_distinct_id2
                                                                                                                                                                       WHERE equals(person_distinct_id2.team_id, 2)
                                                                                                                                                                       GROUP BY person_distinct_id2.distinct_id
                                                                                                                                                                       HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS person_distinct_ids
                                                                                                                                                                    WHERE ifNull(equals(person_distinct_ids.person_id, '00000000-0000-0000-0000-000000000000'), 0))), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-25 00:00:00.000000', 6, 'UTC')), 0), ifNull(lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-01 13:46:23.000000', 6, 'UTC')), 0))
  GROUP BY s.session_id
  HAVING true
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_top_level_event_property_test_account_filter
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 2), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-31 20:00:00.000000', 6, 'UTC')), 0), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-14 00:00:00.000000', 6, 'UTC')), 0), ifNull(lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-21 20:00:00.000000', 6, 'UTC')), 0), in(s.session_id,
                                                                                                                                                                                                                                                                                                                                                                                                                        (SELECT events.`$session_id` AS session_id
                                                                                                                                                                                                                                                                                                                                                                                                                         FROM events
                                                                                                                                                                                                                                                                                                                                                                                                                         WHERE and(equals(events.team_id, 2), notEmpty(events.`$session_id`), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-12-31 20:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), now64(6, 'UTC')), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2021-01-13 23:58:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2021-01-21 20:00:00.000000', 6, 'UTC')), and(equals(events.event, '$pageview'), true))
                                                                                                                                                                                                                                                                                                                                                                                                                         GROUP BY events.`$session_id`
                                                                                                                                                                                                                                                                                                                                                                                                                         HAVING hasAll(groupUniqArray(events.event), ['$pageview']))))
  GROUP BY s.session_id
  HAVING true
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_top_level_event_property_test_account_filter.1
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 2), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-31 20:00:00.000000', 6, 'UTC')), 0), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-14 00:00:00.000000', 6, 'UTC')), 0), ifNull(lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-21 20:00:00.000000', 6, 'UTC')), 0), in(s.session_id,
                                                                                                                                                                                                                                                                                                                                                                                                                        (SELECT events.`$session_id` AS session_id
                                                                                                                                                                                                                                                                                                                                                                                                                         FROM events
                                                                                                                                                                                                                                                                                                                                                                                                                         WHERE and(equals(events.team_id, 2), notEmpty(events.`$session_id`), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-12-31 20:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), now64(6, 'UTC')), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2021-01-13 23:58:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2021-01-21 20:00:00.000000', 6, 'UTC')), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, 'is_internal_user'), ''), 'null'), '^"|"$', ''), 'false'), 0))
                                                                                                                                                                                                                                                                                                                                                                                                                         GROUP BY events.`$session_id`
                                                                                                                                                                                                                                                                                                                                                                                                                         HAVING true)))
  GROUP BY s.session_id
  HAVING true
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_top_level_event_property_test_account_filter_allowing_denormalized_props
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 2), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-31 20:00:00.000000', 6, 'UTC')), 0), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-14 00:00:00.000000', 6, 'UTC')), 0), ifNull(lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-21 20:00:00.000000', 6, 'UTC')), 0), in(s.session_id,
                                                                                                                                                                                                                                                                                                                                                                                                                        (SELECT events.`$session_id` AS session_id
                                                                                                                                                                                                                                                                                                                                                                                                                         FROM events
                                                                                                                                                                                                                                                                                                                                                                                                                         WHERE and(equals(events.team_id, 2), notEmpty(events.`$session_id`), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-12-31 20:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), now64(6, 'UTC')), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2021-01-13 23:58:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2021-01-21 20:00:00.000000', 6, 'UTC')), and(equals(events.event, '$pageview'), true))
                                                                                                                                                                                                                                                                                                                                                                                                                         GROUP BY events.`$session_id`
                                                                                                                                                                                                                                                                                                                                                                                                                         HAVING hasAll(groupUniqArray(events.event), ['$pageview']))))
  GROUP BY s.session_id
  HAVING true
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_top_level_event_property_test_account_filter_allowing_denormalized_props.1
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 2), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-31 20:00:00.000000', 6, 'UTC')), 0), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-14 00:00:00.000000', 6, 'UTC')), 0), ifNull(lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-21 20:00:00.000000', 6, 'UTC')), 0), in(s.session_id,
                                                                                                                                                                                                                                                                                                                                                                                                                        (SELECT events.`$session_id` AS session_id
                                                                                                                                                                                                                                                                                                                                                                                                                         FROM events
                                                                                                                                                                                                                                                                                                                                                                                                                         WHERE and(equals(events.team_id, 2), notEmpty(events.`$session_id`), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-12-31 20:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), now64(6, 'UTC')), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2021-01-13 23:58:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2021-01-21 20:00:00.000000', 6, 'UTC')), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, 'is_internal_user'), ''), 'null'), '^"|"$', ''), 'false'), 0))
                                                                                                                                                                                                                                                                                                                                                                                                                         GROUP BY events.`$session_id`
                                                                                                                                                                                                                                                                                                                                                                                                                         HAVING true)))
  GROUP BY s.session_id
  HAVING true
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_top_level_event_property_test_account_filter_allowing_denormalized_props_materialized
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 2), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-31 20:00:00.000000', 6, 'UTC')), 0), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-14 00:00:00.000000', 6, 'UTC')), 0), ifNull(lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-21 20:00:00.000000', 6, 'UTC')), 0), in(s.session_id,
                                                                                                                                                                                                                                                                                                                                                                                                                        (SELECT events.`$session_id` AS session_id
                                                                                                                                                                                                                                                                                                                                                                                                                         FROM events
                                                                                                                                                                                                                                                                                                                                                                                                                         WHERE and(equals(events.team_id, 2), notEmpty(events.`$session_id`), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-12-31 20:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), now64(6, 'UTC')), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2021-01-13 23:58:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2021-01-21 20:00:00.000000', 6, 'UTC')), and(equals(events.event, '$pageview'), true))
                                                                                                                                                                                                                                                                                                                                                                                                                         GROUP BY events.`$session_id`
                                                                                                                                                                                                                                                                                                                                                                                                                         HAVING hasAll(groupUniqArray(events.event), ['$pageview']))))
  GROUP BY s.session_id
  HAVING true
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_top_level_event_property_test_account_filter_allowing_denormalized_props_materialized.1
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 2), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-31 20:00:00.000000', 6, 'UTC')), 0), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-14 00:00:00.000000', 6, 'UTC')), 0), ifNull(lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-21 20:00:00.000000', 6, 'UTC')), 0), in(s.session_id,
                                                                                                                                                                                                                                                                                                                                                                                                                        (SELECT events.`$session_id` AS session_id
                                                                                                                                                                                                                                                                                                                                                                                                                         FROM events
                                                                                                                                                                                                                                                                                                                                                                                                                         WHERE and(equals(events.team_id, 2), notEmpty(events.`$session_id`), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-12-31 20:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), now64(6, 'UTC')), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2021-01-13 23:58:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2021-01-21 20:00:00.000000', 6, 'UTC')), ifNull(equals(nullIf(nullIf(events.mat_is_internal_user, ''), 'null'), 'false'), 0))
                                                                                                                                                                                                                                                                                                                                                                                                                         GROUP BY events.`$session_id`
                                                                                                                                                                                                                                                                                                                                                                                                                         HAVING true)))
  GROUP BY s.session_id
  HAVING true
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_top_level_event_property_test_account_filter_materialized
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 2), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-31 20:00:00.000000', 6, 'UTC')), 0), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-14 00:00:00.000000', 6, 'UTC')), 0), ifNull(lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-21 20:00:00.000000', 6, 'UTC')), 0), in(s.session_id,
                                                                                                                                                                                                                                                                                                                                                                                                                        (SELECT events.`$session_id` AS session_id
                                                                                                                                                                                                                                                                                                                                                                                                                         FROM events
                                                                                                                                                                                                                                                                                                                                                                                                                         WHERE and(equals(events.team_id, 2), notEmpty(events.`$session_id`), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-12-31 20:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), now64(6, 'UTC')), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2021-01-13 23:58:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2021-01-21 20:00:00.000000', 6, 'UTC')), and(equals(events.event, '$pageview'), true))
                                                                                                                                                                                                                                                                                                                                                                                                                         GROUP BY events.`$session_id`
                                                                                                                                                                                                                                                                                                                                                                                                                         HAVING hasAll(groupUniqArray(events.event), ['$pageview']))))
  GROUP BY s.session_id
  HAVING true
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_top_level_event_property_test_account_filter_materialized.1
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 2), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-31 20:00:00.000000', 6, 'UTC')), 0), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-14 00:00:00.000000', 6, 'UTC')), 0), ifNull(lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-21 20:00:00.000000', 6, 'UTC')), 0), in(s.session_id,
                                                                                                                                                                                                                                                                                                                                                                                                                        (SELECT events.`$session_id` AS session_id
                                                                                                                                                                                                                                                                                                                                                                                                                         FROM events
                                                                                                                                                                                                                                                                                                                                                                                                                         WHERE and(equals(events.team_id, 2), notEmpty(events.`$session_id`), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-12-31 20:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), now64(6, 'UTC')), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2021-01-13 23:58:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2021-01-21 20:00:00.000000', 6, 'UTC')), ifNull(equals(nullIf(nullIf(events.mat_is_internal_user, ''), 'null'), 'false'), 0))
                                                                                                                                                                                                                                                                                                                                                                                                                         GROUP BY events.`$session_id`
                                                                                                                                                                                                                                                                                                                                                                                                                         HAVING true)))
  GROUP BY s.session_id
  HAVING true
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_top_level_hogql_event_property_test_account_filter
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 2), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-31 20:00:00.000000', 6, 'UTC')), 0), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-14 00:00:00.000000', 6, 'UTC')), 0), ifNull(lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-21 20:00:00.000000', 6, 'UTC')), 0), in(s.session_id,
                                                                                                                                                                                                                                                                                                                                                                                                                        (SELECT events.`$session_id` AS session_id
                                                                                                                                                                                                                                                                                                                                                                                                                         FROM events
                                                                                                                                                                                                                                                                                                                                                                                                                         WHERE and(equals(events.team_id, 2), notEmpty(events.`$session_id`), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-12-31 20:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), now64(6, 'UTC')), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2021-01-13 23:58:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2021-01-21 20:00:00.000000', 6, 'UTC')), and(equals(events.event, '$pageview'), true))
                                                                                                                                                                                                                                                                                                                                                                                                                         GROUP BY events.`$session_id`
                                                                                                                                                                                                                                                                                                                                                                                                                         HAVING hasAll(groupUniqArray(events.event), ['$pageview']))))
  GROUP BY s.session_id
  HAVING true
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_top_level_hogql_event_property_test_account_filter.1
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 2), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-31 20:00:00.000000', 6, 'UTC')), 0), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-14 00:00:00.000000', 6, 'UTC')), 0), ifNull(lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-21 20:00:00.000000', 6, 'UTC')), 0), in(s.session_id,
                                                                                                                                                                                                                                                                                                                                                                                                                        (SELECT events.`$session_id` AS session_id
                                                                                                                                                                                                                                                                                                                                                                                                                         FROM events
                                                                                                                                                                                                                                                                                                                                                                                                                         WHERE and(equals(events.team_id, 2), notEmpty(events.`$session_id`), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-12-31 20:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), now64(6, 'UTC')), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2021-01-13 23:58:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2021-01-21 20:00:00.000000', 6, 'UTC')), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, 'is_internal_user'), ''), 'null'), '^"|"$', ''), 'true'), 0))
                                                                                                                                                                                                                                                                                                                                                                                                                         GROUP BY events.`$session_id`
                                                                                                                                                                                                                                                                                                                                                                                                                         HAVING true)))
  GROUP BY s.session_id
  HAVING true
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_top_level_hogql_event_property_test_account_filter_materialized
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 2), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-31 20:00:00.000000', 6, 'UTC')), 0), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-14 00:00:00.000000', 6, 'UTC')), 0), ifNull(lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-21 20:00:00.000000', 6, 'UTC')), 0), in(s.session_id,
                                                                                                                                                                                                                                                                                                                                                                                                                        (SELECT events.`$session_id` AS session_id
                                                                                                                                                                                                                                                                                                                                                                                                                         FROM events
                                                                                                                                                                                                                                                                                                                                                                                                                         WHERE and(equals(events.team_id, 2), notEmpty(events.`$session_id`), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-12-31 20:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), now64(6, 'UTC')), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2021-01-13 23:58:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2021-01-21 20:00:00.000000', 6, 'UTC')), and(equals(events.event, '$pageview'), true))
                                                                                                                                                                                                                                                                                                                                                                                                                         GROUP BY events.`$session_id`
                                                                                                                                                                                                                                                                                                                                                                                                                         HAVING hasAll(groupUniqArray(events.event), ['$pageview']))))
  GROUP BY s.session_id
  HAVING true
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_top_level_hogql_event_property_test_account_filter_materialized.1
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 2), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-31 20:00:00.000000', 6, 'UTC')), 0), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-14 00:00:00.000000', 6, 'UTC')), 0), ifNull(lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-21 20:00:00.000000', 6, 'UTC')), 0), in(s.session_id,
                                                                                                                                                                                                                                                                                                                                                                                                                        (SELECT events.`$session_id` AS session_id
                                                                                                                                                                                                                                                                                                                                                                                                                         FROM events
                                                                                                                                                                                                                                                                                                                                                                                                                         WHERE and(equals(events.team_id, 2), notEmpty(events.`$session_id`), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-12-31 20:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), now64(6, 'UTC')), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2021-01-13 23:58:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2021-01-21 20:00:00.000000', 6, 'UTC')), ifNull(equals(nullIf(nullIf(events.mat_is_internal_user, ''), 'null'), 'true'), 0))
                                                                                                                                                                                                                                                                                                                                                                                                                         GROUP BY events.`$session_id`
                                                                                                                                                                                                                                                                                                                                                                                                                         HAVING true)))
  GROUP BY s.session_id
  HAVING true
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_top_level_hogql_person_property_test_account_filter
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 2), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-31 20:00:00.000000', 6, 'UTC')), 0), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-14 00:00:00.000000', 6, 'UTC')), 0), ifNull(lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-21 20:00:00.000000', 6, 'UTC')), 0), in(s.session_id,
                                                                                                                                                                                                                                                                                                                                                                                                                        (SELECT events.`$session_id` AS session_id
                                                                                                                                                                                                                                                                                                                                                                                                                         FROM events
                                                                                                                                                                                                                                                                                                                                                                                                                         WHERE and(equals(events.team_id, 2), notEmpty(events.`$session_id`), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-12-31 20:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), now64(6, 'UTC')), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2021-01-13 23:58:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2021-01-21 20:00:00.000000', 6, 'UTC')), and(equals(events.event, '$pageview'), true))
                                                                                                                                                                                                                                                                                                                                                                                                                         GROUP BY events.`$session_id`
                                                                                                                                                                                                                                                                                                                                                                                                                         HAVING hasAll(groupUniqArray(events.event), ['$pageview']))))
  GROUP BY s.session_id
  HAVING true
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_top_level_hogql_person_property_test_account_filter.1
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 2), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-31 20:00:00.000000', 6, 'UTC')), 0), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-14 00:00:00.000000', 6, 'UTC')), 0), ifNull(lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-21 20:00:00.000000', 6, 'UTC')), 0), in(s.distinct_id,
                                                                                                                                                                                                                                                                                                                                                                                                                        (SELECT person_distinct_ids.distinct_id AS distinct_id
                                                                                                                                                                                                                                                                                                                                                                                                                         FROM
                                                                                                                                                                                                                                                                                                                                                                                                                           (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_distinct_ids___person_id, argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id, person_distinct_id2.distinct_id AS distinct_id
                                                                                                                                                                                                                                                                                                                                                                                                                            FROM person_distinct_id2
                                                                                                                                                                                                                                                                                                                                                                                                                            WHERE equals(person_distinct_id2.team_id, 2)
                                                                                                                                                                                                                                                                                                                                                                                                                            GROUP BY person_distinct_id2.distinct_id
                                                                                                                                                                                                                                                                                                                                                                                                                            HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS person_distinct_ids
                                                                                                                                                                                                                                                                                                                                                                                                                         LEFT JOIN
                                                                                                                                                                                                                                                                                                                                                                                                                           (SELECT person.id AS id, replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, 'email'), ''), 'null'), '^"|"$', '') AS properties___email
                                                                                                                                                                                                                                                                                                                                                                                                                            FROM person
                                                                                                                                                                                                                                                                                                                                                                                                                            WHERE and(equals(person.team_id, 2), ifNull(in(tuple(person.id, person.version),
                                                                                                                                                                                                                                                                                                                                                                                                                                                                             (SELECT person.id AS id, max(person.version) AS version
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              FROM person
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              WHERE equals(person.team_id, 2)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              GROUP BY person.id
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              HAVING and(ifNull(equals(argMax(person.is_deleted, person.version), 0), 0), ifNull(less(argMax(person.created_at, person.version), plus(now64(6, 'UTC'), toIntervalDay(1))), 0)))), 0)) SETTINGS optimize_aggregation_in_order=1) AS person_distinct_ids__person ON equals(person_distinct_ids.person_distinct_ids___person_id, person_distinct_ids__person.id)
                                                                                                                                                                                                                                                                                                                                                                                                                         WHERE ifNull(equals(person_distinct_ids__person.properties___email, 'bla'), 0))))
  GROUP BY s.session_id
  HAVING true
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_top_level_hogql_person_property_test_account_filter_materialized
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 2), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-31 20:00:00.000000', 6, 'UTC')), 0), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-14 00:00:00.000000', 6, 'UTC')), 0), ifNull(lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-21 20:00:00.000000', 6, 'UTC')), 0), in(s.session_id,
                                                                                                                                                                                                                                                                                                                                                                                                                        (SELECT events.`$session_id` AS session_id
                                                                                                                                                                                                                                                                                                                                                                                                                         FROM events
                                                                                                                                                                                                                                                                                                                                                                                                                         WHERE and(equals(events.team_id, 2), notEmpty(events.`$session_id`), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-12-31 20:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), now64(6, 'UTC')), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2021-01-13 23:58:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2021-01-21 20:00:00.000000', 6, 'UTC')), and(equals(events.event, '$pageview'), true))
                                                                                                                                                                                                                                                                                                                                                                                                                         GROUP BY events.`$session_id`
                                                                                                                                                                                                                                                                                                                                                                                                                         HAVING hasAll(groupUniqArray(events.event), ['$pageview']))))
  GROUP BY s.session_id
  HAVING true
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_top_level_hogql_person_property_test_account_filter_materialized.1
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 2), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-31 20:00:00.000000', 6, 'UTC')), 0), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-14 00:00:00.000000', 6, 'UTC')), 0), ifNull(lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-21 20:00:00.000000', 6, 'UTC')), 0), in(s.distinct_id,
                                                                                                                                                                                                                                                                                                                                                                                                                        (SELECT person_distinct_ids.distinct_id AS distinct_id
                                                                                                                                                                                                                                                                                                                                                                                                                         FROM
                                                                                                                                                                                                                                                                                                                                                                                                                           (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_distinct_ids___person_id, argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id, person_distinct_id2.distinct_id AS distinct_id
                                                                                                                                                                                                                                                                                                                                                                                                                            FROM person_distinct_id2
                                                                                                                                                                                                                                                                                                                                                                                                                            WHERE equals(person_distinct_id2.team_id, 2)
                                                                                                                                                                                                                                                                                                                                                                                                                            GROUP BY person_distinct_id2.distinct_id
                                                                                                                                                                                                                                                                                                                                                                                                                            HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS person_distinct_ids
                                                                                                                                                                                                                                                                                                                                                                                                                         LEFT JOIN
                                                                                                                                                                                                                                                                                                                                                                                                                           (SELECT person.id AS id, nullIf(nullIf(person.pmat_email, ''), 'null') AS properties___email
                                                                                                                                                                                                                                                                                                                                                                                                                            FROM person
                                                                                                                                                                                                                                                                                                                                                                                                                            WHERE and(equals(person.team_id, 2), ifNull(in(tuple(person.id, person.version),
                                                                                                                                                                                                                                                                                                                                                                                                                                                                             (SELECT person.id AS id, max(person.version) AS version
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              FROM person
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              WHERE equals(person.team_id, 2)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              GROUP BY person.id
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              HAVING and(ifNull(equals(argMax(person.is_deleted, person.version), 0), 0), ifNull(less(argMax(person.created_at, person.version), plus(now64(6, 'UTC'), toIntervalDay(1))), 0)))), 0)) SETTINGS optimize_aggregation_in_order=1) AS person_distinct_ids__person ON equals(person_distinct_ids.person_distinct_ids___person_id, person_distinct_ids__person.id)
                                                                                                                                                                                                                                                                                                                                                                                                                         WHERE ifNull(equals(person_distinct_ids__person.properties___email, 'bla'), 0))))
  GROUP BY s.session_id
  HAVING true
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_top_level_person_property_test_account_filter
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 2), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-31 20:00:00.000000', 6, 'UTC')), 0), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-14 00:00:00.000000', 6, 'UTC')), 0), ifNull(lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-21 20:00:00.000000', 6, 'UTC')), 0), in(s.session_id,
                                                                                                                                                                                                                                                                                                                                                                                                                        (SELECT events.`$session_id` AS session_id
                                                                                                                                                                                                                                                                                                                                                                                                                         FROM events
                                                                                                                                                                                                                                                                                                                                                                                                                         WHERE and(equals(events.team_id, 2), notEmpty(events.`$session_id`), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-12-31 20:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), now64(6, 'UTC')), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2021-01-13 23:58:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2021-01-21 20:00:00.000000', 6, 'UTC')), and(equals(events.event, '$pageview'), true))
                                                                                                                                                                                                                                                                                                                                                                                                                         GROUP BY events.`$session_id`
                                                                                                                                                                                                                                                                                                                                                                                                                         HAVING hasAll(groupUniqArray(events.event), ['$pageview']))))
  GROUP BY s.session_id
  HAVING true
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_top_level_person_property_test_account_filter.1
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 2), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-31 20:00:00.000000', 6, 'UTC')), 0), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-14 00:00:00.000000', 6, 'UTC')), 0), ifNull(lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-21 20:00:00.000000', 6, 'UTC')), 0), in(s.distinct_id,
                                                                                                                                                                                                                                                                                                                                                                                                                        (SELECT person_distinct_ids.distinct_id AS distinct_id
                                                                                                                                                                                                                                                                                                                                                                                                                         FROM
                                                                                                                                                                                                                                                                                                                                                                                                                           (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_distinct_ids___person_id, argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id, person_distinct_id2.distinct_id AS distinct_id
                                                                                                                                                                                                                                                                                                                                                                                                                            FROM person_distinct_id2
                                                                                                                                                                                                                                                                                                                                                                                                                            WHERE equals(person_distinct_id2.team_id, 2)
                                                                                                                                                                                                                                                                                                                                                                                                                            GROUP BY person_distinct_id2.distinct_id
                                                                                                                                                                                                                                                                                                                                                                                                                            HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS person_distinct_ids
                                                                                                                                                                                                                                                                                                                                                                                                                         LEFT JOIN
                                                                                                                                                                                                                                                                                                                                                                                                                           (SELECT person.id AS id, replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, 'email'), ''), 'null'), '^"|"$', '') AS properties___email
                                                                                                                                                                                                                                                                                                                                                                                                                            FROM person
                                                                                                                                                                                                                                                                                                                                                                                                                            WHERE and(equals(person.team_id, 2), ifNull(in(tuple(person.id, person.version),
                                                                                                                                                                                                                                                                                                                                                                                                                                                                             (SELECT person.id AS id, max(person.version) AS version
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              FROM person
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              WHERE equals(person.team_id, 2)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              GROUP BY person.id
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              HAVING and(ifNull(equals(argMax(person.is_deleted, person.version), 0), 0), ifNull(less(argMax(person.created_at, person.version), plus(now64(6, 'UTC'), toIntervalDay(1))), 0)))), 0)) SETTINGS optimize_aggregation_in_order=1) AS person_distinct_ids__person ON equals(person_distinct_ids.person_distinct_ids___person_id, person_distinct_ids__person.id)
                                                                                                                                                                                                                                                                                                                                                                                                                         WHERE ifNull(equals(person_distinct_ids__person.properties___email, 'bla'), 0))))
  GROUP BY s.session_id
  HAVING true
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_top_level_person_property_test_account_filter_materialized
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 2), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-31 20:00:00.000000', 6, 'UTC')), 0), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-14 00:00:00.000000', 6, 'UTC')), 0), ifNull(lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-21 20:00:00.000000', 6, 'UTC')), 0), in(s.session_id,
                                                                                                                                                                                                                                                                                                                                                                                                                        (SELECT events.`$session_id` AS session_id
                                                                                                                                                                                                                                                                                                                                                                                                                         FROM events
                                                                                                                                                                                                                                                                                                                                                                                                                         WHERE and(equals(events.team_id, 2), notEmpty(events.`$session_id`), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-12-31 20:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), now64(6, 'UTC')), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2021-01-13 23:58:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2021-01-21 20:00:00.000000', 6, 'UTC')), and(equals(events.event, '$pageview'), true))
                                                                                                                                                                                                                                                                                                                                                                                                                         GROUP BY events.`$session_id`
                                                                                                                                                                                                                                                                                                                                                                                                                         HAVING hasAll(groupUniqArray(events.event), ['$pageview']))))
  GROUP BY s.session_id
  HAVING true
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestSessionRecordingsListFromFilters.test_top_level_person_property_test_account_filter_materialized.1
  '''
  SELECT s.session_id AS session_id,
         any(s.team_id),
         any(s.distinct_id),
         min(toTimeZone(s.min_first_timestamp, 'UTC')) AS start_time,
         max(toTimeZone(s.max_last_timestamp, 'UTC')) AS end_time,
         dateDiff('SECOND', start_time, end_time) AS duration,
         argMinMerge(s.first_url) AS first_url,
         sum(s.click_count),
         sum(s.keypress_count),
         sum(s.mouse_activity_count),
         divide(sum(s.active_milliseconds), 1000) AS active_seconds,
         minus(duration, active_seconds) AS inactive_seconds,
         sum(s.console_log_count) AS console_log_count,
         sum(s.console_warn_count) AS console_warn_count,
         sum(s.console_error_count) AS console_error_count
  FROM session_replay_events AS s
  WHERE and(equals(s.team_id, 2), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2020-12-31 20:00:00.000000', 6, 'UTC')), 0), ifNull(greaterOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-14 00:00:00.000000', 6, 'UTC')), 0), ifNull(lessOrEquals(toTimeZone(s.min_first_timestamp, 'UTC'), toDateTime64('2021-01-21 20:00:00.000000', 6, 'UTC')), 0), in(s.distinct_id,
                                                                                                                                                                                                                                                                                                                                                                                                                        (SELECT person_distinct_ids.distinct_id AS distinct_id
                                                                                                                                                                                                                                                                                                                                                                                                                         FROM
                                                                                                                                                                                                                                                                                                                                                                                                                           (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_distinct_ids___person_id, argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id, person_distinct_id2.distinct_id AS distinct_id
                                                                                                                                                                                                                                                                                                                                                                                                                            FROM person_distinct_id2
                                                                                                                                                                                                                                                                                                                                                                                                                            WHERE equals(person_distinct_id2.team_id, 2)
                                                                                                                                                                                                                                                                                                                                                                                                                            GROUP BY person_distinct_id2.distinct_id
                                                                                                                                                                                                                                                                                                                                                                                                                            HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS person_distinct_ids
                                                                                                                                                                                                                                                                                                                                                                                                                         LEFT JOIN
                                                                                                                                                                                                                                                                                                                                                                                                                           (SELECT person.id AS id, nullIf(nullIf(person.pmat_email, ''), 'null') AS properties___email
                                                                                                                                                                                                                                                                                                                                                                                                                            FROM person
                                                                                                                                                                                                                                                                                                                                                                                                                            WHERE and(equals(person.team_id, 2), ifNull(in(tuple(person.id, person.version),
                                                                                                                                                                                                                                                                                                                                                                                                                                                                             (SELECT person.id AS id, max(person.version) AS version
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              FROM person
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              WHERE equals(person.team_id, 2)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              GROUP BY person.id
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              HAVING and(ifNull(equals(argMax(person.is_deleted, person.version), 0), 0), ifNull(less(argMax(person.created_at, person.version), plus(now64(6, 'UTC'), toIntervalDay(1))), 0)))), 0)) SETTINGS optimize_aggregation_in_order=1) AS person_distinct_ids__person ON equals(person_distinct_ids.person_distinct_ids___person_id, person_distinct_ids__person.id)
                                                                                                                                                                                                                                                                                                                                                                                                                         WHERE ifNull(equals(person_distinct_ids__person.properties___email, 'bla'), 0))))
  GROUP BY s.session_id
  HAVING true
  ORDER BY start_time DESC
  LIMIT 51
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
