# This file is automatically generated from `SourceRegistry.get_all_sources()`
# Do not edit manually - run `pnpm generate:source-configs` to regenerate.

from posthog.temporal.data_imports.sources.common import config
from posthog.warehouse.models import ExternalDataSource
from posthog.warehouse.models.ssh_tunnel import SSHTunnelConfig
from typing import Literal


@config.config
class BigQueryDatasetProjectConfig(config.Config):
    dataset_project_id: str
    enabled: bool = config.value(converter=config.str_to_bool, default=False)


@config.config
class BigQueryKeyFileConfig(config.Config):
    project_id: str
    private_key: str
    private_key_id: str
    client_email: str
    token_uri: str


@config.config
class BigQueryTemporaryDatasetConfig(config.Config):
    temporary_dataset_id: str
    enabled: bool = config.value(converter=config.str_to_bool, default=False)


@config.config
class SnowflakeAuthTypeConfig(config.Config):
    user: str
    password: str
    private_key: str
    selection: Literal["password", "keypair"] = "password"
    passphrase: str | None = None


@config.config
class VitallyRegionConfig(config.Config):
    subdomain: str
    selection: Literal["EU", "US"] = "EU"


@config.config
class BigQuerySourceConfig(config.Config):
    key_file: BigQueryKeyFileConfig
    dataset_id: str
    temporary_dataset: BigQueryTemporaryDatasetConfig | None = config.value(
        alias="temporary-dataset", default_factory=lambda: None
    )
    dataset_project: BigQueryDatasetProjectConfig | None = None


@config.config
class BrazeSourceConfig(config.Config):
    pass


@config.config
class ChargebeeSourceConfig(config.Config):
    api_key: str
    site_name: str


@config.config
class DoItSourceConfig(config.Config):
    api_key: str


@config.config
class GoogleAdsSourceConfig(config.Config):
    customer_id: str
    google_ads_integration_id: int = config.value(converter=config.str_to_int)


@config.config
class GoogleSheetsSourceConfig(config.Config):
    spreadsheet_url: str


@config.config
class HubspotSourceConfig(config.Config):
    hubspot_integration_id: int = config.value(converter=config.str_to_int)


@config.config
class KlaviyoSourceConfig(config.Config):
    pass


@config.config
class MSSQLSourceConfig(config.Config):
    host: str
    database: str
    user: str
    password: str
    schema: str
    port: int = config.value(converter=int)
    ssh_tunnel: SSHTunnelConfig | None = None


@config.config
class MailchimpSourceConfig(config.Config):
    pass


@config.config
class MailjetSourceConfig(config.Config):
    pass


@config.config
class MetaAdsSourceConfig(config.Config):
    account_id: str
    meta_ads_integration_id: int = config.value(converter=config.str_to_int)


@config.config
class MongoDBSourceConfig(config.Config):
    connection_string: str


@config.config
class MySQLSourceConfig(config.Config):
    host: str
    database: str
    user: str
    password: str
    schema: str
    port: int = config.value(converter=int)
    using_ssl: bool = config.value(default=config.str_to_bool("true"), converter=config.str_to_bool)
    ssh_tunnel: SSHTunnelConfig | None = None


@config.config
class PostgresSourceConfig(config.Config):
    host: str
    database: str
    user: str
    password: str
    schema: str
    port: int = config.value(converter=int)
    connection_string: str | None = None
    ssh_tunnel: SSHTunnelConfig | None = None


@config.config
class RedshiftSourceConfig(config.Config):
    pass


@config.config
class SalesforceSourceConfig(config.Config):
    salesforce_integration_id: int = config.value(converter=config.str_to_int)


@config.config
class SnowflakeSourceConfig(config.Config):
    account_id: str
    database: str
    warehouse: str
    auth_type: SnowflakeAuthTypeConfig
    schema: str
    role: str | None = None


@config.config
class StripeSourceConfig(config.Config):
    stripe_secret_key: str
    stripe_account_id: str | None = None


@config.config
class TemporalIOSourceConfig(config.Config):
    host: str
    port: str
    namespace: str
    server_client_root_ca: str
    client_certificate: str
    client_private_key: str
    encryption_key: str | None = None


@config.config
class VitallySourceConfig(config.Config):
    secret_token: str
    region: VitallyRegionConfig


@config.config
class ZendeskSourceConfig(config.Config):
    subdomain: str
    api_key: str
    email_address: str


def get_config_for_source(source: ExternalDataSource.Type):
    return {
        ExternalDataSource.Type.BIGQUERY: BigQuerySourceConfig,
        ExternalDataSource.Type.BRAZE: BrazeSourceConfig,
        ExternalDataSource.Type.CHARGEBEE: ChargebeeSourceConfig,
        ExternalDataSource.Type.DOIT: DoItSourceConfig,
        ExternalDataSource.Type.GOOGLEADS: GoogleAdsSourceConfig,
        ExternalDataSource.Type.GOOGLESHEETS: GoogleSheetsSourceConfig,
        ExternalDataSource.Type.HUBSPOT: HubspotSourceConfig,
        ExternalDataSource.Type.KLAVIYO: KlaviyoSourceConfig,
        ExternalDataSource.Type.MSSQL: MSSQLSourceConfig,
        ExternalDataSource.Type.MAILCHIMP: MailchimpSourceConfig,
        ExternalDataSource.Type.MAILJET: MailjetSourceConfig,
        ExternalDataSource.Type.METAADS: MetaAdsSourceConfig,
        ExternalDataSource.Type.MONGODB: MongoDBSourceConfig,
        ExternalDataSource.Type.MYSQL: MySQLSourceConfig,
        ExternalDataSource.Type.POSTGRES: PostgresSourceConfig,
        ExternalDataSource.Type.REDSHIFT: RedshiftSourceConfig,
        ExternalDataSource.Type.SALESFORCE: SalesforceSourceConfig,
        ExternalDataSource.Type.SNOWFLAKE: SnowflakeSourceConfig,
        ExternalDataSource.Type.STRIPE: StripeSourceConfig,
        ExternalDataSource.Type.TEMPORALIO: TemporalIOSourceConfig,
        ExternalDataSource.Type.VITALLY: VitallySourceConfig,
        ExternalDataSource.Type.ZENDESK: ZendeskSourceConfig,
    }[source]
