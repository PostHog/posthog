# Generated by Django 3.2.5 on 2022-03-03 17:28

from django.db import migrations, models


class Migration(migrations.Migration):
    atomic = False

    dependencies = [
        ("posthog", "0217_team_primary_dashboard"),
    ]

    operations = [
        migrations.RunSQL(
            sql="""
                DELETE FROM "posthog_taggeditem" T1
                    USING   "posthog_taggeditem" T2
                WHERE
                    (T1.ctid < T2.ctid AND T1.tag_id = T2.tag_id AND T1.insight_id  = T2.insight_id) OR
                    (T1.ctid < T2.ctid AND T1.tag_id = T2.tag_id AND T1.dashboard_id  = T2.dashboard_id) OR
                    (T1.ctid < T2.ctid AND T1.tag_id = T2.tag_id AND T1.event_definition_id  = T2.event_definition_id) OR
                    (T1.ctid < T2.ctid AND T1.tag_id = T2.tag_id AND T1.property_definition_id  = T2.property_definition_id) OR
                    (T1.ctid < T2.ctid AND T1.tag_id = T2.tag_id AND T1.action_id  = T2.action_id);
            """,
            reverse_sql=migrations.RunSQL.noop,
        ),
        migrations.RunSQL(
            sql="""
                CREATE UNIQUE INDEX CONCURRENTLY "unique_dashboard_tagged_item" ON "posthog_taggeditem" ("tag_id", "dashboard_id")
                WHERE "dashboard_id" is NOT NULL
            """,
            reverse_sql="""
                DROP INDEX CONCURRENTLY IF EXISTS
                "unique_dashboard_tagged_item";
            """,
            state_operations=[
                migrations.AddConstraint(
                    model_name="taggeditem",
                    constraint=models.UniqueConstraint(
                        condition=models.Q(("dashboard__isnull", False)),
                        fields=("tag", "dashboard"),
                        name="unique_dashboard_tagged_item",
                    ),
                ),
            ],
        ),
        migrations.RunSQL(
            sql="""
                CREATE UNIQUE INDEX CONCURRENTLY "unique_insight_tagged_item" ON "posthog_taggeditem" ("tag_id", "insight_id")
                WHERE "insight_id" is NOT NULL
            """,
            reverse_sql="""
                DROP INDEX CONCURRENTLY IF EXISTS
                "unique_insight_tagged_item";
            """,
            state_operations=[
                migrations.AddConstraint(
                    model_name="taggeditem",
                    constraint=models.UniqueConstraint(
                        condition=models.Q(("insight__isnull", False)),
                        fields=("tag", "insight"),
                        name="unique_insight_tagged_item",
                    ),
                ),
            ],
        ),
        migrations.RunSQL(
            sql="""
                CREATE UNIQUE INDEX CONCURRENTLY "unique_event_definition_tagged_item" ON "posthog_taggeditem" ("tag_id", "event_definition_id")
                WHERE "event_definition_id" is NOT NULL
            """,
            reverse_sql="""
                DROP INDEX CONCURRENTLY IF EXISTS
                "unique_event_definition_tagged_item"
            """,
            state_operations=[
                migrations.AddConstraint(
                    model_name="taggeditem",
                    constraint=models.UniqueConstraint(
                        condition=models.Q(("event_definition__isnull", False)),
                        fields=("tag", "event_definition"),
                        name="unique_event_definition_tagged_item",
                    ),
                ),
            ],
        ),
        migrations.RunSQL(
            sql="""
                CREATE UNIQUE INDEX CONCURRENTLY "unique_property_definition_tagged_item" ON "posthog_taggeditem" ("tag_id", "property_definition_id")
                WHERE "property_definition_id" is NOT NULL
            """,
            reverse_sql="""
                DROP INDEX CONCURRENTLY IF EXISTS
                "unique_property_definition_tagged_item";
            """,
            state_operations=[
                migrations.AddConstraint(
                    model_name="taggeditem",
                    constraint=models.UniqueConstraint(
                        condition=models.Q(("property_definition__isnull", False)),
                        fields=("tag", "property_definition"),
                        name="unique_property_definition_tagged_item",
                    ),
                ),
            ],
        ),
        migrations.RunSQL(
            sql="""
                CREATE UNIQUE INDEX CONCURRENTLY "unique_action_tagged_item" ON "posthog_taggeditem" ("tag_id", "action_id")
                WHERE "action_id" is NOT NULL
            """,
            reverse_sql="""
                DROP INDEX CONCURRENTLY IF EXISTS
                "unique_action_tagged_item";
            """,
            state_operations=[
                migrations.AddConstraint(
                    model_name="taggeditem",
                    constraint=models.UniqueConstraint(
                        condition=models.Q(("action__isnull", False)),
                        fields=("tag", "action"),
                        name="unique_action_tagged_item",
                    ),
                ),
            ],
        ),
    ]
