# Generated by Django 3.2.13 on 2022-06-15 15:28

import structlog
from django.core import exceptions
from django.db import migrations

from posthog.plugins.utils import extract_plugin_code

logger = structlog.get_logger(__name__)


def forwards_func(apps, schema_editor):
    logger.info("Migration 0243 - started")

    Plugin = apps.get_model("posthog", "Plugin")
    PluginSourceFile = apps.get_model("posthog", "PluginSourceFile")

    # PluginSourceFile.objects.sync_from_plugin_archive() inlined
    # 5 changes from the original method:
    # - Plugin and PluginSourceFiles have been stripped from types
    #   (they have to be vars in this scope, but vars cannot be used as types)
    # - plugin_json cannot be provided as an arg
    # - records are `create()`d instead of `update_or_create()`d
    # - `filenames_to_delete` mechanism is removed
    # - there's no return value
    def sync_from_plugin_archive(plugin):
        """Create PluginSourceFile objects from a plugin that has an archive."""
        try:
            plugin_json, index_ts, frontend_tsx = extract_plugin_code(plugin.archive)
        except ValueError as e:
            raise exceptions.ValidationError(f"{e} in plugin {plugin}")
        # Save plugin.json
        PluginSourceFile.objects.create(plugin=plugin, filename="plugin.json", source=plugin_json)
        # Save frontend.tsx
        if frontend_tsx is not None:
            PluginSourceFile.objects.create(plugin=plugin, filename="frontend.tsx", source=frontend_tsx)
        # Save index.ts
        if index_ts is not None:
            # The original name of the file is not preserved, but this greatly simplifies the rest of the code,
            # and we don't need to model the whole filesystem (at this point)
            PluginSourceFile.objects.create(plugin=plugin, filename="index.ts", source=index_ts)

    # Source plugins have already been migrated in 0233_plugin_source_file, while local ones don't store code in the DB
    for plugin in Plugin.objects.exclude(plugin_type__in=("source", "local")):
        try:
            sync_from_plugin_archive(plugin)
        except exceptions.ValidationError as e:
            logger.warn(
                f"Migration 0243 - skipping plugin, failed to extract or save its code.",
                plugin=plugin.name,
                plugin_id=plugin.id,
                error=e,
            )
        else:
            logger.debug(
                "Migration 0243 - extracted and saved code of plugin.", plugin=plugin.name, plugin_id=plugin.id
            )

    logger.info("Migration 0243 - finished")


def reverse_func(apps, schema_editor):
    logger.info("Migration 0243 - revert started")
    PluginSourceFile = apps.get_model("posthog", "PluginSourceFile")
    PluginSourceFile.objects.exclude(plugin__plugin_type__in=("source", "local")).delete()
    logger.info("Migration 0243 - revert finished")


class Migration(migrations.Migration):

    dependencies = [
        ("posthog", "0242_team_live_events_columns"),
    ]

    operations = [
        migrations.RunPython(forwards_func, reverse_func),
    ]
