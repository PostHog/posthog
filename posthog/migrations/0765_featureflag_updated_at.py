# Generated by Django 4.2.22 on 2025-06-06 20:50

from django.db import migrations, models
import structlog

logger = structlog.get_logger(__name__)


def backfill_feature_flag_updated_at(apps, schema_editor):
    logger.info("0765_featureflag_updated_at backfill_started")

    FeatureFlag = apps.get_model("posthog", "FeatureFlag")
    ActivityLog = apps.get_model("posthog", "ActivityLog")

    all_feature_flags = FeatureFlag.objects.all().only("id", "team_id", "created_at")
    num_flags_to_update = len(all_feature_flags)
    total_updated = 0
    batch_size = 500

    for i in range(0, num_flags_to_update, batch_size):
        logger.info(f"Updating updated_at value for feature flags {i} to {i + batch_size}")
        feature_flags_in_batch = all_feature_flags[i : i + batch_size]

        for feature_flag in feature_flags_in_batch:
            try:
                last_activity_log = (
                    ActivityLog.objects.filter(
                        team_id=feature_flag.team_id, scope="FeatureFlag", item_id=feature_flag.id
                    )
                    .only("created_at")
                    .order_by("-created_at")
                    .first()
                )

                if last_activity_log:
                    feature_flag.updated_at = last_activity_log.created_at
                else:
                    feature_flag.updated_at = feature_flag.created_at

                total_updated += 1
            except Exception as e:
                logger.error(
                    "Failed to backfill FeatureFlag.updated_at value",
                    feature_flag_id=feature_flag.id,
                    team_id=feature_flag.team_id,
                    error=str(e),
                    exc_info=True,
                )
                continue

        FeatureFlag.objects.bulk_update(feature_flags_in_batch, ["updated_at"])
        logger.info(f"Successful update of feature flags {i} to {i + batch_size}")

    logger.info("0765_featureflag_updated_at backfill_completed", processed=num_flags_to_update, updated=total_updated)


class Migration(migrations.Migration):
    dependencies = [
        ("posthog", "0764_teammarketinganalyticsconfig"),
    ]

    operations = [
        migrations.AddField(
            model_name="featureflag",
            name="updated_at",
            field=models.DateTimeField(null=True),  # I manually removed auto_now=True to avoid table locks.
        ),
        migrations.RunPython(backfill_feature_flag_updated_at, reverse_code=migrations.RunPython.noop),
    ]
