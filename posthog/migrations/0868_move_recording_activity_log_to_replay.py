# Generated by Django 4.2.22 on 2025-10-05 13:16

from django.db import migrations

import structlog

logger = structlog.get_logger(__name__)


def migrate_recording_scope_to_replay(apps, schema_editor):
    ActivityLog = apps.get_model("posthog", "ActivityLog")

    logs_to_migrate = []
    batch_size = 100

    # Only update ActivityLog records where scope='recording'
    # This specifically targets comment-related activity logs
    for log in ActivityLog.objects.filter(scope="recording").only("id", "scope").iterator(chunk_size=500):
        try:
            log.scope = "Replay"
            logs_to_migrate.append(log)

            if len(logs_to_migrate) >= batch_size:
                ActivityLog.objects.bulk_update(
                    logs_to_migrate,
                    ["scope"],
                )
                print(f"Migrated {len(logs_to_migrate)} teams")  # noqa: T201
                logs_to_migrate = []
        except Exception as e:
            # If anything fails for a team, skip it and continue with others
            logger.error("replay_retention_period_migration_failed", team_id=log.id, error=str(e), exc_info=True)
            continue

    # Migrate any remaining teams
    ActivityLog.objects.bulk_update(
        logs_to_migrate,
        ["scope"],
    )


class Migration(migrations.Migration):
    dependencies = [
        ("posthog", "0867_add_updated_at_to_feature_flags"),
    ]

    operations = [
        migrations.RunPython(migrate_recording_scope_to_replay, reverse_code=migrations.RunPython.noop),
    ]
