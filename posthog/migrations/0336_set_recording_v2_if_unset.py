# Generated by Django 3.2.19 on 2023-07-06 09:53
from django.core.paginator import Paginator
from django.db import migrations

from structlog import get_logger

logger = get_logger(__name__)


def set_recording_v2_if_unset(apps, schema_editor):
    # We can't import the Team model directly as it may be a newer
    # version than this migration expects.
    Team = apps.get_model("posthog", "Team")

    # The aim is to update all teams that have not set the session_recording_version
    # this way if someone has turned v1 on _explicitly_ we don't override it
    # we can't perform a bulk update as that doesn't call any save signals
    # so the cache that decide uses would continue to serve the not-updated-version
    # for up to 5 days
    # Team.objects.filter(session_recording_version__isnull=True).update(session_recording_version="v2")

    # we need to update about 90% of teams, so we'll use a paginator to avoid
    # loading all teams into memory at once
    teams_with_no_version = Team.objects.filter(session_recording_version__isnull=True).order_by("id")
    paginator = Paginator(teams_with_no_version, 500)

    update_count = 0

    for page_number in paginator.page_range:
        page = paginator.page(page_number)
        for team in page.object_list:
            team.session_recording_version = "v2"
            team.save()
            update_count += 1

    logger.info("finished_0336_set_recording_v2_if_unset", update_count=update_count)


class Migration(migrations.Migration):

    dependencies = [
        ("posthog", "0335_alter_asyncdeletion_deletion_type"),
    ]

    operations = [
        migrations.RunPython(set_recording_v2_if_unset),
    ]
