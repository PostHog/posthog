# Generated by Django 4.2.22 on 2025-07-21 11:26

from django.db import migrations
from posthog.warehouse.models import ExternalDataSource as ExternalDataSourceModel


def forwards(apps, schema_editor):
    ExternalDataSource: ExternalDataSourceModel = apps.get_model("posthog", "ExternalDataSource")
    all_sources = ExternalDataSource.objects.all()

    for source in all_sources:
        source_type = ExternalDataSourceModel.Type(source.source_type)
        job_inputs = source.job_inputs

        if job_inputs is None:
            continue

        if source_type == ExternalDataSourceModel.Type.BIGQUERY:
            new_job_inputs = {
                "key_file": {
                    "token_uri": job_inputs["token_uri"],
                    "project_id": job_inputs["project_id"],
                    "private_key": job_inputs["private_key"],
                    "client_email": job_inputs["client_email"],
                    "private_key_id": job_inputs["private_key_id"],
                },
                "dataset_id": job_inputs["dataset_id"],
                "temporary-dataset": {
                    "enabled": job_inputs["using_temporary_dataset"],
                    "temporary_dataset_id": job_inputs["temporary_dataset_id"],
                },
                "dataset_project": {
                    "enabled": job_inputs["using_custom_dataset_project"],
                    "dataset_project_id": job_inputs["dataset_project_id"],
                },
            }
            source.job_inputs = new_job_inputs
            source.save()
        elif source_type == ExternalDataSourceModel.Type.MSSQL:
            new_job_inputs = {
                "host": job_inputs["host"],
                "port": job_inputs["port"],
                "user": job_inputs["user"],
                "schema": job_inputs["schema"],
                "database": job_inputs["database"],
                "password": job_inputs["password"],
                "ssh_tunnel": {
                    "enabled": job_inputs["ssh_tunnel_enabled"],
                    "host": job_inputs["ssh_tunnel_host"],
                    "port": job_inputs["ssh_tunnel_port"],
                    "auth_type": {
                        "selection": job_inputs["ssh_tunnel_auth_type"],
                        "username": job_inputs["ssh_tunnel_auth_type_username"],
                        "password": job_inputs["ssh_tunnel_auth_type_password"],
                        "private_key": job_inputs["ssh_tunnel_auth_type_private_key"],
                        "passphrase": job_inputs["ssh_tunnel_auth_type_passphrase"],
                    },
                },
            }
            source.job_inputs = new_job_inputs
            source.save()
        elif source_type == ExternalDataSourceModel.Type.MYSQL:
            new_job_inputs = {
                "host": job_inputs["host"],
                "port": job_inputs["port"],
                "user": job_inputs["user"],
                "schema": job_inputs["schema"],
                "database": job_inputs["database"],
                "password": job_inputs["password"],
                "using_ssl": job_inputs["using_ssl"],
                "ssh_tunnel": {
                    "enabled": job_inputs["ssh_tunnel_enabled"],
                    "host": job_inputs["ssh_tunnel_host"],
                    "port": job_inputs["ssh_tunnel_port"],
                    "auth_type": {
                        "selection": job_inputs["ssh_tunnel_auth_type"],
                        "username": job_inputs["ssh_tunnel_auth_type_username"],
                        "password": job_inputs["ssh_tunnel_auth_type_password"],
                        "private_key": job_inputs["ssh_tunnel_auth_type_private_key"],
                        "passphrase": job_inputs["ssh_tunnel_auth_type_passphrase"],
                    },
                },
            }
            source.job_inputs = new_job_inputs
            source.save()
        elif source_type == ExternalDataSourceModel.Type.POSTGRES:
            new_job_inputs = {
                "host": job_inputs["host"],
                "port": job_inputs["port"],
                "user": job_inputs["user"],
                "schema": job_inputs["schema"],
                "database": job_inputs["database"],
                "password": job_inputs["password"],
                "ssh_tunnel": {
                    "enabled": job_inputs["ssh_tunnel_enabled"],
                    "host": job_inputs["ssh_tunnel_host"],
                    "port": job_inputs["ssh_tunnel_port"],
                    "auth_type": {
                        "selection": job_inputs["ssh_tunnel_auth_type"],
                        "username": job_inputs["ssh_tunnel_auth_type_username"],
                        "password": job_inputs["ssh_tunnel_auth_type_password"],
                        "private_key": job_inputs["ssh_tunnel_auth_type_private_key"],
                        "passphrase": job_inputs["ssh_tunnel_auth_type_passphrase"],
                    },
                },
            }
            source.job_inputs = new_job_inputs
            source.save()
        elif source_type == ExternalDataSourceModel.Type.SNOWFLAKE:
            new_job_inputs = {
                "account_id": job_inputs["account_id"],
                "database": job_inputs["database"],
                "warehouse": job_inputs["warehouse"],
                "role": job_inputs["role"],
                "schema": job_inputs["schema"],
                "auth_type": {
                    "selection": job_inputs["auth_type"],
                    "user": job_inputs["user"],
                    "password": job_inputs["password"],
                    "private_key": job_inputs["private_key"],
                    "passphrase": job_inputs["passphrase"],
                },
            }
            source.job_inputs = new_job_inputs
            source.save()
        elif source_type == ExternalDataSourceModel.Type.VITALLY:
            new_job_inputs = {
                "secret_token": job_inputs["secret_token"],
                "region": {"selection": job_inputs["region"], "subdomain": job_inputs["subdomain"]},
            }
            source.job_inputs = new_job_inputs
            source.save()
        elif source_type == ExternalDataSourceModel.Type.ZENDESK:
            new_job_inputs = {
                "subdomain": job_inputs["zendesk_subdomain"],
                "api_key": job_inputs["zendesk_api_key"],
                "email_address": job_inputs["zendesk_email_address"],
            }
            source.job_inputs = new_job_inputs
            source.save()


def reverse(apps, schema_editor):
    pass


class Migration(migrations.Migration):
    dependencies = [
        ("posthog", "0802_messagecategory_category_type_and_more_fix"),
    ]

    operations = [migrations.RunPython(forwards, reverse)]
