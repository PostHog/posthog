# Generated by Django 4.2.18 on 2025-05-09 16:36

from django.db import transaction, migrations
import structlog

logger = structlog.get_logger(__name__)


def backfill_hog_function_template_fk(apps, schema_editor):
    HogFunction = apps.get_model("posthog", "HogFunction")
    HogFunctionTemplate = apps.get_model("posthog", "HogFunctionTemplate")

    batch_size = 1000
    total_processed = 0
    total_updated = 0

    total_count = HogFunction.objects.filter(template_id__isnull=False, hog_function_template__isnull=True).count()

    if total_count == 0:
        logger.info("no_records_to_update")
        return

    logger.info("starting_backfill", total_records=total_count)

    # Use keyset pagination
    last_id = 0
    batch_count = 0

    while True:
        # Query for just the batch of IDs using ORM
        query = HogFunction.objects.filter(template_id__isnull=False, hog_function_template__isnull=True).order_by("id")

        if last_id:
            query = query.filter(id__gt=last_id)

        # Get IDs for this batch
        batch_ids = list(query.values_list("id", flat=True)[:batch_size])

        if not batch_ids:
            break

        batch_updated = 0
        with transaction.atomic():
            # Get the full objects for just this batch
            batch_functions = HogFunction.objects.filter(id__in=batch_ids)

            for hog_function in batch_functions:
                if hog_function.template_id:
                    try:
                        template = HogFunctionTemplate.objects.get(template_id=hog_function.template_id)
                        hog_function.hog_function_template = template
                        hog_function.save(update_fields=["hog_function_template"])
                        batch_updated += 1
                    except HogFunctionTemplate.DoesNotExist:
                        logger.warning(
                            "no_template_found",
                            hog_function_id=str(hog_function.id),
                            template_id=hog_function.template_id,
                        )

        # Track progress
        batch_count += 1
        total_processed += len(batch_ids)
        total_updated += batch_updated
        last_id = batch_ids[-1]

        # Calculate progress percentage
        progress = (total_processed / total_count) * 100 if total_count > 0 else 100

        logger.info(
            "batch_completed",
            batch_num=batch_count,
            batch_size=len(batch_ids),
            batch_updated=batch_updated,
            processed=total_processed,
            updated=total_updated,
            total=total_count,
            progress=round(progress, 2),
        )

    logger.info("backfill_completed", processed=total_processed, updated=total_updated, total_batches=batch_count)


class Migration(migrations.Migration):
    dependencies = [
        ("posthog", "0730_add_hog_function_template_as_fk_to_hog_function"),
    ]

    operations = [
        migrations.RunPython(backfill_hog_function_template_fk, reverse_code=migrations.RunPython.noop),
    ]
