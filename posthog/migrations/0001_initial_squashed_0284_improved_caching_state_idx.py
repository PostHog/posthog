# Generated by Django 3.2.16 on 2022-12-30 21:18

import datetime
import uuid

import django.contrib.auth.models
import django.contrib.auth.validators
import django.contrib.postgres.fields
import django.contrib.postgres.fields.jsonb
import django.contrib.postgres.indexes
import django.contrib.postgres.operations
import django.core.validators
import django.db.models.deletion
import django.db.models.expressions
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models

import posthog.models.activity_logging.activity_log
import posthog.models.exported_asset
import posthog.models.organization_domain
import posthog.models.sharing_configuration
import posthog.models.team.team
import posthog.models.user
import posthog.models.utils
import posthog.utils


class Migration(migrations.Migration):

    replaces = [
        ("posthog", "0001_initial"),
        ("posthog", "0002_person"),
        ("posthog", "0003_person_is_user"),
        ("posthog", "0004_auto_20200125_0415"),
        ("posthog", "0005_remove_person_distinct_ids"),
        ("posthog", "0006_person_distinct_ids"),
        ("posthog", "0007_element"),
        ("posthog", "0008_action_actionstep"),
        ("posthog", "0009_auto_20200127_0018"),
        ("posthog", "0010_funnel_funnelstep"),
        ("posthog", "0011_auto_20200127_2105"),
        ("posthog", "0012_team_app_url"),
        ("posthog", "0013_element_attr_class"),
        ("posthog", "0014_auto_20200129_0703"),
        ("posthog", "0015_actionstep_event"),
        ("posthog", "0016_user_temporary_token"),
        ("posthog", "0017_dashboarditem"),
        ("posthog", "0018_funnel_deleted"),
        ("posthog", "0019_team_name"),
        ("posthog", "0020_auto_20200210_0212"),
        ("posthog", "0021_user_distinct_id"),
        ("posthog", "0022_action_deleted"),
        ("posthog", "0023_team_opt_out_capture"),
        ("posthog", "0024_add_event_distinct_id_index"),
        ("posthog", "0025_cohort"),
        ("posthog", "0026_auto_20200227_0804"),
        ("posthog", "0027_move_elements_to_group"),
        ("posthog", "0028_actionstep_url_matching"),
        ("posthog", "0029_migrate_dashboard_actions"),
        ("posthog", "0030_migrate_dashboard_days"),
        ("posthog", "0031_team_signup_token"),
        ("posthog", "0032_team_multiple_app_urls"),
        ("posthog", "0033_auto_20200316_1655"),
        ("posthog", "0034_pg_trgm_and_btree_20200318_1447"),
        ("posthog", "0035_current_url_index_20200318_1459"),
        ("posthog", "0036_remove_current_url_index"),
        ("posthog", "0037_action_step_url_matching_can_be_null_20200402_1351"),
        ("posthog", "0038_migrate_actions_to_precalculate_events"),
        ("posthog", "0039_populate_event_ip_property"),
        ("posthog", "0040_remove_event_ip"),
        ("posthog", "0039_user_email_opt_in"),
        ("posthog", "0041_merge_20200407_1805"),
        ("posthog", "0042_add_type_dashboarditems"),
        ("posthog", "0043_slack_webhooks"),
        ("posthog", "0044_auto_20200413_1936"),
        ("posthog", "0045_add_timestamp_index"),
        ("posthog", "0046_event_names_properties_to_team"),
        ("posthog", "0047_auto_20200416_1631"),
        ("posthog", "0048_auto_20200420_1051"),
        ("posthog", "0049_delete_funnelstep"),
        ("posthog", "0050_dashboards"),
        ("posthog", "0051_precalculate_cohorts"),
        ("posthog", "0052_data_precalculate_cohorts"),
        ("posthog", "0053_dashboard_item_layouts"),
        ("posthog", "0054_dashboard_item_color"),
        ("posthog", "0055_user_anonymize_data"),
        ("posthog", "0056_auto_20200522_1024"),
        ("posthog", "0057_action_updated_at"),
        ("posthog", "0058_dashboarditem_last_refresh"),
        ("posthog", "0059_dashboarditem_refreshing"),
        ("posthog", "0060_auto_20200616_0746"),
        ("posthog", "0061_featureflag"),
        ("posthog", "0062_team_anonymize_ips"),
        ("posthog", "0063_team_completed_snippet_onboarding"),
        ("posthog", "0064_toolbar_mode"),
        ("posthog", "0065_auto_20200624_1842"),
        ("posthog", "0066_team_created_at"),
        ("posthog", "0067_team_updated_at"),
        ("posthog", "0068_auto_20200629_1322"),
        ("posthog", "0069_auto_20200714_1642"),
        ("posthog", "0070_team_event_properties_numerical"),
        ("posthog", "0071_cache_dashboard_items"),
        ("posthog", "0072_action_step_url_matching_regex"),
        ("posthog", "0073_update_dashboard_item_filters"),
        ("posthog", "0074_toolbar_default_on"),
        ("posthog", "0075_action_slack_message_format"),
        ("posthog", "0076_auto_20200819_1214"),
        ("posthog", "0077_cohortpeople_id_to_bigautofield"),
        ("posthog", "0078_auto_20200731_1323"),
        ("posthog", "0079_move_funnels_to_insights"),
        ("posthog", "0080_update_dashboard_funnel_filters"),
        ("posthog", "0081_person_is_identified"),
        ("posthog", "0082_personalapikey"),
        ("posthog", "0083_auto_20200826_1504"),
        ("posthog", "0084_person_uuid"),
        ("posthog", "0085_org_models"),
        ("posthog", "0086_team_session_recording_opt_in"),
        ("posthog", "0087_fix_annotation_created_at"),
        ("posthog", "0088_toolbar_disabled"),
        ("posthog", "0089_auto_20201015_1031"),
        ("posthog", "0090_org_live"),
        ("posthog", "0091_messagingrecord"),
        ("posthog", "0092_rename_projects_to_default"),
        ("posthog", "0093_remove_user_is_superuser"),
        ("posthog", "0094_description_on_dashboard_items"),
        ("posthog", "0095_session_recording_event_table"),
        ("posthog", "0096_plugins"),
        ("posthog", "0097_invite_emails"),
        ("posthog", "0098_events_property_usage"),
        ("posthog", "0099_plugin_attachment"),
        ("posthog", "0100_action_step_max_length"),
        ("posthog", "0101_org_owners"),
        ("posthog", "0102_dashboarditem_filters_hash"),
        ("posthog", "0103_retention_remove_date"),
        ("posthog", "0104_auto_20201208_1052"),
        ("posthog", "0105_cohort_errors_calculating"),
        ("posthog", "0106_dashboard_item_type_to_display"),
        ("posthog", "0107_plugin_source"),
        ("posthog", "0108_plugin_organization"),
        ("posthog", "0109_fix_retention_filters"),
        ("posthog", "0110_sessionrecordingeventbyteamandtimestamp"),
        ("posthog", "0111_plugin_storage"),
        ("posthog", "0112_sessions_filter"),
        ("posthog", "0113_cohort_is_static"),
        ("posthog", "0114_fix_team_event_names"),
        ("posthog", "0115_session_recording_viewed"),
        ("posthog", "0116_session_recording_retention_period"),
        ("posthog", "0116_plugin_latest_tag"),
        ("posthog", "0117_merge_20210126_0917"),
        ("posthog", "0118_is_demo"),
        ("posthog", "0119_mandatory_plugin_order"),
        ("posthog", "0120_organization_personalization"),
        ("posthog", "0121_person_email_index"),
        ("posthog", "0122_organization_setup_section_2_completed"),
        ("posthog", "0123_organizationinvite_first_name"),
        ("posthog", "0124_unset_is_calculating_static_cohorts"),
        ("posthog", "0125_longer_webhook_url"),
        ("posthog", "0126_fix_funnels_insights_links"),
        ("posthog", "0127_stricter_team_data"),
        ("posthog", "0128_stricter_team_schema"),
        ("posthog", "0127_add_dashboard_filters"),
        ("posthog", "0129_merge_20210223_0757"),
        ("posthog", "0130_dashboard_creation_mode"),
        ("posthog", "0131_add_plugins_updated_created_at"),
        ("posthog", "0132_team_test_account_filters"),
        ("posthog", "0133_plugins_access_control"),
        ("posthog", "0134_event_site_url"),
        ("posthog", "0135_plugins_on_cloud"),
        ("posthog", "0136_global_plugin_attachments"),
        ("posthog", "0137_team_timezone"),
        ("posthog", "0138_featureflag_name_optional"),
        ("posthog", "0139_dashboard_tagging"),
        ("posthog", "0140_team_data_attributes"),
        ("posthog", "0141_events_created_at_index"),
        ("posthog", "0142_fix_team_data_attributes_default"),
        ("posthog", "0143_user_uuid"),
        ("posthog", "0144_update_django_3_1_8"),
        ("posthog", "0145_eventdefinition_propertydefinition"),
        ("posthog", "0146_eventproperty_sync"),
        ("posthog", "0147_plugin_logs"),
        ("posthog", "0147_fix_stickiness_dashboard_items"),
        ("posthog", "0148_merge_20210506_0823"),
        ("posthog", "0149_fix_lifecycle_dashboard_items"),
        ("posthog", "0150_increase_element_varchars"),
        ("posthog", "0151_plugin_preinstalled"),
        ("posthog", "0152_user_events_column_config"),
        ("posthog", "0153_plugin_capabilities"),
        ("posthog", "0154_organization_for_internal_metrics"),
        ("posthog", "0155_organization_available_features"),
        ("posthog", "0156_insight_short_id"),
        ("posthog", "0157_plugin_metrics"),
        ("posthog", "0158_new_token_format"),
        ("posthog", "0159_remove_funnels_with_breakdown"),
        ("posthog", "0160_organization_domain_whitelist"),
        ("posthog", "0161_property_defs_search"),
        ("posthog", "0162_organization_is_member_join_email_enabled"),
        ("posthog", "0163_insights_favorited_updatedat_tags"),
        ("posthog", "0164_person_index_by_team_and_id"),
        ("posthog", "0165_dashboarditem_dive_dashboard"),
        ("posthog", "0166_plugin_public_jobs"),
        ("posthog", "0167_feature_flag_override"),
        ("posthog", "0168_action_step_empty_string_reset"),
        ("posthog", "0169_person_properties_last_updated_at"),
        ("posthog", "0170_project_based_permissioning"),
        ("posthog", "0171_cohort_description"),
        ("posthog", "0172_person_properties_last_operation"),
        ("posthog", "0173_should_update_person_props_function"),
        ("posthog", "0174_organization_slug"),
        ("posthog", "0175_should_update_person_props_function"),
        ("posthog", "0176_update_person_props_function"),
        ("posthog", "0177_path_cleaning_filters"),
        ("posthog", "0178_rename_dashboard_item_to_insight"),
        ("posthog", "0179_add_group_type_mapping"),
        ("posthog", "0180_person_version"),
        ("posthog", "0181_team_correlation_config"),
        ("posthog", "0182_sessionrecordingevent_window_id"),
        ("posthog", "0183_groups_pg"),
        ("posthog", "0184_delete_sessionsfilter"),
        ("posthog", "0185_special_migrations"),
        ("posthog", "0186_insight_refresh_attempt"),
        ("posthog", "0187_stale_events"),
        ("posthog", "0188_person_distinct_id_version"),
        ("posthog", "0189_alter_annotation_scope"),
        ("posthog", "0190_experiment"),
        ("posthog", "0191_rename_specialmigration_asyncmigration"),
        ("posthog", "0192_event_properties"),
        ("posthog", "0193_auto_20211222_0912"),
        ("posthog", "0194_set_property_type_for_time"),
        ("posthog", "0195_group_type_name"),
        ("posthog", "0196_update_property_types"),
        ("posthog", "0197_plugin_is_stateless"),
        ("posthog", "0198_async_migration_error"),
        ("posthog", "0199_update_experiment_model"),
        ("posthog", "0200_insight_last_modified"),
        ("posthog", "0201_remove_property_type_format_constraint"),
        ("posthog", "0202_descriptions_for_action"),
        ("posthog", "0203_dashboard_permissions"),
        ("posthog", "0204_remove_duplicate_plugin_configs"),
        ("posthog", "0205_auto_20220204_1748"),
        ("posthog", "0206_global_tags_setup"),
        ("posthog", "0207_cohort_count"),
        ("posthog", "0208_alter_plugin_updated_at"),
        ("posthog", "0209_plugin_logs_disabled"),
        ("posthog", "0210_drop_update_person_functions"),
        ("posthog", "0211_async_migrations_errors_length"),
        ("posthog", "0212_alter_persondistinctid_team"),
        ("posthog", "0213_deprecated_old_tags"),
        ("posthog", "0214_migrate_dashboard_insight_tags"),
        ("posthog", "0215_add_tags_back"),
        ("posthog", "0216_insight_placeholder_name"),
        ("posthog", "0217_team_primary_dashboard"),
        ("posthog", "0218_uniqueness_constraint_tagged_items"),
        ("posthog", "0219_migrate_tags_v2"),
        ("posthog", "0220_backfill_primary_dashboards"),
        ("posthog", "0221_add_activity_log_model"),
        ("posthog", "0222_fix_deleted_primary_dashboards"),
        ("posthog", "0223_organizationdomain"),
        ("posthog", "0224_saml_multitenant"),
        ("posthog", "0225_insight_viewed"),
        ("posthog", "0226_longer_action_slack_message_format"),
        ("posthog", "0227_add_dashboard_tiles"),
        ("posthog", "0228_fix_tile_layouts"),
        ("posthog", "0229_add_filters_hash_to_dashboard_table"),
        ("posthog", "0230_cohort_filters"),
        ("posthog", "0231_add_refreshing_data_to_tiles"),
        ("posthog", "0232_add_team_person_display_name_properties"),
        ("posthog", "0233_plugin_source_file"),
        ("posthog", "0234_create_plugin_jsons"),
        ("posthog", "0235_plugin_source_transpilation"),
        ("posthog", "0236_add_instance_setting_model"),
        ("posthog", "0237_remove_timezone_from_teams"),
        ("posthog", "0238_exportedasset"),
        ("posthog", "0239_delete_postgres_pluginlogentry"),
        ("posthog", "0240_organizationinvite_message"),
        ("posthog", "0241_subscription"),
        ("posthog", "0242_team_live_events_columns"),
        ("posthog", "0243_unpack_plugin_source_files"),
        ("posthog", "0244_drop_should_update_person_prop"),
        ("posthog", "0245_silence_deprecated_tags_warnings"),
        ("posthog", "0246_integrations"),
        ("posthog", "0247_feature_flags_experience_continuity"),
        ("posthog", "0248_add_context_for_csv_exports"),
        ("posthog", "0249_add_sharingconfiguration"),
        ("posthog", "0250_exportedasset_created_by"),
        ("posthog", "0251_event_buffer"),
        ("posthog", "0252_reset_insight_refreshing_status"),
        ("posthog", "0253_add_async_migration_parameters"),
        ("posthog", "0254_prompt_sequence_state"),
        ("posthog", "0255_user_prompt_sequence_state"),
        ("posthog", "0256_add_async_deletion_model"),
        ("posthog", "0257_add_default_checked_for_test_filters_on_team"),
        ("posthog", "0258_team_recording_domains"),
        ("posthog", "0259_backfill_team_recording_domains"),
        ("posthog", "0260_pak_v2"),
        ("posthog", "0261_team_capture_console_log_opt_in"),
        ("posthog", "0262_track_viewed_notifications"),
        ("posthog", "0263_plugin_config_web_token"),
        ("posthog", "0264_user_partial_notification_settings"),
        ("posthog", "0265_related_tiles"),
        ("posthog", "0266_add_is_system_field_to_activity_log"),
        ("posthog", "0267_add_text_tiles"),
        ("posthog", "0268_plugin_source_file_updated_at"),
        ("posthog", "0269_soft_delete_tiles"),
        ("posthog", "0270_add_uploaded_media"),
        ("posthog", "0271_delete_promptsequencestate"),
        ("posthog", "0272_alter_organization_plugins_access_level"),
        ("posthog", "0273_mark_inactive_exports_as_finished"),
        ("posthog", "0274_add_plugin_icon_and_rewrite_urls"),
        ("posthog", "0275_feature_flag_rollback_fields"),
        ("posthog", "0276_organization_usage"),
        ("posthog", "0277_recording_playlist_model"),
        ("posthog", "0278_organization_customer_id"),
        ("posthog", "0279_recording_playlist_item_model"),
        ("posthog", "0280_fix_async_deletion_team"),
        ("posthog", "0281_create_insight_caching_state_model"),
        ("posthog", "0282_fix_insight_caching_state_model"),
        ("posthog", "0283_prompt_sequence_model"),
        ("posthog", "0284_improved_caching_state_idx"),
    ]

    dependencies = [
        ("auth", "0011_update_proxy_permissions"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                ("last_login", models.DateTimeField(blank=True, null=True, verbose_name="last login")),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={"unique": "A user with that username already exists."},
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[django.contrib.auth.validators.UnicodeUsernameValidator()],
                        verbose_name="username",
                    ),
                ),
                ("first_name", models.CharField(blank=True, max_length=30, verbose_name="first name")),
                ("last_name", models.CharField(blank=True, max_length=150, verbose_name="last name")),
                ("email", models.EmailField(blank=True, max_length=254, verbose_name="email address")),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                ("date_joined", models.DateTimeField(default=django.utils.timezone.now, verbose_name="date joined")),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.Group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.Permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Team",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("api_token", models.CharField(blank=True, max_length=200, null=True)),
                ("users", models.ManyToManyField(blank=True, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name="Event",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("event", models.CharField(blank=True, max_length=200, null=True)),
                ("properties", django.contrib.postgres.fields.jsonb.JSONField(default=dict)),
                ("elements", django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=list, null=True)),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                ("ip", models.GenericIPAddressField(blank=True, null=True)),
                ("team", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.team")),
                ("distinct_id", models.CharField(default="fake-id-that-shouldnt-exist", max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name="Action",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(blank=True, max_length=400, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
                    ),
                ),
                ("team", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.team")),
            ],
        ),
        migrations.CreateModel(
            name="ActionStep",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("tag_name", models.CharField(blank=True, max_length=400, null=True)),
                ("text", models.CharField(blank=True, max_length=400, null=True)),
                ("href", models.CharField(blank=True, max_length=400, null=True)),
                ("selector", models.CharField(blank=True, max_length=400, null=True)),
                ("url", models.CharField(blank=True, max_length=400, null=True)),
                ("name", models.CharField(blank=True, max_length=400, null=True)),
                (
                    "action",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="steps", to="posthog.action"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Funnel",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(blank=True, max_length=400, null=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
                    ),
                ),
                ("team", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.team")),
            ],
        ),
        migrations.CreateModel(
            name="Person",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("properties", django.contrib.postgres.fields.jsonb.JSONField(default=dict)),
                ("team", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.team")),
                (
                    "is_user",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Element",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("text", models.CharField(blank=True, max_length=400, null=True)),
                ("tag_name", models.CharField(blank=True, max_length=400, null=True)),
                ("href", models.CharField(blank=True, max_length=400, null=True)),
                ("attr_id", models.CharField(blank=True, max_length=400, null=True)),
                ("nth_child", models.IntegerField(blank=True, null=True)),
                ("nth_of_type", models.IntegerField(blank=True, null=True)),
                ("attributes", django.contrib.postgres.fields.jsonb.JSONField(default=dict)),
                ("order", models.IntegerField(blank=True, null=True)),
                ("event", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.event")),
            ],
        ),
        migrations.CreateModel(
            name="FunnelStep",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("order", models.IntegerField()),
                ("action", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.action")),
                (
                    "funnel",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="steps", to="posthog.funnel"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="PersonDistinctId",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("distinct_id", models.CharField(max_length=400)),
                ("person", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.person")),
                ("team", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.team")),
            ],
        ),
        migrations.AddConstraint(
            model_name="persondistinctid",
            constraint=models.UniqueConstraint(fields=("team", "distinct_id"), name="unique distinct_id for team"),
        ),
        migrations.AddField(
            model_name="team",
            name="app_url",
            field=models.CharField(blank=True, max_length=200, null=True),
        ),
        migrations.AlterModelManagers(
            name="user",
            managers=[
                ("objects", posthog.models.user.UserManager()),
            ],
        ),
        migrations.AlterField(
            model_name="user",
            name="email",
            field=models.EmailField(max_length=254, unique=True, verbose_name="email address"),
        ),
        migrations.AddField(
            model_name="actionstep",
            name="event",
            field=models.CharField(blank=True, max_length=400, null=True),
        ),
        migrations.AddField(
            model_name="user",
            name="temporary_token",
            field=models.CharField(blank=True, max_length=200, null=True),
        ),
        migrations.CreateModel(
            name="DashboardItem",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(blank=True, max_length=400, null=True)),
                ("filters", django.contrib.postgres.fields.jsonb.JSONField(default=dict)),
                ("order", models.IntegerField(blank=True, null=True)),
                ("type", models.CharField(blank=True, max_length=400, null=True)),
                ("deleted", models.BooleanField(default=False)),
                ("team", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.team")),
            ],
        ),
        migrations.AddField(
            model_name="funnel",
            name="deleted",
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name="team",
            name="name",
            field=models.CharField(blank=True, max_length=200, null=True),
        ),
        migrations.AlterField(
            model_name="event",
            name="timestamp",
            field=models.DateTimeField(blank=True, default=django.utils.timezone.now),
        ),
        migrations.AddField(
            model_name="user",
            name="distinct_id",
            field=models.CharField(blank=True, max_length=200, null=True),
        ),
        migrations.AddField(
            model_name="element",
            name="attr_class",
            field=django.contrib.postgres.fields.ArrayField(
                base_field=models.CharField(blank=True, max_length=200), blank=True, null=True, size=None
            ),
        ),
        migrations.AddField(
            model_name="action",
            name="deleted",
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name="team",
            name="opt_out_capture",
            field=models.BooleanField(default=False),
        ),
        migrations.RemoveField(
            model_name="user",
            name="username",
        ),
        migrations.CreateModel(
            name="Cohort",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(blank=True, max_length=400, null=True)),
                ("deleted", models.BooleanField(default=False)),
                ("groups", django.contrib.postgres.fields.jsonb.JSONField(default=list)),
                ("team", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.team")),
            ],
        ),
        migrations.CreateModel(
            name="ElementGroup",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("hash", models.CharField(blank=True, max_length=400, null=True, unique=True)),
            ],
        ),
        migrations.AddField(
            model_name="event",
            name="elements_hash",
            field=models.CharField(blank=True, max_length=200, null=True),
        ),
        migrations.AlterField(
            model_name="element",
            name="event",
            field=models.ForeignKey(
                blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to="posthog.event"
            ),
        ),
        migrations.AddIndex(
            model_name="event",
            index=models.Index(fields=["elements_hash"], name="posthog_eve_element_48becd_idx"),
        ),
        migrations.AddField(
            model_name="elementgroup",
            name="team",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.team"),
        ),
        migrations.AddField(
            model_name="team",
            name="signup_token",
            field=models.CharField(blank=True, max_length=200, null=True),
        ),
        migrations.AddField(
            model_name="element",
            name="group",
            field=models.ForeignKey(
                blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to="posthog.elementgroup"
            ),
        ),
        migrations.AddField(
            model_name="team",
            name="app_urls",
            field=django.contrib.postgres.fields.ArrayField(
                base_field=models.CharField(blank=True, max_length=200, null=True), default=list, size=None
            ),
        ),
        migrations.AddField(
            model_name="actionstep",
            name="url_matching",
            field=models.CharField(
                choices=[("exact", "exact"), ("contains", "contains")], default="contains", max_length=400
            ),
        ),
        migrations.RemoveField(
            model_name="team",
            name="app_url",
        ),
        migrations.AlterField(
            model_name="elementgroup",
            name="hash",
            field=models.CharField(blank=True, max_length=400, null=True),
        ),
        migrations.AddConstraint(
            model_name="elementgroup",
            constraint=models.UniqueConstraint(fields=("team", "hash"), name="unique hash for each team"),
        ),
        migrations.RemoveField(
            model_name="event",
            name="ip",
        ),
        migrations.AddField(
            model_name="user",
            name="email_opt_in",
            field=models.BooleanField(default=False),
        ),
        migrations.AlterField(
            model_name="actionstep",
            name="url_matching",
            field=models.CharField(
                blank=True,
                choices=[("exact", "exact"), ("contains", "contains")],
                default="contains",
                max_length=400,
                null=True,
            ),
        ),
        migrations.AddField(
            model_name="action",
            name="post_to_slack",
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name="team",
            name="slack_incoming_webhook",
            field=models.CharField(blank=True, max_length=200, null=True),
        ),
        migrations.AddField(
            model_name="funnel",
            name="filters",
            field=django.contrib.postgres.fields.jsonb.JSONField(default=dict),
        ),
        migrations.AddField(
            model_name="action",
            name="events",
            field=models.ManyToManyField(blank=True, to="posthog.Event"),
        ),
        migrations.AddIndex(
            model_name="event",
            index=models.Index(fields=["timestamp"], name="posthog_eve_timesta_b00cec_idx"),
        ),
        migrations.AddField(
            model_name="team",
            name="event_properties",
            field=django.contrib.postgres.fields.jsonb.JSONField(default=list),
        ),
        migrations.AddField(
            model_name="team",
            name="event_names",
            field=django.contrib.postgres.fields.jsonb.JSONField(default=list),
        ),
        migrations.AlterField(
            model_name="user",
            name="email_opt_in",
            field=models.BooleanField(blank=True, default=False, null=True),
        ),
        migrations.RemoveIndex(
            model_name="event",
            name="posthog_eve_timesta_b00cec_idx",
        ),
        migrations.AddIndex(
            model_name="event",
            index=models.Index(fields=["timestamp", "team_id", "event"], name="posthog_eve_timesta_1f6a8c_idx"),
        ),
        migrations.CreateModel(
            name="Dashboard",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(blank=True, max_length=400, null=True)),
                ("pinned", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("deleted", models.BooleanField(default=False)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL
                    ),
                ),
                ("team", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.team")),
            ],
        ),
        migrations.AddField(
            model_name="dashboarditem",
            name="dashboard",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, related_name="items", to="posthog.dashboard"
            ),
        ),
        migrations.DeleteModel(
            name="FunnelStep",
        ),
        migrations.AddField(
            model_name="cohort",
            name="created_at",
            field=models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True),
        ),
        migrations.AddField(
            model_name="cohort",
            name="created_by",
            field=models.ForeignKey(
                blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AddField(
            model_name="cohort",
            name="is_calculating",
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name="cohort",
            name="last_calculation",
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.CreateModel(
            name="CohortPeople",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("cohort", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.cohort")),
                ("person", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.person")),
            ],
        ),
        migrations.AddField(
            model_name="cohort",
            name="people",
            field=models.ManyToManyField(through="posthog.CohortPeople", to="posthog.Person"),
        ),
        migrations.AddIndex(
            model_name="cohortpeople",
            index=models.Index(fields=["cohort_id", "person_id"], name="posthog_coh_cohort__89c25f_idx"),
        ),
        migrations.AddField(
            model_name="dashboarditem",
            name="layouts",
            field=django.contrib.postgres.fields.jsonb.JSONField(default=dict),
        ),
        migrations.AddField(
            model_name="dashboarditem",
            name="color",
            field=models.CharField(blank=True, max_length=400, null=True),
        ),
        migrations.AddField(
            model_name="user",
            name="anonymize_data",
            field=models.BooleanField(blank=True, default=False, null=True),
        ),
        migrations.AddField(
            model_name="action",
            name="is_calculating",
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name="actionstep",
            name="properties",
            field=django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=list, null=True),
        ),
        migrations.AddField(
            model_name="action",
            name="updated_at",
            field=models.DateTimeField(auto_now=True),
        ),
        migrations.AddField(
            model_name="dashboarditem",
            name="last_refresh",
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="dashboarditem",
            name="refreshing",
            field=models.BooleanField(default=False),
        ),
        migrations.AlterField(
            model_name="element",
            name="href",
            field=models.CharField(blank=True, max_length=2048, null=True),
        ),
        migrations.CreateModel(
            name="FeatureFlag",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=400)),
                ("key", models.CharField(max_length=400)),
                ("filters", django.contrib.postgres.fields.jsonb.JSONField(default=dict)),
                ("rollout_percentage", models.IntegerField(blank=True, null=True)),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("deleted", models.BooleanField(default=False)),
                ("active", models.BooleanField(default=True)),
                (
                    "created_by",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
                ),
                ("team", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.team")),
            ],
        ),
        migrations.AddConstraint(
            model_name="featureflag",
            constraint=models.UniqueConstraint(fields=("team", "key"), name="unique key for team"),
        ),
        migrations.AddField(
            model_name="team",
            name="completed_snippet_onboarding",
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name="team",
            name="anonymize_ips",
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name="user",
            name="toolbar_mode",
            field=models.CharField(blank=True, default="default", max_length=200, null=True),
        ),
        migrations.AddIndex(
            model_name="action",
            index=models.Index(fields=["team_id", "-updated_at"], name="posthog_act_team_id_8c04de_idx"),
        ),
        migrations.AddField(
            model_name="team",
            name="created_at",
            field=models.DateTimeField(auto_now_add=True, default=django.utils.timezone.now),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name="team",
            name="updated_at",
            field=models.DateTimeField(auto_now=True),
        ),
        migrations.AlterField(
            model_name="user",
            name="toolbar_mode",
            field=models.CharField(
                blank=True,
                choices=[("default", "default"), ("toolbar", "toolbar")],
                default="default",
                max_length=200,
                null=True,
            ),
        ),
        migrations.AddField(
            model_name="team",
            name="event_properties_numerical",
            field=django.contrib.postgres.fields.jsonb.JSONField(default=list),
        ),
        migrations.AddField(
            model_name="dashboard",
            name="is_shared",
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name="dashboard",
            name="share_token",
            field=models.CharField(blank=True, max_length=400, null=True),
        ),
        migrations.AddField(
            model_name="dashboard",
            name="last_accessed_at",
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="dashboarditem",
            name="funnel",
            field=models.ForeignKey(
                blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to="posthog.funnel"
            ),
        ),
        migrations.AddField(
            model_name="action",
            name="last_calculated_at",
            field=models.DateTimeField(blank=True, default=django.utils.timezone.now),
        ),
        migrations.AlterField(
            model_name="user",
            name="toolbar_mode",
            field=models.CharField(
                blank=True,
                choices=[("default", "default"), ("toolbar", "toolbar")],
                default="toolbar",
                max_length=200,
                null=True,
            ),
        ),
        migrations.AddField(
            model_name="action",
            name="slack_message_format",
            field=models.CharField(blank=True, max_length=200, null=True),
        ),
        migrations.AlterField(
            model_name="cohortpeople",
            name="id",
            field=models.BigIntegerField(primary_key=True, serialize=False),
        ),
        migrations.AlterField(
            model_name="cohortpeople",
            name="id",
            field=models.BigAutoField(primary_key=True, serialize=False),
        ),
        migrations.AddField(
            model_name="dashboarditem",
            name="created_at",
            field=models.DateTimeField(auto_now_add=True, null=True),
        ),
        migrations.AddField(
            model_name="dashboarditem",
            name="created_by",
            field=models.ForeignKey(
                blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AddField(
            model_name="dashboarditem",
            name="saved",
            field=models.BooleanField(default=False),
        ),
        migrations.AlterField(
            model_name="dashboarditem",
            name="dashboard",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="items",
                to="posthog.dashboard",
            ),
        ),
        migrations.AddField(
            model_name="event",
            name="created_at",
            field=models.DateTimeField(auto_now_add=True, null=True),
        ),
        migrations.AddField(
            model_name="person",
            name="is_identified",
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name="team",
            name="ingested_event",
            field=models.BooleanField(default=False),
        ),
        migrations.AlterField(
            model_name="actionstep",
            name="url_matching",
            field=models.CharField(
                blank=True,
                choices=[("contains", "contains"), ("regex", "regex"), ("exact", "exact")],
                default="contains",
                max_length=400,
                null=True,
            ),
        ),
        migrations.AddField(
            model_name="team",
            name="uuid",
            field=models.UUIDField(default=posthog.models.utils.UUIDT, editable=False, unique=True),
        ),
        migrations.AddField(
            model_name="person",
            name="uuid",
            field=models.UUIDField(db_index=True, default=uuid.uuid4, editable=False),
        ),
        migrations.CreateModel(
            name="Organization",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=posthog.models.utils.UUIDT, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("name", models.CharField(max_length=64)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="user",
            name="current_team",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="teams_currently+",
                to="posthog.team",
            ),
        ),
        migrations.CreateModel(
            name="PersonalAPIKey",
            fields=[
                (
                    "id",
                    models.CharField(
                        default=posthog.models.utils.generate_random_token,
                        max_length=50,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("label", models.CharField(max_length=40)),
                (
                    "value",
                    models.CharField(
                        default=posthog.models.utils.generate_random_token, editable=False, max_length=50, unique=True
                    ),
                ),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("last_used_at", models.DateTimeField(blank=True, null=True)),
                (
                    "team",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="personal_api_keys",
                        to="posthog.team",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="personal_api_keys",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.AlterField(
            model_name="team",
            name="api_token",
            field=models.CharField(default=posthog.models.utils.generate_random_token, max_length=200, null=True),
        ),
        migrations.AlterField(
            model_name="team",
            name="name",
            field=models.CharField(default="Default", max_length=200, null=True),
        ),
        migrations.AlterField(
            model_name="user",
            name="distinct_id",
            field=models.CharField(blank=True, max_length=200, null=True, unique=True),
        ),
        migrations.AlterField(
            model_name="user",
            name="temporary_token",
            field=models.CharField(blank=True, max_length=200, null=True, unique=True),
        ),
        migrations.CreateModel(
            name="OrganizationMembership",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=posthog.models.utils.UUIDT, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("level", models.PositiveSmallIntegerField(choices=[(1, "member"), (8, "administrator")], default=1)),
                ("joined_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "organization",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="memberships",
                        related_query_name="membership",
                        to="posthog.organization",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="organization_memberships",
                        related_query_name="organization_membership",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="OrganizationInvite",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=posthog.models.utils.UUIDT, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("uses", models.PositiveIntegerField(default=0)),
                ("max_uses", models.PositiveIntegerField(blank=True, default=None, null=True)),
                ("target_email", models.EmailField(blank=True, db_index=True, default=None, max_length=254, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="organization_invites",
                        related_query_name="organization_invite",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "last_used_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "organization",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="invites",
                        related_query_name="invite",
                        to="posthog.organization",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="organization",
            name="members",
            field=models.ManyToManyField(
                related_name="organizations",
                related_query_name="organization",
                through="posthog.OrganizationMembership",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.CreateModel(
            name="Annotation",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("content", models.CharField(blank=True, max_length=400, null=True)),
                ("created_at", models.DateTimeField(blank=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "creation_type",
                    models.CharField(choices=[("USR", "user"), ("GIT", "GitHub")], default="USR", max_length=3),
                ),
                ("apply_all", models.BooleanField(null=True)),
                ("deleted", models.BooleanField(default=False)),
                ("date_marker", models.DateTimeField(blank=True, null=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL
                    ),
                ),
                (
                    "dashboard_item",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to="posthog.dashboarditem"
                    ),
                ),
                ("team", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.team")),
                (
                    "scope",
                    models.CharField(
                        choices=[
                            ("dashboard_item", "dashboard item"),
                            ("project", "project"),
                            ("organization", "organization"),
                        ],
                        default="dashboard_item",
                        max_length=24,
                    ),
                ),
                (
                    "organization",
                    models.ForeignKey(
                        null=True, on_delete=django.db.models.deletion.CASCADE, to="posthog.organization"
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="team",
            name="organization",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="teams",
                related_query_name="team",
                to="posthog.organization",
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="current_organization",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="users_currently+",
                to="posthog.organization",
            ),
        ),
        migrations.AddConstraint(
            model_name="organizationmembership",
            constraint=models.UniqueConstraint(
                fields=("organization_id", "user_id"), name="unique_organization_membership"
            ),
        ),
        migrations.AddConstraint(
            model_name="organizationinvite",
            constraint=models.CheckConstraint(
                check=models.Q(("uses__lte", django.db.models.expressions.F("max_uses"))), name="max_uses_respected"
            ),
        ),
        migrations.AlterField(
            model_name="annotation",
            name="created_at",
            field=models.DateTimeField(default=django.utils.timezone.now, null=True),
        ),
        migrations.AlterField(
            model_name="user",
            name="toolbar_mode",
            field=models.CharField(
                blank=True,
                choices=[("disabled", "disabled"), ("toolbar", "toolbar")],
                default="toolbar",
                max_length=200,
                null=True,
            ),
        ),
        migrations.AddField(
            model_name="team",
            name="session_recording_opt_in",
            field=models.BooleanField(default=False),
        ),
        migrations.AlterField(
            model_name="action",
            name="slack_message_format",
            field=models.CharField(blank=True, default="", max_length=200),
        ),
        migrations.AlterField(
            model_name="personalapikey",
            name="team",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="personal_api_keys+",
                to="posthog.team",
            ),
        ),
        migrations.AlterField(
            model_name="team",
            name="api_token",
            field=models.CharField(
                default=posthog.models.utils.generate_random_token, max_length=200, null=True, unique=True
            ),
        ),
        migrations.AlterField(
            model_name="team",
            name="users",
            field=models.ManyToManyField(
                blank=True, related_name="teams_deprecated_relationship", to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AlterField(
            model_name="person",
            name="uuid",
            field=models.UUIDField(db_index=True, default=posthog.models.utils.UUIDT, editable=False),
        ),
        migrations.AlterField(
            model_name="team",
            name="name",
            field=models.CharField(default="Default Project", max_length=200, null=True),
        ),
        migrations.RemoveConstraint(
            model_name="organizationinvite",
            name="max_uses_respected",
        ),
        migrations.RemoveField(
            model_name="organizationinvite",
            name="max_uses",
        ),
        migrations.RemoveField(
            model_name="organizationinvite",
            name="uses",
        ),
        migrations.AlterField(
            model_name="organizationinvite",
            name="target_email",
            field=models.EmailField(db_index=True, max_length=254, null=True),
        ),
        migrations.CreateModel(
            name="MessagingRecord",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=posthog.models.utils.UUIDT, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("email_hash", models.CharField(max_length=1024)),
                ("campaign_key", models.CharField(max_length=128)),
                ("sent_at", models.DateTimeField(null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "unique_together": {("email_hash", "campaign_key")},
            },
        ),
        migrations.RemoveField(
            model_name="organizationinvite",
            name="last_used_by",
        ),
        migrations.RemoveField(
            model_name="user",
            name="is_superuser",
        ),
        migrations.AddField(
            model_name="dashboarditem",
            name="description",
            field=models.CharField(blank=True, max_length=400, null=True),
        ),
        migrations.AddField(
            model_name="dashboarditem",
            name="is_sample",
            field=models.BooleanField(default=False),
        ),
        migrations.CreateModel(
            name="SessionRecordingEvent",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("timestamp", models.DateTimeField(blank=True, default=django.utils.timezone.now)),
                ("session_id", models.CharField(max_length=200)),
                ("distinct_id", models.CharField(max_length=200)),
                ("snapshot_data", django.contrib.postgres.fields.jsonb.JSONField(default=dict)),
                ("team", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.team")),
            ],
        ),
        migrations.AddIndex(
            model_name="sessionrecordingevent",
            index=models.Index(fields=["team_id", "session_id"], name="posthog_ses_team_id_265946_idx"),
        ),
        migrations.AddIndex(
            model_name="sessionrecordingevent",
            index=models.Index(
                fields=["team_id", "distinct_id", "timestamp", "session_id"], name="posthog_ses_team_id_46392f_idx"
            ),
        ),
        migrations.CreateModel(
            name="Plugin",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(blank=True, max_length=200, null=True)),
                ("description", models.TextField(blank=True, null=True)),
                ("url", models.CharField(blank=True, max_length=800, null=True)),
                ("config_schema", django.contrib.postgres.fields.jsonb.JSONField(default=dict)),
                ("tag", models.CharField(blank=True, max_length=200, null=True)),
                ("archive", models.BinaryField(blank=True, null=True)),
                ("from_json", models.BooleanField(default=False)),
                ("from_web", models.BooleanField(default=False)),
                ("error", django.contrib.postgres.fields.jsonb.JSONField(default=None, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="PluginConfig",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("enabled", models.BooleanField(default=False)),
                ("order", models.IntegerField(blank=True, null=True)),
                ("config", django.contrib.postgres.fields.jsonb.JSONField(default=dict)),
                ("error", django.contrib.postgres.fields.jsonb.JSONField(default=None, null=True)),
                ("plugin", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.plugin")),
                ("team", models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to="posthog.team")),
            ],
        ),
        migrations.AddField(
            model_name="team",
            name="plugins_opt_in",
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name="organizationinvite",
            name="emailing_attempt_made",
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name="team",
            name="event_names_with_usage",
            field=django.contrib.postgres.fields.jsonb.JSONField(default=list),
        ),
        migrations.AddField(
            model_name="team",
            name="event_properties_with_usage",
            field=django.contrib.postgres.fields.jsonb.JSONField(default=list),
        ),
        migrations.CreateModel(
            name="PluginAttachment",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("key", models.CharField(max_length=200)),
                ("content_type", models.CharField(max_length=200)),
                ("file_name", models.CharField(max_length=200)),
                ("file_size", models.IntegerField()),
                ("contents", models.BinaryField()),
                (
                    "plugin_config",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.pluginconfig"),
                ),
                ("team", models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to="posthog.team")),
            ],
        ),
        migrations.AlterField(
            model_name="actionstep",
            name="href",
            field=models.CharField(blank=True, max_length=65535, null=True),
        ),
        migrations.AlterField(
            model_name="actionstep",
            name="selector",
            field=models.CharField(blank=True, max_length=65535, null=True),
        ),
        migrations.AlterField(
            model_name="actionstep",
            name="url",
            field=models.CharField(blank=True, max_length=65535, null=True),
        ),
        migrations.AlterField(
            model_name="organizationmembership",
            name="level",
            field=models.PositiveSmallIntegerField(
                choices=[(1, "member"), (8, "administrator"), (15, "owner")], default=1
            ),
        ),
        migrations.AddConstraint(
            model_name="organizationmembership",
            constraint=models.UniqueConstraint(
                condition=models.Q(("level", 15)), fields=("organization_id",), name="only_one_owner_per_organization"
            ),
        ),
        migrations.AddField(
            model_name="dashboarditem",
            name="filters_hash",
            field=models.CharField(blank=True, max_length=400, null=True),
        ),
        migrations.AlterField(
            model_name="dashboarditem",
            name="funnel",
            field=models.IntegerField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="cohort",
            name="errors_calculating",
            field=models.IntegerField(default=0),
        ),
        migrations.AddField(
            model_name="plugin",
            name="plugin_type",
            field=models.CharField(
                blank=True,
                choices=[("local", "local"), ("custom", "custom"), ("repository", "repository"), ("source", "source")],
                default=None,
                max_length=200,
                null=True,
            ),
        ),
        migrations.AddField(
            model_name="plugin",
            name="source",
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="plugin",
            name="organization",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="plugins",
                related_query_name="plugin",
                to="posthog.organization",
            ),
        ),
        migrations.DeleteModel(
            name="Funnel",
        ),
        migrations.CreateModel(
            name="PluginStorage",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("key", models.CharField(max_length=200)),
                ("value", models.TextField(blank=True, null=True)),
                (
                    "plugin_config",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.pluginconfig"),
                ),
            ],
        ),
        migrations.AddConstraint(
            model_name="pluginstorage",
            constraint=models.UniqueConstraint(
                fields=("plugin_config_id", "key"), name="posthog_unique_plugin_storage_key"
            ),
        ),
        migrations.CreateModel(
            name="SessionsFilter",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(blank=True, max_length=400)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("filters", django.contrib.postgres.fields.jsonb.JSONField(default=dict)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL
                    ),
                ),
                ("team", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.team")),
            ],
        ),
        migrations.AddIndex(
            model_name="sessionsfilter",
            index=models.Index(fields=["team_id", "name"], name="posthog_ses_team_id_453d24_idx"),
        ),
        migrations.AddField(
            model_name="cohort",
            name="is_static",
            field=models.BooleanField(default=False),
        ),
        migrations.CreateModel(
            name="SessionRecordingViewed",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("session_id", models.CharField(max_length=200)),
                ("team", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.team")),
                ("user", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddIndex(
            model_name="sessionrecordingviewed",
            index=models.Index(fields=["team_id", "user_id", "session_id"], name="posthog_ses_team_id_465af1_idx"),
        ),
        migrations.AddField(
            model_name="team",
            name="session_recording_retention_period_days",
            field=models.IntegerField(default=None, null=True),
        ),
        migrations.AddField(
            model_name="plugin",
            name="latest_tag",
            field=models.CharField(blank=True, max_length=800, null=True),
        ),
        migrations.AddField(
            model_name="plugin",
            name="latest_tag_checked_at",
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="team",
            name="is_demo",
            field=models.BooleanField(default=False),
        ),
        migrations.AlterUniqueTogether(
            name="sessionrecordingviewed",
            unique_together={("team_id", "user_id", "session_id")},
        ),
        migrations.AlterField(
            model_name="pluginconfig",
            name="order",
            field=models.IntegerField(default=0),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name="organization",
            name="personalization",
            field=django.contrib.postgres.fields.jsonb.JSONField(default=dict),
        ),
        migrations.RunSQL(
            sql="CREATE INDEX IF NOT EXISTS posthog_person_email ON posthog_person((properties->>'email'));",
            reverse_sql='DROP INDEX "posthog_person_email";',
        ),
        migrations.AddField(
            model_name="organization",
            name="setup_section_2_completed",
            field=models.BooleanField(default=True),
        ),
        migrations.AlterField(
            model_name="team",
            name="name",
            field=models.CharField(
                default="Default Project",
                max_length=200,
                validators=[django.core.validators.MinLengthValidator(1, "Project must have a name!")],
            ),
        ),
        migrations.AlterField(
            model_name="team",
            name="organization",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="teams",
                related_query_name="team",
                to="posthog.organization",
            ),
        ),
        migrations.AddField(
            model_name="plugin",
            name="created_at",
            field=models.DateTimeField(auto_now_add=True, default=datetime.datetime(2020, 1, 1, 0, 0)),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name="plugin",
            name="updated_at",
            field=models.DateTimeField(auto_now=True),
        ),
        migrations.AddField(
            model_name="pluginconfig",
            name="created_at",
            field=models.DateTimeField(auto_now_add=True, default=datetime.datetime(2020, 1, 1, 0, 0)),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name="pluginconfig",
            name="updated_at",
            field=models.DateTimeField(auto_now=True),
        ),
        migrations.AlterField(
            model_name="team",
            name="slack_incoming_webhook",
            field=models.CharField(blank=True, max_length=500, null=True),
        ),
        migrations.AddField(
            model_name="plugin",
            name="is_global",
            field=models.BooleanField(default=False),
        ),
        migrations.AlterField(
            model_name="organization",
            name="personalization",
            field=django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict),
        ),
        migrations.AlterField(
            model_name="team",
            name="app_urls",
            field=django.contrib.postgres.fields.ArrayField(
                base_field=models.CharField(max_length=200, null=True), blank=True, default=list, size=None
            ),
        ),
        migrations.AlterField(
            model_name="team",
            name="session_recording_retention_period_days",
            field=models.IntegerField(blank=True, default=None, null=True),
        ),
        migrations.AddField(
            model_name="event",
            name="site_url",
            field=models.CharField(blank=True, max_length=200, null=True),
        ),
        migrations.AddField(
            model_name="organization",
            name="plugins_access_level",
            field=models.PositiveSmallIntegerField(
                choices=[(0, "none"), (3, "config"), (6, "install"), (9, "root")], default=9
            ),
        ),
        migrations.AlterField(
            model_name="pluginattachment",
            name="plugin_config",
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to="posthog.pluginconfig"),
        ),
        migrations.AlterField(
            model_name="featureflag",
            name="name",
            field=models.TextField(blank=True),
        ),
        migrations.AddField(
            model_name="dashboard",
            name="description",
            field=models.TextField(blank=True),
        ),
        migrations.AddField(
            model_name="dashboard",
            name="tags",
            field=django.contrib.postgres.fields.ArrayField(
                base_field=models.CharField(max_length=32), blank=True, default=list, size=None
            ),
        ),
        migrations.AddField(
            model_name="organizationinvite",
            name="first_name",
            field=models.CharField(blank=True, default="", max_length=30),
        ),
        migrations.AddField(
            model_name="team",
            name="timezone",
            field=models.CharField(
                choices=[
                    ("Africa/Abidjan", "Africa/Abidjan"),
                    ("Africa/Accra", "Africa/Accra"),
                    ("Africa/Addis_Ababa", "Africa/Addis_Ababa"),
                    ("Africa/Algiers", "Africa/Algiers"),
                    ("Africa/Asmara", "Africa/Asmara"),
                    ("Africa/Bamako", "Africa/Bamako"),
                    ("Africa/Bangui", "Africa/Bangui"),
                    ("Africa/Banjul", "Africa/Banjul"),
                    ("Africa/Bissau", "Africa/Bissau"),
                    ("Africa/Blantyre", "Africa/Blantyre"),
                    ("Africa/Brazzaville", "Africa/Brazzaville"),
                    ("Africa/Bujumbura", "Africa/Bujumbura"),
                    ("Africa/Cairo", "Africa/Cairo"),
                    ("Africa/Casablanca", "Africa/Casablanca"),
                    ("Africa/Ceuta", "Africa/Ceuta"),
                    ("Africa/Conakry", "Africa/Conakry"),
                    ("Africa/Dakar", "Africa/Dakar"),
                    ("Africa/Dar_es_Salaam", "Africa/Dar_es_Salaam"),
                    ("Africa/Djibouti", "Africa/Djibouti"),
                    ("Africa/Douala", "Africa/Douala"),
                    ("Africa/El_Aaiun", "Africa/El_Aaiun"),
                    ("Africa/Freetown", "Africa/Freetown"),
                    ("Africa/Gaborone", "Africa/Gaborone"),
                    ("Africa/Harare", "Africa/Harare"),
                    ("Africa/Johannesburg", "Africa/Johannesburg"),
                    ("Africa/Juba", "Africa/Juba"),
                    ("Africa/Kampala", "Africa/Kampala"),
                    ("Africa/Khartoum", "Africa/Khartoum"),
                    ("Africa/Kigali", "Africa/Kigali"),
                    ("Africa/Kinshasa", "Africa/Kinshasa"),
                    ("Africa/Lagos", "Africa/Lagos"),
                    ("Africa/Libreville", "Africa/Libreville"),
                    ("Africa/Lome", "Africa/Lome"),
                    ("Africa/Luanda", "Africa/Luanda"),
                    ("Africa/Lubumbashi", "Africa/Lubumbashi"),
                    ("Africa/Lusaka", "Africa/Lusaka"),
                    ("Africa/Malabo", "Africa/Malabo"),
                    ("Africa/Maputo", "Africa/Maputo"),
                    ("Africa/Maseru", "Africa/Maseru"),
                    ("Africa/Mbabane", "Africa/Mbabane"),
                    ("Africa/Mogadishu", "Africa/Mogadishu"),
                    ("Africa/Monrovia", "Africa/Monrovia"),
                    ("Africa/Nairobi", "Africa/Nairobi"),
                    ("Africa/Ndjamena", "Africa/Ndjamena"),
                    ("Africa/Niamey", "Africa/Niamey"),
                    ("Africa/Nouakchott", "Africa/Nouakchott"),
                    ("Africa/Ouagadougou", "Africa/Ouagadougou"),
                    ("Africa/Porto-Novo", "Africa/Porto-Novo"),
                    ("Africa/Sao_Tome", "Africa/Sao_Tome"),
                    ("Africa/Tripoli", "Africa/Tripoli"),
                    ("Africa/Tunis", "Africa/Tunis"),
                    ("Africa/Windhoek", "Africa/Windhoek"),
                    ("America/Adak", "America/Adak"),
                    ("America/Anchorage", "America/Anchorage"),
                    ("America/Anguilla", "America/Anguilla"),
                    ("America/Antigua", "America/Antigua"),
                    ("America/Araguaina", "America/Araguaina"),
                    ("America/Argentina/Buenos_Aires", "America/Argentina/Buenos_Aires"),
                    ("America/Argentina/Catamarca", "America/Argentina/Catamarca"),
                    ("America/Argentina/Cordoba", "America/Argentina/Cordoba"),
                    ("America/Argentina/Jujuy", "America/Argentina/Jujuy"),
                    ("America/Argentina/La_Rioja", "America/Argentina/La_Rioja"),
                    ("America/Argentina/Mendoza", "America/Argentina/Mendoza"),
                    ("America/Argentina/Rio_Gallegos", "America/Argentina/Rio_Gallegos"),
                    ("America/Argentina/Salta", "America/Argentina/Salta"),
                    ("America/Argentina/San_Juan", "America/Argentina/San_Juan"),
                    ("America/Argentina/San_Luis", "America/Argentina/San_Luis"),
                    ("America/Argentina/Tucuman", "America/Argentina/Tucuman"),
                    ("America/Argentina/Ushuaia", "America/Argentina/Ushuaia"),
                    ("America/Aruba", "America/Aruba"),
                    ("America/Asuncion", "America/Asuncion"),
                    ("America/Atikokan", "America/Atikokan"),
                    ("America/Bahia", "America/Bahia"),
                    ("America/Bahia_Banderas", "America/Bahia_Banderas"),
                    ("America/Barbados", "America/Barbados"),
                    ("America/Belem", "America/Belem"),
                    ("America/Belize", "America/Belize"),
                    ("America/Blanc-Sablon", "America/Blanc-Sablon"),
                    ("America/Boa_Vista", "America/Boa_Vista"),
                    ("America/Bogota", "America/Bogota"),
                    ("America/Boise", "America/Boise"),
                    ("America/Cambridge_Bay", "America/Cambridge_Bay"),
                    ("America/Campo_Grande", "America/Campo_Grande"),
                    ("America/Cancun", "America/Cancun"),
                    ("America/Caracas", "America/Caracas"),
                    ("America/Cayenne", "America/Cayenne"),
                    ("America/Cayman", "America/Cayman"),
                    ("America/Chicago", "America/Chicago"),
                    ("America/Chihuahua", "America/Chihuahua"),
                    ("America/Costa_Rica", "America/Costa_Rica"),
                    ("America/Creston", "America/Creston"),
                    ("America/Cuiaba", "America/Cuiaba"),
                    ("America/Curacao", "America/Curacao"),
                    ("America/Danmarkshavn", "America/Danmarkshavn"),
                    ("America/Dawson", "America/Dawson"),
                    ("America/Dawson_Creek", "America/Dawson_Creek"),
                    ("America/Denver", "America/Denver"),
                    ("America/Detroit", "America/Detroit"),
                    ("America/Dominica", "America/Dominica"),
                    ("America/Edmonton", "America/Edmonton"),
                    ("America/Eirunepe", "America/Eirunepe"),
                    ("America/El_Salvador", "America/El_Salvador"),
                    ("America/Fort_Nelson", "America/Fort_Nelson"),
                    ("America/Fortaleza", "America/Fortaleza"),
                    ("America/Glace_Bay", "America/Glace_Bay"),
                    ("America/Goose_Bay", "America/Goose_Bay"),
                    ("America/Grand_Turk", "America/Grand_Turk"),
                    ("America/Grenada", "America/Grenada"),
                    ("America/Guadeloupe", "America/Guadeloupe"),
                    ("America/Guatemala", "America/Guatemala"),
                    ("America/Guayaquil", "America/Guayaquil"),
                    ("America/Guyana", "America/Guyana"),
                    ("America/Halifax", "America/Halifax"),
                    ("America/Havana", "America/Havana"),
                    ("America/Hermosillo", "America/Hermosillo"),
                    ("America/Indiana/Indianapolis", "America/Indiana/Indianapolis"),
                    ("America/Indiana/Knox", "America/Indiana/Knox"),
                    ("America/Indiana/Marengo", "America/Indiana/Marengo"),
                    ("America/Indiana/Petersburg", "America/Indiana/Petersburg"),
                    ("America/Indiana/Tell_City", "America/Indiana/Tell_City"),
                    ("America/Indiana/Vevay", "America/Indiana/Vevay"),
                    ("America/Indiana/Vincennes", "America/Indiana/Vincennes"),
                    ("America/Indiana/Winamac", "America/Indiana/Winamac"),
                    ("America/Inuvik", "America/Inuvik"),
                    ("America/Iqaluit", "America/Iqaluit"),
                    ("America/Jamaica", "America/Jamaica"),
                    ("America/Juneau", "America/Juneau"),
                    ("America/Kentucky/Louisville", "America/Kentucky/Louisville"),
                    ("America/Kentucky/Monticello", "America/Kentucky/Monticello"),
                    ("America/Kralendijk", "America/Kralendijk"),
                    ("America/La_Paz", "America/La_Paz"),
                    ("America/Lima", "America/Lima"),
                    ("America/Los_Angeles", "America/Los_Angeles"),
                    ("America/Lower_Princes", "America/Lower_Princes"),
                    ("America/Maceio", "America/Maceio"),
                    ("America/Managua", "America/Managua"),
                    ("America/Manaus", "America/Manaus"),
                    ("America/Marigot", "America/Marigot"),
                    ("America/Martinique", "America/Martinique"),
                    ("America/Matamoros", "America/Matamoros"),
                    ("America/Mazatlan", "America/Mazatlan"),
                    ("America/Menominee", "America/Menominee"),
                    ("America/Merida", "America/Merida"),
                    ("America/Metlakatla", "America/Metlakatla"),
                    ("America/Mexico_City", "America/Mexico_City"),
                    ("America/Miquelon", "America/Miquelon"),
                    ("America/Moncton", "America/Moncton"),
                    ("America/Monterrey", "America/Monterrey"),
                    ("America/Montevideo", "America/Montevideo"),
                    ("America/Montserrat", "America/Montserrat"),
                    ("America/Nassau", "America/Nassau"),
                    ("America/New_York", "America/New_York"),
                    ("America/Nipigon", "America/Nipigon"),
                    ("America/Nome", "America/Nome"),
                    ("America/Noronha", "America/Noronha"),
                    ("America/North_Dakota/Beulah", "America/North_Dakota/Beulah"),
                    ("America/North_Dakota/Center", "America/North_Dakota/Center"),
                    ("America/North_Dakota/New_Salem", "America/North_Dakota/New_Salem"),
                    ("America/Nuuk", "America/Nuuk"),
                    ("America/Ojinaga", "America/Ojinaga"),
                    ("America/Panama", "America/Panama"),
                    ("America/Pangnirtung", "America/Pangnirtung"),
                    ("America/Paramaribo", "America/Paramaribo"),
                    ("America/Phoenix", "America/Phoenix"),
                    ("America/Port-au-Prince", "America/Port-au-Prince"),
                    ("America/Port_of_Spain", "America/Port_of_Spain"),
                    ("America/Porto_Velho", "America/Porto_Velho"),
                    ("America/Puerto_Rico", "America/Puerto_Rico"),
                    ("America/Punta_Arenas", "America/Punta_Arenas"),
                    ("America/Rainy_River", "America/Rainy_River"),
                    ("America/Rankin_Inlet", "America/Rankin_Inlet"),
                    ("America/Recife", "America/Recife"),
                    ("America/Regina", "America/Regina"),
                    ("America/Resolute", "America/Resolute"),
                    ("America/Rio_Branco", "America/Rio_Branco"),
                    ("America/Santarem", "America/Santarem"),
                    ("America/Santiago", "America/Santiago"),
                    ("America/Santo_Domingo", "America/Santo_Domingo"),
                    ("America/Sao_Paulo", "America/Sao_Paulo"),
                    ("America/Scoresbysund", "America/Scoresbysund"),
                    ("America/Sitka", "America/Sitka"),
                    ("America/St_Barthelemy", "America/St_Barthelemy"),
                    ("America/St_Johns", "America/St_Johns"),
                    ("America/St_Kitts", "America/St_Kitts"),
                    ("America/St_Lucia", "America/St_Lucia"),
                    ("America/St_Thomas", "America/St_Thomas"),
                    ("America/St_Vincent", "America/St_Vincent"),
                    ("America/Swift_Current", "America/Swift_Current"),
                    ("America/Tegucigalpa", "America/Tegucigalpa"),
                    ("America/Thule", "America/Thule"),
                    ("America/Thunder_Bay", "America/Thunder_Bay"),
                    ("America/Tijuana", "America/Tijuana"),
                    ("America/Toronto", "America/Toronto"),
                    ("America/Tortola", "America/Tortola"),
                    ("America/Vancouver", "America/Vancouver"),
                    ("America/Whitehorse", "America/Whitehorse"),
                    ("America/Winnipeg", "America/Winnipeg"),
                    ("America/Yakutat", "America/Yakutat"),
                    ("America/Yellowknife", "America/Yellowknife"),
                    ("Antarctica/Casey", "Antarctica/Casey"),
                    ("Antarctica/Davis", "Antarctica/Davis"),
                    ("Antarctica/DumontDUrville", "Antarctica/DumontDUrville"),
                    ("Antarctica/Macquarie", "Antarctica/Macquarie"),
                    ("Antarctica/Mawson", "Antarctica/Mawson"),
                    ("Antarctica/McMurdo", "Antarctica/McMurdo"),
                    ("Antarctica/Palmer", "Antarctica/Palmer"),
                    ("Antarctica/Rothera", "Antarctica/Rothera"),
                    ("Antarctica/Syowa", "Antarctica/Syowa"),
                    ("Antarctica/Troll", "Antarctica/Troll"),
                    ("Antarctica/Vostok", "Antarctica/Vostok"),
                    ("Arctic/Longyearbyen", "Arctic/Longyearbyen"),
                    ("Asia/Aden", "Asia/Aden"),
                    ("Asia/Almaty", "Asia/Almaty"),
                    ("Asia/Amman", "Asia/Amman"),
                    ("Asia/Anadyr", "Asia/Anadyr"),
                    ("Asia/Aqtau", "Asia/Aqtau"),
                    ("Asia/Aqtobe", "Asia/Aqtobe"),
                    ("Asia/Ashgabat", "Asia/Ashgabat"),
                    ("Asia/Atyrau", "Asia/Atyrau"),
                    ("Asia/Baghdad", "Asia/Baghdad"),
                    ("Asia/Bahrain", "Asia/Bahrain"),
                    ("Asia/Baku", "Asia/Baku"),
                    ("Asia/Bangkok", "Asia/Bangkok"),
                    ("Asia/Barnaul", "Asia/Barnaul"),
                    ("Asia/Beirut", "Asia/Beirut"),
                    ("Asia/Bishkek", "Asia/Bishkek"),
                    ("Asia/Brunei", "Asia/Brunei"),
                    ("Asia/Chita", "Asia/Chita"),
                    ("Asia/Choibalsan", "Asia/Choibalsan"),
                    ("Asia/Colombo", "Asia/Colombo"),
                    ("Asia/Damascus", "Asia/Damascus"),
                    ("Asia/Dhaka", "Asia/Dhaka"),
                    ("Asia/Dili", "Asia/Dili"),
                    ("Asia/Dubai", "Asia/Dubai"),
                    ("Asia/Dushanbe", "Asia/Dushanbe"),
                    ("Asia/Famagusta", "Asia/Famagusta"),
                    ("Asia/Gaza", "Asia/Gaza"),
                    ("Asia/Hebron", "Asia/Hebron"),
                    ("Asia/Ho_Chi_Minh", "Asia/Ho_Chi_Minh"),
                    ("Asia/Hong_Kong", "Asia/Hong_Kong"),
                    ("Asia/Hovd", "Asia/Hovd"),
                    ("Asia/Irkutsk", "Asia/Irkutsk"),
                    ("Asia/Jakarta", "Asia/Jakarta"),
                    ("Asia/Jayapura", "Asia/Jayapura"),
                    ("Asia/Jerusalem", "Asia/Jerusalem"),
                    ("Asia/Kabul", "Asia/Kabul"),
                    ("Asia/Kamchatka", "Asia/Kamchatka"),
                    ("Asia/Karachi", "Asia/Karachi"),
                    ("Asia/Kathmandu", "Asia/Kathmandu"),
                    ("Asia/Khandyga", "Asia/Khandyga"),
                    ("Asia/Kolkata", "Asia/Kolkata"),
                    ("Asia/Krasnoyarsk", "Asia/Krasnoyarsk"),
                    ("Asia/Kuala_Lumpur", "Asia/Kuala_Lumpur"),
                    ("Asia/Kuching", "Asia/Kuching"),
                    ("Asia/Kuwait", "Asia/Kuwait"),
                    ("Asia/Macau", "Asia/Macau"),
                    ("Asia/Magadan", "Asia/Magadan"),
                    ("Asia/Makassar", "Asia/Makassar"),
                    ("Asia/Manila", "Asia/Manila"),
                    ("Asia/Muscat", "Asia/Muscat"),
                    ("Asia/Nicosia", "Asia/Nicosia"),
                    ("Asia/Novokuznetsk", "Asia/Novokuznetsk"),
                    ("Asia/Novosibirsk", "Asia/Novosibirsk"),
                    ("Asia/Omsk", "Asia/Omsk"),
                    ("Asia/Oral", "Asia/Oral"),
                    ("Asia/Phnom_Penh", "Asia/Phnom_Penh"),
                    ("Asia/Pontianak", "Asia/Pontianak"),
                    ("Asia/Pyongyang", "Asia/Pyongyang"),
                    ("Asia/Qatar", "Asia/Qatar"),
                    ("Asia/Qostanay", "Asia/Qostanay"),
                    ("Asia/Qyzylorda", "Asia/Qyzylorda"),
                    ("Asia/Riyadh", "Asia/Riyadh"),
                    ("Asia/Sakhalin", "Asia/Sakhalin"),
                    ("Asia/Samarkand", "Asia/Samarkand"),
                    ("Asia/Seoul", "Asia/Seoul"),
                    ("Asia/Shanghai", "Asia/Shanghai"),
                    ("Asia/Singapore", "Asia/Singapore"),
                    ("Asia/Srednekolymsk", "Asia/Srednekolymsk"),
                    ("Asia/Taipei", "Asia/Taipei"),
                    ("Asia/Tashkent", "Asia/Tashkent"),
                    ("Asia/Tbilisi", "Asia/Tbilisi"),
                    ("Asia/Tehran", "Asia/Tehran"),
                    ("Asia/Thimphu", "Asia/Thimphu"),
                    ("Asia/Tokyo", "Asia/Tokyo"),
                    ("Asia/Tomsk", "Asia/Tomsk"),
                    ("Asia/Ulaanbaatar", "Asia/Ulaanbaatar"),
                    ("Asia/Urumqi", "Asia/Urumqi"),
                    ("Asia/Ust-Nera", "Asia/Ust-Nera"),
                    ("Asia/Vientiane", "Asia/Vientiane"),
                    ("Asia/Vladivostok", "Asia/Vladivostok"),
                    ("Asia/Yakutsk", "Asia/Yakutsk"),
                    ("Asia/Yangon", "Asia/Yangon"),
                    ("Asia/Yekaterinburg", "Asia/Yekaterinburg"),
                    ("Asia/Yerevan", "Asia/Yerevan"),
                    ("Atlantic/Azores", "Atlantic/Azores"),
                    ("Atlantic/Bermuda", "Atlantic/Bermuda"),
                    ("Atlantic/Canary", "Atlantic/Canary"),
                    ("Atlantic/Cape_Verde", "Atlantic/Cape_Verde"),
                    ("Atlantic/Faroe", "Atlantic/Faroe"),
                    ("Atlantic/Madeira", "Atlantic/Madeira"),
                    ("Atlantic/Reykjavik", "Atlantic/Reykjavik"),
                    ("Atlantic/South_Georgia", "Atlantic/South_Georgia"),
                    ("Atlantic/St_Helena", "Atlantic/St_Helena"),
                    ("Atlantic/Stanley", "Atlantic/Stanley"),
                    ("Australia/Adelaide", "Australia/Adelaide"),
                    ("Australia/Brisbane", "Australia/Brisbane"),
                    ("Australia/Broken_Hill", "Australia/Broken_Hill"),
                    ("Australia/Darwin", "Australia/Darwin"),
                    ("Australia/Eucla", "Australia/Eucla"),
                    ("Australia/Hobart", "Australia/Hobart"),
                    ("Australia/Lindeman", "Australia/Lindeman"),
                    ("Australia/Lord_Howe", "Australia/Lord_Howe"),
                    ("Australia/Melbourne", "Australia/Melbourne"),
                    ("Australia/Perth", "Australia/Perth"),
                    ("Australia/Sydney", "Australia/Sydney"),
                    ("Canada/Atlantic", "Canada/Atlantic"),
                    ("Canada/Central", "Canada/Central"),
                    ("Canada/Eastern", "Canada/Eastern"),
                    ("Canada/Mountain", "Canada/Mountain"),
                    ("Canada/Newfoundland", "Canada/Newfoundland"),
                    ("Canada/Pacific", "Canada/Pacific"),
                    ("Europe/Amsterdam", "Europe/Amsterdam"),
                    ("Europe/Andorra", "Europe/Andorra"),
                    ("Europe/Astrakhan", "Europe/Astrakhan"),
                    ("Europe/Athens", "Europe/Athens"),
                    ("Europe/Belgrade", "Europe/Belgrade"),
                    ("Europe/Berlin", "Europe/Berlin"),
                    ("Europe/Bratislava", "Europe/Bratislava"),
                    ("Europe/Brussels", "Europe/Brussels"),
                    ("Europe/Bucharest", "Europe/Bucharest"),
                    ("Europe/Budapest", "Europe/Budapest"),
                    ("Europe/Busingen", "Europe/Busingen"),
                    ("Europe/Chisinau", "Europe/Chisinau"),
                    ("Europe/Copenhagen", "Europe/Copenhagen"),
                    ("Europe/Dublin", "Europe/Dublin"),
                    ("Europe/Gibraltar", "Europe/Gibraltar"),
                    ("Europe/Guernsey", "Europe/Guernsey"),
                    ("Europe/Helsinki", "Europe/Helsinki"),
                    ("Europe/Isle_of_Man", "Europe/Isle_of_Man"),
                    ("Europe/Istanbul", "Europe/Istanbul"),
                    ("Europe/Jersey", "Europe/Jersey"),
                    ("Europe/Kaliningrad", "Europe/Kaliningrad"),
                    ("Europe/Kiev", "Europe/Kiev"),
                    ("Europe/Kirov", "Europe/Kirov"),
                    ("Europe/Lisbon", "Europe/Lisbon"),
                    ("Europe/Ljubljana", "Europe/Ljubljana"),
                    ("Europe/London", "Europe/London"),
                    ("Europe/Luxembourg", "Europe/Luxembourg"),
                    ("Europe/Madrid", "Europe/Madrid"),
                    ("Europe/Malta", "Europe/Malta"),
                    ("Europe/Mariehamn", "Europe/Mariehamn"),
                    ("Europe/Minsk", "Europe/Minsk"),
                    ("Europe/Monaco", "Europe/Monaco"),
                    ("Europe/Moscow", "Europe/Moscow"),
                    ("Europe/Oslo", "Europe/Oslo"),
                    ("Europe/Paris", "Europe/Paris"),
                    ("Europe/Podgorica", "Europe/Podgorica"),
                    ("Europe/Prague", "Europe/Prague"),
                    ("Europe/Riga", "Europe/Riga"),
                    ("Europe/Rome", "Europe/Rome"),
                    ("Europe/Samara", "Europe/Samara"),
                    ("Europe/San_Marino", "Europe/San_Marino"),
                    ("Europe/Sarajevo", "Europe/Sarajevo"),
                    ("Europe/Saratov", "Europe/Saratov"),
                    ("Europe/Simferopol", "Europe/Simferopol"),
                    ("Europe/Skopje", "Europe/Skopje"),
                    ("Europe/Sofia", "Europe/Sofia"),
                    ("Europe/Stockholm", "Europe/Stockholm"),
                    ("Europe/Tallinn", "Europe/Tallinn"),
                    ("Europe/Tirane", "Europe/Tirane"),
                    ("Europe/Ulyanovsk", "Europe/Ulyanovsk"),
                    ("Europe/Uzhgorod", "Europe/Uzhgorod"),
                    ("Europe/Vaduz", "Europe/Vaduz"),
                    ("Europe/Vatican", "Europe/Vatican"),
                    ("Europe/Vienna", "Europe/Vienna"),
                    ("Europe/Vilnius", "Europe/Vilnius"),
                    ("Europe/Volgograd", "Europe/Volgograd"),
                    ("Europe/Warsaw", "Europe/Warsaw"),
                    ("Europe/Zagreb", "Europe/Zagreb"),
                    ("Europe/Zaporozhye", "Europe/Zaporozhye"),
                    ("Europe/Zurich", "Europe/Zurich"),
                    ("GMT", "GMT"),
                    ("Indian/Antananarivo", "Indian/Antananarivo"),
                    ("Indian/Chagos", "Indian/Chagos"),
                    ("Indian/Christmas", "Indian/Christmas"),
                    ("Indian/Cocos", "Indian/Cocos"),
                    ("Indian/Comoro", "Indian/Comoro"),
                    ("Indian/Kerguelen", "Indian/Kerguelen"),
                    ("Indian/Mahe", "Indian/Mahe"),
                    ("Indian/Maldives", "Indian/Maldives"),
                    ("Indian/Mauritius", "Indian/Mauritius"),
                    ("Indian/Mayotte", "Indian/Mayotte"),
                    ("Indian/Reunion", "Indian/Reunion"),
                    ("Pacific/Apia", "Pacific/Apia"),
                    ("Pacific/Auckland", "Pacific/Auckland"),
                    ("Pacific/Bougainville", "Pacific/Bougainville"),
                    ("Pacific/Chatham", "Pacific/Chatham"),
                    ("Pacific/Chuuk", "Pacific/Chuuk"),
                    ("Pacific/Easter", "Pacific/Easter"),
                    ("Pacific/Efate", "Pacific/Efate"),
                    ("Pacific/Enderbury", "Pacific/Enderbury"),
                    ("Pacific/Fakaofo", "Pacific/Fakaofo"),
                    ("Pacific/Fiji", "Pacific/Fiji"),
                    ("Pacific/Funafuti", "Pacific/Funafuti"),
                    ("Pacific/Galapagos", "Pacific/Galapagos"),
                    ("Pacific/Gambier", "Pacific/Gambier"),
                    ("Pacific/Guadalcanal", "Pacific/Guadalcanal"),
                    ("Pacific/Guam", "Pacific/Guam"),
                    ("Pacific/Honolulu", "Pacific/Honolulu"),
                    ("Pacific/Kiritimati", "Pacific/Kiritimati"),
                    ("Pacific/Kosrae", "Pacific/Kosrae"),
                    ("Pacific/Kwajalein", "Pacific/Kwajalein"),
                    ("Pacific/Majuro", "Pacific/Majuro"),
                    ("Pacific/Marquesas", "Pacific/Marquesas"),
                    ("Pacific/Midway", "Pacific/Midway"),
                    ("Pacific/Nauru", "Pacific/Nauru"),
                    ("Pacific/Niue", "Pacific/Niue"),
                    ("Pacific/Norfolk", "Pacific/Norfolk"),
                    ("Pacific/Noumea", "Pacific/Noumea"),
                    ("Pacific/Pago_Pago", "Pacific/Pago_Pago"),
                    ("Pacific/Palau", "Pacific/Palau"),
                    ("Pacific/Pitcairn", "Pacific/Pitcairn"),
                    ("Pacific/Pohnpei", "Pacific/Pohnpei"),
                    ("Pacific/Port_Moresby", "Pacific/Port_Moresby"),
                    ("Pacific/Rarotonga", "Pacific/Rarotonga"),
                    ("Pacific/Saipan", "Pacific/Saipan"),
                    ("Pacific/Tahiti", "Pacific/Tahiti"),
                    ("Pacific/Tarawa", "Pacific/Tarawa"),
                    ("Pacific/Tongatapu", "Pacific/Tongatapu"),
                    ("Pacific/Wake", "Pacific/Wake"),
                    ("Pacific/Wallis", "Pacific/Wallis"),
                    ("US/Alaska", "US/Alaska"),
                    ("US/Arizona", "US/Arizona"),
                    ("US/Central", "US/Central"),
                    ("US/Eastern", "US/Eastern"),
                    ("US/Hawaii", "US/Hawaii"),
                    ("US/Mountain", "US/Mountain"),
                    ("US/Pacific", "US/Pacific"),
                    ("UTC", "UTC"),
                ],
                default="UTC",
                max_length=240,
            ),
        ),
        migrations.AlterField(
            model_name="team",
            name="api_token",
            field=models.CharField(
                default=posthog.models.utils.generate_random_token,
                max_length=200,
                unique=True,
                validators=[
                    django.core.validators.MinLengthValidator(
                        10, "Project's API token must be at least 10 characters long!"
                    )
                ],
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="uuid",
            field=models.UUIDField(default=posthog.models.utils.UUIDT, editable=False, unique=True),
        ),
        migrations.AlterField(
            model_name="actionstep",
            name="properties",
            field=models.JSONField(blank=True, default=list, null=True),
        ),
        migrations.AlterField(
            model_name="cohort",
            name="groups",
            field=models.JSONField(default=list),
        ),
        migrations.AddField(
            model_name="dashboard",
            name="filters",
            field=models.JSONField(default=dict),
        ),
        migrations.AlterField(
            model_name="dashboarditem",
            name="filters",
            field=models.JSONField(default=dict),
        ),
        migrations.AlterField(
            model_name="dashboarditem",
            name="layouts",
            field=models.JSONField(default=dict),
        ),
        migrations.AlterField(
            model_name="element",
            name="attributes",
            field=models.JSONField(default=dict),
        ),
        migrations.AlterField(
            model_name="event",
            name="elements",
            field=models.JSONField(blank=True, default=list, null=True),
        ),
        migrations.AlterField(
            model_name="event",
            name="properties",
            field=models.JSONField(default=dict),
        ),
        migrations.AlterField(
            model_name="featureflag",
            name="filters",
            field=models.JSONField(default=dict),
        ),
        migrations.AlterField(
            model_name="organization",
            name="personalization",
            field=models.JSONField(blank=True, default=dict),
        ),
        migrations.AlterField(
            model_name="person",
            name="properties",
            field=models.JSONField(default=dict),
        ),
        migrations.AlterField(
            model_name="plugin",
            name="config_schema",
            field=models.JSONField(default=dict),
        ),
        migrations.AlterField(
            model_name="plugin",
            name="error",
            field=models.JSONField(default=None, null=True),
        ),
        migrations.AlterField(
            model_name="pluginconfig",
            name="config",
            field=models.JSONField(default=dict),
        ),
        migrations.AlterField(
            model_name="pluginconfig",
            name="error",
            field=models.JSONField(default=None, null=True),
        ),
        migrations.AlterField(
            model_name="sessionrecordingevent",
            name="snapshot_data",
            field=models.JSONField(default=dict),
        ),
        migrations.AlterField(
            model_name="sessionsfilter",
            name="filters",
            field=models.JSONField(default=dict),
        ),
        migrations.AddField(
            model_name="team",
            name="data_attributes",
            field=models.JSONField(default=posthog.models.team.team.get_default_data_attributes),
        ),
        migrations.AlterField(
            model_name="team",
            name="event_names",
            field=models.JSONField(default=list),
        ),
        migrations.AlterField(
            model_name="team",
            name="event_names_with_usage",
            field=models.JSONField(default=list),
        ),
        migrations.AlterField(
            model_name="team",
            name="event_properties",
            field=models.JSONField(default=list),
        ),
        migrations.AlterField(
            model_name="team",
            name="event_properties_numerical",
            field=models.JSONField(default=list),
        ),
        migrations.AlterField(
            model_name="team",
            name="event_properties_with_usage",
            field=models.JSONField(default=list),
        ),
        migrations.AddField(
            model_name="team",
            name="test_account_filters",
            field=models.JSONField(default=list),
        ),
        migrations.AlterField(
            model_name="user",
            name="first_name",
            field=models.CharField(blank=True, max_length=150, verbose_name="first name"),
        ),
        migrations.CreateModel(
            name="PropertyDefinition",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=posthog.models.utils.UUIDT, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("name", models.CharField(max_length=400)),
                ("is_numerical", models.BooleanField(default=False)),
                ("volume_30_day", models.IntegerField(default=None, null=True)),
                ("query_usage_30_day", models.IntegerField(default=None, null=True)),
                (
                    "team",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="property_definitions",
                        related_query_name="team",
                        to="posthog.team",
                    ),
                ),
            ],
            options={
                "unique_together": {("team", "name")},
            },
        ),
        migrations.CreateModel(
            name="EventDefinition",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=posthog.models.utils.UUIDT, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("name", models.CharField(max_length=400)),
                ("volume_30_day", models.IntegerField(default=None, null=True)),
                ("query_usage_30_day", models.IntegerField(default=None, null=True)),
                (
                    "team",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="event_definitions",
                        related_query_name="team",
                        to="posthog.team",
                    ),
                ),
            ],
            options={
                "unique_together": {("team", "name")},
            },
        ),
        migrations.AddField(
            model_name="dashboard",
            name="creation_mode",
            field=models.CharField(
                choices=[("default", "Default"), ("template", "Template"), ("duplicate", "Duplicate")],
                default="default",
                max_length=16,
            ),
        ),
        migrations.CreateModel(
            name="PluginLogEntry",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=posthog.models.utils.UUIDT, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("timestamp", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "source",
                    models.CharField(
                        choices=[("SYSTEM", "system"), ("PLUGIN", "plugin"), ("CONSOLE", "console")], max_length=20
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("DEBUG", "debug"),
                            ("LOG", "log"),
                            ("INFO", "info"),
                            ("WARN", "warn"),
                            ("ERROR", "error"),
                        ],
                        max_length=20,
                    ),
                ),
                ("message", models.TextField(db_index=True)),
                ("instance_id", models.UUIDField()),
                ("plugin", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.plugin")),
                (
                    "plugin_config",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.pluginconfig"),
                ),
                ("team", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.team")),
            ],
        ),
        migrations.AddIndex(
            model_name="pluginlogentry",
            index=models.Index(fields=["plugin_config_id", "timestamp"], name="posthog_plu_plugin__736133_idx"),
        ),
        migrations.AlterField(
            model_name="element",
            name="attr_id",
            field=models.CharField(blank=True, max_length=10000, null=True),
        ),
        migrations.AlterField(
            model_name="element",
            name="href",
            field=models.CharField(blank=True, max_length=10000, null=True),
        ),
        migrations.AlterField(
            model_name="element",
            name="tag_name",
            field=models.CharField(blank=True, max_length=1000, null=True),
        ),
        migrations.AlterField(
            model_name="element",
            name="text",
            field=models.CharField(blank=True, max_length=10000, null=True),
        ),
        migrations.AddField(
            model_name="plugin",
            name="is_preinstalled",
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name="user",
            name="events_column_config",
            field=models.JSONField(default=posthog.models.user.events_column_config_default),
        ),
        migrations.AddField(
            model_name="plugin",
            name="capabilities",
            field=models.JSONField(default=dict),
        ),
        migrations.AddField(
            model_name="organization",
            name="for_internal_metrics",
            field=models.BooleanField(default=False),
        ),
        migrations.AddConstraint(
            model_name="organization",
            constraint=models.UniqueConstraint(
                condition=models.Q(("for_internal_metrics", True)),
                fields=("for_internal_metrics",),
                name="single_for_internal_metrics",
            ),
        ),
        migrations.AddField(
            model_name="dashboarditem",
            name="short_id",
            field=models.CharField(blank=True, default=posthog.utils.generate_short_id, max_length=12),
        ),
        migrations.AlterUniqueTogether(
            name="dashboarditem",
            unique_together={("team", "short_id")},
        ),
        migrations.AddField(
            model_name="plugin",
            name="metrics",
            field=models.JSONField(default=dict, null=True),
        ),
        migrations.AlterField(
            model_name="personalapikey",
            name="value",
            field=models.CharField(
                default=posthog.models.utils.generate_random_token_personal, editable=False, max_length=50, unique=True
            ),
        ),
        migrations.AlterField(
            model_name="team",
            name="api_token",
            field=models.CharField(
                default=posthog.models.utils.generate_random_token_project,
                max_length=200,
                unique=True,
                validators=[
                    django.core.validators.MinLengthValidator(
                        10, "Project's API token must be at least 10 characters long!"
                    )
                ],
            ),
        ),
        migrations.AddField(
            model_name="organization",
            name="available_features",
            field=django.contrib.postgres.fields.ArrayField(
                base_field=models.CharField(max_length=64), blank=True, default=list, size=None
            ),
        ),
        migrations.AddField(
            model_name="organization",
            name="domain_whitelist",
            field=django.contrib.postgres.fields.ArrayField(
                base_field=models.CharField(max_length=256), blank=True, default=list, size=None
            ),
        ),
        django.contrib.postgres.operations.TrigramExtension(),
        migrations.AddIndex(
            model_name="eventdefinition",
            index=django.contrib.postgres.indexes.GinIndex(
                fields=["name"], name="index_event_definition_name", opclasses=["gin_trgm_ops"]
            ),
        ),
        migrations.AddIndex(
            model_name="propertydefinition",
            index=django.contrib.postgres.indexes.GinIndex(
                fields=["name"], name="index_property_definition_name", opclasses=["gin_trgm_ops"]
            ),
        ),
        migrations.AddField(
            model_name="organization",
            name="is_member_join_email_enabled",
            field=models.BooleanField(default=True),
        ),
        migrations.AddField(
            model_name="dashboarditem",
            name="favorited",
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name="dashboarditem",
            name="tags",
            field=django.contrib.postgres.fields.ArrayField(
                base_field=models.CharField(max_length=32), blank=True, default=list, size=None
            ),
        ),
        migrations.AddField(
            model_name="dashboarditem",
            name="updated_at",
            field=models.DateTimeField(auto_now=True),
        ),
        migrations.RunSQL(
            sql=[
                "SET statement_timeout = 600000000;",
                "CREATE INDEX IF NOT EXISTS posthog_per_team_id_bec4e5_idx ON posthog_person(team_id, id DESC);",
            ],
            reverse_sql='DROP INDEX "posthog_per_team_id_bec4e5_idx";',
        ),
        migrations.AddField(
            model_name="dashboarditem",
            name="dive_dashboard",
            field=models.ForeignKey(
                blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to="posthog.dashboard"
            ),
        ),
        migrations.AddField(
            model_name="plugin",
            name="public_jobs",
            field=models.JSONField(default=dict, null=True),
        ),
        migrations.CreateModel(
            name="FeatureFlagOverride",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("override_value", models.JSONField()),
                (
                    "feature_flag",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.featureflag"),
                ),
                ("user", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ("team", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.team")),
            ],
        ),
        migrations.AddConstraint(
            model_name="featureflagoverride",
            constraint=models.UniqueConstraint(
                fields=("user", "feature_flag", "team"), name="unique feature flag for a user/team combo"
            ),
        ),
        migrations.RemoveField(
            model_name="team",
            name="users",
        ),
        migrations.AddField(
            model_name="team",
            name="access_control",
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name="cohort",
            name="description",
            field=models.CharField(blank=True, max_length=1000),
        ),
        migrations.AddField(
            model_name="person",
            name="properties_last_operation",
            field=models.JSONField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="person",
            name="properties_last_updated_at",
            field=models.JSONField(blank=True, default=dict, null=True),
        ),
        migrations.AddField(
            model_name="organization",
            name="slug",
            field=posthog.models.utils.LowercaseSlugField(max_length=48, unique=True),
        ),
        migrations.AddField(
            model_name="team",
            name="path_cleaning_filters",
            field=models.JSONField(blank=True, default=list, null=True),
        ),
        migrations.AlterModelTable(
            name="dashboarditem",
            table="posthog_dashboarditem",
        ),
        migrations.RenameModel(
            old_name="DashboardItem",
            new_name="Insight",
        ),
        migrations.CreateModel(
            name="GroupTypeMapping",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("group_type", models.CharField(max_length=400)),
                ("group_type_index", models.IntegerField()),
                ("team", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.team")),
            ],
        ),
        migrations.AddConstraint(
            model_name="grouptypemapping",
            constraint=models.UniqueConstraint(fields=("team", "group_type"), name="unique group types for team"),
        ),
        migrations.AddConstraint(
            model_name="grouptypemapping",
            constraint=models.UniqueConstraint(
                fields=("team", "group_type_index"), name="unique event column indexes for team"
            ),
        ),
        migrations.AddConstraint(
            model_name="grouptypemapping",
            constraint=models.CheckConstraint(
                check=models.Q(("group_type_index__lte", 5)), name="group_type_index is less than or equal 5"
            ),
        ),
        migrations.AddField(
            model_name="person",
            name="version",
            field=models.BigIntegerField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="team",
            name="correlation_config",
            field=models.JSONField(blank=True, default=dict, null=True),
        ),
        migrations.AddField(
            model_name="sessionrecordingevent",
            name="window_id",
            field=models.CharField(blank=True, max_length=200, null=True),
        ),
        migrations.CreateModel(
            name="Group",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("group_key", models.CharField(max_length=400)),
                ("group_type_index", models.IntegerField()),
                ("group_properties", models.JSONField(default=dict)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("properties_last_updated_at", models.JSONField(default=dict)),
                ("properties_last_operation", models.JSONField(default=dict)),
                ("version", models.BigIntegerField()),
                ("team", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.team")),
            ],
        ),
        migrations.AddConstraint(
            model_name="group",
            constraint=models.UniqueConstraint(
                fields=("team_id", "group_key", "group_type_index"),
                name="unique team_id/group_key/group_type_index combo",
            ),
        ),
        migrations.DeleteModel(
            name="SessionsFilter",
        ),
        migrations.CreateModel(
            name="SpecialMigration",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("name", models.CharField(max_length=50)),
                ("description", models.CharField(blank=True, max_length=400, null=True)),
                ("progress", models.PositiveSmallIntegerField(default=0)),
                ("status", models.PositiveSmallIntegerField(default=0)),
                ("current_operation_index", models.PositiveSmallIntegerField(default=0)),
                ("current_query_id", models.CharField(default="", max_length=100)),
                ("celery_task_id", models.CharField(default="", max_length=100)),
                ("started_at", models.DateTimeField(blank=True, null=True)),
                ("finished_at", models.DateTimeField(blank=True, null=True)),
                ("last_error", models.TextField(blank=True, null=True)),
                ("posthog_min_version", models.CharField(blank=True, max_length=20, null=True)),
                ("posthog_max_version", models.CharField(blank=True, max_length=20, null=True)),
            ],
        ),
        migrations.AddConstraint(
            model_name="specialmigration",
            constraint=models.UniqueConstraint(fields=("name",), name="unique name"),
        ),
        migrations.AddField(
            model_name="eventdefinition",
            name="created_at",
            field=models.DateTimeField(default=django.utils.timezone.now, null=True),
        ),
        migrations.AddField(
            model_name="eventdefinition",
            name="last_seen_at",
            field=models.DateTimeField(default=None, null=True),
        ),
        migrations.AddField(
            model_name="insight",
            name="refresh_attempt",
            field=models.IntegerField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="persondistinctid",
            name="version",
            field=models.BigIntegerField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name="annotation",
            name="scope",
            field=models.CharField(
                choices=[("dashboard_item", "insight"), ("project", "project"), ("organization", "organization")],
                default="dashboard_item",
                max_length=24,
            ),
        ),
        migrations.CreateModel(
            name="Experiment",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=400)),
                ("description", models.CharField(blank=True, max_length=400, null=True)),
                ("filters", models.JSONField(default=dict)),
                ("parameters", models.JSONField(default=dict, null=True)),
                ("start_date", models.DateTimeField(null=True)),
                ("end_date", models.DateTimeField(null=True)),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
                ),
                (
                    "feature_flag",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.featureflag"),
                ),
                ("team", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.team")),
            ],
        ),
        migrations.RenameModel(
            old_name="SpecialMigration",
            new_name="AsyncMigration",
        ),
        migrations.CreateModel(
            name="EventProperty",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("event", models.CharField(max_length=400)),
                ("property", models.CharField(max_length=400)),
                ("team", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.team")),
            ],
        ),
        migrations.AddIndex(
            model_name="eventproperty",
            index=models.Index(fields=["team", "event"], name="posthog_eve_team_id_22de03_idx"),
        ),
        migrations.AddIndex(
            model_name="eventproperty",
            index=models.Index(fields=["team", "property"], name="posthog_eve_team_id_26dbfb_idx"),
        ),
        migrations.AddConstraint(
            model_name="eventproperty",
            constraint=models.UniqueConstraint(
                fields=("team", "event", "property"), name="posthog_event_property_unique_team_event_property"
            ),
        ),
        migrations.AddField(
            model_name="propertydefinition",
            name="property_type",
            field=models.CharField(
                blank=True,
                choices=[
                    ("DateTime", "DateTime"),
                    ("String", "String"),
                    ("Numeric", "Numeric"),
                    ("Boolean", "Boolean"),
                ],
                max_length=50,
                null=True,
            ),
        ),
        migrations.AddField(
            model_name="propertydefinition",
            name="property_type_format",
            field=models.CharField(
                blank=True,
                choices=[
                    ("unix_timestamp", "Unix Timestamp"),
                    ("YYYY-MM-DD hh:mm:ss", "YYYY-MM-DD hh:mm:ss"),
                    ("YYYY-MM-DD", "YYYY-MM-DD"),
                ],
                max_length=50,
                null=True,
            ),
        ),
        migrations.AddConstraint(
            model_name="propertydefinition",
            constraint=models.CheckConstraint(
                check=models.Q(
                    models.Q(
                        ("property_type__in", ["DateTime", "String", "Numeric", "Boolean"]),
                        ("property_type_format__in", ["unix_timestamp", "YYYY-MM-DD hh:mm:ss", "YYYY-MM-DD"]),
                    )
                ),
                name="property_type_and_format_are_valid",
            ),
        ),
        migrations.AddField(
            model_name="grouptypemapping",
            name="name_plural",
            field=models.CharField(blank=True, max_length=400, null=True),
        ),
        migrations.AddField(
            model_name="grouptypemapping",
            name="name_singular",
            field=models.CharField(blank=True, max_length=400, null=True),
        ),
        migrations.RemoveConstraint(
            model_name="propertydefinition",
            name="property_type_and_format_are_valid",
        ),
        migrations.AlterField(
            model_name="propertydefinition",
            name="property_type_format",
            field=models.CharField(
                blank=True,
                choices=[
                    ("unix_timestamp", "Unix Timestamp in seconds"),
                    ("unix_timestamp_milliseconds", "Unix Timestamp in milliseconds"),
                    ("YYYY-MM-DDThh:mm:ssZ", "YYYY-MM-DDThh:mm:ssZ"),
                    ("YYYY-MM-DD hh:mm:ss", "YYYY-MM-DD hh:mm:ss"),
                    ("DD-MM-YYYY hh:mm:ss", "DD-MM-YYYY hh:mm:ss"),
                    ("YYYY-MM-DD", "YYYY-MM-DD"),
                    ("rfc_822", "day, DD MMM YYYY hh:mm:ss TZ"),
                    ("YYYY/MM/DD hh:mm:ss", "YYYY/MM/DD hh:mm:ss"),
                    ("DD/MM/YYYY hh:mm:ss", "DD/MM/YYYY hh:mm:ss"),
                ],
                max_length=50,
                null=True,
            ),
        ),
        migrations.AddConstraint(
            model_name="propertydefinition",
            constraint=models.CheckConstraint(
                check=models.Q(
                    models.Q(
                        ("property_type__in", ["DateTime", "String", "Numeric", "Boolean"]),
                        (
                            "property_type_format__in",
                            [
                                "unix_timestamp",
                                "unix_timestamp_milliseconds",
                                "YYYY-MM-DDThh:mm:ssZ",
                                "YYYY-MM-DD hh:mm:ss",
                                "DD-MM-YYYY hh:mm:ss",
                                "YYYY-MM-DD",
                                "rfc_822",
                                "YYYY/MM/DD hh:mm:ss",
                                "DD/MM/YYYY hh:mm:ss",
                            ],
                        ),
                    )
                ),
                name="property_type_and_format_are_valid",
            ),
        ),
        migrations.RemoveField(
            model_name="asyncmigration",
            name="last_error",
        ),
        migrations.CreateModel(
            name="AsyncMigrationError",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("description", models.CharField(max_length=400)),
                (
                    "async_migration",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.asyncmigration"),
                ),
            ],
        ),
        migrations.AddField(
            model_name="experiment",
            name="archived",
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name="experiment",
            name="secondary_metrics",
            field=models.JSONField(default=list, null=True),
        ),
        migrations.AddField(
            model_name="insight",
            name="last_modified_at",
            field=models.DateTimeField(default=django.utils.timezone.now),
        ),
        migrations.AddField(
            model_name="plugin",
            name="is_stateless",
            field=models.BooleanField(blank=True, default=False, null=True),
        ),
        migrations.AddField(
            model_name="insight",
            name="last_modified_by",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="modified_insights",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.RemoveConstraint(
            model_name="propertydefinition",
            name="property_type_and_format_are_valid",
        ),
        migrations.AddConstraint(
            model_name="propertydefinition",
            constraint=models.CheckConstraint(
                check=models.Q(("property_type__in", ["DateTime", "String", "Numeric", "Boolean"])),
                name="property_type_is_valid",
            ),
        ),
        migrations.AddField(
            model_name="dashboard",
            name="restriction_level",
            field=models.PositiveSmallIntegerField(
                choices=[
                    (21, "Everyone in the project can edit"),
                    (37, "Only those invited to this dashboard can edit"),
                ],
                default=21,
            ),
        ),
        migrations.AddField(
            model_name="action",
            name="description",
            field=models.TextField(blank=True, default=""),
        ),
        migrations.AddField(
            model_name="cohort",
            name="version",
            field=models.IntegerField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="cohort",
            name="pending_version",
            field=models.IntegerField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="cohortpeople",
            name="version",
            field=models.IntegerField(blank=True, null=True),
        ),
        migrations.CreateModel(
            name="Tag",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=posthog.models.utils.UUIDT, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("team", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.team")),
            ],
        ),
        migrations.CreateModel(
            name="TaggedItem",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=posthog.models.utils.UUIDT, editable=False, primary_key=True, serialize=False
                    ),
                ),
                (
                    "action",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tagged_items",
                        to="posthog.action",
                    ),
                ),
                (
                    "tag",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="tagged_items", to="posthog.tag"
                    ),
                ),
            ],
        ),
        migrations.AddConstraint(
            model_name="taggeditem",
            constraint=models.CheckConstraint(
                check=models.Q(models.Q(("action__isnull", False)), _connector="OR"), name="exactly_one_related_object"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="tag",
            unique_together={("name", "team")},
        ),
        migrations.AddField(
            model_name="cohort",
            name="count",
            field=models.IntegerField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name="plugin",
            name="updated_at",
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="plugin",
            name="log_level",
            field=models.IntegerField(blank=True, null=True),
        ),
        migrations.AlterUniqueTogether(
            name="taggeditem",
            unique_together={("tag", "action")},
        ),
        migrations.AlterField(
            model_name="asyncmigrationerror",
            name="description",
            field=models.TextField(),
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='DROP INDEX IF EXISTS "posthog_persondistinctid_team_id_46330ec9";',
                    reverse_sql="CREATE INDEX posthog_persondistinctid_team_id_46330ec9 ON public.posthog_persondistinctid USING btree (team_id);",
                ),
            ],
            state_operations=[
                migrations.AlterField(
                    model_name="persondistinctid",
                    name="team",
                    field=models.ForeignKey(
                        db_index=False, on_delete=django.db.models.deletion.CASCADE, to="posthog.team"
                    ),
                ),
            ],
        ),
        migrations.RenameField(
            model_name="dashboard",
            old_name="tags",
            new_name="deprecated_tags",
        ),
        migrations.RenameField(
            model_name="insight",
            old_name="tags",
            new_name="deprecated_tags",
        ),
        migrations.AlterField(
            model_name="dashboard",
            name="deprecated_tags",
            field=django.contrib.postgres.fields.ArrayField(
                base_field=models.CharField(max_length=32), blank=True, default=list, null=True, size=None
            ),
        ),
        migrations.AlterField(
            model_name="insight",
            name="deprecated_tags",
            field=django.contrib.postgres.fields.ArrayField(
                base_field=models.CharField(max_length=32), blank=True, default=list, null=True, size=None
            ),
        ),
        migrations.RemoveConstraint(
            model_name="taggeditem",
            name="exactly_one_related_object",
        ),
        migrations.AddField(
            model_name="taggeditem",
            name="dashboard",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="tagged_items",
                to="posthog.dashboard",
            ),
        ),
        migrations.AddField(
            model_name="taggeditem",
            name="event_definition",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="tagged_items",
                to="posthog.eventdefinition",
            ),
        ),
        migrations.AddField(
            model_name="taggeditem",
            name="insight",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="tagged_items",
                to="posthog.insight",
            ),
        ),
        migrations.AddField(
            model_name="taggeditem",
            name="property_definition",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="tagged_items",
                to="posthog.propertydefinition",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="taggeditem",
            unique_together={("tag", "dashboard", "insight", "event_definition", "property_definition", "action")},
        ),
        migrations.AddConstraint(
            model_name="taggeditem",
            constraint=models.CheckConstraint(
                check=models.Q(
                    models.Q(
                        ("dashboard__isnull", False),
                        ("insight__isnull", True),
                        ("event_definition__isnull", True),
                        ("property_definition__isnull", True),
                        ("action__isnull", True),
                    ),
                    models.Q(
                        ("dashboard__isnull", True),
                        ("insight__isnull", False),
                        ("event_definition__isnull", True),
                        ("property_definition__isnull", True),
                        ("action__isnull", True),
                    ),
                    models.Q(
                        ("dashboard__isnull", True),
                        ("insight__isnull", True),
                        ("event_definition__isnull", False),
                        ("property_definition__isnull", True),
                        ("action__isnull", True),
                    ),
                    models.Q(
                        ("dashboard__isnull", True),
                        ("insight__isnull", True),
                        ("event_definition__isnull", True),
                        ("property_definition__isnull", False),
                        ("action__isnull", True),
                    ),
                    models.Q(
                        ("dashboard__isnull", True),
                        ("insight__isnull", True),
                        ("event_definition__isnull", True),
                        ("property_definition__isnull", True),
                        ("action__isnull", False),
                    ),
                    _connector="OR",
                ),
                name="exactly_one_related_object",
            ),
        ),
        migrations.AddField(
            model_name="dashboard",
            name="tags",
            field=django.contrib.postgres.fields.ArrayField(
                base_field=models.CharField(max_length=32), blank=True, default=None, null=True, size=None
            ),
        ),
        migrations.AddField(
            model_name="insight",
            name="derived_name",
            field=models.CharField(blank=True, max_length=400, null=True),
        ),
        migrations.AddField(
            model_name="team",
            name="primary_dashboard",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="primary_dashboard_teams",
                to="posthog.dashboard",
            ),
        ),
        migrations.AddField(
            model_name="insight",
            name="tags",
            field=django.contrib.postgres.fields.ArrayField(
                base_field=models.CharField(max_length=32), blank=True, default=None, null=True, size=None
            ),
        ),
        migrations.RunSQL(
            sql='\n                CREATE UNIQUE INDEX "unique_dashboard_tagged_item" ON "posthog_taggeditem" ("tag_id", "dashboard_id")\n                WHERE "dashboard_id" is NOT NULL\n            ',
            reverse_sql='\n                DROP INDEX IF EXISTS\n                "unique_dashboard_tagged_item";\n            ',
            state_operations=[
                migrations.AddConstraint(
                    model_name="taggeditem",
                    constraint=models.UniqueConstraint(
                        condition=models.Q(("dashboard__isnull", False)),
                        fields=("tag", "dashboard"),
                        name="unique_dashboard_tagged_item",
                    ),
                )
            ],
        ),
        migrations.RunSQL(
            sql='\n                CREATE UNIQUE INDEX "unique_insight_tagged_item" ON "posthog_taggeditem" ("tag_id", "insight_id")\n                WHERE "insight_id" is NOT NULL\n            ',
            reverse_sql='\n                DROP INDEX IF EXISTS\n                "unique_insight_tagged_item";\n            ',
            state_operations=[
                migrations.AddConstraint(
                    model_name="taggeditem",
                    constraint=models.UniqueConstraint(
                        condition=models.Q(("insight__isnull", False)),
                        fields=("tag", "insight"),
                        name="unique_insight_tagged_item",
                    ),
                )
            ],
        ),
        migrations.RunSQL(
            sql='\n                CREATE UNIQUE INDEX "unique_event_definition_tagged_item" ON "posthog_taggeditem" ("tag_id", "event_definition_id")\n                WHERE "event_definition_id" is NOT NULL\n            ',
            reverse_sql='\n                DROP INDEX IF EXISTS\n                "unique_event_definition_tagged_item"\n            ',
            state_operations=[
                migrations.AddConstraint(
                    model_name="taggeditem",
                    constraint=models.UniqueConstraint(
                        condition=models.Q(("event_definition__isnull", False)),
                        fields=("tag", "event_definition"),
                        name="unique_event_definition_tagged_item",
                    ),
                )
            ],
        ),
        migrations.RunSQL(
            sql='\n                CREATE UNIQUE INDEX "unique_property_definition_tagged_item" ON "posthog_taggeditem" ("tag_id", "property_definition_id")\n                WHERE "property_definition_id" is NOT NULL\n            ',
            reverse_sql='\n                DROP INDEX IF EXISTS\n                "unique_property_definition_tagged_item";\n            ',
            state_operations=[
                migrations.AddConstraint(
                    model_name="taggeditem",
                    constraint=models.UniqueConstraint(
                        condition=models.Q(("property_definition__isnull", False)),
                        fields=("tag", "property_definition"),
                        name="unique_property_definition_tagged_item",
                    ),
                )
            ],
        ),
        migrations.RunSQL(
            sql='\n                CREATE UNIQUE INDEX "unique_action_tagged_item" ON "posthog_taggeditem" ("tag_id", "action_id")\n                WHERE "action_id" is NOT NULL\n            ',
            reverse_sql='\n                DROP INDEX IF EXISTS\n                "unique_action_tagged_item";\n            ',
            state_operations=[
                migrations.AddConstraint(
                    model_name="taggeditem",
                    constraint=models.UniqueConstraint(
                        condition=models.Q(("action__isnull", False)),
                        fields=("tag", "action"),
                        name="unique_action_tagged_item",
                    ),
                )
            ],
        ),
        migrations.CreateModel(
            name="ActivityLog",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=posthog.models.utils.UUIDT, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("team_id", models.PositiveIntegerField(null=True)),
                ("organization_id", models.UUIDField(null=True)),
                ("activity", models.CharField(max_length=79)),
                ("item_id", models.CharField(max_length=72, null=True)),
                ("scope", models.CharField(max_length=79)),
                (
                    "detail",
                    models.JSONField(
                        encoder=posthog.models.activity_logging.activity_log.ActivityDetailEncoder, null=True
                    ),
                ),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "user",
                    models.ForeignKey(
                        null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
        ),
        migrations.AddIndex(
            model_name="activitylog",
            index=models.Index(fields=["team_id", "scope", "item_id"], name="posthog_act_team_id_13a0a8_idx"),
        ),
        migrations.AddConstraint(
            model_name="activitylog",
            constraint=models.CheckConstraint(
                check=models.Q(("team_id__isnull", False), ("organization_id__isnull", False), _connector="OR"),
                name="must_have_team_or_organization_id",
            ),
        ),
        migrations.CreateModel(
            name="OrganizationDomain",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=posthog.models.utils.UUIDT, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("domain", models.CharField(max_length=128, unique=True)),
                (
                    "verification_challenge",
                    models.CharField(
                        default=posthog.models.organization_domain.generate_verification_challenge, max_length=128
                    ),
                ),
                ("verified_at", models.DateTimeField(blank=True, default=None, null=True)),
                ("last_verification_retry", models.DateTimeField(blank=True, default=None, null=True)),
                ("jit_provisioning_enabled", models.BooleanField(default=False)),
                ("sso_enforcement", models.CharField(blank=True, max_length=28)),
                (
                    "organization",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="domains", to="posthog.organization"
                    ),
                ),
                ("saml_acs_url", models.CharField(blank=True, max_length=512, null=True)),
                ("saml_entity_id", models.CharField(blank=True, max_length=512, null=True)),
                ("saml_x509_cert", models.TextField(blank=True, null=True)),
            ],
            options={
                "abstract": False,
                "verbose_name": "domain",
            },
        ),
        migrations.CreateModel(
            name="InsightViewed",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("last_viewed_at", models.DateTimeField()),
                ("insight", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.insight")),
                ("team", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.team")),
                ("user", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddIndex(
            model_name="insightviewed",
            index=models.Index(fields=["team_id", "user_id", "-last_viewed_at"], name="posthog_ins_team_id_339ee0_idx"),
        ),
        migrations.AddConstraint(
            model_name="insightviewed",
            constraint=models.UniqueConstraint(fields=("team", "user", "insight"), name="posthog_unique_insightviewed"),
        ),
        migrations.CreateModel(
            name="DashboardTile",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("dashboard", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.dashboard")),
                ("insight", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.insight")),
                ("layouts", models.JSONField(default=dict)),
                ("color", models.CharField(blank=True, max_length=400, null=True)),
                ("filters_hash", models.CharField(blank=True, max_length=400, null=True)),
            ],
        ),
        migrations.AlterField(
            model_name="action",
            name="slack_message_format",
            field=models.CharField(blank=True, default="", max_length=600),
        ),
        migrations.AddField(
            model_name="dashboard",
            name="insights",
            field=models.ManyToManyField(
                blank=True, related_name="dashboards", through="posthog.DashboardTile", to="posthog.Insight"
            ),
        ),
        migrations.AddIndex(
            model_name="dashboardtile",
            index=models.Index(fields=["filters_hash"], name="query_by_filters_hash_idx"),
        ),
        migrations.AddField(
            model_name="cohort",
            name="filters",
            field=models.JSONField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="dashboardtile",
            name="last_refresh",
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="dashboardtile",
            name="refresh_attempt",
            field=models.IntegerField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="dashboardtile",
            name="refreshing",
            field=models.BooleanField(null=True),
        ),
        migrations.AddField(
            model_name="team",
            name="person_display_name_properties",
            field=django.contrib.postgres.fields.ArrayField(
                base_field=models.CharField(max_length=400), blank=True, null=True, size=None
            ),
        ),
        migrations.CreateModel(
            name="PluginSourceFile",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=posthog.models.utils.UUIDT, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("filename", models.CharField(max_length=200)),
                ("source", models.TextField(blank=True, null=True)),
                ("plugin", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.plugin")),
            ],
        ),
        migrations.AddConstraint(
            model_name="pluginsourcefile",
            constraint=models.UniqueConstraint(fields=("plugin_id", "filename"), name="unique_filename_for_plugin"),
        ),
        migrations.AddField(
            model_name="pluginsourcefile",
            name="error",
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="pluginsourcefile",
            name="status",
            field=models.CharField(
                choices=[("LOCKED", "locked"), ("TRANSPILED", "transpiled"), ("ERROR", "error")],
                max_length=20,
                null=True,
            ),
        ),
        migrations.AddField(
            model_name="pluginsourcefile",
            name="transpiled",
            field=models.TextField(blank=True, null=True),
        ),
        migrations.CreateModel(
            name="InstanceSetting",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("key", models.CharField(max_length=128)),
                ("raw_value", models.CharField(blank=True, max_length=1024)),
            ],
        ),
        migrations.AddConstraint(
            model_name="instancesetting",
            constraint=models.UniqueConstraint(fields=("key",), name="unique key"),
        ),
        migrations.CreateModel(
            name="ExportedAsset",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "export_format",
                    models.CharField(
                        choices=[
                            ("image/png", "image/png"),
                            ("application/pdf", "application/pdf"),
                            ("text/csv", "text/csv"),
                        ],
                        max_length=16,
                    ),
                ),
                ("content", models.BinaryField(null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "access_token",
                    models.CharField(
                        blank=True,
                        default=posthog.models.exported_asset.get_default_access_token,
                        max_length=400,
                        null=True,
                    ),
                ),
                (
                    "dashboard",
                    models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to="posthog.dashboard"),
                ),
                (
                    "insight",
                    models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to="posthog.insight"),
                ),
                ("team", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.team")),
            ],
        ),
        migrations.AddField(
            model_name="organizationinvite",
            name="message",
            field=models.TextField(blank=True, null=True),
        ),
        migrations.CreateModel(
            name="Subscription",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("title", models.CharField(blank=True, max_length=100, null=True)),
                (
                    "target_type",
                    models.CharField(
                        choices=[("email", "Email"), ("slack", "Slack"), ("webhook", "Webhook")], max_length=10
                    ),
                ),
                ("target_value", models.TextField()),
                (
                    "frequency",
                    models.CharField(
                        choices=[
                            ("daily", "Daily"),
                            ("weekly", "Weekly"),
                            ("monthly", "Monthly"),
                            ("yearly", "Yearly"),
                        ],
                        max_length=10,
                    ),
                ),
                ("interval", models.IntegerField(default=1)),
                ("count", models.IntegerField(null=True)),
                (
                    "byweekday",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(
                            choices=[
                                ("monday", "Monday"),
                                ("tuesday", "Tuesday"),
                                ("wednesday", "Wednesday"),
                                ("thursday", "Thursday"),
                                ("friday", "Friday"),
                                ("saturday", "Saturday"),
                                ("sunday", "Sunday"),
                            ],
                            max_length=10,
                        ),
                        blank=True,
                        default=None,
                        null=True,
                        size=None,
                    ),
                ),
                ("bysetpos", models.IntegerField(null=True)),
                ("start_date", models.DateTimeField()),
                ("until_date", models.DateTimeField(blank=True, null=True)),
                ("next_delivery_date", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("deleted", models.BooleanField(default=False)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL
                    ),
                ),
                (
                    "dashboard",
                    models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to="posthog.dashboard"),
                ),
                (
                    "insight",
                    models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to="posthog.insight"),
                ),
                ("team", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.team")),
            ],
        ),
        migrations.AddField(
            model_name="team",
            name="live_events_columns",
            field=django.contrib.postgres.fields.ArrayField(
                base_field=models.TextField(), blank=True, null=True, size=None
            ),
        ),
        migrations.DeleteModel(
            name="PluginLogEntry",
        ),
        migrations.RenameField(
            model_name="dashboard",
            old_name="tags",
            new_name="deprecated_tags_v2",
        ),
        migrations.RenameField(
            model_name="insight",
            old_name="tags",
            new_name="deprecated_tags_v2",
        ),
        migrations.AlterField(
            model_name="dashboard",
            name="deprecated_tags_v2",
            field=django.contrib.postgres.fields.ArrayField(
                base_field=models.CharField(max_length=32),
                blank=True,
                db_column="tags",
                default=None,
                null=True,
                size=None,
            ),
        ),
        migrations.AlterField(
            model_name="insight",
            name="deprecated_tags_v2",
            field=django.contrib.postgres.fields.ArrayField(
                base_field=models.CharField(max_length=32),
                blank=True,
                db_column="tags",
                default=None,
                null=True,
                size=None,
            ),
        ),
        migrations.CreateModel(
            name="Integration",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("kind", models.CharField(choices=[("slack", "Slack")], max_length=10)),
                ("config", models.JSONField(default=dict)),
                ("sensitive_config", models.JSONField(default=dict)),
                ("errors", models.TextField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL
                    ),
                ),
                ("team", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.team")),
            ],
        ),
        migrations.AddField(
            model_name="featureflag",
            name="ensure_experience_continuity",
            field=models.BooleanField(blank=True, default=False, null=True),
        ),
        migrations.CreateModel(
            name="FeatureFlagHashKeyOverride",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("feature_flag_key", models.CharField(max_length=400)),
                ("hash_key", models.CharField(max_length=400)),
                ("person", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.person")),
                ("team", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.team")),
            ],
        ),
        migrations.AddConstraint(
            model_name="featureflaghashkeyoverride",
            constraint=models.UniqueConstraint(
                fields=("team", "person", "feature_flag_key"), name="Unique hash_key for a user/team/feature_flag combo"
            ),
        ),
        migrations.CreateModel(
            name="SharingConfiguration",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("enabled", models.BooleanField(default=False)),
                (
                    "access_token",
                    models.CharField(
                        blank=True,
                        default=posthog.models.sharing_configuration.get_default_access_token,
                        max_length=400,
                        null=True,
                        unique=True,
                    ),
                ),
                (
                    "dashboard",
                    models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to="posthog.dashboard"),
                ),
                (
                    "insight",
                    models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to="posthog.insight"),
                ),
                ("team", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.team")),
            ],
        ),
        migrations.AddField(
            model_name="exportedasset",
            name="content_location",
            field=models.TextField(blank=True, max_length=1000, null=True),
        ),
        migrations.AddField(
            model_name="exportedasset",
            name="created_by",
            field=models.ForeignKey(
                blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.CreateModel(
            name="EventBuffer",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("event", models.JSONField(blank=True, null=True)),
                ("process_at", models.DateTimeField()),
                ("locked", models.BooleanField()),
            ],
        ),
        migrations.AddField(
            model_name="exportedasset",
            name="export_context",
            field=models.JSONField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="asyncmigration",
            name="parameters",
            field=models.JSONField(default=dict),
        ),
        migrations.CreateModel(
            name="PromptSequenceState",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("key", models.CharField(max_length=400)),
                ("last_updated_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("step", models.IntegerField(default=0)),
                ("completed", models.BooleanField(default=False)),
                ("dismissed", models.BooleanField(default=False)),
                ("person", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.person")),
                ("team", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.team")),
            ],
        ),
        migrations.AddConstraint(
            model_name="promptsequencestate",
            constraint=models.UniqueConstraint(
                fields=("team", "person", "key"), name="unique sequence key for person for team"
            ),
        ),
        migrations.CreateModel(
            name="UserPromptSequenceState",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("key", models.CharField(max_length=400)),
                ("last_updated_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("step", models.IntegerField(default=0)),
                ("completed", models.BooleanField(default=False)),
                ("dismissed", models.BooleanField(default=False)),
                ("user", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddConstraint(
            model_name="userpromptsequencestate",
            constraint=models.UniqueConstraint(fields=("user", "key"), name="unique sequence key for user"),
        ),
        migrations.CreateModel(
            name="AsyncDeletion",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("deletion_type", models.PositiveSmallIntegerField()),
                ("key", models.CharField(max_length=400)),
                ("group_type_index", models.IntegerField(null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("delete_verified_at", models.DateTimeField(blank=True, null=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL
                    ),
                ),
                ("team", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.team")),
            ],
        ),
        migrations.AddIndex(
            model_name="asyncdeletion",
            index=models.Index(fields=["delete_verified_at"], name="delete_verified_at index"),
        ),
        migrations.AddConstraint(
            model_name="asyncdeletion",
            constraint=models.UniqueConstraint(
                condition=models.Q(("group_type_index__isnull", True)),
                fields=("deletion_type", "key"),
                name="unique deletion",
            ),
        ),
        migrations.AddConstraint(
            model_name="asyncdeletion",
            constraint=models.UniqueConstraint(
                fields=("deletion_type", "key", "group_type_index"), name="unique deletion for groups"
            ),
        ),
        migrations.AddField(
            model_name="team",
            name="test_account_filters_default_checked",
            field=models.BooleanField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="personalapikey",
            name="secure_value",
            field=models.CharField(editable=False, max_length=300, null=True, unique=True),
        ),
        migrations.AlterField(
            model_name="personalapikey",
            name="value",
            field=models.CharField(blank=True, editable=False, max_length=50, null=True, unique=True),
        ),
        migrations.AddField(
            model_name="team",
            name="recording_domains",
            field=django.contrib.postgres.fields.ArrayField(
                base_field=models.CharField(max_length=200, null=True), blank=True, null=True, size=None
            ),
        ),
        migrations.AddField(
            model_name="team",
            name="capture_console_log_opt_in",
            field=models.BooleanField(blank=True, null=True),
        ),
        migrations.CreateModel(
            name="NotificationViewed",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=posthog.models.utils.UUIDT, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("last_viewed_activity_date", models.DateTimeField(default=None)),
                (
                    "user",
                    models.ForeignKey(
                        null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
        ),
        migrations.AddConstraint(
            model_name="notificationviewed",
            constraint=models.UniqueConstraint(fields=("user",), name="posthog_user_unique_viewed_date"),
        ),
        migrations.AddField(
            model_name="pluginconfig",
            name="web_token",
            field=models.CharField(default=None, max_length=64, null=True),
        ),
        migrations.AddIndex(
            model_name="pluginconfig",
            index=models.Index(fields=["web_token"], name="posthog_plu_web_tok_ac760a_idx"),
        ),
        migrations.AddIndex(
            model_name="pluginconfig",
            index=models.Index(fields=["enabled"], name="posthog_plu_enabled_f5ed94_idx"),
        ),
        migrations.AddField(
            model_name="team",
            name="inject_web_apps",
            field=models.BooleanField(null=True),
        ),
        migrations.AddField(
            model_name="user",
            name="partial_notification_settings",
            field=models.JSONField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name="dashboardtile",
            name="dashboard",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, related_name="tiles", to="posthog.dashboard"
            ),
        ),
        migrations.AddField(
            model_name="activitylog",
            name="is_system",
            field=models.BooleanField(null=True),
        ),
        migrations.AlterField(
            model_name="dashboardtile",
            name="insight",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="dashboard_tiles",
                to="posthog.insight",
            ),
        ),
        migrations.CreateModel(
            name="Text",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("body", models.CharField(blank=True, max_length=4000, null=True)),
                ("last_modified_at", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL
                    ),
                ),
                (
                    "last_modified_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="modified_text_tiles",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                ("team", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.team")),
            ],
        ),
        migrations.AddField(
            model_name="dashboardtile",
            name="text",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="dashboard_tiles",
                to="posthog.text",
            ),
        ),
        migrations.AddConstraint(
            model_name="dashboardtile",
            constraint=models.UniqueConstraint(
                condition=models.Q(("insight__isnull", False)),
                fields=("dashboard", "insight"),
                name="unique_dashboard_insight",
            ),
        ),
        migrations.AddConstraint(
            model_name="dashboardtile",
            constraint=models.UniqueConstraint(
                condition=models.Q(("text__isnull", False)), fields=("dashboard", "text"), name="unique_dashboard_text"
            ),
        ),
        migrations.AddConstraint(
            model_name="dashboardtile",
            constraint=models.CheckConstraint(
                check=models.Q(
                    models.Q(("insight__isnull", False), ("text__isnull", True)),
                    models.Q(("insight__isnull", True), ("text__isnull", False)),
                    _connector="OR",
                ),
                name="dash_tile_exactly_one_related_object",
            ),
        ),
        migrations.AddField(
            model_name="pluginsourcefile",
            name="updated_at",
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="dashboardtile",
            name="deleted",
            field=models.BooleanField(blank=True, null=True),
        ),
        migrations.CreateModel(
            name="UploadedMedia",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=posthog.models.utils.UUIDT, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("media_location", models.TextField(blank=True, max_length=1000, null=True)),
                ("content_type", models.TextField(blank=True, max_length=100, null=True)),
                ("file_name", models.TextField(blank=True, max_length=1000, null=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL
                    ),
                ),
                ("team", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.team")),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AlterField(
            model_name="organization",
            name="plugins_access_level",
            field=models.PositiveSmallIntegerField(
                choices=[(0, "none"), (3, "config"), (6, "install"), (9, "root")], default=3
            ),
        ),
        migrations.DeleteModel(
            name="PromptSequenceState",
        ),
        migrations.AddField(
            model_name="plugin",
            name="icon",
            field=models.CharField(blank=True, max_length=800, null=True),
        ),
        migrations.AddField(
            model_name="featureflag",
            name="performed_rollback",
            field=models.BooleanField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="featureflag",
            name="rollback_conditions",
            field=models.JSONField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="organization",
            name="usage",
            field=models.JSONField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="organization",
            name="customer_id",
            field=models.CharField(blank=True, max_length=200, null=True),
        ),
        migrations.CreateModel(
            name="SessionRecordingPlaylist",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("short_id", models.CharField(blank=True, default=posthog.utils.generate_short_id, max_length=12)),
                ("name", models.CharField(blank=True, max_length=400, null=True)),
                ("derived_name", models.CharField(blank=True, max_length=400, null=True)),
                ("description", models.TextField(blank=True)),
                ("pinned", models.BooleanField(default=False)),
                ("deleted", models.BooleanField(default=False)),
                ("filters", models.JSONField(default=dict)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("last_modified_at", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL
                    ),
                ),
                (
                    "last_modified_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="modified_recordings",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                ("team", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.team")),
                ("is_static", models.BooleanField(default=False)),
            ],
            options={
                "unique_together": {("team", "short_id")},
            },
        ),
        migrations.CreateModel(
            name="SessionRecordingPlaylistItem",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("session_id", models.CharField(max_length=200)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("deleted", models.BooleanField(blank=True, null=True)),
                (
                    "playlist",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="playlist_items",
                        to="posthog.sessionrecordingplaylist",
                    ),
                ),
            ],
            options={
                "unique_together": {("session_id", "playlist_id")},
            },
        ),
        migrations.RenameField(
            model_name="asyncdeletion",
            old_name="team",
            new_name="team_id",
        ),
        migrations.AlterField(
            model_name="asyncdeletion",
            name="team_id",
            field=models.IntegerField(),
        ),
        migrations.CreateModel(
            name="InsightCachingState",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=posthog.models.utils.UUIDT, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("cache_key", models.CharField(max_length=400)),
                ("target_cache_age_seconds", models.IntegerField(null=True)),
                ("last_refresh", models.DateTimeField(blank=True, null=True)),
                ("last_refresh_queued_at", models.BooleanField(null=True)),
                ("refresh_attempt", models.IntegerField(default=0)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "dashboard_tile",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="caching_state",
                        to="posthog.dashboardtile",
                    ),
                ),
                (
                    "insight",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="caching_state", to="posthog.insight"
                    ),
                ),
                ("team", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.team")),
            ],
        ),
        migrations.AddIndex(
            model_name="insightcachingstate",
            index=models.Index(fields=["cache_key"], name="filter_by_cache_key_idx"),
        ),
        migrations.AddConstraint(
            model_name="insightcachingstate",
            constraint=models.UniqueConstraint(
                condition=models.Q(("insight__isnull", False)),
                fields=("insight",),
                name="unique_insight_for_caching_state_idx",
            ),
        ),
        migrations.AddConstraint(
            model_name="insightcachingstate",
            constraint=models.UniqueConstraint(
                condition=models.Q(("dashboard_tile__isnull", False)),
                fields=("insight", "dashboard_tile"),
                name="unique_dashboard_tile_idx",
            ),
        ),
        migrations.RemoveField(
            model_name="insightcachingstate",
            name="last_refresh_queued_at",
        ),
        migrations.AddField(
            model_name="insightcachingstate",
            name="last_refresh_queued_at",
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.RemoveConstraint(
            model_name="insightcachingstate",
            name="unique_insight_for_caching_state_idx",
        ),
        migrations.AddConstraint(
            model_name="insightcachingstate",
            constraint=models.UniqueConstraint(
                condition=models.Q(("dashboard_tile__isnull", True)),
                fields=("insight",),
                name="unique_insight_for_caching_state_idx",
            ),
        ),
        migrations.AlterField(
            model_name="insightcachingstate",
            name="dashboard_tile",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="caching_states",
                to="posthog.dashboardtile",
            ),
        ),
        migrations.AlterField(
            model_name="insightcachingstate",
            name="insight",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, related_name="caching_states", to="posthog.insight"
            ),
        ),
        migrations.CreateModel(
            name="Prompt",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("step", models.IntegerField()),
                ("type", models.CharField(max_length=200)),
                ("title", models.CharField(max_length=200)),
                ("text", models.CharField(max_length=1000)),
                ("placement", models.CharField(default="top", max_length=200)),
                ("buttons", models.JSONField()),
                ("reference", models.CharField(default=None, max_length=200, null=True)),
                ("icon", models.CharField(max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name="PromptSequence",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("key", models.CharField(max_length=200)),
                ("type", models.CharField(max_length=200)),
                (
                    "path_match",
                    django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=200), size=None),
                ),
                (
                    "path_exclude",
                    django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=200), size=None),
                ),
                ("status", models.CharField(max_length=200)),
                ("requires_opt_in", models.BooleanField(default=False)),
                ("autorun", models.BooleanField(default=True)),
                ("must_have_completed", models.ManyToManyField(blank=True, to="posthog.PromptSequence")),
                ("prompts", models.ManyToManyField(to="posthog.Prompt")),
            ],
        ),
        migrations.CreateModel(
            name="UserPromptState",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("last_updated_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("step", models.IntegerField(default=None, null=True)),
                ("completed", models.BooleanField(default=False)),
                ("dismissed", models.BooleanField(default=False)),
                (
                    "sequence",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.promptsequence"),
                ),
                ("user", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.DeleteModel(
            name="UserPromptSequenceState",
        ),
        migrations.AddConstraint(
            model_name="userpromptstate",
            constraint=models.UniqueConstraint(fields=("user", "sequence"), name="unique_user_prompt_state"),
        ),
        migrations.AddConstraint(
            model_name="promptsequence",
            constraint=models.UniqueConstraint(fields=("key",), name="unique_prompt_sequence"),
        ),
        migrations.AddConstraint(
            model_name="insightcachingstate",
            constraint=posthog.models.utils.UniqueConstraintByExpression(
                concurrently=False,
                expression="(insight_id, coalesce(dashboard_tile_id, -1))",
                name="unique_insight_tile_idx",
            ),
        ),
        migrations.RemoveConstraint(
            model_name="insightcachingstate",
            name="unique_dashboard_tile_idx",
        ),
        migrations.RemoveConstraint(
            model_name="insightcachingstate",
            name="unique_insight_for_caching_state_idx",
        ),
    ]
