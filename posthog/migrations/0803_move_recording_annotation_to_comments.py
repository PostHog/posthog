# Generated by Django 4.2.22 on 2025-07-23 22:32

from django.db import migrations

# Bulk update every CHUNK_SIZE items
CHUNK_SIZE = 500


def migrate_recording_annotations(apps, schema_editor):
    Annotation = apps.get_model("posthog", "Annotation")
    Comment = apps.get_model("posthog", "Comment")

    recording_annotations = Annotation.objects.filter(scope="recording", deleted=False)

    comment_chunk = []
    annotation_chunk = []
    for annotation in recording_annotations.iterator(chunk_size=CHUNK_SIZE):
        # technically date_marker can be null, but a recording comment without one is invalid
        if annotation.date_marker:
            comment_chunk.append(
                Comment(
                    content=annotation.content,
                    scope="recording",
                    item_id=annotation.recording_id,
                    item_context={
                        "is_emoji": annotation.is_emoji,
                        "time_in_recording": annotation.date_marker.isoformat(),
                        "migrated_from_annotation": annotation.id,
                    },
                    team_id=annotation.team_id,
                    created_by=annotation.created_by,
                    created_at=annotation.created_at,
                )
            )

        annotation.deleted = True
        annotation_chunk.append(annotation)

        # Bulk update every CHUNK_SIZE items
        if len(comment_chunk) == CHUNK_SIZE or len(annotation_chunk) == CHUNK_SIZE:
            Comment.objects.bulk_create(comment_chunk)
            Annotation.objects.bulk_update(annotation_chunk, fields=["deleted"])
            comment_chunk = []
            annotation_chunk = []

    if comment_chunk:  # Handle remaining items if length is less than CHUNK_SIZE
        Comment.objects.bulk_create(comment_chunk)
        Annotation.objects.bulk_update(annotation_chunk, fields=["deleted"])


class Migration(migrations.Migration):
    dependencies = [
        ("posthog", "0802_messagecategory_category_type_and_more_fix"),
    ]

    operations = [
        migrations.RunPython(migrate_recording_annotations, reverse_code=migrations.RunPython.noop),
    ]
