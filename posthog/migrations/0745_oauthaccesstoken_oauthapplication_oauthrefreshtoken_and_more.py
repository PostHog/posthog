# Generated by Django 4.2.18 on 2025-05-28 08:29

from django.conf import settings
import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion
import oauth2_provider.generators
import oauth2_provider.models
import posthog.models.utils
import uuid


class Migration(migrations.Migration):
    dependencies = [
        ("posthog", "0744_datawarehousetable_size_in_s3_mib"),
    ]

    # Note: We need to run this migration before the oauth2_provider migrations, as we swap out their models for our own
    run_before = [
        ("oauth2_provider", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="OAuthAccessToken",
            fields=[
                ("token", models.TextField()),
                (
                    "token_checksum",
                    oauth2_provider.models.TokenChecksumField(db_index=True, max_length=64, unique=True),
                ),
                ("expires", models.DateTimeField()),
                ("scope", models.TextField(blank=True)),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("updated", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=posthog.models.utils.UUIDT, editable=False, primary_key=True, serialize=False
                    ),
                ),
                (
                    "scoped_teams",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.IntegerField(), blank=True, null=True, size=None
                    ),
                ),
                (
                    "scoped_organizations",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=100), blank=True, null=True, size=None
                    ),
                ),
            ],
            options={
                "verbose_name": "OAuth Access Token",
                "verbose_name_plural": "OAuth Access Tokens",
                "abstract": False,
                "swappable": "OAUTH2_PROVIDER_ACCESS_TOKEN_MODEL",
            },
        ),
        migrations.CreateModel(
            name="OAuthApplication",
            fields=[
                (
                    "client_id",
                    models.CharField(
                        db_index=True,
                        default=oauth2_provider.generators.generate_client_id,
                        max_length=100,
                        unique=True,
                    ),
                ),
                ("redirect_uris", models.TextField(blank=True, help_text="Allowed URIs list, space separated")),
                (
                    "post_logout_redirect_uris",
                    models.TextField(
                        blank=True, default="", help_text="Allowed Post Logout URIs list, space separated"
                    ),
                ),
                (
                    "client_type",
                    models.CharField(choices=[("confidential", "Confidential"), ("public", "Public")], max_length=32),
                ),
                (
                    "authorization_grant_type",
                    models.CharField(
                        choices=[
                            ("authorization-code", "Authorization code"),
                            ("implicit", "Implicit"),
                            ("password", "Resource owner password-based"),
                            ("client-credentials", "Client credentials"),
                            ("openid-hybrid", "OpenID connect hybrid"),
                        ],
                        max_length=32,
                    ),
                ),
                (
                    "client_secret",
                    oauth2_provider.models.ClientSecretField(
                        blank=True,
                        db_index=True,
                        default=oauth2_provider.generators.generate_client_secret,
                        help_text="Hashed on Save. Copy it now if this is a new secret.",
                        max_length=255,
                    ),
                ),
                ("hash_client_secret", models.BooleanField(default=True)),
                ("name", models.CharField(blank=True, max_length=255)),
                ("skip_authorization", models.BooleanField(default=False)),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("updated", models.DateTimeField(auto_now=True)),
                (
                    "algorithm",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("", "No OIDC support"),
                            ("RS256", "RSA with SHA-2 256"),
                            ("HS256", "HMAC with SHA-2 256"),
                        ],
                        default="",
                        max_length=5,
                    ),
                ),
                (
                    "allowed_origins",
                    models.TextField(
                        blank=True, default="", help_text="Allowed origins list to enable CORS, space separated"
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=posthog.models.utils.UUIDT, editable=False, primary_key=True, serialize=False
                    ),
                ),
                (
                    "organization",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="oauth_applications",
                        to="posthog.organization",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
            options={
                "verbose_name": "OAuth Application",
                "verbose_name_plural": "OAuth Applications",
                "abstract": False,
                "swappable": "OAUTH2_PROVIDER_APPLICATION_MODEL",
            },
        ),
        migrations.CreateModel(
            name="OAuthRefreshToken",
            fields=[
                ("token", models.CharField(max_length=255)),
                ("token_family", models.UUIDField(blank=True, editable=False, null=True)),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("revoked", models.DateTimeField(null=True)),
                (
                    "id",
                    models.UUIDField(
                        default=posthog.models.utils.UUIDT, editable=False, primary_key=True, serialize=False
                    ),
                ),
                (
                    "scoped_teams",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.IntegerField(), blank=True, null=True, size=None
                    ),
                ),
                (
                    "scoped_organizations",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=100), blank=True, null=True, size=None
                    ),
                ),
                (
                    "access_token",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="refresh_token",
                        to=settings.OAUTH2_PROVIDER_ACCESS_TOKEN_MODEL,
                    ),
                ),
                (
                    "application",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to=settings.OAUTH2_PROVIDER_APPLICATION_MODEL
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="oauth_refresh_tokens",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "OAuth Refresh Token",
                "verbose_name_plural": "OAuth Refresh Tokens",
                "abstract": False,
                "swappable": "OAUTH2_PROVIDER_REFRESH_TOKEN_MODEL",
                "unique_together": {("token", "revoked")},
            },
        ),
        migrations.CreateModel(
            name="OAuthIDToken",
            fields=[
                ("jti", models.UUIDField(default=uuid.uuid4, editable=False, unique=True, verbose_name="JWT Token ID")),
                ("expires", models.DateTimeField()),
                ("scope", models.TextField(blank=True)),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("updated", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=posthog.models.utils.UUIDT, editable=False, primary_key=True, serialize=False
                    ),
                ),
                (
                    "application",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.OAUTH2_PROVIDER_APPLICATION_MODEL,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="oauth_id_tokens",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "OAuth ID Token",
                "verbose_name_plural": "OAuth ID Tokens",
                "abstract": False,
                "swappable": "OAUTH2_PROVIDER_ID_TOKEN_MODEL",
            },
        ),
        migrations.CreateModel(
            name="OAuthGrant",
            fields=[
                ("code", models.CharField(max_length=255, unique=True)),
                ("expires", models.DateTimeField()),
                ("redirect_uri", models.TextField()),
                ("scope", models.TextField(blank=True)),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("code_challenge", models.CharField(blank=True, default="", max_length=128)),
                (
                    "code_challenge_method",
                    models.CharField(
                        blank=True, choices=[("plain", "plain"), ("S256", "S256")], default="", max_length=10
                    ),
                ),
                ("nonce", models.CharField(blank=True, default="", max_length=255)),
                ("claims", models.TextField(blank=True)),
                (
                    "id",
                    models.UUIDField(
                        default=posthog.models.utils.UUIDT, editable=False, primary_key=True, serialize=False
                    ),
                ),
                (
                    "scoped_teams",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.IntegerField(), blank=True, null=True, size=None
                    ),
                ),
                (
                    "scoped_organizations",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=100), blank=True, null=True, size=None
                    ),
                ),
                (
                    "application",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to=settings.OAUTH2_PROVIDER_APPLICATION_MODEL
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="oauth_grants",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "OAuth Grant",
                "verbose_name_plural": "OAuth Grants",
                "abstract": False,
                "swappable": "OAUTH2_PROVIDER_GRANT_MODEL",
            },
        ),
        migrations.AddField(
            model_name="oauthaccesstoken",
            name="application",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to=settings.OAUTH2_PROVIDER_APPLICATION_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="oauthaccesstoken",
            name="id_token",
            field=models.OneToOneField(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="access_token",
                to=settings.OAUTH2_PROVIDER_ID_TOKEN_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="oauthaccesstoken",
            name="source_refresh_token",
            field=models.OneToOneField(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="refreshed_access_token",
                to=settings.OAUTH2_PROVIDER_REFRESH_TOKEN_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="oauthaccesstoken",
            name="user",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="oauth_access_tokens",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddConstraint(
            model_name="oauthgrant",
            constraint=models.CheckConstraint(
                check=models.Q(("code_challenge_method", "S256")), name="enforce_supported_code_challenge_method"
            ),
        ),
        migrations.AddConstraint(
            model_name="oauthapplication",
            constraint=models.CheckConstraint(
                check=models.Q(("skip_authorization", False)), name="enforce_skip_authorization_false"
            ),
        ),
        migrations.AddConstraint(
            model_name="oauthapplication",
            constraint=models.CheckConstraint(check=models.Q(("algorithm", "RS256")), name="enforce_rs256_algorithm"),
        ),
        migrations.AddConstraint(
            model_name="oauthapplication",
            constraint=models.CheckConstraint(
                check=models.Q(("authorization_grant_type", "authorization-code")), name="enforce_supported_grant_types"
            ),
        ),
    ]
