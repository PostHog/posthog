# Generated by Django 4.2.22 on 2025-06-06 20:50

from django.db import transaction, migrations, models
import structlog

logger = structlog.get_logger(__name__)


def backfill_feature_flag_updated_at(apps, schema_editor):
    FeatureFlag = apps.get_model("posthog", "FeatureFlag")
    ActivityLog = apps.get_model("posthog", "ActivityLog")

    batch_size = 1000
    total_processed = 0
    total_updated = 0

    total_count = FeatureFlag.objects.all().count()

    if total_count == 0:
        logger.info("no_records_to_update")
        return

    logger.info("starting_backfill", total_records=total_count)

    # Use keyset pagination
    last_id = 0
    batch_count = 0

    while True:
        # Query for just the batch of IDs using ORM
        query = FeatureFlag.objects.order_by("id")

        if last_id:
            query = query.filter(id__gt=last_id)

        # Get IDs for this batch
        batch_ids = list(query.values_list("id", flat=True)[:batch_size])

        if not batch_ids:
            break

        batch_updated = 0
        with transaction.atomic():
            # Get the full objects for just this batch
            batch_feature_flags = FeatureFlag.objects.filter(id__in=batch_ids)

            for feature_flag in batch_feature_flags:
                if feature_flag.updated_at is None:
                    last_activity_log = (
                        ActivityLog.objects.filter(
                            team_id=feature_flag.team_id, scope="FeatureFlag", item_id=feature_flag.id
                        )
                        .order_by("-created_at")
                        .first()
                    )
                    if last_activity_log:
                        feature_flag.updated_at = last_activity_log.created_at
                    else:
                        feature_flag.updated_at = feature_flag.created_at
                    feature_flag.save(update_fields=["updated_at"])
                    batch_updated += 1

        # Track progress
        batch_count += 1
        total_processed += len(batch_ids)
        total_updated += batch_updated
        last_id = batch_ids[-1]

        # Calculate progress percentage
        progress = (total_processed / total_count) * 100 if total_count > 0 else 100

        logger.info(
            "batch_completed",
            batch_num=batch_count,
            batch_size=len(batch_ids),
            batch_updated=batch_updated,
            processed=total_processed,
            updated=total_updated,
            total=total_count,
            progress=round(progress, 2),
        )

    logger.info("backfill_completed", processed=total_processed, updated=total_updated, total_batches=batch_count)


class Migration(migrations.Migration):
    dependencies = [
        ("posthog", "0762_team_base_currency"),
    ]

    operations = [
        migrations.AddField(
            model_name="featureflag",
            name="updated_at",
            field=models.DateTimeField(null=True),  # I manually removed auto_now=True to avoid table locks.
        ),
        migrations.RunPython(backfill_feature_flag_updated_at, reverse_code=migrations.RunPython.noop),
    ]
