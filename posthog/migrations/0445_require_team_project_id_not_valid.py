# Generated by Django 4.2.11 on 2024-07-10 09:27

from django.db import migrations, models
from django.contrib.postgres.operations import AddConstraintNotValid
import django.db.models.deletion


class Migration(migrations.Migration):
    dependencies = [
        ("posthog", "0444_integration_unique_id"),
    ]

    operations = [
        migrations.SeparateDatabaseAndState(
            # No database operations here - this is only for setting null=True on the `Team.project` field.
            # Due to a mishap in posthog/migrations/0397_projects_backfill.py, the `project` field was non-nullable
            # in Django's state, BUT in fact still nullable in the database. This state update fixes the discrepancy.
            # (We'll be using a `CheckConstraint()` instead of `null=False` to avoid locking the table - see below.)
            state_operations=[
                migrations.AlterField(
                    model_name="team",
                    name="project",
                    field=models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="teams",
                        related_query_name="team",
                        to="posthog.project",
                    ),
                )
            ]
        ),
        AddConstraintNotValid(
            # To be validated with `ValidateConstraint()` in a separate later migration. See Django docs:
            # https://docs.djangoproject.com/en/4.2/ref/contrib/postgres/operations/#adding-constraints-without-enforcing-validation
            model_name="team",
            constraint=models.CheckConstraint(
                check=models.Q(("project_id__isnull", False)), name="project_id_is_not_null"
            ),
        ),
    ]
