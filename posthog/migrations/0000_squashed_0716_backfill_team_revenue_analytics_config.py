# Generated by Django 4.2.22 on 2025-06-26 14:58

import datetime
from decimal import Decimal
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.contrib.postgres.fields
import django.contrib.postgres.indexes
import django.contrib.postgres.operations
import django.core.validators
from django.db import migrations, models
import django.db.models.functions.comparison
import django.utils.timezone
import posthog.helpers.encrypted_fields
import posthog.models.activity_logging.activity_log
import posthog.models.utils
import posthog.schema
import posthog.utils
import posthog.warehouse.models.datawarehouse_saved_query
import posthog.warehouse.models.modeling


def migration_0310_create_starter_template(apps, schema_editor):
    DashboardTemplate = apps.get_model("posthog", "DashboardTemplate")
    DashboardTemplate.objects.create(
        template_name="Product analytics",
        dashboard_description="High-level overview of your product including daily active users, weekly active users, retention, and growth accounting.",
        dashboard_filters={},
        tiles=[
            {
                "name": "Daily active users (DAUs)",
                "type": "INSIGHT",
                "color": "blue",
                "filters": {
                    "events": [{"id": "$pageview", "math": "dau", "type": "events"}],
                    "display": "ActionsLineGraph",
                    "insight": "TRENDS",
                    "interval": "day",
                    "date_from": "-30d",
                },
                "layouts": {
                    "sm": {"h": 5, "w": 6, "x": 0, "y": 0, "minH": 5, "minW": 3},
                    "xs": {"h": 5, "w": 1, "x": 0, "y": 0, "minH": 5, "minW": 3},
                },
                "description": "Shows the number of unique users that use your app every day.",
            },
            {
                "name": "Weekly active users (WAUs)",
                "type": "INSIGHT",
                "color": "green",
                "filters": {
                    "events": [
                        {
                            "id": "$pageview",
                            "math": "dau",
                            "type": "events",
                        }
                    ],
                    "display": "ActionsLineGraph",
                    "insight": "TRENDS",
                    "interval": "week",
                    "date_from": "-90d",
                },
                "layouts": {
                    "sm": {"h": 5, "w": 6, "x": 6, "y": 0, "minH": 5, "minW": 3},
                    "xs": {"h": 5, "w": 1, "x": 0, "y": 5, "minH": 5, "minW": 3},
                },
                "description": "Shows the number of unique users that use your app every week.",
            },
            {
                "name": "Retention",
                "type": "INSIGHT",
                "color": "blue",
                "filters": {
                    "period": "Week",
                    "insight": "RETENTION",
                    "target_entity": {"id": "$pageview", "type": "events"},
                    "retention_type": "retention_first_time",
                    "returning_entity": {"id": "$pageview", "type": "events"},
                },
                "layouts": {
                    "sm": {"h": 5, "w": 6, "x": 6, "y": 5, "minH": 5, "minW": 3},
                    "xs": {"h": 5, "w": 1, "x": 0, "y": 10, "minH": 5, "minW": 3},
                },
                "description": "Weekly retention of your users.",
            },
            {
                "name": "Growth accounting",
                "type": "INSIGHT",
                "color": "purple",
                "filters": {
                    "events": [{"id": "$pageview", "type": "events"}],
                    "insight": "LIFECYCLE",
                    "interval": "week",
                    "shown_as": "Lifecycle",
                    "date_from": "-30d",
                    "entity_type": "events",
                },
                "layouts": {
                    "sm": {"h": 5, "w": 6, "x": 0, "y": 5, "minH": 5, "minW": 3},
                    "xs": {"h": 5, "w": 1, "x": 0, "y": 15, "minH": 5, "minW": 3},
                },
                "description": "How many of your users are new, returning, resurrecting, or dormant each week.",
            },
            {
                "name": "Referring domain (last 14 days)",
                "type": "INSIGHT",
                "color": "black",
                "filters": {
                    "events": [{"id": "$pageview", "math": "dau", "type": "events"}],
                    "display": "ActionsBarValue",
                    "insight": "TRENDS",
                    "interval": "day",
                    "breakdown": "$referring_domain",
                    "date_from": "-14d",
                    "breakdown_type": "event",
                },
                "layouts": {
                    "sm": {"h": 5, "w": 6, "x": 0, "y": 10, "minH": 5, "minW": 3},
                    "xs": {"h": 5, "w": 1, "x": 0, "y": 20, "minH": 5, "minW": 3},
                },
                "description": "Shows the most common referring domains for your users over the past 14 days.",
            },
            {
                "name": "Pageview funnel, by browser",
                "type": "INSIGHT",
                "color": "green",
                "filters": {
                    "events": [
                        {
                            "id": "$pageview",
                            "type": "events",
                            "order": 0,
                            "custom_name": "First page view",
                        },
                        {
                            "id": "$pageview",
                            "type": "events",
                            "order": 1,
                            "custom_name": "Second page view",
                        },
                        {
                            "id": "$pageview",
                            "type": "events",
                            "order": 2,
                            "custom_name": "Third page view",
                        },
                    ],
                    "layout": "horizontal",
                    "display": "FunnelViz",
                    "insight": "FUNNELS",
                    "interval": "day",
                    "exclusions": [],
                    "breakdown_type": "event",
                    "breakdown": "$browser",
                    "funnel_viz_type": "steps",
                },
                "layouts": {
                    "sm": {"h": 5, "w": 6, "x": 6, "y": 10, "minH": 5, "minW": 3},
                    "xs": {"h": 5, "w": 1, "x": 0, "y": 25, "minH": 5, "minW": 3},
                },
                "description": "This example funnel shows how many of your users have completed 3 page views, broken down by browser.",
            },
        ],
        tags=[],
    )


def migration_0328_create_starter_template(apps, schema_editor):
    DashboardTemplate = apps.get_model("posthog", "DashboardTemplate")
    DashboardTemplate.objects.create(
        template_name="Flagged Feature Usage",
        dashboard_description="Overview of engagement with the flagged feature including daily active users and weekly active users.",
        dashboard_filters={},
        tiles=[
            {
                "name": "Daily active users (DAUs)",
                "type": "INSIGHT",
                "color": "blue",
                "filters": {
                    "events": ["{ENGAGEMENT}"],
                    "display": "ActionsLineGraph",
                    "insight": "TRENDS",
                    "interval": "day",
                    "date_from": "-30d",
                },
                "layouts": {
                    "sm": {"h": 5, "w": 6, "x": 0, "y": 0, "minH": 5, "minW": 3},
                    "xs": {"h": 5, "w": 1, "x": 0, "y": 0, "minH": 5, "minW": 3},
                },
                "description": "Shows the number of unique users that use your feature every day.",
            },
            {
                "name": "Weekly active users (WAUs)",
                "type": "INSIGHT",
                "color": "green",
                "filters": {
                    "events": ["{ENGAGEMENT}"],
                    "display": "ActionsLineGraph",
                    "insight": "TRENDS",
                    "interval": "week",
                    "date_from": "-90d",
                },
                "layouts": {
                    "sm": {"h": 5, "w": 6, "x": 6, "y": 0, "minH": 5, "minW": 3},
                    "xs": {"h": 5, "w": 1, "x": 0, "y": 5, "minH": 5, "minW": 3},
                },
                "description": "Shows the number of unique users that use your feature every week.",
            },
        ],
        tags=[],
        variables=[
            {
                "id": "ENGAGEMENT",
                "name": "Engagement",
                "type": "event",
                "default": {"name": "$pageview", "id": "$pageview"},
                "required": True,
                "description": "The event you use to define a user using the new feature",
            }
        ],
        scope="feature_flag",
    )


def migration_0501_create_billing_team_group(apps, schema_editor):
    from django.contrib.auth.models import Group

    Group.objects.get_or_create(name="Billing Team")


def migration_0501_reverse_create_billing_team_group(apps, schema_editor):
    from django.contrib.auth.models import Group

    Group.objects.filter(name="Billing Team").delete()


def migration_0530_update_filters_to_queries(apps, schema_editor):
    from posthog.hogql_queries.legacy_compatibility.filter_to_query import filter_to_query
    from posthog.schema import InsightVizNode

    DashboardTemplate = apps.get_model("posthog", "DashboardTemplate")

    for template in DashboardTemplate.objects.all():
        for tile in template.tiles:
            if "filters" in tile:
                source = filter_to_query(tile["filters"], allow_variables=True)
                query = InsightVizNode(source=source)
                tile["query"] = query.model_dump(exclude_none=True)
                del tile["filters"]
        template.save()


def migration_0537_add_default_themes(apps, schema_editor):
    DataColorTheme = apps.get_model("posthog", "DataColorTheme")

    DataColorTheme.objects.create(
        name="Default Theme",
        colors=[
            "#1d4aff",
            "#621da6",
            "#42827e",
            "#ce0e74",
            "#f14f58",
            "#7c440e",
            "#529a0a",
            "#0476fb",
            "#fe729e",
            "#35416b",
            "#41cbc4",
            "#b64b02",
            "#e4a604",
            "#a56eff",
            "#30d5c8",
        ],
    )


def migration_0545_migrate_insight_filters_to_query(apps, schema_editor):
    from posthog.hogql_queries.legacy_compatibility.filter_to_query import filter_to_query
    from posthog.models import Insight
    from posthog.schema import InsightVizNode
    from django.db.models import Q
    import logging

    logger = logging.getLogger(__name__)
    insights = Insight.objects.filter(Q(filters__insight__isnull=False) & Q(query__kind__isnull=True))
    migrated_at = datetime.datetime.now()

    for insight in insights.iterator(chunk_size=100):
        try:
            source = filter_to_query(insight.filters)
            query = InsightVizNode(source=source)
            insight.query = query.model_dump(exclude_none=True)

            # add a migrated_at as filter, so that we can find migrated insights for rolling back
            insight.filters["migrated_at"] = str(migrated_at)
            insight.save()
        except Exception:
            logger.error(f"Error converting insight with id {insight.pk}")  # noqa: TRY400


def migration_0545_rollback_insight_filters_to_query(apps, schema_editor):
    from django.db import connection

    with connection.cursor() as cursor:
        cursor.execute(
            """
            UPDATE posthog_dashboarditem
            SET query = NULL, filters = filters - 'migrated_at'
            WHERE filters->>'migrated_at' IS NOT NULL
            """
        )


class Migration(migrations.Migration):
    replaces = [
        ("posthog", "0001_initial"),
        ("posthog", "0002_person"),
        ("posthog", "0003_person_is_user"),
        ("posthog", "0004_auto_20200125_0415"),
        ("posthog", "0005_remove_person_distinct_ids"),
        ("posthog", "0006_person_distinct_ids"),
        ("posthog", "0007_element"),
        ("posthog", "0008_action_actionstep"),
        ("posthog", "0009_auto_20200127_0018"),
        ("posthog", "0010_funnel_funnelstep"),
        ("posthog", "0011_auto_20200127_2105"),
        ("posthog", "0012_team_app_url"),
        ("posthog", "0013_element_attr_class"),
        ("posthog", "0014_auto_20200129_0703"),
        ("posthog", "0015_actionstep_event"),
        ("posthog", "0016_user_temporary_token"),
        ("posthog", "0017_dashboarditem"),
        ("posthog", "0018_funnel_deleted"),
        ("posthog", "0019_team_name"),
        ("posthog", "0020_auto_20200210_0212"),
        ("posthog", "0021_user_distinct_id"),
        ("posthog", "0022_action_deleted"),
        ("posthog", "0023_team_opt_out_capture"),
        ("posthog", "0024_add_event_distinct_id_index"),
        ("posthog", "0025_cohort"),
        ("posthog", "0026_auto_20200227_0804"),
        ("posthog", "0027_move_elements_to_group"),
        ("posthog", "0028_actionstep_url_matching"),
        ("posthog", "0029_migrate_dashboard_actions"),
        ("posthog", "0030_migrate_dashboard_days"),
        ("posthog", "0031_team_signup_token"),
        ("posthog", "0032_team_multiple_app_urls"),
        ("posthog", "0033_auto_20200316_1655"),
        ("posthog", "0034_pg_trgm_and_btree_20200318_1447"),
        ("posthog", "0035_current_url_index_20200318_1459"),
        ("posthog", "0036_remove_current_url_index"),
        ("posthog", "0037_action_step_url_matching_can_be_null_20200402_1351"),
        ("posthog", "0038_migrate_actions_to_precalculate_events"),
        ("posthog", "0039_populate_event_ip_property"),
        ("posthog", "0040_remove_event_ip"),
        ("posthog", "0039_user_email_opt_in"),
        ("posthog", "0041_merge_20200407_1805"),
        ("posthog", "0042_add_type_dashboarditems"),
        ("posthog", "0043_slack_webhooks"),
        ("posthog", "0044_auto_20200413_1936"),
        ("posthog", "0045_add_timestamp_index"),
        ("posthog", "0046_event_names_properties_to_team"),
        ("posthog", "0047_auto_20200416_1631"),
        ("posthog", "0048_auto_20200420_1051"),
        ("posthog", "0049_delete_funnelstep"),
        ("posthog", "0050_dashboards"),
        ("posthog", "0051_precalculate_cohorts"),
        ("posthog", "0052_data_precalculate_cohorts"),
        ("posthog", "0053_dashboard_item_layouts"),
        ("posthog", "0054_dashboard_item_color"),
        ("posthog", "0055_user_anonymize_data"),
        ("posthog", "0056_auto_20200522_1024"),
        ("posthog", "0057_action_updated_at"),
        ("posthog", "0058_dashboarditem_last_refresh"),
        ("posthog", "0059_dashboarditem_refreshing"),
        ("posthog", "0060_auto_20200616_0746"),
        ("posthog", "0061_featureflag"),
        ("posthog", "0062_team_anonymize_ips"),
        ("posthog", "0063_team_completed_snippet_onboarding"),
        ("posthog", "0064_toolbar_mode"),
        ("posthog", "0065_auto_20200624_1842"),
        ("posthog", "0066_team_created_at"),
        ("posthog", "0067_team_updated_at"),
        ("posthog", "0068_auto_20200629_1322"),
        ("posthog", "0069_auto_20200714_1642"),
        ("posthog", "0070_team_event_properties_numerical"),
        ("posthog", "0071_cache_dashboard_items"),
        ("posthog", "0072_action_step_url_matching_regex"),
        ("posthog", "0073_update_dashboard_item_filters"),
        ("posthog", "0074_toolbar_default_on"),
        ("posthog", "0075_action_slack_message_format"),
        ("posthog", "0076_auto_20200819_1214"),
        ("posthog", "0077_cohortpeople_id_to_bigautofield"),
        ("posthog", "0078_auto_20200731_1323"),
        ("posthog", "0079_move_funnels_to_insights"),
        ("posthog", "0080_update_dashboard_funnel_filters"),
        ("posthog", "0081_person_is_identified"),
        ("posthog", "0082_personalapikey"),
        ("posthog", "0083_auto_20200826_1504"),
        ("posthog", "0084_person_uuid"),
        ("posthog", "0085_org_models"),
        ("posthog", "0086_team_session_recording_opt_in"),
        ("posthog", "0087_fix_annotation_created_at"),
        ("posthog", "0088_toolbar_disabled"),
        ("posthog", "0089_auto_20201015_1031"),
        ("posthog", "0090_org_live"),
        ("posthog", "0091_messagingrecord"),
        ("posthog", "0092_rename_projects_to_default"),
        ("posthog", "0093_remove_user_is_superuser"),
        ("posthog", "0094_description_on_dashboard_items"),
        ("posthog", "0095_session_recording_event_table"),
        ("posthog", "0096_plugins"),
        ("posthog", "0097_invite_emails"),
        ("posthog", "0098_events_property_usage"),
        ("posthog", "0099_plugin_attachment"),
        ("posthog", "0100_action_step_max_length"),
        ("posthog", "0101_org_owners"),
        ("posthog", "0102_dashboarditem_filters_hash"),
        ("posthog", "0103_retention_remove_date"),
        ("posthog", "0104_auto_20201208_1052"),
        ("posthog", "0105_cohort_errors_calculating"),
        ("posthog", "0106_dashboard_item_type_to_display"),
        ("posthog", "0107_plugin_source"),
        ("posthog", "0108_plugin_organization"),
        ("posthog", "0109_fix_retention_filters"),
        ("posthog", "0110_sessionrecordingeventbyteamandtimestamp"),
        ("posthog", "0111_plugin_storage"),
        ("posthog", "0112_sessions_filter"),
        ("posthog", "0113_cohort_is_static"),
        ("posthog", "0114_fix_team_event_names"),
        ("posthog", "0115_session_recording_viewed"),
        ("posthog", "0116_session_recording_retention_period"),
        ("posthog", "0116_plugin_latest_tag"),
        ("posthog", "0117_merge_20210126_0917"),
        ("posthog", "0118_is_demo"),
        ("posthog", "0119_mandatory_plugin_order"),
        ("posthog", "0120_organization_personalization"),
        ("posthog", "0121_person_email_index"),
        ("posthog", "0122_organization_setup_section_2_completed"),
        ("posthog", "0123_organizationinvite_first_name"),
        ("posthog", "0124_unset_is_calculating_static_cohorts"),
        ("posthog", "0125_longer_webhook_url"),
        ("posthog", "0126_fix_funnels_insights_links"),
        ("posthog", "0127_stricter_team_data"),
        ("posthog", "0128_stricter_team_schema"),
        ("posthog", "0127_add_dashboard_filters"),
        ("posthog", "0129_merge_20210223_0757"),
        ("posthog", "0130_dashboard_creation_mode"),
        ("posthog", "0131_add_plugins_updated_created_at"),
        ("posthog", "0132_team_test_account_filters"),
        ("posthog", "0133_plugins_access_control"),
        ("posthog", "0134_event_site_url"),
        ("posthog", "0135_plugins_on_cloud"),
        ("posthog", "0136_global_plugin_attachments"),
        ("posthog", "0137_team_timezone"),
        ("posthog", "0138_featureflag_name_optional"),
        ("posthog", "0139_dashboard_tagging"),
        ("posthog", "0140_team_data_attributes"),
        ("posthog", "0141_events_created_at_index"),
        ("posthog", "0142_fix_team_data_attributes_default"),
        ("posthog", "0143_user_uuid"),
        ("posthog", "0144_update_django_3_1_8"),
        ("posthog", "0145_eventdefinition_propertydefinition"),
        ("posthog", "0146_eventproperty_sync"),
        ("posthog", "0147_plugin_logs"),
        ("posthog", "0147_fix_stickiness_dashboard_items"),
        ("posthog", "0148_merge_20210506_0823"),
        ("posthog", "0149_fix_lifecycle_dashboard_items"),
        ("posthog", "0150_increase_element_varchars"),
        ("posthog", "0151_plugin_preinstalled"),
        ("posthog", "0152_user_events_column_config"),
        ("posthog", "0153_plugin_capabilities"),
        ("posthog", "0154_organization_for_internal_metrics"),
        ("posthog", "0155_organization_available_features"),
        ("posthog", "0156_insight_short_id"),
        ("posthog", "0157_plugin_metrics"),
        ("posthog", "0158_new_token_format"),
        ("posthog", "0159_remove_funnels_with_breakdown"),
        ("posthog", "0160_organization_domain_whitelist"),
        ("posthog", "0161_property_defs_search"),
        ("posthog", "0162_organization_is_member_join_email_enabled"),
        ("posthog", "0163_insights_favorited_updatedat_tags"),
        ("posthog", "0164_person_index_by_team_and_id"),
        ("posthog", "0165_dashboarditem_dive_dashboard"),
        ("posthog", "0166_plugin_public_jobs"),
        ("posthog", "0167_feature_flag_override"),
        ("posthog", "0168_action_step_empty_string_reset"),
        ("posthog", "0169_person_properties_last_updated_at"),
        ("posthog", "0170_project_based_permissioning"),
        ("posthog", "0171_cohort_description"),
        ("posthog", "0172_person_properties_last_operation"),
        ("posthog", "0173_should_update_person_props_function"),
        ("posthog", "0174_organization_slug"),
        ("posthog", "0175_should_update_person_props_function"),
        ("posthog", "0176_update_person_props_function"),
        ("posthog", "0177_path_cleaning_filters"),
        ("posthog", "0178_rename_dashboard_item_to_insight"),
        ("posthog", "0179_add_group_type_mapping"),
        ("posthog", "0180_person_version"),
        ("posthog", "0181_team_correlation_config"),
        ("posthog", "0182_sessionrecordingevent_window_id"),
        ("posthog", "0183_groups_pg"),
        ("posthog", "0184_delete_sessionsfilter"),
        ("posthog", "0185_special_migrations"),
        ("posthog", "0186_insight_refresh_attempt"),
        ("posthog", "0187_stale_events"),
        ("posthog", "0188_person_distinct_id_version"),
        ("posthog", "0189_alter_annotation_scope"),
        ("posthog", "0190_experiment"),
        ("posthog", "0191_rename_specialmigration_asyncmigration"),
        ("posthog", "0192_event_properties"),
        ("posthog", "0193_auto_20211222_0912"),
        ("posthog", "0194_set_property_type_for_time"),
        ("posthog", "0195_group_type_name"),
        ("posthog", "0196_update_property_types"),
        ("posthog", "0197_plugin_is_stateless"),
        ("posthog", "0198_async_migration_error"),
        ("posthog", "0199_update_experiment_model"),
        ("posthog", "0200_insight_last_modified"),
        ("posthog", "0201_remove_property_type_format_constraint"),
        ("posthog", "0202_descriptions_for_action"),
        ("posthog", "0203_dashboard_permissions"),
        ("posthog", "0204_remove_duplicate_plugin_configs"),
        ("posthog", "0205_auto_20220204_1748"),
        ("posthog", "0206_global_tags_setup"),
        ("posthog", "0207_cohort_count"),
        ("posthog", "0208_alter_plugin_updated_at"),
        ("posthog", "0209_plugin_logs_disabled"),
        ("posthog", "0210_drop_update_person_functions"),
        ("posthog", "0211_async_migrations_errors_length"),
        ("posthog", "0212_alter_persondistinctid_team"),
        ("posthog", "0213_deprecated_old_tags"),
        ("posthog", "0214_migrate_dashboard_insight_tags"),
        ("posthog", "0215_add_tags_back"),
        ("posthog", "0216_insight_placeholder_name"),
        ("posthog", "0217_team_primary_dashboard"),
        ("posthog", "0218_uniqueness_constraint_tagged_items"),
        ("posthog", "0219_migrate_tags_v2"),
        ("posthog", "0220_backfill_primary_dashboards"),
        ("posthog", "0221_add_activity_log_model"),
        ("posthog", "0222_fix_deleted_primary_dashboards"),
        ("posthog", "0223_organizationdomain"),
        ("posthog", "0224_saml_multitenant"),
        ("posthog", "0225_insight_viewed"),
        ("posthog", "0226_longer_action_slack_message_format"),
        ("posthog", "0227_add_dashboard_tiles"),
        ("posthog", "0228_fix_tile_layouts"),
        ("posthog", "0229_add_filters_hash_to_dashboard_table"),
        ("posthog", "0230_cohort_filters"),
        ("posthog", "0231_add_refreshing_data_to_tiles"),
        ("posthog", "0232_add_team_person_display_name_properties"),
        ("posthog", "0233_plugin_source_file"),
        ("posthog", "0234_create_plugin_jsons"),
        ("posthog", "0235_plugin_source_transpilation"),
        ("posthog", "0236_add_instance_setting_model"),
        ("posthog", "0237_remove_timezone_from_teams"),
        ("posthog", "0238_exportedasset"),
        ("posthog", "0239_delete_postgres_pluginlogentry"),
        ("posthog", "0240_organizationinvite_message"),
        ("posthog", "0241_subscription"),
        ("posthog", "0242_team_live_events_columns"),
        ("posthog", "0243_unpack_plugin_source_files"),
        ("posthog", "0244_drop_should_update_person_prop"),
        ("posthog", "0245_silence_deprecated_tags_warnings"),
        ("posthog", "0246_integrations"),
        ("posthog", "0247_feature_flags_experience_continuity"),
        ("posthog", "0248_add_context_for_csv_exports"),
        ("posthog", "0249_add_sharingconfiguration"),
        ("posthog", "0250_exportedasset_created_by"),
        ("posthog", "0251_event_buffer"),
        ("posthog", "0252_reset_insight_refreshing_status"),
        ("posthog", "0253_add_async_migration_parameters"),
        ("posthog", "0254_prompt_sequence_state"),
        ("posthog", "0255_user_prompt_sequence_state"),
        ("posthog", "0256_add_async_deletion_model"),
        ("posthog", "0257_add_default_checked_for_test_filters_on_team"),
        ("posthog", "0258_team_recording_domains"),
        ("posthog", "0259_backfill_team_recording_domains"),
        ("posthog", "0260_pak_v2"),
        ("posthog", "0261_team_capture_console_log_opt_in"),
        ("posthog", "0262_track_viewed_notifications"),
        ("posthog", "0263_plugin_config_web_token"),
        ("posthog", "0264_user_partial_notification_settings"),
        ("posthog", "0265_related_tiles"),
        ("posthog", "0266_add_is_system_field_to_activity_log"),
        ("posthog", "0267_add_text_tiles"),
        ("posthog", "0268_plugin_source_file_updated_at"),
        ("posthog", "0269_soft_delete_tiles"),
        ("posthog", "0270_add_uploaded_media"),
        ("posthog", "0271_delete_promptsequencestate"),
        ("posthog", "0272_alter_organization_plugins_access_level"),
        ("posthog", "0273_mark_inactive_exports_as_finished"),
        ("posthog", "0274_add_plugin_icon_and_rewrite_urls"),
        ("posthog", "0275_feature_flag_rollback_fields"),
        ("posthog", "0276_organization_usage"),
        ("posthog", "0277_recording_playlist_model"),
        ("posthog", "0278_organization_customer_id"),
        ("posthog", "0279_recording_playlist_item_model"),
        ("posthog", "0280_fix_async_deletion_team"),
        ("posthog", "0281_create_insight_caching_state_model"),
        ("posthog", "0282_fix_insight_caching_state_model"),
        ("posthog", "0283_prompt_sequence_model"),
        ("posthog", "0284_improved_caching_state_idx"),
        ("posthog", "0285_capture_performance_opt_in"),
        ("posthog", "0286_index_insightcachingstate_lookup"),
        ("posthog", "0287_add_session_recording_model"),
        ("posthog", "0288_add_session_recording_persistence"),
        ("posthog", "0289_add_tags_to_feature_flags"),
        ("posthog", "0290_add_dashboard_templates"),
        ("posthog", "0291_create_person_override_model"),
        ("posthog", "0292_property_definitions_persons_and_groups_support"),
        ("posthog", "0293_property_definitions_drop_old_constraint"),
        ("posthog", "0294_plugin_blank_fields"),
        ("posthog", "0295_plugin_allow_blank_config_schema"),
        ("posthog", "0296_team_allow_blank_fields"),
        ("posthog", "0297_property_definitions_index_query"),
        ("posthog", "0298_add_insight_queries"),
        ("posthog", "0299_set_templates_global"),
        ("posthog", "0300_add_constraints_to_person_override"),
        ("posthog", "0301_organization_enforce_2fa"),
        ("posthog", "0302_add_user_pending_email_and_is_verified"),
        ("posthog", "0303_team_session_recording_version"),
        ("posthog", "0304_store_dashboard_template_in_db"),
        ("posthog", "0305_rework_person_overrides"),
        ("posthog", "0306_featureflag_dashboard"),
        ("posthog", "0307_pluginconfig_admin"),
        ("posthog", "0308_add_indirect_person_override_constraints"),
        ("posthog", "0309_team_autocapture_opt_out"),
        ("posthog", "0310_add_starter_dashboard_template"),
        ("posthog", "0311_dashboard_template_scope"),
        ("posthog", "0312_organization_available_product_features"),
        ("posthog", "0313_early_access_feature"),
        ("posthog", "0314_sharingconfiguration_recording"),
        ("posthog", "0315_notebook"),
        ("posthog", "0316_action_href_text_matching"),
        ("posthog", "0317_batch_export_models"),
        ("posthog", "0318_alter_earlyaccessfeature_stage"),
        ("posthog", "0319_user_requested_password_reset_at"),
        ("posthog", "0320_survey"),
        ("posthog", "0321_add_exception_autocapture_optin"),
        ("posthog", "0322_auto_20230531_1904"),
        ("posthog", "0323_alter_batchexportdestination_type"),
        ("posthog", "0324_user_has_seen_product_intro_for"),
        ("posthog", "0325_alter_dashboardtemplate_scope"),
        ("posthog", "0326_team_extra_settings"),
        ("posthog", "0327_alter_earlyaccessfeature_stage"),
        ("posthog", "0328_add_starter_feature_flag_template"),
        ("posthog", "0329_datawarehousecredential_datawarehousetable"),
        ("posthog", "0330_add_autocapture_exceptions_events_to_ignore"),
        ("posthog", "0331_add_missing_property_definition_index"),
        ("posthog", "0332_featureflag_has_enriched_analytics"),
        ("posthog", "0333_add_timestamp_fields_to_batch_exports"),
        ("posthog", "0334_add_asset_ttl"),
        ("posthog", "0335_alter_asyncdeletion_deletion_type"),
        ("posthog", "0336_alter_survey_type"),
        ("posthog", "0337_more_session_recording_fields"),
        ("posthog", "0338_datawarehouse_saved_query"),
        ("posthog", "0339_add_user_scene_personalisation"),
        ("posthog", "0340_action_bytecode"),
        ("posthog", "0341_add_session_recording_storage_version"),
        ("posthog", "0342_alter_featureflag_usage_dashboard"),
        ("posthog", "0343_team_has_completed_onboarding_for"),
        ("posthog", "0344_add_new_export_type"),
        ("posthog", "0345_view_link_and_s3_table_update"),
        ("posthog", "0346_team_week_start_day"),
        ("posthog", "0347_add_bigquery_export_type"),
        ("posthog", "0348_alter_datawarehousetable_format"),
        ("posthog", "0349_update_survey_query_name"),
        ("posthog", "0350_add_notebook_text_content"),
        ("posthog", "0351_team_surveys_opt_in"),
        ("posthog", "0352_auto_20230926_1833"),
        ("posthog", "0353_add_5_minute_interval_to_batch_exports"),
        ("posthog", "0354_organization_never_drop_data"),
        ("posthog", "0355_add_batch_export_backfill_model"),
        ("posthog", "0356_add_replay_cost_control"),
        ("posthog", "0357_add_redshift_batch_export_destination"),
        ("posthog", "0358_externaldatasource"),
        ("posthog", "0359_team_external_data_workspace_id"),
        ("posthog", "0360_externaldatasource_destination_id"),
        ("posthog", "0361_add_plugin_config_ui_fields"),
        ("posthog", "0362_alter_experiment_feature_flag"),
        ("posthog", "0363_add_replay_payload_capture_config"),
        ("posthog", "0364_team_external_data_workspace_rows"),
        ("posthog", "0365_update_created_by_flag_constraint"),
        ("posthog", "0366_alter_action_created_by"),
        ("posthog", "0367_job_inputs"),
        ("posthog", "0368_externaldatasource_prefix"),
        ("posthog", "0369_user_theme_mode"),
        ("posthog", "0370_externaldatajob_workflow_id"),
        ("posthog", "0371_pendingpersonoverride"),
        ("posthog", "0372_cohort_query"),
        ("posthog", "0373_externaldataschema"),
        ("posthog", "0374_scheduled_change"),
        ("posthog", "0375_alter_survey_type"),
        ("posthog", "0376_externaldataschema_last_synced_at"),
        ("posthog", "0377_flatpersonoverride"),
        ("posthog", "0378_alter_user_theme_mode"),
        ("posthog", "0379_alter_scheduledchange"),
        ("posthog", "0380_add_comments"),
        ("posthog", "0381_alter_externaldatasource_source_type"),
        ("posthog", "0382_user_strapi_id"),
        ("posthog", "0383_externaldatasource_cascade"),
        ("posthog", "0384_activity_log_was_impersonated"),
        ("posthog", "0385_exception_autocapture_off_for_all"),
        ("posthog", "0386_add_session_replay_config_to_team"),
        ("posthog", "0387_alter_externaldatasource_source_type"),
        ("posthog", "0388_add_schema_to_batch_exports"),
        ("posthog", "0389_alter_batchexportdestination_type"),
        ("posthog", "0390_personalapikey_scopes"),
        ("posthog", "0391_alter_batchexportbackfill_status_and_more"),
        ("posthog", "0392_alter_exportedasset_export_format"),
        ("posthog", "0393_datawarehousejoin_delete_datawarehouseviewlink"),
        ("posthog", "0394_organization_customer_trust_scores_and_more"),
        ("posthog", "0395_alter_batchexportbackfill_end_at"),
        ("posthog", "0396_projects_and_environments"),
        ("posthog", "0397_projects_backfill"),
        ("posthog", "0398_alter_externaldatasource_source_type"),
        ("posthog", "0399_batchexportrun_records_total_count"),
        ("posthog", "0400_datawarehousetable_row_count"),
        ("posthog", "0401_experiment_exposure_cohort"),
        ("posthog", "0402_externaldatajob_schema"),
        ("posthog", "0403_plugin_has_private_access"),
        ("posthog", "0404_remove_propertydefinition_property_type_is_valid_and_more"),
        ("posthog", "0405_team_heatmaps_opt_in"),
        ("posthog", "0406_survey_responses_limit"),
        ("posthog", "0407_verbose_name_for_team_model"),
        ("posthog", "0408_team_modifiers"),
        ("posthog", "0409_action_steps_json_alter_actionstep_action"),
        ("posthog", "0410_action_steps_population"),
        ("posthog", "0411_eventproperty_indexes"),
        ("posthog", "0412_proxyrecord"),
        ("posthog", "0413_user_hedgehog_config"),
        ("posthog", "0414_personalapikey_mask_value"),
        ("posthog", "0415_pluginconfig_match_action"),
        ("posthog", "0416_survey_internal_targeting_flag"),
        ("posthog", "0417_remove_organizationmembership_only_one_owner_per_organization_and_more"),
        ("posthog", "0418_pluginconfig_filters"),
        ("posthog", "0419_remove_organization_available_features"),
        ("posthog", "0420_alert"),
        ("posthog", "0421_set_all_survey_responses_to_be_strings"),
        ("posthog", "0422_proxyrecord_message"),
        ("posthog", "0423_alter_externaldatasource_source_type"),
        ("posthog", "0424_survey_current_iteration_and_more"),
        ("posthog", "0425_hogfunction"),
        ("posthog", "0426_externaldatasource_sync_frequency"),
        ("posthog", "0427_hogfunction_icon_url_hogfunction_template_id"),
        ("posthog", "0428_externaldataschema_sync_type"),
        ("posthog", "0429_alter_datawarehousetable_format"),
        ("posthog", "0430_batchexport_model"),
        ("posthog", "0431_externaldataschema_sync_type_payload"),
        ("posthog", "0432_personlessdistinctid"),
        ("posthog", "0433_dashboard_idx_dashboard_deleted_team_id"),
        ("posthog", "0434_add_web_vitals_opt_in"),
        ("posthog", "0435_alter_action_slack_message_format"),
        ("posthog", "0436_alter_proxyrecord_status"),
        ("posthog", "0437_externaldataschema_sync_frequency"),
        ("posthog", "0438_errortrackinggroup"),
        ("posthog", "0439_survey_actions"),
        ("posthog", "0440_organizationinvite_private_project_access"),
        ("posthog", "0441_alter_datawarehousetable_format"),
        ("posthog", "0442_alter_survey_questions"),
        ("posthog", "0443_externaldatajob_workflow_run_id"),
        ("posthog", "0444_integration_unique_id"),
        ("posthog", "0445_require_team_project_id_not_valid"),
        ("posthog", "0446_annotation_dashboard_alter_annotation_scope"),
        ("posthog", "0447_alter_integration_kind"),
        ("posthog", "0448_add_mysql_externaldatasource_source_type"),
        ("posthog", "0449_alter_plugin_organization_alter_plugin_plugin_type_and_more"),
        ("posthog", "0450_externaldataschema_sync_frequency_interval_and_more"),
        ("posthog", "0451_datawarehousetable_updated_at_and_more"),
        ("posthog", "0452_organization_logo"),
        ("posthog", "0453_alter_errortrackinggroup_fingerprint_and_more"),
        ("posthog", "0454_alter_datawarehousetable_format"),
        ("posthog", "0455_alter_externaldatasource_source_type"),
        ("posthog", "0456_hogfunction_masking"),
        ("posthog", "0457_datawarehousejoin_deleted_at_and_more"),
        ("posthog", "0458_alter_insightviewed_team_alter_insightviewed_user"),
        ("posthog", "0459_convert_personsnode_insights_to_actorsquery"),
        ("posthog", "0460_alertconfiguration_threshold_alertsubscription_and_more"),
        ("posthog", "0461_alter_externaldatasource_source_type"),
        ("posthog", "0462_change_replay_team_setting_defaults"),
        ("posthog", "0463_datawarehousemodelpath_and_more"),
        ("posthog", "0464_action_pinned_at"),
        ("posthog", "0465_datawarehouse_stripe_account"),
        ("posthog", "0466_alter_externaldatasource_source_type"),
        ("posthog", "0467_add_web_vitals_allowed_metrics"),
        ("posthog", "0468_integration_google_pubsub"),
        ("posthog", "0469_datawarehousesavedquery_at_and_more"),
        ("posthog", "0470_integration_google_cloud_storage"),
        ("posthog", "0471_webexperiment_experiment_type_experiment_variants"),
        ("posthog", "0472_experiment_metrics"),
        ("posthog", "0473_dashboardtemplate_availability_contexts"),
        ("posthog", "0474_hogfunction_encrypted_inputs"),
        ("posthog", "0475_alter_externaldatasource_source_type"),
        ("posthog", "0476_alter_integration_sensitive_config"),
        ("posthog", "0477_datawarehouse_salesforce_order"),
        ("posthog", "0478_migrate_encrypted_fields"),
        ("posthog", "0479_alter_sensitive_config_2"),
        ("posthog", "0480_insightvariable"),
        ("posthog", "0481_insightvariable_code_name"),
        ("posthog", "0482_alertconfiguration_calculation_interval_and_more"),
        ("posthog", "0483_datawarehousesavedquery_table"),
        ("posthog", "0484_productintent"),
        ("posthog", "0485_alter_datawarehousesavedquery_status"),
        ("posthog", "0486_cohort_last_error_at"),
        ("posthog", "0487_team_survey_config"),
        ("posthog", "0488_alter_user_is_active"),
        ("posthog", "0489_alter_integration_kind"),
        ("posthog", "0490_dashboard_variables"),
        ("posthog", "0491_alertconfiguration_snoozed_until_and_more"),
        ("posthog", "0492_team_session_recording_url_trigger_config"),
        ("posthog", "0493_insightvariable_values"),
        ("posthog", "0494_team_project_non_null"),
        ("posthog", "0495_alter_batchexportbackfill_start_at_and_more"),
        ("posthog", "0496_team_person_processing_opt_out"),
        ("posthog", "0497_experimentholdout_experiment_holdout"),
        ("posthog", "0498_errortrackingissuefingerprint_and_more"),
        ("posthog", "0499_hog_function_type"),
        ("posthog", "0500_errortrackingsymbolset_errortrackingstackframe_and_more"),
        ("posthog", "0501_create_group_billing_team"),
        ("posthog", "0502_team_session_recording_url_blocklist_config"),
        ("posthog", "0503_experimentsavedmetric_experimenttosavedmetric_and_more"),
        ("posthog", "0504_add_dead_clicks_setting"),
        ("posthog", "0505_grouptypemapping_project"),
        ("posthog", "0506_productintent_activated_at_and_more"),
        ("posthog", "0507_alter_externaldatasource_source_type"),
        ("posthog", "0508_project_product_description"),
        ("posthog", "0509_errortrackingsymbolset_failure_reason"),
        ("posthog", "0510_salesforce_missing_schemas"),
        ("posthog", "0511_grouptypemapping_project_backfill"),
        ("posthog", "0512_errortrackingissue_errortrackingissuefingerprintv2_and_more"),
        ("posthog", "0513_alter_dashboardtemplate_github_url"),
        ("posthog", "0514_errortrackingstackframe_context"),
        ("posthog", "0515_grouptypemapping_project_non_null"),
        ("posthog", "0516_team_session_recording_event_trigger_config"),
        ("posthog", "0517_survey_response_sampling_fields"),
        ("posthog", "0518_survey_internal_response_sampling_flag"),
        ("posthog", "0519_errortrackingissue_description_and_more"),
        ("posthog", "0520_experiment_metrics_secondary"),
        ("posthog", "0521_alter_errortrackingstackframe_context"),
        ("posthog", "0522_datawarehouse_salesforce_opportunity"),
        ("posthog", "0523_errortrackingsymbolset_content_hash"),
        ("posthog", "0524_datawarehousejoin_configuration"),
        ("posthog", "0525_hog_function_transpiled"),
        ("posthog", "0526_remoteconfig"),
        ("posthog", "0527_project_name_sync"),
        ("posthog", "0528_project_field_in_taxonomy"),
        ("posthog", "0529_hog_function_mappings"),
        ("posthog", "0530_convert_dashboard_templates_to_queries"),
        ("posthog", "0531_alter_hogfunction_type"),
        ("posthog", "0532_taxonomy_unique_on_project"),
        ("posthog", "0533_externaldatajob_pipeline_version"),
        ("posthog", "0534_team_cookieless_server_hash_mode"),
        ("posthog", "0535_alter_hogfunction_type"),
        ("posthog", "0536_alertconfiguration_skip_weekend"),
        ("posthog", "0537_data_color_themes"),
        ("posthog", "0538_experiment_stats_config"),
        ("posthog", "0539_user_role_at_organization"),
        ("posthog", "0540_team_human_friendly_comparison_periods"),
        ("posthog", "0541_usergroup_usergroupmembership_usergroup_members_and_more"),
        ("posthog", "0542_remove_errortrackingissueassignment_unique_on_user_and_issue_and_more"),
        ("posthog", "0543_alter_batchexportdestination_config"),
        ("posthog", "0544_team_flags_persistence_default"),
        ("posthog", "0545_insight_filters_to_query"),
        ("posthog", "0546_update_creation_mode_on_generated_dashboards"),
        ("posthog", "0547_externaldatajob_billable"),
        ("posthog", "0548_migrate_early_access_features"),
        ("posthog", "0549_add_revenue_tracking_config_to_team"),
        ("posthog", "0550_migrate_action_webhooks_to_destinations"),
        ("posthog", "0551_batchimport"),
        ("posthog", "0552_turn_off_all_action_webhooks"),
        ("posthog", "0553_feature_flag_config"),
        ("posthog", "0554_remove_incremental_field_last_value_v2"),
        ("posthog", "0555_batchexport_filters"),
        ("posthog", "0556_add_execution_order_to_hog_functions"),
        ("posthog", "0557_add_tags_to_experiment_saved_metrics"),
        ("posthog", "0558_alter_integration_kind"),
        ("posthog", "0559_team_api_query_rate_limit"),
        ("posthog", "0660_organization_is_ai_data_processing_approved"),
        ("posthog", "0661_errortrackingissuefingerprintv2_first_seen"),
        ("posthog", "0662_alter_batchexport_model"),
        ("posthog", "0663_alter_insightvariable_type"),
        ("posthog", "0664_batchexportrun_backfill"),
        ("posthog", "0665_team_onboarding_tasks"),
        ("posthog", "0666_datawarehousesavedquery_sync_frequency"),
        ("posthog", "0667_encrypt_feature_flag_config"),
        ("posthog", "0668_hostdefinition_and_more"),
        ("posthog", "0669_file_system"),
        ("posthog", "0670_querytabstate_querytabstate_unique_team_created_by"),
        ("posthog", "0671_alter_errortrackingissuefingerprintv2_issue"),
        ("posthog", "0672_resave_hogFns_from_token_refresh_incident"),
        ("posthog", "0673_survey_schedule"),
        ("posthog", "0674_experiment_exposure_criteria"),
        ("posthog", "0675_add_playlist_viewed"),
        ("posthog", "0676_team_session_recording_masking_config"),
        ("posthog", "0677_datawarehousesavedquery_deleted_name"),
        ("posthog", "0678_alter_team_options"),
        ("posthog", "0679_feature_flag_concurrency"),
        ("posthog", "0680_alter_integration_kind"),
        ("posthog", "0681_file_system_depth"),
        ("posthog", "0682_datawarehousesavedquery_latest_error"),
        ("posthog", "0683_externaldataschema_sync_time_of_day"),
        ("posthog", "0684_action_embedding_last_synced_at_and_more"),
        ("posthog", "0685_add_playlist_counted_date"),
        ("posthog", "0686_alter_errortrackingissue_status"),
        ("posthog", "0687_remove_taxonomy_team_only_constraints"),
        ("posthog", "0688_update_default_version"),
        ("posthog", "0689_survey_enable_partial_responses"),
        ("posthog", "0690_alter_personid_persondistinctid"),
        ("posthog", "0691_action_embedding_version"),
        ("posthog", "0692_grouptypemapping_detail_dashboard"),
        ("posthog", "0693_grouptypemapping_default_columns"),
        ("posthog", "0694_fix_revenue_tracking_config"),
        ("posthog", "0695_alter_experiment_end_date_and_more"),
        ("posthog", "0696_file_system_project_id"),
        ("posthog", "0697_sessionrecording_full_recording_v2_path"),
        ("posthog", "0698_action_project"),
        ("posthog", "0699_alter_integration_kind"),
        ("posthog", "0700_datamodelingjob"),
        ("posthog", "0701_uploadedmedia_project"),
        ("posthog", "0702_datacolortheme_project"),
        ("posthog", "0703_dashboard_breakdown_colors_and_more"),
        ("posthog", "0704_productintent_contexts"),
        ("posthog", "0705_team_parent_team"),
        ("posthog", "0706_alter_hogfunction_kind"),
        ("posthog", "0707_file_system_shortcut"),
        ("posthog", "0708_add_trigger_match_type"),
        ("posthog", "0709_alter_integration_kind"),
        ("posthog", "0710_add_salesforce_tables"),
        ("posthog", "0711_externaldatasource_revenue_analytics_enabled"),
        ("posthog", "0712_add_message_template_table"),
        ("posthog", "0713_errortrackingassignmentrule"),
        ("posthog", "0714_alter_team_session_recording_minimum_duration_milliseconds"),
        ("posthog", "0715_teamrevenueanalyticsconfig"),
        ("posthog", "0716_backfill_team_revenue_analytics_config"),
    ]

    initial = True

    dependencies = [
        ("auth", "0011_update_proxy_permissions"),
    ]

    operations = [
        migrations.CreateModel(
            name="InstanceSetting",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("key", models.CharField(max_length=128)),
                ("raw_value", models.CharField(blank=True, max_length=1024)),
            ],
        ),
        migrations.AddConstraint(
            model_name="instancesetting",
            constraint=models.UniqueConstraint(fields=("key",), name="unique key"),
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                ("last_login", models.DateTimeField(blank=True, null=True, verbose_name="last login")),
                ("first_name", models.CharField(blank=True, max_length=150, verbose_name="first name")),
                ("last_name", models.CharField(blank=True, max_length=150, verbose_name="last name")),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Unselect this to temporarily disable an account.",
                        verbose_name="active",
                    ),
                ),
                ("date_joined", models.DateTimeField(default=django.utils.timezone.now, verbose_name="date joined")),
                ("uuid", models.UUIDField(default=posthog.models.utils.UUIDT, editable=False)),
                ("email", models.EmailField(max_length=254, verbose_name="email address")),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.AlterField(
            model_name="user",
            name="uuid",
            field=models.UUIDField(default=posthog.models.utils.UUIDT, editable=False, unique=True),
        ),
        migrations.AlterField(
            model_name="user",
            name="email",
            field=models.EmailField(max_length=254, unique=True, verbose_name="email address"),
        ),
        migrations.CreateModel(
            name="Team",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("uuid", models.UUIDField(blank=True, null=True)),
                ("api_token", models.CharField(blank=True, max_length=200, null=True)),
                (
                    "app_urls",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=200, null=True), blank=True, default=list, size=None
                    ),
                ),
                ("name", models.CharField(default="Default", max_length=200, null=True)),
                ("slack_incoming_webhook", models.CharField(blank=True, max_length=500, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True, default=django.utils.timezone.now)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("anonymize_ips", models.BooleanField(default=False)),
                ("completed_snippet_onboarding", models.BooleanField(default=False)),
                ("ingested_event", models.BooleanField(default=False)),
                ("session_recording_opt_in", models.BooleanField(default=False)),
                ("capture_console_log_opt_in", models.BooleanField(blank=True, null=True)),
                ("signup_token", models.CharField(blank=True, max_length=200, null=True)),
                ("is_demo", models.BooleanField(default=False)),
                ("access_control", models.BooleanField(default=False)),
                ("inject_web_apps", models.BooleanField(null=True)),
                ("test_account_filters", django.contrib.postgres.fields.jsonb.JSONField(default=list)),
                ("test_account_filters_default_checked", models.BooleanField(blank=True, null=True)),
                ("path_cleaning_filters", models.JSONField(blank=True, default=list, null=True)),
                (
                    "timezone",
                    models.CharField(
                        choices=[
                            ("Africa/Abidjan", "Africa/Abidjan"),
                            ("Africa/Accra", "Africa/Accra"),
                            ("Africa/Addis_Ababa", "Africa/Addis_Ababa"),
                            ("Africa/Algiers", "Africa/Algiers"),
                            ("Africa/Asmara", "Africa/Asmara"),
                            ("Africa/Asmera", "Africa/Asmera"),
                            ("Africa/Bamako", "Africa/Bamako"),
                            ("Africa/Bangui", "Africa/Bangui"),
                            ("Africa/Banjul", "Africa/Banjul"),
                            ("Africa/Bissau", "Africa/Bissau"),
                            ("Africa/Blantyre", "Africa/Blantyre"),
                            ("Africa/Brazzaville", "Africa/Brazzaville"),
                            ("Africa/Bujumbura", "Africa/Bujumbura"),
                            ("Africa/Cairo", "Africa/Cairo"),
                            ("Africa/Casablanca", "Africa/Casablanca"),
                            ("Africa/Ceuta", "Africa/Ceuta"),
                            ("Africa/Conakry", "Africa/Conakry"),
                            ("Africa/Dakar", "Africa/Dakar"),
                            ("Africa/Dar_es_Salaam", "Africa/Dar_es_Salaam"),
                            ("Africa/Djibouti", "Africa/Djibouti"),
                            ("Africa/Douala", "Africa/Douala"),
                            ("Africa/El_Aaiun", "Africa/El_Aaiun"),
                            ("Africa/Freetown", "Africa/Freetown"),
                            ("Africa/Gaborone", "Africa/Gaborone"),
                            ("Africa/Harare", "Africa/Harare"),
                            ("Africa/Johannesburg", "Africa/Johannesburg"),
                            ("Africa/Juba", "Africa/Juba"),
                            ("Africa/Kampala", "Africa/Kampala"),
                            ("Africa/Khartoum", "Africa/Khartoum"),
                            ("Africa/Kigali", "Africa/Kigali"),
                            ("Africa/Kinshasa", "Africa/Kinshasa"),
                            ("Africa/Lagos", "Africa/Lagos"),
                            ("Africa/Libreville", "Africa/Libreville"),
                            ("Africa/Lome", "Africa/Lome"),
                            ("Africa/Luanda", "Africa/Luanda"),
                            ("Africa/Lubumbashi", "Africa/Lubumbashi"),
                            ("Africa/Lusaka", "Africa/Lusaka"),
                            ("Africa/Malabo", "Africa/Malabo"),
                            ("Africa/Maputo", "Africa/Maputo"),
                            ("Africa/Maseru", "Africa/Maseru"),
                            ("Africa/Mbabane", "Africa/Mbabane"),
                            ("Africa/Mogadishu", "Africa/Mogadishu"),
                            ("Africa/Monrovia", "Africa/Monrovia"),
                            ("Africa/Nairobi", "Africa/Nairobi"),
                            ("Africa/Ndjamena", "Africa/Ndjamena"),
                            ("Africa/Niamey", "Africa/Niamey"),
                            ("Africa/Nouakchott", "Africa/Nouakchott"),
                            ("Africa/Ouagadougou", "Africa/Ouagadougou"),
                            ("Africa/Porto-Novo", "Africa/Porto-Novo"),
                            ("Africa/Sao_Tome", "Africa/Sao_Tome"),
                            ("Africa/Timbuktu", "Africa/Timbuktu"),
                            ("Africa/Tripoli", "Africa/Tripoli"),
                            ("Africa/Tunis", "Africa/Tunis"),
                            ("Africa/Windhoek", "Africa/Windhoek"),
                            ("America/Adak", "America/Adak"),
                            ("America/Anchorage", "America/Anchorage"),
                            ("America/Anguilla", "America/Anguilla"),
                            ("America/Antigua", "America/Antigua"),
                            ("America/Araguaina", "America/Araguaina"),
                            ("America/Argentina/Buenos_Aires", "America/Argentina/Buenos_Aires"),
                            ("America/Argentina/Catamarca", "America/Argentina/Catamarca"),
                            ("America/Argentina/ComodRivadavia", "America/Argentina/ComodRivadavia"),
                            ("America/Argentina/Cordoba", "America/Argentina/Cordoba"),
                            ("America/Argentina/Jujuy", "America/Argentina/Jujuy"),
                            ("America/Argentina/La_Rioja", "America/Argentina/La_Rioja"),
                            ("America/Argentina/Mendoza", "America/Argentina/Mendoza"),
                            ("America/Argentina/Rio_Gallegos", "America/Argentina/Rio_Gallegos"),
                            ("America/Argentina/Salta", "America/Argentina/Salta"),
                            ("America/Argentina/San_Juan", "America/Argentina/San_Juan"),
                            ("America/Argentina/San_Luis", "America/Argentina/San_Luis"),
                            ("America/Argentina/Tucuman", "America/Argentina/Tucuman"),
                            ("America/Argentina/Ushuaia", "America/Argentina/Ushuaia"),
                            ("America/Aruba", "America/Aruba"),
                            ("America/Asuncion", "America/Asuncion"),
                            ("America/Atikokan", "America/Atikokan"),
                            ("America/Atka", "America/Atka"),
                            ("America/Bahia", "America/Bahia"),
                            ("America/Bahia_Banderas", "America/Bahia_Banderas"),
                            ("America/Barbados", "America/Barbados"),
                            ("America/Belem", "America/Belem"),
                            ("America/Belize", "America/Belize"),
                            ("America/Blanc-Sablon", "America/Blanc-Sablon"),
                            ("America/Boa_Vista", "America/Boa_Vista"),
                            ("America/Bogota", "America/Bogota"),
                            ("America/Boise", "America/Boise"),
                            ("America/Buenos_Aires", "America/Buenos_Aires"),
                            ("America/Cambridge_Bay", "America/Cambridge_Bay"),
                            ("America/Campo_Grande", "America/Campo_Grande"),
                            ("America/Cancun", "America/Cancun"),
                            ("America/Caracas", "America/Caracas"),
                            ("America/Catamarca", "America/Catamarca"),
                            ("America/Cayenne", "America/Cayenne"),
                            ("America/Cayman", "America/Cayman"),
                            ("America/Chicago", "America/Chicago"),
                            ("America/Chihuahua", "America/Chihuahua"),
                            ("America/Ciudad_Juarez", "America/Ciudad_Juarez"),
                            ("America/Coral_Harbour", "America/Coral_Harbour"),
                            ("America/Cordoba", "America/Cordoba"),
                            ("America/Costa_Rica", "America/Costa_Rica"),
                            ("America/Creston", "America/Creston"),
                            ("America/Cuiaba", "America/Cuiaba"),
                            ("America/Curacao", "America/Curacao"),
                            ("America/Danmarkshavn", "America/Danmarkshavn"),
                            ("America/Dawson", "America/Dawson"),
                            ("America/Dawson_Creek", "America/Dawson_Creek"),
                            ("America/Denver", "America/Denver"),
                            ("America/Detroit", "America/Detroit"),
                            ("America/Dominica", "America/Dominica"),
                            ("America/Edmonton", "America/Edmonton"),
                            ("America/Eirunepe", "America/Eirunepe"),
                            ("America/El_Salvador", "America/El_Salvador"),
                            ("America/Ensenada", "America/Ensenada"),
                            ("America/Fort_Nelson", "America/Fort_Nelson"),
                            ("America/Fort_Wayne", "America/Fort_Wayne"),
                            ("America/Fortaleza", "America/Fortaleza"),
                            ("America/Glace_Bay", "America/Glace_Bay"),
                            ("America/Godthab", "America/Godthab"),
                            ("America/Goose_Bay", "America/Goose_Bay"),
                            ("America/Grand_Turk", "America/Grand_Turk"),
                            ("America/Grenada", "America/Grenada"),
                            ("America/Guadeloupe", "America/Guadeloupe"),
                            ("America/Guatemala", "America/Guatemala"),
                            ("America/Guayaquil", "America/Guayaquil"),
                            ("America/Guyana", "America/Guyana"),
                            ("America/Halifax", "America/Halifax"),
                            ("America/Havana", "America/Havana"),
                            ("America/Hermosillo", "America/Hermosillo"),
                            ("America/Indiana/Indianapolis", "America/Indiana/Indianapolis"),
                            ("America/Indiana/Knox", "America/Indiana/Knox"),
                            ("America/Indiana/Marengo", "America/Indiana/Marengo"),
                            ("America/Indiana/Petersburg", "America/Indiana/Petersburg"),
                            ("America/Indiana/Tell_City", "America/Indiana/Tell_City"),
                            ("America/Indiana/Vevay", "America/Indiana/Vevay"),
                            ("America/Indiana/Vincennes", "America/Indiana/Vincennes"),
                            ("America/Indiana/Winamac", "America/Indiana/Winamac"),
                            ("America/Indianapolis", "America/Indianapolis"),
                            ("America/Inuvik", "America/Inuvik"),
                            ("America/Iqaluit", "America/Iqaluit"),
                            ("America/Jamaica", "America/Jamaica"),
                            ("America/Jujuy", "America/Jujuy"),
                            ("America/Juneau", "America/Juneau"),
                            ("America/Kentucky/Louisville", "America/Kentucky/Louisville"),
                            ("America/Kentucky/Monticello", "America/Kentucky/Monticello"),
                            ("America/Knox_IN", "America/Knox_IN"),
                            ("America/Kralendijk", "America/Kralendijk"),
                            ("America/La_Paz", "America/La_Paz"),
                            ("America/Lima", "America/Lima"),
                            ("America/Los_Angeles", "America/Los_Angeles"),
                            ("America/Louisville", "America/Louisville"),
                            ("America/Lower_Princes", "America/Lower_Princes"),
                            ("America/Maceio", "America/Maceio"),
                            ("America/Managua", "America/Managua"),
                            ("America/Manaus", "America/Manaus"),
                            ("America/Marigot", "America/Marigot"),
                            ("America/Martinique", "America/Martinique"),
                            ("America/Matamoros", "America/Matamoros"),
                            ("America/Mazatlan", "America/Mazatlan"),
                            ("America/Mendoza", "America/Mendoza"),
                            ("America/Menominee", "America/Menominee"),
                            ("America/Merida", "America/Merida"),
                            ("America/Metlakatla", "America/Metlakatla"),
                            ("America/Mexico_City", "America/Mexico_City"),
                            ("America/Miquelon", "America/Miquelon"),
                            ("America/Moncton", "America/Moncton"),
                            ("America/Monterrey", "America/Monterrey"),
                            ("America/Montevideo", "America/Montevideo"),
                            ("America/Montreal", "America/Montreal"),
                            ("America/Montserrat", "America/Montserrat"),
                            ("America/Nassau", "America/Nassau"),
                            ("America/New_York", "America/New_York"),
                            ("America/Nipigon", "America/Nipigon"),
                            ("America/Nome", "America/Nome"),
                            ("America/Noronha", "America/Noronha"),
                            ("America/North_Dakota/Beulah", "America/North_Dakota/Beulah"),
                            ("America/North_Dakota/Center", "America/North_Dakota/Center"),
                            ("America/North_Dakota/New_Salem", "America/North_Dakota/New_Salem"),
                            ("America/Nuuk", "America/Nuuk"),
                            ("America/Ojinaga", "America/Ojinaga"),
                            ("America/Panama", "America/Panama"),
                            ("America/Pangnirtung", "America/Pangnirtung"),
                            ("America/Paramaribo", "America/Paramaribo"),
                            ("America/Phoenix", "America/Phoenix"),
                            ("America/Port-au-Prince", "America/Port-au-Prince"),
                            ("America/Port_of_Spain", "America/Port_of_Spain"),
                            ("America/Porto_Acre", "America/Porto_Acre"),
                            ("America/Porto_Velho", "America/Porto_Velho"),
                            ("America/Puerto_Rico", "America/Puerto_Rico"),
                            ("America/Punta_Arenas", "America/Punta_Arenas"),
                            ("America/Rainy_River", "America/Rainy_River"),
                            ("America/Rankin_Inlet", "America/Rankin_Inlet"),
                            ("America/Recife", "America/Recife"),
                            ("America/Regina", "America/Regina"),
                            ("America/Resolute", "America/Resolute"),
                            ("America/Rio_Branco", "America/Rio_Branco"),
                            ("America/Rosario", "America/Rosario"),
                            ("America/Santa_Isabel", "America/Santa_Isabel"),
                            ("America/Santarem", "America/Santarem"),
                            ("America/Santiago", "America/Santiago"),
                            ("America/Santo_Domingo", "America/Santo_Domingo"),
                            ("America/Sao_Paulo", "America/Sao_Paulo"),
                            ("America/Scoresbysund", "America/Scoresbysund"),
                            ("America/Shiprock", "America/Shiprock"),
                            ("America/Sitka", "America/Sitka"),
                            ("America/St_Barthelemy", "America/St_Barthelemy"),
                            ("America/St_Johns", "America/St_Johns"),
                            ("America/St_Kitts", "America/St_Kitts"),
                            ("America/St_Lucia", "America/St_Lucia"),
                            ("America/St_Thomas", "America/St_Thomas"),
                            ("America/St_Vincent", "America/St_Vincent"),
                            ("America/Swift_Current", "America/Swift_Current"),
                            ("America/Tegucigalpa", "America/Tegucigalpa"),
                            ("America/Thule", "America/Thule"),
                            ("America/Thunder_Bay", "America/Thunder_Bay"),
                            ("America/Tijuana", "America/Tijuana"),
                            ("America/Toronto", "America/Toronto"),
                            ("America/Tortola", "America/Tortola"),
                            ("America/Vancouver", "America/Vancouver"),
                            ("America/Virgin", "America/Virgin"),
                            ("America/Whitehorse", "America/Whitehorse"),
                            ("America/Winnipeg", "America/Winnipeg"),
                            ("America/Yakutat", "America/Yakutat"),
                            ("America/Yellowknife", "America/Yellowknife"),
                            ("Antarctica/Casey", "Antarctica/Casey"),
                            ("Antarctica/Davis", "Antarctica/Davis"),
                            ("Antarctica/DumontDUrville", "Antarctica/DumontDUrville"),
                            ("Antarctica/Macquarie", "Antarctica/Macquarie"),
                            ("Antarctica/Mawson", "Antarctica/Mawson"),
                            ("Antarctica/McMurdo", "Antarctica/McMurdo"),
                            ("Antarctica/Palmer", "Antarctica/Palmer"),
                            ("Antarctica/Rothera", "Antarctica/Rothera"),
                            ("Antarctica/South_Pole", "Antarctica/South_Pole"),
                            ("Antarctica/Syowa", "Antarctica/Syowa"),
                            ("Antarctica/Troll", "Antarctica/Troll"),
                            ("Antarctica/Vostok", "Antarctica/Vostok"),
                            ("Arctic/Longyearbyen", "Arctic/Longyearbyen"),
                            ("Asia/Aden", "Asia/Aden"),
                            ("Asia/Almaty", "Asia/Almaty"),
                            ("Asia/Amman", "Asia/Amman"),
                            ("Asia/Anadyr", "Asia/Anadyr"),
                            ("Asia/Aqtau", "Asia/Aqtau"),
                            ("Asia/Aqtobe", "Asia/Aqtobe"),
                            ("Asia/Ashgabat", "Asia/Ashgabat"),
                            ("Asia/Ashkhabad", "Asia/Ashkhabad"),
                            ("Asia/Atyrau", "Asia/Atyrau"),
                            ("Asia/Baghdad", "Asia/Baghdad"),
                            ("Asia/Bahrain", "Asia/Bahrain"),
                            ("Asia/Baku", "Asia/Baku"),
                            ("Asia/Bangkok", "Asia/Bangkok"),
                            ("Asia/Barnaul", "Asia/Barnaul"),
                            ("Asia/Beirut", "Asia/Beirut"),
                            ("Asia/Bishkek", "Asia/Bishkek"),
                            ("Asia/Brunei", "Asia/Brunei"),
                            ("Asia/Calcutta", "Asia/Calcutta"),
                            ("Asia/Chita", "Asia/Chita"),
                            ("Asia/Choibalsan", "Asia/Choibalsan"),
                            ("Asia/Chongqing", "Asia/Chongqing"),
                            ("Asia/Chungking", "Asia/Chungking"),
                            ("Asia/Colombo", "Asia/Colombo"),
                            ("Asia/Dacca", "Asia/Dacca"),
                            ("Asia/Damascus", "Asia/Damascus"),
                            ("Asia/Dhaka", "Asia/Dhaka"),
                            ("Asia/Dili", "Asia/Dili"),
                            ("Asia/Dubai", "Asia/Dubai"),
                            ("Asia/Dushanbe", "Asia/Dushanbe"),
                            ("Asia/Famagusta", "Asia/Famagusta"),
                            ("Asia/Gaza", "Asia/Gaza"),
                            ("Asia/Harbin", "Asia/Harbin"),
                            ("Asia/Hebron", "Asia/Hebron"),
                            ("Asia/Ho_Chi_Minh", "Asia/Ho_Chi_Minh"),
                            ("Asia/Hong_Kong", "Asia/Hong_Kong"),
                            ("Asia/Hovd", "Asia/Hovd"),
                            ("Asia/Irkutsk", "Asia/Irkutsk"),
                            ("Asia/Istanbul", "Asia/Istanbul"),
                            ("Asia/Jakarta", "Asia/Jakarta"),
                            ("Asia/Jayapura", "Asia/Jayapura"),
                            ("Asia/Jerusalem", "Asia/Jerusalem"),
                            ("Asia/Kabul", "Asia/Kabul"),
                            ("Asia/Kamchatka", "Asia/Kamchatka"),
                            ("Asia/Karachi", "Asia/Karachi"),
                            ("Asia/Kashgar", "Asia/Kashgar"),
                            ("Asia/Kathmandu", "Asia/Kathmandu"),
                            ("Asia/Katmandu", "Asia/Katmandu"),
                            ("Asia/Khandyga", "Asia/Khandyga"),
                            ("Asia/Kolkata", "Asia/Kolkata"),
                            ("Asia/Krasnoyarsk", "Asia/Krasnoyarsk"),
                            ("Asia/Kuala_Lumpur", "Asia/Kuala_Lumpur"),
                            ("Asia/Kuching", "Asia/Kuching"),
                            ("Asia/Kuwait", "Asia/Kuwait"),
                            ("Asia/Macao", "Asia/Macao"),
                            ("Asia/Macau", "Asia/Macau"),
                            ("Asia/Magadan", "Asia/Magadan"),
                            ("Asia/Makassar", "Asia/Makassar"),
                            ("Asia/Manila", "Asia/Manila"),
                            ("Asia/Muscat", "Asia/Muscat"),
                            ("Asia/Nicosia", "Asia/Nicosia"),
                            ("Asia/Novokuznetsk", "Asia/Novokuznetsk"),
                            ("Asia/Novosibirsk", "Asia/Novosibirsk"),
                            ("Asia/Omsk", "Asia/Omsk"),
                            ("Asia/Oral", "Asia/Oral"),
                            ("Asia/Phnom_Penh", "Asia/Phnom_Penh"),
                            ("Asia/Pontianak", "Asia/Pontianak"),
                            ("Asia/Pyongyang", "Asia/Pyongyang"),
                            ("Asia/Qatar", "Asia/Qatar"),
                            ("Asia/Qostanay", "Asia/Qostanay"),
                            ("Asia/Qyzylorda", "Asia/Qyzylorda"),
                            ("Asia/Rangoon", "Asia/Rangoon"),
                            ("Asia/Riyadh", "Asia/Riyadh"),
                            ("Asia/Saigon", "Asia/Saigon"),
                            ("Asia/Sakhalin", "Asia/Sakhalin"),
                            ("Asia/Samarkand", "Asia/Samarkand"),
                            ("Asia/Seoul", "Asia/Seoul"),
                            ("Asia/Shanghai", "Asia/Shanghai"),
                            ("Asia/Singapore", "Asia/Singapore"),
                            ("Asia/Srednekolymsk", "Asia/Srednekolymsk"),
                            ("Asia/Taipei", "Asia/Taipei"),
                            ("Asia/Tashkent", "Asia/Tashkent"),
                            ("Asia/Tbilisi", "Asia/Tbilisi"),
                            ("Asia/Tehran", "Asia/Tehran"),
                            ("Asia/Tel_Aviv", "Asia/Tel_Aviv"),
                            ("Asia/Thimbu", "Asia/Thimbu"),
                            ("Asia/Thimphu", "Asia/Thimphu"),
                            ("Asia/Tokyo", "Asia/Tokyo"),
                            ("Asia/Tomsk", "Asia/Tomsk"),
                            ("Asia/Ujung_Pandang", "Asia/Ujung_Pandang"),
                            ("Asia/Ulaanbaatar", "Asia/Ulaanbaatar"),
                            ("Asia/Ulan_Bator", "Asia/Ulan_Bator"),
                            ("Asia/Urumqi", "Asia/Urumqi"),
                            ("Asia/Ust-Nera", "Asia/Ust-Nera"),
                            ("Asia/Vientiane", "Asia/Vientiane"),
                            ("Asia/Vladivostok", "Asia/Vladivostok"),
                            ("Asia/Yakutsk", "Asia/Yakutsk"),
                            ("Asia/Yangon", "Asia/Yangon"),
                            ("Asia/Yekaterinburg", "Asia/Yekaterinburg"),
                            ("Asia/Yerevan", "Asia/Yerevan"),
                            ("Atlantic/Azores", "Atlantic/Azores"),
                            ("Atlantic/Bermuda", "Atlantic/Bermuda"),
                            ("Atlantic/Canary", "Atlantic/Canary"),
                            ("Atlantic/Cape_Verde", "Atlantic/Cape_Verde"),
                            ("Atlantic/Faeroe", "Atlantic/Faeroe"),
                            ("Atlantic/Faroe", "Atlantic/Faroe"),
                            ("Atlantic/Jan_Mayen", "Atlantic/Jan_Mayen"),
                            ("Atlantic/Madeira", "Atlantic/Madeira"),
                            ("Atlantic/Reykjavik", "Atlantic/Reykjavik"),
                            ("Atlantic/South_Georgia", "Atlantic/South_Georgia"),
                            ("Atlantic/St_Helena", "Atlantic/St_Helena"),
                            ("Atlantic/Stanley", "Atlantic/Stanley"),
                            ("Australia/ACT", "Australia/ACT"),
                            ("Australia/Adelaide", "Australia/Adelaide"),
                            ("Australia/Brisbane", "Australia/Brisbane"),
                            ("Australia/Broken_Hill", "Australia/Broken_Hill"),
                            ("Australia/Canberra", "Australia/Canberra"),
                            ("Australia/Currie", "Australia/Currie"),
                            ("Australia/Darwin", "Australia/Darwin"),
                            ("Australia/Eucla", "Australia/Eucla"),
                            ("Australia/Hobart", "Australia/Hobart"),
                            ("Australia/LHI", "Australia/LHI"),
                            ("Australia/Lindeman", "Australia/Lindeman"),
                            ("Australia/Lord_Howe", "Australia/Lord_Howe"),
                            ("Australia/Melbourne", "Australia/Melbourne"),
                            ("Australia/NSW", "Australia/NSW"),
                            ("Australia/North", "Australia/North"),
                            ("Australia/Perth", "Australia/Perth"),
                            ("Australia/Queensland", "Australia/Queensland"),
                            ("Australia/South", "Australia/South"),
                            ("Australia/Sydney", "Australia/Sydney"),
                            ("Australia/Tasmania", "Australia/Tasmania"),
                            ("Australia/Victoria", "Australia/Victoria"),
                            ("Australia/West", "Australia/West"),
                            ("Australia/Yancowinna", "Australia/Yancowinna"),
                            ("Brazil/Acre", "Brazil/Acre"),
                            ("Brazil/DeNoronha", "Brazil/DeNoronha"),
                            ("Brazil/East", "Brazil/East"),
                            ("Brazil/West", "Brazil/West"),
                            ("CET", "CET"),
                            ("CST6CDT", "CST6CDT"),
                            ("Canada/Atlantic", "Canada/Atlantic"),
                            ("Canada/Central", "Canada/Central"),
                            ("Canada/Eastern", "Canada/Eastern"),
                            ("Canada/Mountain", "Canada/Mountain"),
                            ("Canada/Newfoundland", "Canada/Newfoundland"),
                            ("Canada/Pacific", "Canada/Pacific"),
                            ("Canada/Saskatchewan", "Canada/Saskatchewan"),
                            ("Canada/Yukon", "Canada/Yukon"),
                            ("Chile/Continental", "Chile/Continental"),
                            ("Chile/EasterIsland", "Chile/EasterIsland"),
                            ("Cuba", "Cuba"),
                            ("EET", "EET"),
                            ("EST", "EST"),
                            ("EST5EDT", "EST5EDT"),
                            ("Egypt", "Egypt"),
                            ("Eire", "Eire"),
                            ("Etc/GMT", "Etc/GMT"),
                            ("Etc/GMT+0", "Etc/GMT+0"),
                            ("Etc/GMT+1", "Etc/GMT+1"),
                            ("Etc/GMT+10", "Etc/GMT+10"),
                            ("Etc/GMT+11", "Etc/GMT+11"),
                            ("Etc/GMT+12", "Etc/GMT+12"),
                            ("Etc/GMT+2", "Etc/GMT+2"),
                            ("Etc/GMT+3", "Etc/GMT+3"),
                            ("Etc/GMT+4", "Etc/GMT+4"),
                            ("Etc/GMT+5", "Etc/GMT+5"),
                            ("Etc/GMT+6", "Etc/GMT+6"),
                            ("Etc/GMT+7", "Etc/GMT+7"),
                            ("Etc/GMT+8", "Etc/GMT+8"),
                            ("Etc/GMT+9", "Etc/GMT+9"),
                            ("Etc/GMT-0", "Etc/GMT-0"),
                            ("Etc/GMT-1", "Etc/GMT-1"),
                            ("Etc/GMT-10", "Etc/GMT-10"),
                            ("Etc/GMT-11", "Etc/GMT-11"),
                            ("Etc/GMT-12", "Etc/GMT-12"),
                            ("Etc/GMT-13", "Etc/GMT-13"),
                            ("Etc/GMT-14", "Etc/GMT-14"),
                            ("Etc/GMT-2", "Etc/GMT-2"),
                            ("Etc/GMT-3", "Etc/GMT-3"),
                            ("Etc/GMT-4", "Etc/GMT-4"),
                            ("Etc/GMT-5", "Etc/GMT-5"),
                            ("Etc/GMT-6", "Etc/GMT-6"),
                            ("Etc/GMT-7", "Etc/GMT-7"),
                            ("Etc/GMT-8", "Etc/GMT-8"),
                            ("Etc/GMT-9", "Etc/GMT-9"),
                            ("Etc/GMT0", "Etc/GMT0"),
                            ("Etc/Greenwich", "Etc/Greenwich"),
                            ("Etc/UCT", "Etc/UCT"),
                            ("Etc/UTC", "Etc/UTC"),
                            ("Etc/Universal", "Etc/Universal"),
                            ("Etc/Zulu", "Etc/Zulu"),
                            ("Europe/Amsterdam", "Europe/Amsterdam"),
                            ("Europe/Andorra", "Europe/Andorra"),
                            ("Europe/Astrakhan", "Europe/Astrakhan"),
                            ("Europe/Athens", "Europe/Athens"),
                            ("Europe/Belfast", "Europe/Belfast"),
                            ("Europe/Belgrade", "Europe/Belgrade"),
                            ("Europe/Berlin", "Europe/Berlin"),
                            ("Europe/Bratislava", "Europe/Bratislava"),
                            ("Europe/Brussels", "Europe/Brussels"),
                            ("Europe/Bucharest", "Europe/Bucharest"),
                            ("Europe/Budapest", "Europe/Budapest"),
                            ("Europe/Busingen", "Europe/Busingen"),
                            ("Europe/Chisinau", "Europe/Chisinau"),
                            ("Europe/Copenhagen", "Europe/Copenhagen"),
                            ("Europe/Dublin", "Europe/Dublin"),
                            ("Europe/Gibraltar", "Europe/Gibraltar"),
                            ("Europe/Guernsey", "Europe/Guernsey"),
                            ("Europe/Helsinki", "Europe/Helsinki"),
                            ("Europe/Isle_of_Man", "Europe/Isle_of_Man"),
                            ("Europe/Istanbul", "Europe/Istanbul"),
                            ("Europe/Jersey", "Europe/Jersey"),
                            ("Europe/Kaliningrad", "Europe/Kaliningrad"),
                            ("Europe/Kiev", "Europe/Kiev"),
                            ("Europe/Kirov", "Europe/Kirov"),
                            ("Europe/Kyiv", "Europe/Kyiv"),
                            ("Europe/Lisbon", "Europe/Lisbon"),
                            ("Europe/Ljubljana", "Europe/Ljubljana"),
                            ("Europe/London", "Europe/London"),
                            ("Europe/Luxembourg", "Europe/Luxembourg"),
                            ("Europe/Madrid", "Europe/Madrid"),
                            ("Europe/Malta", "Europe/Malta"),
                            ("Europe/Mariehamn", "Europe/Mariehamn"),
                            ("Europe/Minsk", "Europe/Minsk"),
                            ("Europe/Monaco", "Europe/Monaco"),
                            ("Europe/Moscow", "Europe/Moscow"),
                            ("Europe/Nicosia", "Europe/Nicosia"),
                            ("Europe/Oslo", "Europe/Oslo"),
                            ("Europe/Paris", "Europe/Paris"),
                            ("Europe/Podgorica", "Europe/Podgorica"),
                            ("Europe/Prague", "Europe/Prague"),
                            ("Europe/Riga", "Europe/Riga"),
                            ("Europe/Rome", "Europe/Rome"),
                            ("Europe/Samara", "Europe/Samara"),
                            ("Europe/San_Marino", "Europe/San_Marino"),
                            ("Europe/Sarajevo", "Europe/Sarajevo"),
                            ("Europe/Saratov", "Europe/Saratov"),
                            ("Europe/Simferopol", "Europe/Simferopol"),
                            ("Europe/Skopje", "Europe/Skopje"),
                            ("Europe/Sofia", "Europe/Sofia"),
                            ("Europe/Stockholm", "Europe/Stockholm"),
                            ("Europe/Tallinn", "Europe/Tallinn"),
                            ("Europe/Tirane", "Europe/Tirane"),
                            ("Europe/Tiraspol", "Europe/Tiraspol"),
                            ("Europe/Ulyanovsk", "Europe/Ulyanovsk"),
                            ("Europe/Uzhgorod", "Europe/Uzhgorod"),
                            ("Europe/Vaduz", "Europe/Vaduz"),
                            ("Europe/Vatican", "Europe/Vatican"),
                            ("Europe/Vienna", "Europe/Vienna"),
                            ("Europe/Vilnius", "Europe/Vilnius"),
                            ("Europe/Volgograd", "Europe/Volgograd"),
                            ("Europe/Warsaw", "Europe/Warsaw"),
                            ("Europe/Zagreb", "Europe/Zagreb"),
                            ("Europe/Zaporozhye", "Europe/Zaporozhye"),
                            ("Europe/Zurich", "Europe/Zurich"),
                            ("GB", "GB"),
                            ("GB-Eire", "GB-Eire"),
                            ("GMT", "GMT"),
                            ("GMT+0", "GMT+0"),
                            ("GMT-0", "GMT-0"),
                            ("GMT0", "GMT0"),
                            ("Greenwich", "Greenwich"),
                            ("HST", "HST"),
                            ("Hongkong", "Hongkong"),
                            ("Iceland", "Iceland"),
                            ("Indian/Antananarivo", "Indian/Antananarivo"),
                            ("Indian/Chagos", "Indian/Chagos"),
                            ("Indian/Christmas", "Indian/Christmas"),
                            ("Indian/Cocos", "Indian/Cocos"),
                            ("Indian/Comoro", "Indian/Comoro"),
                            ("Indian/Kerguelen", "Indian/Kerguelen"),
                            ("Indian/Mahe", "Indian/Mahe"),
                            ("Indian/Maldives", "Indian/Maldives"),
                            ("Indian/Mauritius", "Indian/Mauritius"),
                            ("Indian/Mayotte", "Indian/Mayotte"),
                            ("Indian/Reunion", "Indian/Reunion"),
                            ("Iran", "Iran"),
                            ("Israel", "Israel"),
                            ("Jamaica", "Jamaica"),
                            ("Japan", "Japan"),
                            ("Kwajalein", "Kwajalein"),
                            ("Libya", "Libya"),
                            ("MET", "MET"),
                            ("MST", "MST"),
                            ("MST7MDT", "MST7MDT"),
                            ("Mexico/BajaNorte", "Mexico/BajaNorte"),
                            ("Mexico/BajaSur", "Mexico/BajaSur"),
                            ("Mexico/General", "Mexico/General"),
                            ("NZ", "NZ"),
                            ("NZ-CHAT", "NZ-CHAT"),
                            ("Navajo", "Navajo"),
                            ("PRC", "PRC"),
                            ("PST8PDT", "PST8PDT"),
                            ("Pacific/Apia", "Pacific/Apia"),
                            ("Pacific/Auckland", "Pacific/Auckland"),
                            ("Pacific/Bougainville", "Pacific/Bougainville"),
                            ("Pacific/Chatham", "Pacific/Chatham"),
                            ("Pacific/Chuuk", "Pacific/Chuuk"),
                            ("Pacific/Easter", "Pacific/Easter"),
                            ("Pacific/Efate", "Pacific/Efate"),
                            ("Pacific/Enderbury", "Pacific/Enderbury"),
                            ("Pacific/Fakaofo", "Pacific/Fakaofo"),
                            ("Pacific/Fiji", "Pacific/Fiji"),
                            ("Pacific/Funafuti", "Pacific/Funafuti"),
                            ("Pacific/Galapagos", "Pacific/Galapagos"),
                            ("Pacific/Gambier", "Pacific/Gambier"),
                            ("Pacific/Guadalcanal", "Pacific/Guadalcanal"),
                            ("Pacific/Guam", "Pacific/Guam"),
                            ("Pacific/Honolulu", "Pacific/Honolulu"),
                            ("Pacific/Johnston", "Pacific/Johnston"),
                            ("Pacific/Kanton", "Pacific/Kanton"),
                            ("Pacific/Kiritimati", "Pacific/Kiritimati"),
                            ("Pacific/Kosrae", "Pacific/Kosrae"),
                            ("Pacific/Kwajalein", "Pacific/Kwajalein"),
                            ("Pacific/Majuro", "Pacific/Majuro"),
                            ("Pacific/Marquesas", "Pacific/Marquesas"),
                            ("Pacific/Midway", "Pacific/Midway"),
                            ("Pacific/Nauru", "Pacific/Nauru"),
                            ("Pacific/Niue", "Pacific/Niue"),
                            ("Pacific/Norfolk", "Pacific/Norfolk"),
                            ("Pacific/Noumea", "Pacific/Noumea"),
                            ("Pacific/Pago_Pago", "Pacific/Pago_Pago"),
                            ("Pacific/Palau", "Pacific/Palau"),
                            ("Pacific/Pitcairn", "Pacific/Pitcairn"),
                            ("Pacific/Pohnpei", "Pacific/Pohnpei"),
                            ("Pacific/Ponape", "Pacific/Ponape"),
                            ("Pacific/Port_Moresby", "Pacific/Port_Moresby"),
                            ("Pacific/Rarotonga", "Pacific/Rarotonga"),
                            ("Pacific/Saipan", "Pacific/Saipan"),
                            ("Pacific/Samoa", "Pacific/Samoa"),
                            ("Pacific/Tahiti", "Pacific/Tahiti"),
                            ("Pacific/Tarawa", "Pacific/Tarawa"),
                            ("Pacific/Tongatapu", "Pacific/Tongatapu"),
                            ("Pacific/Truk", "Pacific/Truk"),
                            ("Pacific/Wake", "Pacific/Wake"),
                            ("Pacific/Wallis", "Pacific/Wallis"),
                            ("Pacific/Yap", "Pacific/Yap"),
                            ("Poland", "Poland"),
                            ("Portugal", "Portugal"),
                            ("ROC", "ROC"),
                            ("ROK", "ROK"),
                            ("Singapore", "Singapore"),
                            ("Turkey", "Turkey"),
                            ("UCT", "UCT"),
                            ("US/Alaska", "US/Alaska"),
                            ("US/Aleutian", "US/Aleutian"),
                            ("US/Arizona", "US/Arizona"),
                            ("US/Central", "US/Central"),
                            ("US/East-Indiana", "US/East-Indiana"),
                            ("US/Eastern", "US/Eastern"),
                            ("US/Hawaii", "US/Hawaii"),
                            ("US/Indiana-Starke", "US/Indiana-Starke"),
                            ("US/Michigan", "US/Michigan"),
                            ("US/Mountain", "US/Mountain"),
                            ("US/Pacific", "US/Pacific"),
                            ("US/Samoa", "US/Samoa"),
                            ("UTC", "UTC"),
                            ("Universal", "Universal"),
                            ("W-SU", "W-SU"),
                            ("WET", "WET"),
                            ("Zulu", "Zulu"),
                        ],
                        default="UTC",
                        max_length=240,
                    ),
                ),
                ("data_attributes", models.JSONField(default=posthog.models.team.team.get_default_data_attributes)),
                (
                    "person_display_name_properties",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=400), blank=True, null=True, size=None
                    ),
                ),
                (
                    "live_events_columns",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(), blank=True, null=True, size=None
                    ),
                ),
                (
                    "recording_domains",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=200, null=True), blank=True, null=True, size=None
                    ),
                ),
                ("correlation_config", models.JSONField(blank=True, default=dict, null=True)),
                ("session_recording_retention_period_days", models.IntegerField(default=None, null=True)),
                ("plugins_opt_in", models.BooleanField(default=False)),
                ("opt_out_capture", models.BooleanField(default=False)),
                ("event_names", django.contrib.postgres.fields.jsonb.JSONField(default=list)),
                ("event_names_with_usage", django.contrib.postgres.fields.jsonb.JSONField(default=list)),
                ("event_properties", django.contrib.postgres.fields.jsonb.JSONField(default=list)),
                ("event_properties_with_usage", django.contrib.postgres.fields.jsonb.JSONField(default=list)),
                ("event_properties_numerical", django.contrib.postgres.fields.jsonb.JSONField(default=list)),
            ],
        ),
        migrations.CreateModel(
            name="Event",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, null=True),
                ),
                ("event", models.CharField(blank=True, max_length=200, null=True)),
                (
                    "distinct_id",
                    models.CharField(default="fake-id-that-shouldnt-exist", max_length=200),
                ),
                ("properties", django.contrib.postgres.fields.jsonb.JSONField(default=dict)),
                ("timestamp", models.DateTimeField(blank=True, default=django.utils.timezone.now)),
                (
                    "elements_hash",
                    models.CharField(blank=True, max_length=200, null=True),
                ),
                (
                    "site_url",
                    models.CharField(blank=True, max_length=200, null=True),
                ),
                ("elements", django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=list, null=True)),
                ("team", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.team")),
            ],
        ),
        migrations.AddIndex(
            model_name="event",
            index=models.Index(fields=["elements_hash"], name="posthog_eve_element_48becd_idx"),
        ),
        migrations.CreateModel(
            name="Person",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("properties_last_updated_at", models.JSONField(blank=True, default=dict, null=True)),
                ("properties_last_operation", models.JSONField(blank=True, null=True)),
                ("properties", models.JSONField(default=dict)),
                ("is_identified", models.BooleanField(default=False)),
                ("uuid", models.UUIDField(db_index=True, default=posthog.models.utils.UUIDT, editable=False)),
                ("version", models.BigIntegerField(blank=True, null=True)),
                (
                    "is_user",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
                    ),
                ),
                ("team", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.team")),
            ],
        ),
        migrations.CreateModel(
            name="Element",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("el_text", models.CharField(blank=True, max_length=400, null=True)),
                ("tag_name", models.CharField(blank=True, max_length=400, null=True)),
                ("href", models.CharField(blank=True, max_length=400, null=True)),
                ("attr_id", models.CharField(blank=True, max_length=400, null=True)),
                (
                    "attr_class",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(blank=True, max_length=200), blank=True, null=True, size=None
                    ),
                ),
                ("nth_child", models.IntegerField()),
                ("nth_of_type", models.IntegerField()),
                ("attributes", django.contrib.postgres.fields.jsonb.JSONField(default=dict)),
                ("order", models.IntegerField()),
                ("event", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.event")),
                ("team", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.team")),
            ],
        ),
        migrations.CreateModel(
            name="Action",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(blank=True, max_length=400, null=True)),
                ("description", models.TextField(blank=True, default="")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("deleted", models.BooleanField(default=False)),
                ("post_to_slack", models.BooleanField(default=False)),
                ("slack_message_format", models.CharField(blank=True, max_length=1200, null=False)),
                ("is_calculating", models.BooleanField(default=False)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("last_calculated_at", models.DateTimeField(blank=True, default=django.utils.timezone.now)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL
                    ),
                ),
                ("team", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.team")),
                ("bytecode", models.JSONField(blank=True, null=True)),
                ("bytecode_error", models.TextField(blank=True, null=True)),
                ("steps_json", models.JSONField(blank=True, null=True)),
                ("pinned_at", models.DateTimeField(blank=True, default=None, null=True)),
                (
                    "embedding_last_synced_at",
                    models.DateTimeField(
                        help_text="The last time the action was synced to the vector database", null=True
                    ),
                ),
                (
                    "last_summarized_at",
                    models.DateTimeField(help_text="The last time the action was summarized by AI", null=True),
                ),
                (
                    "summary",
                    models.TextField(blank=True, help_text="A summary of the action, generated by AI", null=True),
                ),
                (
                    "embedding_version",
                    models.PositiveSmallIntegerField(
                        blank=True, help_text="The version of the embedding model used to embed the action", null=True
                    ),
                ),
                ("events", models.ManyToManyField(blank=True, to="posthog.event")),
            ],
        ),
        migrations.CreateModel(
            name="ActionStep",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("tag_name", models.CharField(blank=True, max_length=400, null=True)),
                ("text", models.CharField(blank=True, max_length=400, null=True)),
                ("href", models.CharField(blank=True, max_length=65535, null=True)),
                ("selector", models.CharField(blank=True, max_length=65535, null=True)),
                ("url", models.CharField(blank=True, max_length=65535, null=True)),
                (
                    "url_matching",
                    models.CharField(
                        blank=True,
                        choices=[("contains", "contains"), ("regex", "regex"), ("exact", "exact")],
                        default="contains",
                        max_length=400,
                        null=True,
                    ),
                ),
                ("event", models.CharField(blank=True, max_length=400, null=True)),
                (
                    "properties",
                    models.JSONField(blank=True, default=list, null=True),
                ),
                ("name", models.CharField(blank=True, max_length=400, null=True)),
                (
                    "action",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="action_steps", to="posthog.action"
                    ),
                ),
                (
                    "href_matching",
                    models.CharField(
                        blank=True,
                        choices=[("contains", "contains"), ("regex", "regex"), ("exact", "exact")],
                        max_length=400,
                        null=True,
                    ),
                ),
                (
                    "text_matching",
                    models.CharField(
                        blank=True,
                        choices=[("contains", "contains"), ("regex", "regex"), ("exact", "exact")],
                        max_length=400,
                        null=True,
                    ),
                ),
            ],
        ),
        migrations.RenameField(
            model_name="element",
            old_name="el_text",
            new_name="text",
        ),
        migrations.CreateModel(
            name="Funnel",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(blank=True, max_length=400, null=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
                    ),
                ),
                ("team", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.team")),
            ],
        ),
        migrations.CreateModel(
            name="FunnelStep",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("order", models.IntegerField()),
                ("action", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.action")),
                ("funnel", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.funnel")),
            ],
        ),
        migrations.RemoveField(
            model_name="element",
            name="team",
        ),
        migrations.AlterField(
            model_name="element",
            name="nth_child",
            field=models.IntegerField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name="element",
            name="nth_of_type",
            field=models.IntegerField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name="element",
            name="order",
            field=models.IntegerField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name="funnelstep",
            name="funnel",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, related_name="steps", to="posthog.funnel"
            ),
        ),
        migrations.CreateModel(
            name="PersonDistinctId",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("distinct_id", models.CharField(max_length=400)),
                ("version", models.BigIntegerField(blank=True, null=True)),
                ("person", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.person")),
                (
                    "team",
                    models.ForeignKey(db_index=False, on_delete=django.db.models.deletion.CASCADE, to="posthog.team"),
                ),
            ],
        ),
        migrations.AddConstraint(
            model_name="persondistinctid",
            constraint=models.UniqueConstraint(fields=("team", "distinct_id"), name="unique distinct_id for team"),
        ),
        migrations.AlterModelManagers(
            name="user",
            managers=[
                ("objects", posthog.models.user.UserManager()),
            ],
        ),
        migrations.AddField(
            model_name="funnel",
            name="deleted",
            field=models.BooleanField(default=False),
        ),
        migrations.CreateModel(
            name="Cohort",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(blank=True, max_length=400, null=True)),
                ("description", models.CharField(blank=True, max_length=1000)),
                ("deleted", models.BooleanField(default=False)),
                ("filters", models.JSONField(blank=True, null=True)),
                ("version", models.IntegerField(blank=True, null=True)),
                ("pending_version", models.IntegerField(blank=True, null=True)),
                ("count", models.IntegerField(blank=True, null=True)),
                ("created_at", models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True)),
                ("is_calculating", models.BooleanField(default=False)),
                ("last_calculation", models.DateTimeField(blank=True, null=True)),
                ("errors_calculating", models.IntegerField(default=0)),
                ("is_static", models.BooleanField(default=False)),
                ("groups", models.JSONField(default=list)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL
                    ),
                ),
                ("team", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.team")),
                ("query", models.JSONField(blank=True, null=True)),
                ("last_error_at", models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="ElementGroup",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("hash", models.CharField(blank=True, max_length=400, null=True)),
            ],
        ),
        migrations.AlterField(
            model_name="element",
            name="event",
            field=models.ForeignKey(
                blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to="posthog.event"
            ),
        ),
        migrations.AddField(
            model_name="elementgroup",
            name="team",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.team"),
        ),
        migrations.AddField(
            model_name="element",
            name="group",
            field=models.ForeignKey(
                blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to="posthog.elementgroup"
            ),
        ),
        migrations.AddConstraint(
            model_name="elementgroup",
            constraint=models.UniqueConstraint(fields=("team", "hash"), name="unique hash for each team"),
        ),
        migrations.RunSQL(
            sql="SELECT 1;",
            reverse_sql="DROP INDEX IF EXISTS posthog_event_properties_current_url_gin",
        ),
        migrations.RunSQL(
            sql="DROP INDEX IF EXISTS posthog_event_properties_current_url_gin;",
            reverse_sql="SELECT 1;",
        ),
        migrations.AddField(
            model_name="funnel",
            name="filters",
            field=django.contrib.postgres.fields.jsonb.JSONField(default=dict),
        ),
        migrations.AddIndex(
            model_name="event",
            index=models.Index(fields=["timestamp"], name="posthog_eve_timesta_b00cec_idx"),
        ),
        migrations.RemoveIndex(
            model_name="event",
            name="posthog_eve_timesta_b00cec_idx",
        ),
        migrations.AddIndex(
            model_name="event",
            index=models.Index(fields=["timestamp", "team_id", "event"], name="posthog_eve_timesta_1f6a8c_idx"),
        ),
        migrations.DeleteModel(
            name="FunnelStep",
        ),
        migrations.CreateModel(
            name="Dashboard",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(blank=True, max_length=400, null=True)),
                ("description", models.TextField(blank=True)),
                ("pinned", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("deleted", models.BooleanField(default=False)),
                ("last_accessed_at", models.DateTimeField(blank=True, null=True)),
                ("filters", models.JSONField(default=dict)),
                (
                    "creation_mode",
                    models.CharField(
                        choices=[("default", "Default"), ("template", "Template"), ("duplicate", "Duplicate")],
                        default="default",
                        max_length=16,
                    ),
                ),
                (
                    "restriction_level",
                    models.PositiveSmallIntegerField(
                        choices=[
                            (21, "Everyone in the project can edit"),
                            (37, "Only those invited to this dashboard can edit"),
                        ],
                        default=21,
                    ),
                ),
                (
                    "deprecated_tags",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=32), blank=True, default=list, null=True, size=None
                    ),
                ),
                (
                    "deprecated_tags_v2",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=32),
                        blank=True,
                        db_column="tags",
                        default=None,
                        null=True,
                        size=None,
                    ),
                ),
                ("share_token", models.CharField(blank=True, max_length=400, null=True)),
                ("is_shared", models.BooleanField(default=False)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL
                    ),
                ),
                ("team", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.team")),
                ("variables", models.JSONField(blank=True, default=dict, null=True)),
                ("breakdown_colors", models.JSONField(blank=True, default=list, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="DashboardItem",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(blank=True, max_length=400, null=True)),
                ("derived_name", models.CharField(blank=True, max_length=400, null=True)),
                ("description", models.CharField(blank=True, max_length=400, null=True)),
                ("filters", models.JSONField(default=dict)),
                ("filters_hash", models.CharField(blank=True, max_length=400, null=True)),
                ("order", models.IntegerField(blank=True, null=True)),
                ("deleted", models.BooleanField(default=False)),
                ("saved", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("last_refresh", models.DateTimeField(blank=True, null=True)),
                ("refreshing", models.BooleanField(default=False)),
                ("is_sample", models.BooleanField(default=False)),
                ("short_id", models.CharField(blank=True, default=posthog.utils.generate_short_id, max_length=12)),
                ("favorited", models.BooleanField(default=False)),
                ("refresh_attempt", models.IntegerField(blank=True, null=True)),
                ("last_modified_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("layouts", models.JSONField(default=dict)),
                ("color", models.CharField(blank=True, max_length=400, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("type", models.CharField(blank=True, max_length=400, null=True)),
                ("funnel", models.IntegerField(blank=True, null=True)),
                (
                    "deprecated_tags",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=32), blank=True, default=list, null=True, size=None
                    ),
                ),
                (
                    "deprecated_tags_v2",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=32),
                        blank=True,
                        db_column="tags",
                        default=None,
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL
                    ),
                ),
                (
                    "dashboard",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="items",
                        to="posthog.dashboard",
                    ),
                ),
                (
                    "dive_dashboard",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to="posthog.dashboard"
                    ),
                ),
                (
                    "last_modified_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="modified_insights",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                ("team", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.team")),
                ("query", models.JSONField(blank=True, null=True)),
            ],
        ),
        migrations.AlterUniqueTogether(
            name="dashboarditem",
            unique_together={("team", "short_id")},
        ),
        migrations.AlterModelTable(
            name="dashboarditem",
            table="posthog_dashboarditem",
        ),
        migrations.CreateModel(
            name="CohortPeople",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("version", models.IntegerField(blank=True, null=True)),
                ("cohort", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.cohort")),
                ("person", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.person")),
            ],
        ),
        migrations.AddField(
            model_name="cohort",
            name="people",
            field=models.ManyToManyField(through="posthog.CohortPeople", to="posthog.person"),
        ),
        migrations.AddIndex(
            model_name="cohortpeople",
            index=models.Index(fields=["cohort_id", "person_id"], name="posthog_coh_cohort__89c25f_idx"),
        ),
        migrations.AlterField(
            model_name="element",
            name="href",
            field=models.CharField(blank=True, max_length=2048, null=True),
        ),
        migrations.CreateModel(
            name="FeatureFlag",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("key", models.CharField(max_length=400)),
                ("name", models.CharField(max_length=400)),
                ("filters", django.contrib.postgres.fields.jsonb.JSONField(default=dict)),
                ("rollout_percentage", models.IntegerField(blank=True, null=True)),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("deleted", models.BooleanField(default=False)),
                ("active", models.BooleanField(default=True)),
                ("rollback_conditions", models.JSONField(blank=True, null=True)),
                ("performed_rollback", models.BooleanField(blank=True, null=True)),
                ("ensure_experience_continuity", models.BooleanField(blank=True, default=False, null=True)),
                (
                    "created_by",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
                ),
                ("team", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.team")),
            ],
        ),
        migrations.AddConstraint(
            model_name="featureflag",
            constraint=models.UniqueConstraint(fields=("team", "key"), name="unique key for team"),
        ),
        migrations.AddIndex(
            model_name="action",
            index=models.Index(fields=["team_id", "-updated_at"], name="posthog_act_team_id_8c04de_idx"),
        ),
        migrations.CreateModel(
            name="Annotation",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("content", models.CharField(blank=True, max_length=400, null=True)),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "scope",
                    models.CharField(
                        choices=[
                            ("dashboard_item", "insight"),
                            ("dashboard", "dashboard"),
                            ("project", "project"),
                            ("organization", "organization"),
                        ],
                        default="dashboard_item",
                        max_length=24,
                    ),
                ),
                (
                    "creation_type",
                    models.CharField(choices=[("USR", "user"), ("GIT", "GitHub")], default="USR", max_length=3),
                ),
                ("date_marker", models.DateTimeField(blank=True, null=True)),
                ("deleted", models.BooleanField(default=False)),
                ("apply_all", models.BooleanField(null=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL
                    ),
                ),
                (
                    "dashboard_item",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to="posthog.dashboarditem"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="PersonalAPIKey",
            fields=[
                (
                    "id",
                    models.CharField(
                        default=posthog.models.utils.generate_random_token,
                        max_length=50,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("label", models.CharField(max_length=40)),
                (
                    "value",
                    models.CharField(
                        default=posthog.models.utils.generate_random_token, editable=False, max_length=50, unique=True
                    ),
                ),
                ("secure_value", models.CharField(editable=False, max_length=300, null=True, unique=True)),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("last_used_at", models.DateTimeField(blank=True, null=True)),
                (
                    "team",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="personal_api_keys", to="posthog.team"
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="personal_api_keys",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="UploadedMedia",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=posthog.models.utils.UUIDT, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("media_location", models.TextField(blank=True, max_length=1000, null=True)),
                ("content_type", models.TextField(blank=True, max_length=100, null=True)),
                ("file_name", models.TextField(blank=True, max_length=1000, null=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL
                    ),
                ),
                ("team", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.team")),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Organization",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=posthog.models.utils.UUIDT, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("name", models.CharField(max_length=64)),
                ("slug", posthog.models.utils.LowercaseSlugField(max_length=48, unique=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "plugins_access_level",
                    models.PositiveSmallIntegerField(
                        choices=[(0, "none"), (3, "config"), (6, "install"), (9, "root")], default=3
                    ),
                ),
                ("for_internal_metrics", models.BooleanField(default=False)),
                ("is_member_join_email_enabled", models.BooleanField(default=True)),
                ("customer_id", models.CharField(blank=True, max_length=200, null=True)),
                ("usage", models.JSONField(blank=True, null=True)),
                ("setup_section_2_completed", models.BooleanField(default=True)),
                ("personalization", models.JSONField(blank=True, default=dict)),
                (
                    "domain_whitelist",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=256), blank=True, default=list, size=None
                    ),
                ),
                ("enforce_2fa", models.BooleanField(blank=True, null=True)),
                (
                    "available_product_features",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.JSONField(), blank=True, null=True, size=None
                    ),
                ),
                ("never_drop_data", models.BooleanField(blank=True, default=False, null=True)),
                ("customer_trust_scores", models.JSONField(blank=True, default=dict, null=True)),
                ("is_hipaa", models.BooleanField(blank=True, default=False, null=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddConstraint(
            model_name="organization",
            constraint=models.UniqueConstraint(
                condition=models.Q(("for_internal_metrics", True)),
                fields=("for_internal_metrics",),
                name="single_for_internal_metrics",
            ),
        ),
        migrations.AddField(
            model_name="user", name="temporary_token", field=models.CharField(blank=True, max_length=200, null=True)
        ),
        migrations.AlterField(
            model_name="user",
            name="temporary_token",
            field=models.CharField(blank=True, max_length=200, null=True, unique=True),
        ),
        migrations.AddField(
            model_name="user", name="distinct_id", field=models.CharField(blank=True, max_length=200, null=True)
        ),
        migrations.AlterField(
            model_name="user",
            name="distinct_id",
            field=models.CharField(blank=True, max_length=200, null=True, unique=True),
        ),
        migrations.AddField(
            model_name="user", name="email_opt_in", field=models.BooleanField(blank=True, default=False, null=True)
        ),
        migrations.AddField(
            model_name="user", name="partial_notification_settings", field=models.JSONField(blank=True, null=True)
        ),
        migrations.AddField(
            model_name="user", name="anonymize_data", field=models.BooleanField(blank=True, default=False, null=True)
        ),
        migrations.AddField(
            model_name="user",
            name="toolbar_mode",
            field=models.CharField(
                blank=True,
                choices=[("disabled", "disabled"), ("toolbar", "toolbar")],
                default="toolbar",
                max_length=200,
                null=True,
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="events_column_config",
            field=models.JSONField(default=posthog.models.user.events_column_config_default),
        ),
        migrations.AddField(
            model_name="user",
            name="current_organization",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="users_currently+",
                to="posthog.organization",
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="current_team",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="teams_currently+",
                to="posthog.team",
            ),
        ),
        migrations.AddField(
            model_name="user", name="is_email_verified", field=models.BooleanField(blank=True, null=True)
        ),
        migrations.AddField(
            model_name="user",
            name="pending_email",
            field=models.EmailField(
                blank=True, max_length=254, null=True, verbose_name="pending email address awaiting verification"
            ),
        ),
        migrations.AddField(
            model_name="user", name="requested_password_reset_at", field=models.DateTimeField(blank=True, null=True)
        ),
        migrations.AddField(
            model_name="user", name="has_seen_product_intro_for", field=models.JSONField(blank=True, null=True)
        ),
        migrations.AddField(
            model_name="user",
            name="theme_mode",
            field=models.CharField(
                blank=True,
                choices=[("light", "Light"), ("dark", "Dark"), ("system", "System")],
                max_length=20,
                null=True,
            ),
        ),
        migrations.AddField(
            model_name="user", name="strapi_id", field=models.PositiveSmallIntegerField(blank=True, null=True)
        ),
        migrations.AddField(model_name="user", name="hedgehog_config", field=models.JSONField(blank=True, null=True)),
        migrations.AddField(
            model_name="user",
            name="role_at_organization",
            field=models.CharField(
                blank=True,
                choices=[
                    ("engineering", "Engineering"),
                    ("data", "Data"),
                    ("product", "Product Management"),
                    ("founder", "Founder"),
                    ("leadership", "Leadership"),
                    ("marketing", "Marketing"),
                    ("sales", "Sales / Success"),
                    ("other", "Other"),
                ],
                max_length=64,
                null=True,
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="groups",
            field=models.ManyToManyField(
                blank=True,
                help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                related_name="user_set",
                related_query_name="user",
                to="auth.group",
                verbose_name="groups",
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="user_permissions",
            field=models.ManyToManyField(
                blank=True,
                help_text="Specific permissions for this user.",
                related_name="user_set",
                related_query_name="user",
                to="auth.permission",
                verbose_name="user permissions",
            ),
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "posthog_organization" ADD COLUMN "logo_media_id" uuid NULL CONSTRAINT "posthog_organization_logo_media_id_1c12c9dc_fk_posthog_u" REFERENCES "posthog_uploadedmedia"("id") DEFERRABLE INITIALLY DEFERRED; -- existing-table-constraint-ignore\n                    SET CONSTRAINTS "posthog_organization_logo_media_id_1c12c9dc_fk_posthog_u" IMMEDIATE; -- existing-table-constraint-ignore\n                    ',
                    reverse_sql='\n                        ALTER TABLE "posthog_organization" DROP COLUMN IF EXISTS "logo_media_id";\n                    ',
                ),
                migrations.RunSQL(
                    sql='\n                    CREATE INDEX "posthog_organization_logo_media_id_1c12c9dc" ON "posthog_organization" ("logo_media_id");\n                    ',
                    reverse_sql='\n                        DROP INDEX IF EXISTS "posthog_organization_logo_media_id_1c12c9dc";\n                    ',
                ),
            ],
            state_operations=[
                migrations.AddField(
                    model_name="organization",
                    name="logo_media",
                    field=models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to="posthog.uploadedmedia"
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="organization",
            name="is_ai_data_processing_approved",
            field=models.BooleanField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name="personalapikey",
            name="team",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="personal_api_keys",
                to="posthog.team",
            ),
        ),
        migrations.AddField(
            model_name="annotation",
            name="organization",
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to="posthog.organization"),
        ),
        migrations.AddField(
            model_name="annotation",
            name="team",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.team"),
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "posthog_annotation" ADD COLUMN "dashboard_id" integer NULL CONSTRAINT "posthog_annotation_dashboard_id_91ef4125_fk_posthog_d" REFERENCES "posthog_dashboard"("id") DEFERRABLE INITIALLY DEFERRED; -- existing-table-constraint-ignore\n                    SET CONSTRAINTS "posthog_annotation_dashboard_id_91ef4125_fk_posthog_d" IMMEDIATE; -- existing-table-constraint-ignore\n                    ',
                    reverse_sql='\n                        ALTER TABLE "posthog_annotation" DROP COLUMN IF EXISTS "dashboard_id";\n                    ',
                ),
                migrations.RunSQL(
                    sql='\n                    CREATE INDEX "posthog_annotation_dashboard_id_91ef4125" ON "posthog_annotation" ("dashboard_id");\n                    ',
                    reverse_sql='\n                        DROP INDEX IF EXISTS "posthog_annotation_dashboard_id_91ef4125";\n                    ',
                ),
            ],
            state_operations=[
                migrations.AddField(
                    model_name="annotation",
                    name="dashboard",
                    field=models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to="posthog.dashboard"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="OrganizationMembership",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=posthog.models.utils.UUIDT, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("level", models.PositiveSmallIntegerField(choices=[(1, "member"), (8, "administrator")], default=1)),
                ("joined_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "organization",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="memberships",
                        related_query_name="membership",
                        to="posthog.organization",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="organization_memberships",
                        related_query_name="organization_membership",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="organization",
            name="members",
            field=models.ManyToManyField(
                related_name="organizations",
                related_query_name="organization",
                through="posthog.OrganizationMembership",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="organization",
            name="available_features",
            field=django.contrib.postgres.fields.ArrayField(
                base_field=models.CharField(max_length=64), blank=True, default=list, size=None
            ),
        ),
        migrations.CreateModel(
            name="OrganizationInvite",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=posthog.models.utils.UUIDT, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("target_email", models.EmailField(db_index=True, max_length=254, null=True)),
                ("first_name", models.CharField(blank=True, default="", max_length=30)),
                ("emailing_attempt_made", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("message", models.TextField(blank=True, null=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="organization_invites",
                        related_query_name="organization_invite",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "organization",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="invites",
                        related_query_name="invite",
                        to="posthog.organization",
                    ),
                ),
                (
                    "level",
                    models.PositiveSmallIntegerField(
                        choices=[(1, "member"), (8, "administrator"), (15, "owner")], default=1
                    ),
                ),
                (
                    "private_project_access",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="List of team IDs and corresponding access levels to private projects.",
                        null=True,
                        validators=[posthog.models.organization_invite.validate_private_project_access],
                    ),
                ),
            ],
        ),
        migrations.AddConstraint(
            model_name="organizationmembership",
            constraint=models.UniqueConstraint(
                fields=("organization_id", "user_id"), name="unique_organization_membership"
            ),
        ),
        migrations.AlterField(
            model_name="personalapikey",
            name="team",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="personal_api_keys+",
                to="posthog.team",
            ),
        ),
        migrations.CreateModel(
            name="MessagingRecord",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=posthog.models.utils.UUIDT, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("email_hash", models.CharField(max_length=1024)),
                ("campaign_key", models.CharField(max_length=128)),
                ("sent_at", models.DateTimeField(null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "unique_together": {("email_hash", "campaign_key")},
            },
        ),
        migrations.CreateModel(
            name="SessionRecordingEvent",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("timestamp", models.DateTimeField(blank=True, default=django.utils.timezone.now)),
                ("distinct_id", models.CharField(max_length=200)),
                ("session_id", models.CharField(max_length=200)),
                ("window_id", models.CharField(blank=True, max_length=200, null=True)),
                ("snapshot_data", django.contrib.postgres.fields.jsonb.JSONField(default=dict)),
                ("team", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.team")),
            ],
        ),
        migrations.AddIndex(
            model_name="sessionrecordingevent",
            index=models.Index(fields=["team_id", "session_id"], name="posthog_ses_team_id_265946_idx"),
        ),
        migrations.AddIndex(
            model_name="sessionrecordingevent",
            index=models.Index(
                fields=["team_id", "distinct_id", "timestamp", "session_id"], name="posthog_ses_team_id_46392f_idx"
            ),
        ),
        migrations.CreateModel(
            name="Plugin",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "plugin_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("local", "local"),
                            ("custom", "custom"),
                            ("repository", "repository"),
                            ("source", "source"),
                        ],
                        default=None,
                        max_length=200,
                        null=True,
                    ),
                ),
                ("is_global", models.BooleanField(default=False)),
                ("is_preinstalled", models.BooleanField(default=False)),
                ("is_stateless", models.BooleanField(blank=True, default=False, null=True)),
                ("name", models.CharField(blank=True, max_length=200, null=True)),
                ("description", models.TextField(blank=True, null=True)),
                ("url", models.CharField(blank=True, max_length=800, null=True)),
                ("icon", models.CharField(blank=True, max_length=800, null=True)),
                ("config_schema", models.JSONField(blank=True, default=dict)),
                ("tag", models.CharField(blank=True, max_length=200, null=True)),
                ("archive", models.BinaryField(blank=True, null=True)),
                ("latest_tag", models.CharField(blank=True, max_length=800, null=True)),
                ("latest_tag_checked_at", models.DateTimeField(blank=True, null=True)),
                ("capabilities", models.JSONField(default=dict)),
                ("metrics", models.JSONField(blank=True, default=dict, null=True)),
                ("public_jobs", models.JSONField(blank=True, default=dict, null=True)),
                ("error", models.JSONField(blank=True, default=None, null=True)),
                ("from_json", models.BooleanField(default=False)),
                ("from_web", models.BooleanField(default=False)),
                ("source", models.TextField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True, default=datetime.datetime(2020, 1, 1, 0, 0))),
                ("updated_at", models.DateTimeField(blank=True, null=True)),
                ("log_level", models.IntegerField(blank=True, null=True)),
                ("has_private_access", models.ManyToManyField(to="posthog.organization")),
            ],
        ),
        migrations.AddField(
            model_name="plugin",
            name="organization",
            field=models.ForeignKey(
                default=None,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="plugins",
                related_query_name="plugin",
                to="posthog.organization",
            ),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name="plugin",
            name="organization",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="plugins",
                related_query_name="plugin",
                to="posthog.organization",
            ),
        ),
        migrations.CreateModel(
            name="PluginConfig",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("enabled", models.BooleanField(default=False)),
                ("order", models.IntegerField(blank=True, null=True)),
                ("config", django.contrib.postgres.fields.jsonb.JSONField(default=dict)),
                ("error", models.JSONField(blank=True, default=None, null=True)),
                ("web_token", models.CharField(default=None, max_length=64, null=True)),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, default=datetime.datetime(2020, 1, 1, 0, 0)),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True),
                ),
                ("plugin", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.plugin")),
                ("team", models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to="posthog.team")),
                ("deleted", models.BooleanField(default=False, null=True)),
                ("description", models.CharField(blank=True, max_length=1000, null=True)),
                ("name", models.CharField(blank=True, max_length=400, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="PluginAttachment",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("key", models.CharField(max_length=200)),
                ("content_type", models.CharField(max_length=200)),
                ("file_name", models.CharField(max_length=200)),
                ("file_size", models.IntegerField()),
                ("contents", models.BinaryField()),
                (
                    "plugin_config",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.pluginconfig"),
                ),
                ("team", models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to="posthog.team")),
            ],
        ),
        migrations.AlterField(
            model_name="organizationmembership",
            name="level",
            field=models.PositiveSmallIntegerField(
                choices=[(1, "member"), (8, "administrator"), (15, "owner")], default=1
            ),
        ),
        migrations.AddConstraint(
            model_name="organizationmembership",
            constraint=models.UniqueConstraint(
                condition=models.Q(("level", 15)), fields=("organization_id",), name="only_one_owner_per_organization"
            ),
        ),
        migrations.DeleteModel(
            name="Funnel",
        ),
        migrations.CreateModel(
            name="PluginStorage",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("key", models.CharField(max_length=200)),
                ("value", models.TextField(blank=True, null=True)),
                (
                    "plugin_config",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.pluginconfig"),
                ),
            ],
        ),
        migrations.AddConstraint(
            model_name="pluginstorage",
            constraint=models.UniqueConstraint(
                fields=("plugin_config_id", "key"), name="posthog_unique_plugin_storage_key"
            ),
        ),
        migrations.CreateModel(
            name="SessionsFilter",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(blank=True, max_length=400)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("filters", django.contrib.postgres.fields.jsonb.JSONField(default=dict)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL
                    ),
                ),
                ("team", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.team")),
            ],
        ),
        migrations.AddIndex(
            model_name="sessionsfilter",
            index=models.Index(fields=["team_id", "name"], name="posthog_ses_team_id_453d24_idx"),
        ),
        migrations.CreateModel(
            name="SessionRecordingViewed",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("session_id", models.CharField(max_length=200)),
                ("team", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.team")),
                ("user", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddIndex(
            model_name="sessionrecordingviewed",
            index=models.Index(fields=["team_id", "user_id", "session_id"], name="posthog_ses_team_id_465af1_idx"),
        ),
        migrations.AlterUniqueTogether(
            name="sessionrecordingviewed",
            unique_together={("team_id", "user_id", "session_id")},
        ),
        migrations.AlterField(
            model_name="pluginconfig",
            name="order",
            field=models.IntegerField(default=0),
            preserve_default=False,
        ),
        migrations.RunSQL(
            sql="CREATE INDEX IF NOT EXISTS posthog_person_email ON posthog_person((properties->>'email'));",
            reverse_sql='DROP INDEX "posthog_person_email";',
        ),
        migrations.AlterField(
            model_name="pluginattachment",
            name="plugin_config",
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to="posthog.pluginconfig"),
        ),
        migrations.AlterField(
            model_name="featureflag",
            name="name",
            field=models.TextField(blank=True),
        ),
        migrations.AlterField(
            model_name="element",
            name="attributes",
            field=models.JSONField(default=dict),
        ),
        migrations.AlterField(
            model_name="event",
            name="elements",
            field=models.JSONField(blank=True, default=list, null=True),
        ),
        migrations.AlterField(
            model_name="event",
            name="properties",
            field=models.JSONField(default=dict),
        ),
        migrations.AlterField(
            model_name="featureflag",
            name="filters",
            field=models.JSONField(default=dict),
        ),
        migrations.AlterField(
            model_name="pluginconfig",
            name="config",
            field=models.JSONField(default=dict),
        ),
        migrations.AlterField(
            model_name="pluginconfig",
            name="error",
            field=models.JSONField(default=None, null=True),
        ),
        migrations.AlterField(
            model_name="sessionrecordingevent",
            name="snapshot_data",
            field=models.JSONField(default=dict),
        ),
        migrations.AlterField(
            model_name="sessionsfilter",
            name="filters",
            field=models.JSONField(default=dict),
        ),
        migrations.CreateModel(
            name="PropertyDefinition",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=posthog.models.utils.UUIDT, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("name", models.CharField(max_length=400)),
                ("is_numerical", models.BooleanField(default=False)),
                ("query_usage_30_day", models.IntegerField(default=None, null=True)),
                (
                    "property_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("DateTime", "DateTime"),
                            ("String", "String"),
                            ("Numeric", "Numeric"),
                            ("Boolean", "Boolean"),
                        ],
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "property_type_format",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("unix_timestamp", "Unix Timestamp"),
                            ("YYYY-MM-DD hh:mm:ss", "YYYY-MM-DD hh:mm:ss"),
                            ("YYYY-MM-DD", "YYYY-MM-DD"),
                        ],
                        max_length=50,
                        null=True,
                    ),
                ),
                ("volume_30_day", models.IntegerField(default=None, null=True)),
                (
                    "team",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="property_definitions",
                        related_query_name="team",
                        to="posthog.team",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="EventDefinition",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=posthog.models.utils.UUIDT, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("name", models.CharField(max_length=400)),
                (
                    "created_at",
                    models.DateTimeField(default=django.utils.timezone.now, null=True),
                ),
                (
                    "last_seen_at",
                    models.DateTimeField(default=None, null=True),
                ),
                ("volume_30_day", models.IntegerField(default=None, null=True)),
                ("query_usage_30_day", models.IntegerField(default=None, null=True)),
                (
                    "team",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="event_definitions",
                        related_query_name="team",
                        to="posthog.team",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="PluginLogEntry",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=posthog.models.utils.UUIDT, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("timestamp", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "source",
                    models.CharField(
                        choices=[("SYSTEM", "system"), ("PLUGIN", "plugin"), ("CONSOLE", "console")], max_length=20
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("DEBUG", "debug"),
                            ("LOG", "log"),
                            ("INFO", "info"),
                            ("WARN", "warn"),
                            ("ERROR", "error"),
                        ],
                        max_length=20,
                    ),
                ),
                ("message", models.TextField(db_index=True)),
                ("instance_id", models.UUIDField()),
                ("plugin", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.plugin")),
                (
                    "plugin_config",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.pluginconfig"),
                ),
                ("team", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.team")),
            ],
        ),
        migrations.AddIndex(
            model_name="pluginlogentry",
            index=models.Index(fields=["plugin_config_id", "timestamp"], name="posthog_plu_plugin__736133_idx"),
        ),
        migrations.AlterField(
            model_name="element",
            name="attr_id",
            field=models.CharField(blank=True, max_length=10000, null=True),
        ),
        migrations.AlterField(
            model_name="element",
            name="href",
            field=models.CharField(blank=True, max_length=10000, null=True),
        ),
        migrations.AlterField(
            model_name="element",
            name="tag_name",
            field=models.CharField(blank=True, max_length=1000, null=True),
        ),
        migrations.AlterField(
            model_name="element",
            name="text",
            field=models.CharField(blank=True, max_length=10000, null=True),
        ),
        migrations.AlterField(
            model_name="personalapikey",
            name="value",
            field=models.CharField(
                default=posthog.models.utils.generate_random_token_personal, editable=False, max_length=50, unique=True
            ),
        ),
        django.contrib.postgres.operations.TrigramExtension(),
        migrations.AddIndex(
            model_name="eventdefinition",
            index=django.contrib.postgres.indexes.GinIndex(
                fields=["name"], name="index_event_definition_name", opclasses=["gin_trgm_ops"]
            ),
        ),
        migrations.AddIndex(
            model_name="propertydefinition",
            index=django.contrib.postgres.indexes.GinIndex(
                fields=["name"], name="index_property_definition_name", opclasses=["gin_trgm_ops"]
            ),
        ),
        migrations.RunSQL(
            sql=[
                "SET statement_timeout = 600000000;",
                "CREATE INDEX IF NOT EXISTS posthog_per_team_id_bec4e5_idx ON posthog_person(team_id, id DESC);",
            ],
            reverse_sql='DROP INDEX "posthog_per_team_id_bec4e5_idx";',
        ),
        migrations.CreateModel(
            name="FeatureFlagOverride",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("override_value", models.JSONField()),
                (
                    "feature_flag",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.featureflag"),
                ),
                ("team", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.team")),
                ("user", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddConstraint(
            model_name="featureflagoverride",
            constraint=models.UniqueConstraint(
                fields=("user", "feature_flag", "team"), name="unique feature flag for a user/team combo"
            ),
        ),
        migrations.RenameModel(
            old_name="DashboardItem",
            new_name="Insight",
        ),
        migrations.CreateModel(
            name="GroupTypeMapping",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("group_type", models.CharField(max_length=400)),
                ("group_type_index", models.IntegerField()),
                ("name_singular", models.CharField(blank=True, max_length=400, null=True)),
                ("name_plural", models.CharField(blank=True, max_length=400, null=True)),
                ("team", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.team")),
            ],
        ),
        migrations.AddConstraint(
            model_name="grouptypemapping",
            constraint=models.UniqueConstraint(fields=("team", "group_type"), name="unique group types for team"),
        ),
        migrations.AddConstraint(
            model_name="grouptypemapping",
            constraint=models.UniqueConstraint(
                fields=("team", "group_type_index"), name="unique event column indexes for team"
            ),
        ),
        migrations.AddConstraint(
            model_name="grouptypemapping",
            constraint=models.CheckConstraint(
                check=models.Q(("group_type_index__lte", 5)), name="group_type_index is less than or equal 5"
            ),
        ),
        migrations.CreateModel(
            name="Group",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("group_key", models.CharField(max_length=400)),
                ("group_type_index", models.IntegerField()),
                ("group_properties", models.JSONField(default=dict)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("properties_last_updated_at", models.JSONField(default=dict)),
                ("properties_last_operation", models.JSONField(default=dict)),
                ("version", models.BigIntegerField()),
                ("team", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.team")),
            ],
        ),
        migrations.AddConstraint(
            model_name="group",
            constraint=models.UniqueConstraint(
                fields=("team_id", "group_key", "group_type_index"),
                name="unique team_id/group_key/group_type_index combo",
            ),
        ),
        migrations.DeleteModel(
            name="SessionsFilter",
        ),
        migrations.CreateModel(
            name="SpecialMigration",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("name", models.CharField(max_length=50)),
                ("description", models.CharField(blank=True, max_length=400, null=True)),
                ("progress", models.PositiveSmallIntegerField(default=0)),
                ("status", models.PositiveSmallIntegerField(default=0)),
                ("current_operation_index", models.PositiveSmallIntegerField(default=0)),
                ("current_query_id", models.CharField(default="", max_length=100)),
                ("celery_task_id", models.CharField(default="", max_length=100)),
                ("started_at", models.DateTimeField(blank=True, null=True)),
                ("finished_at", models.DateTimeField(blank=True, null=True)),
                ("last_error", models.TextField(blank=True, null=True)),
                ("posthog_min_version", models.CharField(blank=True, max_length=20, null=True)),
                ("posthog_max_version", models.CharField(blank=True, max_length=20, null=True)),
            ],
        ),
        migrations.AddConstraint(
            model_name="specialmigration",
            constraint=models.UniqueConstraint(fields=("name",), name="unique name"),
        ),
        migrations.CreateModel(
            name="Experiment",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=400)),
                ("description", models.CharField(blank=True, max_length=400, null=True)),
                ("filters", models.JSONField(default=dict)),
                ("parameters", models.JSONField(default=dict, null=True)),
                (
                    "secondary_metrics",
                    models.JSONField(default=list, null=True),
                ),
                ("start_date", models.DateTimeField(null=True)),
                ("end_date", models.DateTimeField(null=True)),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "archived",
                    models.BooleanField(default=False),
                ),
                (
                    "created_by",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
                ),
                (
                    "feature_flag",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.featureflag"),
                ),
                ("team", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.team")),
            ],
        ),
        migrations.RenameModel(
            old_name="SpecialMigration",
            new_name="AsyncMigration",
        ),
        migrations.CreateModel(
            name="EventProperty",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("event", models.CharField(max_length=400)),
                ("property", models.CharField(max_length=400)),
                ("team", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.team")),
            ],
        ),
        migrations.AddIndex(
            model_name="eventproperty",
            index=models.Index(fields=["team", "event"], name="posthog_eve_team_id_22de03_idx"),
        ),
        migrations.AddIndex(
            model_name="eventproperty",
            index=models.Index(fields=["team", "property"], name="posthog_eve_team_id_26dbfb_idx"),
        ),
        migrations.AddConstraint(
            model_name="propertydefinition",
            constraint=models.CheckConstraint(
                check=models.Q(
                    models.Q(
                        ("property_type__in", ["DateTime", "String", "Numeric", "Boolean"]),
                        ("property_type_format__in", ["unix_timestamp", "YYYY-MM-DD hh:mm:ss", "YYYY-MM-DD"]),
                    )
                ),
                name="property_type_and_format_are_valid",
            ),
        ),
        migrations.RunSQL(
            sql="\n        update posthog_propertydefinition\n        set property_type = 'DateTime', property_type_format='unix_timestamp'\n        where name = '$time'\n            ",
            reverse_sql="\n                    update posthog_propertydefinition\n        set property_type = null, property_type_format=null\n        where name = '$time'\n                    ",
        ),
        migrations.RemoveConstraint(
            model_name="propertydefinition",
            name="property_type_and_format_are_valid",
        ),
        migrations.AlterField(
            model_name="propertydefinition",
            name="property_type_format",
            field=models.CharField(
                blank=True,
                choices=[
                    ("unix_timestamp", "Unix Timestamp in seconds"),
                    ("unix_timestamp_milliseconds", "Unix Timestamp in milliseconds"),
                    ("YYYY-MM-DDThh:mm:ssZ", "YYYY-MM-DDThh:mm:ssZ"),
                    ("YYYY-MM-DD hh:mm:ss", "YYYY-MM-DD hh:mm:ss"),
                    ("DD-MM-YYYY hh:mm:ss", "DD-MM-YYYY hh:mm:ss"),
                    ("YYYY-MM-DD", "YYYY-MM-DD"),
                    ("rfc_822", "day, DD MMM YYYY hh:mm:ss TZ"),
                    ("YYYY/MM/DD hh:mm:ss", "YYYY/MM/DD hh:mm:ss"),
                    ("DD/MM/YYYY hh:mm:ss", "DD/MM/YYYY hh:mm:ss"),
                ],
                max_length=50,
                null=True,
            ),
        ),
        migrations.AddConstraint(
            model_name="propertydefinition",
            constraint=models.CheckConstraint(
                check=models.Q(
                    models.Q(
                        ("property_type__in", ["DateTime", "String", "Numeric", "Boolean"]),
                        (
                            "property_type_format__in",
                            [
                                "unix_timestamp",
                                "unix_timestamp_milliseconds",
                                "YYYY-MM-DDThh:mm:ssZ",
                                "YYYY-MM-DD hh:mm:ss",
                                "DD-MM-YYYY hh:mm:ss",
                                "YYYY-MM-DD",
                                "rfc_822",
                                "YYYY/MM/DD hh:mm:ss",
                                "DD/MM/YYYY hh:mm:ss",
                            ],
                        ),
                    )
                ),
                name="property_type_and_format_are_valid",
            ),
        ),
        migrations.RemoveField(
            model_name="asyncmigration",
            name="last_error",
        ),
        migrations.CreateModel(
            name="AsyncMigrationError",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("description", models.CharField(max_length=400)),
                (
                    "async_migration",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.asyncmigration"),
                ),
            ],
        ),
        migrations.RemoveConstraint(
            model_name="propertydefinition",
            name="property_type_and_format_are_valid",
        ),
        migrations.AddConstraint(
            model_name="propertydefinition",
            constraint=models.CheckConstraint(
                check=models.Q(("property_type__in", ["DateTime", "String", "Numeric", "Boolean"])),
                name="property_type_is_valid",
            ),
        ),
        migrations.CreateModel(
            name="Tag",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=posthog.models.utils.UUIDT, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("team", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.team")),
            ],
        ),
        migrations.CreateModel(
            name="TaggedItem",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=posthog.models.utils.UUIDT, editable=False, primary_key=True, serialize=False
                    ),
                ),
                (
                    "action",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tagged_items",
                        to="posthog.action",
                    ),
                ),
                (
                    "dashboard",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tagged_items",
                        to="posthog.dashboard",
                    ),
                ),
                (
                    "event_definition",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tagged_items",
                        to="posthog.eventdefinition",
                    ),
                ),
                (
                    "insight",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tagged_items",
                        to="posthog.insight",
                    ),
                ),
                (
                    "property_definition",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tagged_items",
                        to="posthog.propertydefinition",
                    ),
                ),
                (
                    "tag",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="tagged_items", to="posthog.tag"
                    ),
                ),
            ],
        ),
        migrations.AlterUniqueTogether(
            name="taggeditem",
            unique_together={("tag", "action")},
        ),
        migrations.AlterUniqueTogether(
            name="tag",
            unique_together={("name", "team")},
        ),
        migrations.RunSQL(
            sql="DROP FUNCTION IF EXISTS update_person_props, should_update_person_props",
        ),
        migrations.AlterField(
            model_name="asyncmigrationerror",
            name="description",
            field=models.TextField(),
        ),
        migrations.AlterUniqueTogether(
            name="taggeditem",
            unique_together={("tag", "dashboard", "insight", "event_definition", "property_definition", "action")},
        ),
        migrations.RunSQL(
            sql='\n                DELETE FROM "posthog_taggeditem" T1\n                    USING   "posthog_taggeditem" T2\n                WHERE\n                    (T1.ctid < T2.ctid AND T1.tag_id = T2.tag_id AND T1.insight_id  = T2.insight_id) OR\n                    (T1.ctid < T2.ctid AND T1.tag_id = T2.tag_id AND T1.dashboard_id  = T2.dashboard_id) OR\n                    (T1.ctid < T2.ctid AND T1.tag_id = T2.tag_id AND T1.event_definition_id  = T2.event_definition_id) OR\n                    (T1.ctid < T2.ctid AND T1.tag_id = T2.tag_id AND T1.property_definition_id  = T2.property_definition_id) OR\n                    (T1.ctid < T2.ctid AND T1.tag_id = T2.tag_id AND T1.action_id  = T2.action_id);\n            ',
            reverse_sql="",
        ),
        migrations.RunSQL(
            sql='\n                CREATE UNIQUE INDEX "unique_dashboard_tagged_item" ON "posthog_taggeditem" ("tag_id", "dashboard_id")\n                WHERE "dashboard_id" is NOT NULL\n            ',
            reverse_sql='\n                DROP INDEX IF EXISTS\n                "unique_dashboard_tagged_item";\n            ',
            state_operations=[
                migrations.AddConstraint(
                    model_name="taggeditem",
                    constraint=models.UniqueConstraint(
                        condition=models.Q(("dashboard__isnull", False)),
                        fields=("tag", "dashboard"),
                        name="unique_dashboard_tagged_item",
                    ),
                )
            ],
        ),
        migrations.RunSQL(
            sql='\n                CREATE UNIQUE INDEX "unique_insight_tagged_item" ON "posthog_taggeditem" ("tag_id", "insight_id")\n                WHERE "insight_id" is NOT NULL\n            ',
            reverse_sql='\n                DROP INDEX IF EXISTS\n                "unique_insight_tagged_item";\n            ',
            state_operations=[
                migrations.AddConstraint(
                    model_name="taggeditem",
                    constraint=models.UniqueConstraint(
                        condition=models.Q(("insight__isnull", False)),
                        fields=("tag", "insight"),
                        name="unique_insight_tagged_item",
                    ),
                )
            ],
        ),
        migrations.RunSQL(
            sql='\n                CREATE UNIQUE INDEX "unique_event_definition_tagged_item" ON "posthog_taggeditem" ("tag_id", "event_definition_id")\n                WHERE "event_definition_id" is NOT NULL\n            ',
            reverse_sql='\n                DROP INDEX IF EXISTS\n                "unique_event_definition_tagged_item"\n            ',
            state_operations=[
                migrations.AddConstraint(
                    model_name="taggeditem",
                    constraint=models.UniqueConstraint(
                        condition=models.Q(("event_definition__isnull", False)),
                        fields=("tag", "event_definition"),
                        name="unique_event_definition_tagged_item",
                    ),
                )
            ],
        ),
        migrations.RunSQL(
            sql='\n                CREATE UNIQUE INDEX "unique_property_definition_tagged_item" ON "posthog_taggeditem" ("tag_id", "property_definition_id")\n                WHERE "property_definition_id" is NOT NULL\n            ',
            reverse_sql='\n                DROP INDEX IF EXISTS\n                "unique_property_definition_tagged_item";\n            ',
            state_operations=[
                migrations.AddConstraint(
                    model_name="taggeditem",
                    constraint=models.UniqueConstraint(
                        condition=models.Q(("property_definition__isnull", False)),
                        fields=("tag", "property_definition"),
                        name="unique_property_definition_tagged_item",
                    ),
                )
            ],
        ),
        migrations.RunSQL(
            sql='\n                CREATE UNIQUE INDEX "unique_action_tagged_item" ON "posthog_taggeditem" ("tag_id", "action_id")\n                WHERE "action_id" is NOT NULL\n            ',
            reverse_sql='\n                DROP INDEX IF EXISTS\n                "unique_action_tagged_item";\n            ',
            state_operations=[
                migrations.AddConstraint(
                    model_name="taggeditem",
                    constraint=models.UniqueConstraint(
                        condition=models.Q(("action__isnull", False)),
                        fields=("tag", "action"),
                        name="unique_action_tagged_item",
                    ),
                )
            ],
        ),
        migrations.CreateModel(
            name="ActivityLog",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=posthog.models.utils.UUIDT, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("team_id", models.PositiveIntegerField(null=True)),
                ("organization_id", models.UUIDField(null=True)),
                (
                    "is_system",
                    models.BooleanField(null=True),
                ),
                ("activity", models.CharField(max_length=79)),
                ("item_id", models.CharField(max_length=72, null=True)),
                ("scope", models.CharField(max_length=79)),
                (
                    "detail",
                    models.JSONField(
                        encoder=posthog.models.activity_logging.activity_log.ActivityDetailEncoder, null=True
                    ),
                ),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "user",
                    models.ForeignKey(
                        null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
        ),
        migrations.AddIndex(
            model_name="activitylog",
            index=models.Index(fields=["team_id", "scope", "item_id"], name="posthog_act_team_id_13a0a8_idx"),
        ),
        migrations.AddConstraint(
            model_name="activitylog",
            constraint=models.CheckConstraint(
                check=models.Q(("team_id__isnull", False), ("organization_id__isnull", False), _connector="OR"),
                name="must_have_team_or_organization_id",
            ),
        ),
        migrations.CreateModel(
            name="OrganizationDomain",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=posthog.models.utils.UUIDT, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("domain", models.CharField(max_length=128, unique=True)),
                (
                    "verification_challenge",
                    models.CharField(
                        default=posthog.models.organization_domain.generate_verification_challenge, max_length=128
                    ),
                ),
                ("verified_at", models.DateTimeField(blank=True, default=None, null=True)),
                ("last_verification_retry", models.DateTimeField(blank=True, default=None, null=True)),
                ("jit_provisioning_enabled", models.BooleanField(default=False)),
                ("sso_enforcement", models.CharField(blank=True, max_length=28)),
                ("saml_entity_id", models.CharField(blank=True, max_length=512, null=True)),
                ("saml_acs_url", models.CharField(blank=True, max_length=512, null=True)),
                ("saml_x509_cert", models.TextField(blank=True, null=True)),
                (
                    "organization",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="domains", to="posthog.organization"
                    ),
                ),
            ],
            options={
                "abstract": False,
                "verbose_name": "domain",
            },
        ),
        migrations.CreateModel(
            name="InsightViewed",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("last_viewed_at", models.DateTimeField()),
                ("insight", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.insight")),
                ("team", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.team")),
                ("user", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddIndex(
            model_name="insightviewed",
            index=models.Index(fields=["team_id", "user_id", "-last_viewed_at"], name="posthog_ins_team_id_339ee0_idx"),
        ),
        migrations.AddConstraint(
            model_name="insightviewed",
            constraint=models.UniqueConstraint(fields=("team", "user", "insight"), name="posthog_unique_insightviewed"),
        ),
        migrations.CreateModel(
            name="PluginSourceFile",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=posthog.models.utils.UUIDT, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("filename", models.CharField(max_length=200)),
                ("source", models.TextField(blank=True, null=True)),
                (
                    "status",
                    models.CharField(
                        choices=[("LOCKED", "locked"), ("TRANSPILED", "transpiled"), ("ERROR", "error")],
                        max_length=20,
                        null=True,
                    ),
                ),
                (
                    "transpiled",
                    models.TextField(blank=True, null=True),
                ),
                (
                    "error",
                    models.TextField(blank=True, null=True),
                ),
                (
                    "updated_at",
                    models.DateTimeField(blank=True, null=True),
                ),
                ("plugin", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.plugin")),
            ],
        ),
        migrations.AddConstraint(
            model_name="pluginsourcefile",
            constraint=models.UniqueConstraint(fields=("plugin_id", "filename"), name="unique_filename_for_plugin"),
        ),
        migrations.CreateModel(
            name="ExportedAsset",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "export_format",
                    models.CharField(
                        choices=[
                            ("image/png", "image/png"),
                            ("application/pdf", "application/pdf"),
                            ("text/csv", "text/csv"),
                        ],
                        max_length=16,
                    ),
                ),
                ("content", models.BinaryField(null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "export_context",
                    models.JSONField(blank=True, null=True),
                ),
                (
                    "content_location",
                    models.TextField(blank=True, max_length=1000, null=True),
                ),
                (
                    "access_token",
                    models.CharField(
                        blank=True,
                        default=posthog.models.exported_asset.get_default_access_token,
                        max_length=400,
                        null=True,
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL
                    ),
                ),
                (
                    "dashboard",
                    models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to="posthog.dashboard"),
                ),
                (
                    "insight",
                    models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to="posthog.insight"),
                ),
                ("team", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.team")),
                (
                    "expires_after",
                    models.DateTimeField(blank=True, null=True),
                ),
            ],
        ),
        migrations.DeleteModel(
            name="PluginLogEntry",
        ),
        migrations.CreateModel(
            name="Subscription",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("title", models.CharField(blank=True, max_length=100, null=True)),
                ("target_type", models.CharField(choices=[("email", "Email")], max_length=10)),
                ("target_value", models.TextField()),
                (
                    "frequency",
                    models.CharField(
                        choices=[
                            ("daily", "Daily"),
                            ("weekly", "Weekly"),
                            ("monthly", "Monthly"),
                            ("yearly", "Yearly"),
                        ],
                        max_length=10,
                    ),
                ),
                ("interval", models.IntegerField(default=1)),
                ("count", models.IntegerField(null=True)),
                (
                    "byweekday",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(
                            choices=[
                                ("monday", "Monday"),
                                ("tuesday", "Tuesday"),
                                ("wednesday", "Wednesday"),
                                ("thursday", "Thursday"),
                                ("friday", "Friday"),
                                ("saturday", "Saturday"),
                                ("sunday", "Sunday"),
                            ],
                            max_length=10,
                        ),
                        blank=True,
                        default=None,
                        null=True,
                        size=None,
                    ),
                ),
                ("bysetpos", models.IntegerField(null=True)),
                ("start_date", models.DateTimeField()),
                ("until_date", models.DateTimeField(blank=True, null=True)),
                ("next_delivery_date", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("deleted", models.BooleanField(default=False)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL
                    ),
                ),
                (
                    "dashboard",
                    models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to="posthog.dashboard"),
                ),
                (
                    "insight",
                    models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to="posthog.insight"),
                ),
                ("team", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.team")),
            ],
        ),
        migrations.RunSQL(
            sql="DROP FUNCTION IF EXISTS should_update_person_prop",
            reverse_sql="",
        ),
        migrations.AlterField(
            model_name="subscription",
            name="target_type",
            field=models.CharField(
                choices=[("email", "Email"), ("slack", "Slack"), ("webhook", "Webhook")], max_length=10
            ),
        ),
        migrations.CreateModel(
            name="Integration",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("kind", models.CharField(choices=[("slack", "Slack")], max_length=10)),
                ("config", models.JSONField(default=dict)),
                ("sensitive_config", models.JSONField(default=dict)),
                ("errors", models.TextField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL
                    ),
                ),
                ("team", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.team")),
            ],
        ),
        migrations.CreateModel(
            name="FeatureFlagHashKeyOverride",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("feature_flag_key", models.CharField(max_length=400)),
                ("hash_key", models.CharField(max_length=400)),
                ("person", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.person")),
                ("team", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.team")),
            ],
        ),
        migrations.AddConstraint(
            model_name="featureflaghashkeyoverride",
            constraint=models.UniqueConstraint(
                fields=("team", "person", "feature_flag_key"), name="Unique hash_key for a user/team/feature_flag combo"
            ),
        ),
        migrations.CreateModel(
            name="SharingConfiguration",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("enabled", models.BooleanField(default=False)),
                (
                    "access_token",
                    models.CharField(
                        blank=True,
                        default=posthog.models.sharing_configuration.get_default_access_token,
                        max_length=400,
                        null=True,
                        unique=True,
                    ),
                ),
                (
                    "dashboard",
                    models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to="posthog.dashboard"),
                ),
                (
                    "insight",
                    models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to="posthog.insight"),
                ),
                ("team", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.team")),
            ],
        ),
        migrations.CreateModel(
            name="EventBuffer",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("event", models.JSONField(blank=True, null=True)),
                ("process_at", models.DateTimeField()),
                ("locked", models.BooleanField()),
            ],
        ),
        migrations.AddField(
            model_name="asyncmigration",
            name="parameters",
            field=models.JSONField(default=dict),
        ),
        migrations.CreateModel(
            name="PromptSequenceState",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("key", models.CharField(max_length=400)),
                ("last_updated_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("step", models.IntegerField(default=0)),
                ("completed", models.BooleanField(default=False)),
                ("dismissed", models.BooleanField(default=False)),
                ("person", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.person")),
                ("team", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.team")),
            ],
        ),
        migrations.AddConstraint(
            model_name="promptsequencestate",
            constraint=models.UniqueConstraint(
                fields=("team", "person", "key"), name="unique sequence key for person for team"
            ),
        ),
        migrations.CreateModel(
            name="UserPromptSequenceState",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("key", models.CharField(max_length=400)),
                ("last_updated_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("step", models.IntegerField(default=0)),
                ("completed", models.BooleanField(default=False)),
                ("dismissed", models.BooleanField(default=False)),
                ("user", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddConstraint(
            model_name="userpromptsequencestate",
            constraint=models.UniqueConstraint(fields=("user", "key"), name="unique sequence key for user"),
        ),
        migrations.CreateModel(
            name="AsyncDeletion",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("deletion_type", models.PositiveSmallIntegerField()),
                ("team_id", models.IntegerField()),
                ("key", models.CharField(max_length=400)),
                ("group_type_index", models.IntegerField(null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("delete_verified_at", models.DateTimeField(blank=True, null=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
        ),
        migrations.AddIndex(
            model_name="asyncdeletion",
            index=models.Index(fields=["delete_verified_at"], name="delete_verified_at index"),
        ),
        migrations.AddConstraint(
            model_name="asyncdeletion",
            constraint=models.UniqueConstraint(
                condition=models.Q(("group_type_index__isnull", True)),
                fields=("deletion_type", "key"),
                name="unique deletion",
            ),
        ),
        migrations.AddConstraint(
            model_name="asyncdeletion",
            constraint=models.UniqueConstraint(
                fields=("deletion_type", "key", "group_type_index"), name="unique deletion for groups"
            ),
        ),
        migrations.AlterField(
            model_name="personalapikey",
            name="value",
            field=models.CharField(blank=True, editable=False, max_length=50, null=True, unique=True),
        ),
        migrations.CreateModel(
            name="NotificationViewed",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=posthog.models.utils.UUIDT, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("last_viewed_activity_date", models.DateTimeField(default=None)),
                (
                    "user",
                    models.ForeignKey(
                        null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
        ),
        migrations.AddConstraint(
            model_name="notificationviewed",
            constraint=models.UniqueConstraint(fields=("user",), name="posthog_user_unique_viewed_date"),
        ),
        migrations.AddIndex(
            model_name="pluginconfig",
            index=models.Index(fields=["web_token"], name="posthog_plu_web_tok_ac760a_idx"),
        ),
        migrations.AddIndex(
            model_name="pluginconfig",
            index=models.Index(fields=["enabled"], name="posthog_plu_enabled_f5ed94_idx"),
        ),
        migrations.CreateModel(
            name="Text",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("body", models.CharField(blank=True, max_length=4000, null=True)),
                ("last_modified_at", models.DateTimeField(default=django.utils.timezone.now)),
            ],
        ),
        migrations.AddField(
            model_name="text",
            name="created_by",
            field=models.ForeignKey(
                blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AddField(
            model_name="text",
            name="last_modified_by",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="modified_text_tiles",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="text",
            name="team",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.team"),
        ),
        migrations.CreateModel(
            name="DashboardTile",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("layouts", models.JSONField(default=dict)),
                ("color", models.CharField(blank=True, max_length=400, null=True)),
                ("filters_hash", models.CharField(blank=True, max_length=400, null=True)),
                ("last_refresh", models.DateTimeField(blank=True, null=True)),
                ("refreshing", models.BooleanField(null=True)),
                ("refresh_attempt", models.IntegerField(blank=True, null=True)),
                ("deleted", models.BooleanField(blank=True, null=True)),
                (
                    "dashboard",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="tiles", to="posthog.dashboard"
                    ),
                ),
                (
                    "insight",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="dashboard_tiles",
                        to="posthog.insight",
                    ),
                ),
                (
                    "text",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="dashboard_tiles",
                        to="posthog.text",
                    ),
                ),
            ],
        ),
        migrations.AddConstraint(
            model_name="dashboardtile",
            constraint=models.UniqueConstraint(
                condition=models.Q(("insight__isnull", False)),
                fields=("dashboard", "insight"),
                name="unique_dashboard_insight",
            ),
        ),
        migrations.AddConstraint(
            model_name="dashboardtile",
            constraint=models.UniqueConstraint(
                condition=models.Q(("text__isnull", False)), fields=("dashboard", "text"), name="unique_dashboard_text"
            ),
        ),
        migrations.AddConstraint(
            model_name="dashboardtile",
            constraint=models.CheckConstraint(
                check=models.Q(
                    models.Q(("insight__isnull", False), ("text__isnull", True)),
                    models.Q(("insight__isnull", True), ("text__isnull", False)),
                    _connector="OR",
                ),
                name="dash_tile_exactly_one_related_object",
            ),
        ),
        migrations.AddIndex(
            model_name="dashboardtile",
            index=models.Index(fields=["filters_hash"], name="query_by_filters_hash_idx"),
        ),
        migrations.AddField(
            model_name="dashboard",
            name="insights",
            field=models.ManyToManyField(
                blank=True, related_name="dashboards", through="posthog.DashboardTile", to="posthog.insight"
            ),
        ),
        migrations.DeleteModel(
            name="PromptSequenceState",
        ),
        migrations.CreateModel(
            name="SessionRecordingPlaylist",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("short_id", models.CharField(blank=True, default=posthog.utils.generate_short_id, max_length=12)),
                ("name", models.CharField(blank=True, max_length=400, null=True)),
                ("derived_name", models.CharField(blank=True, max_length=400, null=True)),
                ("description", models.TextField(blank=True)),
                ("pinned", models.BooleanField(default=False)),
                ("deleted", models.BooleanField(default=False)),
                ("filters", models.JSONField(default=dict)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("last_modified_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("is_static", models.BooleanField(default=False)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL
                    ),
                ),
                (
                    "last_modified_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="modified_recordings",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                ("team", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.team")),
            ],
            options={
                "unique_together": {("team", "short_id")},
            },
        ),
        migrations.CreateModel(
            name="SessionRecordingPlaylistItem",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("session_id", models.CharField(max_length=200)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("deleted", models.BooleanField(blank=True, null=True)),
                (
                    "playlist",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="playlist_items",
                        to="posthog.sessionrecordingplaylist",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="InsightCachingState",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=posthog.models.utils.UUIDT, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("cache_key", models.CharField(max_length=400)),
                ("target_cache_age_seconds", models.IntegerField(null=True)),
                ("last_refresh", models.DateTimeField(blank=True, null=True)),
                ("last_refresh_queued_at", models.DateTimeField(blank=True, null=True)),
                ("refresh_attempt", models.IntegerField(default=0)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "dashboard_tile",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="caching_state",
                        to="posthog.dashboardtile",
                    ),
                ),
                (
                    "insight",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="caching_state", to="posthog.insight"
                    ),
                ),
                ("team", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.team")),
            ],
        ),
        migrations.AddIndex(
            model_name="insightcachingstate",
            index=models.Index(fields=["cache_key"], name="filter_by_cache_key_idx"),
        ),
        migrations.AddConstraint(
            model_name="insightcachingstate",
            constraint=models.UniqueConstraint(
                condition=models.Q(("insight__isnull", False)),
                fields=("insight",),
                name="unique_insight_for_caching_state_idx",
            ),
        ),
        migrations.AddConstraint(
            model_name="insightcachingstate",
            constraint=models.UniqueConstraint(
                condition=models.Q(("dashboard_tile__isnull", False)),
                fields=("insight", "dashboard_tile"),
                name="unique_dashboard_tile_idx",
            ),
        ),
        migrations.RemoveConstraint(
            model_name="insightcachingstate",
            name="unique_insight_for_caching_state_idx",
        ),
        migrations.AddConstraint(
            model_name="insightcachingstate",
            constraint=models.UniqueConstraint(
                condition=models.Q(("dashboard_tile__isnull", True)),
                fields=("insight",),
                name="unique_insight_for_caching_state_idx",
            ),
        ),
        migrations.AlterField(
            model_name="insightcachingstate",
            name="dashboard_tile",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="caching_states",
                to="posthog.dashboardtile",
            ),
        ),
        migrations.AlterField(
            model_name="insightcachingstate",
            name="insight",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, related_name="caching_states", to="posthog.insight"
            ),
        ),
        migrations.CreateModel(
            name="Prompt",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("step", models.IntegerField()),
                ("type", models.CharField(max_length=200)),
                ("title", models.CharField(max_length=200)),
                ("text", models.CharField(max_length=1000)),
                ("placement", models.CharField(default="top", max_length=200)),
                ("buttons", models.JSONField()),
                ("reference", models.CharField(default=None, max_length=200, null=True)),
                ("icon", models.CharField(max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name="PromptSequence",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("key", models.CharField(max_length=200)),
                ("type", models.CharField(max_length=200)),
                (
                    "path_match",
                    django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=200), size=None),
                ),
                (
                    "path_exclude",
                    django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=200), size=None),
                ),
                ("status", models.CharField(max_length=200)),
                ("requires_opt_in", models.BooleanField(default=False)),
                ("autorun", models.BooleanField(default=True)),
                ("must_have_completed", models.ManyToManyField(blank=True, to="posthog.promptsequence")),
                ("prompts", models.ManyToManyField(to="posthog.prompt")),
            ],
        ),
        migrations.CreateModel(
            name="UserPromptState",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("last_updated_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("step", models.IntegerField(default=None, null=True)),
                ("completed", models.BooleanField(default=False)),
                ("dismissed", models.BooleanField(default=False)),
                (
                    "sequence",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.promptsequence"),
                ),
                ("user", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.DeleteModel(
            name="UserPromptSequenceState",
        ),
        migrations.AddConstraint(
            model_name="userpromptstate",
            constraint=models.UniqueConstraint(fields=("user", "sequence"), name="unique_user_prompt_state"),
        ),
        migrations.AddConstraint(
            model_name="promptsequence",
            constraint=models.UniqueConstraint(fields=("key",), name="unique_prompt_sequence"),
        ),
        migrations.AddConstraint(
            model_name="insightcachingstate",
            constraint=posthog.models.utils.UniqueConstraintByExpression(
                concurrently=False,
                expression="(insight_id, coalesce(dashboard_tile_id, -1))",
                name="unique_insight_tile_idx",
            ),
        ),
        migrations.RemoveConstraint(
            model_name="insightcachingstate",
            name="unique_dashboard_tile_idx",
        ),
        migrations.RemoveConstraint(
            model_name="insightcachingstate",
            name="unique_insight_for_caching_state_idx",
        ),
        migrations.RunSQL(
            sql="\n            -- not-null-ignore\n            CREATE INDEX IF NOT EXISTS posthog_insightcachingstate_lookup ON posthog_insightcachingstate (\n                last_refresh DESC NULLS LAST,\n                last_refresh_queued_at DESC NULLS LAST,\n                target_cache_age_seconds,\n                refresh_attempt,\n                team_id,\n                cache_key,\n                id\n            )\n            WHERE (target_cache_age_seconds IS NOT NULL) AND (refresh_attempt < 2)\n            ",
            reverse_sql='DROP INDEX IF EXISTS "posthog_insightcachingstate_lookup"',
        ),
        migrations.AlterField(
            model_name="sessionrecordingplaylist",
            name="last_modified_by",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="modified_playlists",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AlterField(
            model_name="sessionrecordingplaylistitem",
            name="session_id",
            field=models.CharField(blank=True, max_length=200, null=True),
        ),
        migrations.CreateModel(
            name="SessionRecording",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=posthog.models.utils.UUIDT, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("session_id", models.CharField(max_length=200, unique=True)),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("team", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.team")),
            ],
            options={
                "unique_together": {("team", "session_id")},
            },
        ),
        migrations.AddField(
            model_name="sessionrecordingplaylistitem",
            name="recording",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="playlist_items",
                to="posthog.sessionrecording",
                to_field="session_id",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="sessionrecordingplaylistitem",
            unique_together={("recording", "playlist")},
        ),
        migrations.AddField(
            model_name="sessionrecording",
            name="click_count",
            field=models.IntegerField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="sessionrecording",
            name="deleted",
            field=models.BooleanField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="sessionrecording",
            name="distinct_id",
            field=models.CharField(blank=True, max_length=400, null=True),
        ),
        migrations.AddField(
            model_name="sessionrecording",
            name="duration",
            field=models.IntegerField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="sessionrecording",
            name="end_time",
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="sessionrecording",
            name="keypress_count",
            field=models.IntegerField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="sessionrecording",
            name="object_storage_path",
            field=models.CharField(blank=True, max_length=200, null=True),
        ),
        migrations.AddField(
            model_name="sessionrecording",
            name="start_time",
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="sessionrecording",
            name="start_url",
            field=models.CharField(blank=True, max_length=512, null=True),
        ),
        migrations.AddField(
            model_name="taggeditem",
            name="feature_flag",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="tagged_items",
                to="posthog.featureflag",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="taggeditem",
            unique_together={
                ("tag", "dashboard", "insight", "event_definition", "property_definition", "action", "feature_flag")
            },
        ),
        migrations.AddConstraint(
            model_name="taggeditem",
            constraint=models.UniqueConstraint(
                condition=models.Q(("feature_flag__isnull", False)),
                fields=("tag", "feature_flag"),
                name="unique_feature_flag_tagged_item",
            ),
        ),
        migrations.AddConstraint(
            model_name="taggeditem",
            constraint=models.CheckConstraint(
                check=models.Q(
                    models.Q(
                        ("dashboard__isnull", False),
                        ("insight__isnull", True),
                        ("event_definition__isnull", True),
                        ("property_definition__isnull", True),
                        ("action__isnull", True),
                        ("feature_flag__isnull", True),
                    ),
                    models.Q(
                        ("dashboard__isnull", True),
                        ("insight__isnull", False),
                        ("event_definition__isnull", True),
                        ("property_definition__isnull", True),
                        ("action__isnull", True),
                        ("feature_flag__isnull", True),
                    ),
                    models.Q(
                        ("dashboard__isnull", True),
                        ("insight__isnull", True),
                        ("event_definition__isnull", False),
                        ("property_definition__isnull", True),
                        ("action__isnull", True),
                        ("feature_flag__isnull", True),
                    ),
                    models.Q(
                        ("dashboard__isnull", True),
                        ("insight__isnull", True),
                        ("event_definition__isnull", True),
                        ("property_definition__isnull", False),
                        ("action__isnull", True),
                        ("feature_flag__isnull", True),
                    ),
                    models.Q(
                        ("dashboard__isnull", True),
                        ("insight__isnull", True),
                        ("event_definition__isnull", True),
                        ("property_definition__isnull", True),
                        ("action__isnull", False),
                        ("feature_flag__isnull", True),
                    ),
                    models.Q(
                        ("dashboard__isnull", True),
                        ("insight__isnull", True),
                        ("event_definition__isnull", True),
                        ("property_definition__isnull", True),
                        ("action__isnull", True),
                        ("feature_flag__isnull", False),
                    ),
                    _connector="OR",
                ),
                name="exactly_one_related_object",
            ),
        ),
        migrations.CreateModel(
            name="DashboardTemplate",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=posthog.models.utils.UUIDT, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("template_name", models.CharField(max_length=400, null=True)),
                ("dashboard_description", models.CharField(max_length=400, null=True)),
                ("dashboard_filters", models.JSONField(null=True)),
                ("tiles", models.JSONField(default=list)),
                (
                    "tags",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=255), default=list, size=None
                    ),
                ),
                ("github_url", models.CharField(max_length=8201, null=True)),
                ("team", models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to="posthog.team")),
            ],
        ),
        migrations.AddConstraint(
            model_name="dashboardtemplate",
            constraint=models.UniqueConstraint(fields=("template_name", "team"), name="unique_template_name_per_team"),
        ),
        migrations.CreateModel(
            name="PersonOverride",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("old_person_id", models.UUIDField(db_index=True)),
                ("override_person_id", models.UUIDField(db_index=True)),
                ("oldest_event", models.DateTimeField()),
                ("version", models.BigIntegerField(blank=True, null=True)),
                ("team", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.team")),
            ],
        ),
        migrations.AddConstraint(
            model_name="personoverride",
            constraint=models.UniqueConstraint(
                fields=("team", "old_person_id"), name="unique override per old_person_id"
            ),
        ),
        migrations.AddField(
            model_name="propertydefinition",
            name="group_type_index",
            field=models.PositiveSmallIntegerField(null=True),
        ),
        migrations.RunSQL(
            sql='ALTER TABLE "posthog_propertydefinition" ADD COLUMN "type" smallint DEFAULT 1 NOT NULL CHECK ("type" >= 0) -- not-null-ignore',
            reverse_sql='ALTER TABLE "posthog_propertydefinition" DROP COLUMN "type"',
            state_operations=[
                migrations.AddField(
                    model_name="propertydefinition",
                    name="type",
                    field=models.PositiveSmallIntegerField(
                        choices=[(1, "event"), (2, "person"), (3, "group")], default=1
                    ),
                )
            ],
        ),
        migrations.AddConstraint(
            model_name="propertydefinition",
            constraint=models.CheckConstraint(
                check=models.Q(
                    models.Q(("type", 3), _negated=True), ("group_type_index__isnull", False), _connector="OR"
                ),
                name="group_type_index_set",
            ),
        ),
        migrations.AddConstraint(
            model_name="propertydefinition",
            constraint=posthog.models.utils.UniqueConstraintByExpression(
                concurrently=False,
                expression="(team_id, name, type, coalesce(group_type_index, -1))",
                name="posthog_propertydefinition_uniq",
            ),
        ),
        migrations.AddIndex(
            model_name="propertydefinition",
            index=models.Index(
                models.F("team_id"),
                models.F("type"),
                django.db.models.functions.comparison.Coalesce(models.F("group_type_index"), -1),
                models.OrderBy(models.F("query_usage_30_day"), descending=True, nulls_last=True),
                models.OrderBy(models.F("name")),
                name="index_property_def_query",
            ),
        ),
        migrations.RunSQL(
            sql="\n            UPDATE posthog_dashboardtemplate\n            SET team_id = NULL\n            WHERE team_id IS NOT NULL\n            -- not-null-ignore\n            ",
            reverse_sql="",
        ),
        migrations.RunSQL(
            sql='\nCREATE OR REPLACE FUNCTION is_override_person_not_used_as_old_person(team_id bigint, override_person_id uuid, old_person_id uuid)\nRETURNS BOOLEAN AS $$\n  SELECT NOT EXISTS (\n    SELECT 1\n      FROM "posthog_personoverride"\n      WHERE team_id = $1\n      AND override_person_id = $3\n    ) AND NOT EXISTS (\n        SELECT 1\n      FROM "posthog_personoverride"\n      WHERE team_id = $1\n      AND old_person_id = $2\n    );\n$$ LANGUAGE SQL;\n',
            reverse_sql="DROP FUNCTION is_override_person_not_used_as_old_person",
        ),
        migrations.AddField(
            model_name="dashboardtemplate",
            name="created_at",
            field=models.DateTimeField(auto_now_add=True, null=True),
        ),
        migrations.AddField(
            model_name="dashboardtemplate",
            name="created_by",
            field=models.ForeignKey(
                blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AddField(
            model_name="dashboardtemplate",
            name="deleted",
            field=models.BooleanField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="dashboardtemplate",
            name="image_url",
            field=models.CharField(blank=True, max_length=8201, null=True),
        ),
        migrations.AddField(
            model_name="dashboardtemplate",
            name="variables",
            field=models.JSONField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name="dashboardtemplate",
            name="dashboard_description",
            field=models.CharField(blank=True, max_length=400, null=True),
        ),
        migrations.AlterField(
            model_name="dashboardtemplate",
            name="dashboard_filters",
            field=models.JSONField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name="dashboardtemplate",
            name="tags",
            field=django.contrib.postgres.fields.ArrayField(
                base_field=models.CharField(max_length=255), blank=True, null=True, size=None
            ),
        ),
        migrations.AlterField(
            model_name="dashboardtemplate",
            name="template_name",
            field=models.CharField(blank=True, max_length=400, null=True),
        ),
        migrations.AlterField(
            model_name="dashboardtemplate",
            name="tiles",
            field=models.JSONField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="featureflag",
            name="usage_dashboard",
            field=models.ForeignKey(
                blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to="posthog.dashboard"
            ),
        ),
        migrations.CreateModel(
            name="PersonOverrideMapping",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("uuid", models.UUIDField()),
                ("team_id", models.BigIntegerField()),
            ],
        ),
        migrations.RemoveConstraint(
            model_name="personoverride",
            name="unique override per old_person_id",
        ),
        migrations.RunSQL(
            sql="DROP FUNCTION is_override_person_not_used_as_old_person",
            reverse_sql="\nCREATE OR REPLACE FUNCTION is_override_person_not_used_as_old_person(team_id bigint, override_person_id uuid, old_person_id uuid)\nRETURNS BOOLEAN AS $$\n  SELECT false;\n$$ LANGUAGE SQL;\n",
        ),
        migrations.RemoveField(
            model_name="personoverride",
            name="old_person_id",
        ),
        migrations.AddField(
            model_name="personoverride",
            name="old_person_id",
            field=models.ForeignKey(
                db_column="old_person_id",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="person_override_old",
                to="posthog.personoverridemapping",
            ),
        ),
        migrations.RemoveField(
            model_name="personoverride",
            name="override_person_id",
        ),
        migrations.AddField(
            model_name="personoverride",
            name="override_person_id",
            field=models.ForeignKey(
                db_column="override_person_id",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="person_override_override",
                to="posthog.personoverridemapping",
            ),
        ),
        migrations.AddConstraint(
            model_name="personoverride",
            constraint=models.UniqueConstraint(
                fields=("team", "old_person_id"), name="unique override per old_person_id"
            ),
        ),
        migrations.AddConstraint(
            model_name="personoverride",
            constraint=models.CheckConstraint(
                check=models.Q(("old_person_id__exact", models.F("override_person_id")), _negated=True),
                name="old_person_id_different_from_override_person_id",
            ),
        ),
        migrations.RunSQL(
            sql="CREATE EXTENSION IF NOT EXISTS btree_gist",
            reverse_sql="DROP EXTENSION btree_gist",
        ),
        migrations.RunSQL(
            sql="CREATE EXTENSION IF NOT EXISTS intarray",
            reverse_sql="DROP EXTENSION intarray",
        ),
        migrations.RunSQL(
            sql="\n            ALTER TABLE posthog_personoverride\n            ADD CONSTRAINT exclude_override_person_id_from_being_old_person_id\n            EXCLUDE USING gist((array[old_person_id, override_person_id]) WITH &&, override_person_id WITH <>)\n            DEFERRABLE\n            INITIALLY DEFERRED\n            ",
            reverse_sql="ALTER TABLE posthog_personoverride DROP CONSTRAINT exclude_override_person_id_from_being_old_person_id",
        ),
        migrations.AddConstraint(
            model_name="personoverridemapping",
            constraint=models.UniqueConstraint(fields=("team_id", "uuid"), name="unique_uuid"),
        ),
        migrations.RunPython(
            code=migration_0310_create_starter_template,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.AddField(
            model_name="dashboardtemplate",
            name="scope",
            field=models.CharField(
                blank=True, choices=[("team", "Only team"), ("global", "Global")], max_length=24, null=True
            ),
        ),
        migrations.RunSQL(
            sql="\n                UPDATE posthog_dashboardtemplate SET scope = 'global' WHERE team_id IS NULL -- not-null-ignore\n            ",
            reverse_sql="",
        ),
        migrations.RunSQL(
            sql="\n                UPDATE posthog_dashboardtemplate SET scope = 'team' WHERE team_id IS NOT NULL -- not-null-ignore\n            ",
            reverse_sql="",
        ),
        migrations.CreateModel(
            name="EarlyAccessFeature",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=posthog.models.utils.UUIDT, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True)),
                (
                    "stage",
                    models.CharField(
                        choices=[
                            ("concept", "concept"),
                            ("alpha", "alpha"),
                            ("beta", "beta"),
                            ("general-availability", "general availability"),
                        ],
                        max_length=40,
                    ),
                ),
                ("documentation_url", models.URLField(blank=True, max_length=800)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "feature_flag",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="features",
                        related_query_name="feature",
                        to="posthog.featureflag",
                    ),
                ),
                (
                    "team",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="features",
                        related_query_name="feature",
                        to="posthog.team",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="sharingconfiguration",
            name="recording",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="sharing_configurations",
                to="posthog.sessionrecording",
                to_field="session_id",
            ),
        ),
        migrations.CreateModel(
            name="Notebook",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=posthog.models.utils.UUIDT, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("short_id", models.CharField(blank=True, default=posthog.utils.generate_short_id, max_length=12)),
                ("title", models.CharField(blank=True, max_length=256, null=True)),
                ("content", models.JSONField(blank=True, default=None, null=True)),
                ("deleted", models.BooleanField(default=False)),
                ("version", models.IntegerField(default=0)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("last_modified_at", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL
                    ),
                ),
                (
                    "last_modified_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="modified_notebooks",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                ("team", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.team")),
            ],
            options={
                "unique_together": {("team", "short_id")},
            },
        ),
        migrations.CreateModel(
            name="BatchExportDestination",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=posthog.models.utils.UUIDT, editable=False, primary_key=True, serialize=False
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[("S3", "S3")],
                        help_text="A choice of supported BatchExportDestination types.",
                        max_length=64,
                    ),
                ),
                (
                    "config",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="A JSON field to store all configuration parameters required to access a BatchExportDestination.",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, help_text="The timestamp at which this BatchExportDestination was created."
                    ),
                ),
                (
                    "last_updated_at",
                    models.DateTimeField(
                        auto_now=True, help_text="The timestamp at which this BatchExportDestination was last updated."
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="BatchExport",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=posthog.models.utils.UUIDT, editable=False, primary_key=True, serialize=False
                    ),
                ),
                (
                    "team",
                    models.ForeignKey(
                        help_text="The team this belongs to.",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="posthog.team",
                    ),
                ),
                ("name", models.TextField(help_text="A human-readable name for this BatchExport.")),
                (
                    "destination",
                    models.ForeignKey(
                        help_text="The destination to export data to.",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="posthog.batchexportdestination",
                    ),
                ),
                (
                    "interval",
                    models.CharField(
                        choices=[("hour", "hour"), ("day", "day"), ("week", "week")],
                        default="hour",
                        help_text="The interval at which to export data.",
                        max_length=64,
                    ),
                ),
                ("paused", models.BooleanField(default=False, help_text="Whether this BatchExport is paused or not.")),
                (
                    "deleted",
                    models.BooleanField(default=False, help_text="Whether this BatchExport is deleted or not."),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, help_text="The timestamp at which this BatchExport was created."
                    ),
                ),
                (
                    "last_updated_at",
                    models.DateTimeField(
                        auto_now=True, help_text="The timestamp at which this BatchExport was last updated."
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="BatchExportRun",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=posthog.models.utils.UUIDT, editable=False, primary_key=True, serialize=False
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("Cancelled", "Cancelled"),
                            ("Completed", "Completed"),
                            ("ContinuedAsNew", "Continuedasnew"),
                            ("Failed", "Failed"),
                            ("Terminated", "Terminated"),
                            ("TimedOut", "Timedout"),
                            ("Running", "Running"),
                            ("Starting", "Starting"),
                        ],
                        help_text="The status of this run.",
                        max_length=64,
                    ),
                ),
                (
                    "records_completed",
                    models.IntegerField(help_text="The number of records that have been exported.", null=True),
                ),
                (
                    "latest_error",
                    models.TextField(help_text="The latest error that occurred during this run.", null=True),
                ),
                ("data_interval_start", models.DateTimeField(help_text="The start of the data interval.")),
                ("data_interval_end", models.DateTimeField(help_text="The end of the data interval.")),
                ("cursor", models.TextField(help_text="An opaque cursor that may be used to resume.", null=True)),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, help_text="The timestamp at which this BatchExportRun was created."
                    ),
                ),
                (
                    "finished_at",
                    models.DateTimeField(
                        help_text="The timestamp at which this BatchExportRun finished, successfully or not.", null=True
                    ),
                ),
                (
                    "last_updated_at",
                    models.DateTimeField(
                        auto_now=True, help_text="The timestamp at which this BatchExportRun was last updated."
                    ),
                ),
                (
                    "batch_export",
                    models.ForeignKey(
                        help_text="The BatchExport this run belongs to.",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="posthog.batchexport",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AlterField(
            model_name="earlyaccessfeature",
            name="stage",
            field=models.CharField(
                choices=[
                    ("draft", "draft"),
                    ("concept", "concept"),
                    ("alpha", "alpha"),
                    ("beta", "beta"),
                    ("general-availability", "general availability"),
                ],
                max_length=40,
            ),
        ),
        migrations.CreateModel(
            name="Survey",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=posthog.models.utils.UUIDT, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("name", models.CharField(max_length=400)),
                ("description", models.TextField(blank=True)),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("popover", "popover"),
                            ("button", "button"),
                            ("email", "email"),
                            ("full_screen", "full screen"),
                        ],
                        max_length=40,
                    ),
                ),
                ("conditions", models.JSONField(blank=True, null=True)),
                ("questions", models.JSONField(blank=True, null=True)),
                ("appearance", models.JSONField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("start_date", models.DateTimeField(null=True)),
                ("end_date", models.DateTimeField(null=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("archived", models.BooleanField(default=False)),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="surveys",
                        related_query_name="survey",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "linked_flag",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="surveys_linked_flag",
                        related_query_name="survey",
                        to="posthog.featureflag",
                    ),
                ),
                (
                    "targeting_flag",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="surveys_targeting_flag",
                        related_query_name="survey",
                        to="posthog.featureflag",
                    ),
                ),
                (
                    "team",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="surveys",
                        related_query_name="survey",
                        to="posthog.team",
                    ),
                ),
            ],
        ),
        migrations.AddConstraint(
            model_name="survey",
            constraint=models.UniqueConstraint(fields=("team", "name"), name="unique survey name for team"),
        ),
        migrations.CreateModel(
            name="FeatureFlagDashboards",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                ("dashboard", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.dashboard")),
                (
                    "feature_flag",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.featureflag"),
                ),
            ],
        ),
        migrations.AddField(
            model_name="featureflag",
            name="analytics_dashboards",
            field=models.ManyToManyField(
                related_name="analytics_dashboards",
                related_query_name="analytics_dashboard",
                through="posthog.FeatureFlagDashboards",
                to="posthog.dashboard",
            ),
        ),
        migrations.AddConstraint(
            model_name="featureflagdashboards",
            constraint=models.UniqueConstraint(
                fields=("feature_flag", "dashboard"), name="unique feature flag for a dashboard"
            ),
        ),
        migrations.AlterField(
            model_name="batchexportdestination",
            name="type",
            field=models.CharField(
                choices=[("S3", "S3"), ("Snowflake", "Snowflake")],
                help_text="A choice of supported BatchExportDestination types.",
                max_length=64,
            ),
        ),
        migrations.AlterField(
            model_name="dashboardtemplate",
            name="scope",
            field=models.CharField(
                blank=True,
                choices=[("team", "Only team"), ("global", "Global"), ("feature_flag", "Feature Flag")],
                max_length=24,
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="earlyaccessfeature",
            name="stage",
            field=models.CharField(
                choices=[
                    ("draft", "draft"),
                    ("concept", "concept"),
                    ("alpha", "alpha"),
                    ("beta", "beta"),
                    ("general-availability", "general availability"),
                    ("archived", "archived"),
                ],
                max_length=40,
            ),
        ),
        migrations.RunPython(
            code=migration_0328_create_starter_template,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.CreateModel(
            name="DataWarehouseCredential",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "id",
                    models.UUIDField(
                        default=posthog.models.utils.UUIDT, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("access_key", posthog.helpers.encrypted_fields.EncryptedTextField(max_length=500)),
                ("access_secret", posthog.helpers.encrypted_fields.EncryptedTextField(max_length=500)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL
                    ),
                ),
                ("team", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.team")),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="DataWarehouseTable",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("deleted", models.BooleanField(blank=True, null=True)),
                (
                    "id",
                    models.UUIDField(
                        default=posthog.models.utils.UUIDT, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("name", models.CharField(max_length=128)),
                ("format", models.CharField(choices=[("CSV", "CSV"), ("Parquet", "Parquet")], max_length=128)),
                ("url_pattern", models.CharField(max_length=500)),
                (
                    "columns",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Dict of all columns with Clickhouse type (including Nullable())",
                        null=True,
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL
                    ),
                ),
                (
                    "credential",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="posthog.datawarehousecredential",
                    ),
                ),
                ("team", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.team")),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddIndex(
            model_name="propertydefinition",
            index=models.Index(fields=["team_id", "type", "is_numerical"], name="posthog_pro_team_id_eac36d_idx"),
        ),
        migrations.AddField(
            model_name="featureflag",
            name="has_enriched_analytics",
            field=models.BooleanField(blank=True, default=False, null=True),
        ),
        migrations.AddField(
            model_name="batchexport",
            name="end_at",
            field=models.DateTimeField(
                default=None, help_text="Time after which any Batch Export runs won't be triggered.", null=True
            ),
        ),
        migrations.AddField(
            model_name="batchexport",
            name="last_paused_at",
            field=models.DateTimeField(
                default=None, help_text="The timestamp at which this BatchExport was last paused.", null=True
            ),
        ),
        migrations.AddField(
            model_name="batchexport",
            name="start_at",
            field=models.DateTimeField(
                default=None, help_text="Time before which any Batch Export runs won't be triggered.", null=True
            ),
        ),
        migrations.AlterField(
            model_name="asyncdeletion",
            name="deletion_type",
            field=models.PositiveSmallIntegerField(
                choices=[(0, "Team"), (1, "Person"), (2, "Group"), (3, "Cohort Stale"), (4, "Cohort Full")]
            ),
        ),
        migrations.AlterField(
            model_name="survey",
            name="type",
            field=models.CharField(
                choices=[
                    ("popover", "popover"),
                    ("button", "button"),
                    ("email", "email"),
                    ("full_screen", "full screen"),
                    ("api", "api"),
                ],
                max_length=40,
            ),
        ),
        migrations.AddField(
            model_name="sessionrecording",
            name="active_seconds",
            field=models.IntegerField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="sessionrecording",
            name="console_error_count",
            field=models.IntegerField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="sessionrecording",
            name="console_log_count",
            field=models.IntegerField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="sessionrecording",
            name="console_warn_count",
            field=models.IntegerField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="sessionrecording",
            name="inactive_seconds",
            field=models.IntegerField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="sessionrecording",
            name="mouse_activity_count",
            field=models.IntegerField(blank=True, null=True),
        ),
        migrations.CreateModel(
            name="DataWarehouseSavedQuery",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("deleted", models.BooleanField(blank=True, null=True)),
                (
                    "id",
                    models.UUIDField(
                        default=posthog.models.utils.UUIDT, editable=False, primary_key=True, serialize=False
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        max_length=128,
                        validators=[posthog.warehouse.models.datawarehouse_saved_query.validate_saved_query_name],
                    ),
                ),
                (
                    "columns",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Dict of all columns with ClickHouse type (including Nullable())",
                        null=True,
                    ),
                ),
                ("query", models.JSONField(blank=True, default=dict, help_text="HogQL query", null=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL
                    ),
                ),
                ("team", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.team")),
            ],
        ),
        migrations.AddConstraint(
            model_name="datawarehousesavedquery",
            constraint=models.UniqueConstraint(
                fields=("team", "name"), name="posthog_datawarehouse_saved_query_unique_name"
            ),
        ),
        migrations.CreateModel(
            name="UserScenePersonalisation",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=posthog.models.utils.UUIDT, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("scene", models.CharField(max_length=200)),
                (
                    "dashboard",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to="posthog.dashboard"
                    ),
                ),
                (
                    "team",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to="posthog.team"
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="scene_personalisation",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.AddConstraint(
            model_name="userscenepersonalisation",
            constraint=models.UniqueConstraint(
                fields=("team", "user", "scene"), name="posthog_unique_scene_personalisation"
            ),
        ),
        migrations.AddField(
            model_name="sessionrecording",
            name="storage_version",
            field=models.CharField(blank=True, max_length=20, null=True),
        ),
        migrations.AlterField(
            model_name="featureflag",
            name="usage_dashboard",
            field=models.ForeignKey(
                blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to="posthog.dashboard"
            ),
        ),
        migrations.AlterField(
            model_name="batchexportdestination",
            name="type",
            field=models.CharField(
                choices=[("S3", "S3"), ("Snowflake", "Snowflake"), ("Postgres", "Postgres")],
                help_text="A choice of supported BatchExportDestination types.",
                max_length=64,
            ),
        ),
        migrations.AddField(
            model_name="datawarehousesavedquery",
            name="external_tables",
            field=models.JSONField(blank=True, default=list, help_text="List of all external tables", null=True),
        ),
        migrations.CreateModel(
            name="DataWarehouseViewLink",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("deleted", models.BooleanField(blank=True, null=True)),
                (
                    "id",
                    models.UUIDField(
                        default=posthog.models.utils.UUIDT, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("table", models.CharField(max_length=128)),
                ("from_join_key", models.CharField(max_length=400)),
                ("to_join_key", models.CharField(max_length=400)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL
                    ),
                ),
                (
                    "saved_query",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="posthog.datawarehousesavedquery"
                    ),
                ),
                ("team", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.team")),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AlterField(
            model_name="batchexportdestination",
            name="type",
            field=models.CharField(
                choices=[("S3", "S3"), ("Snowflake", "Snowflake"), ("Postgres", "Postgres"), ("BigQuery", "Bigquery")],
                help_text="A choice of supported BatchExportDestination types.",
                max_length=64,
            ),
        ),
        migrations.AlterField(
            model_name="datawarehousetable",
            name="format",
            field=models.CharField(
                choices=[("CSV", "CSV"), ("Parquet", "Parquet"), ("JSONEachRow", "JSON")], max_length=128
            ),
        ),
        migrations.AlterField(
            model_name="survey",
            name="linked_flag",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="surveys_linked_flag",
                related_query_name="survey_linked_flag",
                to="posthog.featureflag",
            ),
        ),
        migrations.AlterField(
            model_name="survey",
            name="targeting_flag",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="surveys_targeting_flag",
                related_query_name="survey_targeting_flag",
                to="posthog.featureflag",
            ),
        ),
        migrations.AddField(
            model_name="notebook",
            name="text_content",
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="messagingrecord",
            name="campaign_count",
            field=models.IntegerField(null=True),
        ),
        migrations.RunSQL(
            sql="\n            CREATE UNIQUE INDEX idx_messagingrecord_unique_on_email_hash_campaign_key_campaign_count\n            ON posthog_messagingrecord (email_hash, campaign_key, campaign_count);\n            ",
            reverse_sql='\n            DROP INDEX "idx_messagingrecord_unique_on_email_hash_campaign_key_campaign_count";\n            ',
        ),
        migrations.AlterField(
            model_name="batchexport",
            name="interval",
            field=models.CharField(
                choices=[("hour", "hour"), ("day", "day"), ("week", "week"), ("every 5 minutes", "every 5 minutes")],
                default="hour",
                help_text="The interval at which to export data.",
                max_length=64,
            ),
        ),
        migrations.AlterField(
            model_name="batchexportdestination",
            name="type",
            field=models.CharField(
                choices=[
                    ("S3", "S3"),
                    ("Snowflake", "Snowflake"),
                    ("Postgres", "Postgres"),
                    ("BigQuery", "Bigquery"),
                    ("NoOp", "Noop"),
                ],
                help_text="A choice of supported BatchExportDestination types.",
                max_length=64,
            ),
        ),
        migrations.CreateModel(
            name="BatchExportBackfill",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=posthog.models.utils.UUIDT, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("start_at", models.DateTimeField(help_text="The start of the data interval.")),
                ("end_at", models.DateTimeField(help_text="The end of the data interval.")),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("Cancelled", "Cancelled"),
                            ("Completed", "Completed"),
                            ("ContinuedAsNew", "Continuedasnew"),
                            ("Failed", "Failed"),
                            ("Terminated", "Terminated"),
                            ("TimedOut", "Timedout"),
                            ("Running", "Running"),
                            ("Starting", "Starting"),
                        ],
                        help_text="The status of this backfill.",
                        max_length=64,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, help_text="The timestamp at which this BatchExportBackfill was created."
                    ),
                ),
                (
                    "finished_at",
                    models.DateTimeField(
                        help_text="The timestamp at which this BatchExportBackfill finished, successfully or not.",
                        null=True,
                    ),
                ),
                (
                    "last_updated_at",
                    models.DateTimeField(
                        auto_now=True, help_text="The timestamp at which this BatchExportBackfill was last updated."
                    ),
                ),
                (
                    "batch_export",
                    models.ForeignKey(
                        help_text="The BatchExport this backfill belongs to.",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="posthog.batchexport",
                    ),
                ),
                (
                    "team",
                    models.ForeignKey(
                        help_text="The team this belongs to.",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="posthog.team",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AlterField(
            model_name="batchexportdestination",
            name="type",
            field=models.CharField(
                choices=[
                    ("S3", "S3"),
                    ("Snowflake", "Snowflake"),
                    ("Postgres", "Postgres"),
                    ("Redshift", "Redshift"),
                    ("BigQuery", "Bigquery"),
                    ("NoOp", "Noop"),
                ],
                help_text="A choice of supported BatchExportDestination types.",
                max_length=64,
            ),
        ),
        migrations.CreateModel(
            name="ExternalDataSource",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "id",
                    models.UUIDField(
                        default=posthog.models.utils.UUIDT, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("source_id", models.CharField(max_length=400)),
                ("connection_id", models.CharField(max_length=400)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL
                    ),
                ),
                ("status", models.CharField(max_length=400)),
                ("team", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.team")),
                ("source_type", models.CharField(choices=[("Stripe", "Stripe")], max_length=128)),
                ("are_tables_created", models.BooleanField(default=False)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="externaldatasource",
            name="destination_id",
            field=models.CharField(blank=True, max_length=400, null=True),
        ),
        migrations.AlterField(
            model_name="experiment",
            name="feature_flag",
            field=models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to="posthog.featureflag"),
        ),
        migrations.AlterField(
            model_name="experiment",
            name="created_by",
            field=models.ForeignKey(
                null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AlterField(
            model_name="featureflag",
            name="created_by",
            field=models.ForeignKey(
                null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AddField(
            model_name="externaldatasource",
            name="job_inputs",
            field=posthog.helpers.encrypted_fields.EncryptedJSONField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="datawarehousetable",
            name="external_data_source",
            field=models.ForeignKey(
                blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to="posthog.externaldatasource"
            ),
        ),
        migrations.CreateModel(
            name="ExternalDataJob",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "id",
                    models.UUIDField(
                        default=posthog.models.utils.UUIDT, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("status", models.CharField(max_length=400)),
                ("rows_synced", models.BigIntegerField(blank=True, null=True)),
                (
                    "latest_error",
                    models.TextField(help_text="The latest error that occurred during this run.", null=True),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL
                    ),
                ),
                (
                    "pipeline",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.externaldatasource"),
                ),
                ("team", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.team")),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="externaldatasource",
            name="prefix",
            field=models.CharField(blank=True, max_length=100, null=True),
        ),
        migrations.AddField(
            model_name="externaldatajob",
            name="workflow_id",
            field=models.CharField(blank=True, max_length=400, null=True),
        ),
        migrations.CreateModel(
            name="PendingPersonOverride",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("team_id", models.BigIntegerField()),
                ("old_person_id", models.UUIDField()),
                ("override_person_id", models.UUIDField()),
                ("oldest_event", models.DateTimeField()),
            ],
        ),
        migrations.CreateModel(
            name="ExternalDataSchema",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "id",
                    models.UUIDField(
                        default=posthog.models.utils.UUIDT, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("name", models.CharField(max_length=400)),
                ("should_sync", models.BooleanField(default=True)),
                (
                    "latest_error",
                    models.TextField(help_text="The latest error that occurred when syncing this schema.", null=True),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL
                    ),
                ),
                (
                    "source",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="schemas",
                        to="posthog.externaldatasource",
                    ),
                ),
                (
                    "table",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="posthog.datawarehousetable",
                    ),
                ),
                ("team", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.team")),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ScheduledChange",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("record_id", models.IntegerField()),
                ("model_name", models.CharField(choices=[("FeatureFlag", "feature flag")], max_length=100)),
                ("payload", models.JSONField(default=dict)),
                ("scheduled_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("executed_at", models.DateTimeField(blank=True, null=True)),
                ("failure_reason", models.CharField(blank=True, max_length=400, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now_add=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL
                    ),
                ),
                ("team", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.team")),
            ],
        ),
        migrations.AlterField(
            model_name="survey",
            name="type",
            field=models.CharField(
                choices=[
                    ("popover", "popover"),
                    ("widget", "widget"),
                    ("button", "button"),
                    ("email", "email"),
                    ("full_screen", "full screen"),
                    ("api", "api"),
                ],
                max_length=40,
            ),
        ),
        migrations.AddField(
            model_name="externaldataschema",
            name="last_synced_at",
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.CreateModel(
            name="FlatPersonOverride",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("team_id", models.BigIntegerField()),
                ("old_person_id", models.UUIDField()),
                ("override_person_id", models.UUIDField()),
                ("oldest_event", models.DateTimeField()),
                ("version", models.BigIntegerField(blank=True, null=True)),
            ],
        ),
        migrations.AddIndex(
            model_name="flatpersonoverride",
            index=models.Index(fields=["team_id", "override_person_id"], name="posthog_fla_team_id_224253_idx"),
        ),
        migrations.AddConstraint(
            model_name="flatpersonoverride",
            constraint=models.UniqueConstraint(
                fields=("team_id", "old_person_id"), name="flatpersonoverride_unique_old_person_by_team"
            ),
        ),
        migrations.AddConstraint(
            model_name="flatpersonoverride",
            constraint=models.CheckConstraint(
                check=models.Q(("old_person_id__exact", models.F("override_person_id")), _negated=True),
                name="flatpersonoverride_check_circular_reference",
            ),
        ),
        migrations.AlterField(
            model_name="scheduledchange",
            name="record_id",
            field=models.CharField(max_length=200),
        ),
        migrations.AlterField(
            model_name="scheduledchange",
            name="scheduled_at",
            field=models.DateTimeField(),
        ),
        migrations.AddIndex(
            model_name="scheduledchange",
            index=models.Index(fields=["scheduled_at", "executed_at"], name="posthog_sch_schedul_c3687e_idx"),
        ),
        migrations.CreateModel(
            name="Comment",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=posthog.models.utils.UUIDT, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("content", models.TextField(blank=True, null=True)),
                ("version", models.IntegerField(default=0)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("deleted", models.BooleanField(blank=True, default=False, null=True)),
                ("item_id", models.CharField(max_length=72, null=True)),
                ("item_context", models.JSONField(null=True)),
                ("scope", models.CharField(max_length=79)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL
                    ),
                ),
                (
                    "source_comment",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to="posthog.comment"
                    ),
                ),
                ("team", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.team")),
            ],
        ),
        migrations.AddIndex(
            model_name="comment",
            index=models.Index(fields=["team_id", "scope", "item_id"], name="posthog_com_team_id_be2206_idx"),
        ),
        migrations.AlterField(
            model_name="externaldatasource",
            name="source_type",
            field=models.CharField(choices=[("Stripe", "Stripe"), ("Hubspot", "Hubspot")], max_length=128),
        ),
        migrations.AlterField(
            model_name="externaldataschema",
            name="table",
            field=models.ForeignKey(
                blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to="posthog.datawarehousetable"
            ),
        ),
        migrations.AddField(
            model_name="activitylog",
            name="was_impersonated",
            field=models.BooleanField(null=True),
        ),
        migrations.AlterField(
            model_name="externaldatasource",
            name="source_type",
            field=models.CharField(
                choices=[("Stripe", "Stripe"), ("Hubspot", "Hubspot"), ("Postgres", "Postgres")], max_length=128
            ),
        ),
        migrations.AddField(
            model_name="batchexport",
            name="schema",
            field=models.JSONField(
                default=None, help_text="A schema of custom fields to select when exporting data.", null=True
            ),
        ),
        migrations.AlterField(
            model_name="batchexportdestination",
            name="type",
            field=models.CharField(
                choices=[
                    ("S3", "S3"),
                    ("Snowflake", "Snowflake"),
                    ("Postgres", "Postgres"),
                    ("Redshift", "Redshift"),
                    ("BigQuery", "Bigquery"),
                    ("HTTP", "Http"),
                    ("NoOp", "Noop"),
                ],
                help_text="A choice of supported BatchExportDestination types.",
                max_length=64,
            ),
        ),
        migrations.AddField(
            model_name="personalapikey",
            name="scoped_organizations",
            field=django.contrib.postgres.fields.ArrayField(
                base_field=models.CharField(max_length=100), null=True, size=None
            ),
        ),
        migrations.AddField(
            model_name="personalapikey",
            name="scoped_teams",
            field=django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), null=True, size=None),
        ),
        migrations.AddField(
            model_name="personalapikey",
            name="scopes",
            field=django.contrib.postgres.fields.ArrayField(
                base_field=models.CharField(max_length=100), null=True, size=None
            ),
        ),
        migrations.AlterField(
            model_name="batchexportbackfill",
            name="status",
            field=models.CharField(
                choices=[
                    ("Cancelled", "Cancelled"),
                    ("Completed", "Completed"),
                    ("ContinuedAsNew", "Continued As New"),
                    ("Failed", "Failed"),
                    ("FailedRetryable", "Failed Retryable"),
                    ("Terminated", "Terminated"),
                    ("TimedOut", "Timedout"),
                    ("Running", "Running"),
                    ("Starting", "Starting"),
                ],
                help_text="The status of this backfill.",
                max_length=64,
            ),
        ),
        migrations.AlterField(
            model_name="batchexportrun",
            name="status",
            field=models.CharField(
                choices=[
                    ("Cancelled", "Cancelled"),
                    ("Completed", "Completed"),
                    ("ContinuedAsNew", "Continued As New"),
                    ("Failed", "Failed"),
                    ("FailedRetryable", "Failed Retryable"),
                    ("Terminated", "Terminated"),
                    ("TimedOut", "Timedout"),
                    ("Running", "Running"),
                    ("Starting", "Starting"),
                ],
                help_text="The status of this run.",
                max_length=64,
            ),
        ),
        migrations.AlterField(
            model_name="exportedasset",
            name="export_format",
            field=models.CharField(
                choices=[
                    ("image/png", "image/png"),
                    ("application/pdf", "application/pdf"),
                    ("text/csv", "text/csv"),
                    (
                        "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                        "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                    ),
                ],
                max_length=100,
            ),
        ),
        migrations.CreateModel(
            name="DataWarehouseJoin",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=posthog.models.utils.UUIDT, editable=False, primary_key=True, serialize=False
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("deleted", models.BooleanField(blank=True, null=True)),
                ("team", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.team")),
                ("source_table_name", models.CharField(max_length=400)),
                ("joining_table_name", models.CharField(max_length=400)),
                ("source_table_key", models.CharField(max_length=400)),
                ("joining_table_key", models.CharField(max_length=400)),
                ("field_name", models.CharField(max_length=400)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AlterField(
            model_name="batchexportbackfill",
            name="end_at",
            field=models.DateTimeField(help_text="The end of the data interval.", null=True),
        ),
        migrations.CreateModel(
            name="Project",
            fields=[
                ("id", models.BigIntegerField(primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "name",
                    models.CharField(
                        default="Default project",
                        max_length=200,
                        validators=[django.core.validators.MinLengthValidator(1, "Project must have a name!")],
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "organization",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="projects",
                        related_query_name="project",
                        to="posthog.organization",
                    ),
                ),
            ],
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "posthog_action" ADD COLUMN "project_id" bigint NULL CONSTRAINT "posthog_action_project_id_4taf4ZLMhR8D_fk_posthog_p" REFERENCES "posthog_project"("id") DEFERRABLE INITIALLY DEFERRED;\n                    SET CONSTRAINTS "posthog_action_project_id_4taf4ZLMhR8D_fk_posthog_p" IMMEDIATE;',
                    reverse_sql='\n                        ALTER TABLE "posthog_action" DROP COLUMN IF EXISTS "project_id";',
                ),
                migrations.RunSQL(
                    sql='\n                    CREATE INDEX "posthog_action_project_id_4taf4ZLMhR8D_utgqv8kQuJmp" ON "posthog_action" ("project_id");',
                    reverse_sql='\n                        DROP INDEX IF EXISTS "posthog_action_project_id_4taf4ZLMhR8D_utgqv8kQuJmp";',
                ),
            ],
            state_operations=[
                migrations.AddField(
                    model_name="action",
                    name="project",
                    field=models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to="posthog.project"
                    ),
                ),
            ],
        ),
        migrations.AlterField(
            model_name="team",
            name="uuid",
            field=models.UUIDField(default=posthog.models.utils.UUIDT, editable=False, unique=True),
        ),
        migrations.AlterField(
            model_name="team",
            name="api_token",
            field=models.CharField(default=posthog.models.utils.generate_random_token, max_length=200, null=True),
        ),
        migrations.AddField(
            model_name="team",
            name="organization",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="teams",
                related_query_name="team",
                to="posthog.organization",
            ),
        ),
        migrations.AlterField(
            model_name="team",
            name="api_token",
            field=models.CharField(
                default=posthog.models.utils.generate_random_token, max_length=200, null=True, unique=True
            ),
        ),
        migrations.AlterField(
            model_name="team",
            name="name",
            field=models.CharField(default="Default Project", max_length=200, null=True),
        ),
        migrations.AlterField(
            model_name="team",
            name="api_token",
            field=models.CharField(
                default=posthog.models.utils.generate_random_token,
                max_length=200,
                unique=True,
                validators=[
                    django.core.validators.MinLengthValidator(
                        10, "Project's API token must be at least 10 characters long!"
                    )
                ],
            ),
        ),
        migrations.AlterField(
            model_name="team",
            name="name",
            field=models.CharField(
                default="Default Project",
                max_length=200,
                validators=[django.core.validators.MinLengthValidator(1, "Project must have a name!")],
            ),
        ),
        migrations.AlterField(
            model_name="team",
            name="organization",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="teams",
                related_query_name="team",
                to="posthog.organization",
            ),
        ),
        migrations.AlterField(
            model_name="team",
            name="session_recording_retention_period_days",
            field=models.IntegerField(blank=True, default=None, null=True),
        ),
        migrations.AlterField(
            model_name="team",
            name="event_names",
            field=models.JSONField(default=list),
        ),
        migrations.AlterField(
            model_name="team",
            name="event_names_with_usage",
            field=models.JSONField(default=list),
        ),
        migrations.AlterField(
            model_name="team",
            name="event_properties",
            field=models.JSONField(default=list),
        ),
        migrations.AlterField(
            model_name="team",
            name="event_properties_numerical",
            field=models.JSONField(default=list),
        ),
        migrations.AlterField(
            model_name="team",
            name="event_properties_with_usage",
            field=models.JSONField(default=list),
        ),
        migrations.AlterField(
            model_name="team",
            name="test_account_filters",
            field=models.JSONField(default=list),
        ),
        migrations.AlterField(
            model_name="team",
            name="api_token",
            field=models.CharField(
                default=posthog.models.utils.generate_random_token_project,
                max_length=200,
                unique=True,
                validators=[
                    django.core.validators.MinLengthValidator(
                        10, "Project's API token must be at least 10 characters long!"
                    )
                ],
            ),
        ),
        migrations.AddField(
            model_name="team",
            name="primary_dashboard",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="primary_dashboard_teams",
                to="posthog.dashboard",
            ),
        ),
        migrations.AddField(
            model_name="team",
            name="capture_performance_opt_in",
            field=models.BooleanField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name="team",
            name="event_names",
            field=models.JSONField(blank=True, default=list),
        ),
        migrations.AlterField(
            model_name="team",
            name="event_names_with_usage",
            field=models.JSONField(blank=True, default=list),
        ),
        migrations.AlterField(
            model_name="team",
            name="event_properties",
            field=models.JSONField(blank=True, default=list),
        ),
        migrations.AlterField(
            model_name="team",
            name="event_properties_numerical",
            field=models.JSONField(blank=True, default=list),
        ),
        migrations.AlterField(
            model_name="team",
            name="event_properties_with_usage",
            field=models.JSONField(blank=True, default=list),
        ),
        migrations.AlterField(
            model_name="team",
            name="primary_dashboard",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="primary_dashboard_teams",
                to="posthog.dashboard",
            ),
        ),
        migrations.AddField(
            model_name="team",
            name="session_recording_version",
            field=models.CharField(blank=True, max_length=24, null=True),
        ),
        migrations.AddField(
            model_name="team",
            name="autocapture_opt_out",
            field=models.BooleanField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="team",
            name="autocapture_exceptions_opt_in",
            field=models.BooleanField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="team",
            name="extra_settings",
            field=models.JSONField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="team",
            name="autocapture_exceptions_errors_to_ignore",
            field=models.JSONField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="team",
            name="has_completed_onboarding_for",
            field=models.JSONField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="team",
            name="week_start_day",
            field=models.SmallIntegerField(blank=True, choices=[(0, "Sunday"), (1, "Monday")], null=True),
        ),
        migrations.AddField(
            model_name="team",
            name="surveys_opt_in",
            field=models.BooleanField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="team",
            name="session_recording_linked_flag",
            field=models.JSONField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="team",
            name="session_recording_minimum_duration_milliseconds",
            field=models.IntegerField(
                blank=True,
                null=True,
                validators=[
                    django.core.validators.MinValueValidator(0),
                    django.core.validators.MaxValueValidator(15000),
                ],
            ),
        ),
        migrations.AddField(
            model_name="team",
            name="session_recording_sample_rate",
            field=models.DecimalField(
                blank=True,
                decimal_places=2,
                max_digits=3,
                null=True,
                validators=[
                    django.core.validators.MinValueValidator(Decimal("0")),
                    django.core.validators.MaxValueValidator(Decimal("1")),
                ],
            ),
        ),
        migrations.AddField(
            model_name="team",
            name="external_data_workspace_id",
            field=models.CharField(blank=True, max_length=400, null=True),
        ),
        migrations.AddField(
            model_name="team",
            name="session_recording_network_payload_capture_config",
            field=models.JSONField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="team",
            name="external_data_workspace_last_synced_at",
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="team",
            name="session_replay_config",
            field=models.JSONField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name="team",
            name="name",
            field=models.CharField(
                default="Default project",
                max_length=200,
                validators=[django.core.validators.MinLengthValidator(1, "Project must have a name!")],
            ),
        ),
        migrations.AddField(
            model_name="team",
            name="project",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="teams",
                related_query_name="team",
                to="posthog.project",
            ),
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql="\n                    -- For each team without a parent project, create such a project\n                    INSERT INTO posthog_project (id, name, created_at, organization_id)\n                    SELECT id, name, created_at, organization_id\n                    FROM posthog_team\n                    WHERE project_id IS NULL;\n                    -- At this point, all teams have a parent project, so we can safely set project_id on every team\n                    UPDATE posthog_team\n                    SET project_id = id;",
                    reverse_sql="",
                ),
            ],
            state_operations=[
                migrations.AlterField(
                    model_name="team",
                    name="project",
                    field=models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="teams",
                        related_query_name="team",
                        to="posthog.project",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="team",
            name="heatmaps_opt_in",
            field=models.BooleanField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="team",
            name="modifiers",
            field=models.JSONField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="team",
            name="autocapture_web_vitals_opt_in",
            field=models.BooleanField(blank=True, null=True),
        ),
        migrations.SeparateDatabaseAndState(
            state_operations=[
                migrations.AlterField(
                    model_name="team",
                    name="project",
                    field=models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="teams",
                        related_query_name="team",
                        to="posthog.project",
                    ),
                ),
            ],
        ),
        django.contrib.postgres.operations.AddConstraintNotValid(
            model_name="team",
            constraint=models.CheckConstraint(
                check=models.Q(("project_id__isnull", False)), name="project_id_is_not_null"
            ),
        ),
        migrations.AlterField(
            model_name="team",
            name="capture_console_log_opt_in",
            field=models.BooleanField(blank=True, default=True, null=True),
        ),
        migrations.AlterField(
            model_name="team",
            name="capture_performance_opt_in",
            field=models.BooleanField(blank=True, default=True, null=True),
        ),
        migrations.AddField(
            model_name="team",
            name="autocapture_web_vitals_allowed_metrics",
            field=models.JSONField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="team",
            name="survey_config",
            field=models.JSONField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="team",
            name="session_recording_url_trigger_config",
            field=django.contrib.postgres.fields.ArrayField(
                base_field=models.JSONField(blank=True, null=True), blank=True, default=list, null=True, size=None
            ),
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                django.contrib.postgres.operations.ValidateConstraint(
                    model_name="team",
                    name="project_id_is_not_null",
                ),
            ],
            state_operations=[
                migrations.AlterField(
                    model_name="team",
                    name="project",
                    field=models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="teams",
                        related_query_name="team",
                        to="posthog.project",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="team",
            name="person_processing_opt_out",
            field=models.BooleanField(default=False, null=True),
        ),
        migrations.AddField(
            model_name="team",
            name="session_recording_url_blocklist_config",
            field=django.contrib.postgres.fields.ArrayField(
                base_field=models.JSONField(blank=True, null=True), blank=True, default=list, null=True, size=None
            ),
        ),
        migrations.AddField(
            model_name="team",
            name="capture_dead_clicks",
            field=models.BooleanField(blank=True, default=False, null=True),
        ),
        migrations.AddField(
            model_name="team",
            name="session_recording_event_trigger_config",
            field=django.contrib.postgres.fields.ArrayField(
                base_field=models.TextField(blank=True, null=True), blank=True, default=list, null=True, size=None
            ),
        ),
        migrations.AddField(
            model_name="team",
            name="cookieless_server_hash_mode",
            field=models.SmallIntegerField(
                choices=[(0, "Disabled"), (1, "Stateless"), (2, "Stateful")], default=0, null=True
            ),
        ),
        migrations.AddField(
            model_name="team",
            name="default_data_theme",
            field=models.IntegerField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="team",
            name="human_friendly_comparison_periods",
            field=models.BooleanField(blank=True, default=False, null=True),
        ),
        migrations.AddField(
            model_name="team",
            name="flags_persistence_default",
            field=models.BooleanField(blank=True, default=False, null=True),
        ),
        migrations.AddField(
            model_name="team",
            name="revenue_tracking_config",
            field=models.JSONField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="team",
            name="api_query_rate_limit",
            field=models.CharField(
                blank=True,
                help_text="Custom rate limit for HogQL API queries in #requests/{sec,min,hour,day}",
                max_length=32,
                null=True,
                validators=[posthog.models.utils.validate_rate_limit],
            ),
        ),
        migrations.AddField(
            model_name="team",
            name="onboarding_tasks",
            field=models.JSONField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="team",
            name="session_recording_masking_config",
            field=models.JSONField(blank=True, null=True),
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "posthog_team" ADD COLUMN "parent_team_id" bigint NULL CONSTRAINT "posthog_team_parent_team_id_bkr8e799nE_fk_posthog_p" REFERENCES "posthog_team"("id") DEFERRABLE INITIALLY DEFERRED;\n                    SET CONSTRAINTS "posthog_team_parent_team_id_bkr8e799nE_fk_posthog_p" IMMEDIATE;',
                    reverse_sql='\n                        ALTER TABLE "posthog_team" DROP COLUMN IF EXISTS "parent_team_id";',
                ),
                migrations.RunSQL(
                    sql='\n                    CREATE INDEX "posthog_team_parent_team_id_bkr8e799nE_TkKe5yC3C5" ON "posthog_team" ("parent_team_id");',
                    reverse_sql='\n                        DROP INDEX IF EXISTS "posthog_team_parent_team_id_bkr8e799nE_TkKe5yC3C5";',
                ),
            ],
            state_operations=[
                migrations.AddField(
                    model_name="team",
                    name="parent_team",
                    field=models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="child_teams",
                        related_query_name="child_team",
                        to="posthog.team",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="team",
            name="session_recording_trigger_match_type_config",
            field=models.CharField(blank=True, max_length=24, null=True),
        ),
        migrations.AlterField(
            model_name="team",
            name="session_recording_minimum_duration_milliseconds",
            field=models.IntegerField(
                blank=True,
                null=True,
                validators=[
                    django.core.validators.MinValueValidator(0),
                    django.core.validators.MaxValueValidator(30000),
                ],
            ),
        ),
        migrations.AlterField(
            model_name="externaldatasource",
            name="source_type",
            field=models.CharField(
                choices=[
                    ("Stripe", "Stripe"),
                    ("Hubspot", "Hubspot"),
                    ("Postgres", "Postgres"),
                    ("Zendesk", "Zendesk"),
                ],
                max_length=128,
            ),
        ),
        migrations.AddField(
            model_name="batchexportrun",
            name="records_total_count",
            field=models.IntegerField(
                help_text="The total count of records that should be exported in this BatchExportRun.", null=True
            ),
        ),
        migrations.AddField(
            model_name="datawarehousetable",
            name="row_count",
            field=models.IntegerField(help_text="How many rows are currently synced in this table", null=True),
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "posthog_experiment" ADD COLUMN "exposure_cohort_id" integer NULL CONSTRAINT "posthog_experiment_exposure_cohort_id_19450b9e_fk_posthog_c" REFERENCES "posthog_cohort"("id") DEFERRABLE INITIALLY DEFERRED; -- existing-table-constraint-ignore\n                    SET CONSTRAINTS "posthog_experiment_exposure_cohort_id_19450b9e_fk_posthog_c" IMMEDIATE; -- existing-table-constraint-ignore\n                    ',
                    reverse_sql='\n                        ALTER TABLE "posthog_experiment" DROP COLUMN IF EXISTS "exposure_cohort_id";\n                    ',
                ),
                migrations.RunSQL(
                    sql='\n                    CREATE INDEX "posthog_experiment_exposure_cohort_id_19450b9e" ON "posthog_experiment" ("exposure_cohort_id");\n                    ',
                    reverse_sql='\n                        DROP INDEX IF EXISTS "posthog_experiment_exposure_cohort_id_19450b9e";\n                    ',
                ),
            ],
            state_operations=[
                migrations.AddField(
                    model_name="experiment",
                    name="exposure_cohort",
                    field=models.ForeignKey(
                        null=True, on_delete=django.db.models.deletion.SET_NULL, to="posthog.cohort"
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="externaldatajob",
            name="schema",
            field=models.ForeignKey(
                blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to="posthog.externaldataschema"
            ),
        ),
        migrations.AddField(
            model_name="externaldataschema",
            name="status",
            field=models.CharField(blank=True, max_length=400, null=True),
        ),
        migrations.RemoveConstraint(
            model_name="propertydefinition",
            name="property_type_is_valid",
        ),
        migrations.AlterField(
            model_name="propertydefinition",
            name="property_type",
            field=models.CharField(
                blank=True,
                choices=[
                    ("DateTime", "DateTime"),
                    ("String", "String"),
                    ("Numeric", "Numeric"),
                    ("Boolean", "Boolean"),
                    ("Duration", "Duration"),
                ],
                max_length=50,
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="propertydefinition",
            name="type",
            field=models.PositiveSmallIntegerField(
                choices=[(1, "event"), (2, "person"), (3, "group"), (4, "session")], default=1
            ),
        ),
        django.contrib.postgres.operations.AddConstraintNotValid(
            model_name="propertydefinition",
            constraint=models.CheckConstraint(
                check=models.Q(("property_type__in", ["DateTime", "String", "Numeric", "Boolean", "Duration"])),
                name="property_type_is_valid",
            ),
        ),
        migrations.AddField(
            model_name="survey",
            name="responses_limit",
            field=models.PositiveIntegerField(null=True),
        ),
        migrations.AlterModelOptions(
            name="team",
            options={
                "verbose_name": "team (soon to be environment)",
                "verbose_name_plural": "teams (soon to be environments)",
            },
        ),
        migrations.RunSQL(
            sql="CREATE INDEX posthog_eventproperty_team_id_and_property_r32khd9s ON posthog_eventproperty(team_id, property)",
            reverse_sql='DROP INDEX "posthog_eventproperty_team_id_and_property_r32khd9s"',
        ),
        migrations.CreateModel(
            name="ProxyRecord",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=posthog.models.utils.UUIDT, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("domain", models.CharField(max_length=64, unique=True)),
                ("target_cname", models.CharField(max_length=256)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("waiting", "Waiting"),
                            ("issuing", "Issuing"),
                            ("valid", "Valid"),
                            ("erroring", "Erroring"),
                            ("deleting", "Deleting"),
                        ],
                        default="waiting",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL
                    ),
                ),
                (
                    "organization",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="proxy_records",
                        to="posthog.organization",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="personalapikey",
            name="mask_value",
            field=models.CharField(editable=False, max_length=11, null=True),
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "posthog_pluginconfig" ADD COLUMN "match_action_id" integer NULL CONSTRAINT "posthog_pluginconfig_match_action_id_1cbf8562_fk_posthog_a" REFERENCES "posthog_action"("id") DEFERRABLE INITIALLY DEFERRED; -- existing-table-constraint-ignore\n                    SET CONSTRAINTS "posthog_pluginconfig_match_action_id_1cbf8562_fk_posthog_a" IMMEDIATE; -- existing-table-constraint-ignore\n                    ',
                    reverse_sql='\n                        ALTER TABLE "posthog_pluginconfig" DROP COLUMN IF EXISTS "match_action_id";\n                    ',
                ),
                migrations.RunSQL(
                    sql='\n                    CREATE INDEX "posthog_pluginconfig_match_action_id_1cbf8562" ON "posthog_pluginconfig" ("match_action_id");\n                    ',
                    reverse_sql='\n                        DROP INDEX IF EXISTS "posthog_pluginconfig_match_action_id_1cbf8562";\n                    ',
                ),
            ],
            state_operations=[
                migrations.AddField(
                    model_name="pluginconfig",
                    name="match_action",
                    field=models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="plugin_configs",
                        to="posthog.action",
                    ),
                ),
            ],
        ),
        migrations.AddField(model_name="pluginconfig", name="filters", field=models.JSONField(blank=True, null=True)),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "posthog_survey" ADD COLUMN "internal_targeting_flag_id" integer NULL CONSTRAINT "posthog_survey_internal_targeting_f_b3911925_fk_posthog_f" REFERENCES "posthog_featureflag"("id") DEFERRABLE INITIALLY DEFERRED; -- existing-table-constraint-ignore\n                    SET CONSTRAINTS "posthog_survey_internal_targeting_f_b3911925_fk_posthog_f" IMMEDIATE; -- existing-table-constraint-ignore\n                    ',
                    reverse_sql='\n                        ALTER TABLE "posthog_survey" DROP COLUMN IF EXISTS "internal_targeting_flag_id";\n                    ',
                ),
                migrations.RunSQL(
                    sql='\n                    CREATE INDEX "posthog_survey_internal_targeting_flag_id_b3911925" ON "posthog_survey" ("internal_targeting_flag_id");\n                    ',
                    reverse_sql='\n                        DROP INDEX IF EXISTS "posthog_survey_internal_targeting_flag_id_b3911925";\n                    ',
                ),
            ],
            state_operations=[
                migrations.AddField(
                    model_name="survey",
                    name="internal_targeting_flag",
                    field=models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="surveys_internal_targeting_flag",
                        related_query_name="survey_internal_targeting_flag",
                        to="posthog.featureflag",
                    ),
                ),
            ],
        ),
        migrations.RemoveConstraint(
            model_name="organizationmembership",
            name="only_one_owner_per_organization",
        ),
        migrations.RunSQL(
            sql='ALTER TABLE "posthog_organization" DROP COLUMN "available_features" CASCADE -- drop-column-ignore',
            reverse_sql='ALTER TABLE "posthog_organization" ADD COLUMN "available_features" VARCHAR(64)[] DEFAULT array[]::varchar(64)[]',
            state_operations=[
                migrations.RemoveField(
                    model_name="organization",
                    name="available_features",
                )
            ],
        ),
        migrations.CreateModel(
            name="Alert",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=100)),
                ("target_value", models.TextField()),
                ("anomaly_condition", models.JSONField(default=dict)),
                ("insight", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.insight")),
                ("team", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.team")),
            ],
        ),
        migrations.RunSQL(
            sql="\n        update posthog_propertydefinition\n        set property_type = 'String', is_numerical=False\n        where name LIKE '$survey_response%' and property_type = 'Numeric' and type = 1\n            ",
            reverse_sql="",
        ),
        migrations.AddField(
            model_name="proxyrecord",
            name="message",
            field=models.CharField(max_length=1024, null=True),
        ),
        migrations.AlterField(
            model_name="externaldatasource",
            name="source_type",
            field=models.CharField(
                choices=[
                    ("Stripe", "Stripe"),
                    ("Hubspot", "Hubspot"),
                    ("Postgres", "Postgres"),
                    ("Zendesk", "Zendesk"),
                    ("Snowflake", "Snowflake"),
                ],
                max_length=128,
            ),
        ),
        migrations.AddField(
            model_name="survey",
            name="current_iteration",
            field=models.PositiveIntegerField(null=True),
        ),
        migrations.AddField(
            model_name="survey",
            name="current_iteration_start_date",
            field=models.DateTimeField(null=True),
        ),
        migrations.AddField(
            model_name="survey",
            name="iteration_count",
            field=models.PositiveIntegerField(null=True),
        ),
        migrations.AddField(
            model_name="survey",
            name="iteration_frequency_days",
            field=models.PositiveIntegerField(null=True),
        ),
        migrations.AddField(
            model_name="survey",
            name="iteration_start_dates",
            field=django.contrib.postgres.fields.ArrayField(
                base_field=models.DateTimeField(null=True), blank=True, default=None, null=True, size=None
            ),
        ),
        migrations.CreateModel(
            name="HogFunction",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=posthog.models.utils.UUIDT, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("name", models.CharField(blank=True, max_length=400, null=True)),
                ("description", models.TextField(blank=True, default="")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("deleted", models.BooleanField(default=False)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("enabled", models.BooleanField(default=False)),
                ("hog", models.TextField()),
                ("bytecode", models.JSONField(blank=True, null=True)),
                ("inputs_schema", models.JSONField(null=True)),
                ("inputs", models.JSONField(null=True)),
                ("filters", models.JSONField(blank=True, null=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL
                    ),
                ),
                ("team", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.team")),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="externaldatasource",
            name="sync_frequency",
            field=models.CharField(
                blank=True,
                choices=[("day", "Daily"), ("week", "Weekly"), ("month", "Monthly")],
                default="day",
                max_length=128,
            ),
        ),
        migrations.AddField(
            model_name="hogfunction",
            name="icon_url",
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="hogfunction",
            name="template_id",
            field=models.CharField(blank=True, max_length=400, null=True),
        ),
        migrations.AddField(
            model_name="externaldataschema",
            name="sync_type",
            field=models.CharField(
                blank=True,
                choices=[("full_refresh", "full_refresh"), ("incremental", "incremental")],
                default="full_refresh",
                max_length=128,
            ),
        ),
        migrations.RunSQL(
            sql="\n        UPDATE posthog_externaldataschema AS schema\n        SET sync_type = 'incremental'\n        FROM posthog_externaldatasource AS source\n        WHERE schema.source_id = source.id AND source.source_type = 'Stripe' AND schema.name = 'Invoice'\n            ",
            reverse_sql="",
        ),
        migrations.AlterField(
            model_name="datawarehousetable",
            name="format",
            field=models.CharField(
                choices=[
                    ("CSV", "CSV"),
                    ("CSVWithNames", "CSVWithNames"),
                    ("Parquet", "Parquet"),
                    ("JSONEachRow", "JSON"),
                ],
                max_length=128,
            ),
        ),
        migrations.AddField(
            model_name="batchexport",
            name="model",
            field=models.CharField(
                blank=True,
                choices=[("events", "Events"), ("persons", "Persons")],
                default="events",
                help_text="Which model this BatchExport is exporting.",
                max_length=64,
                null=True,
            ),
        ),
        migrations.AddField(
            model_name="externaldataschema",
            name="sync_type_config",
            field=models.JSONField(blank=True, default=dict),
        ),
        migrations.AlterField(
            model_name="externaldataschema",
            name="sync_type",
            field=models.CharField(
                blank=True,
                choices=[("full_refresh", "full_refresh"), ("incremental", "incremental")],
                max_length=128,
                null=True,
            ),
        ),
        migrations.RunSQL(
            sql="\n                UPDATE posthog_externaldataschema AS schema\n                SET sync_type_config = '{\"incremental_field\": \"created\"}'\n                FROM posthog_externaldatasource AS source\n                WHERE schema.source_id = source.id AND source.source_type = 'Stripe' AND schema.sync_type = 'incremental'\n            ",
            reverse_sql="",
        ),
        migrations.RunSQL(
            sql="\n                UPDATE posthog_externaldataschema AS schema\n                SET sync_type_config = '{\"incremental_field\": \"generated_timestamp\"}'\n                FROM posthog_externaldatasource AS source\n                WHERE schema.source_id = source.id AND source.source_type = 'Zendesk' AND schema.sync_type = 'incremental'\n            ",
            reverse_sql="",
        ),
        migrations.CreateModel(
            name="PersonlessDistinctId",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("distinct_id", models.CharField(max_length=400)),
                ("is_merged", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "team",
                    models.ForeignKey(db_index=False, on_delete=django.db.models.deletion.CASCADE, to="posthog.team"),
                ),
            ],
        ),
        migrations.AddConstraint(
            model_name="personlessdistinctid",
            constraint=models.UniqueConstraint(
                fields=("team", "distinct_id"), name="unique personless distinct_id for team"
            ),
        ),
        migrations.AddIndex(
            model_name="dashboard",
            index=models.Index(
                condition=models.Q(("deleted", False)),
                fields=["-pinned", "name", "deleted", "team_id"],
                name="idx_dashboard_deleted_team_id",
            ),
        ),
        migrations.AlterField(
            model_name="proxyrecord",
            name="status",
            field=models.CharField(
                choices=[
                    ("waiting", "Waiting"),
                    ("issuing", "Issuing"),
                    ("valid", "Valid"),
                    ("erroring", "Erroring"),
                    ("deleting", "Deleting"),
                    ("timed_out", "Timed Out"),
                ],
                default="waiting",
            ),
        ),
        migrations.AddField(
            model_name="externaldataschema",
            name="sync_frequency",
            field=models.CharField(
                blank=True,
                choices=[("day", "Daily"), ("week", "Weekly"), ("month", "Monthly")],
                default="day",
                max_length=128,
            ),
        ),
        migrations.AlterField(
            model_name="externaldatajob",
            name="pipeline",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, related_name="jobs", to="posthog.externaldatasource"
            ),
        ),
        migrations.RunSQL(
            sql="\n                UPDATE posthog_externaldataschema AS schema\n                SET sync_frequency = source.sync_frequency\n                FROM posthog_externaldatasource AS source\n                WHERE schema.source_id = source.id\n            ",
            reverse_sql="",
        ),
        migrations.CreateModel(
            name="ErrorTrackingGroup",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=posthog.models.utils.UUIDT, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("fingerprint", models.TextField()),
                (
                    "merged_fingerprints",
                    django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), default=list, size=None),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("archived", "Archived"),
                            ("active", "Active"),
                            ("resolved", "Resolved"),
                            ("pending_release", "Pending release"),
                        ],
                        default="active",
                        max_length=40,
                    ),
                ),
                (
                    "assignee",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL
                    ),
                ),
                ("team", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.team")),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="survey",
            name="actions",
            field=models.ManyToManyField(to="posthog.action"),
        ),
        migrations.AlterField(
            model_name="datawarehousetable",
            name="format",
            field=models.CharField(
                choices=[
                    ("CSV", "CSV"),
                    ("CSVWithNames", "CSVWithNames"),
                    ("Parquet", "Parquet"),
                    ("JSONEachRow", "JSON"),
                    ("Delta", "Delta"),
                ],
                max_length=128,
            ),
        ),
        migrations.AlterField(
            model_name="survey",
            name="questions",
            field=models.JSONField(
                blank=True,
                help_text='\n        The `array` of questions included in the survey. Each question must conform to one of the defined question types: Basic, Link, Rating, or Multiple Choice.\n\n        Basic (open-ended question)\n        - `type`: `open`\n        - `question`: The text of the question.\n        - `description`: Optional description of the question.\n        - `descriptionContentType`: Content type of the description (`html` or `text`).\n        - `optional`: Whether the question is optional (`boolean`).\n        - `buttonText`: Text displayed on the submit button.\n        - `branching`: Branching logic for the question. See branching types below for details.\n\n        Link (a question with a link)\n        - `type`: `link`\n        - `question`: The text of the question.\n        - `description`: Optional description of the question.\n        - `descriptionContentType`: Content type of the description (`html` or `text`).\n        - `optional`: Whether the question is optional (`boolean`).\n        - `buttonText`: Text displayed on the submit button.\n        - `link`: The URL associated with the question.\n        - `branching`: Branching logic for the question. See branching types below for details.\n\n        Rating (a question with a rating scale)\n        - `type`: `rating`\n        - `question`: The text of the question.\n        - `description`: Optional description of the question.\n        - `descriptionContentType`: Content type of the description (`html` or `text`).\n        - `optional`: Whether the question is optional (`boolean`).\n        - `buttonText`: Text displayed on the submit button.\n        - `display`: Display style of the rating (`number` or `emoji`).\n        - `scale`: The scale of the rating (`number`).\n        - `lowerBoundLabel`: Label for the lower bound of the scale.\n        - `upperBoundLabel`: Label for the upper bound of the scale.\n        - `branching`: Branching logic for the question. See branching types below for details.\n\n        Multiple choice\n        - `type`: `single_choice` or `multiple_choice`\n        - `question`: The text of the question.\n        - `description`: Optional description of the question.\n        - `descriptionContentType`: Content type of the description (`html` or `text`).\n        - `optional`: Whether the question is optional (`boolean`).\n        - `buttonText`: Text displayed on the submit button.\n        - `choices`: An array of choices for the question.\n        - `shuffleOptions`: Whether to shuffle the order of the choices (`boolean`).\n        - `hasOpenChoice`: Whether the question allows an open-ended response (`boolean`).\n        - `branching`: Branching logic for the question. See branching types below for details.\n\n        Branching logic can be one of the following types:\n\n        Next question: Proceeds to the next question\n        ```json\n        {\n            "type": "next_question"\n        }\n        ```\n\n        End: Ends the survey, optionally displaying a confirmation message.\n        ```json\n        {\n            "type": "end"\n        }\n        ```\n\n        Response-based: Branches based on the response values. Available for the `rating` and `single_choice` question types.\n        ```json\n        {\n            "type": "response_based",\n            "responseValues": {\n                "responseKey": "value"\n            }\n        }\n        ```\n\n        Specific question: Proceeds to a specific question by index.\n        ```json\n        {\n            "type": "specific_question",\n            "index": 2\n        }\n        ```\n        ',
                null=True,
            ),
        ),
        migrations.AddField(
            model_name="externaldatajob",
            name="workflow_run_id",
            field=models.CharField(blank=True, max_length=400, null=True),
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "posthog_integration" ADD COLUMN "integration_id" text NULL;\n                    ALTER TABLE "posthog_integration" ADD CONSTRAINT "posthog_integration_kind_id_unique" UNIQUE ("team_id", "kind", "integration_id"); -- existing-table-constraint-ignore\n                    ',
                    reverse_sql='\n                        ALTER TABLE "posthog_integration" DROP COLUMN IF EXISTS "integration_id";\n                        ALTER TABLE "posthog_integration" DROP CONSTRAINT IF EXISTS "posthog_integration_kind_id_unique"; -- existing-table-constraint-ignore\n                    ',
                ),
            ],
            state_operations=[
                migrations.AddField(
                    model_name="integration",
                    name="integration_id",
                    field=models.TextField(blank=True, null=True),
                ),
                migrations.AlterField(
                    model_name="integration",
                    name="kind",
                    field=models.CharField(choices=[("slack", "Slack"), ("salesforce", "Salesforce")], max_length=10),
                ),
                migrations.AddConstraint(
                    model_name="integration",
                    constraint=models.UniqueConstraint(
                        fields=("team", "kind", "integration_id"), name="posthog_integration_kind_id_unique"
                    ),
                ),
            ],
        ),
        migrations.AlterField(
            model_name="integration",
            name="kind",
            field=models.CharField(
                choices=[("slack", "Slack"), ("salesforce", "Salesforce"), ("hubspot", "Hubspot")], max_length=10
            ),
        ),
        migrations.AlterField(
            model_name="externaldatasource",
            name="source_type",
            field=models.CharField(
                choices=[
                    ("Stripe", "Stripe"),
                    ("Hubspot", "Hubspot"),
                    ("Postgres", "Postgres"),
                    ("Zendesk", "Zendesk"),
                    ("Snowflake", "Snowflake"),
                    ("MySQL", "MySQL"),
                ],
                max_length=128,
            ),
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    SET CONSTRAINTS "posthog_plugin_organization_id_d040b9a9_fk_posthog_o" IMMEDIATE; -- existing-table-constraint-ignore\n                    ALTER TABLE "posthog_plugin" DROP CONSTRAINT IF EXISTS "posthog_plugin_organization_id_d040b9a9_fk_posthog_o"; -- existing-table-constraint-ignore\n                    ALTER TABLE "posthog_plugin" ALTER COLUMN "organization_id" DROP NOT NULL;\n                    ALTER TABLE "posthog_plugin" ADD CONSTRAINT "posthog_plugin_organization_id_d040b9a9_fk_posthog_o" FOREIGN KEY ("organization_id") REFERENCES "posthog_organization" ("id") DEFERRABLE INITIALLY DEFERRED; -- existing-table-constraint-ignore\n                    ',
                    reverse_sql='\n                        SET CONSTRAINTS "posthog_plugin_organization_id_d040b9a9_fk_posthog_o" IMMEDIATE; -- existing-table-constraint-ignore\n                        ALTER TABLE "posthog_plugin" DROP CONSTRAINT "posthog_plugin_organization_id_d040b9a9_fk_posthog_o"; -- existing-table-constraint-ignore\n                        ALTER TABLE "posthog_plugin" ALTER COLUMN "organization_id" SET NOT NULL;\n                        ALTER TABLE "posthog_plugin" ADD CONSTRAINT "posthog_plugin_organization_id_d040b9a9_fk_posthog_o" FOREIGN KEY ("organization_id") REFERENCES "posthog_organization" ("id") DEFERRABLE INITIALLY DEFERRED; -- existing-table-constraint-ignore\n                        ',
                ),
            ],
            state_operations=[
                migrations.AlterField(
                    model_name="plugin",
                    name="organization",
                    field=models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="plugins",
                        related_query_name="plugin",
                        to="posthog.organization",
                    ),
                ),
            ],
        ),
        migrations.AlterField(
            model_name="plugin",
            name="plugin_type",
            field=models.CharField(
                blank=True,
                choices=[
                    ("local", "local"),
                    ("custom", "custom"),
                    ("repository", "repository"),
                    ("source", "source"),
                    ("inline", "inline"),
                ],
                default=None,
                max_length=200,
                null=True,
            ),
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "posthog_plugin" ADD CONSTRAINT "posthog_plugin_url_bccac89d_uniq" UNIQUE ("url");  -- existing-table-constraint-ignore\n                    ',
                    reverse_sql='\n                        ALTER TABLE "posthog_plugin" DROP CONSTRAINT IF EXISTS "posthog_plugin_url_bccac89d_uniq";\n                    ',
                ),
                migrations.RunSQL(
                    sql='\n                    CREATE INDEX "posthog_plugin_url_bccac89d_like" ON "posthog_plugin" ("url" varchar_pattern_ops);\n                    ',
                    reverse_sql='\n                        DROP INDEX IF EXISTS "posthog_plugin_url_bccac89d_like";\n                    ',
                ),
            ],
            state_operations=[
                migrations.AlterField(
                    model_name="plugin",
                    name="url",
                    field=models.CharField(blank=True, max_length=800, null=True, unique=True),
                ),
            ],
        ),
        migrations.AddField(
            model_name="externaldataschema",
            name="sync_frequency_interval",
            field=models.DurationField(blank=True, default=datetime.timedelta(seconds=21600), null=True),
        ),
        migrations.RunSQL(
            sql="\n                UPDATE posthog_externaldataschema\n                SET sync_frequency_interval = interval '24 hour'\n                WHERE sync_frequency = 'day';\n            ",
            reverse_sql="",
        ),
        migrations.RunSQL(
            sql="\n                UPDATE posthog_externaldataschema\n                SET sync_frequency_interval = interval '7 day'\n                WHERE sync_frequency = 'week';\n            ",
            reverse_sql="",
        ),
        migrations.RunSQL(
            sql="\n                UPDATE posthog_externaldataschema\n                SET sync_frequency_interval = interval '30 day'\n                WHERE sync_frequency = 'month';\n            ",
            reverse_sql="",
        ),
        migrations.AlterField(
            model_name="externaldataschema",
            name="sync_frequency",
            field=models.CharField(
                blank=True,
                choices=[("day", "Daily"), ("week", "Weekly"), ("month", "Monthly")],
                default="day",
                max_length=128,
                null=True,
            ),
        ),
        migrations.AddField(
            model_name="datawarehousetable",
            name="updated_at",
            field=models.DateTimeField(auto_now=True, null=True),
        ),
        migrations.AddField(
            model_name="externaldatajob",
            name="updated_at",
            field=models.DateTimeField(auto_now=True, null=True),
        ),
        migrations.AddField(
            model_name="externaldataschema",
            name="updated_at",
            field=models.DateTimeField(auto_now=True, null=True),
        ),
        migrations.AddField(
            model_name="externaldatasource",
            name="updated_at",
            field=models.DateTimeField(auto_now=True, null=True),
        ),
        migrations.AlterField(
            model_name="errortrackinggroup",
            name="fingerprint",
            field=django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), size=None),
        ),
        migrations.AlterField(
            model_name="errortrackinggroup",
            name="merged_fingerprints",
            field=django.contrib.postgres.fields.ArrayField(
                base_field=django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), size=None),
                default=list,
                size=None,
            ),
        ),
        migrations.AlterField(
            model_name="datawarehousetable",
            name="format",
            field=models.CharField(
                choices=[
                    ("CSV", "CSV"),
                    ("CSVWithNames", "CSVWithNames"),
                    ("Parquet", "Parquet"),
                    ("JSONEachRow", "JSON"),
                    ("Delta", "Delta"),
                    ("DeltaS3Wrapper", "DeltaS3Wrapper"),
                ],
                max_length=128,
            ),
        ),
        migrations.AlterField(
            model_name="externaldatasource",
            name="source_type",
            field=models.CharField(
                choices=[
                    ("Stripe", "Stripe"),
                    ("Hubspot", "Hubspot"),
                    ("Postgres", "Postgres"),
                    ("Zendesk", "Zendesk"),
                    ("Snowflake", "Snowflake"),
                    ("Salesforce", "Salesforce"),
                    ("MySQL", "MySQL"),
                ],
                max_length=128,
            ),
        ),
        migrations.AddField(
            model_name="hogfunction",
            name="masking",
            field=models.JSONField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="datawarehousejoin",
            name="deleted_at",
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="datawarehousesavedquery",
            name="deleted_at",
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="datawarehousetable",
            name="deleted_at",
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="datawarehouseviewlink",
            name="deleted_at",
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="externaldataschema",
            name="deleted",
            field=models.BooleanField(blank=True, default=False, null=True),
        ),
        migrations.AddField(
            model_name="externaldataschema",
            name="deleted_at",
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="externaldatasource",
            name="deleted",
            field=models.BooleanField(blank=True, default=False, null=True),
        ),
        migrations.AddField(
            model_name="externaldatasource",
            name="deleted_at",
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name="datawarehousejoin",
            name="deleted",
            field=models.BooleanField(blank=True, default=False, null=True),
        ),
        migrations.AlterField(
            model_name="datawarehousesavedquery",
            name="deleted",
            field=models.BooleanField(blank=True, default=False, null=True),
        ),
        migrations.AlterField(
            model_name="datawarehousetable",
            name="deleted",
            field=models.BooleanField(blank=True, default=False, null=True),
        ),
        migrations.AlterField(
            model_name="datawarehouseviewlink",
            name="deleted",
            field=models.BooleanField(blank=True, default=False, null=True),
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "posthog_insightviewed" ALTER COLUMN "team_id" DROP NOT NULL;\n                    ',
                    reverse_sql='\n                    ALTER TABLE "posthog_insightviewed" ALTER COLUMN "team_id" SET NOT NULL;\n                    ',
                ),
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "posthog_insightviewed" ALTER COLUMN "user_id" DROP NOT NULL;\n                    ',
                    reverse_sql='\n                    ALTER TABLE "posthog_insightviewed" ALTER COLUMN "user_id" SET NOT NULL;\n                    ',
                ),
            ],
            state_operations=[
                migrations.AlterField(
                    model_name="insightviewed",
                    name="team",
                    field=models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to="posthog.team"
                    ),
                ),
                migrations.AlterField(
                    model_name="insightviewed",
                    name="user",
                    field=models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="AlertConfiguration",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "id",
                    models.UUIDField(
                        default=posthog.models.utils.UUIDT, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("name", models.CharField(blank=True, max_length=255)),
                ("condition", models.JSONField(default=dict)),
                (
                    "state",
                    models.CharField(
                        choices=[("firing", "Firing"), ("inactive", "Inactive")], default="inactive", max_length=10
                    ),
                ),
                ("enabled", models.BooleanField(default=True)),
                ("last_notified_at", models.DateTimeField(blank=True, null=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL
                    ),
                ),
                ("insight", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.insight")),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Threshold",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "id",
                    models.UUIDField(
                        default=posthog.models.utils.UUIDT, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("name", models.CharField(blank=True, max_length=255)),
                ("configuration", models.JSONField(default=dict)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL
                    ),
                ),
                ("insight", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.insight")),
                ("team", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.team")),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="AlertSubscription",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "id",
                    models.UUIDField(
                        default=posthog.models.utils.UUIDT, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("subscribed", models.BooleanField(default=True)),
                (
                    "alert_configuration",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.alertconfiguration"),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        limit_choices_to={
                            "is_active": True,
                            "organization_id": django.db.models.expressions.OuterRef(
                                "alert_configuration__team__organization_id"
                            ),
                        },
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="alert_subscriptions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "unique_together": {("user", "alert_configuration")},
            },
        ),
        migrations.AddField(
            model_name="alertconfiguration",
            name="subscribed_users",
            field=models.ManyToManyField(
                related_name="alert_configurations", through="posthog.AlertSubscription", to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AddField(
            model_name="alertconfiguration",
            name="team",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.team"),
        ),
        migrations.AddField(
            model_name="alertconfiguration",
            name="threshold",
            field=models.ForeignKey(
                blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to="posthog.threshold"
            ),
        ),
        migrations.CreateModel(
            name="AlertCheck",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=posthog.models.utils.UUIDT, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("calculated_value", models.FloatField(blank=True, null=True)),
                ("condition", models.JSONField(default=dict)),
                ("targets_notified", models.JSONField(default=dict)),
                ("error", models.JSONField(blank=True, null=True)),
                (
                    "state",
                    models.CharField(
                        choices=[("firing", "Firing"), ("not_met", "Not Met")], default="not_met", max_length=10
                    ),
                ),
                (
                    "alert_configuration",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.alertconfiguration"),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AlterField(
            model_name="externaldatasource",
            name="source_type",
            field=models.CharField(
                choices=[
                    ("Stripe", "Stripe"),
                    ("Hubspot", "Hubspot"),
                    ("Postgres", "Postgres"),
                    ("Zendesk", "Zendesk"),
                    ("Snowflake", "Snowflake"),
                    ("Salesforce", "Salesforce"),
                    ("MySQL", "MySQL"),
                    ("MSSQL", "MSSQL"),
                ],
                max_length=128,
            ),
        ),
        migrations.RunSQL(
            sql="CREATE EXTENSION ltree;",
            reverse_sql="DROP EXTENSION ltree;",
        ),
        migrations.CreateModel(
            name="DataWarehouseModelPath",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                (
                    "id",
                    models.UUIDField(
                        default=posthog.models.utils.UUIDT, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("path", posthog.warehouse.models.modeling.LabelTreeField()),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL
                    ),
                ),
                (
                    "saved_query",
                    models.ForeignKey(
                        default=None,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="posthog.datawarehousesavedquery",
                    ),
                ),
                (
                    "table",
                    models.ForeignKey(
                        default=None,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="posthog.datawarehousetable",
                    ),
                ),
                ("team", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.team")),
            ],
            options={
                "indexes": [
                    models.Index(fields=["team_id", "path"], name="team_id_path"),
                    models.Index(fields=["team_id", "saved_query_id"], name="team_id_saved_query_id"),
                    django.contrib.postgres.indexes.GistIndex(models.F("path"), name="model_path_path"),
                ],
            },
        ),
        migrations.AddConstraint(
            model_name="datawarehousemodelpath",
            constraint=models.UniqueConstraint(
                deferrable=django.db.models.constraints.Deferrable["IMMEDIATE"],
                fields=("team_id", "path"),
                name="unique_team_id_path",
            ),
        ),
        migrations.AlterField(
            model_name="externaldatasource",
            name="source_type",
            field=models.CharField(
                choices=[
                    ("Stripe", "Stripe"),
                    ("Hubspot", "Hubspot"),
                    ("Postgres", "Postgres"),
                    ("Zendesk", "Zendesk"),
                    ("Snowflake", "Snowflake"),
                    ("Salesforce", "Salesforce"),
                    ("MySQL", "MySQL"),
                    ("MSSQL", "MSSQL"),
                    ("Vitally", "Vitally"),
                ],
                max_length=128,
            ),
        ),
        migrations.AlterField(
            model_name="integration",
            name="kind",
            field=models.CharField(
                choices=[
                    ("slack", "Slack"),
                    ("salesforce", "Salesforce"),
                    ("hubspot", "Hubspot"),
                    ("google-pubsub", "Google Pubsub"),
                ],
                max_length=20,
            ),
        ),
        migrations.AddField(
            model_name="datawarehousesavedquery",
            name="last_run_at",
            field=models.DateTimeField(help_text="The timestamp of this SavedQuery's last run (if any).", null=True),
        ),
        migrations.AddField(
            model_name="datawarehousesavedquery",
            name="status",
            field=models.CharField(
                choices=[
                    ("Cancelled", "Cancelled"),
                    ("Completed", "Completed"),
                    ("Failed", "Failed"),
                    ("Running", "Running"),
                ],
                help_text="The status of when this SavedQuery last ran.",
                max_length=64,
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="integration",
            name="kind",
            field=models.CharField(
                choices=[
                    ("slack", "Slack"),
                    ("salesforce", "Salesforce"),
                    ("hubspot", "Hubspot"),
                    ("google-pubsub", "Google Pubsub"),
                    ("google-cloud-storage", "Google Cloud Storage"),
                ],
                max_length=20,
            ),
        ),
        migrations.CreateModel(
            name="WebExperiment",
            fields=[],
            options={
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("posthog.experiment",),
        ),
        migrations.AddField(
            model_name="experiment",
            name="type",
            field=models.CharField(
                blank=True,
                choices=[("web", "web"), ("product", "product")],
                default="product",
                max_length=40,
                null=True,
            ),
        ),
        migrations.AddField(
            model_name="experiment",
            name="variants",
            field=models.JSONField(blank=True, default=dict, null=True),
        ),
        migrations.AddField(
            model_name="experiment",
            name="metrics",
            field=models.JSONField(blank=True, default=list, null=True),
        ),
        migrations.AddField(
            model_name="dashboardtemplate",
            name="availability_contexts",
            field=django.contrib.postgres.fields.ArrayField(
                base_field=models.CharField(max_length=255), blank=True, null=True, size=None
            ),
        ),
        migrations.AddField(
            model_name="hogfunction",
            name="encrypted_inputs",
            field=posthog.helpers.encrypted_fields.EncryptedJSONStringField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name="externaldatasource",
            name="source_type",
            field=models.CharField(
                choices=[
                    ("Stripe", "Stripe"),
                    ("Hubspot", "Hubspot"),
                    ("Postgres", "Postgres"),
                    ("Zendesk", "Zendesk"),
                    ("Snowflake", "Snowflake"),
                    ("Salesforce", "Salesforce"),
                    ("MySQL", "MySQL"),
                    ("MSSQL", "MSSQL"),
                    ("Vitally", "Vitally"),
                    ("BigQuery", "BigQuery"),
                ],
                max_length=128,
            ),
        ),
        migrations.AlterField(
            model_name="integration",
            name="sensitive_config",
            field=posthog.helpers.encrypted_fields.EncryptedJSONField(default=dict),
        ),
        migrations.CreateModel(
            name="InsightVariable",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                (
                    "id",
                    models.UUIDField(
                        default=posthog.models.utils.UUIDT, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("name", models.CharField(max_length=400)),
                (
                    "type",
                    models.CharField(
                        choices=[("String", "String"), ("Number", "Number"), ("Boolean", "Boolean"), ("List", "List")],
                        max_length=128,
                    ),
                ),
                ("default_value", models.JSONField(blank=True, null=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL
                    ),
                ),
                ("team", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.team")),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="insightvariable",
            name="code_name",
            field=models.CharField(blank=True, default=None, max_length=400, null=True),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name="alertconfiguration",
            name="calculation_interval",
            field=models.CharField(
                blank=True,
                choices=[
                    (posthog.schema.AlertCalculationInterval["HOURLY"], "hourly"),
                    (posthog.schema.AlertCalculationInterval["DAILY"], "daily"),
                    (posthog.schema.AlertCalculationInterval["WEEKLY"], "weekly"),
                    (posthog.schema.AlertCalculationInterval["MONTHLY"], "monthly"),
                ],
                default=posthog.schema.AlertCalculationInterval["DAILY"],
                max_length=10,
                null=True,
            ),
        ),
        migrations.AddField(
            model_name="alertconfiguration",
            name="config",
            field=models.JSONField(blank=True, default=dict, null=True),
        ),
        migrations.AddField(
            model_name="alertconfiguration",
            name="is_calculating",
            field=models.BooleanField(blank=True, default=False, null=True),
        ),
        migrations.AddField(
            model_name="alertconfiguration",
            name="last_checked_at",
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="alertconfiguration",
            name="next_check_at",
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name="alertcheck",
            name="state",
            field=models.CharField(
                choices=[
                    (posthog.schema.AlertState["FIRING"], posthog.schema.AlertState["FIRING"]),
                    (posthog.schema.AlertState["NOT_FIRING"], posthog.schema.AlertState["NOT_FIRING"]),
                    (posthog.schema.AlertState["ERRORED"], posthog.schema.AlertState["ERRORED"]),
                ],
                default=posthog.schema.AlertState["NOT_FIRING"],
                max_length=10,
            ),
        ),
        migrations.AlterField(
            model_name="alertconfiguration",
            name="state",
            field=models.CharField(
                choices=[
                    (posthog.schema.AlertState["FIRING"], posthog.schema.AlertState["FIRING"]),
                    (posthog.schema.AlertState["NOT_FIRING"], posthog.schema.AlertState["NOT_FIRING"]),
                    (posthog.schema.AlertState["ERRORED"], posthog.schema.AlertState["ERRORED"]),
                ],
                default=posthog.schema.AlertState["NOT_FIRING"],
                max_length=10,
            ),
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "posthog_datawarehousesavedquery" ADD COLUMN "table_id" uuid NULL CONSTRAINT "posthog_datawarehous_table_id_96fdb4f5_fk_posthog_d" REFERENCES "posthog_datawarehousetable"("id") DEFERRABLE INITIALLY DEFERRED; -- existing-table-constraint-ignore\n                    SET CONSTRAINTS "posthog_datawarehous_table_id_96fdb4f5_fk_posthog_d" IMMEDIATE; -- existing-table-constraint-ignore\n                    ',
                    reverse_sql='\n                    ALTER TABLE "posthog_datawarehousesavedquery" DROP COLUMN IF EXISTS "table_id";\n                    ',
                ),
                migrations.RunSQL(
                    sql='\n                    CREATE INDEX "posthog_datawarehousesavedquery_table_id_96fdb4f5" ON "posthog_datawarehousesavedquery" ("table_id");\n                    ',
                    reverse_sql='\n                    DROP INDEX IF EXISTS "posthog_datawarehousesavedquery_table_id_96fdb4f5";\n                    ',
                ),
            ],
            state_operations=[
                migrations.AddField(
                    model_name="datawarehousesavedquery",
                    name="table",
                    field=models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="posthog.datawarehousetable",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ProductIntent",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=posthog.models.utils.UUIDT, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("product_type", models.CharField(max_length=255)),
                ("onboarding_completed_at", models.DateTimeField(blank=True, null=True)),
                ("team", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.team")),
            ],
            options={
                "unique_together": {("team", "product_type")},
            },
        ),
        migrations.AlterField(
            model_name="datawarehousesavedquery",
            name="status",
            field=models.CharField(
                choices=[
                    ("Cancelled", "Cancelled"),
                    ("Modified", "Modified"),
                    ("Completed", "Completed"),
                    ("Failed", "Failed"),
                    ("Running", "Running"),
                ],
                help_text="The status of when this SavedQuery last ran.",
                max_length=64,
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="integration",
            name="kind",
            field=models.CharField(
                choices=[
                    ("slack", "Slack"),
                    ("salesforce", "Salesforce"),
                    ("hubspot", "Hubspot"),
                    ("google-pubsub", "Google Pubsub"),
                    ("google-cloud-storage", "Google Cloud Storage"),
                    ("google-ads", "Google Ads"),
                    ("snapchat", "Snapchat"),
                ],
                max_length=20,
            ),
        ),
        migrations.AddField(
            model_name="alertconfiguration",
            name="snoozed_until",
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name="alertcheck",
            name="state",
            field=models.CharField(
                choices=[
                    (posthog.schema.AlertState["FIRING"], posthog.schema.AlertState["FIRING"]),
                    (posthog.schema.AlertState["NOT_FIRING"], posthog.schema.AlertState["NOT_FIRING"]),
                    (posthog.schema.AlertState["ERRORED"], posthog.schema.AlertState["ERRORED"]),
                    (posthog.schema.AlertState["SNOOZED"], posthog.schema.AlertState["SNOOZED"]),
                ],
                default=posthog.schema.AlertState["NOT_FIRING"],
                max_length=10,
            ),
        ),
        migrations.AlterField(
            model_name="alertconfiguration",
            name="state",
            field=models.CharField(
                choices=[
                    (posthog.schema.AlertState["FIRING"], posthog.schema.AlertState["FIRING"]),
                    (posthog.schema.AlertState["NOT_FIRING"], posthog.schema.AlertState["NOT_FIRING"]),
                    (posthog.schema.AlertState["ERRORED"], posthog.schema.AlertState["ERRORED"]),
                    (posthog.schema.AlertState["SNOOZED"], posthog.schema.AlertState["SNOOZED"]),
                ],
                default=posthog.schema.AlertState["NOT_FIRING"],
                max_length=10,
            ),
        ),
        migrations.AddField(
            model_name="insightvariable",
            name="values",
            field=models.JSONField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name="batchexportbackfill",
            name="start_at",
            field=models.DateTimeField(help_text="The start of the data interval.", null=True),
        ),
        migrations.AlterField(
            model_name="batchexportrun",
            name="data_interval_start",
            field=models.DateTimeField(help_text="The start of the data interval.", null=True),
        ),
        migrations.CreateModel(
            name="ExperimentHoldout",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=400)),
                ("description", models.CharField(blank=True, max_length=400, null=True)),
                ("filters", models.JSONField(default=list)),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL
                    ),
                ),
                ("team", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.team")),
            ],
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "posthog_experiment" ADD COLUMN "holdout_id" integer NULL CONSTRAINT "posthog_experiment_holdout_id_ffd173dd_fk_posthog_e" REFERENCES "posthog_experimentholdout"("id") DEFERRABLE INITIALLY DEFERRED; -- existing-table-constraint-ignore\n                    SET CONSTRAINTS "posthog_experiment_holdout_id_ffd173dd_fk_posthog_e" IMMEDIATE; -- existing-table-constraint-ignore\n                    ',
                    reverse_sql='\n                        ALTER TABLE "posthog_experiment" DROP COLUMN IF EXISTS "holdout_id";\n                    ',
                ),
                migrations.RunSQL(
                    sql='\n                    CREATE INDEX "posthog_experiment_holdout_id_ffd173dd_fk_posthog_e" ON "posthog_experiment" ("holdout_id");\n                    ',
                    reverse_sql='\n                        DROP INDEX IF EXISTS "posthog_experiment_holdout_id_ffd173dd_fk_posthog_e";\n                    ',
                ),
            ],
            state_operations=[
                migrations.AddField(
                    model_name="experiment",
                    name="holdout",
                    field=models.ForeignKey(
                        null=True, on_delete=django.db.models.deletion.SET_NULL, to="posthog.experimentholdout"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ErrorTrackingIssueFingerprint",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("fingerprint", models.TextField()),
                ("version", models.BigIntegerField(blank=True, default=0)),
                (
                    "issue",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.errortrackinggroup"),
                ),
                (
                    "team",
                    models.ForeignKey(db_index=False, on_delete=django.db.models.deletion.CASCADE, to="posthog.team"),
                ),
            ],
        ),
        migrations.AddConstraint(
            model_name="errortrackingissuefingerprint",
            constraint=models.UniqueConstraint(fields=("team", "fingerprint"), name="unique fingerprint for team"),
        ),
        migrations.AddField(
            model_name="hogfunction",
            name="type",
            field=models.CharField(
                blank=True,
                choices=[
                    ("destination", "Destination"),
                    ("email", "Email"),
                    ("sms", "Sms"),
                    ("push", "Push"),
                    ("activity", "Activity"),
                    ("alert", "Alert"),
                    ("broadcast", "Broadcast"),
                ],
                max_length=24,
                null=True,
            ),
        ),
        migrations.RunSQL(
            sql="UPDATE posthog_hogfunction SET type = 'destination' WHERE type IS NULL",
            reverse_sql="SELECT 1",
        ),
        migrations.CreateModel(
            name="ErrorTrackingSymbolSet",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=posthog.models.utils.UUIDT, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("ref", models.TextField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("storage_ptr", models.TextField(null=True)),
                ("team", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.team")),
            ],
        ),
        migrations.CreateModel(
            name="ErrorTrackingStackFrame",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=posthog.models.utils.UUIDT, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("raw_id", models.TextField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("contents", models.JSONField()),
                ("resolved", models.BooleanField()),
                (
                    "symbol_set",
                    models.ForeignKey(
                        null=True, on_delete=django.db.models.deletion.CASCADE, to="posthog.errortrackingsymbolset"
                    ),
                ),
                ("team", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.team")),
            ],
        ),
        migrations.AddIndex(
            model_name="errortrackingsymbolset",
            index=models.Index(fields=["team_id", "ref"], name="posthog_err_team_id_927574_idx"),
        ),
        migrations.AddConstraint(
            model_name="errortrackingsymbolset",
            constraint=models.UniqueConstraint(fields=("team_id", "ref"), name="unique_ref_per_team"),
        ),
        migrations.AddIndex(
            model_name="errortrackingstackframe",
            index=models.Index(fields=["team_id", "raw_id"], name="posthog_err_team_id_dc6a7f_idx"),
        ),
        migrations.AddConstraint(
            model_name="errortrackingstackframe",
            constraint=models.UniqueConstraint(fields=("team_id", "raw_id"), name="unique_raw_id_per_team"),
        ),
        migrations.RunPython(
            code=migration_0501_create_billing_team_group,
            reverse_code=migration_0501_reverse_create_billing_team_group,
        ),
        migrations.CreateModel(
            name="ExperimentSavedMetric",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=400)),
                ("description", models.CharField(blank=True, max_length=400, null=True)),
                ("query", models.JSONField()),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL
                    ),
                ),
                ("team", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.team")),
            ],
        ),
        migrations.CreateModel(
            name="ExperimentToSavedMetric",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("metadata", models.JSONField(default=dict)),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("experiment", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.experiment")),
                (
                    "saved_metric",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.experimentsavedmetric"),
                ),
            ],
        ),
        migrations.AddField(
            model_name="experiment",
            name="saved_metrics",
            field=models.ManyToManyField(
                blank=True,
                related_name="experiments",
                through="posthog.ExperimentToSavedMetric",
                to="posthog.experimentsavedmetric",
            ),
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "posthog_grouptypemapping" ADD COLUMN "project_id" bigint NULL CONSTRAINT "posthog_grouptypemap_project_id_239c0515_fk_posthog_p" REFERENCES "posthog_project"("id") DEFERRABLE INITIALLY DEFERRED;\n                    SET CONSTRAINTS "posthog_grouptypemap_project_id_239c0515_fk_posthog_p" IMMEDIATE;',
                    reverse_sql='\n                    ALTER TABLE "posthog_grouptypemapping" DROP COLUMN IF EXISTS "project_id";',
                ),
                migrations.RunSQL(
                    sql='\n                    CREATE INDEX "posthog_grouptypemapping_project_id_239c0515" ON "posthog_grouptypemapping" ("project_id");',
                    reverse_sql='\n                    DROP INDEX IF EXISTS "posthog_grouptypemapping_project_id_239c0515";',
                ),
            ],
            state_operations=[
                migrations.AddField(
                    model_name="grouptypemapping",
                    name="project",
                    field=models.ForeignKey(
                        null=True, on_delete=django.db.models.deletion.CASCADE, to="posthog.project"
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="productintent",
            name="activated_at",
            field=models.DateTimeField(
                blank=True,
                help_text="The date the org completed activation for the product. Generally only used to know if we should continue updating the product_intent row.",
                null=True,
            ),
        ),
        migrations.AddField(
            model_name="productintent",
            name="activation_last_checked_at",
            field=models.DateTimeField(
                blank=True,
                help_text="The date we last checked if the org had completed activation for the product.",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="externaldatasource",
            name="source_type",
            field=models.CharField(
                choices=[
                    ("Stripe", "Stripe"),
                    ("Hubspot", "Hubspot"),
                    ("Postgres", "Postgres"),
                    ("Zendesk", "Zendesk"),
                    ("Snowflake", "Snowflake"),
                    ("Salesforce", "Salesforce"),
                    ("MySQL", "MySQL"),
                    ("MSSQL", "MSSQL"),
                    ("Vitally", "Vitally"),
                    ("BigQuery", "BigQuery"),
                    ("Chargebee", "Chargebee"),
                ],
                max_length=128,
            ),
        ),
        migrations.AddField(
            model_name="project",
            name="product_description",
            field=models.TextField(blank=True, max_length=1000, null=True),
        ),
        migrations.AddField(
            model_name="errortrackingsymbolset",
            name="failure_reason",
            field=models.TextField(blank=True, null=True),
        ),
        migrations.RunSQL(
            sql="UPDATE posthog_grouptypemapping SET project_id = team_id;",
            reverse_sql="",
        ),
        django.contrib.postgres.operations.AddConstraintNotValid(
            model_name="grouptypemapping",
            constraint=models.CheckConstraint(
                check=models.Q(("project_id__isnull", False)), name="group_type_project_id_is_not_null"
            ),
        ),
        migrations.AddIndex(
            model_name="grouptypemapping",
            index=models.Index(fields=["project", "group_type"], name="posthog_group_type_proj_idx"),
        ),
        migrations.AddIndex(
            model_name="grouptypemapping",
            index=models.Index(fields=["project", "group_type_index"], name="posthog_group_type_i_proj_idx"),
        ),
        migrations.CreateModel(
            name="ErrorTrackingIssue",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=posthog.models.utils.UUIDT, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "status",
                    models.TextField(
                        choices=[
                            ("archived", "Archived"),
                            ("active", "Active"),
                            ("resolved", "Resolved"),
                            ("pending_release", "Pending release"),
                        ],
                        default="active",
                    ),
                ),
                ("team", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.team")),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ErrorTrackingIssueFingerprintV2",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=posthog.models.utils.UUIDT, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("fingerprint", models.TextField()),
                ("version", models.BigIntegerField(blank=True, default=0)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "issue",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.errortrackingissue"),
                ),
                ("team", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.team")),
            ],
        ),
        migrations.CreateModel(
            name="ErrorTrackingIssueAssignment",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=posthog.models.utils.UUIDT, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("issue_id", models.UUIDField()),
                (
                    "user",
                    models.ForeignKey(
                        null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
        ),
        migrations.AddConstraint(
            model_name="errortrackingissuefingerprintv2",
            constraint=models.UniqueConstraint(fields=("team", "fingerprint"), name="unique_fingerprint_for_team"),
        ),
        migrations.AlterField(
            model_name="dashboardtemplate",
            name="github_url",
            field=models.CharField(blank=True, max_length=8201, null=True),
        ),
        migrations.AddField(
            model_name="errortrackingstackframe",
            name="context",
            field=models.TextField(blank=True, null=True),
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                django.contrib.postgres.operations.ValidateConstraint(
                    model_name="grouptypemapping",
                    name="group_type_project_id_is_not_null",
                ),
                migrations.RunSQL(
                    sql='ALTER TABLE "posthog_grouptypemapping" ADD CONSTRAINT "unique group types for project" UNIQUE ("project_id", "group_type"); -- existing-table-constraint-ignore',
                    reverse_sql='ALTER TABLE "posthog_grouptypemapping" DROP CONSTRAINT "unique group types for project";',
                ),
                migrations.RunSQL(
                    sql='ALTER TABLE "posthog_grouptypemapping" ADD CONSTRAINT "unique event column indexes for project" UNIQUE ("project_id", "group_type_index"); -- existing-table-constraint-ignore',
                    reverse_sql='ALTER TABLE "posthog_grouptypemapping" DROP CONSTRAINT "unique event column indexes for project";',
                ),
            ],
            state_operations=[
                migrations.AlterField(
                    model_name="grouptypemapping",
                    name="project",
                    field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.project"),
                ),
                migrations.AddConstraint(
                    model_name="grouptypemapping",
                    constraint=models.UniqueConstraint(
                        fields=("project", "group_type"), name="unique group types for project"
                    ),
                ),
                migrations.AddConstraint(
                    model_name="grouptypemapping",
                    constraint=models.UniqueConstraint(
                        fields=("project", "group_type_index"), name="unique event column indexes for project"
                    ),
                ),
            ],
        ),
        migrations.RemoveConstraint(
            model_name="grouptypemapping",
            name="unique group types for team",
        ),
        migrations.RemoveConstraint(
            model_name="grouptypemapping",
            name="unique event column indexes for team",
        ),
        migrations.AddField(
            model_name="survey",
            name="response_sampling_daily_limits",
            field=models.JSONField(null=True),
        ),
        migrations.AddField(
            model_name="survey",
            name="response_sampling_interval",
            field=models.PositiveIntegerField(null=True),
        ),
        migrations.AddField(
            model_name="survey",
            name="response_sampling_interval_type",
            field=models.CharField(
                blank=True,
                choices=[("day", "day"), ("week", "week"), ("month", "month")],
                default="week",
                max_length=6,
                null=True,
            ),
        ),
        migrations.AddField(
            model_name="survey",
            name="response_sampling_limit",
            field=models.PositiveIntegerField(null=True),
        ),
        migrations.AddField(
            model_name="survey",
            name="response_sampling_start_date",
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                ALTER TABLE "posthog_survey" ADD COLUMN "internal_response_sampling_flag_id" integer NULL CONSTRAINT "posthog_survey_internal_response_sa_e682f708_fk_posthog_f" REFERENCES "posthog_featureflag"("id") DEFERRABLE INITIALLY DEFERRED; -- existing-table-constraint-ignore\n                SET CONSTRAINTS "posthog_survey_internal_response_sa_e682f708_fk_posthog_f" IMMEDIATE; -- existing-table-constraint-ignore\n                ',
                    reverse_sql='\n                    ALTER TABLE "posthog_survey" DROP COLUMN IF EXISTS "internal_response_sampling_flag_id";\n                ',
                ),
                migrations.RunSQL(
                    sql='\n                    CREATE INDEX "posthog_survey_internal_response_sampling_flag_id_e682f708" ON "posthog_survey" ("internal_response_sampling_flag_id")\n                    ',
                    reverse_sql='\n                       DROP INDEX IF EXISTS "posthog_survey_internal_response_sampling_flag_id_e682f708";\n                   ',
                ),
            ],
            state_operations=[
                migrations.AddField(
                    model_name="survey",
                    name="internal_response_sampling_flag",
                    field=models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="surveys_internal_response_sampling_flag",
                        related_query_name="surveys_internal_response_sampling_flag",
                        to="posthog.featureflag",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="errortrackingissue",
            name="description",
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="errortrackingissue",
            name="name",
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="experiment",
            name="metrics_secondary",
            field=models.JSONField(blank=True, default=list, null=True),
        ),
        migrations.AlterField(
            model_name="errortrackingstackframe",
            name="context",
            field=models.JSONField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="errortrackingsymbolset",
            name="content_hash",
            field=models.TextField(null=True),
        ),
        migrations.AddField(
            model_name="datawarehousejoin",
            name="configuration",
            field=models.JSONField(default=dict, null=True),
        ),
        migrations.AddField(
            model_name="hogfunction",
            name="transpiled",
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name="hogfunction",
            name="type",
            field=models.CharField(
                blank=True,
                choices=[
                    ("destination", "Destination"),
                    ("site_destination", "Site Destination"),
                    ("site_app", "Site App"),
                    ("email", "Email"),
                    ("sms", "Sms"),
                    ("push", "Push"),
                    ("activity", "Activity"),
                    ("alert", "Alert"),
                    ("broadcast", "Broadcast"),
                ],
                max_length=24,
                null=True,
            ),
        ),
        migrations.AddIndex(
            model_name="hogfunction",
            index=models.Index(fields=["type", "enabled", "team"], name="posthog_hog_type_6f8967_idx"),
        ),
        migrations.CreateModel(
            name="RemoteConfig",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=posthog.models.utils.UUIDT, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("config", models.JSONField()),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("synced_at", models.DateTimeField(null=True)),
                ("team", models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to="posthog.team")),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.RunSQL(
            sql="\n            UPDATE posthog_project AS proj\n            SET name = team.name\n            FROM posthog_team AS team\n            WHERE proj.id = team.project_id AND proj.name != team.name",
            reverse_sql="",
        ),
        migrations.RunSQL(
            sql='\n            -- Add field project to eventdefinition\n            ALTER TABLE "posthog_eventdefinition" ADD COLUMN "project_id" bigint NULL CONSTRAINT "posthog_eventdefinit_project_id_f93fcbb0_fk_posthog_p" REFERENCES "posthog_project"("id") DEFERRABLE INITIALLY DEFERRED;\n            SET CONSTRAINTS "posthog_eventdefinit_project_id_f93fcbb0_fk_posthog_p" IMMEDIATE;\n            -- Add field project to eventproperty\n            ALTER TABLE "posthog_eventproperty" ADD COLUMN "project_id" bigint NULL CONSTRAINT "posthog_eventproperty_project_id_dd2337d2_fk_posthog_project_id" REFERENCES "posthog_project"("id") DEFERRABLE INITIALLY DEFERRED;\n            SET CONSTRAINTS "posthog_eventproperty_project_id_dd2337d2_fk_posthog_project_id" IMMEDIATE;\n            -- Add field project to propertydefinition\n            ALTER TABLE "posthog_propertydefinition" ADD COLUMN "project_id" bigint NULL CONSTRAINT "posthog_propertydefi_project_id_d3eb982d_fk_posthog_p" REFERENCES "posthog_project"("id") DEFERRABLE INITIALLY DEFERRED;\n            SET CONSTRAINTS "posthog_propertydefi_project_id_d3eb982d_fk_posthog_p" IMMEDIATE;',
            reverse_sql='\n            ALTER TABLE "posthog_eventdefinition" DROP COLUMN IF EXISTS "project_id";\n            ALTER TABLE "posthog_eventproperty" DROP COLUMN IF EXISTS "project_id";\n            ALTER TABLE "posthog_propertydefinition" DROP COLUMN IF EXISTS "project_id";',
            state_operations=[
                migrations.AddField(
                    model_name="eventdefinition",
                    name="project",
                    field=models.ForeignKey(
                        null=True, on_delete=django.db.models.deletion.CASCADE, to="posthog.project"
                    ),
                ),
                migrations.AddField(
                    model_name="eventproperty",
                    name="project",
                    field=models.ForeignKey(
                        null=True, on_delete=django.db.models.deletion.CASCADE, to="posthog.project"
                    ),
                ),
                migrations.AddField(
                    model_name="propertydefinition",
                    name="project",
                    field=models.ForeignKey(
                        null=True, on_delete=django.db.models.deletion.CASCADE, to="posthog.project"
                    ),
                ),
            ],
        ),
        migrations.AddIndex(
            model_name="eventdefinition",
            index=models.Index(fields=["project"], name="posthog_eve_proj_id_f93fcbb0"),
        ),
        migrations.AddIndex(
            model_name="propertydefinition",
            index=models.Index(fields=["project"], name="posthog_prop_proj_id_d3eb982d"),
        ),
        migrations.AddIndex(
            model_name="propertydefinition",
            index=models.Index(
                models.F("project_id"),
                models.F("type"),
                django.db.models.functions.comparison.Coalesce(models.F("group_type_index"), -1),
                models.OrderBy(models.F("query_usage_30_day"), descending=True, nulls_last=True),
                models.OrderBy(models.F("name")),
                name="index_property_def_query_proj",
            ),
        ),
        migrations.AddIndex(
            model_name="propertydefinition",
            index=models.Index(fields=["project_id", "type", "is_numerical"], name="posthog_pro_project_3583d2_idx"),
        ),
        migrations.AddIndex(
            model_name="eventproperty",
            index=models.Index(fields=["project"], name="posthog_eve_proj_id_dd2337d2"),
        ),
        migrations.AddIndex(
            model_name="eventproperty",
            index=models.Index(fields=["project", "event"], name="posthog_eve_proj_id_22de03_idx"),
        ),
        migrations.AddIndex(
            model_name="eventproperty",
            index=models.Index(fields=["project", "property"], name="posthog_eve_proj_id_26dbfb_idx"),
        ),
        migrations.AddField(
            model_name="hogfunction",
            name="mappings",
            field=models.JSONField(blank=True, null=True),
        ),
        migrations.RunPython(
            code=migration_0530_update_filters_to_queries,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.AlterField(
            model_name="hogfunction",
            name="type",
            field=models.CharField(
                blank=True,
                choices=[
                    ("destination", "Destination"),
                    ("site_destination", "Site Destination"),
                    ("site_app", "Site App"),
                    ("transformation", "Transformation"),
                    ("email", "Email"),
                    ("sms", "Sms"),
                    ("push", "Push"),
                    ("activity", "Activity"),
                    ("alert", "Alert"),
                    ("broadcast", "Broadcast"),
                ],
                max_length=24,
                null=True,
            ),
        ),
        migrations.RunSQL(
            sql="\n            DELETE FROM posthog_propertydefinition\n            WHERE team_id IN (\n                SELECT id FROM posthog_team WHERE id != project_id\n            );",
            reverse_sql="",
        ),
        migrations.RunSQL(
            sql="\n            DELETE FROM posthog_eventdefinition\n            WHERE team_id IN (\n                SELECT id FROM posthog_team WHERE id != project_id\n            );",
            reverse_sql="",
        ),
        migrations.RunSQL(
            sql="\n            DELETE FROM posthog_eventproperty\n            WHERE team_id IN (\n                SELECT id FROM posthog_team WHERE id != project_id\n            );",
            reverse_sql="",
        ),
        migrations.RemoveIndex(
            model_name="eventproperty",
            name="posthog_eve_proj_id_22de03_idx",
        ),
        migrations.RemoveIndex(
            model_name="eventproperty",
            name="posthog_eve_proj_id_26dbfb_idx",
        ),
        migrations.RemoveIndex(
            model_name="propertydefinition",
            name="index_property_def_query_proj",
        ),
        migrations.RemoveIndex(
            model_name="propertydefinition",
            name="posthog_pro_project_3583d2_idx",
        ),
        migrations.AddIndex(
            model_name="eventproperty",
            index=models.Index(
                django.db.models.functions.comparison.Coalesce(models.F("project_id"), models.F("team_id")),
                models.F("event"),
                name="posthog_eve_proj_id_22de03_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="eventproperty",
            index=models.Index(
                django.db.models.functions.comparison.Coalesce(models.F("project_id"), models.F("team_id")),
                models.F("property"),
                name="posthog_eve_proj_id_26dbfb_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="propertydefinition",
            index=models.Index(
                django.db.models.functions.comparison.Coalesce(models.F("project_id"), models.F("team_id")),
                models.F("type"),
                django.db.models.functions.comparison.Coalesce(models.F("group_type_index"), -1),
                models.OrderBy(models.F("query_usage_30_day"), descending=True, nulls_last=True),
                models.OrderBy(models.F("name")),
                name="index_property_def_query_proj",
            ),
        ),
        migrations.AddIndex(
            model_name="propertydefinition",
            index=models.Index(
                django.db.models.functions.comparison.Coalesce(models.F("project_id"), models.F("team_id")),
                models.F("type"),
                models.F("is_numerical"),
                name="posthog_pro_project_3583d2_idx",
            ),
        ),
        migrations.AddConstraint(
            model_name="eventdefinition",
            constraint=posthog.models.utils.UniqueConstraintByExpression(
                concurrently=False,
                expression="(coalesce(project_id, team_id), name)",
                name="event_definition_proj_uniq",
            ),
        ),
        migrations.AddConstraint(
            model_name="eventproperty",
            constraint=posthog.models.utils.UniqueConstraintByExpression(
                concurrently=False,
                expression="(coalesce(project_id, team_id), event, property)",
                name="posthog_event_property_unique_proj_event_property",
            ),
        ),
        migrations.AddConstraint(
            model_name="propertydefinition",
            constraint=posthog.models.utils.UniqueConstraintByExpression(
                concurrently=False,
                expression="(coalesce(project_id, team_id), name, type, coalesce(group_type_index, -1))",
                name="posthog_propdef_proj_uniq",
            ),
        ),
        migrations.AddField(
            model_name="externaldatajob",
            name="pipeline_version",
            field=models.CharField(
                blank=True,
                choices=[("v1-dlt-sync", "v1-dlt-sync"), ("v2-non-dlt", "v2-non-dlt")],
                max_length=400,
                null=True,
            ),
        ),
        migrations.RunSQL(
            sql="\n                UPDATE posthog_externaldatajob\n                SET pipeline_version = 'v1-dlt-sync'\n                WHERE pipeline_version is null\n            ",
            reverse_sql="",
        ),
        migrations.AlterField(
            model_name="hogfunction",
            name="type",
            field=models.CharField(blank=True, max_length=24, null=True),
        ),
        migrations.AddField(
            model_name="alertconfiguration",
            name="skip_weekend",
            field=models.BooleanField(blank=True, default=False, null=True),
        ),
        migrations.CreateModel(
            name="DataColorTheme",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=100)),
                ("colors", models.JSONField(default=list)),
                (
                    "team",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to="posthog.team"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL
                    ),
                ),
                ("deleted", models.BooleanField(blank=True, null=True)),
            ],
        ),
        migrations.RunPython(
            code=migration_0537_add_default_themes,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "posthog_dashboard" ADD COLUMN "data_color_theme_id" integer NULL CONSTRAINT "posthog_dashboard_data_color_theme_id_0084ccbf_fk_posthog_d" REFERENCES "posthog_datacolortheme"("id") DEFERRABLE INITIALLY DEFERRED; -- existing-table-constraint-ignore\n                    SET CONSTRAINTS "posthog_dashboard_data_color_theme_id_0084ccbf_fk_posthog_d" IMMEDIATE; -- existing-table-constraint-ignore\n                    ',
                    reverse_sql='\n                        ALTER TABLE "posthog_dashboard" DROP COLUMN IF EXISTS "data_color_theme_id";\n                    ',
                ),
                migrations.RunSQL(
                    sql='\n                    CREATE INDEX "posthog_dashboard_data_color_theme_id_0084ccbf" ON "posthog_dashboard" ("data_color_theme_id");\n                    ',
                    reverse_sql='\n                        DROP INDEX IF EXISTS "posthog_dashboard_data_color_theme_id_0084ccbf";\n                    ',
                ),
            ],
            state_operations=[
                migrations.AddField(
                    model_name="dashboard",
                    name="data_color_theme",
                    field=models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to="posthog.datacolortheme"
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="experiment",
            name="stats_config",
            field=models.JSONField(blank=True, default=dict, null=True),
        ),
        migrations.CreateModel(
            name="UserGroup",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=posthog.models.utils.UUIDT, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("name", models.TextField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="UserGroupMembership",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=posthog.models.utils.UUIDT, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("group", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.usergroup")),
                ("user", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name="usergroup",
            name="members",
            field=models.ManyToManyField(through="posthog.UserGroupMembership", to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name="usergroup",
            name="team",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, related_name="user_groups", to="posthog.team"
            ),
        ),
        migrations.AddConstraint(
            model_name="usergroupmembership",
            constraint=models.UniqueConstraint(fields=("group", "user"), name="unique_per_user_per_group"),
        ),
        migrations.SeparateDatabaseAndState(
            state_operations=[
                migrations.AddField(
                    model_name="errortrackingissueassignment",
                    name="user_group",
                    field=models.ForeignKey(
                        null=True, on_delete=django.db.models.deletion.CASCADE, to="posthog.usergroup"
                    ),
                ),
                migrations.AddField(
                    model_name="errortrackingissueassignment",
                    name="issue",
                    field=models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="assignment",
                        to="posthog.errortrackingissue",
                    ),
                ),
            ],
            database_operations=[
                # Add field user_group to errortrackingissueassignment
                migrations.RunSQL(
                    """
                    ALTER TABLE "posthog_errortrackingissueassignment" ADD COLUMN "user_group_id" uuid NULL CONSTRAINT "posthog_errortrackin_user_group_id_459a0006_fk_posthog_u" REFERENCES "posthog_usergroup"("id") DEFERRABLE INITIALLY DEFERRED;
                    """,
                    reverse_sql="""
                    ALTER TABLE "posthog_errortrackingissueassignment" DROP COLUMN "user_group_id" CASCADE;
                    """,
                ),
                # Alter field issue on errortrackingissueassignment
                migrations.RunSQL(
                    """
                    ALTER TABLE "posthog_errortrackingissueassignment" ADD CONSTRAINT "posthog_errortrackingissueassignment_issue_id_d9cce9cb_uniq" UNIQUE ("issue_id"); -- existing-table-constraint-ignore
                    ALTER TABLE "posthog_errortrackingissueassignment" ADD CONSTRAINT "posthog_errortrackin_issue_id_d9cce9cb_fk_posthog_e" FOREIGN KEY ("issue_id") REFERENCES "posthog_errortrackingissue" ("id") DEFERRABLE INITIALLY DEFERRED;
                    """,
                    reverse_sql="""
                    ALTER TABLE "posthog_errortrackingissueassignment" DROP CONSTRAINT IF EXISTS "posthog_errortrackingissueassignment_issue_id_d9cce9cb_uniq";
                    ALTER TABLE "posthog_errortrackingissueassignment" DROP CONSTRAINT IF EXISTS "posthog_errortrackin_issue_id_d9cce9cb_fk_posthog_e";
                    """,
                ),
            ],
        ),
        migrations.AlterField(
            model_name="batchexportdestination",
            name="config",
            field=posthog.helpers.encrypted_fields.EncryptedJSONField(
                blank=True,
                default=dict,
                help_text="A JSON field to store all configuration parameters required to access a BatchExportDestination.",
            ),
        ),
        migrations.RunPython(
            code=migration_0545_migrate_insight_filters_to_query,
            reverse_code=migration_0545_rollback_insight_filters_to_query,
        ),
        migrations.RunSQL(
            sql="\n            UPDATE posthog_dashboard\n            SET creation_mode = 'template'\n            WHERE name LIKE 'Generated Dashboard: % Usage'\n            AND description LIKE 'This dashboard was generated by the feature flag with key (%)'\n            AND creation_mode = 'default'\n            ",
            reverse_sql="\n            UPDATE posthog_dashboard\n            SET creation_mode = 'default'\n            WHERE name LIKE 'Generated Dashboard: % Usage'\n            AND description LIKE 'This dashboard was generated by the feature flag with key (%)'\n            AND creation_mode = 'template'\n            ",
        ),
        migrations.AddField(
            model_name="externaldatajob",
            name="billable",
            field=models.BooleanField(blank=True, default=True, null=True),
        ),
        migrations.RunSQL(
            sql="\n            UPDATE posthog_externaldatajob\n            SET billable = CASE\n                WHEN pipeline_version = 'v2-non-dlt' THEN false\n                ELSE true\n            END",
            reverse_sql="",
        ),
        migrations.SeparateDatabaseAndState(
            state_operations=[
                migrations.DeleteModel(
                    name="EarlyAccessFeature",
                ),
            ],
        ),
        migrations.CreateModel(
            name="BatchImport",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=posthog.models.utils.UUIDT, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("lease_id", models.TextField(blank=True, null=True)),
                ("leased_until", models.DateTimeField(blank=True, null=True)),
                (
                    "status",
                    models.TextField(
                        choices=[
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                            ("paused", "Paused"),
                            ("running", "Running"),
                        ],
                        default="running",
                    ),
                ),
                ("status_message", models.TextField(blank=True, null=True)),
                ("state", models.JSONField(blank=True, null=True)),
                ("import_config", models.JSONField()),
                ("secrets", posthog.helpers.encrypted_fields.EncryptedJSONStringField()),
                ("team", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.team")),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="featureflag",
            name="is_remote_configuration",
            field=models.BooleanField(blank=True, default=False, null=True),
        ),
        migrations.RunSQL(
            sql=[
                "\n                 UPDATE posthog_externaldataschema\n                 SET sync_type_config = sync_type_config - 'incremental_field_last_value_v2'\n                 WHERE sync_type_config ? 'incremental_field_last_value_v2'\n                 "
            ],
            reverse_sql="",
        ),
        migrations.AddField(
            model_name="batchexport",
            name="filters",
            field=models.JSONField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="hogfunction",
            name="execution_order",
            field=models.PositiveSmallIntegerField(blank=True, null=True),
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "posthog_taggeditem" ADD COLUMN "experiment_saved_metric_id" integer NULL CONSTRAINT "posthog_taggeditem_experiment_saved_met_b6af2199_fk_posthog_e" REFERENCES "posthog_experimentsavedmetric"("id") DEFERRABLE INITIALLY DEFERRED; -- existing-table-constraint-ignore\n                    SET CONSTRAINTS "posthog_taggeditem_experiment_saved_met_b6af2199_fk_posthog_e" IMMEDIATE; -- existing-table-constraint-ignore\n                    ',
                    reverse_sql='\n                        ALTER TABLE "posthog_taggeditem" DROP COLUMN IF EXISTS "experiment_saved_metric_id";\n                    ',
                ),
                migrations.RunSQL(
                    sql='\n                    CREATE INDEX "posthog_taggeditem_experiment_saved_metric_id_b6af2199" ON "posthog_taggeditem" ("experiment_saved_metric_id");\n                    ',
                    reverse_sql='\n                        DROP INDEX IF EXISTS "posthog_taggeditem_experiment_saved_metric_id_b6af2199";\n                    ',
                ),
                migrations.RunSQL(
                    sql='\n                    CREATE UNIQUE INDEX "unique_experiment_saved_metric_tagged_item" ON "posthog_taggeditem" ("tag_id", "experiment_saved_metric_id") WHERE "experiment_saved_metric_id" IS NOT NULL; -- not-null-ignore\n                    ',
                    reverse_sql='\n                        DROP INDEX IF EXISTS "unique_experiment_saved_metric_tagged_item";\n                    ',
                ),
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "posthog_taggeditem" DROP CONSTRAINT "exactly_one_related_object";\n                    ALTER TABLE "posthog_taggeditem" ADD CONSTRAINT "exactly_one_related_object" CHECK ( /* -- existing-table-constraint-ignore */\n                            (\n                                (dashboard_id IS NOT NULL AND insight_id IS NULL AND event_definition_id IS NULL AND property_definition_id IS NULL AND action_id IS NULL AND feature_flag_id IS NULL AND experiment_saved_metric_id IS NULL) OR /* -- not-null-ignore */\n                                (dashboard_id IS NULL AND insight_id IS NOT NULL AND event_definition_id IS NULL AND property_definition_id IS NULL AND action_id IS NULL AND feature_flag_id IS NULL AND experiment_saved_metric_id IS NULL) OR /* -- not-null-ignore */\n                                (dashboard_id IS NULL AND insight_id IS NULL AND event_definition_id IS NOT NULL AND property_definition_id IS NULL AND action_id IS NULL AND feature_flag_id IS NULL AND experiment_saved_metric_id IS NULL) OR /* -- not-null-ignore */\n                                (dashboard_id IS NULL AND insight_id IS NULL AND event_definition_id IS NULL AND property_definition_id IS NOT NULL AND action_id IS NULL AND feature_flag_id IS NULL AND experiment_saved_metric_id IS NULL) OR /* -- not-null-ignore */\n                                (dashboard_id IS NULL AND insight_id IS NULL AND event_definition_id IS NULL AND property_definition_id IS NULL AND action_id IS NOT NULL AND feature_flag_id IS NULL AND experiment_saved_metric_id IS NULL) OR /* -- not-null-ignore */\n                                (dashboard_id IS NULL AND insight_id IS NULL AND event_definition_id IS NULL AND property_definition_id IS NULL AND action_id IS NULL AND feature_flag_id IS NOT NULL AND experiment_saved_metric_id IS NULL) OR /* -- not-null-ignore */\n                                (dashboard_id IS NULL AND insight_id IS NULL AND event_definition_id IS NULL AND property_definition_id IS NULL AND action_id IS NULL AND feature_flag_id IS NULL AND experiment_saved_metric_id IS NOT NULL) /* -- not-null-ignore */\n                            )\n                        ) NOT VALID;\n                    ',
                    reverse_sql='\n                        ALTER TABLE "posthog_taggeditem" DROP CONSTRAINT "exactly_one_related_object";\n                        ALTER TABLE "posthog_taggeditem" ADD CONSTRAINT "exactly_one_related_object" CHECK ( /* -- existing-table-constraint-ignore */\n                            (\n                                (dashboard_id IS NOT NULL AND insight_id IS NULL AND event_definition_id IS NULL AND property_definition_id IS NULL AND action_id IS NULL AND feature_flag_id IS NULL) OR /* -- not-null-ignore */\n                                (dashboard_id IS NULL AND insight_id IS NOT NULL AND event_definition_id IS NULL AND property_definition_id IS NULL AND action_id IS NULL AND feature_flag_id IS NULL) OR /* -- not-null-ignore */\n                                (dashboard_id IS NULL AND insight_id IS NULL AND event_definition_id IS NOT NULL AND property_definition_id IS NULL AND action_id IS NULL AND feature_flag_id IS NULL) OR /* -- not-null-ignore */\n                                (dashboard_id IS NULL AND insight_id IS NULL AND event_definition_id IS NULL AND property_definition_id IS NOT NULL AND action_id IS NULL AND feature_flag_id IS NULL) OR /* -- not-null-ignore */\n                                (dashboard_id IS NULL AND insight_id IS NULL AND event_definition_id IS NULL AND property_definition_id IS NULL AND action_id IS NOT NULL AND feature_flag_id IS NULL) OR /* -- not-null-ignore */\n                                (dashboard_id IS NULL AND insight_id IS NULL AND event_definition_id IS NULL AND property_definition_id IS NULL AND action_id IS NULL AND feature_flag_id IS NOT NULL) /* -- not-null-ignore */\n                            )\n                        ) NOT VALID;\n                    ',
                ),
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "posthog_taggeditem" DROP CONSTRAINT IF EXISTS "posthog_taggeditem_tag_id_dashboard_id_insi_a13e3a20_uniq";\n                    ',
                    reverse_sql='\n                        ALTER TABLE "posthog_taggeditem" ADD CONSTRAINT "posthog_taggeditem_tag_id_dashboard_id_insi_a13e3a20_uniq" UNIQUE USING INDEX "posthog_taggeditem_tag_id_dashboard_id_insi_a13e3a20_uniq"; -- existing-table-constraint-ignore\n                    ',
                ),
                migrations.RunSQL(
                    sql='\n                    CREATE UNIQUE INDEX IF NOT EXISTS "posthog_taggeditem_tag_id_dashboard_id_insi_734394e1_uniq" ON "posthog_taggeditem" ("tag_id", "dashboard_id", "insight_id", "event_definition_id", "property_definition_id", "action_id", "feature_flag_id", "experiment_saved_metric_id");\n                    ',
                    reverse_sql='\n                        CREATE UNIQUE INDEX IF NOT EXISTS "posthog_taggeditem_tag_id_dashboard_id_insi_a13e3a20_uniq" ON "posthog_taggeditem" ("tag_id", "dashboard_id", "insight_id", "event_definition_id", "property_definition_id", "action_id", "feature_flag_id");\n                    ',
                ),
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "posthog_taggeditem" ADD CONSTRAINT "posthog_taggeditem_tag_id_dashboard_id_insi_734394e1_uniq" UNIQUE USING INDEX "posthog_taggeditem_tag_id_dashboard_id_insi_734394e1_uniq"; -- existing-table-constraint-ignore\n                    ',
                    reverse_sql='\n                        ALTER TABLE "posthog_taggeditem" DROP CONSTRAINT IF EXISTS "posthog_taggeditem_tag_id_dashboard_id_insi_734394e1_uniq";\n                    ',
                ),
            ],
            state_operations=[
                migrations.RemoveConstraint(
                    model_name="taggeditem",
                    name="exactly_one_related_object",
                ),
                migrations.AlterUniqueTogether(
                    name="taggeditem",
                    unique_together=set(),
                ),
                migrations.AddField(
                    model_name="taggeditem",
                    name="experiment_saved_metric",
                    field=models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tagged_items",
                        to="posthog.experimentsavedmetric",
                    ),
                ),
                migrations.AlterUniqueTogether(
                    name="taggeditem",
                    unique_together={
                        (
                            "tag",
                            "dashboard",
                            "insight",
                            "event_definition",
                            "property_definition",
                            "action",
                            "feature_flag",
                            "experiment_saved_metric",
                        )
                    },
                ),
                migrations.AddConstraint(
                    model_name="taggeditem",
                    constraint=models.UniqueConstraint(
                        condition=models.Q(("experiment_saved_metric__isnull", False)),
                        fields=("tag", "experiment_saved_metric"),
                        name="unique_experiment_saved_metric_tagged_item",
                    ),
                ),
                migrations.AddConstraint(
                    model_name="taggeditem",
                    constraint=models.CheckConstraint(
                        check=models.Q(
                            models.Q(
                                ("dashboard__isnull", False),
                                ("insight__isnull", True),
                                ("event_definition__isnull", True),
                                ("property_definition__isnull", True),
                                ("action__isnull", True),
                                ("feature_flag__isnull", True),
                                ("experiment_saved_metric__isnull", True),
                            ),
                            models.Q(
                                ("dashboard__isnull", True),
                                ("insight__isnull", False),
                                ("event_definition__isnull", True),
                                ("property_definition__isnull", True),
                                ("action__isnull", True),
                                ("feature_flag__isnull", True),
                                ("experiment_saved_metric__isnull", True),
                            ),
                            models.Q(
                                ("dashboard__isnull", True),
                                ("insight__isnull", True),
                                ("event_definition__isnull", False),
                                ("property_definition__isnull", True),
                                ("action__isnull", True),
                                ("feature_flag__isnull", True),
                                ("experiment_saved_metric__isnull", True),
                            ),
                            models.Q(
                                ("dashboard__isnull", True),
                                ("insight__isnull", True),
                                ("event_definition__isnull", True),
                                ("property_definition__isnull", False),
                                ("action__isnull", True),
                                ("feature_flag__isnull", True),
                                ("experiment_saved_metric__isnull", True),
                            ),
                            models.Q(
                                ("dashboard__isnull", True),
                                ("insight__isnull", True),
                                ("event_definition__isnull", True),
                                ("property_definition__isnull", True),
                                ("action__isnull", False),
                                ("feature_flag__isnull", True),
                                ("experiment_saved_metric__isnull", True),
                            ),
                            models.Q(
                                ("dashboard__isnull", True),
                                ("insight__isnull", True),
                                ("event_definition__isnull", True),
                                ("property_definition__isnull", True),
                                ("action__isnull", True),
                                ("feature_flag__isnull", False),
                                ("experiment_saved_metric__isnull", True),
                            ),
                            models.Q(
                                ("dashboard__isnull", True),
                                ("insight__isnull", True),
                                ("event_definition__isnull", True),
                                ("property_definition__isnull", True),
                                ("action__isnull", True),
                                ("feature_flag__isnull", True),
                                ("experiment_saved_metric__isnull", False),
                            ),
                            _connector="OR",
                        ),
                        name="exactly_one_related_object",
                    ),
                ),
            ],
        ),
        migrations.AlterField(
            model_name="integration",
            name="kind",
            field=models.CharField(
                choices=[
                    ("slack", "Slack"),
                    ("salesforce", "Salesforce"),
                    ("hubspot", "Hubspot"),
                    ("google-pubsub", "Google Pubsub"),
                    ("google-cloud-storage", "Google Cloud Storage"),
                    ("google-ads", "Google Ads"),
                    ("snapchat", "Snapchat"),
                    ("linkedin-ads", "Linkedin Ads"),
                ],
                max_length=20,
            ),
        ),
        migrations.AddField(
            model_name="errortrackingissuefingerprintv2",
            name="first_seen",
            field=models.DateTimeField(auto_now_add=True, null=True),
        ),
        migrations.AlterField(
            model_name="batchexport",
            name="model",
            field=models.CharField(
                blank=True,
                choices=[("events", "Events"), ("persons", "Persons"), ("sessions", "Sessions")],
                default="events",
                help_text="Which model this BatchExport is exporting.",
                max_length=64,
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="insightvariable",
            name="type",
            field=models.CharField(
                choices=[
                    ("String", "String"),
                    ("Number", "Number"),
                    ("Boolean", "Boolean"),
                    ("List", "List"),
                    ("Date", "Date"),
                ],
                max_length=128,
            ),
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "posthog_batchexportrun" ADD COLUMN "backfill_id" uuid NULL CONSTRAINT "posthog_batchexportr_backfill_id_9243c0f7_fk_posthog_b" REFERENCES "posthog_batchexportbackfill"("id") DEFERRABLE INITIALLY DEFERRED; -- existing-table-constraint-ignore\n                    SET CONSTRAINTS "posthog_batchexportr_backfill_id_9243c0f7_fk_posthog_b" IMMEDIATE; -- existing-table-constraint-ignore\n                    ',
                    reverse_sql='\n                        ALTER TABLE "posthog_batchexportrun" DROP COLUMN IF EXISTS "backfill_id";\n                    ',
                ),
                migrations.RunSQL(
                    sql='\n                    CREATE INDEX "posthog_batchexportrun_backfill_id_9243c0f7" ON "posthog_batchexportrun" ("backfill_id");\n                    ',
                    reverse_sql='\n                        DROP INDEX IF EXISTS "posthog_batchexportrun_backfill_id_9243c0f7";\n                    ',
                ),
            ],
            state_operations=[
                migrations.AddField(
                    model_name="batchexportrun",
                    name="backfill",
                    field=models.ForeignKey(
                        blank=True,
                        help_text="The backfill this run belongs to.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="runs",
                        related_query_name="run",
                        to="posthog.batchexportbackfill",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="datawarehousesavedquery",
            name="sync_frequency_interval",
            field=models.DurationField(blank=True, default=None, null=True),
        ),
        migrations.AddField(
            model_name="featureflag",
            name="has_encrypted_payloads",
            field=models.BooleanField(blank=True, default=False, null=True),
        ),
        migrations.CreateModel(
            name="HostDefinition",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=posthog.models.utils.UUIDT, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("host", models.CharField(max_length=400)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("last_seen_at", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "project",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="host_definitions",
                        related_query_name="host_definition",
                        to="posthog.project",
                    ),
                ),
                (
                    "team",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="host_definitions",
                        related_query_name="host_definition",
                        to="posthog.team",
                    ),
                ),
            ],
            options={
                "db_table": "posthog_hostdefinition",
                "indexes": [
                    models.Index(fields=["project", "host"], name="hostdefinition_project_idx"),
                    models.Index(fields=["team", "host"], name="hostdefinition_team_idx"),
                ],
            },
        ),
        migrations.AlterUniqueTogether(
            name="hostdefinition",
            unique_together={("team", "host")},
        ),
        migrations.AddConstraint(
            model_name="hostdefinition",
            constraint=posthog.models.utils.UniqueConstraintByExpression(
                concurrently=False,
                expression="(coalesce(project_id, team_id), host)",
                name="hostdefinition_coalesced_idx",
            ),
        ),
        migrations.CreateModel(
            name="FileSystem",
            fields=[
                ("id", models.UUIDField(default=posthog.models.utils.uuid7, primary_key=True, serialize=False)),
                ("path", models.TextField()),
                ("type", models.CharField(blank=True, max_length=100)),
                ("ref", models.CharField(blank=True, max_length=100, null=True)),
                ("href", models.TextField(blank=True, null=True)),
                ("meta", models.JSONField(blank=True, default=dict, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL
                    ),
                ),
                ("team", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.team")),
            ],
        ),
        migrations.RunSQL(
            """
            DROP INDEX IF EXISTS "posthog_errortrackingissueassignment_issue_id_d9cce9cb";
            """,
            reverse_sql="""
            CREATE INDEX "posthog_errortrackingissueassignment_issue_id_d9cce9cb" ON "posthog_errortrackingissueassignment" ("issue_id");
            """,
        ),
        migrations.CreateModel(
            name="QueryTabState",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("deleted", models.BooleanField(blank=True, default=False, null=True)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                (
                    "id",
                    models.UUIDField(
                        default=posthog.models.utils.UUIDT, editable=False, primary_key=True, serialize=False
                    ),
                ),
                (
                    "state",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="\n            Dict of query tab state for a user. Keys are editorModelsStateKey, activeModelStateKey, activeModelVariablesStateKey\n            and values are the state for that key. EditorModelsStateKey is a list of all the editor models for a user.\n            ActiveModelStateKey is the active model for a user. ActiveModelVariablesStateKey is the active model variables\n            for a user.\n            ",
                        null=True,
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL
                    ),
                ),
                ("team", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.team")),
            ],
        ),
        migrations.AddConstraint(
            model_name="querytabstate",
            constraint=models.UniqueConstraint(fields=("team", "created_by"), name="unique_team_created_by"),
        ),
        migrations.AlterField(
            model_name="errortrackingissuefingerprintv2",
            name="issue",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="fingerprints",
                to="posthog.errortrackingissue",
            ),
        ),
        migrations.AddField(
            model_name="survey",
            name="schedule",
            field=models.CharField(
                blank=True,
                choices=[("once", "once"), ("recurring", "recurring"), ("always", "always")],
                default="once",
                max_length=40,
                null=True,
            ),
        ),
        migrations.AddField(
            model_name="experiment",
            name="exposure_criteria",
            field=models.JSONField(blank=True, default=dict, null=True),
        ),
        migrations.CreateModel(
            name="SessionRecordingPlaylistViewed",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("viewed_at", models.DateTimeField(auto_now_add=True)),
                (
                    "playlist",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="posthog.sessionrecordingplaylist"
                    ),
                ),
                ("team", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.team")),
                ("user", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                "indexes": [
                    models.Index(fields=["playlist"], name="posthog_ses_playlis_9e7475_idx"),
                    models.Index(fields=["playlist", "viewed_at"], name="posthog_ses_playlis_5051b6_idx"),
                ],
                "unique_together": {("user", "playlist", "viewed_at")},
            },
        ),
        migrations.AddField(
            model_name="datawarehousesavedquery",
            name="deleted_name",
            field=models.CharField(blank=True, default=None, max_length=128, null=True),
        ),
        migrations.AlterModelOptions(
            name="team",
            options={"verbose_name": "environment (aka team)", "verbose_name_plural": "environments (aka teams)"},
        ),
        migrations.AddField(
            model_name="featureflag",
            name="last_modified_by",
            field=models.ForeignKey(
                db_index=False,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="updated_feature_flags",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="featureflag",
            name="version",
            field=models.IntegerField(default=0, null=True),
        ),
        migrations.AlterField(
            model_name="integration",
            name="kind",
            field=models.CharField(
                choices=[
                    ("slack", "Slack"),
                    ("salesforce", "Salesforce"),
                    ("hubspot", "Hubspot"),
                    ("google-pubsub", "Google Pubsub"),
                    ("google-cloud-storage", "Google Cloud Storage"),
                    ("google-ads", "Google Ads"),
                    ("snapchat", "Snapchat"),
                    ("linkedin-ads", "Linkedin Ads"),
                    ("intercom", "Intercom"),
                ],
                max_length=20,
            ),
        ),
        migrations.AddField(
            model_name="filesystem",
            name="depth",
            field=models.IntegerField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="datawarehousesavedquery",
            name="latest_error",
            field=models.TextField(blank=True, default=None, null=True),
        ),
        migrations.AddField(
            model_name="externaldataschema",
            name="sync_time_of_day",
            field=models.TimeField(blank=True, help_text="Time of day to run the sync (UTC)", null=True),
        ),
        migrations.AddField(
            model_name="sessionrecordingplaylist",
            name="last_counted_at",
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddIndex(
            model_name="sessionrecordingplaylist",
            index=models.Index(fields=["deleted", "last_counted_at"], name="deleted_n_last_count_idx"),
        ),
        migrations.AddIndex(
            model_name="sessionrecordingplaylist",
            index=models.Index(fields=["deleted", "-last_modified_at"], name="deleted_n_last_mod_desc_idx"),
        ),
        migrations.AlterField(
            model_name="errortrackingissue",
            name="status",
            field=models.TextField(
                choices=[
                    ("archived", "Archived"),
                    ("active", "Active"),
                    ("resolved", "Resolved"),
                    ("pending_release", "Pending release"),
                    ("suppressed", "Suppressed"),
                ],
                default="active",
            ),
        ),
        migrations.RemoveConstraint(
            model_name="propertydefinition",
            name="posthog_propertydefinition_uniq",
        ),
        migrations.AlterField(
            model_name="featureflag",
            name="version",
            field=models.IntegerField(default=1, null=True),
        ),
        migrations.RunSQL(
            sql="\n            UPDATE posthog_featureflag\n            SET version = 1\n            WHERE version IS NULL OR version = 0\n            ",
            reverse_sql="",
        ),
        migrations.AddField(
            model_name="survey",
            name="enable_partial_responses",
            field=models.BooleanField(default=False, null=True),
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                        -- Drop old FK constraints if they exist\n                        ALTER TABLE "posthog_cohortpeople"\n                            DROP CONSTRAINT IF EXISTS "posthog_cohortpeople_person_id_33da7d3f_fk";\n                        ALTER TABLE "posthog_featureflaghashkeyoverride"\n                            DROP CONSTRAINT IF EXISTS "posthog_featureflaghashkeyoverride_person_id_7e517f7c_fk";\n                        ALTER TABLE "posthog_persondistinctid"\n                            DROP CONSTRAINT IF EXISTS "posthog_persondistinctid_person_id_5d655bba_fk";\n\n                        -- Convert columns to bigint\n                        ALTER TABLE "posthog_person"\n                            ALTER COLUMN "id" TYPE bigint USING "id"::bigint;\n                        ALTER SEQUENCE IF EXISTS "posthog_person_id_seq" AS bigint;\n\n                        ALTER TABLE "posthog_cohortpeople"\n                            ALTER COLUMN "person_id" TYPE bigint USING "person_id"::bigint;\n                        ALTER TABLE "posthog_featureflaghashkeyoverride"\n                            ALTER COLUMN "person_id" TYPE bigint USING "person_id"::bigint;\n                        ALTER TABLE "posthog_persondistinctid"\n                            ALTER COLUMN "person_id" TYPE bigint USING "person_id"::bigint;\n\n                        ALTER TABLE "posthog_persondistinctid"\n                            ALTER COLUMN "id" TYPE bigint USING "id"::bigint;\n                        ALTER SEQUENCE IF EXISTS "posthog_persondistinctid_id_seq" AS bigint;\n\n                        ALTER TABLE "posthog_eventproperty"\n                            ALTER COLUMN "id" TYPE bigint USING "id"::bigint;\n                        ALTER SEQUENCE IF EXISTS "posthog_eventproperty_id_seq" AS bigint;\n                    ',
                    reverse_sql="",
                ),
            ],
            state_operations=[
                migrations.AlterField(
                    model_name="person",
                    name="id",
                    field=models.BigAutoField(primary_key=True, serialize=False),
                ),
                migrations.AlterField(
                    model_name="persondistinctid",
                    name="id",
                    field=models.BigAutoField(primary_key=True, serialize=False),
                ),
                migrations.AlterField(
                    model_name="cohortpeople",
                    name="person",
                    field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.person"),
                ),
                migrations.AlterField(
                    model_name="featureflaghashkeyoverride",
                    name="person",
                    field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.person"),
                ),
                migrations.AlterField(
                    model_name="persondistinctid",
                    name="person",
                    field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.person"),
                ),
                migrations.AlterField(
                    model_name="eventproperty",
                    name="id",
                    field=models.BigAutoField(primary_key=True, serialize=False),
                ),
            ],
        ),
        migrations.RunSQL(
            sql='\n                ALTER TABLE "posthog_cohortpeople" ADD CONSTRAINT "posthog_cohortpeople_person_id_33da7d3f_fk" FOREIGN KEY ("person_id") REFERENCES "posthog_person" ("id") NOT VALID; -- existing-table-constraint-ignore\n                ALTER TABLE "posthog_featureflaghashkeyoverride" ADD CONSTRAINT "posthog_featureflaghashkeyoverride_person_id_7e517f7c_fk" FOREIGN KEY ("person_id") REFERENCES "posthog_person" ("id") NOT VALID; -- existing-table-constraint-ignore\n                ALTER TABLE "posthog_persondistinctid" ADD CONSTRAINT "posthog_persondistinctid_person_id_5d655bba_fk" FOREIGN KEY ("person_id") REFERENCES "posthog_person" ("id") NOT VALID; -- existing-table-constraint-ignore\n            ',
            reverse_sql="",
        ),
        migrations.RunSQL(
            sql='\n                ALTER TABLE "posthog_cohortpeople" VALIDATE CONSTRAINT "posthog_cohortpeople_person_id_33da7d3f_fk";\n                ALTER TABLE "posthog_featureflaghashkeyoverride" VALIDATE CONSTRAINT "posthog_featureflaghashkeyoverride_person_id_7e517f7c_fk";\n                ALTER TABLE "posthog_persondistinctid" VALIDATE CONSTRAINT "posthog_persondistinctid_person_id_5d655bba_fk";\n            ',
            reverse_sql="",
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "posthog_grouptypemapping" ADD COLUMN "detail_dashboard_id" integer NULL CONSTRAINT "posthog_grouptypemapping_detail_dashboard_id_fk" REFERENCES "posthog_dashboard"("id") DEFERRABLE INITIALLY DEFERRED; -- existing-table-constraint-ignore\n                    SET CONSTRAINTS "posthog_grouptypemapping_detail_dashboard_id_fk" IMMEDIATE; -- existing-table-constraint-ignore\n                    ',
                    reverse_sql='\n                        ALTER TABLE "posthog_grouptypemapping" DROP COLUMN IF EXISTS "detail_dashboard_id";\n                    ',
                ),
                migrations.RunSQL(
                    sql='\n                    CREATE INDEX "posthog_grouptypemapping_detail_dashboard_id_54b0edbb" ON "posthog_grouptypemapping" ("detail_dashboard_id");\n                    ',
                    reverse_sql='\n                        DROP INDEX IF EXISTS "posthog_grouptypemapping_detail_dashboard_id_54b0edbb";\n                    ',
                ),
            ],
            state_operations=[
                migrations.AddField(
                    model_name="grouptypemapping",
                    name="detail_dashboard",
                    field=models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to="posthog.dashboard"
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="grouptypemapping",
            name="default_columns",
            field=django.contrib.postgres.fields.ArrayField(
                base_field=models.TextField(), blank=True, null=True, size=None
            ),
        ),
        migrations.AlterField(
            model_name="experiment",
            name="end_date",
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name="experiment",
            name="exposure_cohort",
            field=models.ForeignKey(
                blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to="posthog.cohort"
            ),
        ),
        migrations.AlterField(
            model_name="experiment",
            name="filters",
            field=models.JSONField(blank=True, default=dict),
        ),
        migrations.AlterField(
            model_name="experiment",
            name="holdout",
            field=models.ForeignKey(
                blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to="posthog.experimentholdout"
            ),
        ),
        migrations.AlterField(
            model_name="experiment",
            name="secondary_metrics",
            field=models.JSONField(blank=True, default=list, null=True),
        ),
        migrations.AlterField(
            model_name="experiment",
            name="start_date",
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "posthog_filesystem" ADD COLUMN "project_id" bigint NULL CONSTRAINT "posthog_filesystem_project_id_767c1359_fk_posthog_p" REFERENCES "posthog_project"("id") DEFERRABLE INITIALLY DEFERRED;\n                    SET CONSTRAINTS "posthog_filesystem_project_id_767c1359_fk_posthog_p" IMMEDIATE;',
                    reverse_sql='\n                        ALTER TABLE "posthog_filesystem" DROP COLUMN IF EXISTS "project_id";',
                ),
                migrations.RunSQL(
                    sql='\n                    CREATE INDEX "posthog_filesystem_project_id_767c1359_239c0515" ON "posthog_filesystem" ("project_id");',
                    reverse_sql='\n                        DROP INDEX IF EXISTS "posthog_filesystem_project_id_767c1359_239c0515";',
                ),
            ],
            state_operations=[
                migrations.AddField(
                    model_name="filesystem",
                    name="project",
                    field=models.ForeignKey(
                        null=True, on_delete=django.db.models.deletion.CASCADE, to="posthog.project"
                    ),
                ),
            ],
        ),
        migrations.AddIndex(
            model_name="filesystem",
            index=models.Index(fields=["project"], name="posthog_fil_project_840481_idx"),
        ),
        migrations.AddIndex(
            model_name="filesystem",
            index=models.Index(fields=["team"], name="posthog_fil_team_id_4941ed_idx"),
        ),
        migrations.AddIndex(
            model_name="filesystem",
            index=models.Index(
                django.db.models.functions.comparison.Coalesce(models.F("project_id"), models.F("team_id")),
                models.F("path"),
                name="posthog_fs_project_path",
            ),
        ),
        migrations.AddIndex(
            model_name="filesystem",
            index=models.Index(
                django.db.models.functions.comparison.Coalesce(models.F("project_id"), models.F("team_id")),
                models.F("depth"),
                name="posthog_fs_project_depth",
            ),
        ),
        migrations.AddIndex(
            model_name="filesystem",
            index=models.Index(
                django.db.models.functions.comparison.Coalesce(models.F("project_id"), models.F("team_id")),
                models.F("type"),
                models.F("ref"),
                name="posthog_fs_project_typeref",
            ),
        ),
        migrations.AddField(
            model_name="sessionrecording",
            name="full_recording_v2_path",
            field=models.CharField(blank=True, max_length=1000, null=True),
        ),
        migrations.AlterField(
            model_name="integration",
            name="kind",
            field=models.CharField(
                choices=[
                    ("slack", "Slack"),
                    ("salesforce", "Salesforce"),
                    ("hubspot", "Hubspot"),
                    ("google-pubsub", "Google Pubsub"),
                    ("google-cloud-storage", "Google Cloud Storage"),
                    ("google-ads", "Google Ads"),
                    ("snapchat", "Snapchat"),
                    ("linkedin-ads", "Linkedin Ads"),
                    ("intercom", "Intercom"),
                    ("email", "Email"),
                ],
                max_length=20,
            ),
        ),
        migrations.CreateModel(
            name="DataModelingJob",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                (
                    "id",
                    models.UUIDField(
                        default=posthog.models.utils.UUIDT, editable=False, primary_key=True, serialize=False
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[("Running", "Running"), ("Completed", "Completed"), ("Failed", "Failed")],
                        default="Running",
                        max_length=400,
                    ),
                ),
                ("rows_materialized", models.IntegerField(default=0)),
                ("error", models.TextField(blank=True, null=True)),
                ("workflow_id", models.CharField(blank=True, max_length=400, null=True)),
                ("workflow_run_id", models.CharField(blank=True, max_length=400, null=True)),
                ("last_run_at", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL
                    ),
                ),
                (
                    "saved_query",
                    models.ForeignKey(
                        null=True, on_delete=django.db.models.deletion.SET_NULL, to="posthog.datawarehousesavedquery"
                    ),
                ),
                ("team", models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to="posthog.team")),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "posthog_uploadedmedia" ADD COLUMN "project_id" bigint NULL CONSTRAINT "posthog_uploadedmedia_project_id_uzTGNcheyj_fk_posthog_p" REFERENCES "posthog_project"("id") DEFERRABLE INITIALLY DEFERRED;\n                    SET CONSTRAINTS "posthog_uploadedmedia_project_id_uzTGNcheyj_fk_posthog_p" IMMEDIATE;',
                    reverse_sql='\n                        ALTER TABLE "posthog_uploadedmedia" DROP COLUMN IF EXISTS "project_id";',
                ),
                migrations.RunSQL(
                    sql='\n                    CREATE INDEX "posthog_uploadedmedia_project_id_uzTGNcheyj_WxVp79RtER" ON "posthog_uploadedmedia" ("project_id");',
                    reverse_sql='\n                        DROP INDEX IF EXISTS "posthog_uploadedmedia_project_id_uzTGNcheyj_WxVp79RtER";',
                ),
            ],
            state_operations=[
                migrations.AddField(
                    model_name="uploadedmedia",
                    name="project",
                    field=models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to="posthog.project"
                    ),
                ),
            ],
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "posthog_datacolortheme" ADD COLUMN "project_id" bigint NULL CONSTRAINT "posthog_datacolortheme_project_id_CZYFwmeeLU_fk_posthog_p" REFERENCES "posthog_project"("id") DEFERRABLE INITIALLY DEFERRED;\n                    SET CONSTRAINTS "posthog_datacolortheme_project_id_CZYFwmeeLU_fk_posthog_p" IMMEDIATE;',
                    reverse_sql='\n                        ALTER TABLE "posthog_datacolortheme" DROP COLUMN IF EXISTS "project_id";',
                ),
                migrations.RunSQL(
                    sql='\n                    CREATE INDEX "posthog_datacolortheme_project_id_CZYFwmeeLU_Rvzb4NfvcS" ON "posthog_datacolortheme" ("project_id");',
                    reverse_sql='\n                        DROP INDEX IF EXISTS "posthog_datacolortheme_project_id_CZYFwmeeLU_Rvzb4NfvcS";',
                ),
            ],
            state_operations=[
                migrations.AddField(
                    model_name="datacolortheme",
                    name="project",
                    field=models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to="posthog.project"
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="productintent",
            name="contexts",
            field=models.JSONField(blank=True, default=dict, null=True),
        ),
        migrations.AddField(
            model_name="hogfunction",
            name="kind",
            field=models.CharField(blank=True, max_length=24, null=True),
        ),
        migrations.AddField(
            model_name="filesystem",
            name="shortcut",
            field=models.BooleanField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name="integration",
            name="kind",
            field=models.CharField(
                choices=[
                    ("slack", "Slack"),
                    ("salesforce", "Salesforce"),
                    ("hubspot", "Hubspot"),
                    ("google-pubsub", "Google Pubsub"),
                    ("google-cloud-storage", "Google Cloud Storage"),
                    ("google-ads", "Google Ads"),
                    ("snapchat", "Snapchat"),
                    ("linkedin-ads", "Linkedin Ads"),
                    ("intercom", "Intercom"),
                    ("email", "Email"),
                    ("linear", "Linear"),
                ],
                max_length=20,
            ),
        ),
        migrations.AddField(
            model_name="externaldatasource",
            name="revenue_analytics_enabled",
            field=models.BooleanField(blank=True, default=False, null=True),
        ),
        migrations.CreateModel(
            name="MessageTemplate",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=posthog.models.utils.UUIDT, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("name", models.CharField(max_length=400)),
                ("description", models.TextField(blank=True, default="")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("content", models.JSONField(default=dict)),
                ("type", models.CharField(blank=True, default="email", max_length=24)),
                ("deleted", models.BooleanField(default=False)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL
                    ),
                ),
                ("team", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.team")),
            ],
        ),
        migrations.CreateModel(
            name="ErrorTrackingAssignmentRule",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=posthog.models.utils.UUIDT, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("order_key", models.IntegerField()),
                ("bytecode", models.JSONField()),
                ("filters", models.JSONField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("disabled_data", models.JSONField(blank=True, null=True)),
                ("team", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.team")),
                (
                    "user",
                    models.ForeignKey(
                        null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
                    ),
                ),
                (
                    "user_group",
                    models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to="posthog.usergroup"),
                ),
            ],
            options={
                "indexes": [models.Index(fields=["team_id"], name="posthog_err_team_id_9da78b_idx")],
            },
        ),
        migrations.CreateModel(
            name="TeamRevenueAnalyticsConfig",
            fields=[
                (
                    "team",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        serialize=False,
                        to="posthog.team",
                    ),
                ),
                (
                    "base_currency",
                    models.CharField(
                        choices=[
                            ("AED", "AED"),
                            ("AFN", "AFN"),
                            ("ALL", "ALL"),
                            ("AMD", "AMD"),
                            ("ANG", "ANG"),
                            ("AOA", "AOA"),
                            ("ARS", "ARS"),
                            ("AUD", "AUD"),
                            ("AWG", "AWG"),
                            ("AZN", "AZN"),
                            ("BAM", "BAM"),
                            ("BBD", "BBD"),
                            ("BDT", "BDT"),
                            ("BGN", "BGN"),
                            ("BHD", "BHD"),
                            ("BIF", "BIF"),
                            ("BMD", "BMD"),
                            ("BND", "BND"),
                            ("BOB", "BOB"),
                            ("BRL", "BRL"),
                            ("BSD", "BSD"),
                            ("BTC", "BTC"),
                            ("BTN", "BTN"),
                            ("BWP", "BWP"),
                            ("BYN", "BYN"),
                            ("BZD", "BZD"),
                            ("CAD", "CAD"),
                            ("CDF", "CDF"),
                            ("CHF", "CHF"),
                            ("CLP", "CLP"),
                            ("CNY", "CNY"),
                            ("COP", "COP"),
                            ("CRC", "CRC"),
                            ("CVE", "CVE"),
                            ("CZK", "CZK"),
                            ("DJF", "DJF"),
                            ("DKK", "DKK"),
                            ("DOP", "DOP"),
                            ("DZD", "DZD"),
                            ("EGP", "EGP"),
                            ("ERN", "ERN"),
                            ("ETB", "ETB"),
                            ("EUR", "EUR"),
                            ("FJD", "FJD"),
                            ("GBP", "GBP"),
                            ("GEL", "GEL"),
                            ("GHS", "GHS"),
                            ("GIP", "GIP"),
                            ("GMD", "GMD"),
                            ("GNF", "GNF"),
                            ("GTQ", "GTQ"),
                            ("GYD", "GYD"),
                            ("HKD", "HKD"),
                            ("HNL", "HNL"),
                            ("HRK", "HRK"),
                            ("HTG", "HTG"),
                            ("HUF", "HUF"),
                            ("IDR", "IDR"),
                            ("ILS", "ILS"),
                            ("INR", "INR"),
                            ("IQD", "IQD"),
                            ("IRR", "IRR"),
                            ("ISK", "ISK"),
                            ("JMD", "JMD"),
                            ("JOD", "JOD"),
                            ("JPY", "JPY"),
                            ("KES", "KES"),
                            ("KGS", "KGS"),
                            ("KHR", "KHR"),
                            ("KMF", "KMF"),
                            ("KRW", "KRW"),
                            ("KWD", "KWD"),
                            ("KYD", "KYD"),
                            ("KZT", "KZT"),
                            ("LAK", "LAK"),
                            ("LBP", "LBP"),
                            ("LKR", "LKR"),
                            ("LRD", "LRD"),
                            ("LTL", "LTL"),
                            ("LVL", "LVL"),
                            ("LSL", "LSL"),
                            ("LYD", "LYD"),
                            ("MAD", "MAD"),
                            ("MDL", "MDL"),
                            ("MGA", "MGA"),
                            ("MKD", "MKD"),
                            ("MMK", "MMK"),
                            ("MNT", "MNT"),
                            ("MOP", "MOP"),
                            ("MRU", "MRU"),
                            ("MTL", "MTL"),
                            ("MUR", "MUR"),
                            ("MVR", "MVR"),
                            ("MWK", "MWK"),
                            ("MXN", "MXN"),
                            ("MYR", "MYR"),
                            ("MZN", "MZN"),
                            ("NAD", "NAD"),
                            ("NGN", "NGN"),
                            ("NIO", "NIO"),
                            ("NOK", "NOK"),
                            ("NPR", "NPR"),
                            ("NZD", "NZD"),
                            ("OMR", "OMR"),
                            ("PAB", "PAB"),
                            ("PEN", "PEN"),
                            ("PGK", "PGK"),
                            ("PHP", "PHP"),
                            ("PKR", "PKR"),
                            ("PLN", "PLN"),
                            ("PYG", "PYG"),
                            ("QAR", "QAR"),
                            ("RON", "RON"),
                            ("RSD", "RSD"),
                            ("RUB", "RUB"),
                            ("RWF", "RWF"),
                            ("SAR", "SAR"),
                            ("SBD", "SBD"),
                            ("SCR", "SCR"),
                            ("SDG", "SDG"),
                            ("SEK", "SEK"),
                            ("SGD", "SGD"),
                            ("SRD", "SRD"),
                            ("SSP", "SSP"),
                            ("STN", "STN"),
                            ("SYP", "SYP"),
                            ("SZL", "SZL"),
                            ("THB", "THB"),
                            ("TJS", "TJS"),
                            ("TMT", "TMT"),
                            ("TND", "TND"),
                            ("TOP", "TOP"),
                            ("TRY", "TRY"),
                            ("TTD", "TTD"),
                            ("TWD", "TWD"),
                            ("TZS", "TZS"),
                            ("UAH", "UAH"),
                            ("UGX", "UGX"),
                            ("USD", "USD"),
                            ("UYU", "UYU"),
                            ("UZS", "UZS"),
                            ("VES", "VES"),
                            ("VND", "VND"),
                            ("VUV", "VUV"),
                            ("WST", "WST"),
                            ("XAF", "XAF"),
                            ("XCD", "XCD"),
                            ("XOF", "XOF"),
                            ("XPF", "XPF"),
                            ("YER", "YER"),
                            ("ZAR", "ZAR"),
                            ("ZMW", "ZMW"),
                        ],
                        default="USD",
                        max_length=3,
                    ),
                ),
                ("_events", models.JSONField(db_column="events", default=list)),
            ],
        ),
    ]
