# Generated by Django 3.2.16 on 2022-12-12 05:30
import django.utils.timezone
import structlog
from django.conf import settings
from django.core.paginator import Paginator
from django.db import migrations, models

import posthog.models.utils


def migrate_playlist_item_recording_relations(apps, _) -> None:
    logger = structlog.get_logger(__name__)
    logger.info("starting_0285_add_session_recording_model")

    Recording = apps.get_model("posthog", "SessionRecording")
    PlaylistItem = apps.get_model("posthog", "SessionRecordingPlaylistItem")

    # Hard delete all deleted playlist items
    logger.info("delete_deleted_playlist_items")
    PlaylistItem.objects.filter(deleted=True).delete()

    # Create a session recording object for each playlist item and link to the new `recording` field
    batch_size = 1_000
    count = 0
    playlist_item_paginator = Paginator(PlaylistItem.objects.order_by("created_at"), batch_size)

    for playlist_item_page in playlist_item_paginator.page_range:
        offset = (playlist_item_page - 1) * batch_size
        logger.info("batch_start", limit=batch_size, offset=offset)
        playlist_items = playlist_item_paginator.get_page(playlist_item_page)

        # Bulk create recordings
        logger.info("batch_create_recordings", limit=batch_size, offset=offset)

        # Note: UUIDT is the PostHog standard, but session_id's are generated with a different util in posthog-js
        # https://github.com/PostHog/posthog-js/blob/e0dc2c005cfb5dd62b7c876676bcffe1654417a7/src/utils.ts#L457-L458
        # We create recording objects with both UUIDT and a unique session_id field to remain backwards compatible.
        Recording.objects.bulk_create(
            [
                Recording(session_id=playlist_item_object.session_id, team=playlist_item_object.playlist.team)
                for playlist_item_object in playlist_items
            ],
            ignore_conflicts=True,
        )

        logger.info("batch_update_playlist_items", limit=batch_size, offset=offset)
        # Bulk update playlist_items
        playlist_items_to_update = []
        recordings_in_bulk = Recording.objects.in_bulk(
            [playlist_item_object.session_id for playlist_item_object in playlist_items], field_name="session_id"
        )
        for playlist_item_object in playlist_items:
            playlist_item_object.team_id = playlist_item_object.playlist.team_id
            playlist_item_object.recording = recordings_in_bulk[playlist_item_object.session_id]
            playlist_items_to_update.append(playlist_item_object)

        PlaylistItem.objects.bulk_update(playlist_items_to_update, fields=["team_id", "recording"])

        count += len(list(playlist_items))

    logger.info("finished_0285_add_session_recording_model", migration_count=count)


def reverse(apps, _) -> None:
    Recording = apps.get_model("posthog", "SessionRecording")
    Recording.objects.all().delete()


class Migration(migrations.Migration):

    dependencies = [
        ("posthog", "0284_improved_caching_state_idx"),
    ]

    operations = [
        migrations.CreateModel(
            name="SessionRecording",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=posthog.models.utils.UUIDT, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("session_id", models.CharField(max_length=200, unique=True)),
                ("description", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("last_modified_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("deleted", models.BooleanField(default=False)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="sessionrecordingplaylistitem",
            name="team",
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to="posthog.team"),
        ),
        migrations.AlterField(
            model_name="sessionrecordingplaylist",
            name="last_modified_by",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="modified_playlists",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AlterUniqueTogether(
            name="sessionrecordingplaylistitem",
            unique_together=set(),
        ),
        migrations.AddField(
            model_name="sessionrecording",
            name="created_by",
            field=models.ForeignKey(
                blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AddField(
            model_name="sessionrecording",
            name="last_modified_by",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="modified_recordings",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="sessionrecording",
            name="team",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.team"),
        ),
        migrations.AddField(
            model_name="sessionrecordingplaylistitem",
            name="recording",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="playlist_items",
                to="posthog.sessionrecording",
                to_field="session_id",
            ),
        ),
        migrations.AddConstraint(
            model_name="sessionrecordingplaylistitem",
            constraint=models.UniqueConstraint(
                fields=("recording", "playlist", "team"), name="unique_recording_playlist_team"
            ),
        ),
        migrations.RunPython(migrate_playlist_item_recording_relations, reverse),
    ]
