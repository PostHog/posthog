import json
from functools import cached_property
from typing import Any

from openai.types.chat import ChatCompletionToolParam

from posthog.assistant.properties_prompt import PropertiesPrompt
from posthog.models.property_definition import PropertyDefinition

hardcoded_schema = r'{"$defs": {"ActionsNode": {"additionalProperties": false, "properties": {"custom_name": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "Optional custom name for the node if the user asks for it", "title": "Custom Name"}, "id": {"description": "The ID of the action", "title": "Id", "type": "integer"}, "kind": {"const": "ActionsNode", "default": "ActionsNode", "enum": ["ActionsNode"], "title": "Kind", "type": "string"}, "properties": {"anyOf": [{"items": {"anyOf": [{"$ref": "#/$defs/EventPropertyFilter"}, {"$ref": "#/$defs/PersonPropertyFilter"}, {"$ref": "#/$defs/ElementPropertyFilter"}, {"$ref": "#/$defs/SessionPropertyFilter"}, {"$ref": "#/$defs/CohortPropertyFilter"}, {"$ref": "#/$defs/RecordingPropertyFilter"}, {"$ref": "#/$defs/FeaturePropertyFilter"}, {"$ref": "#/$defs/EmptyPropertyFilter"}]}, "type": "array"}, {"type": "null"}], "default": null, "description": "Filter series by properties", "title": "Properties"}, "response": {"anyOf": [{"type": "object"}, {"type": "null"}], "default": null, "title": "Response"}, "math": {"anyOf": [{"$ref": "#/$defs/BaseMathType"}, {"$ref": "#/$defs/CountPerActorMathType"}, {"$ref": "#/$defs/PropertyMathType"}, {"type": "null"}], "default": null, "description": "Aggregation type", "title": "Math"}, "math_property": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "Event property to aggregate", "title": "Math Property"}}, "required": ["id"], "title": "ActionsNode", "type": "object"}, "AggregationAxisFormat": {"enum": ["numeric", "duration", "duration_ms", "percentage", "percentage_scaled"], "title": "AggregationAxisFormat", "type": "string"}, "BaseMathType": {"enum": ["total", "dau", "weekly_active", "monthly_active", "unique_session", "first_time_for_user"], "title": "BaseMathType", "type": "string"}, "Breakdown": {"additionalProperties": false, "properties": {"group_type_index": {"anyOf": [{"type": "integer"}, {"type": "null"}], "default": null, "title": "Group Type Index"}, "histogram_bin_count": {"anyOf": [{"type": "integer"}, {"type": "null"}], "default": null, "title": "Histogram Bin Count"}, "normalize_url": {"anyOf": [{"type": "boolean"}, {"type": "null"}], "default": null, "title": "Normalize Url"}, "property": {"title": "Property", "type": "string"}, "type": {"anyOf": [{"$ref": "#/$defs/MultipleBreakdownType"}, {"type": "null"}], "default": null}}, "required": ["property"], "title": "Breakdown", "type": "object"}, "BreakdownFilter": {"additionalProperties": false, "properties": {"breakdown": {"anyOf": [{"type": "string"}, {"type": "integer"}, {"items": {"anyOf": [{"type": "string"}, {"type": "integer"}]}, "type": "array"}, {"type": "null"}], "default": null, "title": "Breakdown"}, "breakdown_group_type_index": {"anyOf": [{"type": "integer"}, {"type": "null"}], "default": null, "title": "Breakdown Group Type Index"}, "breakdown_hide_other_aggregation": {"anyOf": [{"type": "boolean"}, {"type": "null"}], "default": null, "title": "Breakdown Hide Other Aggregation"}, "breakdown_histogram_bin_count": {"anyOf": [{"type": "integer"}, {"type": "null"}], "default": null, "title": "Breakdown Histogram Bin Count"}, "breakdown_limit": {"anyOf": [{"type": "integer"}, {"type": "null"}], "default": null, "title": "Breakdown Limit"}, "breakdown_normalize_url": {"anyOf": [{"type": "boolean"}, {"type": "null"}], "default": null, "title": "Breakdown Normalize Url"}, "breakdown_type": {"anyOf": [{"$ref": "#/$defs/BreakdownType"}, {"type": "null"}], "default": "event"}, "breakdowns": {"anyOf": [{"items": {"$ref": "#/$defs/Breakdown"}, "maxItems": 3, "type": "array"}, {"type": "null"}], "default": null, "title": "Breakdowns"}}, "title": "BreakdownFilter", "type": "object"}, "BreakdownType": {"enum": ["cohort", "person", "event", "group", "session"], "title": "BreakdownType", "type": "string"}, "ChartDisplayType": {"enum": ["ActionsLineGraph", "ActionsBar", "ActionsStackedBar", "ActionsAreaGraph", "ActionsLineGraphCumulative", "BoldNumber", "ActionsPie", "ActionsBarValue", "ActionsTable", "WorldMap"], "title": "ChartDisplayType", "type": "string"}, "CohortPropertyFilter": {"additionalProperties": false, "properties": {"key": {"const": "id", "default": "id", "enum": ["id"], "title": "Key", "type": "string"}, "label": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "title": "Label"}, "type": {"const": "cohort", "default": "cohort", "enum": ["cohort"], "title": "Type", "type": "string"}, "value": {"title": "Value", "type": "integer"}}, "required": ["value"], "title": "CohortPropertyFilter", "type": "object"}, "CompareFilter": {"additionalProperties": false, "properties": {"compare": {"anyOf": [{"type": "boolean"}, {"type": "null"}], "default": null, "title": "Compare"}, "compare_to": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "title": "Compare To"}}, "title": "CompareFilter", "type": "object"}, "CountPerActorMathType": {"enum": ["avg_count_per_actor", "min_count_per_actor", "max_count_per_actor", "median_count_per_actor", "p90_count_per_actor", "p95_count_per_actor", "p99_count_per_actor"], "title": "CountPerActorMathType", "type": "string"}, "DurationType": {"enum": ["duration", "active_seconds", "inactive_seconds"], "title": "DurationType", "type": "string"}, "ElementPropertyFilter": {"additionalProperties": false, "properties": {"key": {"$ref": "#/$defs/Key"}, "label": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "title": "Label"}, "operator": {"$ref": "#/$defs/PropertyOperator"}, "type": {"const": "element", "default": "element", "enum": ["element"], "title": "Type", "type": "string"}, "value": {"anyOf": [{"type": "string"}, {"type": "number"}, {"items": {"anyOf": [{"type": "string"}, {"type": "number"}]}, "type": "array"}, {"type": "null"}], "default": null, "title": "Value"}}, "required": ["key", "operator"], "title": "ElementPropertyFilter", "type": "object"}, "EmptyPropertyFilter": {"additionalProperties": false, "properties": {}, "title": "EmptyPropertyFilter", "type": "object"}, "EventPropertyFilter": {"additionalProperties": false, "properties": {"key": {"title": "Key", "type": "string"}, "label": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "title": "Label"}, "operator": {"anyOf": [{"$ref": "#/$defs/PropertyOperator"}, {"type": "null"}], "default": "exact"}, "type": {"const": "event", "default": "event", "description": "Event properties", "enum": ["event"], "title": "Type", "type": "string"}, "value": {"anyOf": [{"type": "string"}, {"type": "number"}, {"items": {"anyOf": [{"type": "string"}, {"type": "number"}]}, "type": "array"}, {"type": "null"}], "default": null, "title": "Value"}}, "required": ["key"], "title": "EventPropertyFilter", "type": "object"}, "EventsNode": {"additionalProperties": false, "properties": {"custom_name": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "Optional custom name for the node if the user asks for it", "title": "Custom Name"}, "event": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "The event or `null` for all events.", "title": "Event"}, "kind": {"const": "EventsNode", "default": "EventsNode", "enum": ["EventsNode"], "title": "Kind", "type": "string"}, "limit": {"anyOf": [{"type": "integer"}, {"type": "null"}], "default": null, "title": "Limit"}, "orderBy": {"anyOf": [{"items": {"type": "string"}, "type": "array"}, {"type": "null"}], "default": null, "description": "Columns to order by", "title": "Orderby"}, "math": {"anyOf": [{"$ref": "#/$defs/BaseMathType"}, {"$ref": "#/$defs/CountPerActorMathType"}, {"$ref": "#/$defs/PropertyMathType"}, {"type": "null"}], "default": null, "description": "Aggregation type", "title": "Math"}, "math_property": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "Event property to aggregate", "title": "Math Property"}, "properties": {"anyOf": [{"items": {"anyOf": [{"$ref": "#/$defs/EventPropertyFilter"}, {"$ref": "#/$defs/PersonPropertyFilter"}, {"$ref": "#/$defs/ElementPropertyFilter"}, {"$ref": "#/$defs/SessionPropertyFilter"}, {"$ref": "#/$defs/CohortPropertyFilter"}, {"$ref": "#/$defs/RecordingPropertyFilter"}, {"$ref": "#/$defs/FeaturePropertyFilter"}, {"$ref": "#/$defs/EmptyPropertyFilter"}]}, "type": "array"}, {"type": "null"}], "default": null, "description": "Properties to filter this series by", "title": "Properties"}}, "title": "EventsNode", "type": "object"}, "FeaturePropertyFilter": {"additionalProperties": false, "properties": {"key": {"title": "Key", "type": "string"}, "label": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "title": "Label"}, "operator": {"$ref": "#/$defs/PropertyOperator"}, "type": {"const": "feature", "default": "feature", "description": "Event property with \"$feature/\" prepended", "enum": ["feature"], "title": "Type", "type": "string"}, "value": {"anyOf": [{"type": "string"}, {"type": "number"}, {"items": {"anyOf": [{"type": "string"}, {"type": "number"}]}, "type": "array"}, {"type": "null"}], "default": null, "title": "Value"}}, "required": ["key", "operator"], "title": "FeaturePropertyFilter", "type": "object"}, "InsightDateRange": {"additionalProperties": false, "properties": {"date_from": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": "-7d", "title": "Date From"}, "date_to": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "title": "Date To"}, "explicitDate": {"anyOf": [{"type": "boolean"}, {"type": "null"}], "default": false, "description": "Whether the date_from and date_to should be used verbatim. Disables rounding to the start and end of period.", "title": "Explicitdate"}}, "title": "InsightDateRange", "type": "object"}, "IntervalType": {"enum": ["minute", "hour", "day", "week", "month"], "title": "IntervalType", "type": "string"}, "Key": {"enum": ["tag_name", "text", "href", "selector"], "title": "Key", "type": "string"}, "MultipleBreakdownType": {"enum": ["person", "event", "group", "session", "hogql"], "title": "MultipleBreakdownType", "type": "string"}, "PersonPropertyFilter": {"additionalProperties": false, "properties": {"key": {"title": "Key", "type": "string"}, "label": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "title": "Label"}, "operator": {"$ref": "#/$defs/PropertyOperator"}, "type": {"const": "person", "default": "person", "description": "Person properties", "enum": ["person"], "title": "Type", "type": "string"}, "value": {"anyOf": [{"type": "string"}, {"type": "number"}, {"items": {"anyOf": [{"type": "string"}, {"type": "number"}]}, "type": "array"}, {"type": "null"}], "default": null, "title": "Value"}}, "required": ["key", "operator"], "title": "PersonPropertyFilter", "type": "object"}, "PropertyMathType": {"enum": ["avg", "sum", "min", "max", "median", "p90", "p95", "p99"], "title": "PropertyMathType", "type": "string"}, "PropertyOperator": {"enum": ["exact", "is_not", "icontains", "not_icontains", "regex", "not_regex", "gt", "gte", "lt", "lte", "is_set", "is_not_set", "is_date_exact", "is_date_before", "is_date_after", "between", "not_between", "min", "max"], "title": "PropertyOperator", "type": "string"}, "RecordingPropertyFilter": {"additionalProperties": false, "properties": {"key": {"anyOf": [{"$ref": "#/$defs/DurationType"}, {"type": "string"}], "title": "Key"}, "label": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "title": "Label"}, "operator": {"$ref": "#/$defs/PropertyOperator"}, "type": {"const": "recording", "default": "recording", "enum": ["recording"], "title": "Type", "type": "string"}, "value": {"anyOf": [{"type": "string"}, {"type": "number"}, {"items": {"anyOf": [{"type": "string"}, {"type": "number"}]}, "type": "array"}, {"type": "null"}], "default": null, "title": "Value"}}, "required": ["key", "operator"], "title": "RecordingPropertyFilter", "type": "object"}, "SessionPropertyFilter": {"additionalProperties": false, "properties": {"key": {"title": "Key", "type": "string"}, "label": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "title": "Label"}, "operator": {"$ref": "#/$defs/PropertyOperator"}, "type": {"const": "session", "default": "session", "enum": ["session"], "title": "Type", "type": "string"}, "value": {"anyOf": [{"type": "string"}, {"type": "number"}, {"items": {"anyOf": [{"type": "string"}, {"type": "number"}]}, "type": "array"}, {"type": "null"}], "default": null, "title": "Value"}}, "required": ["key", "operator"], "title": "SessionPropertyFilter", "type": "object"}, "TrendsFilter": {"additionalProperties": false, "properties": {"aggregationAxisFormat": {"anyOf": [{"$ref": "#/$defs/AggregationAxisFormat"}, {"type": "null"}], "default": "numeric"}, "aggregationAxisPostfix": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "title": "Aggregationaxispostfix"}, "aggregationAxisPrefix": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "title": "Aggregationaxisprefix"}, "breakdown_histogram_bin_count": {"anyOf": [{"type": "number"}, {"type": "null"}], "default": null, "title": "Breakdown Histogram Bin Count"}, "decimalPlaces": {"anyOf": [{"type": "number"}, {"type": "null"}], "default": null, "title": "Decimalplaces"}, "display": {"anyOf": [{"$ref": "#/$defs/ChartDisplayType"}, {"type": "null"}], "default": "ActionsLineGraph"}, "formula": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "title": "Formula"}, "hiddenLegendIndexes": {"anyOf": [{"items": {"type": "integer"}, "type": "array"}, {"type": "null"}], "default": null, "title": "Hiddenlegendindexes"}, "showLabelsOnSeries": {"anyOf": [{"type": "boolean"}, {"type": "null"}], "default": null, "title": "Showlabelsonseries"}, "showLegend": {"anyOf": [{"type": "boolean"}, {"type": "null"}], "default": false, "title": "Showlegend"}, "showPercentStackView": {"anyOf": [{"type": "boolean"}, {"type": "null"}], "default": false, "title": "Showpercentstackview"}, "showValuesOnSeries": {"anyOf": [{"type": "boolean"}, {"type": "null"}], "default": false, "title": "Showvaluesonseries"}, "smoothingIntervals": {"anyOf": [{"type": "integer"}, {"type": "null"}], "default": 1, "title": "Smoothingintervals"}, "yAxisScaleType": {"anyOf": [{"$ref": "#/$defs/YAxisScaleType"}, {"type": "null"}], "default": null}}, "title": "TrendsFilter", "type": "object"}, "YAxisScaleType": {"enum": ["log10", "linear"], "title": "YAxisScaleType", "type": "string"}}, "additionalProperties": false, "properties": {"breakdownFilter": {"anyOf": [{"$ref": "#/$defs/BreakdownFilter"}, {"type": "null"}], "default": null, "description": "Breakdown of the events and actions"}, "compareFilter": {"anyOf": [{"$ref": "#/$defs/CompareFilter"}, {"type": "null"}], "default": null, "description": "Compare to date range"}, "dateRange": {"anyOf": [{"$ref": "#/$defs/InsightDateRange"}, {"type": "null"}], "default": null, "description": "Date range for the query"}, "filterTestAccounts": {"anyOf": [{"type": "boolean"}, {"type": "null"}], "default": false, "description": "Exclude internal and test users by applying the respective filters", "title": "Filtertestaccounts"}, "interval": {"anyOf": [{"$ref": "#/$defs/IntervalType"}, {"type": "null"}], "default": "day", "description": "Granularity of the response. Can be one of `hour`, `day`, `week` or `month`"}, "kind": {"const": "TrendsQuery", "default": "TrendsQuery", "enum": ["TrendsQuery"], "title": "Kind", "type": "string"}, "properties": {"anyOf": [{"items": {"anyOf": [{"$ref": "#/$defs/EventPropertyFilter"}, {"$ref": "#/$defs/PersonPropertyFilter"}, {"$ref": "#/$defs/ElementPropertyFilter"}, {"$ref": "#/$defs/SessionPropertyFilter"}, {"$ref": "#/$defs/CohortPropertyFilter"}, {"$ref": "#/$defs/RecordingPropertyFilter"}, {"$ref": "#/$defs/FeaturePropertyFilter"}, {"$ref": "#/$defs/EmptyPropertyFilter"}]}, "type": "array"}, {"type": "null"}], "default": [], "description": "Property filters for all series", "title": "Properties"}, "samplingFactor": {"anyOf": [{"type": "number"}, {"type": "null"}], "default": null, "description": "Sampling rate", "title": "Samplingfactor"}, "series": {"description": "Events and actions to include", "items": {"anyOf": [{"$ref": "#/$defs/EventsNode"}, {"$ref": "#/$defs/ActionsNode"}]}, "title": "Series", "type": "array"}, "trendsFilter": {"anyOf": [{"$ref": "#/$defs/TrendsFilter"}, {"type": "null"}], "default": null, "description": "Properties specific to the trends insight"}}, "required": ["series"], "title": "TrendsQuery", "type": "object"}'


class TrendsFunction:
    def _replace_value_in_dict(self, item: Any, original_schema: Any):
        if isinstance(item, list):
            return [self._replace_value_in_dict(i, original_schema) for i in item]
        elif isinstance(item, dict):
            if list(item.keys()) == ["$ref"]:
                definitions = item["$ref"][2:].split("/")
                res = original_schema.copy()
                for definition in definitions:
                    res = res[definition]
                return res
            else:
                return {key: self._replace_value_in_dict(i, original_schema) for key, i in item.items()}
        else:
            return item

    @cached_property
    def _flat_schema(self):
        # schema = TrendsQuery.model_json_schema()
        schema = json.loads(hardcoded_schema)

        # Clean up the schema
        breakdown_schema = schema["$defs"]["BreakdownFilter"]
        for key in (
            "breakdown",
            "breakdown_type",
            "breakdown_normalize_url",
            "breakdown_histogram_bin_count",
            "breakdown_group_type_index",
        ):
            del breakdown_schema["properties"][key]

        # Clean up the property filters
        for key, title in (
            ("EventPropertyFilter", PropertyDefinition.Type.EVENT.label),
            ("PersonPropertyFilter", PropertyDefinition.Type.PERSON.label),
            ("SessionPropertyFilter", PropertyDefinition.Type.SESSION.label),
            ("FeaturePropertyFilter", "feature"),
        ):
            property_schema = schema["$defs"][key]
            property_schema["properties"]["key"]["description"] = (
                f"Use one of the properties the user has provided in the <{PropertiesPrompt.get_tag_name(title)}> tag."
            )

        for _ in range(100):
            if "$ref" not in json.dumps(schema):
                break
            schema = self._replace_value_in_dict(schema.copy(), schema.copy())
        del schema["$defs"]
        return schema

    def generate_function(self) -> ChatCompletionToolParam:
        return {
            "type": "function",
            "function": {
                "name": "output_insight_schema",
                "description": "Outputs the JSON schema of a product analytics insight",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "reasoning_steps": {
                            "type": "array",
                            "items": {"type": "string"},
                            "description": "The reasoning steps leading to the final conclusion that will be shown to the user. Use 'you' if you want to refer to the user.",
                        },
                        "answer": self._flat_schema,
                    },
                },
            },
        }
