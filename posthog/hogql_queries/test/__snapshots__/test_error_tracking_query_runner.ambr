# serializer version: 1
# name: TestErrorTrackingQueryRunner.test_assignee_groups
  '''
  SELECT count(DISTINCT events.uuid) AS occurrences,
         count(DISTINCT events.`$session_id`) AS sessions,
         count(DISTINCT events.distinct_id) AS users,
         max(toTimeZone(events.timestamp, 'UTC')) AS last_seen,
         min(toTimeZone(events.timestamp, 'UTC')) AS first_seen,
         any(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$exception_message'), ''), 'null'), '^"|"$', '')) AS description,
         any(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$exception_type'), ''), 'null'), '^"|"$', '')) AS exception_type,
         multiIf(has([['SyntaxError']], JSONExtract(ifNull(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$exception_fingerprint'), ''), 'null'), '^"|"$', ''), '[]'), 'Array(String)')), ['SyntaxError'], has([['custom_fingerprint']], JSONExtract(ifNull(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$exception_fingerprint'), ''), 'null'), '^"|"$', ''), '[]'), 'Array(String)')), ['custom_fingerprint'], JSONExtract(ifNull(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$exception_fingerprint'), ''), 'null'), '^"|"$', ''), '[]'), 'Array(String)')) AS fingerprint
  FROM events
  WHERE and(equals(events.team_id, 2), equals(events.event, '$exception'), 1, has([['SyntaxError'], ['custom_fingerprint']], JSONExtract(ifNull(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$exception_fingerprint'), ''), 'null'), '^"|"$', ''), '[]'), 'Array(String)')))
  GROUP BY fingerprint
  LIMIT 101
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=4000000,
                    max_expanded_ast_elements=4000000,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestErrorTrackingQueryRunner.test_column_names
  '''
  SELECT count(DISTINCT events.uuid) AS occurrences,
         count(DISTINCT events.`$session_id`) AS sessions,
         count(DISTINCT events.distinct_id) AS users,
         max(toTimeZone(events.timestamp, 'UTC')) AS last_seen,
         min(toTimeZone(events.timestamp, 'UTC')) AS first_seen,
         any(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$exception_message'), ''), 'null'), '^"|"$', '')) AS description,
         any(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$exception_type'), ''), 'null'), '^"|"$', '')) AS exception_type,
         JSONExtract(ifNull(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$exception_fingerprint'), ''), 'null'), '^"|"$', ''), '[]'), 'Array(String)') AS fingerprint
  FROM events
  LEFT OUTER JOIN
    (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
            person_distinct_id_overrides.distinct_id AS distinct_id
     FROM person_distinct_id_overrides
     WHERE equals(person_distinct_id_overrides.team_id, 2)
     GROUP BY person_distinct_id_overrides.distinct_id
     HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id)
  LEFT JOIN
    (SELECT person.id AS id,
            replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, 'email'), ''), 'null'), '^"|"$', '') AS properties___email
     FROM person
     WHERE and(equals(person.team_id, 2), ifNull(in(tuple(person.id, person.version),
                                                      (SELECT person.id AS id, max(person.version) AS version
                                                       FROM person
                                                       WHERE equals(person.team_id, 2)
                                                       GROUP BY person.id
                                                       HAVING and(ifNull(equals(argMax(person.is_deleted, person.version), 0), 0), ifNull(less(argMax(toTimeZone(person.created_at, 'UTC'), person.version), plus(now64(6, 'UTC'), toIntervalDay(1))), 0)))), 0)) SETTINGS optimize_aggregation_in_order=1) AS events__person ON equals(if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id), events__person.id)
  WHERE and(equals(events.team_id, 2), equals(events.event, '$exception'), ifNull(notILike(events__person.properties___email, '%@posthog.com%'), 1))
  GROUP BY fingerprint
  LIMIT 101
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=4000000,
                    max_expanded_ast_elements=4000000,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestErrorTrackingQueryRunner.test_column_names.1
  '''
  SELECT count(DISTINCT events.uuid) AS occurrences,
         count(DISTINCT events.`$session_id`) AS sessions,
         count(DISTINCT events.distinct_id) AS users,
         max(toTimeZone(events.timestamp, 'UTC')) AS last_seen,
         min(toTimeZone(events.timestamp, 'UTC')) AS first_seen,
         any(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$exception_message'), ''), 'null'), '^"|"$', '')) AS description,
         any(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$exception_type'), ''), 'null'), '^"|"$', '')) AS exception_type
  FROM events
  LEFT OUTER JOIN
    (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
            person_distinct_id_overrides.distinct_id AS distinct_id
     FROM person_distinct_id_overrides
     WHERE equals(person_distinct_id_overrides.team_id, 2)
     GROUP BY person_distinct_id_overrides.distinct_id
     HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id)
  LEFT JOIN
    (SELECT person.id AS id,
            replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, 'email'), ''), 'null'), '^"|"$', '') AS properties___email
     FROM person
     WHERE and(equals(person.team_id, 2), ifNull(in(tuple(person.id, person.version),
                                                      (SELECT person.id AS id, max(person.version) AS version
                                                       FROM person
                                                       WHERE equals(person.team_id, 2)
                                                       GROUP BY person.id
                                                       HAVING and(ifNull(equals(argMax(person.is_deleted, person.version), 0), 0), ifNull(less(argMax(toTimeZone(person.created_at, 'UTC'), person.version), plus(now64(6, 'UTC'), toIntervalDay(1))), 0)))), 0)) SETTINGS optimize_aggregation_in_order=1) AS events__person ON equals(if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id), events__person.id)
  WHERE and(equals(events.team_id, 2), equals(events.event, '$exception'), ifNull(notILike(events__person.properties___email, '%@posthog.com%'), 1), has([['SyntaxError']], JSONExtract(ifNull(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$exception_fingerprint'), ''), 'null'), '^"|"$', ''), '[]'), 'Array(String)')))
  LIMIT 101
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=4000000,
                    max_expanded_ast_elements=4000000,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestErrorTrackingQueryRunner.test_fingerprints
  '''
  SELECT count(DISTINCT events.uuid) AS occurrences,
         count(DISTINCT events.`$session_id`) AS sessions,
         count(DISTINCT events.distinct_id) AS users,
         max(toTimeZone(events.timestamp, 'UTC')) AS last_seen,
         min(toTimeZone(events.timestamp, 'UTC')) AS first_seen,
         any(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$exception_message'), ''), 'null'), '^"|"$', '')) AS description,
         any(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$exception_type'), ''), 'null'), '^"|"$', '')) AS exception_type
  FROM events
  WHERE and(equals(events.team_id, 2), equals(events.event, '$exception'), 1, has([['SyntaxError']], JSONExtract(ifNull(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$exception_fingerprint'), ''), 'null'), '^"|"$', ''), '[]'), 'Array(String)')))
  LIMIT 101
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=4000000,
                    max_expanded_ast_elements=4000000,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestErrorTrackingQueryRunner.test_fingerprints_with_null_characters
  '''
  SELECT count(DISTINCT events.uuid) AS occurrences,
         count(DISTINCT events.`$session_id`) AS sessions,
         count(DISTINCT events.distinct_id) AS users,
         max(toTimeZone(events.timestamp, 'UTC')) AS last_seen,
         min(toTimeZone(events.timestamp, 'UTC')) AS first_seen,
         any(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$exception_message'), ''), 'null'), '^"|"$', '')) AS description,
         any(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$exception_type'), ''), 'null'), '^"|"$', '')) AS exception_type
  FROM events
  WHERE and(equals(events.team_id, 2), equals(events.event, '$exception'), 1, has([['SyntaxError', 'Cannot use \'in\' operator to search for \'wireframes\' in \b\0\fýf\0ì½é"\0Ø']], JSONExtract(ifNull(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$exception_fingerprint'), ''), 'null'), '^"|"$', ''), '[]'), 'Array(String)')))
  LIMIT 101
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=4000000,
                    max_expanded_ast_elements=4000000,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestErrorTrackingQueryRunner.test_fingerprints_with_null_characters.1
  '''
  SELECT "posthog_person"."id",
         "posthog_person"."created_at",
         "posthog_person"."properties_last_updated_at",
         "posthog_person"."properties_last_operation",
         "posthog_person"."team_id",
         "posthog_person"."properties",
         "posthog_person"."is_user_id",
         "posthog_person"."is_identified",
         "posthog_person"."uuid",
         "posthog_person"."version"
  FROM "posthog_person"
  INNER JOIN "posthog_persondistinctid" ON ("posthog_person"."id" = "posthog_persondistinctid"."person_id")
  WHERE ("posthog_persondistinctid"."distinct_id" = 'user_1'
         AND "posthog_persondistinctid"."team_id" = 2)
  LIMIT 21
  '''
# ---
# name: TestErrorTrackingQueryRunner.test_fingerprints_with_null_characters.10
  '''
  SELECT "posthog_datawarehousejoin"."created_by_id",
         "posthog_datawarehousejoin"."created_at",
         "posthog_datawarehousejoin"."deleted",
         "posthog_datawarehousejoin"."deleted_at",
         "posthog_datawarehousejoin"."id",
         "posthog_datawarehousejoin"."team_id",
         "posthog_datawarehousejoin"."source_table_name",
         "posthog_datawarehousejoin"."source_table_key",
         "posthog_datawarehousejoin"."joining_table_name",
         "posthog_datawarehousejoin"."joining_table_key",
         "posthog_datawarehousejoin"."field_name"
  FROM "posthog_datawarehousejoin"
  WHERE ("posthog_datawarehousejoin"."team_id" = 2
         AND NOT ("posthog_datawarehousejoin"."deleted"
                  AND "posthog_datawarehousejoin"."deleted" IS NOT NULL))
  '''
# ---
# name: TestErrorTrackingQueryRunner.test_fingerprints_with_null_characters.11
  '''
  SELECT "posthog_propertydefinition"."name",
         "posthog_propertydefinition"."property_type"
  FROM "posthog_propertydefinition"
  WHERE ("posthog_propertydefinition"."name" IN ('$exception_message',
                                                 '$exception_type',
                                                 '$exception_fingerprint')
         AND "posthog_propertydefinition"."team_id" = 2
         AND "posthog_propertydefinition"."type" IN (1,
                                                     2,
                                                     3,
                                                     4,
                                                     5 /* ... */))
  '''
# ---
# name: TestErrorTrackingQueryRunner.test_fingerprints_with_null_characters.2
  '''
  SELECT "posthog_errortrackinggroup"."fingerprint",
         "posthog_errortrackinggroup"."merged_fingerprints",
         "posthog_errortrackinggroup"."status",
         "posthog_errortrackinggroup"."assignee_id"
  FROM "posthog_errortrackinggroup"
  WHERE ("posthog_errortrackinggroup"."team_id" = 2
         AND "posthog_errortrackinggroup"."fingerprint" = (ARRAY['SyntaxError',
                                                                 'Cannot use ''in'' operator to search for ''wireframes'' in �                ýf�ì½é"¹0ø*Lö¹SY                A�Î÷Ôf
  �Ø'])::text[])
  '''
# ---
# name: TestErrorTrackingQueryRunner.test_fingerprints_with_null_characters.3
  '''
  SELECT "posthog_grouptypemapping"."id",
         "posthog_grouptypemapping"."team_id",
         "posthog_grouptypemapping"."group_type",
         "posthog_grouptypemapping"."group_type_index",
         "posthog_grouptypemapping"."name_singular",
         "posthog_grouptypemapping"."name_plural"
  FROM "posthog_grouptypemapping"
  WHERE "posthog_grouptypemapping"."team_id" = 2
  '''
# ---
# name: TestErrorTrackingQueryRunner.test_fingerprints_with_null_characters.4
  '''
  SELECT "posthog_datawarehousetable"."created_by_id",
         "posthog_datawarehousetable"."created_at",
         "posthog_datawarehousetable"."updated_at",
         "posthog_datawarehousetable"."deleted",
         "posthog_datawarehousetable"."deleted_at",
         "posthog_datawarehousetable"."id",
         "posthog_datawarehousetable"."name",
         "posthog_datawarehousetable"."format",
         "posthog_datawarehousetable"."team_id",
         "posthog_datawarehousetable"."url_pattern",
         "posthog_datawarehousetable"."credential_id",
         "posthog_datawarehousetable"."external_data_source_id",
         "posthog_datawarehousetable"."columns",
         "posthog_datawarehousetable"."row_count",
         "posthog_user"."id",
         "posthog_user"."password",
         "posthog_user"."last_login",
         "posthog_user"."first_name",
         "posthog_user"."last_name",
         "posthog_user"."is_staff",
         "posthog_user"."is_active",
         "posthog_user"."date_joined",
         "posthog_user"."uuid",
         "posthog_user"."current_organization_id",
         "posthog_user"."current_team_id",
         "posthog_user"."email",
         "posthog_user"."pending_email",
         "posthog_user"."temporary_token",
         "posthog_user"."distinct_id",
         "posthog_user"."is_email_verified",
         "posthog_user"."requested_password_reset_at",
         "posthog_user"."has_seen_product_intro_for",
         "posthog_user"."strapi_id",
         "posthog_user"."theme_mode",
         "posthog_user"."partial_notification_settings",
         "posthog_user"."anonymize_data",
         "posthog_user"."toolbar_mode",
         "posthog_user"."hedgehog_config",
         "posthog_user"."events_column_config",
         "posthog_user"."email_opt_in",
         "posthog_datawarehousecredential"."created_by_id",
         "posthog_datawarehousecredential"."created_at",
         "posthog_datawarehousecredential"."id",
         "posthog_datawarehousecredential"."access_key",
         "posthog_datawarehousecredential"."access_secret",
         "posthog_datawarehousecredential"."team_id",
         "posthog_externaldatasource"."created_by_id",
         "posthog_externaldatasource"."created_at",
         "posthog_externaldatasource"."updated_at",
         "posthog_externaldatasource"."deleted",
         "posthog_externaldatasource"."deleted_at",
         "posthog_externaldatasource"."id",
         "posthog_externaldatasource"."source_id",
         "posthog_externaldatasource"."connection_id",
         "posthog_externaldatasource"."destination_id",
         "posthog_externaldatasource"."team_id",
         "posthog_externaldatasource"."sync_frequency",
         "posthog_externaldatasource"."status",
         "posthog_externaldatasource"."source_type",
         "posthog_externaldatasource"."job_inputs",
         "posthog_externaldatasource"."are_tables_created",
         "posthog_externaldatasource"."prefix"
  FROM "posthog_datawarehousetable"
  LEFT OUTER JOIN "posthog_user" ON ("posthog_datawarehousetable"."created_by_id" = "posthog_user"."id")
  LEFT OUTER JOIN "posthog_datawarehousecredential" ON ("posthog_datawarehousetable"."credential_id" = "posthog_datawarehousecredential"."id")
  LEFT OUTER JOIN "posthog_externaldatasource" ON ("posthog_datawarehousetable"."external_data_source_id" = "posthog_externaldatasource"."id")
  WHERE ("posthog_datawarehousetable"."team_id" = 2
         AND NOT ("posthog_datawarehousetable"."deleted"
                  AND "posthog_datawarehousetable"."deleted" IS NOT NULL))
  '''
# ---
# name: TestErrorTrackingQueryRunner.test_fingerprints_with_null_characters.5
  '''
  SELECT "posthog_datawarehousesavedquery"."created_by_id",
         "posthog_datawarehousesavedquery"."created_at",
         "posthog_datawarehousesavedquery"."deleted",
         "posthog_datawarehousesavedquery"."deleted_at",
         "posthog_datawarehousesavedquery"."id",
         "posthog_datawarehousesavedquery"."name",
         "posthog_datawarehousesavedquery"."team_id",
         "posthog_datawarehousesavedquery"."columns",
         "posthog_datawarehousesavedquery"."external_tables",
         "posthog_datawarehousesavedquery"."query",
         "posthog_datawarehousesavedquery"."status",
         "posthog_datawarehousesavedquery"."last_run_at"
  FROM "posthog_datawarehousesavedquery"
  WHERE ("posthog_datawarehousesavedquery"."team_id" = 2
         AND NOT ("posthog_datawarehousesavedquery"."deleted"
                  AND "posthog_datawarehousesavedquery"."deleted" IS NOT NULL))
  '''
# ---
# name: TestErrorTrackingQueryRunner.test_fingerprints_with_null_characters.6
  '''
  SELECT "posthog_datawarehousejoin"."created_by_id",
         "posthog_datawarehousejoin"."created_at",
         "posthog_datawarehousejoin"."deleted",
         "posthog_datawarehousejoin"."deleted_at",
         "posthog_datawarehousejoin"."id",
         "posthog_datawarehousejoin"."team_id",
         "posthog_datawarehousejoin"."source_table_name",
         "posthog_datawarehousejoin"."source_table_key",
         "posthog_datawarehousejoin"."joining_table_name",
         "posthog_datawarehousejoin"."joining_table_key",
         "posthog_datawarehousejoin"."field_name"
  FROM "posthog_datawarehousejoin"
  WHERE ("posthog_datawarehousejoin"."team_id" = 2
         AND NOT ("posthog_datawarehousejoin"."deleted"
                  AND "posthog_datawarehousejoin"."deleted" IS NOT NULL))
  '''
# ---
# name: TestErrorTrackingQueryRunner.test_fingerprints_with_null_characters.7
  '''
  SELECT "posthog_grouptypemapping"."id",
         "posthog_grouptypemapping"."team_id",
         "posthog_grouptypemapping"."group_type",
         "posthog_grouptypemapping"."group_type_index",
         "posthog_grouptypemapping"."name_singular",
         "posthog_grouptypemapping"."name_plural"
  FROM "posthog_grouptypemapping"
  WHERE "posthog_grouptypemapping"."team_id" = 2
  '''
# ---
# name: TestErrorTrackingQueryRunner.test_fingerprints_with_null_characters.8
  '''
  SELECT "posthog_datawarehousetable"."created_by_id",
         "posthog_datawarehousetable"."created_at",
         "posthog_datawarehousetable"."updated_at",
         "posthog_datawarehousetable"."deleted",
         "posthog_datawarehousetable"."deleted_at",
         "posthog_datawarehousetable"."id",
         "posthog_datawarehousetable"."name",
         "posthog_datawarehousetable"."format",
         "posthog_datawarehousetable"."team_id",
         "posthog_datawarehousetable"."url_pattern",
         "posthog_datawarehousetable"."credential_id",
         "posthog_datawarehousetable"."external_data_source_id",
         "posthog_datawarehousetable"."columns",
         "posthog_datawarehousetable"."row_count",
         "posthog_user"."id",
         "posthog_user"."password",
         "posthog_user"."last_login",
         "posthog_user"."first_name",
         "posthog_user"."last_name",
         "posthog_user"."is_staff",
         "posthog_user"."is_active",
         "posthog_user"."date_joined",
         "posthog_user"."uuid",
         "posthog_user"."current_organization_id",
         "posthog_user"."current_team_id",
         "posthog_user"."email",
         "posthog_user"."pending_email",
         "posthog_user"."temporary_token",
         "posthog_user"."distinct_id",
         "posthog_user"."is_email_verified",
         "posthog_user"."requested_password_reset_at",
         "posthog_user"."has_seen_product_intro_for",
         "posthog_user"."strapi_id",
         "posthog_user"."theme_mode",
         "posthog_user"."partial_notification_settings",
         "posthog_user"."anonymize_data",
         "posthog_user"."toolbar_mode",
         "posthog_user"."hedgehog_config",
         "posthog_user"."events_column_config",
         "posthog_user"."email_opt_in",
         "posthog_datawarehousecredential"."created_by_id",
         "posthog_datawarehousecredential"."created_at",
         "posthog_datawarehousecredential"."id",
         "posthog_datawarehousecredential"."access_key",
         "posthog_datawarehousecredential"."access_secret",
         "posthog_datawarehousecredential"."team_id",
         "posthog_externaldatasource"."created_by_id",
         "posthog_externaldatasource"."created_at",
         "posthog_externaldatasource"."updated_at",
         "posthog_externaldatasource"."deleted",
         "posthog_externaldatasource"."deleted_at",
         "posthog_externaldatasource"."id",
         "posthog_externaldatasource"."source_id",
         "posthog_externaldatasource"."connection_id",
         "posthog_externaldatasource"."destination_id",
         "posthog_externaldatasource"."team_id",
         "posthog_externaldatasource"."sync_frequency",
         "posthog_externaldatasource"."status",
         "posthog_externaldatasource"."source_type",
         "posthog_externaldatasource"."job_inputs",
         "posthog_externaldatasource"."are_tables_created",
         "posthog_externaldatasource"."prefix"
  FROM "posthog_datawarehousetable"
  LEFT OUTER JOIN "posthog_user" ON ("posthog_datawarehousetable"."created_by_id" = "posthog_user"."id")
  LEFT OUTER JOIN "posthog_datawarehousecredential" ON ("posthog_datawarehousetable"."credential_id" = "posthog_datawarehousecredential"."id")
  LEFT OUTER JOIN "posthog_externaldatasource" ON ("posthog_datawarehousetable"."external_data_source_id" = "posthog_externaldatasource"."id")
  WHERE ("posthog_datawarehousetable"."team_id" = 2
         AND NOT ("posthog_datawarehousetable"."deleted"
                  AND "posthog_datawarehousetable"."deleted" IS NOT NULL))
  '''
# ---
# name: TestErrorTrackingQueryRunner.test_fingerprints_with_null_characters.9
  '''
  SELECT "posthog_datawarehousesavedquery"."created_by_id",
         "posthog_datawarehousesavedquery"."created_at",
         "posthog_datawarehousesavedquery"."deleted",
         "posthog_datawarehousesavedquery"."deleted_at",
         "posthog_datawarehousesavedquery"."id",
         "posthog_datawarehousesavedquery"."name",
         "posthog_datawarehousesavedquery"."team_id",
         "posthog_datawarehousesavedquery"."columns",
         "posthog_datawarehousesavedquery"."external_tables",
         "posthog_datawarehousesavedquery"."query",
         "posthog_datawarehousesavedquery"."status",
         "posthog_datawarehousesavedquery"."last_run_at"
  FROM "posthog_datawarehousesavedquery"
  WHERE ("posthog_datawarehousesavedquery"."team_id" = 2
         AND NOT ("posthog_datawarehousesavedquery"."deleted"
                  AND "posthog_datawarehousesavedquery"."deleted" IS NOT NULL))
  '''
# ---
# name: TestErrorTrackingQueryRunner.test_hogql_filters
  '''
  SELECT count(DISTINCT events.uuid) AS occurrences,
         count(DISTINCT events.`$session_id`) AS sessions,
         count(DISTINCT events.distinct_id) AS users,
         max(toTimeZone(events.timestamp, 'UTC')) AS last_seen,
         min(toTimeZone(events.timestamp, 'UTC')) AS first_seen,
         any(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$exception_message'), ''), 'null'), '^"|"$', '')) AS description,
         any(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$exception_type'), ''), 'null'), '^"|"$', '')) AS exception_type,
         JSONExtract(ifNull(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$exception_fingerprint'), ''), 'null'), '^"|"$', ''), '[]'), 'Array(String)') AS fingerprint
  FROM events
  LEFT OUTER JOIN
    (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
            person_distinct_id_overrides.distinct_id AS distinct_id
     FROM person_distinct_id_overrides
     WHERE equals(person_distinct_id_overrides.team_id, 2)
     GROUP BY person_distinct_id_overrides.distinct_id
     HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id)
  LEFT JOIN
    (SELECT person.id AS id,
            replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, 'email'), ''), 'null'), '^"|"$', '') AS properties___email
     FROM person
     WHERE and(equals(person.team_id, 2), ifNull(in(tuple(person.id, person.version),
                                                      (SELECT person.id AS id, max(person.version) AS version
                                                       FROM person
                                                       WHERE equals(person.team_id, 2)
                                                       GROUP BY person.id
                                                       HAVING and(ifNull(equals(argMax(person.is_deleted, person.version), 0), 0), ifNull(less(argMax(toTimeZone(person.created_at, 'UTC'), person.version), plus(now64(6, 'UTC'), toIntervalDay(1))), 0)))), 0)) SETTINGS optimize_aggregation_in_order=1) AS events__person ON equals(if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id), events__person.id)
  WHERE and(equals(events.team_id, 2), equals(events.event, '$exception'), ifNull(equals(events__person.properties___email, 'email@posthog.com'), 0))
  GROUP BY fingerprint
  LIMIT 101
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=4000000,
                    max_expanded_ast_elements=4000000,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestErrorTrackingQueryRunner.test_search_query
  '''
  SELECT count(DISTINCT events.uuid) AS occurrences,
         count(DISTINCT events.`$session_id`) AS sessions,
         count(DISTINCT events.distinct_id) AS users,
         max(toTimeZone(events.timestamp, 'UTC')) AS last_seen,
         min(toTimeZone(events.timestamp, 'UTC')) AS first_seen,
         any(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$exception_message'), ''), 'null'), '^"|"$', '')) AS description,
         any(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$exception_type'), ''), 'null'), '^"|"$', '')) AS exception_type,
         JSONExtract(ifNull(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$exception_fingerprint'), ''), 'null'), '^"|"$', ''), '[]'), 'Array(String)') AS fingerprint
  FROM events
  LEFT OUTER JOIN
    (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
            person_distinct_id_overrides.distinct_id AS distinct_id
     FROM person_distinct_id_overrides
     WHERE equals(person_distinct_id_overrides.team_id, 2)
     GROUP BY person_distinct_id_overrides.distinct_id
     HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id)
  LEFT JOIN
    (SELECT person.id AS id,
            replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, 'email'), ''), 'null'), '^"|"$', '') AS properties___email
     FROM person
     WHERE and(equals(person.team_id, 2), ifNull(in(tuple(person.id, person.version),
                                                      (SELECT person.id AS id, max(person.version) AS version
                                                       FROM person
                                                       WHERE equals(person.team_id, 2)
                                                       GROUP BY person.id
                                                       HAVING and(ifNull(equals(argMax(person.is_deleted, person.version), 0), 0), ifNull(less(argMax(toTimeZone(person.created_at, 'UTC'), person.version), plus(now64(6, 'UTC'), toIntervalDay(1))), 0)))), 0)) SETTINGS optimize_aggregation_in_order=1) AS events__person ON equals(if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id), events__person.id)
  WHERE and(equals(events.team_id, 2), equals(events.event, '$exception'), and(less(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2022-01-11 00:00:00.000000', 6, 'UTC')), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2022-01-10 00:00:00.000000', 6, 'UTC')), ifNull(notILike(events__person.properties___email, '%@posthog.com%'), 1)), or(ifNull(greater(position(lower(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$exception_list'), ''), 'null'), '^"|"$', '')), lower('databasenot')), 0), 0), ifNull(greater(position(lower(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$exception_type'), ''), 'null'), '^"|"$', '')), lower('databasenot')), 0), 0), ifNull(greater(position(lower(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$exception_message'), ''), 'null'), '^"|"$', '')), lower('databasenot')), 0), 0)))
  GROUP BY fingerprint
  LIMIT 101
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=4000000,
                    max_expanded_ast_elements=4000000,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestErrorTrackingQueryRunner.test_search_query_with_multiple_search_items
  '''
  SELECT count(DISTINCT events.uuid) AS occurrences,
         count(DISTINCT events.`$session_id`) AS sessions,
         count(DISTINCT events.distinct_id) AS users,
         max(toTimeZone(events.timestamp, 'UTC')) AS last_seen,
         min(toTimeZone(events.timestamp, 'UTC')) AS first_seen,
         any(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$exception_message'), ''), 'null'), '^"|"$', '')) AS description,
         any(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$exception_type'), ''), 'null'), '^"|"$', '')) AS exception_type,
         JSONExtract(ifNull(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$exception_fingerprint'), ''), 'null'), '^"|"$', ''), '[]'), 'Array(String)') AS fingerprint
  FROM events
  LEFT OUTER JOIN
    (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
            person_distinct_id_overrides.distinct_id AS distinct_id
     FROM person_distinct_id_overrides
     WHERE equals(person_distinct_id_overrides.team_id, 2)
     GROUP BY person_distinct_id_overrides.distinct_id
     HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id)
  LEFT JOIN
    (SELECT person.id AS id,
            replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, 'email'), ''), 'null'), '^"|"$', '') AS properties___email
     FROM person
     WHERE and(equals(person.team_id, 2), ifNull(in(tuple(person.id, person.version),
                                                      (SELECT person.id AS id, max(person.version) AS version
                                                       FROM person
                                                       WHERE equals(person.team_id, 2)
                                                       GROUP BY person.id
                                                       HAVING and(ifNull(equals(argMax(person.is_deleted, person.version), 0), 0), ifNull(less(argMax(toTimeZone(person.created_at, 'UTC'), person.version), plus(now64(6, 'UTC'), toIntervalDay(1))), 0)))), 0)) SETTINGS optimize_aggregation_in_order=1) AS events__person ON equals(if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id), events__person.id)
  WHERE and(equals(events.team_id, 2), equals(events.event, '$exception'), ifNull(notILike(events__person.properties___email, '%@posthog.com%'), 1), and(or(ifNull(greater(position(lower(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$exception_list'), ''), 'null'), '^"|"$', '')), lower('databasenotfoundX')), 0), 0), ifNull(greater(position(lower(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$exception_type'), ''), 'null'), '^"|"$', '')), lower('databasenotfoundX')), 0), 0), ifNull(greater(position(lower(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$exception_message'), ''), 'null'), '^"|"$', '')), lower('databasenotfoundX')), 0), 0)), or(ifNull(greater(position(lower(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$exception_list'), ''), 'null'), '^"|"$', '')), lower('clickhouse/client/execute.py')), 0), 0), ifNull(greater(position(lower(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$exception_type'), ''), 'null'), '^"|"$', '')), lower('clickhouse/client/execute.py')), 0), 0), ifNull(greater(position(lower(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$exception_message'), ''), 'null'), '^"|"$', '')), lower('clickhouse/client/execute.py')), 0), 0))))
  GROUP BY fingerprint
  LIMIT 101
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=4000000,
                    max_expanded_ast_elements=4000000,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestErrorTrackingQueryRunner.test_search_query_with_null_characters
  '''
  SELECT count(DISTINCT events.uuid) AS occurrences,
         count(DISTINCT events.`$session_id`) AS sessions,
         count(DISTINCT events.distinct_id) AS users,
         max(toTimeZone(events.timestamp, 'UTC')) AS last_seen,
         min(toTimeZone(events.timestamp, 'UTC')) AS first_seen,
         any(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$exception_message'), ''), 'null'), '^"|"$', '')) AS description,
         any(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$exception_type'), ''), 'null'), '^"|"$', '')) AS exception_type,
         JSONExtract(ifNull(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$exception_fingerprint'), ''), 'null'), '^"|"$', ''), '[]'), 'Array(String)') AS fingerprint
  FROM events
  WHERE and(equals(events.team_id, 2), equals(events.event, '$exception'), and(less(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2021-01-11 00:00:00.000000', 6, 'UTC')), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2021-01-10 00:00:00.000000', 6, 'UTC'))), or(ifNull(greater(position(lower(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$exception_list'), ''), 'null'), '^"|"$', '')), lower('wireframe')), 0), 0), ifNull(greater(position(lower(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$exception_type'), ''), 'null'), '^"|"$', '')), lower('wireframe')), 0), 0), ifNull(greater(position(lower(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$exception_message'), ''), 'null'), '^"|"$', '')), lower('wireframe')), 0), 0)))
  GROUP BY fingerprint
  LIMIT 101
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=4000000,
                    max_expanded_ast_elements=4000000,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestErrorTrackingQueryRunner.test_search_query_with_null_characters.1
  '''
  SELECT count(DISTINCT events.uuid) AS occurrences,
         count(DISTINCT events.`$session_id`) AS sessions,
         count(DISTINCT events.distinct_id) AS users,
         max(toTimeZone(events.timestamp, 'UTC')) AS last_seen,
         min(toTimeZone(events.timestamp, 'UTC')) AS first_seen,
         any(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$exception_message'), ''), 'null'), '^"|"$', '')) AS description,
         any(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$exception_type'), ''), 'null'), '^"|"$', '')) AS exception_type,
         JSONExtract(ifNull(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$exception_fingerprint'), ''), 'null'), '^"|"$', ''), '[]'), 'Array(String)') AS fingerprint
  FROM events
  WHERE and(equals(events.team_id, 2), equals(events.event, '$exception'), and(less(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2021-01-11 00:00:00.000000', 6, 'UTC')), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2021-01-10 00:00:00.000000', 6, 'UTC'))), or(ifNull(greater(position(lower(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$exception_list'), ''), 'null'), '^"|"$', '')), lower('f\0ì½é')), 0), 0), ifNull(greater(position(lower(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$exception_type'), ''), 'null'), '^"|"$', '')), lower('f\0ì½é')), 0), 0), ifNull(greater(position(lower(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$exception_message'), ''), 'null'), '^"|"$', '')), lower('f\0ì½é')), 0), 0)))
  GROUP BY fingerprint
  LIMIT 101
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=4000000,
                    max_expanded_ast_elements=4000000,
                    max_bytes_before_external_group_by=0
  '''
# ---
