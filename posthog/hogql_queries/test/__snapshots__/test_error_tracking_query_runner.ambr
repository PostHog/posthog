# serializer version: 1
# name: TestErrorTrackingQueryRunner.test_sorting_by_revenue
  '''
  SELECT per_issue_per_revenue_entity.issue_id AS id,
         max(per_issue_per_revenue_entity.last_seen) AS last_seen,
         min(per_issue_per_revenue_entity.first_seen) AS first_seen,
         sum(per_issue_per_revenue_entity.latest_revenue) AS revenue,
         argMax(per_issue_per_revenue_entity.library, per_issue_per_revenue_entity.last_seen) AS library
  FROM
    (SELECT if(not(empty(e__exception_issue_override.issue_id)), e__exception_issue_override.issue_id, accurateCastOrNull(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$exception_issue_id'), ''), 'null'), '^"|"$', ''), 'UUID')) AS issue_id,
            max(toTimeZone(e.timestamp, 'UTC')) AS last_seen,
            min(toTimeZone(e.timestamp, 'UTC')) AS first_seen,
            argMax(e__person__revenue_analytics.revenue, toTimeZone(e.timestamp, 'UTC')) AS latest_revenue,
            argMax(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$lib'), ''), 'null'), '^"|"$', ''), toTimeZone(e.timestamp, 'UTC')) AS library
     FROM events AS e
     LEFT OUTER JOIN
       (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
               person_distinct_id_overrides.distinct_id AS distinct_id
        FROM person_distinct_id_overrides
        WHERE equals(person_distinct_id_overrides.team_id, 99999)
        GROUP BY person_distinct_id_overrides.distinct_id
        HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS e__override ON equals(e.distinct_id, e__override.distinct_id)
     LEFT JOIN
       (SELECT argMax(person.id, person.version) AS e__person___id,
               person.id AS id
        FROM person
        WHERE equals(person.team_id, 99999)
        GROUP BY person.id
        HAVING and(ifNull(equals(argMax(person.is_deleted, person.version), 0), 0), ifNull(less(argMax(toTimeZone(person.created_at, 'UTC'), person.version), plus(now64(6, 'UTC'), toIntervalDay(1))), 0)) SETTINGS optimize_aggregation_in_order=1) AS e__person ON equals(if(not(empty(e__override.distinct_id)), e__override.person_id, e.person_id), e__person.e__person___id)
     LEFT JOIN
       (SELECT 99999 AS team_id,
               accurateCastOrNull(revenue_analytics_customer.id, 'UUID') AS person_id,
               sum(revenue_analytics_revenue_item.amount) AS revenue,
               sumIf(revenue_analytics_revenue_item.amount, greaterOrEquals(toTimeZone(revenue_analytics_revenue_item.timestamp, 'UTC'), minus(today(), toIntervalDay(30)))) AS revenue_last_30_days
        FROM
          (SELECT toString(persons.id) AS id,
                  'revenue_analytics.events.purchase' AS source_label,
                  persons.created_at AS timestamp,
                  persons.properties___name AS name,
                  persons.properties___email AS email,
                  persons.properties___phone AS phone,
                  persons.properties___address AS address,
                  persons.properties___metadata AS metadata,
                  persons.`properties___$geoip_country_name` AS country,
                  formatDateTime(toStartOfMonth(persons.created_at), '%Y-%m') AS cohort,
                  NULL AS initial_coupon,
                  NULL AS initial_coupon_id
           FROM
             (SELECT person.id AS id,
                     replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, 'name'), ''), 'null'), '^"|"$', '') AS properties___name,
                     replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, 'email'), ''), 'null'), '^"|"$', '') AS properties___email,
                     replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, 'phone'), ''), 'null'), '^"|"$', '') AS properties___phone,
                     replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, 'address'), ''), 'null'), '^"|"$', '') AS properties___address,
                     replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, 'metadata'), ''), 'null'), '^"|"$', '') AS properties___metadata,
                     replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, '$geoip_country_name'), ''), 'null'), '^"|"$', '') AS `properties___$geoip_country_name`,
                     toTimeZone(person.created_at, 'UTC') AS created_at
              FROM person
              WHERE and(equals(person.team_id, 99999), in(tuple(person.id, person.version),
                                                            (SELECT person.id AS id, max(person.version) AS version
                                                             FROM person
                                                             WHERE equals(person.team_id, 99999)
                                                             GROUP BY person.id
                                                             HAVING and(ifNull(equals(argMax(person.is_deleted, person.version), 0), 0), ifNull(less(argMax(toTimeZone(person.created_at, 'UTC'), person.version), plus(now64(6, 'UTC'), toIntervalDay(1))), 0))
                                                             ORDER BY argMax(toTimeZone(person.created_at, 'UTC'), person.version) DESC))) SETTINGS optimize_aggregation_in_order=1) AS persons
           INNER JOIN
             (SELECT DISTINCT events__person.id AS person_id
              FROM events
              LEFT OUTER JOIN
                (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                        person_distinct_id_overrides.distinct_id AS distinct_id
                 FROM person_distinct_id_overrides
                 WHERE equals(person_distinct_id_overrides.team_id, 99999)
                 GROUP BY person_distinct_id_overrides.distinct_id
                 HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id)
              LEFT JOIN
                (SELECT person.id AS id
                 FROM person
                 WHERE equals(person.team_id, 99999)
                 GROUP BY person.id
                 HAVING and(ifNull(equals(argMax(person.is_deleted, person.version), 0), 0), ifNull(less(argMax(toTimeZone(person.created_at, 'UTC'), person.version), plus(now64(6, 'UTC'), toIntervalDay(1))), 0)) SETTINGS optimize_aggregation_in_order=1) AS events__person ON equals(if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id), events__person.id)
              WHERE and(equals(events.team_id, 99999), 1)) AS events ON equals(persons.id, events.person_id)
           ORDER BY persons.created_at DESC) AS revenue_analytics_customer
        LEFT JOIN
          (SELECT toString(events.uuid) AS id,
                  toString(events.uuid) AS invoice_item_id,
                  'revenue_analytics.events.purchase' AS source_label,
                  toTimeZone(events.timestamp, 'UTC') AS timestamp,
                  timestamp AS created_at,
                  0 AS is_recurring,
                  NULL AS product_id,
                  toString(if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id)) AS customer_id,
                  events.`$group_0` AS group_0_key,
                  events.`$group_1` AS group_1_key,
                  events.`$group_2` AS group_2_key,
                  events.`$group_3` AS group_3_key,
                  events.`$group_4` AS group_4_key,
                  NULL AS invoice_id,
                  NULL AS subscription_id,
                  toString(events.`$session_id`) AS session_id,
                  events.event AS event_name,
                  NULL AS coupon,
                  coupon AS coupon_id,
                  'USD' AS original_currency,
                  accurateCastOrNull(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, 'revenue'), ''), 'null'), '^"|"$', ''), 'Decimal64(10)') AS original_amount,
                  1 AS enable_currency_aware_divider,
                  if(enable_currency_aware_divider, accurateCastOrNull(1, 'Decimal64(10)'), accurateCastOrNull(100, 'Decimal64(10)')) AS currency_aware_divider,
                  divideDecimal(original_amount, currency_aware_divider) AS currency_aware_amount,
                  'USD' AS currency,
                  if(isNull('USD'), accurateCastOrNull(currency_aware_amount, 'Decimal64(10)'), if(equals('USD', 'USD'), toDecimal64(currency_aware_amount, 10), if(dictGetOrDefault(`posthog_test`.`exchange_rate_dict`, 'rate', 'USD', toDate(toTimeZone(events.timestamp, 'UTC')), toDecimal64(0, 10)) = 0, toDecimal64(0, 10), multiplyDecimal(divideDecimal(toDecimal64(currency_aware_amount, 10), dictGetOrDefault(`posthog_test`.`exchange_rate_dict`, 'rate', 'USD', toDate(toTimeZone(events.timestamp, 'UTC')), toDecimal64(0, 10))), dictGetOrDefault(`posthog_test`.`exchange_rate_dict`, 'rate', 'USD', toDate(toTimeZone(events.timestamp, 'UTC')), toDecimal64(0, 10)))))) AS amount
           FROM events
           LEFT OUTER JOIN
             (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                     person_distinct_id_overrides.distinct_id AS distinct_id
              FROM person_distinct_id_overrides
              WHERE equals(person_distinct_id_overrides.team_id, 99999)
              GROUP BY person_distinct_id_overrides.distinct_id
              HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id)
           WHERE and(equals(events.team_id, 99999), and(equals(events.event, 'purchase'), 1, isNotNull(amount)))
           ORDER BY timestamp DESC) AS revenue_analytics_revenue_item ON equals(revenue_analytics_customer.id, revenue_analytics_revenue_item.customer_id)
        GROUP BY person_id) AS e__person__revenue_analytics ON equals(e__person.e__person___id, e__person__revenue_analytics.person_id)
     LEFT OUTER JOIN
       (SELECT argMax(error_tracking_issue_fingerprint_overrides.issue_id, error_tracking_issue_fingerprint_overrides.version) AS issue_id,
               error_tracking_issue_fingerprint_overrides.fingerprint AS fingerprint
        FROM error_tracking_issue_fingerprint_overrides
        WHERE equals(error_tracking_issue_fingerprint_overrides.team_id, 99999)
        GROUP BY error_tracking_issue_fingerprint_overrides.fingerprint
        HAVING ifNull(equals(argMax(error_tracking_issue_fingerprint_overrides.is_deleted, error_tracking_issue_fingerprint_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS e__exception_issue_override ON equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$exception_fingerprint'), ''), 'null'), '^"|"$', ''), e__exception_issue_override.fingerprint)
     WHERE and(equals(e.team_id, 99999), equals(e.event, '$exception'), isNotNull(if(not(empty(e__exception_issue_override.issue_id)), e__exception_issue_override.issue_id, accurateCastOrNull(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$exception_issue_id'), ''), 'null'), '^"|"$', ''), 'UUID'))), 1, greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime(toDateTime64('explicit_redacted_timestamp', 6, 'UTC'), 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime(toDateTime64('today', 6, 'UTC'), 'UTC')))
     GROUP BY if(not(empty(e__exception_issue_override.issue_id)), e__exception_issue_override.issue_id, accurateCastOrNull(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$exception_issue_id'), ''), 'null'), '^"|"$', ''), 'UUID')),
              e__person.id) AS per_issue_per_revenue_entity
  GROUP BY per_issue_per_revenue_entity.issue_id
  ORDER BY revenue DESC
  LIMIT 101
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=4000000,
                    max_expanded_ast_elements=4000000,
                    max_bytes_before_external_group_by=0,
                    transform_null_in=1,
                    optimize_min_equality_disjunction_chain_length=4294967295,
                    allow_experimental_join_condition=1
  '''
# ---
