# serializer version: 1
# name: TestClickhouseRetentionGroupAggregation.test_groups_aggregating
  '''
  SELECT actor_activity.breakdown_values AS breakdown_values,
         actor_activity.intervals_from_base AS intervals_from_base,
         count(DISTINCT actor_activity.actor_id) AS count
  FROM
    (SELECT DISTINCT breakdown_values AS breakdown_values,
                     intervals_from_base AS intervals_from_base,
                     actor_id AS actor_id
     FROM
       (SELECT target_event.breakdown_values AS breakdown_values,
               dateDiff('week', target_event.event_date, returning_event.event_date) AS intervals_from_base,
               returning_event.target AS actor_id
        FROM
          (SELECT DISTINCT toStartOfWeek(toTimeZone(events.timestamp, 'UTC'), 0) AS event_date,
                           events.`$group_0` AS target,
                           [dateDiff('week', toStartOfWeek(toDateTime64('2020-06-07 00:00:00.000000', 6, 'UTC'), 0), toStartOfWeek(toTimeZone(events.timestamp, 'UTC'), 0))] AS breakdown_values
           FROM events
           WHERE and(equals(events.team_id, 2), equals(events.event, '$pageview'), not(has([''], events.`$group_0`)), and(greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-06-07 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-07-27 00:00:00.000000', 6, 'UTC'))))) AS target_event
        JOIN
          (SELECT toStartOfWeek(toTimeZone(events.timestamp, 'UTC'), 0) AS event_date,
                  events.`$group_0` AS target
           FROM events
           WHERE and(equals(events.team_id, 2), equals(events.event, '$pageview'), not(has([''], events.`$group_0`)), and(greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-06-07 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-07-27 00:00:00.000000', 6, 'UTC'))))
           GROUP BY target,
                    event_date) AS returning_event ON equals(returning_event.target, target_event.target)
        WHERE ifNull(greater(returning_event.event_date, target_event.event_date), 0)
        UNION ALL SELECT target_event.breakdown_values AS breakdown_values,
                         0 AS intervals_from_base,
                         target_event.target AS actor_id
        FROM
          (SELECT DISTINCT toStartOfWeek(toTimeZone(events.timestamp, 'UTC'), 0) AS event_date,
                           events.`$group_0` AS target,
                           [dateDiff('week', toStartOfWeek(toDateTime64('2020-06-07 00:00:00.000000', 6, 'UTC'), 0), toStartOfWeek(toTimeZone(events.timestamp, 'UTC'), 0))] AS breakdown_values
           FROM events
           WHERE and(equals(events.team_id, 2), equals(events.event, '$pageview'), not(has([''], events.`$group_0`)), and(greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-06-07 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-07-27 00:00:00.000000', 6, 'UTC'))))) AS target_event)
     WHERE and(or(1, isNull(breakdown_values)), or(1, isNull(intervals_from_base)))) AS actor_activity
  GROUP BY breakdown_values,
           intervals_from_base
  ORDER BY breakdown_values ASC,
           intervals_from_base ASC
  LIMIT 10000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1
  '''
# ---
# name: TestClickhouseRetentionGroupAggregation.test_groups_aggregating.1
  '''
  SELECT groups.key AS key,
         source.appearances AS appearances
  FROM
    (SELECT groups.group_type_index AS index,
            groups.group_key AS key
     FROM groups
     WHERE equals(groups.team_id, 2)
     GROUP BY groups.group_type_index,
              groups.group_key) AS groups
  INNER JOIN
    (SELECT actor_activity.actor_id AS actor_id,
            groupArray(actor_activity.intervals_from_base) AS appearance_intervals,
            arraySort(appearance_intervals) AS appearances,
            arrayExists(x -> ifNull(equals(x, 0), 0), appearance_intervals) AS week_0,
            arrayExists(x -> ifNull(equals(x, 1), 0), appearance_intervals) AS week_1,
            arrayExists(x -> ifNull(equals(x, 2), 0), appearance_intervals) AS week_2,
            arrayExists(x -> ifNull(equals(x, 3), 0), appearance_intervals) AS week_3,
            arrayExists(x -> ifNull(equals(x, 4), 0), appearance_intervals) AS week_4,
            arrayExists(x -> ifNull(equals(x, 5), 0), appearance_intervals) AS week_5,
            arrayExists(x -> ifNull(equals(x, 6), 0), appearance_intervals) AS week_6
     FROM
       (SELECT DISTINCT breakdown_values AS breakdown_values,
                        intervals_from_base AS intervals_from_base,
                        actor_id AS actor_id
        FROM
          (SELECT target_event.breakdown_values AS breakdown_values,
                  dateDiff('week', target_event.event_date, returning_event.event_date) AS intervals_from_base,
                  returning_event.target AS actor_id
           FROM
             (SELECT DISTINCT toStartOfWeek(toTimeZone(events.timestamp, 'UTC'), 0) AS event_date,
                              events.`$group_0` AS target,
                              [dateDiff('week', toStartOfWeek(toDateTime64('2020-06-07 00:00:00.000000', 6, 'UTC'), 0), toStartOfWeek(toTimeZone(events.timestamp, 'UTC'), 0))] AS breakdown_values
              FROM events
              WHERE and(equals(events.team_id, 2), equals(events.event, '$pageview'), not(has([''], events.`$group_0`)), and(greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-06-07 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-07-27 00:00:00.000000', 6, 'UTC'))))) AS target_event
           JOIN
             (SELECT toStartOfWeek(toTimeZone(events.timestamp, 'UTC'), 0) AS event_date,
                     events.`$group_0` AS target
              FROM events
              WHERE and(equals(events.team_id, 2), equals(events.event, '$pageview'), not(has([''], events.`$group_0`)), and(greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-06-07 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-07-27 00:00:00.000000', 6, 'UTC'))))
              GROUP BY target,
                       event_date) AS returning_event ON equals(returning_event.target, target_event.target)
           WHERE ifNull(greater(returning_event.event_date, target_event.event_date), 0)
           UNION ALL SELECT target_event.breakdown_values AS breakdown_values,
                            0 AS intervals_from_base,
                            target_event.target AS actor_id
           FROM
             (SELECT DISTINCT toStartOfWeek(toTimeZone(events.timestamp, 'UTC'), 0) AS event_date,
                              events.`$group_0` AS target,
                              [dateDiff('week', toStartOfWeek(toDateTime64('2020-06-07 00:00:00.000000', 6, 'UTC'), 0), toStartOfWeek(toTimeZone(events.timestamp, 'UTC'), 0))] AS breakdown_values
              FROM events
              WHERE and(equals(events.team_id, 2), equals(events.event, '$pageview'), not(has([''], events.`$group_0`)), and(greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-06-07 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-07-27 00:00:00.000000', 6, 'UTC'))))) AS target_event)
        WHERE and(or(0, ifNull(equals(breakdown_values, [0]), 0)), or(1, isNull(intervals_from_base)))) AS actor_activity
     GROUP BY actor_activity.actor_id) AS source ON equals(groups.key, source.actor_id)
  ORDER BY length(source.appearances) DESC, source.actor_id ASC
  LIMIT 101
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1
  '''
# ---
# name: TestClickhouseRetentionGroupAggregation.test_groups_aggregating.2
  '''
  SELECT actor_activity.breakdown_values AS breakdown_values,
         actor_activity.intervals_from_base AS intervals_from_base,
         count(DISTINCT actor_activity.actor_id) AS count
  FROM
    (SELECT DISTINCT breakdown_values AS breakdown_values,
                     intervals_from_base AS intervals_from_base,
                     actor_id AS actor_id
     FROM
       (SELECT target_event.breakdown_values AS breakdown_values,
               dateDiff('week', target_event.event_date, returning_event.event_date) AS intervals_from_base,
               returning_event.target AS actor_id
        FROM
          (SELECT DISTINCT toStartOfWeek(toTimeZone(events.timestamp, 'UTC'), 0) AS event_date,
                           events.`$group_1` AS target,
                           [dateDiff('week', toStartOfWeek(toDateTime64('2020-06-07 00:00:00.000000', 6, 'UTC'), 0), toStartOfWeek(toTimeZone(events.timestamp, 'UTC'), 0))] AS breakdown_values
           FROM events
           WHERE and(equals(events.team_id, 2), equals(events.event, '$pageview'), not(has([''], events.`$group_1`)), and(greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-06-07 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-07-27 00:00:00.000000', 6, 'UTC'))))) AS target_event
        JOIN
          (SELECT toStartOfWeek(toTimeZone(events.timestamp, 'UTC'), 0) AS event_date,
                  events.`$group_1` AS target
           FROM events
           WHERE and(equals(events.team_id, 2), equals(events.event, '$pageview'), not(has([''], events.`$group_1`)), and(greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-06-07 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-07-27 00:00:00.000000', 6, 'UTC'))))
           GROUP BY target,
                    event_date) AS returning_event ON equals(returning_event.target, target_event.target)
        WHERE ifNull(greater(returning_event.event_date, target_event.event_date), 0)
        UNION ALL SELECT target_event.breakdown_values AS breakdown_values,
                         0 AS intervals_from_base,
                         target_event.target AS actor_id
        FROM
          (SELECT DISTINCT toStartOfWeek(toTimeZone(events.timestamp, 'UTC'), 0) AS event_date,
                           events.`$group_1` AS target,
                           [dateDiff('week', toStartOfWeek(toDateTime64('2020-06-07 00:00:00.000000', 6, 'UTC'), 0), toStartOfWeek(toTimeZone(events.timestamp, 'UTC'), 0))] AS breakdown_values
           FROM events
           WHERE and(equals(events.team_id, 2), equals(events.event, '$pageview'), not(has([''], events.`$group_1`)), and(greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-06-07 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-07-27 00:00:00.000000', 6, 'UTC'))))) AS target_event)
     WHERE and(or(1, isNull(breakdown_values)), or(1, isNull(intervals_from_base)))) AS actor_activity
  GROUP BY breakdown_values,
           intervals_from_base
  ORDER BY breakdown_values ASC,
           intervals_from_base ASC
  LIMIT 10000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1
  '''
# ---
# name: TestClickhouseRetentionGroupAggregation.test_groups_aggregating_person_on_events
  '''
  SELECT actor_activity.breakdown_values AS breakdown_values,
         actor_activity.intervals_from_base AS intervals_from_base,
         count(DISTINCT actor_activity.actor_id) AS count
  FROM
    (SELECT DISTINCT breakdown_values AS breakdown_values,
                     intervals_from_base AS intervals_from_base,
                     actor_id AS actor_id
     FROM
       (SELECT target_event.breakdown_values AS breakdown_values,
               dateDiff('week', target_event.event_date, returning_event.event_date) AS intervals_from_base,
               returning_event.target AS actor_id
        FROM
          (SELECT DISTINCT toStartOfWeek(toTimeZone(events.timestamp, 'UTC'), 0) AS event_date,
                           events.`$group_0` AS target,
                           [dateDiff('week', toStartOfWeek(toDateTime64('2020-06-07 00:00:00.000000', 6, 'UTC'), 0), toStartOfWeek(toTimeZone(events.timestamp, 'UTC'), 0))] AS breakdown_values
           FROM events
           WHERE and(equals(events.team_id, 2), equals(events.event, '$pageview'), not(has([''], events.`$group_0`)), and(greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-06-07 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-07-27 00:00:00.000000', 6, 'UTC'))))) AS target_event
        JOIN
          (SELECT toStartOfWeek(toTimeZone(events.timestamp, 'UTC'), 0) AS event_date,
                  events.`$group_0` AS target
           FROM events
           WHERE and(equals(events.team_id, 2), equals(events.event, '$pageview'), not(has([''], events.`$group_0`)), and(greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-06-07 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-07-27 00:00:00.000000', 6, 'UTC'))))
           GROUP BY target,
                    event_date) AS returning_event ON equals(returning_event.target, target_event.target)
        WHERE ifNull(greater(returning_event.event_date, target_event.event_date), 0)
        UNION ALL SELECT target_event.breakdown_values AS breakdown_values,
                         0 AS intervals_from_base,
                         target_event.target AS actor_id
        FROM
          (SELECT DISTINCT toStartOfWeek(toTimeZone(events.timestamp, 'UTC'), 0) AS event_date,
                           events.`$group_0` AS target,
                           [dateDiff('week', toStartOfWeek(toDateTime64('2020-06-07 00:00:00.000000', 6, 'UTC'), 0), toStartOfWeek(toTimeZone(events.timestamp, 'UTC'), 0))] AS breakdown_values
           FROM events
           WHERE and(equals(events.team_id, 2), equals(events.event, '$pageview'), not(has([''], events.`$group_0`)), and(greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-06-07 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-07-27 00:00:00.000000', 6, 'UTC'))))) AS target_event)
     WHERE and(or(1, isNull(breakdown_values)), or(1, isNull(intervals_from_base)))) AS actor_activity
  GROUP BY breakdown_values,
           intervals_from_base
  ORDER BY breakdown_values ASC,
           intervals_from_base ASC
  LIMIT 10000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1
  '''
# ---
# name: TestClickhouseRetentionGroupAggregation.test_groups_aggregating_person_on_events.1
  '''
  SELECT groups.key AS key,
         source.appearances AS appearances
  FROM
    (SELECT groups.group_type_index AS index,
            groups.group_key AS key
     FROM groups
     WHERE equals(groups.team_id, 2)
     GROUP BY groups.group_type_index,
              groups.group_key) AS groups
  INNER JOIN
    (SELECT actor_activity.actor_id AS actor_id,
            groupArray(actor_activity.intervals_from_base) AS appearance_intervals,
            arraySort(appearance_intervals) AS appearances,
            arrayExists(x -> ifNull(equals(x, 0), 0), appearance_intervals) AS week_0,
            arrayExists(x -> ifNull(equals(x, 1), 0), appearance_intervals) AS week_1,
            arrayExists(x -> ifNull(equals(x, 2), 0), appearance_intervals) AS week_2,
            arrayExists(x -> ifNull(equals(x, 3), 0), appearance_intervals) AS week_3,
            arrayExists(x -> ifNull(equals(x, 4), 0), appearance_intervals) AS week_4,
            arrayExists(x -> ifNull(equals(x, 5), 0), appearance_intervals) AS week_5,
            arrayExists(x -> ifNull(equals(x, 6), 0), appearance_intervals) AS week_6
     FROM
       (SELECT DISTINCT breakdown_values AS breakdown_values,
                        intervals_from_base AS intervals_from_base,
                        actor_id AS actor_id
        FROM
          (SELECT target_event.breakdown_values AS breakdown_values,
                  dateDiff('week', target_event.event_date, returning_event.event_date) AS intervals_from_base,
                  returning_event.target AS actor_id
           FROM
             (SELECT DISTINCT toStartOfWeek(toTimeZone(events.timestamp, 'UTC'), 0) AS event_date,
                              events.`$group_0` AS target,
                              [dateDiff('week', toStartOfWeek(toDateTime64('2020-06-07 00:00:00.000000', 6, 'UTC'), 0), toStartOfWeek(toTimeZone(events.timestamp, 'UTC'), 0))] AS breakdown_values
              FROM events
              WHERE and(equals(events.team_id, 2), equals(events.event, '$pageview'), not(has([''], events.`$group_0`)), and(greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-06-07 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-07-27 00:00:00.000000', 6, 'UTC'))))) AS target_event
           JOIN
             (SELECT toStartOfWeek(toTimeZone(events.timestamp, 'UTC'), 0) AS event_date,
                     events.`$group_0` AS target
              FROM events
              WHERE and(equals(events.team_id, 2), equals(events.event, '$pageview'), not(has([''], events.`$group_0`)), and(greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-06-07 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-07-27 00:00:00.000000', 6, 'UTC'))))
              GROUP BY target,
                       event_date) AS returning_event ON equals(returning_event.target, target_event.target)
           WHERE ifNull(greater(returning_event.event_date, target_event.event_date), 0)
           UNION ALL SELECT target_event.breakdown_values AS breakdown_values,
                            0 AS intervals_from_base,
                            target_event.target AS actor_id
           FROM
             (SELECT DISTINCT toStartOfWeek(toTimeZone(events.timestamp, 'UTC'), 0) AS event_date,
                              events.`$group_0` AS target,
                              [dateDiff('week', toStartOfWeek(toDateTime64('2020-06-07 00:00:00.000000', 6, 'UTC'), 0), toStartOfWeek(toTimeZone(events.timestamp, 'UTC'), 0))] AS breakdown_values
              FROM events
              WHERE and(equals(events.team_id, 2), equals(events.event, '$pageview'), not(has([''], events.`$group_0`)), and(greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-06-07 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-07-27 00:00:00.000000', 6, 'UTC'))))) AS target_event)
        WHERE and(or(0, ifNull(equals(breakdown_values, [0]), 0)), or(1, isNull(intervals_from_base)))) AS actor_activity
     GROUP BY actor_activity.actor_id) AS source ON equals(groups.key, source.actor_id)
  ORDER BY length(source.appearances) DESC, source.actor_id ASC
  LIMIT 101
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1
  '''
# ---
# name: TestClickhouseRetentionGroupAggregation.test_groups_aggregating_person_on_events.2
  '''
  SELECT actor_activity.breakdown_values AS breakdown_values,
         actor_activity.intervals_from_base AS intervals_from_base,
         count(DISTINCT actor_activity.actor_id) AS count
  FROM
    (SELECT DISTINCT breakdown_values AS breakdown_values,
                     intervals_from_base AS intervals_from_base,
                     actor_id AS actor_id
     FROM
       (SELECT target_event.breakdown_values AS breakdown_values,
               dateDiff('week', target_event.event_date, returning_event.event_date) AS intervals_from_base,
               returning_event.target AS actor_id
        FROM
          (SELECT DISTINCT toStartOfWeek(toTimeZone(events.timestamp, 'UTC'), 0) AS event_date,
                           events.`$group_1` AS target,
                           [dateDiff('week', toStartOfWeek(toDateTime64('2020-06-07 00:00:00.000000', 6, 'UTC'), 0), toStartOfWeek(toTimeZone(events.timestamp, 'UTC'), 0))] AS breakdown_values
           FROM events
           WHERE and(equals(events.team_id, 2), equals(events.event, '$pageview'), not(has([''], events.`$group_1`)), and(greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-06-07 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-07-27 00:00:00.000000', 6, 'UTC'))))) AS target_event
        JOIN
          (SELECT toStartOfWeek(toTimeZone(events.timestamp, 'UTC'), 0) AS event_date,
                  events.`$group_1` AS target
           FROM events
           WHERE and(equals(events.team_id, 2), equals(events.event, '$pageview'), not(has([''], events.`$group_1`)), and(greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-06-07 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-07-27 00:00:00.000000', 6, 'UTC'))))
           GROUP BY target,
                    event_date) AS returning_event ON equals(returning_event.target, target_event.target)
        WHERE ifNull(greater(returning_event.event_date, target_event.event_date), 0)
        UNION ALL SELECT target_event.breakdown_values AS breakdown_values,
                         0 AS intervals_from_base,
                         target_event.target AS actor_id
        FROM
          (SELECT DISTINCT toStartOfWeek(toTimeZone(events.timestamp, 'UTC'), 0) AS event_date,
                           events.`$group_1` AS target,
                           [dateDiff('week', toStartOfWeek(toDateTime64('2020-06-07 00:00:00.000000', 6, 'UTC'), 0), toStartOfWeek(toTimeZone(events.timestamp, 'UTC'), 0))] AS breakdown_values
           FROM events
           WHERE and(equals(events.team_id, 2), equals(events.event, '$pageview'), not(has([''], events.`$group_1`)), and(greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-06-07 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-07-27 00:00:00.000000', 6, 'UTC'))))) AS target_event)
     WHERE and(or(1, isNull(breakdown_values)), or(1, isNull(intervals_from_base)))) AS actor_activity
  GROUP BY breakdown_values,
           intervals_from_base
  ORDER BY breakdown_values ASC,
           intervals_from_base ASC
  LIMIT 10000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1
  '''
# ---
# name: TestRetention.test_day_interval_sampled
  '''
  SELECT actor_activity.breakdown_values AS breakdown_values,
         actor_activity.intervals_from_base AS intervals_from_base,
         count(DISTINCT actor_activity.actor_id) AS count
  FROM
    (SELECT DISTINCT breakdown_values AS breakdown_values,
                     intervals_from_base AS intervals_from_base,
                     actor_id AS actor_id
     FROM
       (SELECT target_event.breakdown_values AS breakdown_values,
               dateDiff('day', target_event.event_date, returning_event.event_date) AS intervals_from_base,
               returning_event.target AS actor_id
        FROM
          (SELECT DISTINCT toStartOfDay(toTimeZone(events.timestamp, 'UTC')) AS event_date,
                           events__pdi.person_id AS target,
                           [dateDiff('day', toStartOfDay(toDateTime64('2020-06-10 00:00:00.000000', 6, 'UTC')), toStartOfDay(toTimeZone(events.timestamp, 'UTC')))] AS breakdown_values
           FROM events SAMPLE 1.0
           INNER JOIN
             (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                     person_distinct_id2.distinct_id AS distinct_id
              FROM person_distinct_id2
              WHERE equals(person_distinct_id2.team_id, 2)
              GROUP BY person_distinct_id2.distinct_id
              HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS events__pdi ON equals(events.distinct_id, events__pdi.distinct_id)
           WHERE and(equals(events.team_id, 2), equals(events.event, '$pageview'), and(greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-06-10 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-06-21 00:00:00.000000', 6, 'UTC'))))) AS target_event
        JOIN
          (SELECT toStartOfDay(toTimeZone(events.timestamp, 'UTC')) AS event_date,
                  events__pdi.person_id AS target
           FROM events SAMPLE 1.0
           INNER JOIN
             (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                     person_distinct_id2.distinct_id AS distinct_id
              FROM person_distinct_id2
              WHERE equals(person_distinct_id2.team_id, 2)
              GROUP BY person_distinct_id2.distinct_id
              HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS events__pdi ON equals(events.distinct_id, events__pdi.distinct_id)
           WHERE and(equals(events.team_id, 2), equals(events.event, '$pageview'), and(greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-06-10 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-06-21 00:00:00.000000', 6, 'UTC'))))
           GROUP BY target,
                    event_date) AS returning_event ON equals(returning_event.target, target_event.target)
        WHERE ifNull(greater(returning_event.event_date, target_event.event_date), 0)
        UNION ALL SELECT target_event.breakdown_values AS breakdown_values,
                         0 AS intervals_from_base,
                         target_event.target AS actor_id
        FROM
          (SELECT DISTINCT toStartOfDay(toTimeZone(events.timestamp, 'UTC')) AS event_date,
                           events__pdi.person_id AS target,
                           [dateDiff('day', toStartOfDay(toDateTime64('2020-06-10 00:00:00.000000', 6, 'UTC')), toStartOfDay(toTimeZone(events.timestamp, 'UTC')))] AS breakdown_values
           FROM events SAMPLE 1.0
           INNER JOIN
             (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                     person_distinct_id2.distinct_id AS distinct_id
              FROM person_distinct_id2
              WHERE equals(person_distinct_id2.team_id, 2)
              GROUP BY person_distinct_id2.distinct_id
              HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS events__pdi ON equals(events.distinct_id, events__pdi.distinct_id)
           WHERE and(equals(events.team_id, 2), equals(events.event, '$pageview'), and(greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-06-10 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-06-21 00:00:00.000000', 6, 'UTC'))))) AS target_event)
     WHERE and(or(1, isNull(breakdown_values)), or(1, isNull(intervals_from_base)))) AS actor_activity
  GROUP BY breakdown_values,
           intervals_from_base
  ORDER BY breakdown_values ASC,
           intervals_from_base ASC
  LIMIT 10000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1
  '''
# ---
# name: TestRetention.test_month_interval_with_person_on_events_v2
  '''
  
  SELECT distinct_id,
         person_id
  FROM events
  WHERE team_id = 2
    AND distinct_id IN ('person1',
                        'person2')
  GROUP BY distinct_id,
           person_id
  ORDER BY if(distinct_id = 'person1', -1, 0)
  '''
# ---
# name: TestRetention.test_month_interval_with_person_on_events_v2.1
  '''
  SELECT actor_activity.breakdown_values AS breakdown_values,
         actor_activity.intervals_from_base AS intervals_from_base,
         count(DISTINCT actor_activity.actor_id) AS count
  FROM
    (SELECT DISTINCT breakdown_values AS breakdown_values,
                     intervals_from_base AS intervals_from_base,
                     actor_id AS actor_id
     FROM
       (SELECT target_event.breakdown_values AS breakdown_values,
               dateDiff('month', target_event.event_date, returning_event.event_date) AS intervals_from_base,
               returning_event.target AS actor_id
        FROM
          (SELECT DISTINCT toStartOfMonth(toTimeZone(events.timestamp, 'UTC')) AS event_date,
                           ifNull(nullIf(events__override.override_person_id, '00000000-0000-0000-0000-000000000000'), events.person_id) AS target,
                           [dateDiff('month', toStartOfMonth(toDateTime64('2020-01-10 00:00:00.000000', 6, 'UTC')), toStartOfMonth(toTimeZone(events.timestamp, 'UTC')))] AS breakdown_values
           FROM events
           LEFT OUTER JOIN
             (SELECT argMax(person_overrides.override_person_id, person_overrides.version) AS override_person_id,
                     person_overrides.old_person_id AS old_person_id
              FROM person_overrides
              WHERE equals(person_overrides.team_id, 2)
              GROUP BY person_overrides.old_person_id) AS events__override ON equals(events.person_id, events__override.old_person_id)
           WHERE and(equals(events.team_id, 2), equals(events.event, '$pageview'), and(greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-01-10 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-12-10 00:00:00.000000', 6, 'UTC'))))) AS target_event
        JOIN
          (SELECT toStartOfMonth(toTimeZone(events.timestamp, 'UTC')) AS event_date,
                  ifNull(nullIf(events__override.override_person_id, '00000000-0000-0000-0000-000000000000'), events.person_id) AS target
           FROM events
           LEFT OUTER JOIN
             (SELECT argMax(person_overrides.override_person_id, person_overrides.version) AS override_person_id,
                     person_overrides.old_person_id AS old_person_id
              FROM person_overrides
              WHERE equals(person_overrides.team_id, 2)
              GROUP BY person_overrides.old_person_id) AS events__override ON equals(events.person_id, events__override.old_person_id)
           WHERE and(equals(events.team_id, 2), equals(events.event, '$pageview'), and(greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-01-10 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-12-10 00:00:00.000000', 6, 'UTC'))))
           GROUP BY target,
                    event_date) AS returning_event ON equals(returning_event.target, target_event.target)
        WHERE ifNull(greater(returning_event.event_date, target_event.event_date), 0)
        UNION ALL SELECT target_event.breakdown_values AS breakdown_values,
                         0 AS intervals_from_base,
                         target_event.target AS actor_id
        FROM
          (SELECT DISTINCT toStartOfMonth(toTimeZone(events.timestamp, 'UTC')) AS event_date,
                           ifNull(nullIf(events__override.override_person_id, '00000000-0000-0000-0000-000000000000'), events.person_id) AS target,
                           [dateDiff('month', toStartOfMonth(toDateTime64('2020-01-10 00:00:00.000000', 6, 'UTC')), toStartOfMonth(toTimeZone(events.timestamp, 'UTC')))] AS breakdown_values
           FROM events
           LEFT OUTER JOIN
             (SELECT argMax(person_overrides.override_person_id, person_overrides.version) AS override_person_id,
                     person_overrides.old_person_id AS old_person_id
              FROM person_overrides
              WHERE equals(person_overrides.team_id, 2)
              GROUP BY person_overrides.old_person_id) AS events__override ON equals(events.person_id, events__override.old_person_id)
           WHERE and(equals(events.team_id, 2), equals(events.event, '$pageview'), and(greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-01-10 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-12-10 00:00:00.000000', 6, 'UTC'))))) AS target_event)
     WHERE and(or(1, isNull(breakdown_values)), or(1, isNull(intervals_from_base)))) AS actor_activity
  GROUP BY breakdown_values,
           intervals_from_base
  ORDER BY breakdown_values ASC,
           intervals_from_base ASC
  LIMIT 10000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1
  '''
# ---
# name: TestRetention.test_retention_event_action
  '''
  SELECT actor_activity.breakdown_values AS breakdown_values,
         actor_activity.intervals_from_base AS intervals_from_base,
         count(DISTINCT actor_activity.actor_id) AS count
  FROM
    (SELECT DISTINCT breakdown_values AS breakdown_values,
                     intervals_from_base AS intervals_from_base,
                     actor_id AS actor_id
     FROM
       (SELECT target_event.breakdown_values AS breakdown_values,
               dateDiff('day', target_event.event_date, returning_event.event_date) AS intervals_from_base,
               returning_event.target AS actor_id
        FROM
          (SELECT DISTINCT toStartOfDay(toTimeZone(events.timestamp, 'UTC')) AS event_date,
                           events__pdi.person_id AS target,
                           [dateDiff('day', toStartOfDay(toDateTime64('2020-06-10 00:00:00.000000', 6, 'UTC')), toStartOfDay(toTimeZone(events.timestamp, 'UTC')))] AS breakdown_values
           FROM events
           INNER JOIN
             (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                     person_distinct_id2.distinct_id AS distinct_id
              FROM person_distinct_id2
              WHERE equals(person_distinct_id2.team_id, 2)
              GROUP BY person_distinct_id2.distinct_id
              HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS events__pdi ON equals(events.distinct_id, events__pdi.distinct_id)
           WHERE and(equals(events.team_id, 2), equals(events.event, 'sign up'), and(greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-06-10 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-06-17 00:00:00.000000', 6, 'UTC'))))) AS target_event
        JOIN
          (SELECT toStartOfDay(toTimeZone(events.timestamp, 'UTC')) AS event_date,
                  events__pdi.person_id AS target
           FROM events
           INNER JOIN
             (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                     person_distinct_id2.distinct_id AS distinct_id
              FROM person_distinct_id2
              WHERE equals(person_distinct_id2.team_id, 2)
              GROUP BY person_distinct_id2.distinct_id
              HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS events__pdi ON equals(events.distinct_id, events__pdi.distinct_id)
           WHERE and(equals(events.team_id, 2), equals(events.event, '$some_event'), and(greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-06-10 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-06-17 00:00:00.000000', 6, 'UTC'))))
           GROUP BY target,
                    event_date) AS returning_event ON equals(returning_event.target, target_event.target)
        WHERE ifNull(greater(returning_event.event_date, target_event.event_date), 0)
        UNION ALL SELECT target_event.breakdown_values AS breakdown_values,
                         0 AS intervals_from_base,
                         target_event.target AS actor_id
        FROM
          (SELECT DISTINCT toStartOfDay(toTimeZone(events.timestamp, 'UTC')) AS event_date,
                           events__pdi.person_id AS target,
                           [dateDiff('day', toStartOfDay(toDateTime64('2020-06-10 00:00:00.000000', 6, 'UTC')), toStartOfDay(toTimeZone(events.timestamp, 'UTC')))] AS breakdown_values
           FROM events
           INNER JOIN
             (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                     person_distinct_id2.distinct_id AS distinct_id
              FROM person_distinct_id2
              WHERE equals(person_distinct_id2.team_id, 2)
              GROUP BY person_distinct_id2.distinct_id
              HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS events__pdi ON equals(events.distinct_id, events__pdi.distinct_id)
           WHERE and(equals(events.team_id, 2), equals(events.event, 'sign up'), and(greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-06-10 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-06-17 00:00:00.000000', 6, 'UTC'))))) AS target_event)
     WHERE and(or(1, isNull(breakdown_values)), or(1, isNull(intervals_from_base)))) AS actor_activity
  GROUP BY breakdown_values,
           intervals_from_base
  ORDER BY breakdown_values ASC,
           intervals_from_base ASC
  LIMIT 10000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1
  '''
# ---
# name: TestRetention.test_retention_with_user_properties_via_action
  '''
  SELECT actor_activity.breakdown_values AS breakdown_values,
         actor_activity.intervals_from_base AS intervals_from_base,
         count(DISTINCT actor_activity.actor_id) AS count
  FROM
    (SELECT DISTINCT breakdown_values AS breakdown_values,
                     intervals_from_base AS intervals_from_base,
                     actor_id AS actor_id
     FROM
       (SELECT target_event.breakdown_values AS breakdown_values,
               dateDiff('day', target_event.event_date, returning_event.event_date) AS intervals_from_base,
               returning_event.target AS actor_id
        FROM
          (SELECT DISTINCT toStartOfDay(toTimeZone(events.timestamp, 'UTC')) AS event_date,
                           events__pdi.person_id AS target,
                           [dateDiff('day', toStartOfDay(toDateTime64('2020-06-10 00:00:00.000000', 6, 'UTC')), toStartOfDay(toTimeZone(events.timestamp, 'UTC')))] AS breakdown_values
           FROM events
           INNER JOIN
             (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                     person_distinct_id2.distinct_id AS distinct_id
              FROM person_distinct_id2
              WHERE equals(person_distinct_id2.team_id, 2)
              GROUP BY person_distinct_id2.distinct_id
              HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS events__pdi ON equals(events.distinct_id, events__pdi.distinct_id)
           INNER JOIN
             (SELECT person.id AS id,
                     replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, 'email'), ''), 'null'), '^"|"$', '') AS properties___email
              FROM person
              WHERE and(equals(person.team_id, 2), ifNull(in(tuple(person.id, person.version),
                                                               (SELECT person.id AS id, max(person.version) AS version
                                                                FROM person
                                                                WHERE equals(person.team_id, 2)
                                                                GROUP BY person.id
                                                                HAVING ifNull(equals(argMax(person.is_deleted, person.version), 0), 0))), 0)) SETTINGS optimize_aggregation_in_order=1) AS events__pdi__person ON equals(events__pdi.person_id, events__pdi__person.id)
           WHERE and(equals(events.team_id, 2), and(equals(events.event, '$pageview'), ifNull(equals(events__pdi__person.properties___email, 'person1@test.com'), 0)), and(greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-06-10 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-06-17 00:00:00.000000', 6, 'UTC'))))) AS target_event
        JOIN
          (SELECT toStartOfDay(toTimeZone(events.timestamp, 'UTC')) AS event_date,
                  events__pdi.person_id AS target
           FROM events
           INNER JOIN
             (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                     person_distinct_id2.distinct_id AS distinct_id
              FROM person_distinct_id2
              WHERE equals(person_distinct_id2.team_id, 2)
              GROUP BY person_distinct_id2.distinct_id
              HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS events__pdi ON equals(events.distinct_id, events__pdi.distinct_id)
           WHERE and(equals(events.team_id, 2), equals(events.event, '$pageview'), and(greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-06-10 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-06-17 00:00:00.000000', 6, 'UTC'))))
           GROUP BY target,
                    event_date) AS returning_event ON equals(returning_event.target, target_event.target)
        WHERE ifNull(greater(returning_event.event_date, target_event.event_date), 0)
        UNION ALL SELECT target_event.breakdown_values AS breakdown_values,
                         0 AS intervals_from_base,
                         target_event.target AS actor_id
        FROM
          (SELECT DISTINCT toStartOfDay(toTimeZone(events.timestamp, 'UTC')) AS event_date,
                           events__pdi.person_id AS target,
                           [dateDiff('day', toStartOfDay(toDateTime64('2020-06-10 00:00:00.000000', 6, 'UTC')), toStartOfDay(toTimeZone(events.timestamp, 'UTC')))] AS breakdown_values
           FROM events
           INNER JOIN
             (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                     person_distinct_id2.distinct_id AS distinct_id
              FROM person_distinct_id2
              WHERE equals(person_distinct_id2.team_id, 2)
              GROUP BY person_distinct_id2.distinct_id
              HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS events__pdi ON equals(events.distinct_id, events__pdi.distinct_id)
           INNER JOIN
             (SELECT person.id AS id,
                     replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, 'email'), ''), 'null'), '^"|"$', '') AS properties___email
              FROM person
              WHERE and(equals(person.team_id, 2), ifNull(in(tuple(person.id, person.version),
                                                               (SELECT person.id AS id, max(person.version) AS version
                                                                FROM person
                                                                WHERE equals(person.team_id, 2)
                                                                GROUP BY person.id
                                                                HAVING ifNull(equals(argMax(person.is_deleted, person.version), 0), 0))), 0)) SETTINGS optimize_aggregation_in_order=1) AS events__pdi__person ON equals(events__pdi.person_id, events__pdi__person.id)
           WHERE and(equals(events.team_id, 2), and(equals(events.event, '$pageview'), ifNull(equals(events__pdi__person.properties___email, 'person1@test.com'), 0)), and(greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-06-10 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-06-17 00:00:00.000000', 6, 'UTC'))))) AS target_event)
     WHERE and(or(1, isNull(breakdown_values)), or(1, isNull(intervals_from_base)))) AS actor_activity
  GROUP BY breakdown_values,
           intervals_from_base
  ORDER BY breakdown_values ASC,
           intervals_from_base ASC
  LIMIT 10000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1
  '''
# ---
# name: TestRetention.test_timezones
  '''
  SELECT actor_activity.breakdown_values AS breakdown_values,
         actor_activity.intervals_from_base AS intervals_from_base,
         count(DISTINCT actor_activity.actor_id) AS count
  FROM
    (SELECT DISTINCT breakdown_values AS breakdown_values,
                     intervals_from_base AS intervals_from_base,
                     actor_id AS actor_id
     FROM
       (SELECT target_event.breakdown_values AS breakdown_values,
               dateDiff('day', target_event.event_date, returning_event.event_date) AS intervals_from_base,
               returning_event.target AS actor_id
        FROM
          (SELECT DISTINCT toStartOfDay(toTimeZone(events.timestamp, 'UTC')) AS event_date,
                           events__pdi.person_id AS target,
                           [dateDiff('day', toStartOfDay(toDateTime64('2020-06-10 00:00:00.000000', 6, 'UTC')), toStartOfDay(toTimeZone(events.timestamp, 'UTC')))] AS breakdown_values
           FROM events
           INNER JOIN
             (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                     person_distinct_id2.distinct_id AS distinct_id
              FROM person_distinct_id2
              WHERE equals(person_distinct_id2.team_id, 2)
              GROUP BY person_distinct_id2.distinct_id
              HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS events__pdi ON equals(events.distinct_id, events__pdi.distinct_id)
           WHERE and(equals(events.team_id, 2), equals(events.event, '$pageview'), and(greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-06-10 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-06-21 00:00:00.000000', 6, 'UTC'))))) AS target_event
        JOIN
          (SELECT toStartOfDay(toTimeZone(events.timestamp, 'UTC')) AS event_date,
                  events__pdi.person_id AS target
           FROM events
           INNER JOIN
             (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                     person_distinct_id2.distinct_id AS distinct_id
              FROM person_distinct_id2
              WHERE equals(person_distinct_id2.team_id, 2)
              GROUP BY person_distinct_id2.distinct_id
              HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS events__pdi ON equals(events.distinct_id, events__pdi.distinct_id)
           WHERE and(equals(events.team_id, 2), equals(events.event, '$pageview'), and(greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-06-10 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-06-21 00:00:00.000000', 6, 'UTC'))))
           GROUP BY target,
                    event_date) AS returning_event ON equals(returning_event.target, target_event.target)
        WHERE ifNull(greater(returning_event.event_date, target_event.event_date), 0)
        UNION ALL SELECT target_event.breakdown_values AS breakdown_values,
                         0 AS intervals_from_base,
                         target_event.target AS actor_id
        FROM
          (SELECT DISTINCT toStartOfDay(toTimeZone(events.timestamp, 'UTC')) AS event_date,
                           events__pdi.person_id AS target,
                           [dateDiff('day', toStartOfDay(toDateTime64('2020-06-10 00:00:00.000000', 6, 'UTC')), toStartOfDay(toTimeZone(events.timestamp, 'UTC')))] AS breakdown_values
           FROM events
           INNER JOIN
             (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                     person_distinct_id2.distinct_id AS distinct_id
              FROM person_distinct_id2
              WHERE equals(person_distinct_id2.team_id, 2)
              GROUP BY person_distinct_id2.distinct_id
              HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS events__pdi ON equals(events.distinct_id, events__pdi.distinct_id)
           WHERE and(equals(events.team_id, 2), equals(events.event, '$pageview'), and(greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-06-10 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-06-21 00:00:00.000000', 6, 'UTC'))))) AS target_event)
     WHERE and(or(1, isNull(breakdown_values)), or(1, isNull(intervals_from_base)))) AS actor_activity
  GROUP BY breakdown_values,
           intervals_from_base
  ORDER BY breakdown_values ASC,
           intervals_from_base ASC
  LIMIT 10000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1
  '''
# ---
# name: TestRetention.test_timezones.1
  '''
  SELECT actor_activity.breakdown_values AS breakdown_values,
         actor_activity.intervals_from_base AS intervals_from_base,
         count(DISTINCT actor_activity.actor_id) AS count
  FROM
    (SELECT DISTINCT breakdown_values AS breakdown_values,
                     intervals_from_base AS intervals_from_base,
                     actor_id AS actor_id
     FROM
       (SELECT target_event.breakdown_values AS breakdown_values,
               dateDiff('day', target_event.event_date, returning_event.event_date) AS intervals_from_base,
               returning_event.target AS actor_id
        FROM
          (SELECT DISTINCT toStartOfDay(toTimeZone(events.timestamp, 'US/Pacific')) AS event_date,
                           events__pdi.person_id AS target,
                           [dateDiff('day', toStartOfDay(toDateTime64('2020-06-10 00:00:00.000000', 6, 'US/Pacific')), toStartOfDay(toTimeZone(events.timestamp, 'US/Pacific')))] AS breakdown_values
           FROM events
           INNER JOIN
             (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                     person_distinct_id2.distinct_id AS distinct_id
              FROM person_distinct_id2
              WHERE equals(person_distinct_id2.team_id, 2)
              GROUP BY person_distinct_id2.distinct_id
              HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS events__pdi ON equals(events.distinct_id, events__pdi.distinct_id)
           WHERE and(equals(events.team_id, 2), equals(events.event, '$pageview'), and(greaterOrEquals(toTimeZone(events.timestamp, 'US/Pacific'), toDateTime64('2020-06-10 00:00:00.000000', 6, 'US/Pacific')), lessOrEquals(toTimeZone(events.timestamp, 'US/Pacific'), toDateTime64('2020-06-21 00:00:00.000000', 6, 'US/Pacific'))))) AS target_event
        JOIN
          (SELECT toStartOfDay(toTimeZone(events.timestamp, 'US/Pacific')) AS event_date,
                  events__pdi.person_id AS target
           FROM events
           INNER JOIN
             (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                     person_distinct_id2.distinct_id AS distinct_id
              FROM person_distinct_id2
              WHERE equals(person_distinct_id2.team_id, 2)
              GROUP BY person_distinct_id2.distinct_id
              HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS events__pdi ON equals(events.distinct_id, events__pdi.distinct_id)
           WHERE and(equals(events.team_id, 2), equals(events.event, '$pageview'), and(greaterOrEquals(toTimeZone(events.timestamp, 'US/Pacific'), toDateTime64('2020-06-10 00:00:00.000000', 6, 'US/Pacific')), lessOrEquals(toTimeZone(events.timestamp, 'US/Pacific'), toDateTime64('2020-06-21 00:00:00.000000', 6, 'US/Pacific'))))
           GROUP BY target,
                    event_date) AS returning_event ON equals(returning_event.target, target_event.target)
        WHERE ifNull(greater(returning_event.event_date, target_event.event_date), 0)
        UNION ALL SELECT target_event.breakdown_values AS breakdown_values,
                         0 AS intervals_from_base,
                         target_event.target AS actor_id
        FROM
          (SELECT DISTINCT toStartOfDay(toTimeZone(events.timestamp, 'US/Pacific')) AS event_date,
                           events__pdi.person_id AS target,
                           [dateDiff('day', toStartOfDay(toDateTime64('2020-06-10 00:00:00.000000', 6, 'US/Pacific')), toStartOfDay(toTimeZone(events.timestamp, 'US/Pacific')))] AS breakdown_values
           FROM events
           INNER JOIN
             (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                     person_distinct_id2.distinct_id AS distinct_id
              FROM person_distinct_id2
              WHERE equals(person_distinct_id2.team_id, 2)
              GROUP BY person_distinct_id2.distinct_id
              HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS events__pdi ON equals(events.distinct_id, events__pdi.distinct_id)
           WHERE and(equals(events.team_id, 2), equals(events.event, '$pageview'), and(greaterOrEquals(toTimeZone(events.timestamp, 'US/Pacific'), toDateTime64('2020-06-10 00:00:00.000000', 6, 'US/Pacific')), lessOrEquals(toTimeZone(events.timestamp, 'US/Pacific'), toDateTime64('2020-06-21 00:00:00.000000', 6, 'US/Pacific'))))) AS target_event)
     WHERE and(or(1, isNull(breakdown_values)), or(1, isNull(intervals_from_base)))) AS actor_activity
  GROUP BY breakdown_values,
           intervals_from_base
  ORDER BY breakdown_values ASC,
           intervals_from_base ASC
  LIMIT 10000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1
  '''
# ---
# name: TestRetention.test_week_interval
  '''
  SELECT actor_activity.breakdown_values AS breakdown_values,
         actor_activity.intervals_from_base AS intervals_from_base,
         count(DISTINCT actor_activity.actor_id) AS count
  FROM
    (SELECT DISTINCT breakdown_values AS breakdown_values,
                     intervals_from_base AS intervals_from_base,
                     actor_id AS actor_id
     FROM
       (SELECT target_event.breakdown_values AS breakdown_values,
               dateDiff('week', target_event.event_date, returning_event.event_date) AS intervals_from_base,
               returning_event.target AS actor_id
        FROM
          (SELECT DISTINCT toStartOfWeek(toTimeZone(events.timestamp, 'UTC'), 0) AS event_date,
                           events__pdi.person_id AS target,
                           [dateDiff('week', toStartOfWeek(toDateTime64('2020-06-07 00:00:00.000000', 6, 'UTC'), 0), toStartOfWeek(toTimeZone(events.timestamp, 'UTC'), 0))] AS breakdown_values
           FROM events
           INNER JOIN
             (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                     person_distinct_id2.distinct_id AS distinct_id
              FROM person_distinct_id2
              WHERE equals(person_distinct_id2.team_id, 2)
              GROUP BY person_distinct_id2.distinct_id
              HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS events__pdi ON equals(events.distinct_id, events__pdi.distinct_id)
           WHERE and(equals(events.team_id, 2), equals(events.event, '$pageview'), and(greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-06-07 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-07-27 00:00:00.000000', 6, 'UTC'))))) AS target_event
        JOIN
          (SELECT toStartOfWeek(toTimeZone(events.timestamp, 'UTC'), 0) AS event_date,
                  events__pdi.person_id AS target
           FROM events
           INNER JOIN
             (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                     person_distinct_id2.distinct_id AS distinct_id
              FROM person_distinct_id2
              WHERE equals(person_distinct_id2.team_id, 2)
              GROUP BY person_distinct_id2.distinct_id
              HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS events__pdi ON equals(events.distinct_id, events__pdi.distinct_id)
           WHERE and(equals(events.team_id, 2), equals(events.event, '$pageview'), and(greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-06-07 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-07-27 00:00:00.000000', 6, 'UTC'))))
           GROUP BY target,
                    event_date) AS returning_event ON equals(returning_event.target, target_event.target)
        WHERE ifNull(greater(returning_event.event_date, target_event.event_date), 0)
        UNION ALL SELECT target_event.breakdown_values AS breakdown_values,
                         0 AS intervals_from_base,
                         target_event.target AS actor_id
        FROM
          (SELECT DISTINCT toStartOfWeek(toTimeZone(events.timestamp, 'UTC'), 0) AS event_date,
                           events__pdi.person_id AS target,
                           [dateDiff('week', toStartOfWeek(toDateTime64('2020-06-07 00:00:00.000000', 6, 'UTC'), 0), toStartOfWeek(toTimeZone(events.timestamp, 'UTC'), 0))] AS breakdown_values
           FROM events
           INNER JOIN
             (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                     person_distinct_id2.distinct_id AS distinct_id
              FROM person_distinct_id2
              WHERE equals(person_distinct_id2.team_id, 2)
              GROUP BY person_distinct_id2.distinct_id
              HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS events__pdi ON equals(events.distinct_id, events__pdi.distinct_id)
           WHERE and(equals(events.team_id, 2), equals(events.event, '$pageview'), and(greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-06-07 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-07-27 00:00:00.000000', 6, 'UTC'))))) AS target_event)
     WHERE and(or(1, isNull(breakdown_values)), or(1, isNull(intervals_from_base)))) AS actor_activity
  GROUP BY breakdown_values,
           intervals_from_base
  ORDER BY breakdown_values ASC,
           intervals_from_base ASC
  LIMIT 10000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1
  '''
# ---
# name: TestRetention.test_week_interval.1
  '''
  SELECT actor_activity.breakdown_values AS breakdown_values,
         actor_activity.intervals_from_base AS intervals_from_base,
         count(DISTINCT actor_activity.actor_id) AS count
  FROM
    (SELECT DISTINCT breakdown_values AS breakdown_values,
                     intervals_from_base AS intervals_from_base,
                     actor_id AS actor_id
     FROM
       (SELECT target_event.breakdown_values AS breakdown_values,
               dateDiff('week', target_event.event_date, returning_event.event_date) AS intervals_from_base,
               returning_event.target AS actor_id
        FROM
          (SELECT DISTINCT toStartOfWeek(toTimeZone(events.timestamp, 'UTC'), 3) AS event_date,
                           events__pdi.person_id AS target,
                           [dateDiff('week', toStartOfWeek(toDateTime64('2020-06-08 00:00:00.000000', 6, 'UTC'), 3), toStartOfWeek(toTimeZone(events.timestamp, 'UTC'), 3))] AS breakdown_values
           FROM events
           INNER JOIN
             (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                     person_distinct_id2.distinct_id AS distinct_id
              FROM person_distinct_id2
              WHERE equals(person_distinct_id2.team_id, 2)
              GROUP BY person_distinct_id2.distinct_id
              HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS events__pdi ON equals(events.distinct_id, events__pdi.distinct_id)
           WHERE and(equals(events.team_id, 2), equals(events.event, '$pageview'), and(greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-06-08 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-07-27 00:00:00.000000', 6, 'UTC'))))) AS target_event
        JOIN
          (SELECT toStartOfWeek(toTimeZone(events.timestamp, 'UTC'), 3) AS event_date,
                  events__pdi.person_id AS target
           FROM events
           INNER JOIN
             (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                     person_distinct_id2.distinct_id AS distinct_id
              FROM person_distinct_id2
              WHERE equals(person_distinct_id2.team_id, 2)
              GROUP BY person_distinct_id2.distinct_id
              HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS events__pdi ON equals(events.distinct_id, events__pdi.distinct_id)
           WHERE and(equals(events.team_id, 2), equals(events.event, '$pageview'), and(greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-06-08 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-07-27 00:00:00.000000', 6, 'UTC'))))
           GROUP BY target,
                    event_date) AS returning_event ON equals(returning_event.target, target_event.target)
        WHERE ifNull(greater(returning_event.event_date, target_event.event_date), 0)
        UNION ALL SELECT target_event.breakdown_values AS breakdown_values,
                         0 AS intervals_from_base,
                         target_event.target AS actor_id
        FROM
          (SELECT DISTINCT toStartOfWeek(toTimeZone(events.timestamp, 'UTC'), 3) AS event_date,
                           events__pdi.person_id AS target,
                           [dateDiff('week', toStartOfWeek(toDateTime64('2020-06-08 00:00:00.000000', 6, 'UTC'), 3), toStartOfWeek(toTimeZone(events.timestamp, 'UTC'), 3))] AS breakdown_values
           FROM events
           INNER JOIN
             (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                     person_distinct_id2.distinct_id AS distinct_id
              FROM person_distinct_id2
              WHERE equals(person_distinct_id2.team_id, 2)
              GROUP BY person_distinct_id2.distinct_id
              HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS events__pdi ON equals(events.distinct_id, events__pdi.distinct_id)
           WHERE and(equals(events.team_id, 2), equals(events.event, '$pageview'), and(greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-06-08 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-07-27 00:00:00.000000', 6, 'UTC'))))) AS target_event)
     WHERE and(or(1, isNull(breakdown_values)), or(1, isNull(intervals_from_base)))) AS actor_activity
  GROUP BY breakdown_values,
           intervals_from_base
  ORDER BY breakdown_values ASC,
           intervals_from_base ASC
  LIMIT 10000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1
  '''
# ---
