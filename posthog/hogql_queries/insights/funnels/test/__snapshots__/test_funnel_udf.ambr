# serializer version: 1
# name: TestFOSSFunnelUDF.test_funnel_conversion_window_seconds
  '''
  SELECT sum(step_1) AS step_1,
         sum(step_2) AS step_2,
         sum(step_3) AS step_3,
         arrayMap(x -> if(isNaN(x), NULL, x), [avgArrayOrNull(step_1_conversion_times)])[1] AS step_1_average_conversion_time,
         arrayMap(x -> if(isNaN(x), NULL, x), [avgArrayOrNull(step_2_conversion_times)])[1] AS step_2_average_conversion_time,
         arrayMap(x -> if(isNaN(x), NULL, x), [medianArrayOrNull(step_1_conversion_times)])[1] AS step_1_median_conversion_time,
         arrayMap(x -> if(isNaN(x), NULL, x), [medianArrayOrNull(step_2_conversion_times)])[1] AS step_2_median_conversion_time,
         groupArray(row_number) AS row_number,
         final_prop AS final_prop
  FROM
    (SELECT countIf(ifNull(ifNull(equals(step_reached, 0), 0), 0)) AS step_1,
            countIf(ifNull(ifNull(equals(step_reached, 1), 0), 0)) AS step_2,
            countIf(ifNull(ifNull(equals(step_reached, 2), 0), 0)) AS step_3,
            groupArrayIf(timings[1], ifNull(greater(timings[1], 0), 0)) AS step_1_conversion_times,
            groupArrayIf(timings[2], ifNull(greater(timings[2], 0), 0)) AS step_2_conversion_times,
            rowNumberInBlock() AS row_number,
            breakdown AS final_prop
     FROM
       (SELECT arraySort(t -> t.1, groupArray(tuple(accurateCastOrNull(timestamp, 'Float64'), uuid, [], arrayFilter(x -> ifNull(notEquals(x, 0), 1), [multiply(1, step_0), multiply(2, step_1), multiply(3, step_2)])))) AS events_array,
               arrayJoin(aggregate_funnel_array_v2(3, 15, 'first_touch', 'ordered', [[]], arrayFilter((x, x_before, x_after) -> not(and(ifNull(lessOrEquals(length(x.4), 1), 0), ifNull(equals(x.4, x_before.4), isNull(x.4)
                                                                                                                                                                                        and isNull(x_before.4)), ifNull(equals(x.4, x_after.4), isNull(x.4)
                                                                                                                                                                                                                        and isNull(x_after.4)), ifNull(equals(x.3, x_before.3), isNull(x.3)
                                                                                                                                                                                                                                                       and isNull(x_before.3)), ifNull(equals(x.3, x_after.3), isNull(x.3)
                                                                                                                                                                                                                                                                                       and isNull(x_after.3)), ifNull(greater(x.1, x_before.1), 0), ifNull(less(x.1, x_after.1), 0))), events_array, arrayRotateRight(events_array, 1), arrayRotateLeft(events_array, 1)))) AS af_tuple,
               af_tuple.1 AS step_reached,
               plus(af_tuple.1, 1) AS steps,
               af_tuple.2 AS breakdown,
               af_tuple.3 AS timings,
               aggregation_target AS aggregation_target
        FROM
          (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                  if(not(empty(e__override.distinct_id)), e__override.person_id, e.person_id) AS aggregation_target,
                  e.uuid AS uuid,
                  e.`$session_id` AS `$session_id`,
                  e.`$window_id` AS `$window_id`,
                  if(equals(e.event, 'step one'), 1, 0) AS step_0,
                  if(equals(e.event, 'step two'), 1, 0) AS step_1,
                  if(equals(e.event, 'step three'), 1, 0) AS step_2
           FROM events AS e
           LEFT OUTER JOIN
             (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                     person_distinct_id_overrides.distinct_id AS distinct_id
              FROM person_distinct_id_overrides
              WHERE equals(person_distinct_id_overrides.team_id, 2)
              GROUP BY person_distinct_id_overrides.distinct_id
              HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS e__override ON equals(e.distinct_id, e__override.distinct_id)
           WHERE and(equals(e.team_id, 2), and(and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2021-05-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2021-05-14 23:59:59.999999', 6, 'UTC'))), in(e.event, tuple('step one', 'step three', 'step two'))), or(ifNull(equals(step_0, 1), 0), ifNull(equals(step_1, 1), 0), ifNull(equals(step_2, 1), 0))))
        GROUP BY aggregation_target
        HAVING ifNull(greaterOrEquals(step_reached, 0), 0))
     GROUP BY breakdown
     ORDER BY step_3 DESC, step_2 DESC, step_1 DESC)
  GROUP BY final_prop
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=0,
                     max_ast_elements=4000000,
                     max_expanded_ast_elements=4000000,
                     max_bytes_before_external_group_by=23622320128,
                     allow_experimental_analyzer=1
  '''
# ---
# name: TestFOSSFunnelUDF.test_funnel_conversion_window_seconds.1
  '''
  SELECT persons.id,
         persons.id AS id,
         persons.created_at AS created_at,
         1
  FROM
    (SELECT aggregation_target AS actor_id
     FROM
       (SELECT arraySort(t -> t.1, groupArray(tuple(accurateCastOrNull(timestamp, 'Float64'), uuid, [], arrayFilter(x -> ifNull(notEquals(x, 0), 1), [multiply(1, step_0), multiply(2, step_1), multiply(3, step_2)])))) AS events_array,
               arrayJoin(aggregate_funnel_array_v2(3, 15, 'first_touch', 'ordered', [[]], arrayFilter((x, x_before, x_after) -> not(and(ifNull(lessOrEquals(length(x.4), 1), 0), ifNull(equals(x.4, x_before.4), isNull(x.4)
                                                                                                                                                                                        and isNull(x_before.4)), ifNull(equals(x.4, x_after.4), isNull(x.4)
                                                                                                                                                                                                                        and isNull(x_after.4)), ifNull(equals(x.3, x_before.3), isNull(x.3)
                                                                                                                                                                                                                                                       and isNull(x_before.3)), ifNull(equals(x.3, x_after.3), isNull(x.3)
                                                                                                                                                                                                                                                                                       and isNull(x_after.3)), ifNull(greater(x.1, x_before.1), 0), ifNull(less(x.1, x_after.1), 0))), events_array, arrayRotateRight(events_array, 1), arrayRotateLeft(events_array, 1)))) AS af_tuple,
               af_tuple.1 AS step_reached,
               plus(af_tuple.1, 1) AS steps,
               af_tuple.2 AS breakdown,
               af_tuple.3 AS timings,
               aggregation_target AS aggregation_target
        FROM
          (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                  if(not(empty(e__override.distinct_id)), e__override.person_id, e.person_id) AS aggregation_target,
                  e.uuid AS uuid,
                  e.`$session_id` AS `$session_id`,
                  e.`$window_id` AS `$window_id`,
                  if(equals(e.event, 'step one'), 1, 0) AS step_0,
                  if(equals(e.event, 'step two'), 1, 0) AS step_1,
                  if(equals(e.event, 'step three'), 1, 0) AS step_2
           FROM events AS e
           LEFT OUTER JOIN
             (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                     person_distinct_id_overrides.distinct_id AS distinct_id
              FROM person_distinct_id_overrides
              WHERE equals(person_distinct_id_overrides.team_id, 2)
              GROUP BY person_distinct_id_overrides.distinct_id
              HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS e__override ON equals(e.distinct_id, e__override.distinct_id)
           WHERE and(equals(e.team_id, 2), and(and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2021-05-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2021-05-14 23:59:59.999999', 6, 'UTC'))), in(e.event, tuple('step one', 'step three', 'step two'))), or(ifNull(equals(step_0, 1), 0), ifNull(equals(step_1, 1), 0), ifNull(equals(step_2, 1), 0))))
        GROUP BY aggregation_target
        HAVING ifNull(greaterOrEquals(step_reached, 0), 0))
     WHERE ifNull(greaterOrEquals(step_reached, 1), 0)
     ORDER BY aggregation_target ASC) AS source
  INNER JOIN
    (SELECT argMax(toTimeZone(person.created_at, 'UTC'), person.version) AS created_at,
            person.id AS id
     FROM person
     WHERE equals(person.team_id, 2)
     GROUP BY person.id
     HAVING and(ifNull(equals(argMax(person.is_deleted, person.version), 0), 0), ifNull(less(argMax(toTimeZone(person.created_at, 'UTC'), person.version), plus(now64(6, 'UTC'), toIntervalDay(1))), 0)) SETTINGS optimize_aggregation_in_order=1) AS persons ON equals(persons.id, source.actor_id)
  ORDER BY persons.created_at DESC
  LIMIT 101
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=4000000,
                    max_expanded_ast_elements=4000000,
                    max_bytes_before_external_group_by=0,
                    allow_experimental_analyzer=1
  '''
# ---
# name: TestFOSSFunnelUDF.test_funnel_events_with_person_on_events_v2
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 2
    AND distinct_id = 'stopped_after_pay'
  '''
# ---
# name: TestFOSSFunnelUDF.test_funnel_events_with_person_on_events_v2.1
  '''
  SELECT sum(step_1) AS step_1,
         sum(step_2) AS step_2,
         sum(step_3) AS step_3,
         arrayMap(x -> if(isNaN(x), NULL, x), [avgArrayOrNull(step_1_conversion_times)])[1] AS step_1_average_conversion_time,
         arrayMap(x -> if(isNaN(x), NULL, x), [avgArrayOrNull(step_2_conversion_times)])[1] AS step_2_average_conversion_time,
         arrayMap(x -> if(isNaN(x), NULL, x), [medianArrayOrNull(step_1_conversion_times)])[1] AS step_1_median_conversion_time,
         arrayMap(x -> if(isNaN(x), NULL, x), [medianArrayOrNull(step_2_conversion_times)])[1] AS step_2_median_conversion_time,
         groupArray(row_number) AS row_number,
         final_prop AS final_prop
  FROM
    (SELECT countIf(ifNull(ifNull(equals(step_reached, 0), 0), 0)) AS step_1,
            countIf(ifNull(ifNull(equals(step_reached, 1), 0), 0)) AS step_2,
            countIf(ifNull(ifNull(equals(step_reached, 2), 0), 0)) AS step_3,
            groupArrayIf(timings[1], ifNull(greater(timings[1], 0), 0)) AS step_1_conversion_times,
            groupArrayIf(timings[2], ifNull(greater(timings[2], 0), 0)) AS step_2_conversion_times,
            rowNumberInBlock() AS row_number,
            breakdown AS final_prop
     FROM
       (SELECT arraySort(t -> t.1, groupArray(tuple(accurateCastOrNull(timestamp, 'Float64'), uuid, [], arrayFilter(x -> ifNull(notEquals(x, 0), 1), [multiply(1, step_0), multiply(2, step_1), multiply(3, step_2)])))) AS events_array,
               arrayJoin(aggregate_funnel_array_v2(3, 1209600, 'first_touch', 'ordered', [[]], arrayFilter((x, x_before, x_after) -> not(and(ifNull(lessOrEquals(length(x.4), 1), 0), ifNull(equals(x.4, x_before.4), isNull(x.4)
                                                                                                                                                                                             and isNull(x_before.4)), ifNull(equals(x.4, x_after.4), isNull(x.4)
                                                                                                                                                                                                                             and isNull(x_after.4)), ifNull(equals(x.3, x_before.3), isNull(x.3)
                                                                                                                                                                                                                                                            and isNull(x_before.3)), ifNull(equals(x.3, x_after.3), isNull(x.3)
                                                                                                                                                                                                                                                                                            and isNull(x_after.3)), ifNull(greater(x.1, x_before.1), 0), ifNull(less(x.1, x_after.1), 0))), events_array, arrayRotateRight(events_array, 1), arrayRotateLeft(events_array, 1)))) AS af_tuple,
               af_tuple.1 AS step_reached,
               plus(af_tuple.1, 1) AS steps,
               af_tuple.2 AS breakdown,
               af_tuple.3 AS timings,
               aggregation_target AS aggregation_target
        FROM
          (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                  if(not(empty(e__override.distinct_id)), e__override.person_id, e.person_id) AS aggregation_target,
                  e.uuid AS uuid,
                  e.`$session_id` AS `$session_id`,
                  e.`$window_id` AS `$window_id`,
                  if(equals(e.event, 'user signed up'), 1, 0) AS step_0,
                  if(and(equals(e.event, '$autocapture'), match(e.elements_chain, '(^|;)button(\\.|$|;|:)'), arrayExists(x -> ifNull(equals(x, 'Pay $10'), 0), e.elements_chain_texts)), 1, 0) AS step_1,
                  if(and(equals(e.event, '$autocapture'), match(e.elements_chain, '(^|;)a(\\.|$|;|:)'), equals(e.elements_chain_href, '/movie')), 1, 0) AS step_2
           FROM events AS e
           LEFT OUTER JOIN
             (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                     person_distinct_id_overrides.distinct_id AS distinct_id
              FROM person_distinct_id_overrides
              WHERE equals(person_distinct_id_overrides.team_id, 2)
              GROUP BY person_distinct_id_overrides.distinct_id
              HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS e__override ON equals(e.distinct_id, e__override.distinct_id)
           WHERE and(equals(e.team_id, 2), and(and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2011-12-25 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2012-01-01 23:59:59.999999', 6, 'UTC'))), in(e.event, tuple('$autocapture', 'user signed up'))), or(ifNull(equals(step_0, 1), 0), ifNull(equals(step_1, 1), 0), ifNull(equals(step_2, 1), 0))))
        GROUP BY aggregation_target
        HAVING ifNull(greaterOrEquals(step_reached, 0), 0))
     GROUP BY breakdown
     ORDER BY step_3 DESC, step_2 DESC, step_1 DESC)
  GROUP BY final_prop
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=0,
                     max_ast_elements=4000000,
                     max_expanded_ast_elements=4000000,
                     max_bytes_before_external_group_by=23622320128,
                     allow_experimental_analyzer=1
  '''
# ---
# name: TestFOSSFunnelUDF.test_funnel_with_precalculated_cohort_step_filter
  '''
  
  SELECT count(DISTINCT person_id)
  FROM cohortpeople
  WHERE team_id = 2
    AND cohort_id = 2
    AND version = NULL
  '''
# ---
# name: TestFOSSFunnelUDF.test_funnel_with_precalculated_cohort_step_filter.1
  '''
  /* cohort_calculation: */
  SELECT count(DISTINCT person_id)
  FROM cohortpeople
  WHERE team_id = 2
    AND cohort_id = 2
    AND version = 0
  '''
# ---
# name: TestFOSSFunnelUDF.test_funnel_with_precalculated_cohort_step_filter.2
  '''
  SELECT sum(step_1) AS step_1,
         sum(step_2) AS step_2,
         arrayMap(x -> if(isNaN(x), NULL, x), [avgArrayOrNull(step_1_conversion_times)])[1] AS step_1_average_conversion_time,
         arrayMap(x -> if(isNaN(x), NULL, x), [medianArrayOrNull(step_1_conversion_times)])[1] AS step_1_median_conversion_time,
         groupArray(row_number) AS row_number,
         final_prop AS final_prop
  FROM
    (SELECT countIf(ifNull(ifNull(equals(step_reached, 0), 0), 0)) AS step_1,
            countIf(ifNull(ifNull(equals(step_reached, 1), 0), 0)) AS step_2,
            groupArrayIf(timings[1], ifNull(greater(timings[1], 0), 0)) AS step_1_conversion_times,
            rowNumberInBlock() AS row_number,
            breakdown AS final_prop
     FROM
       (SELECT arraySort(t -> t.1, groupArray(tuple(accurateCastOrNull(timestamp, 'Float64'), uuid, [], arrayFilter(x -> ifNull(notEquals(x, 0), 1), [multiply(1, step_0), multiply(2, step_1)])))) AS events_array,
               arrayJoin(aggregate_funnel_array_v2(2, 1209600, 'first_touch', 'ordered', [[]], arrayFilter((x, x_before, x_after) -> not(and(ifNull(lessOrEquals(length(x.4), 1), 0), ifNull(equals(x.4, x_before.4), isNull(x.4)
                                                                                                                                                                                             and isNull(x_before.4)), ifNull(equals(x.4, x_after.4), isNull(x.4)
                                                                                                                                                                                                                             and isNull(x_after.4)), ifNull(equals(x.3, x_before.3), isNull(x.3)
                                                                                                                                                                                                                                                            and isNull(x_before.3)), ifNull(equals(x.3, x_after.3), isNull(x.3)
                                                                                                                                                                                                                                                                                            and isNull(x_after.3)), ifNull(greater(x.1, x_before.1), 0), ifNull(less(x.1, x_after.1), 0))), events_array, arrayRotateRight(events_array, 1), arrayRotateLeft(events_array, 1)))) AS af_tuple,
               af_tuple.1 AS step_reached,
               plus(af_tuple.1, 1) AS steps,
               af_tuple.2 AS breakdown,
               af_tuple.3 AS timings,
               aggregation_target AS aggregation_target
        FROM
          (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                  if(not(empty(e__override.distinct_id)), e__override.person_id, e.person_id) AS aggregation_target,
                  e.uuid AS uuid,
                  e.`$session_id` AS `$session_id`,
                  e.`$window_id` AS `$window_id`,
                  if(and(equals(e.event, 'user signed up'), ifNull(in(if(not(empty(e__override.distinct_id)), e__override.person_id, e.person_id),
                                                                        (SELECT cohortpeople.person_id AS person_id
                                                                         FROM cohortpeople
                                                                         WHERE and(equals(cohortpeople.team_id, 2), equals(cohortpeople.cohort_id, 2), equals(cohortpeople.version, 0)))), 0)), 1, 0) AS step_0,
                  if(equals(e.event, 'paid'), 1, 0) AS step_1
           FROM events AS e
           LEFT OUTER JOIN
             (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                     person_distinct_id_overrides.distinct_id AS distinct_id
              FROM person_distinct_id_overrides
              WHERE equals(person_distinct_id_overrides.team_id, 2)
              GROUP BY person_distinct_id_overrides.distinct_id
              HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS e__override ON equals(e.distinct_id, e__override.distinct_id)
           WHERE and(equals(e.team_id, 2), and(and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-14 23:59:59.999999', 6, 'UTC'))), in(e.event, tuple('paid', 'user signed up'))), or(ifNull(equals(step_0, 1), 0), ifNull(equals(step_1, 1), 0))))
        GROUP BY aggregation_target
        HAVING ifNull(greaterOrEquals(step_reached, 0), 0))
     GROUP BY breakdown
     ORDER BY step_2 DESC, step_1 DESC)
  GROUP BY final_prop
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=0,
                     max_ast_elements=4000000,
                     max_expanded_ast_elements=4000000,
                     max_bytes_before_external_group_by=23622320128,
                     allow_experimental_analyzer=1
  '''
# ---
# name: TestFOSSFunnelUDF.test_funnel_with_property_groups
  '''
  SELECT sum(step_1) AS step_1,
         sum(step_2) AS step_2,
         sum(step_3) AS step_3,
         arrayMap(x -> if(isNaN(x), NULL, x), [avgArrayOrNull(step_1_conversion_times)])[1] AS step_1_average_conversion_time,
         arrayMap(x -> if(isNaN(x), NULL, x), [avgArrayOrNull(step_2_conversion_times)])[1] AS step_2_average_conversion_time,
         arrayMap(x -> if(isNaN(x), NULL, x), [medianArrayOrNull(step_1_conversion_times)])[1] AS step_1_median_conversion_time,
         arrayMap(x -> if(isNaN(x), NULL, x), [medianArrayOrNull(step_2_conversion_times)])[1] AS step_2_median_conversion_time,
         groupArray(row_number) AS row_number,
         final_prop AS final_prop
  FROM
    (SELECT countIf(ifNull(ifNull(equals(step_reached, 0), 0), 0)) AS step_1,
            countIf(ifNull(ifNull(equals(step_reached, 1), 0), 0)) AS step_2,
            countIf(ifNull(ifNull(equals(step_reached, 2), 0), 0)) AS step_3,
            groupArrayIf(timings[1], ifNull(greater(timings[1], 0), 0)) AS step_1_conversion_times,
            groupArrayIf(timings[2], ifNull(greater(timings[2], 0), 0)) AS step_2_conversion_times,
            rowNumberInBlock() AS row_number,
            breakdown AS final_prop
     FROM
       (SELECT arraySort(t -> t.1, groupArray(tuple(accurateCastOrNull(timestamp, 'Float64'), uuid, [], arrayFilter(x -> ifNull(notEquals(x, 0), 1), [multiply(1, step_0), multiply(2, step_1), multiply(3, step_2)])))) AS events_array,
               arrayJoin(aggregate_funnel_array_v2(3, 1209600, 'first_touch', 'ordered', [[]], arrayFilter((x, x_before, x_after) -> not(and(ifNull(lessOrEquals(length(x.4), 1), 0), ifNull(equals(x.4, x_before.4), isNull(x.4)
                                                                                                                                                                                             and isNull(x_before.4)), ifNull(equals(x.4, x_after.4), isNull(x.4)
                                                                                                                                                                                                                             and isNull(x_after.4)), ifNull(equals(x.3, x_before.3), isNull(x.3)
                                                                                                                                                                                                                                                            and isNull(x_before.3)), ifNull(equals(x.3, x_after.3), isNull(x.3)
                                                                                                                                                                                                                                                                                            and isNull(x_after.3)), ifNull(greater(x.1, x_before.1), 0), ifNull(less(x.1, x_after.1), 0))), events_array, arrayRotateRight(events_array, 1), arrayRotateLeft(events_array, 1)))) AS af_tuple,
               af_tuple.1 AS step_reached,
               plus(af_tuple.1, 1) AS steps,
               af_tuple.2 AS breakdown,
               af_tuple.3 AS timings,
               aggregation_target AS aggregation_target
        FROM
          (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                  if(not(empty(e__override.distinct_id)), e__override.person_id, e.person_id) AS aggregation_target,
                  e.uuid AS uuid,
                  e.`$session_id` AS `$session_id`,
                  e.`$window_id` AS `$window_id`,
                  if(equals(e.event, 'user signed up'), 1, 0) AS step_0,
                  if(and(equals(e.event, '$pageview'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$current_url'), ''), 'null'), '^"|"$', ''), 'aloha.com'), 0)), 1, 0) AS step_1,
                  if(and(equals(e.event, '$pageview'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$current_url'), ''), 'null'), '^"|"$', ''), 'aloha2.com'), 0)), 1, 0) AS step_2
           FROM events AS e
           LEFT OUTER JOIN
             (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                     person_distinct_id_overrides.distinct_id AS distinct_id
              FROM person_distinct_id_overrides
              WHERE equals(person_distinct_id_overrides.team_id, 2)
              GROUP BY person_distinct_id_overrides.distinct_id
              HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS e__override ON equals(e.distinct_id, e__override.distinct_id)
           LEFT JOIN
             (SELECT person.id AS id,
                     replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, 'email'), ''), 'null'), '^"|"$', '') AS properties___email,
                     replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, 'age'), ''), 'null'), '^"|"$', '') AS properties___age
              FROM person
              WHERE and(equals(person.team_id, 2), ifNull(in(tuple(person.id, person.version),
                                                               (SELECT person.id AS id, max(person.version) AS version
                                                                FROM person
                                                                WHERE equals(person.team_id, 2)
                                                                GROUP BY person.id
                                                                HAVING and(ifNull(equals(argMax(person.is_deleted, person.version), 0), 0), ifNull(less(argMax(toTimeZone(person.created_at, 'UTC'), person.version), plus(now64(6, 'UTC'), toIntervalDay(1))), 0)))), 0)) SETTINGS optimize_aggregation_in_order=1) AS e__person ON equals(if(not(empty(e__override.distinct_id)), e__override.person_id, e.person_id), e__person.id)
           WHERE and(equals(e.team_id, 2), and(and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-07-01 23:59:59.999999', 6, 'UTC'))), in(e.event, tuple('$pageview', 'user signed up')), or(and(ifNull(ilike(e__person.properties___email, '%.com%'), 0), ifNull(equals(e__person.properties___age, '20'), 0)), or(ifNull(ilike(e__person.properties___email, '%.org%'), 0), ifNull(equals(e__person.properties___age, '28'), 0)))), or(ifNull(equals(step_0, 1), 0), ifNull(equals(step_1, 1), 0), ifNull(equals(step_2, 1), 0))))
        GROUP BY aggregation_target
        HAVING ifNull(greaterOrEquals(step_reached, 0), 0))
     GROUP BY breakdown
     ORDER BY step_3 DESC, step_2 DESC, step_1 DESC)
  GROUP BY final_prop
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=0,
                     max_ast_elements=4000000,
                     max_expanded_ast_elements=4000000,
                     max_bytes_before_external_group_by=23622320128,
                     allow_experimental_analyzer=1
  '''
# ---
# name: TestFOSSFunnelUDF.test_funnel_with_property_groups.1
  '''
  SELECT persons.id,
         persons.id AS id,
         persons.created_at AS created_at,
         1
  FROM
    (SELECT aggregation_target AS actor_id
     FROM
       (SELECT arraySort(t -> t.1, groupArray(tuple(accurateCastOrNull(timestamp, 'Float64'), uuid, [], arrayFilter(x -> ifNull(notEquals(x, 0), 1), [multiply(1, step_0), multiply(2, step_1), multiply(3, step_2)])))) AS events_array,
               arrayJoin(aggregate_funnel_array_v2(3, 1209600, 'first_touch', 'ordered', [[]], arrayFilter((x, x_before, x_after) -> not(and(ifNull(lessOrEquals(length(x.4), 1), 0), ifNull(equals(x.4, x_before.4), isNull(x.4)
                                                                                                                                                                                             and isNull(x_before.4)), ifNull(equals(x.4, x_after.4), isNull(x.4)
                                                                                                                                                                                                                             and isNull(x_after.4)), ifNull(equals(x.3, x_before.3), isNull(x.3)
                                                                                                                                                                                                                                                            and isNull(x_before.3)), ifNull(equals(x.3, x_after.3), isNull(x.3)
                                                                                                                                                                                                                                                                                            and isNull(x_after.3)), ifNull(greater(x.1, x_before.1), 0), ifNull(less(x.1, x_after.1), 0))), events_array, arrayRotateRight(events_array, 1), arrayRotateLeft(events_array, 1)))) AS af_tuple,
               af_tuple.1 AS step_reached,
               plus(af_tuple.1, 1) AS steps,
               af_tuple.2 AS breakdown,
               af_tuple.3 AS timings,
               aggregation_target AS aggregation_target
        FROM
          (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                  if(not(empty(e__override.distinct_id)), e__override.person_id, e.person_id) AS aggregation_target,
                  e.uuid AS uuid,
                  e.`$session_id` AS `$session_id`,
                  e.`$window_id` AS `$window_id`,
                  if(equals(e.event, 'user signed up'), 1, 0) AS step_0,
                  if(and(equals(e.event, '$pageview'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$current_url'), ''), 'null'), '^"|"$', ''), 'aloha.com'), 0)), 1, 0) AS step_1,
                  if(and(equals(e.event, '$pageview'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$current_url'), ''), 'null'), '^"|"$', ''), 'aloha2.com'), 0)), 1, 0) AS step_2
           FROM events AS e
           LEFT OUTER JOIN
             (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                     person_distinct_id_overrides.distinct_id AS distinct_id
              FROM person_distinct_id_overrides
              WHERE equals(person_distinct_id_overrides.team_id, 2)
              GROUP BY person_distinct_id_overrides.distinct_id
              HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS e__override ON equals(e.distinct_id, e__override.distinct_id)
           LEFT JOIN
             (SELECT person.id AS id,
                     replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, 'email'), ''), 'null'), '^"|"$', '') AS properties___email,
                     replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, 'age'), ''), 'null'), '^"|"$', '') AS properties___age
              FROM person
              WHERE and(equals(person.team_id, 2), ifNull(in(tuple(person.id, person.version),
                                                               (SELECT person.id AS id, max(person.version) AS version
                                                                FROM person
                                                                WHERE equals(person.team_id, 2)
                                                                GROUP BY person.id
                                                                HAVING and(ifNull(equals(argMax(person.is_deleted, person.version), 0), 0), ifNull(less(argMax(toTimeZone(person.created_at, 'UTC'), person.version), plus(now64(6, 'UTC'), toIntervalDay(1))), 0)))), 0)) SETTINGS optimize_aggregation_in_order=1) AS e__person ON equals(if(not(empty(e__override.distinct_id)), e__override.person_id, e.person_id), e__person.id)
           WHERE and(equals(e.team_id, 2), and(and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-07-01 23:59:59.999999', 6, 'UTC'))), in(e.event, tuple('$pageview', 'user signed up')), or(and(ifNull(ilike(e__person.properties___email, '%.com%'), 0), ifNull(equals(e__person.properties___age, '20'), 0)), or(ifNull(ilike(e__person.properties___email, '%.org%'), 0), ifNull(equals(e__person.properties___age, '28'), 0)))), or(ifNull(equals(step_0, 1), 0), ifNull(equals(step_1, 1), 0), ifNull(equals(step_2, 1), 0))))
        GROUP BY aggregation_target
        HAVING ifNull(greaterOrEquals(step_reached, 0), 0))
     WHERE ifNull(greaterOrEquals(step_reached, 0), 0)
     ORDER BY aggregation_target ASC) AS source
  INNER JOIN
    (SELECT argMax(toTimeZone(person.created_at, 'UTC'), person.version) AS created_at,
            person.id AS id
     FROM person
     WHERE equals(person.team_id, 2)
     GROUP BY person.id
     HAVING and(ifNull(equals(argMax(person.is_deleted, person.version), 0), 0), ifNull(less(argMax(toTimeZone(person.created_at, 'UTC'), person.version), plus(now64(6, 'UTC'), toIntervalDay(1))), 0)) SETTINGS optimize_aggregation_in_order=1) AS persons ON equals(persons.id, source.actor_id)
  ORDER BY persons.created_at DESC
  LIMIT 101
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=4000000,
                    max_expanded_ast_elements=4000000,
                    max_bytes_before_external_group_by=0,
                    allow_experimental_analyzer=1
  '''
# ---
# name: TestFOSSFunnelUDF.test_funnel_with_property_groups.2
  '''
  SELECT persons.id,
         persons.id AS id,
         persons.created_at AS created_at,
         1
  FROM
    (SELECT aggregation_target AS actor_id
     FROM
       (SELECT arraySort(t -> t.1, groupArray(tuple(accurateCastOrNull(timestamp, 'Float64'), uuid, [], arrayFilter(x -> ifNull(notEquals(x, 0), 1), [multiply(1, step_0), multiply(2, step_1), multiply(3, step_2)])))) AS events_array,
               arrayJoin(aggregate_funnel_array_v2(3, 1209600, 'first_touch', 'ordered', [[]], arrayFilter((x, x_before, x_after) -> not(and(ifNull(lessOrEquals(length(x.4), 1), 0), ifNull(equals(x.4, x_before.4), isNull(x.4)
                                                                                                                                                                                             and isNull(x_before.4)), ifNull(equals(x.4, x_after.4), isNull(x.4)
                                                                                                                                                                                                                             and isNull(x_after.4)), ifNull(equals(x.3, x_before.3), isNull(x.3)
                                                                                                                                                                                                                                                            and isNull(x_before.3)), ifNull(equals(x.3, x_after.3), isNull(x.3)
                                                                                                                                                                                                                                                                                            and isNull(x_after.3)), ifNull(greater(x.1, x_before.1), 0), ifNull(less(x.1, x_after.1), 0))), events_array, arrayRotateRight(events_array, 1), arrayRotateLeft(events_array, 1)))) AS af_tuple,
               af_tuple.1 AS step_reached,
               plus(af_tuple.1, 1) AS steps,
               af_tuple.2 AS breakdown,
               af_tuple.3 AS timings,
               aggregation_target AS aggregation_target
        FROM
          (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                  if(not(empty(e__override.distinct_id)), e__override.person_id, e.person_id) AS aggregation_target,
                  e.uuid AS uuid,
                  e.`$session_id` AS `$session_id`,
                  e.`$window_id` AS `$window_id`,
                  if(equals(e.event, 'user signed up'), 1, 0) AS step_0,
                  if(and(equals(e.event, '$pageview'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$current_url'), ''), 'null'), '^"|"$', ''), 'aloha.com'), 0)), 1, 0) AS step_1,
                  if(and(equals(e.event, '$pageview'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$current_url'), ''), 'null'), '^"|"$', ''), 'aloha2.com'), 0)), 1, 0) AS step_2
           FROM events AS e
           LEFT OUTER JOIN
             (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                     person_distinct_id_overrides.distinct_id AS distinct_id
              FROM person_distinct_id_overrides
              WHERE equals(person_distinct_id_overrides.team_id, 2)
              GROUP BY person_distinct_id_overrides.distinct_id
              HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS e__override ON equals(e.distinct_id, e__override.distinct_id)
           LEFT JOIN
             (SELECT person.id AS id,
                     replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, 'email'), ''), 'null'), '^"|"$', '') AS properties___email,
                     replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, 'age'), ''), 'null'), '^"|"$', '') AS properties___age
              FROM person
              WHERE and(equals(person.team_id, 2), ifNull(in(tuple(person.id, person.version),
                                                               (SELECT person.id AS id, max(person.version) AS version
                                                                FROM person
                                                                WHERE equals(person.team_id, 2)
                                                                GROUP BY person.id
                                                                HAVING and(ifNull(equals(argMax(person.is_deleted, person.version), 0), 0), ifNull(less(argMax(toTimeZone(person.created_at, 'UTC'), person.version), plus(now64(6, 'UTC'), toIntervalDay(1))), 0)))), 0)) SETTINGS optimize_aggregation_in_order=1) AS e__person ON equals(if(not(empty(e__override.distinct_id)), e__override.person_id, e.person_id), e__person.id)
           WHERE and(equals(e.team_id, 2), and(and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-07-01 23:59:59.999999', 6, 'UTC'))), in(e.event, tuple('$pageview', 'user signed up')), or(and(ifNull(ilike(e__person.properties___email, '%.com%'), 0), ifNull(equals(e__person.properties___age, '20'), 0)), or(ifNull(ilike(e__person.properties___email, '%.org%'), 0), ifNull(equals(e__person.properties___age, '28'), 0)))), or(ifNull(equals(step_0, 1), 0), ifNull(equals(step_1, 1), 0), ifNull(equals(step_2, 1), 0))))
        GROUP BY aggregation_target
        HAVING ifNull(greaterOrEquals(step_reached, 0), 0))
     WHERE ifNull(greaterOrEquals(step_reached, 1), 0)
     ORDER BY aggregation_target ASC) AS source
  INNER JOIN
    (SELECT argMax(toTimeZone(person.created_at, 'UTC'), person.version) AS created_at,
            person.id AS id
     FROM person
     WHERE equals(person.team_id, 2)
     GROUP BY person.id
     HAVING and(ifNull(equals(argMax(person.is_deleted, person.version), 0), 0), ifNull(less(argMax(toTimeZone(person.created_at, 'UTC'), person.version), plus(now64(6, 'UTC'), toIntervalDay(1))), 0)) SETTINGS optimize_aggregation_in_order=1) AS persons ON equals(persons.id, source.actor_id)
  ORDER BY persons.created_at DESC
  LIMIT 101
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=4000000,
                    max_expanded_ast_elements=4000000,
                    max_bytes_before_external_group_by=0,
                    allow_experimental_analyzer=1
  '''
# ---
# name: TestFOSSFunnelUDF.test_funnel_with_property_groups.3
  '''
  SELECT persons.id,
         persons.id AS id,
         persons.created_at AS created_at,
         1
  FROM
    (SELECT aggregation_target AS actor_id
     FROM
       (SELECT arraySort(t -> t.1, groupArray(tuple(accurateCastOrNull(timestamp, 'Float64'), uuid, [], arrayFilter(x -> ifNull(notEquals(x, 0), 1), [multiply(1, step_0), multiply(2, step_1), multiply(3, step_2)])))) AS events_array,
               arrayJoin(aggregate_funnel_array_v2(3, 1209600, 'first_touch', 'ordered', [[]], arrayFilter((x, x_before, x_after) -> not(and(ifNull(lessOrEquals(length(x.4), 1), 0), ifNull(equals(x.4, x_before.4), isNull(x.4)
                                                                                                                                                                                             and isNull(x_before.4)), ifNull(equals(x.4, x_after.4), isNull(x.4)
                                                                                                                                                                                                                             and isNull(x_after.4)), ifNull(equals(x.3, x_before.3), isNull(x.3)
                                                                                                                                                                                                                                                            and isNull(x_before.3)), ifNull(equals(x.3, x_after.3), isNull(x.3)
                                                                                                                                                                                                                                                                                            and isNull(x_after.3)), ifNull(greater(x.1, x_before.1), 0), ifNull(less(x.1, x_after.1), 0))), events_array, arrayRotateRight(events_array, 1), arrayRotateLeft(events_array, 1)))) AS af_tuple,
               af_tuple.1 AS step_reached,
               plus(af_tuple.1, 1) AS steps,
               af_tuple.2 AS breakdown,
               af_tuple.3 AS timings,
               aggregation_target AS aggregation_target
        FROM
          (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                  if(not(empty(e__override.distinct_id)), e__override.person_id, e.person_id) AS aggregation_target,
                  e.uuid AS uuid,
                  e.`$session_id` AS `$session_id`,
                  e.`$window_id` AS `$window_id`,
                  if(equals(e.event, 'user signed up'), 1, 0) AS step_0,
                  if(and(equals(e.event, '$pageview'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$current_url'), ''), 'null'), '^"|"$', ''), 'aloha.com'), 0)), 1, 0) AS step_1,
                  if(and(equals(e.event, '$pageview'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$current_url'), ''), 'null'), '^"|"$', ''), 'aloha2.com'), 0)), 1, 0) AS step_2
           FROM events AS e
           LEFT OUTER JOIN
             (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                     person_distinct_id_overrides.distinct_id AS distinct_id
              FROM person_distinct_id_overrides
              WHERE equals(person_distinct_id_overrides.team_id, 2)
              GROUP BY person_distinct_id_overrides.distinct_id
              HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS e__override ON equals(e.distinct_id, e__override.distinct_id)
           LEFT JOIN
             (SELECT person.id AS id,
                     replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, 'email'), ''), 'null'), '^"|"$', '') AS properties___email,
                     replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, 'age'), ''), 'null'), '^"|"$', '') AS properties___age
              FROM person
              WHERE and(equals(person.team_id, 2), ifNull(in(tuple(person.id, person.version),
                                                               (SELECT person.id AS id, max(person.version) AS version
                                                                FROM person
                                                                WHERE equals(person.team_id, 2)
                                                                GROUP BY person.id
                                                                HAVING and(ifNull(equals(argMax(person.is_deleted, person.version), 0), 0), ifNull(less(argMax(toTimeZone(person.created_at, 'UTC'), person.version), plus(now64(6, 'UTC'), toIntervalDay(1))), 0)))), 0)) SETTINGS optimize_aggregation_in_order=1) AS e__person ON equals(if(not(empty(e__override.distinct_id)), e__override.person_id, e.person_id), e__person.id)
           WHERE and(equals(e.team_id, 2), and(and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-07-01 23:59:59.999999', 6, 'UTC'))), in(e.event, tuple('$pageview', 'user signed up')), or(and(ifNull(ilike(e__person.properties___email, '%.com%'), 0), ifNull(equals(e__person.properties___age, '20'), 0)), or(ifNull(ilike(e__person.properties___email, '%.org%'), 0), ifNull(equals(e__person.properties___age, '28'), 0)))), or(ifNull(equals(step_0, 1), 0), ifNull(equals(step_1, 1), 0), ifNull(equals(step_2, 1), 0))))
        GROUP BY aggregation_target
        HAVING ifNull(greaterOrEquals(step_reached, 0), 0))
     WHERE ifNull(greaterOrEquals(step_reached, 2), 0)
     ORDER BY aggregation_target ASC) AS source
  INNER JOIN
    (SELECT argMax(toTimeZone(person.created_at, 'UTC'), person.version) AS created_at,
            person.id AS id
     FROM person
     WHERE equals(person.team_id, 2)
     GROUP BY person.id
     HAVING and(ifNull(equals(argMax(person.is_deleted, person.version), 0), 0), ifNull(less(argMax(toTimeZone(person.created_at, 'UTC'), person.version), plus(now64(6, 'UTC'), toIntervalDay(1))), 0)) SETTINGS optimize_aggregation_in_order=1) AS persons ON equals(persons.id, source.actor_id)
  ORDER BY persons.created_at DESC
  LIMIT 101
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=4000000,
                    max_expanded_ast_elements=4000000,
                    max_bytes_before_external_group_by=0,
                    allow_experimental_analyzer=1
  '''
# ---
# name: TestFOSSFunnelUDF.test_funnel_with_static_cohort_step_filter
  '''
  
  SELECT count(DISTINCT person_id)
  FROM person_static_cohort
  WHERE team_id = 2
    AND cohort_id = 2
  '''
# ---
# name: TestFOSSFunnelUDF.test_funnel_with_static_cohort_step_filter.1
  '''
  SELECT sum(step_1) AS step_1,
         sum(step_2) AS step_2,
         arrayMap(x -> if(isNaN(x), NULL, x), [avgArrayOrNull(step_1_conversion_times)])[1] AS step_1_average_conversion_time,
         arrayMap(x -> if(isNaN(x), NULL, x), [medianArrayOrNull(step_1_conversion_times)])[1] AS step_1_median_conversion_time,
         groupArray(row_number) AS row_number,
         final_prop AS final_prop
  FROM
    (SELECT countIf(ifNull(ifNull(equals(step_reached, 0), 0), 0)) AS step_1,
            countIf(ifNull(ifNull(equals(step_reached, 1), 0), 0)) AS step_2,
            groupArrayIf(timings[1], ifNull(greater(timings[1], 0), 0)) AS step_1_conversion_times,
            rowNumberInBlock() AS row_number,
            breakdown AS final_prop
     FROM
       (SELECT arraySort(t -> t.1, groupArray(tuple(accurateCastOrNull(timestamp, 'Float64'), uuid, [], arrayFilter(x -> ifNull(notEquals(x, 0), 1), [multiply(1, step_0), multiply(2, step_1)])))) AS events_array,
               arrayJoin(aggregate_funnel_array_v2(2, 1209600, 'first_touch', 'ordered', [[]], arrayFilter((x, x_before, x_after) -> not(and(ifNull(lessOrEquals(length(x.4), 1), 0), ifNull(equals(x.4, x_before.4), isNull(x.4)
                                                                                                                                                                                             and isNull(x_before.4)), ifNull(equals(x.4, x_after.4), isNull(x.4)
                                                                                                                                                                                                                             and isNull(x_after.4)), ifNull(equals(x.3, x_before.3), isNull(x.3)
                                                                                                                                                                                                                                                            and isNull(x_before.3)), ifNull(equals(x.3, x_after.3), isNull(x.3)
                                                                                                                                                                                                                                                                                            and isNull(x_after.3)), ifNull(greater(x.1, x_before.1), 0), ifNull(less(x.1, x_after.1), 0))), events_array, arrayRotateRight(events_array, 1), arrayRotateLeft(events_array, 1)))) AS af_tuple,
               af_tuple.1 AS step_reached,
               plus(af_tuple.1, 1) AS steps,
               af_tuple.2 AS breakdown,
               af_tuple.3 AS timings,
               aggregation_target AS aggregation_target
        FROM
          (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                  if(not(empty(e__override.distinct_id)), e__override.person_id, e.person_id) AS aggregation_target,
                  e.uuid AS uuid,
                  e.`$session_id` AS `$session_id`,
                  e.`$window_id` AS `$window_id`,
                  if(and(equals(e.event, 'user signed up'), ifNull(in(if(not(empty(e__override.distinct_id)), e__override.person_id, e.person_id),
                                                                        (SELECT person_static_cohort.person_id AS person_id
                                                                         FROM person_static_cohort
                                                                         WHERE and(equals(person_static_cohort.team_id, 2), equals(person_static_cohort.cohort_id, 2)))), 0)), 1, 0) AS step_0,
                  if(equals(e.event, 'paid'), 1, 0) AS step_1
           FROM events AS e
           LEFT OUTER JOIN
             (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                     person_distinct_id_overrides.distinct_id AS distinct_id
              FROM person_distinct_id_overrides
              WHERE equals(person_distinct_id_overrides.team_id, 2)
              GROUP BY person_distinct_id_overrides.distinct_id
              HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS e__override ON equals(e.distinct_id, e__override.distinct_id)
           WHERE and(equals(e.team_id, 2), and(and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-14 23:59:59.999999', 6, 'UTC'))), in(e.event, tuple('paid', 'user signed up'))), or(ifNull(equals(step_0, 1), 0), ifNull(equals(step_1, 1), 0))))
        GROUP BY aggregation_target
        HAVING ifNull(greaterOrEquals(step_reached, 0), 0))
     GROUP BY breakdown
     ORDER BY step_2 DESC, step_1 DESC)
  GROUP BY final_prop
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=0,
                     max_ast_elements=4000000,
                     max_expanded_ast_elements=4000000,
                     max_bytes_before_external_group_by=23622320128,
                     allow_experimental_analyzer=1
  '''
# ---
# name: TestFOSSFunnelUDF.test_timezones
  '''
  SELECT sum(step_1) AS step_1,
         sum(step_2) AS step_2,
         arrayMap(x -> if(isNaN(x), NULL, x), [avgArrayOrNull(step_1_conversion_times)])[1] AS step_1_average_conversion_time,
         arrayMap(x -> if(isNaN(x), NULL, x), [medianArrayOrNull(step_1_conversion_times)])[1] AS step_1_median_conversion_time,
         groupArray(row_number) AS row_number,
         final_prop AS final_prop
  FROM
    (SELECT countIf(ifNull(ifNull(equals(step_reached, 0), 0), 0)) AS step_1,
            countIf(ifNull(ifNull(equals(step_reached, 1), 0), 0)) AS step_2,
            groupArrayIf(timings[1], ifNull(greater(timings[1], 0), 0)) AS step_1_conversion_times,
            rowNumberInBlock() AS row_number,
            breakdown AS final_prop
     FROM
       (SELECT arraySort(t -> t.1, groupArray(tuple(accurateCastOrNull(timestamp, 'Float64'), uuid, [], arrayFilter(x -> ifNull(notEquals(x, 0), 1), [multiply(1, step_0), multiply(2, step_1)])))) AS events_array,
               arrayJoin(aggregate_funnel_array_v2(2, 1209600, 'first_touch', 'ordered', [[]], arrayFilter((x, x_before, x_after) -> not(and(ifNull(lessOrEquals(length(x.4), 1), 0), ifNull(equals(x.4, x_before.4), isNull(x.4)
                                                                                                                                                                                             and isNull(x_before.4)), ifNull(equals(x.4, x_after.4), isNull(x.4)
                                                                                                                                                                                                                             and isNull(x_after.4)), ifNull(equals(x.3, x_before.3), isNull(x.3)
                                                                                                                                                                                                                                                            and isNull(x_before.3)), ifNull(equals(x.3, x_after.3), isNull(x.3)
                                                                                                                                                                                                                                                                                            and isNull(x_after.3)), ifNull(greater(x.1, x_before.1), 0), ifNull(less(x.1, x_after.1), 0))), events_array, arrayRotateRight(events_array, 1), arrayRotateLeft(events_array, 1)))) AS af_tuple,
               af_tuple.1 AS step_reached,
               plus(af_tuple.1, 1) AS steps,
               af_tuple.2 AS breakdown,
               af_tuple.3 AS timings,
               aggregation_target AS aggregation_target
        FROM
          (SELECT toTimeZone(e.timestamp, 'US/Pacific') AS timestamp,
                  if(not(empty(e__override.distinct_id)), e__override.person_id, e.person_id) AS aggregation_target,
                  e.uuid AS uuid,
                  e.`$session_id` AS `$session_id`,
                  e.`$window_id` AS `$window_id`,
                  if(equals(e.event, 'user signed up'), 1, 0) AS step_0,
                  if(equals(e.event, 'paid'), 1, 0) AS step_1
           FROM events AS e
           LEFT OUTER JOIN
             (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                     person_distinct_id_overrides.distinct_id AS distinct_id
              FROM person_distinct_id_overrides
              WHERE equals(person_distinct_id_overrides.team_id, 2)
              GROUP BY person_distinct_id_overrides.distinct_id
              HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS e__override ON equals(e.distinct_id, e__override.distinct_id)
           WHERE and(equals(e.team_id, 2), and(and(greaterOrEquals(toTimeZone(e.timestamp, 'US/Pacific'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'US/Pacific')), lessOrEquals(toTimeZone(e.timestamp, 'US/Pacific'), toDateTime64('2020-01-14 23:59:59.999999', 6, 'US/Pacific'))), in(e.event, tuple('paid', 'user signed up'))), or(ifNull(equals(step_0, 1), 0), ifNull(equals(step_1, 1), 0))))
        GROUP BY aggregation_target
        HAVING ifNull(greaterOrEquals(step_reached, 0), 0))
     GROUP BY breakdown
     ORDER BY step_2 DESC, step_1 DESC)
  GROUP BY final_prop
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=0,
                     max_ast_elements=4000000,
                     max_expanded_ast_elements=4000000,
                     max_bytes_before_external_group_by=23622320128,
                     allow_experimental_analyzer=1
  '''
# ---
# name: TestFunnelBreakdownUDF.test_funnel_breakdown_correct_breakdown_props_are_chosen
  '''
  SELECT sum(step_1) AS step_1,
         sum(step_2) AS step_2,
         arrayMap(x -> if(isNaN(x), NULL, x), [avgArrayOrNull(step_1_conversion_times)])[1] AS step_1_average_conversion_time,
         arrayMap(x -> if(isNaN(x), NULL, x), [medianArrayOrNull(step_1_conversion_times)])[1] AS step_1_median_conversion_time,
         groupArray(row_number) AS row_number,
         final_prop AS final_prop
  FROM
    (SELECT countIf(ifNull(ifNull(equals(step_reached, 0), 0), 0)) AS step_1,
            countIf(ifNull(ifNull(equals(step_reached, 1), 0), 0)) AS step_2,
            groupArrayIf(timings[1], ifNull(greater(timings[1], 0), 0)) AS step_1_conversion_times,
            rowNumberInBlock() AS row_number,
            if(ifNull(less(row_number, 25), 0), breakdown, ['Other']) AS final_prop
     FROM
       (SELECT arraySort(t -> t.1, groupArray(tuple(accurateCastOrNull(timestamp, 'Float64'), uuid, prop, arrayFilter(x -> ifNull(notEquals(x, 0), 1), [multiply(1, step_0), multiply(2, step_1)])))) AS events_array,
               arrayJoin(aggregate_funnel_array_v2(2, 1209600, 'first_touch', 'ordered', groupUniqArray(prop), arrayFilter((x, x_before, x_after) -> not(and(ifNull(lessOrEquals(length(x.4), 1), 0), ifNull(equals(x.4, x_before.4), isNull(x.4)
                                                                                                                                                                                                             and isNull(x_before.4)), ifNull(equals(x.4, x_after.4), isNull(x.4)
                                                                                                                                                                                                                                             and isNull(x_after.4)), ifNull(equals(x.3, x_before.3), isNull(x.3)
                                                                                                                                                                                                                                                                            and isNull(x_before.3)), ifNull(equals(x.3, x_after.3), isNull(x.3)
                                                                                                                                                                                                                                                                                                            and isNull(x_after.3)), ifNull(greater(x.1, x_before.1), 0), ifNull(less(x.1, x_after.1), 0))), events_array, arrayRotateRight(events_array, 1), arrayRotateLeft(events_array, 1)))) AS af_tuple,
               af_tuple.1 AS step_reached,
               plus(af_tuple.1, 1) AS steps,
               af_tuple.2 AS breakdown,
               af_tuple.3 AS timings,
               aggregation_target AS aggregation_target
        FROM
          (SELECT timestamp AS timestamp,
                  aggregation_target AS aggregation_target,
                  uuid AS uuid,
                          `$session_id` AS `$session_id`,
                          `$window_id` AS `$window_id`,
                          step_0 AS step_0,
                          step_1 AS step_1,
                          prop_basic AS prop_basic,
                          prop,
                          prop_vals AS prop_vals,
                          if(notEmpty(arrayFilter(x -> notEmpty(x), prop_vals)), prop_vals, ['']) AS prop
           FROM
             (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                     if(not(empty(e__override.distinct_id)), e__override.person_id, e.person_id) AS aggregation_target,
                     e.uuid AS uuid,
                     e.`$session_id` AS `$session_id`,
                     e.`$window_id` AS `$window_id`,
                     if(equals(e.event, 'sign up'), 1, 0) AS step_0,
                     if(and(equals(e.event, 'buy'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$version'), ''), 'null'), '^"|"$', ''), 'xyz'), 0)), 1, 0) AS step_1,
                     [ifNull(toString(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$browser'), ''), 'null'), '^"|"$', '')), '')] AS prop_basic,
                     prop_basic AS prop,
                     argMinIf(prop, timestamp, notEmpty(arrayFilter(x -> notEmpty(x), prop))) OVER (PARTITION BY aggregation_target) AS prop_vals
              FROM events AS e
              LEFT OUTER JOIN
                (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                        person_distinct_id_overrides.distinct_id AS distinct_id
                 FROM person_distinct_id_overrides
                 WHERE equals(person_distinct_id_overrides.team_id, 2)
                 GROUP BY person_distinct_id_overrides.distinct_id
                 HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS e__override ON equals(e.distinct_id, e__override.distinct_id)
              WHERE and(equals(e.team_id, 2), and(and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-08 23:59:59.999999', 6, 'UTC'))), in(e.event, tuple('buy', 'sign up'))), or(ifNull(equals(step_0, 1), 0), ifNull(equals(step_1, 1), 0)))))
        GROUP BY aggregation_target
        HAVING ifNull(greaterOrEquals(step_reached, 0), 0))
     GROUP BY breakdown
     ORDER BY step_2 DESC, step_1 DESC)
  GROUP BY final_prop
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=0,
                     max_ast_elements=4000000,
                     max_expanded_ast_elements=4000000,
                     max_bytes_before_external_group_by=23622320128,
                     allow_experimental_analyzer=1
  '''
# ---
# name: TestFunnelBreakdownUDF.test_funnel_breakdown_correct_breakdown_props_are_chosen_for_step
  '''
  SELECT sum(step_1) AS step_1,
         sum(step_2) AS step_2,
         arrayMap(x -> if(isNaN(x), NULL, x), [avgArrayOrNull(step_1_conversion_times)])[1] AS step_1_average_conversion_time,
         arrayMap(x -> if(isNaN(x), NULL, x), [medianArrayOrNull(step_1_conversion_times)])[1] AS step_1_median_conversion_time,
         groupArray(row_number) AS row_number,
         final_prop AS final_prop
  FROM
    (SELECT countIf(ifNull(ifNull(equals(step_reached, 0), 0), 0)) AS step_1,
            countIf(ifNull(ifNull(equals(step_reached, 1), 0), 0)) AS step_2,
            groupArrayIf(timings[1], ifNull(greater(timings[1], 0), 0)) AS step_1_conversion_times,
            rowNumberInBlock() AS row_number,
            if(ifNull(less(row_number, 25), 0), breakdown, ['Other']) AS final_prop
     FROM
       (SELECT arraySort(t -> t.1, groupArray(tuple(accurateCastOrNull(timestamp, 'Float64'), uuid, prop, arrayFilter(x -> ifNull(notEquals(x, 0), 1), [multiply(1, step_0), multiply(2, step_1)])))) AS events_array,
               arrayJoin(aggregate_funnel_array_v2(2, 1209600, 'step_1', 'ordered', groupUniqArray(prop), arrayFilter((x, x_before, x_after) -> not(and(ifNull(lessOrEquals(length(x.4), 1), 0), ifNull(equals(x.4, x_before.4), isNull(x.4)
                                                                                                                                                                                                        and isNull(x_before.4)), ifNull(equals(x.4, x_after.4), isNull(x.4)
                                                                                                                                                                                                                                        and isNull(x_after.4)), ifNull(equals(x.3, x_before.3), isNull(x.3)
                                                                                                                                                                                                                                                                       and isNull(x_before.3)), ifNull(equals(x.3, x_after.3), isNull(x.3)
                                                                                                                                                                                                                                                                                                       and isNull(x_after.3)), ifNull(greater(x.1, x_before.1), 0), ifNull(less(x.1, x_after.1), 0))), events_array, arrayRotateRight(events_array, 1), arrayRotateLeft(events_array, 1)))) AS af_tuple,
               af_tuple.1 AS step_reached,
               plus(af_tuple.1, 1) AS steps,
               af_tuple.2 AS breakdown,
               af_tuple.3 AS timings,
               aggregation_target AS aggregation_target
        FROM
          (SELECT timestamp AS timestamp,
                  aggregation_target AS aggregation_target,
                  uuid AS uuid,
                          `$session_id` AS `$session_id`,
                          `$window_id` AS `$window_id`,
                          step_0 AS step_0,
                          step_1 AS step_1,
                          prop_basic AS prop_basic,
                          prop_0 AS prop_0,
                          prop_1 AS prop_1,
                          prop,
                          prop_vals AS prop_vals,
                          prop
           FROM
             (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                     if(not(empty(e__override.distinct_id)), e__override.person_id, e.person_id) AS aggregation_target,
                     e.uuid AS uuid,
                     e.`$session_id` AS `$session_id`,
                     e.`$window_id` AS `$window_id`,
                     if(equals(e.event, 'sign up'), 1, 0) AS step_0,
                     if(and(equals(e.event, 'buy'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$version'), ''), 'null'), '^"|"$', ''), 'xyz'), 0)), 1, 0) AS step_1,
                     [ifNull(toString(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$browser'), ''), 'null'), '^"|"$', '')), '')] AS prop_basic,
                     if(ifNull(equals(step_0, 1), 0), prop_basic, []) AS prop_0,
                     if(ifNull(equals(step_1, 1), 0), prop_basic, []) AS prop_1,
                     prop_1 AS prop,
                     groupUniqArray(prop) OVER (PARTITION BY aggregation_target) AS prop_vals
              FROM events AS e
              LEFT OUTER JOIN
                (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                        person_distinct_id_overrides.distinct_id AS distinct_id
                 FROM person_distinct_id_overrides
                 WHERE equals(person_distinct_id_overrides.team_id, 2)
                 GROUP BY person_distinct_id_overrides.distinct_id
                 HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS e__override ON equals(e.distinct_id, e__override.distinct_id)
              WHERE and(equals(e.team_id, 2), and(and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-08 23:59:59.999999', 6, 'UTC'))), in(e.event, tuple('buy', 'sign up'))), or(ifNull(equals(step_0, 1), 0), ifNull(equals(step_1, 1), 0)))) ARRAY
           JOIN prop_vals AS prop
           WHERE ifNull(notEquals(prop, []), isNotNull(prop)
                        or isNotNull([])))
        GROUP BY aggregation_target
        HAVING ifNull(greaterOrEquals(step_reached, 0), 0))
     GROUP BY breakdown
     ORDER BY step_2 DESC, step_1 DESC)
  GROUP BY final_prop
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=0,
                     max_ast_elements=4000000,
                     max_expanded_ast_elements=4000000,
                     max_bytes_before_external_group_by=23622320128,
                     allow_experimental_analyzer=1
  '''
# ---
# name: TestFunnelBreakdownUDF.test_funnel_step_multiple_breakdown_snapshot
  '''
  SELECT sum(step_1) AS step_1,
         sum(step_2) AS step_2,
         arrayMap(x -> if(isNaN(x), NULL, x), [avgArrayOrNull(step_1_conversion_times)])[1] AS step_1_average_conversion_time,
         arrayMap(x -> if(isNaN(x), NULL, x), [medianArrayOrNull(step_1_conversion_times)])[1] AS step_1_median_conversion_time,
         groupArray(row_number) AS row_number,
         final_prop AS final_prop
  FROM
    (SELECT countIf(ifNull(ifNull(equals(step_reached, 0), 0), 0)) AS step_1,
            countIf(ifNull(ifNull(equals(step_reached, 1), 0), 0)) AS step_2,
            groupArrayIf(timings[1], ifNull(greater(timings[1], 0), 0)) AS step_1_conversion_times,
            rowNumberInBlock() AS row_number,
            if(ifNull(less(row_number, 25), 0), breakdown, ['Other']) AS final_prop
     FROM
       (SELECT arraySort(t -> t.1, groupArray(tuple(accurateCastOrNull(timestamp, 'Float64'), uuid, prop, arrayFilter(x -> ifNull(notEquals(x, 0), 1), [multiply(1, step_0), multiply(2, step_1)])))) AS events_array,
               arrayJoin(aggregate_funnel_array_v2(2, 1209600, 'first_touch', 'ordered', groupUniqArray(prop), arrayFilter((x, x_before, x_after) -> not(and(ifNull(lessOrEquals(length(x.4), 1), 0), ifNull(equals(x.4, x_before.4), isNull(x.4)
                                                                                                                                                                                                             and isNull(x_before.4)), ifNull(equals(x.4, x_after.4), isNull(x.4)
                                                                                                                                                                                                                                             and isNull(x_after.4)), ifNull(equals(x.3, x_before.3), isNull(x.3)
                                                                                                                                                                                                                                                                            and isNull(x_before.3)), ifNull(equals(x.3, x_after.3), isNull(x.3)
                                                                                                                                                                                                                                                                                                            and isNull(x_after.3)), ifNull(greater(x.1, x_before.1), 0), ifNull(less(x.1, x_after.1), 0))), events_array, arrayRotateRight(events_array, 1), arrayRotateLeft(events_array, 1)))) AS af_tuple,
               af_tuple.1 AS step_reached,
               plus(af_tuple.1, 1) AS steps,
               af_tuple.2 AS breakdown,
               af_tuple.3 AS timings,
               aggregation_target AS aggregation_target
        FROM
          (SELECT timestamp AS timestamp,
                  aggregation_target AS aggregation_target,
                  uuid AS uuid,
                          `$session_id` AS `$session_id`,
                          `$window_id` AS `$window_id`,
                          step_0 AS step_0,
                          step_1 AS step_1,
                          prop_basic AS prop_basic,
                          prop,
                          prop_vals AS prop_vals,
                          if(notEmpty(arrayFilter(x -> notEmpty(x), prop_vals)), prop_vals, ['', '']) AS prop
           FROM
             (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                     if(not(empty(e__override.distinct_id)), e__override.person_id, e.person_id) AS aggregation_target,
                     e.uuid AS uuid,
                     e.`$session_id` AS `$session_id`,
                     e.`$window_id` AS `$window_id`,
                     if(equals(e.event, 'sign up'), 1, 0) AS step_0,
                     if(equals(e.event, 'buy'), 1, 0) AS step_1,
                     [ifNull(toString(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$browser'), ''), 'null'), '^"|"$', '')), ''), ifNull(toString(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$version'), ''), 'null'), '^"|"$', '')), '')] AS prop_basic,
                     prop_basic AS prop,
                     argMinIf(prop, timestamp, notEmpty(arrayFilter(x -> notEmpty(x), prop))) OVER (PARTITION BY aggregation_target) AS prop_vals
              FROM events AS e
              LEFT OUTER JOIN
                (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                        person_distinct_id_overrides.distinct_id AS distinct_id
                 FROM person_distinct_id_overrides
                 WHERE equals(person_distinct_id_overrides.team_id, 2)
                 GROUP BY person_distinct_id_overrides.distinct_id
                 HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS e__override ON equals(e.distinct_id, e__override.distinct_id)
              WHERE and(equals(e.team_id, 2), and(and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-08 23:59:59.999999', 6, 'UTC'))), in(e.event, tuple('buy', 'sign up'))), or(ifNull(equals(step_0, 1), 0), ifNull(equals(step_1, 1), 0)))))
        GROUP BY aggregation_target
        HAVING ifNull(greaterOrEquals(step_reached, 0), 0))
     GROUP BY breakdown
     ORDER BY step_2 DESC, step_1 DESC)
  GROUP BY final_prop
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=0,
                     max_ast_elements=4000000,
                     max_expanded_ast_elements=4000000,
                     max_bytes_before_external_group_by=23622320128,
                     allow_experimental_analyzer=1
  '''
# ---
# name: TestFunnelGroupBreakdownUDF.test_funnel_aggregate_by_groups_breakdown_group_person_on_events
  '''
  SELECT sum(step_1) AS step_1,
         sum(step_2) AS step_2,
         sum(step_3) AS step_3,
         arrayMap(x -> if(isNaN(x), NULL, x), [avgArrayOrNull(step_1_conversion_times)])[1] AS step_1_average_conversion_time,
         arrayMap(x -> if(isNaN(x), NULL, x), [avgArrayOrNull(step_2_conversion_times)])[1] AS step_2_average_conversion_time,
         arrayMap(x -> if(isNaN(x), NULL, x), [medianArrayOrNull(step_1_conversion_times)])[1] AS step_1_median_conversion_time,
         arrayMap(x -> if(isNaN(x), NULL, x), [medianArrayOrNull(step_2_conversion_times)])[1] AS step_2_median_conversion_time,
         groupArray(row_number) AS row_number,
         final_prop AS final_prop
  FROM
    (SELECT countIf(ifNull(ifNull(equals(step_reached, 0), 0), 0)) AS step_1,
            countIf(ifNull(ifNull(equals(step_reached, 1), 0), 0)) AS step_2,
            countIf(ifNull(ifNull(equals(step_reached, 2), 0), 0)) AS step_3,
            groupArrayIf(timings[1], ifNull(greater(timings[1], 0), 0)) AS step_1_conversion_times,
            groupArrayIf(timings[2], ifNull(greater(timings[2], 0), 0)) AS step_2_conversion_times,
            rowNumberInBlock() AS row_number,
            if(ifNull(less(row_number, 25), 0), breakdown, 'Other') AS final_prop
     FROM
       (SELECT arraySort(t -> t.1, groupArray(tuple(accurateCastOrNull(timestamp, 'Float64'), uuid, prop, arrayFilter(x -> ifNull(notEquals(x, 0), 1), [multiply(1, step_0), multiply(2, step_1), multiply(3, step_2)])))) AS events_array,
               arrayJoin(aggregate_funnel_v2(3, 1209600, 'first_touch', 'ordered', groupUniqArray(prop), arrayFilter((x, x_before, x_after) -> not(and(ifNull(lessOrEquals(length(x.4), 1), 0), ifNull(equals(x.4, x_before.4), isNull(x.4)
                                                                                                                                                                                                       and isNull(x_before.4)), ifNull(equals(x.4, x_after.4), isNull(x.4)
                                                                                                                                                                                                                                       and isNull(x_after.4)), ifNull(equals(x.3, x_before.3), isNull(x.3)
                                                                                                                                                                                                                                                                      and isNull(x_before.3)), ifNull(equals(x.3, x_after.3), isNull(x.3)
                                                                                                                                                                                                                                                                                                      and isNull(x_after.3)), ifNull(greater(x.1, x_before.1), 0), ifNull(less(x.1, x_after.1), 0))), events_array, arrayRotateRight(events_array, 1), arrayRotateLeft(events_array, 1)))) AS af_tuple,
               af_tuple.1 AS step_reached,
               plus(af_tuple.1, 1) AS steps,
               af_tuple.2 AS breakdown,
               af_tuple.3 AS timings,
               aggregation_target AS aggregation_target
        FROM
          (SELECT timestamp AS timestamp,
                  aggregation_target AS aggregation_target,
                  uuid AS uuid,
                          `$session_id` AS `$session_id`,
                          `$window_id` AS `$window_id`,
                          step_0 AS step_0,
                          step_1 AS step_1,
                          step_2 AS step_2,
                          prop_basic AS prop_basic,
                          prop,
                          prop_vals AS prop_vals,
                          prop_vals AS prop
           FROM
             (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                     e.`$group_0` AS aggregation_target,
                     e.uuid AS uuid,
                     e.`$session_id` AS `$session_id`,
                     e.`$window_id` AS `$window_id`,
                     if(equals(e.event, 'sign up'), 1, 0) AS step_0,
                     if(equals(e.event, 'play movie'), 1, 0) AS step_1,
                     if(equals(e.event, 'buy'), 1, 0) AS step_2,
                     ifNull(toString(e__group_0.properties___industry), '') AS prop_basic,
                     prop_basic AS prop,
                     argMinIf(prop, timestamp, isNotNull(prop)) OVER (PARTITION BY aggregation_target) AS prop_vals
              FROM events AS e
              LEFT JOIN
                (SELECT argMax(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(groups.group_properties, 'industry'), ''), 'null'), '^"|"$', ''), toTimeZone(groups._timestamp, 'UTC')) AS properties___industry,
                        groups.group_type_index AS index,
                        groups.group_key AS key
                 FROM groups
                 WHERE and(equals(groups.team_id, 2), equals(index, 0))
                 GROUP BY groups.group_type_index,
                          groups.group_key) AS e__group_0 ON equals(e.`$group_0`, e__group_0.key)
              WHERE and(equals(e.team_id, 2), and(and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-08 23:59:59.999999', 6, 'UTC'))), in(e.event, tuple('buy', 'play movie', 'sign up'))), or(ifNull(equals(step_0, 1), 0), ifNull(equals(step_1, 1), 0), ifNull(equals(step_2, 1), 0)))))
        GROUP BY aggregation_target
        HAVING ifNull(greaterOrEquals(step_reached, 0), 0))
     GROUP BY breakdown
     ORDER BY step_3 DESC, step_2 DESC, step_1 DESC)
  GROUP BY final_prop
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=0,
                     max_ast_elements=4000000,
                     max_expanded_ast_elements=4000000,
                     max_bytes_before_external_group_by=23622320128,
                     allow_experimental_analyzer=1
  '''
# ---
# name: TestFunnelGroupBreakdownUDF.test_funnel_aggregate_by_groups_breakdown_group_person_on_events_poe_v2
  '''
  SELECT sum(step_1) AS step_1,
         sum(step_2) AS step_2,
         sum(step_3) AS step_3,
         arrayMap(x -> if(isNaN(x), NULL, x), [avgArrayOrNull(step_1_conversion_times)])[1] AS step_1_average_conversion_time,
         arrayMap(x -> if(isNaN(x), NULL, x), [avgArrayOrNull(step_2_conversion_times)])[1] AS step_2_average_conversion_time,
         arrayMap(x -> if(isNaN(x), NULL, x), [medianArrayOrNull(step_1_conversion_times)])[1] AS step_1_median_conversion_time,
         arrayMap(x -> if(isNaN(x), NULL, x), [medianArrayOrNull(step_2_conversion_times)])[1] AS step_2_median_conversion_time,
         groupArray(row_number) AS row_number,
         final_prop AS final_prop
  FROM
    (SELECT countIf(ifNull(ifNull(equals(step_reached, 0), 0), 0)) AS step_1,
            countIf(ifNull(ifNull(equals(step_reached, 1), 0), 0)) AS step_2,
            countIf(ifNull(ifNull(equals(step_reached, 2), 0), 0)) AS step_3,
            groupArrayIf(timings[1], ifNull(greater(timings[1], 0), 0)) AS step_1_conversion_times,
            groupArrayIf(timings[2], ifNull(greater(timings[2], 0), 0)) AS step_2_conversion_times,
            rowNumberInBlock() AS row_number,
            if(ifNull(less(row_number, 25), 0), breakdown, 'Other') AS final_prop
     FROM
       (SELECT arraySort(t -> t.1, groupArray(tuple(accurateCastOrNull(timestamp, 'Float64'), uuid, prop, arrayFilter(x -> ifNull(notEquals(x, 0), 1), [multiply(1, step_0), multiply(2, step_1), multiply(3, step_2)])))) AS events_array,
               arrayJoin(aggregate_funnel_v2(3, 1209600, 'first_touch', 'ordered', groupUniqArray(prop), arrayFilter((x, x_before, x_after) -> not(and(ifNull(lessOrEquals(length(x.4), 1), 0), ifNull(equals(x.4, x_before.4), isNull(x.4)
                                                                                                                                                                                                       and isNull(x_before.4)), ifNull(equals(x.4, x_after.4), isNull(x.4)
                                                                                                                                                                                                                                       and isNull(x_after.4)), ifNull(equals(x.3, x_before.3), isNull(x.3)
                                                                                                                                                                                                                                                                      and isNull(x_before.3)), ifNull(equals(x.3, x_after.3), isNull(x.3)
                                                                                                                                                                                                                                                                                                      and isNull(x_after.3)), ifNull(greater(x.1, x_before.1), 0), ifNull(less(x.1, x_after.1), 0))), events_array, arrayRotateRight(events_array, 1), arrayRotateLeft(events_array, 1)))) AS af_tuple,
               af_tuple.1 AS step_reached,
               plus(af_tuple.1, 1) AS steps,
               af_tuple.2 AS breakdown,
               af_tuple.3 AS timings,
               aggregation_target AS aggregation_target
        FROM
          (SELECT timestamp AS timestamp,
                  aggregation_target AS aggregation_target,
                  uuid AS uuid,
                          `$session_id` AS `$session_id`,
                          `$window_id` AS `$window_id`,
                          step_0 AS step_0,
                          step_1 AS step_1,
                          step_2 AS step_2,
                          prop_basic AS prop_basic,
                          prop,
                          prop_vals AS prop_vals,
                          prop_vals AS prop
           FROM
             (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                     e.`$group_0` AS aggregation_target,
                     e.uuid AS uuid,
                     e.`$session_id` AS `$session_id`,
                     e.`$window_id` AS `$window_id`,
                     if(equals(e.event, 'sign up'), 1, 0) AS step_0,
                     if(equals(e.event, 'play movie'), 1, 0) AS step_1,
                     if(equals(e.event, 'buy'), 1, 0) AS step_2,
                     ifNull(toString(e__group_0.properties___industry), '') AS prop_basic,
                     prop_basic AS prop,
                     argMinIf(prop, timestamp, isNotNull(prop)) OVER (PARTITION BY aggregation_target) AS prop_vals
              FROM events AS e
              LEFT JOIN
                (SELECT argMax(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(groups.group_properties, 'industry'), ''), 'null'), '^"|"$', ''), toTimeZone(groups._timestamp, 'UTC')) AS properties___industry,
                        groups.group_type_index AS index,
                        groups.group_key AS key
                 FROM groups
                 WHERE and(equals(groups.team_id, 2), equals(index, 0))
                 GROUP BY groups.group_type_index,
                          groups.group_key) AS e__group_0 ON equals(e.`$group_0`, e__group_0.key)
              WHERE and(equals(e.team_id, 2), and(and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-08 23:59:59.999999', 6, 'UTC'))), in(e.event, tuple('buy', 'play movie', 'sign up'))), or(ifNull(equals(step_0, 1), 0), ifNull(equals(step_1, 1), 0), ifNull(equals(step_2, 1), 0)))))
        GROUP BY aggregation_target
        HAVING ifNull(greaterOrEquals(step_reached, 0), 0))
     GROUP BY breakdown
     ORDER BY step_3 DESC, step_2 DESC, step_1 DESC)
  GROUP BY final_prop
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=0,
                     max_ast_elements=4000000,
                     max_expanded_ast_elements=4000000,
                     max_bytes_before_external_group_by=23622320128,
                     allow_experimental_analyzer=1
  '''
# ---
# name: TestFunnelGroupBreakdownUDF.test_funnel_breakdown_group
  '''
  SELECT sum(step_1) AS step_1,
         sum(step_2) AS step_2,
         sum(step_3) AS step_3,
         arrayMap(x -> if(isNaN(x), NULL, x), [avgArrayOrNull(step_1_conversion_times)])[1] AS step_1_average_conversion_time,
         arrayMap(x -> if(isNaN(x), NULL, x), [avgArrayOrNull(step_2_conversion_times)])[1] AS step_2_average_conversion_time,
         arrayMap(x -> if(isNaN(x), NULL, x), [medianArrayOrNull(step_1_conversion_times)])[1] AS step_1_median_conversion_time,
         arrayMap(x -> if(isNaN(x), NULL, x), [medianArrayOrNull(step_2_conversion_times)])[1] AS step_2_median_conversion_time,
         groupArray(row_number) AS row_number,
         final_prop AS final_prop
  FROM
    (SELECT countIf(ifNull(ifNull(equals(step_reached, 0), 0), 0)) AS step_1,
            countIf(ifNull(ifNull(equals(step_reached, 1), 0), 0)) AS step_2,
            countIf(ifNull(ifNull(equals(step_reached, 2), 0), 0)) AS step_3,
            groupArrayIf(timings[1], ifNull(greater(timings[1], 0), 0)) AS step_1_conversion_times,
            groupArrayIf(timings[2], ifNull(greater(timings[2], 0), 0)) AS step_2_conversion_times,
            rowNumberInBlock() AS row_number,
            if(ifNull(less(row_number, 25), 0), breakdown, 'Other') AS final_prop
     FROM
       (SELECT arraySort(t -> t.1, groupArray(tuple(accurateCastOrNull(timestamp, 'Float64'), uuid, prop, arrayFilter(x -> ifNull(notEquals(x, 0), 1), [multiply(1, step_0), multiply(2, step_1), multiply(3, step_2)])))) AS events_array,
               arrayJoin(aggregate_funnel_v2(3, 1209600, 'first_touch', 'ordered', groupUniqArray(prop), arrayFilter((x, x_before, x_after) -> not(and(ifNull(lessOrEquals(length(x.4), 1), 0), ifNull(equals(x.4, x_before.4), isNull(x.4)
                                                                                                                                                                                                       and isNull(x_before.4)), ifNull(equals(x.4, x_after.4), isNull(x.4)
                                                                                                                                                                                                                                       and isNull(x_after.4)), ifNull(equals(x.3, x_before.3), isNull(x.3)
                                                                                                                                                                                                                                                                      and isNull(x_before.3)), ifNull(equals(x.3, x_after.3), isNull(x.3)
                                                                                                                                                                                                                                                                                                      and isNull(x_after.3)), ifNull(greater(x.1, x_before.1), 0), ifNull(less(x.1, x_after.1), 0))), events_array, arrayRotateRight(events_array, 1), arrayRotateLeft(events_array, 1)))) AS af_tuple,
               af_tuple.1 AS step_reached,
               plus(af_tuple.1, 1) AS steps,
               af_tuple.2 AS breakdown,
               af_tuple.3 AS timings,
               aggregation_target AS aggregation_target
        FROM
          (SELECT timestamp AS timestamp,
                  aggregation_target AS aggregation_target,
                  uuid AS uuid,
                          `$session_id` AS `$session_id`,
                          `$window_id` AS `$window_id`,
                          step_0 AS step_0,
                          step_1 AS step_1,
                          step_2 AS step_2,
                          prop_basic AS prop_basic,
                          prop,
                          prop_vals AS prop_vals,
                          prop_vals AS prop
           FROM
             (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                     if(not(empty(e__override.distinct_id)), e__override.person_id, e.person_id) AS aggregation_target,
                     e.uuid AS uuid,
                     e.`$session_id` AS `$session_id`,
                     e.`$window_id` AS `$window_id`,
                     if(equals(e.event, 'sign up'), 1, 0) AS step_0,
                     if(equals(e.event, 'play movie'), 1, 0) AS step_1,
                     if(equals(e.event, 'buy'), 1, 0) AS step_2,
                     ifNull(toString(e__group_0.properties___industry), '') AS prop_basic,
                     prop_basic AS prop,
                     argMinIf(prop, timestamp, isNotNull(prop)) OVER (PARTITION BY aggregation_target) AS prop_vals
              FROM events AS e
              LEFT OUTER JOIN
                (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                        person_distinct_id_overrides.distinct_id AS distinct_id
                 FROM person_distinct_id_overrides
                 WHERE equals(person_distinct_id_overrides.team_id, 2)
                 GROUP BY person_distinct_id_overrides.distinct_id
                 HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS e__override ON equals(e.distinct_id, e__override.distinct_id)
              LEFT JOIN
                (SELECT argMax(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(groups.group_properties, 'industry'), ''), 'null'), '^"|"$', ''), toTimeZone(groups._timestamp, 'UTC')) AS properties___industry,
                        groups.group_type_index AS index,
                        groups.group_key AS key
                 FROM groups
                 WHERE and(equals(groups.team_id, 2), equals(index, 0))
                 GROUP BY groups.group_type_index,
                          groups.group_key) AS e__group_0 ON equals(e.`$group_0`, e__group_0.key)
              WHERE and(equals(e.team_id, 2), and(and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-08 23:59:59.999999', 6, 'UTC'))), in(e.event, tuple('buy', 'play movie', 'sign up'))), or(ifNull(equals(step_0, 1), 0), ifNull(equals(step_1, 1), 0), ifNull(equals(step_2, 1), 0)))))
        GROUP BY aggregation_target
        HAVING ifNull(greaterOrEquals(step_reached, 0), 0))
     GROUP BY breakdown
     ORDER BY step_3 DESC, step_2 DESC, step_1 DESC)
  GROUP BY final_prop
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=0,
                     max_ast_elements=4000000,
                     max_expanded_ast_elements=4000000,
                     max_bytes_before_external_group_by=23622320128,
                     allow_experimental_analyzer=1
  '''
# ---
# name: TestFunnelGroupBreakdownUDF.test_funnel_breakdown_group.1
  '''
  
  SELECT replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '') AS value,
         count(*) as count
  FROM events e
  LEFT JOIN
    (SELECT group_key,
            argMax(group_properties, _timestamp) AS group_properties_0
     FROM groups
     WHERE team_id = 2
       AND group_type_index = 0
     GROUP BY group_key) groups_0 ON "$group_0" == groups_0.group_key
  WHERE team_id = 2
    AND event IN ['buy', 'play movie', 'sign up']
    AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
    AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-08 23:59:59', 'UTC')
  GROUP BY value
  ORDER BY count DESC, value DESC
  LIMIT 26
  OFFSET 0
  '''
# ---
# name: TestFunnelGroupBreakdownUDF.test_funnel_breakdown_group.2
  '''
  
  SELECT aggregation_target AS actor_id
  FROM
    (SELECT aggregation_target,
            steps,
            avg(step_1_conversion_time) step_1_average_conversion_time_inner,
            avg(step_2_conversion_time) step_2_average_conversion_time_inner,
            median(step_1_conversion_time) step_1_median_conversion_time_inner,
            median(step_2_conversion_time) step_2_median_conversion_time_inner ,
            prop
     FROM
       (SELECT aggregation_target,
               steps,
               max(steps) over (PARTITION BY aggregation_target,
                                             prop) as max_steps,
                               step_1_conversion_time,
                               step_2_conversion_time ,
                               prop
        FROM
          (SELECT *,
                  if(latest_0 <= latest_1
                     AND latest_1 <= latest_0 + INTERVAL 7 DAY
                     AND latest_1 <= latest_2
                     AND latest_2 <= latest_0 + INTERVAL 7 DAY, 3, if(latest_0 <= latest_1
                                                                      AND latest_1 <= latest_0 + INTERVAL 7 DAY, 2, 1)) AS steps ,
                  if(isNotNull(latest_1)
                     AND latest_1 <= latest_0 + INTERVAL 7 DAY, dateDiff('second', toDateTime(latest_0), toDateTime(latest_1)), NULL) step_1_conversion_time,
                  if(isNotNull(latest_2)
                     AND latest_2 <= latest_1 + INTERVAL 7 DAY, dateDiff('second', toDateTime(latest_1), toDateTime(latest_2)), NULL) step_2_conversion_time,
                  prop
           FROM
             (SELECT aggregation_target, timestamp, step_0,
                                                    latest_0,
                                                    step_1,
                                                    latest_1,
                                                    step_2,
                                                    min(latest_2) over (PARTITION by aggregation_target,
                                                                                     prop
                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_2 ,
                                                                       prop
              FROM
                (SELECT aggregation_target, timestamp, step_0,
                                                       latest_0,
                                                       step_1,
                                                       latest_1,
                                                       step_2,
                                                       if(latest_2 < latest_1, NULL, latest_2) as latest_2 ,
                                                       prop
                 FROM
                   (SELECT aggregation_target, timestamp, step_0,
                                                          latest_0,
                                                          step_1,
                                                          min(latest_1) over (PARTITION by aggregation_target,
                                                                                           prop
                                                                              ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_1,
                                                                             step_2,
                                                                             min(latest_2) over (PARTITION by aggregation_target,
                                                                                                              prop
                                                                                                 ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_2 ,
                                                                                                if(has(['technology', 'finance'], prop), prop, 'Other') as prop
                    FROM
                      (SELECT *,
                              prop_vals as prop
                       FROM
                         (SELECT e.timestamp as timestamp,
                                 if(notEmpty(pdi.distinct_id), pdi.person_id, e.person_id) as aggregation_target,
                                 if(notEmpty(pdi.distinct_id), pdi.person_id, e.person_id) as person_id,
                                 if(event = 'sign up', 1, 0) as step_0,
                                 if(step_0 = 1, timestamp, null) as latest_0,
                                 if(event = 'play movie', 1, 0) as step_1,
                                 if(step_1 = 1, timestamp, null) as latest_1,
                                 if(event = 'buy', 1, 0) as step_2,
                                 if(step_2 = 1, timestamp, null) as latest_2,
                                 replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '') AS prop_basic,
                                 prop_basic as prop,
                                 argMinIf(prop, timestamp, isNotNull(prop)) over (PARTITION by aggregation_target) as prop_vals
                          FROM events e
                          LEFT OUTER JOIN
                            (SELECT distinct_id,
                                    argMax(person_id, version) as person_id
                             FROM person_distinct_id2
                             WHERE team_id = 2
                               AND distinct_id IN
                                 (SELECT distinct_id
                                  FROM events
                                  WHERE team_id = 2
                                    AND event IN ['buy', 'play movie', 'sign up']
                                    AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
                                    AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-08 23:59:59', 'UTC') )
                             GROUP BY distinct_id
                             HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
                          LEFT JOIN
                            (SELECT group_key,
                                    argMax(group_properties, _timestamp) AS group_properties_0
                             FROM groups
                             WHERE team_id = 2
                               AND group_type_index = 0
                             GROUP BY group_key) groups_0 ON "$group_0" == groups_0.group_key
                          WHERE team_id = 2
                            AND event IN ['buy', 'play movie', 'sign up']
                            AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
                            AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-08 23:59:59', 'UTC')
                            AND (step_0 = 1
                                 OR step_1 = 1
                                 OR step_2 = 1) )))))
           WHERE step_0 = 1 ))
     GROUP BY aggregation_target,
              steps,
              prop
     HAVING steps = max_steps)
  WHERE steps IN [1, 2, 3]
    AND arrayFlatten(array(prop)) = arrayFlatten(array('finance'))
  ORDER BY aggregation_target
  LIMIT 100
  OFFSET 0 SETTINGS max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000
  '''
# ---
# name: TestFunnelGroupBreakdownUDF.test_funnel_breakdown_group.3
  '''
  
  SELECT replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '') AS value,
         count(*) as count
  FROM events e
  LEFT JOIN
    (SELECT group_key,
            argMax(group_properties, _timestamp) AS group_properties_0
     FROM groups
     WHERE team_id = 2
       AND group_type_index = 0
     GROUP BY group_key) groups_0 ON "$group_0" == groups_0.group_key
  WHERE team_id = 2
    AND event IN ['buy', 'play movie', 'sign up']
    AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
    AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-08 23:59:59', 'UTC')
  GROUP BY value
  ORDER BY count DESC, value DESC
  LIMIT 26
  OFFSET 0
  '''
# ---
# name: TestFunnelGroupBreakdownUDF.test_funnel_breakdown_group.4
  '''
  
  SELECT aggregation_target AS actor_id
  FROM
    (SELECT aggregation_target,
            steps,
            avg(step_1_conversion_time) step_1_average_conversion_time_inner,
            avg(step_2_conversion_time) step_2_average_conversion_time_inner,
            median(step_1_conversion_time) step_1_median_conversion_time_inner,
            median(step_2_conversion_time) step_2_median_conversion_time_inner ,
            prop
     FROM
       (SELECT aggregation_target,
               steps,
               max(steps) over (PARTITION BY aggregation_target,
                                             prop) as max_steps,
                               step_1_conversion_time,
                               step_2_conversion_time ,
                               prop
        FROM
          (SELECT *,
                  if(latest_0 <= latest_1
                     AND latest_1 <= latest_0 + INTERVAL 7 DAY
                     AND latest_1 <= latest_2
                     AND latest_2 <= latest_0 + INTERVAL 7 DAY, 3, if(latest_0 <= latest_1
                                                                      AND latest_1 <= latest_0 + INTERVAL 7 DAY, 2, 1)) AS steps ,
                  if(isNotNull(latest_1)
                     AND latest_1 <= latest_0 + INTERVAL 7 DAY, dateDiff('second', toDateTime(latest_0), toDateTime(latest_1)), NULL) step_1_conversion_time,
                  if(isNotNull(latest_2)
                     AND latest_2 <= latest_1 + INTERVAL 7 DAY, dateDiff('second', toDateTime(latest_1), toDateTime(latest_2)), NULL) step_2_conversion_time,
                  prop
           FROM
             (SELECT aggregation_target, timestamp, step_0,
                                                    latest_0,
                                                    step_1,
                                                    latest_1,
                                                    step_2,
                                                    min(latest_2) over (PARTITION by aggregation_target,
                                                                                     prop
                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_2 ,
                                                                       prop
              FROM
                (SELECT aggregation_target, timestamp, step_0,
                                                       latest_0,
                                                       step_1,
                                                       latest_1,
                                                       step_2,
                                                       if(latest_2 < latest_1, NULL, latest_2) as latest_2 ,
                                                       prop
                 FROM
                   (SELECT aggregation_target, timestamp, step_0,
                                                          latest_0,
                                                          step_1,
                                                          min(latest_1) over (PARTITION by aggregation_target,
                                                                                           prop
                                                                              ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_1,
                                                                             step_2,
                                                                             min(latest_2) over (PARTITION by aggregation_target,
                                                                                                              prop
                                                                                                 ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_2 ,
                                                                                                if(has(['technology', 'finance'], prop), prop, 'Other') as prop
                    FROM
                      (SELECT *,
                              prop_vals as prop
                       FROM
                         (SELECT e.timestamp as timestamp,
                                 if(notEmpty(pdi.distinct_id), pdi.person_id, e.person_id) as aggregation_target,
                                 if(notEmpty(pdi.distinct_id), pdi.person_id, e.person_id) as person_id,
                                 if(event = 'sign up', 1, 0) as step_0,
                                 if(step_0 = 1, timestamp, null) as latest_0,
                                 if(event = 'play movie', 1, 0) as step_1,
                                 if(step_1 = 1, timestamp, null) as latest_1,
                                 if(event = 'buy', 1, 0) as step_2,
                                 if(step_2 = 1, timestamp, null) as latest_2,
                                 replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '') AS prop_basic,
                                 prop_basic as prop,
                                 argMinIf(prop, timestamp, isNotNull(prop)) over (PARTITION by aggregation_target) as prop_vals
                          FROM events e
                          LEFT OUTER JOIN
                            (SELECT distinct_id,
                                    argMax(person_id, version) as person_id
                             FROM person_distinct_id2
                             WHERE team_id = 2
                               AND distinct_id IN
                                 (SELECT distinct_id
                                  FROM events
                                  WHERE team_id = 2
                                    AND event IN ['buy', 'play movie', 'sign up']
                                    AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
                                    AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-08 23:59:59', 'UTC') )
                             GROUP BY distinct_id
                             HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
                          LEFT JOIN
                            (SELECT group_key,
                                    argMax(group_properties, _timestamp) AS group_properties_0
                             FROM groups
                             WHERE team_id = 2
                               AND group_type_index = 0
                             GROUP BY group_key) groups_0 ON "$group_0" == groups_0.group_key
                          WHERE team_id = 2
                            AND event IN ['buy', 'play movie', 'sign up']
                            AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
                            AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-08 23:59:59', 'UTC')
                            AND (step_0 = 1
                                 OR step_1 = 1
                                 OR step_2 = 1) )))))
           WHERE step_0 = 1 ))
     GROUP BY aggregation_target,
              steps,
              prop
     HAVING steps = max_steps)
  WHERE steps IN [2, 3]
    AND arrayFlatten(array(prop)) = arrayFlatten(array('finance'))
  ORDER BY aggregation_target
  LIMIT 100
  OFFSET 0 SETTINGS max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000
  '''
# ---
# name: TestFunnelGroupBreakdownUDF.test_funnel_breakdown_group.5
  '''
  
  SELECT replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '') AS value,
         count(*) as count
  FROM events e
  LEFT JOIN
    (SELECT group_key,
            argMax(group_properties, _timestamp) AS group_properties_0
     FROM groups
     WHERE team_id = 2
       AND group_type_index = 0
     GROUP BY group_key) groups_0 ON "$group_0" == groups_0.group_key
  WHERE team_id = 2
    AND event IN ['buy', 'play movie', 'sign up']
    AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
    AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-08 23:59:59', 'UTC')
  GROUP BY value
  ORDER BY count DESC, value DESC
  LIMIT 26
  OFFSET 0
  '''
# ---
# name: TestFunnelGroupBreakdownUDF.test_funnel_breakdown_group.6
  '''
  
  SELECT aggregation_target AS actor_id
  FROM
    (SELECT aggregation_target,
            steps,
            avg(step_1_conversion_time) step_1_average_conversion_time_inner,
            avg(step_2_conversion_time) step_2_average_conversion_time_inner,
            median(step_1_conversion_time) step_1_median_conversion_time_inner,
            median(step_2_conversion_time) step_2_median_conversion_time_inner ,
            prop
     FROM
       (SELECT aggregation_target,
               steps,
               max(steps) over (PARTITION BY aggregation_target,
                                             prop) as max_steps,
                               step_1_conversion_time,
                               step_2_conversion_time ,
                               prop
        FROM
          (SELECT *,
                  if(latest_0 <= latest_1
                     AND latest_1 <= latest_0 + INTERVAL 7 DAY
                     AND latest_1 <= latest_2
                     AND latest_2 <= latest_0 + INTERVAL 7 DAY, 3, if(latest_0 <= latest_1
                                                                      AND latest_1 <= latest_0 + INTERVAL 7 DAY, 2, 1)) AS steps ,
                  if(isNotNull(latest_1)
                     AND latest_1 <= latest_0 + INTERVAL 7 DAY, dateDiff('second', toDateTime(latest_0), toDateTime(latest_1)), NULL) step_1_conversion_time,
                  if(isNotNull(latest_2)
                     AND latest_2 <= latest_1 + INTERVAL 7 DAY, dateDiff('second', toDateTime(latest_1), toDateTime(latest_2)), NULL) step_2_conversion_time,
                  prop
           FROM
             (SELECT aggregation_target, timestamp, step_0,
                                                    latest_0,
                                                    step_1,
                                                    latest_1,
                                                    step_2,
                                                    min(latest_2) over (PARTITION by aggregation_target,
                                                                                     prop
                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_2 ,
                                                                       prop
              FROM
                (SELECT aggregation_target, timestamp, step_0,
                                                       latest_0,
                                                       step_1,
                                                       latest_1,
                                                       step_2,
                                                       if(latest_2 < latest_1, NULL, latest_2) as latest_2 ,
                                                       prop
                 FROM
                   (SELECT aggregation_target, timestamp, step_0,
                                                          latest_0,
                                                          step_1,
                                                          min(latest_1) over (PARTITION by aggregation_target,
                                                                                           prop
                                                                              ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_1,
                                                                             step_2,
                                                                             min(latest_2) over (PARTITION by aggregation_target,
                                                                                                              prop
                                                                                                 ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_2 ,
                                                                                                if(has(['technology', 'finance'], prop), prop, 'Other') as prop
                    FROM
                      (SELECT *,
                              prop_vals as prop
                       FROM
                         (SELECT e.timestamp as timestamp,
                                 if(notEmpty(pdi.distinct_id), pdi.person_id, e.person_id) as aggregation_target,
                                 if(notEmpty(pdi.distinct_id), pdi.person_id, e.person_id) as person_id,
                                 if(event = 'sign up', 1, 0) as step_0,
                                 if(step_0 = 1, timestamp, null) as latest_0,
                                 if(event = 'play movie', 1, 0) as step_1,
                                 if(step_1 = 1, timestamp, null) as latest_1,
                                 if(event = 'buy', 1, 0) as step_2,
                                 if(step_2 = 1, timestamp, null) as latest_2,
                                 replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '') AS prop_basic,
                                 prop_basic as prop,
                                 argMinIf(prop, timestamp, isNotNull(prop)) over (PARTITION by aggregation_target) as prop_vals
                          FROM events e
                          LEFT OUTER JOIN
                            (SELECT distinct_id,
                                    argMax(person_id, version) as person_id
                             FROM person_distinct_id2
                             WHERE team_id = 2
                               AND distinct_id IN
                                 (SELECT distinct_id
                                  FROM events
                                  WHERE team_id = 2
                                    AND event IN ['buy', 'play movie', 'sign up']
                                    AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
                                    AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-08 23:59:59', 'UTC') )
                             GROUP BY distinct_id
                             HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
                          LEFT JOIN
                            (SELECT group_key,
                                    argMax(group_properties, _timestamp) AS group_properties_0
                             FROM groups
                             WHERE team_id = 2
                               AND group_type_index = 0
                             GROUP BY group_key) groups_0 ON "$group_0" == groups_0.group_key
                          WHERE team_id = 2
                            AND event IN ['buy', 'play movie', 'sign up']
                            AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
                            AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-08 23:59:59', 'UTC')
                            AND (step_0 = 1
                                 OR step_1 = 1
                                 OR step_2 = 1) )))))
           WHERE step_0 = 1 ))
     GROUP BY aggregation_target,
              steps,
              prop
     HAVING steps = max_steps)
  WHERE steps IN [1, 2, 3]
    AND arrayFlatten(array(prop)) = arrayFlatten(array('technology'))
  ORDER BY aggregation_target
  LIMIT 100
  OFFSET 0 SETTINGS max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000
  '''
# ---
# name: TestFunnelGroupBreakdownUDF.test_funnel_breakdown_group.7
  '''
  
  SELECT replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '') AS value,
         count(*) as count
  FROM events e
  LEFT JOIN
    (SELECT group_key,
            argMax(group_properties, _timestamp) AS group_properties_0
     FROM groups
     WHERE team_id = 2
       AND group_type_index = 0
     GROUP BY group_key) groups_0 ON "$group_0" == groups_0.group_key
  WHERE team_id = 2
    AND event IN ['buy', 'play movie', 'sign up']
    AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
    AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-08 23:59:59', 'UTC')
  GROUP BY value
  ORDER BY count DESC, value DESC
  LIMIT 26
  OFFSET 0
  '''
# ---
# name: TestFunnelGroupBreakdownUDF.test_funnel_breakdown_group.8
  '''
  
  SELECT aggregation_target AS actor_id
  FROM
    (SELECT aggregation_target,
            steps,
            avg(step_1_conversion_time) step_1_average_conversion_time_inner,
            avg(step_2_conversion_time) step_2_average_conversion_time_inner,
            median(step_1_conversion_time) step_1_median_conversion_time_inner,
            median(step_2_conversion_time) step_2_median_conversion_time_inner ,
            prop
     FROM
       (SELECT aggregation_target,
               steps,
               max(steps) over (PARTITION BY aggregation_target,
                                             prop) as max_steps,
                               step_1_conversion_time,
                               step_2_conversion_time ,
                               prop
        FROM
          (SELECT *,
                  if(latest_0 <= latest_1
                     AND latest_1 <= latest_0 + INTERVAL 7 DAY
                     AND latest_1 <= latest_2
                     AND latest_2 <= latest_0 + INTERVAL 7 DAY, 3, if(latest_0 <= latest_1
                                                                      AND latest_1 <= latest_0 + INTERVAL 7 DAY, 2, 1)) AS steps ,
                  if(isNotNull(latest_1)
                     AND latest_1 <= latest_0 + INTERVAL 7 DAY, dateDiff('second', toDateTime(latest_0), toDateTime(latest_1)), NULL) step_1_conversion_time,
                  if(isNotNull(latest_2)
                     AND latest_2 <= latest_1 + INTERVAL 7 DAY, dateDiff('second', toDateTime(latest_1), toDateTime(latest_2)), NULL) step_2_conversion_time,
                  prop
           FROM
             (SELECT aggregation_target, timestamp, step_0,
                                                    latest_0,
                                                    step_1,
                                                    latest_1,
                                                    step_2,
                                                    min(latest_2) over (PARTITION by aggregation_target,
                                                                                     prop
                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_2 ,
                                                                       prop
              FROM
                (SELECT aggregation_target, timestamp, step_0,
                                                       latest_0,
                                                       step_1,
                                                       latest_1,
                                                       step_2,
                                                       if(latest_2 < latest_1, NULL, latest_2) as latest_2 ,
                                                       prop
                 FROM
                   (SELECT aggregation_target, timestamp, step_0,
                                                          latest_0,
                                                          step_1,
                                                          min(latest_1) over (PARTITION by aggregation_target,
                                                                                           prop
                                                                              ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_1,
                                                                             step_2,
                                                                             min(latest_2) over (PARTITION by aggregation_target,
                                                                                                              prop
                                                                                                 ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_2 ,
                                                                                                if(has(['technology', 'finance'], prop), prop, 'Other') as prop
                    FROM
                      (SELECT *,
                              prop_vals as prop
                       FROM
                         (SELECT e.timestamp as timestamp,
                                 if(notEmpty(pdi.distinct_id), pdi.person_id, e.person_id) as aggregation_target,
                                 if(notEmpty(pdi.distinct_id), pdi.person_id, e.person_id) as person_id,
                                 if(event = 'sign up', 1, 0) as step_0,
                                 if(step_0 = 1, timestamp, null) as latest_0,
                                 if(event = 'play movie', 1, 0) as step_1,
                                 if(step_1 = 1, timestamp, null) as latest_1,
                                 if(event = 'buy', 1, 0) as step_2,
                                 if(step_2 = 1, timestamp, null) as latest_2,
                                 replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '') AS prop_basic,
                                 prop_basic as prop,
                                 argMinIf(prop, timestamp, isNotNull(prop)) over (PARTITION by aggregation_target) as prop_vals
                          FROM events e
                          LEFT OUTER JOIN
                            (SELECT distinct_id,
                                    argMax(person_id, version) as person_id
                             FROM person_distinct_id2
                             WHERE team_id = 2
                               AND distinct_id IN
                                 (SELECT distinct_id
                                  FROM events
                                  WHERE team_id = 2
                                    AND event IN ['buy', 'play movie', 'sign up']
                                    AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
                                    AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-08 23:59:59', 'UTC') )
                             GROUP BY distinct_id
                             HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
                          LEFT JOIN
                            (SELECT group_key,
                                    argMax(group_properties, _timestamp) AS group_properties_0
                             FROM groups
                             WHERE team_id = 2
                               AND group_type_index = 0
                             GROUP BY group_key) groups_0 ON "$group_0" == groups_0.group_key
                          WHERE team_id = 2
                            AND event IN ['buy', 'play movie', 'sign up']
                            AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
                            AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-08 23:59:59', 'UTC')
                            AND (step_0 = 1
                                 OR step_1 = 1
                                 OR step_2 = 1) )))))
           WHERE step_0 = 1 ))
     GROUP BY aggregation_target,
              steps,
              prop
     HAVING steps = max_steps)
  WHERE steps IN [2, 3]
    AND arrayFlatten(array(prop)) = arrayFlatten(array('technology'))
  ORDER BY aggregation_target
  LIMIT 100
  OFFSET 0 SETTINGS max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000
  '''
# ---
