# name: TestFOSSFunnel.test_funnel_events_with_person_on_events_v2
  '
  
  SELECT distinct_id,
         person_id
  FROM events
  WHERE team_id = 2
    AND distinct_id IN ('stopped_after_signup',
                        'stopped_after_pay')
  GROUP BY distinct_id,
           person_id
  ORDER BY if(distinct_id = 'stopped_after_signup', -1, 0)
  '
---
# name: TestFOSSFunnel.test_funnel_events_with_person_on_events_v2.1
  '
  SELECT countIf(ifNull(equals(steps, 1), 0)) AS step_1,
         countIf(ifNull(equals(steps, 2), 0)) AS step_2,
         countIf(ifNull(equals(steps, 3), 0)) AS step_3,
         avg(step_1_average_conversion_time_inner) AS step_1_average_conversion_time,
         avg(step_2_average_conversion_time_inner) AS step_2_average_conversion_time,
         median(step_1_median_conversion_time_inner) AS step_1_median_conversion_time,
         median(step_2_median_conversion_time_inner) AS step_2_median_conversion_time
  FROM
    (SELECT aggregation_target AS aggregation_target,
            steps AS steps,
            avg(step_1_conversion_time) AS step_1_average_conversion_time_inner,
            avg(step_2_conversion_time) AS step_2_average_conversion_time_inner,
            median(step_1_conversion_time) AS step_1_median_conversion_time_inner,
            median(step_2_conversion_time) AS step_2_median_conversion_time_inner
     FROM
       (SELECT aggregation_target AS aggregation_target,
               steps AS steps,
               max(steps) OVER (PARTITION BY aggregation_target) AS max_steps,
                               step_1_conversion_time AS step_1_conversion_time,
                               step_2_conversion_time AS step_2_conversion_time
        FROM
          (SELECT aggregation_target AS aggregation_target,
                  timestamp AS timestamp,
                  step_0 AS step_0,
                  latest_0 AS latest_0,
                  step_1 AS step_1,
                  latest_1 AS latest_1,
                  step_2 AS step_2,
                  latest_2 AS latest_2,
                  if(and(ifNull(lessOrEquals(latest_0, latest_1), 0), ifNull(lessOrEquals(latest_1, plus(latest_0, toIntervalDay(14))), 0), ifNull(lessOrEquals(latest_1, latest_2), 0), ifNull(lessOrEquals(latest_2, plus(latest_0, toIntervalDay(14))), 0)), 3, if(and(ifNull(lessOrEquals(latest_0, latest_1), 0), ifNull(lessOrEquals(latest_1, plus(latest_0, toIntervalDay(14))), 0)), 2, 1)) AS steps,
                  if(and(isNotNull(latest_1), ifNull(lessOrEquals(latest_1, plus(latest_0, toIntervalDay(14))), 0)), dateDiff('second', latest_0, latest_1), NULL) AS step_1_conversion_time,
                  if(and(isNotNull(latest_2), ifNull(lessOrEquals(latest_2, plus(latest_1, toIntervalDay(14))), 0)), dateDiff('second', latest_1, latest_2), NULL) AS step_2_conversion_time
           FROM
             (SELECT aggregation_target AS aggregation_target,
                     timestamp AS timestamp,
                     step_0 AS step_0,
                     latest_0 AS latest_0,
                     step_1 AS step_1,
                     latest_1 AS latest_1,
                     step_2 AS step_2,
                     min(latest_2) OVER (PARTITION BY aggregation_target
                                         ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS latest_2
              FROM
                (SELECT aggregation_target AS aggregation_target,
                        timestamp AS timestamp,
                        step_0 AS step_0,
                        latest_0 AS latest_0,
                        step_1 AS step_1,
                        latest_1 AS latest_1,
                        step_2 AS step_2,
                        if(ifNull(less(latest_2, latest_1), 0), NULL, latest_2) AS latest_2
                 FROM
                   (SELECT aggregation_target AS aggregation_target,
                           timestamp AS timestamp,
                           step_0 AS step_0,
                           latest_0 AS latest_0,
                           step_1 AS step_1,
                           min(latest_1) OVER (PARTITION BY aggregation_target
                                               ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS latest_1,
                                              step_2 AS step_2,
                                              min(latest_2) OVER (PARTITION BY aggregation_target
                                                                  ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS latest_2
                    FROM
                      (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                              ifNull(nullIf(e__override.override_person_id, '00000000-0000-0000-0000-000000000000'), e.person_id) AS aggregation_target,
                              if(equals(e.event, 'user signed up'), 1, 0) AS step_0,
                              if(ifNull(equals(step_0, 1), 0), timestamp, NULL) AS latest_0,
                              if(and(equals(e.event, '$autocapture'), match(e.elements_chain, '(^|;)button(\\.|$|;|:)'), match(e.elements_chain, '(text="Pay\\ \\$10")')), 1, 0) AS step_1,
                              if(ifNull(equals(step_1, 1), 0), timestamp, NULL) AS latest_1,
                              if(and(equals(e.event, '$autocapture'), match(e.elements_chain, '(^|;)a(\\.|$|;|:)'), match(e.elements_chain, '(href="/movie")')), 1, 0) AS step_2,
                              if(ifNull(equals(step_2, 1), 0), timestamp, NULL) AS latest_2
                       FROM events AS e
                       LEFT OUTER JOIN
                         (SELECT argMax(person_overrides.override_person_id, person_overrides.version) AS override_person_id,
                                 person_overrides.old_person_id AS old_person_id
                          FROM person_overrides
                          WHERE equals(person_overrides.team_id, 2)
                          GROUP BY person_overrides.old_person_id) AS e__override ON equals(e.person_id, e__override.old_person_id)
                       WHERE and(equals(e.team_id, 2), and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2011-12-25 03:21:34.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2012-01-01 23:59:59.999999', 6, 'UTC'))), in(e.event, tuple('user signed up', '$autocapture')))))))
           WHERE ifNull(equals(step_0, 1), 0)))
     GROUP BY aggregation_target,
              steps
     HAVING ifNull(equals(steps, max_steps), isNull(steps)
                   and isNull(max_steps)))
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
