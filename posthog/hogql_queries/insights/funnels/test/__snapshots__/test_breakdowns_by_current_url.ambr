# serializer version: 1
# name: TestBreakdownsByCurrentURL.test_breakdown_by_current_url
  '''
  SELECT [if(empty(replaceRegexpOne(ifNull(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$current_url'), ''), 'null'), '^"|"$', ''), ''), '[\\/?#]*$', '')), '/', replaceRegexpOne(ifNull(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$current_url'), ''), 'null'), '^"|"$', ''), ''), '[\\/?#]*$', ''))] AS value,
         count(*) AS count
  FROM events AS e
  INNER JOIN
    (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
            person_distinct_id2.distinct_id AS distinct_id
     FROM person_distinct_id2
     WHERE equals(person_distinct_id2.team_id, 2)
     GROUP BY person_distinct_id2.distinct_id
     HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
  WHERE and(equals(e.team_id, 2), in(e.event, tuple('terminate funnel', 'watched movie')), and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-02 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-12 23:59:59.999999', 6, 'UTC'))), notEmpty(e__pdi.person_id))
  GROUP BY value
  ORDER BY count DESC, value DESC
  LIMIT 101
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1
  '''
# ---
# name: TestBreakdownsByCurrentURL.test_breakdown_by_current_url.1
  '''
  SELECT countIf(ifNull(equals(steps, 1), 0)) AS step_1,
         countIf(ifNull(equals(steps, 2), 0)) AS step_2,
         avg(step_1_average_conversion_time_inner) AS step_1_average_conversion_time,
         median(step_1_median_conversion_time_inner) AS step_1_median_conversion_time,
         prop AS prop
  FROM
    (SELECT aggregation_target AS aggregation_target,
            steps AS steps,
            prop AS prop,
            avg(step_1_conversion_time) AS step_1_average_conversion_time_inner,
            median(step_1_conversion_time) AS step_1_median_conversion_time_inner,
            prop AS prop
     FROM
       (SELECT aggregation_target AS aggregation_target,
               steps AS steps,
               prop AS prop,
               max(steps) OVER (PARTITION BY aggregation_target,
                                             prop) AS max_steps,
                               step_1_conversion_time AS step_1_conversion_time,
                               prop AS prop
        FROM
          (SELECT aggregation_target AS aggregation_target,
                  timestamp AS timestamp,
                  step_0 AS step_0,
                  latest_0 AS latest_0,
                  step_1 AS step_1,
                  latest_1 AS latest_1,
                  prop AS prop,
                  if(and(ifNull(lessOrEquals(latest_0, latest_1), 0), ifNull(lessOrEquals(latest_1, plus(latest_0, toIntervalDay(14))), 0)), 2, 1) AS steps,
                  if(and(isNotNull(latest_1), ifNull(lessOrEquals(latest_1, plus(latest_0, toIntervalDay(14))), 0)), dateDiff('second', latest_0, latest_1), NULL) AS step_1_conversion_time,
                  prop AS prop
           FROM
             (SELECT aggregation_target AS aggregation_target,
                     timestamp AS timestamp,
                     step_0 AS step_0,
                     latest_0 AS latest_0,
                     step_1 AS step_1,
                     min(latest_1) OVER (PARTITION BY aggregation_target,
                                                      prop
                                         ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS latest_1,
                                        if(has([['https://example.com/home'], ['https://example.com'], ['/']], prop), prop, ['Other']) AS prop
              FROM
                (SELECT timestamp AS timestamp,
                        aggregation_target AS aggregation_target,
                        step_0 AS step_0,
                        latest_0 AS latest_0,
                        step_1 AS step_1,
                        latest_1 AS latest_1,
                        prop_basic AS prop_basic,
                        prop,
                        prop_vals AS prop_vals,
                        if(notEmpty(arrayFilter(x -> notEmpty(x), prop_vals)), prop_vals, ['']) AS prop
                 FROM
                   (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                           e__pdi.person_id AS aggregation_target,
                           if(equals(e.event, 'watched movie'), 1, 0) AS step_0,
                           if(ifNull(equals(step_0, 1), 0), timestamp, NULL) AS latest_0,
                           if(equals(e.event, 'terminate funnel'), 1, 0) AS step_1,
                           if(ifNull(equals(step_1, 1), 0), timestamp, NULL) AS latest_1,
                           [if(empty(replaceRegexpOne(ifNull(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$current_url'), ''), 'null'), '^"|"$', ''), ''), '[\\/?#]*$', '')), '/', replaceRegexpOne(ifNull(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$current_url'), ''), 'null'), '^"|"$', ''), ''), '[\\/?#]*$', ''))] AS prop_basic,
                           prop_basic AS prop,
                           argMinIf(prop, timestamp, notEmpty(arrayFilter(x -> notEmpty(x), prop))) OVER (PARTITION BY aggregation_target) AS prop_vals
                    FROM events AS e
                    INNER JOIN
                      (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                              person_distinct_id2.distinct_id AS distinct_id
                       FROM person_distinct_id2
                       WHERE equals(person_distinct_id2.team_id, 2)
                       GROUP BY person_distinct_id2.distinct_id
                       HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
                    WHERE and(equals(e.team_id, 2), and(and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-02 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-12 23:59:59.999999', 6, 'UTC'))), in(e.event, tuple('terminate funnel', 'watched movie'))), or(ifNull(equals(step_0, 1), 0), ifNull(equals(step_1, 1), 0))))))
           WHERE ifNull(equals(step_0, 1), 0)))
     GROUP BY aggregation_target,
              steps,
              prop
     HAVING ifNull(equals(steps, max_steps), isNull(steps)
                   and isNull(max_steps)))
  GROUP BY prop
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '''
# ---
# name: TestBreakdownsByCurrentURL.test_breakdown_by_pathname
  '''
  SELECT [if(empty(replaceRegexpOne(ifNull(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$pathname'), ''), 'null'), '^"|"$', ''), ''), '[\\/?#]*$', '')), '/', replaceRegexpOne(ifNull(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$pathname'), ''), 'null'), '^"|"$', ''), ''), '[\\/?#]*$', ''))] AS value,
         count(*) AS count
  FROM events AS e
  INNER JOIN
    (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
            person_distinct_id2.distinct_id AS distinct_id
     FROM person_distinct_id2
     WHERE equals(person_distinct_id2.team_id, 2)
     GROUP BY person_distinct_id2.distinct_id
     HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
  WHERE and(equals(e.team_id, 2), in(e.event, tuple('terminate funnel', 'watched movie')), and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-02 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-12 23:59:59.999999', 6, 'UTC'))), notEmpty(e__pdi.person_id))
  GROUP BY value
  ORDER BY count DESC, value DESC
  LIMIT 101
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1
  '''
# ---
# name: TestBreakdownsByCurrentURL.test_breakdown_by_pathname.1
  '''
  SELECT countIf(ifNull(equals(steps, 1), 0)) AS step_1,
         countIf(ifNull(equals(steps, 2), 0)) AS step_2,
         avg(step_1_average_conversion_time_inner) AS step_1_average_conversion_time,
         median(step_1_median_conversion_time_inner) AS step_1_median_conversion_time,
         prop AS prop
  FROM
    (SELECT aggregation_target AS aggregation_target,
            steps AS steps,
            prop AS prop,
            avg(step_1_conversion_time) AS step_1_average_conversion_time_inner,
            median(step_1_conversion_time) AS step_1_median_conversion_time_inner,
            prop AS prop
     FROM
       (SELECT aggregation_target AS aggregation_target,
               steps AS steps,
               prop AS prop,
               max(steps) OVER (PARTITION BY aggregation_target,
                                             prop) AS max_steps,
                               step_1_conversion_time AS step_1_conversion_time,
                               prop AS prop
        FROM
          (SELECT aggregation_target AS aggregation_target,
                  timestamp AS timestamp,
                  step_0 AS step_0,
                  latest_0 AS latest_0,
                  step_1 AS step_1,
                  latest_1 AS latest_1,
                  prop AS prop,
                  if(and(ifNull(lessOrEquals(latest_0, latest_1), 0), ifNull(lessOrEquals(latest_1, plus(latest_0, toIntervalDay(14))), 0)), 2, 1) AS steps,
                  if(and(isNotNull(latest_1), ifNull(lessOrEquals(latest_1, plus(latest_0, toIntervalDay(14))), 0)), dateDiff('second', latest_0, latest_1), NULL) AS step_1_conversion_time,
                  prop AS prop
           FROM
             (SELECT aggregation_target AS aggregation_target,
                     timestamp AS timestamp,
                     step_0 AS step_0,
                     latest_0 AS latest_0,
                     step_1 AS step_1,
                     min(latest_1) OVER (PARTITION BY aggregation_target,
                                                      prop
                                         ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS latest_1,
                                        if(has([['/'], ['/home']], prop), prop, ['Other']) AS prop
              FROM
                (SELECT timestamp AS timestamp,
                        aggregation_target AS aggregation_target,
                        step_0 AS step_0,
                        latest_0 AS latest_0,
                        step_1 AS step_1,
                        latest_1 AS latest_1,
                        prop_basic AS prop_basic,
                        prop,
                        prop_vals AS prop_vals,
                        if(notEmpty(arrayFilter(x -> notEmpty(x), prop_vals)), prop_vals, ['']) AS prop
                 FROM
                   (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                           e__pdi.person_id AS aggregation_target,
                           if(equals(e.event, 'watched movie'), 1, 0) AS step_0,
                           if(ifNull(equals(step_0, 1), 0), timestamp, NULL) AS latest_0,
                           if(equals(e.event, 'terminate funnel'), 1, 0) AS step_1,
                           if(ifNull(equals(step_1, 1), 0), timestamp, NULL) AS latest_1,
                           [if(empty(replaceRegexpOne(ifNull(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$pathname'), ''), 'null'), '^"|"$', ''), ''), '[\\/?#]*$', '')), '/', replaceRegexpOne(ifNull(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$pathname'), ''), 'null'), '^"|"$', ''), ''), '[\\/?#]*$', ''))] AS prop_basic,
                           prop_basic AS prop,
                           argMinIf(prop, timestamp, notEmpty(arrayFilter(x -> notEmpty(x), prop))) OVER (PARTITION BY aggregation_target) AS prop_vals
                    FROM events AS e
                    INNER JOIN
                      (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                              person_distinct_id2.distinct_id AS distinct_id
                       FROM person_distinct_id2
                       WHERE equals(person_distinct_id2.team_id, 2)
                       GROUP BY person_distinct_id2.distinct_id
                       HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
                    WHERE and(equals(e.team_id, 2), and(and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-02 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-12 23:59:59.999999', 6, 'UTC'))), in(e.event, tuple('terminate funnel', 'watched movie'))), or(ifNull(equals(step_0, 1), 0), ifNull(equals(step_1, 1), 0))))))
           WHERE ifNull(equals(step_0, 1), 0)))
     GROUP BY aggregation_target,
              steps,
              prop
     HAVING ifNull(equals(steps, max_steps), isNull(steps)
                   and isNull(max_steps)))
  GROUP BY prop
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '''
# ---
