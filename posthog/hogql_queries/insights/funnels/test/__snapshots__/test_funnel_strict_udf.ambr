# serializer version: 1
# name: TestFunnelStrictStepsBreakdownUDF.test_funnel_breakdown_correct_breakdown_props_are_chosen
  '''
  SELECT sum(step_1) AS step_1,
         sum(step_2) AS step_2,
         arrayMap(x -> if(isNaN(x), NULL, x), [avgArrayOrNull(step_1_conversion_times)])[1] AS step_1_average_conversion_time,
         arrayMap(x -> if(isNaN(x), NULL, x), [medianArrayOrNull(step_1_conversion_times)])[1] AS step_1_median_conversion_time,
         groupArray(row_number) AS row_number,
         final_prop AS final_prop
  FROM
    (SELECT countIf(ifNull(ifNull(equals(step_reached, 0), 0), 0)) AS step_1,
            countIf(ifNull(ifNull(equals(step_reached, 1), 0), 0)) AS step_2,
            groupArrayIf(timings[1], ifNull(greater(timings[1], 0), 0)) AS step_1_conversion_times,
            rowNumberInAllBlocks() AS row_number,
            if(ifNull(less(row_number, 25), 0), breakdown, ['Other']) AS final_prop
     FROM
       (SELECT arraySort(t -> t.1, groupArray(tuple(accurateCastOrNull(timestamp, 'Float64'), uuid, prop, arrayFilter(x -> ifNull(notEquals(x, 0), 1), [multiply(1, step_0), multiply(2, step_1)])))) AS events_array,
               arrayJoin(aggregate_funnel_array_v4(2, 1209600, 'first_touch', 'strict', groupUniqArrayIf(prop, ifNull(notEquals(prop, []), isNotNull(prop)
                                                                                                                      or isNotNull([]))), arrayFilter((x, x_before, x_after) -> not(and(ifNull(lessOrEquals(length(x.4), 1), 0), ifNull(equals(x.4, x_before.4), isNull(x.4)
                                                                                                                                                                                                                                        and isNull(x_before.4)), ifNull(equals(x.4, x_after.4), isNull(x.4)
                                                                                                                                                                                                                                                                        and isNull(x_after.4)), ifNull(equals(x.3, x_before.3), isNull(x.3)
                                                                                                                                                                                                                                                                                                       and isNull(x_before.3)), ifNull(equals(x.3, x_after.3), isNull(x.3)
                                                                                                                                                                                                                                                                                                                                       and isNull(x_after.3)), ifNull(greater(x.1, x_before.1), 0), ifNull(less(x.1, x_after.1), 0))), events_array, arrayRotateRight(events_array, 1), arrayRotateLeft(events_array, 1)))) AS af_tuple,
               af_tuple.1 AS step_reached,
               plus(af_tuple.1, 1) AS steps,
               af_tuple.2 AS breakdown,
               af_tuple.3 AS timings,
               aggregation_target AS aggregation_target
        FROM
          (SELECT timestamp AS timestamp,
                  aggregation_target AS aggregation_target,
                  uuid AS uuid,
                          `$session_id` AS `$session_id`,
                          `$window_id` AS `$window_id`,
                          step_0 AS step_0,
                          step_1 AS step_1,
                          prop_basic AS prop_basic,
                          prop,
                          prop_vals AS prop_vals,
                          if(notEmpty(arrayFilter(x -> notEmpty(x), prop_vals)), prop_vals, ['']) AS prop
           FROM
             (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                     if(not(empty(e__override.distinct_id)), e__override.person_id, e.person_id) AS aggregation_target,
                     e.uuid AS uuid,
                     e.`$session_id` AS `$session_id`,
                     e.`$window_id` AS `$window_id`,
                     if(equals(e.event, 'sign up'), 1, 0) AS step_0,
                     if(and(equals(e.event, 'buy'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$version'), ''), 'null'), '^"|"$', ''), 'xyz'), 0)), 1, 0) AS step_1,
                     [ifNull(toString(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$browser'), ''), 'null'), '^"|"$', '')), '')] AS prop_basic,
                     prop_basic AS prop,
                     argMinIf(prop, timestamp, notEmpty(arrayFilter(x -> notEmpty(x), prop))) OVER (PARTITION BY aggregation_target) AS prop_vals
              FROM events AS e
              LEFT OUTER JOIN
                (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                        person_distinct_id_overrides.distinct_id AS distinct_id
                 FROM person_distinct_id_overrides
                 WHERE equals(person_distinct_id_overrides.team_id, 99999)
                 GROUP BY person_distinct_id_overrides.distinct_id
                 HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS e__override ON equals(e.distinct_id, e__override.distinct_id)
              WHERE and(equals(e.team_id, 99999), and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-08 23:59:59.999999', 6, 'UTC'))))))
        GROUP BY aggregation_target
        HAVING ifNull(greaterOrEquals(step_reached, 0), 0))
     GROUP BY breakdown
     ORDER BY step_2 DESC, step_1 DESC)
  GROUP BY final_prop
  LIMIT 26 SETTINGS join_algorithm='auto',
                    readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=4000000,
                    max_expanded_ast_elements=4000000,
                    max_bytes_before_external_group_by=23622320128,
                    allow_experimental_analyzer=1
  '''
# ---
# name: TestFunnelStrictStepsBreakdownUDF.test_funnel_breakdown_correct_breakdown_props_are_chosen_for_step
  '''
  SELECT sum(step_1) AS step_1,
         sum(step_2) AS step_2,
         arrayMap(x -> if(isNaN(x), NULL, x), [avgArrayOrNull(step_1_conversion_times)])[1] AS step_1_average_conversion_time,
         arrayMap(x -> if(isNaN(x), NULL, x), [medianArrayOrNull(step_1_conversion_times)])[1] AS step_1_median_conversion_time,
         groupArray(row_number) AS row_number,
         final_prop AS final_prop
  FROM
    (SELECT countIf(ifNull(ifNull(equals(step_reached, 0), 0), 0)) AS step_1,
            countIf(ifNull(ifNull(equals(step_reached, 1), 0), 0)) AS step_2,
            groupArrayIf(timings[1], ifNull(greater(timings[1], 0), 0)) AS step_1_conversion_times,
            rowNumberInAllBlocks() AS row_number,
            if(ifNull(less(row_number, 25), 0), breakdown, ['Other']) AS final_prop
     FROM
       (SELECT arraySort(t -> t.1, groupArray(tuple(accurateCastOrNull(timestamp, 'Float64'), uuid, prop, arrayFilter(x -> ifNull(notEquals(x, 0), 1), [multiply(1, step_0), multiply(2, step_1)])))) AS events_array,
               arrayJoin(aggregate_funnel_array_v4(2, 1209600, 'step_1', 'strict', groupUniqArrayIf(prop_1, ifNull(notEquals(prop_1, []), isNotNull(prop_1)
                                                                                                                   or isNotNull([]))), arrayFilter((x, x_before, x_after) -> not(and(ifNull(lessOrEquals(length(x.4), 1), 0), ifNull(equals(x.4, x_before.4), isNull(x.4)
                                                                                                                                                                                                                                     and isNull(x_before.4)), ifNull(equals(x.4, x_after.4), isNull(x.4)
                                                                                                                                                                                                                                                                     and isNull(x_after.4)), ifNull(equals(x.3, x_before.3), isNull(x.3)
                                                                                                                                                                                                                                                                                                    and isNull(x_before.3)), ifNull(equals(x.3, x_after.3), isNull(x.3)
                                                                                                                                                                                                                                                                                                                                    and isNull(x_after.3)), ifNull(greater(x.1, x_before.1), 0), ifNull(less(x.1, x_after.1), 0))), events_array, arrayRotateRight(events_array, 1), arrayRotateLeft(events_array, 1)))) AS af_tuple,
               af_tuple.1 AS step_reached,
               plus(af_tuple.1, 1) AS steps,
               af_tuple.2 AS breakdown,
               af_tuple.3 AS timings,
               aggregation_target AS aggregation_target
        FROM
          (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                  if(not(empty(e__override.distinct_id)), e__override.person_id, e.person_id) AS aggregation_target,
                  e.uuid AS uuid,
                  e.`$session_id` AS `$session_id`,
                  e.`$window_id` AS `$window_id`,
                  if(equals(e.event, 'sign up'), 1, 0) AS step_0,
                  if(and(equals(e.event, 'buy'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$version'), ''), 'null'), '^"|"$', ''), 'xyz'), 0)), 1, 0) AS step_1,
                  [ifNull(toString(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$browser'), ''), 'null'), '^"|"$', '')), '')] AS prop_basic,
                  if(ifNull(equals(step_0, 1), 0), prop_basic, []) AS prop_0,
                  if(ifNull(equals(step_1, 1), 0), prop_basic, []) AS prop_1,
                  prop_1 AS prop,
                  groupUniqArray(prop) OVER (PARTITION BY aggregation_target) AS prop_vals
           FROM events AS e
           LEFT OUTER JOIN
             (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                     person_distinct_id_overrides.distinct_id AS distinct_id
              FROM person_distinct_id_overrides
              WHERE equals(person_distinct_id_overrides.team_id, 99999)
              GROUP BY person_distinct_id_overrides.distinct_id
              HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS e__override ON equals(e.distinct_id, e__override.distinct_id)
           WHERE and(equals(e.team_id, 99999), and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-08 23:59:59.999999', 6, 'UTC')))))
        GROUP BY aggregation_target
        HAVING ifNull(greaterOrEquals(step_reached, 0), 0))
     GROUP BY breakdown
     ORDER BY step_2 DESC, step_1 DESC)
  GROUP BY final_prop
  LIMIT 26 SETTINGS join_algorithm='auto',
                    readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=4000000,
                    max_expanded_ast_elements=4000000,
                    max_bytes_before_external_group_by=23622320128,
                    allow_experimental_analyzer=1
  '''
# ---
# name: TestFunnelStrictStepsBreakdownUDF.test_funnel_step_multiple_breakdown_snapshot
  '''
  SELECT sum(step_1) AS step_1,
         sum(step_2) AS step_2,
         arrayMap(x -> if(isNaN(x), NULL, x), [avgArrayOrNull(step_1_conversion_times)])[1] AS step_1_average_conversion_time,
         arrayMap(x -> if(isNaN(x), NULL, x), [medianArrayOrNull(step_1_conversion_times)])[1] AS step_1_median_conversion_time,
         groupArray(row_number) AS row_number,
         final_prop AS final_prop
  FROM
    (SELECT countIf(ifNull(ifNull(equals(step_reached, 0), 0), 0)) AS step_1,
            countIf(ifNull(ifNull(equals(step_reached, 1), 0), 0)) AS step_2,
            groupArrayIf(timings[1], ifNull(greater(timings[1], 0), 0)) AS step_1_conversion_times,
            rowNumberInAllBlocks() AS row_number,
            if(ifNull(less(row_number, 25), 0), breakdown, ['Other']) AS final_prop
     FROM
       (SELECT arraySort(t -> t.1, groupArray(tuple(accurateCastOrNull(timestamp, 'Float64'), uuid, prop, arrayFilter(x -> ifNull(notEquals(x, 0), 1), [multiply(1, step_0), multiply(2, step_1)])))) AS events_array,
               arrayJoin(aggregate_funnel_array_v4(2, 1209600, 'first_touch', 'strict', groupUniqArrayIf(prop, ifNull(notEquals(prop, []), isNotNull(prop)
                                                                                                                      or isNotNull([]))), arrayFilter((x, x_before, x_after) -> not(and(ifNull(lessOrEquals(length(x.4), 1), 0), ifNull(equals(x.4, x_before.4), isNull(x.4)
                                                                                                                                                                                                                                        and isNull(x_before.4)), ifNull(equals(x.4, x_after.4), isNull(x.4)
                                                                                                                                                                                                                                                                        and isNull(x_after.4)), ifNull(equals(x.3, x_before.3), isNull(x.3)
                                                                                                                                                                                                                                                                                                       and isNull(x_before.3)), ifNull(equals(x.3, x_after.3), isNull(x.3)
                                                                                                                                                                                                                                                                                                                                       and isNull(x_after.3)), ifNull(greater(x.1, x_before.1), 0), ifNull(less(x.1, x_after.1), 0))), events_array, arrayRotateRight(events_array, 1), arrayRotateLeft(events_array, 1)))) AS af_tuple,
               af_tuple.1 AS step_reached,
               plus(af_tuple.1, 1) AS steps,
               af_tuple.2 AS breakdown,
               af_tuple.3 AS timings,
               aggregation_target AS aggregation_target
        FROM
          (SELECT timestamp AS timestamp,
                  aggregation_target AS aggregation_target,
                  uuid AS uuid,
                          `$session_id` AS `$session_id`,
                          `$window_id` AS `$window_id`,
                          step_0 AS step_0,
                          step_1 AS step_1,
                          prop_basic AS prop_basic,
                          prop,
                          prop_vals AS prop_vals,
                          if(notEmpty(arrayFilter(x -> notEmpty(x), prop_vals)), prop_vals, ['', '']) AS prop
           FROM
             (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                     if(not(empty(e__override.distinct_id)), e__override.person_id, e.person_id) AS aggregation_target,
                     e.uuid AS uuid,
                     e.`$session_id` AS `$session_id`,
                     e.`$window_id` AS `$window_id`,
                     if(equals(e.event, 'sign up'), 1, 0) AS step_0,
                     if(equals(e.event, 'buy'), 1, 0) AS step_1,
                     [ifNull(toString(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$browser'), ''), 'null'), '^"|"$', '')), ''), ifNull(toString(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$version'), ''), 'null'), '^"|"$', '')), '')] AS prop_basic,
                     prop_basic AS prop,
                     argMinIf(prop, timestamp, notEmpty(arrayFilter(x -> notEmpty(x), prop))) OVER (PARTITION BY aggregation_target) AS prop_vals
              FROM events AS e
              LEFT OUTER JOIN
                (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                        person_distinct_id_overrides.distinct_id AS distinct_id
                 FROM person_distinct_id_overrides
                 WHERE equals(person_distinct_id_overrides.team_id, 99999)
                 GROUP BY person_distinct_id_overrides.distinct_id
                 HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS e__override ON equals(e.distinct_id, e__override.distinct_id)
              WHERE and(equals(e.team_id, 99999), and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-08 23:59:59.999999', 6, 'UTC'))))))
        GROUP BY aggregation_target
        HAVING ifNull(greaterOrEquals(step_reached, 0), 0))
     GROUP BY breakdown
     ORDER BY step_2 DESC, step_1 DESC)
  GROUP BY final_prop
  LIMIT 26 SETTINGS join_algorithm='auto',
                    readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=4000000,
                    max_expanded_ast_elements=4000000,
                    max_bytes_before_external_group_by=23622320128,
                    allow_experimental_analyzer=1
  '''
# ---
# name: TestStrictFunnelGroupBreakdownUDF.test_funnel_aggregate_by_groups_breakdown_group_person_on_events
  '''
  SELECT sum(step_1) AS step_1,
         sum(step_2) AS step_2,
         sum(step_3) AS step_3,
         arrayMap(x -> if(isNaN(x), NULL, x), [avgArrayOrNull(step_1_conversion_times)])[1] AS step_1_average_conversion_time,
         arrayMap(x -> if(isNaN(x), NULL, x), [avgArrayOrNull(step_2_conversion_times)])[1] AS step_2_average_conversion_time,
         arrayMap(x -> if(isNaN(x), NULL, x), [medianArrayOrNull(step_1_conversion_times)])[1] AS step_1_median_conversion_time,
         arrayMap(x -> if(isNaN(x), NULL, x), [medianArrayOrNull(step_2_conversion_times)])[1] AS step_2_median_conversion_time,
         groupArray(row_number) AS row_number,
         final_prop AS final_prop
  FROM
    (SELECT countIf(ifNull(ifNull(equals(step_reached, 0), 0), 0)) AS step_1,
            countIf(ifNull(ifNull(equals(step_reached, 1), 0), 0)) AS step_2,
            countIf(ifNull(ifNull(equals(step_reached, 2), 0), 0)) AS step_3,
            groupArrayIf(timings[1], ifNull(greater(timings[1], 0), 0)) AS step_1_conversion_times,
            groupArrayIf(timings[2], ifNull(greater(timings[2], 0), 0)) AS step_2_conversion_times,
            rowNumberInAllBlocks() AS row_number,
            if(ifNull(less(row_number, 25), 0), breakdown, 'Other') AS final_prop
     FROM
       (SELECT arraySort(t -> t.1, groupArray(tuple(accurateCastOrNull(timestamp, 'Float64'), uuid, prop, arrayFilter(x -> ifNull(notEquals(x, 0), 1), [multiply(1, step_0), multiply(2, step_1), multiply(3, step_2)])))) AS events_array,
               arrayJoin(aggregate_funnel_v4(3, 1209600, 'first_touch', 'strict', groupUniqArray(prop), arrayFilter((x, x_before, x_after) -> not(and(ifNull(lessOrEquals(length(x.4), 1), 0), ifNull(equals(x.4, x_before.4), isNull(x.4)
                                                                                                                                                                                                      and isNull(x_before.4)), ifNull(equals(x.4, x_after.4), isNull(x.4)
                                                                                                                                                                                                                                      and isNull(x_after.4)), ifNull(equals(x.3, x_before.3), isNull(x.3)
                                                                                                                                                                                                                                                                     and isNull(x_before.3)), ifNull(equals(x.3, x_after.3), isNull(x.3)
                                                                                                                                                                                                                                                                                                     and isNull(x_after.3)), ifNull(greater(x.1, x_before.1), 0), ifNull(less(x.1, x_after.1), 0))), events_array, arrayRotateRight(events_array, 1), arrayRotateLeft(events_array, 1)))) AS af_tuple,
               af_tuple.1 AS step_reached,
               plus(af_tuple.1, 1) AS steps,
               af_tuple.2 AS breakdown,
               af_tuple.3 AS timings,
               aggregation_target AS aggregation_target
        FROM
          (SELECT timestamp AS timestamp,
                  aggregation_target AS aggregation_target,
                  uuid AS uuid,
                          `$session_id` AS `$session_id`,
                          `$window_id` AS `$window_id`,
                          step_0 AS step_0,
                          step_1 AS step_1,
                          step_2 AS step_2,
                          prop_basic AS prop_basic,
                          prop,
                          prop_vals AS prop_vals,
                          prop_vals AS prop
           FROM
             (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                     e.`$group_0` AS aggregation_target,
                     e.uuid AS uuid,
                     e.`$session_id` AS `$session_id`,
                     e.`$window_id` AS `$window_id`,
                     if(equals(e.event, 'sign up'), 1, 0) AS step_0,
                     if(equals(e.event, 'play movie'), 1, 0) AS step_1,
                     if(equals(e.event, 'buy'), 1, 0) AS step_2,
                     ifNull(toString(e__group_0.properties___industry), '') AS prop_basic,
                     prop_basic AS prop,
                     argMinIf(prop, timestamp, isNotNull(prop)) OVER (PARTITION BY aggregation_target) AS prop_vals
              FROM events AS e
              LEFT JOIN
                (SELECT argMax(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(groups.group_properties, 'industry'), ''), 'null'), '^"|"$', ''), toTimeZone(groups._timestamp, 'UTC')) AS properties___industry,
                        groups.group_type_index AS index,
                        groups.group_key AS key
                 FROM groups
                 WHERE and(equals(groups.team_id, 99999), equals(index, 0))
                 GROUP BY groups.group_type_index,
                          groups.group_key) AS e__group_0 ON equals(e.`$group_0`, e__group_0.key)
              WHERE and(equals(e.team_id, 99999), and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-08 23:59:59.999999', 6, 'UTC'))))))
        GROUP BY aggregation_target
        HAVING ifNull(greaterOrEquals(step_reached, 0), 0))
     GROUP BY breakdown
     ORDER BY step_3 DESC, step_2 DESC, step_1 DESC)
  GROUP BY final_prop
  LIMIT 26 SETTINGS join_algorithm='auto',
                    readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=4000000,
                    max_expanded_ast_elements=4000000,
                    max_bytes_before_external_group_by=23622320128,
                    allow_experimental_analyzer=1
  '''
# ---
# name: TestStrictFunnelGroupBreakdownUDF.test_funnel_aggregate_by_groups_breakdown_group_person_on_events_poe_v2
  '''
  SELECT sum(step_1) AS step_1,
         sum(step_2) AS step_2,
         sum(step_3) AS step_3,
         arrayMap(x -> if(isNaN(x), NULL, x), [avgArrayOrNull(step_1_conversion_times)])[1] AS step_1_average_conversion_time,
         arrayMap(x -> if(isNaN(x), NULL, x), [avgArrayOrNull(step_2_conversion_times)])[1] AS step_2_average_conversion_time,
         arrayMap(x -> if(isNaN(x), NULL, x), [medianArrayOrNull(step_1_conversion_times)])[1] AS step_1_median_conversion_time,
         arrayMap(x -> if(isNaN(x), NULL, x), [medianArrayOrNull(step_2_conversion_times)])[1] AS step_2_median_conversion_time,
         groupArray(row_number) AS row_number,
         final_prop AS final_prop
  FROM
    (SELECT countIf(ifNull(ifNull(equals(step_reached, 0), 0), 0)) AS step_1,
            countIf(ifNull(ifNull(equals(step_reached, 1), 0), 0)) AS step_2,
            countIf(ifNull(ifNull(equals(step_reached, 2), 0), 0)) AS step_3,
            groupArrayIf(timings[1], ifNull(greater(timings[1], 0), 0)) AS step_1_conversion_times,
            groupArrayIf(timings[2], ifNull(greater(timings[2], 0), 0)) AS step_2_conversion_times,
            rowNumberInAllBlocks() AS row_number,
            if(ifNull(less(row_number, 25), 0), breakdown, 'Other') AS final_prop
     FROM
       (SELECT arraySort(t -> t.1, groupArray(tuple(accurateCastOrNull(timestamp, 'Float64'), uuid, prop, arrayFilter(x -> ifNull(notEquals(x, 0), 1), [multiply(1, step_0), multiply(2, step_1), multiply(3, step_2)])))) AS events_array,
               arrayJoin(aggregate_funnel_v4(3, 1209600, 'first_touch', 'strict', groupUniqArray(prop), arrayFilter((x, x_before, x_after) -> not(and(ifNull(lessOrEquals(length(x.4), 1), 0), ifNull(equals(x.4, x_before.4), isNull(x.4)
                                                                                                                                                                                                      and isNull(x_before.4)), ifNull(equals(x.4, x_after.4), isNull(x.4)
                                                                                                                                                                                                                                      and isNull(x_after.4)), ifNull(equals(x.3, x_before.3), isNull(x.3)
                                                                                                                                                                                                                                                                     and isNull(x_before.3)), ifNull(equals(x.3, x_after.3), isNull(x.3)
                                                                                                                                                                                                                                                                                                     and isNull(x_after.3)), ifNull(greater(x.1, x_before.1), 0), ifNull(less(x.1, x_after.1), 0))), events_array, arrayRotateRight(events_array, 1), arrayRotateLeft(events_array, 1)))) AS af_tuple,
               af_tuple.1 AS step_reached,
               plus(af_tuple.1, 1) AS steps,
               af_tuple.2 AS breakdown,
               af_tuple.3 AS timings,
               aggregation_target AS aggregation_target
        FROM
          (SELECT timestamp AS timestamp,
                  aggregation_target AS aggregation_target,
                  uuid AS uuid,
                          `$session_id` AS `$session_id`,
                          `$window_id` AS `$window_id`,
                          step_0 AS step_0,
                          step_1 AS step_1,
                          step_2 AS step_2,
                          prop_basic AS prop_basic,
                          prop,
                          prop_vals AS prop_vals,
                          prop_vals AS prop
           FROM
             (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                     e.`$group_0` AS aggregation_target,
                     e.uuid AS uuid,
                     e.`$session_id` AS `$session_id`,
                     e.`$window_id` AS `$window_id`,
                     if(equals(e.event, 'sign up'), 1, 0) AS step_0,
                     if(equals(e.event, 'play movie'), 1, 0) AS step_1,
                     if(equals(e.event, 'buy'), 1, 0) AS step_2,
                     ifNull(toString(e__group_0.properties___industry), '') AS prop_basic,
                     prop_basic AS prop,
                     argMinIf(prop, timestamp, isNotNull(prop)) OVER (PARTITION BY aggregation_target) AS prop_vals
              FROM events AS e
              LEFT JOIN
                (SELECT argMax(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(groups.group_properties, 'industry'), ''), 'null'), '^"|"$', ''), toTimeZone(groups._timestamp, 'UTC')) AS properties___industry,
                        groups.group_type_index AS index,
                        groups.group_key AS key
                 FROM groups
                 WHERE and(equals(groups.team_id, 99999), equals(index, 0))
                 GROUP BY groups.group_type_index,
                          groups.group_key) AS e__group_0 ON equals(e.`$group_0`, e__group_0.key)
              WHERE and(equals(e.team_id, 99999), and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-08 23:59:59.999999', 6, 'UTC'))))))
        GROUP BY aggregation_target
        HAVING ifNull(greaterOrEquals(step_reached, 0), 0))
     GROUP BY breakdown
     ORDER BY step_3 DESC, step_2 DESC, step_1 DESC)
  GROUP BY final_prop
  LIMIT 26 SETTINGS join_algorithm='auto',
                    readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=4000000,
                    max_expanded_ast_elements=4000000,
                    max_bytes_before_external_group_by=23622320128,
                    allow_experimental_analyzer=1
  '''
# ---
# name: TestStrictFunnelGroupBreakdownUDF.test_funnel_breakdown_group
  '''
  SELECT sum(step_1) AS step_1,
         sum(step_2) AS step_2,
         sum(step_3) AS step_3,
         arrayMap(x -> if(isNaN(x), NULL, x), [avgArrayOrNull(step_1_conversion_times)])[1] AS step_1_average_conversion_time,
         arrayMap(x -> if(isNaN(x), NULL, x), [avgArrayOrNull(step_2_conversion_times)])[1] AS step_2_average_conversion_time,
         arrayMap(x -> if(isNaN(x), NULL, x), [medianArrayOrNull(step_1_conversion_times)])[1] AS step_1_median_conversion_time,
         arrayMap(x -> if(isNaN(x), NULL, x), [medianArrayOrNull(step_2_conversion_times)])[1] AS step_2_median_conversion_time,
         groupArray(row_number) AS row_number,
         final_prop AS final_prop
  FROM
    (SELECT countIf(ifNull(ifNull(equals(step_reached, 0), 0), 0)) AS step_1,
            countIf(ifNull(ifNull(equals(step_reached, 1), 0), 0)) AS step_2,
            countIf(ifNull(ifNull(equals(step_reached, 2), 0), 0)) AS step_3,
            groupArrayIf(timings[1], ifNull(greater(timings[1], 0), 0)) AS step_1_conversion_times,
            groupArrayIf(timings[2], ifNull(greater(timings[2], 0), 0)) AS step_2_conversion_times,
            rowNumberInAllBlocks() AS row_number,
            if(ifNull(less(row_number, 25), 0), breakdown, 'Other') AS final_prop
     FROM
       (SELECT arraySort(t -> t.1, groupArray(tuple(accurateCastOrNull(timestamp, 'Float64'), uuid, prop, arrayFilter(x -> ifNull(notEquals(x, 0), 1), [multiply(1, step_0), multiply(2, step_1), multiply(3, step_2)])))) AS events_array,
               arrayJoin(aggregate_funnel_v4(3, 1209600, 'first_touch', 'strict', groupUniqArray(prop), arrayFilter((x, x_before, x_after) -> not(and(ifNull(lessOrEquals(length(x.4), 1), 0), ifNull(equals(x.4, x_before.4), isNull(x.4)
                                                                                                                                                                                                      and isNull(x_before.4)), ifNull(equals(x.4, x_after.4), isNull(x.4)
                                                                                                                                                                                                                                      and isNull(x_after.4)), ifNull(equals(x.3, x_before.3), isNull(x.3)
                                                                                                                                                                                                                                                                     and isNull(x_before.3)), ifNull(equals(x.3, x_after.3), isNull(x.3)
                                                                                                                                                                                                                                                                                                     and isNull(x_after.3)), ifNull(greater(x.1, x_before.1), 0), ifNull(less(x.1, x_after.1), 0))), events_array, arrayRotateRight(events_array, 1), arrayRotateLeft(events_array, 1)))) AS af_tuple,
               af_tuple.1 AS step_reached,
               plus(af_tuple.1, 1) AS steps,
               af_tuple.2 AS breakdown,
               af_tuple.3 AS timings,
               aggregation_target AS aggregation_target
        FROM
          (SELECT timestamp AS timestamp,
                  aggregation_target AS aggregation_target,
                  uuid AS uuid,
                          `$session_id` AS `$session_id`,
                          `$window_id` AS `$window_id`,
                          step_0 AS step_0,
                          step_1 AS step_1,
                          step_2 AS step_2,
                          prop_basic AS prop_basic,
                          prop,
                          prop_vals AS prop_vals,
                          prop_vals AS prop
           FROM
             (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                     if(not(empty(e__override.distinct_id)), e__override.person_id, e.person_id) AS aggregation_target,
                     e.uuid AS uuid,
                     e.`$session_id` AS `$session_id`,
                     e.`$window_id` AS `$window_id`,
                     if(equals(e.event, 'sign up'), 1, 0) AS step_0,
                     if(equals(e.event, 'play movie'), 1, 0) AS step_1,
                     if(equals(e.event, 'buy'), 1, 0) AS step_2,
                     ifNull(toString(e__group_0.properties___industry), '') AS prop_basic,
                     prop_basic AS prop,
                     argMinIf(prop, timestamp, isNotNull(prop)) OVER (PARTITION BY aggregation_target) AS prop_vals
              FROM events AS e
              LEFT OUTER JOIN
                (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                        person_distinct_id_overrides.distinct_id AS distinct_id
                 FROM person_distinct_id_overrides
                 WHERE equals(person_distinct_id_overrides.team_id, 99999)
                 GROUP BY person_distinct_id_overrides.distinct_id
                 HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS e__override ON equals(e.distinct_id, e__override.distinct_id)
              LEFT JOIN
                (SELECT argMax(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(groups.group_properties, 'industry'), ''), 'null'), '^"|"$', ''), toTimeZone(groups._timestamp, 'UTC')) AS properties___industry,
                        groups.group_type_index AS index,
                        groups.group_key AS key
                 FROM groups
                 WHERE and(equals(groups.team_id, 99999), equals(index, 0))
                 GROUP BY groups.group_type_index,
                          groups.group_key) AS e__group_0 ON equals(e.`$group_0`, e__group_0.key)
              WHERE and(equals(e.team_id, 99999), and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-08 23:59:59.999999', 6, 'UTC'))))))
        GROUP BY aggregation_target
        HAVING ifNull(greaterOrEquals(step_reached, 0), 0))
     GROUP BY breakdown
     ORDER BY step_3 DESC, step_2 DESC, step_1 DESC)
  GROUP BY final_prop
  LIMIT 26 SETTINGS join_algorithm='auto',
                    readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=4000000,
                    max_expanded_ast_elements=4000000,
                    max_bytes_before_external_group_by=23622320128,
                    allow_experimental_analyzer=1
  '''
# ---
# name: TestStrictFunnelGroupBreakdownUDF.test_funnel_breakdown_group.1
  '''
  SELECT source.id,
         source.id AS id
  FROM
    (SELECT aggregation_target AS actor_id,
            actor_id AS id
     FROM
       (SELECT arraySort(t -> t.1, groupArray(tuple(accurateCastOrNull(timestamp, 'Float64'), uuid, prop, arrayFilter(x -> ifNull(notEquals(x, 0), 1), [multiply(1, step_0), multiply(2, step_1), multiply(3, step_2)])))) AS events_array,
               arrayJoin(aggregate_funnel_v4(3, 1209600, 'first_touch', 'strict', groupUniqArray(prop), arrayFilter((x, x_before, x_after) -> not(and(ifNull(lessOrEquals(length(x.4), 1), 0), ifNull(equals(x.4, x_before.4), isNull(x.4)
                                                                                                                                                                                                      and isNull(x_before.4)), ifNull(equals(x.4, x_after.4), isNull(x.4)
                                                                                                                                                                                                                                      and isNull(x_after.4)), ifNull(equals(x.3, x_before.3), isNull(x.3)
                                                                                                                                                                                                                                                                     and isNull(x_before.3)), ifNull(equals(x.3, x_after.3), isNull(x.3)
                                                                                                                                                                                                                                                                                                     and isNull(x_after.3)), ifNull(greater(x.1, x_before.1), 0), ifNull(less(x.1, x_after.1), 0))), events_array, arrayRotateRight(events_array, 1), arrayRotateLeft(events_array, 1)))) AS af_tuple,
               af_tuple.1 AS step_reached,
               plus(af_tuple.1, 1) AS steps,
               af_tuple.2 AS breakdown,
               af_tuple.3 AS timings,
               aggregation_target AS aggregation_target
        FROM
          (SELECT timestamp AS timestamp,
                  aggregation_target AS aggregation_target,
                  uuid AS uuid,
                          `$session_id` AS `$session_id`,
                          `$window_id` AS `$window_id`,
                          step_0 AS step_0,
                          step_1 AS step_1,
                          step_2 AS step_2,
                          prop_basic AS prop_basic,
                          prop,
                          prop_vals AS prop_vals,
                          prop_vals AS prop
           FROM
             (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                     if(not(empty(e__override.distinct_id)), e__override.person_id, e.person_id) AS aggregation_target,
                     e.uuid AS uuid,
                     e.`$session_id` AS `$session_id`,
                     e.`$window_id` AS `$window_id`,
                     if(equals(e.event, 'sign up'), 1, 0) AS step_0,
                     if(equals(e.event, 'play movie'), 1, 0) AS step_1,
                     if(equals(e.event, 'buy'), 1, 0) AS step_2,
                     ifNull(toString(e__group_0.properties___industry), '') AS prop_basic,
                     prop_basic AS prop,
                     argMinIf(prop, timestamp, isNotNull(prop)) OVER (PARTITION BY aggregation_target) AS prop_vals
              FROM events AS e
              LEFT OUTER JOIN
                (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                        person_distinct_id_overrides.distinct_id AS distinct_id
                 FROM person_distinct_id_overrides
                 WHERE equals(person_distinct_id_overrides.team_id, 99999)
                 GROUP BY person_distinct_id_overrides.distinct_id
                 HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS e__override ON equals(e.distinct_id, e__override.distinct_id)
              LEFT JOIN
                (SELECT argMax(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(groups.group_properties, 'industry'), ''), 'null'), '^"|"$', ''), toTimeZone(groups._timestamp, 'UTC')) AS properties___industry,
                        groups.group_type_index AS index,
                        groups.group_key AS key
                 FROM groups
                 WHERE and(equals(groups.team_id, 99999), equals(index, 0))
                 GROUP BY groups.group_type_index,
                          groups.group_key) AS e__group_0 ON equals(e.`$group_0`, e__group_0.key)
              WHERE and(equals(e.team_id, 99999), and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-08 23:59:59.999999', 6, 'UTC'))))))
        GROUP BY aggregation_target
        HAVING ifNull(greaterOrEquals(step_reached, 0), 0))
     WHERE and(ifNull(greaterOrEquals(step_reached, 0), 0), ifNull(equals(arrayFlatten(array(breakdown)), arrayFlatten(array('finance'))), isNull(arrayFlatten(array(breakdown)))
                                                                   and isNull(arrayFlatten(array('finance')))))
     ORDER BY aggregation_target ASC SETTINGS join_algorithm='auto') AS source
  ORDER BY source.id ASC
  LIMIT 101
  OFFSET 0 SETTINGS optimize_aggregation_in_order=1,
                    join_algorithm='auto',
                    readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=4000000,
                    max_expanded_ast_elements=4000000,
                    max_bytes_before_external_group_by=0,
                    allow_experimental_analyzer=1
  '''
# ---
# name: TestStrictFunnelGroupBreakdownUDF.test_funnel_breakdown_group.2
  '''
  SELECT source.id,
         source.id AS id
  FROM
    (SELECT aggregation_target AS actor_id,
            actor_id AS id
     FROM
       (SELECT arraySort(t -> t.1, groupArray(tuple(accurateCastOrNull(timestamp, 'Float64'), uuid, prop, arrayFilter(x -> ifNull(notEquals(x, 0), 1), [multiply(1, step_0), multiply(2, step_1), multiply(3, step_2)])))) AS events_array,
               arrayJoin(aggregate_funnel_v4(3, 1209600, 'first_touch', 'strict', groupUniqArray(prop), arrayFilter((x, x_before, x_after) -> not(and(ifNull(lessOrEquals(length(x.4), 1), 0), ifNull(equals(x.4, x_before.4), isNull(x.4)
                                                                                                                                                                                                      and isNull(x_before.4)), ifNull(equals(x.4, x_after.4), isNull(x.4)
                                                                                                                                                                                                                                      and isNull(x_after.4)), ifNull(equals(x.3, x_before.3), isNull(x.3)
                                                                                                                                                                                                                                                                     and isNull(x_before.3)), ifNull(equals(x.3, x_after.3), isNull(x.3)
                                                                                                                                                                                                                                                                                                     and isNull(x_after.3)), ifNull(greater(x.1, x_before.1), 0), ifNull(less(x.1, x_after.1), 0))), events_array, arrayRotateRight(events_array, 1), arrayRotateLeft(events_array, 1)))) AS af_tuple,
               af_tuple.1 AS step_reached,
               plus(af_tuple.1, 1) AS steps,
               af_tuple.2 AS breakdown,
               af_tuple.3 AS timings,
               aggregation_target AS aggregation_target
        FROM
          (SELECT timestamp AS timestamp,
                  aggregation_target AS aggregation_target,
                  uuid AS uuid,
                          `$session_id` AS `$session_id`,
                          `$window_id` AS `$window_id`,
                          step_0 AS step_0,
                          step_1 AS step_1,
                          step_2 AS step_2,
                          prop_basic AS prop_basic,
                          prop,
                          prop_vals AS prop_vals,
                          prop_vals AS prop
           FROM
             (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                     if(not(empty(e__override.distinct_id)), e__override.person_id, e.person_id) AS aggregation_target,
                     e.uuid AS uuid,
                     e.`$session_id` AS `$session_id`,
                     e.`$window_id` AS `$window_id`,
                     if(equals(e.event, 'sign up'), 1, 0) AS step_0,
                     if(equals(e.event, 'play movie'), 1, 0) AS step_1,
                     if(equals(e.event, 'buy'), 1, 0) AS step_2,
                     ifNull(toString(e__group_0.properties___industry), '') AS prop_basic,
                     prop_basic AS prop,
                     argMinIf(prop, timestamp, isNotNull(prop)) OVER (PARTITION BY aggregation_target) AS prop_vals
              FROM events AS e
              LEFT OUTER JOIN
                (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                        person_distinct_id_overrides.distinct_id AS distinct_id
                 FROM person_distinct_id_overrides
                 WHERE equals(person_distinct_id_overrides.team_id, 99999)
                 GROUP BY person_distinct_id_overrides.distinct_id
                 HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS e__override ON equals(e.distinct_id, e__override.distinct_id)
              LEFT JOIN
                (SELECT argMax(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(groups.group_properties, 'industry'), ''), 'null'), '^"|"$', ''), toTimeZone(groups._timestamp, 'UTC')) AS properties___industry,
                        groups.group_type_index AS index,
                        groups.group_key AS key
                 FROM groups
                 WHERE and(equals(groups.team_id, 99999), equals(index, 0))
                 GROUP BY groups.group_type_index,
                          groups.group_key) AS e__group_0 ON equals(e.`$group_0`, e__group_0.key)
              WHERE and(equals(e.team_id, 99999), and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-08 23:59:59.999999', 6, 'UTC'))))))
        GROUP BY aggregation_target
        HAVING ifNull(greaterOrEquals(step_reached, 0), 0))
     WHERE and(ifNull(greaterOrEquals(step_reached, 1), 0), ifNull(equals(arrayFlatten(array(breakdown)), arrayFlatten(array('finance'))), isNull(arrayFlatten(array(breakdown)))
                                                                   and isNull(arrayFlatten(array('finance')))))
     ORDER BY aggregation_target ASC SETTINGS join_algorithm='auto') AS source
  ORDER BY source.id ASC
  LIMIT 101
  OFFSET 0 SETTINGS optimize_aggregation_in_order=1,
                    join_algorithm='auto',
                    readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=4000000,
                    max_expanded_ast_elements=4000000,
                    max_bytes_before_external_group_by=0,
                    allow_experimental_analyzer=1
  '''
# ---
# name: TestStrictFunnelGroupBreakdownUDF.test_funnel_breakdown_group.3
  '''
  SELECT source.id,
         source.id AS id
  FROM
    (SELECT aggregation_target AS actor_id,
            actor_id AS id
     FROM
       (SELECT arraySort(t -> t.1, groupArray(tuple(accurateCastOrNull(timestamp, 'Float64'), uuid, prop, arrayFilter(x -> ifNull(notEquals(x, 0), 1), [multiply(1, step_0), multiply(2, step_1), multiply(3, step_2)])))) AS events_array,
               arrayJoin(aggregate_funnel_v4(3, 1209600, 'first_touch', 'strict', groupUniqArray(prop), arrayFilter((x, x_before, x_after) -> not(and(ifNull(lessOrEquals(length(x.4), 1), 0), ifNull(equals(x.4, x_before.4), isNull(x.4)
                                                                                                                                                                                                      and isNull(x_before.4)), ifNull(equals(x.4, x_after.4), isNull(x.4)
                                                                                                                                                                                                                                      and isNull(x_after.4)), ifNull(equals(x.3, x_before.3), isNull(x.3)
                                                                                                                                                                                                                                                                     and isNull(x_before.3)), ifNull(equals(x.3, x_after.3), isNull(x.3)
                                                                                                                                                                                                                                                                                                     and isNull(x_after.3)), ifNull(greater(x.1, x_before.1), 0), ifNull(less(x.1, x_after.1), 0))), events_array, arrayRotateRight(events_array, 1), arrayRotateLeft(events_array, 1)))) AS af_tuple,
               af_tuple.1 AS step_reached,
               plus(af_tuple.1, 1) AS steps,
               af_tuple.2 AS breakdown,
               af_tuple.3 AS timings,
               aggregation_target AS aggregation_target
        FROM
          (SELECT timestamp AS timestamp,
                  aggregation_target AS aggregation_target,
                  uuid AS uuid,
                          `$session_id` AS `$session_id`,
                          `$window_id` AS `$window_id`,
                          step_0 AS step_0,
                          step_1 AS step_1,
                          step_2 AS step_2,
                          prop_basic AS prop_basic,
                          prop,
                          prop_vals AS prop_vals,
                          prop_vals AS prop
           FROM
             (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                     if(not(empty(e__override.distinct_id)), e__override.person_id, e.person_id) AS aggregation_target,
                     e.uuid AS uuid,
                     e.`$session_id` AS `$session_id`,
                     e.`$window_id` AS `$window_id`,
                     if(equals(e.event, 'sign up'), 1, 0) AS step_0,
                     if(equals(e.event, 'play movie'), 1, 0) AS step_1,
                     if(equals(e.event, 'buy'), 1, 0) AS step_2,
                     ifNull(toString(e__group_0.properties___industry), '') AS prop_basic,
                     prop_basic AS prop,
                     argMinIf(prop, timestamp, isNotNull(prop)) OVER (PARTITION BY aggregation_target) AS prop_vals
              FROM events AS e
              LEFT OUTER JOIN
                (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                        person_distinct_id_overrides.distinct_id AS distinct_id
                 FROM person_distinct_id_overrides
                 WHERE equals(person_distinct_id_overrides.team_id, 99999)
                 GROUP BY person_distinct_id_overrides.distinct_id
                 HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS e__override ON equals(e.distinct_id, e__override.distinct_id)
              LEFT JOIN
                (SELECT argMax(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(groups.group_properties, 'industry'), ''), 'null'), '^"|"$', ''), toTimeZone(groups._timestamp, 'UTC')) AS properties___industry,
                        groups.group_type_index AS index,
                        groups.group_key AS key
                 FROM groups
                 WHERE and(equals(groups.team_id, 99999), equals(index, 0))
                 GROUP BY groups.group_type_index,
                          groups.group_key) AS e__group_0 ON equals(e.`$group_0`, e__group_0.key)
              WHERE and(equals(e.team_id, 99999), and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-08 23:59:59.999999', 6, 'UTC'))))))
        GROUP BY aggregation_target
        HAVING ifNull(greaterOrEquals(step_reached, 0), 0))
     WHERE and(ifNull(greaterOrEquals(step_reached, 0), 0), ifNull(equals(arrayFlatten(array(breakdown)), arrayFlatten(array('technology'))), isNull(arrayFlatten(array(breakdown)))
                                                                   and isNull(arrayFlatten(array('technology')))))
     ORDER BY aggregation_target ASC SETTINGS join_algorithm='auto') AS source
  ORDER BY source.id ASC
  LIMIT 101
  OFFSET 0 SETTINGS optimize_aggregation_in_order=1,
                    join_algorithm='auto',
                    readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=4000000,
                    max_expanded_ast_elements=4000000,
                    max_bytes_before_external_group_by=0,
                    allow_experimental_analyzer=1
  '''
# ---
# name: TestStrictFunnelGroupBreakdownUDF.test_funnel_breakdown_group.4
  '''
  SELECT source.id,
         source.id AS id
  FROM
    (SELECT aggregation_target AS actor_id,
            actor_id AS id
     FROM
       (SELECT arraySort(t -> t.1, groupArray(tuple(accurateCastOrNull(timestamp, 'Float64'), uuid, prop, arrayFilter(x -> ifNull(notEquals(x, 0), 1), [multiply(1, step_0), multiply(2, step_1), multiply(3, step_2)])))) AS events_array,
               arrayJoin(aggregate_funnel_v4(3, 1209600, 'first_touch', 'strict', groupUniqArray(prop), arrayFilter((x, x_before, x_after) -> not(and(ifNull(lessOrEquals(length(x.4), 1), 0), ifNull(equals(x.4, x_before.4), isNull(x.4)
                                                                                                                                                                                                      and isNull(x_before.4)), ifNull(equals(x.4, x_after.4), isNull(x.4)
                                                                                                                                                                                                                                      and isNull(x_after.4)), ifNull(equals(x.3, x_before.3), isNull(x.3)
                                                                                                                                                                                                                                                                     and isNull(x_before.3)), ifNull(equals(x.3, x_after.3), isNull(x.3)
                                                                                                                                                                                                                                                                                                     and isNull(x_after.3)), ifNull(greater(x.1, x_before.1), 0), ifNull(less(x.1, x_after.1), 0))), events_array, arrayRotateRight(events_array, 1), arrayRotateLeft(events_array, 1)))) AS af_tuple,
               af_tuple.1 AS step_reached,
               plus(af_tuple.1, 1) AS steps,
               af_tuple.2 AS breakdown,
               af_tuple.3 AS timings,
               aggregation_target AS aggregation_target
        FROM
          (SELECT timestamp AS timestamp,
                  aggregation_target AS aggregation_target,
                  uuid AS uuid,
                          `$session_id` AS `$session_id`,
                          `$window_id` AS `$window_id`,
                          step_0 AS step_0,
                          step_1 AS step_1,
                          step_2 AS step_2,
                          prop_basic AS prop_basic,
                          prop,
                          prop_vals AS prop_vals,
                          prop_vals AS prop
           FROM
             (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                     if(not(empty(e__override.distinct_id)), e__override.person_id, e.person_id) AS aggregation_target,
                     e.uuid AS uuid,
                     e.`$session_id` AS `$session_id`,
                     e.`$window_id` AS `$window_id`,
                     if(equals(e.event, 'sign up'), 1, 0) AS step_0,
                     if(equals(e.event, 'play movie'), 1, 0) AS step_1,
                     if(equals(e.event, 'buy'), 1, 0) AS step_2,
                     ifNull(toString(e__group_0.properties___industry), '') AS prop_basic,
                     prop_basic AS prop,
                     argMinIf(prop, timestamp, isNotNull(prop)) OVER (PARTITION BY aggregation_target) AS prop_vals
              FROM events AS e
              LEFT OUTER JOIN
                (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                        person_distinct_id_overrides.distinct_id AS distinct_id
                 FROM person_distinct_id_overrides
                 WHERE equals(person_distinct_id_overrides.team_id, 99999)
                 GROUP BY person_distinct_id_overrides.distinct_id
                 HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS e__override ON equals(e.distinct_id, e__override.distinct_id)
              LEFT JOIN
                (SELECT argMax(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(groups.group_properties, 'industry'), ''), 'null'), '^"|"$', ''), toTimeZone(groups._timestamp, 'UTC')) AS properties___industry,
                        groups.group_type_index AS index,
                        groups.group_key AS key
                 FROM groups
                 WHERE and(equals(groups.team_id, 99999), equals(index, 0))
                 GROUP BY groups.group_type_index,
                          groups.group_key) AS e__group_0 ON equals(e.`$group_0`, e__group_0.key)
              WHERE and(equals(e.team_id, 99999), and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-08 23:59:59.999999', 6, 'UTC'))))))
        GROUP BY aggregation_target
        HAVING ifNull(greaterOrEquals(step_reached, 0), 0))
     WHERE and(ifNull(greaterOrEquals(step_reached, 1), 0), ifNull(equals(arrayFlatten(array(breakdown)), arrayFlatten(array('technology'))), isNull(arrayFlatten(array(breakdown)))
                                                                   and isNull(arrayFlatten(array('technology')))))
     ORDER BY aggregation_target ASC SETTINGS join_algorithm='auto') AS source
  ORDER BY source.id ASC
  LIMIT 101
  OFFSET 0 SETTINGS optimize_aggregation_in_order=1,
                    join_algorithm='auto',
                    readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=4000000,
                    max_expanded_ast_elements=4000000,
                    max_bytes_before_external_group_by=0,
                    allow_experimental_analyzer=1
  '''
# ---
