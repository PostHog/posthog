# serializer version: 1
# name: TestFunnelTrendsUDF.test_timezones_trends
  '''
  SELECT fill.entrance_period_start AS entrance_period_start,
         countIf(ifNull(notEquals(data.success_bool, 0), 1)) AS reached_from_step_count,
         countIf(ifNull(equals(data.success_bool, 1), 0)) AS reached_to_step_count,
         if(ifNull(greater(reached_from_step_count, 0), 0), round(multiply(divide(reached_to_step_count, reached_from_step_count), 100), 2), 0) AS conversion_rate,
         data.breakdown AS prop
  FROM
    (SELECT arrayJoin(aggregate_funnel_array_trends_v0(0, 3, 1209600, 'first_touch', 'ordered', [[]], arraySort(t -> t.1, groupArray(tuple(accurateCastOrNull(timestamp, 'Float64'), toUInt64(toTimeZone(toDateTime(toStartOfDay(timestamp), 'UTC'), 'UTC')), [], arrayFilter(x -> ifNull(notEquals(x, 0), 1), [multiply(1, step_0), multiply(2, step_1), multiply(3, step_2)])))))) AS af_tuple,
            toTimeZone(toDateTime(toUInt64(af_tuple.1), 'UTC'), 'UTC') AS entrance_period_start,
            af_tuple.2 AS success_bool,
            af_tuple.3 AS breakdown
     FROM
       (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
               if(not(empty(e__override.distinct_id)), e__override.person_id, e.person_id) AS aggregation_target,
               if(equals(e.event, 'step one'), 1, 0) AS step_0,
               if(equals(e.event, 'step two'), 1, 0) AS step_1,
               if(equals(e.event, 'step three'), 1, 0) AS step_2
        FROM events AS e
        LEFT OUTER JOIN
          (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                  person_distinct_id_overrides.distinct_id AS distinct_id
           FROM person_distinct_id_overrides
           WHERE equals(person_distinct_id_overrides.team_id, 2)
           GROUP BY person_distinct_id_overrides.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS e__override ON equals(e.distinct_id, e__override.distinct_id)
        WHERE and(equals(e.team_id, 2), and(and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2021-04-30 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2021-05-07 23:59:59.999999', 6, 'UTC'))), in(e.event, tuple('step one', 'step three', 'step two'))), or(ifNull(equals(step_0, 1), 0), ifNull(equals(step_1, 1), 0), ifNull(equals(step_2, 1), 0))))
     GROUP BY aggregation_target SETTINGS date_time_output_format='iso',
                                          date_time_input_format='best_effort') AS data
  RIGHT OUTER JOIN
    (SELECT plus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull(('2021-04-30 00:00:00'), 6, 'UTC'))), toIntervalDay(period_offsets.number)) AS entrance_period_start
     FROM numbers(plus(dateDiff('day', toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull(('2021-04-30 00:00:00'), 6, 'UTC'))), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull(('2021-05-07 23:59:59'), 6, 'UTC')))), 1)) AS period_offsets) AS fill ON equals(data.entrance_period_start, fill.entrance_period_start)
  GROUP BY entrance_period_start,
           data.breakdown
  ORDER BY entrance_period_start ASC
  LIMIT 1000 SETTINGS readonly=2,
                      max_execution_time=60,
                      allow_experimental_object_type=1,
                      format_csv_allow_double_quotes=0,
                      max_ast_elements=4000000,
                      max_expanded_ast_elements=4000000,
                      max_bytes_before_external_group_by=23622320128,
                      allow_experimental_analyzer=1
  '''
# ---
# name: TestFunnelTrendsUDF.test_timezones_trends.1
  '''
  SELECT fill.entrance_period_start AS entrance_period_start,
         countIf(ifNull(notEquals(data.success_bool, 0), 1)) AS reached_from_step_count,
         countIf(ifNull(equals(data.success_bool, 1), 0)) AS reached_to_step_count,
         if(ifNull(greater(reached_from_step_count, 0), 0), round(multiply(divide(reached_to_step_count, reached_from_step_count), 100), 2), 0) AS conversion_rate,
         data.breakdown AS prop
  FROM
    (SELECT arrayJoin(aggregate_funnel_array_trends_v0(0, 3, 1209600, 'first_touch', 'ordered', [[]], arraySort(t -> t.1, groupArray(tuple(accurateCastOrNull(timestamp, 'Float64'), toUInt64(toTimeZone(toDateTime(toStartOfDay(timestamp), 'US/Pacific'), 'UTC')), [], arrayFilter(x -> ifNull(notEquals(x, 0), 1), [multiply(1, step_0), multiply(2, step_1), multiply(3, step_2)])))))) AS af_tuple,
            toTimeZone(toDateTime(toUInt64(af_tuple.1), 'US/Pacific'), 'US/Pacific') AS entrance_period_start,
            af_tuple.2 AS success_bool,
            af_tuple.3 AS breakdown
     FROM
       (SELECT toTimeZone(e.timestamp, 'US/Pacific') AS timestamp,
               if(not(empty(e__override.distinct_id)), e__override.person_id, e.person_id) AS aggregation_target,
               if(equals(e.event, 'step one'), 1, 0) AS step_0,
               if(equals(e.event, 'step two'), 1, 0) AS step_1,
               if(equals(e.event, 'step three'), 1, 0) AS step_2
        FROM events AS e
        LEFT OUTER JOIN
          (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                  person_distinct_id_overrides.distinct_id AS distinct_id
           FROM person_distinct_id_overrides
           WHERE equals(person_distinct_id_overrides.team_id, 2)
           GROUP BY person_distinct_id_overrides.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS e__override ON equals(e.distinct_id, e__override.distinct_id)
        WHERE and(equals(e.team_id, 2), and(and(greaterOrEquals(toTimeZone(e.timestamp, 'US/Pacific'), toDateTime64('2021-04-30 00:00:00.000000', 6, 'US/Pacific')), lessOrEquals(toTimeZone(e.timestamp, 'US/Pacific'), toDateTime64('2021-05-07 23:59:59.999999', 6, 'US/Pacific'))), in(e.event, tuple('step one', 'step three', 'step two'))), or(ifNull(equals(step_0, 1), 0), ifNull(equals(step_1, 1), 0), ifNull(equals(step_2, 1), 0))))
     GROUP BY aggregation_target SETTINGS date_time_output_format='iso',
                                          date_time_input_format='best_effort') AS data
  RIGHT OUTER JOIN
    (SELECT plus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull(('2021-04-30 00:00:00'), 6, 'US/Pacific'))), toIntervalDay(period_offsets.number)) AS entrance_period_start
     FROM numbers(plus(dateDiff('day', toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull(('2021-04-30 00:00:00'), 6, 'US/Pacific'))), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull(('2021-05-07 23:59:59'), 6, 'US/Pacific')))), 1)) AS period_offsets) AS fill ON equals(data.entrance_period_start, fill.entrance_period_start)
  GROUP BY entrance_period_start,
           data.breakdown
  ORDER BY entrance_period_start ASC
  LIMIT 1000 SETTINGS readonly=2,
                      max_execution_time=60,
                      allow_experimental_object_type=1,
                      format_csv_allow_double_quotes=0,
                      max_ast_elements=4000000,
                      max_expanded_ast_elements=4000000,
                      max_bytes_before_external_group_by=23622320128,
                      allow_experimental_analyzer=1
  '''
# ---
