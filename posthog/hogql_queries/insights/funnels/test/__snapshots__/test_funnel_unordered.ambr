# serializer version: 1
# name: TestFunnelUnorderedStepsBreakdown.test_funnel_breakdown_correct_breakdown_props_are_chosen
  '''
  SELECT sum(step_1) AS step_1,
         sum(step_2) AS step_2,
         if(isNaN(avgArrayOrNull(step_1_conversion_time_array) AS inter_1_conversion), NULL, inter_1_conversion) AS step_1_average_conversion_time,
         if(isNaN(medianArrayOrNull(step_1_conversion_time_array) AS inter_1_median), NULL, inter_1_median) AS step_1_median_conversion_time,
         if(ifNull(less(row_number, 26), 0), prop, ['Other']) AS final_prop
  FROM
    (SELECT countIf(ifNull(equals(steps, 1), 0)) AS step_1,
            countIf(ifNull(equals(steps, 2), 0)) AS step_2,
            groupArray(step_1_conversion_time) AS step_1_conversion_time_array,
            prop AS prop,
            row_number() OVER (
                               ORDER BY step_2 DESC) AS row_number
     FROM
       (SELECT aggregation_target AS aggregation_target,
               steps AS steps,
               prop AS prop,
               prop AS prop,
               min(step_1_conversion_time) AS step_1_conversion_time
        FROM
          (SELECT aggregation_target AS aggregation_target,
                  steps AS steps,
                  prop AS prop,
                  max(steps) OVER (PARTITION BY aggregation_target,
                                                prop) AS max_steps,
                                  step_1_conversion_time AS step_1_conversion_time,
                                  prop AS prop
           FROM
             (SELECT aggregation_target AS aggregation_target,
                     timestamp AS timestamp,
                     step_0 AS step_0,
                     latest_0 AS latest_0,
                     step_1 AS step_1,
                     latest_1 AS latest_1,
                     prop AS prop,
                     arraySort([latest_0, latest_1]) AS event_times,
                     arraySum([if(and(ifNull(less(latest_0, latest_1), 0), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), 1, 0), 1]) AS steps,
                     arraySort([latest_0, latest_1]) AS conversion_times,
                     if(and(isNotNull(conversion_times[2]), ifNull(lessOrEquals(conversion_times[2], plus(toTimeZone(conversion_times[1], 'UTC'), toIntervalDay(14))), 0)), dateDiff('second', conversion_times[1], conversion_times[2]), NULL) AS step_1_conversion_time
              FROM
                (SELECT aggregation_target AS aggregation_target,
                        timestamp AS timestamp,
                        step_0 AS step_0,
                        latest_0 AS latest_0,
                        step_1 AS step_1,
                        min(latest_1) OVER (PARTITION BY aggregation_target,
                                                         prop
                                            ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS latest_1,
                                           prop AS prop
                 FROM
                   (SELECT timestamp AS timestamp,
                           aggregation_target AS aggregation_target,
                           step_0 AS step_0,
                           latest_0 AS latest_0,
                           step_1 AS step_1,
                           latest_1 AS latest_1,
                           prop_basic AS prop_basic,
                           prop,
                           prop_vals AS prop_vals,
                           if(notEmpty(arrayFilter(x -> notEmpty(x), prop_vals)), prop_vals, ['']) AS prop
                    FROM
                      (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                              if(not(empty(e__override.distinct_id)), e__override.person_id, e.person_id) AS aggregation_target,
                              if(equals(e.event, 'sign up'), 1, 0) AS step_0,
                              if(ifNull(equals(step_0, 1), 0), timestamp, NULL) AS latest_0,
                              if(and(equals(e.event, 'buy'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$version'), ''), 'null'), '^"|"$', ''), 'xyz'), 0)), 1, 0) AS step_1,
                              if(ifNull(equals(step_1, 1), 0), timestamp, NULL) AS latest_1,
                              [ifNull(toString(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$browser'), ''), 'null'), '^"|"$', '')), '')] AS prop_basic,
                              prop_basic AS prop,
                              argMinIf(prop, timestamp, notEmpty(arrayFilter(x -> notEmpty(x), prop))) OVER (PARTITION BY aggregation_target) AS prop_vals
                       FROM events AS e
                       LEFT OUTER JOIN
                         (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                                 person_distinct_id_overrides.distinct_id AS distinct_id
                          FROM person_distinct_id_overrides
                          WHERE equals(person_distinct_id_overrides.team_id, 99999)
                          GROUP BY person_distinct_id_overrides.distinct_id
                          HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS e__override ON equals(e.distinct_id, e__override.distinct_id)
                       WHERE and(equals(e.team_id, 99999), and(and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-08 23:59:59.999999', 6, 'UTC'))), in(e.event, tuple('buy', 'sign up'))), or(ifNull(equals(step_0, 1), 0), ifNull(equals(step_1, 1), 0))))))
              WHERE ifNull(equals(step_0, 1), 0)
              UNION ALL SELECT aggregation_target AS aggregation_target,
                               timestamp AS timestamp,
                               step_0 AS step_0,
                               latest_0 AS latest_0,
                               step_1 AS step_1,
                               latest_1 AS latest_1,
                               prop AS prop,
                               arraySort([latest_0, latest_1]) AS event_times,
                               arraySum([if(and(ifNull(less(latest_0, latest_1), 0), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), 1, 0), 1]) AS steps,
                               arraySort([latest_0, latest_1]) AS conversion_times,
                               if(and(isNotNull(conversion_times[2]), ifNull(lessOrEquals(conversion_times[2], plus(toTimeZone(conversion_times[1], 'UTC'), toIntervalDay(14))), 0)), dateDiff('second', conversion_times[1], conversion_times[2]), NULL) AS step_1_conversion_time
              FROM
                (SELECT aggregation_target AS aggregation_target,
                        timestamp AS timestamp,
                        step_0 AS step_0,
                        latest_0 AS latest_0,
                        step_1 AS step_1,
                        min(latest_1) OVER (PARTITION BY aggregation_target,
                                                         prop
                                            ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS latest_1,
                                           prop AS prop
                 FROM
                   (SELECT timestamp AS timestamp,
                           aggregation_target AS aggregation_target,
                           step_0 AS step_0,
                           latest_0 AS latest_0,
                           step_1 AS step_1,
                           latest_1 AS latest_1,
                           prop_basic AS prop_basic,
                           prop,
                           prop_vals AS prop_vals,
                           if(notEmpty(arrayFilter(x -> notEmpty(x), prop_vals)), prop_vals, ['']) AS prop
                    FROM
                      (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                              if(not(empty(e__override.distinct_id)), e__override.person_id, e.person_id) AS aggregation_target,
                              if(and(equals(e.event, 'buy'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$version'), ''), 'null'), '^"|"$', ''), 'xyz'), 0)), 1, 0) AS step_0,
                              if(ifNull(equals(step_0, 1), 0), timestamp, NULL) AS latest_0,
                              if(equals(e.event, 'sign up'), 1, 0) AS step_1,
                              if(ifNull(equals(step_1, 1), 0), timestamp, NULL) AS latest_1,
                              [ifNull(toString(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$browser'), ''), 'null'), '^"|"$', '')), '')] AS prop_basic,
                              prop_basic AS prop,
                              argMinIf(prop, timestamp, notEmpty(arrayFilter(x -> notEmpty(x), prop))) OVER (PARTITION BY aggregation_target) AS prop_vals
                       FROM events AS e
                       LEFT OUTER JOIN
                         (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                                 person_distinct_id_overrides.distinct_id AS distinct_id
                          FROM person_distinct_id_overrides
                          WHERE equals(person_distinct_id_overrides.team_id, 99999)
                          GROUP BY person_distinct_id_overrides.distinct_id
                          HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS e__override ON equals(e.distinct_id, e__override.distinct_id)
                       WHERE and(equals(e.team_id, 99999), and(and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-08 23:59:59.999999', 6, 'UTC'))), in(e.event, tuple('buy', 'sign up'))), or(ifNull(equals(step_0, 1), 0), ifNull(equals(step_1, 1), 0))))))
              WHERE ifNull(equals(step_0, 1), 0)))
        GROUP BY aggregation_target,
                 steps,
                 prop
        HAVING ifNull(equals(steps, max(max_steps)), isNull(steps)
                      and isNull(max(max_steps))))
     GROUP BY prop)
  GROUP BY final_prop
  LIMIT 26 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=4000000,
                    max_expanded_ast_elements=4000000,
                    max_bytes_before_external_group_by=23622320128,
                    allow_experimental_analyzer=1
  '''
# ---
# name: TestFunnelUnorderedStepsBreakdown.test_funnel_breakdown_correct_breakdown_props_are_chosen_for_step
  '''
  SELECT sum(step_1) AS step_1,
         sum(step_2) AS step_2,
         if(isNaN(avgArrayOrNull(step_1_conversion_time_array) AS inter_1_conversion), NULL, inter_1_conversion) AS step_1_average_conversion_time,
         if(isNaN(medianArrayOrNull(step_1_conversion_time_array) AS inter_1_median), NULL, inter_1_median) AS step_1_median_conversion_time,
         if(ifNull(less(row_number, 26), 0), prop, ['Other']) AS final_prop
  FROM
    (SELECT countIf(ifNull(equals(steps, 1), 0)) AS step_1,
            countIf(ifNull(equals(steps, 2), 0)) AS step_2,
            groupArray(step_1_conversion_time) AS step_1_conversion_time_array,
            prop AS prop,
            row_number() OVER (
                               ORDER BY step_2 DESC) AS row_number
     FROM
       (SELECT aggregation_target AS aggregation_target,
               steps AS steps,
               prop AS prop,
               prop AS prop,
               min(step_1_conversion_time) AS step_1_conversion_time
        FROM
          (SELECT aggregation_target AS aggregation_target,
                  steps AS steps,
                  prop AS prop,
                  max(steps) OVER (PARTITION BY aggregation_target,
                                                prop) AS max_steps,
                                  step_1_conversion_time AS step_1_conversion_time,
                                  prop AS prop
           FROM
             (SELECT aggregation_target AS aggregation_target,
                     timestamp AS timestamp,
                     step_0 AS step_0,
                     latest_0 AS latest_0,
                     step_1 AS step_1,
                     latest_1 AS latest_1,
                     prop AS prop,
                     arraySort([latest_0, latest_1]) AS event_times,
                     arraySum([if(and(ifNull(less(latest_0, latest_1), 0), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), 1, 0), 1]) AS steps,
                     arraySort([latest_0, latest_1]) AS conversion_times,
                     if(and(isNotNull(conversion_times[2]), ifNull(lessOrEquals(conversion_times[2], plus(toTimeZone(conversion_times[1], 'UTC'), toIntervalDay(14))), 0)), dateDiff('second', conversion_times[1], conversion_times[2]), NULL) AS step_1_conversion_time
              FROM
                (SELECT aggregation_target AS aggregation_target,
                        timestamp AS timestamp,
                        step_0 AS step_0,
                        latest_0 AS latest_0,
                        step_1 AS step_1,
                        min(latest_1) OVER (PARTITION BY aggregation_target,
                                                         prop
                                            ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS latest_1,
                                           prop AS prop
                 FROM
                   (SELECT timestamp AS timestamp,
                           aggregation_target AS aggregation_target,
                           step_0 AS step_0,
                           latest_0 AS latest_0,
                           step_1 AS step_1,
                           latest_1 AS latest_1,
                           prop_basic AS prop_basic,
                           prop_0 AS prop_0,
                           prop_1 AS prop_1,
                           prop,
                           prop_vals AS prop_vals,
                           prop
                    FROM
                      (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                              if(not(empty(e__override.distinct_id)), e__override.person_id, e.person_id) AS aggregation_target,
                              if(equals(e.event, 'sign up'), 1, 0) AS step_0,
                              if(ifNull(equals(step_0, 1), 0), timestamp, NULL) AS latest_0,
                              if(and(equals(e.event, 'buy'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$version'), ''), 'null'), '^"|"$', ''), 'xyz'), 0)), 1, 0) AS step_1,
                              if(ifNull(equals(step_1, 1), 0), timestamp, NULL) AS latest_1,
                              [ifNull(toString(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$browser'), ''), 'null'), '^"|"$', '')), '')] AS prop_basic,
                              if(ifNull(equals(step_0, 1), 0), prop_basic, []) AS prop_0,
                              if(ifNull(equals(step_1, 1), 0), prop_basic, []) AS prop_1,
                              prop_1 AS prop,
                              groupUniqArray(prop) OVER (PARTITION BY aggregation_target) AS prop_vals
                       FROM events AS e
                       LEFT OUTER JOIN
                         (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                                 person_distinct_id_overrides.distinct_id AS distinct_id
                          FROM person_distinct_id_overrides
                          WHERE equals(person_distinct_id_overrides.team_id, 99999)
                          GROUP BY person_distinct_id_overrides.distinct_id
                          HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS e__override ON equals(e.distinct_id, e__override.distinct_id)
                       WHERE and(equals(e.team_id, 99999), and(and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-08 23:59:59.999999', 6, 'UTC'))), in(e.event, tuple('buy', 'sign up'))), or(ifNull(equals(step_0, 1), 0), ifNull(equals(step_1, 1), 0)))) ARRAY
                    JOIN prop_vals AS prop
                    WHERE ifNull(notEquals(prop, []), isNotNull(prop)
                                 or isNotNull([]))))
              WHERE ifNull(equals(step_0, 1), 0)
              UNION ALL SELECT aggregation_target AS aggregation_target,
                               timestamp AS timestamp,
                               step_0 AS step_0,
                               latest_0 AS latest_0,
                               step_1 AS step_1,
                               latest_1 AS latest_1,
                               prop AS prop,
                               arraySort([latest_0, latest_1]) AS event_times,
                               arraySum([if(and(ifNull(less(latest_0, latest_1), 0), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), 1, 0), 1]) AS steps,
                               arraySort([latest_0, latest_1]) AS conversion_times,
                               if(and(isNotNull(conversion_times[2]), ifNull(lessOrEquals(conversion_times[2], plus(toTimeZone(conversion_times[1], 'UTC'), toIntervalDay(14))), 0)), dateDiff('second', conversion_times[1], conversion_times[2]), NULL) AS step_1_conversion_time
              FROM
                (SELECT aggregation_target AS aggregation_target,
                        timestamp AS timestamp,
                        step_0 AS step_0,
                        latest_0 AS latest_0,
                        step_1 AS step_1,
                        min(latest_1) OVER (PARTITION BY aggregation_target,
                                                         prop
                                            ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS latest_1,
                                           prop AS prop
                 FROM
                   (SELECT timestamp AS timestamp,
                           aggregation_target AS aggregation_target,
                           step_0 AS step_0,
                           latest_0 AS latest_0,
                           step_1 AS step_1,
                           latest_1 AS latest_1,
                           prop_basic AS prop_basic,
                           prop_0 AS prop_0,
                           prop_1 AS prop_1,
                           prop,
                           prop_vals AS prop_vals,
                           prop
                    FROM
                      (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                              if(not(empty(e__override.distinct_id)), e__override.person_id, e.person_id) AS aggregation_target,
                              if(and(equals(e.event, 'buy'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$version'), ''), 'null'), '^"|"$', ''), 'xyz'), 0)), 1, 0) AS step_0,
                              if(ifNull(equals(step_0, 1), 0), timestamp, NULL) AS latest_0,
                              if(equals(e.event, 'sign up'), 1, 0) AS step_1,
                              if(ifNull(equals(step_1, 1), 0), timestamp, NULL) AS latest_1,
                              [ifNull(toString(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$browser'), ''), 'null'), '^"|"$', '')), '')] AS prop_basic,
                              if(ifNull(equals(step_0, 1), 0), prop_basic, []) AS prop_0,
                              if(ifNull(equals(step_1, 1), 0), prop_basic, []) AS prop_1,
                              prop_1 AS prop,
                              groupUniqArray(prop) OVER (PARTITION BY aggregation_target) AS prop_vals
                       FROM events AS e
                       LEFT OUTER JOIN
                         (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                                 person_distinct_id_overrides.distinct_id AS distinct_id
                          FROM person_distinct_id_overrides
                          WHERE equals(person_distinct_id_overrides.team_id, 99999)
                          GROUP BY person_distinct_id_overrides.distinct_id
                          HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS e__override ON equals(e.distinct_id, e__override.distinct_id)
                       WHERE and(equals(e.team_id, 99999), and(and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-08 23:59:59.999999', 6, 'UTC'))), in(e.event, tuple('buy', 'sign up'))), or(ifNull(equals(step_0, 1), 0), ifNull(equals(step_1, 1), 0)))) ARRAY
                    JOIN prop_vals AS prop
                    WHERE ifNull(notEquals(prop, []), isNotNull(prop)
                                 or isNotNull([]))))
              WHERE ifNull(equals(step_0, 1), 0)))
        GROUP BY aggregation_target,
                 steps,
                 prop
        HAVING ifNull(equals(steps, max(max_steps)), isNull(steps)
                      and isNull(max(max_steps))))
     GROUP BY prop)
  GROUP BY final_prop
  LIMIT 26 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=4000000,
                    max_expanded_ast_elements=4000000,
                    max_bytes_before_external_group_by=23622320128,
                    allow_experimental_analyzer=1
  '''
# ---
# name: TestFunnelUnorderedStepsBreakdown.test_funnel_step_multiple_breakdown_snapshot
  '''
  SELECT sum(step_1) AS step_1,
         sum(step_2) AS step_2,
         if(isNaN(avgArrayOrNull(step_1_conversion_time_array) AS inter_1_conversion), NULL, inter_1_conversion) AS step_1_average_conversion_time,
         if(isNaN(medianArrayOrNull(step_1_conversion_time_array) AS inter_1_median), NULL, inter_1_median) AS step_1_median_conversion_time,
         if(ifNull(less(row_number, 26), 0), prop, ['Other']) AS final_prop
  FROM
    (SELECT countIf(ifNull(equals(steps, 1), 0)) AS step_1,
            countIf(ifNull(equals(steps, 2), 0)) AS step_2,
            groupArray(step_1_conversion_time) AS step_1_conversion_time_array,
            prop AS prop,
            row_number() OVER (
                               ORDER BY step_2 DESC) AS row_number
     FROM
       (SELECT aggregation_target AS aggregation_target,
               steps AS steps,
               prop AS prop,
               prop AS prop,
               min(step_1_conversion_time) AS step_1_conversion_time
        FROM
          (SELECT aggregation_target AS aggregation_target,
                  steps AS steps,
                  prop AS prop,
                  max(steps) OVER (PARTITION BY aggregation_target,
                                                prop) AS max_steps,
                                  step_1_conversion_time AS step_1_conversion_time,
                                  prop AS prop
           FROM
             (SELECT aggregation_target AS aggregation_target,
                     timestamp AS timestamp,
                     step_0 AS step_0,
                     latest_0 AS latest_0,
                     step_1 AS step_1,
                     latest_1 AS latest_1,
                     prop AS prop,
                     arraySort([latest_0, latest_1]) AS event_times,
                     arraySum([if(and(ifNull(less(latest_0, latest_1), 0), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), 1, 0), 1]) AS steps,
                     arraySort([latest_0, latest_1]) AS conversion_times,
                     if(and(isNotNull(conversion_times[2]), ifNull(lessOrEquals(conversion_times[2], plus(toTimeZone(conversion_times[1], 'UTC'), toIntervalDay(14))), 0)), dateDiff('second', conversion_times[1], conversion_times[2]), NULL) AS step_1_conversion_time
              FROM
                (SELECT aggregation_target AS aggregation_target,
                        timestamp AS timestamp,
                        step_0 AS step_0,
                        latest_0 AS latest_0,
                        step_1 AS step_1,
                        min(latest_1) OVER (PARTITION BY aggregation_target,
                                                         prop
                                            ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS latest_1,
                                           prop AS prop
                 FROM
                   (SELECT timestamp AS timestamp,
                           aggregation_target AS aggregation_target,
                           step_0 AS step_0,
                           latest_0 AS latest_0,
                           step_1 AS step_1,
                           latest_1 AS latest_1,
                           prop_basic AS prop_basic,
                           prop,
                           prop_vals AS prop_vals,
                           if(notEmpty(arrayFilter(x -> notEmpty(x), prop_vals)), prop_vals, ['', '']) AS prop
                    FROM
                      (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                              if(not(empty(e__override.distinct_id)), e__override.person_id, e.person_id) AS aggregation_target,
                              if(equals(e.event, 'sign up'), 1, 0) AS step_0,
                              if(ifNull(equals(step_0, 1), 0), timestamp, NULL) AS latest_0,
                              if(equals(e.event, 'buy'), 1, 0) AS step_1,
                              if(ifNull(equals(step_1, 1), 0), timestamp, NULL) AS latest_1,
                              [ifNull(toString(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$browser'), ''), 'null'), '^"|"$', '')), ''), ifNull(toString(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$version'), ''), 'null'), '^"|"$', '')), '')] AS prop_basic,
                              prop_basic AS prop,
                              argMinIf(prop, timestamp, notEmpty(arrayFilter(x -> notEmpty(x), prop))) OVER (PARTITION BY aggregation_target) AS prop_vals
                       FROM events AS e
                       LEFT OUTER JOIN
                         (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                                 person_distinct_id_overrides.distinct_id AS distinct_id
                          FROM person_distinct_id_overrides
                          WHERE equals(person_distinct_id_overrides.team_id, 99999)
                          GROUP BY person_distinct_id_overrides.distinct_id
                          HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS e__override ON equals(e.distinct_id, e__override.distinct_id)
                       WHERE and(equals(e.team_id, 99999), and(and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-08 23:59:59.999999', 6, 'UTC'))), in(e.event, tuple('buy', 'sign up'))), or(ifNull(equals(step_0, 1), 0), ifNull(equals(step_1, 1), 0))))))
              WHERE ifNull(equals(step_0, 1), 0)
              UNION ALL SELECT aggregation_target AS aggregation_target,
                               timestamp AS timestamp,
                               step_0 AS step_0,
                               latest_0 AS latest_0,
                               step_1 AS step_1,
                               latest_1 AS latest_1,
                               prop AS prop,
                               arraySort([latest_0, latest_1]) AS event_times,
                               arraySum([if(and(ifNull(less(latest_0, latest_1), 0), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), 1, 0), 1]) AS steps,
                               arraySort([latest_0, latest_1]) AS conversion_times,
                               if(and(isNotNull(conversion_times[2]), ifNull(lessOrEquals(conversion_times[2], plus(toTimeZone(conversion_times[1], 'UTC'), toIntervalDay(14))), 0)), dateDiff('second', conversion_times[1], conversion_times[2]), NULL) AS step_1_conversion_time
              FROM
                (SELECT aggregation_target AS aggregation_target,
                        timestamp AS timestamp,
                        step_0 AS step_0,
                        latest_0 AS latest_0,
                        step_1 AS step_1,
                        min(latest_1) OVER (PARTITION BY aggregation_target,
                                                         prop
                                            ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS latest_1,
                                           prop AS prop
                 FROM
                   (SELECT timestamp AS timestamp,
                           aggregation_target AS aggregation_target,
                           step_0 AS step_0,
                           latest_0 AS latest_0,
                           step_1 AS step_1,
                           latest_1 AS latest_1,
                           prop_basic AS prop_basic,
                           prop,
                           prop_vals AS prop_vals,
                           if(notEmpty(arrayFilter(x -> notEmpty(x), prop_vals)), prop_vals, ['', '']) AS prop
                    FROM
                      (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                              if(not(empty(e__override.distinct_id)), e__override.person_id, e.person_id) AS aggregation_target,
                              if(equals(e.event, 'buy'), 1, 0) AS step_0,
                              if(ifNull(equals(step_0, 1), 0), timestamp, NULL) AS latest_0,
                              if(equals(e.event, 'sign up'), 1, 0) AS step_1,
                              if(ifNull(equals(step_1, 1), 0), timestamp, NULL) AS latest_1,
                              [ifNull(toString(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$browser'), ''), 'null'), '^"|"$', '')), ''), ifNull(toString(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$version'), ''), 'null'), '^"|"$', '')), '')] AS prop_basic,
                              prop_basic AS prop,
                              argMinIf(prop, timestamp, notEmpty(arrayFilter(x -> notEmpty(x), prop))) OVER (PARTITION BY aggregation_target) AS prop_vals
                       FROM events AS e
                       LEFT OUTER JOIN
                         (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                                 person_distinct_id_overrides.distinct_id AS distinct_id
                          FROM person_distinct_id_overrides
                          WHERE equals(person_distinct_id_overrides.team_id, 99999)
                          GROUP BY person_distinct_id_overrides.distinct_id
                          HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS e__override ON equals(e.distinct_id, e__override.distinct_id)
                       WHERE and(equals(e.team_id, 99999), and(and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-08 23:59:59.999999', 6, 'UTC'))), in(e.event, tuple('buy', 'sign up'))), or(ifNull(equals(step_0, 1), 0), ifNull(equals(step_1, 1), 0))))))
              WHERE ifNull(equals(step_0, 1), 0)))
        GROUP BY aggregation_target,
                 steps,
                 prop
        HAVING ifNull(equals(steps, max(max_steps)), isNull(steps)
                      and isNull(max(max_steps))))
     GROUP BY prop)
  GROUP BY final_prop
  LIMIT 26 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=4000000,
                    max_expanded_ast_elements=4000000,
                    max_bytes_before_external_group_by=23622320128,
                    allow_experimental_analyzer=1
  '''
# ---
# name: TestUnorderedFunnelGroupBreakdown.test_funnel_aggregate_by_groups_breakdown_group_person_on_events
  '''
  SELECT sum(step_1) AS step_1,
         sum(step_2) AS step_2,
         sum(step_3) AS step_3,
         if(isNaN(avgArrayOrNull(step_1_conversion_time_array) AS inter_1_conversion), NULL, inter_1_conversion) AS step_1_average_conversion_time,
         if(isNaN(avgArrayOrNull(step_2_conversion_time_array) AS inter_2_conversion), NULL, inter_2_conversion) AS step_2_average_conversion_time,
         if(isNaN(medianArrayOrNull(step_1_conversion_time_array) AS inter_1_median), NULL, inter_1_median) AS step_1_median_conversion_time,
         if(isNaN(medianArrayOrNull(step_2_conversion_time_array) AS inter_2_median), NULL, inter_2_median) AS step_2_median_conversion_time,
         if(ifNull(less(row_number, 26), 0), prop, 'Other') AS final_prop
  FROM
    (SELECT countIf(ifNull(equals(steps, 1), 0)) AS step_1,
            countIf(ifNull(equals(steps, 2), 0)) AS step_2,
            countIf(ifNull(equals(steps, 3), 0)) AS step_3,
            groupArray(step_1_conversion_time) AS step_1_conversion_time_array,
            groupArray(step_2_conversion_time) AS step_2_conversion_time_array,
            prop AS prop,
            row_number() OVER (
                               ORDER BY step_3 DESC) AS row_number
     FROM
       (SELECT aggregation_target AS aggregation_target,
               steps AS steps,
               prop AS prop,
               prop AS prop,
               min(step_1_conversion_time) AS step_1_conversion_time,
               min(step_2_conversion_time) AS step_2_conversion_time
        FROM
          (SELECT aggregation_target AS aggregation_target,
                  steps AS steps,
                  prop AS prop,
                  max(steps) OVER (PARTITION BY aggregation_target,
                                                prop) AS max_steps,
                                  step_1_conversion_time AS step_1_conversion_time,
                                  step_2_conversion_time AS step_2_conversion_time,
                                  prop AS prop
           FROM
             (SELECT aggregation_target AS aggregation_target,
                     timestamp AS timestamp,
                     step_0 AS step_0,
                     latest_0 AS latest_0,
                     step_1 AS step_1,
                     latest_1 AS latest_1,
                     step_2 AS step_2,
                     latest_2 AS latest_2,
                     prop AS prop,
                     arraySort([latest_0, latest_1, latest_2]) AS event_times,
                     arraySum([if(and(ifNull(less(latest_0, latest_1), 0), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), 1, 0), if(and(ifNull(less(latest_0, latest_2), 0), ifNull(lessOrEquals(latest_2, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), 1, 0), 1]) AS steps,
                     arraySort([latest_0, latest_1, latest_2]) AS conversion_times,
                     if(and(isNotNull(conversion_times[2]), ifNull(lessOrEquals(conversion_times[2], plus(toTimeZone(conversion_times[1], 'UTC'), toIntervalDay(14))), 0)), dateDiff('second', conversion_times[1], conversion_times[2]), NULL) AS step_1_conversion_time,
                     if(and(isNotNull(conversion_times[3]), ifNull(lessOrEquals(conversion_times[3], plus(toTimeZone(conversion_times[2], 'UTC'), toIntervalDay(14))), 0)), dateDiff('second', conversion_times[2], conversion_times[3]), NULL) AS step_2_conversion_time
              FROM
                (SELECT aggregation_target AS aggregation_target,
                        timestamp AS timestamp,
                        step_0 AS step_0,
                        latest_0 AS latest_0,
                        step_1 AS step_1,
                        min(latest_1) OVER (PARTITION BY aggregation_target,
                                                         prop
                                            ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS latest_1,
                                           step_2 AS step_2,
                                           min(latest_2) OVER (PARTITION BY aggregation_target,
                                                                            prop
                                                               ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS latest_2,
                                                              prop AS prop
                 FROM
                   (SELECT timestamp AS timestamp,
                           aggregation_target AS aggregation_target,
                           step_0 AS step_0,
                           latest_0 AS latest_0,
                           step_1 AS step_1,
                           latest_1 AS latest_1,
                           step_2 AS step_2,
                           latest_2 AS latest_2,
                           prop_basic AS prop_basic,
                           prop,
                           prop_vals AS prop_vals,
                           prop_vals AS prop
                    FROM
                      (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                              e.`$group_0` AS aggregation_target,
                              if(equals(e.event, 'sign up'), 1, 0) AS step_0,
                              if(ifNull(equals(step_0, 1), 0), timestamp, NULL) AS latest_0,
                              if(equals(e.event, 'play movie'), 1, 0) AS step_1,
                              if(ifNull(equals(step_1, 1), 0), timestamp, NULL) AS latest_1,
                              if(equals(e.event, 'buy'), 1, 0) AS step_2,
                              if(ifNull(equals(step_2, 1), 0), timestamp, NULL) AS latest_2,
                              ifNull(toString(e__group_0.properties___industry), '') AS prop_basic,
                              prop_basic AS prop,
                              argMinIf(prop, timestamp, isNotNull(prop)) OVER (PARTITION BY aggregation_target) AS prop_vals
                       FROM events AS e
                       LEFT JOIN
                         (SELECT argMax(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(groups.group_properties, 'industry'), ''), 'null'), '^"|"$', ''), toTimeZone(groups._timestamp, 'UTC')) AS properties___industry,
                                 groups.group_type_index AS index,
                                 groups.group_key AS key
                          FROM groups
                          WHERE and(equals(groups.team_id, 99999), equals(index, 0))
                          GROUP BY groups.group_type_index,
                                   groups.group_key) AS e__group_0 ON equals(e.`$group_0`, e__group_0.key)
                       WHERE and(equals(e.team_id, 99999), and(and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-08 23:59:59.999999', 6, 'UTC'))), in(e.event, tuple('buy', 'play movie', 'sign up'))), or(ifNull(equals(step_0, 1), 0), ifNull(equals(step_1, 1), 0), ifNull(equals(step_2, 1), 0))))))
              WHERE ifNull(equals(step_0, 1), 0)
              UNION ALL SELECT aggregation_target AS aggregation_target,
                               timestamp AS timestamp,
                               step_0 AS step_0,
                               latest_0 AS latest_0,
                               step_1 AS step_1,
                               latest_1 AS latest_1,
                               step_2 AS step_2,
                               latest_2 AS latest_2,
                               prop AS prop,
                               arraySort([latest_0, latest_1, latest_2]) AS event_times,
                               arraySum([if(and(ifNull(less(latest_0, latest_1), 0), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), 1, 0), if(and(ifNull(less(latest_0, latest_2), 0), ifNull(lessOrEquals(latest_2, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), 1, 0), 1]) AS steps,
                               arraySort([latest_0, latest_1, latest_2]) AS conversion_times,
                               if(and(isNotNull(conversion_times[2]), ifNull(lessOrEquals(conversion_times[2], plus(toTimeZone(conversion_times[1], 'UTC'), toIntervalDay(14))), 0)), dateDiff('second', conversion_times[1], conversion_times[2]), NULL) AS step_1_conversion_time,
                               if(and(isNotNull(conversion_times[3]), ifNull(lessOrEquals(conversion_times[3], plus(toTimeZone(conversion_times[2], 'UTC'), toIntervalDay(14))), 0)), dateDiff('second', conversion_times[2], conversion_times[3]), NULL) AS step_2_conversion_time
              FROM
                (SELECT aggregation_target AS aggregation_target,
                        timestamp AS timestamp,
                        step_0 AS step_0,
                        latest_0 AS latest_0,
                        step_1 AS step_1,
                        min(latest_1) OVER (PARTITION BY aggregation_target,
                                                         prop
                                            ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS latest_1,
                                           step_2 AS step_2,
                                           min(latest_2) OVER (PARTITION BY aggregation_target,
                                                                            prop
                                                               ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS latest_2,
                                                              prop AS prop
                 FROM
                   (SELECT timestamp AS timestamp,
                           aggregation_target AS aggregation_target,
                           step_0 AS step_0,
                           latest_0 AS latest_0,
                           step_1 AS step_1,
                           latest_1 AS latest_1,
                           step_2 AS step_2,
                           latest_2 AS latest_2,
                           prop_basic AS prop_basic,
                           prop,
                           prop_vals AS prop_vals,
                           prop_vals AS prop
                    FROM
                      (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                              e.`$group_0` AS aggregation_target,
                              if(equals(e.event, 'play movie'), 1, 0) AS step_0,
                              if(ifNull(equals(step_0, 1), 0), timestamp, NULL) AS latest_0,
                              if(equals(e.event, 'buy'), 1, 0) AS step_1,
                              if(ifNull(equals(step_1, 1), 0), timestamp, NULL) AS latest_1,
                              if(equals(e.event, 'sign up'), 1, 0) AS step_2,
                              if(ifNull(equals(step_2, 1), 0), timestamp, NULL) AS latest_2,
                              ifNull(toString(e__group_0.properties___industry), '') AS prop_basic,
                              prop_basic AS prop,
                              argMinIf(prop, timestamp, isNotNull(prop)) OVER (PARTITION BY aggregation_target) AS prop_vals
                       FROM events AS e
                       LEFT JOIN
                         (SELECT argMax(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(groups.group_properties, 'industry'), ''), 'null'), '^"|"$', ''), toTimeZone(groups._timestamp, 'UTC')) AS properties___industry,
                                 groups.group_type_index AS index,
                                 groups.group_key AS key
                          FROM groups
                          WHERE and(equals(groups.team_id, 99999), equals(index, 0))
                          GROUP BY groups.group_type_index,
                                   groups.group_key) AS e__group_0 ON equals(e.`$group_0`, e__group_0.key)
                       WHERE and(equals(e.team_id, 99999), and(and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-08 23:59:59.999999', 6, 'UTC'))), in(e.event, tuple('buy', 'play movie', 'sign up'))), or(ifNull(equals(step_0, 1), 0), ifNull(equals(step_1, 1), 0), ifNull(equals(step_2, 1), 0))))))
              WHERE ifNull(equals(step_0, 1), 0)
              UNION ALL SELECT aggregation_target AS aggregation_target,
                               timestamp AS timestamp,
                               step_0 AS step_0,
                               latest_0 AS latest_0,
                               step_1 AS step_1,
                               latest_1 AS latest_1,
                               step_2 AS step_2,
                               latest_2 AS latest_2,
                               prop AS prop,
                               arraySort([latest_0, latest_1, latest_2]) AS event_times,
                               arraySum([if(and(ifNull(less(latest_0, latest_1), 0), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), 1, 0), if(and(ifNull(less(latest_0, latest_2), 0), ifNull(lessOrEquals(latest_2, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), 1, 0), 1]) AS steps,
                               arraySort([latest_0, latest_1, latest_2]) AS conversion_times,
                               if(and(isNotNull(conversion_times[2]), ifNull(lessOrEquals(conversion_times[2], plus(toTimeZone(conversion_times[1], 'UTC'), toIntervalDay(14))), 0)), dateDiff('second', conversion_times[1], conversion_times[2]), NULL) AS step_1_conversion_time,
                               if(and(isNotNull(conversion_times[3]), ifNull(lessOrEquals(conversion_times[3], plus(toTimeZone(conversion_times[2], 'UTC'), toIntervalDay(14))), 0)), dateDiff('second', conversion_times[2], conversion_times[3]), NULL) AS step_2_conversion_time
              FROM
                (SELECT aggregation_target AS aggregation_target,
                        timestamp AS timestamp,
                        step_0 AS step_0,
                        latest_0 AS latest_0,
                        step_1 AS step_1,
                        min(latest_1) OVER (PARTITION BY aggregation_target,
                                                         prop
                                            ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS latest_1,
                                           step_2 AS step_2,
                                           min(latest_2) OVER (PARTITION BY aggregation_target,
                                                                            prop
                                                               ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS latest_2,
                                                              prop AS prop
                 FROM
                   (SELECT timestamp AS timestamp,
                           aggregation_target AS aggregation_target,
                           step_0 AS step_0,
                           latest_0 AS latest_0,
                           step_1 AS step_1,
                           latest_1 AS latest_1,
                           step_2 AS step_2,
                           latest_2 AS latest_2,
                           prop_basic AS prop_basic,
                           prop,
                           prop_vals AS prop_vals,
                           prop_vals AS prop
                    FROM
                      (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                              e.`$group_0` AS aggregation_target,
                              if(equals(e.event, 'buy'), 1, 0) AS step_0,
                              if(ifNull(equals(step_0, 1), 0), timestamp, NULL) AS latest_0,
                              if(equals(e.event, 'sign up'), 1, 0) AS step_1,
                              if(ifNull(equals(step_1, 1), 0), timestamp, NULL) AS latest_1,
                              if(equals(e.event, 'play movie'), 1, 0) AS step_2,
                              if(ifNull(equals(step_2, 1), 0), timestamp, NULL) AS latest_2,
                              ifNull(toString(e__group_0.properties___industry), '') AS prop_basic,
                              prop_basic AS prop,
                              argMinIf(prop, timestamp, isNotNull(prop)) OVER (PARTITION BY aggregation_target) AS prop_vals
                       FROM events AS e
                       LEFT JOIN
                         (SELECT argMax(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(groups.group_properties, 'industry'), ''), 'null'), '^"|"$', ''), toTimeZone(groups._timestamp, 'UTC')) AS properties___industry,
                                 groups.group_type_index AS index,
                                 groups.group_key AS key
                          FROM groups
                          WHERE and(equals(groups.team_id, 99999), equals(index, 0))
                          GROUP BY groups.group_type_index,
                                   groups.group_key) AS e__group_0 ON equals(e.`$group_0`, e__group_0.key)
                       WHERE and(equals(e.team_id, 99999), and(and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-08 23:59:59.999999', 6, 'UTC'))), in(e.event, tuple('buy', 'play movie', 'sign up'))), or(ifNull(equals(step_0, 1), 0), ifNull(equals(step_1, 1), 0), ifNull(equals(step_2, 1), 0))))))
              WHERE ifNull(equals(step_0, 1), 0)))
        GROUP BY aggregation_target,
                 steps,
                 prop
        HAVING ifNull(equals(steps, max(max_steps)), isNull(steps)
                      and isNull(max(max_steps))))
     GROUP BY prop)
  GROUP BY final_prop
  LIMIT 26 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=4000000,
                    max_expanded_ast_elements=4000000,
                    max_bytes_before_external_group_by=23622320128,
                    allow_experimental_analyzer=1
  '''
# ---
# name: TestUnorderedFunnelGroupBreakdown.test_funnel_aggregate_by_groups_breakdown_group_person_on_events_poe_v2
  '''
  SELECT sum(step_1) AS step_1,
         sum(step_2) AS step_2,
         sum(step_3) AS step_3,
         if(isNaN(avgArrayOrNull(step_1_conversion_time_array) AS inter_1_conversion), NULL, inter_1_conversion) AS step_1_average_conversion_time,
         if(isNaN(avgArrayOrNull(step_2_conversion_time_array) AS inter_2_conversion), NULL, inter_2_conversion) AS step_2_average_conversion_time,
         if(isNaN(medianArrayOrNull(step_1_conversion_time_array) AS inter_1_median), NULL, inter_1_median) AS step_1_median_conversion_time,
         if(isNaN(medianArrayOrNull(step_2_conversion_time_array) AS inter_2_median), NULL, inter_2_median) AS step_2_median_conversion_time,
         if(ifNull(less(row_number, 26), 0), prop, 'Other') AS final_prop
  FROM
    (SELECT countIf(ifNull(equals(steps, 1), 0)) AS step_1,
            countIf(ifNull(equals(steps, 2), 0)) AS step_2,
            countIf(ifNull(equals(steps, 3), 0)) AS step_3,
            groupArray(step_1_conversion_time) AS step_1_conversion_time_array,
            groupArray(step_2_conversion_time) AS step_2_conversion_time_array,
            prop AS prop,
            row_number() OVER (
                               ORDER BY step_3 DESC) AS row_number
     FROM
       (SELECT aggregation_target AS aggregation_target,
               steps AS steps,
               prop AS prop,
               prop AS prop,
               min(step_1_conversion_time) AS step_1_conversion_time,
               min(step_2_conversion_time) AS step_2_conversion_time
        FROM
          (SELECT aggregation_target AS aggregation_target,
                  steps AS steps,
                  prop AS prop,
                  max(steps) OVER (PARTITION BY aggregation_target,
                                                prop) AS max_steps,
                                  step_1_conversion_time AS step_1_conversion_time,
                                  step_2_conversion_time AS step_2_conversion_time,
                                  prop AS prop
           FROM
             (SELECT aggregation_target AS aggregation_target,
                     timestamp AS timestamp,
                     step_0 AS step_0,
                     latest_0 AS latest_0,
                     step_1 AS step_1,
                     latest_1 AS latest_1,
                     step_2 AS step_2,
                     latest_2 AS latest_2,
                     prop AS prop,
                     arraySort([latest_0, latest_1, latest_2]) AS event_times,
                     arraySum([if(and(ifNull(less(latest_0, latest_1), 0), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), 1, 0), if(and(ifNull(less(latest_0, latest_2), 0), ifNull(lessOrEquals(latest_2, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), 1, 0), 1]) AS steps,
                     arraySort([latest_0, latest_1, latest_2]) AS conversion_times,
                     if(and(isNotNull(conversion_times[2]), ifNull(lessOrEquals(conversion_times[2], plus(toTimeZone(conversion_times[1], 'UTC'), toIntervalDay(14))), 0)), dateDiff('second', conversion_times[1], conversion_times[2]), NULL) AS step_1_conversion_time,
                     if(and(isNotNull(conversion_times[3]), ifNull(lessOrEquals(conversion_times[3], plus(toTimeZone(conversion_times[2], 'UTC'), toIntervalDay(14))), 0)), dateDiff('second', conversion_times[2], conversion_times[3]), NULL) AS step_2_conversion_time
              FROM
                (SELECT aggregation_target AS aggregation_target,
                        timestamp AS timestamp,
                        step_0 AS step_0,
                        latest_0 AS latest_0,
                        step_1 AS step_1,
                        min(latest_1) OVER (PARTITION BY aggregation_target,
                                                         prop
                                            ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS latest_1,
                                           step_2 AS step_2,
                                           min(latest_2) OVER (PARTITION BY aggregation_target,
                                                                            prop
                                                               ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS latest_2,
                                                              prop AS prop
                 FROM
                   (SELECT timestamp AS timestamp,
                           aggregation_target AS aggregation_target,
                           step_0 AS step_0,
                           latest_0 AS latest_0,
                           step_1 AS step_1,
                           latest_1 AS latest_1,
                           step_2 AS step_2,
                           latest_2 AS latest_2,
                           prop_basic AS prop_basic,
                           prop,
                           prop_vals AS prop_vals,
                           prop_vals AS prop
                    FROM
                      (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                              e.`$group_0` AS aggregation_target,
                              if(equals(e.event, 'sign up'), 1, 0) AS step_0,
                              if(ifNull(equals(step_0, 1), 0), timestamp, NULL) AS latest_0,
                              if(equals(e.event, 'play movie'), 1, 0) AS step_1,
                              if(ifNull(equals(step_1, 1), 0), timestamp, NULL) AS latest_1,
                              if(equals(e.event, 'buy'), 1, 0) AS step_2,
                              if(ifNull(equals(step_2, 1), 0), timestamp, NULL) AS latest_2,
                              ifNull(toString(e__group_0.properties___industry), '') AS prop_basic,
                              prop_basic AS prop,
                              argMinIf(prop, timestamp, isNotNull(prop)) OVER (PARTITION BY aggregation_target) AS prop_vals
                       FROM events AS e
                       LEFT JOIN
                         (SELECT argMax(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(groups.group_properties, 'industry'), ''), 'null'), '^"|"$', ''), toTimeZone(groups._timestamp, 'UTC')) AS properties___industry,
                                 groups.group_type_index AS index,
                                 groups.group_key AS key
                          FROM groups
                          WHERE and(equals(groups.team_id, 99999), equals(index, 0))
                          GROUP BY groups.group_type_index,
                                   groups.group_key) AS e__group_0 ON equals(e.`$group_0`, e__group_0.key)
                       WHERE and(equals(e.team_id, 99999), and(and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-08 23:59:59.999999', 6, 'UTC'))), in(e.event, tuple('buy', 'play movie', 'sign up'))), or(ifNull(equals(step_0, 1), 0), ifNull(equals(step_1, 1), 0), ifNull(equals(step_2, 1), 0))))))
              WHERE ifNull(equals(step_0, 1), 0)
              UNION ALL SELECT aggregation_target AS aggregation_target,
                               timestamp AS timestamp,
                               step_0 AS step_0,
                               latest_0 AS latest_0,
                               step_1 AS step_1,
                               latest_1 AS latest_1,
                               step_2 AS step_2,
                               latest_2 AS latest_2,
                               prop AS prop,
                               arraySort([latest_0, latest_1, latest_2]) AS event_times,
                               arraySum([if(and(ifNull(less(latest_0, latest_1), 0), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), 1, 0), if(and(ifNull(less(latest_0, latest_2), 0), ifNull(lessOrEquals(latest_2, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), 1, 0), 1]) AS steps,
                               arraySort([latest_0, latest_1, latest_2]) AS conversion_times,
                               if(and(isNotNull(conversion_times[2]), ifNull(lessOrEquals(conversion_times[2], plus(toTimeZone(conversion_times[1], 'UTC'), toIntervalDay(14))), 0)), dateDiff('second', conversion_times[1], conversion_times[2]), NULL) AS step_1_conversion_time,
                               if(and(isNotNull(conversion_times[3]), ifNull(lessOrEquals(conversion_times[3], plus(toTimeZone(conversion_times[2], 'UTC'), toIntervalDay(14))), 0)), dateDiff('second', conversion_times[2], conversion_times[3]), NULL) AS step_2_conversion_time
              FROM
                (SELECT aggregation_target AS aggregation_target,
                        timestamp AS timestamp,
                        step_0 AS step_0,
                        latest_0 AS latest_0,
                        step_1 AS step_1,
                        min(latest_1) OVER (PARTITION BY aggregation_target,
                                                         prop
                                            ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS latest_1,
                                           step_2 AS step_2,
                                           min(latest_2) OVER (PARTITION BY aggregation_target,
                                                                            prop
                                                               ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS latest_2,
                                                              prop AS prop
                 FROM
                   (SELECT timestamp AS timestamp,
                           aggregation_target AS aggregation_target,
                           step_0 AS step_0,
                           latest_0 AS latest_0,
                           step_1 AS step_1,
                           latest_1 AS latest_1,
                           step_2 AS step_2,
                           latest_2 AS latest_2,
                           prop_basic AS prop_basic,
                           prop,
                           prop_vals AS prop_vals,
                           prop_vals AS prop
                    FROM
                      (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                              e.`$group_0` AS aggregation_target,
                              if(equals(e.event, 'play movie'), 1, 0) AS step_0,
                              if(ifNull(equals(step_0, 1), 0), timestamp, NULL) AS latest_0,
                              if(equals(e.event, 'buy'), 1, 0) AS step_1,
                              if(ifNull(equals(step_1, 1), 0), timestamp, NULL) AS latest_1,
                              if(equals(e.event, 'sign up'), 1, 0) AS step_2,
                              if(ifNull(equals(step_2, 1), 0), timestamp, NULL) AS latest_2,
                              ifNull(toString(e__group_0.properties___industry), '') AS prop_basic,
                              prop_basic AS prop,
                              argMinIf(prop, timestamp, isNotNull(prop)) OVER (PARTITION BY aggregation_target) AS prop_vals
                       FROM events AS e
                       LEFT JOIN
                         (SELECT argMax(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(groups.group_properties, 'industry'), ''), 'null'), '^"|"$', ''), toTimeZone(groups._timestamp, 'UTC')) AS properties___industry,
                                 groups.group_type_index AS index,
                                 groups.group_key AS key
                          FROM groups
                          WHERE and(equals(groups.team_id, 99999), equals(index, 0))
                          GROUP BY groups.group_type_index,
                                   groups.group_key) AS e__group_0 ON equals(e.`$group_0`, e__group_0.key)
                       WHERE and(equals(e.team_id, 99999), and(and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-08 23:59:59.999999', 6, 'UTC'))), in(e.event, tuple('buy', 'play movie', 'sign up'))), or(ifNull(equals(step_0, 1), 0), ifNull(equals(step_1, 1), 0), ifNull(equals(step_2, 1), 0))))))
              WHERE ifNull(equals(step_0, 1), 0)
              UNION ALL SELECT aggregation_target AS aggregation_target,
                               timestamp AS timestamp,
                               step_0 AS step_0,
                               latest_0 AS latest_0,
                               step_1 AS step_1,
                               latest_1 AS latest_1,
                               step_2 AS step_2,
                               latest_2 AS latest_2,
                               prop AS prop,
                               arraySort([latest_0, latest_1, latest_2]) AS event_times,
                               arraySum([if(and(ifNull(less(latest_0, latest_1), 0), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), 1, 0), if(and(ifNull(less(latest_0, latest_2), 0), ifNull(lessOrEquals(latest_2, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), 1, 0), 1]) AS steps,
                               arraySort([latest_0, latest_1, latest_2]) AS conversion_times,
                               if(and(isNotNull(conversion_times[2]), ifNull(lessOrEquals(conversion_times[2], plus(toTimeZone(conversion_times[1], 'UTC'), toIntervalDay(14))), 0)), dateDiff('second', conversion_times[1], conversion_times[2]), NULL) AS step_1_conversion_time,
                               if(and(isNotNull(conversion_times[3]), ifNull(lessOrEquals(conversion_times[3], plus(toTimeZone(conversion_times[2], 'UTC'), toIntervalDay(14))), 0)), dateDiff('second', conversion_times[2], conversion_times[3]), NULL) AS step_2_conversion_time
              FROM
                (SELECT aggregation_target AS aggregation_target,
                        timestamp AS timestamp,
                        step_0 AS step_0,
                        latest_0 AS latest_0,
                        step_1 AS step_1,
                        min(latest_1) OVER (PARTITION BY aggregation_target,
                                                         prop
                                            ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS latest_1,
                                           step_2 AS step_2,
                                           min(latest_2) OVER (PARTITION BY aggregation_target,
                                                                            prop
                                                               ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS latest_2,
                                                              prop AS prop
                 FROM
                   (SELECT timestamp AS timestamp,
                           aggregation_target AS aggregation_target,
                           step_0 AS step_0,
                           latest_0 AS latest_0,
                           step_1 AS step_1,
                           latest_1 AS latest_1,
                           step_2 AS step_2,
                           latest_2 AS latest_2,
                           prop_basic AS prop_basic,
                           prop,
                           prop_vals AS prop_vals,
                           prop_vals AS prop
                    FROM
                      (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                              e.`$group_0` AS aggregation_target,
                              if(equals(e.event, 'buy'), 1, 0) AS step_0,
                              if(ifNull(equals(step_0, 1), 0), timestamp, NULL) AS latest_0,
                              if(equals(e.event, 'sign up'), 1, 0) AS step_1,
                              if(ifNull(equals(step_1, 1), 0), timestamp, NULL) AS latest_1,
                              if(equals(e.event, 'play movie'), 1, 0) AS step_2,
                              if(ifNull(equals(step_2, 1), 0), timestamp, NULL) AS latest_2,
                              ifNull(toString(e__group_0.properties___industry), '') AS prop_basic,
                              prop_basic AS prop,
                              argMinIf(prop, timestamp, isNotNull(prop)) OVER (PARTITION BY aggregation_target) AS prop_vals
                       FROM events AS e
                       LEFT JOIN
                         (SELECT argMax(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(groups.group_properties, 'industry'), ''), 'null'), '^"|"$', ''), toTimeZone(groups._timestamp, 'UTC')) AS properties___industry,
                                 groups.group_type_index AS index,
                                 groups.group_key AS key
                          FROM groups
                          WHERE and(equals(groups.team_id, 99999), equals(index, 0))
                          GROUP BY groups.group_type_index,
                                   groups.group_key) AS e__group_0 ON equals(e.`$group_0`, e__group_0.key)
                       WHERE and(equals(e.team_id, 99999), and(and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-08 23:59:59.999999', 6, 'UTC'))), in(e.event, tuple('buy', 'play movie', 'sign up'))), or(ifNull(equals(step_0, 1), 0), ifNull(equals(step_1, 1), 0), ifNull(equals(step_2, 1), 0))))))
              WHERE ifNull(equals(step_0, 1), 0)))
        GROUP BY aggregation_target,
                 steps,
                 prop
        HAVING ifNull(equals(steps, max(max_steps)), isNull(steps)
                      and isNull(max(max_steps))))
     GROUP BY prop)
  GROUP BY final_prop
  LIMIT 26 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=4000000,
                    max_expanded_ast_elements=4000000,
                    max_bytes_before_external_group_by=23622320128,
                    allow_experimental_analyzer=1
  '''
# ---
# name: TestUnorderedFunnelGroupBreakdown.test_funnel_breakdown_group
  '''
  SELECT sum(step_1) AS step_1,
         sum(step_2) AS step_2,
         sum(step_3) AS step_3,
         if(isNaN(avgArrayOrNull(step_1_conversion_time_array) AS inter_1_conversion), NULL, inter_1_conversion) AS step_1_average_conversion_time,
         if(isNaN(avgArrayOrNull(step_2_conversion_time_array) AS inter_2_conversion), NULL, inter_2_conversion) AS step_2_average_conversion_time,
         if(isNaN(medianArrayOrNull(step_1_conversion_time_array) AS inter_1_median), NULL, inter_1_median) AS step_1_median_conversion_time,
         if(isNaN(medianArrayOrNull(step_2_conversion_time_array) AS inter_2_median), NULL, inter_2_median) AS step_2_median_conversion_time,
         if(ifNull(less(row_number, 26), 0), prop, 'Other') AS final_prop
  FROM
    (SELECT countIf(ifNull(equals(steps, 1), 0)) AS step_1,
            countIf(ifNull(equals(steps, 2), 0)) AS step_2,
            countIf(ifNull(equals(steps, 3), 0)) AS step_3,
            groupArray(step_1_conversion_time) AS step_1_conversion_time_array,
            groupArray(step_2_conversion_time) AS step_2_conversion_time_array,
            prop AS prop,
            row_number() OVER (
                               ORDER BY step_3 DESC) AS row_number
     FROM
       (SELECT aggregation_target AS aggregation_target,
               steps AS steps,
               prop AS prop,
               prop AS prop,
               min(step_1_conversion_time) AS step_1_conversion_time,
               min(step_2_conversion_time) AS step_2_conversion_time
        FROM
          (SELECT aggregation_target AS aggregation_target,
                  steps AS steps,
                  prop AS prop,
                  max(steps) OVER (PARTITION BY aggregation_target,
                                                prop) AS max_steps,
                                  step_1_conversion_time AS step_1_conversion_time,
                                  step_2_conversion_time AS step_2_conversion_time,
                                  prop AS prop
           FROM
             (SELECT aggregation_target AS aggregation_target,
                     timestamp AS timestamp,
                     step_0 AS step_0,
                     latest_0 AS latest_0,
                     step_1 AS step_1,
                     latest_1 AS latest_1,
                     step_2 AS step_2,
                     latest_2 AS latest_2,
                     prop AS prop,
                     arraySort([latest_0, latest_1, latest_2]) AS event_times,
                     arraySum([if(and(ifNull(less(latest_0, latest_1), 0), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), 1, 0), if(and(ifNull(less(latest_0, latest_2), 0), ifNull(lessOrEquals(latest_2, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), 1, 0), 1]) AS steps,
                     arraySort([latest_0, latest_1, latest_2]) AS conversion_times,
                     if(and(isNotNull(conversion_times[2]), ifNull(lessOrEquals(conversion_times[2], plus(toTimeZone(conversion_times[1], 'UTC'), toIntervalDay(14))), 0)), dateDiff('second', conversion_times[1], conversion_times[2]), NULL) AS step_1_conversion_time,
                     if(and(isNotNull(conversion_times[3]), ifNull(lessOrEquals(conversion_times[3], plus(toTimeZone(conversion_times[2], 'UTC'), toIntervalDay(14))), 0)), dateDiff('second', conversion_times[2], conversion_times[3]), NULL) AS step_2_conversion_time
              FROM
                (SELECT aggregation_target AS aggregation_target,
                        timestamp AS timestamp,
                        step_0 AS step_0,
                        latest_0 AS latest_0,
                        step_1 AS step_1,
                        min(latest_1) OVER (PARTITION BY aggregation_target,
                                                         prop
                                            ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS latest_1,
                                           step_2 AS step_2,
                                           min(latest_2) OVER (PARTITION BY aggregation_target,
                                                                            prop
                                                               ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS latest_2,
                                                              prop AS prop
                 FROM
                   (SELECT timestamp AS timestamp,
                           aggregation_target AS aggregation_target,
                           step_0 AS step_0,
                           latest_0 AS latest_0,
                           step_1 AS step_1,
                           latest_1 AS latest_1,
                           step_2 AS step_2,
                           latest_2 AS latest_2,
                           prop_basic AS prop_basic,
                           prop,
                           prop_vals AS prop_vals,
                           prop_vals AS prop
                    FROM
                      (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                              if(not(empty(e__override.distinct_id)), e__override.person_id, e.person_id) AS aggregation_target,
                              if(equals(e.event, 'sign up'), 1, 0) AS step_0,
                              if(ifNull(equals(step_0, 1), 0), timestamp, NULL) AS latest_0,
                              if(equals(e.event, 'play movie'), 1, 0) AS step_1,
                              if(ifNull(equals(step_1, 1), 0), timestamp, NULL) AS latest_1,
                              if(equals(e.event, 'buy'), 1, 0) AS step_2,
                              if(ifNull(equals(step_2, 1), 0), timestamp, NULL) AS latest_2,
                              ifNull(toString(e__group_0.properties___industry), '') AS prop_basic,
                              prop_basic AS prop,
                              argMinIf(prop, timestamp, isNotNull(prop)) OVER (PARTITION BY aggregation_target) AS prop_vals
                       FROM events AS e
                       LEFT OUTER JOIN
                         (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                                 person_distinct_id_overrides.distinct_id AS distinct_id
                          FROM person_distinct_id_overrides
                          WHERE equals(person_distinct_id_overrides.team_id, 99999)
                          GROUP BY person_distinct_id_overrides.distinct_id
                          HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS e__override ON equals(e.distinct_id, e__override.distinct_id)
                       LEFT JOIN
                         (SELECT argMax(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(groups.group_properties, 'industry'), ''), 'null'), '^"|"$', ''), toTimeZone(groups._timestamp, 'UTC')) AS properties___industry,
                                 groups.group_type_index AS index,
                                 groups.group_key AS key
                          FROM groups
                          WHERE and(equals(groups.team_id, 99999), equals(index, 0))
                          GROUP BY groups.group_type_index,
                                   groups.group_key) AS e__group_0 ON equals(e.`$group_0`, e__group_0.key)
                       WHERE and(equals(e.team_id, 99999), and(and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-08 23:59:59.999999', 6, 'UTC'))), in(e.event, tuple('buy', 'play movie', 'sign up'))), or(ifNull(equals(step_0, 1), 0), ifNull(equals(step_1, 1), 0), ifNull(equals(step_2, 1), 0))))))
              WHERE ifNull(equals(step_0, 1), 0)
              UNION ALL SELECT aggregation_target AS aggregation_target,
                               timestamp AS timestamp,
                               step_0 AS step_0,
                               latest_0 AS latest_0,
                               step_1 AS step_1,
                               latest_1 AS latest_1,
                               step_2 AS step_2,
                               latest_2 AS latest_2,
                               prop AS prop,
                               arraySort([latest_0, latest_1, latest_2]) AS event_times,
                               arraySum([if(and(ifNull(less(latest_0, latest_1), 0), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), 1, 0), if(and(ifNull(less(latest_0, latest_2), 0), ifNull(lessOrEquals(latest_2, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), 1, 0), 1]) AS steps,
                               arraySort([latest_0, latest_1, latest_2]) AS conversion_times,
                               if(and(isNotNull(conversion_times[2]), ifNull(lessOrEquals(conversion_times[2], plus(toTimeZone(conversion_times[1], 'UTC'), toIntervalDay(14))), 0)), dateDiff('second', conversion_times[1], conversion_times[2]), NULL) AS step_1_conversion_time,
                               if(and(isNotNull(conversion_times[3]), ifNull(lessOrEquals(conversion_times[3], plus(toTimeZone(conversion_times[2], 'UTC'), toIntervalDay(14))), 0)), dateDiff('second', conversion_times[2], conversion_times[3]), NULL) AS step_2_conversion_time
              FROM
                (SELECT aggregation_target AS aggregation_target,
                        timestamp AS timestamp,
                        step_0 AS step_0,
                        latest_0 AS latest_0,
                        step_1 AS step_1,
                        min(latest_1) OVER (PARTITION BY aggregation_target,
                                                         prop
                                            ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS latest_1,
                                           step_2 AS step_2,
                                           min(latest_2) OVER (PARTITION BY aggregation_target,
                                                                            prop
                                                               ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS latest_2,
                                                              prop AS prop
                 FROM
                   (SELECT timestamp AS timestamp,
                           aggregation_target AS aggregation_target,
                           step_0 AS step_0,
                           latest_0 AS latest_0,
                           step_1 AS step_1,
                           latest_1 AS latest_1,
                           step_2 AS step_2,
                           latest_2 AS latest_2,
                           prop_basic AS prop_basic,
                           prop,
                           prop_vals AS prop_vals,
                           prop_vals AS prop
                    FROM
                      (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                              if(not(empty(e__override.distinct_id)), e__override.person_id, e.person_id) AS aggregation_target,
                              if(equals(e.event, 'play movie'), 1, 0) AS step_0,
                              if(ifNull(equals(step_0, 1), 0), timestamp, NULL) AS latest_0,
                              if(equals(e.event, 'buy'), 1, 0) AS step_1,
                              if(ifNull(equals(step_1, 1), 0), timestamp, NULL) AS latest_1,
                              if(equals(e.event, 'sign up'), 1, 0) AS step_2,
                              if(ifNull(equals(step_2, 1), 0), timestamp, NULL) AS latest_2,
                              ifNull(toString(e__group_0.properties___industry), '') AS prop_basic,
                              prop_basic AS prop,
                              argMinIf(prop, timestamp, isNotNull(prop)) OVER (PARTITION BY aggregation_target) AS prop_vals
                       FROM events AS e
                       LEFT OUTER JOIN
                         (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                                 person_distinct_id_overrides.distinct_id AS distinct_id
                          FROM person_distinct_id_overrides
                          WHERE equals(person_distinct_id_overrides.team_id, 99999)
                          GROUP BY person_distinct_id_overrides.distinct_id
                          HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS e__override ON equals(e.distinct_id, e__override.distinct_id)
                       LEFT JOIN
                         (SELECT argMax(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(groups.group_properties, 'industry'), ''), 'null'), '^"|"$', ''), toTimeZone(groups._timestamp, 'UTC')) AS properties___industry,
                                 groups.group_type_index AS index,
                                 groups.group_key AS key
                          FROM groups
                          WHERE and(equals(groups.team_id, 99999), equals(index, 0))
                          GROUP BY groups.group_type_index,
                                   groups.group_key) AS e__group_0 ON equals(e.`$group_0`, e__group_0.key)
                       WHERE and(equals(e.team_id, 99999), and(and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-08 23:59:59.999999', 6, 'UTC'))), in(e.event, tuple('buy', 'play movie', 'sign up'))), or(ifNull(equals(step_0, 1), 0), ifNull(equals(step_1, 1), 0), ifNull(equals(step_2, 1), 0))))))
              WHERE ifNull(equals(step_0, 1), 0)
              UNION ALL SELECT aggregation_target AS aggregation_target,
                               timestamp AS timestamp,
                               step_0 AS step_0,
                               latest_0 AS latest_0,
                               step_1 AS step_1,
                               latest_1 AS latest_1,
                               step_2 AS step_2,
                               latest_2 AS latest_2,
                               prop AS prop,
                               arraySort([latest_0, latest_1, latest_2]) AS event_times,
                               arraySum([if(and(ifNull(less(latest_0, latest_1), 0), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), 1, 0), if(and(ifNull(less(latest_0, latest_2), 0), ifNull(lessOrEquals(latest_2, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), 1, 0), 1]) AS steps,
                               arraySort([latest_0, latest_1, latest_2]) AS conversion_times,
                               if(and(isNotNull(conversion_times[2]), ifNull(lessOrEquals(conversion_times[2], plus(toTimeZone(conversion_times[1], 'UTC'), toIntervalDay(14))), 0)), dateDiff('second', conversion_times[1], conversion_times[2]), NULL) AS step_1_conversion_time,
                               if(and(isNotNull(conversion_times[3]), ifNull(lessOrEquals(conversion_times[3], plus(toTimeZone(conversion_times[2], 'UTC'), toIntervalDay(14))), 0)), dateDiff('second', conversion_times[2], conversion_times[3]), NULL) AS step_2_conversion_time
              FROM
                (SELECT aggregation_target AS aggregation_target,
                        timestamp AS timestamp,
                        step_0 AS step_0,
                        latest_0 AS latest_0,
                        step_1 AS step_1,
                        min(latest_1) OVER (PARTITION BY aggregation_target,
                                                         prop
                                            ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS latest_1,
                                           step_2 AS step_2,
                                           min(latest_2) OVER (PARTITION BY aggregation_target,
                                                                            prop
                                                               ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS latest_2,
                                                              prop AS prop
                 FROM
                   (SELECT timestamp AS timestamp,
                           aggregation_target AS aggregation_target,
                           step_0 AS step_0,
                           latest_0 AS latest_0,
                           step_1 AS step_1,
                           latest_1 AS latest_1,
                           step_2 AS step_2,
                           latest_2 AS latest_2,
                           prop_basic AS prop_basic,
                           prop,
                           prop_vals AS prop_vals,
                           prop_vals AS prop
                    FROM
                      (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                              if(not(empty(e__override.distinct_id)), e__override.person_id, e.person_id) AS aggregation_target,
                              if(equals(e.event, 'buy'), 1, 0) AS step_0,
                              if(ifNull(equals(step_0, 1), 0), timestamp, NULL) AS latest_0,
                              if(equals(e.event, 'sign up'), 1, 0) AS step_1,
                              if(ifNull(equals(step_1, 1), 0), timestamp, NULL) AS latest_1,
                              if(equals(e.event, 'play movie'), 1, 0) AS step_2,
                              if(ifNull(equals(step_2, 1), 0), timestamp, NULL) AS latest_2,
                              ifNull(toString(e__group_0.properties___industry), '') AS prop_basic,
                              prop_basic AS prop,
                              argMinIf(prop, timestamp, isNotNull(prop)) OVER (PARTITION BY aggregation_target) AS prop_vals
                       FROM events AS e
                       LEFT OUTER JOIN
                         (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                                 person_distinct_id_overrides.distinct_id AS distinct_id
                          FROM person_distinct_id_overrides
                          WHERE equals(person_distinct_id_overrides.team_id, 99999)
                          GROUP BY person_distinct_id_overrides.distinct_id
                          HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS e__override ON equals(e.distinct_id, e__override.distinct_id)
                       LEFT JOIN
                         (SELECT argMax(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(groups.group_properties, 'industry'), ''), 'null'), '^"|"$', ''), toTimeZone(groups._timestamp, 'UTC')) AS properties___industry,
                                 groups.group_type_index AS index,
                                 groups.group_key AS key
                          FROM groups
                          WHERE and(equals(groups.team_id, 99999), equals(index, 0))
                          GROUP BY groups.group_type_index,
                                   groups.group_key) AS e__group_0 ON equals(e.`$group_0`, e__group_0.key)
                       WHERE and(equals(e.team_id, 99999), and(and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-08 23:59:59.999999', 6, 'UTC'))), in(e.event, tuple('buy', 'play movie', 'sign up'))), or(ifNull(equals(step_0, 1), 0), ifNull(equals(step_1, 1), 0), ifNull(equals(step_2, 1), 0))))))
              WHERE ifNull(equals(step_0, 1), 0)))
        GROUP BY aggregation_target,
                 steps,
                 prop
        HAVING ifNull(equals(steps, max(max_steps)), isNull(steps)
                      and isNull(max(max_steps))))
     GROUP BY prop)
  GROUP BY final_prop
  LIMIT 26 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=4000000,
                    max_expanded_ast_elements=4000000,
                    max_bytes_before_external_group_by=23622320128,
                    allow_experimental_analyzer=1
  '''
# ---
# name: TestUnorderedFunnelGroupBreakdown.test_funnel_breakdown_group.1
  '''
  
  SELECT replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '') AS value,
         count(*) as count
  FROM events e
  LEFT JOIN
    (SELECT group_key,
            argMax(group_properties, _timestamp) AS group_properties_0
     FROM groups
     WHERE team_id = 99999
       AND group_type_index = 0
     GROUP BY group_key) groups_0 ON "$group_0" == groups_0.group_key
  WHERE team_id = 99999
    AND event IN ['buy', 'play movie', 'sign up']
    AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
    AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-08 23:59:59', 'UTC')
  GROUP BY value
  ORDER BY count DESC, value DESC
  LIMIT 26
  OFFSET 0
  '''
# ---
# name: TestUnorderedFunnelGroupBreakdown.test_funnel_breakdown_group.10
  '''
  
  SELECT replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '') AS value,
         count(*) as count
  FROM events e
  LEFT JOIN
    (SELECT group_key,
            argMax(group_properties, _timestamp) AS group_properties_0
     FROM groups
     WHERE team_id = 99999
       AND group_type_index = 0
     GROUP BY group_key) groups_0 ON "$group_0" == groups_0.group_key
  WHERE team_id = 99999
    AND event IN ['buy', 'play movie', 'sign up']
    AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
    AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-08 23:59:59', 'UTC')
  GROUP BY value
  ORDER BY count DESC, value DESC
  LIMIT 26
  OFFSET 0
  '''
# ---
# name: TestUnorderedFunnelGroupBreakdown.test_funnel_breakdown_group.11
  '''
  
  SELECT replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '') AS value,
         count(*) as count
  FROM events e
  LEFT JOIN
    (SELECT group_key,
            argMax(group_properties, _timestamp) AS group_properties_0
     FROM groups
     WHERE team_id = 99999
       AND group_type_index = 0
     GROUP BY group_key) groups_0 ON "$group_0" == groups_0.group_key
  WHERE team_id = 99999
    AND event IN ['buy', 'play movie', 'sign up']
    AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
    AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-08 23:59:59', 'UTC')
  GROUP BY value
  ORDER BY count DESC, value DESC
  LIMIT 26
  OFFSET 0
  '''
# ---
# name: TestUnorderedFunnelGroupBreakdown.test_funnel_breakdown_group.12
  '''
  
  SELECT aggregation_target AS actor_id
  FROM
    (SELECT aggregation_target,
            steps,
            avg(step_1_conversion_time) step_1_average_conversion_time_inner,
            avg(step_2_conversion_time) step_2_average_conversion_time_inner,
            median(step_1_conversion_time) step_1_median_conversion_time_inner,
            median(step_2_conversion_time) step_2_median_conversion_time_inner,
            prop
     FROM
       (SELECT aggregation_target,
               steps,
               max(steps) over (PARTITION BY aggregation_target,
                                             prop) as max_steps,
                               step_1_conversion_time,
                               step_2_conversion_time,
                               prop
        FROM
          (SELECT *,
                  arraySort([latest_0,latest_1,latest_2]) as event_times,
                  arraySum([if(latest_0 < latest_1 AND latest_1 <= latest_0 + INTERVAL 7 DAY, 1, 0),if(latest_0 < latest_2 AND latest_2 <= latest_0 + INTERVAL 7 DAY, 1, 0), 1]) AS steps ,
                  arraySort([latest_0,latest_1,latest_2]) as conversion_times,
                  if(isNotNull(conversion_times[2])
                     AND conversion_times[2] <= conversion_times[1] + INTERVAL 7 DAY, dateDiff('second', conversion_times[1], conversion_times[2]), NULL) step_1_conversion_time,
                  if(isNotNull(conversion_times[3])
                     AND conversion_times[3] <= conversion_times[2] + INTERVAL 7 DAY, dateDiff('second', conversion_times[2], conversion_times[3]), NULL) step_2_conversion_time
           FROM
             (SELECT aggregation_target, timestamp, step_0,
                                                    latest_0,
                                                    step_1,
                                                    min(latest_1) over (PARTITION by aggregation_target,
                                                                                     prop
                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_1,
                                                                       step_2,
                                                                       min(latest_2) over (PARTITION by aggregation_target,
                                                                                                        prop
                                                                                           ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_2 ,
                                                                                          if(has(['technology', 'finance'], prop), prop, 'Other') as prop
              FROM
                (SELECT *,
                        prop_vals as prop
                 FROM
                   (SELECT e.timestamp as timestamp,
                           if(notEmpty(pdi.distinct_id), pdi.person_id, e.person_id) as aggregation_target,
                           if(notEmpty(pdi.distinct_id), pdi.person_id, e.person_id) as person_id,
                           if(event = 'sign up', 1, 0) as step_0,
                           if(step_0 = 1, timestamp, null) as latest_0,
                           if(event = 'play movie', 1, 0) as step_1,
                           if(step_1 = 1, timestamp, null) as latest_1,
                           if(event = 'buy', 1, 0) as step_2,
                           if(step_2 = 1, timestamp, null) as latest_2,
                           replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '') AS prop_basic,
                           prop_basic as prop,
                           argMinIf(prop, timestamp, isNotNull(prop)) over (PARTITION by aggregation_target) as prop_vals
                    FROM events e
                    LEFT OUTER JOIN
                      (SELECT distinct_id,
                              argMax(person_id, version) as person_id
                       FROM person_distinct_id2
                       WHERE team_id = 99999
                         AND distinct_id IN
                           (SELECT distinct_id
                            FROM events
                            WHERE team_id = 99999
                              AND event IN ['buy', 'play movie', 'sign up']
                              AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
                              AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-08 23:59:59', 'UTC') )
                       GROUP BY distinct_id
                       HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
                    LEFT JOIN
                      (SELECT group_key,
                              argMax(group_properties, _timestamp) AS group_properties_0
                       FROM groups
                       WHERE team_id = 99999
                         AND group_type_index = 0
                       GROUP BY group_key) groups_0 ON "$group_0" == groups_0.group_key
                    WHERE team_id = 99999
                      AND event IN ['buy', 'play movie', 'sign up']
                      AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
                      AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-08 23:59:59', 'UTC')
                      AND (step_0 = 1
                           OR step_1 = 1
                           OR step_2 = 1) )))
           WHERE step_0 = 1
           UNION ALL SELECT *,
                            arraySort([latest_0,latest_1,latest_2]) as event_times,
                            arraySum([if(latest_0 < latest_1 AND latest_1 <= latest_0 + INTERVAL 7 DAY, 1, 0),if(latest_0 < latest_2 AND latest_2 <= latest_0 + INTERVAL 7 DAY, 1, 0), 1]) AS steps ,
                            arraySort([latest_0,latest_1,latest_2]) as conversion_times,
                            if(isNotNull(conversion_times[2])
                               AND conversion_times[2] <= conversion_times[1] + INTERVAL 7 DAY, dateDiff('second', conversion_times[1], conversion_times[2]), NULL) step_1_conversion_time,
                            if(isNotNull(conversion_times[3])
                               AND conversion_times[3] <= conversion_times[2] + INTERVAL 7 DAY, dateDiff('second', conversion_times[2], conversion_times[3]), NULL) step_2_conversion_time
           FROM
             (SELECT aggregation_target, timestamp, step_0,
                                                    latest_0,
                                                    step_1,
                                                    min(latest_1) over (PARTITION by aggregation_target,
                                                                                     prop
                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_1,
                                                                       step_2,
                                                                       min(latest_2) over (PARTITION by aggregation_target,
                                                                                                        prop
                                                                                           ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_2 ,
                                                                                          if(has(['technology', 'finance'], prop), prop, 'Other') as prop
              FROM
                (SELECT *,
                        prop_vals as prop
                 FROM
                   (SELECT e.timestamp as timestamp,
                           if(notEmpty(pdi.distinct_id), pdi.person_id, e.person_id) as aggregation_target,
                           if(notEmpty(pdi.distinct_id), pdi.person_id, e.person_id) as person_id,
                           if(event = 'play movie', 1, 0) as step_0,
                           if(step_0 = 1, timestamp, null) as latest_0,
                           if(event = 'buy', 1, 0) as step_1,
                           if(step_1 = 1, timestamp, null) as latest_1,
                           if(event = 'sign up', 1, 0) as step_2,
                           if(step_2 = 1, timestamp, null) as latest_2,
                           replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '') AS prop_basic,
                           prop_basic as prop,
                           argMinIf(prop, timestamp, isNotNull(prop)) over (PARTITION by aggregation_target) as prop_vals
                    FROM events e
                    LEFT OUTER JOIN
                      (SELECT distinct_id,
                              argMax(person_id, version) as person_id
                       FROM person_distinct_id2
                       WHERE team_id = 99999
                         AND distinct_id IN
                           (SELECT distinct_id
                            FROM events
                            WHERE team_id = 99999
                              AND event IN ['buy', 'play movie', 'sign up']
                              AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
                              AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-08 23:59:59', 'UTC') )
                       GROUP BY distinct_id
                       HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
                    LEFT JOIN
                      (SELECT group_key,
                              argMax(group_properties, _timestamp) AS group_properties_0
                       FROM groups
                       WHERE team_id = 99999
                         AND group_type_index = 0
                       GROUP BY group_key) groups_0 ON "$group_0" == groups_0.group_key
                    WHERE team_id = 99999
                      AND event IN ['buy', 'play movie', 'sign up']
                      AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
                      AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-08 23:59:59', 'UTC')
                      AND (step_0 = 1
                           OR step_1 = 1
                           OR step_2 = 1) )))
           WHERE step_0 = 1
           UNION ALL SELECT *,
                            arraySort([latest_0,latest_1,latest_2]) as event_times,
                            arraySum([if(latest_0 < latest_1 AND latest_1 <= latest_0 + INTERVAL 7 DAY, 1, 0),if(latest_0 < latest_2 AND latest_2 <= latest_0 + INTERVAL 7 DAY, 1, 0), 1]) AS steps ,
                            arraySort([latest_0,latest_1,latest_2]) as conversion_times,
                            if(isNotNull(conversion_times[2])
                               AND conversion_times[2] <= conversion_times[1] + INTERVAL 7 DAY, dateDiff('second', conversion_times[1], conversion_times[2]), NULL) step_1_conversion_time,
                            if(isNotNull(conversion_times[3])
                               AND conversion_times[3] <= conversion_times[2] + INTERVAL 7 DAY, dateDiff('second', conversion_times[2], conversion_times[3]), NULL) step_2_conversion_time
           FROM
             (SELECT aggregation_target, timestamp, step_0,
                                                    latest_0,
                                                    step_1,
                                                    min(latest_1) over (PARTITION by aggregation_target,
                                                                                     prop
                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_1,
                                                                       step_2,
                                                                       min(latest_2) over (PARTITION by aggregation_target,
                                                                                                        prop
                                                                                           ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_2 ,
                                                                                          if(has(['technology', 'finance'], prop), prop, 'Other') as prop
              FROM
                (SELECT *,
                        prop_vals as prop
                 FROM
                   (SELECT e.timestamp as timestamp,
                           if(notEmpty(pdi.distinct_id), pdi.person_id, e.person_id) as aggregation_target,
                           if(notEmpty(pdi.distinct_id), pdi.person_id, e.person_id) as person_id,
                           if(event = 'buy', 1, 0) as step_0,
                           if(step_0 = 1, timestamp, null) as latest_0,
                           if(event = 'sign up', 1, 0) as step_1,
                           if(step_1 = 1, timestamp, null) as latest_1,
                           if(event = 'play movie', 1, 0) as step_2,
                           if(step_2 = 1, timestamp, null) as latest_2,
                           replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '') AS prop_basic,
                           prop_basic as prop,
                           argMinIf(prop, timestamp, isNotNull(prop)) over (PARTITION by aggregation_target) as prop_vals
                    FROM events e
                    LEFT OUTER JOIN
                      (SELECT distinct_id,
                              argMax(person_id, version) as person_id
                       FROM person_distinct_id2
                       WHERE team_id = 99999
                         AND distinct_id IN
                           (SELECT distinct_id
                            FROM events
                            WHERE team_id = 99999
                              AND event IN ['buy', 'play movie', 'sign up']
                              AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
                              AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-08 23:59:59', 'UTC') )
                       GROUP BY distinct_id
                       HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
                    LEFT JOIN
                      (SELECT group_key,
                              argMax(group_properties, _timestamp) AS group_properties_0
                       FROM groups
                       WHERE team_id = 99999
                         AND group_type_index = 0
                       GROUP BY group_key) groups_0 ON "$group_0" == groups_0.group_key
                    WHERE team_id = 99999
                      AND event IN ['buy', 'play movie', 'sign up']
                      AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
                      AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-08 23:59:59', 'UTC')
                      AND (step_0 = 1
                           OR step_1 = 1
                           OR step_2 = 1) )))
           WHERE step_0 = 1 ))
     GROUP BY aggregation_target,
              steps,
              prop
     HAVING steps = max_steps)
  WHERE steps IN [1, 2, 3]
    AND arrayFlatten(array(prop)) = arrayFlatten(array('technology'))
  ORDER BY aggregation_target
  LIMIT 100
  OFFSET 0 SETTINGS max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000
  '''
# ---
# name: TestUnorderedFunnelGroupBreakdown.test_funnel_breakdown_group.13
  '''
  
  SELECT replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '') AS value,
         count(*) as count
  FROM events e
  LEFT JOIN
    (SELECT group_key,
            argMax(group_properties, _timestamp) AS group_properties_0
     FROM groups
     WHERE team_id = 99999
       AND group_type_index = 0
     GROUP BY group_key) groups_0 ON "$group_0" == groups_0.group_key
  WHERE team_id = 99999
    AND event IN ['buy', 'play movie', 'sign up']
    AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
    AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-08 23:59:59', 'UTC')
  GROUP BY value
  ORDER BY count DESC, value DESC
  LIMIT 26
  OFFSET 0
  '''
# ---
# name: TestUnorderedFunnelGroupBreakdown.test_funnel_breakdown_group.14
  '''
  
  SELECT replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '') AS value,
         count(*) as count
  FROM events e
  LEFT JOIN
    (SELECT group_key,
            argMax(group_properties, _timestamp) AS group_properties_0
     FROM groups
     WHERE team_id = 99999
       AND group_type_index = 0
     GROUP BY group_key) groups_0 ON "$group_0" == groups_0.group_key
  WHERE team_id = 99999
    AND event IN ['buy', 'play movie', 'sign up']
    AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
    AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-08 23:59:59', 'UTC')
  GROUP BY value
  ORDER BY count DESC, value DESC
  LIMIT 26
  OFFSET 0
  '''
# ---
# name: TestUnorderedFunnelGroupBreakdown.test_funnel_breakdown_group.15
  '''
  
  SELECT replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '') AS value,
         count(*) as count
  FROM events e
  LEFT JOIN
    (SELECT group_key,
            argMax(group_properties, _timestamp) AS group_properties_0
     FROM groups
     WHERE team_id = 99999
       AND group_type_index = 0
     GROUP BY group_key) groups_0 ON "$group_0" == groups_0.group_key
  WHERE team_id = 99999
    AND event IN ['buy', 'play movie', 'sign up']
    AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
    AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-08 23:59:59', 'UTC')
  GROUP BY value
  ORDER BY count DESC, value DESC
  LIMIT 26
  OFFSET 0
  '''
# ---
# name: TestUnorderedFunnelGroupBreakdown.test_funnel_breakdown_group.16
  '''
  
  SELECT aggregation_target AS actor_id
  FROM
    (SELECT aggregation_target,
            steps,
            avg(step_1_conversion_time) step_1_average_conversion_time_inner,
            avg(step_2_conversion_time) step_2_average_conversion_time_inner,
            median(step_1_conversion_time) step_1_median_conversion_time_inner,
            median(step_2_conversion_time) step_2_median_conversion_time_inner,
            prop
     FROM
       (SELECT aggregation_target,
               steps,
               max(steps) over (PARTITION BY aggregation_target,
                                             prop) as max_steps,
                               step_1_conversion_time,
                               step_2_conversion_time,
                               prop
        FROM
          (SELECT *,
                  arraySort([latest_0,latest_1,latest_2]) as event_times,
                  arraySum([if(latest_0 < latest_1 AND latest_1 <= latest_0 + INTERVAL 7 DAY, 1, 0),if(latest_0 < latest_2 AND latest_2 <= latest_0 + INTERVAL 7 DAY, 1, 0), 1]) AS steps ,
                  arraySort([latest_0,latest_1,latest_2]) as conversion_times,
                  if(isNotNull(conversion_times[2])
                     AND conversion_times[2] <= conversion_times[1] + INTERVAL 7 DAY, dateDiff('second', conversion_times[1], conversion_times[2]), NULL) step_1_conversion_time,
                  if(isNotNull(conversion_times[3])
                     AND conversion_times[3] <= conversion_times[2] + INTERVAL 7 DAY, dateDiff('second', conversion_times[2], conversion_times[3]), NULL) step_2_conversion_time
           FROM
             (SELECT aggregation_target, timestamp, step_0,
                                                    latest_0,
                                                    step_1,
                                                    min(latest_1) over (PARTITION by aggregation_target,
                                                                                     prop
                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_1,
                                                                       step_2,
                                                                       min(latest_2) over (PARTITION by aggregation_target,
                                                                                                        prop
                                                                                           ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_2 ,
                                                                                          if(has(['technology', 'finance'], prop), prop, 'Other') as prop
              FROM
                (SELECT *,
                        prop_vals as prop
                 FROM
                   (SELECT e.timestamp as timestamp,
                           if(notEmpty(pdi.distinct_id), pdi.person_id, e.person_id) as aggregation_target,
                           if(notEmpty(pdi.distinct_id), pdi.person_id, e.person_id) as person_id,
                           if(event = 'sign up', 1, 0) as step_0,
                           if(step_0 = 1, timestamp, null) as latest_0,
                           if(event = 'play movie', 1, 0) as step_1,
                           if(step_1 = 1, timestamp, null) as latest_1,
                           if(event = 'buy', 1, 0) as step_2,
                           if(step_2 = 1, timestamp, null) as latest_2,
                           replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '') AS prop_basic,
                           prop_basic as prop,
                           argMinIf(prop, timestamp, isNotNull(prop)) over (PARTITION by aggregation_target) as prop_vals
                    FROM events e
                    LEFT OUTER JOIN
                      (SELECT distinct_id,
                              argMax(person_id, version) as person_id
                       FROM person_distinct_id2
                       WHERE team_id = 99999
                         AND distinct_id IN
                           (SELECT distinct_id
                            FROM events
                            WHERE team_id = 99999
                              AND event IN ['buy', 'play movie', 'sign up']
                              AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
                              AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-08 23:59:59', 'UTC') )
                       GROUP BY distinct_id
                       HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
                    LEFT JOIN
                      (SELECT group_key,
                              argMax(group_properties, _timestamp) AS group_properties_0
                       FROM groups
                       WHERE team_id = 99999
                         AND group_type_index = 0
                       GROUP BY group_key) groups_0 ON "$group_0" == groups_0.group_key
                    WHERE team_id = 99999
                      AND event IN ['buy', 'play movie', 'sign up']
                      AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
                      AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-08 23:59:59', 'UTC')
                      AND (step_0 = 1
                           OR step_1 = 1
                           OR step_2 = 1) )))
           WHERE step_0 = 1
           UNION ALL SELECT *,
                            arraySort([latest_0,latest_1,latest_2]) as event_times,
                            arraySum([if(latest_0 < latest_1 AND latest_1 <= latest_0 + INTERVAL 7 DAY, 1, 0),if(latest_0 < latest_2 AND latest_2 <= latest_0 + INTERVAL 7 DAY, 1, 0), 1]) AS steps ,
                            arraySort([latest_0,latest_1,latest_2]) as conversion_times,
                            if(isNotNull(conversion_times[2])
                               AND conversion_times[2] <= conversion_times[1] + INTERVAL 7 DAY, dateDiff('second', conversion_times[1], conversion_times[2]), NULL) step_1_conversion_time,
                            if(isNotNull(conversion_times[3])
                               AND conversion_times[3] <= conversion_times[2] + INTERVAL 7 DAY, dateDiff('second', conversion_times[2], conversion_times[3]), NULL) step_2_conversion_time
           FROM
             (SELECT aggregation_target, timestamp, step_0,
                                                    latest_0,
                                                    step_1,
                                                    min(latest_1) over (PARTITION by aggregation_target,
                                                                                     prop
                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_1,
                                                                       step_2,
                                                                       min(latest_2) over (PARTITION by aggregation_target,
                                                                                                        prop
                                                                                           ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_2 ,
                                                                                          if(has(['technology', 'finance'], prop), prop, 'Other') as prop
              FROM
                (SELECT *,
                        prop_vals as prop
                 FROM
                   (SELECT e.timestamp as timestamp,
                           if(notEmpty(pdi.distinct_id), pdi.person_id, e.person_id) as aggregation_target,
                           if(notEmpty(pdi.distinct_id), pdi.person_id, e.person_id) as person_id,
                           if(event = 'play movie', 1, 0) as step_0,
                           if(step_0 = 1, timestamp, null) as latest_0,
                           if(event = 'buy', 1, 0) as step_1,
                           if(step_1 = 1, timestamp, null) as latest_1,
                           if(event = 'sign up', 1, 0) as step_2,
                           if(step_2 = 1, timestamp, null) as latest_2,
                           replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '') AS prop_basic,
                           prop_basic as prop,
                           argMinIf(prop, timestamp, isNotNull(prop)) over (PARTITION by aggregation_target) as prop_vals
                    FROM events e
                    LEFT OUTER JOIN
                      (SELECT distinct_id,
                              argMax(person_id, version) as person_id
                       FROM person_distinct_id2
                       WHERE team_id = 99999
                         AND distinct_id IN
                           (SELECT distinct_id
                            FROM events
                            WHERE team_id = 99999
                              AND event IN ['buy', 'play movie', 'sign up']
                              AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
                              AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-08 23:59:59', 'UTC') )
                       GROUP BY distinct_id
                       HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
                    LEFT JOIN
                      (SELECT group_key,
                              argMax(group_properties, _timestamp) AS group_properties_0
                       FROM groups
                       WHERE team_id = 99999
                         AND group_type_index = 0
                       GROUP BY group_key) groups_0 ON "$group_0" == groups_0.group_key
                    WHERE team_id = 99999
                      AND event IN ['buy', 'play movie', 'sign up']
                      AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
                      AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-08 23:59:59', 'UTC')
                      AND (step_0 = 1
                           OR step_1 = 1
                           OR step_2 = 1) )))
           WHERE step_0 = 1
           UNION ALL SELECT *,
                            arraySort([latest_0,latest_1,latest_2]) as event_times,
                            arraySum([if(latest_0 < latest_1 AND latest_1 <= latest_0 + INTERVAL 7 DAY, 1, 0),if(latest_0 < latest_2 AND latest_2 <= latest_0 + INTERVAL 7 DAY, 1, 0), 1]) AS steps ,
                            arraySort([latest_0,latest_1,latest_2]) as conversion_times,
                            if(isNotNull(conversion_times[2])
                               AND conversion_times[2] <= conversion_times[1] + INTERVAL 7 DAY, dateDiff('second', conversion_times[1], conversion_times[2]), NULL) step_1_conversion_time,
                            if(isNotNull(conversion_times[3])
                               AND conversion_times[3] <= conversion_times[2] + INTERVAL 7 DAY, dateDiff('second', conversion_times[2], conversion_times[3]), NULL) step_2_conversion_time
           FROM
             (SELECT aggregation_target, timestamp, step_0,
                                                    latest_0,
                                                    step_1,
                                                    min(latest_1) over (PARTITION by aggregation_target,
                                                                                     prop
                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_1,
                                                                       step_2,
                                                                       min(latest_2) over (PARTITION by aggregation_target,
                                                                                                        prop
                                                                                           ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_2 ,
                                                                                          if(has(['technology', 'finance'], prop), prop, 'Other') as prop
              FROM
                (SELECT *,
                        prop_vals as prop
                 FROM
                   (SELECT e.timestamp as timestamp,
                           if(notEmpty(pdi.distinct_id), pdi.person_id, e.person_id) as aggregation_target,
                           if(notEmpty(pdi.distinct_id), pdi.person_id, e.person_id) as person_id,
                           if(event = 'buy', 1, 0) as step_0,
                           if(step_0 = 1, timestamp, null) as latest_0,
                           if(event = 'sign up', 1, 0) as step_1,
                           if(step_1 = 1, timestamp, null) as latest_1,
                           if(event = 'play movie', 1, 0) as step_2,
                           if(step_2 = 1, timestamp, null) as latest_2,
                           replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '') AS prop_basic,
                           prop_basic as prop,
                           argMinIf(prop, timestamp, isNotNull(prop)) over (PARTITION by aggregation_target) as prop_vals
                    FROM events e
                    LEFT OUTER JOIN
                      (SELECT distinct_id,
                              argMax(person_id, version) as person_id
                       FROM person_distinct_id2
                       WHERE team_id = 99999
                         AND distinct_id IN
                           (SELECT distinct_id
                            FROM events
                            WHERE team_id = 99999
                              AND event IN ['buy', 'play movie', 'sign up']
                              AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
                              AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-08 23:59:59', 'UTC') )
                       GROUP BY distinct_id
                       HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
                    LEFT JOIN
                      (SELECT group_key,
                              argMax(group_properties, _timestamp) AS group_properties_0
                       FROM groups
                       WHERE team_id = 99999
                         AND group_type_index = 0
                       GROUP BY group_key) groups_0 ON "$group_0" == groups_0.group_key
                    WHERE team_id = 99999
                      AND event IN ['buy', 'play movie', 'sign up']
                      AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
                      AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-08 23:59:59', 'UTC')
                      AND (step_0 = 1
                           OR step_1 = 1
                           OR step_2 = 1) )))
           WHERE step_0 = 1 ))
     GROUP BY aggregation_target,
              steps,
              prop
     HAVING steps = max_steps)
  WHERE steps IN [2, 3]
    AND arrayFlatten(array(prop)) = arrayFlatten(array('technology'))
  ORDER BY aggregation_target
  LIMIT 100
  OFFSET 0 SETTINGS max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000
  '''
# ---
# name: TestUnorderedFunnelGroupBreakdown.test_funnel_breakdown_group.2
  '''
  
  SELECT replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '') AS value,
         count(*) as count
  FROM events e
  LEFT JOIN
    (SELECT group_key,
            argMax(group_properties, _timestamp) AS group_properties_0
     FROM groups
     WHERE team_id = 99999
       AND group_type_index = 0
     GROUP BY group_key) groups_0 ON "$group_0" == groups_0.group_key
  WHERE team_id = 99999
    AND event IN ['buy', 'play movie', 'sign up']
    AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
    AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-08 23:59:59', 'UTC')
  GROUP BY value
  ORDER BY count DESC, value DESC
  LIMIT 26
  OFFSET 0
  '''
# ---
# name: TestUnorderedFunnelGroupBreakdown.test_funnel_breakdown_group.3
  '''
  
  SELECT replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '') AS value,
         count(*) as count
  FROM events e
  LEFT JOIN
    (SELECT group_key,
            argMax(group_properties, _timestamp) AS group_properties_0
     FROM groups
     WHERE team_id = 99999
       AND group_type_index = 0
     GROUP BY group_key) groups_0 ON "$group_0" == groups_0.group_key
  WHERE team_id = 99999
    AND event IN ['buy', 'play movie', 'sign up']
    AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
    AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-08 23:59:59', 'UTC')
  GROUP BY value
  ORDER BY count DESC, value DESC
  LIMIT 26
  OFFSET 0
  '''
# ---
# name: TestUnorderedFunnelGroupBreakdown.test_funnel_breakdown_group.4
  '''
  
  SELECT aggregation_target AS actor_id
  FROM
    (SELECT aggregation_target,
            steps,
            avg(step_1_conversion_time) step_1_average_conversion_time_inner,
            avg(step_2_conversion_time) step_2_average_conversion_time_inner,
            median(step_1_conversion_time) step_1_median_conversion_time_inner,
            median(step_2_conversion_time) step_2_median_conversion_time_inner,
            prop
     FROM
       (SELECT aggregation_target,
               steps,
               max(steps) over (PARTITION BY aggregation_target,
                                             prop) as max_steps,
                               step_1_conversion_time,
                               step_2_conversion_time,
                               prop
        FROM
          (SELECT *,
                  arraySort([latest_0,latest_1,latest_2]) as event_times,
                  arraySum([if(latest_0 < latest_1 AND latest_1 <= latest_0 + INTERVAL 7 DAY, 1, 0),if(latest_0 < latest_2 AND latest_2 <= latest_0 + INTERVAL 7 DAY, 1, 0), 1]) AS steps ,
                  arraySort([latest_0,latest_1,latest_2]) as conversion_times,
                  if(isNotNull(conversion_times[2])
                     AND conversion_times[2] <= conversion_times[1] + INTERVAL 7 DAY, dateDiff('second', conversion_times[1], conversion_times[2]), NULL) step_1_conversion_time,
                  if(isNotNull(conversion_times[3])
                     AND conversion_times[3] <= conversion_times[2] + INTERVAL 7 DAY, dateDiff('second', conversion_times[2], conversion_times[3]), NULL) step_2_conversion_time
           FROM
             (SELECT aggregation_target, timestamp, step_0,
                                                    latest_0,
                                                    step_1,
                                                    min(latest_1) over (PARTITION by aggregation_target,
                                                                                     prop
                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_1,
                                                                       step_2,
                                                                       min(latest_2) over (PARTITION by aggregation_target,
                                                                                                        prop
                                                                                           ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_2 ,
                                                                                          if(has(['technology', 'finance'], prop), prop, 'Other') as prop
              FROM
                (SELECT *,
                        prop_vals as prop
                 FROM
                   (SELECT e.timestamp as timestamp,
                           if(notEmpty(pdi.distinct_id), pdi.person_id, e.person_id) as aggregation_target,
                           if(notEmpty(pdi.distinct_id), pdi.person_id, e.person_id) as person_id,
                           if(event = 'sign up', 1, 0) as step_0,
                           if(step_0 = 1, timestamp, null) as latest_0,
                           if(event = 'play movie', 1, 0) as step_1,
                           if(step_1 = 1, timestamp, null) as latest_1,
                           if(event = 'buy', 1, 0) as step_2,
                           if(step_2 = 1, timestamp, null) as latest_2,
                           replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '') AS prop_basic,
                           prop_basic as prop,
                           argMinIf(prop, timestamp, isNotNull(prop)) over (PARTITION by aggregation_target) as prop_vals
                    FROM events e
                    LEFT OUTER JOIN
                      (SELECT distinct_id,
                              argMax(person_id, version) as person_id
                       FROM person_distinct_id2
                       WHERE team_id = 99999
                         AND distinct_id IN
                           (SELECT distinct_id
                            FROM events
                            WHERE team_id = 99999
                              AND event IN ['buy', 'play movie', 'sign up']
                              AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
                              AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-08 23:59:59', 'UTC') )
                       GROUP BY distinct_id
                       HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
                    LEFT JOIN
                      (SELECT group_key,
                              argMax(group_properties, _timestamp) AS group_properties_0
                       FROM groups
                       WHERE team_id = 99999
                         AND group_type_index = 0
                       GROUP BY group_key) groups_0 ON "$group_0" == groups_0.group_key
                    WHERE team_id = 99999
                      AND event IN ['buy', 'play movie', 'sign up']
                      AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
                      AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-08 23:59:59', 'UTC')
                      AND (step_0 = 1
                           OR step_1 = 1
                           OR step_2 = 1) )))
           WHERE step_0 = 1
           UNION ALL SELECT *,
                            arraySort([latest_0,latest_1,latest_2]) as event_times,
                            arraySum([if(latest_0 < latest_1 AND latest_1 <= latest_0 + INTERVAL 7 DAY, 1, 0),if(latest_0 < latest_2 AND latest_2 <= latest_0 + INTERVAL 7 DAY, 1, 0), 1]) AS steps ,
                            arraySort([latest_0,latest_1,latest_2]) as conversion_times,
                            if(isNotNull(conversion_times[2])
                               AND conversion_times[2] <= conversion_times[1] + INTERVAL 7 DAY, dateDiff('second', conversion_times[1], conversion_times[2]), NULL) step_1_conversion_time,
                            if(isNotNull(conversion_times[3])
                               AND conversion_times[3] <= conversion_times[2] + INTERVAL 7 DAY, dateDiff('second', conversion_times[2], conversion_times[3]), NULL) step_2_conversion_time
           FROM
             (SELECT aggregation_target, timestamp, step_0,
                                                    latest_0,
                                                    step_1,
                                                    min(latest_1) over (PARTITION by aggregation_target,
                                                                                     prop
                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_1,
                                                                       step_2,
                                                                       min(latest_2) over (PARTITION by aggregation_target,
                                                                                                        prop
                                                                                           ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_2 ,
                                                                                          if(has(['technology', 'finance'], prop), prop, 'Other') as prop
              FROM
                (SELECT *,
                        prop_vals as prop
                 FROM
                   (SELECT e.timestamp as timestamp,
                           if(notEmpty(pdi.distinct_id), pdi.person_id, e.person_id) as aggregation_target,
                           if(notEmpty(pdi.distinct_id), pdi.person_id, e.person_id) as person_id,
                           if(event = 'play movie', 1, 0) as step_0,
                           if(step_0 = 1, timestamp, null) as latest_0,
                           if(event = 'buy', 1, 0) as step_1,
                           if(step_1 = 1, timestamp, null) as latest_1,
                           if(event = 'sign up', 1, 0) as step_2,
                           if(step_2 = 1, timestamp, null) as latest_2,
                           replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '') AS prop_basic,
                           prop_basic as prop,
                           argMinIf(prop, timestamp, isNotNull(prop)) over (PARTITION by aggregation_target) as prop_vals
                    FROM events e
                    LEFT OUTER JOIN
                      (SELECT distinct_id,
                              argMax(person_id, version) as person_id
                       FROM person_distinct_id2
                       WHERE team_id = 99999
                         AND distinct_id IN
                           (SELECT distinct_id
                            FROM events
                            WHERE team_id = 99999
                              AND event IN ['buy', 'play movie', 'sign up']
                              AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
                              AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-08 23:59:59', 'UTC') )
                       GROUP BY distinct_id
                       HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
                    LEFT JOIN
                      (SELECT group_key,
                              argMax(group_properties, _timestamp) AS group_properties_0
                       FROM groups
                       WHERE team_id = 99999
                         AND group_type_index = 0
                       GROUP BY group_key) groups_0 ON "$group_0" == groups_0.group_key
                    WHERE team_id = 99999
                      AND event IN ['buy', 'play movie', 'sign up']
                      AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
                      AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-08 23:59:59', 'UTC')
                      AND (step_0 = 1
                           OR step_1 = 1
                           OR step_2 = 1) )))
           WHERE step_0 = 1
           UNION ALL SELECT *,
                            arraySort([latest_0,latest_1,latest_2]) as event_times,
                            arraySum([if(latest_0 < latest_1 AND latest_1 <= latest_0 + INTERVAL 7 DAY, 1, 0),if(latest_0 < latest_2 AND latest_2 <= latest_0 + INTERVAL 7 DAY, 1, 0), 1]) AS steps ,
                            arraySort([latest_0,latest_1,latest_2]) as conversion_times,
                            if(isNotNull(conversion_times[2])
                               AND conversion_times[2] <= conversion_times[1] + INTERVAL 7 DAY, dateDiff('second', conversion_times[1], conversion_times[2]), NULL) step_1_conversion_time,
                            if(isNotNull(conversion_times[3])
                               AND conversion_times[3] <= conversion_times[2] + INTERVAL 7 DAY, dateDiff('second', conversion_times[2], conversion_times[3]), NULL) step_2_conversion_time
           FROM
             (SELECT aggregation_target, timestamp, step_0,
                                                    latest_0,
                                                    step_1,
                                                    min(latest_1) over (PARTITION by aggregation_target,
                                                                                     prop
                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_1,
                                                                       step_2,
                                                                       min(latest_2) over (PARTITION by aggregation_target,
                                                                                                        prop
                                                                                           ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_2 ,
                                                                                          if(has(['technology', 'finance'], prop), prop, 'Other') as prop
              FROM
                (SELECT *,
                        prop_vals as prop
                 FROM
                   (SELECT e.timestamp as timestamp,
                           if(notEmpty(pdi.distinct_id), pdi.person_id, e.person_id) as aggregation_target,
                           if(notEmpty(pdi.distinct_id), pdi.person_id, e.person_id) as person_id,
                           if(event = 'buy', 1, 0) as step_0,
                           if(step_0 = 1, timestamp, null) as latest_0,
                           if(event = 'sign up', 1, 0) as step_1,
                           if(step_1 = 1, timestamp, null) as latest_1,
                           if(event = 'play movie', 1, 0) as step_2,
                           if(step_2 = 1, timestamp, null) as latest_2,
                           replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '') AS prop_basic,
                           prop_basic as prop,
                           argMinIf(prop, timestamp, isNotNull(prop)) over (PARTITION by aggregation_target) as prop_vals
                    FROM events e
                    LEFT OUTER JOIN
                      (SELECT distinct_id,
                              argMax(person_id, version) as person_id
                       FROM person_distinct_id2
                       WHERE team_id = 99999
                         AND distinct_id IN
                           (SELECT distinct_id
                            FROM events
                            WHERE team_id = 99999
                              AND event IN ['buy', 'play movie', 'sign up']
                              AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
                              AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-08 23:59:59', 'UTC') )
                       GROUP BY distinct_id
                       HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
                    LEFT JOIN
                      (SELECT group_key,
                              argMax(group_properties, _timestamp) AS group_properties_0
                       FROM groups
                       WHERE team_id = 99999
                         AND group_type_index = 0
                       GROUP BY group_key) groups_0 ON "$group_0" == groups_0.group_key
                    WHERE team_id = 99999
                      AND event IN ['buy', 'play movie', 'sign up']
                      AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
                      AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-08 23:59:59', 'UTC')
                      AND (step_0 = 1
                           OR step_1 = 1
                           OR step_2 = 1) )))
           WHERE step_0 = 1 ))
     GROUP BY aggregation_target,
              steps,
              prop
     HAVING steps = max_steps)
  WHERE steps IN [1, 2, 3]
    AND arrayFlatten(array(prop)) = arrayFlatten(array('finance'))
  ORDER BY aggregation_target
  LIMIT 100
  OFFSET 0 SETTINGS max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000
  '''
# ---
# name: TestUnorderedFunnelGroupBreakdown.test_funnel_breakdown_group.5
  '''
  
  SELECT replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '') AS value,
         count(*) as count
  FROM events e
  LEFT JOIN
    (SELECT group_key,
            argMax(group_properties, _timestamp) AS group_properties_0
     FROM groups
     WHERE team_id = 99999
       AND group_type_index = 0
     GROUP BY group_key) groups_0 ON "$group_0" == groups_0.group_key
  WHERE team_id = 99999
    AND event IN ['buy', 'play movie', 'sign up']
    AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
    AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-08 23:59:59', 'UTC')
  GROUP BY value
  ORDER BY count DESC, value DESC
  LIMIT 26
  OFFSET 0
  '''
# ---
# name: TestUnorderedFunnelGroupBreakdown.test_funnel_breakdown_group.6
  '''
  
  SELECT replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '') AS value,
         count(*) as count
  FROM events e
  LEFT JOIN
    (SELECT group_key,
            argMax(group_properties, _timestamp) AS group_properties_0
     FROM groups
     WHERE team_id = 99999
       AND group_type_index = 0
     GROUP BY group_key) groups_0 ON "$group_0" == groups_0.group_key
  WHERE team_id = 99999
    AND event IN ['buy', 'play movie', 'sign up']
    AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
    AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-08 23:59:59', 'UTC')
  GROUP BY value
  ORDER BY count DESC, value DESC
  LIMIT 26
  OFFSET 0
  '''
# ---
# name: TestUnorderedFunnelGroupBreakdown.test_funnel_breakdown_group.7
  '''
  
  SELECT replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '') AS value,
         count(*) as count
  FROM events e
  LEFT JOIN
    (SELECT group_key,
            argMax(group_properties, _timestamp) AS group_properties_0
     FROM groups
     WHERE team_id = 99999
       AND group_type_index = 0
     GROUP BY group_key) groups_0 ON "$group_0" == groups_0.group_key
  WHERE team_id = 99999
    AND event IN ['buy', 'play movie', 'sign up']
    AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
    AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-08 23:59:59', 'UTC')
  GROUP BY value
  ORDER BY count DESC, value DESC
  LIMIT 26
  OFFSET 0
  '''
# ---
# name: TestUnorderedFunnelGroupBreakdown.test_funnel_breakdown_group.8
  '''
  
  SELECT aggregation_target AS actor_id
  FROM
    (SELECT aggregation_target,
            steps,
            avg(step_1_conversion_time) step_1_average_conversion_time_inner,
            avg(step_2_conversion_time) step_2_average_conversion_time_inner,
            median(step_1_conversion_time) step_1_median_conversion_time_inner,
            median(step_2_conversion_time) step_2_median_conversion_time_inner,
            prop
     FROM
       (SELECT aggregation_target,
               steps,
               max(steps) over (PARTITION BY aggregation_target,
                                             prop) as max_steps,
                               step_1_conversion_time,
                               step_2_conversion_time,
                               prop
        FROM
          (SELECT *,
                  arraySort([latest_0,latest_1,latest_2]) as event_times,
                  arraySum([if(latest_0 < latest_1 AND latest_1 <= latest_0 + INTERVAL 7 DAY, 1, 0),if(latest_0 < latest_2 AND latest_2 <= latest_0 + INTERVAL 7 DAY, 1, 0), 1]) AS steps ,
                  arraySort([latest_0,latest_1,latest_2]) as conversion_times,
                  if(isNotNull(conversion_times[2])
                     AND conversion_times[2] <= conversion_times[1] + INTERVAL 7 DAY, dateDiff('second', conversion_times[1], conversion_times[2]), NULL) step_1_conversion_time,
                  if(isNotNull(conversion_times[3])
                     AND conversion_times[3] <= conversion_times[2] + INTERVAL 7 DAY, dateDiff('second', conversion_times[2], conversion_times[3]), NULL) step_2_conversion_time
           FROM
             (SELECT aggregation_target, timestamp, step_0,
                                                    latest_0,
                                                    step_1,
                                                    min(latest_1) over (PARTITION by aggregation_target,
                                                                                     prop
                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_1,
                                                                       step_2,
                                                                       min(latest_2) over (PARTITION by aggregation_target,
                                                                                                        prop
                                                                                           ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_2 ,
                                                                                          if(has(['technology', 'finance'], prop), prop, 'Other') as prop
              FROM
                (SELECT *,
                        prop_vals as prop
                 FROM
                   (SELECT e.timestamp as timestamp,
                           if(notEmpty(pdi.distinct_id), pdi.person_id, e.person_id) as aggregation_target,
                           if(notEmpty(pdi.distinct_id), pdi.person_id, e.person_id) as person_id,
                           if(event = 'sign up', 1, 0) as step_0,
                           if(step_0 = 1, timestamp, null) as latest_0,
                           if(event = 'play movie', 1, 0) as step_1,
                           if(step_1 = 1, timestamp, null) as latest_1,
                           if(event = 'buy', 1, 0) as step_2,
                           if(step_2 = 1, timestamp, null) as latest_2,
                           replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '') AS prop_basic,
                           prop_basic as prop,
                           argMinIf(prop, timestamp, isNotNull(prop)) over (PARTITION by aggregation_target) as prop_vals
                    FROM events e
                    LEFT OUTER JOIN
                      (SELECT distinct_id,
                              argMax(person_id, version) as person_id
                       FROM person_distinct_id2
                       WHERE team_id = 99999
                         AND distinct_id IN
                           (SELECT distinct_id
                            FROM events
                            WHERE team_id = 99999
                              AND event IN ['buy', 'play movie', 'sign up']
                              AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
                              AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-08 23:59:59', 'UTC') )
                       GROUP BY distinct_id
                       HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
                    LEFT JOIN
                      (SELECT group_key,
                              argMax(group_properties, _timestamp) AS group_properties_0
                       FROM groups
                       WHERE team_id = 99999
                         AND group_type_index = 0
                       GROUP BY group_key) groups_0 ON "$group_0" == groups_0.group_key
                    WHERE team_id = 99999
                      AND event IN ['buy', 'play movie', 'sign up']
                      AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
                      AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-08 23:59:59', 'UTC')
                      AND (step_0 = 1
                           OR step_1 = 1
                           OR step_2 = 1) )))
           WHERE step_0 = 1
           UNION ALL SELECT *,
                            arraySort([latest_0,latest_1,latest_2]) as event_times,
                            arraySum([if(latest_0 < latest_1 AND latest_1 <= latest_0 + INTERVAL 7 DAY, 1, 0),if(latest_0 < latest_2 AND latest_2 <= latest_0 + INTERVAL 7 DAY, 1, 0), 1]) AS steps ,
                            arraySort([latest_0,latest_1,latest_2]) as conversion_times,
                            if(isNotNull(conversion_times[2])
                               AND conversion_times[2] <= conversion_times[1] + INTERVAL 7 DAY, dateDiff('second', conversion_times[1], conversion_times[2]), NULL) step_1_conversion_time,
                            if(isNotNull(conversion_times[3])
                               AND conversion_times[3] <= conversion_times[2] + INTERVAL 7 DAY, dateDiff('second', conversion_times[2], conversion_times[3]), NULL) step_2_conversion_time
           FROM
             (SELECT aggregation_target, timestamp, step_0,
                                                    latest_0,
                                                    step_1,
                                                    min(latest_1) over (PARTITION by aggregation_target,
                                                                                     prop
                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_1,
                                                                       step_2,
                                                                       min(latest_2) over (PARTITION by aggregation_target,
                                                                                                        prop
                                                                                           ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_2 ,
                                                                                          if(has(['technology', 'finance'], prop), prop, 'Other') as prop
              FROM
                (SELECT *,
                        prop_vals as prop
                 FROM
                   (SELECT e.timestamp as timestamp,
                           if(notEmpty(pdi.distinct_id), pdi.person_id, e.person_id) as aggregation_target,
                           if(notEmpty(pdi.distinct_id), pdi.person_id, e.person_id) as person_id,
                           if(event = 'play movie', 1, 0) as step_0,
                           if(step_0 = 1, timestamp, null) as latest_0,
                           if(event = 'buy', 1, 0) as step_1,
                           if(step_1 = 1, timestamp, null) as latest_1,
                           if(event = 'sign up', 1, 0) as step_2,
                           if(step_2 = 1, timestamp, null) as latest_2,
                           replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '') AS prop_basic,
                           prop_basic as prop,
                           argMinIf(prop, timestamp, isNotNull(prop)) over (PARTITION by aggregation_target) as prop_vals
                    FROM events e
                    LEFT OUTER JOIN
                      (SELECT distinct_id,
                              argMax(person_id, version) as person_id
                       FROM person_distinct_id2
                       WHERE team_id = 99999
                         AND distinct_id IN
                           (SELECT distinct_id
                            FROM events
                            WHERE team_id = 99999
                              AND event IN ['buy', 'play movie', 'sign up']
                              AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
                              AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-08 23:59:59', 'UTC') )
                       GROUP BY distinct_id
                       HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
                    LEFT JOIN
                      (SELECT group_key,
                              argMax(group_properties, _timestamp) AS group_properties_0
                       FROM groups
                       WHERE team_id = 99999
                         AND group_type_index = 0
                       GROUP BY group_key) groups_0 ON "$group_0" == groups_0.group_key
                    WHERE team_id = 99999
                      AND event IN ['buy', 'play movie', 'sign up']
                      AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
                      AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-08 23:59:59', 'UTC')
                      AND (step_0 = 1
                           OR step_1 = 1
                           OR step_2 = 1) )))
           WHERE step_0 = 1
           UNION ALL SELECT *,
                            arraySort([latest_0,latest_1,latest_2]) as event_times,
                            arraySum([if(latest_0 < latest_1 AND latest_1 <= latest_0 + INTERVAL 7 DAY, 1, 0),if(latest_0 < latest_2 AND latest_2 <= latest_0 + INTERVAL 7 DAY, 1, 0), 1]) AS steps ,
                            arraySort([latest_0,latest_1,latest_2]) as conversion_times,
                            if(isNotNull(conversion_times[2])
                               AND conversion_times[2] <= conversion_times[1] + INTERVAL 7 DAY, dateDiff('second', conversion_times[1], conversion_times[2]), NULL) step_1_conversion_time,
                            if(isNotNull(conversion_times[3])
                               AND conversion_times[3] <= conversion_times[2] + INTERVAL 7 DAY, dateDiff('second', conversion_times[2], conversion_times[3]), NULL) step_2_conversion_time
           FROM
             (SELECT aggregation_target, timestamp, step_0,
                                                    latest_0,
                                                    step_1,
                                                    min(latest_1) over (PARTITION by aggregation_target,
                                                                                     prop
                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_1,
                                                                       step_2,
                                                                       min(latest_2) over (PARTITION by aggregation_target,
                                                                                                        prop
                                                                                           ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_2 ,
                                                                                          if(has(['technology', 'finance'], prop), prop, 'Other') as prop
              FROM
                (SELECT *,
                        prop_vals as prop
                 FROM
                   (SELECT e.timestamp as timestamp,
                           if(notEmpty(pdi.distinct_id), pdi.person_id, e.person_id) as aggregation_target,
                           if(notEmpty(pdi.distinct_id), pdi.person_id, e.person_id) as person_id,
                           if(event = 'buy', 1, 0) as step_0,
                           if(step_0 = 1, timestamp, null) as latest_0,
                           if(event = 'sign up', 1, 0) as step_1,
                           if(step_1 = 1, timestamp, null) as latest_1,
                           if(event = 'play movie', 1, 0) as step_2,
                           if(step_2 = 1, timestamp, null) as latest_2,
                           replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '') AS prop_basic,
                           prop_basic as prop,
                           argMinIf(prop, timestamp, isNotNull(prop)) over (PARTITION by aggregation_target) as prop_vals
                    FROM events e
                    LEFT OUTER JOIN
                      (SELECT distinct_id,
                              argMax(person_id, version) as person_id
                       FROM person_distinct_id2
                       WHERE team_id = 99999
                         AND distinct_id IN
                           (SELECT distinct_id
                            FROM events
                            WHERE team_id = 99999
                              AND event IN ['buy', 'play movie', 'sign up']
                              AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
                              AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-08 23:59:59', 'UTC') )
                       GROUP BY distinct_id
                       HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
                    LEFT JOIN
                      (SELECT group_key,
                              argMax(group_properties, _timestamp) AS group_properties_0
                       FROM groups
                       WHERE team_id = 99999
                         AND group_type_index = 0
                       GROUP BY group_key) groups_0 ON "$group_0" == groups_0.group_key
                    WHERE team_id = 99999
                      AND event IN ['buy', 'play movie', 'sign up']
                      AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
                      AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-08 23:59:59', 'UTC')
                      AND (step_0 = 1
                           OR step_1 = 1
                           OR step_2 = 1) )))
           WHERE step_0 = 1 ))
     GROUP BY aggregation_target,
              steps,
              prop
     HAVING steps = max_steps)
  WHERE steps IN [2, 3]
    AND arrayFlatten(array(prop)) = arrayFlatten(array('finance'))
  ORDER BY aggregation_target
  LIMIT 100
  OFFSET 0 SETTINGS max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000
  '''
# ---
# name: TestUnorderedFunnelGroupBreakdown.test_funnel_breakdown_group.9
  '''
  
  SELECT replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '') AS value,
         count(*) as count
  FROM events e
  LEFT JOIN
    (SELECT group_key,
            argMax(group_properties, _timestamp) AS group_properties_0
     FROM groups
     WHERE team_id = 99999
       AND group_type_index = 0
     GROUP BY group_key) groups_0 ON "$group_0" == groups_0.group_key
  WHERE team_id = 99999
    AND event IN ['buy', 'play movie', 'sign up']
    AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
    AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-08 23:59:59', 'UTC')
  GROUP BY value
  ORDER BY count DESC, value DESC
  LIMIT 26
  OFFSET 0
  '''
# ---
