# serializer version: 1
# name: TestFunnelTimeToConvert.test_auto_bin_count_single_step
  '''
  SELECT bin_from_seconds,
         person_count,
         arrayAvg(timings) AS averageConversionTime
  FROM
    (SELECT groupArray(arraySum(arraySlice(timings, 1, 1))) AS timings,
            accurateCastOrNull(least(60, greatest(1, ceil(cbrt(ifNull(length(timings), 0))))), 'Int64') AS bin_count,
            floor(arrayMin(timings)) AS min_timing,
            ceil(arrayMax(timings)) AS max_timing,
            ceil(divide(minus(max_timing, min_timing), bin_count)) AS bin_width_seconds_raw,
            if(ifNull(greater(bin_width_seconds_raw, 0), 0), bin_width_seconds_raw, 60) AS bin_width_seconds,
            arrayMap(n -> accurateCastOrNull(round(plus(min_timing, multiply(n, bin_width_seconds))), 'Int64'), range(0, plus(bin_count, 1))) AS buckets,
            arrayMap(timing -> accurateCastOrNull(floor(divide(minus(timing, min_timing), bin_width_seconds)), 'Int64'), timings) AS indices,
            arrayMap(x -> countEqual(indices, minus(x, 1)), range(1, plus(bin_count, 2))) AS counts
     FROM
       (SELECT arraySort(t -> t.1, groupArray(tuple(accurateCastOrNull(timestamp, 'Float64'), uuid, [], arrayFilter(x -> ifNull(notEquals(x, 0), 1), [multiply(1, step_0), multiply(2, step_1), multiply(3, step_2)])))) AS events_array,
               arrayJoin(aggregate_funnel_array(3, 604800, 'first_touch', 'ordered', [[]], arrayFilter((x, x_before, x_after) -> not(and(ifNull(lessOrEquals(length(x.4), 1), 0), ifNull(equals(x.4, x_before.4), isNull(x.4)
                                                                                                                                                                                         and isNull(x_before.4)), ifNull(equals(x.4, x_after.4), isNull(x.4)
                                                                                                                                                                                                                         and isNull(x_after.4)), ifNull(equals(x.3, x_before.3), isNull(x.3)
                                                                                                                                                                                                                                                        and isNull(x_before.3)), ifNull(equals(x.3, x_after.3), isNull(x.3)
                                                                                                                                                                                                                                                                                        and isNull(x_after.3)), ifNull(greater(x.1, x_before.1), 0), ifNull(less(x.1, x_after.1), 0))), events_array, arrayRotateRight(events_array, 1), arrayRotateLeft(events_array, 1)))) AS af_tuple,
               af_tuple.1 AS step_reached,
               plus(af_tuple.1, 1) AS steps,
               af_tuple.2 AS breakdown,
               af_tuple.3 AS timings,
               aggregation_target AS aggregation_target
        FROM
          (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                  if(not(empty(e__override.distinct_id)), e__override.person_id, e.person_id) AS aggregation_target,
                  e.uuid AS uuid,
                  e.`$session_id` AS `$session_id`,
                  e.`$window_id` AS `$window_id`,
                  if(equals(e.event, 'step one'), 1, 0) AS step_0,
                  if(equals(e.event, 'step two'), 1, 0) AS step_1,
                  if(equals(e.event, 'step three'), 1, 0) AS step_2
           FROM events AS e
           LEFT OUTER JOIN
             (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                     person_distinct_id_overrides.distinct_id AS distinct_id
              FROM person_distinct_id_overrides
              WHERE equals(person_distinct_id_overrides.team_id, 99999)
              GROUP BY person_distinct_id_overrides.distinct_id
              HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS e__override ON equals(e.distinct_id, e__override.distinct_id)
           WHERE and(equals(e.team_id, 99999), and(and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('explicit_redacted_timestamp.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('explicit_redacted_timestamp.999999', 6, 'UTC'))), in(e.event, tuple('step one', 'step three', 'step two'))), or(ifNull(equals(step_0, 1), 0), ifNull(equals(step_1, 1), 0), ifNull(equals(step_2, 1), 0))))
        GROUP BY aggregation_target
        HAVING ifNull(greaterOrEquals(step_reached, 0), 0))
     WHERE ifNull(greaterOrEquals(step_reached, 1), 0)) ARRAY
  JOIN counts AS person_count,
       buckets AS bin_from_seconds
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=0,
                     max_ast_elements=4000000,
                     max_expanded_ast_elements=4000000,
                     max_bytes_before_external_group_by=23622320128,
                     allow_experimental_analyzer=1
  '''
# ---
