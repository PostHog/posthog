# serializer version: 1
# name: TestClickhouseFunnelCorrelation.test_action_events_are_excluded_from_correlations
  '''
  SELECT event.event AS name,
         countIf(funnel_actors.actor_id, ifNull(equals(funnel_actors.steps, 2), 0)) AS success_count,
         countIf(funnel_actors.actor_id, ifNull(notEquals(funnel_actors.steps, 2), 1)) AS failure_count
  FROM events AS event
  INNER JOIN
    (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
            person_distinct_id2.distinct_id AS distinct_id
     FROM person_distinct_id2
     WHERE equals(person_distinct_id2.team_id, 2)
     GROUP BY person_distinct_id2.distinct_id
     HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS event__pdi ON equals(event.distinct_id, event__pdi.distinct_id)
  JOIN
    (SELECT aggregation_target AS actor_id,
            timestamp AS timestamp,
            steps AS steps,
            final_timestamp AS final_timestamp,
            first_timestamp AS first_timestamp
     FROM
       (SELECT aggregation_target AS aggregation_target,
               steps AS steps,
               avg(step_1_conversion_time) AS step_1_average_conversion_time_inner,
               median(step_1_conversion_time) AS step_1_median_conversion_time_inner,
               argMax(latest_0, steps) AS timestamp,
               argMax(latest_1, steps) AS final_timestamp,
               argMax(latest_0, steps) AS first_timestamp
        FROM
          (SELECT aggregation_target AS aggregation_target,
                  steps AS steps,
                  max(steps) OVER (PARTITION BY aggregation_target) AS max_steps,
                                  step_1_conversion_time AS step_1_conversion_time,
                                  latest_0 AS latest_0,
                                  latest_1 AS latest_1,
                                  latest_0 AS latest_0
           FROM
             (SELECT aggregation_target AS aggregation_target,
                     timestamp AS timestamp,
                     step_0 AS step_0,
                     latest_0 AS latest_0,
                     step_1 AS step_1,
                     latest_1 AS latest_1,
                     if(and(ifNull(lessOrEquals(latest_0, latest_1), 0), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), 2, 1) AS steps,
                     if(and(isNotNull(latest_1), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), dateDiff('second', latest_0, latest_1), NULL) AS step_1_conversion_time
              FROM
                (SELECT aggregation_target AS aggregation_target,
                        timestamp AS timestamp,
                        step_0 AS step_0,
                        latest_0 AS latest_0,
                        step_1 AS step_1,
                        min(latest_1) OVER (PARTITION BY aggregation_target
                                            ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS latest_1
                 FROM
                   (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                           e__pdi.person_id AS aggregation_target,
                           if(and(equals(e.event, 'user signed up'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, 'key'), ''), 'null'), '^"|"$', ''), 'val'), 0)), 1, 0) AS step_0,
                           if(ifNull(equals(step_0, 1), 0), timestamp, NULL) AS latest_0,
                           if(and(equals(e.event, 'paid'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, 'key'), ''), 'null'), '^"|"$', ''), 'val'), 0)), 1, 0) AS step_1,
                           if(ifNull(equals(step_1, 1), 0), timestamp, NULL) AS latest_1
                    FROM events AS e
                    INNER JOIN
                      (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                              person_distinct_id2.distinct_id AS distinct_id
                       FROM person_distinct_id2
                       WHERE equals(person_distinct_id2.team_id, 2)
                       GROUP BY person_distinct_id2.distinct_id
                       HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
                    WHERE and(equals(e.team_id, 2), and(and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-14 23:59:59.999999', 6, 'UTC'))), in(e.event, tuple('paid', 'user signed up'))), or(ifNull(equals(step_0, 1), 0), ifNull(equals(step_1, 1), 0)))))
              WHERE ifNull(equals(step_0, 1), 0)))
        GROUP BY aggregation_target,
                 steps
        HAVING ifNull(equals(steps, max_steps), isNull(steps)
                      and isNull(max_steps)))
     WHERE ifNull(in(steps, [1, 2]), 0)
     ORDER BY aggregation_target ASC) AS funnel_actors ON equals(event__pdi.person_id, funnel_actors.actor_id)
  WHERE and(equals(event.team_id, 2), greaterOrEquals(toTimeZone(toDateTime(toTimeZone(event.timestamp, 'UTC'), 'UTC'), 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC'))), less(toTimeZone(toDateTime(toTimeZone(event.timestamp, 'UTC'), 'UTC'), 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-14 23:59:59', 6, 'UTC'))), equals(event.team_id, 2), greater(toTimeZone(toDateTime(toTimeZone(event.timestamp, 'UTC'), 'UTC'), 'UTC'), funnel_actors.first_timestamp), less(toTimeZone(toDateTime(toTimeZone(event.timestamp, 'UTC'), 'UTC'), 'UTC'), coalesce(funnel_actors.final_timestamp, plus(toTimeZone(funnel_actors.first_timestamp, 'UTC'), toIntervalDay(14)), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-14 23:59:59', 6, 'UTC')))), notIn(event.event, ['paid', 'user signed up']), notIn(event.event, []))
  GROUP BY name
  LIMIT 100
  UNION ALL
  SELECT 'Total_Values_In_Query' AS name,
         countIf(funnel_actors.actor_id, ifNull(equals(funnel_actors.steps, 2), 0)) AS success_count,
         countIf(funnel_actors.actor_id, ifNull(notEquals(funnel_actors.steps, 2), 1)) AS failure_count
  FROM
    (SELECT aggregation_target AS actor_id,
            timestamp AS timestamp,
            steps AS steps,
            final_timestamp AS final_timestamp,
            first_timestamp AS first_timestamp
     FROM
       (SELECT aggregation_target AS aggregation_target,
               steps AS steps,
               avg(step_1_conversion_time) AS step_1_average_conversion_time_inner,
               median(step_1_conversion_time) AS step_1_median_conversion_time_inner,
               argMax(latest_0, steps) AS timestamp,
               argMax(latest_1, steps) AS final_timestamp,
               argMax(latest_0, steps) AS first_timestamp
        FROM
          (SELECT aggregation_target AS aggregation_target,
                  steps AS steps,
                  max(steps) OVER (PARTITION BY aggregation_target) AS max_steps,
                                  step_1_conversion_time AS step_1_conversion_time,
                                  latest_0 AS latest_0,
                                  latest_1 AS latest_1,
                                  latest_0 AS latest_0
           FROM
             (SELECT aggregation_target AS aggregation_target,
                     timestamp AS timestamp,
                     step_0 AS step_0,
                     latest_0 AS latest_0,
                     step_1 AS step_1,
                     latest_1 AS latest_1,
                     if(and(ifNull(lessOrEquals(latest_0, latest_1), 0), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), 2, 1) AS steps,
                     if(and(isNotNull(latest_1), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), dateDiff('second', latest_0, latest_1), NULL) AS step_1_conversion_time
              FROM
                (SELECT aggregation_target AS aggregation_target,
                        timestamp AS timestamp,
                        step_0 AS step_0,
                        latest_0 AS latest_0,
                        step_1 AS step_1,
                        min(latest_1) OVER (PARTITION BY aggregation_target
                                            ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS latest_1
                 FROM
                   (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                           e__pdi.person_id AS aggregation_target,
                           if(and(equals(e.event, 'user signed up'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, 'key'), ''), 'null'), '^"|"$', ''), 'val'), 0)), 1, 0) AS step_0,
                           if(ifNull(equals(step_0, 1), 0), timestamp, NULL) AS latest_0,
                           if(and(equals(e.event, 'paid'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, 'key'), ''), 'null'), '^"|"$', ''), 'val'), 0)), 1, 0) AS step_1,
                           if(ifNull(equals(step_1, 1), 0), timestamp, NULL) AS latest_1
                    FROM events AS e
                    INNER JOIN
                      (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                              person_distinct_id2.distinct_id AS distinct_id
                       FROM person_distinct_id2
                       WHERE equals(person_distinct_id2.team_id, 2)
                       GROUP BY person_distinct_id2.distinct_id
                       HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
                    WHERE and(equals(e.team_id, 2), and(and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-14 23:59:59.999999', 6, 'UTC'))), in(e.event, tuple('paid', 'user signed up'))), or(ifNull(equals(step_0, 1), 0), ifNull(equals(step_1, 1), 0)))))
              WHERE ifNull(equals(step_0, 1), 0)))
        GROUP BY aggregation_target,
                 steps
        HAVING ifNull(equals(steps, max_steps), isNull(steps)
                      and isNull(max_steps)))
     WHERE ifNull(in(steps, [1, 2]), 0)
     ORDER BY aggregation_target ASC) AS funnel_actors
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '''
# ---
# name: TestClickhouseFunnelCorrelation.test_basic_funnel_correlation_with_properties
  '''
  SELECT concat(ifNull(toString((aggregation_target_with_props.prop).1), ''), '::', ifNull(toString((aggregation_target_with_props.prop).2), '')) AS name,
         countIf(aggregation_target_with_props.actor_id, ifNull(equals(aggregation_target_with_props.steps, 2), 0)) AS success_count,
         countIf(aggregation_target_with_props.actor_id, ifNull(notEquals(aggregation_target_with_props.steps, 2), 1)) AS failure_count
  FROM
    (SELECT funnel_actors.actor_id AS actor_id,
            funnel_actors.steps AS steps,
            arrayJoin(arrayZip(['$browser'], [JSONExtractString(persons.person_props, '$browser')])) AS prop
     FROM
       (SELECT aggregation_target AS actor_id,
               timestamp AS timestamp,
               steps AS steps,
               final_timestamp AS final_timestamp,
               first_timestamp AS first_timestamp
        FROM
          (SELECT aggregation_target AS aggregation_target,
                  steps AS steps,
                  avg(step_1_conversion_time) AS step_1_average_conversion_time_inner,
                  median(step_1_conversion_time) AS step_1_median_conversion_time_inner,
                  argMax(latest_0, steps) AS timestamp,
                  argMax(latest_1, steps) AS final_timestamp,
                  argMax(latest_0, steps) AS first_timestamp
           FROM
             (SELECT aggregation_target AS aggregation_target,
                     steps AS steps,
                     max(steps) OVER (PARTITION BY aggregation_target) AS max_steps,
                                     step_1_conversion_time AS step_1_conversion_time,
                                     latest_0 AS latest_0,
                                     latest_1 AS latest_1,
                                     latest_0 AS latest_0
              FROM
                (SELECT aggregation_target AS aggregation_target,
                        timestamp AS timestamp,
                        step_0 AS step_0,
                        latest_0 AS latest_0,
                        step_1 AS step_1,
                        latest_1 AS latest_1,
                        if(and(ifNull(lessOrEquals(latest_0, latest_1), 0), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), 2, 1) AS steps,
                        if(and(isNotNull(latest_1), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), dateDiff('second', latest_0, latest_1), NULL) AS step_1_conversion_time
                 FROM
                   (SELECT aggregation_target AS aggregation_target,
                           timestamp AS timestamp,
                           step_0 AS step_0,
                           latest_0 AS latest_0,
                           step_1 AS step_1,
                           min(latest_1) OVER (PARTITION BY aggregation_target
                                               ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS latest_1
                    FROM
                      (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                              e__pdi.person_id AS aggregation_target,
                              if(equals(e.event, 'user signed up'), 1, 0) AS step_0,
                              if(ifNull(equals(step_0, 1), 0), timestamp, NULL) AS latest_0,
                              if(equals(e.event, 'paid'), 1, 0) AS step_1,
                              if(ifNull(equals(step_1, 1), 0), timestamp, NULL) AS latest_1
                       FROM events AS e
                       INNER JOIN
                         (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                                 person_distinct_id2.distinct_id AS distinct_id
                          FROM person_distinct_id2
                          WHERE equals(person_distinct_id2.team_id, 2)
                          GROUP BY person_distinct_id2.distinct_id
                          HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
                       WHERE and(equals(e.team_id, 2), and(and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-14 23:59:59.999999', 6, 'UTC'))), in(e.event, tuple('paid', 'user signed up'))), or(ifNull(equals(step_0, 1), 0), ifNull(equals(step_1, 1), 0)))))
                 WHERE ifNull(equals(step_0, 1), 0)))
           GROUP BY aggregation_target,
                    steps
           HAVING ifNull(equals(steps, max_steps), isNull(steps)
                         and isNull(max_steps)))
        WHERE ifNull(in(steps, [1, 2]), 0)
        ORDER BY aggregation_target ASC) AS funnel_actors
     JOIN
       (SELECT persons.id AS id,
               persons.properties AS person_props
        FROM
          (SELECT person.id AS id,
                  person.properties AS properties
           FROM person
           WHERE and(equals(person.team_id, 2), ifNull(in(tuple(person.id, person.version),
                                                            (SELECT person.id AS id, max(person.version) AS version
                                                             FROM person
                                                             WHERE equals(person.team_id, 2)
                                                             GROUP BY person.id
                                                             HAVING ifNull(equals(argMax(person.is_deleted, person.version), 0), 0))), 0)) SETTINGS optimize_aggregation_in_order=1) AS persons) AS persons ON equals(persons.id, funnel_actors.actor_id)) AS aggregation_target_with_props
  GROUP BY (aggregation_target_with_props.prop).1, (aggregation_target_with_props.prop).2
  HAVING ifNull(notIn((aggregation_target_with_props.prop).1, []), 0)
  LIMIT 100
  UNION ALL
  SELECT 'Total_Values_In_Query' AS name,
         countIf(funnel_actors.actor_id, ifNull(equals(funnel_actors.steps, 2), 0)) AS success_count,
         countIf(funnel_actors.actor_id, ifNull(notEquals(funnel_actors.steps, 2), 1)) AS failure_count
  FROM
    (SELECT aggregation_target AS actor_id,
            timestamp AS timestamp,
            steps AS steps,
            final_timestamp AS final_timestamp,
            first_timestamp AS first_timestamp
     FROM
       (SELECT aggregation_target AS aggregation_target,
               steps AS steps,
               avg(step_1_conversion_time) AS step_1_average_conversion_time_inner,
               median(step_1_conversion_time) AS step_1_median_conversion_time_inner,
               argMax(latest_0, steps) AS timestamp,
               argMax(latest_1, steps) AS final_timestamp,
               argMax(latest_0, steps) AS first_timestamp
        FROM
          (SELECT aggregation_target AS aggregation_target,
                  steps AS steps,
                  max(steps) OVER (PARTITION BY aggregation_target) AS max_steps,
                                  step_1_conversion_time AS step_1_conversion_time,
                                  latest_0 AS latest_0,
                                  latest_1 AS latest_1,
                                  latest_0 AS latest_0
           FROM
             (SELECT aggregation_target AS aggregation_target,
                     timestamp AS timestamp,
                     step_0 AS step_0,
                     latest_0 AS latest_0,
                     step_1 AS step_1,
                     latest_1 AS latest_1,
                     if(and(ifNull(lessOrEquals(latest_0, latest_1), 0), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), 2, 1) AS steps,
                     if(and(isNotNull(latest_1), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), dateDiff('second', latest_0, latest_1), NULL) AS step_1_conversion_time
              FROM
                (SELECT aggregation_target AS aggregation_target,
                        timestamp AS timestamp,
                        step_0 AS step_0,
                        latest_0 AS latest_0,
                        step_1 AS step_1,
                        min(latest_1) OVER (PARTITION BY aggregation_target
                                            ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS latest_1
                 FROM
                   (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                           e__pdi.person_id AS aggregation_target,
                           if(equals(e.event, 'user signed up'), 1, 0) AS step_0,
                           if(ifNull(equals(step_0, 1), 0), timestamp, NULL) AS latest_0,
                           if(equals(e.event, 'paid'), 1, 0) AS step_1,
                           if(ifNull(equals(step_1, 1), 0), timestamp, NULL) AS latest_1
                    FROM events AS e
                    INNER JOIN
                      (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                              person_distinct_id2.distinct_id AS distinct_id
                       FROM person_distinct_id2
                       WHERE equals(person_distinct_id2.team_id, 2)
                       GROUP BY person_distinct_id2.distinct_id
                       HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
                    WHERE and(equals(e.team_id, 2), and(and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-14 23:59:59.999999', 6, 'UTC'))), in(e.event, tuple('paid', 'user signed up'))), or(ifNull(equals(step_0, 1), 0), ifNull(equals(step_1, 1), 0)))))
              WHERE ifNull(equals(step_0, 1), 0)))
        GROUP BY aggregation_target,
                 steps
        HAVING ifNull(equals(steps, max_steps), isNull(steps)
                      and isNull(max_steps)))
     WHERE ifNull(in(steps, [1, 2]), 0)
     ORDER BY aggregation_target ASC) AS funnel_actors
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '''
# ---
# name: TestClickhouseFunnelCorrelation.test_basic_funnel_correlation_with_properties.1
  '''
  SELECT persons.id,
         persons.id AS id,
         source.matching_events AS matching_events
  FROM
    (SELECT person.id AS id
     FROM person
     WHERE equals(person.team_id, 2)
     GROUP BY person.id
     HAVING ifNull(equals(argMax(person.is_deleted, person.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS persons
  INNER JOIN
    (SELECT funnel_actors.actor_id AS actor_id,
            any(funnel_actors.matching_events) AS matching_events
     FROM
       (SELECT aggregation_target AS actor_id,
               final_matching_events AS matching_events,
               timestamp AS timestamp,
               steps AS steps,
               final_timestamp AS final_timestamp,
               first_timestamp AS first_timestamp
        FROM
          (SELECT aggregation_target AS aggregation_target,
                  steps AS steps,
                  avg(step_1_conversion_time) AS step_1_average_conversion_time_inner,
                  median(step_1_conversion_time) AS step_1_median_conversion_time_inner,
                  groupArray(10)(step_0_matching_event) AS step_0_matching_events,
                  groupArray(10)(step_1_matching_event) AS step_1_matching_events,
                  groupArray(10)(final_matching_event) AS final_matching_events,
                  argMax(latest_0, steps) AS timestamp,
                  argMax(latest_1, steps) AS final_timestamp,
                  argMax(latest_0, steps) AS first_timestamp
           FROM
             (SELECT aggregation_target AS aggregation_target,
                     steps AS steps,
                     max(steps) OVER (PARTITION BY aggregation_target) AS max_steps,
                                     step_1_conversion_time AS step_1_conversion_time,
                                     tuple(latest_0, uuid_0, `$session_id_0`, `$window_id_0`) AS step_0_matching_event,
                                     tuple(latest_1, uuid_1, `$session_id_1`, `$window_id_1`) AS step_1_matching_event,
                                     if(isNull(latest_0), tuple(NULL, NULL, NULL, NULL), if(isNull(latest_1), step_0_matching_event, step_1_matching_event)) AS final_matching_event,
                                     latest_0 AS latest_0,
                                     latest_1 AS latest_1,
                                     latest_0 AS latest_0
              FROM
                (SELECT aggregation_target AS aggregation_target,
                        timestamp AS timestamp,
                        step_0 AS step_0,
                        latest_0 AS latest_0,
                        uuid_0 AS uuid_0,
                        `$session_id_0` AS `$session_id_0`,
                        `$window_id_0` AS `$window_id_0`,
                        step_1 AS step_1,
                        latest_1 AS latest_1,
                        uuid_1 AS uuid_1,
                        `$session_id_1` AS `$session_id_1`,
                        `$window_id_1` AS `$window_id_1`,
                        if(and(ifNull(lessOrEquals(latest_0, latest_1), 0), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), 2, 1) AS steps,
                        if(and(isNotNull(latest_1), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), dateDiff('second', latest_0, latest_1), NULL) AS step_1_conversion_time,
                        tuple(latest_0, uuid_0, `$session_id_0`, `$window_id_0`) AS step_0_matching_event,
                        tuple(latest_1, uuid_1, `$session_id_1`, `$window_id_1`) AS step_1_matching_event,
                        if(isNull(latest_0), tuple(NULL, NULL, NULL, NULL), if(isNull(latest_1), step_0_matching_event, step_1_matching_event)) AS final_matching_event
                 FROM
                   (SELECT aggregation_target AS aggregation_target,
                           timestamp AS timestamp,
                           step_0 AS step_0,
                           latest_0 AS latest_0,
                           uuid_0 AS uuid_0,
                           `$session_id_0` AS `$session_id_0`,
                           `$window_id_0` AS `$window_id_0`,
                           step_1 AS step_1,
                           min(latest_1) OVER (PARTITION BY aggregation_target
                                               ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS latest_1,
                                              last_value(uuid_1) OVER (PARTITION BY aggregation_target
                                                                       ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS uuid_1,
                                                                      last_value(`$session_id_1`) OVER (PARTITION BY aggregation_target
                                                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS `$session_id_1`,
                                                                                                       last_value(`$window_id_1`) OVER (PARTITION BY aggregation_target
                                                                                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS `$window_id_1`
                    FROM
                      (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                              e__pdi.person_id AS aggregation_target,
                              e.uuid AS uuid,
                              if(equals(e.event, 'user signed up'), 1, 0) AS step_0,
                              if(ifNull(equals(step_0, 1), 0), timestamp, NULL) AS latest_0,
                              if(ifNull(equals(step_0, 1), 0), uuid, NULL) AS uuid_0,
                              if(ifNull(equals(step_0, 1), 0), e.`$session_id`, NULL) AS `$session_id_0`,
                              if(ifNull(equals(step_0, 1), 0), e.`$window_id`, NULL) AS `$window_id_0`,
                              if(equals(e.event, 'paid'), 1, 0) AS step_1,
                              if(ifNull(equals(step_1, 1), 0), timestamp, NULL) AS latest_1,
                              if(ifNull(equals(step_1, 1), 0), uuid, NULL) AS uuid_1,
                              if(ifNull(equals(step_1, 1), 0), e.`$session_id`, NULL) AS `$session_id_1`,
                              if(ifNull(equals(step_1, 1), 0), e.`$window_id`, NULL) AS `$window_id_1`
                       FROM events AS e
                       INNER JOIN
                         (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                                 argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS e__pdi___person_id,
                                 person_distinct_id2.distinct_id AS distinct_id
                          FROM person_distinct_id2
                          WHERE equals(person_distinct_id2.team_id, 2)
                          GROUP BY person_distinct_id2.distinct_id
                          HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
                       INNER JOIN
                         (SELECT person.id AS id,
                                 replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, '$browser'), ''), 'null'), '^"|"$', '') AS `properties___$browser`
                          FROM person
                          WHERE and(equals(person.team_id, 2), ifNull(in(tuple(person.id, person.version),
                                                                           (SELECT person.id AS id, max(person.version) AS version
                                                                            FROM person
                                                                            WHERE equals(person.team_id, 2)
                                                                            GROUP BY person.id
                                                                            HAVING ifNull(equals(argMax(person.is_deleted, person.version), 0), 0))), 0)) SETTINGS optimize_aggregation_in_order=1) AS e__pdi__person ON equals(e__pdi.e__pdi___person_id, e__pdi__person.id)
                       WHERE and(equals(e.team_id, 2), and(and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-14 23:59:59.999999', 6, 'UTC'))), in(e.event, tuple('paid', 'user signed up')), ifNull(equals(e__pdi__person.`properties___$browser`, 'Positive'), 0)), or(ifNull(equals(step_0, 1), 0), ifNull(equals(step_1, 1), 0)))))
                 WHERE ifNull(equals(step_0, 1), 0)))
           GROUP BY aggregation_target,
                    steps
           HAVING ifNull(equals(steps, max_steps), isNull(steps)
                         and isNull(max_steps)))
        WHERE ifNull(in(steps, [1, 2]), 0)
        ORDER BY aggregation_target ASC) AS funnel_actors
     WHERE ifNull(equals(funnel_actors.steps, 2), 0)
     GROUP BY funnel_actors.actor_id
     ORDER BY funnel_actors.actor_id ASC) AS source ON equals(persons.id, source.actor_id)
  ORDER BY persons.id ASC
  LIMIT 101
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1
  '''
# ---
# name: TestClickhouseFunnelCorrelation.test_basic_funnel_correlation_with_properties.2
  '''
  SELECT DISTINCT session_replay_events.session_id AS session_id
  FROM
    (SELECT session_replay_events.session_id AS session_id
     FROM session_replay_events
     WHERE equals(session_replay_events.team_id, 2)
     GROUP BY session_replay_events.session_id) AS session_replay_events
  WHERE ifNull(in(session_replay_events.session_id, ['']), 0)
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '''
# ---
# name: TestClickhouseFunnelCorrelation.test_basic_funnel_correlation_with_properties.3
  '''
  SELECT persons.id,
         persons.id AS id,
         source.matching_events AS matching_events
  FROM
    (SELECT person.id AS id
     FROM person
     WHERE equals(person.team_id, 2)
     GROUP BY person.id
     HAVING ifNull(equals(argMax(person.is_deleted, person.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS persons
  INNER JOIN
    (SELECT funnel_actors.actor_id AS actor_id,
            any(funnel_actors.matching_events) AS matching_events
     FROM
       (SELECT aggregation_target AS actor_id,
               final_matching_events AS matching_events,
               timestamp AS timestamp,
               steps AS steps,
               final_timestamp AS final_timestamp,
               first_timestamp AS first_timestamp
        FROM
          (SELECT aggregation_target AS aggregation_target,
                  steps AS steps,
                  avg(step_1_conversion_time) AS step_1_average_conversion_time_inner,
                  median(step_1_conversion_time) AS step_1_median_conversion_time_inner,
                  groupArray(10)(step_0_matching_event) AS step_0_matching_events,
                  groupArray(10)(step_1_matching_event) AS step_1_matching_events,
                  groupArray(10)(final_matching_event) AS final_matching_events,
                  argMax(latest_0, steps) AS timestamp,
                  argMax(latest_1, steps) AS final_timestamp,
                  argMax(latest_0, steps) AS first_timestamp
           FROM
             (SELECT aggregation_target AS aggregation_target,
                     steps AS steps,
                     max(steps) OVER (PARTITION BY aggregation_target) AS max_steps,
                                     step_1_conversion_time AS step_1_conversion_time,
                                     tuple(latest_0, uuid_0, `$session_id_0`, `$window_id_0`) AS step_0_matching_event,
                                     tuple(latest_1, uuid_1, `$session_id_1`, `$window_id_1`) AS step_1_matching_event,
                                     if(isNull(latest_0), tuple(NULL, NULL, NULL, NULL), if(isNull(latest_1), step_0_matching_event, step_1_matching_event)) AS final_matching_event,
                                     latest_0 AS latest_0,
                                     latest_1 AS latest_1,
                                     latest_0 AS latest_0
              FROM
                (SELECT aggregation_target AS aggregation_target,
                        timestamp AS timestamp,
                        step_0 AS step_0,
                        latest_0 AS latest_0,
                        uuid_0 AS uuid_0,
                        `$session_id_0` AS `$session_id_0`,
                        `$window_id_0` AS `$window_id_0`,
                        step_1 AS step_1,
                        latest_1 AS latest_1,
                        uuid_1 AS uuid_1,
                        `$session_id_1` AS `$session_id_1`,
                        `$window_id_1` AS `$window_id_1`,
                        if(and(ifNull(lessOrEquals(latest_0, latest_1), 0), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), 2, 1) AS steps,
                        if(and(isNotNull(latest_1), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), dateDiff('second', latest_0, latest_1), NULL) AS step_1_conversion_time,
                        tuple(latest_0, uuid_0, `$session_id_0`, `$window_id_0`) AS step_0_matching_event,
                        tuple(latest_1, uuid_1, `$session_id_1`, `$window_id_1`) AS step_1_matching_event,
                        if(isNull(latest_0), tuple(NULL, NULL, NULL, NULL), if(isNull(latest_1), step_0_matching_event, step_1_matching_event)) AS final_matching_event
                 FROM
                   (SELECT aggregation_target AS aggregation_target,
                           timestamp AS timestamp,
                           step_0 AS step_0,
                           latest_0 AS latest_0,
                           uuid_0 AS uuid_0,
                           `$session_id_0` AS `$session_id_0`,
                           `$window_id_0` AS `$window_id_0`,
                           step_1 AS step_1,
                           min(latest_1) OVER (PARTITION BY aggregation_target
                                               ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS latest_1,
                                              last_value(uuid_1) OVER (PARTITION BY aggregation_target
                                                                       ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS uuid_1,
                                                                      last_value(`$session_id_1`) OVER (PARTITION BY aggregation_target
                                                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS `$session_id_1`,
                                                                                                       last_value(`$window_id_1`) OVER (PARTITION BY aggregation_target
                                                                                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS `$window_id_1`
                    FROM
                      (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                              e__pdi.person_id AS aggregation_target,
                              e.uuid AS uuid,
                              if(equals(e.event, 'user signed up'), 1, 0) AS step_0,
                              if(ifNull(equals(step_0, 1), 0), timestamp, NULL) AS latest_0,
                              if(ifNull(equals(step_0, 1), 0), uuid, NULL) AS uuid_0,
                              if(ifNull(equals(step_0, 1), 0), e.`$session_id`, NULL) AS `$session_id_0`,
                              if(ifNull(equals(step_0, 1), 0), e.`$window_id`, NULL) AS `$window_id_0`,
                              if(equals(e.event, 'paid'), 1, 0) AS step_1,
                              if(ifNull(equals(step_1, 1), 0), timestamp, NULL) AS latest_1,
                              if(ifNull(equals(step_1, 1), 0), uuid, NULL) AS uuid_1,
                              if(ifNull(equals(step_1, 1), 0), e.`$session_id`, NULL) AS `$session_id_1`,
                              if(ifNull(equals(step_1, 1), 0), e.`$window_id`, NULL) AS `$window_id_1`
                       FROM events AS e
                       INNER JOIN
                         (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                                 argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS e__pdi___person_id,
                                 person_distinct_id2.distinct_id AS distinct_id
                          FROM person_distinct_id2
                          WHERE equals(person_distinct_id2.team_id, 2)
                          GROUP BY person_distinct_id2.distinct_id
                          HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
                       INNER JOIN
                         (SELECT person.id AS id,
                                 replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, '$browser'), ''), 'null'), '^"|"$', '') AS `properties___$browser`
                          FROM person
                          WHERE and(equals(person.team_id, 2), ifNull(in(tuple(person.id, person.version),
                                                                           (SELECT person.id AS id, max(person.version) AS version
                                                                            FROM person
                                                                            WHERE equals(person.team_id, 2)
                                                                            GROUP BY person.id
                                                                            HAVING ifNull(equals(argMax(person.is_deleted, person.version), 0), 0))), 0)) SETTINGS optimize_aggregation_in_order=1) AS e__pdi__person ON equals(e__pdi.e__pdi___person_id, e__pdi__person.id)
                       WHERE and(equals(e.team_id, 2), and(and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-14 23:59:59.999999', 6, 'UTC'))), in(e.event, tuple('paid', 'user signed up')), ifNull(equals(e__pdi__person.`properties___$browser`, 'Positive'), 0)), or(ifNull(equals(step_0, 1), 0), ifNull(equals(step_1, 1), 0)))))
                 WHERE ifNull(equals(step_0, 1), 0)))
           GROUP BY aggregation_target,
                    steps
           HAVING ifNull(equals(steps, max_steps), isNull(steps)
                         and isNull(max_steps)))
        WHERE ifNull(in(steps, [1, 2]), 0)
        ORDER BY aggregation_target ASC) AS funnel_actors
     WHERE ifNull(notEquals(funnel_actors.steps, 2), 1)
     GROUP BY funnel_actors.actor_id
     ORDER BY funnel_actors.actor_id ASC) AS source ON equals(persons.id, source.actor_id)
  ORDER BY persons.id ASC
  LIMIT 101
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1
  '''
# ---
# name: TestClickhouseFunnelCorrelation.test_basic_funnel_correlation_with_properties.4
  '''
  SELECT DISTINCT session_replay_events.session_id AS session_id
  FROM
    (SELECT session_replay_events.session_id AS session_id
     FROM session_replay_events
     WHERE equals(session_replay_events.team_id, 2)
     GROUP BY session_replay_events.session_id) AS session_replay_events
  WHERE ifNull(in(session_replay_events.session_id, ['']), 0)
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '''
# ---
# name: TestClickhouseFunnelCorrelation.test_basic_funnel_correlation_with_properties.5
  '''
  SELECT persons.id,
         persons.id AS id,
         source.matching_events AS matching_events
  FROM
    (SELECT person.id AS id
     FROM person
     WHERE equals(person.team_id, 2)
     GROUP BY person.id
     HAVING ifNull(equals(argMax(person.is_deleted, person.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS persons
  INNER JOIN
    (SELECT funnel_actors.actor_id AS actor_id,
            any(funnel_actors.matching_events) AS matching_events
     FROM
       (SELECT aggregation_target AS actor_id,
               final_matching_events AS matching_events,
               timestamp AS timestamp,
               steps AS steps,
               final_timestamp AS final_timestamp,
               first_timestamp AS first_timestamp
        FROM
          (SELECT aggregation_target AS aggregation_target,
                  steps AS steps,
                  avg(step_1_conversion_time) AS step_1_average_conversion_time_inner,
                  median(step_1_conversion_time) AS step_1_median_conversion_time_inner,
                  groupArray(10)(step_0_matching_event) AS step_0_matching_events,
                  groupArray(10)(step_1_matching_event) AS step_1_matching_events,
                  groupArray(10)(final_matching_event) AS final_matching_events,
                  argMax(latest_0, steps) AS timestamp,
                  argMax(latest_1, steps) AS final_timestamp,
                  argMax(latest_0, steps) AS first_timestamp
           FROM
             (SELECT aggregation_target AS aggregation_target,
                     steps AS steps,
                     max(steps) OVER (PARTITION BY aggregation_target) AS max_steps,
                                     step_1_conversion_time AS step_1_conversion_time,
                                     tuple(latest_0, uuid_0, `$session_id_0`, `$window_id_0`) AS step_0_matching_event,
                                     tuple(latest_1, uuid_1, `$session_id_1`, `$window_id_1`) AS step_1_matching_event,
                                     if(isNull(latest_0), tuple(NULL, NULL, NULL, NULL), if(isNull(latest_1), step_0_matching_event, step_1_matching_event)) AS final_matching_event,
                                     latest_0 AS latest_0,
                                     latest_1 AS latest_1,
                                     latest_0 AS latest_0
              FROM
                (SELECT aggregation_target AS aggregation_target,
                        timestamp AS timestamp,
                        step_0 AS step_0,
                        latest_0 AS latest_0,
                        uuid_0 AS uuid_0,
                        `$session_id_0` AS `$session_id_0`,
                        `$window_id_0` AS `$window_id_0`,
                        step_1 AS step_1,
                        latest_1 AS latest_1,
                        uuid_1 AS uuid_1,
                        `$session_id_1` AS `$session_id_1`,
                        `$window_id_1` AS `$window_id_1`,
                        if(and(ifNull(lessOrEquals(latest_0, latest_1), 0), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), 2, 1) AS steps,
                        if(and(isNotNull(latest_1), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), dateDiff('second', latest_0, latest_1), NULL) AS step_1_conversion_time,
                        tuple(latest_0, uuid_0, `$session_id_0`, `$window_id_0`) AS step_0_matching_event,
                        tuple(latest_1, uuid_1, `$session_id_1`, `$window_id_1`) AS step_1_matching_event,
                        if(isNull(latest_0), tuple(NULL, NULL, NULL, NULL), if(isNull(latest_1), step_0_matching_event, step_1_matching_event)) AS final_matching_event
                 FROM
                   (SELECT aggregation_target AS aggregation_target,
                           timestamp AS timestamp,
                           step_0 AS step_0,
                           latest_0 AS latest_0,
                           uuid_0 AS uuid_0,
                           `$session_id_0` AS `$session_id_0`,
                           `$window_id_0` AS `$window_id_0`,
                           step_1 AS step_1,
                           min(latest_1) OVER (PARTITION BY aggregation_target
                                               ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS latest_1,
                                              last_value(uuid_1) OVER (PARTITION BY aggregation_target
                                                                       ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS uuid_1,
                                                                      last_value(`$session_id_1`) OVER (PARTITION BY aggregation_target
                                                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS `$session_id_1`,
                                                                                                       last_value(`$window_id_1`) OVER (PARTITION BY aggregation_target
                                                                                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS `$window_id_1`
                    FROM
                      (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                              e__pdi.person_id AS aggregation_target,
                              e.uuid AS uuid,
                              if(equals(e.event, 'user signed up'), 1, 0) AS step_0,
                              if(ifNull(equals(step_0, 1), 0), timestamp, NULL) AS latest_0,
                              if(ifNull(equals(step_0, 1), 0), uuid, NULL) AS uuid_0,
                              if(ifNull(equals(step_0, 1), 0), e.`$session_id`, NULL) AS `$session_id_0`,
                              if(ifNull(equals(step_0, 1), 0), e.`$window_id`, NULL) AS `$window_id_0`,
                              if(equals(e.event, 'paid'), 1, 0) AS step_1,
                              if(ifNull(equals(step_1, 1), 0), timestamp, NULL) AS latest_1,
                              if(ifNull(equals(step_1, 1), 0), uuid, NULL) AS uuid_1,
                              if(ifNull(equals(step_1, 1), 0), e.`$session_id`, NULL) AS `$session_id_1`,
                              if(ifNull(equals(step_1, 1), 0), e.`$window_id`, NULL) AS `$window_id_1`
                       FROM events AS e
                       INNER JOIN
                         (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                                 argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS e__pdi___person_id,
                                 person_distinct_id2.distinct_id AS distinct_id
                          FROM person_distinct_id2
                          WHERE equals(person_distinct_id2.team_id, 2)
                          GROUP BY person_distinct_id2.distinct_id
                          HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
                       INNER JOIN
                         (SELECT person.id AS id,
                                 replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, '$browser'), ''), 'null'), '^"|"$', '') AS `properties___$browser`
                          FROM person
                          WHERE and(equals(person.team_id, 2), ifNull(in(tuple(person.id, person.version),
                                                                           (SELECT person.id AS id, max(person.version) AS version
                                                                            FROM person
                                                                            WHERE equals(person.team_id, 2)
                                                                            GROUP BY person.id
                                                                            HAVING ifNull(equals(argMax(person.is_deleted, person.version), 0), 0))), 0)) SETTINGS optimize_aggregation_in_order=1) AS e__pdi__person ON equals(e__pdi.e__pdi___person_id, e__pdi__person.id)
                       WHERE and(equals(e.team_id, 2), and(and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-14 23:59:59.999999', 6, 'UTC'))), in(e.event, tuple('paid', 'user signed up')), ifNull(equals(e__pdi__person.`properties___$browser`, 'Negative'), 0)), or(ifNull(equals(step_0, 1), 0), ifNull(equals(step_1, 1), 0)))))
                 WHERE ifNull(equals(step_0, 1), 0)))
           GROUP BY aggregation_target,
                    steps
           HAVING ifNull(equals(steps, max_steps), isNull(steps)
                         and isNull(max_steps)))
        WHERE ifNull(in(steps, [1, 2]), 0)
        ORDER BY aggregation_target ASC) AS funnel_actors
     WHERE ifNull(equals(funnel_actors.steps, 2), 0)
     GROUP BY funnel_actors.actor_id
     ORDER BY funnel_actors.actor_id ASC) AS source ON equals(persons.id, source.actor_id)
  ORDER BY persons.id ASC
  LIMIT 101
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1
  '''
# ---
# name: TestClickhouseFunnelCorrelation.test_basic_funnel_correlation_with_properties.6
  '''
  SELECT DISTINCT session_replay_events.session_id AS session_id
  FROM
    (SELECT session_replay_events.session_id AS session_id
     FROM session_replay_events
     WHERE equals(session_replay_events.team_id, 2)
     GROUP BY session_replay_events.session_id) AS session_replay_events
  WHERE ifNull(in(session_replay_events.session_id, ['']), 0)
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '''
# ---
# name: TestClickhouseFunnelCorrelation.test_basic_funnel_correlation_with_properties.7
  '''
  SELECT persons.id,
         persons.id AS id,
         source.matching_events AS matching_events
  FROM
    (SELECT person.id AS id
     FROM person
     WHERE equals(person.team_id, 2)
     GROUP BY person.id
     HAVING ifNull(equals(argMax(person.is_deleted, person.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS persons
  INNER JOIN
    (SELECT funnel_actors.actor_id AS actor_id,
            any(funnel_actors.matching_events) AS matching_events
     FROM
       (SELECT aggregation_target AS actor_id,
               final_matching_events AS matching_events,
               timestamp AS timestamp,
               steps AS steps,
               final_timestamp AS final_timestamp,
               first_timestamp AS first_timestamp
        FROM
          (SELECT aggregation_target AS aggregation_target,
                  steps AS steps,
                  avg(step_1_conversion_time) AS step_1_average_conversion_time_inner,
                  median(step_1_conversion_time) AS step_1_median_conversion_time_inner,
                  groupArray(10)(step_0_matching_event) AS step_0_matching_events,
                  groupArray(10)(step_1_matching_event) AS step_1_matching_events,
                  groupArray(10)(final_matching_event) AS final_matching_events,
                  argMax(latest_0, steps) AS timestamp,
                  argMax(latest_1, steps) AS final_timestamp,
                  argMax(latest_0, steps) AS first_timestamp
           FROM
             (SELECT aggregation_target AS aggregation_target,
                     steps AS steps,
                     max(steps) OVER (PARTITION BY aggregation_target) AS max_steps,
                                     step_1_conversion_time AS step_1_conversion_time,
                                     tuple(latest_0, uuid_0, `$session_id_0`, `$window_id_0`) AS step_0_matching_event,
                                     tuple(latest_1, uuid_1, `$session_id_1`, `$window_id_1`) AS step_1_matching_event,
                                     if(isNull(latest_0), tuple(NULL, NULL, NULL, NULL), if(isNull(latest_1), step_0_matching_event, step_1_matching_event)) AS final_matching_event,
                                     latest_0 AS latest_0,
                                     latest_1 AS latest_1,
                                     latest_0 AS latest_0
              FROM
                (SELECT aggregation_target AS aggregation_target,
                        timestamp AS timestamp,
                        step_0 AS step_0,
                        latest_0 AS latest_0,
                        uuid_0 AS uuid_0,
                        `$session_id_0` AS `$session_id_0`,
                        `$window_id_0` AS `$window_id_0`,
                        step_1 AS step_1,
                        latest_1 AS latest_1,
                        uuid_1 AS uuid_1,
                        `$session_id_1` AS `$session_id_1`,
                        `$window_id_1` AS `$window_id_1`,
                        if(and(ifNull(lessOrEquals(latest_0, latest_1), 0), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), 2, 1) AS steps,
                        if(and(isNotNull(latest_1), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), dateDiff('second', latest_0, latest_1), NULL) AS step_1_conversion_time,
                        tuple(latest_0, uuid_0, `$session_id_0`, `$window_id_0`) AS step_0_matching_event,
                        tuple(latest_1, uuid_1, `$session_id_1`, `$window_id_1`) AS step_1_matching_event,
                        if(isNull(latest_0), tuple(NULL, NULL, NULL, NULL), if(isNull(latest_1), step_0_matching_event, step_1_matching_event)) AS final_matching_event
                 FROM
                   (SELECT aggregation_target AS aggregation_target,
                           timestamp AS timestamp,
                           step_0 AS step_0,
                           latest_0 AS latest_0,
                           uuid_0 AS uuid_0,
                           `$session_id_0` AS `$session_id_0`,
                           `$window_id_0` AS `$window_id_0`,
                           step_1 AS step_1,
                           min(latest_1) OVER (PARTITION BY aggregation_target
                                               ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS latest_1,
                                              last_value(uuid_1) OVER (PARTITION BY aggregation_target
                                                                       ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS uuid_1,
                                                                      last_value(`$session_id_1`) OVER (PARTITION BY aggregation_target
                                                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS `$session_id_1`,
                                                                                                       last_value(`$window_id_1`) OVER (PARTITION BY aggregation_target
                                                                                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS `$window_id_1`
                    FROM
                      (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                              e__pdi.person_id AS aggregation_target,
                              e.uuid AS uuid,
                              if(equals(e.event, 'user signed up'), 1, 0) AS step_0,
                              if(ifNull(equals(step_0, 1), 0), timestamp, NULL) AS latest_0,
                              if(ifNull(equals(step_0, 1), 0), uuid, NULL) AS uuid_0,
                              if(ifNull(equals(step_0, 1), 0), e.`$session_id`, NULL) AS `$session_id_0`,
                              if(ifNull(equals(step_0, 1), 0), e.`$window_id`, NULL) AS `$window_id_0`,
                              if(equals(e.event, 'paid'), 1, 0) AS step_1,
                              if(ifNull(equals(step_1, 1), 0), timestamp, NULL) AS latest_1,
                              if(ifNull(equals(step_1, 1), 0), uuid, NULL) AS uuid_1,
                              if(ifNull(equals(step_1, 1), 0), e.`$session_id`, NULL) AS `$session_id_1`,
                              if(ifNull(equals(step_1, 1), 0), e.`$window_id`, NULL) AS `$window_id_1`
                       FROM events AS e
                       INNER JOIN
                         (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                                 argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS e__pdi___person_id,
                                 person_distinct_id2.distinct_id AS distinct_id
                          FROM person_distinct_id2
                          WHERE equals(person_distinct_id2.team_id, 2)
                          GROUP BY person_distinct_id2.distinct_id
                          HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
                       INNER JOIN
                         (SELECT person.id AS id,
                                 replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, '$browser'), ''), 'null'), '^"|"$', '') AS `properties___$browser`
                          FROM person
                          WHERE and(equals(person.team_id, 2), ifNull(in(tuple(person.id, person.version),
                                                                           (SELECT person.id AS id, max(person.version) AS version
                                                                            FROM person
                                                                            WHERE equals(person.team_id, 2)
                                                                            GROUP BY person.id
                                                                            HAVING ifNull(equals(argMax(person.is_deleted, person.version), 0), 0))), 0)) SETTINGS optimize_aggregation_in_order=1) AS e__pdi__person ON equals(e__pdi.e__pdi___person_id, e__pdi__person.id)
                       WHERE and(equals(e.team_id, 2), and(and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-14 23:59:59.999999', 6, 'UTC'))), in(e.event, tuple('paid', 'user signed up')), ifNull(equals(e__pdi__person.`properties___$browser`, 'Negative'), 0)), or(ifNull(equals(step_0, 1), 0), ifNull(equals(step_1, 1), 0)))))
                 WHERE ifNull(equals(step_0, 1), 0)))
           GROUP BY aggregation_target,
                    steps
           HAVING ifNull(equals(steps, max_steps), isNull(steps)
                         and isNull(max_steps)))
        WHERE ifNull(in(steps, [1, 2]), 0)
        ORDER BY aggregation_target ASC) AS funnel_actors
     WHERE ifNull(notEquals(funnel_actors.steps, 2), 1)
     GROUP BY funnel_actors.actor_id
     ORDER BY funnel_actors.actor_id ASC) AS source ON equals(persons.id, source.actor_id)
  ORDER BY persons.id ASC
  LIMIT 101
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1
  '''
# ---
# name: TestClickhouseFunnelCorrelation.test_basic_funnel_correlation_with_properties.8
  '''
  SELECT DISTINCT session_replay_events.session_id AS session_id
  FROM
    (SELECT session_replay_events.session_id AS session_id
     FROM session_replay_events
     WHERE equals(session_replay_events.team_id, 2)
     GROUP BY session_replay_events.session_id) AS session_replay_events
  WHERE ifNull(in(session_replay_events.session_id, ['']), 0)
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '''
# ---
# name: TestClickhouseFunnelCorrelation.test_funnel_correlation_with_event_properties_and_groups
  '''
  SELECT concat(ifNull(toString(event_name), ''), '::', ifNull(toString((prop).1), ''), '::', ifNull(toString((prop).2), '')) AS name,
         countIf(actor_id, ifNull(equals(steps, 2), 0)) AS success_count,
         countIf(actor_id, ifNull(notEquals(steps, 2), 1)) AS failure_count
  FROM
    (SELECT funnel_actors.actor_id AS actor_id,
            funnel_actors.steps AS steps,
            event.event AS event_name,
            arrayJoin(JSONExtractKeysAndValues(event.properties, 'String')) AS prop
     FROM events AS event
     JOIN
       (SELECT aggregation_target AS actor_id,
               timestamp AS timestamp,
               steps AS steps,
               final_timestamp AS final_timestamp,
               first_timestamp AS first_timestamp
        FROM
          (SELECT aggregation_target AS aggregation_target,
                  steps AS steps,
                  avg(step_1_conversion_time) AS step_1_average_conversion_time_inner,
                  median(step_1_conversion_time) AS step_1_median_conversion_time_inner,
                  argMax(latest_0, steps) AS timestamp,
                  argMax(latest_1, steps) AS final_timestamp,
                  argMax(latest_0, steps) AS first_timestamp
           FROM
             (SELECT aggregation_target AS aggregation_target,
                     steps AS steps,
                     max(steps) OVER (PARTITION BY aggregation_target) AS max_steps,
                                     step_1_conversion_time AS step_1_conversion_time,
                                     latest_0 AS latest_0,
                                     latest_1 AS latest_1,
                                     latest_0 AS latest_0
              FROM
                (SELECT aggregation_target AS aggregation_target,
                        timestamp AS timestamp,
                        step_0 AS step_0,
                        latest_0 AS latest_0,
                        step_1 AS step_1,
                        latest_1 AS latest_1,
                        if(and(ifNull(lessOrEquals(latest_0, latest_1), 0), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), 2, 1) AS steps,
                        if(and(isNotNull(latest_1), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), dateDiff('second', latest_0, latest_1), NULL) AS step_1_conversion_time
                 FROM
                   (SELECT aggregation_target AS aggregation_target,
                           timestamp AS timestamp,
                           step_0 AS step_0,
                           latest_0 AS latest_0,
                           step_1 AS step_1,
                           min(latest_1) OVER (PARTITION BY aggregation_target
                                               ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS latest_1
                    FROM
                      (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                              e.`$group_1` AS aggregation_target,
                              if(equals(e.event, 'user signed up'), 1, 0) AS step_0,
                              if(ifNull(equals(step_0, 1), 0), timestamp, NULL) AS latest_0,
                              if(equals(e.event, 'paid'), 1, 0) AS step_1,
                              if(ifNull(equals(step_1, 1), 0), timestamp, NULL) AS latest_1
                       FROM events AS e
                       WHERE and(equals(e.team_id, 2), and(and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-14 23:59:59.999999', 6, 'UTC'))), in(e.event, tuple('paid', 'user signed up'))), or(ifNull(equals(step_0, 1), 0), ifNull(equals(step_1, 1), 0)))))
                 WHERE ifNull(equals(step_0, 1), 0)))
           GROUP BY aggregation_target,
                    steps
           HAVING ifNull(equals(steps, max_steps), isNull(steps)
                         and isNull(max_steps)))
        WHERE ifNull(in(steps, [1, 2]), 0)
        ORDER BY aggregation_target ASC) AS funnel_actors ON equals(funnel_actors.actor_id, event.`$group_1`)
     WHERE and(equals(event.team_id, 2), greaterOrEquals(toTimeZone(toDateTime(toTimeZone(event.timestamp, 'UTC'), 'UTC'), 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC'))), less(toTimeZone(toDateTime(toTimeZone(event.timestamp, 'UTC'), 'UTC'), 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-14 23:59:59', 6, 'UTC'))), equals(event.team_id, 2), greater(toTimeZone(toDateTime(toTimeZone(event.timestamp, 'UTC'), 'UTC'), 'UTC'), funnel_actors.first_timestamp), less(toTimeZone(toDateTime(toTimeZone(event.timestamp, 'UTC'), 'UTC'), 'UTC'), coalesce(funnel_actors.final_timestamp, plus(toTimeZone(funnel_actors.first_timestamp, 'UTC'), toIntervalDay(14)), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-14 23:59:59', 6, 'UTC')))), notIn(event.event, ['paid', 'user signed up']), in(event.event, ['positively_related', 'negatively_related'])))
  GROUP BY name
  HAVING and(ifNull(greater(plus(success_count, failure_count), 2), 0), ifNull(notIn((prop).1, []), 0))
  LIMIT 100
  UNION ALL
  SELECT 'Total_Values_In_Query' AS name,
         countIf(funnel_actors.actor_id, ifNull(equals(funnel_actors.steps, 2), 0)) AS success_count,
         countIf(funnel_actors.actor_id, ifNull(notEquals(funnel_actors.steps, 2), 1)) AS failure_count
  FROM
    (SELECT aggregation_target AS actor_id,
            timestamp AS timestamp,
            steps AS steps,
            final_timestamp AS final_timestamp,
            first_timestamp AS first_timestamp
     FROM
       (SELECT aggregation_target AS aggregation_target,
               steps AS steps,
               avg(step_1_conversion_time) AS step_1_average_conversion_time_inner,
               median(step_1_conversion_time) AS step_1_median_conversion_time_inner,
               argMax(latest_0, steps) AS timestamp,
               argMax(latest_1, steps) AS final_timestamp,
               argMax(latest_0, steps) AS first_timestamp
        FROM
          (SELECT aggregation_target AS aggregation_target,
                  steps AS steps,
                  max(steps) OVER (PARTITION BY aggregation_target) AS max_steps,
                                  step_1_conversion_time AS step_1_conversion_time,
                                  latest_0 AS latest_0,
                                  latest_1 AS latest_1,
                                  latest_0 AS latest_0
           FROM
             (SELECT aggregation_target AS aggregation_target,
                     timestamp AS timestamp,
                     step_0 AS step_0,
                     latest_0 AS latest_0,
                     step_1 AS step_1,
                     latest_1 AS latest_1,
                     if(and(ifNull(lessOrEquals(latest_0, latest_1), 0), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), 2, 1) AS steps,
                     if(and(isNotNull(latest_1), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), dateDiff('second', latest_0, latest_1), NULL) AS step_1_conversion_time
              FROM
                (SELECT aggregation_target AS aggregation_target,
                        timestamp AS timestamp,
                        step_0 AS step_0,
                        latest_0 AS latest_0,
                        step_1 AS step_1,
                        min(latest_1) OVER (PARTITION BY aggregation_target
                                            ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS latest_1
                 FROM
                   (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                           e.`$group_1` AS aggregation_target,
                           if(equals(e.event, 'user signed up'), 1, 0) AS step_0,
                           if(ifNull(equals(step_0, 1), 0), timestamp, NULL) AS latest_0,
                           if(equals(e.event, 'paid'), 1, 0) AS step_1,
                           if(ifNull(equals(step_1, 1), 0), timestamp, NULL) AS latest_1
                    FROM events AS e
                    WHERE and(equals(e.team_id, 2), and(and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-14 23:59:59.999999', 6, 'UTC'))), in(e.event, tuple('paid', 'user signed up'))), or(ifNull(equals(step_0, 1), 0), ifNull(equals(step_1, 1), 0)))))
              WHERE ifNull(equals(step_0, 1), 0)))
        GROUP BY aggregation_target,
                 steps
        HAVING ifNull(equals(steps, max_steps), isNull(steps)
                      and isNull(max_steps)))
     WHERE ifNull(in(steps, [1, 2]), 0)
     ORDER BY aggregation_target ASC) AS funnel_actors
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '''
# ---
# name: TestClickhouseFunnelCorrelation.test_funnel_correlation_with_event_properties_and_groups_materialized
  '''
  SELECT concat(ifNull(toString(event_name), ''), '::', ifNull(toString((prop).1), ''), '::', ifNull(toString((prop).2), '')) AS name,
         countIf(actor_id, ifNull(equals(steps, 2), 0)) AS success_count,
         countIf(actor_id, ifNull(notEquals(steps, 2), 1)) AS failure_count
  FROM
    (SELECT funnel_actors.actor_id AS actor_id,
            funnel_actors.steps AS steps,
            event.event AS event_name,
            arrayJoin(JSONExtractKeysAndValues(event.properties, 'String')) AS prop
     FROM events AS event
     JOIN
       (SELECT aggregation_target AS actor_id,
               timestamp AS timestamp,
               steps AS steps,
               final_timestamp AS final_timestamp,
               first_timestamp AS first_timestamp
        FROM
          (SELECT aggregation_target AS aggregation_target,
                  steps AS steps,
                  avg(step_1_conversion_time) AS step_1_average_conversion_time_inner,
                  median(step_1_conversion_time) AS step_1_median_conversion_time_inner,
                  argMax(latest_0, steps) AS timestamp,
                  argMax(latest_1, steps) AS final_timestamp,
                  argMax(latest_0, steps) AS first_timestamp
           FROM
             (SELECT aggregation_target AS aggregation_target,
                     steps AS steps,
                     max(steps) OVER (PARTITION BY aggregation_target) AS max_steps,
                                     step_1_conversion_time AS step_1_conversion_time,
                                     latest_0 AS latest_0,
                                     latest_1 AS latest_1,
                                     latest_0 AS latest_0
              FROM
                (SELECT aggregation_target AS aggregation_target,
                        timestamp AS timestamp,
                        step_0 AS step_0,
                        latest_0 AS latest_0,
                        step_1 AS step_1,
                        latest_1 AS latest_1,
                        if(and(ifNull(lessOrEquals(latest_0, latest_1), 0), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), 2, 1) AS steps,
                        if(and(isNotNull(latest_1), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), dateDiff('second', latest_0, latest_1), NULL) AS step_1_conversion_time
                 FROM
                   (SELECT aggregation_target AS aggregation_target,
                           timestamp AS timestamp,
                           step_0 AS step_0,
                           latest_0 AS latest_0,
                           step_1 AS step_1,
                           min(latest_1) OVER (PARTITION BY aggregation_target
                                               ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS latest_1
                    FROM
                      (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                              e.`$group_1` AS aggregation_target,
                              if(equals(e.event, 'user signed up'), 1, 0) AS step_0,
                              if(ifNull(equals(step_0, 1), 0), timestamp, NULL) AS latest_0,
                              if(equals(e.event, 'paid'), 1, 0) AS step_1,
                              if(ifNull(equals(step_1, 1), 0), timestamp, NULL) AS latest_1
                       FROM events AS e
                       WHERE and(equals(e.team_id, 2), and(and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-14 23:59:59.999999', 6, 'UTC'))), in(e.event, tuple('paid', 'user signed up'))), or(ifNull(equals(step_0, 1), 0), ifNull(equals(step_1, 1), 0)))))
                 WHERE ifNull(equals(step_0, 1), 0)))
           GROUP BY aggregation_target,
                    steps
           HAVING ifNull(equals(steps, max_steps), isNull(steps)
                         and isNull(max_steps)))
        WHERE ifNull(in(steps, [1, 2]), 0)
        ORDER BY aggregation_target ASC) AS funnel_actors ON equals(funnel_actors.actor_id, event.`$group_1`)
     WHERE and(equals(event.team_id, 2), greaterOrEquals(toTimeZone(toDateTime(toTimeZone(event.timestamp, 'UTC'), 'UTC'), 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC'))), less(toTimeZone(toDateTime(toTimeZone(event.timestamp, 'UTC'), 'UTC'), 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-14 23:59:59', 6, 'UTC'))), equals(event.team_id, 2), greater(toTimeZone(toDateTime(toTimeZone(event.timestamp, 'UTC'), 'UTC'), 'UTC'), funnel_actors.first_timestamp), less(toTimeZone(toDateTime(toTimeZone(event.timestamp, 'UTC'), 'UTC'), 'UTC'), coalesce(funnel_actors.final_timestamp, plus(toTimeZone(funnel_actors.first_timestamp, 'UTC'), toIntervalDay(14)), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-14 23:59:59', 6, 'UTC')))), notIn(event.event, ['paid', 'user signed up']), in(event.event, ['positively_related', 'negatively_related'])))
  GROUP BY name
  HAVING and(ifNull(greater(plus(success_count, failure_count), 2), 0), ifNull(notIn((prop).1, []), 0))
  LIMIT 100
  UNION ALL
  SELECT 'Total_Values_In_Query' AS name,
         countIf(funnel_actors.actor_id, ifNull(equals(funnel_actors.steps, 2), 0)) AS success_count,
         countIf(funnel_actors.actor_id, ifNull(notEquals(funnel_actors.steps, 2), 1)) AS failure_count
  FROM
    (SELECT aggregation_target AS actor_id,
            timestamp AS timestamp,
            steps AS steps,
            final_timestamp AS final_timestamp,
            first_timestamp AS first_timestamp
     FROM
       (SELECT aggregation_target AS aggregation_target,
               steps AS steps,
               avg(step_1_conversion_time) AS step_1_average_conversion_time_inner,
               median(step_1_conversion_time) AS step_1_median_conversion_time_inner,
               argMax(latest_0, steps) AS timestamp,
               argMax(latest_1, steps) AS final_timestamp,
               argMax(latest_0, steps) AS first_timestamp
        FROM
          (SELECT aggregation_target AS aggregation_target,
                  steps AS steps,
                  max(steps) OVER (PARTITION BY aggregation_target) AS max_steps,
                                  step_1_conversion_time AS step_1_conversion_time,
                                  latest_0 AS latest_0,
                                  latest_1 AS latest_1,
                                  latest_0 AS latest_0
           FROM
             (SELECT aggregation_target AS aggregation_target,
                     timestamp AS timestamp,
                     step_0 AS step_0,
                     latest_0 AS latest_0,
                     step_1 AS step_1,
                     latest_1 AS latest_1,
                     if(and(ifNull(lessOrEquals(latest_0, latest_1), 0), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), 2, 1) AS steps,
                     if(and(isNotNull(latest_1), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), dateDiff('second', latest_0, latest_1), NULL) AS step_1_conversion_time
              FROM
                (SELECT aggregation_target AS aggregation_target,
                        timestamp AS timestamp,
                        step_0 AS step_0,
                        latest_0 AS latest_0,
                        step_1 AS step_1,
                        min(latest_1) OVER (PARTITION BY aggregation_target
                                            ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS latest_1
                 FROM
                   (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                           e.`$group_1` AS aggregation_target,
                           if(equals(e.event, 'user signed up'), 1, 0) AS step_0,
                           if(ifNull(equals(step_0, 1), 0), timestamp, NULL) AS latest_0,
                           if(equals(e.event, 'paid'), 1, 0) AS step_1,
                           if(ifNull(equals(step_1, 1), 0), timestamp, NULL) AS latest_1
                    FROM events AS e
                    WHERE and(equals(e.team_id, 2), and(and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-14 23:59:59.999999', 6, 'UTC'))), in(e.event, tuple('paid', 'user signed up'))), or(ifNull(equals(step_0, 1), 0), ifNull(equals(step_1, 1), 0)))))
              WHERE ifNull(equals(step_0, 1), 0)))
        GROUP BY aggregation_target,
                 steps
        HAVING ifNull(equals(steps, max_steps), isNull(steps)
                      and isNull(max_steps)))
     WHERE ifNull(in(steps, [1, 2]), 0)
     ORDER BY aggregation_target ASC) AS funnel_actors
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '''
# ---
# name: TestClickhouseFunnelCorrelation.test_funnel_correlation_with_events_and_groups
  '''
  SELECT event.event AS name,
         countIf(funnel_actors.actor_id, ifNull(equals(funnel_actors.steps, 2), 0)) AS success_count,
         countIf(funnel_actors.actor_id, ifNull(notEquals(funnel_actors.steps, 2), 1)) AS failure_count
  FROM events AS event
  JOIN
    (SELECT aggregation_target AS actor_id,
            timestamp AS timestamp,
            steps AS steps,
            final_timestamp AS final_timestamp,
            first_timestamp AS first_timestamp
     FROM
       (SELECT aggregation_target AS aggregation_target,
               steps AS steps,
               avg(step_1_conversion_time) AS step_1_average_conversion_time_inner,
               median(step_1_conversion_time) AS step_1_median_conversion_time_inner,
               argMax(latest_0, steps) AS timestamp,
               argMax(latest_1, steps) AS final_timestamp,
               argMax(latest_0, steps) AS first_timestamp
        FROM
          (SELECT aggregation_target AS aggregation_target,
                  steps AS steps,
                  max(steps) OVER (PARTITION BY aggregation_target) AS max_steps,
                                  step_1_conversion_time AS step_1_conversion_time,
                                  latest_0 AS latest_0,
                                  latest_1 AS latest_1,
                                  latest_0 AS latest_0
           FROM
             (SELECT aggregation_target AS aggregation_target,
                     timestamp AS timestamp,
                     step_0 AS step_0,
                     latest_0 AS latest_0,
                     step_1 AS step_1,
                     latest_1 AS latest_1,
                     if(and(ifNull(lessOrEquals(latest_0, latest_1), 0), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), 2, 1) AS steps,
                     if(and(isNotNull(latest_1), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), dateDiff('second', latest_0, latest_1), NULL) AS step_1_conversion_time
              FROM
                (SELECT aggregation_target AS aggregation_target,
                        timestamp AS timestamp,
                        step_0 AS step_0,
                        latest_0 AS latest_0,
                        step_1 AS step_1,
                        min(latest_1) OVER (PARTITION BY aggregation_target
                                            ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS latest_1
                 FROM
                   (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                           e.`$group_0` AS aggregation_target,
                           if(equals(e.event, 'user signed up'), 1, 0) AS step_0,
                           if(ifNull(equals(step_0, 1), 0), timestamp, NULL) AS latest_0,
                           if(equals(e.event, 'paid'), 1, 0) AS step_1,
                           if(ifNull(equals(step_1, 1), 0), timestamp, NULL) AS latest_1
                    FROM events AS e
                    WHERE and(equals(e.team_id, 2), and(and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-14 23:59:59.999999', 6, 'UTC'))), in(e.event, tuple('paid', 'user signed up'))), or(ifNull(equals(step_0, 1), 0), ifNull(equals(step_1, 1), 0)))))
              WHERE ifNull(equals(step_0, 1), 0)))
        GROUP BY aggregation_target,
                 steps
        HAVING ifNull(equals(steps, max_steps), isNull(steps)
                      and isNull(max_steps)))
     WHERE ifNull(in(steps, [1, 2]), 0)
     ORDER BY aggregation_target ASC) AS funnel_actors ON equals(funnel_actors.actor_id, event.`$group_0`)
  WHERE and(equals(event.team_id, 2), greaterOrEquals(toTimeZone(toDateTime(toTimeZone(event.timestamp, 'UTC'), 'UTC'), 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC'))), less(toTimeZone(toDateTime(toTimeZone(event.timestamp, 'UTC'), 'UTC'), 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-14 23:59:59', 6, 'UTC'))), equals(event.team_id, 2), greater(toTimeZone(toDateTime(toTimeZone(event.timestamp, 'UTC'), 'UTC'), 'UTC'), funnel_actors.first_timestamp), less(toTimeZone(toDateTime(toTimeZone(event.timestamp, 'UTC'), 'UTC'), 'UTC'), coalesce(funnel_actors.final_timestamp, plus(toTimeZone(funnel_actors.first_timestamp, 'UTC'), toIntervalDay(14)), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-14 23:59:59', 6, 'UTC')))), notIn(event.event, ['paid', 'user signed up']), notIn(event.event, []))
  GROUP BY name
  LIMIT 100
  UNION ALL
  SELECT 'Total_Values_In_Query' AS name,
         countIf(funnel_actors.actor_id, ifNull(equals(funnel_actors.steps, 2), 0)) AS success_count,
         countIf(funnel_actors.actor_id, ifNull(notEquals(funnel_actors.steps, 2), 1)) AS failure_count
  FROM
    (SELECT aggregation_target AS actor_id,
            timestamp AS timestamp,
            steps AS steps,
            final_timestamp AS final_timestamp,
            first_timestamp AS first_timestamp
     FROM
       (SELECT aggregation_target AS aggregation_target,
               steps AS steps,
               avg(step_1_conversion_time) AS step_1_average_conversion_time_inner,
               median(step_1_conversion_time) AS step_1_median_conversion_time_inner,
               argMax(latest_0, steps) AS timestamp,
               argMax(latest_1, steps) AS final_timestamp,
               argMax(latest_0, steps) AS first_timestamp
        FROM
          (SELECT aggregation_target AS aggregation_target,
                  steps AS steps,
                  max(steps) OVER (PARTITION BY aggregation_target) AS max_steps,
                                  step_1_conversion_time AS step_1_conversion_time,
                                  latest_0 AS latest_0,
                                  latest_1 AS latest_1,
                                  latest_0 AS latest_0
           FROM
             (SELECT aggregation_target AS aggregation_target,
                     timestamp AS timestamp,
                     step_0 AS step_0,
                     latest_0 AS latest_0,
                     step_1 AS step_1,
                     latest_1 AS latest_1,
                     if(and(ifNull(lessOrEquals(latest_0, latest_1), 0), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), 2, 1) AS steps,
                     if(and(isNotNull(latest_1), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), dateDiff('second', latest_0, latest_1), NULL) AS step_1_conversion_time
              FROM
                (SELECT aggregation_target AS aggregation_target,
                        timestamp AS timestamp,
                        step_0 AS step_0,
                        latest_0 AS latest_0,
                        step_1 AS step_1,
                        min(latest_1) OVER (PARTITION BY aggregation_target
                                            ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS latest_1
                 FROM
                   (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                           e.`$group_0` AS aggregation_target,
                           if(equals(e.event, 'user signed up'), 1, 0) AS step_0,
                           if(ifNull(equals(step_0, 1), 0), timestamp, NULL) AS latest_0,
                           if(equals(e.event, 'paid'), 1, 0) AS step_1,
                           if(ifNull(equals(step_1, 1), 0), timestamp, NULL) AS latest_1
                    FROM events AS e
                    WHERE and(equals(e.team_id, 2), and(and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-14 23:59:59.999999', 6, 'UTC'))), in(e.event, tuple('paid', 'user signed up'))), or(ifNull(equals(step_0, 1), 0), ifNull(equals(step_1, 1), 0)))))
              WHERE ifNull(equals(step_0, 1), 0)))
        GROUP BY aggregation_target,
                 steps
        HAVING ifNull(equals(steps, max_steps), isNull(steps)
                      and isNull(max_steps)))
     WHERE ifNull(in(steps, [1, 2]), 0)
     ORDER BY aggregation_target ASC) AS funnel_actors
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '''
# ---
# name: TestClickhouseFunnelCorrelation.test_funnel_correlation_with_events_and_groups.1
  '''
  SELECT source.actor_id AS actor_id
  FROM
    (SELECT groups.group_type_index AS index,
            groups.group_key AS key
     FROM groups
     WHERE equals(groups.team_id, 2)
     GROUP BY groups.group_type_index,
              groups.group_key) AS groups
  INNER JOIN
    (SELECT funnel_actors.actor_id AS actor_id,
            any(funnel_actors.matching_events) AS matching_events
     FROM events AS event
     JOIN
       (SELECT aggregation_target AS actor_id,
               final_matching_events AS matching_events,
               timestamp AS timestamp,
               steps AS steps,
               final_timestamp AS final_timestamp,
               first_timestamp AS first_timestamp
        FROM
          (SELECT aggregation_target AS aggregation_target,
                  steps AS steps,
                  avg(step_1_conversion_time) AS step_1_average_conversion_time_inner,
                  median(step_1_conversion_time) AS step_1_median_conversion_time_inner,
                  groupArray(10)(step_0_matching_event) AS step_0_matching_events,
                  groupArray(10)(step_1_matching_event) AS step_1_matching_events,
                  groupArray(10)(final_matching_event) AS final_matching_events,
                  argMax(latest_0, steps) AS timestamp,
                  argMax(latest_1, steps) AS final_timestamp,
                  argMax(latest_0, steps) AS first_timestamp
           FROM
             (SELECT aggregation_target AS aggregation_target,
                     steps AS steps,
                     max(steps) OVER (PARTITION BY aggregation_target) AS max_steps,
                                     step_1_conversion_time AS step_1_conversion_time,
                                     tuple(latest_0, uuid_0, `$session_id_0`, `$window_id_0`) AS step_0_matching_event,
                                     tuple(latest_1, uuid_1, `$session_id_1`, `$window_id_1`) AS step_1_matching_event,
                                     if(isNull(latest_0), tuple(NULL, NULL, NULL, NULL), if(isNull(latest_1), step_0_matching_event, step_1_matching_event)) AS final_matching_event,
                                     latest_0 AS latest_0,
                                     latest_1 AS latest_1,
                                     latest_0 AS latest_0
              FROM
                (SELECT aggregation_target AS aggregation_target,
                        timestamp AS timestamp,
                        step_0 AS step_0,
                        latest_0 AS latest_0,
                        uuid_0 AS uuid_0,
                        `$session_id_0` AS `$session_id_0`,
                        `$window_id_0` AS `$window_id_0`,
                        step_1 AS step_1,
                        latest_1 AS latest_1,
                        uuid_1 AS uuid_1,
                        `$session_id_1` AS `$session_id_1`,
                        `$window_id_1` AS `$window_id_1`,
                        if(and(ifNull(lessOrEquals(latest_0, latest_1), 0), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), 2, 1) AS steps,
                        if(and(isNotNull(latest_1), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), dateDiff('second', latest_0, latest_1), NULL) AS step_1_conversion_time,
                        tuple(latest_0, uuid_0, `$session_id_0`, `$window_id_0`) AS step_0_matching_event,
                        tuple(latest_1, uuid_1, `$session_id_1`, `$window_id_1`) AS step_1_matching_event,
                        if(isNull(latest_0), tuple(NULL, NULL, NULL, NULL), if(isNull(latest_1), step_0_matching_event, step_1_matching_event)) AS final_matching_event
                 FROM
                   (SELECT aggregation_target AS aggregation_target,
                           timestamp AS timestamp,
                           step_0 AS step_0,
                           latest_0 AS latest_0,
                           uuid_0 AS uuid_0,
                           `$session_id_0` AS `$session_id_0`,
                           `$window_id_0` AS `$window_id_0`,
                           step_1 AS step_1,
                           min(latest_1) OVER (PARTITION BY aggregation_target
                                               ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS latest_1,
                                              last_value(uuid_1) OVER (PARTITION BY aggregation_target
                                                                       ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS uuid_1,
                                                                      last_value(`$session_id_1`) OVER (PARTITION BY aggregation_target
                                                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS `$session_id_1`,
                                                                                                       last_value(`$window_id_1`) OVER (PARTITION BY aggregation_target
                                                                                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS `$window_id_1`
                    FROM
                      (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                              e.`$group_0` AS aggregation_target,
                              e.uuid AS uuid,
                              if(equals(e.event, 'user signed up'), 1, 0) AS step_0,
                              if(ifNull(equals(step_0, 1), 0), timestamp, NULL) AS latest_0,
                              if(ifNull(equals(step_0, 1), 0), uuid, NULL) AS uuid_0,
                              if(ifNull(equals(step_0, 1), 0), e.`$session_id`, NULL) AS `$session_id_0`,
                              if(ifNull(equals(step_0, 1), 0), e.`$window_id`, NULL) AS `$window_id_0`,
                              if(equals(e.event, 'paid'), 1, 0) AS step_1,
                              if(ifNull(equals(step_1, 1), 0), timestamp, NULL) AS latest_1,
                              if(ifNull(equals(step_1, 1), 0), uuid, NULL) AS uuid_1,
                              if(ifNull(equals(step_1, 1), 0), e.`$session_id`, NULL) AS `$session_id_1`,
                              if(ifNull(equals(step_1, 1), 0), e.`$window_id`, NULL) AS `$window_id_1`
                       FROM events AS e
                       WHERE and(equals(e.team_id, 2), and(and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-14 23:59:59.999999', 6, 'UTC'))), in(e.event, tuple('paid', 'user signed up'))), or(ifNull(equals(step_0, 1), 0), ifNull(equals(step_1, 1), 0)))))
                 WHERE ifNull(equals(step_0, 1), 0)))
           GROUP BY aggregation_target,
                    steps
           HAVING ifNull(equals(steps, max_steps), isNull(steps)
                         and isNull(max_steps)))
        WHERE ifNull(in(steps, [1, 2]), 0)
        ORDER BY aggregation_target ASC) AS funnel_actors ON equals(funnel_actors.actor_id, event.`$group_0`)
     WHERE and(equals(event.team_id, 2), greaterOrEquals(toTimeZone(toDateTime(toTimeZone(event.timestamp, 'UTC'), 'UTC'), 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC'))), less(toTimeZone(toDateTime(toTimeZone(event.timestamp, 'UTC'), 'UTC'), 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-14 23:59:59', 6, 'UTC'))), equals(event.team_id, 2), greater(toTimeZone(toDateTime(toTimeZone(event.timestamp, 'UTC'), 'UTC'), 'UTC'), funnel_actors.first_timestamp), less(toTimeZone(toDateTime(toTimeZone(event.timestamp, 'UTC'), 'UTC'), 'UTC'), coalesce(funnel_actors.final_timestamp, plus(toTimeZone(funnel_actors.first_timestamp, 'UTC'), toIntervalDay(14)), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-14 23:59:59', 6, 'UTC')))), notIn(event.event, ['paid', 'user signed up']), equals(event.event, 'positively_related'), ifNull(equals(funnel_actors.steps, 2), 0))
     GROUP BY actor_id
     ORDER BY actor_id ASC) AS source ON equals(groups.key, source.actor_id)
  ORDER BY source.actor_id ASC
  LIMIT 101
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1
  '''
# ---
# name: TestClickhouseFunnelCorrelation.test_funnel_correlation_with_events_and_groups.2
  '''
  SELECT source.actor_id AS actor_id
  FROM
    (SELECT groups.group_type_index AS index,
            groups.group_key AS key
     FROM groups
     WHERE equals(groups.team_id, 2)
     GROUP BY groups.group_type_index,
              groups.group_key) AS groups
  INNER JOIN
    (SELECT funnel_actors.actor_id AS actor_id,
            any(funnel_actors.matching_events) AS matching_events
     FROM events AS event
     JOIN
       (SELECT aggregation_target AS actor_id,
               final_matching_events AS matching_events,
               timestamp AS timestamp,
               steps AS steps,
               final_timestamp AS final_timestamp,
               first_timestamp AS first_timestamp
        FROM
          (SELECT aggregation_target AS aggregation_target,
                  steps AS steps,
                  avg(step_1_conversion_time) AS step_1_average_conversion_time_inner,
                  median(step_1_conversion_time) AS step_1_median_conversion_time_inner,
                  groupArray(10)(step_0_matching_event) AS step_0_matching_events,
                  groupArray(10)(step_1_matching_event) AS step_1_matching_events,
                  groupArray(10)(final_matching_event) AS final_matching_events,
                  argMax(latest_0, steps) AS timestamp,
                  argMax(latest_1, steps) AS final_timestamp,
                  argMax(latest_0, steps) AS first_timestamp
           FROM
             (SELECT aggregation_target AS aggregation_target,
                     steps AS steps,
                     max(steps) OVER (PARTITION BY aggregation_target) AS max_steps,
                                     step_1_conversion_time AS step_1_conversion_time,
                                     tuple(latest_0, uuid_0, `$session_id_0`, `$window_id_0`) AS step_0_matching_event,
                                     tuple(latest_1, uuid_1, `$session_id_1`, `$window_id_1`) AS step_1_matching_event,
                                     if(isNull(latest_0), tuple(NULL, NULL, NULL, NULL), if(isNull(latest_1), step_0_matching_event, step_1_matching_event)) AS final_matching_event,
                                     latest_0 AS latest_0,
                                     latest_1 AS latest_1,
                                     latest_0 AS latest_0
              FROM
                (SELECT aggregation_target AS aggregation_target,
                        timestamp AS timestamp,
                        step_0 AS step_0,
                        latest_0 AS latest_0,
                        uuid_0 AS uuid_0,
                        `$session_id_0` AS `$session_id_0`,
                        `$window_id_0` AS `$window_id_0`,
                        step_1 AS step_1,
                        latest_1 AS latest_1,
                        uuid_1 AS uuid_1,
                        `$session_id_1` AS `$session_id_1`,
                        `$window_id_1` AS `$window_id_1`,
                        if(and(ifNull(lessOrEquals(latest_0, latest_1), 0), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), 2, 1) AS steps,
                        if(and(isNotNull(latest_1), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), dateDiff('second', latest_0, latest_1), NULL) AS step_1_conversion_time,
                        tuple(latest_0, uuid_0, `$session_id_0`, `$window_id_0`) AS step_0_matching_event,
                        tuple(latest_1, uuid_1, `$session_id_1`, `$window_id_1`) AS step_1_matching_event,
                        if(isNull(latest_0), tuple(NULL, NULL, NULL, NULL), if(isNull(latest_1), step_0_matching_event, step_1_matching_event)) AS final_matching_event
                 FROM
                   (SELECT aggregation_target AS aggregation_target,
                           timestamp AS timestamp,
                           step_0 AS step_0,
                           latest_0 AS latest_0,
                           uuid_0 AS uuid_0,
                           `$session_id_0` AS `$session_id_0`,
                           `$window_id_0` AS `$window_id_0`,
                           step_1 AS step_1,
                           min(latest_1) OVER (PARTITION BY aggregation_target
                                               ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS latest_1,
                                              last_value(uuid_1) OVER (PARTITION BY aggregation_target
                                                                       ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS uuid_1,
                                                                      last_value(`$session_id_1`) OVER (PARTITION BY aggregation_target
                                                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS `$session_id_1`,
                                                                                                       last_value(`$window_id_1`) OVER (PARTITION BY aggregation_target
                                                                                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS `$window_id_1`
                    FROM
                      (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                              e.`$group_0` AS aggregation_target,
                              e.uuid AS uuid,
                              if(equals(e.event, 'user signed up'), 1, 0) AS step_0,
                              if(ifNull(equals(step_0, 1), 0), timestamp, NULL) AS latest_0,
                              if(ifNull(equals(step_0, 1), 0), uuid, NULL) AS uuid_0,
                              if(ifNull(equals(step_0, 1), 0), e.`$session_id`, NULL) AS `$session_id_0`,
                              if(ifNull(equals(step_0, 1), 0), e.`$window_id`, NULL) AS `$window_id_0`,
                              if(equals(e.event, 'paid'), 1, 0) AS step_1,
                              if(ifNull(equals(step_1, 1), 0), timestamp, NULL) AS latest_1,
                              if(ifNull(equals(step_1, 1), 0), uuid, NULL) AS uuid_1,
                              if(ifNull(equals(step_1, 1), 0), e.`$session_id`, NULL) AS `$session_id_1`,
                              if(ifNull(equals(step_1, 1), 0), e.`$window_id`, NULL) AS `$window_id_1`
                       FROM events AS e
                       WHERE and(equals(e.team_id, 2), and(and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-14 23:59:59.999999', 6, 'UTC'))), in(e.event, tuple('paid', 'user signed up'))), or(ifNull(equals(step_0, 1), 0), ifNull(equals(step_1, 1), 0)))))
                 WHERE ifNull(equals(step_0, 1), 0)))
           GROUP BY aggregation_target,
                    steps
           HAVING ifNull(equals(steps, max_steps), isNull(steps)
                         and isNull(max_steps)))
        WHERE ifNull(in(steps, [1, 2]), 0)
        ORDER BY aggregation_target ASC) AS funnel_actors ON equals(funnel_actors.actor_id, event.`$group_0`)
     WHERE and(equals(event.team_id, 2), greaterOrEquals(toTimeZone(toDateTime(toTimeZone(event.timestamp, 'UTC'), 'UTC'), 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC'))), less(toTimeZone(toDateTime(toTimeZone(event.timestamp, 'UTC'), 'UTC'), 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-14 23:59:59', 6, 'UTC'))), equals(event.team_id, 2), greater(toTimeZone(toDateTime(toTimeZone(event.timestamp, 'UTC'), 'UTC'), 'UTC'), funnel_actors.first_timestamp), less(toTimeZone(toDateTime(toTimeZone(event.timestamp, 'UTC'), 'UTC'), 'UTC'), coalesce(funnel_actors.final_timestamp, plus(toTimeZone(funnel_actors.first_timestamp, 'UTC'), toIntervalDay(14)), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-14 23:59:59', 6, 'UTC')))), notIn(event.event, ['paid', 'user signed up']), equals(event.event, 'positively_related'), ifNull(notEquals(funnel_actors.steps, 2), 1))
     GROUP BY actor_id
     ORDER BY actor_id ASC) AS source ON equals(groups.key, source.actor_id)
  ORDER BY source.actor_id ASC
  LIMIT 101
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1
  '''
# ---
# name: TestClickhouseFunnelCorrelation.test_funnel_correlation_with_events_and_groups.3
  '''
  SELECT source.actor_id AS actor_id
  FROM
    (SELECT groups.group_type_index AS index,
            groups.group_key AS key
     FROM groups
     WHERE equals(groups.team_id, 2)
     GROUP BY groups.group_type_index,
              groups.group_key) AS groups
  INNER JOIN
    (SELECT funnel_actors.actor_id AS actor_id,
            any(funnel_actors.matching_events) AS matching_events
     FROM events AS event
     JOIN
       (SELECT aggregation_target AS actor_id,
               final_matching_events AS matching_events,
               timestamp AS timestamp,
               steps AS steps,
               final_timestamp AS final_timestamp,
               first_timestamp AS first_timestamp
        FROM
          (SELECT aggregation_target AS aggregation_target,
                  steps AS steps,
                  avg(step_1_conversion_time) AS step_1_average_conversion_time_inner,
                  median(step_1_conversion_time) AS step_1_median_conversion_time_inner,
                  groupArray(10)(step_0_matching_event) AS step_0_matching_events,
                  groupArray(10)(step_1_matching_event) AS step_1_matching_events,
                  groupArray(10)(final_matching_event) AS final_matching_events,
                  argMax(latest_0, steps) AS timestamp,
                  argMax(latest_1, steps) AS final_timestamp,
                  argMax(latest_0, steps) AS first_timestamp
           FROM
             (SELECT aggregation_target AS aggregation_target,
                     steps AS steps,
                     max(steps) OVER (PARTITION BY aggregation_target) AS max_steps,
                                     step_1_conversion_time AS step_1_conversion_time,
                                     tuple(latest_0, uuid_0, `$session_id_0`, `$window_id_0`) AS step_0_matching_event,
                                     tuple(latest_1, uuid_1, `$session_id_1`, `$window_id_1`) AS step_1_matching_event,
                                     if(isNull(latest_0), tuple(NULL, NULL, NULL, NULL), if(isNull(latest_1), step_0_matching_event, step_1_matching_event)) AS final_matching_event,
                                     latest_0 AS latest_0,
                                     latest_1 AS latest_1,
                                     latest_0 AS latest_0
              FROM
                (SELECT aggregation_target AS aggregation_target,
                        timestamp AS timestamp,
                        step_0 AS step_0,
                        latest_0 AS latest_0,
                        uuid_0 AS uuid_0,
                        `$session_id_0` AS `$session_id_0`,
                        `$window_id_0` AS `$window_id_0`,
                        step_1 AS step_1,
                        latest_1 AS latest_1,
                        uuid_1 AS uuid_1,
                        `$session_id_1` AS `$session_id_1`,
                        `$window_id_1` AS `$window_id_1`,
                        if(and(ifNull(lessOrEquals(latest_0, latest_1), 0), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), 2, 1) AS steps,
                        if(and(isNotNull(latest_1), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), dateDiff('second', latest_0, latest_1), NULL) AS step_1_conversion_time,
                        tuple(latest_0, uuid_0, `$session_id_0`, `$window_id_0`) AS step_0_matching_event,
                        tuple(latest_1, uuid_1, `$session_id_1`, `$window_id_1`) AS step_1_matching_event,
                        if(isNull(latest_0), tuple(NULL, NULL, NULL, NULL), if(isNull(latest_1), step_0_matching_event, step_1_matching_event)) AS final_matching_event
                 FROM
                   (SELECT aggregation_target AS aggregation_target,
                           timestamp AS timestamp,
                           step_0 AS step_0,
                           latest_0 AS latest_0,
                           uuid_0 AS uuid_0,
                           `$session_id_0` AS `$session_id_0`,
                           `$window_id_0` AS `$window_id_0`,
                           step_1 AS step_1,
                           min(latest_1) OVER (PARTITION BY aggregation_target
                                               ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS latest_1,
                                              last_value(uuid_1) OVER (PARTITION BY aggregation_target
                                                                       ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS uuid_1,
                                                                      last_value(`$session_id_1`) OVER (PARTITION BY aggregation_target
                                                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS `$session_id_1`,
                                                                                                       last_value(`$window_id_1`) OVER (PARTITION BY aggregation_target
                                                                                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS `$window_id_1`
                    FROM
                      (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                              e.`$group_0` AS aggregation_target,
                              e.uuid AS uuid,
                              if(equals(e.event, 'user signed up'), 1, 0) AS step_0,
                              if(ifNull(equals(step_0, 1), 0), timestamp, NULL) AS latest_0,
                              if(ifNull(equals(step_0, 1), 0), uuid, NULL) AS uuid_0,
                              if(ifNull(equals(step_0, 1), 0), e.`$session_id`, NULL) AS `$session_id_0`,
                              if(ifNull(equals(step_0, 1), 0), e.`$window_id`, NULL) AS `$window_id_0`,
                              if(equals(e.event, 'paid'), 1, 0) AS step_1,
                              if(ifNull(equals(step_1, 1), 0), timestamp, NULL) AS latest_1,
                              if(ifNull(equals(step_1, 1), 0), uuid, NULL) AS uuid_1,
                              if(ifNull(equals(step_1, 1), 0), e.`$session_id`, NULL) AS `$session_id_1`,
                              if(ifNull(equals(step_1, 1), 0), e.`$window_id`, NULL) AS `$window_id_1`
                       FROM events AS e
                       WHERE and(equals(e.team_id, 2), and(and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-14 23:59:59.999999', 6, 'UTC'))), in(e.event, tuple('paid', 'user signed up'))), or(ifNull(equals(step_0, 1), 0), ifNull(equals(step_1, 1), 0)))))
                 WHERE ifNull(equals(step_0, 1), 0)))
           GROUP BY aggregation_target,
                    steps
           HAVING ifNull(equals(steps, max_steps), isNull(steps)
                         and isNull(max_steps)))
        WHERE ifNull(in(steps, [1, 2]), 0)
        ORDER BY aggregation_target ASC) AS funnel_actors ON equals(funnel_actors.actor_id, event.`$group_0`)
     WHERE and(equals(event.team_id, 2), greaterOrEquals(toTimeZone(toDateTime(toTimeZone(event.timestamp, 'UTC'), 'UTC'), 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC'))), less(toTimeZone(toDateTime(toTimeZone(event.timestamp, 'UTC'), 'UTC'), 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-14 23:59:59', 6, 'UTC'))), equals(event.team_id, 2), greater(toTimeZone(toDateTime(toTimeZone(event.timestamp, 'UTC'), 'UTC'), 'UTC'), funnel_actors.first_timestamp), less(toTimeZone(toDateTime(toTimeZone(event.timestamp, 'UTC'), 'UTC'), 'UTC'), coalesce(funnel_actors.final_timestamp, plus(toTimeZone(funnel_actors.first_timestamp, 'UTC'), toIntervalDay(14)), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-14 23:59:59', 6, 'UTC')))), notIn(event.event, ['paid', 'user signed up']), equals(event.event, 'negatively_related'), ifNull(equals(funnel_actors.steps, 2), 0))
     GROUP BY actor_id
     ORDER BY actor_id ASC) AS source ON equals(groups.key, source.actor_id)
  ORDER BY source.actor_id ASC
  LIMIT 101
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1
  '''
# ---
# name: TestClickhouseFunnelCorrelation.test_funnel_correlation_with_events_and_groups.4
  '''
  SELECT source.actor_id AS actor_id
  FROM
    (SELECT groups.group_type_index AS index,
            groups.group_key AS key
     FROM groups
     WHERE equals(groups.team_id, 2)
     GROUP BY groups.group_type_index,
              groups.group_key) AS groups
  INNER JOIN
    (SELECT funnel_actors.actor_id AS actor_id,
            any(funnel_actors.matching_events) AS matching_events
     FROM events AS event
     JOIN
       (SELECT aggregation_target AS actor_id,
               final_matching_events AS matching_events,
               timestamp AS timestamp,
               steps AS steps,
               final_timestamp AS final_timestamp,
               first_timestamp AS first_timestamp
        FROM
          (SELECT aggregation_target AS aggregation_target,
                  steps AS steps,
                  avg(step_1_conversion_time) AS step_1_average_conversion_time_inner,
                  median(step_1_conversion_time) AS step_1_median_conversion_time_inner,
                  groupArray(10)(step_0_matching_event) AS step_0_matching_events,
                  groupArray(10)(step_1_matching_event) AS step_1_matching_events,
                  groupArray(10)(final_matching_event) AS final_matching_events,
                  argMax(latest_0, steps) AS timestamp,
                  argMax(latest_1, steps) AS final_timestamp,
                  argMax(latest_0, steps) AS first_timestamp
           FROM
             (SELECT aggregation_target AS aggregation_target,
                     steps AS steps,
                     max(steps) OVER (PARTITION BY aggregation_target) AS max_steps,
                                     step_1_conversion_time AS step_1_conversion_time,
                                     tuple(latest_0, uuid_0, `$session_id_0`, `$window_id_0`) AS step_0_matching_event,
                                     tuple(latest_1, uuid_1, `$session_id_1`, `$window_id_1`) AS step_1_matching_event,
                                     if(isNull(latest_0), tuple(NULL, NULL, NULL, NULL), if(isNull(latest_1), step_0_matching_event, step_1_matching_event)) AS final_matching_event,
                                     latest_0 AS latest_0,
                                     latest_1 AS latest_1,
                                     latest_0 AS latest_0
              FROM
                (SELECT aggregation_target AS aggregation_target,
                        timestamp AS timestamp,
                        step_0 AS step_0,
                        latest_0 AS latest_0,
                        uuid_0 AS uuid_0,
                        `$session_id_0` AS `$session_id_0`,
                        `$window_id_0` AS `$window_id_0`,
                        step_1 AS step_1,
                        latest_1 AS latest_1,
                        uuid_1 AS uuid_1,
                        `$session_id_1` AS `$session_id_1`,
                        `$window_id_1` AS `$window_id_1`,
                        if(and(ifNull(lessOrEquals(latest_0, latest_1), 0), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), 2, 1) AS steps,
                        if(and(isNotNull(latest_1), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), dateDiff('second', latest_0, latest_1), NULL) AS step_1_conversion_time,
                        tuple(latest_0, uuid_0, `$session_id_0`, `$window_id_0`) AS step_0_matching_event,
                        tuple(latest_1, uuid_1, `$session_id_1`, `$window_id_1`) AS step_1_matching_event,
                        if(isNull(latest_0), tuple(NULL, NULL, NULL, NULL), if(isNull(latest_1), step_0_matching_event, step_1_matching_event)) AS final_matching_event
                 FROM
                   (SELECT aggregation_target AS aggregation_target,
                           timestamp AS timestamp,
                           step_0 AS step_0,
                           latest_0 AS latest_0,
                           uuid_0 AS uuid_0,
                           `$session_id_0` AS `$session_id_0`,
                           `$window_id_0` AS `$window_id_0`,
                           step_1 AS step_1,
                           min(latest_1) OVER (PARTITION BY aggregation_target
                                               ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS latest_1,
                                              last_value(uuid_1) OVER (PARTITION BY aggregation_target
                                                                       ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS uuid_1,
                                                                      last_value(`$session_id_1`) OVER (PARTITION BY aggregation_target
                                                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS `$session_id_1`,
                                                                                                       last_value(`$window_id_1`) OVER (PARTITION BY aggregation_target
                                                                                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS `$window_id_1`
                    FROM
                      (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                              e.`$group_0` AS aggregation_target,
                              e.uuid AS uuid,
                              if(equals(e.event, 'user signed up'), 1, 0) AS step_0,
                              if(ifNull(equals(step_0, 1), 0), timestamp, NULL) AS latest_0,
                              if(ifNull(equals(step_0, 1), 0), uuid, NULL) AS uuid_0,
                              if(ifNull(equals(step_0, 1), 0), e.`$session_id`, NULL) AS `$session_id_0`,
                              if(ifNull(equals(step_0, 1), 0), e.`$window_id`, NULL) AS `$window_id_0`,
                              if(equals(e.event, 'paid'), 1, 0) AS step_1,
                              if(ifNull(equals(step_1, 1), 0), timestamp, NULL) AS latest_1,
                              if(ifNull(equals(step_1, 1), 0), uuid, NULL) AS uuid_1,
                              if(ifNull(equals(step_1, 1), 0), e.`$session_id`, NULL) AS `$session_id_1`,
                              if(ifNull(equals(step_1, 1), 0), e.`$window_id`, NULL) AS `$window_id_1`
                       FROM events AS e
                       WHERE and(equals(e.team_id, 2), and(and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-14 23:59:59.999999', 6, 'UTC'))), in(e.event, tuple('paid', 'user signed up'))), or(ifNull(equals(step_0, 1), 0), ifNull(equals(step_1, 1), 0)))))
                 WHERE ifNull(equals(step_0, 1), 0)))
           GROUP BY aggregation_target,
                    steps
           HAVING ifNull(equals(steps, max_steps), isNull(steps)
                         and isNull(max_steps)))
        WHERE ifNull(in(steps, [1, 2]), 0)
        ORDER BY aggregation_target ASC) AS funnel_actors ON equals(funnel_actors.actor_id, event.`$group_0`)
     WHERE and(equals(event.team_id, 2), greaterOrEquals(toTimeZone(toDateTime(toTimeZone(event.timestamp, 'UTC'), 'UTC'), 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC'))), less(toTimeZone(toDateTime(toTimeZone(event.timestamp, 'UTC'), 'UTC'), 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-14 23:59:59', 6, 'UTC'))), equals(event.team_id, 2), greater(toTimeZone(toDateTime(toTimeZone(event.timestamp, 'UTC'), 'UTC'), 'UTC'), funnel_actors.first_timestamp), less(toTimeZone(toDateTime(toTimeZone(event.timestamp, 'UTC'), 'UTC'), 'UTC'), coalesce(funnel_actors.final_timestamp, plus(toTimeZone(funnel_actors.first_timestamp, 'UTC'), toIntervalDay(14)), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-14 23:59:59', 6, 'UTC')))), notIn(event.event, ['paid', 'user signed up']), equals(event.event, 'negatively_related'), ifNull(notEquals(funnel_actors.steps, 2), 1))
     GROUP BY actor_id
     ORDER BY actor_id ASC) AS source ON equals(groups.key, source.actor_id)
  ORDER BY source.actor_id ASC
  LIMIT 101
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1
  '''
# ---
# name: TestClickhouseFunnelCorrelation.test_funnel_correlation_with_events_and_groups.5
  '''
  SELECT event.event AS name,
         countIf(funnel_actors.actor_id, ifNull(equals(funnel_actors.steps, 2), 0)) AS success_count,
         countIf(funnel_actors.actor_id, ifNull(notEquals(funnel_actors.steps, 2), 1)) AS failure_count
  FROM events AS event
  JOIN
    (SELECT aggregation_target AS actor_id,
            timestamp AS timestamp,
            steps AS steps,
            final_timestamp AS final_timestamp,
            first_timestamp AS first_timestamp
     FROM
       (SELECT aggregation_target AS aggregation_target,
               steps AS steps,
               avg(step_1_conversion_time) AS step_1_average_conversion_time_inner,
               median(step_1_conversion_time) AS step_1_median_conversion_time_inner,
               argMax(latest_0, steps) AS timestamp,
               argMax(latest_1, steps) AS final_timestamp,
               argMax(latest_0, steps) AS first_timestamp
        FROM
          (SELECT aggregation_target AS aggregation_target,
                  steps AS steps,
                  max(steps) OVER (PARTITION BY aggregation_target) AS max_steps,
                                  step_1_conversion_time AS step_1_conversion_time,
                                  latest_0 AS latest_0,
                                  latest_1 AS latest_1,
                                  latest_0 AS latest_0
           FROM
             (SELECT aggregation_target AS aggregation_target,
                     timestamp AS timestamp,
                     step_0 AS step_0,
                     latest_0 AS latest_0,
                     step_1 AS step_1,
                     latest_1 AS latest_1,
                     if(and(ifNull(lessOrEquals(latest_0, latest_1), 0), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), 2, 1) AS steps,
                     if(and(isNotNull(latest_1), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), dateDiff('second', latest_0, latest_1), NULL) AS step_1_conversion_time
              FROM
                (SELECT aggregation_target AS aggregation_target,
                        timestamp AS timestamp,
                        step_0 AS step_0,
                        latest_0 AS latest_0,
                        step_1 AS step_1,
                        min(latest_1) OVER (PARTITION BY aggregation_target
                                            ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS latest_1
                 FROM
                   (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                           e.`$group_0` AS aggregation_target,
                           if(equals(e.event, 'user signed up'), 1, 0) AS step_0,
                           if(ifNull(equals(step_0, 1), 0), timestamp, NULL) AS latest_0,
                           if(equals(e.event, 'paid'), 1, 0) AS step_1,
                           if(ifNull(equals(step_1, 1), 0), timestamp, NULL) AS latest_1
                    FROM events AS e
                    LEFT JOIN
                      (SELECT argMax(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(groups.group_properties, 'industry'), ''), 'null'), '^"|"$', ''), groups._timestamp) AS properties___industry,
                              groups.group_type_index AS index,
                              groups.group_key AS key
                       FROM groups
                       WHERE and(equals(groups.team_id, 2), ifNull(equals(index, 0), 0))
                       GROUP BY groups.group_type_index,
                                groups.group_key) AS e__group_0 ON equals(e.`$group_0`, e__group_0.key)
                    WHERE and(equals(e.team_id, 2), and(and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-14 23:59:59.999999', 6, 'UTC'))), in(e.event, tuple('paid', 'user signed up')), ifNull(equals(e__group_0.properties___industry, 'finance'), 0)), or(ifNull(equals(step_0, 1), 0), ifNull(equals(step_1, 1), 0)))))
              WHERE ifNull(equals(step_0, 1), 0)))
        GROUP BY aggregation_target,
                 steps
        HAVING ifNull(equals(steps, max_steps), isNull(steps)
                      and isNull(max_steps)))
     WHERE ifNull(in(steps, [1, 2]), 0)
     ORDER BY aggregation_target ASC) AS funnel_actors ON equals(funnel_actors.actor_id, event.`$group_0`)
  WHERE and(equals(event.team_id, 2), greaterOrEquals(toTimeZone(toDateTime(toTimeZone(event.timestamp, 'UTC'), 'UTC'), 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC'))), less(toTimeZone(toDateTime(toTimeZone(event.timestamp, 'UTC'), 'UTC'), 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-14 23:59:59', 6, 'UTC'))), equals(event.team_id, 2), greater(toTimeZone(toDateTime(toTimeZone(event.timestamp, 'UTC'), 'UTC'), 'UTC'), funnel_actors.first_timestamp), less(toTimeZone(toDateTime(toTimeZone(event.timestamp, 'UTC'), 'UTC'), 'UTC'), coalesce(funnel_actors.final_timestamp, plus(toTimeZone(funnel_actors.first_timestamp, 'UTC'), toIntervalDay(14)), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-14 23:59:59', 6, 'UTC')))), notIn(event.event, ['paid', 'user signed up']), notIn(event.event, []))
  GROUP BY name
  LIMIT 100
  UNION ALL
  SELECT 'Total_Values_In_Query' AS name,
         countIf(funnel_actors.actor_id, ifNull(equals(funnel_actors.steps, 2), 0)) AS success_count,
         countIf(funnel_actors.actor_id, ifNull(notEquals(funnel_actors.steps, 2), 1)) AS failure_count
  FROM
    (SELECT aggregation_target AS actor_id,
            timestamp AS timestamp,
            steps AS steps,
            final_timestamp AS final_timestamp,
            first_timestamp AS first_timestamp
     FROM
       (SELECT aggregation_target AS aggregation_target,
               steps AS steps,
               avg(step_1_conversion_time) AS step_1_average_conversion_time_inner,
               median(step_1_conversion_time) AS step_1_median_conversion_time_inner,
               argMax(latest_0, steps) AS timestamp,
               argMax(latest_1, steps) AS final_timestamp,
               argMax(latest_0, steps) AS first_timestamp
        FROM
          (SELECT aggregation_target AS aggregation_target,
                  steps AS steps,
                  max(steps) OVER (PARTITION BY aggregation_target) AS max_steps,
                                  step_1_conversion_time AS step_1_conversion_time,
                                  latest_0 AS latest_0,
                                  latest_1 AS latest_1,
                                  latest_0 AS latest_0
           FROM
             (SELECT aggregation_target AS aggregation_target,
                     timestamp AS timestamp,
                     step_0 AS step_0,
                     latest_0 AS latest_0,
                     step_1 AS step_1,
                     latest_1 AS latest_1,
                     if(and(ifNull(lessOrEquals(latest_0, latest_1), 0), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), 2, 1) AS steps,
                     if(and(isNotNull(latest_1), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), dateDiff('second', latest_0, latest_1), NULL) AS step_1_conversion_time
              FROM
                (SELECT aggregation_target AS aggregation_target,
                        timestamp AS timestamp,
                        step_0 AS step_0,
                        latest_0 AS latest_0,
                        step_1 AS step_1,
                        min(latest_1) OVER (PARTITION BY aggregation_target
                                            ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS latest_1
                 FROM
                   (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                           e.`$group_0` AS aggregation_target,
                           if(equals(e.event, 'user signed up'), 1, 0) AS step_0,
                           if(ifNull(equals(step_0, 1), 0), timestamp, NULL) AS latest_0,
                           if(equals(e.event, 'paid'), 1, 0) AS step_1,
                           if(ifNull(equals(step_1, 1), 0), timestamp, NULL) AS latest_1
                    FROM events AS e
                    LEFT JOIN
                      (SELECT argMax(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(groups.group_properties, 'industry'), ''), 'null'), '^"|"$', ''), groups._timestamp) AS properties___industry,
                              groups.group_type_index AS index,
                              groups.group_key AS key
                       FROM groups
                       WHERE and(equals(groups.team_id, 2), ifNull(equals(index, 0), 0))
                       GROUP BY groups.group_type_index,
                                groups.group_key) AS e__group_0 ON equals(e.`$group_0`, e__group_0.key)
                    WHERE and(equals(e.team_id, 2), and(and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-14 23:59:59.999999', 6, 'UTC'))), in(e.event, tuple('paid', 'user signed up')), ifNull(equals(e__group_0.properties___industry, 'finance'), 0)), or(ifNull(equals(step_0, 1), 0), ifNull(equals(step_1, 1), 0)))))
              WHERE ifNull(equals(step_0, 1), 0)))
        GROUP BY aggregation_target,
                 steps
        HAVING ifNull(equals(steps, max_steps), isNull(steps)
                      and isNull(max_steps)))
     WHERE ifNull(in(steps, [1, 2]), 0)
     ORDER BY aggregation_target ASC) AS funnel_actors
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '''
# ---
# name: TestClickhouseFunnelCorrelation.test_funnel_correlation_with_events_and_groups.6
  '''
  SELECT source.actor_id AS actor_id
  FROM
    (SELECT groups.group_type_index AS index,
            groups.group_key AS key
     FROM groups
     WHERE equals(groups.team_id, 2)
     GROUP BY groups.group_type_index,
              groups.group_key) AS groups
  INNER JOIN
    (SELECT funnel_actors.actor_id AS actor_id,
            any(funnel_actors.matching_events) AS matching_events
     FROM events AS event
     JOIN
       (SELECT aggregation_target AS actor_id,
               final_matching_events AS matching_events,
               timestamp AS timestamp,
               steps AS steps,
               final_timestamp AS final_timestamp,
               first_timestamp AS first_timestamp
        FROM
          (SELECT aggregation_target AS aggregation_target,
                  steps AS steps,
                  avg(step_1_conversion_time) AS step_1_average_conversion_time_inner,
                  median(step_1_conversion_time) AS step_1_median_conversion_time_inner,
                  groupArray(10)(step_0_matching_event) AS step_0_matching_events,
                  groupArray(10)(step_1_matching_event) AS step_1_matching_events,
                  groupArray(10)(final_matching_event) AS final_matching_events,
                  argMax(latest_0, steps) AS timestamp,
                  argMax(latest_1, steps) AS final_timestamp,
                  argMax(latest_0, steps) AS first_timestamp
           FROM
             (SELECT aggregation_target AS aggregation_target,
                     steps AS steps,
                     max(steps) OVER (PARTITION BY aggregation_target) AS max_steps,
                                     step_1_conversion_time AS step_1_conversion_time,
                                     tuple(latest_0, uuid_0, `$session_id_0`, `$window_id_0`) AS step_0_matching_event,
                                     tuple(latest_1, uuid_1, `$session_id_1`, `$window_id_1`) AS step_1_matching_event,
                                     if(isNull(latest_0), tuple(NULL, NULL, NULL, NULL), if(isNull(latest_1), step_0_matching_event, step_1_matching_event)) AS final_matching_event,
                                     latest_0 AS latest_0,
                                     latest_1 AS latest_1,
                                     latest_0 AS latest_0
              FROM
                (SELECT aggregation_target AS aggregation_target,
                        timestamp AS timestamp,
                        step_0 AS step_0,
                        latest_0 AS latest_0,
                        uuid_0 AS uuid_0,
                        `$session_id_0` AS `$session_id_0`,
                        `$window_id_0` AS `$window_id_0`,
                        step_1 AS step_1,
                        latest_1 AS latest_1,
                        uuid_1 AS uuid_1,
                        `$session_id_1` AS `$session_id_1`,
                        `$window_id_1` AS `$window_id_1`,
                        if(and(ifNull(lessOrEquals(latest_0, latest_1), 0), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), 2, 1) AS steps,
                        if(and(isNotNull(latest_1), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), dateDiff('second', latest_0, latest_1), NULL) AS step_1_conversion_time,
                        tuple(latest_0, uuid_0, `$session_id_0`, `$window_id_0`) AS step_0_matching_event,
                        tuple(latest_1, uuid_1, `$session_id_1`, `$window_id_1`) AS step_1_matching_event,
                        if(isNull(latest_0), tuple(NULL, NULL, NULL, NULL), if(isNull(latest_1), step_0_matching_event, step_1_matching_event)) AS final_matching_event
                 FROM
                   (SELECT aggregation_target AS aggregation_target,
                           timestamp AS timestamp,
                           step_0 AS step_0,
                           latest_0 AS latest_0,
                           uuid_0 AS uuid_0,
                           `$session_id_0` AS `$session_id_0`,
                           `$window_id_0` AS `$window_id_0`,
                           step_1 AS step_1,
                           min(latest_1) OVER (PARTITION BY aggregation_target
                                               ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS latest_1,
                                              last_value(uuid_1) OVER (PARTITION BY aggregation_target
                                                                       ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS uuid_1,
                                                                      last_value(`$session_id_1`) OVER (PARTITION BY aggregation_target
                                                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS `$session_id_1`,
                                                                                                       last_value(`$window_id_1`) OVER (PARTITION BY aggregation_target
                                                                                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS `$window_id_1`
                    FROM
                      (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                              e.`$group_0` AS aggregation_target,
                              e.uuid AS uuid,
                              if(equals(e.event, 'user signed up'), 1, 0) AS step_0,
                              if(ifNull(equals(step_0, 1), 0), timestamp, NULL) AS latest_0,
                              if(ifNull(equals(step_0, 1), 0), uuid, NULL) AS uuid_0,
                              if(ifNull(equals(step_0, 1), 0), e.`$session_id`, NULL) AS `$session_id_0`,
                              if(ifNull(equals(step_0, 1), 0), e.`$window_id`, NULL) AS `$window_id_0`,
                              if(equals(e.event, 'paid'), 1, 0) AS step_1,
                              if(ifNull(equals(step_1, 1), 0), timestamp, NULL) AS latest_1,
                              if(ifNull(equals(step_1, 1), 0), uuid, NULL) AS uuid_1,
                              if(ifNull(equals(step_1, 1), 0), e.`$session_id`, NULL) AS `$session_id_1`,
                              if(ifNull(equals(step_1, 1), 0), e.`$window_id`, NULL) AS `$window_id_1`
                       FROM events AS e
                       WHERE and(equals(e.team_id, 2), and(and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-14 23:59:59.999999', 6, 'UTC'))), in(e.event, tuple('paid', 'user signed up'))), or(ifNull(equals(step_0, 1), 0), ifNull(equals(step_1, 1), 0)))))
                 WHERE ifNull(equals(step_0, 1), 0)))
           GROUP BY aggregation_target,
                    steps
           HAVING ifNull(equals(steps, max_steps), isNull(steps)
                         and isNull(max_steps)))
        WHERE ifNull(in(steps, [1, 2]), 0)
        ORDER BY aggregation_target ASC) AS funnel_actors ON equals(funnel_actors.actor_id, event.`$group_0`)
     WHERE and(equals(event.team_id, 2), greaterOrEquals(toTimeZone(toDateTime(toTimeZone(event.timestamp, 'UTC'), 'UTC'), 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC'))), less(toTimeZone(toDateTime(toTimeZone(event.timestamp, 'UTC'), 'UTC'), 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-14 23:59:59', 6, 'UTC'))), equals(event.team_id, 2), greater(toTimeZone(toDateTime(toTimeZone(event.timestamp, 'UTC'), 'UTC'), 'UTC'), funnel_actors.first_timestamp), less(toTimeZone(toDateTime(toTimeZone(event.timestamp, 'UTC'), 'UTC'), 'UTC'), coalesce(funnel_actors.final_timestamp, plus(toTimeZone(funnel_actors.first_timestamp, 'UTC'), toIntervalDay(14)), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-14 23:59:59', 6, 'UTC')))), notIn(event.event, ['paid', 'user signed up']), equals(event.event, 'negatively_related'), ifNull(equals(funnel_actors.steps, 2), 0))
     GROUP BY actor_id
     ORDER BY actor_id ASC) AS source ON equals(groups.key, source.actor_id)
  ORDER BY source.actor_id ASC
  LIMIT 101
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1
  '''
# ---
# name: TestClickhouseFunnelCorrelation.test_funnel_correlation_with_events_and_groups.7
  '''
  SELECT source.actor_id AS actor_id
  FROM
    (SELECT groups.group_type_index AS index,
            groups.group_key AS key
     FROM groups
     WHERE equals(groups.team_id, 2)
     GROUP BY groups.group_type_index,
              groups.group_key) AS groups
  INNER JOIN
    (SELECT funnel_actors.actor_id AS actor_id,
            any(funnel_actors.matching_events) AS matching_events
     FROM events AS event
     JOIN
       (SELECT aggregation_target AS actor_id,
               final_matching_events AS matching_events,
               timestamp AS timestamp,
               steps AS steps,
               final_timestamp AS final_timestamp,
               first_timestamp AS first_timestamp
        FROM
          (SELECT aggregation_target AS aggregation_target,
                  steps AS steps,
                  avg(step_1_conversion_time) AS step_1_average_conversion_time_inner,
                  median(step_1_conversion_time) AS step_1_median_conversion_time_inner,
                  groupArray(10)(step_0_matching_event) AS step_0_matching_events,
                  groupArray(10)(step_1_matching_event) AS step_1_matching_events,
                  groupArray(10)(final_matching_event) AS final_matching_events,
                  argMax(latest_0, steps) AS timestamp,
                  argMax(latest_1, steps) AS final_timestamp,
                  argMax(latest_0, steps) AS first_timestamp
           FROM
             (SELECT aggregation_target AS aggregation_target,
                     steps AS steps,
                     max(steps) OVER (PARTITION BY aggregation_target) AS max_steps,
                                     step_1_conversion_time AS step_1_conversion_time,
                                     tuple(latest_0, uuid_0, `$session_id_0`, `$window_id_0`) AS step_0_matching_event,
                                     tuple(latest_1, uuid_1, `$session_id_1`, `$window_id_1`) AS step_1_matching_event,
                                     if(isNull(latest_0), tuple(NULL, NULL, NULL, NULL), if(isNull(latest_1), step_0_matching_event, step_1_matching_event)) AS final_matching_event,
                                     latest_0 AS latest_0,
                                     latest_1 AS latest_1,
                                     latest_0 AS latest_0
              FROM
                (SELECT aggregation_target AS aggregation_target,
                        timestamp AS timestamp,
                        step_0 AS step_0,
                        latest_0 AS latest_0,
                        uuid_0 AS uuid_0,
                        `$session_id_0` AS `$session_id_0`,
                        `$window_id_0` AS `$window_id_0`,
                        step_1 AS step_1,
                        latest_1 AS latest_1,
                        uuid_1 AS uuid_1,
                        `$session_id_1` AS `$session_id_1`,
                        `$window_id_1` AS `$window_id_1`,
                        if(and(ifNull(lessOrEquals(latest_0, latest_1), 0), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), 2, 1) AS steps,
                        if(and(isNotNull(latest_1), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), dateDiff('second', latest_0, latest_1), NULL) AS step_1_conversion_time,
                        tuple(latest_0, uuid_0, `$session_id_0`, `$window_id_0`) AS step_0_matching_event,
                        tuple(latest_1, uuid_1, `$session_id_1`, `$window_id_1`) AS step_1_matching_event,
                        if(isNull(latest_0), tuple(NULL, NULL, NULL, NULL), if(isNull(latest_1), step_0_matching_event, step_1_matching_event)) AS final_matching_event
                 FROM
                   (SELECT aggregation_target AS aggregation_target,
                           timestamp AS timestamp,
                           step_0 AS step_0,
                           latest_0 AS latest_0,
                           uuid_0 AS uuid_0,
                           `$session_id_0` AS `$session_id_0`,
                           `$window_id_0` AS `$window_id_0`,
                           step_1 AS step_1,
                           min(latest_1) OVER (PARTITION BY aggregation_target
                                               ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS latest_1,
                                              last_value(uuid_1) OVER (PARTITION BY aggregation_target
                                                                       ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS uuid_1,
                                                                      last_value(`$session_id_1`) OVER (PARTITION BY aggregation_target
                                                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS `$session_id_1`,
                                                                                                       last_value(`$window_id_1`) OVER (PARTITION BY aggregation_target
                                                                                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS `$window_id_1`
                    FROM
                      (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                              e.`$group_0` AS aggregation_target,
                              e.uuid AS uuid,
                              if(equals(e.event, 'user signed up'), 1, 0) AS step_0,
                              if(ifNull(equals(step_0, 1), 0), timestamp, NULL) AS latest_0,
                              if(ifNull(equals(step_0, 1), 0), uuid, NULL) AS uuid_0,
                              if(ifNull(equals(step_0, 1), 0), e.`$session_id`, NULL) AS `$session_id_0`,
                              if(ifNull(equals(step_0, 1), 0), e.`$window_id`, NULL) AS `$window_id_0`,
                              if(equals(e.event, 'paid'), 1, 0) AS step_1,
                              if(ifNull(equals(step_1, 1), 0), timestamp, NULL) AS latest_1,
                              if(ifNull(equals(step_1, 1), 0), uuid, NULL) AS uuid_1,
                              if(ifNull(equals(step_1, 1), 0), e.`$session_id`, NULL) AS `$session_id_1`,
                              if(ifNull(equals(step_1, 1), 0), e.`$window_id`, NULL) AS `$window_id_1`
                       FROM events AS e
                       WHERE and(equals(e.team_id, 2), and(and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-14 23:59:59.999999', 6, 'UTC'))), in(e.event, tuple('paid', 'user signed up'))), or(ifNull(equals(step_0, 1), 0), ifNull(equals(step_1, 1), 0)))))
                 WHERE ifNull(equals(step_0, 1), 0)))
           GROUP BY aggregation_target,
                    steps
           HAVING ifNull(equals(steps, max_steps), isNull(steps)
                         and isNull(max_steps)))
        WHERE ifNull(in(steps, [1, 2]), 0)
        ORDER BY aggregation_target ASC) AS funnel_actors ON equals(funnel_actors.actor_id, event.`$group_0`)
     WHERE and(equals(event.team_id, 2), greaterOrEquals(toTimeZone(toDateTime(toTimeZone(event.timestamp, 'UTC'), 'UTC'), 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC'))), less(toTimeZone(toDateTime(toTimeZone(event.timestamp, 'UTC'), 'UTC'), 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-14 23:59:59', 6, 'UTC'))), equals(event.team_id, 2), greater(toTimeZone(toDateTime(toTimeZone(event.timestamp, 'UTC'), 'UTC'), 'UTC'), funnel_actors.first_timestamp), less(toTimeZone(toDateTime(toTimeZone(event.timestamp, 'UTC'), 'UTC'), 'UTC'), coalesce(funnel_actors.final_timestamp, plus(toTimeZone(funnel_actors.first_timestamp, 'UTC'), toIntervalDay(14)), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-14 23:59:59', 6, 'UTC')))), notIn(event.event, ['paid', 'user signed up']), equals(event.event, 'negatively_related'), ifNull(notEquals(funnel_actors.steps, 2), 1))
     GROUP BY actor_id
     ORDER BY actor_id ASC) AS source ON equals(groups.key, source.actor_id)
  ORDER BY source.actor_id ASC
  LIMIT 101
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1
  '''
# ---
# name: TestClickhouseFunnelCorrelation.test_funnel_correlation_with_events_and_groups_poe_v2
  '''
  SELECT event.event AS name,
         countIf(funnel_actors.actor_id, ifNull(equals(funnel_actors.steps, 2), 0)) AS success_count,
         countIf(funnel_actors.actor_id, ifNull(notEquals(funnel_actors.steps, 2), 1)) AS failure_count
  FROM events AS event
  JOIN
    (SELECT aggregation_target AS actor_id,
            timestamp AS timestamp,
            steps AS steps,
            final_timestamp AS final_timestamp,
            first_timestamp AS first_timestamp
     FROM
       (SELECT aggregation_target AS aggregation_target,
               steps AS steps,
               avg(step_1_conversion_time) AS step_1_average_conversion_time_inner,
               median(step_1_conversion_time) AS step_1_median_conversion_time_inner,
               argMax(latest_0, steps) AS timestamp,
               argMax(latest_1, steps) AS final_timestamp,
               argMax(latest_0, steps) AS first_timestamp
        FROM
          (SELECT aggregation_target AS aggregation_target,
                  steps AS steps,
                  max(steps) OVER (PARTITION BY aggregation_target) AS max_steps,
                                  step_1_conversion_time AS step_1_conversion_time,
                                  latest_0 AS latest_0,
                                  latest_1 AS latest_1,
                                  latest_0 AS latest_0
           FROM
             (SELECT aggregation_target AS aggregation_target,
                     timestamp AS timestamp,
                     step_0 AS step_0,
                     latest_0 AS latest_0,
                     step_1 AS step_1,
                     latest_1 AS latest_1,
                     if(and(ifNull(lessOrEquals(latest_0, latest_1), 0), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), 2, 1) AS steps,
                     if(and(isNotNull(latest_1), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), dateDiff('second', latest_0, latest_1), NULL) AS step_1_conversion_time
              FROM
                (SELECT aggregation_target AS aggregation_target,
                        timestamp AS timestamp,
                        step_0 AS step_0,
                        latest_0 AS latest_0,
                        step_1 AS step_1,
                        min(latest_1) OVER (PARTITION BY aggregation_target
                                            ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS latest_1
                 FROM
                   (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                           e.`$group_0` AS aggregation_target,
                           if(equals(e.event, 'user signed up'), 1, 0) AS step_0,
                           if(ifNull(equals(step_0, 1), 0), timestamp, NULL) AS latest_0,
                           if(equals(e.event, 'paid'), 1, 0) AS step_1,
                           if(ifNull(equals(step_1, 1), 0), timestamp, NULL) AS latest_1
                    FROM events AS e
                    WHERE and(equals(e.team_id, 2), and(and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-14 23:59:59.999999', 6, 'UTC'))), in(e.event, tuple('paid', 'user signed up'))), or(ifNull(equals(step_0, 1), 0), ifNull(equals(step_1, 1), 0)))))
              WHERE ifNull(equals(step_0, 1), 0)))
        GROUP BY aggregation_target,
                 steps
        HAVING ifNull(equals(steps, max_steps), isNull(steps)
                      and isNull(max_steps)))
     WHERE ifNull(in(steps, [1, 2]), 0)
     ORDER BY aggregation_target ASC) AS funnel_actors ON equals(funnel_actors.actor_id, event.`$group_0`)
  WHERE and(equals(event.team_id, 2), greaterOrEquals(toTimeZone(toDateTime(toTimeZone(event.timestamp, 'UTC'), 'UTC'), 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC'))), less(toTimeZone(toDateTime(toTimeZone(event.timestamp, 'UTC'), 'UTC'), 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-14 23:59:59', 6, 'UTC'))), equals(event.team_id, 2), greater(toTimeZone(toDateTime(toTimeZone(event.timestamp, 'UTC'), 'UTC'), 'UTC'), funnel_actors.first_timestamp), less(toTimeZone(toDateTime(toTimeZone(event.timestamp, 'UTC'), 'UTC'), 'UTC'), coalesce(funnel_actors.final_timestamp, plus(toTimeZone(funnel_actors.first_timestamp, 'UTC'), toIntervalDay(14)), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-14 23:59:59', 6, 'UTC')))), notIn(event.event, ['paid', 'user signed up']), notIn(event.event, []))
  GROUP BY name
  LIMIT 100
  UNION ALL
  SELECT 'Total_Values_In_Query' AS name,
         countIf(funnel_actors.actor_id, ifNull(equals(funnel_actors.steps, 2), 0)) AS success_count,
         countIf(funnel_actors.actor_id, ifNull(notEquals(funnel_actors.steps, 2), 1)) AS failure_count
  FROM
    (SELECT aggregation_target AS actor_id,
            timestamp AS timestamp,
            steps AS steps,
            final_timestamp AS final_timestamp,
            first_timestamp AS first_timestamp
     FROM
       (SELECT aggregation_target AS aggregation_target,
               steps AS steps,
               avg(step_1_conversion_time) AS step_1_average_conversion_time_inner,
               median(step_1_conversion_time) AS step_1_median_conversion_time_inner,
               argMax(latest_0, steps) AS timestamp,
               argMax(latest_1, steps) AS final_timestamp,
               argMax(latest_0, steps) AS first_timestamp
        FROM
          (SELECT aggregation_target AS aggregation_target,
                  steps AS steps,
                  max(steps) OVER (PARTITION BY aggregation_target) AS max_steps,
                                  step_1_conversion_time AS step_1_conversion_time,
                                  latest_0 AS latest_0,
                                  latest_1 AS latest_1,
                                  latest_0 AS latest_0
           FROM
             (SELECT aggregation_target AS aggregation_target,
                     timestamp AS timestamp,
                     step_0 AS step_0,
                     latest_0 AS latest_0,
                     step_1 AS step_1,
                     latest_1 AS latest_1,
                     if(and(ifNull(lessOrEquals(latest_0, latest_1), 0), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), 2, 1) AS steps,
                     if(and(isNotNull(latest_1), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), dateDiff('second', latest_0, latest_1), NULL) AS step_1_conversion_time
              FROM
                (SELECT aggregation_target AS aggregation_target,
                        timestamp AS timestamp,
                        step_0 AS step_0,
                        latest_0 AS latest_0,
                        step_1 AS step_1,
                        min(latest_1) OVER (PARTITION BY aggregation_target
                                            ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS latest_1
                 FROM
                   (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                           e.`$group_0` AS aggregation_target,
                           if(equals(e.event, 'user signed up'), 1, 0) AS step_0,
                           if(ifNull(equals(step_0, 1), 0), timestamp, NULL) AS latest_0,
                           if(equals(e.event, 'paid'), 1, 0) AS step_1,
                           if(ifNull(equals(step_1, 1), 0), timestamp, NULL) AS latest_1
                    FROM events AS e
                    WHERE and(equals(e.team_id, 2), and(and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-14 23:59:59.999999', 6, 'UTC'))), in(e.event, tuple('paid', 'user signed up'))), or(ifNull(equals(step_0, 1), 0), ifNull(equals(step_1, 1), 0)))))
              WHERE ifNull(equals(step_0, 1), 0)))
        GROUP BY aggregation_target,
                 steps
        HAVING ifNull(equals(steps, max_steps), isNull(steps)
                      and isNull(max_steps)))
     WHERE ifNull(in(steps, [1, 2]), 0)
     ORDER BY aggregation_target ASC) AS funnel_actors
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '''
# ---
# name: TestClickhouseFunnelCorrelation.test_funnel_correlation_with_events_and_groups_poe_v2.1
  '''
  SELECT source.actor_id AS actor_id
  FROM
    (SELECT groups.group_type_index AS index,
            groups.group_key AS key
     FROM groups
     WHERE equals(groups.team_id, 2)
     GROUP BY groups.group_type_index,
              groups.group_key) AS groups
  INNER JOIN
    (SELECT funnel_actors.actor_id AS actor_id,
            any(funnel_actors.matching_events) AS matching_events
     FROM events AS event
     JOIN
       (SELECT aggregation_target AS actor_id,
               final_matching_events AS matching_events,
               timestamp AS timestamp,
               steps AS steps,
               final_timestamp AS final_timestamp,
               first_timestamp AS first_timestamp
        FROM
          (SELECT aggregation_target AS aggregation_target,
                  steps AS steps,
                  avg(step_1_conversion_time) AS step_1_average_conversion_time_inner,
                  median(step_1_conversion_time) AS step_1_median_conversion_time_inner,
                  groupArray(10)(step_0_matching_event) AS step_0_matching_events,
                  groupArray(10)(step_1_matching_event) AS step_1_matching_events,
                  groupArray(10)(final_matching_event) AS final_matching_events,
                  argMax(latest_0, steps) AS timestamp,
                  argMax(latest_1, steps) AS final_timestamp,
                  argMax(latest_0, steps) AS first_timestamp
           FROM
             (SELECT aggregation_target AS aggregation_target,
                     steps AS steps,
                     max(steps) OVER (PARTITION BY aggregation_target) AS max_steps,
                                     step_1_conversion_time AS step_1_conversion_time,
                                     tuple(latest_0, uuid_0, `$session_id_0`, `$window_id_0`) AS step_0_matching_event,
                                     tuple(latest_1, uuid_1, `$session_id_1`, `$window_id_1`) AS step_1_matching_event,
                                     if(isNull(latest_0), tuple(NULL, NULL, NULL, NULL), if(isNull(latest_1), step_0_matching_event, step_1_matching_event)) AS final_matching_event,
                                     latest_0 AS latest_0,
                                     latest_1 AS latest_1,
                                     latest_0 AS latest_0
              FROM
                (SELECT aggregation_target AS aggregation_target,
                        timestamp AS timestamp,
                        step_0 AS step_0,
                        latest_0 AS latest_0,
                        uuid_0 AS uuid_0,
                        `$session_id_0` AS `$session_id_0`,
                        `$window_id_0` AS `$window_id_0`,
                        step_1 AS step_1,
                        latest_1 AS latest_1,
                        uuid_1 AS uuid_1,
                        `$session_id_1` AS `$session_id_1`,
                        `$window_id_1` AS `$window_id_1`,
                        if(and(ifNull(lessOrEquals(latest_0, latest_1), 0), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), 2, 1) AS steps,
                        if(and(isNotNull(latest_1), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), dateDiff('second', latest_0, latest_1), NULL) AS step_1_conversion_time,
                        tuple(latest_0, uuid_0, `$session_id_0`, `$window_id_0`) AS step_0_matching_event,
                        tuple(latest_1, uuid_1, `$session_id_1`, `$window_id_1`) AS step_1_matching_event,
                        if(isNull(latest_0), tuple(NULL, NULL, NULL, NULL), if(isNull(latest_1), step_0_matching_event, step_1_matching_event)) AS final_matching_event
                 FROM
                   (SELECT aggregation_target AS aggregation_target,
                           timestamp AS timestamp,
                           step_0 AS step_0,
                           latest_0 AS latest_0,
                           uuid_0 AS uuid_0,
                           `$session_id_0` AS `$session_id_0`,
                           `$window_id_0` AS `$window_id_0`,
                           step_1 AS step_1,
                           min(latest_1) OVER (PARTITION BY aggregation_target
                                               ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS latest_1,
                                              last_value(uuid_1) OVER (PARTITION BY aggregation_target
                                                                       ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS uuid_1,
                                                                      last_value(`$session_id_1`) OVER (PARTITION BY aggregation_target
                                                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS `$session_id_1`,
                                                                                                       last_value(`$window_id_1`) OVER (PARTITION BY aggregation_target
                                                                                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS `$window_id_1`
                    FROM
                      (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                              e.`$group_0` AS aggregation_target,
                              e.uuid AS uuid,
                              if(equals(e.event, 'user signed up'), 1, 0) AS step_0,
                              if(ifNull(equals(step_0, 1), 0), timestamp, NULL) AS latest_0,
                              if(ifNull(equals(step_0, 1), 0), uuid, NULL) AS uuid_0,
                              if(ifNull(equals(step_0, 1), 0), e.`$session_id`, NULL) AS `$session_id_0`,
                              if(ifNull(equals(step_0, 1), 0), e.`$window_id`, NULL) AS `$window_id_0`,
                              if(equals(e.event, 'paid'), 1, 0) AS step_1,
                              if(ifNull(equals(step_1, 1), 0), timestamp, NULL) AS latest_1,
                              if(ifNull(equals(step_1, 1), 0), uuid, NULL) AS uuid_1,
                              if(ifNull(equals(step_1, 1), 0), e.`$session_id`, NULL) AS `$session_id_1`,
                              if(ifNull(equals(step_1, 1), 0), e.`$window_id`, NULL) AS `$window_id_1`
                       FROM events AS e
                       WHERE and(equals(e.team_id, 2), and(and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-14 23:59:59.999999', 6, 'UTC'))), in(e.event, tuple('paid', 'user signed up'))), or(ifNull(equals(step_0, 1), 0), ifNull(equals(step_1, 1), 0)))))
                 WHERE ifNull(equals(step_0, 1), 0)))
           GROUP BY aggregation_target,
                    steps
           HAVING ifNull(equals(steps, max_steps), isNull(steps)
                         and isNull(max_steps)))
        WHERE ifNull(in(steps, [1, 2]), 0)
        ORDER BY aggregation_target ASC) AS funnel_actors ON equals(funnel_actors.actor_id, event.`$group_0`)
     WHERE and(equals(event.team_id, 2), greaterOrEquals(toTimeZone(toDateTime(toTimeZone(event.timestamp, 'UTC'), 'UTC'), 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC'))), less(toTimeZone(toDateTime(toTimeZone(event.timestamp, 'UTC'), 'UTC'), 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-14 23:59:59', 6, 'UTC'))), equals(event.team_id, 2), greater(toTimeZone(toDateTime(toTimeZone(event.timestamp, 'UTC'), 'UTC'), 'UTC'), funnel_actors.first_timestamp), less(toTimeZone(toDateTime(toTimeZone(event.timestamp, 'UTC'), 'UTC'), 'UTC'), coalesce(funnel_actors.final_timestamp, plus(toTimeZone(funnel_actors.first_timestamp, 'UTC'), toIntervalDay(14)), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-14 23:59:59', 6, 'UTC')))), notIn(event.event, ['paid', 'user signed up']), equals(event.event, 'positively_related'), ifNull(equals(funnel_actors.steps, 2), 0))
     GROUP BY actor_id
     ORDER BY actor_id ASC) AS source ON equals(groups.key, source.actor_id)
  ORDER BY source.actor_id ASC
  LIMIT 101
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1
  '''
# ---
# name: TestClickhouseFunnelCorrelation.test_funnel_correlation_with_events_and_groups_poe_v2.2
  '''
  SELECT source.actor_id AS actor_id
  FROM
    (SELECT groups.group_type_index AS index,
            groups.group_key AS key
     FROM groups
     WHERE equals(groups.team_id, 2)
     GROUP BY groups.group_type_index,
              groups.group_key) AS groups
  INNER JOIN
    (SELECT funnel_actors.actor_id AS actor_id,
            any(funnel_actors.matching_events) AS matching_events
     FROM events AS event
     JOIN
       (SELECT aggregation_target AS actor_id,
               final_matching_events AS matching_events,
               timestamp AS timestamp,
               steps AS steps,
               final_timestamp AS final_timestamp,
               first_timestamp AS first_timestamp
        FROM
          (SELECT aggregation_target AS aggregation_target,
                  steps AS steps,
                  avg(step_1_conversion_time) AS step_1_average_conversion_time_inner,
                  median(step_1_conversion_time) AS step_1_median_conversion_time_inner,
                  groupArray(10)(step_0_matching_event) AS step_0_matching_events,
                  groupArray(10)(step_1_matching_event) AS step_1_matching_events,
                  groupArray(10)(final_matching_event) AS final_matching_events,
                  argMax(latest_0, steps) AS timestamp,
                  argMax(latest_1, steps) AS final_timestamp,
                  argMax(latest_0, steps) AS first_timestamp
           FROM
             (SELECT aggregation_target AS aggregation_target,
                     steps AS steps,
                     max(steps) OVER (PARTITION BY aggregation_target) AS max_steps,
                                     step_1_conversion_time AS step_1_conversion_time,
                                     tuple(latest_0, uuid_0, `$session_id_0`, `$window_id_0`) AS step_0_matching_event,
                                     tuple(latest_1, uuid_1, `$session_id_1`, `$window_id_1`) AS step_1_matching_event,
                                     if(isNull(latest_0), tuple(NULL, NULL, NULL, NULL), if(isNull(latest_1), step_0_matching_event, step_1_matching_event)) AS final_matching_event,
                                     latest_0 AS latest_0,
                                     latest_1 AS latest_1,
                                     latest_0 AS latest_0
              FROM
                (SELECT aggregation_target AS aggregation_target,
                        timestamp AS timestamp,
                        step_0 AS step_0,
                        latest_0 AS latest_0,
                        uuid_0 AS uuid_0,
                        `$session_id_0` AS `$session_id_0`,
                        `$window_id_0` AS `$window_id_0`,
                        step_1 AS step_1,
                        latest_1 AS latest_1,
                        uuid_1 AS uuid_1,
                        `$session_id_1` AS `$session_id_1`,
                        `$window_id_1` AS `$window_id_1`,
                        if(and(ifNull(lessOrEquals(latest_0, latest_1), 0), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), 2, 1) AS steps,
                        if(and(isNotNull(latest_1), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), dateDiff('second', latest_0, latest_1), NULL) AS step_1_conversion_time,
                        tuple(latest_0, uuid_0, `$session_id_0`, `$window_id_0`) AS step_0_matching_event,
                        tuple(latest_1, uuid_1, `$session_id_1`, `$window_id_1`) AS step_1_matching_event,
                        if(isNull(latest_0), tuple(NULL, NULL, NULL, NULL), if(isNull(latest_1), step_0_matching_event, step_1_matching_event)) AS final_matching_event
                 FROM
                   (SELECT aggregation_target AS aggregation_target,
                           timestamp AS timestamp,
                           step_0 AS step_0,
                           latest_0 AS latest_0,
                           uuid_0 AS uuid_0,
                           `$session_id_0` AS `$session_id_0`,
                           `$window_id_0` AS `$window_id_0`,
                           step_1 AS step_1,
                           min(latest_1) OVER (PARTITION BY aggregation_target
                                               ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS latest_1,
                                              last_value(uuid_1) OVER (PARTITION BY aggregation_target
                                                                       ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS uuid_1,
                                                                      last_value(`$session_id_1`) OVER (PARTITION BY aggregation_target
                                                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS `$session_id_1`,
                                                                                                       last_value(`$window_id_1`) OVER (PARTITION BY aggregation_target
                                                                                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS `$window_id_1`
                    FROM
                      (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                              e.`$group_0` AS aggregation_target,
                              e.uuid AS uuid,
                              if(equals(e.event, 'user signed up'), 1, 0) AS step_0,
                              if(ifNull(equals(step_0, 1), 0), timestamp, NULL) AS latest_0,
                              if(ifNull(equals(step_0, 1), 0), uuid, NULL) AS uuid_0,
                              if(ifNull(equals(step_0, 1), 0), e.`$session_id`, NULL) AS `$session_id_0`,
                              if(ifNull(equals(step_0, 1), 0), e.`$window_id`, NULL) AS `$window_id_0`,
                              if(equals(e.event, 'paid'), 1, 0) AS step_1,
                              if(ifNull(equals(step_1, 1), 0), timestamp, NULL) AS latest_1,
                              if(ifNull(equals(step_1, 1), 0), uuid, NULL) AS uuid_1,
                              if(ifNull(equals(step_1, 1), 0), e.`$session_id`, NULL) AS `$session_id_1`,
                              if(ifNull(equals(step_1, 1), 0), e.`$window_id`, NULL) AS `$window_id_1`
                       FROM events AS e
                       WHERE and(equals(e.team_id, 2), and(and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-14 23:59:59.999999', 6, 'UTC'))), in(e.event, tuple('paid', 'user signed up'))), or(ifNull(equals(step_0, 1), 0), ifNull(equals(step_1, 1), 0)))))
                 WHERE ifNull(equals(step_0, 1), 0)))
           GROUP BY aggregation_target,
                    steps
           HAVING ifNull(equals(steps, max_steps), isNull(steps)
                         and isNull(max_steps)))
        WHERE ifNull(in(steps, [1, 2]), 0)
        ORDER BY aggregation_target ASC) AS funnel_actors ON equals(funnel_actors.actor_id, event.`$group_0`)
     WHERE and(equals(event.team_id, 2), greaterOrEquals(toTimeZone(toDateTime(toTimeZone(event.timestamp, 'UTC'), 'UTC'), 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC'))), less(toTimeZone(toDateTime(toTimeZone(event.timestamp, 'UTC'), 'UTC'), 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-14 23:59:59', 6, 'UTC'))), equals(event.team_id, 2), greater(toTimeZone(toDateTime(toTimeZone(event.timestamp, 'UTC'), 'UTC'), 'UTC'), funnel_actors.first_timestamp), less(toTimeZone(toDateTime(toTimeZone(event.timestamp, 'UTC'), 'UTC'), 'UTC'), coalesce(funnel_actors.final_timestamp, plus(toTimeZone(funnel_actors.first_timestamp, 'UTC'), toIntervalDay(14)), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-14 23:59:59', 6, 'UTC')))), notIn(event.event, ['paid', 'user signed up']), equals(event.event, 'positively_related'), ifNull(notEquals(funnel_actors.steps, 2), 1))
     GROUP BY actor_id
     ORDER BY actor_id ASC) AS source ON equals(groups.key, source.actor_id)
  ORDER BY source.actor_id ASC
  LIMIT 101
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1
  '''
# ---
# name: TestClickhouseFunnelCorrelation.test_funnel_correlation_with_events_and_groups_poe_v2.3
  '''
  SELECT source.actor_id AS actor_id
  FROM
    (SELECT groups.group_type_index AS index,
            groups.group_key AS key
     FROM groups
     WHERE equals(groups.team_id, 2)
     GROUP BY groups.group_type_index,
              groups.group_key) AS groups
  INNER JOIN
    (SELECT funnel_actors.actor_id AS actor_id,
            any(funnel_actors.matching_events) AS matching_events
     FROM events AS event
     JOIN
       (SELECT aggregation_target AS actor_id,
               final_matching_events AS matching_events,
               timestamp AS timestamp,
               steps AS steps,
               final_timestamp AS final_timestamp,
               first_timestamp AS first_timestamp
        FROM
          (SELECT aggregation_target AS aggregation_target,
                  steps AS steps,
                  avg(step_1_conversion_time) AS step_1_average_conversion_time_inner,
                  median(step_1_conversion_time) AS step_1_median_conversion_time_inner,
                  groupArray(10)(step_0_matching_event) AS step_0_matching_events,
                  groupArray(10)(step_1_matching_event) AS step_1_matching_events,
                  groupArray(10)(final_matching_event) AS final_matching_events,
                  argMax(latest_0, steps) AS timestamp,
                  argMax(latest_1, steps) AS final_timestamp,
                  argMax(latest_0, steps) AS first_timestamp
           FROM
             (SELECT aggregation_target AS aggregation_target,
                     steps AS steps,
                     max(steps) OVER (PARTITION BY aggregation_target) AS max_steps,
                                     step_1_conversion_time AS step_1_conversion_time,
                                     tuple(latest_0, uuid_0, `$session_id_0`, `$window_id_0`) AS step_0_matching_event,
                                     tuple(latest_1, uuid_1, `$session_id_1`, `$window_id_1`) AS step_1_matching_event,
                                     if(isNull(latest_0), tuple(NULL, NULL, NULL, NULL), if(isNull(latest_1), step_0_matching_event, step_1_matching_event)) AS final_matching_event,
                                     latest_0 AS latest_0,
                                     latest_1 AS latest_1,
                                     latest_0 AS latest_0
              FROM
                (SELECT aggregation_target AS aggregation_target,
                        timestamp AS timestamp,
                        step_0 AS step_0,
                        latest_0 AS latest_0,
                        uuid_0 AS uuid_0,
                        `$session_id_0` AS `$session_id_0`,
                        `$window_id_0` AS `$window_id_0`,
                        step_1 AS step_1,
                        latest_1 AS latest_1,
                        uuid_1 AS uuid_1,
                        `$session_id_1` AS `$session_id_1`,
                        `$window_id_1` AS `$window_id_1`,
                        if(and(ifNull(lessOrEquals(latest_0, latest_1), 0), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), 2, 1) AS steps,
                        if(and(isNotNull(latest_1), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), dateDiff('second', latest_0, latest_1), NULL) AS step_1_conversion_time,
                        tuple(latest_0, uuid_0, `$session_id_0`, `$window_id_0`) AS step_0_matching_event,
                        tuple(latest_1, uuid_1, `$session_id_1`, `$window_id_1`) AS step_1_matching_event,
                        if(isNull(latest_0), tuple(NULL, NULL, NULL, NULL), if(isNull(latest_1), step_0_matching_event, step_1_matching_event)) AS final_matching_event
                 FROM
                   (SELECT aggregation_target AS aggregation_target,
                           timestamp AS timestamp,
                           step_0 AS step_0,
                           latest_0 AS latest_0,
                           uuid_0 AS uuid_0,
                           `$session_id_0` AS `$session_id_0`,
                           `$window_id_0` AS `$window_id_0`,
                           step_1 AS step_1,
                           min(latest_1) OVER (PARTITION BY aggregation_target
                                               ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS latest_1,
                                              last_value(uuid_1) OVER (PARTITION BY aggregation_target
                                                                       ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS uuid_1,
                                                                      last_value(`$session_id_1`) OVER (PARTITION BY aggregation_target
                                                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS `$session_id_1`,
                                                                                                       last_value(`$window_id_1`) OVER (PARTITION BY aggregation_target
                                                                                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS `$window_id_1`
                    FROM
                      (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                              e.`$group_0` AS aggregation_target,
                              e.uuid AS uuid,
                              if(equals(e.event, 'user signed up'), 1, 0) AS step_0,
                              if(ifNull(equals(step_0, 1), 0), timestamp, NULL) AS latest_0,
                              if(ifNull(equals(step_0, 1), 0), uuid, NULL) AS uuid_0,
                              if(ifNull(equals(step_0, 1), 0), e.`$session_id`, NULL) AS `$session_id_0`,
                              if(ifNull(equals(step_0, 1), 0), e.`$window_id`, NULL) AS `$window_id_0`,
                              if(equals(e.event, 'paid'), 1, 0) AS step_1,
                              if(ifNull(equals(step_1, 1), 0), timestamp, NULL) AS latest_1,
                              if(ifNull(equals(step_1, 1), 0), uuid, NULL) AS uuid_1,
                              if(ifNull(equals(step_1, 1), 0), e.`$session_id`, NULL) AS `$session_id_1`,
                              if(ifNull(equals(step_1, 1), 0), e.`$window_id`, NULL) AS `$window_id_1`
                       FROM events AS e
                       WHERE and(equals(e.team_id, 2), and(and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-14 23:59:59.999999', 6, 'UTC'))), in(e.event, tuple('paid', 'user signed up'))), or(ifNull(equals(step_0, 1), 0), ifNull(equals(step_1, 1), 0)))))
                 WHERE ifNull(equals(step_0, 1), 0)))
           GROUP BY aggregation_target,
                    steps
           HAVING ifNull(equals(steps, max_steps), isNull(steps)
                         and isNull(max_steps)))
        WHERE ifNull(in(steps, [1, 2]), 0)
        ORDER BY aggregation_target ASC) AS funnel_actors ON equals(funnel_actors.actor_id, event.`$group_0`)
     WHERE and(equals(event.team_id, 2), greaterOrEquals(toTimeZone(toDateTime(toTimeZone(event.timestamp, 'UTC'), 'UTC'), 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC'))), less(toTimeZone(toDateTime(toTimeZone(event.timestamp, 'UTC'), 'UTC'), 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-14 23:59:59', 6, 'UTC'))), equals(event.team_id, 2), greater(toTimeZone(toDateTime(toTimeZone(event.timestamp, 'UTC'), 'UTC'), 'UTC'), funnel_actors.first_timestamp), less(toTimeZone(toDateTime(toTimeZone(event.timestamp, 'UTC'), 'UTC'), 'UTC'), coalesce(funnel_actors.final_timestamp, plus(toTimeZone(funnel_actors.first_timestamp, 'UTC'), toIntervalDay(14)), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-14 23:59:59', 6, 'UTC')))), notIn(event.event, ['paid', 'user signed up']), equals(event.event, 'negatively_related'), ifNull(equals(funnel_actors.steps, 2), 0))
     GROUP BY actor_id
     ORDER BY actor_id ASC) AS source ON equals(groups.key, source.actor_id)
  ORDER BY source.actor_id ASC
  LIMIT 101
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1
  '''
# ---
# name: TestClickhouseFunnelCorrelation.test_funnel_correlation_with_events_and_groups_poe_v2.4
  '''
  SELECT source.actor_id AS actor_id
  FROM
    (SELECT groups.group_type_index AS index,
            groups.group_key AS key
     FROM groups
     WHERE equals(groups.team_id, 2)
     GROUP BY groups.group_type_index,
              groups.group_key) AS groups
  INNER JOIN
    (SELECT funnel_actors.actor_id AS actor_id,
            any(funnel_actors.matching_events) AS matching_events
     FROM events AS event
     JOIN
       (SELECT aggregation_target AS actor_id,
               final_matching_events AS matching_events,
               timestamp AS timestamp,
               steps AS steps,
               final_timestamp AS final_timestamp,
               first_timestamp AS first_timestamp
        FROM
          (SELECT aggregation_target AS aggregation_target,
                  steps AS steps,
                  avg(step_1_conversion_time) AS step_1_average_conversion_time_inner,
                  median(step_1_conversion_time) AS step_1_median_conversion_time_inner,
                  groupArray(10)(step_0_matching_event) AS step_0_matching_events,
                  groupArray(10)(step_1_matching_event) AS step_1_matching_events,
                  groupArray(10)(final_matching_event) AS final_matching_events,
                  argMax(latest_0, steps) AS timestamp,
                  argMax(latest_1, steps) AS final_timestamp,
                  argMax(latest_0, steps) AS first_timestamp
           FROM
             (SELECT aggregation_target AS aggregation_target,
                     steps AS steps,
                     max(steps) OVER (PARTITION BY aggregation_target) AS max_steps,
                                     step_1_conversion_time AS step_1_conversion_time,
                                     tuple(latest_0, uuid_0, `$session_id_0`, `$window_id_0`) AS step_0_matching_event,
                                     tuple(latest_1, uuid_1, `$session_id_1`, `$window_id_1`) AS step_1_matching_event,
                                     if(isNull(latest_0), tuple(NULL, NULL, NULL, NULL), if(isNull(latest_1), step_0_matching_event, step_1_matching_event)) AS final_matching_event,
                                     latest_0 AS latest_0,
                                     latest_1 AS latest_1,
                                     latest_0 AS latest_0
              FROM
                (SELECT aggregation_target AS aggregation_target,
                        timestamp AS timestamp,
                        step_0 AS step_0,
                        latest_0 AS latest_0,
                        uuid_0 AS uuid_0,
                        `$session_id_0` AS `$session_id_0`,
                        `$window_id_0` AS `$window_id_0`,
                        step_1 AS step_1,
                        latest_1 AS latest_1,
                        uuid_1 AS uuid_1,
                        `$session_id_1` AS `$session_id_1`,
                        `$window_id_1` AS `$window_id_1`,
                        if(and(ifNull(lessOrEquals(latest_0, latest_1), 0), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), 2, 1) AS steps,
                        if(and(isNotNull(latest_1), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), dateDiff('second', latest_0, latest_1), NULL) AS step_1_conversion_time,
                        tuple(latest_0, uuid_0, `$session_id_0`, `$window_id_0`) AS step_0_matching_event,
                        tuple(latest_1, uuid_1, `$session_id_1`, `$window_id_1`) AS step_1_matching_event,
                        if(isNull(latest_0), tuple(NULL, NULL, NULL, NULL), if(isNull(latest_1), step_0_matching_event, step_1_matching_event)) AS final_matching_event
                 FROM
                   (SELECT aggregation_target AS aggregation_target,
                           timestamp AS timestamp,
                           step_0 AS step_0,
                           latest_0 AS latest_0,
                           uuid_0 AS uuid_0,
                           `$session_id_0` AS `$session_id_0`,
                           `$window_id_0` AS `$window_id_0`,
                           step_1 AS step_1,
                           min(latest_1) OVER (PARTITION BY aggregation_target
                                               ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS latest_1,
                                              last_value(uuid_1) OVER (PARTITION BY aggregation_target
                                                                       ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS uuid_1,
                                                                      last_value(`$session_id_1`) OVER (PARTITION BY aggregation_target
                                                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS `$session_id_1`,
                                                                                                       last_value(`$window_id_1`) OVER (PARTITION BY aggregation_target
                                                                                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS `$window_id_1`
                    FROM
                      (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                              e.`$group_0` AS aggregation_target,
                              e.uuid AS uuid,
                              if(equals(e.event, 'user signed up'), 1, 0) AS step_0,
                              if(ifNull(equals(step_0, 1), 0), timestamp, NULL) AS latest_0,
                              if(ifNull(equals(step_0, 1), 0), uuid, NULL) AS uuid_0,
                              if(ifNull(equals(step_0, 1), 0), e.`$session_id`, NULL) AS `$session_id_0`,
                              if(ifNull(equals(step_0, 1), 0), e.`$window_id`, NULL) AS `$window_id_0`,
                              if(equals(e.event, 'paid'), 1, 0) AS step_1,
                              if(ifNull(equals(step_1, 1), 0), timestamp, NULL) AS latest_1,
                              if(ifNull(equals(step_1, 1), 0), uuid, NULL) AS uuid_1,
                              if(ifNull(equals(step_1, 1), 0), e.`$session_id`, NULL) AS `$session_id_1`,
                              if(ifNull(equals(step_1, 1), 0), e.`$window_id`, NULL) AS `$window_id_1`
                       FROM events AS e
                       WHERE and(equals(e.team_id, 2), and(and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-14 23:59:59.999999', 6, 'UTC'))), in(e.event, tuple('paid', 'user signed up'))), or(ifNull(equals(step_0, 1), 0), ifNull(equals(step_1, 1), 0)))))
                 WHERE ifNull(equals(step_0, 1), 0)))
           GROUP BY aggregation_target,
                    steps
           HAVING ifNull(equals(steps, max_steps), isNull(steps)
                         and isNull(max_steps)))
        WHERE ifNull(in(steps, [1, 2]), 0)
        ORDER BY aggregation_target ASC) AS funnel_actors ON equals(funnel_actors.actor_id, event.`$group_0`)
     WHERE and(equals(event.team_id, 2), greaterOrEquals(toTimeZone(toDateTime(toTimeZone(event.timestamp, 'UTC'), 'UTC'), 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC'))), less(toTimeZone(toDateTime(toTimeZone(event.timestamp, 'UTC'), 'UTC'), 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-14 23:59:59', 6, 'UTC'))), equals(event.team_id, 2), greater(toTimeZone(toDateTime(toTimeZone(event.timestamp, 'UTC'), 'UTC'), 'UTC'), funnel_actors.first_timestamp), less(toTimeZone(toDateTime(toTimeZone(event.timestamp, 'UTC'), 'UTC'), 'UTC'), coalesce(funnel_actors.final_timestamp, plus(toTimeZone(funnel_actors.first_timestamp, 'UTC'), toIntervalDay(14)), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-14 23:59:59', 6, 'UTC')))), notIn(event.event, ['paid', 'user signed up']), equals(event.event, 'negatively_related'), ifNull(notEquals(funnel_actors.steps, 2), 1))
     GROUP BY actor_id
     ORDER BY actor_id ASC) AS source ON equals(groups.key, source.actor_id)
  ORDER BY source.actor_id ASC
  LIMIT 101
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1
  '''
# ---
# name: TestClickhouseFunnelCorrelation.test_funnel_correlation_with_events_and_groups_poe_v2.5
  '''
  SELECT event.event AS name,
         countIf(funnel_actors.actor_id, ifNull(equals(funnel_actors.steps, 2), 0)) AS success_count,
         countIf(funnel_actors.actor_id, ifNull(notEquals(funnel_actors.steps, 2), 1)) AS failure_count
  FROM events AS event
  JOIN
    (SELECT aggregation_target AS actor_id,
            timestamp AS timestamp,
            steps AS steps,
            final_timestamp AS final_timestamp,
            first_timestamp AS first_timestamp
     FROM
       (SELECT aggregation_target AS aggregation_target,
               steps AS steps,
               avg(step_1_conversion_time) AS step_1_average_conversion_time_inner,
               median(step_1_conversion_time) AS step_1_median_conversion_time_inner,
               argMax(latest_0, steps) AS timestamp,
               argMax(latest_1, steps) AS final_timestamp,
               argMax(latest_0, steps) AS first_timestamp
        FROM
          (SELECT aggregation_target AS aggregation_target,
                  steps AS steps,
                  max(steps) OVER (PARTITION BY aggregation_target) AS max_steps,
                                  step_1_conversion_time AS step_1_conversion_time,
                                  latest_0 AS latest_0,
                                  latest_1 AS latest_1,
                                  latest_0 AS latest_0
           FROM
             (SELECT aggregation_target AS aggregation_target,
                     timestamp AS timestamp,
                     step_0 AS step_0,
                     latest_0 AS latest_0,
                     step_1 AS step_1,
                     latest_1 AS latest_1,
                     if(and(ifNull(lessOrEquals(latest_0, latest_1), 0), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), 2, 1) AS steps,
                     if(and(isNotNull(latest_1), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), dateDiff('second', latest_0, latest_1), NULL) AS step_1_conversion_time
              FROM
                (SELECT aggregation_target AS aggregation_target,
                        timestamp AS timestamp,
                        step_0 AS step_0,
                        latest_0 AS latest_0,
                        step_1 AS step_1,
                        min(latest_1) OVER (PARTITION BY aggregation_target
                                            ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS latest_1
                 FROM
                   (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                           e.`$group_0` AS aggregation_target,
                           if(equals(e.event, 'user signed up'), 1, 0) AS step_0,
                           if(ifNull(equals(step_0, 1), 0), timestamp, NULL) AS latest_0,
                           if(equals(e.event, 'paid'), 1, 0) AS step_1,
                           if(ifNull(equals(step_1, 1), 0), timestamp, NULL) AS latest_1
                    FROM events AS e
                    LEFT JOIN
                      (SELECT argMax(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(groups.group_properties, 'industry'), ''), 'null'), '^"|"$', ''), groups._timestamp) AS properties___industry,
                              groups.group_type_index AS index,
                              groups.group_key AS key
                       FROM groups
                       WHERE and(equals(groups.team_id, 2), ifNull(equals(index, 0), 0))
                       GROUP BY groups.group_type_index,
                                groups.group_key) AS e__group_0 ON equals(e.`$group_0`, e__group_0.key)
                    WHERE and(equals(e.team_id, 2), and(and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-14 23:59:59.999999', 6, 'UTC'))), in(e.event, tuple('paid', 'user signed up')), ifNull(equals(e__group_0.properties___industry, 'finance'), 0)), or(ifNull(equals(step_0, 1), 0), ifNull(equals(step_1, 1), 0)))))
              WHERE ifNull(equals(step_0, 1), 0)))
        GROUP BY aggregation_target,
                 steps
        HAVING ifNull(equals(steps, max_steps), isNull(steps)
                      and isNull(max_steps)))
     WHERE ifNull(in(steps, [1, 2]), 0)
     ORDER BY aggregation_target ASC) AS funnel_actors ON equals(funnel_actors.actor_id, event.`$group_0`)
  WHERE and(equals(event.team_id, 2), greaterOrEquals(toTimeZone(toDateTime(toTimeZone(event.timestamp, 'UTC'), 'UTC'), 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC'))), less(toTimeZone(toDateTime(toTimeZone(event.timestamp, 'UTC'), 'UTC'), 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-14 23:59:59', 6, 'UTC'))), equals(event.team_id, 2), greater(toTimeZone(toDateTime(toTimeZone(event.timestamp, 'UTC'), 'UTC'), 'UTC'), funnel_actors.first_timestamp), less(toTimeZone(toDateTime(toTimeZone(event.timestamp, 'UTC'), 'UTC'), 'UTC'), coalesce(funnel_actors.final_timestamp, plus(toTimeZone(funnel_actors.first_timestamp, 'UTC'), toIntervalDay(14)), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-14 23:59:59', 6, 'UTC')))), notIn(event.event, ['paid', 'user signed up']), notIn(event.event, []))
  GROUP BY name
  LIMIT 100
  UNION ALL
  SELECT 'Total_Values_In_Query' AS name,
         countIf(funnel_actors.actor_id, ifNull(equals(funnel_actors.steps, 2), 0)) AS success_count,
         countIf(funnel_actors.actor_id, ifNull(notEquals(funnel_actors.steps, 2), 1)) AS failure_count
  FROM
    (SELECT aggregation_target AS actor_id,
            timestamp AS timestamp,
            steps AS steps,
            final_timestamp AS final_timestamp,
            first_timestamp AS first_timestamp
     FROM
       (SELECT aggregation_target AS aggregation_target,
               steps AS steps,
               avg(step_1_conversion_time) AS step_1_average_conversion_time_inner,
               median(step_1_conversion_time) AS step_1_median_conversion_time_inner,
               argMax(latest_0, steps) AS timestamp,
               argMax(latest_1, steps) AS final_timestamp,
               argMax(latest_0, steps) AS first_timestamp
        FROM
          (SELECT aggregation_target AS aggregation_target,
                  steps AS steps,
                  max(steps) OVER (PARTITION BY aggregation_target) AS max_steps,
                                  step_1_conversion_time AS step_1_conversion_time,
                                  latest_0 AS latest_0,
                                  latest_1 AS latest_1,
                                  latest_0 AS latest_0
           FROM
             (SELECT aggregation_target AS aggregation_target,
                     timestamp AS timestamp,
                     step_0 AS step_0,
                     latest_0 AS latest_0,
                     step_1 AS step_1,
                     latest_1 AS latest_1,
                     if(and(ifNull(lessOrEquals(latest_0, latest_1), 0), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), 2, 1) AS steps,
                     if(and(isNotNull(latest_1), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), dateDiff('second', latest_0, latest_1), NULL) AS step_1_conversion_time
              FROM
                (SELECT aggregation_target AS aggregation_target,
                        timestamp AS timestamp,
                        step_0 AS step_0,
                        latest_0 AS latest_0,
                        step_1 AS step_1,
                        min(latest_1) OVER (PARTITION BY aggregation_target
                                            ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS latest_1
                 FROM
                   (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                           e.`$group_0` AS aggregation_target,
                           if(equals(e.event, 'user signed up'), 1, 0) AS step_0,
                           if(ifNull(equals(step_0, 1), 0), timestamp, NULL) AS latest_0,
                           if(equals(e.event, 'paid'), 1, 0) AS step_1,
                           if(ifNull(equals(step_1, 1), 0), timestamp, NULL) AS latest_1
                    FROM events AS e
                    LEFT JOIN
                      (SELECT argMax(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(groups.group_properties, 'industry'), ''), 'null'), '^"|"$', ''), groups._timestamp) AS properties___industry,
                              groups.group_type_index AS index,
                              groups.group_key AS key
                       FROM groups
                       WHERE and(equals(groups.team_id, 2), ifNull(equals(index, 0), 0))
                       GROUP BY groups.group_type_index,
                                groups.group_key) AS e__group_0 ON equals(e.`$group_0`, e__group_0.key)
                    WHERE and(equals(e.team_id, 2), and(and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-14 23:59:59.999999', 6, 'UTC'))), in(e.event, tuple('paid', 'user signed up')), ifNull(equals(e__group_0.properties___industry, 'finance'), 0)), or(ifNull(equals(step_0, 1), 0), ifNull(equals(step_1, 1), 0)))))
              WHERE ifNull(equals(step_0, 1), 0)))
        GROUP BY aggregation_target,
                 steps
        HAVING ifNull(equals(steps, max_steps), isNull(steps)
                      and isNull(max_steps)))
     WHERE ifNull(in(steps, [1, 2]), 0)
     ORDER BY aggregation_target ASC) AS funnel_actors
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '''
# ---
# name: TestClickhouseFunnelCorrelation.test_funnel_correlation_with_events_and_groups_poe_v2.6
  '''
  SELECT source.actor_id AS actor_id
  FROM
    (SELECT groups.group_type_index AS index,
            groups.group_key AS key
     FROM groups
     WHERE equals(groups.team_id, 2)
     GROUP BY groups.group_type_index,
              groups.group_key) AS groups
  INNER JOIN
    (SELECT funnel_actors.actor_id AS actor_id,
            any(funnel_actors.matching_events) AS matching_events
     FROM events AS event
     JOIN
       (SELECT aggregation_target AS actor_id,
               final_matching_events AS matching_events,
               timestamp AS timestamp,
               steps AS steps,
               final_timestamp AS final_timestamp,
               first_timestamp AS first_timestamp
        FROM
          (SELECT aggregation_target AS aggregation_target,
                  steps AS steps,
                  avg(step_1_conversion_time) AS step_1_average_conversion_time_inner,
                  median(step_1_conversion_time) AS step_1_median_conversion_time_inner,
                  groupArray(10)(step_0_matching_event) AS step_0_matching_events,
                  groupArray(10)(step_1_matching_event) AS step_1_matching_events,
                  groupArray(10)(final_matching_event) AS final_matching_events,
                  argMax(latest_0, steps) AS timestamp,
                  argMax(latest_1, steps) AS final_timestamp,
                  argMax(latest_0, steps) AS first_timestamp
           FROM
             (SELECT aggregation_target AS aggregation_target,
                     steps AS steps,
                     max(steps) OVER (PARTITION BY aggregation_target) AS max_steps,
                                     step_1_conversion_time AS step_1_conversion_time,
                                     tuple(latest_0, uuid_0, `$session_id_0`, `$window_id_0`) AS step_0_matching_event,
                                     tuple(latest_1, uuid_1, `$session_id_1`, `$window_id_1`) AS step_1_matching_event,
                                     if(isNull(latest_0), tuple(NULL, NULL, NULL, NULL), if(isNull(latest_1), step_0_matching_event, step_1_matching_event)) AS final_matching_event,
                                     latest_0 AS latest_0,
                                     latest_1 AS latest_1,
                                     latest_0 AS latest_0
              FROM
                (SELECT aggregation_target AS aggregation_target,
                        timestamp AS timestamp,
                        step_0 AS step_0,
                        latest_0 AS latest_0,
                        uuid_0 AS uuid_0,
                        `$session_id_0` AS `$session_id_0`,
                        `$window_id_0` AS `$window_id_0`,
                        step_1 AS step_1,
                        latest_1 AS latest_1,
                        uuid_1 AS uuid_1,
                        `$session_id_1` AS `$session_id_1`,
                        `$window_id_1` AS `$window_id_1`,
                        if(and(ifNull(lessOrEquals(latest_0, latest_1), 0), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), 2, 1) AS steps,
                        if(and(isNotNull(latest_1), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), dateDiff('second', latest_0, latest_1), NULL) AS step_1_conversion_time,
                        tuple(latest_0, uuid_0, `$session_id_0`, `$window_id_0`) AS step_0_matching_event,
                        tuple(latest_1, uuid_1, `$session_id_1`, `$window_id_1`) AS step_1_matching_event,
                        if(isNull(latest_0), tuple(NULL, NULL, NULL, NULL), if(isNull(latest_1), step_0_matching_event, step_1_matching_event)) AS final_matching_event
                 FROM
                   (SELECT aggregation_target AS aggregation_target,
                           timestamp AS timestamp,
                           step_0 AS step_0,
                           latest_0 AS latest_0,
                           uuid_0 AS uuid_0,
                           `$session_id_0` AS `$session_id_0`,
                           `$window_id_0` AS `$window_id_0`,
                           step_1 AS step_1,
                           min(latest_1) OVER (PARTITION BY aggregation_target
                                               ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS latest_1,
                                              last_value(uuid_1) OVER (PARTITION BY aggregation_target
                                                                       ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS uuid_1,
                                                                      last_value(`$session_id_1`) OVER (PARTITION BY aggregation_target
                                                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS `$session_id_1`,
                                                                                                       last_value(`$window_id_1`) OVER (PARTITION BY aggregation_target
                                                                                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS `$window_id_1`
                    FROM
                      (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                              e.`$group_0` AS aggregation_target,
                              e.uuid AS uuid,
                              if(equals(e.event, 'user signed up'), 1, 0) AS step_0,
                              if(ifNull(equals(step_0, 1), 0), timestamp, NULL) AS latest_0,
                              if(ifNull(equals(step_0, 1), 0), uuid, NULL) AS uuid_0,
                              if(ifNull(equals(step_0, 1), 0), e.`$session_id`, NULL) AS `$session_id_0`,
                              if(ifNull(equals(step_0, 1), 0), e.`$window_id`, NULL) AS `$window_id_0`,
                              if(equals(e.event, 'paid'), 1, 0) AS step_1,
                              if(ifNull(equals(step_1, 1), 0), timestamp, NULL) AS latest_1,
                              if(ifNull(equals(step_1, 1), 0), uuid, NULL) AS uuid_1,
                              if(ifNull(equals(step_1, 1), 0), e.`$session_id`, NULL) AS `$session_id_1`,
                              if(ifNull(equals(step_1, 1), 0), e.`$window_id`, NULL) AS `$window_id_1`
                       FROM events AS e
                       WHERE and(equals(e.team_id, 2), and(and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-14 23:59:59.999999', 6, 'UTC'))), in(e.event, tuple('paid', 'user signed up'))), or(ifNull(equals(step_0, 1), 0), ifNull(equals(step_1, 1), 0)))))
                 WHERE ifNull(equals(step_0, 1), 0)))
           GROUP BY aggregation_target,
                    steps
           HAVING ifNull(equals(steps, max_steps), isNull(steps)
                         and isNull(max_steps)))
        WHERE ifNull(in(steps, [1, 2]), 0)
        ORDER BY aggregation_target ASC) AS funnel_actors ON equals(funnel_actors.actor_id, event.`$group_0`)
     WHERE and(equals(event.team_id, 2), greaterOrEquals(toTimeZone(toDateTime(toTimeZone(event.timestamp, 'UTC'), 'UTC'), 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC'))), less(toTimeZone(toDateTime(toTimeZone(event.timestamp, 'UTC'), 'UTC'), 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-14 23:59:59', 6, 'UTC'))), equals(event.team_id, 2), greater(toTimeZone(toDateTime(toTimeZone(event.timestamp, 'UTC'), 'UTC'), 'UTC'), funnel_actors.first_timestamp), less(toTimeZone(toDateTime(toTimeZone(event.timestamp, 'UTC'), 'UTC'), 'UTC'), coalesce(funnel_actors.final_timestamp, plus(toTimeZone(funnel_actors.first_timestamp, 'UTC'), toIntervalDay(14)), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-14 23:59:59', 6, 'UTC')))), notIn(event.event, ['paid', 'user signed up']), equals(event.event, 'negatively_related'), ifNull(equals(funnel_actors.steps, 2), 0))
     GROUP BY actor_id
     ORDER BY actor_id ASC) AS source ON equals(groups.key, source.actor_id)
  ORDER BY source.actor_id ASC
  LIMIT 101
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1
  '''
# ---
# name: TestClickhouseFunnelCorrelation.test_funnel_correlation_with_events_and_groups_poe_v2.7
  '''
  SELECT source.actor_id AS actor_id
  FROM
    (SELECT groups.group_type_index AS index,
            groups.group_key AS key
     FROM groups
     WHERE equals(groups.team_id, 2)
     GROUP BY groups.group_type_index,
              groups.group_key) AS groups
  INNER JOIN
    (SELECT funnel_actors.actor_id AS actor_id,
            any(funnel_actors.matching_events) AS matching_events
     FROM events AS event
     JOIN
       (SELECT aggregation_target AS actor_id,
               final_matching_events AS matching_events,
               timestamp AS timestamp,
               steps AS steps,
               final_timestamp AS final_timestamp,
               first_timestamp AS first_timestamp
        FROM
          (SELECT aggregation_target AS aggregation_target,
                  steps AS steps,
                  avg(step_1_conversion_time) AS step_1_average_conversion_time_inner,
                  median(step_1_conversion_time) AS step_1_median_conversion_time_inner,
                  groupArray(10)(step_0_matching_event) AS step_0_matching_events,
                  groupArray(10)(step_1_matching_event) AS step_1_matching_events,
                  groupArray(10)(final_matching_event) AS final_matching_events,
                  argMax(latest_0, steps) AS timestamp,
                  argMax(latest_1, steps) AS final_timestamp,
                  argMax(latest_0, steps) AS first_timestamp
           FROM
             (SELECT aggregation_target AS aggregation_target,
                     steps AS steps,
                     max(steps) OVER (PARTITION BY aggregation_target) AS max_steps,
                                     step_1_conversion_time AS step_1_conversion_time,
                                     tuple(latest_0, uuid_0, `$session_id_0`, `$window_id_0`) AS step_0_matching_event,
                                     tuple(latest_1, uuid_1, `$session_id_1`, `$window_id_1`) AS step_1_matching_event,
                                     if(isNull(latest_0), tuple(NULL, NULL, NULL, NULL), if(isNull(latest_1), step_0_matching_event, step_1_matching_event)) AS final_matching_event,
                                     latest_0 AS latest_0,
                                     latest_1 AS latest_1,
                                     latest_0 AS latest_0
              FROM
                (SELECT aggregation_target AS aggregation_target,
                        timestamp AS timestamp,
                        step_0 AS step_0,
                        latest_0 AS latest_0,
                        uuid_0 AS uuid_0,
                        `$session_id_0` AS `$session_id_0`,
                        `$window_id_0` AS `$window_id_0`,
                        step_1 AS step_1,
                        latest_1 AS latest_1,
                        uuid_1 AS uuid_1,
                        `$session_id_1` AS `$session_id_1`,
                        `$window_id_1` AS `$window_id_1`,
                        if(and(ifNull(lessOrEquals(latest_0, latest_1), 0), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), 2, 1) AS steps,
                        if(and(isNotNull(latest_1), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), dateDiff('second', latest_0, latest_1), NULL) AS step_1_conversion_time,
                        tuple(latest_0, uuid_0, `$session_id_0`, `$window_id_0`) AS step_0_matching_event,
                        tuple(latest_1, uuid_1, `$session_id_1`, `$window_id_1`) AS step_1_matching_event,
                        if(isNull(latest_0), tuple(NULL, NULL, NULL, NULL), if(isNull(latest_1), step_0_matching_event, step_1_matching_event)) AS final_matching_event
                 FROM
                   (SELECT aggregation_target AS aggregation_target,
                           timestamp AS timestamp,
                           step_0 AS step_0,
                           latest_0 AS latest_0,
                           uuid_0 AS uuid_0,
                           `$session_id_0` AS `$session_id_0`,
                           `$window_id_0` AS `$window_id_0`,
                           step_1 AS step_1,
                           min(latest_1) OVER (PARTITION BY aggregation_target
                                               ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS latest_1,
                                              last_value(uuid_1) OVER (PARTITION BY aggregation_target
                                                                       ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS uuid_1,
                                                                      last_value(`$session_id_1`) OVER (PARTITION BY aggregation_target
                                                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS `$session_id_1`,
                                                                                                       last_value(`$window_id_1`) OVER (PARTITION BY aggregation_target
                                                                                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS `$window_id_1`
                    FROM
                      (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                              e.`$group_0` AS aggregation_target,
                              e.uuid AS uuid,
                              if(equals(e.event, 'user signed up'), 1, 0) AS step_0,
                              if(ifNull(equals(step_0, 1), 0), timestamp, NULL) AS latest_0,
                              if(ifNull(equals(step_0, 1), 0), uuid, NULL) AS uuid_0,
                              if(ifNull(equals(step_0, 1), 0), e.`$session_id`, NULL) AS `$session_id_0`,
                              if(ifNull(equals(step_0, 1), 0), e.`$window_id`, NULL) AS `$window_id_0`,
                              if(equals(e.event, 'paid'), 1, 0) AS step_1,
                              if(ifNull(equals(step_1, 1), 0), timestamp, NULL) AS latest_1,
                              if(ifNull(equals(step_1, 1), 0), uuid, NULL) AS uuid_1,
                              if(ifNull(equals(step_1, 1), 0), e.`$session_id`, NULL) AS `$session_id_1`,
                              if(ifNull(equals(step_1, 1), 0), e.`$window_id`, NULL) AS `$window_id_1`
                       FROM events AS e
                       WHERE and(equals(e.team_id, 2), and(and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-14 23:59:59.999999', 6, 'UTC'))), in(e.event, tuple('paid', 'user signed up'))), or(ifNull(equals(step_0, 1), 0), ifNull(equals(step_1, 1), 0)))))
                 WHERE ifNull(equals(step_0, 1), 0)))
           GROUP BY aggregation_target,
                    steps
           HAVING ifNull(equals(steps, max_steps), isNull(steps)
                         and isNull(max_steps)))
        WHERE ifNull(in(steps, [1, 2]), 0)
        ORDER BY aggregation_target ASC) AS funnel_actors ON equals(funnel_actors.actor_id, event.`$group_0`)
     WHERE and(equals(event.team_id, 2), greaterOrEquals(toTimeZone(toDateTime(toTimeZone(event.timestamp, 'UTC'), 'UTC'), 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC'))), less(toTimeZone(toDateTime(toTimeZone(event.timestamp, 'UTC'), 'UTC'), 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-14 23:59:59', 6, 'UTC'))), equals(event.team_id, 2), greater(toTimeZone(toDateTime(toTimeZone(event.timestamp, 'UTC'), 'UTC'), 'UTC'), funnel_actors.first_timestamp), less(toTimeZone(toDateTime(toTimeZone(event.timestamp, 'UTC'), 'UTC'), 'UTC'), coalesce(funnel_actors.final_timestamp, plus(toTimeZone(funnel_actors.first_timestamp, 'UTC'), toIntervalDay(14)), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-14 23:59:59', 6, 'UTC')))), notIn(event.event, ['paid', 'user signed up']), equals(event.event, 'negatively_related'), ifNull(notEquals(funnel_actors.steps, 2), 1))
     GROUP BY actor_id
     ORDER BY actor_id ASC) AS source ON equals(groups.key, source.actor_id)
  ORDER BY source.actor_id ASC
  LIMIT 101
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1
  '''
# ---
# name: TestClickhouseFunnelCorrelation.test_funnel_correlation_with_properties_and_groups
  '''
  SELECT concat(ifNull(toString((aggregation_target_with_props.prop).1), ''), '::', ifNull(toString((aggregation_target_with_props.prop).2), '')) AS name,
         countIf(aggregation_target_with_props.actor_id, ifNull(equals(aggregation_target_with_props.steps, 2), 0)) AS success_count,
         countIf(aggregation_target_with_props.actor_id, ifNull(notEquals(aggregation_target_with_props.steps, 2), 1)) AS failure_count
  FROM
    (SELECT funnel_actors.actor_id AS actor_id,
            funnel_actors.steps AS steps,
            arrayJoin(arrayZip(['industry'], [JSONExtractString(groups_0.properties, 'industry')])) AS prop
     FROM
       (SELECT aggregation_target AS actor_id,
               timestamp AS timestamp,
               steps AS steps,
               final_timestamp AS final_timestamp,
               first_timestamp AS first_timestamp
        FROM
          (SELECT aggregation_target AS aggregation_target,
                  steps AS steps,
                  avg(step_1_conversion_time) AS step_1_average_conversion_time_inner,
                  median(step_1_conversion_time) AS step_1_median_conversion_time_inner,
                  argMax(latest_0, steps) AS timestamp,
                  argMax(latest_1, steps) AS final_timestamp,
                  argMax(latest_0, steps) AS first_timestamp
           FROM
             (SELECT aggregation_target AS aggregation_target,
                     steps AS steps,
                     max(steps) OVER (PARTITION BY aggregation_target) AS max_steps,
                                     step_1_conversion_time AS step_1_conversion_time,
                                     latest_0 AS latest_0,
                                     latest_1 AS latest_1,
                                     latest_0 AS latest_0
              FROM
                (SELECT aggregation_target AS aggregation_target,
                        timestamp AS timestamp,
                        step_0 AS step_0,
                        latest_0 AS latest_0,
                        step_1 AS step_1,
                        latest_1 AS latest_1,
                        if(and(ifNull(lessOrEquals(latest_0, latest_1), 0), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), 2, 1) AS steps,
                        if(and(isNotNull(latest_1), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), dateDiff('second', latest_0, latest_1), NULL) AS step_1_conversion_time
                 FROM
                   (SELECT aggregation_target AS aggregation_target,
                           timestamp AS timestamp,
                           step_0 AS step_0,
                           latest_0 AS latest_0,
                           step_1 AS step_1,
                           min(latest_1) OVER (PARTITION BY aggregation_target
                                               ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS latest_1
                    FROM
                      (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                              e.`$group_0` AS aggregation_target,
                              if(equals(e.event, 'user signed up'), 1, 0) AS step_0,
                              if(ifNull(equals(step_0, 1), 0), timestamp, NULL) AS latest_0,
                              if(equals(e.event, 'paid'), 1, 0) AS step_1,
                              if(ifNull(equals(step_1, 1), 0), timestamp, NULL) AS latest_1
                       FROM events AS e
                       WHERE and(equals(e.team_id, 2), and(and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-14 23:59:59.999999', 6, 'UTC'))), in(e.event, tuple('paid', 'user signed up'))), or(ifNull(equals(step_0, 1), 0), ifNull(equals(step_1, 1), 0)))))
                 WHERE ifNull(equals(step_0, 1), 0)))
           GROUP BY aggregation_target,
                    steps
           HAVING ifNull(equals(steps, max_steps), isNull(steps)
                         and isNull(max_steps)))
        WHERE ifNull(in(steps, [1, 2]), 0)
        ORDER BY aggregation_target ASC) AS funnel_actors
     LEFT JOIN
       (SELECT groups.key AS key,
               groups.properties AS properties
        FROM
          (SELECT argMax(groups.group_properties, groups._timestamp) AS properties,
                  groups.group_type_index AS index,
                  groups.group_key AS key
           FROM groups
           WHERE equals(groups.team_id, 2)
           GROUP BY groups.group_type_index,
                    groups.group_key) AS groups
        WHERE ifNull(equals(groups.index, 0), 0)) AS groups_0 ON equals(funnel_actors.actor_id, groups_0.key)) AS aggregation_target_with_props
  GROUP BY (aggregation_target_with_props.prop).1, (aggregation_target_with_props.prop).2
  HAVING ifNull(notIn((aggregation_target_with_props.prop).1, []), 0)
  LIMIT 100
  UNION ALL
  SELECT 'Total_Values_In_Query' AS name,
         countIf(funnel_actors.actor_id, ifNull(equals(funnel_actors.steps, 2), 0)) AS success_count,
         countIf(funnel_actors.actor_id, ifNull(notEquals(funnel_actors.steps, 2), 1)) AS failure_count
  FROM
    (SELECT aggregation_target AS actor_id,
            timestamp AS timestamp,
            steps AS steps,
            final_timestamp AS final_timestamp,
            first_timestamp AS first_timestamp
     FROM
       (SELECT aggregation_target AS aggregation_target,
               steps AS steps,
               avg(step_1_conversion_time) AS step_1_average_conversion_time_inner,
               median(step_1_conversion_time) AS step_1_median_conversion_time_inner,
               argMax(latest_0, steps) AS timestamp,
               argMax(latest_1, steps) AS final_timestamp,
               argMax(latest_0, steps) AS first_timestamp
        FROM
          (SELECT aggregation_target AS aggregation_target,
                  steps AS steps,
                  max(steps) OVER (PARTITION BY aggregation_target) AS max_steps,
                                  step_1_conversion_time AS step_1_conversion_time,
                                  latest_0 AS latest_0,
                                  latest_1 AS latest_1,
                                  latest_0 AS latest_0
           FROM
             (SELECT aggregation_target AS aggregation_target,
                     timestamp AS timestamp,
                     step_0 AS step_0,
                     latest_0 AS latest_0,
                     step_1 AS step_1,
                     latest_1 AS latest_1,
                     if(and(ifNull(lessOrEquals(latest_0, latest_1), 0), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), 2, 1) AS steps,
                     if(and(isNotNull(latest_1), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), dateDiff('second', latest_0, latest_1), NULL) AS step_1_conversion_time
              FROM
                (SELECT aggregation_target AS aggregation_target,
                        timestamp AS timestamp,
                        step_0 AS step_0,
                        latest_0 AS latest_0,
                        step_1 AS step_1,
                        min(latest_1) OVER (PARTITION BY aggregation_target
                                            ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS latest_1
                 FROM
                   (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                           e.`$group_0` AS aggregation_target,
                           if(equals(e.event, 'user signed up'), 1, 0) AS step_0,
                           if(ifNull(equals(step_0, 1), 0), timestamp, NULL) AS latest_0,
                           if(equals(e.event, 'paid'), 1, 0) AS step_1,
                           if(ifNull(equals(step_1, 1), 0), timestamp, NULL) AS latest_1
                    FROM events AS e
                    WHERE and(equals(e.team_id, 2), and(and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-14 23:59:59.999999', 6, 'UTC'))), in(e.event, tuple('paid', 'user signed up'))), or(ifNull(equals(step_0, 1), 0), ifNull(equals(step_1, 1), 0)))))
              WHERE ifNull(equals(step_0, 1), 0)))
        GROUP BY aggregation_target,
                 steps
        HAVING ifNull(equals(steps, max_steps), isNull(steps)
                      and isNull(max_steps)))
     WHERE ifNull(in(steps, [1, 2]), 0)
     ORDER BY aggregation_target ASC) AS funnel_actors
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '''
# ---
# name: TestClickhouseFunnelCorrelation.test_funnel_correlation_with_properties_and_groups.1
  '''
  SELECT source.actor_id AS actor_id
  FROM
    (SELECT groups.group_type_index AS index,
            groups.group_key AS key
     FROM groups
     WHERE equals(groups.team_id, 2)
     GROUP BY groups.group_type_index,
              groups.group_key) AS groups
  INNER JOIN
    (SELECT funnel_actors.actor_id AS actor_id,
            any(funnel_actors.matching_events) AS matching_events
     FROM
       (SELECT aggregation_target AS actor_id,
               final_matching_events AS matching_events,
               timestamp AS timestamp,
               steps AS steps,
               final_timestamp AS final_timestamp,
               first_timestamp AS first_timestamp
        FROM
          (SELECT aggregation_target AS aggregation_target,
                  steps AS steps,
                  avg(step_1_conversion_time) AS step_1_average_conversion_time_inner,
                  median(step_1_conversion_time) AS step_1_median_conversion_time_inner,
                  groupArray(10)(step_0_matching_event) AS step_0_matching_events,
                  groupArray(10)(step_1_matching_event) AS step_1_matching_events,
                  groupArray(10)(final_matching_event) AS final_matching_events,
                  argMax(latest_0, steps) AS timestamp,
                  argMax(latest_1, steps) AS final_timestamp,
                  argMax(latest_0, steps) AS first_timestamp
           FROM
             (SELECT aggregation_target AS aggregation_target,
                     steps AS steps,
                     max(steps) OVER (PARTITION BY aggregation_target) AS max_steps,
                                     step_1_conversion_time AS step_1_conversion_time,
                                     tuple(latest_0, uuid_0, `$session_id_0`, `$window_id_0`) AS step_0_matching_event,
                                     tuple(latest_1, uuid_1, `$session_id_1`, `$window_id_1`) AS step_1_matching_event,
                                     if(isNull(latest_0), tuple(NULL, NULL, NULL, NULL), if(isNull(latest_1), step_0_matching_event, step_1_matching_event)) AS final_matching_event,
                                     latest_0 AS latest_0,
                                     latest_1 AS latest_1,
                                     latest_0 AS latest_0
              FROM
                (SELECT aggregation_target AS aggregation_target,
                        timestamp AS timestamp,
                        step_0 AS step_0,
                        latest_0 AS latest_0,
                        uuid_0 AS uuid_0,
                        `$session_id_0` AS `$session_id_0`,
                        `$window_id_0` AS `$window_id_0`,
                        step_1 AS step_1,
                        latest_1 AS latest_1,
                        uuid_1 AS uuid_1,
                        `$session_id_1` AS `$session_id_1`,
                        `$window_id_1` AS `$window_id_1`,
                        if(and(ifNull(lessOrEquals(latest_0, latest_1), 0), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), 2, 1) AS steps,
                        if(and(isNotNull(latest_1), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), dateDiff('second', latest_0, latest_1), NULL) AS step_1_conversion_time,
                        tuple(latest_0, uuid_0, `$session_id_0`, `$window_id_0`) AS step_0_matching_event,
                        tuple(latest_1, uuid_1, `$session_id_1`, `$window_id_1`) AS step_1_matching_event,
                        if(isNull(latest_0), tuple(NULL, NULL, NULL, NULL), if(isNull(latest_1), step_0_matching_event, step_1_matching_event)) AS final_matching_event
                 FROM
                   (SELECT aggregation_target AS aggregation_target,
                           timestamp AS timestamp,
                           step_0 AS step_0,
                           latest_0 AS latest_0,
                           uuid_0 AS uuid_0,
                           `$session_id_0` AS `$session_id_0`,
                           `$window_id_0` AS `$window_id_0`,
                           step_1 AS step_1,
                           min(latest_1) OVER (PARTITION BY aggregation_target
                                               ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS latest_1,
                                              last_value(uuid_1) OVER (PARTITION BY aggregation_target
                                                                       ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS uuid_1,
                                                                      last_value(`$session_id_1`) OVER (PARTITION BY aggregation_target
                                                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS `$session_id_1`,
                                                                                                       last_value(`$window_id_1`) OVER (PARTITION BY aggregation_target
                                                                                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS `$window_id_1`
                    FROM
                      (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                              e.`$group_0` AS aggregation_target,
                              e.uuid AS uuid,
                              if(equals(e.event, 'user signed up'), 1, 0) AS step_0,
                              if(ifNull(equals(step_0, 1), 0), timestamp, NULL) AS latest_0,
                              if(ifNull(equals(step_0, 1), 0), uuid, NULL) AS uuid_0,
                              if(ifNull(equals(step_0, 1), 0), e.`$session_id`, NULL) AS `$session_id_0`,
                              if(ifNull(equals(step_0, 1), 0), e.`$window_id`, NULL) AS `$window_id_0`,
                              if(equals(e.event, 'paid'), 1, 0) AS step_1,
                              if(ifNull(equals(step_1, 1), 0), timestamp, NULL) AS latest_1,
                              if(ifNull(equals(step_1, 1), 0), uuid, NULL) AS uuid_1,
                              if(ifNull(equals(step_1, 1), 0), e.`$session_id`, NULL) AS `$session_id_1`,
                              if(ifNull(equals(step_1, 1), 0), e.`$window_id`, NULL) AS `$window_id_1`
                       FROM events AS e
                       LEFT JOIN
                         (SELECT argMax(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(groups.group_properties, 'industry'), ''), 'null'), '^"|"$', ''), groups._timestamp) AS properties___industry,
                                 groups.group_type_index AS index,
                                 groups.group_key AS key
                          FROM groups
                          WHERE and(equals(groups.team_id, 2), ifNull(equals(index, 0), 0))
                          GROUP BY groups.group_type_index,
                                   groups.group_key) AS e__group_0 ON equals(e.`$group_0`, e__group_0.key)
                       WHERE and(equals(e.team_id, 2), and(and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-14 23:59:59.999999', 6, 'UTC'))), in(e.event, tuple('paid', 'user signed up')), ifNull(equals(e__group_0.properties___industry, 'positive'), 0)), or(ifNull(equals(step_0, 1), 0), ifNull(equals(step_1, 1), 0)))))
                 WHERE ifNull(equals(step_0, 1), 0)))
           GROUP BY aggregation_target,
                    steps
           HAVING ifNull(equals(steps, max_steps), isNull(steps)
                         and isNull(max_steps)))
        WHERE ifNull(in(steps, [1, 2]), 0)
        ORDER BY aggregation_target ASC) AS funnel_actors
     WHERE ifNull(equals(funnel_actors.steps, 2), 0)
     GROUP BY funnel_actors.actor_id
     ORDER BY funnel_actors.actor_id ASC) AS source ON equals(groups.key, source.actor_id)
  ORDER BY source.actor_id ASC
  LIMIT 101
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1
  '''
# ---
# name: TestClickhouseFunnelCorrelation.test_funnel_correlation_with_properties_and_groups.2
  '''
  SELECT source.actor_id AS actor_id
  FROM
    (SELECT groups.group_type_index AS index,
            groups.group_key AS key
     FROM groups
     WHERE equals(groups.team_id, 2)
     GROUP BY groups.group_type_index,
              groups.group_key) AS groups
  INNER JOIN
    (SELECT funnel_actors.actor_id AS actor_id,
            any(funnel_actors.matching_events) AS matching_events
     FROM
       (SELECT aggregation_target AS actor_id,
               final_matching_events AS matching_events,
               timestamp AS timestamp,
               steps AS steps,
               final_timestamp AS final_timestamp,
               first_timestamp AS first_timestamp
        FROM
          (SELECT aggregation_target AS aggregation_target,
                  steps AS steps,
                  avg(step_1_conversion_time) AS step_1_average_conversion_time_inner,
                  median(step_1_conversion_time) AS step_1_median_conversion_time_inner,
                  groupArray(10)(step_0_matching_event) AS step_0_matching_events,
                  groupArray(10)(step_1_matching_event) AS step_1_matching_events,
                  groupArray(10)(final_matching_event) AS final_matching_events,
                  argMax(latest_0, steps) AS timestamp,
                  argMax(latest_1, steps) AS final_timestamp,
                  argMax(latest_0, steps) AS first_timestamp
           FROM
             (SELECT aggregation_target AS aggregation_target,
                     steps AS steps,
                     max(steps) OVER (PARTITION BY aggregation_target) AS max_steps,
                                     step_1_conversion_time AS step_1_conversion_time,
                                     tuple(latest_0, uuid_0, `$session_id_0`, `$window_id_0`) AS step_0_matching_event,
                                     tuple(latest_1, uuid_1, `$session_id_1`, `$window_id_1`) AS step_1_matching_event,
                                     if(isNull(latest_0), tuple(NULL, NULL, NULL, NULL), if(isNull(latest_1), step_0_matching_event, step_1_matching_event)) AS final_matching_event,
                                     latest_0 AS latest_0,
                                     latest_1 AS latest_1,
                                     latest_0 AS latest_0
              FROM
                (SELECT aggregation_target AS aggregation_target,
                        timestamp AS timestamp,
                        step_0 AS step_0,
                        latest_0 AS latest_0,
                        uuid_0 AS uuid_0,
                        `$session_id_0` AS `$session_id_0`,
                        `$window_id_0` AS `$window_id_0`,
                        step_1 AS step_1,
                        latest_1 AS latest_1,
                        uuid_1 AS uuid_1,
                        `$session_id_1` AS `$session_id_1`,
                        `$window_id_1` AS `$window_id_1`,
                        if(and(ifNull(lessOrEquals(latest_0, latest_1), 0), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), 2, 1) AS steps,
                        if(and(isNotNull(latest_1), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), dateDiff('second', latest_0, latest_1), NULL) AS step_1_conversion_time,
                        tuple(latest_0, uuid_0, `$session_id_0`, `$window_id_0`) AS step_0_matching_event,
                        tuple(latest_1, uuid_1, `$session_id_1`, `$window_id_1`) AS step_1_matching_event,
                        if(isNull(latest_0), tuple(NULL, NULL, NULL, NULL), if(isNull(latest_1), step_0_matching_event, step_1_matching_event)) AS final_matching_event
                 FROM
                   (SELECT aggregation_target AS aggregation_target,
                           timestamp AS timestamp,
                           step_0 AS step_0,
                           latest_0 AS latest_0,
                           uuid_0 AS uuid_0,
                           `$session_id_0` AS `$session_id_0`,
                           `$window_id_0` AS `$window_id_0`,
                           step_1 AS step_1,
                           min(latest_1) OVER (PARTITION BY aggregation_target
                                               ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS latest_1,
                                              last_value(uuid_1) OVER (PARTITION BY aggregation_target
                                                                       ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS uuid_1,
                                                                      last_value(`$session_id_1`) OVER (PARTITION BY aggregation_target
                                                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS `$session_id_1`,
                                                                                                       last_value(`$window_id_1`) OVER (PARTITION BY aggregation_target
                                                                                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS `$window_id_1`
                    FROM
                      (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                              e.`$group_0` AS aggregation_target,
                              e.uuid AS uuid,
                              if(equals(e.event, 'user signed up'), 1, 0) AS step_0,
                              if(ifNull(equals(step_0, 1), 0), timestamp, NULL) AS latest_0,
                              if(ifNull(equals(step_0, 1), 0), uuid, NULL) AS uuid_0,
                              if(ifNull(equals(step_0, 1), 0), e.`$session_id`, NULL) AS `$session_id_0`,
                              if(ifNull(equals(step_0, 1), 0), e.`$window_id`, NULL) AS `$window_id_0`,
                              if(equals(e.event, 'paid'), 1, 0) AS step_1,
                              if(ifNull(equals(step_1, 1), 0), timestamp, NULL) AS latest_1,
                              if(ifNull(equals(step_1, 1), 0), uuid, NULL) AS uuid_1,
                              if(ifNull(equals(step_1, 1), 0), e.`$session_id`, NULL) AS `$session_id_1`,
                              if(ifNull(equals(step_1, 1), 0), e.`$window_id`, NULL) AS `$window_id_1`
                       FROM events AS e
                       LEFT JOIN
                         (SELECT argMax(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(groups.group_properties, 'industry'), ''), 'null'), '^"|"$', ''), groups._timestamp) AS properties___industry,
                                 groups.group_type_index AS index,
                                 groups.group_key AS key
                          FROM groups
                          WHERE and(equals(groups.team_id, 2), ifNull(equals(index, 0), 0))
                          GROUP BY groups.group_type_index,
                                   groups.group_key) AS e__group_0 ON equals(e.`$group_0`, e__group_0.key)
                       WHERE and(equals(e.team_id, 2), and(and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-14 23:59:59.999999', 6, 'UTC'))), in(e.event, tuple('paid', 'user signed up')), ifNull(equals(e__group_0.properties___industry, 'positive'), 0)), or(ifNull(equals(step_0, 1), 0), ifNull(equals(step_1, 1), 0)))))
                 WHERE ifNull(equals(step_0, 1), 0)))
           GROUP BY aggregation_target,
                    steps
           HAVING ifNull(equals(steps, max_steps), isNull(steps)
                         and isNull(max_steps)))
        WHERE ifNull(in(steps, [1, 2]), 0)
        ORDER BY aggregation_target ASC) AS funnel_actors
     WHERE ifNull(notEquals(funnel_actors.steps, 2), 1)
     GROUP BY funnel_actors.actor_id
     ORDER BY funnel_actors.actor_id ASC) AS source ON equals(groups.key, source.actor_id)
  ORDER BY source.actor_id ASC
  LIMIT 101
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1
  '''
# ---
# name: TestClickhouseFunnelCorrelation.test_funnel_correlation_with_properties_and_groups.3
  '''
  SELECT source.actor_id AS actor_id
  FROM
    (SELECT groups.group_type_index AS index,
            groups.group_key AS key
     FROM groups
     WHERE equals(groups.team_id, 2)
     GROUP BY groups.group_type_index,
              groups.group_key) AS groups
  INNER JOIN
    (SELECT funnel_actors.actor_id AS actor_id,
            any(funnel_actors.matching_events) AS matching_events
     FROM
       (SELECT aggregation_target AS actor_id,
               final_matching_events AS matching_events,
               timestamp AS timestamp,
               steps AS steps,
               final_timestamp AS final_timestamp,
               first_timestamp AS first_timestamp
        FROM
          (SELECT aggregation_target AS aggregation_target,
                  steps AS steps,
                  avg(step_1_conversion_time) AS step_1_average_conversion_time_inner,
                  median(step_1_conversion_time) AS step_1_median_conversion_time_inner,
                  groupArray(10)(step_0_matching_event) AS step_0_matching_events,
                  groupArray(10)(step_1_matching_event) AS step_1_matching_events,
                  groupArray(10)(final_matching_event) AS final_matching_events,
                  argMax(latest_0, steps) AS timestamp,
                  argMax(latest_1, steps) AS final_timestamp,
                  argMax(latest_0, steps) AS first_timestamp
           FROM
             (SELECT aggregation_target AS aggregation_target,
                     steps AS steps,
                     max(steps) OVER (PARTITION BY aggregation_target) AS max_steps,
                                     step_1_conversion_time AS step_1_conversion_time,
                                     tuple(latest_0, uuid_0, `$session_id_0`, `$window_id_0`) AS step_0_matching_event,
                                     tuple(latest_1, uuid_1, `$session_id_1`, `$window_id_1`) AS step_1_matching_event,
                                     if(isNull(latest_0), tuple(NULL, NULL, NULL, NULL), if(isNull(latest_1), step_0_matching_event, step_1_matching_event)) AS final_matching_event,
                                     latest_0 AS latest_0,
                                     latest_1 AS latest_1,
                                     latest_0 AS latest_0
              FROM
                (SELECT aggregation_target AS aggregation_target,
                        timestamp AS timestamp,
                        step_0 AS step_0,
                        latest_0 AS latest_0,
                        uuid_0 AS uuid_0,
                        `$session_id_0` AS `$session_id_0`,
                        `$window_id_0` AS `$window_id_0`,
                        step_1 AS step_1,
                        latest_1 AS latest_1,
                        uuid_1 AS uuid_1,
                        `$session_id_1` AS `$session_id_1`,
                        `$window_id_1` AS `$window_id_1`,
                        if(and(ifNull(lessOrEquals(latest_0, latest_1), 0), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), 2, 1) AS steps,
                        if(and(isNotNull(latest_1), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), dateDiff('second', latest_0, latest_1), NULL) AS step_1_conversion_time,
                        tuple(latest_0, uuid_0, `$session_id_0`, `$window_id_0`) AS step_0_matching_event,
                        tuple(latest_1, uuid_1, `$session_id_1`, `$window_id_1`) AS step_1_matching_event,
                        if(isNull(latest_0), tuple(NULL, NULL, NULL, NULL), if(isNull(latest_1), step_0_matching_event, step_1_matching_event)) AS final_matching_event
                 FROM
                   (SELECT aggregation_target AS aggregation_target,
                           timestamp AS timestamp,
                           step_0 AS step_0,
                           latest_0 AS latest_0,
                           uuid_0 AS uuid_0,
                           `$session_id_0` AS `$session_id_0`,
                           `$window_id_0` AS `$window_id_0`,
                           step_1 AS step_1,
                           min(latest_1) OVER (PARTITION BY aggregation_target
                                               ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS latest_1,
                                              last_value(uuid_1) OVER (PARTITION BY aggregation_target
                                                                       ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS uuid_1,
                                                                      last_value(`$session_id_1`) OVER (PARTITION BY aggregation_target
                                                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS `$session_id_1`,
                                                                                                       last_value(`$window_id_1`) OVER (PARTITION BY aggregation_target
                                                                                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS `$window_id_1`
                    FROM
                      (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                              e.`$group_0` AS aggregation_target,
                              e.uuid AS uuid,
                              if(equals(e.event, 'user signed up'), 1, 0) AS step_0,
                              if(ifNull(equals(step_0, 1), 0), timestamp, NULL) AS latest_0,
                              if(ifNull(equals(step_0, 1), 0), uuid, NULL) AS uuid_0,
                              if(ifNull(equals(step_0, 1), 0), e.`$session_id`, NULL) AS `$session_id_0`,
                              if(ifNull(equals(step_0, 1), 0), e.`$window_id`, NULL) AS `$window_id_0`,
                              if(equals(e.event, 'paid'), 1, 0) AS step_1,
                              if(ifNull(equals(step_1, 1), 0), timestamp, NULL) AS latest_1,
                              if(ifNull(equals(step_1, 1), 0), uuid, NULL) AS uuid_1,
                              if(ifNull(equals(step_1, 1), 0), e.`$session_id`, NULL) AS `$session_id_1`,
                              if(ifNull(equals(step_1, 1), 0), e.`$window_id`, NULL) AS `$window_id_1`
                       FROM events AS e
                       LEFT JOIN
                         (SELECT argMax(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(groups.group_properties, 'industry'), ''), 'null'), '^"|"$', ''), groups._timestamp) AS properties___industry,
                                 groups.group_type_index AS index,
                                 groups.group_key AS key
                          FROM groups
                          WHERE and(equals(groups.team_id, 2), ifNull(equals(index, 0), 0))
                          GROUP BY groups.group_type_index,
                                   groups.group_key) AS e__group_0 ON equals(e.`$group_0`, e__group_0.key)
                       WHERE and(equals(e.team_id, 2), and(and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-14 23:59:59.999999', 6, 'UTC'))), in(e.event, tuple('paid', 'user signed up')), ifNull(equals(e__group_0.properties___industry, 'negative'), 0)), or(ifNull(equals(step_0, 1), 0), ifNull(equals(step_1, 1), 0)))))
                 WHERE ifNull(equals(step_0, 1), 0)))
           GROUP BY aggregation_target,
                    steps
           HAVING ifNull(equals(steps, max_steps), isNull(steps)
                         and isNull(max_steps)))
        WHERE ifNull(in(steps, [1, 2]), 0)
        ORDER BY aggregation_target ASC) AS funnel_actors
     WHERE ifNull(equals(funnel_actors.steps, 2), 0)
     GROUP BY funnel_actors.actor_id
     ORDER BY funnel_actors.actor_id ASC) AS source ON equals(groups.key, source.actor_id)
  ORDER BY source.actor_id ASC
  LIMIT 101
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1
  '''
# ---
# name: TestClickhouseFunnelCorrelation.test_funnel_correlation_with_properties_and_groups.4
  '''
  SELECT source.actor_id AS actor_id
  FROM
    (SELECT groups.group_type_index AS index,
            groups.group_key AS key
     FROM groups
     WHERE equals(groups.team_id, 2)
     GROUP BY groups.group_type_index,
              groups.group_key) AS groups
  INNER JOIN
    (SELECT funnel_actors.actor_id AS actor_id,
            any(funnel_actors.matching_events) AS matching_events
     FROM
       (SELECT aggregation_target AS actor_id,
               final_matching_events AS matching_events,
               timestamp AS timestamp,
               steps AS steps,
               final_timestamp AS final_timestamp,
               first_timestamp AS first_timestamp
        FROM
          (SELECT aggregation_target AS aggregation_target,
                  steps AS steps,
                  avg(step_1_conversion_time) AS step_1_average_conversion_time_inner,
                  median(step_1_conversion_time) AS step_1_median_conversion_time_inner,
                  groupArray(10)(step_0_matching_event) AS step_0_matching_events,
                  groupArray(10)(step_1_matching_event) AS step_1_matching_events,
                  groupArray(10)(final_matching_event) AS final_matching_events,
                  argMax(latest_0, steps) AS timestamp,
                  argMax(latest_1, steps) AS final_timestamp,
                  argMax(latest_0, steps) AS first_timestamp
           FROM
             (SELECT aggregation_target AS aggregation_target,
                     steps AS steps,
                     max(steps) OVER (PARTITION BY aggregation_target) AS max_steps,
                                     step_1_conversion_time AS step_1_conversion_time,
                                     tuple(latest_0, uuid_0, `$session_id_0`, `$window_id_0`) AS step_0_matching_event,
                                     tuple(latest_1, uuid_1, `$session_id_1`, `$window_id_1`) AS step_1_matching_event,
                                     if(isNull(latest_0), tuple(NULL, NULL, NULL, NULL), if(isNull(latest_1), step_0_matching_event, step_1_matching_event)) AS final_matching_event,
                                     latest_0 AS latest_0,
                                     latest_1 AS latest_1,
                                     latest_0 AS latest_0
              FROM
                (SELECT aggregation_target AS aggregation_target,
                        timestamp AS timestamp,
                        step_0 AS step_0,
                        latest_0 AS latest_0,
                        uuid_0 AS uuid_0,
                        `$session_id_0` AS `$session_id_0`,
                        `$window_id_0` AS `$window_id_0`,
                        step_1 AS step_1,
                        latest_1 AS latest_1,
                        uuid_1 AS uuid_1,
                        `$session_id_1` AS `$session_id_1`,
                        `$window_id_1` AS `$window_id_1`,
                        if(and(ifNull(lessOrEquals(latest_0, latest_1), 0), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), 2, 1) AS steps,
                        if(and(isNotNull(latest_1), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), dateDiff('second', latest_0, latest_1), NULL) AS step_1_conversion_time,
                        tuple(latest_0, uuid_0, `$session_id_0`, `$window_id_0`) AS step_0_matching_event,
                        tuple(latest_1, uuid_1, `$session_id_1`, `$window_id_1`) AS step_1_matching_event,
                        if(isNull(latest_0), tuple(NULL, NULL, NULL, NULL), if(isNull(latest_1), step_0_matching_event, step_1_matching_event)) AS final_matching_event
                 FROM
                   (SELECT aggregation_target AS aggregation_target,
                           timestamp AS timestamp,
                           step_0 AS step_0,
                           latest_0 AS latest_0,
                           uuid_0 AS uuid_0,
                           `$session_id_0` AS `$session_id_0`,
                           `$window_id_0` AS `$window_id_0`,
                           step_1 AS step_1,
                           min(latest_1) OVER (PARTITION BY aggregation_target
                                               ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS latest_1,
                                              last_value(uuid_1) OVER (PARTITION BY aggregation_target
                                                                       ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS uuid_1,
                                                                      last_value(`$session_id_1`) OVER (PARTITION BY aggregation_target
                                                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS `$session_id_1`,
                                                                                                       last_value(`$window_id_1`) OVER (PARTITION BY aggregation_target
                                                                                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS `$window_id_1`
                    FROM
                      (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                              e.`$group_0` AS aggregation_target,
                              e.uuid AS uuid,
                              if(equals(e.event, 'user signed up'), 1, 0) AS step_0,
                              if(ifNull(equals(step_0, 1), 0), timestamp, NULL) AS latest_0,
                              if(ifNull(equals(step_0, 1), 0), uuid, NULL) AS uuid_0,
                              if(ifNull(equals(step_0, 1), 0), e.`$session_id`, NULL) AS `$session_id_0`,
                              if(ifNull(equals(step_0, 1), 0), e.`$window_id`, NULL) AS `$window_id_0`,
                              if(equals(e.event, 'paid'), 1, 0) AS step_1,
                              if(ifNull(equals(step_1, 1), 0), timestamp, NULL) AS latest_1,
                              if(ifNull(equals(step_1, 1), 0), uuid, NULL) AS uuid_1,
                              if(ifNull(equals(step_1, 1), 0), e.`$session_id`, NULL) AS `$session_id_1`,
                              if(ifNull(equals(step_1, 1), 0), e.`$window_id`, NULL) AS `$window_id_1`
                       FROM events AS e
                       LEFT JOIN
                         (SELECT argMax(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(groups.group_properties, 'industry'), ''), 'null'), '^"|"$', ''), groups._timestamp) AS properties___industry,
                                 groups.group_type_index AS index,
                                 groups.group_key AS key
                          FROM groups
                          WHERE and(equals(groups.team_id, 2), ifNull(equals(index, 0), 0))
                          GROUP BY groups.group_type_index,
                                   groups.group_key) AS e__group_0 ON equals(e.`$group_0`, e__group_0.key)
                       WHERE and(equals(e.team_id, 2), and(and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-14 23:59:59.999999', 6, 'UTC'))), in(e.event, tuple('paid', 'user signed up')), ifNull(equals(e__group_0.properties___industry, 'negative'), 0)), or(ifNull(equals(step_0, 1), 0), ifNull(equals(step_1, 1), 0)))))
                 WHERE ifNull(equals(step_0, 1), 0)))
           GROUP BY aggregation_target,
                    steps
           HAVING ifNull(equals(steps, max_steps), isNull(steps)
                         and isNull(max_steps)))
        WHERE ifNull(in(steps, [1, 2]), 0)
        ORDER BY aggregation_target ASC) AS funnel_actors
     WHERE ifNull(notEquals(funnel_actors.steps, 2), 1)
     GROUP BY funnel_actors.actor_id
     ORDER BY funnel_actors.actor_id ASC) AS source ON equals(groups.key, source.actor_id)
  ORDER BY source.actor_id ASC
  LIMIT 101
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1
  '''
# ---
# name: TestClickhouseFunnelCorrelation.test_funnel_correlation_with_properties_and_groups.5
  '''
  SELECT concat(ifNull(toString((aggregation_target_with_props.prop).1), ''), '::', ifNull(toString((aggregation_target_with_props.prop).2), '')) AS name,
         countIf(aggregation_target_with_props.actor_id, ifNull(equals(aggregation_target_with_props.steps, 2), 0)) AS success_count,
         countIf(aggregation_target_with_props.actor_id, ifNull(notEquals(aggregation_target_with_props.steps, 2), 1)) AS failure_count
  FROM
    (SELECT funnel_actors.actor_id AS actor_id,
            funnel_actors.steps AS steps,
            arrayJoin(JSONExtractKeysAndValues(groups_0.properties, 'String')) AS prop
     FROM
       (SELECT aggregation_target AS actor_id,
               timestamp AS timestamp,
               steps AS steps,
               final_timestamp AS final_timestamp,
               first_timestamp AS first_timestamp
        FROM
          (SELECT aggregation_target AS aggregation_target,
                  steps AS steps,
                  avg(step_1_conversion_time) AS step_1_average_conversion_time_inner,
                  median(step_1_conversion_time) AS step_1_median_conversion_time_inner,
                  argMax(latest_0, steps) AS timestamp,
                  argMax(latest_1, steps) AS final_timestamp,
                  argMax(latest_0, steps) AS first_timestamp
           FROM
             (SELECT aggregation_target AS aggregation_target,
                     steps AS steps,
                     max(steps) OVER (PARTITION BY aggregation_target) AS max_steps,
                                     step_1_conversion_time AS step_1_conversion_time,
                                     latest_0 AS latest_0,
                                     latest_1 AS latest_1,
                                     latest_0 AS latest_0
              FROM
                (SELECT aggregation_target AS aggregation_target,
                        timestamp AS timestamp,
                        step_0 AS step_0,
                        latest_0 AS latest_0,
                        step_1 AS step_1,
                        latest_1 AS latest_1,
                        if(and(ifNull(lessOrEquals(latest_0, latest_1), 0), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), 2, 1) AS steps,
                        if(and(isNotNull(latest_1), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), dateDiff('second', latest_0, latest_1), NULL) AS step_1_conversion_time
                 FROM
                   (SELECT aggregation_target AS aggregation_target,
                           timestamp AS timestamp,
                           step_0 AS step_0,
                           latest_0 AS latest_0,
                           step_1 AS step_1,
                           min(latest_1) OVER (PARTITION BY aggregation_target
                                               ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS latest_1
                    FROM
                      (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                              e.`$group_0` AS aggregation_target,
                              if(equals(e.event, 'user signed up'), 1, 0) AS step_0,
                              if(ifNull(equals(step_0, 1), 0), timestamp, NULL) AS latest_0,
                              if(equals(e.event, 'paid'), 1, 0) AS step_1,
                              if(ifNull(equals(step_1, 1), 0), timestamp, NULL) AS latest_1
                       FROM events AS e
                       WHERE and(equals(e.team_id, 2), and(and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-14 23:59:59.999999', 6, 'UTC'))), in(e.event, tuple('paid', 'user signed up'))), or(ifNull(equals(step_0, 1), 0), ifNull(equals(step_1, 1), 0)))))
                 WHERE ifNull(equals(step_0, 1), 0)))
           GROUP BY aggregation_target,
                    steps
           HAVING ifNull(equals(steps, max_steps), isNull(steps)
                         and isNull(max_steps)))
        WHERE ifNull(in(steps, [1, 2]), 0)
        ORDER BY aggregation_target ASC) AS funnel_actors
     LEFT JOIN
       (SELECT groups.key AS key,
               groups.properties AS properties
        FROM
          (SELECT argMax(groups.group_properties, groups._timestamp) AS properties,
                  groups.group_type_index AS index,
                  groups.group_key AS key
           FROM groups
           WHERE equals(groups.team_id, 2)
           GROUP BY groups.group_type_index,
                    groups.group_key) AS groups
        WHERE ifNull(equals(groups.index, 0), 0)) AS groups_0 ON equals(funnel_actors.actor_id, groups_0.key)) AS aggregation_target_with_props
  GROUP BY (aggregation_target_with_props.prop).1, (aggregation_target_with_props.prop).2
  HAVING ifNull(notIn((aggregation_target_with_props.prop).1, []), 0)
  LIMIT 100
  UNION ALL
  SELECT 'Total_Values_In_Query' AS name,
         countIf(funnel_actors.actor_id, ifNull(equals(funnel_actors.steps, 2), 0)) AS success_count,
         countIf(funnel_actors.actor_id, ifNull(notEquals(funnel_actors.steps, 2), 1)) AS failure_count
  FROM
    (SELECT aggregation_target AS actor_id,
            timestamp AS timestamp,
            steps AS steps,
            final_timestamp AS final_timestamp,
            first_timestamp AS first_timestamp
     FROM
       (SELECT aggregation_target AS aggregation_target,
               steps AS steps,
               avg(step_1_conversion_time) AS step_1_average_conversion_time_inner,
               median(step_1_conversion_time) AS step_1_median_conversion_time_inner,
               argMax(latest_0, steps) AS timestamp,
               argMax(latest_1, steps) AS final_timestamp,
               argMax(latest_0, steps) AS first_timestamp
        FROM
          (SELECT aggregation_target AS aggregation_target,
                  steps AS steps,
                  max(steps) OVER (PARTITION BY aggregation_target) AS max_steps,
                                  step_1_conversion_time AS step_1_conversion_time,
                                  latest_0 AS latest_0,
                                  latest_1 AS latest_1,
                                  latest_0 AS latest_0
           FROM
             (SELECT aggregation_target AS aggregation_target,
                     timestamp AS timestamp,
                     step_0 AS step_0,
                     latest_0 AS latest_0,
                     step_1 AS step_1,
                     latest_1 AS latest_1,
                     if(and(ifNull(lessOrEquals(latest_0, latest_1), 0), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), 2, 1) AS steps,
                     if(and(isNotNull(latest_1), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), dateDiff('second', latest_0, latest_1), NULL) AS step_1_conversion_time
              FROM
                (SELECT aggregation_target AS aggregation_target,
                        timestamp AS timestamp,
                        step_0 AS step_0,
                        latest_0 AS latest_0,
                        step_1 AS step_1,
                        min(latest_1) OVER (PARTITION BY aggregation_target
                                            ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS latest_1
                 FROM
                   (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                           e.`$group_0` AS aggregation_target,
                           if(equals(e.event, 'user signed up'), 1, 0) AS step_0,
                           if(ifNull(equals(step_0, 1), 0), timestamp, NULL) AS latest_0,
                           if(equals(e.event, 'paid'), 1, 0) AS step_1,
                           if(ifNull(equals(step_1, 1), 0), timestamp, NULL) AS latest_1
                    FROM events AS e
                    WHERE and(equals(e.team_id, 2), and(and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-14 23:59:59.999999', 6, 'UTC'))), in(e.event, tuple('paid', 'user signed up'))), or(ifNull(equals(step_0, 1), 0), ifNull(equals(step_1, 1), 0)))))
              WHERE ifNull(equals(step_0, 1), 0)))
        GROUP BY aggregation_target,
                 steps
        HAVING ifNull(equals(steps, max_steps), isNull(steps)
                      and isNull(max_steps)))
     WHERE ifNull(in(steps, [1, 2]), 0)
     ORDER BY aggregation_target ASC) AS funnel_actors
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '''
# ---
# name: TestClickhouseFunnelCorrelation.test_funnel_correlation_with_properties_and_groups_materialized
  '''
  SELECT concat(ifNull(toString((aggregation_target_with_props.prop).1), ''), '::', ifNull(toString((aggregation_target_with_props.prop).2), '')) AS name,
         countIf(aggregation_target_with_props.actor_id, ifNull(equals(aggregation_target_with_props.steps, 2), 0)) AS success_count,
         countIf(aggregation_target_with_props.actor_id, ifNull(notEquals(aggregation_target_with_props.steps, 2), 1)) AS failure_count
  FROM
    (SELECT funnel_actors.actor_id AS actor_id,
            funnel_actors.steps AS steps,
            arrayJoin(arrayZip(['industry'], [JSONExtractString(groups_0.properties, 'industry')])) AS prop
     FROM
       (SELECT aggregation_target AS actor_id,
               timestamp AS timestamp,
               steps AS steps,
               final_timestamp AS final_timestamp,
               first_timestamp AS first_timestamp
        FROM
          (SELECT aggregation_target AS aggregation_target,
                  steps AS steps,
                  avg(step_1_conversion_time) AS step_1_average_conversion_time_inner,
                  median(step_1_conversion_time) AS step_1_median_conversion_time_inner,
                  argMax(latest_0, steps) AS timestamp,
                  argMax(latest_1, steps) AS final_timestamp,
                  argMax(latest_0, steps) AS first_timestamp
           FROM
             (SELECT aggregation_target AS aggregation_target,
                     steps AS steps,
                     max(steps) OVER (PARTITION BY aggregation_target) AS max_steps,
                                     step_1_conversion_time AS step_1_conversion_time,
                                     latest_0 AS latest_0,
                                     latest_1 AS latest_1,
                                     latest_0 AS latest_0
              FROM
                (SELECT aggregation_target AS aggregation_target,
                        timestamp AS timestamp,
                        step_0 AS step_0,
                        latest_0 AS latest_0,
                        step_1 AS step_1,
                        latest_1 AS latest_1,
                        if(and(ifNull(lessOrEquals(latest_0, latest_1), 0), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), 2, 1) AS steps,
                        if(and(isNotNull(latest_1), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), dateDiff('second', latest_0, latest_1), NULL) AS step_1_conversion_time
                 FROM
                   (SELECT aggregation_target AS aggregation_target,
                           timestamp AS timestamp,
                           step_0 AS step_0,
                           latest_0 AS latest_0,
                           step_1 AS step_1,
                           min(latest_1) OVER (PARTITION BY aggregation_target
                                               ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS latest_1
                    FROM
                      (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                              e.`$group_0` AS aggregation_target,
                              if(equals(e.event, 'user signed up'), 1, 0) AS step_0,
                              if(ifNull(equals(step_0, 1), 0), timestamp, NULL) AS latest_0,
                              if(equals(e.event, 'paid'), 1, 0) AS step_1,
                              if(ifNull(equals(step_1, 1), 0), timestamp, NULL) AS latest_1
                       FROM events AS e
                       WHERE and(equals(e.team_id, 2), and(and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-14 23:59:59.999999', 6, 'UTC'))), in(e.event, tuple('paid', 'user signed up'))), or(ifNull(equals(step_0, 1), 0), ifNull(equals(step_1, 1), 0)))))
                 WHERE ifNull(equals(step_0, 1), 0)))
           GROUP BY aggregation_target,
                    steps
           HAVING ifNull(equals(steps, max_steps), isNull(steps)
                         and isNull(max_steps)))
        WHERE ifNull(in(steps, [1, 2]), 0)
        ORDER BY aggregation_target ASC) AS funnel_actors
     LEFT JOIN
       (SELECT groups.key AS key,
               groups.properties AS properties
        FROM
          (SELECT argMax(groups.group_properties, groups._timestamp) AS properties,
                  groups.group_type_index AS index,
                  groups.group_key AS key
           FROM groups
           WHERE equals(groups.team_id, 2)
           GROUP BY groups.group_type_index,
                    groups.group_key) AS groups
        WHERE ifNull(equals(groups.index, 0), 0)) AS groups_0 ON equals(funnel_actors.actor_id, groups_0.key)) AS aggregation_target_with_props
  GROUP BY (aggregation_target_with_props.prop).1, (aggregation_target_with_props.prop).2
  HAVING ifNull(notIn((aggregation_target_with_props.prop).1, []), 0)
  LIMIT 100
  UNION ALL
  SELECT 'Total_Values_In_Query' AS name,
         countIf(funnel_actors.actor_id, ifNull(equals(funnel_actors.steps, 2), 0)) AS success_count,
         countIf(funnel_actors.actor_id, ifNull(notEquals(funnel_actors.steps, 2), 1)) AS failure_count
  FROM
    (SELECT aggregation_target AS actor_id,
            timestamp AS timestamp,
            steps AS steps,
            final_timestamp AS final_timestamp,
            first_timestamp AS first_timestamp
     FROM
       (SELECT aggregation_target AS aggregation_target,
               steps AS steps,
               avg(step_1_conversion_time) AS step_1_average_conversion_time_inner,
               median(step_1_conversion_time) AS step_1_median_conversion_time_inner,
               argMax(latest_0, steps) AS timestamp,
               argMax(latest_1, steps) AS final_timestamp,
               argMax(latest_0, steps) AS first_timestamp
        FROM
          (SELECT aggregation_target AS aggregation_target,
                  steps AS steps,
                  max(steps) OVER (PARTITION BY aggregation_target) AS max_steps,
                                  step_1_conversion_time AS step_1_conversion_time,
                                  latest_0 AS latest_0,
                                  latest_1 AS latest_1,
                                  latest_0 AS latest_0
           FROM
             (SELECT aggregation_target AS aggregation_target,
                     timestamp AS timestamp,
                     step_0 AS step_0,
                     latest_0 AS latest_0,
                     step_1 AS step_1,
                     latest_1 AS latest_1,
                     if(and(ifNull(lessOrEquals(latest_0, latest_1), 0), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), 2, 1) AS steps,
                     if(and(isNotNull(latest_1), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), dateDiff('second', latest_0, latest_1), NULL) AS step_1_conversion_time
              FROM
                (SELECT aggregation_target AS aggregation_target,
                        timestamp AS timestamp,
                        step_0 AS step_0,
                        latest_0 AS latest_0,
                        step_1 AS step_1,
                        min(latest_1) OVER (PARTITION BY aggregation_target
                                            ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS latest_1
                 FROM
                   (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                           e.`$group_0` AS aggregation_target,
                           if(equals(e.event, 'user signed up'), 1, 0) AS step_0,
                           if(ifNull(equals(step_0, 1), 0), timestamp, NULL) AS latest_0,
                           if(equals(e.event, 'paid'), 1, 0) AS step_1,
                           if(ifNull(equals(step_1, 1), 0), timestamp, NULL) AS latest_1
                    FROM events AS e
                    WHERE and(equals(e.team_id, 2), and(and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-14 23:59:59.999999', 6, 'UTC'))), in(e.event, tuple('paid', 'user signed up'))), or(ifNull(equals(step_0, 1), 0), ifNull(equals(step_1, 1), 0)))))
              WHERE ifNull(equals(step_0, 1), 0)))
        GROUP BY aggregation_target,
                 steps
        HAVING ifNull(equals(steps, max_steps), isNull(steps)
                      and isNull(max_steps)))
     WHERE ifNull(in(steps, [1, 2]), 0)
     ORDER BY aggregation_target ASC) AS funnel_actors
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '''
# ---
# name: TestClickhouseFunnelCorrelation.test_funnel_correlation_with_properties_and_groups_materialized.1
  '''
  SELECT source.actor_id AS actor_id
  FROM
    (SELECT groups.group_type_index AS index,
            groups.group_key AS key
     FROM groups
     WHERE equals(groups.team_id, 2)
     GROUP BY groups.group_type_index,
              groups.group_key) AS groups
  INNER JOIN
    (SELECT funnel_actors.actor_id AS actor_id,
            any(funnel_actors.matching_events) AS matching_events
     FROM
       (SELECT aggregation_target AS actor_id,
               final_matching_events AS matching_events,
               timestamp AS timestamp,
               steps AS steps,
               final_timestamp AS final_timestamp,
               first_timestamp AS first_timestamp
        FROM
          (SELECT aggregation_target AS aggregation_target,
                  steps AS steps,
                  avg(step_1_conversion_time) AS step_1_average_conversion_time_inner,
                  median(step_1_conversion_time) AS step_1_median_conversion_time_inner,
                  groupArray(10)(step_0_matching_event) AS step_0_matching_events,
                  groupArray(10)(step_1_matching_event) AS step_1_matching_events,
                  groupArray(10)(final_matching_event) AS final_matching_events,
                  argMax(latest_0, steps) AS timestamp,
                  argMax(latest_1, steps) AS final_timestamp,
                  argMax(latest_0, steps) AS first_timestamp
           FROM
             (SELECT aggregation_target AS aggregation_target,
                     steps AS steps,
                     max(steps) OVER (PARTITION BY aggregation_target) AS max_steps,
                                     step_1_conversion_time AS step_1_conversion_time,
                                     tuple(latest_0, uuid_0, `$session_id_0`, `$window_id_0`) AS step_0_matching_event,
                                     tuple(latest_1, uuid_1, `$session_id_1`, `$window_id_1`) AS step_1_matching_event,
                                     if(isNull(latest_0), tuple(NULL, NULL, NULL, NULL), if(isNull(latest_1), step_0_matching_event, step_1_matching_event)) AS final_matching_event,
                                     latest_0 AS latest_0,
                                     latest_1 AS latest_1,
                                     latest_0 AS latest_0
              FROM
                (SELECT aggregation_target AS aggregation_target,
                        timestamp AS timestamp,
                        step_0 AS step_0,
                        latest_0 AS latest_0,
                        uuid_0 AS uuid_0,
                        `$session_id_0` AS `$session_id_0`,
                        `$window_id_0` AS `$window_id_0`,
                        step_1 AS step_1,
                        latest_1 AS latest_1,
                        uuid_1 AS uuid_1,
                        `$session_id_1` AS `$session_id_1`,
                        `$window_id_1` AS `$window_id_1`,
                        if(and(ifNull(lessOrEquals(latest_0, latest_1), 0), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), 2, 1) AS steps,
                        if(and(isNotNull(latest_1), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), dateDiff('second', latest_0, latest_1), NULL) AS step_1_conversion_time,
                        tuple(latest_0, uuid_0, `$session_id_0`, `$window_id_0`) AS step_0_matching_event,
                        tuple(latest_1, uuid_1, `$session_id_1`, `$window_id_1`) AS step_1_matching_event,
                        if(isNull(latest_0), tuple(NULL, NULL, NULL, NULL), if(isNull(latest_1), step_0_matching_event, step_1_matching_event)) AS final_matching_event
                 FROM
                   (SELECT aggregation_target AS aggregation_target,
                           timestamp AS timestamp,
                           step_0 AS step_0,
                           latest_0 AS latest_0,
                           uuid_0 AS uuid_0,
                           `$session_id_0` AS `$session_id_0`,
                           `$window_id_0` AS `$window_id_0`,
                           step_1 AS step_1,
                           min(latest_1) OVER (PARTITION BY aggregation_target
                                               ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS latest_1,
                                              last_value(uuid_1) OVER (PARTITION BY aggregation_target
                                                                       ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS uuid_1,
                                                                      last_value(`$session_id_1`) OVER (PARTITION BY aggregation_target
                                                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS `$session_id_1`,
                                                                                                       last_value(`$window_id_1`) OVER (PARTITION BY aggregation_target
                                                                                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS `$window_id_1`
                    FROM
                      (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                              e.`$group_0` AS aggregation_target,
                              e.uuid AS uuid,
                              if(equals(e.event, 'user signed up'), 1, 0) AS step_0,
                              if(ifNull(equals(step_0, 1), 0), timestamp, NULL) AS latest_0,
                              if(ifNull(equals(step_0, 1), 0), uuid, NULL) AS uuid_0,
                              if(ifNull(equals(step_0, 1), 0), e.`$session_id`, NULL) AS `$session_id_0`,
                              if(ifNull(equals(step_0, 1), 0), e.`$window_id`, NULL) AS `$window_id_0`,
                              if(equals(e.event, 'paid'), 1, 0) AS step_1,
                              if(ifNull(equals(step_1, 1), 0), timestamp, NULL) AS latest_1,
                              if(ifNull(equals(step_1, 1), 0), uuid, NULL) AS uuid_1,
                              if(ifNull(equals(step_1, 1), 0), e.`$session_id`, NULL) AS `$session_id_1`,
                              if(ifNull(equals(step_1, 1), 0), e.`$window_id`, NULL) AS `$window_id_1`
                       FROM events AS e
                       LEFT JOIN
                         (SELECT argMax(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(groups.group_properties, 'industry'), ''), 'null'), '^"|"$', ''), groups._timestamp) AS properties___industry,
                                 groups.group_type_index AS index,
                                 groups.group_key AS key
                          FROM groups
                          WHERE and(equals(groups.team_id, 2), ifNull(equals(index, 0), 0))
                          GROUP BY groups.group_type_index,
                                   groups.group_key) AS e__group_0 ON equals(e.`$group_0`, e__group_0.key)
                       WHERE and(equals(e.team_id, 2), and(and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-14 23:59:59.999999', 6, 'UTC'))), in(e.event, tuple('paid', 'user signed up')), ifNull(equals(e__group_0.properties___industry, 'positive'), 0)), or(ifNull(equals(step_0, 1), 0), ifNull(equals(step_1, 1), 0)))))
                 WHERE ifNull(equals(step_0, 1), 0)))
           GROUP BY aggregation_target,
                    steps
           HAVING ifNull(equals(steps, max_steps), isNull(steps)
                         and isNull(max_steps)))
        WHERE ifNull(in(steps, [1, 2]), 0)
        ORDER BY aggregation_target ASC) AS funnel_actors
     WHERE ifNull(equals(funnel_actors.steps, 2), 0)
     GROUP BY funnel_actors.actor_id
     ORDER BY funnel_actors.actor_id ASC) AS source ON equals(groups.key, source.actor_id)
  ORDER BY source.actor_id ASC
  LIMIT 101
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1
  '''
# ---
# name: TestClickhouseFunnelCorrelation.test_funnel_correlation_with_properties_and_groups_materialized.2
  '''
  SELECT source.actor_id AS actor_id
  FROM
    (SELECT groups.group_type_index AS index,
            groups.group_key AS key
     FROM groups
     WHERE equals(groups.team_id, 2)
     GROUP BY groups.group_type_index,
              groups.group_key) AS groups
  INNER JOIN
    (SELECT funnel_actors.actor_id AS actor_id,
            any(funnel_actors.matching_events) AS matching_events
     FROM
       (SELECT aggregation_target AS actor_id,
               final_matching_events AS matching_events,
               timestamp AS timestamp,
               steps AS steps,
               final_timestamp AS final_timestamp,
               first_timestamp AS first_timestamp
        FROM
          (SELECT aggregation_target AS aggregation_target,
                  steps AS steps,
                  avg(step_1_conversion_time) AS step_1_average_conversion_time_inner,
                  median(step_1_conversion_time) AS step_1_median_conversion_time_inner,
                  groupArray(10)(step_0_matching_event) AS step_0_matching_events,
                  groupArray(10)(step_1_matching_event) AS step_1_matching_events,
                  groupArray(10)(final_matching_event) AS final_matching_events,
                  argMax(latest_0, steps) AS timestamp,
                  argMax(latest_1, steps) AS final_timestamp,
                  argMax(latest_0, steps) AS first_timestamp
           FROM
             (SELECT aggregation_target AS aggregation_target,
                     steps AS steps,
                     max(steps) OVER (PARTITION BY aggregation_target) AS max_steps,
                                     step_1_conversion_time AS step_1_conversion_time,
                                     tuple(latest_0, uuid_0, `$session_id_0`, `$window_id_0`) AS step_0_matching_event,
                                     tuple(latest_1, uuid_1, `$session_id_1`, `$window_id_1`) AS step_1_matching_event,
                                     if(isNull(latest_0), tuple(NULL, NULL, NULL, NULL), if(isNull(latest_1), step_0_matching_event, step_1_matching_event)) AS final_matching_event,
                                     latest_0 AS latest_0,
                                     latest_1 AS latest_1,
                                     latest_0 AS latest_0
              FROM
                (SELECT aggregation_target AS aggregation_target,
                        timestamp AS timestamp,
                        step_0 AS step_0,
                        latest_0 AS latest_0,
                        uuid_0 AS uuid_0,
                        `$session_id_0` AS `$session_id_0`,
                        `$window_id_0` AS `$window_id_0`,
                        step_1 AS step_1,
                        latest_1 AS latest_1,
                        uuid_1 AS uuid_1,
                        `$session_id_1` AS `$session_id_1`,
                        `$window_id_1` AS `$window_id_1`,
                        if(and(ifNull(lessOrEquals(latest_0, latest_1), 0), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), 2, 1) AS steps,
                        if(and(isNotNull(latest_1), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), dateDiff('second', latest_0, latest_1), NULL) AS step_1_conversion_time,
                        tuple(latest_0, uuid_0, `$session_id_0`, `$window_id_0`) AS step_0_matching_event,
                        tuple(latest_1, uuid_1, `$session_id_1`, `$window_id_1`) AS step_1_matching_event,
                        if(isNull(latest_0), tuple(NULL, NULL, NULL, NULL), if(isNull(latest_1), step_0_matching_event, step_1_matching_event)) AS final_matching_event
                 FROM
                   (SELECT aggregation_target AS aggregation_target,
                           timestamp AS timestamp,
                           step_0 AS step_0,
                           latest_0 AS latest_0,
                           uuid_0 AS uuid_0,
                           `$session_id_0` AS `$session_id_0`,
                           `$window_id_0` AS `$window_id_0`,
                           step_1 AS step_1,
                           min(latest_1) OVER (PARTITION BY aggregation_target
                                               ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS latest_1,
                                              last_value(uuid_1) OVER (PARTITION BY aggregation_target
                                                                       ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS uuid_1,
                                                                      last_value(`$session_id_1`) OVER (PARTITION BY aggregation_target
                                                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS `$session_id_1`,
                                                                                                       last_value(`$window_id_1`) OVER (PARTITION BY aggregation_target
                                                                                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS `$window_id_1`
                    FROM
                      (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                              e.`$group_0` AS aggregation_target,
                              e.uuid AS uuid,
                              if(equals(e.event, 'user signed up'), 1, 0) AS step_0,
                              if(ifNull(equals(step_0, 1), 0), timestamp, NULL) AS latest_0,
                              if(ifNull(equals(step_0, 1), 0), uuid, NULL) AS uuid_0,
                              if(ifNull(equals(step_0, 1), 0), e.`$session_id`, NULL) AS `$session_id_0`,
                              if(ifNull(equals(step_0, 1), 0), e.`$window_id`, NULL) AS `$window_id_0`,
                              if(equals(e.event, 'paid'), 1, 0) AS step_1,
                              if(ifNull(equals(step_1, 1), 0), timestamp, NULL) AS latest_1,
                              if(ifNull(equals(step_1, 1), 0), uuid, NULL) AS uuid_1,
                              if(ifNull(equals(step_1, 1), 0), e.`$session_id`, NULL) AS `$session_id_1`,
                              if(ifNull(equals(step_1, 1), 0), e.`$window_id`, NULL) AS `$window_id_1`
                       FROM events AS e
                       LEFT JOIN
                         (SELECT argMax(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(groups.group_properties, 'industry'), ''), 'null'), '^"|"$', ''), groups._timestamp) AS properties___industry,
                                 groups.group_type_index AS index,
                                 groups.group_key AS key
                          FROM groups
                          WHERE and(equals(groups.team_id, 2), ifNull(equals(index, 0), 0))
                          GROUP BY groups.group_type_index,
                                   groups.group_key) AS e__group_0 ON equals(e.`$group_0`, e__group_0.key)
                       WHERE and(equals(e.team_id, 2), and(and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-14 23:59:59.999999', 6, 'UTC'))), in(e.event, tuple('paid', 'user signed up')), ifNull(equals(e__group_0.properties___industry, 'positive'), 0)), or(ifNull(equals(step_0, 1), 0), ifNull(equals(step_1, 1), 0)))))
                 WHERE ifNull(equals(step_0, 1), 0)))
           GROUP BY aggregation_target,
                    steps
           HAVING ifNull(equals(steps, max_steps), isNull(steps)
                         and isNull(max_steps)))
        WHERE ifNull(in(steps, [1, 2]), 0)
        ORDER BY aggregation_target ASC) AS funnel_actors
     WHERE ifNull(notEquals(funnel_actors.steps, 2), 1)
     GROUP BY funnel_actors.actor_id
     ORDER BY funnel_actors.actor_id ASC) AS source ON equals(groups.key, source.actor_id)
  ORDER BY source.actor_id ASC
  LIMIT 101
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1
  '''
# ---
# name: TestClickhouseFunnelCorrelation.test_funnel_correlation_with_properties_and_groups_materialized.3
  '''
  SELECT source.actor_id AS actor_id
  FROM
    (SELECT groups.group_type_index AS index,
            groups.group_key AS key
     FROM groups
     WHERE equals(groups.team_id, 2)
     GROUP BY groups.group_type_index,
              groups.group_key) AS groups
  INNER JOIN
    (SELECT funnel_actors.actor_id AS actor_id,
            any(funnel_actors.matching_events) AS matching_events
     FROM
       (SELECT aggregation_target AS actor_id,
               final_matching_events AS matching_events,
               timestamp AS timestamp,
               steps AS steps,
               final_timestamp AS final_timestamp,
               first_timestamp AS first_timestamp
        FROM
          (SELECT aggregation_target AS aggregation_target,
                  steps AS steps,
                  avg(step_1_conversion_time) AS step_1_average_conversion_time_inner,
                  median(step_1_conversion_time) AS step_1_median_conversion_time_inner,
                  groupArray(10)(step_0_matching_event) AS step_0_matching_events,
                  groupArray(10)(step_1_matching_event) AS step_1_matching_events,
                  groupArray(10)(final_matching_event) AS final_matching_events,
                  argMax(latest_0, steps) AS timestamp,
                  argMax(latest_1, steps) AS final_timestamp,
                  argMax(latest_0, steps) AS first_timestamp
           FROM
             (SELECT aggregation_target AS aggregation_target,
                     steps AS steps,
                     max(steps) OVER (PARTITION BY aggregation_target) AS max_steps,
                                     step_1_conversion_time AS step_1_conversion_time,
                                     tuple(latest_0, uuid_0, `$session_id_0`, `$window_id_0`) AS step_0_matching_event,
                                     tuple(latest_1, uuid_1, `$session_id_1`, `$window_id_1`) AS step_1_matching_event,
                                     if(isNull(latest_0), tuple(NULL, NULL, NULL, NULL), if(isNull(latest_1), step_0_matching_event, step_1_matching_event)) AS final_matching_event,
                                     latest_0 AS latest_0,
                                     latest_1 AS latest_1,
                                     latest_0 AS latest_0
              FROM
                (SELECT aggregation_target AS aggregation_target,
                        timestamp AS timestamp,
                        step_0 AS step_0,
                        latest_0 AS latest_0,
                        uuid_0 AS uuid_0,
                        `$session_id_0` AS `$session_id_0`,
                        `$window_id_0` AS `$window_id_0`,
                        step_1 AS step_1,
                        latest_1 AS latest_1,
                        uuid_1 AS uuid_1,
                        `$session_id_1` AS `$session_id_1`,
                        `$window_id_1` AS `$window_id_1`,
                        if(and(ifNull(lessOrEquals(latest_0, latest_1), 0), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), 2, 1) AS steps,
                        if(and(isNotNull(latest_1), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), dateDiff('second', latest_0, latest_1), NULL) AS step_1_conversion_time,
                        tuple(latest_0, uuid_0, `$session_id_0`, `$window_id_0`) AS step_0_matching_event,
                        tuple(latest_1, uuid_1, `$session_id_1`, `$window_id_1`) AS step_1_matching_event,
                        if(isNull(latest_0), tuple(NULL, NULL, NULL, NULL), if(isNull(latest_1), step_0_matching_event, step_1_matching_event)) AS final_matching_event
                 FROM
                   (SELECT aggregation_target AS aggregation_target,
                           timestamp AS timestamp,
                           step_0 AS step_0,
                           latest_0 AS latest_0,
                           uuid_0 AS uuid_0,
                           `$session_id_0` AS `$session_id_0`,
                           `$window_id_0` AS `$window_id_0`,
                           step_1 AS step_1,
                           min(latest_1) OVER (PARTITION BY aggregation_target
                                               ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS latest_1,
                                              last_value(uuid_1) OVER (PARTITION BY aggregation_target
                                                                       ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS uuid_1,
                                                                      last_value(`$session_id_1`) OVER (PARTITION BY aggregation_target
                                                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS `$session_id_1`,
                                                                                                       last_value(`$window_id_1`) OVER (PARTITION BY aggregation_target
                                                                                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS `$window_id_1`
                    FROM
                      (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                              e.`$group_0` AS aggregation_target,
                              e.uuid AS uuid,
                              if(equals(e.event, 'user signed up'), 1, 0) AS step_0,
                              if(ifNull(equals(step_0, 1), 0), timestamp, NULL) AS latest_0,
                              if(ifNull(equals(step_0, 1), 0), uuid, NULL) AS uuid_0,
                              if(ifNull(equals(step_0, 1), 0), e.`$session_id`, NULL) AS `$session_id_0`,
                              if(ifNull(equals(step_0, 1), 0), e.`$window_id`, NULL) AS `$window_id_0`,
                              if(equals(e.event, 'paid'), 1, 0) AS step_1,
                              if(ifNull(equals(step_1, 1), 0), timestamp, NULL) AS latest_1,
                              if(ifNull(equals(step_1, 1), 0), uuid, NULL) AS uuid_1,
                              if(ifNull(equals(step_1, 1), 0), e.`$session_id`, NULL) AS `$session_id_1`,
                              if(ifNull(equals(step_1, 1), 0), e.`$window_id`, NULL) AS `$window_id_1`
                       FROM events AS e
                       LEFT JOIN
                         (SELECT argMax(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(groups.group_properties, 'industry'), ''), 'null'), '^"|"$', ''), groups._timestamp) AS properties___industry,
                                 groups.group_type_index AS index,
                                 groups.group_key AS key
                          FROM groups
                          WHERE and(equals(groups.team_id, 2), ifNull(equals(index, 0), 0))
                          GROUP BY groups.group_type_index,
                                   groups.group_key) AS e__group_0 ON equals(e.`$group_0`, e__group_0.key)
                       WHERE and(equals(e.team_id, 2), and(and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-14 23:59:59.999999', 6, 'UTC'))), in(e.event, tuple('paid', 'user signed up')), ifNull(equals(e__group_0.properties___industry, 'negative'), 0)), or(ifNull(equals(step_0, 1), 0), ifNull(equals(step_1, 1), 0)))))
                 WHERE ifNull(equals(step_0, 1), 0)))
           GROUP BY aggregation_target,
                    steps
           HAVING ifNull(equals(steps, max_steps), isNull(steps)
                         and isNull(max_steps)))
        WHERE ifNull(in(steps, [1, 2]), 0)
        ORDER BY aggregation_target ASC) AS funnel_actors
     WHERE ifNull(equals(funnel_actors.steps, 2), 0)
     GROUP BY funnel_actors.actor_id
     ORDER BY funnel_actors.actor_id ASC) AS source ON equals(groups.key, source.actor_id)
  ORDER BY source.actor_id ASC
  LIMIT 101
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1
  '''
# ---
# name: TestClickhouseFunnelCorrelation.test_funnel_correlation_with_properties_and_groups_materialized.4
  '''
  SELECT source.actor_id AS actor_id
  FROM
    (SELECT groups.group_type_index AS index,
            groups.group_key AS key
     FROM groups
     WHERE equals(groups.team_id, 2)
     GROUP BY groups.group_type_index,
              groups.group_key) AS groups
  INNER JOIN
    (SELECT funnel_actors.actor_id AS actor_id,
            any(funnel_actors.matching_events) AS matching_events
     FROM
       (SELECT aggregation_target AS actor_id,
               final_matching_events AS matching_events,
               timestamp AS timestamp,
               steps AS steps,
               final_timestamp AS final_timestamp,
               first_timestamp AS first_timestamp
        FROM
          (SELECT aggregation_target AS aggregation_target,
                  steps AS steps,
                  avg(step_1_conversion_time) AS step_1_average_conversion_time_inner,
                  median(step_1_conversion_time) AS step_1_median_conversion_time_inner,
                  groupArray(10)(step_0_matching_event) AS step_0_matching_events,
                  groupArray(10)(step_1_matching_event) AS step_1_matching_events,
                  groupArray(10)(final_matching_event) AS final_matching_events,
                  argMax(latest_0, steps) AS timestamp,
                  argMax(latest_1, steps) AS final_timestamp,
                  argMax(latest_0, steps) AS first_timestamp
           FROM
             (SELECT aggregation_target AS aggregation_target,
                     steps AS steps,
                     max(steps) OVER (PARTITION BY aggregation_target) AS max_steps,
                                     step_1_conversion_time AS step_1_conversion_time,
                                     tuple(latest_0, uuid_0, `$session_id_0`, `$window_id_0`) AS step_0_matching_event,
                                     tuple(latest_1, uuid_1, `$session_id_1`, `$window_id_1`) AS step_1_matching_event,
                                     if(isNull(latest_0), tuple(NULL, NULL, NULL, NULL), if(isNull(latest_1), step_0_matching_event, step_1_matching_event)) AS final_matching_event,
                                     latest_0 AS latest_0,
                                     latest_1 AS latest_1,
                                     latest_0 AS latest_0
              FROM
                (SELECT aggregation_target AS aggregation_target,
                        timestamp AS timestamp,
                        step_0 AS step_0,
                        latest_0 AS latest_0,
                        uuid_0 AS uuid_0,
                        `$session_id_0` AS `$session_id_0`,
                        `$window_id_0` AS `$window_id_0`,
                        step_1 AS step_1,
                        latest_1 AS latest_1,
                        uuid_1 AS uuid_1,
                        `$session_id_1` AS `$session_id_1`,
                        `$window_id_1` AS `$window_id_1`,
                        if(and(ifNull(lessOrEquals(latest_0, latest_1), 0), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), 2, 1) AS steps,
                        if(and(isNotNull(latest_1), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), dateDiff('second', latest_0, latest_1), NULL) AS step_1_conversion_time,
                        tuple(latest_0, uuid_0, `$session_id_0`, `$window_id_0`) AS step_0_matching_event,
                        tuple(latest_1, uuid_1, `$session_id_1`, `$window_id_1`) AS step_1_matching_event,
                        if(isNull(latest_0), tuple(NULL, NULL, NULL, NULL), if(isNull(latest_1), step_0_matching_event, step_1_matching_event)) AS final_matching_event
                 FROM
                   (SELECT aggregation_target AS aggregation_target,
                           timestamp AS timestamp,
                           step_0 AS step_0,
                           latest_0 AS latest_0,
                           uuid_0 AS uuid_0,
                           `$session_id_0` AS `$session_id_0`,
                           `$window_id_0` AS `$window_id_0`,
                           step_1 AS step_1,
                           min(latest_1) OVER (PARTITION BY aggregation_target
                                               ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS latest_1,
                                              last_value(uuid_1) OVER (PARTITION BY aggregation_target
                                                                       ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS uuid_1,
                                                                      last_value(`$session_id_1`) OVER (PARTITION BY aggregation_target
                                                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS `$session_id_1`,
                                                                                                       last_value(`$window_id_1`) OVER (PARTITION BY aggregation_target
                                                                                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS `$window_id_1`
                    FROM
                      (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                              e.`$group_0` AS aggregation_target,
                              e.uuid AS uuid,
                              if(equals(e.event, 'user signed up'), 1, 0) AS step_0,
                              if(ifNull(equals(step_0, 1), 0), timestamp, NULL) AS latest_0,
                              if(ifNull(equals(step_0, 1), 0), uuid, NULL) AS uuid_0,
                              if(ifNull(equals(step_0, 1), 0), e.`$session_id`, NULL) AS `$session_id_0`,
                              if(ifNull(equals(step_0, 1), 0), e.`$window_id`, NULL) AS `$window_id_0`,
                              if(equals(e.event, 'paid'), 1, 0) AS step_1,
                              if(ifNull(equals(step_1, 1), 0), timestamp, NULL) AS latest_1,
                              if(ifNull(equals(step_1, 1), 0), uuid, NULL) AS uuid_1,
                              if(ifNull(equals(step_1, 1), 0), e.`$session_id`, NULL) AS `$session_id_1`,
                              if(ifNull(equals(step_1, 1), 0), e.`$window_id`, NULL) AS `$window_id_1`
                       FROM events AS e
                       LEFT JOIN
                         (SELECT argMax(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(groups.group_properties, 'industry'), ''), 'null'), '^"|"$', ''), groups._timestamp) AS properties___industry,
                                 groups.group_type_index AS index,
                                 groups.group_key AS key
                          FROM groups
                          WHERE and(equals(groups.team_id, 2), ifNull(equals(index, 0), 0))
                          GROUP BY groups.group_type_index,
                                   groups.group_key) AS e__group_0 ON equals(e.`$group_0`, e__group_0.key)
                       WHERE and(equals(e.team_id, 2), and(and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-14 23:59:59.999999', 6, 'UTC'))), in(e.event, tuple('paid', 'user signed up')), ifNull(equals(e__group_0.properties___industry, 'negative'), 0)), or(ifNull(equals(step_0, 1), 0), ifNull(equals(step_1, 1), 0)))))
                 WHERE ifNull(equals(step_0, 1), 0)))
           GROUP BY aggregation_target,
                    steps
           HAVING ifNull(equals(steps, max_steps), isNull(steps)
                         and isNull(max_steps)))
        WHERE ifNull(in(steps, [1, 2]), 0)
        ORDER BY aggregation_target ASC) AS funnel_actors
     WHERE ifNull(notEquals(funnel_actors.steps, 2), 1)
     GROUP BY funnel_actors.actor_id
     ORDER BY funnel_actors.actor_id ASC) AS source ON equals(groups.key, source.actor_id)
  ORDER BY source.actor_id ASC
  LIMIT 101
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1
  '''
# ---
# name: TestClickhouseFunnelCorrelation.test_funnel_correlation_with_properties_and_groups_materialized.5
  '''
  SELECT concat(ifNull(toString((aggregation_target_with_props.prop).1), ''), '::', ifNull(toString((aggregation_target_with_props.prop).2), '')) AS name,
         countIf(aggregation_target_with_props.actor_id, ifNull(equals(aggregation_target_with_props.steps, 2), 0)) AS success_count,
         countIf(aggregation_target_with_props.actor_id, ifNull(notEquals(aggregation_target_with_props.steps, 2), 1)) AS failure_count
  FROM
    (SELECT funnel_actors.actor_id AS actor_id,
            funnel_actors.steps AS steps,
            arrayJoin(JSONExtractKeysAndValues(groups_0.properties, 'String')) AS prop
     FROM
       (SELECT aggregation_target AS actor_id,
               timestamp AS timestamp,
               steps AS steps,
               final_timestamp AS final_timestamp,
               first_timestamp AS first_timestamp
        FROM
          (SELECT aggregation_target AS aggregation_target,
                  steps AS steps,
                  avg(step_1_conversion_time) AS step_1_average_conversion_time_inner,
                  median(step_1_conversion_time) AS step_1_median_conversion_time_inner,
                  argMax(latest_0, steps) AS timestamp,
                  argMax(latest_1, steps) AS final_timestamp,
                  argMax(latest_0, steps) AS first_timestamp
           FROM
             (SELECT aggregation_target AS aggregation_target,
                     steps AS steps,
                     max(steps) OVER (PARTITION BY aggregation_target) AS max_steps,
                                     step_1_conversion_time AS step_1_conversion_time,
                                     latest_0 AS latest_0,
                                     latest_1 AS latest_1,
                                     latest_0 AS latest_0
              FROM
                (SELECT aggregation_target AS aggregation_target,
                        timestamp AS timestamp,
                        step_0 AS step_0,
                        latest_0 AS latest_0,
                        step_1 AS step_1,
                        latest_1 AS latest_1,
                        if(and(ifNull(lessOrEquals(latest_0, latest_1), 0), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), 2, 1) AS steps,
                        if(and(isNotNull(latest_1), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), dateDiff('second', latest_0, latest_1), NULL) AS step_1_conversion_time
                 FROM
                   (SELECT aggregation_target AS aggregation_target,
                           timestamp AS timestamp,
                           step_0 AS step_0,
                           latest_0 AS latest_0,
                           step_1 AS step_1,
                           min(latest_1) OVER (PARTITION BY aggregation_target
                                               ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS latest_1
                    FROM
                      (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                              e.`$group_0` AS aggregation_target,
                              if(equals(e.event, 'user signed up'), 1, 0) AS step_0,
                              if(ifNull(equals(step_0, 1), 0), timestamp, NULL) AS latest_0,
                              if(equals(e.event, 'paid'), 1, 0) AS step_1,
                              if(ifNull(equals(step_1, 1), 0), timestamp, NULL) AS latest_1
                       FROM events AS e
                       WHERE and(equals(e.team_id, 2), and(and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-14 23:59:59.999999', 6, 'UTC'))), in(e.event, tuple('paid', 'user signed up'))), or(ifNull(equals(step_0, 1), 0), ifNull(equals(step_1, 1), 0)))))
                 WHERE ifNull(equals(step_0, 1), 0)))
           GROUP BY aggregation_target,
                    steps
           HAVING ifNull(equals(steps, max_steps), isNull(steps)
                         and isNull(max_steps)))
        WHERE ifNull(in(steps, [1, 2]), 0)
        ORDER BY aggregation_target ASC) AS funnel_actors
     LEFT JOIN
       (SELECT groups.key AS key,
               groups.properties AS properties
        FROM
          (SELECT argMax(groups.group_properties, groups._timestamp) AS properties,
                  groups.group_type_index AS index,
                  groups.group_key AS key
           FROM groups
           WHERE equals(groups.team_id, 2)
           GROUP BY groups.group_type_index,
                    groups.group_key) AS groups
        WHERE ifNull(equals(groups.index, 0), 0)) AS groups_0 ON equals(funnel_actors.actor_id, groups_0.key)) AS aggregation_target_with_props
  GROUP BY (aggregation_target_with_props.prop).1, (aggregation_target_with_props.prop).2
  HAVING ifNull(notIn((aggregation_target_with_props.prop).1, []), 0)
  LIMIT 100
  UNION ALL
  SELECT 'Total_Values_In_Query' AS name,
         countIf(funnel_actors.actor_id, ifNull(equals(funnel_actors.steps, 2), 0)) AS success_count,
         countIf(funnel_actors.actor_id, ifNull(notEquals(funnel_actors.steps, 2), 1)) AS failure_count
  FROM
    (SELECT aggregation_target AS actor_id,
            timestamp AS timestamp,
            steps AS steps,
            final_timestamp AS final_timestamp,
            first_timestamp AS first_timestamp
     FROM
       (SELECT aggregation_target AS aggregation_target,
               steps AS steps,
               avg(step_1_conversion_time) AS step_1_average_conversion_time_inner,
               median(step_1_conversion_time) AS step_1_median_conversion_time_inner,
               argMax(latest_0, steps) AS timestamp,
               argMax(latest_1, steps) AS final_timestamp,
               argMax(latest_0, steps) AS first_timestamp
        FROM
          (SELECT aggregation_target AS aggregation_target,
                  steps AS steps,
                  max(steps) OVER (PARTITION BY aggregation_target) AS max_steps,
                                  step_1_conversion_time AS step_1_conversion_time,
                                  latest_0 AS latest_0,
                                  latest_1 AS latest_1,
                                  latest_0 AS latest_0
           FROM
             (SELECT aggregation_target AS aggregation_target,
                     timestamp AS timestamp,
                     step_0 AS step_0,
                     latest_0 AS latest_0,
                     step_1 AS step_1,
                     latest_1 AS latest_1,
                     if(and(ifNull(lessOrEquals(latest_0, latest_1), 0), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), 2, 1) AS steps,
                     if(and(isNotNull(latest_1), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), dateDiff('second', latest_0, latest_1), NULL) AS step_1_conversion_time
              FROM
                (SELECT aggregation_target AS aggregation_target,
                        timestamp AS timestamp,
                        step_0 AS step_0,
                        latest_0 AS latest_0,
                        step_1 AS step_1,
                        min(latest_1) OVER (PARTITION BY aggregation_target
                                            ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS latest_1
                 FROM
                   (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                           e.`$group_0` AS aggregation_target,
                           if(equals(e.event, 'user signed up'), 1, 0) AS step_0,
                           if(ifNull(equals(step_0, 1), 0), timestamp, NULL) AS latest_0,
                           if(equals(e.event, 'paid'), 1, 0) AS step_1,
                           if(ifNull(equals(step_1, 1), 0), timestamp, NULL) AS latest_1
                    FROM events AS e
                    WHERE and(equals(e.team_id, 2), and(and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-14 23:59:59.999999', 6, 'UTC'))), in(e.event, tuple('paid', 'user signed up'))), or(ifNull(equals(step_0, 1), 0), ifNull(equals(step_1, 1), 0)))))
              WHERE ifNull(equals(step_0, 1), 0)))
        GROUP BY aggregation_target,
                 steps
        HAVING ifNull(equals(steps, max_steps), isNull(steps)
                      and isNull(max_steps)))
     WHERE ifNull(in(steps, [1, 2]), 0)
     ORDER BY aggregation_target ASC) AS funnel_actors
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '''
# ---
# name: TestClickhouseFunnelCorrelation.test_funnel_correlation_with_properties_and_groups_person_on_events
  '''
  SELECT concat(ifNull(toString((aggregation_target_with_props.prop).1), ''), '::', ifNull(toString((aggregation_target_with_props.prop).2), '')) AS name,
         countIf(aggregation_target_with_props.actor_id, ifNull(equals(aggregation_target_with_props.steps, 2), 0)) AS success_count,
         countIf(aggregation_target_with_props.actor_id, ifNull(notEquals(aggregation_target_with_props.steps, 2), 1)) AS failure_count
  FROM
    (SELECT funnel_actors.actor_id AS actor_id,
            funnel_actors.steps AS steps,
            arrayJoin(arrayZip(['industry'], [JSONExtractString(groups_0.properties, 'industry')])) AS prop
     FROM
       (SELECT aggregation_target AS actor_id,
               timestamp AS timestamp,
               steps AS steps,
               final_timestamp AS final_timestamp,
               first_timestamp AS first_timestamp
        FROM
          (SELECT aggregation_target AS aggregation_target,
                  steps AS steps,
                  avg(step_1_conversion_time) AS step_1_average_conversion_time_inner,
                  median(step_1_conversion_time) AS step_1_median_conversion_time_inner,
                  argMax(latest_0, steps) AS timestamp,
                  argMax(latest_1, steps) AS final_timestamp,
                  argMax(latest_0, steps) AS first_timestamp
           FROM
             (SELECT aggregation_target AS aggregation_target,
                     steps AS steps,
                     max(steps) OVER (PARTITION BY aggregation_target) AS max_steps,
                                     step_1_conversion_time AS step_1_conversion_time,
                                     latest_0 AS latest_0,
                                     latest_1 AS latest_1,
                                     latest_0 AS latest_0
              FROM
                (SELECT aggregation_target AS aggregation_target,
                        timestamp AS timestamp,
                        step_0 AS step_0,
                        latest_0 AS latest_0,
                        step_1 AS step_1,
                        latest_1 AS latest_1,
                        if(and(ifNull(lessOrEquals(latest_0, latest_1), 0), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), 2, 1) AS steps,
                        if(and(isNotNull(latest_1), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), dateDiff('second', latest_0, latest_1), NULL) AS step_1_conversion_time
                 FROM
                   (SELECT aggregation_target AS aggregation_target,
                           timestamp AS timestamp,
                           step_0 AS step_0,
                           latest_0 AS latest_0,
                           step_1 AS step_1,
                           min(latest_1) OVER (PARTITION BY aggregation_target
                                               ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS latest_1
                    FROM
                      (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                              e.`$group_0` AS aggregation_target,
                              if(equals(e.event, 'user signed up'), 1, 0) AS step_0,
                              if(ifNull(equals(step_0, 1), 0), timestamp, NULL) AS latest_0,
                              if(equals(e.event, 'paid'), 1, 0) AS step_1,
                              if(ifNull(equals(step_1, 1), 0), timestamp, NULL) AS latest_1
                       FROM events AS e
                       WHERE and(equals(e.team_id, 2), and(and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-14 23:59:59.999999', 6, 'UTC'))), in(e.event, tuple('paid', 'user signed up'))), or(ifNull(equals(step_0, 1), 0), ifNull(equals(step_1, 1), 0)))))
                 WHERE ifNull(equals(step_0, 1), 0)))
           GROUP BY aggregation_target,
                    steps
           HAVING ifNull(equals(steps, max_steps), isNull(steps)
                         and isNull(max_steps)))
        WHERE ifNull(in(steps, [1, 2]), 0)
        ORDER BY aggregation_target ASC) AS funnel_actors
     LEFT JOIN
       (SELECT groups.key AS key,
               groups.properties AS properties
        FROM
          (SELECT argMax(groups.group_properties, groups._timestamp) AS properties,
                  groups.group_type_index AS index,
                  groups.group_key AS key
           FROM groups
           WHERE equals(groups.team_id, 2)
           GROUP BY groups.group_type_index,
                    groups.group_key) AS groups
        WHERE ifNull(equals(groups.index, 0), 0)) AS groups_0 ON equals(funnel_actors.actor_id, groups_0.key)) AS aggregation_target_with_props
  GROUP BY (aggregation_target_with_props.prop).1, (aggregation_target_with_props.prop).2
  HAVING ifNull(notIn((aggregation_target_with_props.prop).1, []), 0)
  LIMIT 100
  UNION ALL
  SELECT 'Total_Values_In_Query' AS name,
         countIf(funnel_actors.actor_id, ifNull(equals(funnel_actors.steps, 2), 0)) AS success_count,
         countIf(funnel_actors.actor_id, ifNull(notEquals(funnel_actors.steps, 2), 1)) AS failure_count
  FROM
    (SELECT aggregation_target AS actor_id,
            timestamp AS timestamp,
            steps AS steps,
            final_timestamp AS final_timestamp,
            first_timestamp AS first_timestamp
     FROM
       (SELECT aggregation_target AS aggregation_target,
               steps AS steps,
               avg(step_1_conversion_time) AS step_1_average_conversion_time_inner,
               median(step_1_conversion_time) AS step_1_median_conversion_time_inner,
               argMax(latest_0, steps) AS timestamp,
               argMax(latest_1, steps) AS final_timestamp,
               argMax(latest_0, steps) AS first_timestamp
        FROM
          (SELECT aggregation_target AS aggregation_target,
                  steps AS steps,
                  max(steps) OVER (PARTITION BY aggregation_target) AS max_steps,
                                  step_1_conversion_time AS step_1_conversion_time,
                                  latest_0 AS latest_0,
                                  latest_1 AS latest_1,
                                  latest_0 AS latest_0
           FROM
             (SELECT aggregation_target AS aggregation_target,
                     timestamp AS timestamp,
                     step_0 AS step_0,
                     latest_0 AS latest_0,
                     step_1 AS step_1,
                     latest_1 AS latest_1,
                     if(and(ifNull(lessOrEquals(latest_0, latest_1), 0), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), 2, 1) AS steps,
                     if(and(isNotNull(latest_1), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), dateDiff('second', latest_0, latest_1), NULL) AS step_1_conversion_time
              FROM
                (SELECT aggregation_target AS aggregation_target,
                        timestamp AS timestamp,
                        step_0 AS step_0,
                        latest_0 AS latest_0,
                        step_1 AS step_1,
                        min(latest_1) OVER (PARTITION BY aggregation_target
                                            ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS latest_1
                 FROM
                   (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                           e.`$group_0` AS aggregation_target,
                           if(equals(e.event, 'user signed up'), 1, 0) AS step_0,
                           if(ifNull(equals(step_0, 1), 0), timestamp, NULL) AS latest_0,
                           if(equals(e.event, 'paid'), 1, 0) AS step_1,
                           if(ifNull(equals(step_1, 1), 0), timestamp, NULL) AS latest_1
                    FROM events AS e
                    WHERE and(equals(e.team_id, 2), and(and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-14 23:59:59.999999', 6, 'UTC'))), in(e.event, tuple('paid', 'user signed up'))), or(ifNull(equals(step_0, 1), 0), ifNull(equals(step_1, 1), 0)))))
              WHERE ifNull(equals(step_0, 1), 0)))
        GROUP BY aggregation_target,
                 steps
        HAVING ifNull(equals(steps, max_steps), isNull(steps)
                      and isNull(max_steps)))
     WHERE ifNull(in(steps, [1, 2]), 0)
     ORDER BY aggregation_target ASC) AS funnel_actors
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '''
# ---
# name: TestClickhouseFunnelCorrelation.test_funnel_correlation_with_properties_and_groups_person_on_events.1
  '''
  SELECT source.actor_id AS actor_id
  FROM
    (SELECT groups.group_type_index AS index,
            groups.group_key AS key
     FROM groups
     WHERE equals(groups.team_id, 2)
     GROUP BY groups.group_type_index,
              groups.group_key) AS groups
  INNER JOIN
    (SELECT funnel_actors.actor_id AS actor_id,
            any(funnel_actors.matching_events) AS matching_events
     FROM
       (SELECT aggregation_target AS actor_id,
               final_matching_events AS matching_events,
               timestamp AS timestamp,
               steps AS steps,
               final_timestamp AS final_timestamp,
               first_timestamp AS first_timestamp
        FROM
          (SELECT aggregation_target AS aggregation_target,
                  steps AS steps,
                  avg(step_1_conversion_time) AS step_1_average_conversion_time_inner,
                  median(step_1_conversion_time) AS step_1_median_conversion_time_inner,
                  groupArray(10)(step_0_matching_event) AS step_0_matching_events,
                  groupArray(10)(step_1_matching_event) AS step_1_matching_events,
                  groupArray(10)(final_matching_event) AS final_matching_events,
                  argMax(latest_0, steps) AS timestamp,
                  argMax(latest_1, steps) AS final_timestamp,
                  argMax(latest_0, steps) AS first_timestamp
           FROM
             (SELECT aggregation_target AS aggregation_target,
                     steps AS steps,
                     max(steps) OVER (PARTITION BY aggregation_target) AS max_steps,
                                     step_1_conversion_time AS step_1_conversion_time,
                                     tuple(latest_0, uuid_0, `$session_id_0`, `$window_id_0`) AS step_0_matching_event,
                                     tuple(latest_1, uuid_1, `$session_id_1`, `$window_id_1`) AS step_1_matching_event,
                                     if(isNull(latest_0), tuple(NULL, NULL, NULL, NULL), if(isNull(latest_1), step_0_matching_event, step_1_matching_event)) AS final_matching_event,
                                     latest_0 AS latest_0,
                                     latest_1 AS latest_1,
                                     latest_0 AS latest_0
              FROM
                (SELECT aggregation_target AS aggregation_target,
                        timestamp AS timestamp,
                        step_0 AS step_0,
                        latest_0 AS latest_0,
                        uuid_0 AS uuid_0,
                        `$session_id_0` AS `$session_id_0`,
                        `$window_id_0` AS `$window_id_0`,
                        step_1 AS step_1,
                        latest_1 AS latest_1,
                        uuid_1 AS uuid_1,
                        `$session_id_1` AS `$session_id_1`,
                        `$window_id_1` AS `$window_id_1`,
                        if(and(ifNull(lessOrEquals(latest_0, latest_1), 0), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), 2, 1) AS steps,
                        if(and(isNotNull(latest_1), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), dateDiff('second', latest_0, latest_1), NULL) AS step_1_conversion_time,
                        tuple(latest_0, uuid_0, `$session_id_0`, `$window_id_0`) AS step_0_matching_event,
                        tuple(latest_1, uuid_1, `$session_id_1`, `$window_id_1`) AS step_1_matching_event,
                        if(isNull(latest_0), tuple(NULL, NULL, NULL, NULL), if(isNull(latest_1), step_0_matching_event, step_1_matching_event)) AS final_matching_event
                 FROM
                   (SELECT aggregation_target AS aggregation_target,
                           timestamp AS timestamp,
                           step_0 AS step_0,
                           latest_0 AS latest_0,
                           uuid_0 AS uuid_0,
                           `$session_id_0` AS `$session_id_0`,
                           `$window_id_0` AS `$window_id_0`,
                           step_1 AS step_1,
                           min(latest_1) OVER (PARTITION BY aggregation_target
                                               ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS latest_1,
                                              last_value(uuid_1) OVER (PARTITION BY aggregation_target
                                                                       ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS uuid_1,
                                                                      last_value(`$session_id_1`) OVER (PARTITION BY aggregation_target
                                                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS `$session_id_1`,
                                                                                                       last_value(`$window_id_1`) OVER (PARTITION BY aggregation_target
                                                                                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS `$window_id_1`
                    FROM
                      (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                              e.`$group_0` AS aggregation_target,
                              e.uuid AS uuid,
                              if(equals(e.event, 'user signed up'), 1, 0) AS step_0,
                              if(ifNull(equals(step_0, 1), 0), timestamp, NULL) AS latest_0,
                              if(ifNull(equals(step_0, 1), 0), uuid, NULL) AS uuid_0,
                              if(ifNull(equals(step_0, 1), 0), e.`$session_id`, NULL) AS `$session_id_0`,
                              if(ifNull(equals(step_0, 1), 0), e.`$window_id`, NULL) AS `$window_id_0`,
                              if(equals(e.event, 'paid'), 1, 0) AS step_1,
                              if(ifNull(equals(step_1, 1), 0), timestamp, NULL) AS latest_1,
                              if(ifNull(equals(step_1, 1), 0), uuid, NULL) AS uuid_1,
                              if(ifNull(equals(step_1, 1), 0), e.`$session_id`, NULL) AS `$session_id_1`,
                              if(ifNull(equals(step_1, 1), 0), e.`$window_id`, NULL) AS `$window_id_1`
                       FROM events AS e
                       LEFT JOIN
                         (SELECT argMax(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(groups.group_properties, 'industry'), ''), 'null'), '^"|"$', ''), groups._timestamp) AS properties___industry,
                                 groups.group_type_index AS index,
                                 groups.group_key AS key
                          FROM groups
                          WHERE and(equals(groups.team_id, 2), ifNull(equals(index, 0), 0))
                          GROUP BY groups.group_type_index,
                                   groups.group_key) AS e__group_0 ON equals(e.`$group_0`, e__group_0.key)
                       WHERE and(equals(e.team_id, 2), and(and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-14 23:59:59.999999', 6, 'UTC'))), in(e.event, tuple('paid', 'user signed up')), ifNull(equals(e__group_0.properties___industry, 'positive'), 0)), or(ifNull(equals(step_0, 1), 0), ifNull(equals(step_1, 1), 0)))))
                 WHERE ifNull(equals(step_0, 1), 0)))
           GROUP BY aggregation_target,
                    steps
           HAVING ifNull(equals(steps, max_steps), isNull(steps)
                         and isNull(max_steps)))
        WHERE ifNull(in(steps, [1, 2]), 0)
        ORDER BY aggregation_target ASC) AS funnel_actors
     WHERE ifNull(equals(funnel_actors.steps, 2), 0)
     GROUP BY funnel_actors.actor_id
     ORDER BY funnel_actors.actor_id ASC) AS source ON equals(groups.key, source.actor_id)
  ORDER BY source.actor_id ASC
  LIMIT 101
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1
  '''
# ---
# name: TestClickhouseFunnelCorrelation.test_funnel_correlation_with_properties_and_groups_person_on_events.2
  '''
  SELECT source.actor_id AS actor_id
  FROM
    (SELECT groups.group_type_index AS index,
            groups.group_key AS key
     FROM groups
     WHERE equals(groups.team_id, 2)
     GROUP BY groups.group_type_index,
              groups.group_key) AS groups
  INNER JOIN
    (SELECT funnel_actors.actor_id AS actor_id,
            any(funnel_actors.matching_events) AS matching_events
     FROM
       (SELECT aggregation_target AS actor_id,
               final_matching_events AS matching_events,
               timestamp AS timestamp,
               steps AS steps,
               final_timestamp AS final_timestamp,
               first_timestamp AS first_timestamp
        FROM
          (SELECT aggregation_target AS aggregation_target,
                  steps AS steps,
                  avg(step_1_conversion_time) AS step_1_average_conversion_time_inner,
                  median(step_1_conversion_time) AS step_1_median_conversion_time_inner,
                  groupArray(10)(step_0_matching_event) AS step_0_matching_events,
                  groupArray(10)(step_1_matching_event) AS step_1_matching_events,
                  groupArray(10)(final_matching_event) AS final_matching_events,
                  argMax(latest_0, steps) AS timestamp,
                  argMax(latest_1, steps) AS final_timestamp,
                  argMax(latest_0, steps) AS first_timestamp
           FROM
             (SELECT aggregation_target AS aggregation_target,
                     steps AS steps,
                     max(steps) OVER (PARTITION BY aggregation_target) AS max_steps,
                                     step_1_conversion_time AS step_1_conversion_time,
                                     tuple(latest_0, uuid_0, `$session_id_0`, `$window_id_0`) AS step_0_matching_event,
                                     tuple(latest_1, uuid_1, `$session_id_1`, `$window_id_1`) AS step_1_matching_event,
                                     if(isNull(latest_0), tuple(NULL, NULL, NULL, NULL), if(isNull(latest_1), step_0_matching_event, step_1_matching_event)) AS final_matching_event,
                                     latest_0 AS latest_0,
                                     latest_1 AS latest_1,
                                     latest_0 AS latest_0
              FROM
                (SELECT aggregation_target AS aggregation_target,
                        timestamp AS timestamp,
                        step_0 AS step_0,
                        latest_0 AS latest_0,
                        uuid_0 AS uuid_0,
                        `$session_id_0` AS `$session_id_0`,
                        `$window_id_0` AS `$window_id_0`,
                        step_1 AS step_1,
                        latest_1 AS latest_1,
                        uuid_1 AS uuid_1,
                        `$session_id_1` AS `$session_id_1`,
                        `$window_id_1` AS `$window_id_1`,
                        if(and(ifNull(lessOrEquals(latest_0, latest_1), 0), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), 2, 1) AS steps,
                        if(and(isNotNull(latest_1), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), dateDiff('second', latest_0, latest_1), NULL) AS step_1_conversion_time,
                        tuple(latest_0, uuid_0, `$session_id_0`, `$window_id_0`) AS step_0_matching_event,
                        tuple(latest_1, uuid_1, `$session_id_1`, `$window_id_1`) AS step_1_matching_event,
                        if(isNull(latest_0), tuple(NULL, NULL, NULL, NULL), if(isNull(latest_1), step_0_matching_event, step_1_matching_event)) AS final_matching_event
                 FROM
                   (SELECT aggregation_target AS aggregation_target,
                           timestamp AS timestamp,
                           step_0 AS step_0,
                           latest_0 AS latest_0,
                           uuid_0 AS uuid_0,
                           `$session_id_0` AS `$session_id_0`,
                           `$window_id_0` AS `$window_id_0`,
                           step_1 AS step_1,
                           min(latest_1) OVER (PARTITION BY aggregation_target
                                               ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS latest_1,
                                              last_value(uuid_1) OVER (PARTITION BY aggregation_target
                                                                       ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS uuid_1,
                                                                      last_value(`$session_id_1`) OVER (PARTITION BY aggregation_target
                                                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS `$session_id_1`,
                                                                                                       last_value(`$window_id_1`) OVER (PARTITION BY aggregation_target
                                                                                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS `$window_id_1`
                    FROM
                      (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                              e.`$group_0` AS aggregation_target,
                              e.uuid AS uuid,
                              if(equals(e.event, 'user signed up'), 1, 0) AS step_0,
                              if(ifNull(equals(step_0, 1), 0), timestamp, NULL) AS latest_0,
                              if(ifNull(equals(step_0, 1), 0), uuid, NULL) AS uuid_0,
                              if(ifNull(equals(step_0, 1), 0), e.`$session_id`, NULL) AS `$session_id_0`,
                              if(ifNull(equals(step_0, 1), 0), e.`$window_id`, NULL) AS `$window_id_0`,
                              if(equals(e.event, 'paid'), 1, 0) AS step_1,
                              if(ifNull(equals(step_1, 1), 0), timestamp, NULL) AS latest_1,
                              if(ifNull(equals(step_1, 1), 0), uuid, NULL) AS uuid_1,
                              if(ifNull(equals(step_1, 1), 0), e.`$session_id`, NULL) AS `$session_id_1`,
                              if(ifNull(equals(step_1, 1), 0), e.`$window_id`, NULL) AS `$window_id_1`
                       FROM events AS e
                       LEFT JOIN
                         (SELECT argMax(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(groups.group_properties, 'industry'), ''), 'null'), '^"|"$', ''), groups._timestamp) AS properties___industry,
                                 groups.group_type_index AS index,
                                 groups.group_key AS key
                          FROM groups
                          WHERE and(equals(groups.team_id, 2), ifNull(equals(index, 0), 0))
                          GROUP BY groups.group_type_index,
                                   groups.group_key) AS e__group_0 ON equals(e.`$group_0`, e__group_0.key)
                       WHERE and(equals(e.team_id, 2), and(and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-14 23:59:59.999999', 6, 'UTC'))), in(e.event, tuple('paid', 'user signed up')), ifNull(equals(e__group_0.properties___industry, 'positive'), 0)), or(ifNull(equals(step_0, 1), 0), ifNull(equals(step_1, 1), 0)))))
                 WHERE ifNull(equals(step_0, 1), 0)))
           GROUP BY aggregation_target,
                    steps
           HAVING ifNull(equals(steps, max_steps), isNull(steps)
                         and isNull(max_steps)))
        WHERE ifNull(in(steps, [1, 2]), 0)
        ORDER BY aggregation_target ASC) AS funnel_actors
     WHERE ifNull(notEquals(funnel_actors.steps, 2), 1)
     GROUP BY funnel_actors.actor_id
     ORDER BY funnel_actors.actor_id ASC) AS source ON equals(groups.key, source.actor_id)
  ORDER BY source.actor_id ASC
  LIMIT 101
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1
  '''
# ---
# name: TestClickhouseFunnelCorrelation.test_funnel_correlation_with_properties_and_groups_person_on_events.3
  '''
  SELECT source.actor_id AS actor_id
  FROM
    (SELECT groups.group_type_index AS index,
            groups.group_key AS key
     FROM groups
     WHERE equals(groups.team_id, 2)
     GROUP BY groups.group_type_index,
              groups.group_key) AS groups
  INNER JOIN
    (SELECT funnel_actors.actor_id AS actor_id,
            any(funnel_actors.matching_events) AS matching_events
     FROM
       (SELECT aggregation_target AS actor_id,
               final_matching_events AS matching_events,
               timestamp AS timestamp,
               steps AS steps,
               final_timestamp AS final_timestamp,
               first_timestamp AS first_timestamp
        FROM
          (SELECT aggregation_target AS aggregation_target,
                  steps AS steps,
                  avg(step_1_conversion_time) AS step_1_average_conversion_time_inner,
                  median(step_1_conversion_time) AS step_1_median_conversion_time_inner,
                  groupArray(10)(step_0_matching_event) AS step_0_matching_events,
                  groupArray(10)(step_1_matching_event) AS step_1_matching_events,
                  groupArray(10)(final_matching_event) AS final_matching_events,
                  argMax(latest_0, steps) AS timestamp,
                  argMax(latest_1, steps) AS final_timestamp,
                  argMax(latest_0, steps) AS first_timestamp
           FROM
             (SELECT aggregation_target AS aggregation_target,
                     steps AS steps,
                     max(steps) OVER (PARTITION BY aggregation_target) AS max_steps,
                                     step_1_conversion_time AS step_1_conversion_time,
                                     tuple(latest_0, uuid_0, `$session_id_0`, `$window_id_0`) AS step_0_matching_event,
                                     tuple(latest_1, uuid_1, `$session_id_1`, `$window_id_1`) AS step_1_matching_event,
                                     if(isNull(latest_0), tuple(NULL, NULL, NULL, NULL), if(isNull(latest_1), step_0_matching_event, step_1_matching_event)) AS final_matching_event,
                                     latest_0 AS latest_0,
                                     latest_1 AS latest_1,
                                     latest_0 AS latest_0
              FROM
                (SELECT aggregation_target AS aggregation_target,
                        timestamp AS timestamp,
                        step_0 AS step_0,
                        latest_0 AS latest_0,
                        uuid_0 AS uuid_0,
                        `$session_id_0` AS `$session_id_0`,
                        `$window_id_0` AS `$window_id_0`,
                        step_1 AS step_1,
                        latest_1 AS latest_1,
                        uuid_1 AS uuid_1,
                        `$session_id_1` AS `$session_id_1`,
                        `$window_id_1` AS `$window_id_1`,
                        if(and(ifNull(lessOrEquals(latest_0, latest_1), 0), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), 2, 1) AS steps,
                        if(and(isNotNull(latest_1), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), dateDiff('second', latest_0, latest_1), NULL) AS step_1_conversion_time,
                        tuple(latest_0, uuid_0, `$session_id_0`, `$window_id_0`) AS step_0_matching_event,
                        tuple(latest_1, uuid_1, `$session_id_1`, `$window_id_1`) AS step_1_matching_event,
                        if(isNull(latest_0), tuple(NULL, NULL, NULL, NULL), if(isNull(latest_1), step_0_matching_event, step_1_matching_event)) AS final_matching_event
                 FROM
                   (SELECT aggregation_target AS aggregation_target,
                           timestamp AS timestamp,
                           step_0 AS step_0,
                           latest_0 AS latest_0,
                           uuid_0 AS uuid_0,
                           `$session_id_0` AS `$session_id_0`,
                           `$window_id_0` AS `$window_id_0`,
                           step_1 AS step_1,
                           min(latest_1) OVER (PARTITION BY aggregation_target
                                               ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS latest_1,
                                              last_value(uuid_1) OVER (PARTITION BY aggregation_target
                                                                       ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS uuid_1,
                                                                      last_value(`$session_id_1`) OVER (PARTITION BY aggregation_target
                                                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS `$session_id_1`,
                                                                                                       last_value(`$window_id_1`) OVER (PARTITION BY aggregation_target
                                                                                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS `$window_id_1`
                    FROM
                      (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                              e.`$group_0` AS aggregation_target,
                              e.uuid AS uuid,
                              if(equals(e.event, 'user signed up'), 1, 0) AS step_0,
                              if(ifNull(equals(step_0, 1), 0), timestamp, NULL) AS latest_0,
                              if(ifNull(equals(step_0, 1), 0), uuid, NULL) AS uuid_0,
                              if(ifNull(equals(step_0, 1), 0), e.`$session_id`, NULL) AS `$session_id_0`,
                              if(ifNull(equals(step_0, 1), 0), e.`$window_id`, NULL) AS `$window_id_0`,
                              if(equals(e.event, 'paid'), 1, 0) AS step_1,
                              if(ifNull(equals(step_1, 1), 0), timestamp, NULL) AS latest_1,
                              if(ifNull(equals(step_1, 1), 0), uuid, NULL) AS uuid_1,
                              if(ifNull(equals(step_1, 1), 0), e.`$session_id`, NULL) AS `$session_id_1`,
                              if(ifNull(equals(step_1, 1), 0), e.`$window_id`, NULL) AS `$window_id_1`
                       FROM events AS e
                       LEFT JOIN
                         (SELECT argMax(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(groups.group_properties, 'industry'), ''), 'null'), '^"|"$', ''), groups._timestamp) AS properties___industry,
                                 groups.group_type_index AS index,
                                 groups.group_key AS key
                          FROM groups
                          WHERE and(equals(groups.team_id, 2), ifNull(equals(index, 0), 0))
                          GROUP BY groups.group_type_index,
                                   groups.group_key) AS e__group_0 ON equals(e.`$group_0`, e__group_0.key)
                       WHERE and(equals(e.team_id, 2), and(and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-14 23:59:59.999999', 6, 'UTC'))), in(e.event, tuple('paid', 'user signed up')), ifNull(equals(e__group_0.properties___industry, 'negative'), 0)), or(ifNull(equals(step_0, 1), 0), ifNull(equals(step_1, 1), 0)))))
                 WHERE ifNull(equals(step_0, 1), 0)))
           GROUP BY aggregation_target,
                    steps
           HAVING ifNull(equals(steps, max_steps), isNull(steps)
                         and isNull(max_steps)))
        WHERE ifNull(in(steps, [1, 2]), 0)
        ORDER BY aggregation_target ASC) AS funnel_actors
     WHERE ifNull(equals(funnel_actors.steps, 2), 0)
     GROUP BY funnel_actors.actor_id
     ORDER BY funnel_actors.actor_id ASC) AS source ON equals(groups.key, source.actor_id)
  ORDER BY source.actor_id ASC
  LIMIT 101
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1
  '''
# ---
# name: TestClickhouseFunnelCorrelation.test_funnel_correlation_with_properties_and_groups_person_on_events.4
  '''
  SELECT source.actor_id AS actor_id
  FROM
    (SELECT groups.group_type_index AS index,
            groups.group_key AS key
     FROM groups
     WHERE equals(groups.team_id, 2)
     GROUP BY groups.group_type_index,
              groups.group_key) AS groups
  INNER JOIN
    (SELECT funnel_actors.actor_id AS actor_id,
            any(funnel_actors.matching_events) AS matching_events
     FROM
       (SELECT aggregation_target AS actor_id,
               final_matching_events AS matching_events,
               timestamp AS timestamp,
               steps AS steps,
               final_timestamp AS final_timestamp,
               first_timestamp AS first_timestamp
        FROM
          (SELECT aggregation_target AS aggregation_target,
                  steps AS steps,
                  avg(step_1_conversion_time) AS step_1_average_conversion_time_inner,
                  median(step_1_conversion_time) AS step_1_median_conversion_time_inner,
                  groupArray(10)(step_0_matching_event) AS step_0_matching_events,
                  groupArray(10)(step_1_matching_event) AS step_1_matching_events,
                  groupArray(10)(final_matching_event) AS final_matching_events,
                  argMax(latest_0, steps) AS timestamp,
                  argMax(latest_1, steps) AS final_timestamp,
                  argMax(latest_0, steps) AS first_timestamp
           FROM
             (SELECT aggregation_target AS aggregation_target,
                     steps AS steps,
                     max(steps) OVER (PARTITION BY aggregation_target) AS max_steps,
                                     step_1_conversion_time AS step_1_conversion_time,
                                     tuple(latest_0, uuid_0, `$session_id_0`, `$window_id_0`) AS step_0_matching_event,
                                     tuple(latest_1, uuid_1, `$session_id_1`, `$window_id_1`) AS step_1_matching_event,
                                     if(isNull(latest_0), tuple(NULL, NULL, NULL, NULL), if(isNull(latest_1), step_0_matching_event, step_1_matching_event)) AS final_matching_event,
                                     latest_0 AS latest_0,
                                     latest_1 AS latest_1,
                                     latest_0 AS latest_0
              FROM
                (SELECT aggregation_target AS aggregation_target,
                        timestamp AS timestamp,
                        step_0 AS step_0,
                        latest_0 AS latest_0,
                        uuid_0 AS uuid_0,
                        `$session_id_0` AS `$session_id_0`,
                        `$window_id_0` AS `$window_id_0`,
                        step_1 AS step_1,
                        latest_1 AS latest_1,
                        uuid_1 AS uuid_1,
                        `$session_id_1` AS `$session_id_1`,
                        `$window_id_1` AS `$window_id_1`,
                        if(and(ifNull(lessOrEquals(latest_0, latest_1), 0), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), 2, 1) AS steps,
                        if(and(isNotNull(latest_1), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), dateDiff('second', latest_0, latest_1), NULL) AS step_1_conversion_time,
                        tuple(latest_0, uuid_0, `$session_id_0`, `$window_id_0`) AS step_0_matching_event,
                        tuple(latest_1, uuid_1, `$session_id_1`, `$window_id_1`) AS step_1_matching_event,
                        if(isNull(latest_0), tuple(NULL, NULL, NULL, NULL), if(isNull(latest_1), step_0_matching_event, step_1_matching_event)) AS final_matching_event
                 FROM
                   (SELECT aggregation_target AS aggregation_target,
                           timestamp AS timestamp,
                           step_0 AS step_0,
                           latest_0 AS latest_0,
                           uuid_0 AS uuid_0,
                           `$session_id_0` AS `$session_id_0`,
                           `$window_id_0` AS `$window_id_0`,
                           step_1 AS step_1,
                           min(latest_1) OVER (PARTITION BY aggregation_target
                                               ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS latest_1,
                                              last_value(uuid_1) OVER (PARTITION BY aggregation_target
                                                                       ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS uuid_1,
                                                                      last_value(`$session_id_1`) OVER (PARTITION BY aggregation_target
                                                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS `$session_id_1`,
                                                                                                       last_value(`$window_id_1`) OVER (PARTITION BY aggregation_target
                                                                                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS `$window_id_1`
                    FROM
                      (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                              e.`$group_0` AS aggregation_target,
                              e.uuid AS uuid,
                              if(equals(e.event, 'user signed up'), 1, 0) AS step_0,
                              if(ifNull(equals(step_0, 1), 0), timestamp, NULL) AS latest_0,
                              if(ifNull(equals(step_0, 1), 0), uuid, NULL) AS uuid_0,
                              if(ifNull(equals(step_0, 1), 0), e.`$session_id`, NULL) AS `$session_id_0`,
                              if(ifNull(equals(step_0, 1), 0), e.`$window_id`, NULL) AS `$window_id_0`,
                              if(equals(e.event, 'paid'), 1, 0) AS step_1,
                              if(ifNull(equals(step_1, 1), 0), timestamp, NULL) AS latest_1,
                              if(ifNull(equals(step_1, 1), 0), uuid, NULL) AS uuid_1,
                              if(ifNull(equals(step_1, 1), 0), e.`$session_id`, NULL) AS `$session_id_1`,
                              if(ifNull(equals(step_1, 1), 0), e.`$window_id`, NULL) AS `$window_id_1`
                       FROM events AS e
                       LEFT JOIN
                         (SELECT argMax(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(groups.group_properties, 'industry'), ''), 'null'), '^"|"$', ''), groups._timestamp) AS properties___industry,
                                 groups.group_type_index AS index,
                                 groups.group_key AS key
                          FROM groups
                          WHERE and(equals(groups.team_id, 2), ifNull(equals(index, 0), 0))
                          GROUP BY groups.group_type_index,
                                   groups.group_key) AS e__group_0 ON equals(e.`$group_0`, e__group_0.key)
                       WHERE and(equals(e.team_id, 2), and(and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-14 23:59:59.999999', 6, 'UTC'))), in(e.event, tuple('paid', 'user signed up')), ifNull(equals(e__group_0.properties___industry, 'negative'), 0)), or(ifNull(equals(step_0, 1), 0), ifNull(equals(step_1, 1), 0)))))
                 WHERE ifNull(equals(step_0, 1), 0)))
           GROUP BY aggregation_target,
                    steps
           HAVING ifNull(equals(steps, max_steps), isNull(steps)
                         and isNull(max_steps)))
        WHERE ifNull(in(steps, [1, 2]), 0)
        ORDER BY aggregation_target ASC) AS funnel_actors
     WHERE ifNull(notEquals(funnel_actors.steps, 2), 1)
     GROUP BY funnel_actors.actor_id
     ORDER BY funnel_actors.actor_id ASC) AS source ON equals(groups.key, source.actor_id)
  ORDER BY source.actor_id ASC
  LIMIT 101
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1
  '''
# ---
# name: TestClickhouseFunnelCorrelation.test_funnel_correlation_with_properties_and_groups_person_on_events.5
  '''
  SELECT concat(ifNull(toString((aggregation_target_with_props.prop).1), ''), '::', ifNull(toString((aggregation_target_with_props.prop).2), '')) AS name,
         countIf(aggregation_target_with_props.actor_id, ifNull(equals(aggregation_target_with_props.steps, 2), 0)) AS success_count,
         countIf(aggregation_target_with_props.actor_id, ifNull(notEquals(aggregation_target_with_props.steps, 2), 1)) AS failure_count
  FROM
    (SELECT funnel_actors.actor_id AS actor_id,
            funnel_actors.steps AS steps,
            arrayJoin(JSONExtractKeysAndValues(groups_0.properties, 'String')) AS prop
     FROM
       (SELECT aggregation_target AS actor_id,
               timestamp AS timestamp,
               steps AS steps,
               final_timestamp AS final_timestamp,
               first_timestamp AS first_timestamp
        FROM
          (SELECT aggregation_target AS aggregation_target,
                  steps AS steps,
                  avg(step_1_conversion_time) AS step_1_average_conversion_time_inner,
                  median(step_1_conversion_time) AS step_1_median_conversion_time_inner,
                  argMax(latest_0, steps) AS timestamp,
                  argMax(latest_1, steps) AS final_timestamp,
                  argMax(latest_0, steps) AS first_timestamp
           FROM
             (SELECT aggregation_target AS aggregation_target,
                     steps AS steps,
                     max(steps) OVER (PARTITION BY aggregation_target) AS max_steps,
                                     step_1_conversion_time AS step_1_conversion_time,
                                     latest_0 AS latest_0,
                                     latest_1 AS latest_1,
                                     latest_0 AS latest_0
              FROM
                (SELECT aggregation_target AS aggregation_target,
                        timestamp AS timestamp,
                        step_0 AS step_0,
                        latest_0 AS latest_0,
                        step_1 AS step_1,
                        latest_1 AS latest_1,
                        if(and(ifNull(lessOrEquals(latest_0, latest_1), 0), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), 2, 1) AS steps,
                        if(and(isNotNull(latest_1), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), dateDiff('second', latest_0, latest_1), NULL) AS step_1_conversion_time
                 FROM
                   (SELECT aggregation_target AS aggregation_target,
                           timestamp AS timestamp,
                           step_0 AS step_0,
                           latest_0 AS latest_0,
                           step_1 AS step_1,
                           min(latest_1) OVER (PARTITION BY aggregation_target
                                               ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS latest_1
                    FROM
                      (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                              e.`$group_0` AS aggregation_target,
                              if(equals(e.event, 'user signed up'), 1, 0) AS step_0,
                              if(ifNull(equals(step_0, 1), 0), timestamp, NULL) AS latest_0,
                              if(equals(e.event, 'paid'), 1, 0) AS step_1,
                              if(ifNull(equals(step_1, 1), 0), timestamp, NULL) AS latest_1
                       FROM events AS e
                       WHERE and(equals(e.team_id, 2), and(and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-14 23:59:59.999999', 6, 'UTC'))), in(e.event, tuple('paid', 'user signed up'))), or(ifNull(equals(step_0, 1), 0), ifNull(equals(step_1, 1), 0)))))
                 WHERE ifNull(equals(step_0, 1), 0)))
           GROUP BY aggregation_target,
                    steps
           HAVING ifNull(equals(steps, max_steps), isNull(steps)
                         and isNull(max_steps)))
        WHERE ifNull(in(steps, [1, 2]), 0)
        ORDER BY aggregation_target ASC) AS funnel_actors
     LEFT JOIN
       (SELECT groups.key AS key,
               groups.properties AS properties
        FROM
          (SELECT argMax(groups.group_properties, groups._timestamp) AS properties,
                  groups.group_type_index AS index,
                  groups.group_key AS key
           FROM groups
           WHERE equals(groups.team_id, 2)
           GROUP BY groups.group_type_index,
                    groups.group_key) AS groups
        WHERE ifNull(equals(groups.index, 0), 0)) AS groups_0 ON equals(funnel_actors.actor_id, groups_0.key)) AS aggregation_target_with_props
  GROUP BY (aggregation_target_with_props.prop).1, (aggregation_target_with_props.prop).2
  HAVING ifNull(notIn((aggregation_target_with_props.prop).1, []), 0)
  LIMIT 100
  UNION ALL
  SELECT 'Total_Values_In_Query' AS name,
         countIf(funnel_actors.actor_id, ifNull(equals(funnel_actors.steps, 2), 0)) AS success_count,
         countIf(funnel_actors.actor_id, ifNull(notEquals(funnel_actors.steps, 2), 1)) AS failure_count
  FROM
    (SELECT aggregation_target AS actor_id,
            timestamp AS timestamp,
            steps AS steps,
            final_timestamp AS final_timestamp,
            first_timestamp AS first_timestamp
     FROM
       (SELECT aggregation_target AS aggregation_target,
               steps AS steps,
               avg(step_1_conversion_time) AS step_1_average_conversion_time_inner,
               median(step_1_conversion_time) AS step_1_median_conversion_time_inner,
               argMax(latest_0, steps) AS timestamp,
               argMax(latest_1, steps) AS final_timestamp,
               argMax(latest_0, steps) AS first_timestamp
        FROM
          (SELECT aggregation_target AS aggregation_target,
                  steps AS steps,
                  max(steps) OVER (PARTITION BY aggregation_target) AS max_steps,
                                  step_1_conversion_time AS step_1_conversion_time,
                                  latest_0 AS latest_0,
                                  latest_1 AS latest_1,
                                  latest_0 AS latest_0
           FROM
             (SELECT aggregation_target AS aggregation_target,
                     timestamp AS timestamp,
                     step_0 AS step_0,
                     latest_0 AS latest_0,
                     step_1 AS step_1,
                     latest_1 AS latest_1,
                     if(and(ifNull(lessOrEquals(latest_0, latest_1), 0), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), 2, 1) AS steps,
                     if(and(isNotNull(latest_1), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), dateDiff('second', latest_0, latest_1), NULL) AS step_1_conversion_time
              FROM
                (SELECT aggregation_target AS aggregation_target,
                        timestamp AS timestamp,
                        step_0 AS step_0,
                        latest_0 AS latest_0,
                        step_1 AS step_1,
                        min(latest_1) OVER (PARTITION BY aggregation_target
                                            ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS latest_1
                 FROM
                   (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                           e.`$group_0` AS aggregation_target,
                           if(equals(e.event, 'user signed up'), 1, 0) AS step_0,
                           if(ifNull(equals(step_0, 1), 0), timestamp, NULL) AS latest_0,
                           if(equals(e.event, 'paid'), 1, 0) AS step_1,
                           if(ifNull(equals(step_1, 1), 0), timestamp, NULL) AS latest_1
                    FROM events AS e
                    WHERE and(equals(e.team_id, 2), and(and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-14 23:59:59.999999', 6, 'UTC'))), in(e.event, tuple('paid', 'user signed up'))), or(ifNull(equals(step_0, 1), 0), ifNull(equals(step_1, 1), 0)))))
              WHERE ifNull(equals(step_0, 1), 0)))
        GROUP BY aggregation_target,
                 steps
        HAVING ifNull(equals(steps, max_steps), isNull(steps)
                      and isNull(max_steps)))
     WHERE ifNull(in(steps, [1, 2]), 0)
     ORDER BY aggregation_target ASC) AS funnel_actors
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '''
# ---
# name: TestClickhouseFunnelCorrelation.test_funnel_correlation_with_properties_and_groups_person_on_events_materialized
  '''
  SELECT concat(ifNull(toString((aggregation_target_with_props.prop).1), ''), '::', ifNull(toString((aggregation_target_with_props.prop).2), '')) AS name,
         countIf(aggregation_target_with_props.actor_id, ifNull(equals(aggregation_target_with_props.steps, 2), 0)) AS success_count,
         countIf(aggregation_target_with_props.actor_id, ifNull(notEquals(aggregation_target_with_props.steps, 2), 1)) AS failure_count
  FROM
    (SELECT funnel_actors.actor_id AS actor_id,
            funnel_actors.steps AS steps,
            arrayJoin(arrayZip(['industry'], [JSONExtractString(groups_0.properties, 'industry')])) AS prop
     FROM
       (SELECT aggregation_target AS actor_id,
               timestamp AS timestamp,
               steps AS steps,
               final_timestamp AS final_timestamp,
               first_timestamp AS first_timestamp
        FROM
          (SELECT aggregation_target AS aggregation_target,
                  steps AS steps,
                  avg(step_1_conversion_time) AS step_1_average_conversion_time_inner,
                  median(step_1_conversion_time) AS step_1_median_conversion_time_inner,
                  argMax(latest_0, steps) AS timestamp,
                  argMax(latest_1, steps) AS final_timestamp,
                  argMax(latest_0, steps) AS first_timestamp
           FROM
             (SELECT aggregation_target AS aggregation_target,
                     steps AS steps,
                     max(steps) OVER (PARTITION BY aggregation_target) AS max_steps,
                                     step_1_conversion_time AS step_1_conversion_time,
                                     latest_0 AS latest_0,
                                     latest_1 AS latest_1,
                                     latest_0 AS latest_0
              FROM
                (SELECT aggregation_target AS aggregation_target,
                        timestamp AS timestamp,
                        step_0 AS step_0,
                        latest_0 AS latest_0,
                        step_1 AS step_1,
                        latest_1 AS latest_1,
                        if(and(ifNull(lessOrEquals(latest_0, latest_1), 0), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), 2, 1) AS steps,
                        if(and(isNotNull(latest_1), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), dateDiff('second', latest_0, latest_1), NULL) AS step_1_conversion_time
                 FROM
                   (SELECT aggregation_target AS aggregation_target,
                           timestamp AS timestamp,
                           step_0 AS step_0,
                           latest_0 AS latest_0,
                           step_1 AS step_1,
                           min(latest_1) OVER (PARTITION BY aggregation_target
                                               ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS latest_1
                    FROM
                      (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                              e.`$group_0` AS aggregation_target,
                              if(equals(e.event, 'user signed up'), 1, 0) AS step_0,
                              if(ifNull(equals(step_0, 1), 0), timestamp, NULL) AS latest_0,
                              if(equals(e.event, 'paid'), 1, 0) AS step_1,
                              if(ifNull(equals(step_1, 1), 0), timestamp, NULL) AS latest_1
                       FROM events AS e
                       WHERE and(equals(e.team_id, 2), and(and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-14 23:59:59.999999', 6, 'UTC'))), in(e.event, tuple('paid', 'user signed up'))), or(ifNull(equals(step_0, 1), 0), ifNull(equals(step_1, 1), 0)))))
                 WHERE ifNull(equals(step_0, 1), 0)))
           GROUP BY aggregation_target,
                    steps
           HAVING ifNull(equals(steps, max_steps), isNull(steps)
                         and isNull(max_steps)))
        WHERE ifNull(in(steps, [1, 2]), 0)
        ORDER BY aggregation_target ASC) AS funnel_actors
     LEFT JOIN
       (SELECT groups.key AS key,
               groups.properties AS properties
        FROM
          (SELECT argMax(groups.group_properties, groups._timestamp) AS properties,
                  groups.group_type_index AS index,
                  groups.group_key AS key
           FROM groups
           WHERE equals(groups.team_id, 2)
           GROUP BY groups.group_type_index,
                    groups.group_key) AS groups
        WHERE ifNull(equals(groups.index, 0), 0)) AS groups_0 ON equals(funnel_actors.actor_id, groups_0.key)) AS aggregation_target_with_props
  GROUP BY (aggregation_target_with_props.prop).1, (aggregation_target_with_props.prop).2
  HAVING ifNull(notIn((aggregation_target_with_props.prop).1, []), 0)
  LIMIT 100
  UNION ALL
  SELECT 'Total_Values_In_Query' AS name,
         countIf(funnel_actors.actor_id, ifNull(equals(funnel_actors.steps, 2), 0)) AS success_count,
         countIf(funnel_actors.actor_id, ifNull(notEquals(funnel_actors.steps, 2), 1)) AS failure_count
  FROM
    (SELECT aggregation_target AS actor_id,
            timestamp AS timestamp,
            steps AS steps,
            final_timestamp AS final_timestamp,
            first_timestamp AS first_timestamp
     FROM
       (SELECT aggregation_target AS aggregation_target,
               steps AS steps,
               avg(step_1_conversion_time) AS step_1_average_conversion_time_inner,
               median(step_1_conversion_time) AS step_1_median_conversion_time_inner,
               argMax(latest_0, steps) AS timestamp,
               argMax(latest_1, steps) AS final_timestamp,
               argMax(latest_0, steps) AS first_timestamp
        FROM
          (SELECT aggregation_target AS aggregation_target,
                  steps AS steps,
                  max(steps) OVER (PARTITION BY aggregation_target) AS max_steps,
                                  step_1_conversion_time AS step_1_conversion_time,
                                  latest_0 AS latest_0,
                                  latest_1 AS latest_1,
                                  latest_0 AS latest_0
           FROM
             (SELECT aggregation_target AS aggregation_target,
                     timestamp AS timestamp,
                     step_0 AS step_0,
                     latest_0 AS latest_0,
                     step_1 AS step_1,
                     latest_1 AS latest_1,
                     if(and(ifNull(lessOrEquals(latest_0, latest_1), 0), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), 2, 1) AS steps,
                     if(and(isNotNull(latest_1), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), dateDiff('second', latest_0, latest_1), NULL) AS step_1_conversion_time
              FROM
                (SELECT aggregation_target AS aggregation_target,
                        timestamp AS timestamp,
                        step_0 AS step_0,
                        latest_0 AS latest_0,
                        step_1 AS step_1,
                        min(latest_1) OVER (PARTITION BY aggregation_target
                                            ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS latest_1
                 FROM
                   (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                           e.`$group_0` AS aggregation_target,
                           if(equals(e.event, 'user signed up'), 1, 0) AS step_0,
                           if(ifNull(equals(step_0, 1), 0), timestamp, NULL) AS latest_0,
                           if(equals(e.event, 'paid'), 1, 0) AS step_1,
                           if(ifNull(equals(step_1, 1), 0), timestamp, NULL) AS latest_1
                    FROM events AS e
                    WHERE and(equals(e.team_id, 2), and(and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-14 23:59:59.999999', 6, 'UTC'))), in(e.event, tuple('paid', 'user signed up'))), or(ifNull(equals(step_0, 1), 0), ifNull(equals(step_1, 1), 0)))))
              WHERE ifNull(equals(step_0, 1), 0)))
        GROUP BY aggregation_target,
                 steps
        HAVING ifNull(equals(steps, max_steps), isNull(steps)
                      and isNull(max_steps)))
     WHERE ifNull(in(steps, [1, 2]), 0)
     ORDER BY aggregation_target ASC) AS funnel_actors
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '''
# ---
# name: TestClickhouseFunnelCorrelation.test_funnel_correlation_with_properties_and_groups_person_on_events_materialized.1
  '''
  SELECT source.actor_id AS actor_id
  FROM
    (SELECT groups.group_type_index AS index,
            groups.group_key AS key
     FROM groups
     WHERE equals(groups.team_id, 2)
     GROUP BY groups.group_type_index,
              groups.group_key) AS groups
  INNER JOIN
    (SELECT funnel_actors.actor_id AS actor_id,
            any(funnel_actors.matching_events) AS matching_events
     FROM
       (SELECT aggregation_target AS actor_id,
               final_matching_events AS matching_events,
               timestamp AS timestamp,
               steps AS steps,
               final_timestamp AS final_timestamp,
               first_timestamp AS first_timestamp
        FROM
          (SELECT aggregation_target AS aggregation_target,
                  steps AS steps,
                  avg(step_1_conversion_time) AS step_1_average_conversion_time_inner,
                  median(step_1_conversion_time) AS step_1_median_conversion_time_inner,
                  groupArray(10)(step_0_matching_event) AS step_0_matching_events,
                  groupArray(10)(step_1_matching_event) AS step_1_matching_events,
                  groupArray(10)(final_matching_event) AS final_matching_events,
                  argMax(latest_0, steps) AS timestamp,
                  argMax(latest_1, steps) AS final_timestamp,
                  argMax(latest_0, steps) AS first_timestamp
           FROM
             (SELECT aggregation_target AS aggregation_target,
                     steps AS steps,
                     max(steps) OVER (PARTITION BY aggregation_target) AS max_steps,
                                     step_1_conversion_time AS step_1_conversion_time,
                                     tuple(latest_0, uuid_0, `$session_id_0`, `$window_id_0`) AS step_0_matching_event,
                                     tuple(latest_1, uuid_1, `$session_id_1`, `$window_id_1`) AS step_1_matching_event,
                                     if(isNull(latest_0), tuple(NULL, NULL, NULL, NULL), if(isNull(latest_1), step_0_matching_event, step_1_matching_event)) AS final_matching_event,
                                     latest_0 AS latest_0,
                                     latest_1 AS latest_1,
                                     latest_0 AS latest_0
              FROM
                (SELECT aggregation_target AS aggregation_target,
                        timestamp AS timestamp,
                        step_0 AS step_0,
                        latest_0 AS latest_0,
                        uuid_0 AS uuid_0,
                        `$session_id_0` AS `$session_id_0`,
                        `$window_id_0` AS `$window_id_0`,
                        step_1 AS step_1,
                        latest_1 AS latest_1,
                        uuid_1 AS uuid_1,
                        `$session_id_1` AS `$session_id_1`,
                        `$window_id_1` AS `$window_id_1`,
                        if(and(ifNull(lessOrEquals(latest_0, latest_1), 0), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), 2, 1) AS steps,
                        if(and(isNotNull(latest_1), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), dateDiff('second', latest_0, latest_1), NULL) AS step_1_conversion_time,
                        tuple(latest_0, uuid_0, `$session_id_0`, `$window_id_0`) AS step_0_matching_event,
                        tuple(latest_1, uuid_1, `$session_id_1`, `$window_id_1`) AS step_1_matching_event,
                        if(isNull(latest_0), tuple(NULL, NULL, NULL, NULL), if(isNull(latest_1), step_0_matching_event, step_1_matching_event)) AS final_matching_event
                 FROM
                   (SELECT aggregation_target AS aggregation_target,
                           timestamp AS timestamp,
                           step_0 AS step_0,
                           latest_0 AS latest_0,
                           uuid_0 AS uuid_0,
                           `$session_id_0` AS `$session_id_0`,
                           `$window_id_0` AS `$window_id_0`,
                           step_1 AS step_1,
                           min(latest_1) OVER (PARTITION BY aggregation_target
                                               ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS latest_1,
                                              last_value(uuid_1) OVER (PARTITION BY aggregation_target
                                                                       ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS uuid_1,
                                                                      last_value(`$session_id_1`) OVER (PARTITION BY aggregation_target
                                                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS `$session_id_1`,
                                                                                                       last_value(`$window_id_1`) OVER (PARTITION BY aggregation_target
                                                                                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS `$window_id_1`
                    FROM
                      (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                              e.`$group_0` AS aggregation_target,
                              e.uuid AS uuid,
                              if(equals(e.event, 'user signed up'), 1, 0) AS step_0,
                              if(ifNull(equals(step_0, 1), 0), timestamp, NULL) AS latest_0,
                              if(ifNull(equals(step_0, 1), 0), uuid, NULL) AS uuid_0,
                              if(ifNull(equals(step_0, 1), 0), e.`$session_id`, NULL) AS `$session_id_0`,
                              if(ifNull(equals(step_0, 1), 0), e.`$window_id`, NULL) AS `$window_id_0`,
                              if(equals(e.event, 'paid'), 1, 0) AS step_1,
                              if(ifNull(equals(step_1, 1), 0), timestamp, NULL) AS latest_1,
                              if(ifNull(equals(step_1, 1), 0), uuid, NULL) AS uuid_1,
                              if(ifNull(equals(step_1, 1), 0), e.`$session_id`, NULL) AS `$session_id_1`,
                              if(ifNull(equals(step_1, 1), 0), e.`$window_id`, NULL) AS `$window_id_1`
                       FROM events AS e
                       LEFT JOIN
                         (SELECT argMax(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(groups.group_properties, 'industry'), ''), 'null'), '^"|"$', ''), groups._timestamp) AS properties___industry,
                                 groups.group_type_index AS index,
                                 groups.group_key AS key
                          FROM groups
                          WHERE and(equals(groups.team_id, 2), ifNull(equals(index, 0), 0))
                          GROUP BY groups.group_type_index,
                                   groups.group_key) AS e__group_0 ON equals(e.`$group_0`, e__group_0.key)
                       WHERE and(equals(e.team_id, 2), and(and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-14 23:59:59.999999', 6, 'UTC'))), in(e.event, tuple('paid', 'user signed up')), ifNull(equals(e__group_0.properties___industry, 'positive'), 0)), or(ifNull(equals(step_0, 1), 0), ifNull(equals(step_1, 1), 0)))))
                 WHERE ifNull(equals(step_0, 1), 0)))
           GROUP BY aggregation_target,
                    steps
           HAVING ifNull(equals(steps, max_steps), isNull(steps)
                         and isNull(max_steps)))
        WHERE ifNull(in(steps, [1, 2]), 0)
        ORDER BY aggregation_target ASC) AS funnel_actors
     WHERE ifNull(equals(funnel_actors.steps, 2), 0)
     GROUP BY funnel_actors.actor_id
     ORDER BY funnel_actors.actor_id ASC) AS source ON equals(groups.key, source.actor_id)
  ORDER BY source.actor_id ASC
  LIMIT 101
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1
  '''
# ---
# name: TestClickhouseFunnelCorrelation.test_funnel_correlation_with_properties_and_groups_person_on_events_materialized.2
  '''
  SELECT source.actor_id AS actor_id
  FROM
    (SELECT groups.group_type_index AS index,
            groups.group_key AS key
     FROM groups
     WHERE equals(groups.team_id, 2)
     GROUP BY groups.group_type_index,
              groups.group_key) AS groups
  INNER JOIN
    (SELECT funnel_actors.actor_id AS actor_id,
            any(funnel_actors.matching_events) AS matching_events
     FROM
       (SELECT aggregation_target AS actor_id,
               final_matching_events AS matching_events,
               timestamp AS timestamp,
               steps AS steps,
               final_timestamp AS final_timestamp,
               first_timestamp AS first_timestamp
        FROM
          (SELECT aggregation_target AS aggregation_target,
                  steps AS steps,
                  avg(step_1_conversion_time) AS step_1_average_conversion_time_inner,
                  median(step_1_conversion_time) AS step_1_median_conversion_time_inner,
                  groupArray(10)(step_0_matching_event) AS step_0_matching_events,
                  groupArray(10)(step_1_matching_event) AS step_1_matching_events,
                  groupArray(10)(final_matching_event) AS final_matching_events,
                  argMax(latest_0, steps) AS timestamp,
                  argMax(latest_1, steps) AS final_timestamp,
                  argMax(latest_0, steps) AS first_timestamp
           FROM
             (SELECT aggregation_target AS aggregation_target,
                     steps AS steps,
                     max(steps) OVER (PARTITION BY aggregation_target) AS max_steps,
                                     step_1_conversion_time AS step_1_conversion_time,
                                     tuple(latest_0, uuid_0, `$session_id_0`, `$window_id_0`) AS step_0_matching_event,
                                     tuple(latest_1, uuid_1, `$session_id_1`, `$window_id_1`) AS step_1_matching_event,
                                     if(isNull(latest_0), tuple(NULL, NULL, NULL, NULL), if(isNull(latest_1), step_0_matching_event, step_1_matching_event)) AS final_matching_event,
                                     latest_0 AS latest_0,
                                     latest_1 AS latest_1,
                                     latest_0 AS latest_0
              FROM
                (SELECT aggregation_target AS aggregation_target,
                        timestamp AS timestamp,
                        step_0 AS step_0,
                        latest_0 AS latest_0,
                        uuid_0 AS uuid_0,
                        `$session_id_0` AS `$session_id_0`,
                        `$window_id_0` AS `$window_id_0`,
                        step_1 AS step_1,
                        latest_1 AS latest_1,
                        uuid_1 AS uuid_1,
                        `$session_id_1` AS `$session_id_1`,
                        `$window_id_1` AS `$window_id_1`,
                        if(and(ifNull(lessOrEquals(latest_0, latest_1), 0), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), 2, 1) AS steps,
                        if(and(isNotNull(latest_1), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), dateDiff('second', latest_0, latest_1), NULL) AS step_1_conversion_time,
                        tuple(latest_0, uuid_0, `$session_id_0`, `$window_id_0`) AS step_0_matching_event,
                        tuple(latest_1, uuid_1, `$session_id_1`, `$window_id_1`) AS step_1_matching_event,
                        if(isNull(latest_0), tuple(NULL, NULL, NULL, NULL), if(isNull(latest_1), step_0_matching_event, step_1_matching_event)) AS final_matching_event
                 FROM
                   (SELECT aggregation_target AS aggregation_target,
                           timestamp AS timestamp,
                           step_0 AS step_0,
                           latest_0 AS latest_0,
                           uuid_0 AS uuid_0,
                           `$session_id_0` AS `$session_id_0`,
                           `$window_id_0` AS `$window_id_0`,
                           step_1 AS step_1,
                           min(latest_1) OVER (PARTITION BY aggregation_target
                                               ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS latest_1,
                                              last_value(uuid_1) OVER (PARTITION BY aggregation_target
                                                                       ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS uuid_1,
                                                                      last_value(`$session_id_1`) OVER (PARTITION BY aggregation_target
                                                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS `$session_id_1`,
                                                                                                       last_value(`$window_id_1`) OVER (PARTITION BY aggregation_target
                                                                                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS `$window_id_1`
                    FROM
                      (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                              e.`$group_0` AS aggregation_target,
                              e.uuid AS uuid,
                              if(equals(e.event, 'user signed up'), 1, 0) AS step_0,
                              if(ifNull(equals(step_0, 1), 0), timestamp, NULL) AS latest_0,
                              if(ifNull(equals(step_0, 1), 0), uuid, NULL) AS uuid_0,
                              if(ifNull(equals(step_0, 1), 0), e.`$session_id`, NULL) AS `$session_id_0`,
                              if(ifNull(equals(step_0, 1), 0), e.`$window_id`, NULL) AS `$window_id_0`,
                              if(equals(e.event, 'paid'), 1, 0) AS step_1,
                              if(ifNull(equals(step_1, 1), 0), timestamp, NULL) AS latest_1,
                              if(ifNull(equals(step_1, 1), 0), uuid, NULL) AS uuid_1,
                              if(ifNull(equals(step_1, 1), 0), e.`$session_id`, NULL) AS `$session_id_1`,
                              if(ifNull(equals(step_1, 1), 0), e.`$window_id`, NULL) AS `$window_id_1`
                       FROM events AS e
                       LEFT JOIN
                         (SELECT argMax(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(groups.group_properties, 'industry'), ''), 'null'), '^"|"$', ''), groups._timestamp) AS properties___industry,
                                 groups.group_type_index AS index,
                                 groups.group_key AS key
                          FROM groups
                          WHERE and(equals(groups.team_id, 2), ifNull(equals(index, 0), 0))
                          GROUP BY groups.group_type_index,
                                   groups.group_key) AS e__group_0 ON equals(e.`$group_0`, e__group_0.key)
                       WHERE and(equals(e.team_id, 2), and(and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-14 23:59:59.999999', 6, 'UTC'))), in(e.event, tuple('paid', 'user signed up')), ifNull(equals(e__group_0.properties___industry, 'positive'), 0)), or(ifNull(equals(step_0, 1), 0), ifNull(equals(step_1, 1), 0)))))
                 WHERE ifNull(equals(step_0, 1), 0)))
           GROUP BY aggregation_target,
                    steps
           HAVING ifNull(equals(steps, max_steps), isNull(steps)
                         and isNull(max_steps)))
        WHERE ifNull(in(steps, [1, 2]), 0)
        ORDER BY aggregation_target ASC) AS funnel_actors
     WHERE ifNull(notEquals(funnel_actors.steps, 2), 1)
     GROUP BY funnel_actors.actor_id
     ORDER BY funnel_actors.actor_id ASC) AS source ON equals(groups.key, source.actor_id)
  ORDER BY source.actor_id ASC
  LIMIT 101
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1
  '''
# ---
# name: TestClickhouseFunnelCorrelation.test_funnel_correlation_with_properties_and_groups_person_on_events_materialized.3
  '''
  SELECT source.actor_id AS actor_id
  FROM
    (SELECT groups.group_type_index AS index,
            groups.group_key AS key
     FROM groups
     WHERE equals(groups.team_id, 2)
     GROUP BY groups.group_type_index,
              groups.group_key) AS groups
  INNER JOIN
    (SELECT funnel_actors.actor_id AS actor_id,
            any(funnel_actors.matching_events) AS matching_events
     FROM
       (SELECT aggregation_target AS actor_id,
               final_matching_events AS matching_events,
               timestamp AS timestamp,
               steps AS steps,
               final_timestamp AS final_timestamp,
               first_timestamp AS first_timestamp
        FROM
          (SELECT aggregation_target AS aggregation_target,
                  steps AS steps,
                  avg(step_1_conversion_time) AS step_1_average_conversion_time_inner,
                  median(step_1_conversion_time) AS step_1_median_conversion_time_inner,
                  groupArray(10)(step_0_matching_event) AS step_0_matching_events,
                  groupArray(10)(step_1_matching_event) AS step_1_matching_events,
                  groupArray(10)(final_matching_event) AS final_matching_events,
                  argMax(latest_0, steps) AS timestamp,
                  argMax(latest_1, steps) AS final_timestamp,
                  argMax(latest_0, steps) AS first_timestamp
           FROM
             (SELECT aggregation_target AS aggregation_target,
                     steps AS steps,
                     max(steps) OVER (PARTITION BY aggregation_target) AS max_steps,
                                     step_1_conversion_time AS step_1_conversion_time,
                                     tuple(latest_0, uuid_0, `$session_id_0`, `$window_id_0`) AS step_0_matching_event,
                                     tuple(latest_1, uuid_1, `$session_id_1`, `$window_id_1`) AS step_1_matching_event,
                                     if(isNull(latest_0), tuple(NULL, NULL, NULL, NULL), if(isNull(latest_1), step_0_matching_event, step_1_matching_event)) AS final_matching_event,
                                     latest_0 AS latest_0,
                                     latest_1 AS latest_1,
                                     latest_0 AS latest_0
              FROM
                (SELECT aggregation_target AS aggregation_target,
                        timestamp AS timestamp,
                        step_0 AS step_0,
                        latest_0 AS latest_0,
                        uuid_0 AS uuid_0,
                        `$session_id_0` AS `$session_id_0`,
                        `$window_id_0` AS `$window_id_0`,
                        step_1 AS step_1,
                        latest_1 AS latest_1,
                        uuid_1 AS uuid_1,
                        `$session_id_1` AS `$session_id_1`,
                        `$window_id_1` AS `$window_id_1`,
                        if(and(ifNull(lessOrEquals(latest_0, latest_1), 0), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), 2, 1) AS steps,
                        if(and(isNotNull(latest_1), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), dateDiff('second', latest_0, latest_1), NULL) AS step_1_conversion_time,
                        tuple(latest_0, uuid_0, `$session_id_0`, `$window_id_0`) AS step_0_matching_event,
                        tuple(latest_1, uuid_1, `$session_id_1`, `$window_id_1`) AS step_1_matching_event,
                        if(isNull(latest_0), tuple(NULL, NULL, NULL, NULL), if(isNull(latest_1), step_0_matching_event, step_1_matching_event)) AS final_matching_event
                 FROM
                   (SELECT aggregation_target AS aggregation_target,
                           timestamp AS timestamp,
                           step_0 AS step_0,
                           latest_0 AS latest_0,
                           uuid_0 AS uuid_0,
                           `$session_id_0` AS `$session_id_0`,
                           `$window_id_0` AS `$window_id_0`,
                           step_1 AS step_1,
                           min(latest_1) OVER (PARTITION BY aggregation_target
                                               ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS latest_1,
                                              last_value(uuid_1) OVER (PARTITION BY aggregation_target
                                                                       ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS uuid_1,
                                                                      last_value(`$session_id_1`) OVER (PARTITION BY aggregation_target
                                                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS `$session_id_1`,
                                                                                                       last_value(`$window_id_1`) OVER (PARTITION BY aggregation_target
                                                                                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS `$window_id_1`
                    FROM
                      (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                              e.`$group_0` AS aggregation_target,
                              e.uuid AS uuid,
                              if(equals(e.event, 'user signed up'), 1, 0) AS step_0,
                              if(ifNull(equals(step_0, 1), 0), timestamp, NULL) AS latest_0,
                              if(ifNull(equals(step_0, 1), 0), uuid, NULL) AS uuid_0,
                              if(ifNull(equals(step_0, 1), 0), e.`$session_id`, NULL) AS `$session_id_0`,
                              if(ifNull(equals(step_0, 1), 0), e.`$window_id`, NULL) AS `$window_id_0`,
                              if(equals(e.event, 'paid'), 1, 0) AS step_1,
                              if(ifNull(equals(step_1, 1), 0), timestamp, NULL) AS latest_1,
                              if(ifNull(equals(step_1, 1), 0), uuid, NULL) AS uuid_1,
                              if(ifNull(equals(step_1, 1), 0), e.`$session_id`, NULL) AS `$session_id_1`,
                              if(ifNull(equals(step_1, 1), 0), e.`$window_id`, NULL) AS `$window_id_1`
                       FROM events AS e
                       LEFT JOIN
                         (SELECT argMax(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(groups.group_properties, 'industry'), ''), 'null'), '^"|"$', ''), groups._timestamp) AS properties___industry,
                                 groups.group_type_index AS index,
                                 groups.group_key AS key
                          FROM groups
                          WHERE and(equals(groups.team_id, 2), ifNull(equals(index, 0), 0))
                          GROUP BY groups.group_type_index,
                                   groups.group_key) AS e__group_0 ON equals(e.`$group_0`, e__group_0.key)
                       WHERE and(equals(e.team_id, 2), and(and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-14 23:59:59.999999', 6, 'UTC'))), in(e.event, tuple('paid', 'user signed up')), ifNull(equals(e__group_0.properties___industry, 'negative'), 0)), or(ifNull(equals(step_0, 1), 0), ifNull(equals(step_1, 1), 0)))))
                 WHERE ifNull(equals(step_0, 1), 0)))
           GROUP BY aggregation_target,
                    steps
           HAVING ifNull(equals(steps, max_steps), isNull(steps)
                         and isNull(max_steps)))
        WHERE ifNull(in(steps, [1, 2]), 0)
        ORDER BY aggregation_target ASC) AS funnel_actors
     WHERE ifNull(equals(funnel_actors.steps, 2), 0)
     GROUP BY funnel_actors.actor_id
     ORDER BY funnel_actors.actor_id ASC) AS source ON equals(groups.key, source.actor_id)
  ORDER BY source.actor_id ASC
  LIMIT 101
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1
  '''
# ---
# name: TestClickhouseFunnelCorrelation.test_funnel_correlation_with_properties_and_groups_person_on_events_materialized.4
  '''
  SELECT source.actor_id AS actor_id
  FROM
    (SELECT groups.group_type_index AS index,
            groups.group_key AS key
     FROM groups
     WHERE equals(groups.team_id, 2)
     GROUP BY groups.group_type_index,
              groups.group_key) AS groups
  INNER JOIN
    (SELECT funnel_actors.actor_id AS actor_id,
            any(funnel_actors.matching_events) AS matching_events
     FROM
       (SELECT aggregation_target AS actor_id,
               final_matching_events AS matching_events,
               timestamp AS timestamp,
               steps AS steps,
               final_timestamp AS final_timestamp,
               first_timestamp AS first_timestamp
        FROM
          (SELECT aggregation_target AS aggregation_target,
                  steps AS steps,
                  avg(step_1_conversion_time) AS step_1_average_conversion_time_inner,
                  median(step_1_conversion_time) AS step_1_median_conversion_time_inner,
                  groupArray(10)(step_0_matching_event) AS step_0_matching_events,
                  groupArray(10)(step_1_matching_event) AS step_1_matching_events,
                  groupArray(10)(final_matching_event) AS final_matching_events,
                  argMax(latest_0, steps) AS timestamp,
                  argMax(latest_1, steps) AS final_timestamp,
                  argMax(latest_0, steps) AS first_timestamp
           FROM
             (SELECT aggregation_target AS aggregation_target,
                     steps AS steps,
                     max(steps) OVER (PARTITION BY aggregation_target) AS max_steps,
                                     step_1_conversion_time AS step_1_conversion_time,
                                     tuple(latest_0, uuid_0, `$session_id_0`, `$window_id_0`) AS step_0_matching_event,
                                     tuple(latest_1, uuid_1, `$session_id_1`, `$window_id_1`) AS step_1_matching_event,
                                     if(isNull(latest_0), tuple(NULL, NULL, NULL, NULL), if(isNull(latest_1), step_0_matching_event, step_1_matching_event)) AS final_matching_event,
                                     latest_0 AS latest_0,
                                     latest_1 AS latest_1,
                                     latest_0 AS latest_0
              FROM
                (SELECT aggregation_target AS aggregation_target,
                        timestamp AS timestamp,
                        step_0 AS step_0,
                        latest_0 AS latest_0,
                        uuid_0 AS uuid_0,
                        `$session_id_0` AS `$session_id_0`,
                        `$window_id_0` AS `$window_id_0`,
                        step_1 AS step_1,
                        latest_1 AS latest_1,
                        uuid_1 AS uuid_1,
                        `$session_id_1` AS `$session_id_1`,
                        `$window_id_1` AS `$window_id_1`,
                        if(and(ifNull(lessOrEquals(latest_0, latest_1), 0), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), 2, 1) AS steps,
                        if(and(isNotNull(latest_1), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), dateDiff('second', latest_0, latest_1), NULL) AS step_1_conversion_time,
                        tuple(latest_0, uuid_0, `$session_id_0`, `$window_id_0`) AS step_0_matching_event,
                        tuple(latest_1, uuid_1, `$session_id_1`, `$window_id_1`) AS step_1_matching_event,
                        if(isNull(latest_0), tuple(NULL, NULL, NULL, NULL), if(isNull(latest_1), step_0_matching_event, step_1_matching_event)) AS final_matching_event
                 FROM
                   (SELECT aggregation_target AS aggregation_target,
                           timestamp AS timestamp,
                           step_0 AS step_0,
                           latest_0 AS latest_0,
                           uuid_0 AS uuid_0,
                           `$session_id_0` AS `$session_id_0`,
                           `$window_id_0` AS `$window_id_0`,
                           step_1 AS step_1,
                           min(latest_1) OVER (PARTITION BY aggregation_target
                                               ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS latest_1,
                                              last_value(uuid_1) OVER (PARTITION BY aggregation_target
                                                                       ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS uuid_1,
                                                                      last_value(`$session_id_1`) OVER (PARTITION BY aggregation_target
                                                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS `$session_id_1`,
                                                                                                       last_value(`$window_id_1`) OVER (PARTITION BY aggregation_target
                                                                                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS `$window_id_1`
                    FROM
                      (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                              e.`$group_0` AS aggregation_target,
                              e.uuid AS uuid,
                              if(equals(e.event, 'user signed up'), 1, 0) AS step_0,
                              if(ifNull(equals(step_0, 1), 0), timestamp, NULL) AS latest_0,
                              if(ifNull(equals(step_0, 1), 0), uuid, NULL) AS uuid_0,
                              if(ifNull(equals(step_0, 1), 0), e.`$session_id`, NULL) AS `$session_id_0`,
                              if(ifNull(equals(step_0, 1), 0), e.`$window_id`, NULL) AS `$window_id_0`,
                              if(equals(e.event, 'paid'), 1, 0) AS step_1,
                              if(ifNull(equals(step_1, 1), 0), timestamp, NULL) AS latest_1,
                              if(ifNull(equals(step_1, 1), 0), uuid, NULL) AS uuid_1,
                              if(ifNull(equals(step_1, 1), 0), e.`$session_id`, NULL) AS `$session_id_1`,
                              if(ifNull(equals(step_1, 1), 0), e.`$window_id`, NULL) AS `$window_id_1`
                       FROM events AS e
                       LEFT JOIN
                         (SELECT argMax(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(groups.group_properties, 'industry'), ''), 'null'), '^"|"$', ''), groups._timestamp) AS properties___industry,
                                 groups.group_type_index AS index,
                                 groups.group_key AS key
                          FROM groups
                          WHERE and(equals(groups.team_id, 2), ifNull(equals(index, 0), 0))
                          GROUP BY groups.group_type_index,
                                   groups.group_key) AS e__group_0 ON equals(e.`$group_0`, e__group_0.key)
                       WHERE and(equals(e.team_id, 2), and(and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-14 23:59:59.999999', 6, 'UTC'))), in(e.event, tuple('paid', 'user signed up')), ifNull(equals(e__group_0.properties___industry, 'negative'), 0)), or(ifNull(equals(step_0, 1), 0), ifNull(equals(step_1, 1), 0)))))
                 WHERE ifNull(equals(step_0, 1), 0)))
           GROUP BY aggregation_target,
                    steps
           HAVING ifNull(equals(steps, max_steps), isNull(steps)
                         and isNull(max_steps)))
        WHERE ifNull(in(steps, [1, 2]), 0)
        ORDER BY aggregation_target ASC) AS funnel_actors
     WHERE ifNull(notEquals(funnel_actors.steps, 2), 1)
     GROUP BY funnel_actors.actor_id
     ORDER BY funnel_actors.actor_id ASC) AS source ON equals(groups.key, source.actor_id)
  ORDER BY source.actor_id ASC
  LIMIT 101
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1
  '''
# ---
# name: TestClickhouseFunnelCorrelation.test_funnel_correlation_with_properties_and_groups_person_on_events_materialized.5
  '''
  SELECT concat(ifNull(toString((aggregation_target_with_props.prop).1), ''), '::', ifNull(toString((aggregation_target_with_props.prop).2), '')) AS name,
         countIf(aggregation_target_with_props.actor_id, ifNull(equals(aggregation_target_with_props.steps, 2), 0)) AS success_count,
         countIf(aggregation_target_with_props.actor_id, ifNull(notEquals(aggregation_target_with_props.steps, 2), 1)) AS failure_count
  FROM
    (SELECT funnel_actors.actor_id AS actor_id,
            funnel_actors.steps AS steps,
            arrayJoin(JSONExtractKeysAndValues(groups_0.properties, 'String')) AS prop
     FROM
       (SELECT aggregation_target AS actor_id,
               timestamp AS timestamp,
               steps AS steps,
               final_timestamp AS final_timestamp,
               first_timestamp AS first_timestamp
        FROM
          (SELECT aggregation_target AS aggregation_target,
                  steps AS steps,
                  avg(step_1_conversion_time) AS step_1_average_conversion_time_inner,
                  median(step_1_conversion_time) AS step_1_median_conversion_time_inner,
                  argMax(latest_0, steps) AS timestamp,
                  argMax(latest_1, steps) AS final_timestamp,
                  argMax(latest_0, steps) AS first_timestamp
           FROM
             (SELECT aggregation_target AS aggregation_target,
                     steps AS steps,
                     max(steps) OVER (PARTITION BY aggregation_target) AS max_steps,
                                     step_1_conversion_time AS step_1_conversion_time,
                                     latest_0 AS latest_0,
                                     latest_1 AS latest_1,
                                     latest_0 AS latest_0
              FROM
                (SELECT aggregation_target AS aggregation_target,
                        timestamp AS timestamp,
                        step_0 AS step_0,
                        latest_0 AS latest_0,
                        step_1 AS step_1,
                        latest_1 AS latest_1,
                        if(and(ifNull(lessOrEquals(latest_0, latest_1), 0), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), 2, 1) AS steps,
                        if(and(isNotNull(latest_1), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), dateDiff('second', latest_0, latest_1), NULL) AS step_1_conversion_time
                 FROM
                   (SELECT aggregation_target AS aggregation_target,
                           timestamp AS timestamp,
                           step_0 AS step_0,
                           latest_0 AS latest_0,
                           step_1 AS step_1,
                           min(latest_1) OVER (PARTITION BY aggregation_target
                                               ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS latest_1
                    FROM
                      (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                              e.`$group_0` AS aggregation_target,
                              if(equals(e.event, 'user signed up'), 1, 0) AS step_0,
                              if(ifNull(equals(step_0, 1), 0), timestamp, NULL) AS latest_0,
                              if(equals(e.event, 'paid'), 1, 0) AS step_1,
                              if(ifNull(equals(step_1, 1), 0), timestamp, NULL) AS latest_1
                       FROM events AS e
                       WHERE and(equals(e.team_id, 2), and(and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-14 23:59:59.999999', 6, 'UTC'))), in(e.event, tuple('paid', 'user signed up'))), or(ifNull(equals(step_0, 1), 0), ifNull(equals(step_1, 1), 0)))))
                 WHERE ifNull(equals(step_0, 1), 0)))
           GROUP BY aggregation_target,
                    steps
           HAVING ifNull(equals(steps, max_steps), isNull(steps)
                         and isNull(max_steps)))
        WHERE ifNull(in(steps, [1, 2]), 0)
        ORDER BY aggregation_target ASC) AS funnel_actors
     LEFT JOIN
       (SELECT groups.key AS key,
               groups.properties AS properties
        FROM
          (SELECT argMax(groups.group_properties, groups._timestamp) AS properties,
                  groups.group_type_index AS index,
                  groups.group_key AS key
           FROM groups
           WHERE equals(groups.team_id, 2)
           GROUP BY groups.group_type_index,
                    groups.group_key) AS groups
        WHERE ifNull(equals(groups.index, 0), 0)) AS groups_0 ON equals(funnel_actors.actor_id, groups_0.key)) AS aggregation_target_with_props
  GROUP BY (aggregation_target_with_props.prop).1, (aggregation_target_with_props.prop).2
  HAVING ifNull(notIn((aggregation_target_with_props.prop).1, []), 0)
  LIMIT 100
  UNION ALL
  SELECT 'Total_Values_In_Query' AS name,
         countIf(funnel_actors.actor_id, ifNull(equals(funnel_actors.steps, 2), 0)) AS success_count,
         countIf(funnel_actors.actor_id, ifNull(notEquals(funnel_actors.steps, 2), 1)) AS failure_count
  FROM
    (SELECT aggregation_target AS actor_id,
            timestamp AS timestamp,
            steps AS steps,
            final_timestamp AS final_timestamp,
            first_timestamp AS first_timestamp
     FROM
       (SELECT aggregation_target AS aggregation_target,
               steps AS steps,
               avg(step_1_conversion_time) AS step_1_average_conversion_time_inner,
               median(step_1_conversion_time) AS step_1_median_conversion_time_inner,
               argMax(latest_0, steps) AS timestamp,
               argMax(latest_1, steps) AS final_timestamp,
               argMax(latest_0, steps) AS first_timestamp
        FROM
          (SELECT aggregation_target AS aggregation_target,
                  steps AS steps,
                  max(steps) OVER (PARTITION BY aggregation_target) AS max_steps,
                                  step_1_conversion_time AS step_1_conversion_time,
                                  latest_0 AS latest_0,
                                  latest_1 AS latest_1,
                                  latest_0 AS latest_0
           FROM
             (SELECT aggregation_target AS aggregation_target,
                     timestamp AS timestamp,
                     step_0 AS step_0,
                     latest_0 AS latest_0,
                     step_1 AS step_1,
                     latest_1 AS latest_1,
                     if(and(ifNull(lessOrEquals(latest_0, latest_1), 0), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), 2, 1) AS steps,
                     if(and(isNotNull(latest_1), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), dateDiff('second', latest_0, latest_1), NULL) AS step_1_conversion_time
              FROM
                (SELECT aggregation_target AS aggregation_target,
                        timestamp AS timestamp,
                        step_0 AS step_0,
                        latest_0 AS latest_0,
                        step_1 AS step_1,
                        min(latest_1) OVER (PARTITION BY aggregation_target
                                            ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS latest_1
                 FROM
                   (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                           e.`$group_0` AS aggregation_target,
                           if(equals(e.event, 'user signed up'), 1, 0) AS step_0,
                           if(ifNull(equals(step_0, 1), 0), timestamp, NULL) AS latest_0,
                           if(equals(e.event, 'paid'), 1, 0) AS step_1,
                           if(ifNull(equals(step_1, 1), 0), timestamp, NULL) AS latest_1
                    FROM events AS e
                    WHERE and(equals(e.team_id, 2), and(and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-14 23:59:59.999999', 6, 'UTC'))), in(e.event, tuple('paid', 'user signed up'))), or(ifNull(equals(step_0, 1), 0), ifNull(equals(step_1, 1), 0)))))
              WHERE ifNull(equals(step_0, 1), 0)))
        GROUP BY aggregation_target,
                 steps
        HAVING ifNull(equals(steps, max_steps), isNull(steps)
                      and isNull(max_steps)))
     WHERE ifNull(in(steps, [1, 2]), 0)
     ORDER BY aggregation_target ASC) AS funnel_actors
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '''
# ---
# name: TestClickhouseFunnelCorrelation.test_funnel_correlation_with_properties_and_groups_person_on_events_poe_v2
  '''
  SELECT concat(ifNull(toString((aggregation_target_with_props.prop).1), ''), '::', ifNull(toString((aggregation_target_with_props.prop).2), '')) AS name,
         countIf(aggregation_target_with_props.actor_id, ifNull(equals(aggregation_target_with_props.steps, 2), 0)) AS success_count,
         countIf(aggregation_target_with_props.actor_id, ifNull(notEquals(aggregation_target_with_props.steps, 2), 1)) AS failure_count
  FROM
    (SELECT funnel_actors.actor_id AS actor_id,
            funnel_actors.steps AS steps,
            arrayJoin(arrayZip(['industry'], [JSONExtractString(groups_0.properties, 'industry')])) AS prop
     FROM
       (SELECT aggregation_target AS actor_id,
               timestamp AS timestamp,
               steps AS steps,
               final_timestamp AS final_timestamp,
               first_timestamp AS first_timestamp
        FROM
          (SELECT aggregation_target AS aggregation_target,
                  steps AS steps,
                  avg(step_1_conversion_time) AS step_1_average_conversion_time_inner,
                  median(step_1_conversion_time) AS step_1_median_conversion_time_inner,
                  argMax(latest_0, steps) AS timestamp,
                  argMax(latest_1, steps) AS final_timestamp,
                  argMax(latest_0, steps) AS first_timestamp
           FROM
             (SELECT aggregation_target AS aggregation_target,
                     steps AS steps,
                     max(steps) OVER (PARTITION BY aggregation_target) AS max_steps,
                                     step_1_conversion_time AS step_1_conversion_time,
                                     latest_0 AS latest_0,
                                     latest_1 AS latest_1,
                                     latest_0 AS latest_0
              FROM
                (SELECT aggregation_target AS aggregation_target,
                        timestamp AS timestamp,
                        step_0 AS step_0,
                        latest_0 AS latest_0,
                        step_1 AS step_1,
                        latest_1 AS latest_1,
                        if(and(ifNull(lessOrEquals(latest_0, latest_1), 0), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), 2, 1) AS steps,
                        if(and(isNotNull(latest_1), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), dateDiff('second', latest_0, latest_1), NULL) AS step_1_conversion_time
                 FROM
                   (SELECT aggregation_target AS aggregation_target,
                           timestamp AS timestamp,
                           step_0 AS step_0,
                           latest_0 AS latest_0,
                           step_1 AS step_1,
                           min(latest_1) OVER (PARTITION BY aggregation_target
                                               ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS latest_1
                    FROM
                      (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                              e.`$group_0` AS aggregation_target,
                              if(equals(e.event, 'user signed up'), 1, 0) AS step_0,
                              if(ifNull(equals(step_0, 1), 0), timestamp, NULL) AS latest_0,
                              if(equals(e.event, 'paid'), 1, 0) AS step_1,
                              if(ifNull(equals(step_1, 1), 0), timestamp, NULL) AS latest_1
                       FROM events AS e
                       WHERE and(equals(e.team_id, 2), and(and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-14 23:59:59.999999', 6, 'UTC'))), in(e.event, tuple('paid', 'user signed up'))), or(ifNull(equals(step_0, 1), 0), ifNull(equals(step_1, 1), 0)))))
                 WHERE ifNull(equals(step_0, 1), 0)))
           GROUP BY aggregation_target,
                    steps
           HAVING ifNull(equals(steps, max_steps), isNull(steps)
                         and isNull(max_steps)))
        WHERE ifNull(in(steps, [1, 2]), 0)
        ORDER BY aggregation_target ASC) AS funnel_actors
     LEFT JOIN
       (SELECT groups.key AS key,
               groups.properties AS properties
        FROM
          (SELECT argMax(groups.group_properties, groups._timestamp) AS properties,
                  groups.group_type_index AS index,
                  groups.group_key AS key
           FROM groups
           WHERE equals(groups.team_id, 2)
           GROUP BY groups.group_type_index,
                    groups.group_key) AS groups
        WHERE ifNull(equals(groups.index, 0), 0)) AS groups_0 ON equals(funnel_actors.actor_id, groups_0.key)) AS aggregation_target_with_props
  GROUP BY (aggregation_target_with_props.prop).1, (aggregation_target_with_props.prop).2
  HAVING ifNull(notIn((aggregation_target_with_props.prop).1, []), 0)
  LIMIT 100
  UNION ALL
  SELECT 'Total_Values_In_Query' AS name,
         countIf(funnel_actors.actor_id, ifNull(equals(funnel_actors.steps, 2), 0)) AS success_count,
         countIf(funnel_actors.actor_id, ifNull(notEquals(funnel_actors.steps, 2), 1)) AS failure_count
  FROM
    (SELECT aggregation_target AS actor_id,
            timestamp AS timestamp,
            steps AS steps,
            final_timestamp AS final_timestamp,
            first_timestamp AS first_timestamp
     FROM
       (SELECT aggregation_target AS aggregation_target,
               steps AS steps,
               avg(step_1_conversion_time) AS step_1_average_conversion_time_inner,
               median(step_1_conversion_time) AS step_1_median_conversion_time_inner,
               argMax(latest_0, steps) AS timestamp,
               argMax(latest_1, steps) AS final_timestamp,
               argMax(latest_0, steps) AS first_timestamp
        FROM
          (SELECT aggregation_target AS aggregation_target,
                  steps AS steps,
                  max(steps) OVER (PARTITION BY aggregation_target) AS max_steps,
                                  step_1_conversion_time AS step_1_conversion_time,
                                  latest_0 AS latest_0,
                                  latest_1 AS latest_1,
                                  latest_0 AS latest_0
           FROM
             (SELECT aggregation_target AS aggregation_target,
                     timestamp AS timestamp,
                     step_0 AS step_0,
                     latest_0 AS latest_0,
                     step_1 AS step_1,
                     latest_1 AS latest_1,
                     if(and(ifNull(lessOrEquals(latest_0, latest_1), 0), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), 2, 1) AS steps,
                     if(and(isNotNull(latest_1), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), dateDiff('second', latest_0, latest_1), NULL) AS step_1_conversion_time
              FROM
                (SELECT aggregation_target AS aggregation_target,
                        timestamp AS timestamp,
                        step_0 AS step_0,
                        latest_0 AS latest_0,
                        step_1 AS step_1,
                        min(latest_1) OVER (PARTITION BY aggregation_target
                                            ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS latest_1
                 FROM
                   (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                           e.`$group_0` AS aggregation_target,
                           if(equals(e.event, 'user signed up'), 1, 0) AS step_0,
                           if(ifNull(equals(step_0, 1), 0), timestamp, NULL) AS latest_0,
                           if(equals(e.event, 'paid'), 1, 0) AS step_1,
                           if(ifNull(equals(step_1, 1), 0), timestamp, NULL) AS latest_1
                    FROM events AS e
                    WHERE and(equals(e.team_id, 2), and(and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-14 23:59:59.999999', 6, 'UTC'))), in(e.event, tuple('paid', 'user signed up'))), or(ifNull(equals(step_0, 1), 0), ifNull(equals(step_1, 1), 0)))))
              WHERE ifNull(equals(step_0, 1), 0)))
        GROUP BY aggregation_target,
                 steps
        HAVING ifNull(equals(steps, max_steps), isNull(steps)
                      and isNull(max_steps)))
     WHERE ifNull(in(steps, [1, 2]), 0)
     ORDER BY aggregation_target ASC) AS funnel_actors
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '''
# ---
# name: TestClickhouseFunnelCorrelation.test_funnel_correlation_with_properties_and_groups_person_on_events_poe_v2.1
  '''
  SELECT source.actor_id AS actor_id
  FROM
    (SELECT groups.group_type_index AS index,
            groups.group_key AS key
     FROM groups
     WHERE equals(groups.team_id, 2)
     GROUP BY groups.group_type_index,
              groups.group_key) AS groups
  INNER JOIN
    (SELECT funnel_actors.actor_id AS actor_id,
            any(funnel_actors.matching_events) AS matching_events
     FROM
       (SELECT aggregation_target AS actor_id,
               final_matching_events AS matching_events,
               timestamp AS timestamp,
               steps AS steps,
               final_timestamp AS final_timestamp,
               first_timestamp AS first_timestamp
        FROM
          (SELECT aggregation_target AS aggregation_target,
                  steps AS steps,
                  avg(step_1_conversion_time) AS step_1_average_conversion_time_inner,
                  median(step_1_conversion_time) AS step_1_median_conversion_time_inner,
                  groupArray(10)(step_0_matching_event) AS step_0_matching_events,
                  groupArray(10)(step_1_matching_event) AS step_1_matching_events,
                  groupArray(10)(final_matching_event) AS final_matching_events,
                  argMax(latest_0, steps) AS timestamp,
                  argMax(latest_1, steps) AS final_timestamp,
                  argMax(latest_0, steps) AS first_timestamp
           FROM
             (SELECT aggregation_target AS aggregation_target,
                     steps AS steps,
                     max(steps) OVER (PARTITION BY aggregation_target) AS max_steps,
                                     step_1_conversion_time AS step_1_conversion_time,
                                     tuple(latest_0, uuid_0, `$session_id_0`, `$window_id_0`) AS step_0_matching_event,
                                     tuple(latest_1, uuid_1, `$session_id_1`, `$window_id_1`) AS step_1_matching_event,
                                     if(isNull(latest_0), tuple(NULL, NULL, NULL, NULL), if(isNull(latest_1), step_0_matching_event, step_1_matching_event)) AS final_matching_event,
                                     latest_0 AS latest_0,
                                     latest_1 AS latest_1,
                                     latest_0 AS latest_0
              FROM
                (SELECT aggregation_target AS aggregation_target,
                        timestamp AS timestamp,
                        step_0 AS step_0,
                        latest_0 AS latest_0,
                        uuid_0 AS uuid_0,
                        `$session_id_0` AS `$session_id_0`,
                        `$window_id_0` AS `$window_id_0`,
                        step_1 AS step_1,
                        latest_1 AS latest_1,
                        uuid_1 AS uuid_1,
                        `$session_id_1` AS `$session_id_1`,
                        `$window_id_1` AS `$window_id_1`,
                        if(and(ifNull(lessOrEquals(latest_0, latest_1), 0), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), 2, 1) AS steps,
                        if(and(isNotNull(latest_1), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), dateDiff('second', latest_0, latest_1), NULL) AS step_1_conversion_time,
                        tuple(latest_0, uuid_0, `$session_id_0`, `$window_id_0`) AS step_0_matching_event,
                        tuple(latest_1, uuid_1, `$session_id_1`, `$window_id_1`) AS step_1_matching_event,
                        if(isNull(latest_0), tuple(NULL, NULL, NULL, NULL), if(isNull(latest_1), step_0_matching_event, step_1_matching_event)) AS final_matching_event
                 FROM
                   (SELECT aggregation_target AS aggregation_target,
                           timestamp AS timestamp,
                           step_0 AS step_0,
                           latest_0 AS latest_0,
                           uuid_0 AS uuid_0,
                           `$session_id_0` AS `$session_id_0`,
                           `$window_id_0` AS `$window_id_0`,
                           step_1 AS step_1,
                           min(latest_1) OVER (PARTITION BY aggregation_target
                                               ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS latest_1,
                                              last_value(uuid_1) OVER (PARTITION BY aggregation_target
                                                                       ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS uuid_1,
                                                                      last_value(`$session_id_1`) OVER (PARTITION BY aggregation_target
                                                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS `$session_id_1`,
                                                                                                       last_value(`$window_id_1`) OVER (PARTITION BY aggregation_target
                                                                                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS `$window_id_1`
                    FROM
                      (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                              e.`$group_0` AS aggregation_target,
                              e.uuid AS uuid,
                              if(equals(e.event, 'user signed up'), 1, 0) AS step_0,
                              if(ifNull(equals(step_0, 1), 0), timestamp, NULL) AS latest_0,
                              if(ifNull(equals(step_0, 1), 0), uuid, NULL) AS uuid_0,
                              if(ifNull(equals(step_0, 1), 0), e.`$session_id`, NULL) AS `$session_id_0`,
                              if(ifNull(equals(step_0, 1), 0), e.`$window_id`, NULL) AS `$window_id_0`,
                              if(equals(e.event, 'paid'), 1, 0) AS step_1,
                              if(ifNull(equals(step_1, 1), 0), timestamp, NULL) AS latest_1,
                              if(ifNull(equals(step_1, 1), 0), uuid, NULL) AS uuid_1,
                              if(ifNull(equals(step_1, 1), 0), e.`$session_id`, NULL) AS `$session_id_1`,
                              if(ifNull(equals(step_1, 1), 0), e.`$window_id`, NULL) AS `$window_id_1`
                       FROM events AS e
                       LEFT JOIN
                         (SELECT argMax(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(groups.group_properties, 'industry'), ''), 'null'), '^"|"$', ''), groups._timestamp) AS properties___industry,
                                 groups.group_type_index AS index,
                                 groups.group_key AS key
                          FROM groups
                          WHERE and(equals(groups.team_id, 2), ifNull(equals(index, 0), 0))
                          GROUP BY groups.group_type_index,
                                   groups.group_key) AS e__group_0 ON equals(e.`$group_0`, e__group_0.key)
                       WHERE and(equals(e.team_id, 2), and(and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-14 23:59:59.999999', 6, 'UTC'))), in(e.event, tuple('paid', 'user signed up')), ifNull(equals(e__group_0.properties___industry, 'positive'), 0)), or(ifNull(equals(step_0, 1), 0), ifNull(equals(step_1, 1), 0)))))
                 WHERE ifNull(equals(step_0, 1), 0)))
           GROUP BY aggregation_target,
                    steps
           HAVING ifNull(equals(steps, max_steps), isNull(steps)
                         and isNull(max_steps)))
        WHERE ifNull(in(steps, [1, 2]), 0)
        ORDER BY aggregation_target ASC) AS funnel_actors
     WHERE ifNull(equals(funnel_actors.steps, 2), 0)
     GROUP BY funnel_actors.actor_id
     ORDER BY funnel_actors.actor_id ASC) AS source ON equals(groups.key, source.actor_id)
  ORDER BY source.actor_id ASC
  LIMIT 101
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1
  '''
# ---
# name: TestClickhouseFunnelCorrelation.test_funnel_correlation_with_properties_and_groups_person_on_events_poe_v2.2
  '''
  SELECT source.actor_id AS actor_id
  FROM
    (SELECT groups.group_type_index AS index,
            groups.group_key AS key
     FROM groups
     WHERE equals(groups.team_id, 2)
     GROUP BY groups.group_type_index,
              groups.group_key) AS groups
  INNER JOIN
    (SELECT funnel_actors.actor_id AS actor_id,
            any(funnel_actors.matching_events) AS matching_events
     FROM
       (SELECT aggregation_target AS actor_id,
               final_matching_events AS matching_events,
               timestamp AS timestamp,
               steps AS steps,
               final_timestamp AS final_timestamp,
               first_timestamp AS first_timestamp
        FROM
          (SELECT aggregation_target AS aggregation_target,
                  steps AS steps,
                  avg(step_1_conversion_time) AS step_1_average_conversion_time_inner,
                  median(step_1_conversion_time) AS step_1_median_conversion_time_inner,
                  groupArray(10)(step_0_matching_event) AS step_0_matching_events,
                  groupArray(10)(step_1_matching_event) AS step_1_matching_events,
                  groupArray(10)(final_matching_event) AS final_matching_events,
                  argMax(latest_0, steps) AS timestamp,
                  argMax(latest_1, steps) AS final_timestamp,
                  argMax(latest_0, steps) AS first_timestamp
           FROM
             (SELECT aggregation_target AS aggregation_target,
                     steps AS steps,
                     max(steps) OVER (PARTITION BY aggregation_target) AS max_steps,
                                     step_1_conversion_time AS step_1_conversion_time,
                                     tuple(latest_0, uuid_0, `$session_id_0`, `$window_id_0`) AS step_0_matching_event,
                                     tuple(latest_1, uuid_1, `$session_id_1`, `$window_id_1`) AS step_1_matching_event,
                                     if(isNull(latest_0), tuple(NULL, NULL, NULL, NULL), if(isNull(latest_1), step_0_matching_event, step_1_matching_event)) AS final_matching_event,
                                     latest_0 AS latest_0,
                                     latest_1 AS latest_1,
                                     latest_0 AS latest_0
              FROM
                (SELECT aggregation_target AS aggregation_target,
                        timestamp AS timestamp,
                        step_0 AS step_0,
                        latest_0 AS latest_0,
                        uuid_0 AS uuid_0,
                        `$session_id_0` AS `$session_id_0`,
                        `$window_id_0` AS `$window_id_0`,
                        step_1 AS step_1,
                        latest_1 AS latest_1,
                        uuid_1 AS uuid_1,
                        `$session_id_1` AS `$session_id_1`,
                        `$window_id_1` AS `$window_id_1`,
                        if(and(ifNull(lessOrEquals(latest_0, latest_1), 0), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), 2, 1) AS steps,
                        if(and(isNotNull(latest_1), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), dateDiff('second', latest_0, latest_1), NULL) AS step_1_conversion_time,
                        tuple(latest_0, uuid_0, `$session_id_0`, `$window_id_0`) AS step_0_matching_event,
                        tuple(latest_1, uuid_1, `$session_id_1`, `$window_id_1`) AS step_1_matching_event,
                        if(isNull(latest_0), tuple(NULL, NULL, NULL, NULL), if(isNull(latest_1), step_0_matching_event, step_1_matching_event)) AS final_matching_event
                 FROM
                   (SELECT aggregation_target AS aggregation_target,
                           timestamp AS timestamp,
                           step_0 AS step_0,
                           latest_0 AS latest_0,
                           uuid_0 AS uuid_0,
                           `$session_id_0` AS `$session_id_0`,
                           `$window_id_0` AS `$window_id_0`,
                           step_1 AS step_1,
                           min(latest_1) OVER (PARTITION BY aggregation_target
                                               ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS latest_1,
                                              last_value(uuid_1) OVER (PARTITION BY aggregation_target
                                                                       ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS uuid_1,
                                                                      last_value(`$session_id_1`) OVER (PARTITION BY aggregation_target
                                                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS `$session_id_1`,
                                                                                                       last_value(`$window_id_1`) OVER (PARTITION BY aggregation_target
                                                                                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS `$window_id_1`
                    FROM
                      (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                              e.`$group_0` AS aggregation_target,
                              e.uuid AS uuid,
                              if(equals(e.event, 'user signed up'), 1, 0) AS step_0,
                              if(ifNull(equals(step_0, 1), 0), timestamp, NULL) AS latest_0,
                              if(ifNull(equals(step_0, 1), 0), uuid, NULL) AS uuid_0,
                              if(ifNull(equals(step_0, 1), 0), e.`$session_id`, NULL) AS `$session_id_0`,
                              if(ifNull(equals(step_0, 1), 0), e.`$window_id`, NULL) AS `$window_id_0`,
                              if(equals(e.event, 'paid'), 1, 0) AS step_1,
                              if(ifNull(equals(step_1, 1), 0), timestamp, NULL) AS latest_1,
                              if(ifNull(equals(step_1, 1), 0), uuid, NULL) AS uuid_1,
                              if(ifNull(equals(step_1, 1), 0), e.`$session_id`, NULL) AS `$session_id_1`,
                              if(ifNull(equals(step_1, 1), 0), e.`$window_id`, NULL) AS `$window_id_1`
                       FROM events AS e
                       LEFT JOIN
                         (SELECT argMax(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(groups.group_properties, 'industry'), ''), 'null'), '^"|"$', ''), groups._timestamp) AS properties___industry,
                                 groups.group_type_index AS index,
                                 groups.group_key AS key
                          FROM groups
                          WHERE and(equals(groups.team_id, 2), ifNull(equals(index, 0), 0))
                          GROUP BY groups.group_type_index,
                                   groups.group_key) AS e__group_0 ON equals(e.`$group_0`, e__group_0.key)
                       WHERE and(equals(e.team_id, 2), and(and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-14 23:59:59.999999', 6, 'UTC'))), in(e.event, tuple('paid', 'user signed up')), ifNull(equals(e__group_0.properties___industry, 'positive'), 0)), or(ifNull(equals(step_0, 1), 0), ifNull(equals(step_1, 1), 0)))))
                 WHERE ifNull(equals(step_0, 1), 0)))
           GROUP BY aggregation_target,
                    steps
           HAVING ifNull(equals(steps, max_steps), isNull(steps)
                         and isNull(max_steps)))
        WHERE ifNull(in(steps, [1, 2]), 0)
        ORDER BY aggregation_target ASC) AS funnel_actors
     WHERE ifNull(notEquals(funnel_actors.steps, 2), 1)
     GROUP BY funnel_actors.actor_id
     ORDER BY funnel_actors.actor_id ASC) AS source ON equals(groups.key, source.actor_id)
  ORDER BY source.actor_id ASC
  LIMIT 101
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1
  '''
# ---
# name: TestClickhouseFunnelCorrelation.test_funnel_correlation_with_properties_and_groups_person_on_events_poe_v2.3
  '''
  SELECT source.actor_id AS actor_id
  FROM
    (SELECT groups.group_type_index AS index,
            groups.group_key AS key
     FROM groups
     WHERE equals(groups.team_id, 2)
     GROUP BY groups.group_type_index,
              groups.group_key) AS groups
  INNER JOIN
    (SELECT funnel_actors.actor_id AS actor_id,
            any(funnel_actors.matching_events) AS matching_events
     FROM
       (SELECT aggregation_target AS actor_id,
               final_matching_events AS matching_events,
               timestamp AS timestamp,
               steps AS steps,
               final_timestamp AS final_timestamp,
               first_timestamp AS first_timestamp
        FROM
          (SELECT aggregation_target AS aggregation_target,
                  steps AS steps,
                  avg(step_1_conversion_time) AS step_1_average_conversion_time_inner,
                  median(step_1_conversion_time) AS step_1_median_conversion_time_inner,
                  groupArray(10)(step_0_matching_event) AS step_0_matching_events,
                  groupArray(10)(step_1_matching_event) AS step_1_matching_events,
                  groupArray(10)(final_matching_event) AS final_matching_events,
                  argMax(latest_0, steps) AS timestamp,
                  argMax(latest_1, steps) AS final_timestamp,
                  argMax(latest_0, steps) AS first_timestamp
           FROM
             (SELECT aggregation_target AS aggregation_target,
                     steps AS steps,
                     max(steps) OVER (PARTITION BY aggregation_target) AS max_steps,
                                     step_1_conversion_time AS step_1_conversion_time,
                                     tuple(latest_0, uuid_0, `$session_id_0`, `$window_id_0`) AS step_0_matching_event,
                                     tuple(latest_1, uuid_1, `$session_id_1`, `$window_id_1`) AS step_1_matching_event,
                                     if(isNull(latest_0), tuple(NULL, NULL, NULL, NULL), if(isNull(latest_1), step_0_matching_event, step_1_matching_event)) AS final_matching_event,
                                     latest_0 AS latest_0,
                                     latest_1 AS latest_1,
                                     latest_0 AS latest_0
              FROM
                (SELECT aggregation_target AS aggregation_target,
                        timestamp AS timestamp,
                        step_0 AS step_0,
                        latest_0 AS latest_0,
                        uuid_0 AS uuid_0,
                        `$session_id_0` AS `$session_id_0`,
                        `$window_id_0` AS `$window_id_0`,
                        step_1 AS step_1,
                        latest_1 AS latest_1,
                        uuid_1 AS uuid_1,
                        `$session_id_1` AS `$session_id_1`,
                        `$window_id_1` AS `$window_id_1`,
                        if(and(ifNull(lessOrEquals(latest_0, latest_1), 0), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), 2, 1) AS steps,
                        if(and(isNotNull(latest_1), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), dateDiff('second', latest_0, latest_1), NULL) AS step_1_conversion_time,
                        tuple(latest_0, uuid_0, `$session_id_0`, `$window_id_0`) AS step_0_matching_event,
                        tuple(latest_1, uuid_1, `$session_id_1`, `$window_id_1`) AS step_1_matching_event,
                        if(isNull(latest_0), tuple(NULL, NULL, NULL, NULL), if(isNull(latest_1), step_0_matching_event, step_1_matching_event)) AS final_matching_event
                 FROM
                   (SELECT aggregation_target AS aggregation_target,
                           timestamp AS timestamp,
                           step_0 AS step_0,
                           latest_0 AS latest_0,
                           uuid_0 AS uuid_0,
                           `$session_id_0` AS `$session_id_0`,
                           `$window_id_0` AS `$window_id_0`,
                           step_1 AS step_1,
                           min(latest_1) OVER (PARTITION BY aggregation_target
                                               ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS latest_1,
                                              last_value(uuid_1) OVER (PARTITION BY aggregation_target
                                                                       ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS uuid_1,
                                                                      last_value(`$session_id_1`) OVER (PARTITION BY aggregation_target
                                                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS `$session_id_1`,
                                                                                                       last_value(`$window_id_1`) OVER (PARTITION BY aggregation_target
                                                                                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS `$window_id_1`
                    FROM
                      (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                              e.`$group_0` AS aggregation_target,
                              e.uuid AS uuid,
                              if(equals(e.event, 'user signed up'), 1, 0) AS step_0,
                              if(ifNull(equals(step_0, 1), 0), timestamp, NULL) AS latest_0,
                              if(ifNull(equals(step_0, 1), 0), uuid, NULL) AS uuid_0,
                              if(ifNull(equals(step_0, 1), 0), e.`$session_id`, NULL) AS `$session_id_0`,
                              if(ifNull(equals(step_0, 1), 0), e.`$window_id`, NULL) AS `$window_id_0`,
                              if(equals(e.event, 'paid'), 1, 0) AS step_1,
                              if(ifNull(equals(step_1, 1), 0), timestamp, NULL) AS latest_1,
                              if(ifNull(equals(step_1, 1), 0), uuid, NULL) AS uuid_1,
                              if(ifNull(equals(step_1, 1), 0), e.`$session_id`, NULL) AS `$session_id_1`,
                              if(ifNull(equals(step_1, 1), 0), e.`$window_id`, NULL) AS `$window_id_1`
                       FROM events AS e
                       LEFT JOIN
                         (SELECT argMax(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(groups.group_properties, 'industry'), ''), 'null'), '^"|"$', ''), groups._timestamp) AS properties___industry,
                                 groups.group_type_index AS index,
                                 groups.group_key AS key
                          FROM groups
                          WHERE and(equals(groups.team_id, 2), ifNull(equals(index, 0), 0))
                          GROUP BY groups.group_type_index,
                                   groups.group_key) AS e__group_0 ON equals(e.`$group_0`, e__group_0.key)
                       WHERE and(equals(e.team_id, 2), and(and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-14 23:59:59.999999', 6, 'UTC'))), in(e.event, tuple('paid', 'user signed up')), ifNull(equals(e__group_0.properties___industry, 'negative'), 0)), or(ifNull(equals(step_0, 1), 0), ifNull(equals(step_1, 1), 0)))))
                 WHERE ifNull(equals(step_0, 1), 0)))
           GROUP BY aggregation_target,
                    steps
           HAVING ifNull(equals(steps, max_steps), isNull(steps)
                         and isNull(max_steps)))
        WHERE ifNull(in(steps, [1, 2]), 0)
        ORDER BY aggregation_target ASC) AS funnel_actors
     WHERE ifNull(equals(funnel_actors.steps, 2), 0)
     GROUP BY funnel_actors.actor_id
     ORDER BY funnel_actors.actor_id ASC) AS source ON equals(groups.key, source.actor_id)
  ORDER BY source.actor_id ASC
  LIMIT 101
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1
  '''
# ---
# name: TestClickhouseFunnelCorrelation.test_funnel_correlation_with_properties_and_groups_person_on_events_poe_v2.4
  '''
  SELECT source.actor_id AS actor_id
  FROM
    (SELECT groups.group_type_index AS index,
            groups.group_key AS key
     FROM groups
     WHERE equals(groups.team_id, 2)
     GROUP BY groups.group_type_index,
              groups.group_key) AS groups
  INNER JOIN
    (SELECT funnel_actors.actor_id AS actor_id,
            any(funnel_actors.matching_events) AS matching_events
     FROM
       (SELECT aggregation_target AS actor_id,
               final_matching_events AS matching_events,
               timestamp AS timestamp,
               steps AS steps,
               final_timestamp AS final_timestamp,
               first_timestamp AS first_timestamp
        FROM
          (SELECT aggregation_target AS aggregation_target,
                  steps AS steps,
                  avg(step_1_conversion_time) AS step_1_average_conversion_time_inner,
                  median(step_1_conversion_time) AS step_1_median_conversion_time_inner,
                  groupArray(10)(step_0_matching_event) AS step_0_matching_events,
                  groupArray(10)(step_1_matching_event) AS step_1_matching_events,
                  groupArray(10)(final_matching_event) AS final_matching_events,
                  argMax(latest_0, steps) AS timestamp,
                  argMax(latest_1, steps) AS final_timestamp,
                  argMax(latest_0, steps) AS first_timestamp
           FROM
             (SELECT aggregation_target AS aggregation_target,
                     steps AS steps,
                     max(steps) OVER (PARTITION BY aggregation_target) AS max_steps,
                                     step_1_conversion_time AS step_1_conversion_time,
                                     tuple(latest_0, uuid_0, `$session_id_0`, `$window_id_0`) AS step_0_matching_event,
                                     tuple(latest_1, uuid_1, `$session_id_1`, `$window_id_1`) AS step_1_matching_event,
                                     if(isNull(latest_0), tuple(NULL, NULL, NULL, NULL), if(isNull(latest_1), step_0_matching_event, step_1_matching_event)) AS final_matching_event,
                                     latest_0 AS latest_0,
                                     latest_1 AS latest_1,
                                     latest_0 AS latest_0
              FROM
                (SELECT aggregation_target AS aggregation_target,
                        timestamp AS timestamp,
                        step_0 AS step_0,
                        latest_0 AS latest_0,
                        uuid_0 AS uuid_0,
                        `$session_id_0` AS `$session_id_0`,
                        `$window_id_0` AS `$window_id_0`,
                        step_1 AS step_1,
                        latest_1 AS latest_1,
                        uuid_1 AS uuid_1,
                        `$session_id_1` AS `$session_id_1`,
                        `$window_id_1` AS `$window_id_1`,
                        if(and(ifNull(lessOrEquals(latest_0, latest_1), 0), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), 2, 1) AS steps,
                        if(and(isNotNull(latest_1), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), dateDiff('second', latest_0, latest_1), NULL) AS step_1_conversion_time,
                        tuple(latest_0, uuid_0, `$session_id_0`, `$window_id_0`) AS step_0_matching_event,
                        tuple(latest_1, uuid_1, `$session_id_1`, `$window_id_1`) AS step_1_matching_event,
                        if(isNull(latest_0), tuple(NULL, NULL, NULL, NULL), if(isNull(latest_1), step_0_matching_event, step_1_matching_event)) AS final_matching_event
                 FROM
                   (SELECT aggregation_target AS aggregation_target,
                           timestamp AS timestamp,
                           step_0 AS step_0,
                           latest_0 AS latest_0,
                           uuid_0 AS uuid_0,
                           `$session_id_0` AS `$session_id_0`,
                           `$window_id_0` AS `$window_id_0`,
                           step_1 AS step_1,
                           min(latest_1) OVER (PARTITION BY aggregation_target
                                               ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS latest_1,
                                              last_value(uuid_1) OVER (PARTITION BY aggregation_target
                                                                       ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS uuid_1,
                                                                      last_value(`$session_id_1`) OVER (PARTITION BY aggregation_target
                                                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS `$session_id_1`,
                                                                                                       last_value(`$window_id_1`) OVER (PARTITION BY aggregation_target
                                                                                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS `$window_id_1`
                    FROM
                      (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                              e.`$group_0` AS aggregation_target,
                              e.uuid AS uuid,
                              if(equals(e.event, 'user signed up'), 1, 0) AS step_0,
                              if(ifNull(equals(step_0, 1), 0), timestamp, NULL) AS latest_0,
                              if(ifNull(equals(step_0, 1), 0), uuid, NULL) AS uuid_0,
                              if(ifNull(equals(step_0, 1), 0), e.`$session_id`, NULL) AS `$session_id_0`,
                              if(ifNull(equals(step_0, 1), 0), e.`$window_id`, NULL) AS `$window_id_0`,
                              if(equals(e.event, 'paid'), 1, 0) AS step_1,
                              if(ifNull(equals(step_1, 1), 0), timestamp, NULL) AS latest_1,
                              if(ifNull(equals(step_1, 1), 0), uuid, NULL) AS uuid_1,
                              if(ifNull(equals(step_1, 1), 0), e.`$session_id`, NULL) AS `$session_id_1`,
                              if(ifNull(equals(step_1, 1), 0), e.`$window_id`, NULL) AS `$window_id_1`
                       FROM events AS e
                       LEFT JOIN
                         (SELECT argMax(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(groups.group_properties, 'industry'), ''), 'null'), '^"|"$', ''), groups._timestamp) AS properties___industry,
                                 groups.group_type_index AS index,
                                 groups.group_key AS key
                          FROM groups
                          WHERE and(equals(groups.team_id, 2), ifNull(equals(index, 0), 0))
                          GROUP BY groups.group_type_index,
                                   groups.group_key) AS e__group_0 ON equals(e.`$group_0`, e__group_0.key)
                       WHERE and(equals(e.team_id, 2), and(and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-14 23:59:59.999999', 6, 'UTC'))), in(e.event, tuple('paid', 'user signed up')), ifNull(equals(e__group_0.properties___industry, 'negative'), 0)), or(ifNull(equals(step_0, 1), 0), ifNull(equals(step_1, 1), 0)))))
                 WHERE ifNull(equals(step_0, 1), 0)))
           GROUP BY aggregation_target,
                    steps
           HAVING ifNull(equals(steps, max_steps), isNull(steps)
                         and isNull(max_steps)))
        WHERE ifNull(in(steps, [1, 2]), 0)
        ORDER BY aggregation_target ASC) AS funnel_actors
     WHERE ifNull(notEquals(funnel_actors.steps, 2), 1)
     GROUP BY funnel_actors.actor_id
     ORDER BY funnel_actors.actor_id ASC) AS source ON equals(groups.key, source.actor_id)
  ORDER BY source.actor_id ASC
  LIMIT 101
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1
  '''
# ---
# name: TestClickhouseFunnelCorrelation.test_funnel_correlation_with_properties_and_groups_person_on_events_poe_v2.5
  '''
  SELECT concat(ifNull(toString((aggregation_target_with_props.prop).1), ''), '::', ifNull(toString((aggregation_target_with_props.prop).2), '')) AS name,
         countIf(aggregation_target_with_props.actor_id, ifNull(equals(aggregation_target_with_props.steps, 2), 0)) AS success_count,
         countIf(aggregation_target_with_props.actor_id, ifNull(notEquals(aggregation_target_with_props.steps, 2), 1)) AS failure_count
  FROM
    (SELECT funnel_actors.actor_id AS actor_id,
            funnel_actors.steps AS steps,
            arrayJoin(JSONExtractKeysAndValues(groups_0.properties, 'String')) AS prop
     FROM
       (SELECT aggregation_target AS actor_id,
               timestamp AS timestamp,
               steps AS steps,
               final_timestamp AS final_timestamp,
               first_timestamp AS first_timestamp
        FROM
          (SELECT aggregation_target AS aggregation_target,
                  steps AS steps,
                  avg(step_1_conversion_time) AS step_1_average_conversion_time_inner,
                  median(step_1_conversion_time) AS step_1_median_conversion_time_inner,
                  argMax(latest_0, steps) AS timestamp,
                  argMax(latest_1, steps) AS final_timestamp,
                  argMax(latest_0, steps) AS first_timestamp
           FROM
             (SELECT aggregation_target AS aggregation_target,
                     steps AS steps,
                     max(steps) OVER (PARTITION BY aggregation_target) AS max_steps,
                                     step_1_conversion_time AS step_1_conversion_time,
                                     latest_0 AS latest_0,
                                     latest_1 AS latest_1,
                                     latest_0 AS latest_0
              FROM
                (SELECT aggregation_target AS aggregation_target,
                        timestamp AS timestamp,
                        step_0 AS step_0,
                        latest_0 AS latest_0,
                        step_1 AS step_1,
                        latest_1 AS latest_1,
                        if(and(ifNull(lessOrEquals(latest_0, latest_1), 0), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), 2, 1) AS steps,
                        if(and(isNotNull(latest_1), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), dateDiff('second', latest_0, latest_1), NULL) AS step_1_conversion_time
                 FROM
                   (SELECT aggregation_target AS aggregation_target,
                           timestamp AS timestamp,
                           step_0 AS step_0,
                           latest_0 AS latest_0,
                           step_1 AS step_1,
                           min(latest_1) OVER (PARTITION BY aggregation_target
                                               ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS latest_1
                    FROM
                      (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                              e.`$group_0` AS aggregation_target,
                              if(equals(e.event, 'user signed up'), 1, 0) AS step_0,
                              if(ifNull(equals(step_0, 1), 0), timestamp, NULL) AS latest_0,
                              if(equals(e.event, 'paid'), 1, 0) AS step_1,
                              if(ifNull(equals(step_1, 1), 0), timestamp, NULL) AS latest_1
                       FROM events AS e
                       WHERE and(equals(e.team_id, 2), and(and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-14 23:59:59.999999', 6, 'UTC'))), in(e.event, tuple('paid', 'user signed up'))), or(ifNull(equals(step_0, 1), 0), ifNull(equals(step_1, 1), 0)))))
                 WHERE ifNull(equals(step_0, 1), 0)))
           GROUP BY aggregation_target,
                    steps
           HAVING ifNull(equals(steps, max_steps), isNull(steps)
                         and isNull(max_steps)))
        WHERE ifNull(in(steps, [1, 2]), 0)
        ORDER BY aggregation_target ASC) AS funnel_actors
     LEFT JOIN
       (SELECT groups.key AS key,
               groups.properties AS properties
        FROM
          (SELECT argMax(groups.group_properties, groups._timestamp) AS properties,
                  groups.group_type_index AS index,
                  groups.group_key AS key
           FROM groups
           WHERE equals(groups.team_id, 2)
           GROUP BY groups.group_type_index,
                    groups.group_key) AS groups
        WHERE ifNull(equals(groups.index, 0), 0)) AS groups_0 ON equals(funnel_actors.actor_id, groups_0.key)) AS aggregation_target_with_props
  GROUP BY (aggregation_target_with_props.prop).1, (aggregation_target_with_props.prop).2
  HAVING ifNull(notIn((aggregation_target_with_props.prop).1, []), 0)
  LIMIT 100
  UNION ALL
  SELECT 'Total_Values_In_Query' AS name,
         countIf(funnel_actors.actor_id, ifNull(equals(funnel_actors.steps, 2), 0)) AS success_count,
         countIf(funnel_actors.actor_id, ifNull(notEquals(funnel_actors.steps, 2), 1)) AS failure_count
  FROM
    (SELECT aggregation_target AS actor_id,
            timestamp AS timestamp,
            steps AS steps,
            final_timestamp AS final_timestamp,
            first_timestamp AS first_timestamp
     FROM
       (SELECT aggregation_target AS aggregation_target,
               steps AS steps,
               avg(step_1_conversion_time) AS step_1_average_conversion_time_inner,
               median(step_1_conversion_time) AS step_1_median_conversion_time_inner,
               argMax(latest_0, steps) AS timestamp,
               argMax(latest_1, steps) AS final_timestamp,
               argMax(latest_0, steps) AS first_timestamp
        FROM
          (SELECT aggregation_target AS aggregation_target,
                  steps AS steps,
                  max(steps) OVER (PARTITION BY aggregation_target) AS max_steps,
                                  step_1_conversion_time AS step_1_conversion_time,
                                  latest_0 AS latest_0,
                                  latest_1 AS latest_1,
                                  latest_0 AS latest_0
           FROM
             (SELECT aggregation_target AS aggregation_target,
                     timestamp AS timestamp,
                     step_0 AS step_0,
                     latest_0 AS latest_0,
                     step_1 AS step_1,
                     latest_1 AS latest_1,
                     if(and(ifNull(lessOrEquals(latest_0, latest_1), 0), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), 2, 1) AS steps,
                     if(and(isNotNull(latest_1), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), dateDiff('second', latest_0, latest_1), NULL) AS step_1_conversion_time
              FROM
                (SELECT aggregation_target AS aggregation_target,
                        timestamp AS timestamp,
                        step_0 AS step_0,
                        latest_0 AS latest_0,
                        step_1 AS step_1,
                        min(latest_1) OVER (PARTITION BY aggregation_target
                                            ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS latest_1
                 FROM
                   (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                           e.`$group_0` AS aggregation_target,
                           if(equals(e.event, 'user signed up'), 1, 0) AS step_0,
                           if(ifNull(equals(step_0, 1), 0), timestamp, NULL) AS latest_0,
                           if(equals(e.event, 'paid'), 1, 0) AS step_1,
                           if(ifNull(equals(step_1, 1), 0), timestamp, NULL) AS latest_1
                    FROM events AS e
                    WHERE and(equals(e.team_id, 2), and(and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-14 23:59:59.999999', 6, 'UTC'))), in(e.event, tuple('paid', 'user signed up'))), or(ifNull(equals(step_0, 1), 0), ifNull(equals(step_1, 1), 0)))))
              WHERE ifNull(equals(step_0, 1), 0)))
        GROUP BY aggregation_target,
                 steps
        HAVING ifNull(equals(steps, max_steps), isNull(steps)
                      and isNull(max_steps)))
     WHERE ifNull(in(steps, [1, 2]), 0)
     ORDER BY aggregation_target ASC) AS funnel_actors
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '''
# ---
