# serializer version: 1
# name: TestTrendsPersons.test_trends_all_cohort_breakdown_persons_leftjoin.1
  '''
  /* cohort_calculation: */
  SELECT count(DISTINCT person_id)
  FROM cohortpeople
  WHERE team_id = 2
    AND cohort_id = 2
    AND version = 0
  '''
# ---
# name: TestTrendsPersons.test_trends_all_cohort_breakdown_persons_leftjoin.2
  '''
  SELECT filterable_persons.id AS id,
         filterable_persons.created_at AS created_at,
         source.event_count AS event_count,
         source.matching_events AS matching_events
  FROM
    (SELECT actor_id AS actor_id,
            count() AS event_count,
            groupUniqArray(100)(tuple(timestamp, uuid, `$session_id`, `$window_id`)) AS matching_events
     FROM
       (SELECT e__pdi.person_id AS actor_id,
               toTimeZone(e.timestamp, 'UTC') AS timestamp,
               e.uuid AS uuid,
               e.`$session_id` AS `$session_id`,
               e.`$window_id` AS `$window_id`
        FROM events AS e
        INNER JOIN
          (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                  person_distinct_id2.distinct_id AS distinct_id
           FROM person_distinct_id2
           WHERE equals(person_distinct_id2.team_id, 2)
           GROUP BY person_distinct_id2.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
        LEFT JOIN
          (SELECT cohortpeople.person_id AS person_id,
                  1 AS matched
           FROM cohortpeople
           WHERE and(equals(cohortpeople.team_id, 2), equals(cohortpeople.cohort_id, 2), equals(cohortpeople.version, 0))) AS in_cohort__46 ON equals(in_cohort__46.person_id, e__pdi.person_id)
        WHERE and(equals(e.team_id, 2), equals(e.event, '$pageview'), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2023-05-01 00:00:00.000000', 6, 'UTC')), less(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2023-05-02 00:00:00.000000', 6, 'UTC')), ifNull(equals(in_cohort__46.matched, 1), 0)))
     GROUP BY actor_id SETTINGS use_query_cache=1,
                                query_cache_ttl=600) AS source
  INNER JOIN
    (SELECT argMax(toTimeZone(person.created_at, 'UTC'), person.version) AS created_at,
            person.id AS id
     FROM person
     WHERE and(equals(person.team_id, 2), in(id,
                                               (SELECT source.actor_id AS actor_id
                                                FROM
                                                  (SELECT actor_id AS actor_id, count() AS event_count, groupUniqArray(100)(tuple(timestamp, uuid, `$session_id`, `$window_id`)) AS matching_events
                                                   FROM
                                                     (SELECT e__pdi.person_id AS actor_id, toTimeZone(e.timestamp, 'UTC') AS timestamp, e.uuid AS uuid, e.`$session_id` AS `$session_id`, e.`$window_id` AS `$window_id`
                                                      FROM events AS e
                                                      INNER JOIN
                                                        (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id, person_distinct_id2.distinct_id AS distinct_id
                                                         FROM person_distinct_id2
                                                         WHERE equals(person_distinct_id2.team_id, 2)
                                                         GROUP BY person_distinct_id2.distinct_id
                                                         HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
                                                      LEFT JOIN
                                                        (SELECT cohortpeople.person_id AS person_id, 1 AS matched
                                                         FROM cohortpeople
                                                         WHERE and(equals(cohortpeople.team_id, 2), equals(cohortpeople.cohort_id, 2), equals(cohortpeople.version, 0))) AS in_cohort__46 ON equals(in_cohort__46.person_id, e__pdi.person_id)
                                                      WHERE and(equals(e.team_id, 2), equals(e.event, '$pageview'), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2023-05-01 00:00:00.000000', 6, 'UTC')), less(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2023-05-02 00:00:00.000000', 6, 'UTC')), ifNull(equals(in_cohort__46.matched, 1), 0)))
                                                   GROUP BY actor_id SETTINGS use_query_cache=1, query_cache_ttl=600) AS source)))
     GROUP BY person.id
     HAVING and(ifNull(equals(argMax(person.is_deleted, person.version), 0), 0), ifNull(less(argMax(toTimeZone(person.created_at, 'UTC'), person.version), plus(now64(6, 'UTC'), toIntervalDay(1))), 0)) SETTINGS optimize_aggregation_in_order=1) AS filterable_persons ON equals(filterable_persons.id, source.actor_id)
  ORDER BY source.event_count DESC
  LIMIT 101
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestTrendsPersons.test_trends_all_cohort_breakdown_persons_leftjoin.3
  '''
  SELECT DISTINCT session_replay_events.session_id AS session_id
  FROM session_replay_events
  WHERE and(equals(session_replay_events.team_id, 2), ifNull(greaterOrEquals(toTimeZone(session_replay_events.min_first_timestamp, 'UTC'), minus(toDateTime64('2024-06-22 05:15:07.580097', 6, 'UTC'), toIntervalDay(21))), 0), in(session_replay_events.session_id, ['']))
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=0,
                     max_ast_elements=1000000,
                     max_expanded_ast_elements=1000000,
                     max_query_size=524288,
                     max_bytes_before_external_group_by=0
  '''
# ---
# name: TestTrendsPersons.test_trends_all_cohort_breakdown_persons_leftjoin.4
  '''
  SELECT filterable_persons.id AS id,
         filterable_persons.created_at AS created_at,
         source.event_count AS event_count,
         source.matching_events AS matching_events
  FROM
    (SELECT actor_id AS actor_id,
            count() AS event_count,
            groupUniqArray(100)(tuple(timestamp, uuid, `$session_id`, `$window_id`)) AS matching_events
     FROM
       (SELECT e__pdi.person_id AS actor_id,
               toTimeZone(e.timestamp, 'UTC') AS timestamp,
               e.uuid AS uuid,
               e.`$session_id` AS `$session_id`,
               e.`$window_id` AS `$window_id`
        FROM events AS e
        INNER JOIN
          (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                  person_distinct_id2.distinct_id AS distinct_id
           FROM person_distinct_id2
           WHERE equals(person_distinct_id2.team_id, 2)
           GROUP BY person_distinct_id2.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
        WHERE and(equals(e.team_id, 2), equals(e.event, '$pageview'), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2023-05-01 00:00:00.000000', 6, 'UTC')), less(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2023-05-02 00:00:00.000000', 6, 'UTC'))))
     GROUP BY actor_id SETTINGS use_query_cache=1,
                                query_cache_ttl=600) AS source
  INNER JOIN
    (SELECT argMax(toTimeZone(person.created_at, 'UTC'), person.version) AS created_at,
            person.id AS id
     FROM person
     WHERE and(equals(person.team_id, 2), in(id,
                                               (SELECT source.actor_id AS actor_id
                                                FROM
                                                  (SELECT actor_id AS actor_id, count() AS event_count, groupUniqArray(100)(tuple(timestamp, uuid, `$session_id`, `$window_id`)) AS matching_events
                                                   FROM
                                                     (SELECT e__pdi.person_id AS actor_id, toTimeZone(e.timestamp, 'UTC') AS timestamp, e.uuid AS uuid, e.`$session_id` AS `$session_id`, e.`$window_id` AS `$window_id`
                                                      FROM events AS e
                                                      INNER JOIN
                                                        (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id, person_distinct_id2.distinct_id AS distinct_id
                                                         FROM person_distinct_id2
                                                         WHERE equals(person_distinct_id2.team_id, 2)
                                                         GROUP BY person_distinct_id2.distinct_id
                                                         HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
                                                      WHERE and(equals(e.team_id, 2), equals(e.event, '$pageview'), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2023-05-01 00:00:00.000000', 6, 'UTC')), less(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2023-05-02 00:00:00.000000', 6, 'UTC'))))
                                                   GROUP BY actor_id SETTINGS use_query_cache=1, query_cache_ttl=600) AS source)))
     GROUP BY person.id
     HAVING and(ifNull(equals(argMax(person.is_deleted, person.version), 0), 0), ifNull(less(argMax(toTimeZone(person.created_at, 'UTC'), person.version), plus(now64(6, 'UTC'), toIntervalDay(1))), 0)) SETTINGS optimize_aggregation_in_order=1) AS filterable_persons ON equals(filterable_persons.id, source.actor_id)
  ORDER BY source.event_count DESC
  LIMIT 101
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestTrendsPersons.test_trends_all_cohort_breakdown_persons_leftjoin.5
  '''
  SELECT DISTINCT session_replay_events.session_id AS session_id
  FROM session_replay_events
  WHERE and(equals(session_replay_events.team_id, 2), ifNull(greaterOrEquals(toTimeZone(session_replay_events.min_first_timestamp, 'UTC'), minus(toDateTime64('2024-06-22 05:15:07.850995', 6, 'UTC'), toIntervalDay(21))), 0), in(session_replay_events.session_id, ['']))
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=0,
                     max_ast_elements=1000000,
                     max_expanded_ast_elements=1000000,
                     max_query_size=524288,
                     max_bytes_before_external_group_by=0
  '''
# ---
