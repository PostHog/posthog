# name: TestTrends.test_action_filtering_with_cohort
  '
  
  SELECT count(DISTINCT person_id)
  FROM cohortpeople
  WHERE team_id = 2
    AND cohort_id = 2
    AND version = NULL
  '
---
# name: TestTrends.test_action_filtering_with_cohort.1
  '
  
  SELECT count(DISTINCT person_id)
  FROM cohortpeople
  WHERE team_id = 2
    AND cohort_id = 2
    AND version = 0
  '
---
# name: TestTrends.test_action_filtering_with_cohort.2
  '
  
  SELECT count(DISTINCT person_id)
  FROM cohortpeople
  WHERE team_id = 2
    AND cohort_id = 2
    AND version = 0
  '
---
# name: TestTrends.test_action_filtering_with_cohort.3
  '
  
  SELECT count(DISTINCT person_id)
  FROM cohortpeople
  WHERE team_id = 2
    AND cohort_id = 2
    AND version = 2
  '
---
# name: TestTrends.test_action_filtering_with_cohort.4
  '
  /* celery:posthog.tasks.calculate_cohort.clear_stale_cohort */
  SELECT count()
  FROM cohortpeople
  WHERE team_id = 2
    AND cohort_id = 2
    AND version < 2
  '
---
# name: TestTrends.test_action_filtering_with_cohort.5
  '
  SELECT groupArray(day_start) AS date,
         groupArray(count) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start
     FROM
       (SELECT 0 AS total,
               minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-07 23:59:59', 6, 'UTC'))), toIntervalDay(numbers.number)) AS day_start
        FROM numbers(coalesce(dateDiff('day', assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC')), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-07 23:59:59', 6, 'UTC'))), 0)) AS numbers
        UNION ALL SELECT 0 AS total,
                         toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC'))) AS day_start
        UNION ALL SELECT count(e.uuid) AS total,
                         toStartOfDay(toTimeZone(e.timestamp, 'UTC')) AS day_start
        FROM events AS e SAMPLE 1
        INNER JOIN
          (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                  person_distinct_id2.distinct_id AS distinct_id
           FROM person_distinct_id2
           WHERE equals(person_distinct_id2.team_id, 2)
           GROUP BY person_distinct_id2.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
        INNER JOIN
          (SELECT person.id,
                  replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, '$bool_prop'), ''), 'null'), '^"|"$', '') AS `properties___$bool_prop`
           FROM person
           WHERE and(equals(person.team_id, 2), ifNull(in(tuple(person.id, person.version),
                                                            (SELECT person.id, max(person.version) AS version
                                                             FROM person
                                                             WHERE equals(person.team_id, 2)
                                                             GROUP BY person.id
                                                             HAVING ifNull(equals(argMax(person.is_deleted, person.version), 0), 0))), 0)) SETTINGS optimize_aggregation_in_order=1) AS e__pdi__person ON equals(e__pdi.person_id, e__pdi__person.id)
        WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-07 23:59:59', 6, 'UTC'))), ifNull(equals(e__pdi__person.`properties___$bool_prop`, 'x'), 0), and(equals(e.event, 'sign up'), ifNull(in(e__pdi.person_id,
                                                                                                                                                                                                                                                                                                                                                                                                                                     (SELECT cohortpeople.person_id
                                                                                                                                                                                                                                                                                                                                                                                                                                      FROM cohortpeople
                                                                                                                                                                                                                                                                                                                                                                                                                                      WHERE and(equals(cohortpeople.team_id, 2), equals(cohortpeople.cohort_id, 4))
                                                                                                                                                                                                                                                                                                                                                                                                                                      GROUP BY cohortpeople.person_id, cohortpeople.cohort_id, cohortpeople.version
                                                                                                                                                                                                                                                                                                                                                                                                                                      HAVING ifNull(greater(sum(cohortpeople.sign), 0), 0))), 0)))
        GROUP BY day_start)
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY sum(count) DESC
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_action_filtering_with_cohort_poe_v2
  '
  
  SELECT count(DISTINCT person_id)
  FROM cohortpeople
  WHERE team_id = 2
    AND cohort_id = 2
    AND version = NULL
  '
---
# name: TestTrends.test_action_filtering_with_cohort_poe_v2.1
  '
  
  SELECT count(DISTINCT person_id)
  FROM cohortpeople
  WHERE team_id = 2
    AND cohort_id = 2
    AND version = 0
  '
---
# name: TestTrends.test_action_filtering_with_cohort_poe_v2.2
  '
  
  SELECT count(DISTINCT person_id)
  FROM cohortpeople
  WHERE team_id = 2
    AND cohort_id = 2
    AND version = 0
  '
---
# name: TestTrends.test_action_filtering_with_cohort_poe_v2.3
  '
  
  SELECT count(DISTINCT person_id)
  FROM cohortpeople
  WHERE team_id = 2
    AND cohort_id = 2
    AND version = 2
  '
---
# name: TestTrends.test_action_filtering_with_cohort_poe_v2.4
  '
  /* celery:posthog.tasks.calculate_cohort.clear_stale_cohort */
  SELECT count()
  FROM cohortpeople
  WHERE team_id = 2
    AND cohort_id = 2
    AND version < 2
  '
---
# name: TestTrends.test_action_filtering_with_cohort_poe_v2.5
  '
  SELECT groupArray(day_start) AS date,
         groupArray(count) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start
     FROM
       (SELECT 0 AS total,
               minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-07 23:59:59', 6, 'UTC'))), toIntervalDay(numbers.number)) AS day_start
        FROM numbers(coalesce(dateDiff('day', assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC')), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-07 23:59:59', 6, 'UTC'))), 0)) AS numbers
        UNION ALL SELECT 0 AS total,
                         toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC'))) AS day_start
        UNION ALL SELECT count(e.uuid) AS total,
                         toStartOfDay(toTimeZone(e.timestamp, 'UTC')) AS day_start
        FROM events AS e SAMPLE 1
        LEFT OUTER JOIN
          (SELECT argMax(person_overrides.override_person_id, person_overrides.version) AS override_person_id,
                  person_overrides.old_person_id AS old_person_id
           FROM person_overrides
           WHERE equals(person_overrides.team_id, 2)
           GROUP BY person_overrides.old_person_id) AS e__override ON equals(e.person_id, e__override.old_person_id)
        WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-07 23:59:59', 6, 'UTC'))), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.person_properties, '$bool_prop'), ''), 'null'), '^"|"$', ''), 'x'), 0), and(equals(e.event, 'sign up'), ifNull(in(ifNull(nullIf(e__override.override_person_id, '00000000-0000-0000-0000-000000000000'), e.person_id),
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         (SELECT cohortpeople.person_id
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          FROM cohortpeople
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          WHERE and(equals(cohortpeople.team_id, 2), equals(cohortpeople.cohort_id, 5))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          GROUP BY cohortpeople.person_id, cohortpeople.cohort_id, cohortpeople.version
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          HAVING ifNull(greater(sum(cohortpeople.sign), 0), 0))), 0)))
        GROUP BY day_start)
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY sum(count) DESC
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_breakdown_by_group_props_person_on_events
  '
  SELECT groupArray(value)
  FROM
    (SELECT e__group_0.properties___industry AS value,
            count(e.uuid) AS count
     FROM events AS e
     LEFT JOIN
       (SELECT argMax(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(groups.group_properties, 'industry'), ''), 'null'), '^"|"$', ''), groups._timestamp) AS properties___industry,
               groups.group_type_index AS index,
               groups.group_key AS key
        FROM groups
        WHERE and(equals(groups.team_id, 2), ifNull(equals(index, 0), 0))
        GROUP BY groups.group_type_index,
                 groups.group_key) AS e__group_0 ON equals(e.`$group_0`, e__group_0.key)
     WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-12 23:59:59', 6, 'UTC'))), equals(e.event, 'sign up'))
     GROUP BY value
     ORDER BY count DESC, value DESC
     LIMIT 25)
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_breakdown_by_group_props_person_on_events.1
  '
  SELECT groupArray(day_start) AS date,
         groupArray(count) AS total,
         ifNull(toString(breakdown_value), '') AS breakdown_value
  FROM
    (SELECT sum(total) AS count,
            day_start,
            breakdown_value
     FROM
       (SELECT 0 AS total,
               ticks.day_start AS day_start,
               sec.breakdown_value
        FROM
          (SELECT minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-12 23:59:59', 6, 'UTC'))), toIntervalDay(numbers.number)) AS day_start
           FROM numbers(coalesce(dateDiff('day', assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC')), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-12 23:59:59', 6, 'UTC'))), 0)) AS numbers
           UNION ALL SELECT toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC'))) AS day_start) AS ticks
        CROSS JOIN
          (SELECT breakdown_value
           FROM
             (SELECT [NULL, 'finance', 'technology'] AS breakdown_value) ARRAY
           JOIN breakdown_value AS breakdown_value) AS sec
        ORDER BY sec.breakdown_value ASC, day_start ASC
        UNION ALL SELECT count(e.uuid) AS total,
                         toStartOfDay(toTimeZone(e.timestamp, 'UTC')) AS day_start,
                         e__group_0.properties___industry AS breakdown_value
        FROM events AS e SAMPLE 1
        LEFT JOIN
          (SELECT argMax(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(groups.group_properties, 'industry'), ''), 'null'), '^"|"$', ''), groups._timestamp) AS properties___industry,
                  groups.group_type_index AS index,
                  groups.group_key AS key
           FROM groups
           WHERE and(equals(groups.team_id, 2), ifNull(equals(index, 0), 0))
           GROUP BY groups.group_type_index,
                    groups.group_key) AS e__group_0 ON equals(e.`$group_0`, e__group_0.key)
        WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-12 23:59:59', 6, 'UTC'))), equals(e.event, 'sign up'), or(isNull(e__group_0.properties___industry), ifNull(equals(e__group_0.properties___industry, 'finance'), 0), ifNull(equals(e__group_0.properties___industry, 'technology'), 0)))
        GROUP BY day_start,
                 breakdown_value)
     GROUP BY day_start,
              breakdown_value
     ORDER BY day_start ASC, breakdown_value ASC)
  GROUP BY breakdown_value
  ORDER BY sum(count) DESC, breakdown_value ASC
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_breakdown_by_group_props_person_on_events.2
  '
  /* user_id:0 request:_snapshot_ */
  SELECT person_id AS actor_id,
         count() AS actor_value
  FROM
    (SELECT e.timestamp as timestamp,
            e.person_id as person_id,
            e.distinct_id as distinct_id,
            e.team_id as team_id
     FROM events e
     LEFT JOIN
       (SELECT group_key,
               argMax(group_properties, _timestamp) AS group_properties_0
        FROM groups
        WHERE team_id = 2
          AND group_type_index = 0
        GROUP BY group_key) groups_0 ON "$group_0" == groups_0.group_key
     WHERE team_id = 2
       AND event = 'sign up'
       AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-02 00:00:00', 'UTC')
       AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-02 23:59:59', 'UTC')
       AND (has(['technology'], replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '')))
       AND notEmpty(e.person_id) )
  GROUP BY actor_id
  ORDER BY actor_value DESC,
           actor_id DESC
  LIMIT 100
  OFFSET 0
  '
---
# name: TestTrends.test_breakdown_by_group_props_with_person_filter_person_on_events
  '
  SELECT groupArray(value)
  FROM
    (SELECT e__group_0.properties___industry AS value,
            count(e.uuid) AS count
     FROM events AS e
     LEFT JOIN
       (SELECT argMax(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(groups.group_properties, 'industry'), ''), 'null'), '^"|"$', ''), groups._timestamp) AS properties___industry,
               groups.group_type_index AS index,
               groups.group_key AS key
        FROM groups
        WHERE and(equals(groups.team_id, 2), ifNull(equals(index, 0), 0))
        GROUP BY groups.group_type_index,
                 groups.group_key) AS e__group_0 ON equals(e.`$group_0`, e__group_0.key)
     WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-12 23:59:59', 6, 'UTC'))), equals(e.event, 'sign up'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.person_properties, 'key'), ''), 'null'), '^"|"$', ''), 'value'), 0))
     GROUP BY value
     ORDER BY count DESC, value DESC
     LIMIT 25)
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_breakdown_by_group_props_with_person_filter_person_on_events.1
  '
  SELECT groupArray(day_start) AS date,
         groupArray(count) AS total,
         ifNull(toString(breakdown_value), '') AS breakdown_value
  FROM
    (SELECT sum(total) AS count,
            day_start,
            breakdown_value
     FROM
       (SELECT 0 AS total,
               ticks.day_start AS day_start,
               sec.breakdown_value
        FROM
          (SELECT minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-12 23:59:59', 6, 'UTC'))), toIntervalDay(numbers.number)) AS day_start
           FROM numbers(coalesce(dateDiff('day', assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC')), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-12 23:59:59', 6, 'UTC'))), 0)) AS numbers
           UNION ALL SELECT toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC'))) AS day_start) AS ticks
        CROSS JOIN
          (SELECT breakdown_value
           FROM
             (SELECT [NULL, 'finance'] AS breakdown_value) ARRAY
           JOIN breakdown_value AS breakdown_value) AS sec
        ORDER BY sec.breakdown_value ASC, day_start ASC
        UNION ALL SELECT count(e.uuid) AS total,
                         toStartOfDay(toTimeZone(e.timestamp, 'UTC')) AS day_start,
                         e__group_0.properties___industry AS breakdown_value
        FROM events AS e SAMPLE 1
        LEFT JOIN
          (SELECT argMax(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(groups.group_properties, 'industry'), ''), 'null'), '^"|"$', ''), groups._timestamp) AS properties___industry,
                  groups.group_type_index AS index,
                  groups.group_key AS key
           FROM groups
           WHERE and(equals(groups.team_id, 2), ifNull(equals(index, 0), 0))
           GROUP BY groups.group_type_index,
                    groups.group_key) AS e__group_0 ON equals(e.`$group_0`, e__group_0.key)
        WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-12 23:59:59', 6, 'UTC'))), equals(e.event, 'sign up'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.person_properties, 'key'), ''), 'null'), '^"|"$', ''), 'value'), 0), or(isNull(e__group_0.properties___industry), ifNull(equals(e__group_0.properties___industry, 'finance'), 0)))
        GROUP BY day_start,
                 breakdown_value)
     GROUP BY day_start,
              breakdown_value
     ORDER BY day_start ASC, breakdown_value ASC)
  GROUP BY breakdown_value
  ORDER BY sum(count) DESC, breakdown_value ASC
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_breakdown_filtering_with_properties_in_new_format
  '
  SELECT groupArray(value)
  FROM
    (SELECT replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$current_url'), ''), 'null'), '^"|"$', '') AS value,
            count(e.uuid) AS count
     FROM events AS e
     WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-22 13:01:01', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 23:59:59', 6, 'UTC'))), equals(e.event, 'sign up'), or(ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$browser'), ''), 'null'), '^"|"$', ''), 'Firefox'), 0), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$os'), ''), 'null'), '^"|"$', ''), 'Windows'), 0)), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$os'), ''), 'null'), '^"|"$', ''), 'Mac'), 0))
     GROUP BY value
     ORDER BY count DESC, value DESC
     LIMIT 25)
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_breakdown_filtering_with_properties_in_new_format.1
  '
  SELECT groupArray(day_start) AS date,
         groupArray(count) AS total,
         ifNull(toString(breakdown_value), '') AS breakdown_value
  FROM
    (SELECT sum(total) AS count,
            day_start,
            breakdown_value
     FROM
       (SELECT 0 AS total,
               ticks.day_start AS day_start,
               sec.breakdown_value
        FROM
          (SELECT minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 23:59:59', 6, 'UTC'))), toIntervalDay(numbers.number)) AS day_start
           FROM numbers(coalesce(dateDiff('day', assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-22 13:01:01', 6, 'UTC')), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 23:59:59', 6, 'UTC'))), 0)) AS numbers
           UNION ALL SELECT toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-22 13:01:01', 6, 'UTC'))) AS day_start) AS ticks
        CROSS JOIN
          (SELECT breakdown_value
           FROM
             (SELECT [NULL, 'second url'] AS breakdown_value) ARRAY
           JOIN breakdown_value AS breakdown_value) AS sec
        ORDER BY sec.breakdown_value ASC, day_start ASC
        UNION ALL SELECT count(e.uuid) AS total,
                         toStartOfDay(toTimeZone(e.timestamp, 'UTC')) AS day_start,
                         replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$current_url'), ''), 'null'), '^"|"$', '') AS breakdown_value
        FROM events AS e SAMPLE 1
        WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-22 13:01:01', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 23:59:59', 6, 'UTC'))), equals(e.event, 'sign up'), or(ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$browser'), ''), 'null'), '^"|"$', ''), 'Firefox'), 0), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$os'), ''), 'null'), '^"|"$', ''), 'Windows'), 0)), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$os'), ''), 'null'), '^"|"$', ''), 'Mac'), 0), or(isNull(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$current_url'), ''), 'null'), '^"|"$', '')), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$current_url'), ''), 'null'), '^"|"$', ''), 'second url'), 0)))
        GROUP BY day_start,
                 breakdown_value)
     GROUP BY day_start,
              breakdown_value
     ORDER BY day_start ASC, breakdown_value ASC)
  GROUP BY breakdown_value
  ORDER BY sum(count) DESC, breakdown_value ASC
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_breakdown_filtering_with_properties_in_new_format.2
  '
  SELECT groupArray(value)
  FROM
    (SELECT replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$current_url'), ''), 'null'), '^"|"$', '') AS value,
            count(e.uuid) AS count
     FROM events AS e
     WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-22 13:01:01', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 23:59:59', 6, 'UTC'))), equals(e.event, 'sign up'), and(ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$browser'), ''), 'null'), '^"|"$', ''), 'Firefox'), 0), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$os'), ''), 'null'), '^"|"$', ''), 'Windows'), 0)), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$os'), ''), 'null'), '^"|"$', ''), 'Mac'), 0))
     GROUP BY value
     ORDER BY count DESC, value DESC
     LIMIT 25)
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_breakdown_filtering_with_properties_in_new_format.3
  '
  SELECT groupArray(day_start) AS date,
         groupArray(count) AS total,
         ifNull(toString(breakdown_value), '') AS breakdown_value
  FROM
    (SELECT sum(total) AS count,
            day_start,
            breakdown_value
     FROM
       (SELECT 0 AS total,
               ticks.day_start AS day_start,
               sec.breakdown_value
        FROM
          (SELECT minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 23:59:59', 6, 'UTC'))), toIntervalDay(numbers.number)) AS day_start
           FROM numbers(coalesce(dateDiff('day', assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-22 13:01:01', 6, 'UTC')), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 23:59:59', 6, 'UTC'))), 0)) AS numbers
           UNION ALL SELECT toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-22 13:01:01', 6, 'UTC'))) AS day_start) AS ticks
        CROSS JOIN
          (SELECT breakdown_value
           FROM
             (SELECT [NULL] AS breakdown_value) ARRAY
           JOIN breakdown_value AS breakdown_value) AS sec
        ORDER BY sec.breakdown_value ASC, day_start ASC
        UNION ALL SELECT count(e.uuid) AS total,
                         toStartOfDay(toTimeZone(e.timestamp, 'UTC')) AS day_start,
                         replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$current_url'), ''), 'null'), '^"|"$', '') AS breakdown_value
        FROM events AS e SAMPLE 1
        WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-22 13:01:01', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 23:59:59', 6, 'UTC'))), equals(e.event, 'sign up'), and(ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$browser'), ''), 'null'), '^"|"$', ''), 'Firefox'), 0), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$os'), ''), 'null'), '^"|"$', ''), 'Windows'), 0)), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$os'), ''), 'null'), '^"|"$', ''), 'Mac'), 0), isNull(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$current_url'), ''), 'null'), '^"|"$', '')))
        GROUP BY day_start,
                 breakdown_value)
     GROUP BY day_start,
              breakdown_value
     ORDER BY day_start ASC, breakdown_value ASC)
  GROUP BY breakdown_value
  ORDER BY sum(count) DESC, breakdown_value ASC
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_breakdown_weekly_active_users_aggregated
  '
  SELECT groupArray(value)
  FROM
    (SELECT replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, 'key'), ''), 'null'), '^"|"$', '') AS value,
            count(e.uuid) AS count
     FROM events AS e
     WHERE and(equals(e.team_id, 2), equals(e.event, '$pageview'))
     GROUP BY value
     ORDER BY count DESC, value DESC
     LIMIT 25)
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_breakdown_weekly_active_users_aggregated.1
  '
  SELECT sum(count) AS total,
  
    (SELECT day_start
     FROM
       (SELECT 1 AS group_key,
               groupArray(day_start) AS day_start
        FROM
          (SELECT day_start
           FROM
             (SELECT 0 AS total,
                     minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-11 23:59:59', 6, 'UTC'))), toIntervalDay(numbers.number)) AS day_start
              FROM numbers(coalesce(dateDiff('day', assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-11 00:00:00', 6, 'UTC')), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-11 23:59:59', 6, 'UTC'))), 0)) AS numbers
              UNION ALL SELECT 0 AS total,
                               toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-11 00:00:00', 6, 'UTC'))) AS day_start)
           ORDER BY day_start ASC)
        GROUP BY group_key)) AS date,
         ifNull(toString(breakdown_value), '') AS breakdown_value
  FROM
    (SELECT sum(total) AS count,
            breakdown_value
     FROM
       (SELECT count(DISTINCT actor_id) AS total,
               breakdown_value
        FROM
          (SELECT d.timestamp,
                  e.actor_id,
                  e.breakdown_value
           FROM
             (SELECT minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-11 23:59:59', 6, 'UTC'))), toIntervalDay(numbers.number)) AS timestamp
              FROM numbers(dateDiff('day', minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-11 00:00:00', 6, 'UTC'))), toIntervalDay(7)), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-11 23:59:59', 6, 'UTC')))) AS numbers) AS d
           CROSS JOIN
             (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                     e__pdi__person.id AS actor_id,
                     replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, 'key'), ''), 'null'), '^"|"$', '') AS breakdown_value
              FROM events AS e SAMPLE 1
              INNER JOIN
                (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                        person_distinct_id2.distinct_id AS distinct_id
                 FROM person_distinct_id2
                 WHERE equals(person_distinct_id2.team_id, 2)
                 GROUP BY person_distinct_id2.distinct_id
                 HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
              INNER JOIN
                (SELECT person.id AS id
                 FROM person
                 WHERE equals(person.team_id, 2)
                 GROUP BY person.id
                 HAVING ifNull(equals(argMax(person.is_deleted, person.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS e__pdi__person ON equals(e__pdi.person_id, e__pdi__person.id)
              WHERE and(equals(e.team_id, 2), and(equals(e.event, '$pageview'), or(isNull(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, 'key'), ''), 'null'), '^"|"$', '')), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, 'key'), ''), 'null'), '^"|"$', ''), 'val'), 0), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, 'key'), ''), 'null'), '^"|"$', ''), 'bor'), 0))), ifNull(greaterOrEquals(timestamp, minus(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-11 00:00:00', 6, 'UTC')), toIntervalDay(7))), 0), ifNull(lessOrEquals(timestamp, assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-11 23:59:59', 6, 'UTC'))), 0))
              GROUP BY timestamp, actor_id,
                                  breakdown_value) AS e
           WHERE and(ifNull(lessOrEquals(e.timestamp, plus(d.timestamp, toIntervalDay(1))), 0), ifNull(greater(e.timestamp, minus(d.timestamp, toIntervalDay(6))), 0))
           GROUP BY d.timestamp,
                    e.actor_id,
                    e.breakdown_value
           ORDER BY d.timestamp ASC)
        WHERE and(ifNull(greaterOrEquals(timestamp, toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-11 00:00:00', 6, 'UTC')))), 0), ifNull(lessOrEquals(timestamp, assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-11 23:59:59', 6, 'UTC'))), 0))
        GROUP BY breakdown_value)
     GROUP BY breakdown_value
     ORDER BY breakdown_value ASC)
  GROUP BY breakdown_value
  ORDER BY sum(count) DESC, breakdown_value ASC
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_breakdown_weekly_active_users_aggregated_materialized
  '
  SELECT groupArray(value)
  FROM
    (SELECT nullIf(nullIf(e.mat_key, ''), 'null') AS value,
            count(e.uuid) AS count
     FROM events AS e
     WHERE and(equals(e.team_id, 2), equals(e.event, '$pageview'))
     GROUP BY value
     ORDER BY count DESC, value DESC
     LIMIT 25)
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_breakdown_weekly_active_users_aggregated_materialized.1
  '
  SELECT sum(count) AS total,
  
    (SELECT day_start
     FROM
       (SELECT 1 AS group_key,
               groupArray(day_start) AS day_start
        FROM
          (SELECT day_start
           FROM
             (SELECT 0 AS total,
                     minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-11 23:59:59', 6, 'UTC'))), toIntervalDay(numbers.number)) AS day_start
              FROM numbers(coalesce(dateDiff('day', assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-11 00:00:00', 6, 'UTC')), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-11 23:59:59', 6, 'UTC'))), 0)) AS numbers
              UNION ALL SELECT 0 AS total,
                               toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-11 00:00:00', 6, 'UTC'))) AS day_start)
           ORDER BY day_start ASC)
        GROUP BY group_key)) AS date,
         ifNull(toString(breakdown_value), '') AS breakdown_value
  FROM
    (SELECT sum(total) AS count,
            breakdown_value
     FROM
       (SELECT count(DISTINCT actor_id) AS total,
               breakdown_value
        FROM
          (SELECT d.timestamp,
                  e.actor_id,
                  e.breakdown_value
           FROM
             (SELECT minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-11 23:59:59', 6, 'UTC'))), toIntervalDay(numbers.number)) AS timestamp
              FROM numbers(dateDiff('day', minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-11 00:00:00', 6, 'UTC'))), toIntervalDay(7)), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-11 23:59:59', 6, 'UTC')))) AS numbers) AS d
           CROSS JOIN
             (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                     e__pdi__person.id AS actor_id,
                     nullIf(nullIf(e.mat_key, ''), 'null') AS breakdown_value
              FROM events AS e SAMPLE 1
              INNER JOIN
                (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                        person_distinct_id2.distinct_id AS distinct_id
                 FROM person_distinct_id2
                 WHERE equals(person_distinct_id2.team_id, 2)
                 GROUP BY person_distinct_id2.distinct_id
                 HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
              INNER JOIN
                (SELECT person.id AS id
                 FROM person
                 WHERE equals(person.team_id, 2)
                 GROUP BY person.id
                 HAVING ifNull(equals(argMax(person.is_deleted, person.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS e__pdi__person ON equals(e__pdi.person_id, e__pdi__person.id)
              WHERE and(equals(e.team_id, 2), and(equals(e.event, '$pageview'), or(isNull(nullIf(nullIf(e.mat_key, ''), 'null')), ifNull(equals(nullIf(nullIf(e.mat_key, ''), 'null'), 'val'), 0), ifNull(equals(nullIf(nullIf(e.mat_key, ''), 'null'), 'bor'), 0))), ifNull(greaterOrEquals(timestamp, minus(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-11 00:00:00', 6, 'UTC')), toIntervalDay(7))), 0), ifNull(lessOrEquals(timestamp, assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-11 23:59:59', 6, 'UTC'))), 0))
              GROUP BY timestamp, actor_id,
                                  breakdown_value) AS e
           WHERE and(ifNull(lessOrEquals(e.timestamp, plus(d.timestamp, toIntervalDay(1))), 0), ifNull(greater(e.timestamp, minus(d.timestamp, toIntervalDay(6))), 0))
           GROUP BY d.timestamp,
                    e.actor_id,
                    e.breakdown_value
           ORDER BY d.timestamp ASC)
        WHERE and(ifNull(greaterOrEquals(timestamp, toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-11 00:00:00', 6, 'UTC')))), 0), ifNull(lessOrEquals(timestamp, assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-11 23:59:59', 6, 'UTC'))), 0))
        GROUP BY breakdown_value)
     GROUP BY breakdown_value
     ORDER BY breakdown_value ASC)
  GROUP BY breakdown_value
  ORDER BY sum(count) DESC, breakdown_value ASC
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_breakdown_weekly_active_users_daily_based_on_action
  '
  
  SELECT count(DISTINCT person_id)
  FROM cohortpeople
  WHERE team_id = 2
    AND cohort_id = 2
    AND version = NULL
  '
---
# name: TestTrends.test_breakdown_weekly_active_users_daily_based_on_action.1
  '
  
  SELECT count(DISTINCT person_id)
  FROM cohortpeople
  WHERE team_id = 2
    AND cohort_id = 2
    AND version = 0
  '
---
# name: TestTrends.test_breakdown_weekly_active_users_daily_based_on_action.2
  '
  SELECT groupArray(value)
  FROM
    (SELECT replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, 'key'), ''), 'null'), '^"|"$', '') AS value,
            count(e.uuid) AS count
     FROM events AS e
     INNER JOIN
       (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
               person_distinct_id2.distinct_id AS distinct_id
        FROM person_distinct_id2
        WHERE equals(person_distinct_id2.team_id, 2)
        GROUP BY person_distinct_id2.distinct_id
        HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
     INNER JOIN
       (SELECT person.id,
               replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, 'name'), ''), 'null'), '^"|"$', '') AS properties___name
        FROM person
        WHERE and(equals(person.team_id, 2), ifNull(in(tuple(person.id, person.version),
                                                         (SELECT person.id, max(person.version) AS version
                                                          FROM person
                                                          WHERE equals(person.team_id, 2)
                                                          GROUP BY person.id
                                                          HAVING ifNull(equals(argMax(person.is_deleted, person.version), 0), 0))), 0)) SETTINGS optimize_aggregation_in_order=1) AS e__pdi__person ON equals(e__pdi.person_id, e__pdi__person.id)
     WHERE and(equals(e.team_id, 2), equals(e.event, '$pageview'), and(ifNull(in(e__pdi__person.properties___name, tuple('p1', 'p2', 'p3')), 0), ifNull(in(e__pdi.person_id,
                                                                                                                                                             (SELECT cohortpeople.person_id
                                                                                                                                                              FROM cohortpeople
                                                                                                                                                              WHERE and(equals(cohortpeople.team_id, 2), equals(cohortpeople.cohort_id, 24))
                                                                                                                                                              GROUP BY cohortpeople.person_id, cohortpeople.cohort_id, cohortpeople.version
                                                                                                                                                              HAVING ifNull(greater(sum(cohortpeople.sign), 0), 0))), 0)))
     GROUP BY value
     ORDER BY count DESC, value DESC
     LIMIT 25)
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_breakdown_weekly_active_users_daily_based_on_action.3
  '
  SELECT groupArray(day_start) AS date,
         groupArray(count) AS total,
         ifNull(toString(breakdown_value), '') AS breakdown_value
  FROM
    (SELECT sum(total) AS count,
            day_start,
            breakdown_value
     FROM
       (SELECT 0 AS total,
               ticks.day_start AS day_start,
               sec.breakdown_value
        FROM
          (SELECT minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-12 23:59:59', 6, 'UTC'))), toIntervalDay(numbers.number)) AS day_start
           FROM numbers(coalesce(dateDiff('day', assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC')), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-12 23:59:59', 6, 'UTC'))), 0)) AS numbers
           UNION ALL SELECT toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC'))) AS day_start) AS ticks
        CROSS JOIN
          (SELECT breakdown_value
           FROM
             (SELECT [NULL, 'val'] AS breakdown_value) ARRAY
           JOIN breakdown_value AS breakdown_value) AS sec
        ORDER BY sec.breakdown_value ASC, day_start ASC
        UNION ALL SELECT counts AS total,
                         toStartOfDay(timestamp) AS day_start,
                         breakdown_value
        FROM
          (SELECT d.timestamp,
                  count(DISTINCT e.actor_id) AS counts,
                  e.breakdown_value
           FROM
             (SELECT minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-12 23:59:59', 6, 'UTC'))), toIntervalDay(numbers.number)) AS timestamp
              FROM numbers(dateDiff('day', minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC'))), toIntervalDay(7)), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-12 23:59:59', 6, 'UTC')))) AS numbers) AS d
           CROSS JOIN
             (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                     e__pdi__person.id AS actor_id,
                     replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, 'key'), ''), 'null'), '^"|"$', '') AS breakdown_value
              FROM events AS e SAMPLE 1
              INNER JOIN
                (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                        person_distinct_id2.distinct_id AS distinct_id
                 FROM person_distinct_id2
                 WHERE equals(person_distinct_id2.team_id, 2)
                 GROUP BY person_distinct_id2.distinct_id
                 HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
              INNER JOIN
                (SELECT person.id,
                        replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, 'name'), ''), 'null'), '^"|"$', '') AS properties___name
                 FROM person
                 WHERE and(equals(person.team_id, 2), ifNull(in(tuple(person.id, person.version),
                                                                  (SELECT person.id, max(person.version) AS version
                                                                   FROM person
                                                                   WHERE equals(person.team_id, 2)
                                                                   GROUP BY person.id
                                                                   HAVING ifNull(equals(argMax(person.is_deleted, person.version), 0), 0))), 0)) SETTINGS optimize_aggregation_in_order=1) AS e__pdi__person ON equals(e__pdi.person_id, e__pdi__person.id)
              WHERE and(equals(e.team_id, 2), and(and(equals(e.event, '$pageview'), and(ifNull(in(e__pdi__person.properties___name, tuple('p1', 'p2', 'p3')), 0), ifNull(in(e__pdi.person_id,
                                                                                                                                                                              (SELECT cohortpeople.person_id
                                                                                                                                                                               FROM cohortpeople
                                                                                                                                                                               WHERE and(equals(cohortpeople.team_id, 2), equals(cohortpeople.cohort_id, 24))
                                                                                                                                                                               GROUP BY cohortpeople.person_id, cohortpeople.cohort_id, cohortpeople.version
                                                                                                                                                                               HAVING ifNull(greater(sum(cohortpeople.sign), 0), 0))), 0))), or(isNull(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, 'key'), ''), 'null'), '^"|"$', '')), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, 'key'), ''), 'null'), '^"|"$', ''), 'val'), 0))), ifNull(greaterOrEquals(timestamp, minus(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC')), toIntervalDay(7))), 0), ifNull(lessOrEquals(timestamp, assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-12 23:59:59', 6, 'UTC'))), 0))
              GROUP BY timestamp, actor_id,
                                  breakdown_value) AS e
           WHERE and(ifNull(lessOrEquals(e.timestamp, plus(d.timestamp, toIntervalDay(1))), 0), ifNull(greater(e.timestamp, minus(d.timestamp, toIntervalDay(6))), 0))
           GROUP BY d.timestamp,
                    e.breakdown_value
           ORDER BY d.timestamp ASC)
        WHERE and(ifNull(greaterOrEquals(timestamp, toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC')))), 0), ifNull(lessOrEquals(timestamp, assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-12 23:59:59', 6, 'UTC'))), 0)))
     GROUP BY day_start,
              breakdown_value
     ORDER BY day_start ASC, breakdown_value ASC)
  GROUP BY breakdown_value
  ORDER BY sum(count) DESC, breakdown_value ASC
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_breakdown_with_filter_groups_person_on_events
  '
  SELECT groupArray(value)
  FROM
    (SELECT replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, 'key'), ''), 'null'), '^"|"$', '') AS value,
            count(e.uuid) AS count
     FROM events AS e
     LEFT JOIN
       (SELECT argMax(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(groups.group_properties, 'industry'), ''), 'null'), '^"|"$', ''), groups._timestamp) AS properties___industry,
               groups.group_type_index AS index,
               groups.group_key AS key
        FROM groups
        WHERE and(equals(groups.team_id, 2), ifNull(equals(index, 0), 0))
        GROUP BY groups.group_type_index,
                 groups.group_key) AS e__group_0 ON equals(e.`$group_0`, e__group_0.key)
     WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-12 23:59:59', 6, 'UTC'))), equals(e.event, 'sign up'), ifNull(equals(e__group_0.properties___industry, 'finance'), 0))
     GROUP BY value
     ORDER BY count DESC, value DESC
     LIMIT 25)
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_breakdown_with_filter_groups_person_on_events.1
  '
  SELECT groupArray(day_start) AS date,
         groupArray(count) AS total,
         ifNull(toString(breakdown_value), '') AS breakdown_value
  FROM
    (SELECT sum(total) AS count,
            day_start,
            breakdown_value
     FROM
       (SELECT 0 AS total,
               ticks.day_start AS day_start,
               sec.breakdown_value
        FROM
          (SELECT minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-12 23:59:59', 6, 'UTC'))), toIntervalDay(numbers.number)) AS day_start
           FROM numbers(coalesce(dateDiff('day', assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC')), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-12 23:59:59', 6, 'UTC'))), 0)) AS numbers
           UNION ALL SELECT toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC'))) AS day_start) AS ticks
        CROSS JOIN
          (SELECT breakdown_value
           FROM
             (SELECT [NULL, 'uh', 'oh'] AS breakdown_value) ARRAY
           JOIN breakdown_value AS breakdown_value) AS sec
        ORDER BY sec.breakdown_value ASC, day_start ASC
        UNION ALL SELECT count(e.uuid) AS total,
                         toStartOfDay(toTimeZone(e.timestamp, 'UTC')) AS day_start,
                         replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, 'key'), ''), 'null'), '^"|"$', '') AS breakdown_value
        FROM events AS e SAMPLE 1
        LEFT JOIN
          (SELECT argMax(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(groups.group_properties, 'industry'), ''), 'null'), '^"|"$', ''), groups._timestamp) AS properties___industry,
                  groups.group_type_index AS index,
                  groups.group_key AS key
           FROM groups
           WHERE and(equals(groups.team_id, 2), ifNull(equals(index, 0), 0))
           GROUP BY groups.group_type_index,
                    groups.group_key) AS e__group_0 ON equals(e.`$group_0`, e__group_0.key)
        WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-12 23:59:59', 6, 'UTC'))), equals(e.event, 'sign up'), ifNull(equals(e__group_0.properties___industry, 'finance'), 0), or(isNull(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, 'key'), ''), 'null'), '^"|"$', '')), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, 'key'), ''), 'null'), '^"|"$', ''), 'uh'), 0), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, 'key'), ''), 'null'), '^"|"$', ''), 'oh'), 0)))
        GROUP BY day_start,
                 breakdown_value)
     GROUP BY day_start,
              breakdown_value
     ORDER BY day_start ASC, breakdown_value ASC)
  GROUP BY breakdown_value
  ORDER BY sum(count) DESC, breakdown_value ASC
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_breakdown_with_filter_groups_person_on_events_v2
  '
  
  SELECT distinct_id,
         person_id
  FROM events
  WHERE team_id = 2
    AND distinct_id IN ('test_breakdown_d1',
                        'test_breakdown_d2')
  GROUP BY distinct_id,
           person_id
  ORDER BY if(distinct_id = 'test_breakdown_d1', -1, 0)
  '
---
# name: TestTrends.test_breakdown_with_filter_groups_person_on_events_v2.1
  '
  SELECT groupArray(value)
  FROM
    (SELECT replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, 'key'), ''), 'null'), '^"|"$', '') AS value,
            count(e.uuid) AS count
     FROM events AS e
     LEFT JOIN
       (SELECT argMax(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(groups.group_properties, 'industry'), ''), 'null'), '^"|"$', ''), groups._timestamp) AS properties___industry,
               groups.group_type_index AS index,
               groups.group_key AS key
        FROM groups
        WHERE and(equals(groups.team_id, 2), ifNull(equals(index, 0), 0))
        GROUP BY groups.group_type_index,
                 groups.group_key) AS e__group_0 ON equals(e.`$group_0`, e__group_0.key)
     WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-12 23:59:59', 6, 'UTC'))), equals(e.event, 'sign up'), ifNull(equals(e__group_0.properties___industry, 'finance'), 0))
     GROUP BY value
     ORDER BY count DESC, value DESC
     LIMIT 25)
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_breakdown_with_filter_groups_person_on_events_v2.2
  '
  SELECT groupArray(day_start) AS date,
         groupArray(count) AS total,
         ifNull(toString(breakdown_value), '') AS breakdown_value
  FROM
    (SELECT sum(total) AS count,
            day_start,
            breakdown_value
     FROM
       (SELECT 0 AS total,
               ticks.day_start AS day_start,
               sec.breakdown_value
        FROM
          (SELECT minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-12 23:59:59', 6, 'UTC'))), toIntervalDay(numbers.number)) AS day_start
           FROM numbers(coalesce(dateDiff('day', assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC')), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-12 23:59:59', 6, 'UTC'))), 0)) AS numbers
           UNION ALL SELECT toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC'))) AS day_start) AS ticks
        CROSS JOIN
          (SELECT breakdown_value
           FROM
             (SELECT [NULL, 'uh', 'oh'] AS breakdown_value) ARRAY
           JOIN breakdown_value AS breakdown_value) AS sec
        ORDER BY sec.breakdown_value ASC, day_start ASC
        UNION ALL SELECT count(DISTINCT ifNull(nullIf(e__override.override_person_id, '00000000-0000-0000-0000-000000000000'), e.person_id)) AS total,
                         toStartOfDay(toTimeZone(e.timestamp, 'UTC')) AS day_start,
                         replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, 'key'), ''), 'null'), '^"|"$', '') AS breakdown_value
        FROM events AS e SAMPLE 1
        LEFT OUTER JOIN
          (SELECT argMax(person_overrides.override_person_id, person_overrides.version) AS override_person_id,
                  person_overrides.old_person_id AS old_person_id
           FROM person_overrides
           WHERE equals(person_overrides.team_id, 2)
           GROUP BY person_overrides.old_person_id) AS e__override ON equals(e.person_id, e__override.old_person_id)
        LEFT JOIN
          (SELECT argMax(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(groups.group_properties, 'industry'), ''), 'null'), '^"|"$', ''), groups._timestamp) AS properties___industry,
                  groups.group_type_index AS index,
                  groups.group_key AS key
           FROM groups
           WHERE and(equals(groups.team_id, 2), ifNull(equals(index, 0), 0))
           GROUP BY groups.group_type_index,
                    groups.group_key) AS e__group_0 ON equals(e.`$group_0`, e__group_0.key)
        WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-12 23:59:59', 6, 'UTC'))), equals(e.event, 'sign up'), ifNull(equals(e__group_0.properties___industry, 'finance'), 0), or(isNull(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, 'key'), ''), 'null'), '^"|"$', '')), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, 'key'), ''), 'null'), '^"|"$', ''), 'uh'), 0), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, 'key'), ''), 'null'), '^"|"$', ''), 'oh'), 0)))
        GROUP BY day_start,
                 breakdown_value)
     GROUP BY day_start,
              breakdown_value
     ORDER BY day_start ASC, breakdown_value ASC)
  GROUP BY breakdown_value
  ORDER BY sum(count) DESC, breakdown_value ASC
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_dau_with_breakdown_filtering_with_sampling
  '
  SELECT groupArray(value)
  FROM
    (SELECT replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$some_property'), ''), 'null'), '^"|"$', '') AS value,
            count(e.uuid) AS count
     FROM events AS e
     WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 13:01:01', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), equals(e.event, 'sign up'))
     GROUP BY value
     ORDER BY count DESC, value DESC
     LIMIT 25)
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_dau_with_breakdown_filtering_with_sampling.1
  '
  SELECT groupArray(day_start) AS date,
         groupArray(count) AS total,
         ifNull(toString(breakdown_value), '') AS breakdown_value
  FROM
    (SELECT sum(total) AS count,
            day_start,
            breakdown_value
     FROM
       (SELECT 0 AS total,
               ticks.day_start AS day_start,
               sec.breakdown_value
        FROM
          (SELECT minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), toIntervalDay(numbers.number)) AS day_start
           FROM numbers(coalesce(dateDiff('day', assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 13:01:01', 6, 'UTC')), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), 0)) AS numbers
           UNION ALL SELECT toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 13:01:01', 6, 'UTC'))) AS day_start) AS ticks
        CROSS JOIN
          (SELECT breakdown_value
           FROM
             (SELECT [NULL, 'other_value', 'value'] AS breakdown_value) ARRAY
           JOIN breakdown_value AS breakdown_value) AS sec
        ORDER BY sec.breakdown_value ASC, day_start ASC
        UNION ALL SELECT count(DISTINCT e__pdi__person.id) AS total,
                         toStartOfDay(toTimeZone(e.timestamp, 'UTC')) AS day_start,
                         replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$some_property'), ''), 'null'), '^"|"$', '') AS breakdown_value
        FROM events AS e SAMPLE 1.0
        INNER JOIN
          (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                  person_distinct_id2.distinct_id AS distinct_id
           FROM person_distinct_id2
           WHERE equals(person_distinct_id2.team_id, 2)
           GROUP BY person_distinct_id2.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
        INNER JOIN
          (SELECT person.id AS id
           FROM person
           WHERE equals(person.team_id, 2)
           GROUP BY person.id
           HAVING ifNull(equals(argMax(person.is_deleted, person.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS e__pdi__person ON equals(e__pdi.person_id, e__pdi__person.id)
        WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 13:01:01', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), equals(e.event, 'sign up'), or(isNull(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$some_property'), ''), 'null'), '^"|"$', '')), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$some_property'), ''), 'null'), '^"|"$', ''), 'other_value'), 0), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$some_property'), ''), 'null'), '^"|"$', ''), 'value'), 0)))
        GROUP BY day_start,
                 breakdown_value)
     GROUP BY day_start,
              breakdown_value
     ORDER BY day_start ASC, breakdown_value ASC)
  GROUP BY breakdown_value
  ORDER BY sum(count) DESC, breakdown_value ASC
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_dau_with_breakdown_filtering_with_sampling.2
  '
  SELECT groupArray(value)
  FROM
    (SELECT replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$some_property'), ''), 'null'), '^"|"$', '') AS value,
            count(e.uuid) AS count
     FROM events AS e
     WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 13:01:01', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), equals(e.event, 'sign up'))
     GROUP BY value
     ORDER BY count DESC, value DESC
     LIMIT 25)
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_dau_with_breakdown_filtering_with_sampling.3
  '
  SELECT groupArray(day_start) AS date,
         groupArray(count) AS total,
         ifNull(toString(breakdown_value), '') AS breakdown_value
  FROM
    (SELECT sum(total) AS count,
            day_start,
            breakdown_value
     FROM
       (SELECT 0 AS total,
               ticks.day_start AS day_start,
               sec.breakdown_value
        FROM
          (SELECT minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), toIntervalDay(numbers.number)) AS day_start
           FROM numbers(coalesce(dateDiff('day', assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 13:01:01', 6, 'UTC')), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), 0)) AS numbers
           UNION ALL SELECT toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 13:01:01', 6, 'UTC'))) AS day_start) AS ticks
        CROSS JOIN
          (SELECT breakdown_value
           FROM
             (SELECT [NULL, 'other_value', 'value'] AS breakdown_value) ARRAY
           JOIN breakdown_value AS breakdown_value) AS sec
        ORDER BY sec.breakdown_value ASC, day_start ASC
        UNION ALL SELECT count(DISTINCT e__pdi__person.id) AS total,
                         toStartOfDay(toTimeZone(e.timestamp, 'UTC')) AS day_start,
                         replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$some_property'), ''), 'null'), '^"|"$', '') AS breakdown_value
        FROM events AS e SAMPLE 1.0
        INNER JOIN
          (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                  person_distinct_id2.distinct_id AS distinct_id
           FROM person_distinct_id2
           WHERE equals(person_distinct_id2.team_id, 2)
           GROUP BY person_distinct_id2.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
        INNER JOIN
          (SELECT person.id AS id
           FROM person
           WHERE equals(person.team_id, 2)
           GROUP BY person.id
           HAVING ifNull(equals(argMax(person.is_deleted, person.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS e__pdi__person ON equals(e__pdi.person_id, e__pdi__person.id)
        WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 13:01:01', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), equals(e.event, 'sign up'), or(isNull(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$some_property'), ''), 'null'), '^"|"$', '')), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$some_property'), ''), 'null'), '^"|"$', ''), 'other_value'), 0), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$some_property'), ''), 'null'), '^"|"$', ''), 'value'), 0)))
        GROUP BY day_start,
                 breakdown_value)
     GROUP BY day_start,
              breakdown_value
     ORDER BY day_start ASC, breakdown_value ASC)
  GROUP BY breakdown_value
  ORDER BY sum(count) DESC, breakdown_value ASC
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_filter_events_by_precalculated_cohort
  '
  
  SELECT count(DISTINCT person_id)
  FROM cohortpeople
  WHERE team_id = 2
    AND cohort_id = 2
    AND version = NULL
  '
---
# name: TestTrends.test_filter_events_by_precalculated_cohort.1
  '
  
  SELECT count(DISTINCT person_id)
  FROM cohortpeople
  WHERE team_id = 2
    AND cohort_id = 2
    AND version = 0
  '
---
# name: TestTrends.test_filter_events_by_precalculated_cohort.2
  '
  
  SELECT count(DISTINCT person_id)
  FROM cohortpeople
  WHERE team_id = 2
    AND cohort_id = 2
    AND version = 0
  '
---
# name: TestTrends.test_filter_events_by_precalculated_cohort.3
  '
  
  SELECT count(DISTINCT person_id)
  FROM cohortpeople
  WHERE team_id = 2
    AND cohort_id = 2
    AND version = 0
  '
---
# name: TestTrends.test_filter_events_by_precalculated_cohort.4
  '
  SELECT groupArray(day_start) AS date,
         groupArray(count) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start
     FROM
       (SELECT 0 AS total,
               minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-02 23:59:59', 6, 'UTC'))), toIntervalDay(numbers.number)) AS day_start
        FROM numbers(coalesce(dateDiff('day', assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-26 00:00:00', 6, 'UTC')), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-02 23:59:59', 6, 'UTC'))), 0)) AS numbers
        UNION ALL SELECT 0 AS total,
                         toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-26 00:00:00', 6, 'UTC'))) AS day_start
        UNION ALL SELECT count(e.uuid) AS total,
                         toStartOfDay(toTimeZone(e.timestamp, 'UTC')) AS day_start
        FROM events AS e SAMPLE 1
        INNER JOIN
          (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                  person_distinct_id2.distinct_id AS distinct_id
           FROM person_distinct_id2
           WHERE equals(person_distinct_id2.team_id, 2)
           GROUP BY person_distinct_id2.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
        INNER JOIN
          (SELECT person.id,
                  replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, 'name'), ''), 'null'), '^"|"$', '') AS properties___name
           FROM person
           WHERE and(equals(person.team_id, 2), ifNull(in(tuple(person.id, person.version),
                                                            (SELECT person.id, max(person.version) AS version
                                                             FROM person
                                                             WHERE equals(person.team_id, 2)
                                                             GROUP BY person.id
                                                             HAVING ifNull(equals(argMax(person.is_deleted, person.version), 0), 0))), 0)) SETTINGS optimize_aggregation_in_order=1) AS e__pdi__person ON equals(e__pdi.person_id, e__pdi__person.id)
        WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-26 00:00:00', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-02 23:59:59', 6, 'UTC'))), equals(e.event, 'event_name'), ifNull(equals(e__pdi__person.properties___name, 'Jane'), 0))
        GROUP BY day_start)
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY sum(count) DESC
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_filter_events_by_precalculated_cohort_poe_v2
  '
  
  SELECT count(DISTINCT person_id)
  FROM cohortpeople
  WHERE team_id = 2
    AND cohort_id = 2
    AND version = NULL
  '
---
# name: TestTrends.test_filter_events_by_precalculated_cohort_poe_v2.1
  '
  
  SELECT count(DISTINCT person_id)
  FROM cohortpeople
  WHERE team_id = 2
    AND cohort_id = 2
    AND version = 0
  '
---
# name: TestTrends.test_filter_events_by_precalculated_cohort_poe_v2.2
  '
  
  SELECT count(DISTINCT person_id)
  FROM cohortpeople
  WHERE team_id = 2
    AND cohort_id = 2
    AND version = 0
  '
---
# name: TestTrends.test_filter_events_by_precalculated_cohort_poe_v2.3
  '
  
  SELECT count(DISTINCT person_id)
  FROM cohortpeople
  WHERE team_id = 2
    AND cohort_id = 2
    AND version = 0
  '
---
# name: TestTrends.test_filter_events_by_precalculated_cohort_poe_v2.4
  '
  SELECT groupArray(day_start) AS date,
         groupArray(count) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start
     FROM
       (SELECT 0 AS total,
               minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-02 23:59:59', 6, 'UTC'))), toIntervalDay(numbers.number)) AS day_start
        FROM numbers(coalesce(dateDiff('day', assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-26 00:00:00', 6, 'UTC')), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-02 23:59:59', 6, 'UTC'))), 0)) AS numbers
        UNION ALL SELECT 0 AS total,
                         toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-26 00:00:00', 6, 'UTC'))) AS day_start
        UNION ALL SELECT count(e.uuid) AS total,
                         toStartOfDay(toTimeZone(e.timestamp, 'UTC')) AS day_start
        FROM events AS e SAMPLE 1
        WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-26 00:00:00', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-02 23:59:59', 6, 'UTC'))), equals(e.event, 'event_name'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.person_properties, 'name'), ''), 'null'), '^"|"$', ''), 'Jane'), 0))
        GROUP BY day_start)
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY sum(count) DESC
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_filtering_by_multiple_groups_person_on_events
  '
  SELECT groupArray(day_start) AS date,
         groupArray(count) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start
     FROM
       (SELECT 0 AS total,
               minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-12 23:59:59', 6, 'UTC'))), toIntervalDay(numbers.number)) AS day_start
        FROM numbers(coalesce(dateDiff('day', assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC')), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-12 23:59:59', 6, 'UTC'))), 0)) AS numbers
        UNION ALL SELECT 0 AS total,
                         toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC'))) AS day_start
        UNION ALL SELECT count(e.uuid) AS total,
                         toStartOfDay(toTimeZone(e.timestamp, 'UTC')) AS day_start
        FROM events AS e SAMPLE 1
        LEFT JOIN
          (SELECT argMax(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(groups.group_properties, 'name'), ''), 'null'), '^"|"$', ''), groups._timestamp) AS properties___name,
                  groups.group_type_index AS index,
                  groups.group_key AS key
           FROM groups
           WHERE and(equals(groups.team_id, 2), ifNull(equals(index, 2), 0))
           GROUP BY groups.group_type_index,
                    groups.group_key) AS e__group_2 ON equals(e.`$group_2`, e__group_2.key)
        LEFT JOIN
          (SELECT argMax(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(groups.group_properties, 'industry'), ''), 'null'), '^"|"$', ''), groups._timestamp) AS properties___industry,
                  groups.group_type_index AS index,
                  groups.group_key AS key
           FROM groups
           WHERE and(equals(groups.team_id, 2), ifNull(equals(index, 0), 0))
           GROUP BY groups.group_type_index,
                    groups.group_key) AS e__group_0 ON equals(e.`$group_0`, e__group_0.key)
        WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-12 23:59:59', 6, 'UTC'))), equals(e.event, 'sign up'), and(ifNull(equals(e__group_0.properties___industry, 'finance'), 0), ifNull(equals(e__group_2.properties___name, 'six'), 0)))
        GROUP BY day_start)
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY sum(count) DESC
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_filtering_by_multiple_groups_person_on_events.1
  '
  /* user_id:0 request:_snapshot_ */
  SELECT person_id AS actor_id,
         count() AS actor_value
  FROM
    (SELECT e.timestamp as timestamp,
            e.person_id as person_id,
            e.distinct_id as distinct_id,
            e.team_id as team_id
     FROM events e
     LEFT JOIN
       (SELECT group_key,
               argMax(group_properties, _timestamp) AS group_properties_0
        FROM groups
        WHERE team_id = 2
          AND group_type_index = 0
        GROUP BY group_key) groups_0 ON "$group_0" == groups_0.group_key
     LEFT JOIN
       (SELECT group_key,
               argMax(group_properties, _timestamp) AS group_properties_2
        FROM groups
        WHERE team_id = 2
          AND group_type_index = 2
        GROUP BY group_key) groups_2 ON "$group_2" == groups_2.group_key
     WHERE team_id = 2
       AND event = 'sign up'
       AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-02 00:00:00', 'UTC')
       AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-02 23:59:59', 'UTC')
       AND ((has(['finance'], replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '')))
            AND (has(['six'], replaceRegexpAll(JSONExtractRaw(group_properties_2, 'name'), '^"|"$', ''))))
       AND notEmpty(e.person_id) )
  GROUP BY actor_id
  ORDER BY actor_value DESC,
           actor_id DESC
  LIMIT 100
  OFFSET 0
  '
---
# name: TestTrends.test_filtering_with_group_props_person_on_events
  '
  SELECT groupArray(day_start) AS date,
         groupArray(count) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start
     FROM
       (SELECT 0 AS total,
               minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-12 23:59:59', 6, 'UTC'))), toIntervalDay(numbers.number)) AS day_start
        FROM numbers(coalesce(dateDiff('day', assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC')), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-12 23:59:59', 6, 'UTC'))), 0)) AS numbers
        UNION ALL SELECT 0 AS total,
                         toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC'))) AS day_start
        UNION ALL SELECT count(e.uuid) AS total,
                         toStartOfDay(toTimeZone(e.timestamp, 'UTC')) AS day_start
        FROM events AS e SAMPLE 1
        LEFT JOIN
          (SELECT argMax(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(groups.group_properties, 'industry'), ''), 'null'), '^"|"$', ''), groups._timestamp) AS properties___industry,
                  groups.group_type_index AS index,
                  groups.group_key AS key
           FROM groups
           WHERE and(equals(groups.team_id, 2), ifNull(equals(index, 0), 0))
           GROUP BY groups.group_type_index,
                    groups.group_key) AS e__group_0 ON equals(e.`$group_0`, e__group_0.key)
        WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-12 23:59:59', 6, 'UTC'))), equals(e.event, '$pageview'), and(ifNull(equals(e__group_0.properties___industry, 'finance'), 0), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.person_properties, 'key'), ''), 'null'), '^"|"$', ''), 'value'), 0)))
        GROUP BY day_start)
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY sum(count) DESC
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_mau_with_breakdown_filtering_and_prop_filter
  '
  SELECT groupArray(value)
  FROM
    (SELECT e__pdi__person.`properties___$some_prop` AS value,
            count(e.uuid) AS count
     FROM events AS e
     INNER JOIN
       (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
               person_distinct_id2.distinct_id AS distinct_id
        FROM person_distinct_id2
        WHERE equals(person_distinct_id2.team_id, 2)
        GROUP BY person_distinct_id2.distinct_id
        HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
     INNER JOIN
       (SELECT person.id,
               replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, '$some_prop'), ''), 'null'), '^"|"$', '') AS `properties___$some_prop`,
               replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, 'filter_prop'), ''), 'null'), '^"|"$', '') AS properties___filter_prop
        FROM person
        WHERE and(equals(person.team_id, 2), ifNull(in(tuple(person.id, person.version),
                                                         (SELECT person.id, max(person.version) AS version
                                                          FROM person
                                                          WHERE equals(person.team_id, 2)
                                                          GROUP BY person.id
                                                          HAVING ifNull(equals(argMax(person.is_deleted, person.version), 0), 0))), 0)) SETTINGS optimize_aggregation_in_order=1) AS e__pdi__person ON equals(e__pdi.person_id, e__pdi__person.id)
     WHERE and(equals(e.team_id, 2), equals(e.event, 'sign up'), ifNull(equals(e__pdi__person.properties___filter_prop, 'filter_val'), 0))
     GROUP BY value
     ORDER BY count DESC, value DESC
     LIMIT 25)
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_mau_with_breakdown_filtering_and_prop_filter.1
  '
  SELECT groupArray(day_start) AS date,
         groupArray(count) AS total,
         ifNull(toString(breakdown_value), '') AS breakdown_value
  FROM
    (SELECT sum(total) AS count,
            day_start,
            breakdown_value
     FROM
       (SELECT 0 AS total,
               ticks.day_start AS day_start,
               sec.breakdown_value
        FROM
          (SELECT minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), toIntervalDay(numbers.number)) AS day_start
           FROM numbers(coalesce(dateDiff('day', assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 13:01:01', 6, 'UTC')), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), 0)) AS numbers
           UNION ALL SELECT toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 13:01:01', 6, 'UTC'))) AS day_start) AS ticks
        CROSS JOIN
          (SELECT breakdown_value
           FROM
             (SELECT [NULL, 'some_val2', 'some_val'] AS breakdown_value) ARRAY
           JOIN breakdown_value AS breakdown_value) AS sec
        ORDER BY sec.breakdown_value ASC, day_start ASC
        UNION ALL SELECT counts AS total,
                         toStartOfDay(timestamp) AS day_start,
                         breakdown_value
        FROM
          (SELECT d.timestamp,
                  count(DISTINCT e.actor_id) AS counts,
                  e.breakdown_value
           FROM
             (SELECT minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), toIntervalDay(numbers.number)) AS timestamp
              FROM numbers(dateDiff('day', minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 13:01:01', 6, 'UTC'))), toIntervalDay(30)), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC')))) AS numbers) AS d
           CROSS JOIN
             (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                     e__pdi__person.id AS actor_id,
                     e__pdi__person.`properties___$some_prop` AS breakdown_value
              FROM events AS e SAMPLE 1
              INNER JOIN
                (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                        person_distinct_id2.distinct_id AS distinct_id
                 FROM person_distinct_id2
                 WHERE equals(person_distinct_id2.team_id, 2)
                 GROUP BY person_distinct_id2.distinct_id
                 HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
              INNER JOIN
                (SELECT person.id,
                        replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, '$some_prop'), ''), 'null'), '^"|"$', '') AS `properties___$some_prop`,
                        replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, 'filter_prop'), ''), 'null'), '^"|"$', '') AS properties___filter_prop
                 FROM person
                 WHERE and(equals(person.team_id, 2), ifNull(in(tuple(person.id, person.version),
                                                                  (SELECT person.id, max(person.version) AS version
                                                                   FROM person
                                                                   WHERE equals(person.team_id, 2)
                                                                   GROUP BY person.id
                                                                   HAVING ifNull(equals(argMax(person.is_deleted, person.version), 0), 0))), 0)) SETTINGS optimize_aggregation_in_order=1) AS e__pdi__person ON equals(e__pdi.person_id, e__pdi__person.id)
              WHERE and(equals(e.team_id, 2), and(equals(e.event, 'sign up'), ifNull(equals(e__pdi__person.properties___filter_prop, 'filter_val'), 0), or(isNull(e__pdi__person.`properties___$some_prop`), ifNull(equals(e__pdi__person.`properties___$some_prop`, 'some_val2'), 0), ifNull(equals(e__pdi__person.`properties___$some_prop`, 'some_val'), 0))), ifNull(greaterOrEquals(timestamp, minus(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 13:01:01', 6, 'UTC')), toIntervalDay(30))), 0), ifNull(lessOrEquals(timestamp, assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), 0))
              GROUP BY timestamp, actor_id,
                                  breakdown_value) AS e
           WHERE and(ifNull(lessOrEquals(e.timestamp, plus(d.timestamp, toIntervalDay(1))), 0), ifNull(greater(e.timestamp, minus(d.timestamp, toIntervalDay(29))), 0))
           GROUP BY d.timestamp,
                    e.breakdown_value
           ORDER BY d.timestamp ASC)
        WHERE and(ifNull(greaterOrEquals(timestamp, toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 13:01:01', 6, 'UTC')))), 0), ifNull(lessOrEquals(timestamp, assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), 0)))
     GROUP BY day_start,
              breakdown_value
     ORDER BY day_start ASC, breakdown_value ASC)
  GROUP BY breakdown_value
  ORDER BY sum(count) DESC, breakdown_value ASC
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_mau_with_breakdown_filtering_and_prop_filter_poe_v2
  '
  SELECT groupArray(value)
  FROM
    (SELECT replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.person_properties, '$some_prop'), ''), 'null'), '^"|"$', '') AS value,
            count(e.uuid) AS count
     FROM events AS e
     WHERE and(equals(e.team_id, 2), equals(e.event, 'sign up'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.person_properties, 'filter_prop'), ''), 'null'), '^"|"$', ''), 'filter_val'), 0))
     GROUP BY value
     ORDER BY count DESC, value DESC
     LIMIT 25)
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_mau_with_breakdown_filtering_and_prop_filter_poe_v2.1
  '
  SELECT groupArray(day_start) AS date,
         groupArray(count) AS total,
         ifNull(toString(breakdown_value), '') AS breakdown_value
  FROM
    (SELECT sum(total) AS count,
            day_start,
            breakdown_value
     FROM
       (SELECT 0 AS total,
               ticks.day_start AS day_start,
               sec.breakdown_value
        FROM
          (SELECT minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), toIntervalDay(numbers.number)) AS day_start
           FROM numbers(coalesce(dateDiff('day', assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 13:01:01', 6, 'UTC')), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), 0)) AS numbers
           UNION ALL SELECT toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 13:01:01', 6, 'UTC'))) AS day_start) AS ticks
        CROSS JOIN
          (SELECT breakdown_value
           FROM
             (SELECT [NULL, 'some_val2', 'some_val'] AS breakdown_value) ARRAY
           JOIN breakdown_value AS breakdown_value) AS sec
        ORDER BY sec.breakdown_value ASC, day_start ASC
        UNION ALL SELECT counts AS total,
                         toStartOfDay(timestamp) AS day_start,
                         breakdown_value
        FROM
          (SELECT d.timestamp,
                  count(DISTINCT e.actor_id) AS counts,
                  e.breakdown_value
           FROM
             (SELECT minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), toIntervalDay(numbers.number)) AS timestamp
              FROM numbers(dateDiff('day', minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 13:01:01', 6, 'UTC'))), toIntervalDay(30)), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC')))) AS numbers) AS d
           CROSS JOIN
             (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                     ifNull(nullIf(e__override.override_person_id, '00000000-0000-0000-0000-000000000000'), e.person_id) AS actor_id,
                     replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.person_properties, '$some_prop'), ''), 'null'), '^"|"$', '') AS breakdown_value
              FROM events AS e SAMPLE 1
              LEFT OUTER JOIN
                (SELECT argMax(person_overrides.override_person_id, person_overrides.version) AS override_person_id,
                        person_overrides.old_person_id AS old_person_id
                 FROM person_overrides
                 WHERE equals(person_overrides.team_id, 2)
                 GROUP BY person_overrides.old_person_id) AS e__override ON equals(e.person_id, e__override.old_person_id)
              WHERE and(equals(e.team_id, 2), and(equals(e.event, 'sign up'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.person_properties, 'filter_prop'), ''), 'null'), '^"|"$', ''), 'filter_val'), 0), or(isNull(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.person_properties, '$some_prop'), ''), 'null'), '^"|"$', '')), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.person_properties, '$some_prop'), ''), 'null'), '^"|"$', ''), 'some_val2'), 0), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.person_properties, '$some_prop'), ''), 'null'), '^"|"$', ''), 'some_val'), 0))), ifNull(greaterOrEquals(timestamp, minus(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 13:01:01', 6, 'UTC')), toIntervalDay(30))), 0), ifNull(lessOrEquals(timestamp, assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), 0))
              GROUP BY timestamp, actor_id,
                                  breakdown_value) AS e
           WHERE and(ifNull(lessOrEquals(e.timestamp, plus(d.timestamp, toIntervalDay(1))), 0), ifNull(greater(e.timestamp, minus(d.timestamp, toIntervalDay(29))), 0))
           GROUP BY d.timestamp,
                    e.breakdown_value
           ORDER BY d.timestamp ASC)
        WHERE and(ifNull(greaterOrEquals(timestamp, toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 13:01:01', 6, 'UTC')))), 0), ifNull(lessOrEquals(timestamp, assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), 0)))
     GROUP BY day_start,
              breakdown_value
     ORDER BY day_start ASC, breakdown_value ASC)
  GROUP BY breakdown_value
  ORDER BY sum(count) DESC, breakdown_value ASC
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_non_deterministic_timezones
  '
  SELECT groupArray(day_start) AS date,
         groupArray(count) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start
     FROM
       (SELECT 0 AS total,
               minus(toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2022-11-30 23:59:59', 6, 'US/Pacific')), 0), toIntervalWeek(numbers.number)) AS day_start
        FROM numbers(coalesce(dateDiff('week', assumeNotNull(parseDateTime64BestEffortOrNull('2022-10-31 05:01:01', 6, 'US/Pacific')), assumeNotNull(parseDateTime64BestEffortOrNull('2022-11-30 23:59:59', 6, 'US/Pacific'))), 0)) AS numbers
        UNION ALL SELECT 0 AS total,
                         toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2022-10-31 05:01:01', 6, 'US/Pacific')), 0) AS day_start
        UNION ALL SELECT count(e.uuid) AS total,
                         toStartOfWeek(toTimeZone(e.timestamp, 'US/Pacific'), 0) AS day_start
        FROM events AS e SAMPLE 1
        WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'US/Pacific'), toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2022-10-31 05:01:01', 6, 'US/Pacific')), 0)), lessOrEquals(toTimeZone(e.timestamp, 'US/Pacific'), assumeNotNull(parseDateTime64BestEffortOrNull('2022-11-30 23:59:59', 6, 'US/Pacific'))), equals(e.event, 'sign up'))
        GROUP BY day_start)
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY sum(count) DESC
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_person_filtering_in_cohort_in_action
  '
  
  SELECT count(DISTINCT person_id)
  FROM cohortpeople
  WHERE team_id = 2
    AND cohort_id = 2
    AND version = NULL
  '
---
# name: TestTrends.test_person_filtering_in_cohort_in_action.1
  '
  
  SELECT count(DISTINCT person_id)
  FROM cohortpeople
  WHERE team_id = 2
    AND cohort_id = 2
    AND version = 0
  '
---
# name: TestTrends.test_person_filtering_in_cohort_in_action.2
  '
  SELECT groupArray(value)
  FROM
    (SELECT replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$some_property'), ''), 'null'), '^"|"$', '') AS value,
            count(e.uuid) AS count
     FROM events AS e
     INNER JOIN
       (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
               person_distinct_id2.distinct_id AS distinct_id
        FROM person_distinct_id2
        WHERE equals(person_distinct_id2.team_id, 2)
        GROUP BY person_distinct_id2.distinct_id
        HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
     WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 13:01:01', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), and(equals(e.event, 'sign up'), ifNull(in(e__pdi.person_id,
                                                                                                                                                                                                                                                                                                                                                                (SELECT cohortpeople.person_id
                                                                                                                                                                                                                                                                                                                                                                 FROM cohortpeople
                                                                                                                                                                                                                                                                                                                                                                 WHERE and(equals(cohortpeople.team_id, 2), equals(cohortpeople.cohort_id, 37))
                                                                                                                                                                                                                                                                                                                                                                 GROUP BY cohortpeople.person_id, cohortpeople.cohort_id, cohortpeople.version
                                                                                                                                                                                                                                                                                                                                                                 HAVING ifNull(greater(sum(cohortpeople.sign), 0), 0))), 0)))
     GROUP BY value
     ORDER BY count DESC, value DESC
     LIMIT 25)
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_person_filtering_in_cohort_in_action.3
  '
  SELECT groupArray(day_start) AS date,
         groupArray(count) AS total,
         ifNull(toString(breakdown_value), '') AS breakdown_value
  FROM
    (SELECT sum(total) AS count,
            day_start,
            breakdown_value
     FROM
       (SELECT 0 AS total,
               ticks.day_start AS day_start,
               sec.breakdown_value
        FROM
          (SELECT minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), toIntervalDay(numbers.number)) AS day_start
           FROM numbers(coalesce(dateDiff('day', assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 13:01:01', 6, 'UTC')), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), 0)) AS numbers
           UNION ALL SELECT toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 13:01:01', 6, 'UTC'))) AS day_start) AS ticks
        CROSS JOIN
          (SELECT breakdown_value
           FROM
             (SELECT [NULL, 'value', 'other_value'] AS breakdown_value) ARRAY
           JOIN breakdown_value AS breakdown_value) AS sec
        ORDER BY sec.breakdown_value ASC, day_start ASC
        UNION ALL SELECT count(e.uuid) AS total,
                         toStartOfDay(toTimeZone(e.timestamp, 'UTC')) AS day_start,
                         replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$some_property'), ''), 'null'), '^"|"$', '') AS breakdown_value
        FROM events AS e SAMPLE 1
        INNER JOIN
          (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                  person_distinct_id2.distinct_id AS distinct_id
           FROM person_distinct_id2
           WHERE equals(person_distinct_id2.team_id, 2)
           GROUP BY person_distinct_id2.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
        WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 13:01:01', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), and(equals(e.event, 'sign up'), ifNull(in(e__pdi.person_id,
                                                                                                                                                                                                                                                                                                                                                                   (SELECT cohortpeople.person_id
                                                                                                                                                                                                                                                                                                                                                                    FROM cohortpeople
                                                                                                                                                                                                                                                                                                                                                                    WHERE and(equals(cohortpeople.team_id, 2), equals(cohortpeople.cohort_id, 37))
                                                                                                                                                                                                                                                                                                                                                                    GROUP BY cohortpeople.person_id, cohortpeople.cohort_id, cohortpeople.version
                                                                                                                                                                                                                                                                                                                                                                    HAVING ifNull(greater(sum(cohortpeople.sign), 0), 0))), 0)), or(isNull(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$some_property'), ''), 'null'), '^"|"$', '')), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$some_property'), ''), 'null'), '^"|"$', ''), 'value'), 0), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$some_property'), ''), 'null'), '^"|"$', ''), 'other_value'), 0)))
        GROUP BY day_start,
                 breakdown_value)
     GROUP BY day_start,
              breakdown_value
     ORDER BY day_start ASC, breakdown_value ASC)
  GROUP BY breakdown_value
  ORDER BY sum(count) DESC, breakdown_value ASC
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_person_filtering_in_cohort_in_action_poe_v2
  '
  
  SELECT count(DISTINCT person_id)
  FROM cohortpeople
  WHERE team_id = 2
    AND cohort_id = 2
    AND version = NULL
  '
---
# name: TestTrends.test_person_filtering_in_cohort_in_action_poe_v2.1
  '
  
  SELECT count(DISTINCT person_id)
  FROM cohortpeople
  WHERE team_id = 2
    AND cohort_id = 2
    AND version = 0
  '
---
# name: TestTrends.test_person_filtering_in_cohort_in_action_poe_v2.2
  '
  SELECT groupArray(value)
  FROM
    (SELECT replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$some_property'), ''), 'null'), '^"|"$', '') AS value,
            count(e.uuid) AS count
     FROM events AS e
     LEFT OUTER JOIN
       (SELECT argMax(person_overrides.override_person_id, person_overrides.version) AS override_person_id,
               person_overrides.old_person_id AS old_person_id
        FROM person_overrides
        WHERE equals(person_overrides.team_id, 2)
        GROUP BY person_overrides.old_person_id) AS e__override ON equals(e.person_id, e__override.old_person_id)
     WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 13:01:01', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), and(equals(e.event, 'sign up'), ifNull(in(ifNull(nullIf(e__override.override_person_id, '00000000-0000-0000-0000-000000000000'), e.person_id),
                                                                                                                                                                                                                                                                                                                                                                (SELECT cohortpeople.person_id
                                                                                                                                                                                                                                                                                                                                                                 FROM cohortpeople
                                                                                                                                                                                                                                                                                                                                                                 WHERE and(equals(cohortpeople.team_id, 2), equals(cohortpeople.cohort_id, 38))
                                                                                                                                                                                                                                                                                                                                                                 GROUP BY cohortpeople.person_id, cohortpeople.cohort_id, cohortpeople.version
                                                                                                                                                                                                                                                                                                                                                                 HAVING ifNull(greater(sum(cohortpeople.sign), 0), 0))), 0)))
     GROUP BY value
     ORDER BY count DESC, value DESC
     LIMIT 25)
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_person_filtering_in_cohort_in_action_poe_v2.3
  '
  SELECT groupArray(day_start) AS date,
         groupArray(count) AS total,
         ifNull(toString(breakdown_value), '') AS breakdown_value
  FROM
    (SELECT sum(total) AS count,
            day_start,
            breakdown_value
     FROM
       (SELECT 0 AS total,
               ticks.day_start AS day_start,
               sec.breakdown_value
        FROM
          (SELECT minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), toIntervalDay(numbers.number)) AS day_start
           FROM numbers(coalesce(dateDiff('day', assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 13:01:01', 6, 'UTC')), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), 0)) AS numbers
           UNION ALL SELECT toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 13:01:01', 6, 'UTC'))) AS day_start) AS ticks
        CROSS JOIN
          (SELECT breakdown_value
           FROM
             (SELECT [NULL, 'value', 'other_value'] AS breakdown_value) ARRAY
           JOIN breakdown_value AS breakdown_value) AS sec
        ORDER BY sec.breakdown_value ASC, day_start ASC
        UNION ALL SELECT count(e.uuid) AS total,
                         toStartOfDay(toTimeZone(e.timestamp, 'UTC')) AS day_start,
                         replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$some_property'), ''), 'null'), '^"|"$', '') AS breakdown_value
        FROM events AS e SAMPLE 1
        LEFT OUTER JOIN
          (SELECT argMax(person_overrides.override_person_id, person_overrides.version) AS override_person_id,
                  person_overrides.old_person_id AS old_person_id
           FROM person_overrides
           WHERE equals(person_overrides.team_id, 2)
           GROUP BY person_overrides.old_person_id) AS e__override ON equals(e.person_id, e__override.old_person_id)
        WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 13:01:01', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), and(equals(e.event, 'sign up'), ifNull(in(ifNull(nullIf(e__override.override_person_id, '00000000-0000-0000-0000-000000000000'), e.person_id),
                                                                                                                                                                                                                                                                                                                                                                   (SELECT cohortpeople.person_id
                                                                                                                                                                                                                                                                                                                                                                    FROM cohortpeople
                                                                                                                                                                                                                                                                                                                                                                    WHERE and(equals(cohortpeople.team_id, 2), equals(cohortpeople.cohort_id, 38))
                                                                                                                                                                                                                                                                                                                                                                    GROUP BY cohortpeople.person_id, cohortpeople.cohort_id, cohortpeople.version
                                                                                                                                                                                                                                                                                                                                                                    HAVING ifNull(greater(sum(cohortpeople.sign), 0), 0))), 0)), or(isNull(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$some_property'), ''), 'null'), '^"|"$', '')), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$some_property'), ''), 'null'), '^"|"$', ''), 'value'), 0), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$some_property'), ''), 'null'), '^"|"$', ''), 'other_value'), 0)))
        GROUP BY day_start,
                 breakdown_value)
     GROUP BY day_start,
              breakdown_value
     ORDER BY day_start ASC, breakdown_value ASC)
  GROUP BY breakdown_value
  ORDER BY sum(count) DESC, breakdown_value ASC
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_person_property_filtering
  '
  SELECT groupArray(day_start) AS date,
         groupArray(count) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start
     FROM
       (SELECT 0 AS total,
               minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), toIntervalDay(numbers.number)) AS day_start
        FROM numbers(coalesce(dateDiff('day', assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 00:00:00', 6, 'UTC')), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), 0)) AS numbers
        UNION ALL SELECT 0 AS total,
                         toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 00:00:00', 6, 'UTC'))) AS day_start
        UNION ALL SELECT count(e.uuid) AS total,
                         toStartOfDay(toTimeZone(e.timestamp, 'UTC')) AS day_start
        FROM events AS e SAMPLE 1
        INNER JOIN
          (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                  person_distinct_id2.distinct_id AS distinct_id
           FROM person_distinct_id2
           WHERE equals(person_distinct_id2.team_id, 2)
           GROUP BY person_distinct_id2.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
        INNER JOIN
          (SELECT person.id,
                  replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, 'name'), ''), 'null'), '^"|"$', '') AS properties___name
           FROM person
           WHERE and(equals(person.team_id, 2), ifNull(in(tuple(person.id, person.version),
                                                            (SELECT person.id, max(person.version) AS version
                                                             FROM person
                                                             WHERE equals(person.team_id, 2)
                                                             GROUP BY person.id
                                                             HAVING ifNull(equals(argMax(person.is_deleted, person.version), 0), 0))), 0)) SETTINGS optimize_aggregation_in_order=1) AS e__pdi__person ON equals(e__pdi.person_id, e__pdi__person.id)
        WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 00:00:00', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), equals(e.event, 'watched movie'), ifNull(equals(e__pdi__person.properties___name, 'person1'), 0))
        GROUP BY day_start)
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY sum(count) DESC
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_person_property_filtering_clashing_with_event_property
  '
  SELECT groupArray(day_start) AS date,
         groupArray(count) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start
     FROM
       (SELECT 0 AS total,
               minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), toIntervalDay(numbers.number)) AS day_start
        FROM numbers(coalesce(dateDiff('day', assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 00:00:00', 6, 'UTC')), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), 0)) AS numbers
        UNION ALL SELECT 0 AS total,
                         toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 00:00:00', 6, 'UTC'))) AS day_start
        UNION ALL SELECT count(e.uuid) AS total,
                         toStartOfDay(toTimeZone(e.timestamp, 'UTC')) AS day_start
        FROM events AS e SAMPLE 1
        INNER JOIN
          (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                  person_distinct_id2.distinct_id AS distinct_id
           FROM person_distinct_id2
           WHERE equals(person_distinct_id2.team_id, 2)
           GROUP BY person_distinct_id2.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
        INNER JOIN
          (SELECT person.id,
                  replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, 'name'), ''), 'null'), '^"|"$', '') AS properties___name
           FROM person
           WHERE and(equals(person.team_id, 2), ifNull(in(tuple(person.id, person.version),
                                                            (SELECT person.id, max(person.version) AS version
                                                             FROM person
                                                             WHERE equals(person.team_id, 2)
                                                             GROUP BY person.id
                                                             HAVING ifNull(equals(argMax(person.is_deleted, person.version), 0), 0))), 0)) SETTINGS optimize_aggregation_in_order=1) AS e__pdi__person ON equals(e__pdi.person_id, e__pdi__person.id)
        WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 00:00:00', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), equals(e.event, 'watched movie'), ifNull(equals(e__pdi__person.properties___name, 'person1'), 0))
        GROUP BY day_start)
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY sum(count) DESC
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_person_property_filtering_clashing_with_event_property.1
  '
  SELECT groupArray(day_start) AS date,
         groupArray(count) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start
     FROM
       (SELECT 0 AS total,
               minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), toIntervalDay(numbers.number)) AS day_start
        FROM numbers(coalesce(dateDiff('day', assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 00:00:00', 6, 'UTC')), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), 0)) AS numbers
        UNION ALL SELECT 0 AS total,
                         toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 00:00:00', 6, 'UTC'))) AS day_start
        UNION ALL SELECT count(e.uuid) AS total,
                         toStartOfDay(toTimeZone(e.timestamp, 'UTC')) AS day_start
        FROM events AS e SAMPLE 1
        WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 00:00:00', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), equals(e.event, 'watched movie'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, 'name'), ''), 'null'), '^"|"$', ''), '1'), 0))
        GROUP BY day_start)
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY sum(count) DESC
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_person_property_filtering_clashing_with_event_property_materialized
  '
  SELECT groupArray(day_start) AS date,
         groupArray(count) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start
     FROM
       (SELECT 0 AS total,
               minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), toIntervalDay(numbers.number)) AS day_start
        FROM numbers(coalesce(dateDiff('day', assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 00:00:00', 6, 'UTC')), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), 0)) AS numbers
        UNION ALL SELECT 0 AS total,
                         toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 00:00:00', 6, 'UTC'))) AS day_start
        UNION ALL SELECT count(e.uuid) AS total,
                         toStartOfDay(toTimeZone(e.timestamp, 'UTC')) AS day_start
        FROM events AS e SAMPLE 1
        INNER JOIN
          (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                  person_distinct_id2.distinct_id AS distinct_id
           FROM person_distinct_id2
           WHERE equals(person_distinct_id2.team_id, 2)
           GROUP BY person_distinct_id2.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
        INNER JOIN
          (SELECT person.id,
                  nullIf(nullIf(person.pmat_name, ''), 'null') AS properties___name
           FROM person
           WHERE and(equals(person.team_id, 2), ifNull(in(tuple(person.id, person.version),
                                                            (SELECT person.id, max(person.version) AS version
                                                             FROM person
                                                             WHERE equals(person.team_id, 2)
                                                             GROUP BY person.id
                                                             HAVING ifNull(equals(argMax(person.is_deleted, person.version), 0), 0))), 0)) SETTINGS optimize_aggregation_in_order=1) AS e__pdi__person ON equals(e__pdi.person_id, e__pdi__person.id)
        WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 00:00:00', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), equals(e.event, 'watched movie'), ifNull(equals(e__pdi__person.properties___name, 'person1'), 0))
        GROUP BY day_start)
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY sum(count) DESC
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_person_property_filtering_clashing_with_event_property_materialized.1
  '
  SELECT groupArray(day_start) AS date,
         groupArray(count) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start
     FROM
       (SELECT 0 AS total,
               minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), toIntervalDay(numbers.number)) AS day_start
        FROM numbers(coalesce(dateDiff('day', assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 00:00:00', 6, 'UTC')), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), 0)) AS numbers
        UNION ALL SELECT 0 AS total,
                         toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 00:00:00', 6, 'UTC'))) AS day_start
        UNION ALL SELECT count(e.uuid) AS total,
                         toStartOfDay(toTimeZone(e.timestamp, 'UTC')) AS day_start
        FROM events AS e SAMPLE 1
        WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 00:00:00', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), equals(e.event, 'watched movie'), ifNull(equals(nullIf(nullIf(e.mat_name, ''), 'null'), '1'), 0))
        GROUP BY day_start)
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY sum(count) DESC
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_person_property_filtering_materialized
  '
  SELECT groupArray(day_start) AS date,
         groupArray(count) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start
     FROM
       (SELECT 0 AS total,
               minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), toIntervalDay(numbers.number)) AS day_start
        FROM numbers(coalesce(dateDiff('day', assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 00:00:00', 6, 'UTC')), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), 0)) AS numbers
        UNION ALL SELECT 0 AS total,
                         toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 00:00:00', 6, 'UTC'))) AS day_start
        UNION ALL SELECT count(e.uuid) AS total,
                         toStartOfDay(toTimeZone(e.timestamp, 'UTC')) AS day_start
        FROM events AS e SAMPLE 1
        INNER JOIN
          (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                  person_distinct_id2.distinct_id AS distinct_id
           FROM person_distinct_id2
           WHERE equals(person_distinct_id2.team_id, 2)
           GROUP BY person_distinct_id2.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
        INNER JOIN
          (SELECT person.id,
                  nullIf(nullIf(person.pmat_name, ''), 'null') AS properties___name
           FROM person
           WHERE and(equals(person.team_id, 2), ifNull(in(tuple(person.id, person.version),
                                                            (SELECT person.id, max(person.version) AS version
                                                             FROM person
                                                             WHERE equals(person.team_id, 2)
                                                             GROUP BY person.id
                                                             HAVING ifNull(equals(argMax(person.is_deleted, person.version), 0), 0))), 0)) SETTINGS optimize_aggregation_in_order=1) AS e__pdi__person ON equals(e__pdi.person_id, e__pdi__person.id)
        WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 00:00:00', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), equals(e.event, 'watched movie'), ifNull(equals(e__pdi__person.properties___name, 'person1'), 0))
        GROUP BY day_start)
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY sum(count) DESC
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_same_day_with_person_on_events_v2
  '
  
  SELECT distinct_id,
         person_id
  FROM events
  WHERE team_id = 2
    AND distinct_id IN ('distinctid1',
                        'distinctid2')
  GROUP BY distinct_id,
           person_id
  ORDER BY if(distinct_id = 'distinctid1', -1, 0)
  '
---
# name: TestTrends.test_same_day_with_person_on_events_v2.1
  '
  SELECT groupArray(day_start) AS date,
         groupArray(count) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start
     FROM
       (SELECT 0 AS total,
               minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-03 23:59:59', 6, 'UTC'))), toIntervalDay(numbers.number)) AS day_start
        FROM numbers(coalesce(dateDiff('day', assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-03 00:00:00', 6, 'UTC')), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-03 23:59:59', 6, 'UTC'))), 0)) AS numbers
        UNION ALL SELECT 0 AS total,
                         toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-03 00:00:00', 6, 'UTC'))) AS day_start
        UNION ALL SELECT count(e.uuid) AS total,
                         toStartOfDay(toTimeZone(e.timestamp, 'UTC')) AS day_start
        FROM events AS e SAMPLE 1
        WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-03 00:00:00', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-03 23:59:59', 6, 'UTC'))), equals(e.event, 'sign up'))
        GROUP BY day_start)
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY sum(count) DESC
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_same_day_with_person_on_events_v2.2
  '
  SELECT groupArray(day_start) AS date,
         groupArray(count) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start
     FROM
       (SELECT 0 AS total,
               minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-03 23:59:59', 6, 'UTC'))), toIntervalDay(numbers.number)) AS day_start
        FROM numbers(coalesce(dateDiff('day', assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-03 00:00:00', 6, 'UTC')), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-03 23:59:59', 6, 'UTC'))), 0)) AS numbers
        UNION ALL SELECT 0 AS total,
                         toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-03 00:00:00', 6, 'UTC'))) AS day_start
        UNION ALL SELECT count(DISTINCT ifNull(nullIf(e__override.override_person_id, '00000000-0000-0000-0000-000000000000'), e.person_id)) AS total,
                         toStartOfDay(toTimeZone(e.timestamp, 'UTC')) AS day_start
        FROM events AS e SAMPLE 1
        LEFT OUTER JOIN
          (SELECT argMax(person_overrides.override_person_id, person_overrides.version) AS override_person_id,
                  person_overrides.old_person_id AS old_person_id
           FROM person_overrides
           WHERE equals(person_overrides.team_id, 2)
           GROUP BY person_overrides.old_person_id) AS e__override ON equals(e.person_id, e__override.old_person_id)
        WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-03 00:00:00', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-03 23:59:59', 6, 'UTC'))), equals(e.event, 'sign up'))
        GROUP BY day_start)
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY sum(count) DESC
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_timezones_daily
  '
  SELECT groupArray(day_start) AS date,
         groupArray(count) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start
     FROM
       (SELECT 0 AS total,
               minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 23:59:59', 6, 'UTC'))), toIntervalDay(numbers.number)) AS day_start
        FROM numbers(coalesce(dateDiff('day', assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-29 05:00:00', 6, 'UTC')), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 23:59:59', 6, 'UTC'))), 0)) AS numbers
        UNION ALL SELECT 0 AS total,
                         toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-29 05:00:00', 6, 'UTC'))) AS day_start
        UNION ALL SELECT count(e.uuid) AS total,
                         toStartOfDay(toTimeZone(e.timestamp, 'UTC')) AS day_start
        FROM events AS e SAMPLE 1
        WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-29 05:00:00', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 23:59:59', 6, 'UTC'))), equals(e.event, 'sign up'))
        GROUP BY day_start)
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY sum(count) DESC
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_timezones_daily.1
  '
  SELECT groupArray(day_start) AS date,
         groupArray(count) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start
     FROM
       (SELECT 0 AS total,
               minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 23:59:59', 6, 'UTC'))), toIntervalDay(numbers.number)) AS day_start
        FROM numbers(coalesce(dateDiff('day', assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-22 13:01:01', 6, 'UTC')), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 23:59:59', 6, 'UTC'))), 0)) AS numbers
        UNION ALL SELECT 0 AS total,
                         toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-22 13:01:01', 6, 'UTC'))) AS day_start
        UNION ALL SELECT count(DISTINCT e__pdi__person.id) AS total,
                         toStartOfDay(toTimeZone(e.timestamp, 'UTC')) AS day_start
        FROM events AS e SAMPLE 1
        INNER JOIN
          (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                  person_distinct_id2.distinct_id AS distinct_id
           FROM person_distinct_id2
           WHERE equals(person_distinct_id2.team_id, 2)
           GROUP BY person_distinct_id2.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
        INNER JOIN
          (SELECT person.id AS id
           FROM person
           WHERE equals(person.team_id, 2)
           GROUP BY person.id
           HAVING ifNull(equals(argMax(person.is_deleted, person.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS e__pdi__person ON equals(e__pdi.person_id, e__pdi__person.id)
        WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-22 13:01:01', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 23:59:59', 6, 'UTC'))), equals(e.event, 'sign up'))
        GROUP BY day_start)
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY sum(count) DESC
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_timezones_daily.2
  '
  SELECT groupArray(day_start) AS date,
         groupArray(count) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start
     FROM
       (SELECT 0 AS total,
               minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 23:59:59', 6, 'UTC'))), toIntervalDay(numbers.number)) AS day_start
        FROM numbers(coalesce(dateDiff('day', assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-29 13:01:01', 6, 'UTC')), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 23:59:59', 6, 'UTC'))), 0)) AS numbers
        UNION ALL SELECT 0 AS total,
                         toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-29 13:01:01', 6, 'UTC'))) AS day_start
        UNION ALL SELECT counts AS total,
                         toStartOfDay(timestamp) AS day_start
        FROM
          (SELECT d.timestamp,
                  count(DISTINCT e.actor_id) AS counts
           FROM
             (SELECT minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 23:59:59', 6, 'UTC'))), toIntervalDay(numbers.number)) AS timestamp
              FROM numbers(dateDiff('day', minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-29 13:01:01', 6, 'UTC'))), toIntervalDay(7)), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 23:59:59', 6, 'UTC')))) AS numbers) AS d
           CROSS JOIN
             (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                     e__pdi__person.id AS actor_id
              FROM events AS e SAMPLE 1
              INNER JOIN
                (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                        person_distinct_id2.distinct_id AS distinct_id
                 FROM person_distinct_id2
                 WHERE equals(person_distinct_id2.team_id, 2)
                 GROUP BY person_distinct_id2.distinct_id
                 HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
              INNER JOIN
                (SELECT person.id AS id
                 FROM person
                 WHERE equals(person.team_id, 2)
                 GROUP BY person.id
                 HAVING ifNull(equals(argMax(person.is_deleted, person.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS e__pdi__person ON equals(e__pdi.person_id, e__pdi__person.id)
              WHERE and(equals(e.team_id, 2), equals(e.event, 'sign up'), ifNull(greaterOrEquals(timestamp, minus(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-29 13:01:01', 6, 'UTC')), toIntervalDay(7))), 0), ifNull(lessOrEquals(timestamp, assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 23:59:59', 6, 'UTC'))), 0))
              GROUP BY timestamp, actor_id) AS e
           WHERE and(ifNull(lessOrEquals(e.timestamp, plus(d.timestamp, toIntervalDay(1))), 0), ifNull(greater(e.timestamp, minus(d.timestamp, toIntervalDay(6))), 0))
           GROUP BY d.timestamp
           ORDER BY d.timestamp ASC)
        WHERE and(ifNull(greaterOrEquals(timestamp, toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-29 13:01:01', 6, 'UTC')))), 0), ifNull(lessOrEquals(timestamp, assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 23:59:59', 6, 'UTC'))), 0)))
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY sum(count) DESC
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_timezones_daily.3
  '
  SELECT groupArray(day_start) AS date,
         groupArray(count) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start
     FROM
       (SELECT 0 AS total,
               minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 23:59:59', 6, 'UTC'))), toIntervalDay(numbers.number)) AS day_start
        FROM numbers(coalesce(dateDiff('day', assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-29 13:01:01', 6, 'UTC')), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 23:59:59', 6, 'UTC'))), 0)) AS numbers
        UNION ALL SELECT 0 AS total,
                         toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-29 13:01:01', 6, 'UTC'))) AS day_start
        UNION ALL SELECT count(e.uuid) AS total,
                         toStartOfDay(toTimeZone(e.timestamp, 'UTC')) AS day_start
        FROM events AS e SAMPLE 1
        WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-29 13:01:01', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 23:59:59', 6, 'UTC'))), equals(e.event, 'sign up'))
        GROUP BY day_start)
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY sum(count) DESC
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_timezones_daily.4
  '
  SELECT groupArray(value)
  FROM
    (SELECT replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$os'), ''), 'null'), '^"|"$', '') AS value,
            count(e.uuid) AS count
     FROM events AS e
     WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-29 13:01:01', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 23:59:59', 6, 'UTC'))), equals(e.event, 'sign up'))
     GROUP BY value
     ORDER BY count DESC, value DESC
     LIMIT 25)
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_timezones_daily.5
  '
  SELECT groupArray(day_start) AS date,
         groupArray(count) AS total,
         ifNull(toString(breakdown_value), '') AS breakdown_value
  FROM
    (SELECT sum(total) AS count,
            day_start,
            breakdown_value
     FROM
       (SELECT 0 AS total,
               ticks.day_start AS day_start,
               sec.breakdown_value
        FROM
          (SELECT minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 23:59:59', 6, 'UTC'))), toIntervalDay(numbers.number)) AS day_start
           FROM numbers(coalesce(dateDiff('day', assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-29 13:01:01', 6, 'UTC')), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 23:59:59', 6, 'UTC'))), 0)) AS numbers
           UNION ALL SELECT toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-29 13:01:01', 6, 'UTC'))) AS day_start) AS ticks
        CROSS JOIN
          (SELECT breakdown_value
           FROM
             (SELECT [NULL, 'Mac'] AS breakdown_value) ARRAY
           JOIN breakdown_value AS breakdown_value) AS sec
        ORDER BY sec.breakdown_value ASC, day_start ASC
        UNION ALL SELECT count(DISTINCT e__pdi__person.id) AS total,
                         toStartOfDay(toTimeZone(e.timestamp, 'UTC')) AS day_start,
                         replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$os'), ''), 'null'), '^"|"$', '') AS breakdown_value
        FROM events AS e SAMPLE 1
        INNER JOIN
          (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                  person_distinct_id2.distinct_id AS distinct_id
           FROM person_distinct_id2
           WHERE equals(person_distinct_id2.team_id, 2)
           GROUP BY person_distinct_id2.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
        INNER JOIN
          (SELECT person.id AS id
           FROM person
           WHERE equals(person.team_id, 2)
           GROUP BY person.id
           HAVING ifNull(equals(argMax(person.is_deleted, person.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS e__pdi__person ON equals(e__pdi.person_id, e__pdi__person.id)
        WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-29 13:01:01', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 23:59:59', 6, 'UTC'))), equals(e.event, 'sign up'), or(isNull(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$os'), ''), 'null'), '^"|"$', '')), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$os'), ''), 'null'), '^"|"$', ''), 'Mac'), 0)))
        GROUP BY day_start,
                 breakdown_value)
     GROUP BY day_start,
              breakdown_value
     ORDER BY day_start ASC, breakdown_value ASC)
  GROUP BY breakdown_value
  ORDER BY sum(count) DESC, breakdown_value ASC
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_timezones_daily_minus_utc
  '
  SELECT groupArray(day_start) AS date,
         groupArray(count) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start
     FROM
       (SELECT 0 AS total,
               minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 23:59:59', 6, 'America/Phoenix'))), toIntervalDay(numbers.number)) AS day_start
        FROM numbers(coalesce(dateDiff('day', assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-29 05:00:00', 6, 'America/Phoenix')), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 23:59:59', 6, 'America/Phoenix'))), 0)) AS numbers
        UNION ALL SELECT 0 AS total,
                         toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-29 05:00:00', 6, 'America/Phoenix'))) AS day_start
        UNION ALL SELECT count(e.uuid) AS total,
                         toStartOfDay(toTimeZone(e.timestamp, 'America/Phoenix')) AS day_start
        FROM events AS e SAMPLE 1
        WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'America/Phoenix'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-29 05:00:00', 6, 'America/Phoenix')))), lessOrEquals(toTimeZone(e.timestamp, 'America/Phoenix'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 23:59:59', 6, 'America/Phoenix'))), equals(e.event, 'sign up'))
        GROUP BY day_start)
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY sum(count) DESC
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_timezones_daily_minus_utc.1
  '
  SELECT groupArray(day_start) AS date,
         groupArray(count) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start
     FROM
       (SELECT 0 AS total,
               minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 23:59:59', 6, 'America/Phoenix'))), toIntervalDay(numbers.number)) AS day_start
        FROM numbers(coalesce(dateDiff('day', assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-22 06:01:01', 6, 'America/Phoenix')), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 23:59:59', 6, 'America/Phoenix'))), 0)) AS numbers
        UNION ALL SELECT 0 AS total,
                         toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-22 06:01:01', 6, 'America/Phoenix'))) AS day_start
        UNION ALL SELECT count(DISTINCT e__pdi__person.id) AS total,
                         toStartOfDay(toTimeZone(e.timestamp, 'America/Phoenix')) AS day_start
        FROM events AS e SAMPLE 1
        INNER JOIN
          (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                  person_distinct_id2.distinct_id AS distinct_id
           FROM person_distinct_id2
           WHERE equals(person_distinct_id2.team_id, 2)
           GROUP BY person_distinct_id2.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
        INNER JOIN
          (SELECT person.id AS id
           FROM person
           WHERE equals(person.team_id, 2)
           GROUP BY person.id
           HAVING ifNull(equals(argMax(person.is_deleted, person.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS e__pdi__person ON equals(e__pdi.person_id, e__pdi__person.id)
        WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'America/Phoenix'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-22 06:01:01', 6, 'America/Phoenix')))), lessOrEquals(toTimeZone(e.timestamp, 'America/Phoenix'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 23:59:59', 6, 'America/Phoenix'))), equals(e.event, 'sign up'))
        GROUP BY day_start)
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY sum(count) DESC
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_timezones_daily_minus_utc.2
  '
  SELECT groupArray(day_start) AS date,
         groupArray(count) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start
     FROM
       (SELECT 0 AS total,
               minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 23:59:59', 6, 'America/Phoenix'))), toIntervalDay(numbers.number)) AS day_start
        FROM numbers(coalesce(dateDiff('day', assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-29 06:01:01', 6, 'America/Phoenix')), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 23:59:59', 6, 'America/Phoenix'))), 0)) AS numbers
        UNION ALL SELECT 0 AS total,
                         toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-29 06:01:01', 6, 'America/Phoenix'))) AS day_start
        UNION ALL SELECT counts AS total,
                         toStartOfDay(timestamp) AS day_start
        FROM
          (SELECT d.timestamp,
                  count(DISTINCT e.actor_id) AS counts
           FROM
             (SELECT minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 23:59:59', 6, 'America/Phoenix'))), toIntervalDay(numbers.number)) AS timestamp
              FROM numbers(dateDiff('day', minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-29 06:01:01', 6, 'America/Phoenix'))), toIntervalDay(7)), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 23:59:59', 6, 'America/Phoenix')))) AS numbers) AS d
           CROSS JOIN
             (SELECT toTimeZone(e.timestamp, 'America/Phoenix') AS timestamp,
                     e__pdi__person.id AS actor_id
              FROM events AS e SAMPLE 1
              INNER JOIN
                (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                        person_distinct_id2.distinct_id AS distinct_id
                 FROM person_distinct_id2
                 WHERE equals(person_distinct_id2.team_id, 2)
                 GROUP BY person_distinct_id2.distinct_id
                 HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
              INNER JOIN
                (SELECT person.id AS id
                 FROM person
                 WHERE equals(person.team_id, 2)
                 GROUP BY person.id
                 HAVING ifNull(equals(argMax(person.is_deleted, person.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS e__pdi__person ON equals(e__pdi.person_id, e__pdi__person.id)
              WHERE and(equals(e.team_id, 2), equals(e.event, 'sign up'), ifNull(greaterOrEquals(timestamp, minus(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-29 06:01:01', 6, 'America/Phoenix')), toIntervalDay(7))), 0), ifNull(lessOrEquals(timestamp, assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 23:59:59', 6, 'America/Phoenix'))), 0))
              GROUP BY timestamp, actor_id) AS e
           WHERE and(ifNull(lessOrEquals(e.timestamp, plus(d.timestamp, toIntervalDay(1))), 0), ifNull(greater(e.timestamp, minus(d.timestamp, toIntervalDay(6))), 0))
           GROUP BY d.timestamp
           ORDER BY d.timestamp ASC)
        WHERE and(ifNull(greaterOrEquals(timestamp, toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-29 06:01:01', 6, 'America/Phoenix')))), 0), ifNull(lessOrEquals(timestamp, assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 23:59:59', 6, 'America/Phoenix'))), 0)))
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY sum(count) DESC
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_timezones_daily_minus_utc.3
  '
  SELECT groupArray(day_start) AS date,
         groupArray(count) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start
     FROM
       (SELECT 0 AS total,
               minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 23:59:59', 6, 'America/Phoenix'))), toIntervalDay(numbers.number)) AS day_start
        FROM numbers(coalesce(dateDiff('day', assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-29 06:01:01', 6, 'America/Phoenix')), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 23:59:59', 6, 'America/Phoenix'))), 0)) AS numbers
        UNION ALL SELECT 0 AS total,
                         toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-29 06:01:01', 6, 'America/Phoenix'))) AS day_start
        UNION ALL SELECT count(e.uuid) AS total,
                         toStartOfDay(toTimeZone(e.timestamp, 'America/Phoenix')) AS day_start
        FROM events AS e SAMPLE 1
        WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'America/Phoenix'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-29 06:01:01', 6, 'America/Phoenix')))), lessOrEquals(toTimeZone(e.timestamp, 'America/Phoenix'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 23:59:59', 6, 'America/Phoenix'))), equals(e.event, 'sign up'))
        GROUP BY day_start)
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY sum(count) DESC
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_timezones_daily_minus_utc.4
  '
  SELECT groupArray(value)
  FROM
    (SELECT replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$os'), ''), 'null'), '^"|"$', '') AS value,
            count(e.uuid) AS count
     FROM events AS e
     WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'America/Phoenix'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-29 06:01:01', 6, 'America/Phoenix')))), lessOrEquals(toTimeZone(e.timestamp, 'America/Phoenix'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 23:59:59', 6, 'America/Phoenix'))), equals(e.event, 'sign up'))
     GROUP BY value
     ORDER BY count DESC, value DESC
     LIMIT 25)
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_timezones_daily_minus_utc.5
  '
  SELECT groupArray(day_start) AS date,
         groupArray(count) AS total,
         ifNull(toString(breakdown_value), '') AS breakdown_value
  FROM
    (SELECT sum(total) AS count,
            day_start,
            breakdown_value
     FROM
       (SELECT 0 AS total,
               ticks.day_start AS day_start,
               sec.breakdown_value
        FROM
          (SELECT minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 23:59:59', 6, 'America/Phoenix'))), toIntervalDay(numbers.number)) AS day_start
           FROM numbers(coalesce(dateDiff('day', assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-29 06:01:01', 6, 'America/Phoenix')), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 23:59:59', 6, 'America/Phoenix'))), 0)) AS numbers
           UNION ALL SELECT toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-29 06:01:01', 6, 'America/Phoenix'))) AS day_start) AS ticks
        CROSS JOIN
          (SELECT breakdown_value
           FROM
             (SELECT [NULL, 'Mac'] AS breakdown_value) ARRAY
           JOIN breakdown_value AS breakdown_value) AS sec
        ORDER BY sec.breakdown_value ASC, day_start ASC
        UNION ALL SELECT count(DISTINCT e__pdi__person.id) AS total,
                         toStartOfDay(toTimeZone(e.timestamp, 'America/Phoenix')) AS day_start,
                         replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$os'), ''), 'null'), '^"|"$', '') AS breakdown_value
        FROM events AS e SAMPLE 1
        INNER JOIN
          (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                  person_distinct_id2.distinct_id AS distinct_id
           FROM person_distinct_id2
           WHERE equals(person_distinct_id2.team_id, 2)
           GROUP BY person_distinct_id2.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
        INNER JOIN
          (SELECT person.id AS id
           FROM person
           WHERE equals(person.team_id, 2)
           GROUP BY person.id
           HAVING ifNull(equals(argMax(person.is_deleted, person.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS e__pdi__person ON equals(e__pdi.person_id, e__pdi__person.id)
        WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'America/Phoenix'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-29 06:01:01', 6, 'America/Phoenix')))), lessOrEquals(toTimeZone(e.timestamp, 'America/Phoenix'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 23:59:59', 6, 'America/Phoenix'))), equals(e.event, 'sign up'), or(isNull(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$os'), ''), 'null'), '^"|"$', '')), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$os'), ''), 'null'), '^"|"$', ''), 'Mac'), 0)))
        GROUP BY day_start,
                 breakdown_value)
     GROUP BY day_start,
              breakdown_value
     ORDER BY day_start ASC, breakdown_value ASC)
  GROUP BY breakdown_value
  ORDER BY sum(count) DESC, breakdown_value ASC
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_timezones_daily_plus_utc
  '
  SELECT groupArray(day_start) AS date,
         groupArray(count) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start
     FROM
       (SELECT 0 AS total,
               minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 23:59:59', 6, 'Asia/Tokyo'))), toIntervalDay(numbers.number)) AS day_start
        FROM numbers(coalesce(dateDiff('day', assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-29 05:00:00', 6, 'Asia/Tokyo')), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 23:59:59', 6, 'Asia/Tokyo'))), 0)) AS numbers
        UNION ALL SELECT 0 AS total,
                         toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-29 05:00:00', 6, 'Asia/Tokyo'))) AS day_start
        UNION ALL SELECT count(e.uuid) AS total,
                         toStartOfDay(toTimeZone(e.timestamp, 'Asia/Tokyo')) AS day_start
        FROM events AS e SAMPLE 1
        WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'Asia/Tokyo'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-29 05:00:00', 6, 'Asia/Tokyo')))), lessOrEquals(toTimeZone(e.timestamp, 'Asia/Tokyo'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 23:59:59', 6, 'Asia/Tokyo'))), equals(e.event, 'sign up'))
        GROUP BY day_start)
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY sum(count) DESC
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_timezones_daily_plus_utc.1
  '
  SELECT groupArray(day_start) AS date,
         groupArray(count) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start
     FROM
       (SELECT 0 AS total,
               minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 23:59:59', 6, 'Asia/Tokyo'))), toIntervalDay(numbers.number)) AS day_start
        FROM numbers(coalesce(dateDiff('day', assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-22 22:01:01', 6, 'Asia/Tokyo')), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 23:59:59', 6, 'Asia/Tokyo'))), 0)) AS numbers
        UNION ALL SELECT 0 AS total,
                         toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-22 22:01:01', 6, 'Asia/Tokyo'))) AS day_start
        UNION ALL SELECT count(DISTINCT e__pdi__person.id) AS total,
                         toStartOfDay(toTimeZone(e.timestamp, 'Asia/Tokyo')) AS day_start
        FROM events AS e SAMPLE 1
        INNER JOIN
          (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                  person_distinct_id2.distinct_id AS distinct_id
           FROM person_distinct_id2
           WHERE equals(person_distinct_id2.team_id, 2)
           GROUP BY person_distinct_id2.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
        INNER JOIN
          (SELECT person.id AS id
           FROM person
           WHERE equals(person.team_id, 2)
           GROUP BY person.id
           HAVING ifNull(equals(argMax(person.is_deleted, person.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS e__pdi__person ON equals(e__pdi.person_id, e__pdi__person.id)
        WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'Asia/Tokyo'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-22 22:01:01', 6, 'Asia/Tokyo')))), lessOrEquals(toTimeZone(e.timestamp, 'Asia/Tokyo'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 23:59:59', 6, 'Asia/Tokyo'))), equals(e.event, 'sign up'))
        GROUP BY day_start)
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY sum(count) DESC
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_timezones_daily_plus_utc.2
  '
  SELECT groupArray(day_start) AS date,
         groupArray(count) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start
     FROM
       (SELECT 0 AS total,
               minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 23:59:59', 6, 'Asia/Tokyo'))), toIntervalDay(numbers.number)) AS day_start
        FROM numbers(coalesce(dateDiff('day', assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-29 22:01:01', 6, 'Asia/Tokyo')), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 23:59:59', 6, 'Asia/Tokyo'))), 0)) AS numbers
        UNION ALL SELECT 0 AS total,
                         toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-29 22:01:01', 6, 'Asia/Tokyo'))) AS day_start
        UNION ALL SELECT counts AS total,
                         toStartOfDay(timestamp) AS day_start
        FROM
          (SELECT d.timestamp,
                  count(DISTINCT e.actor_id) AS counts
           FROM
             (SELECT minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 23:59:59', 6, 'Asia/Tokyo'))), toIntervalDay(numbers.number)) AS timestamp
              FROM numbers(dateDiff('day', minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-29 22:01:01', 6, 'Asia/Tokyo'))), toIntervalDay(7)), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 23:59:59', 6, 'Asia/Tokyo')))) AS numbers) AS d
           CROSS JOIN
             (SELECT toTimeZone(e.timestamp, 'Asia/Tokyo') AS timestamp,
                     e__pdi__person.id AS actor_id
              FROM events AS e SAMPLE 1
              INNER JOIN
                (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                        person_distinct_id2.distinct_id AS distinct_id
                 FROM person_distinct_id2
                 WHERE equals(person_distinct_id2.team_id, 2)
                 GROUP BY person_distinct_id2.distinct_id
                 HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
              INNER JOIN
                (SELECT person.id AS id
                 FROM person
                 WHERE equals(person.team_id, 2)
                 GROUP BY person.id
                 HAVING ifNull(equals(argMax(person.is_deleted, person.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS e__pdi__person ON equals(e__pdi.person_id, e__pdi__person.id)
              WHERE and(equals(e.team_id, 2), equals(e.event, 'sign up'), ifNull(greaterOrEquals(timestamp, minus(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-29 22:01:01', 6, 'Asia/Tokyo')), toIntervalDay(7))), 0), ifNull(lessOrEquals(timestamp, assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 23:59:59', 6, 'Asia/Tokyo'))), 0))
              GROUP BY timestamp, actor_id) AS e
           WHERE and(ifNull(lessOrEquals(e.timestamp, plus(d.timestamp, toIntervalDay(1))), 0), ifNull(greater(e.timestamp, minus(d.timestamp, toIntervalDay(6))), 0))
           GROUP BY d.timestamp
           ORDER BY d.timestamp ASC)
        WHERE and(ifNull(greaterOrEquals(timestamp, toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-29 22:01:01', 6, 'Asia/Tokyo')))), 0), ifNull(lessOrEquals(timestamp, assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 23:59:59', 6, 'Asia/Tokyo'))), 0)))
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY sum(count) DESC
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_timezones_daily_plus_utc.3
  '
  SELECT groupArray(day_start) AS date,
         groupArray(count) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start
     FROM
       (SELECT 0 AS total,
               minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 23:59:59', 6, 'Asia/Tokyo'))), toIntervalDay(numbers.number)) AS day_start
        FROM numbers(coalesce(dateDiff('day', assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-29 22:01:01', 6, 'Asia/Tokyo')), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 23:59:59', 6, 'Asia/Tokyo'))), 0)) AS numbers
        UNION ALL SELECT 0 AS total,
                         toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-29 22:01:01', 6, 'Asia/Tokyo'))) AS day_start
        UNION ALL SELECT count(e.uuid) AS total,
                         toStartOfDay(toTimeZone(e.timestamp, 'Asia/Tokyo')) AS day_start
        FROM events AS e SAMPLE 1
        WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'Asia/Tokyo'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-29 22:01:01', 6, 'Asia/Tokyo')))), lessOrEquals(toTimeZone(e.timestamp, 'Asia/Tokyo'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 23:59:59', 6, 'Asia/Tokyo'))), equals(e.event, 'sign up'))
        GROUP BY day_start)
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY sum(count) DESC
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_timezones_daily_plus_utc.4
  '
  SELECT groupArray(value)
  FROM
    (SELECT replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$os'), ''), 'null'), '^"|"$', '') AS value,
            count(e.uuid) AS count
     FROM events AS e
     WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'Asia/Tokyo'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-29 22:01:01', 6, 'Asia/Tokyo')))), lessOrEquals(toTimeZone(e.timestamp, 'Asia/Tokyo'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 23:59:59', 6, 'Asia/Tokyo'))), equals(e.event, 'sign up'))
     GROUP BY value
     ORDER BY count DESC, value DESC
     LIMIT 25)
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_timezones_daily_plus_utc.5
  '
  SELECT groupArray(day_start) AS date,
         groupArray(count) AS total,
         ifNull(toString(breakdown_value), '') AS breakdown_value
  FROM
    (SELECT sum(total) AS count,
            day_start,
            breakdown_value
     FROM
       (SELECT 0 AS total,
               ticks.day_start AS day_start,
               sec.breakdown_value
        FROM
          (SELECT minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 23:59:59', 6, 'Asia/Tokyo'))), toIntervalDay(numbers.number)) AS day_start
           FROM numbers(coalesce(dateDiff('day', assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-29 22:01:01', 6, 'Asia/Tokyo')), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 23:59:59', 6, 'Asia/Tokyo'))), 0)) AS numbers
           UNION ALL SELECT toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-29 22:01:01', 6, 'Asia/Tokyo'))) AS day_start) AS ticks
        CROSS JOIN
          (SELECT breakdown_value
           FROM
             (SELECT [NULL, 'Mac'] AS breakdown_value) ARRAY
           JOIN breakdown_value AS breakdown_value) AS sec
        ORDER BY sec.breakdown_value ASC, day_start ASC
        UNION ALL SELECT count(DISTINCT e__pdi__person.id) AS total,
                         toStartOfDay(toTimeZone(e.timestamp, 'Asia/Tokyo')) AS day_start,
                         replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$os'), ''), 'null'), '^"|"$', '') AS breakdown_value
        FROM events AS e SAMPLE 1
        INNER JOIN
          (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                  person_distinct_id2.distinct_id AS distinct_id
           FROM person_distinct_id2
           WHERE equals(person_distinct_id2.team_id, 2)
           GROUP BY person_distinct_id2.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
        INNER JOIN
          (SELECT person.id AS id
           FROM person
           WHERE equals(person.team_id, 2)
           GROUP BY person.id
           HAVING ifNull(equals(argMax(person.is_deleted, person.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS e__pdi__person ON equals(e__pdi.person_id, e__pdi__person.id)
        WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'Asia/Tokyo'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-29 22:01:01', 6, 'Asia/Tokyo')))), lessOrEquals(toTimeZone(e.timestamp, 'Asia/Tokyo'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 23:59:59', 6, 'Asia/Tokyo'))), equals(e.event, 'sign up'), or(isNull(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$os'), ''), 'null'), '^"|"$', '')), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$os'), ''), 'null'), '^"|"$', ''), 'Mac'), 0)))
        GROUP BY day_start,
                 breakdown_value)
     GROUP BY day_start,
              breakdown_value
     ORDER BY day_start ASC, breakdown_value ASC)
  GROUP BY breakdown_value
  ORDER BY sum(count) DESC, breakdown_value ASC
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_timezones_hourly_relative_from
  '
  SELECT groupArray(day_start) AS date,
         groupArray(count) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start
     FROM
       (SELECT 0 AS total,
               minus(toStartOfHour(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 10:59:59', 6, 'UTC'))), toIntervalHour(numbers.number)) AS day_start
        FROM numbers(coalesce(dateDiff('hour', assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 00:00:00', 6, 'UTC')), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 10:59:59', 6, 'UTC'))), 0)) AS numbers
        UNION ALL SELECT 0 AS total,
                         toStartOfHour(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 00:00:00', 6, 'UTC'))) AS day_start
        UNION ALL SELECT count(DISTINCT e__pdi__person.id) AS total,
                         toStartOfHour(toTimeZone(e.timestamp, 'UTC')) AS day_start
        FROM events AS e SAMPLE 1
        INNER JOIN
          (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                  person_distinct_id2.distinct_id AS distinct_id
           FROM person_distinct_id2
           WHERE equals(person_distinct_id2.team_id, 2)
           GROUP BY person_distinct_id2.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
        INNER JOIN
          (SELECT person.id AS id
           FROM person
           WHERE equals(person.team_id, 2)
           GROUP BY person.id
           HAVING ifNull(equals(argMax(person.is_deleted, person.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS e__pdi__person ON equals(e__pdi.person_id, e__pdi__person.id)
        WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 00:00:00', 6, 'UTC'))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 10:59:59', 6, 'UTC'))), equals(e.event, 'sign up'))
        GROUP BY day_start)
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY sum(count) DESC
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_timezones_hourly_relative_from.1
  '
  SELECT groupArray(day_start) AS date,
         groupArray(count) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start
     FROM
       (SELECT 0 AS total,
               minus(toStartOfHour(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 10:59:59', 6, 'UTC'))), toIntervalHour(numbers.number)) AS day_start
        FROM numbers(coalesce(dateDiff('hour', assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 00:00:00', 6, 'UTC')), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 10:59:59', 6, 'UTC'))), 0)) AS numbers
        UNION ALL SELECT 0 AS total,
                         toStartOfHour(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 00:00:00', 6, 'UTC'))) AS day_start
        UNION ALL SELECT count(e.uuid) AS total,
                         toStartOfHour(toTimeZone(e.timestamp, 'UTC')) AS day_start
        FROM events AS e SAMPLE 1
        WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 00:00:00', 6, 'UTC'))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 10:59:59', 6, 'UTC'))), equals(e.event, 'sign up'))
        GROUP BY day_start)
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY sum(count) DESC
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_timezones_hourly_relative_from_minus_utc
  '
  SELECT groupArray(day_start) AS date,
         groupArray(count) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start
     FROM
       (SELECT 0 AS total,
               minus(toStartOfHour(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 10:59:59', 6, 'America/Phoenix'))), toIntervalHour(numbers.number)) AS day_start
        FROM numbers(coalesce(dateDiff('hour', assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 00:00:00', 6, 'America/Phoenix')), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 10:59:59', 6, 'America/Phoenix'))), 0)) AS numbers
        UNION ALL SELECT 0 AS total,
                         toStartOfHour(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 00:00:00', 6, 'America/Phoenix'))) AS day_start
        UNION ALL SELECT count(DISTINCT e__pdi__person.id) AS total,
                         toStartOfHour(toTimeZone(e.timestamp, 'America/Phoenix')) AS day_start
        FROM events AS e SAMPLE 1
        INNER JOIN
          (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                  person_distinct_id2.distinct_id AS distinct_id
           FROM person_distinct_id2
           WHERE equals(person_distinct_id2.team_id, 2)
           GROUP BY person_distinct_id2.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
        INNER JOIN
          (SELECT person.id AS id
           FROM person
           WHERE equals(person.team_id, 2)
           GROUP BY person.id
           HAVING ifNull(equals(argMax(person.is_deleted, person.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS e__pdi__person ON equals(e__pdi.person_id, e__pdi__person.id)
        WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'America/Phoenix'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 00:00:00', 6, 'America/Phoenix'))), lessOrEquals(toTimeZone(e.timestamp, 'America/Phoenix'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 10:59:59', 6, 'America/Phoenix'))), equals(e.event, 'sign up'))
        GROUP BY day_start)
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY sum(count) DESC
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_timezones_hourly_relative_from_minus_utc.1
  '
  SELECT groupArray(day_start) AS date,
         groupArray(count) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start
     FROM
       (SELECT 0 AS total,
               minus(toStartOfHour(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 10:59:59', 6, 'America/Phoenix'))), toIntervalHour(numbers.number)) AS day_start
        FROM numbers(coalesce(dateDiff('hour', assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 00:00:00', 6, 'America/Phoenix')), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 10:59:59', 6, 'America/Phoenix'))), 0)) AS numbers
        UNION ALL SELECT 0 AS total,
                         toStartOfHour(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 00:00:00', 6, 'America/Phoenix'))) AS day_start
        UNION ALL SELECT count(e.uuid) AS total,
                         toStartOfHour(toTimeZone(e.timestamp, 'America/Phoenix')) AS day_start
        FROM events AS e SAMPLE 1
        WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'America/Phoenix'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 00:00:00', 6, 'America/Phoenix'))), lessOrEquals(toTimeZone(e.timestamp, 'America/Phoenix'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 10:59:59', 6, 'America/Phoenix'))), equals(e.event, 'sign up'))
        GROUP BY day_start)
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY sum(count) DESC
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_timezones_hourly_relative_from_plus_utc
  '
  SELECT groupArray(day_start) AS date,
         groupArray(count) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start
     FROM
       (SELECT 0 AS total,
               minus(toStartOfHour(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 10:59:59', 6, 'Asia/Tokyo'))), toIntervalHour(numbers.number)) AS day_start
        FROM numbers(coalesce(dateDiff('hour', assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 00:00:00', 6, 'Asia/Tokyo')), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 10:59:59', 6, 'Asia/Tokyo'))), 0)) AS numbers
        UNION ALL SELECT 0 AS total,
                         toStartOfHour(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 00:00:00', 6, 'Asia/Tokyo'))) AS day_start
        UNION ALL SELECT count(DISTINCT e__pdi__person.id) AS total,
                         toStartOfHour(toTimeZone(e.timestamp, 'Asia/Tokyo')) AS day_start
        FROM events AS e SAMPLE 1
        INNER JOIN
          (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                  person_distinct_id2.distinct_id AS distinct_id
           FROM person_distinct_id2
           WHERE equals(person_distinct_id2.team_id, 2)
           GROUP BY person_distinct_id2.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
        INNER JOIN
          (SELECT person.id AS id
           FROM person
           WHERE equals(person.team_id, 2)
           GROUP BY person.id
           HAVING ifNull(equals(argMax(person.is_deleted, person.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS e__pdi__person ON equals(e__pdi.person_id, e__pdi__person.id)
        WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'Asia/Tokyo'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 00:00:00', 6, 'Asia/Tokyo'))), lessOrEquals(toTimeZone(e.timestamp, 'Asia/Tokyo'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 10:59:59', 6, 'Asia/Tokyo'))), equals(e.event, 'sign up'))
        GROUP BY day_start)
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY sum(count) DESC
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_timezones_hourly_relative_from_plus_utc.1
  '
  SELECT groupArray(day_start) AS date,
         groupArray(count) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start
     FROM
       (SELECT 0 AS total,
               minus(toStartOfHour(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 10:59:59', 6, 'Asia/Tokyo'))), toIntervalHour(numbers.number)) AS day_start
        FROM numbers(coalesce(dateDiff('hour', assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 00:00:00', 6, 'Asia/Tokyo')), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 10:59:59', 6, 'Asia/Tokyo'))), 0)) AS numbers
        UNION ALL SELECT 0 AS total,
                         toStartOfHour(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 00:00:00', 6, 'Asia/Tokyo'))) AS day_start
        UNION ALL SELECT count(e.uuid) AS total,
                         toStartOfHour(toTimeZone(e.timestamp, 'Asia/Tokyo')) AS day_start
        FROM events AS e SAMPLE 1
        WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'Asia/Tokyo'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 00:00:00', 6, 'Asia/Tokyo'))), lessOrEquals(toTimeZone(e.timestamp, 'Asia/Tokyo'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 10:59:59', 6, 'Asia/Tokyo'))), equals(e.event, 'sign up'))
        GROUP BY day_start)
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY sum(count) DESC
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_timezones_weekly
  '
  SELECT groupArray(day_start) AS date,
         groupArray(count) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start
     FROM
       (SELECT 0 AS total,
               minus(toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-26 23:59:59', 6, 'UTC')), 0), toIntervalWeek(numbers.number)) AS day_start
        FROM numbers(coalesce(dateDiff('week', assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-12 03:00:00', 6, 'UTC')), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-26 23:59:59', 6, 'UTC'))), 0)) AS numbers
        UNION ALL SELECT 0 AS total,
                         toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-12 03:00:00', 6, 'UTC')), 0) AS day_start
        UNION ALL SELECT count(e.uuid) AS total,
                         toStartOfWeek(toTimeZone(e.timestamp, 'UTC'), 0) AS day_start
        FROM events AS e SAMPLE 1
        WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-12 03:00:00', 6, 'UTC')), 0)), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-26 23:59:59', 6, 'UTC'))), equals(e.event, 'sign up'))
        GROUP BY day_start)
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY sum(count) DESC
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_timezones_weekly.1
  '
  SELECT groupArray(day_start) AS date,
         groupArray(count) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start
     FROM
       (SELECT 0 AS total,
               minus(toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-26 23:59:59', 6, 'UTC')), 3), toIntervalWeek(numbers.number)) AS day_start
        FROM numbers(coalesce(dateDiff('week', assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-12 03:00:00', 6, 'UTC')), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-26 23:59:59', 6, 'UTC'))), 0)) AS numbers
        UNION ALL SELECT 0 AS total,
                         toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-12 03:00:00', 6, 'UTC')), 3) AS day_start
        UNION ALL SELECT count(e.uuid) AS total,
                         toStartOfWeek(toTimeZone(e.timestamp, 'UTC'), 3) AS day_start
        FROM events AS e SAMPLE 1
        WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-12 03:00:00', 6, 'UTC')), 3)), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-26 23:59:59', 6, 'UTC'))), equals(e.event, 'sign up'))
        GROUP BY day_start)
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY sum(count) DESC
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_timezones_weekly_minus_utc
  '
  SELECT groupArray(day_start) AS date,
         groupArray(count) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start
     FROM
       (SELECT 0 AS total,
               minus(toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-26 23:59:59', 6, 'America/Phoenix')), 0), toIntervalWeek(numbers.number)) AS day_start
        FROM numbers(coalesce(dateDiff('week', assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-12 03:00:00', 6, 'America/Phoenix')), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-26 23:59:59', 6, 'America/Phoenix'))), 0)) AS numbers
        UNION ALL SELECT 0 AS total,
                         toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-12 03:00:00', 6, 'America/Phoenix')), 0) AS day_start
        UNION ALL SELECT count(e.uuid) AS total,
                         toStartOfWeek(toTimeZone(e.timestamp, 'America/Phoenix'), 0) AS day_start
        FROM events AS e SAMPLE 1
        WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'America/Phoenix'), toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-12 03:00:00', 6, 'America/Phoenix')), 0)), lessOrEquals(toTimeZone(e.timestamp, 'America/Phoenix'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-26 23:59:59', 6, 'America/Phoenix'))), equals(e.event, 'sign up'))
        GROUP BY day_start)
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY sum(count) DESC
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_timezones_weekly_minus_utc.1
  '
  SELECT groupArray(day_start) AS date,
         groupArray(count) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start
     FROM
       (SELECT 0 AS total,
               minus(toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-26 23:59:59', 6, 'America/Phoenix')), 3), toIntervalWeek(numbers.number)) AS day_start
        FROM numbers(coalesce(dateDiff('week', assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-12 03:00:00', 6, 'America/Phoenix')), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-26 23:59:59', 6, 'America/Phoenix'))), 0)) AS numbers
        UNION ALL SELECT 0 AS total,
                         toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-12 03:00:00', 6, 'America/Phoenix')), 3) AS day_start
        UNION ALL SELECT count(e.uuid) AS total,
                         toStartOfWeek(toTimeZone(e.timestamp, 'America/Phoenix'), 3) AS day_start
        FROM events AS e SAMPLE 1
        WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'America/Phoenix'), toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-12 03:00:00', 6, 'America/Phoenix')), 3)), lessOrEquals(toTimeZone(e.timestamp, 'America/Phoenix'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-26 23:59:59', 6, 'America/Phoenix'))), equals(e.event, 'sign up'))
        GROUP BY day_start)
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY sum(count) DESC
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_timezones_weekly_plus_utc
  '
  SELECT groupArray(day_start) AS date,
         groupArray(count) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start
     FROM
       (SELECT 0 AS total,
               minus(toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-26 23:59:59', 6, 'Asia/Tokyo')), 0), toIntervalWeek(numbers.number)) AS day_start
        FROM numbers(coalesce(dateDiff('week', assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-12 03:00:00', 6, 'Asia/Tokyo')), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-26 23:59:59', 6, 'Asia/Tokyo'))), 0)) AS numbers
        UNION ALL SELECT 0 AS total,
                         toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-12 03:00:00', 6, 'Asia/Tokyo')), 0) AS day_start
        UNION ALL SELECT count(e.uuid) AS total,
                         toStartOfWeek(toTimeZone(e.timestamp, 'Asia/Tokyo'), 0) AS day_start
        FROM events AS e SAMPLE 1
        WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'Asia/Tokyo'), toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-12 03:00:00', 6, 'Asia/Tokyo')), 0)), lessOrEquals(toTimeZone(e.timestamp, 'Asia/Tokyo'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-26 23:59:59', 6, 'Asia/Tokyo'))), equals(e.event, 'sign up'))
        GROUP BY day_start)
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY sum(count) DESC
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_timezones_weekly_plus_utc.1
  '
  SELECT groupArray(day_start) AS date,
         groupArray(count) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start
     FROM
       (SELECT 0 AS total,
               minus(toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-26 23:59:59', 6, 'Asia/Tokyo')), 3), toIntervalWeek(numbers.number)) AS day_start
        FROM numbers(coalesce(dateDiff('week', assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-12 03:00:00', 6, 'Asia/Tokyo')), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-26 23:59:59', 6, 'Asia/Tokyo'))), 0)) AS numbers
        UNION ALL SELECT 0 AS total,
                         toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-12 03:00:00', 6, 'Asia/Tokyo')), 3) AS day_start
        UNION ALL SELECT count(e.uuid) AS total,
                         toStartOfWeek(toTimeZone(e.timestamp, 'Asia/Tokyo'), 3) AS day_start
        FROM events AS e SAMPLE 1
        WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'Asia/Tokyo'), toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-12 03:00:00', 6, 'Asia/Tokyo')), 3)), lessOrEquals(toTimeZone(e.timestamp, 'Asia/Tokyo'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-26 23:59:59', 6, 'Asia/Tokyo'))), equals(e.event, 'sign up'))
        GROUP BY day_start)
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY sum(count) DESC
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_trend_breakdown_user_props_with_filter_with_partial_property_pushdowns
  '
  SELECT groupArray(value)
  FROM
    (SELECT e__pdi__person.properties___email AS value,
            count(e.uuid) AS count
     FROM events AS e
     INNER JOIN
       (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
               person_distinct_id2.distinct_id AS distinct_id
        FROM person_distinct_id2
        WHERE equals(person_distinct_id2.team_id, 2)
        GROUP BY person_distinct_id2.distinct_id
        HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
     INNER JOIN
       (SELECT person.id,
               replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, 'email'), ''), 'null'), '^"|"$', '') AS properties___email,
               replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, '$os'), ''), 'null'), '^"|"$', '') AS `properties___$os`,
               replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, '$browser'), ''), 'null'), '^"|"$', '') AS `properties___$browser`
        FROM person
        WHERE and(equals(person.team_id, 2), ifNull(in(tuple(person.id, person.version),
                                                         (SELECT person.id, max(person.version) AS version
                                                          FROM person
                                                          WHERE equals(person.team_id, 2)
                                                          GROUP BY person.id
                                                          HAVING ifNull(equals(argMax(person.is_deleted, person.version), 0), 0))), 0)) SETTINGS optimize_aggregation_in_order=1) AS e__pdi__person ON equals(e__pdi.person_id, e__pdi__person.id)
     WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-07-01 23:59:59', 6, 'UTC'))), equals(e.event, 'sign up'), and(or(ifNull(notILike(e__pdi__person.properties___email, '%@posthog.com%'), 1), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, 'key'), ''), 'null'), '^"|"$', ''), 'val'), 0)), or(ifNull(equals(e__pdi__person.`properties___$os`, 'android'), 0), ifNull(equals(e__pdi__person.`properties___$browser`, 'safari'), 0))))
     GROUP BY value
     ORDER BY count DESC, value DESC
     LIMIT 25)
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_trend_breakdown_user_props_with_filter_with_partial_property_pushdowns.1
  '
  SELECT groupArray(day_start) AS date,
         groupArray(count) AS total,
         ifNull(toString(breakdown_value), '') AS breakdown_value
  FROM
    (SELECT sum(total) AS count,
            day_start,
            breakdown_value
     FROM
       (SELECT 0 AS total,
               ticks.day_start AS day_start,
               sec.breakdown_value
        FROM
          (SELECT minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-07-01 23:59:59', 6, 'UTC'))), toIntervalDay(numbers.number)) AS day_start
           FROM numbers(coalesce(dateDiff('day', assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC')), assumeNotNull(parseDateTime64BestEffortOrNull('2020-07-01 23:59:59', 6, 'UTC'))), 0)) AS numbers
           UNION ALL SELECT toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC'))) AS day_start) AS ticks
        CROSS JOIN
          (SELECT breakdown_value
           FROM
             (SELECT [NULL, 'test2@posthog.com', 'test@gmail.com', 'test5@posthog.com', 'test4@posthog.com', 'test3@posthog.com'] AS breakdown_value) ARRAY
           JOIN breakdown_value AS breakdown_value) AS sec
        ORDER BY sec.breakdown_value ASC, day_start ASC
        UNION ALL SELECT count(e.uuid) AS total,
                         toStartOfDay(toTimeZone(e.timestamp, 'UTC')) AS day_start,
                         e__pdi__person.properties___email AS breakdown_value
        FROM events AS e SAMPLE 1
        INNER JOIN
          (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                  person_distinct_id2.distinct_id AS distinct_id
           FROM person_distinct_id2
           WHERE equals(person_distinct_id2.team_id, 2)
           GROUP BY person_distinct_id2.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
        INNER JOIN
          (SELECT person.id,
                  replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, 'email'), ''), 'null'), '^"|"$', '') AS properties___email,
                  replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, '$os'), ''), 'null'), '^"|"$', '') AS `properties___$os`,
                  replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, '$browser'), ''), 'null'), '^"|"$', '') AS `properties___$browser`
           FROM person
           WHERE and(equals(person.team_id, 2), ifNull(in(tuple(person.id, person.version),
                                                            (SELECT person.id, max(person.version) AS version
                                                             FROM person
                                                             WHERE equals(person.team_id, 2)
                                                             GROUP BY person.id
                                                             HAVING ifNull(equals(argMax(person.is_deleted, person.version), 0), 0))), 0)) SETTINGS optimize_aggregation_in_order=1) AS e__pdi__person ON equals(e__pdi.person_id, e__pdi__person.id)
        WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-07-01 23:59:59', 6, 'UTC'))), equals(e.event, 'sign up'), and(or(ifNull(notILike(e__pdi__person.properties___email, '%@posthog.com%'), 1), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, 'key'), ''), 'null'), '^"|"$', ''), 'val'), 0)), or(ifNull(equals(e__pdi__person.`properties___$os`, 'android'), 0), ifNull(equals(e__pdi__person.`properties___$browser`, 'safari'), 0))), or(isNull(e__pdi__person.properties___email), ifNull(equals(e__pdi__person.properties___email, 'test2@posthog.com'), 0), ifNull(equals(e__pdi__person.properties___email, 'test@gmail.com'), 0), ifNull(equals(e__pdi__person.properties___email, 'test5@posthog.com'), 0), ifNull(equals(e__pdi__person.properties___email, 'test4@posthog.com'), 0), ifNull(equals(e__pdi__person.properties___email, 'test3@posthog.com'), 0)))
        GROUP BY day_start,
                 breakdown_value)
     GROUP BY day_start,
              breakdown_value
     ORDER BY day_start ASC, breakdown_value ASC)
  GROUP BY breakdown_value
  ORDER BY sum(count) DESC, breakdown_value ASC
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_trend_breakdown_user_props_with_filter_with_partial_property_pushdowns.2
  '
  SELECT groupArray(value)
  FROM
    (SELECT e__pdi__person.properties___email AS value,
            count(e.uuid) AS count
     FROM events AS e
     INNER JOIN
       (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
               person_distinct_id2.distinct_id AS distinct_id
        FROM person_distinct_id2
        WHERE equals(person_distinct_id2.team_id, 2)
        GROUP BY person_distinct_id2.distinct_id
        HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
     INNER JOIN
       (SELECT person.id,
               replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, 'email'), ''), 'null'), '^"|"$', '') AS properties___email,
               replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, '$os'), ''), 'null'), '^"|"$', '') AS `properties___$os`,
               replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, '$browser'), ''), 'null'), '^"|"$', '') AS `properties___$browser`
        FROM person
        WHERE and(equals(person.team_id, 2), ifNull(in(tuple(person.id, person.version),
                                                         (SELECT person.id, max(person.version) AS version
                                                          FROM person
                                                          WHERE equals(person.team_id, 2)
                                                          GROUP BY person.id
                                                          HAVING ifNull(equals(argMax(person.is_deleted, person.version), 0), 0))), 0)) SETTINGS optimize_aggregation_in_order=1) AS e__pdi__person ON equals(e__pdi.person_id, e__pdi__person.id)
     WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-07-01 23:59:59', 6, 'UTC'))), equals(e.event, 'sign up'), and(ifNull(equals(e__pdi__person.`properties___$os`, 'android'), 0), ifNull(equals(e__pdi__person.`properties___$browser`, 'chrome'), 0)), and(ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, 'key'), ''), 'null'), '^"|"$', ''), 'val'), 0), ifNull(ilike(e__pdi__person.properties___email, '%@posthog.com%'), 0)))
     GROUP BY value
     ORDER BY count DESC, value DESC
     LIMIT 25)
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_trend_breakdown_user_props_with_filter_with_partial_property_pushdowns.3
  '
  SELECT groupArray(day_start) AS date,
         groupArray(count) AS total,
         ifNull(toString(breakdown_value), '') AS breakdown_value
  FROM
    (SELECT sum(total) AS count,
            day_start,
            breakdown_value
     FROM
       (SELECT 0 AS total,
               ticks.day_start AS day_start,
               sec.breakdown_value
        FROM
          (SELECT minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-07-01 23:59:59', 6, 'UTC'))), toIntervalDay(numbers.number)) AS day_start
           FROM numbers(coalesce(dateDiff('day', assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC')), assumeNotNull(parseDateTime64BestEffortOrNull('2020-07-01 23:59:59', 6, 'UTC'))), 0)) AS numbers
           UNION ALL SELECT toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC'))) AS day_start) AS ticks
        CROSS JOIN
          (SELECT breakdown_value
           FROM
             (SELECT [NULL, 'test2@posthog.com'] AS breakdown_value) ARRAY
           JOIN breakdown_value AS breakdown_value) AS sec
        ORDER BY sec.breakdown_value ASC, day_start ASC
        UNION ALL SELECT count(e.uuid) AS total,
                         toStartOfDay(toTimeZone(e.timestamp, 'UTC')) AS day_start,
                         e__pdi__person.properties___email AS breakdown_value
        FROM events AS e SAMPLE 1
        INNER JOIN
          (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                  person_distinct_id2.distinct_id AS distinct_id
           FROM person_distinct_id2
           WHERE equals(person_distinct_id2.team_id, 2)
           GROUP BY person_distinct_id2.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
        INNER JOIN
          (SELECT person.id,
                  replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, 'email'), ''), 'null'), '^"|"$', '') AS properties___email,
                  replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, '$os'), ''), 'null'), '^"|"$', '') AS `properties___$os`,
                  replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, '$browser'), ''), 'null'), '^"|"$', '') AS `properties___$browser`
           FROM person
           WHERE and(equals(person.team_id, 2), ifNull(in(tuple(person.id, person.version),
                                                            (SELECT person.id, max(person.version) AS version
                                                             FROM person
                                                             WHERE equals(person.team_id, 2)
                                                             GROUP BY person.id
                                                             HAVING ifNull(equals(argMax(person.is_deleted, person.version), 0), 0))), 0)) SETTINGS optimize_aggregation_in_order=1) AS e__pdi__person ON equals(e__pdi.person_id, e__pdi__person.id)
        WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-07-01 23:59:59', 6, 'UTC'))), equals(e.event, 'sign up'), and(ifNull(equals(e__pdi__person.`properties___$os`, 'android'), 0), ifNull(equals(e__pdi__person.`properties___$browser`, 'chrome'), 0)), and(ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, 'key'), ''), 'null'), '^"|"$', ''), 'val'), 0), ifNull(ilike(e__pdi__person.properties___email, '%@posthog.com%'), 0)), or(isNull(e__pdi__person.properties___email), ifNull(equals(e__pdi__person.properties___email, 'test2@posthog.com'), 0)))
        GROUP BY day_start,
                 breakdown_value)
     GROUP BY day_start,
              breakdown_value
     ORDER BY day_start ASC, breakdown_value ASC)
  GROUP BY breakdown_value
  ORDER BY sum(count) DESC, breakdown_value ASC
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_trends_aggregate_by_distinct_id
  '
  SELECT groupArray(day_start) AS date,
         groupArray(count) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start
     FROM
       (SELECT 0 AS total,
               minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-31 23:59:59', 6, 'UTC'))), toIntervalDay(numbers.number)) AS day_start
        FROM numbers(coalesce(dateDiff('day', assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-24 13:00:01', 6, 'UTC')), assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-31 23:59:59', 6, 'UTC'))), 0)) AS numbers
        UNION ALL SELECT 0 AS total,
                         toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-24 13:00:01', 6, 'UTC'))) AS day_start
        UNION ALL SELECT count(DISTINCT e.distinct_id) AS total,
                         toStartOfDay(toTimeZone(e.timestamp, 'UTC')) AS day_start
        FROM events AS e SAMPLE 1
        WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-24 13:00:01', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-31 23:59:59', 6, 'UTC'))), equals(e.event, 'sign up'))
        GROUP BY day_start)
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY sum(count) DESC
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_trends_aggregate_by_distinct_id.1
  '
  SELECT groupArray(day_start) AS date,
         groupArray(count) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start
     FROM
       (SELECT 0 AS total,
               minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-31 23:59:59', 6, 'UTC'))), toIntervalDay(numbers.number)) AS day_start
        FROM numbers(coalesce(dateDiff('day', assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-24 13:00:01', 6, 'UTC')), assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-31 23:59:59', 6, 'UTC'))), 0)) AS numbers
        UNION ALL SELECT 0 AS total,
                         toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-24 13:00:01', 6, 'UTC'))) AS day_start
        UNION ALL SELECT count(DISTINCT e.distinct_id) AS total,
                         toStartOfDay(toTimeZone(e.timestamp, 'UTC')) AS day_start
        FROM events AS e SAMPLE 1
        INNER JOIN
          (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                  person_distinct_id2.distinct_id AS distinct_id
           FROM person_distinct_id2
           WHERE equals(person_distinct_id2.team_id, 2)
           GROUP BY person_distinct_id2.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
        INNER JOIN
          (SELECT person.id,
                  replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, '$some_prop'), ''), 'null'), '^"|"$', '') AS `properties___$some_prop`
           FROM person
           WHERE and(equals(person.team_id, 2), ifNull(in(tuple(person.id, person.version),
                                                            (SELECT person.id, max(person.version) AS version
                                                             FROM person
                                                             WHERE equals(person.team_id, 2)
                                                             GROUP BY person.id
                                                             HAVING ifNull(equals(argMax(person.is_deleted, person.version), 0), 0))), 0)) SETTINGS optimize_aggregation_in_order=1) AS e__pdi__person ON equals(e__pdi.person_id, e__pdi__person.id)
        WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-24 13:00:01', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-31 23:59:59', 6, 'UTC'))), equals(e.event, 'sign up'), ifNull(equals(e__pdi__person.`properties___$some_prop`, 'some_val'), 0))
        GROUP BY day_start)
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY sum(count) DESC
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_trends_aggregate_by_distinct_id.2
  '
  SELECT groupArray(value)
  FROM
    (SELECT e__pdi__person.`properties___$some_prop` AS value,
            count(e.uuid) AS count
     FROM events AS e
     INNER JOIN
       (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
               person_distinct_id2.distinct_id AS distinct_id
        FROM person_distinct_id2
        WHERE equals(person_distinct_id2.team_id, 2)
        GROUP BY person_distinct_id2.distinct_id
        HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
     INNER JOIN
       (SELECT person.id,
               replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, '$some_prop'), ''), 'null'), '^"|"$', '') AS `properties___$some_prop`
        FROM person
        WHERE and(equals(person.team_id, 2), ifNull(in(tuple(person.id, person.version),
                                                         (SELECT person.id, max(person.version) AS version
                                                          FROM person
                                                          WHERE equals(person.team_id, 2)
                                                          GROUP BY person.id
                                                          HAVING ifNull(equals(argMax(person.is_deleted, person.version), 0), 0))), 0)) SETTINGS optimize_aggregation_in_order=1) AS e__pdi__person ON equals(e__pdi.person_id, e__pdi__person.id)
     WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-24 13:00:01', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-31 23:59:59', 6, 'UTC'))), equals(e.event, 'sign up'))
     GROUP BY value
     ORDER BY count DESC, value DESC
     LIMIT 25)
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_trends_aggregate_by_distinct_id.3
  '
  SELECT groupArray(day_start) AS date,
         groupArray(count) AS total,
         ifNull(toString(breakdown_value), '') AS breakdown_value
  FROM
    (SELECT sum(total) AS count,
            day_start,
            breakdown_value
     FROM
       (SELECT 0 AS total,
               ticks.day_start AS day_start,
               sec.breakdown_value
        FROM
          (SELECT minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-31 23:59:59', 6, 'UTC'))), toIntervalDay(numbers.number)) AS day_start
           FROM numbers(coalesce(dateDiff('day', assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-24 13:00:01', 6, 'UTC')), assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-31 23:59:59', 6, 'UTC'))), 0)) AS numbers
           UNION ALL SELECT toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-24 13:00:01', 6, 'UTC'))) AS day_start) AS ticks
        CROSS JOIN
          (SELECT breakdown_value
           FROM
             (SELECT [NULL, 'some_val'] AS breakdown_value) ARRAY
           JOIN breakdown_value AS breakdown_value) AS sec
        ORDER BY sec.breakdown_value ASC, day_start ASC
        UNION ALL SELECT count(DISTINCT e.distinct_id) AS total,
                         toStartOfDay(toTimeZone(e.timestamp, 'UTC')) AS day_start,
                         e__pdi__person.`properties___$some_prop` AS breakdown_value
        FROM events AS e SAMPLE 1
        INNER JOIN
          (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                  person_distinct_id2.distinct_id AS distinct_id
           FROM person_distinct_id2
           WHERE equals(person_distinct_id2.team_id, 2)
           GROUP BY person_distinct_id2.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
        INNER JOIN
          (SELECT person.id,
                  replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, '$some_prop'), ''), 'null'), '^"|"$', '') AS `properties___$some_prop`
           FROM person
           WHERE and(equals(person.team_id, 2), ifNull(in(tuple(person.id, person.version),
                                                            (SELECT person.id, max(person.version) AS version
                                                             FROM person
                                                             WHERE equals(person.team_id, 2)
                                                             GROUP BY person.id
                                                             HAVING ifNull(equals(argMax(person.is_deleted, person.version), 0), 0))), 0)) SETTINGS optimize_aggregation_in_order=1) AS e__pdi__person ON equals(e__pdi.person_id, e__pdi__person.id)
        WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-24 13:00:01', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-31 23:59:59', 6, 'UTC'))), equals(e.event, 'sign up'), or(isNull(e__pdi__person.`properties___$some_prop`), ifNull(equals(e__pdi__person.`properties___$some_prop`, 'some_val'), 0)))
        GROUP BY day_start,
                 breakdown_value)
     GROUP BY day_start,
              breakdown_value
     ORDER BY day_start ASC, breakdown_value ASC)
  GROUP BY breakdown_value
  ORDER BY sum(count) DESC, breakdown_value ASC
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_trends_aggregate_by_distinct_id.4
  '
  SELECT groupArray(day_start) AS date,
         groupArray(count) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start
     FROM
       (SELECT 0 AS total,
               minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-31 23:59:59', 6, 'UTC'))), toIntervalDay(numbers.number)) AS day_start
        FROM numbers(coalesce(dateDiff('day', assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-24 13:00:03', 6, 'UTC')), assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-31 23:59:59', 6, 'UTC'))), 0)) AS numbers
        UNION ALL SELECT 0 AS total,
                         toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-24 13:00:03', 6, 'UTC'))) AS day_start
        UNION ALL SELECT counts AS total,
                         toStartOfDay(timestamp) AS day_start
        FROM
          (SELECT d.timestamp,
                  count(DISTINCT e.actor_id) AS counts
           FROM
             (SELECT minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-31 23:59:59', 6, 'UTC'))), toIntervalDay(numbers.number)) AS timestamp
              FROM numbers(dateDiff('day', minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-24 13:00:03', 6, 'UTC'))), toIntervalDay(30)), assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-31 23:59:59', 6, 'UTC')))) AS numbers) AS d
           CROSS JOIN
             (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                     e.distinct_id AS actor_id
              FROM events AS e SAMPLE 1
              WHERE and(equals(e.team_id, 2), equals(e.event, 'sign up'), ifNull(greaterOrEquals(timestamp, minus(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-24 13:00:03', 6, 'UTC')), toIntervalDay(30))), 0), ifNull(lessOrEquals(timestamp, assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-31 23:59:59', 6, 'UTC'))), 0))
              GROUP BY timestamp, actor_id) AS e
           WHERE and(ifNull(lessOrEquals(e.timestamp, plus(d.timestamp, toIntervalDay(1))), 0), ifNull(greater(e.timestamp, minus(d.timestamp, toIntervalDay(29))), 0))
           GROUP BY d.timestamp
           ORDER BY d.timestamp ASC)
        WHERE and(ifNull(greaterOrEquals(timestamp, toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-24 13:00:03', 6, 'UTC')))), 0), ifNull(lessOrEquals(timestamp, assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-31 23:59:59', 6, 'UTC'))), 0)))
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY sum(count) DESC
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_trends_aggregate_by_distinct_id.5
  '
  SELECT groupArray(day_start) AS date,
         groupArray(count) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start
     FROM
       (SELECT 0 AS total,
               minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-31 23:59:59', 6, 'UTC'))), toIntervalDay(numbers.number)) AS day_start
        FROM numbers(coalesce(dateDiff('day', assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-24 13:00:01', 6, 'UTC')), assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-31 23:59:59', 6, 'UTC'))), 0)) AS numbers
        UNION ALL SELECT 0 AS total,
                         toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-24 13:00:01', 6, 'UTC'))) AS day_start
        UNION ALL SELECT counts AS total,
                         toStartOfDay(timestamp) AS day_start
        FROM
          (SELECT d.timestamp,
                  count(DISTINCT e.actor_id) AS counts
           FROM
             (SELECT minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-31 23:59:59', 6, 'UTC'))), toIntervalDay(numbers.number)) AS timestamp
              FROM numbers(dateDiff('day', minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-24 13:00:01', 6, 'UTC'))), toIntervalDay(7)), assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-31 23:59:59', 6, 'UTC')))) AS numbers) AS d
           CROSS JOIN
             (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                     e.distinct_id AS actor_id
              FROM events AS e SAMPLE 1
              WHERE and(equals(e.team_id, 2), equals(e.event, 'sign up'), ifNull(greaterOrEquals(timestamp, minus(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-24 13:00:01', 6, 'UTC')), toIntervalDay(7))), 0), ifNull(lessOrEquals(timestamp, assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-31 23:59:59', 6, 'UTC'))), 0))
              GROUP BY timestamp, actor_id) AS e
           WHERE and(ifNull(lessOrEquals(e.timestamp, plus(d.timestamp, toIntervalDay(1))), 0), ifNull(greater(e.timestamp, minus(d.timestamp, toIntervalDay(6))), 0))
           GROUP BY d.timestamp
           ORDER BY d.timestamp ASC)
        WHERE and(ifNull(greaterOrEquals(timestamp, toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-24 13:00:01', 6, 'UTC')))), 0), ifNull(lessOrEquals(timestamp, assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-31 23:59:59', 6, 'UTC'))), 0)))
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY sum(count) DESC
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_trends_aggregate_by_distinct_id.6
  '
  SELECT groupArray(value)
  FROM
    (SELECT replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$some_prop'), ''), 'null'), '^"|"$', '') AS value,
            count(e.uuid) AS count
     FROM events AS e
     WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-24 13:00:01', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-31 23:59:59', 6, 'UTC'))), equals(e.event, 'sign up'))
     GROUP BY value
     ORDER BY count DESC, value DESC
     LIMIT 25)
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_trends_aggregate_by_distinct_id.7
  '
  SELECT groupArray(day_start) AS date,
         groupArray(count) AS total,
         ifNull(toString(breakdown_value), '') AS breakdown_value
  FROM
    (SELECT sum(total) AS count,
            day_start,
            breakdown_value
     FROM
       (SELECT 0 AS total,
               ticks.day_start AS day_start,
               sec.breakdown_value
        FROM
          (SELECT minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-31 23:59:59', 6, 'UTC'))), toIntervalDay(numbers.number)) AS day_start
           FROM numbers(coalesce(dateDiff('day', assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-24 13:00:01', 6, 'UTC')), assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-31 23:59:59', 6, 'UTC'))), 0)) AS numbers
           UNION ALL SELECT toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-24 13:00:01', 6, 'UTC'))) AS day_start) AS ticks
        CROSS JOIN
          (SELECT breakdown_value
           FROM
             (SELECT [NULL] AS breakdown_value) ARRAY
           JOIN breakdown_value AS breakdown_value) AS sec
        ORDER BY sec.breakdown_value ASC, day_start ASC
        UNION ALL SELECT count(DISTINCT e.distinct_id) AS total,
                         toStartOfDay(toTimeZone(e.timestamp, 'UTC')) AS day_start,
                         replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$some_prop'), ''), 'null'), '^"|"$', '') AS breakdown_value
        FROM events AS e SAMPLE 1
        WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-24 13:00:01', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-31 23:59:59', 6, 'UTC'))), equals(e.event, 'sign up'), isNull(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$some_prop'), ''), 'null'), '^"|"$', '')))
        GROUP BY day_start,
                 breakdown_value)
     GROUP BY day_start,
              breakdown_value
     ORDER BY day_start ASC, breakdown_value ASC)
  GROUP BY breakdown_value
  ORDER BY sum(count) DESC, breakdown_value ASC
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_trends_any_event_total_count
  '
  SELECT groupArray(day_start) AS date,
         groupArray(count) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start
     FROM
       (SELECT 0 AS total,
               minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), toIntervalDay(numbers.number)) AS day_start
        FROM numbers(coalesce(dateDiff('day', assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 13:00:01', 6, 'UTC')), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), 0)) AS numbers
        UNION ALL SELECT 0 AS total,
                         toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 13:00:01', 6, 'UTC'))) AS day_start
        UNION ALL SELECT count(e.uuid) AS total,
                         toStartOfDay(toTimeZone(e.timestamp, 'UTC')) AS day_start
        FROM events AS e SAMPLE 1
        WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 13:00:01', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))))
        GROUP BY day_start)
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY sum(count) DESC
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_trends_any_event_total_count.1
  '
  SELECT groupArray(day_start) AS date,
         groupArray(count) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start
     FROM
       (SELECT 0 AS total,
               minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), toIntervalDay(numbers.number)) AS day_start
        FROM numbers(coalesce(dateDiff('day', assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 13:00:01', 6, 'UTC')), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), 0)) AS numbers
        UNION ALL SELECT 0 AS total,
                         toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 13:00:01', 6, 'UTC'))) AS day_start
        UNION ALL SELECT count(e.uuid) AS total,
                         toStartOfDay(toTimeZone(e.timestamp, 'UTC')) AS day_start
        FROM events AS e SAMPLE 1
        WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 13:00:01', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), equals(e.event, 'sign up'))
        GROUP BY day_start)
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY sum(count) DESC
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_trends_breakdown_cumulative
  '
  SELECT groupArray(value)
  FROM
    (SELECT replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$some_property'), ''), 'null'), '^"|"$', '') AS value,
            count(e.uuid) AS count
     FROM events AS e
     WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 13:00:01', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), equals(e.event, 'sign up'))
     GROUP BY value
     ORDER BY count DESC, value DESC
     LIMIT 25)
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_trends_breakdown_cumulative.1
  '
  SELECT groupArray(day_start) AS date,
         groupArray(count) AS total,
         ifNull(toString(breakdown_value), '') AS breakdown_value
  FROM
    (SELECT day_start,
            sum(count) OVER (PARTITION BY breakdown_value
                             ORDER BY day_start ASC) AS count,
                            breakdown_value
     FROM
       (SELECT sum(total) AS count,
               day_start,
               breakdown_value
        FROM
          (SELECT 0 AS total,
                  ticks.day_start AS day_start,
                  sec.breakdown_value
           FROM
             (SELECT minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), toIntervalDay(numbers.number)) AS day_start
              FROM numbers(coalesce(dateDiff('day', assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 13:00:01', 6, 'UTC')), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), 0)) AS numbers
              UNION ALL SELECT toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 13:00:01', 6, 'UTC'))) AS day_start) AS ticks
           CROSS JOIN
             (SELECT breakdown_value
              FROM
                (SELECT [NULL, 'value', 'other_value'] AS breakdown_value) ARRAY
              JOIN breakdown_value AS breakdown_value) AS sec
           ORDER BY sec.breakdown_value ASC, day_start ASC
           UNION ALL SELECT count(DISTINCT e__pdi__person.id) AS total,
                            toStartOfDay(toTimeZone(e.timestamp, 'UTC')) AS day_start,
                            replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$some_property'), ''), 'null'), '^"|"$', '') AS breakdown_value
           FROM events AS e SAMPLE 1
           INNER JOIN
             (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                     person_distinct_id2.distinct_id AS distinct_id
              FROM person_distinct_id2
              WHERE equals(person_distinct_id2.team_id, 2)
              GROUP BY person_distinct_id2.distinct_id
              HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
           INNER JOIN
             (SELECT person.id AS id
              FROM person
              WHERE equals(person.team_id, 2)
              GROUP BY person.id
              HAVING ifNull(equals(argMax(person.is_deleted, person.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS e__pdi__person ON equals(e__pdi.person_id, e__pdi__person.id)
           WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 13:00:01', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), equals(e.event, 'sign up'), or(isNull(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$some_property'), ''), 'null'), '^"|"$', '')), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$some_property'), ''), 'null'), '^"|"$', ''), 'value'), 0), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$some_property'), ''), 'null'), '^"|"$', ''), 'other_value'), 0)))
           GROUP BY day_start,
                    breakdown_value)
        GROUP BY day_start,
                 breakdown_value
        ORDER BY day_start ASC, breakdown_value ASC))
  GROUP BY breakdown_value
  ORDER BY sum(count) DESC, breakdown_value ASC
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_trends_breakdown_cumulative_poe_v2
  '
  SELECT groupArray(value)
  FROM
    (SELECT replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$some_property'), ''), 'null'), '^"|"$', '') AS value,
            count(e.uuid) AS count
     FROM events AS e
     WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 13:00:01', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), equals(e.event, 'sign up'))
     GROUP BY value
     ORDER BY count DESC, value DESC
     LIMIT 25)
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_trends_breakdown_cumulative_poe_v2.1
  '
  SELECT groupArray(day_start) AS date,
         groupArray(count) AS total,
         ifNull(toString(breakdown_value), '') AS breakdown_value
  FROM
    (SELECT day_start,
            sum(count) OVER (PARTITION BY breakdown_value
                             ORDER BY day_start ASC) AS count,
                            breakdown_value
     FROM
       (SELECT sum(total) AS count,
               day_start,
               breakdown_value
        FROM
          (SELECT 0 AS total,
                  ticks.day_start AS day_start,
                  sec.breakdown_value
           FROM
             (SELECT minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), toIntervalDay(numbers.number)) AS day_start
              FROM numbers(coalesce(dateDiff('day', assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 13:00:01', 6, 'UTC')), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), 0)) AS numbers
              UNION ALL SELECT toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 13:00:01', 6, 'UTC'))) AS day_start) AS ticks
           CROSS JOIN
             (SELECT breakdown_value
              FROM
                (SELECT [NULL, 'value', 'other_value'] AS breakdown_value) ARRAY
              JOIN breakdown_value AS breakdown_value) AS sec
           ORDER BY sec.breakdown_value ASC, day_start ASC
           UNION ALL SELECT count(DISTINCT ifNull(nullIf(e__override.override_person_id, '00000000-0000-0000-0000-000000000000'), e.person_id)) AS total,
                            toStartOfDay(toTimeZone(e.timestamp, 'UTC')) AS day_start,
                            replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$some_property'), ''), 'null'), '^"|"$', '') AS breakdown_value
           FROM events AS e SAMPLE 1
           LEFT OUTER JOIN
             (SELECT argMax(person_overrides.override_person_id, person_overrides.version) AS override_person_id,
                     person_overrides.old_person_id AS old_person_id
              FROM person_overrides
              WHERE equals(person_overrides.team_id, 2)
              GROUP BY person_overrides.old_person_id) AS e__override ON equals(e.person_id, e__override.old_person_id)
           WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 13:00:01', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), equals(e.event, 'sign up'), or(isNull(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$some_property'), ''), 'null'), '^"|"$', '')), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$some_property'), ''), 'null'), '^"|"$', ''), 'value'), 0), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$some_property'), ''), 'null'), '^"|"$', ''), 'other_value'), 0)))
           GROUP BY day_start,
                    breakdown_value)
        GROUP BY day_start,
                 breakdown_value
        ORDER BY day_start ASC, breakdown_value ASC))
  GROUP BY breakdown_value
  ORDER BY sum(count) DESC, breakdown_value ASC
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_trends_breakdown_with_session_property_single_aggregate_math_and_breakdown
  '
  SELECT groupArray(value)
  FROM
    (SELECT replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$some_property'), ''), 'null'), '^"|"$', '') AS value,
            count(e.uuid) AS count
     FROM events AS e
     WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 13:00:33', 6, 'UTC')), 0)), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), equals(e.event, 'sign up'))
     GROUP BY value
     ORDER BY count DESC, value DESC
     LIMIT 25)
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_trends_breakdown_with_session_property_single_aggregate_math_and_breakdown.1
  '
  SELECT sum(count) AS total,
  
    (SELECT day_start
     FROM
       (SELECT 1 AS group_key,
               groupArray(day_start) AS day_start
        FROM
          (SELECT day_start
           FROM
             (SELECT 0 AS total,
                     minus(toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC')), 0), toIntervalWeek(numbers.number)) AS day_start
              FROM numbers(coalesce(dateDiff('week', assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 13:00:33', 6, 'UTC')), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), 0)) AS numbers
              UNION ALL SELECT 0 AS total,
                               toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 13:00:33', 6, 'UTC')), 0) AS day_start)
           ORDER BY day_start ASC)
        GROUP BY group_key)) AS date,
         ifNull(toString(breakdown_value), '') AS breakdown_value
  FROM
    (SELECT sum(total) AS count,
            breakdown_value
     FROM
       (SELECT quantile(0.5)(session_duration) AS total,
               breakdown_value
        FROM
          (SELECT any(e__session.duration) AS session_duration,
                  replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$some_property'), ''), 'null'), '^"|"$', '') AS breakdown_value
           FROM events AS e SAMPLE 1
           INNER JOIN
             (SELECT events.`$session_id` AS id,
                     dateDiff('second', min(events.timestamp), max(events.timestamp)) AS duration
              FROM events
              WHERE and(equals(events.team_id, 2), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 13:00:33', 6, 'UTC')), 0)), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), ifNull(notEquals(id, ''), 1))
              GROUP BY id) AS e__session ON equals(e.`$session_id`, e__session.id)
           WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 13:00:33', 6, 'UTC')), 0)), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), equals(e.event, 'sign up'), or(isNull(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$some_property'), ''), 'null'), '^"|"$', '')), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$some_property'), ''), 'null'), '^"|"$', ''), 'value2'), 0), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$some_property'), ''), 'null'), '^"|"$', ''), 'value1'), 0)))
           GROUP BY e__session.id,
                    breakdown_value)
        GROUP BY breakdown_value)
     GROUP BY breakdown_value
     ORDER BY breakdown_value ASC)
  GROUP BY breakdown_value
  ORDER BY sum(count) DESC, breakdown_value ASC
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_trends_breakdown_with_session_property_single_aggregate_math_and_breakdown.2
  '
  SELECT groupArray(value)
  FROM
    (SELECT replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$some_property'), ''), 'null'), '^"|"$', '') AS value,
            count(e.uuid) AS count
     FROM events AS e
     WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 13:00:01', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), equals(e.event, 'sign up'))
     GROUP BY value
     ORDER BY count DESC, value DESC
     LIMIT 25)
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_trends_breakdown_with_session_property_single_aggregate_math_and_breakdown.3
  '
  SELECT sum(count) AS total,
  
    (SELECT day_start
     FROM
       (SELECT 1 AS group_key,
               groupArray(day_start) AS day_start
        FROM
          (SELECT day_start
           FROM
             (SELECT 0 AS total,
                     minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), toIntervalDay(numbers.number)) AS day_start
              FROM numbers(coalesce(dateDiff('day', assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 13:00:01', 6, 'UTC')), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), 0)) AS numbers
              UNION ALL SELECT 0 AS total,
                               toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 13:00:01', 6, 'UTC'))) AS day_start)
           ORDER BY day_start ASC)
        GROUP BY group_key)) AS date,
         ifNull(toString(breakdown_value), '') AS breakdown_value
  FROM
    (SELECT sum(total) AS count,
            breakdown_value
     FROM
       (SELECT quantile(0.5)(session_duration) AS total,
               breakdown_value
        FROM
          (SELECT any(e__session.duration) AS session_duration,
                  replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$some_property'), ''), 'null'), '^"|"$', '') AS breakdown_value
           FROM events AS e SAMPLE 1
           INNER JOIN
             (SELECT events.`$session_id` AS id,
                     dateDiff('second', min(events.timestamp), max(events.timestamp)) AS duration
              FROM events
              WHERE and(equals(events.team_id, 2), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 13:00:01', 6, 'UTC')))), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), ifNull(notEquals(id, ''), 1))
              GROUP BY id) AS e__session ON equals(e.`$session_id`, e__session.id)
           WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 13:00:01', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), equals(e.event, 'sign up'), or(isNull(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$some_property'), ''), 'null'), '^"|"$', '')), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$some_property'), ''), 'null'), '^"|"$', ''), 'value2'), 0), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$some_property'), ''), 'null'), '^"|"$', ''), 'value1'), 0)))
           GROUP BY e__session.id,
                    breakdown_value)
        GROUP BY breakdown_value)
     GROUP BY breakdown_value
     ORDER BY breakdown_value ASC)
  GROUP BY breakdown_value
  ORDER BY sum(count) DESC, breakdown_value ASC
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_trends_compare_day_interval_relative_range
  '
  SELECT groupArray(day_start) AS date,
         groupArray(count) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start
     FROM
       (SELECT 0 AS total,
               minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), toIntervalDay(numbers.number)) AS day_start
        FROM numbers(coalesce(dateDiff('day', assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 13:00:01', 6, 'UTC')), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), 0)) AS numbers
        UNION ALL SELECT 0 AS total,
                         toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 13:00:01', 6, 'UTC'))) AS day_start
        UNION ALL SELECT count(e.uuid) AS total,
                         toStartOfDay(toTimeZone(e.timestamp, 'UTC')) AS day_start
        FROM events AS e SAMPLE 1
        WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 13:00:01', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), equals(e.event, 'sign up'))
        GROUP BY day_start)
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY sum(count) DESC
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_trends_compare_day_interval_relative_range.1
  '
  SELECT groupArray(day_start) AS date,
         groupArray(count) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start
     FROM
       (SELECT 0 AS total,
               minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 23:59:59', 6, 'UTC'))), toIntervalDay(numbers.number)) AS day_start
        FROM numbers(coalesce(dateDiff('day', assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-21 00:00:00', 6, 'UTC')), assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 23:59:59', 6, 'UTC'))), 0)) AS numbers
        UNION ALL SELECT 0 AS total,
                         toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-21 00:00:00', 6, 'UTC'))) AS day_start
        UNION ALL SELECT count(e.uuid) AS total,
                         toStartOfDay(toTimeZone(e.timestamp, 'UTC')) AS day_start
        FROM events AS e SAMPLE 1
        WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-21 00:00:00', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 23:59:59', 6, 'UTC'))), equals(e.event, 'sign up'))
        GROUP BY day_start)
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY sum(count) DESC
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_trends_compare_day_interval_relative_range.2
  '
  SELECT groupArray(day_start) AS date,
         groupArray(count) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start
     FROM
       (SELECT 0 AS total,
               minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), toIntervalDay(numbers.number)) AS day_start
        FROM numbers(coalesce(dateDiff('day', assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 13:00:01', 6, 'UTC')), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), 0)) AS numbers
        UNION ALL SELECT 0 AS total,
                         toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 13:00:01', 6, 'UTC'))) AS day_start
        UNION ALL SELECT count(e.uuid) AS total,
                         toStartOfDay(toTimeZone(e.timestamp, 'UTC')) AS day_start
        FROM events AS e SAMPLE 1
        WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 13:00:01', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), equals(e.event, 'sign up'))
        GROUP BY day_start)
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY sum(count) DESC
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_trends_count_per_user_average_aggregated
  '
  SELECT sum(count) AS total,
  
    (SELECT day_start
     FROM
       (SELECT 1 AS group_key,
               groupArray(day_start) AS day_start
        FROM
          (SELECT day_start
           FROM
             (SELECT 0 AS total,
                     minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-07 23:59:59', 6, 'UTC'))), toIntervalDay(numbers.number)) AS day_start
              FROM numbers(coalesce(dateDiff('day', assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC')), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-07 23:59:59', 6, 'UTC'))), 0)) AS numbers
              UNION ALL SELECT 0 AS total,
                               toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC'))) AS day_start)
           ORDER BY day_start ASC)
        GROUP BY group_key)) AS date
  FROM
    (SELECT sum(total) AS count
     FROM
       (SELECT total
        FROM
          (SELECT avg(total) AS total
           FROM
             (SELECT count(e.uuid) AS total
              FROM events AS e SAMPLE 1
              INNER JOIN
                (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                        person_distinct_id2.distinct_id AS distinct_id
                 FROM person_distinct_id2
                 WHERE equals(person_distinct_id2.team_id, 2)
                 GROUP BY person_distinct_id2.distinct_id
                 HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
              INNER JOIN
                (SELECT person.id AS id
                 FROM person
                 WHERE equals(person.team_id, 2)
                 GROUP BY person.id
                 HAVING ifNull(equals(argMax(person.is_deleted, person.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS e__pdi__person ON equals(e__pdi.person_id, e__pdi__person.id)
              WHERE and(equals(e.team_id, 2), equals(e.event, 'viewed video'), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), minus(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC')), toIntervalDay(0))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-07 23:59:59', 6, 'UTC'))))
              GROUP BY e__pdi__person.id))))
  ORDER BY sum(count) DESC
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_trends_count_per_user_average_aggregated_poe_v2
  '
  SELECT sum(count) AS total,
  
    (SELECT day_start
     FROM
       (SELECT 1 AS group_key,
               groupArray(day_start) AS day_start
        FROM
          (SELECT day_start
           FROM
             (SELECT 0 AS total,
                     minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-07 23:59:59', 6, 'UTC'))), toIntervalDay(numbers.number)) AS day_start
              FROM numbers(coalesce(dateDiff('day', assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC')), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-07 23:59:59', 6, 'UTC'))), 0)) AS numbers
              UNION ALL SELECT 0 AS total,
                               toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC'))) AS day_start)
           ORDER BY day_start ASC)
        GROUP BY group_key)) AS date
  FROM
    (SELECT sum(total) AS count
     FROM
       (SELECT total
        FROM
          (SELECT avg(total) AS total
           FROM
             (SELECT count(e.uuid) AS total
              FROM events AS e SAMPLE 1
              LEFT OUTER JOIN
                (SELECT argMax(person_overrides.override_person_id, person_overrides.version) AS override_person_id,
                        person_overrides.old_person_id AS old_person_id
                 FROM person_overrides
                 WHERE equals(person_overrides.team_id, 2)
                 GROUP BY person_overrides.old_person_id) AS e__override ON equals(e.person_id, e__override.old_person_id)
              WHERE and(equals(e.team_id, 2), equals(e.event, 'viewed video'), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), minus(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC')), toIntervalDay(0))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-07 23:59:59', 6, 'UTC'))))
              GROUP BY ifNull(nullIf(e__override.override_person_id, '00000000-0000-0000-0000-000000000000'), e.person_id)))))
  ORDER BY sum(count) DESC
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_trends_count_per_user_average_aggregated_with_event_property_breakdown_with_sampling
  '
  SELECT groupArray(value)
  FROM
    (SELECT replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, 'color'), ''), 'null'), '^"|"$', '') AS value,
            count(e.uuid) AS count
     FROM events AS e
     WHERE and(equals(e.team_id, 2), equals(e.event, 'viewed video'))
     GROUP BY value
     ORDER BY count DESC, value DESC
     LIMIT 25)
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_trends_count_per_user_average_aggregated_with_event_property_breakdown_with_sampling.1
  '
  SELECT sum(count) AS total,
  
    (SELECT day_start
     FROM
       (SELECT 1 AS group_key,
               groupArray(day_start) AS day_start
        FROM
          (SELECT day_start
           FROM
             (SELECT 0 AS total,
                     minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-07 23:59:59', 6, 'UTC'))), toIntervalDay(numbers.number)) AS day_start
              FROM numbers(coalesce(dateDiff('day', assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC')), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-07 23:59:59', 6, 'UTC'))), 0)) AS numbers
              UNION ALL SELECT 0 AS total,
                               toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC'))) AS day_start)
           ORDER BY day_start ASC)
        GROUP BY group_key)) AS date,
         ifNull(toString(breakdown_value), '') AS breakdown_value
  FROM
    (SELECT sum(total) AS count,
            breakdown_value
     FROM
       (SELECT total,
               breakdown_value
        FROM
          (SELECT avg(total) AS total,
                  breakdown_value
           FROM
             (SELECT count(e.uuid) AS total,
                     replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, 'color'), ''), 'null'), '^"|"$', '') AS breakdown_value
              FROM events AS e SAMPLE 1.0
              INNER JOIN
                (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                        person_distinct_id2.distinct_id AS distinct_id
                 FROM person_distinct_id2
                 WHERE equals(person_distinct_id2.team_id, 2)
                 GROUP BY person_distinct_id2.distinct_id
                 HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
              INNER JOIN
                (SELECT person.id AS id
                 FROM person
                 WHERE equals(person.team_id, 2)
                 GROUP BY person.id
                 HAVING ifNull(equals(argMax(person.is_deleted, person.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS e__pdi__person ON equals(e__pdi.person_id, e__pdi__person.id)
              WHERE and(equals(e.team_id, 2), and(equals(e.event, 'viewed video'), or(isNull(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, 'color'), ''), 'null'), '^"|"$', '')), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, 'color'), ''), 'null'), '^"|"$', ''), 'red'), 0), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, 'color'), ''), 'null'), '^"|"$', ''), 'blue'), 0))), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), minus(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC')), toIntervalDay(0))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-07 23:59:59', 6, 'UTC'))))
              GROUP BY e__pdi__person.id,
                       breakdown_value)
           GROUP BY breakdown_value))
     GROUP BY breakdown_value
     ORDER BY breakdown_value ASC)
  GROUP BY breakdown_value
  ORDER BY sum(count) DESC, breakdown_value ASC
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_trends_count_per_user_average_daily
  '
  SELECT groupArray(day_start) AS date,
         groupArray(count) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start
     FROM
       (SELECT 0 AS total,
               minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-07 23:59:59', 6, 'UTC'))), toIntervalDay(numbers.number)) AS day_start
        FROM numbers(coalesce(dateDiff('day', assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC')), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-07 23:59:59', 6, 'UTC'))), 0)) AS numbers
        UNION ALL SELECT 0 AS total,
                         toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC'))) AS day_start
        UNION ALL SELECT total,
                         day_start
        FROM
          (SELECT avg(total) AS total,
                  day_start
           FROM
             (SELECT count(e.uuid) AS total,
                     toStartOfDay(toTimeZone(e.timestamp, 'UTC')) AS day_start
              FROM events AS e SAMPLE 1
              INNER JOIN
                (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                        person_distinct_id2.distinct_id AS distinct_id
                 FROM person_distinct_id2
                 WHERE equals(person_distinct_id2.team_id, 2)
                 GROUP BY person_distinct_id2.distinct_id
                 HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
              INNER JOIN
                (SELECT person.id AS id
                 FROM person
                 WHERE equals(person.team_id, 2)
                 GROUP BY person.id
                 HAVING ifNull(equals(argMax(person.is_deleted, person.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS e__pdi__person ON equals(e__pdi.person_id, e__pdi__person.id)
              WHERE and(equals(e.team_id, 2), equals(e.event, 'viewed video'), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), minus(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC')), toIntervalDay(0))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-07 23:59:59', 6, 'UTC'))))
              GROUP BY e__pdi__person.id,
                       day_start)
           GROUP BY day_start))
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY sum(count) DESC
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_trends_count_per_user_average_daily_poe_v2
  '
  SELECT groupArray(day_start) AS date,
         groupArray(count) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start
     FROM
       (SELECT 0 AS total,
               minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-07 23:59:59', 6, 'UTC'))), toIntervalDay(numbers.number)) AS day_start
        FROM numbers(coalesce(dateDiff('day', assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC')), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-07 23:59:59', 6, 'UTC'))), 0)) AS numbers
        UNION ALL SELECT 0 AS total,
                         toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC'))) AS day_start
        UNION ALL SELECT total,
                         day_start
        FROM
          (SELECT avg(total) AS total,
                  day_start
           FROM
             (SELECT count(e.uuid) AS total,
                     toStartOfDay(toTimeZone(e.timestamp, 'UTC')) AS day_start
              FROM events AS e SAMPLE 1
              LEFT OUTER JOIN
                (SELECT argMax(person_overrides.override_person_id, person_overrides.version) AS override_person_id,
                        person_overrides.old_person_id AS old_person_id
                 FROM person_overrides
                 WHERE equals(person_overrides.team_id, 2)
                 GROUP BY person_overrides.old_person_id) AS e__override ON equals(e.person_id, e__override.old_person_id)
              WHERE and(equals(e.team_id, 2), equals(e.event, 'viewed video'), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), minus(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC')), toIntervalDay(0))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-07 23:59:59', 6, 'UTC'))))
              GROUP BY ifNull(nullIf(e__override.override_person_id, '00000000-0000-0000-0000-000000000000'), e.person_id),
                       day_start)
           GROUP BY day_start))
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY sum(count) DESC
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_trends_per_day_cumulative
  '
  SELECT groupArray(day_start) AS date,
         groupArray(count) AS total
  FROM
    (SELECT day_start,
            sum(count) OVER (
                             ORDER BY day_start ASC) AS count
     FROM
       (SELECT sum(total) AS count,
               day_start
        FROM
          (SELECT 0 AS total,
                  minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), toIntervalDay(numbers.number)) AS day_start
           FROM numbers(coalesce(dateDiff('day', assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 13:00:01', 6, 'UTC')), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), 0)) AS numbers
           UNION ALL SELECT 0 AS total,
                            toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 13:00:01', 6, 'UTC'))) AS day_start
           UNION ALL SELECT count(e.uuid) AS total,
                            toStartOfDay(toTimeZone(e.timestamp, 'UTC')) AS day_start
           FROM events AS e SAMPLE 1
           WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 13:00:01', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), equals(e.event, 'sign up'))
           GROUP BY day_start)
        GROUP BY day_start
        ORDER BY day_start ASC))
  ORDER BY sum(count) DESC
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_trends_person_breakdown_with_session_property_single_aggregate_math_and_breakdown
  '
  SELECT groupArray(value)
  FROM
    (SELECT e__pdi__person.`properties___$some_prop` AS value,
            count(e.uuid) AS count
     FROM events AS e
     INNER JOIN
       (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
               person_distinct_id2.distinct_id AS distinct_id
        FROM person_distinct_id2
        WHERE equals(person_distinct_id2.team_id, 2)
        GROUP BY person_distinct_id2.distinct_id
        HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
     INNER JOIN
       (SELECT person.id,
               replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, '$some_prop'), ''), 'null'), '^"|"$', '') AS `properties___$some_prop`
        FROM person
        WHERE and(equals(person.team_id, 2), ifNull(in(tuple(person.id, person.version),
                                                         (SELECT person.id, max(person.version) AS version
                                                          FROM person
                                                          WHERE equals(person.team_id, 2)
                                                          GROUP BY person.id
                                                          HAVING ifNull(equals(argMax(person.is_deleted, person.version), 0), 0))), 0)) SETTINGS optimize_aggregation_in_order=1) AS e__pdi__person ON equals(e__pdi.person_id, e__pdi__person.id)
     WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 13:00:01', 6, 'UTC')), 0)), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), equals(e.event, 'sign up'))
     GROUP BY value
     ORDER BY count DESC, value DESC
     LIMIT 25)
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_trends_person_breakdown_with_session_property_single_aggregate_math_and_breakdown.1
  '
  SELECT sum(count) AS total,
  
    (SELECT day_start
     FROM
       (SELECT 1 AS group_key,
               groupArray(day_start) AS day_start
        FROM
          (SELECT day_start
           FROM
             (SELECT 0 AS total,
                     minus(toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC')), 0), toIntervalWeek(numbers.number)) AS day_start
              FROM numbers(coalesce(dateDiff('week', assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 13:00:01', 6, 'UTC')), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), 0)) AS numbers
              UNION ALL SELECT 0 AS total,
                               toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 13:00:01', 6, 'UTC')), 0) AS day_start)
           ORDER BY day_start ASC)
        GROUP BY group_key)) AS date,
         ifNull(toString(breakdown_value), '') AS breakdown_value
  FROM
    (SELECT sum(total) AS count,
            breakdown_value
     FROM
       (SELECT quantile(0.5)(session_duration) AS total,
               breakdown_value
        FROM
          (SELECT any(e__session.duration) AS session_duration,
                  e__pdi__person.`properties___$some_prop` AS breakdown_value
           FROM events AS e SAMPLE 1
           INNER JOIN
             (SELECT events.`$session_id` AS id,
                     dateDiff('second', min(events.timestamp), max(events.timestamp)) AS duration
              FROM events
              WHERE and(equals(events.team_id, 2), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 13:00:01', 6, 'UTC')), 0)), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), ifNull(notEquals(id, ''), 1))
              GROUP BY id) AS e__session ON equals(e.`$session_id`, e__session.id)
           INNER JOIN
             (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                     person_distinct_id2.distinct_id AS distinct_id
              FROM person_distinct_id2
              WHERE equals(person_distinct_id2.team_id, 2)
              GROUP BY person_distinct_id2.distinct_id
              HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
           INNER JOIN
             (SELECT person.id,
                     replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, '$some_prop'), ''), 'null'), '^"|"$', '') AS `properties___$some_prop`
              FROM person
              WHERE and(equals(person.team_id, 2), ifNull(in(tuple(person.id, person.version),
                                                               (SELECT person.id, max(person.version) AS version
                                                                FROM person
                                                                WHERE equals(person.team_id, 2)
                                                                GROUP BY person.id
                                                                HAVING ifNull(equals(argMax(person.is_deleted, person.version), 0), 0))), 0)) SETTINGS optimize_aggregation_in_order=1) AS e__pdi__person ON equals(e__pdi.person_id, e__pdi__person.id)
           WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 13:00:01', 6, 'UTC')), 0)), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), equals(e.event, 'sign up'), or(isNull(e__pdi__person.`properties___$some_prop`), ifNull(equals(e__pdi__person.`properties___$some_prop`, 'some_val'), 0), ifNull(equals(e__pdi__person.`properties___$some_prop`, 'another_val'), 0)))
           GROUP BY e__session.id,
                    breakdown_value)
        GROUP BY breakdown_value)
     GROUP BY breakdown_value
     ORDER BY breakdown_value ASC)
  GROUP BY breakdown_value
  ORDER BY sum(count) DESC, breakdown_value ASC
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_trends_with_hogql_math
  '
  SELECT groupArray(day_start) AS date,
         groupArray(count) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start
     FROM
       (SELECT 0 AS total,
               minus(toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC')), 0), toIntervalWeek(numbers.number)) AS day_start
        FROM numbers(coalesce(dateDiff('week', assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 12:01:01', 6, 'UTC')), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), 0)) AS numbers
        UNION ALL SELECT 0 AS total,
                         toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 12:01:01', 6, 'UTC')), 0) AS day_start
        UNION ALL SELECT plus(avg(toFloat64OrNull(nullIf(nullIf(e.`$session_id`, ''), 'null'))), 1000) AS total,
                         toStartOfWeek(toTimeZone(e.timestamp, 'UTC'), 0) AS day_start
        FROM events AS e SAMPLE 1
        WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 12:01:01', 6, 'UTC')), 0)), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), equals(e.event, 'sign up'))
        GROUP BY day_start)
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY sum(count) DESC
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_trends_with_session_property_single_aggregate_math
  '
  SELECT sum(count) AS total,
  
    (SELECT day_start
     FROM
       (SELECT 1 AS group_key,
               groupArray(day_start) AS day_start
        FROM
          (SELECT day_start
           FROM
             (SELECT 0 AS total,
                     minus(toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC')), 0), toIntervalWeek(numbers.number)) AS day_start
              FROM numbers(coalesce(dateDiff('week', assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 13:00:01', 6, 'UTC')), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), 0)) AS numbers
              UNION ALL SELECT 0 AS total,
                               toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 13:00:01', 6, 'UTC')), 0) AS day_start)
           ORDER BY day_start ASC)
        GROUP BY group_key)) AS date
  FROM
    (SELECT sum(total) AS count
     FROM
       (SELECT quantile(0.5)(session_duration) AS total
        FROM
          (SELECT any(e__session.duration) AS session_duration
           FROM events AS e SAMPLE 1
           INNER JOIN
             (SELECT events.`$session_id` AS id,
                     dateDiff('second', min(events.timestamp), max(events.timestamp)) AS duration
              FROM events
              WHERE and(equals(events.team_id, 2), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 13:00:01', 6, 'UTC')), 0)), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), ifNull(notEquals(id, ''), 1))
              GROUP BY id) AS e__session ON equals(e.`$session_id`, e__session.id)
           WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 13:00:01', 6, 'UTC')), 0)), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), equals(e.event, 'sign up'))
           GROUP BY e__session.id)))
  ORDER BY sum(count) DESC
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_trends_with_session_property_single_aggregate_math.1
  '
  SELECT sum(count) AS total,
  
    (SELECT day_start
     FROM
       (SELECT 1 AS group_key,
               groupArray(day_start) AS day_start
        FROM
          (SELECT day_start
           FROM
             (SELECT 0 AS total,
                     minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), toIntervalDay(numbers.number)) AS day_start
              FROM numbers(coalesce(dateDiff('day', assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 13:00:01', 6, 'UTC')), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), 0)) AS numbers
              UNION ALL SELECT 0 AS total,
                               toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 13:00:01', 6, 'UTC'))) AS day_start)
           ORDER BY day_start ASC)
        GROUP BY group_key)) AS date
  FROM
    (SELECT sum(total) AS count
     FROM
       (SELECT quantile(0.5)(session_duration) AS total
        FROM
          (SELECT any(e__session.duration) AS session_duration
           FROM events AS e SAMPLE 1
           INNER JOIN
             (SELECT events.`$session_id` AS id,
                     dateDiff('second', min(events.timestamp), max(events.timestamp)) AS duration
              FROM events
              WHERE and(equals(events.team_id, 2), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 13:00:01', 6, 'UTC')))), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), ifNull(notEquals(id, ''), 1))
              GROUP BY id) AS e__session ON equals(e.`$session_id`, e__session.id)
           WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 13:00:01', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), equals(e.event, 'sign up'))
           GROUP BY e__session.id)))
  ORDER BY sum(count) DESC
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_trends_with_session_property_total_volume_math
  '
  SELECT groupArray(day_start) AS date,
         groupArray(count) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start
     FROM
       (SELECT 0 AS total,
               minus(toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC')), 0), toIntervalWeek(numbers.number)) AS day_start
        FROM numbers(coalesce(dateDiff('week', assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 13:00:01', 6, 'UTC')), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), 0)) AS numbers
        UNION ALL SELECT 0 AS total,
                         toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 13:00:01', 6, 'UTC')), 0) AS day_start
        UNION ALL SELECT quantile(0.5)(session_duration) AS total,
                         day_start
        FROM
          (SELECT any(e__session.duration) AS session_duration,
                  toStartOfWeek(toTimeZone(e.timestamp, 'UTC'), 0) AS day_start
           FROM events AS e SAMPLE 1
           INNER JOIN
             (SELECT events.`$session_id` AS id,
                     dateDiff('second', min(events.timestamp), max(events.timestamp)) AS duration
              FROM events
              WHERE and(equals(events.team_id, 2), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 13:00:01', 6, 'UTC')), 0)), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), ifNull(notEquals(id, ''), 1))
              GROUP BY id) AS e__session ON equals(e.`$session_id`, e__session.id)
           WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 13:00:01', 6, 'UTC')), 0)), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), equals(e.event, 'sign up'))
           GROUP BY day_start,
                    e__session.id,
                    day_start)
        GROUP BY day_start)
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY sum(count) DESC
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_trends_with_session_property_total_volume_math.1
  '
  SELECT groupArray(day_start) AS date,
         groupArray(count) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start
     FROM
       (SELECT 0 AS total,
               minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), toIntervalDay(numbers.number)) AS day_start
        FROM numbers(coalesce(dateDiff('day', assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 13:00:01', 6, 'UTC')), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), 0)) AS numbers
        UNION ALL SELECT 0 AS total,
                         toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 13:00:01', 6, 'UTC'))) AS day_start
        UNION ALL SELECT quantile(0.5)(session_duration) AS total,
                         day_start
        FROM
          (SELECT any(e__session.duration) AS session_duration,
                  toStartOfDay(toTimeZone(e.timestamp, 'UTC')) AS day_start
           FROM events AS e SAMPLE 1
           INNER JOIN
             (SELECT events.`$session_id` AS id,
                     dateDiff('second', min(events.timestamp), max(events.timestamp)) AS duration
              FROM events
              WHERE and(equals(events.team_id, 2), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 13:00:01', 6, 'UTC')))), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), ifNull(notEquals(id, ''), 1))
              GROUP BY id) AS e__session ON equals(e.`$session_id`, e__session.id)
           WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 13:00:01', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), equals(e.event, 'sign up'))
           GROUP BY day_start,
                    e__session.id,
                    day_start)
        GROUP BY day_start)
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY sum(count) DESC
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_trends_with_session_property_total_volume_math_with_breakdowns
  '
  SELECT groupArray(value)
  FROM
    (SELECT replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$some_property'), ''), 'null'), '^"|"$', '') AS value,
            count(e.uuid) AS count
     FROM events AS e
     WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 13:00:01', 6, 'UTC')), 0)), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), equals(e.event, 'sign up'))
     GROUP BY value
     ORDER BY count DESC, value DESC
     LIMIT 25)
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_trends_with_session_property_total_volume_math_with_breakdowns.1
  '
  SELECT groupArray(day_start) AS date,
         groupArray(count) AS total,
         ifNull(toString(breakdown_value), '') AS breakdown_value
  FROM
    (SELECT sum(total) AS count,
            day_start,
            breakdown_value
     FROM
       (SELECT 0 AS total,
               ticks.day_start AS day_start,
               sec.breakdown_value
        FROM
          (SELECT minus(toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC')), 0), toIntervalWeek(numbers.number)) AS day_start
           FROM numbers(coalesce(dateDiff('week', assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 13:00:01', 6, 'UTC')), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), 0)) AS numbers
           UNION ALL SELECT toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 13:00:01', 6, 'UTC')), 0) AS day_start) AS ticks
        CROSS JOIN
          (SELECT breakdown_value
           FROM
             (SELECT [NULL, 'value2', 'value1'] AS breakdown_value) ARRAY
           JOIN breakdown_value AS breakdown_value) AS sec
        ORDER BY sec.breakdown_value ASC, day_start ASC
        UNION ALL SELECT quantile(0.5)(session_duration) AS total,
                         day_start,
                         breakdown_value
        FROM
          (SELECT any(e__session.duration) AS session_duration,
                  replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$some_property'), ''), 'null'), '^"|"$', '') AS breakdown_value,
                  toStartOfWeek(toTimeZone(e.timestamp, 'UTC'), 0) AS day_start
           FROM events AS e SAMPLE 1
           INNER JOIN
             (SELECT events.`$session_id` AS id,
                     dateDiff('second', min(events.timestamp), max(events.timestamp)) AS duration
              FROM events
              WHERE and(equals(events.team_id, 2), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 13:00:01', 6, 'UTC')), 0)), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), ifNull(notEquals(id, ''), 1))
              GROUP BY id) AS e__session ON equals(e.`$session_id`, e__session.id)
           WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 13:00:01', 6, 'UTC')), 0)), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), equals(e.event, 'sign up'), or(isNull(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$some_property'), ''), 'null'), '^"|"$', '')), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$some_property'), ''), 'null'), '^"|"$', ''), 'value2'), 0), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$some_property'), ''), 'null'), '^"|"$', ''), 'value1'), 0)))
           GROUP BY day_start,
                    e__session.id,
                    breakdown_value,
                    day_start)
        GROUP BY day_start,
                 breakdown_value)
     GROUP BY day_start,
              breakdown_value
     ORDER BY day_start ASC, breakdown_value ASC)
  GROUP BY breakdown_value
  ORDER BY sum(count) DESC, breakdown_value ASC
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_trends_with_session_property_total_volume_math_with_breakdowns.2
  '
  SELECT groupArray(value)
  FROM
    (SELECT replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$some_property'), ''), 'null'), '^"|"$', '') AS value,
            count(e.uuid) AS count
     FROM events AS e
     WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 13:00:05', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), equals(e.event, 'sign up'))
     GROUP BY value
     ORDER BY count DESC, value DESC
     LIMIT 25)
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_trends_with_session_property_total_volume_math_with_breakdowns.3
  '
  SELECT groupArray(day_start) AS date,
         groupArray(count) AS total,
         ifNull(toString(breakdown_value), '') AS breakdown_value
  FROM
    (SELECT sum(total) AS count,
            day_start,
            breakdown_value
     FROM
       (SELECT 0 AS total,
               ticks.day_start AS day_start,
               sec.breakdown_value
        FROM
          (SELECT minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), toIntervalDay(numbers.number)) AS day_start
           FROM numbers(coalesce(dateDiff('day', assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 13:00:05', 6, 'UTC')), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), 0)) AS numbers
           UNION ALL SELECT toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 13:00:05', 6, 'UTC'))) AS day_start) AS ticks
        CROSS JOIN
          (SELECT breakdown_value
           FROM
             (SELECT [NULL, 'value2', 'value1'] AS breakdown_value) ARRAY
           JOIN breakdown_value AS breakdown_value) AS sec
        ORDER BY sec.breakdown_value ASC, day_start ASC
        UNION ALL SELECT quantile(0.5)(session_duration) AS total,
                         day_start,
                         breakdown_value
        FROM
          (SELECT any(e__session.duration) AS session_duration,
                  replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$some_property'), ''), 'null'), '^"|"$', '') AS breakdown_value,
                  toStartOfDay(toTimeZone(e.timestamp, 'UTC')) AS day_start
           FROM events AS e SAMPLE 1
           INNER JOIN
             (SELECT events.`$session_id` AS id,
                     dateDiff('second', min(events.timestamp), max(events.timestamp)) AS duration
              FROM events
              WHERE and(equals(events.team_id, 2), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 13:00:05', 6, 'UTC')))), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), ifNull(notEquals(id, ''), 1))
              GROUP BY id) AS e__session ON equals(e.`$session_id`, e__session.id)
           WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 13:00:05', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), equals(e.event, 'sign up'), or(isNull(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$some_property'), ''), 'null'), '^"|"$', '')), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$some_property'), ''), 'null'), '^"|"$', ''), 'value2'), 0), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$some_property'), ''), 'null'), '^"|"$', ''), 'value1'), 0)))
           GROUP BY day_start,
                    e__session.id,
                    breakdown_value,
                    day_start)
        GROUP BY day_start,
                 breakdown_value)
     GROUP BY day_start,
              breakdown_value
     ORDER BY day_start ASC, breakdown_value ASC)
  GROUP BY breakdown_value
  ORDER BY sum(count) DESC, breakdown_value ASC
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_weekly_active_users_aggregated_range_narrower_than_week
  '
  SELECT sum(count) AS total,
  
    (SELECT day_start
     FROM
       (SELECT 1 AS group_key,
               groupArray(day_start) AS day_start
        FROM
          (SELECT day_start
           FROM
             (SELECT 0 AS total,
                     minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-12 23:59:59', 6, 'UTC'))), toIntervalDay(numbers.number)) AS day_start
              FROM numbers(coalesce(dateDiff('day', assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-11 00:00:00', 6, 'UTC')), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-12 23:59:59', 6, 'UTC'))), 0)) AS numbers
              UNION ALL SELECT 0 AS total,
                               toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-11 00:00:00', 6, 'UTC'))) AS day_start)
           ORDER BY day_start ASC)
        GROUP BY group_key)) AS date
  FROM
    (SELECT sum(total) AS count
     FROM
       (SELECT count(DISTINCT actor_id) AS total
        FROM
          (SELECT d.timestamp,
                  e.actor_id
           FROM
             (SELECT minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-12 23:59:59', 6, 'UTC'))), toIntervalDay(numbers.number)) AS timestamp
              FROM numbers(dateDiff('day', minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-11 00:00:00', 6, 'UTC'))), toIntervalDay(7)), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-12 23:59:59', 6, 'UTC')))) AS numbers) AS d
           CROSS JOIN
             (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                     e__pdi__person.id AS actor_id
              FROM events AS e SAMPLE 1
              INNER JOIN
                (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                        person_distinct_id2.distinct_id AS distinct_id
                 FROM person_distinct_id2
                 WHERE equals(person_distinct_id2.team_id, 2)
                 GROUP BY person_distinct_id2.distinct_id
                 HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
              INNER JOIN
                (SELECT person.id AS id
                 FROM person
                 WHERE equals(person.team_id, 2)
                 GROUP BY person.id
                 HAVING ifNull(equals(argMax(person.is_deleted, person.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS e__pdi__person ON equals(e__pdi.person_id, e__pdi__person.id)
              WHERE and(equals(e.team_id, 2), equals(e.event, '$pageview'), ifNull(greaterOrEquals(timestamp, minus(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-11 00:00:00', 6, 'UTC')), toIntervalDay(7))), 0), ifNull(lessOrEquals(timestamp, assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-12 23:59:59', 6, 'UTC'))), 0))
              GROUP BY timestamp, actor_id) AS e
           WHERE and(ifNull(lessOrEquals(e.timestamp, plus(d.timestamp, toIntervalDay(1))), 0), ifNull(greater(e.timestamp, minus(d.timestamp, toIntervalDay(6))), 0))
           GROUP BY d.timestamp,
                    e.actor_id
           ORDER BY d.timestamp ASC)
        WHERE and(ifNull(greaterOrEquals(timestamp, toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-11 00:00:00', 6, 'UTC')))), 0), ifNull(lessOrEquals(timestamp, assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-12 23:59:59', 6, 'UTC'))), 0))))
  ORDER BY sum(count) DESC
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_weekly_active_users_aggregated_range_wider_than_week
  '
  SELECT sum(count) AS total,
  
    (SELECT day_start
     FROM
       (SELECT 1 AS group_key,
               groupArray(day_start) AS day_start
        FROM
          (SELECT day_start
           FROM
             (SELECT 0 AS total,
                     minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-08 23:59:59', 6, 'UTC'))), toIntervalDay(numbers.number)) AS day_start
              FROM numbers(coalesce(dateDiff('day', assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC')), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-08 23:59:59', 6, 'UTC'))), 0)) AS numbers
              UNION ALL SELECT 0 AS total,
                               toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC'))) AS day_start)
           ORDER BY day_start ASC)
        GROUP BY group_key)) AS date
  FROM
    (SELECT sum(total) AS count
     FROM
       (SELECT count(DISTINCT actor_id) AS total
        FROM
          (SELECT d.timestamp,
                  e.actor_id
           FROM
             (SELECT minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-08 23:59:59', 6, 'UTC'))), toIntervalDay(numbers.number)) AS timestamp
              FROM numbers(dateDiff('day', minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC'))), toIntervalDay(7)), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-08 23:59:59', 6, 'UTC')))) AS numbers) AS d
           CROSS JOIN
             (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                     e__pdi__person.id AS actor_id
              FROM events AS e SAMPLE 1
              INNER JOIN
                (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                        person_distinct_id2.distinct_id AS distinct_id
                 FROM person_distinct_id2
                 WHERE equals(person_distinct_id2.team_id, 2)
                 GROUP BY person_distinct_id2.distinct_id
                 HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
              INNER JOIN
                (SELECT person.id AS id
                 FROM person
                 WHERE equals(person.team_id, 2)
                 GROUP BY person.id
                 HAVING ifNull(equals(argMax(person.is_deleted, person.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS e__pdi__person ON equals(e__pdi.person_id, e__pdi__person.id)
              WHERE and(equals(e.team_id, 2), equals(e.event, '$pageview'), ifNull(greaterOrEquals(timestamp, minus(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC')), toIntervalDay(7))), 0), ifNull(lessOrEquals(timestamp, assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-08 23:59:59', 6, 'UTC'))), 0))
              GROUP BY timestamp, actor_id) AS e
           WHERE and(ifNull(lessOrEquals(e.timestamp, plus(d.timestamp, toIntervalDay(1))), 0), ifNull(greater(e.timestamp, minus(d.timestamp, toIntervalDay(6))), 0))
           GROUP BY d.timestamp,
                    e.actor_id
           ORDER BY d.timestamp ASC)
        WHERE and(ifNull(greaterOrEquals(timestamp, toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC')))), 0), ifNull(lessOrEquals(timestamp, assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-08 23:59:59', 6, 'UTC'))), 0))))
  ORDER BY sum(count) DESC
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_weekly_active_users_aggregated_range_wider_than_week_with_sampling
  '
  SELECT sum(count) AS total,
  
    (SELECT day_start
     FROM
       (SELECT 1 AS group_key,
               groupArray(day_start) AS day_start
        FROM
          (SELECT day_start
           FROM
             (SELECT 0 AS total,
                     minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-08 23:59:59', 6, 'UTC'))), toIntervalDay(numbers.number)) AS day_start
              FROM numbers(coalesce(dateDiff('day', assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC')), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-08 23:59:59', 6, 'UTC'))), 0)) AS numbers
              UNION ALL SELECT 0 AS total,
                               toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC'))) AS day_start)
           ORDER BY day_start ASC)
        GROUP BY group_key)) AS date
  FROM
    (SELECT sum(total) AS count
     FROM
       (SELECT count(DISTINCT actor_id) AS total
        FROM
          (SELECT d.timestamp,
                  e.actor_id
           FROM
             (SELECT minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-08 23:59:59', 6, 'UTC'))), toIntervalDay(numbers.number)) AS timestamp
              FROM numbers(dateDiff('day', minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC'))), toIntervalDay(7)), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-08 23:59:59', 6, 'UTC')))) AS numbers) AS d
           CROSS JOIN
             (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                     e__pdi__person.id AS actor_id
              FROM events AS e SAMPLE 1.0
              INNER JOIN
                (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                        person_distinct_id2.distinct_id AS distinct_id
                 FROM person_distinct_id2
                 WHERE equals(person_distinct_id2.team_id, 2)
                 GROUP BY person_distinct_id2.distinct_id
                 HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
              INNER JOIN
                (SELECT person.id AS id
                 FROM person
                 WHERE equals(person.team_id, 2)
                 GROUP BY person.id
                 HAVING ifNull(equals(argMax(person.is_deleted, person.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS e__pdi__person ON equals(e__pdi.person_id, e__pdi__person.id)
              WHERE and(equals(e.team_id, 2), equals(e.event, '$pageview'), ifNull(greaterOrEquals(timestamp, minus(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC')), toIntervalDay(7))), 0), ifNull(lessOrEquals(timestamp, assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-08 23:59:59', 6, 'UTC'))), 0))
              GROUP BY timestamp, actor_id) AS e
           WHERE and(ifNull(lessOrEquals(e.timestamp, plus(d.timestamp, toIntervalDay(1))), 0), ifNull(greater(e.timestamp, minus(d.timestamp, toIntervalDay(6))), 0))
           GROUP BY d.timestamp,
                    e.actor_id
           ORDER BY d.timestamp ASC)
        WHERE and(ifNull(greaterOrEquals(timestamp, toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC')))), 0), ifNull(lessOrEquals(timestamp, assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-08 23:59:59', 6, 'UTC'))), 0))))
  ORDER BY sum(count) DESC
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_weekly_active_users_daily
  '
  SELECT groupArray(day_start) AS date,
         groupArray(count) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start
     FROM
       (SELECT 0 AS total,
               minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-19 23:59:59', 6, 'UTC'))), toIntervalDay(numbers.number)) AS day_start
        FROM numbers(coalesce(dateDiff('day', assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-08 00:00:00', 6, 'UTC')), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-19 23:59:59', 6, 'UTC'))), 0)) AS numbers
        UNION ALL SELECT 0 AS total,
                         toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-08 00:00:00', 6, 'UTC'))) AS day_start
        UNION ALL SELECT counts AS total,
                         toStartOfDay(timestamp) AS day_start
        FROM
          (SELECT d.timestamp,
                  count(DISTINCT e.actor_id) AS counts
           FROM
             (SELECT minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-19 23:59:59', 6, 'UTC'))), toIntervalDay(numbers.number)) AS timestamp
              FROM numbers(dateDiff('day', minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-08 00:00:00', 6, 'UTC'))), toIntervalDay(7)), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-19 23:59:59', 6, 'UTC')))) AS numbers) AS d
           CROSS JOIN
             (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                     e__pdi__person.id AS actor_id
              FROM events AS e SAMPLE 1
              INNER JOIN
                (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                        person_distinct_id2.distinct_id AS distinct_id
                 FROM person_distinct_id2
                 WHERE equals(person_distinct_id2.team_id, 2)
                 GROUP BY person_distinct_id2.distinct_id
                 HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
              INNER JOIN
                (SELECT person.id AS id
                 FROM person
                 WHERE equals(person.team_id, 2)
                 GROUP BY person.id
                 HAVING ifNull(equals(argMax(person.is_deleted, person.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS e__pdi__person ON equals(e__pdi.person_id, e__pdi__person.id)
              WHERE and(equals(e.team_id, 2), equals(e.event, '$pageview'), ifNull(greaterOrEquals(timestamp, minus(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-08 00:00:00', 6, 'UTC')), toIntervalDay(7))), 0), ifNull(lessOrEquals(timestamp, assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-19 23:59:59', 6, 'UTC'))), 0))
              GROUP BY timestamp, actor_id) AS e
           WHERE and(ifNull(lessOrEquals(e.timestamp, plus(d.timestamp, toIntervalDay(1))), 0), ifNull(greater(e.timestamp, minus(d.timestamp, toIntervalDay(6))), 0))
           GROUP BY d.timestamp
           ORDER BY d.timestamp ASC)
        WHERE and(ifNull(greaterOrEquals(timestamp, toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-08 00:00:00', 6, 'UTC')))), 0), ifNull(lessOrEquals(timestamp, assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-19 23:59:59', 6, 'UTC'))), 0)))
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY sum(count) DESC
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_weekly_active_users_daily_minus_utc
  '
  SELECT groupArray(day_start) AS date,
         groupArray(count) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start
     FROM
       (SELECT 0 AS total,
               minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-19 23:59:59', 6, 'America/Phoenix'))), toIntervalDay(numbers.number)) AS day_start
        FROM numbers(coalesce(dateDiff('day', assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-08 00:00:00', 6, 'America/Phoenix')), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-19 23:59:59', 6, 'America/Phoenix'))), 0)) AS numbers
        UNION ALL SELECT 0 AS total,
                         toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-08 00:00:00', 6, 'America/Phoenix'))) AS day_start
        UNION ALL SELECT counts AS total,
                         toStartOfDay(timestamp) AS day_start
        FROM
          (SELECT d.timestamp,
                  count(DISTINCT e.actor_id) AS counts
           FROM
             (SELECT minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-19 23:59:59', 6, 'America/Phoenix'))), toIntervalDay(numbers.number)) AS timestamp
              FROM numbers(dateDiff('day', minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-08 00:00:00', 6, 'America/Phoenix'))), toIntervalDay(7)), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-19 23:59:59', 6, 'America/Phoenix')))) AS numbers) AS d
           CROSS JOIN
             (SELECT toTimeZone(e.timestamp, 'America/Phoenix') AS timestamp,
                     e__pdi__person.id AS actor_id
              FROM events AS e SAMPLE 1
              INNER JOIN
                (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                        person_distinct_id2.distinct_id AS distinct_id
                 FROM person_distinct_id2
                 WHERE equals(person_distinct_id2.team_id, 2)
                 GROUP BY person_distinct_id2.distinct_id
                 HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
              INNER JOIN
                (SELECT person.id AS id
                 FROM person
                 WHERE equals(person.team_id, 2)
                 GROUP BY person.id
                 HAVING ifNull(equals(argMax(person.is_deleted, person.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS e__pdi__person ON equals(e__pdi.person_id, e__pdi__person.id)
              WHERE and(equals(e.team_id, 2), equals(e.event, '$pageview'), ifNull(greaterOrEquals(timestamp, minus(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-08 00:00:00', 6, 'America/Phoenix')), toIntervalDay(7))), 0), ifNull(lessOrEquals(timestamp, assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-19 23:59:59', 6, 'America/Phoenix'))), 0))
              GROUP BY timestamp, actor_id) AS e
           WHERE and(ifNull(lessOrEquals(e.timestamp, plus(d.timestamp, toIntervalDay(1))), 0), ifNull(greater(e.timestamp, minus(d.timestamp, toIntervalDay(6))), 0))
           GROUP BY d.timestamp
           ORDER BY d.timestamp ASC)
        WHERE and(ifNull(greaterOrEquals(timestamp, toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-08 00:00:00', 6, 'America/Phoenix')))), 0), ifNull(lessOrEquals(timestamp, assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-19 23:59:59', 6, 'America/Phoenix'))), 0)))
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY sum(count) DESC
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_weekly_active_users_daily_plus_utc
  '
  SELECT groupArray(day_start) AS date,
         groupArray(count) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start
     FROM
       (SELECT 0 AS total,
               minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-19 23:59:59', 6, 'Asia/Tokyo'))), toIntervalDay(numbers.number)) AS day_start
        FROM numbers(coalesce(dateDiff('day', assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-08 00:00:00', 6, 'Asia/Tokyo')), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-19 23:59:59', 6, 'Asia/Tokyo'))), 0)) AS numbers
        UNION ALL SELECT 0 AS total,
                         toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-08 00:00:00', 6, 'Asia/Tokyo'))) AS day_start
        UNION ALL SELECT counts AS total,
                         toStartOfDay(timestamp) AS day_start
        FROM
          (SELECT d.timestamp,
                  count(DISTINCT e.actor_id) AS counts
           FROM
             (SELECT minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-19 23:59:59', 6, 'Asia/Tokyo'))), toIntervalDay(numbers.number)) AS timestamp
              FROM numbers(dateDiff('day', minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-08 00:00:00', 6, 'Asia/Tokyo'))), toIntervalDay(7)), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-19 23:59:59', 6, 'Asia/Tokyo')))) AS numbers) AS d
           CROSS JOIN
             (SELECT toTimeZone(e.timestamp, 'Asia/Tokyo') AS timestamp,
                     e__pdi__person.id AS actor_id
              FROM events AS e SAMPLE 1
              INNER JOIN
                (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                        person_distinct_id2.distinct_id AS distinct_id
                 FROM person_distinct_id2
                 WHERE equals(person_distinct_id2.team_id, 2)
                 GROUP BY person_distinct_id2.distinct_id
                 HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
              INNER JOIN
                (SELECT person.id AS id
                 FROM person
                 WHERE equals(person.team_id, 2)
                 GROUP BY person.id
                 HAVING ifNull(equals(argMax(person.is_deleted, person.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS e__pdi__person ON equals(e__pdi.person_id, e__pdi__person.id)
              WHERE and(equals(e.team_id, 2), equals(e.event, '$pageview'), ifNull(greaterOrEquals(timestamp, minus(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-08 00:00:00', 6, 'Asia/Tokyo')), toIntervalDay(7))), 0), ifNull(lessOrEquals(timestamp, assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-19 23:59:59', 6, 'Asia/Tokyo'))), 0))
              GROUP BY timestamp, actor_id) AS e
           WHERE and(ifNull(lessOrEquals(e.timestamp, plus(d.timestamp, toIntervalDay(1))), 0), ifNull(greater(e.timestamp, minus(d.timestamp, toIntervalDay(6))), 0))
           GROUP BY d.timestamp
           ORDER BY d.timestamp ASC)
        WHERE and(ifNull(greaterOrEquals(timestamp, toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-08 00:00:00', 6, 'Asia/Tokyo')))), 0), ifNull(lessOrEquals(timestamp, assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-19 23:59:59', 6, 'Asia/Tokyo'))), 0)))
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY sum(count) DESC
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_weekly_active_users_filtering
  '
  SELECT groupArray(day_start) AS date,
         groupArray(count) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start
     FROM
       (SELECT 0 AS total,
               minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-12 23:59:59', 6, 'UTC'))), toIntervalDay(numbers.number)) AS day_start
        FROM numbers(coalesce(dateDiff('day', assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC')), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-12 23:59:59', 6, 'UTC'))), 0)) AS numbers
        UNION ALL SELECT 0 AS total,
                         toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC'))) AS day_start
        UNION ALL SELECT counts AS total,
                         toStartOfDay(timestamp) AS day_start
        FROM
          (SELECT d.timestamp,
                  count(DISTINCT e.actor_id) AS counts
           FROM
             (SELECT minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-12 23:59:59', 6, 'UTC'))), toIntervalDay(numbers.number)) AS timestamp
              FROM numbers(dateDiff('day', minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC'))), toIntervalDay(7)), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-12 23:59:59', 6, 'UTC')))) AS numbers) AS d
           CROSS JOIN
             (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                     e__pdi__person.id AS actor_id
              FROM events AS e SAMPLE 1
              INNER JOIN
                (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                        person_distinct_id2.distinct_id AS distinct_id
                 FROM person_distinct_id2
                 WHERE equals(person_distinct_id2.team_id, 2)
                 GROUP BY person_distinct_id2.distinct_id
                 HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
              INNER JOIN
                (SELECT person.id,
                        replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, 'name'), ''), 'null'), '^"|"$', '') AS properties___name
                 FROM person
                 WHERE and(equals(person.team_id, 2), ifNull(in(tuple(person.id, person.version),
                                                                  (SELECT person.id, max(person.version) AS version
                                                                   FROM person
                                                                   WHERE equals(person.team_id, 2)
                                                                   GROUP BY person.id
                                                                   HAVING ifNull(equals(argMax(person.is_deleted, person.version), 0), 0))), 0)) SETTINGS optimize_aggregation_in_order=1) AS e__pdi__person ON equals(e__pdi.person_id, e__pdi__person.id)
              WHERE and(equals(e.team_id, 2), and(equals(e.event, '$pageview'), ifNull(in(e__pdi__person.properties___name, tuple('person-1', 'person-2')), 0)), ifNull(greaterOrEquals(timestamp, minus(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC')), toIntervalDay(7))), 0), ifNull(lessOrEquals(timestamp, assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-12 23:59:59', 6, 'UTC'))), 0))
              GROUP BY timestamp, actor_id) AS e
           WHERE and(ifNull(lessOrEquals(e.timestamp, plus(d.timestamp, toIntervalDay(1))), 0), ifNull(greater(e.timestamp, minus(d.timestamp, toIntervalDay(6))), 0))
           GROUP BY d.timestamp
           ORDER BY d.timestamp ASC)
        WHERE and(ifNull(greaterOrEquals(timestamp, toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC')))), 0), ifNull(lessOrEquals(timestamp, assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-12 23:59:59', 6, 'UTC'))), 0)))
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY sum(count) DESC
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_weekly_active_users_filtering_materialized
  '
  SELECT groupArray(day_start) AS date,
         groupArray(count) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start
     FROM
       (SELECT 0 AS total,
               minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-12 23:59:59', 6, 'UTC'))), toIntervalDay(numbers.number)) AS day_start
        FROM numbers(coalesce(dateDiff('day', assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC')), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-12 23:59:59', 6, 'UTC'))), 0)) AS numbers
        UNION ALL SELECT 0 AS total,
                         toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC'))) AS day_start
        UNION ALL SELECT counts AS total,
                         toStartOfDay(timestamp) AS day_start
        FROM
          (SELECT d.timestamp,
                  count(DISTINCT e.actor_id) AS counts
           FROM
             (SELECT minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-12 23:59:59', 6, 'UTC'))), toIntervalDay(numbers.number)) AS timestamp
              FROM numbers(dateDiff('day', minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC'))), toIntervalDay(7)), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-12 23:59:59', 6, 'UTC')))) AS numbers) AS d
           CROSS JOIN
             (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                     e__pdi__person.id AS actor_id
              FROM events AS e SAMPLE 1
              INNER JOIN
                (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                        person_distinct_id2.distinct_id AS distinct_id
                 FROM person_distinct_id2
                 WHERE equals(person_distinct_id2.team_id, 2)
                 GROUP BY person_distinct_id2.distinct_id
                 HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
              INNER JOIN
                (SELECT person.id,
                        nullIf(nullIf(person.pmat_name, ''), 'null') AS properties___name
                 FROM person
                 WHERE and(equals(person.team_id, 2), ifNull(in(tuple(person.id, person.version),
                                                                  (SELECT person.id, max(person.version) AS version
                                                                   FROM person
                                                                   WHERE equals(person.team_id, 2)
                                                                   GROUP BY person.id
                                                                   HAVING ifNull(equals(argMax(person.is_deleted, person.version), 0), 0))), 0)) SETTINGS optimize_aggregation_in_order=1) AS e__pdi__person ON equals(e__pdi.person_id, e__pdi__person.id)
              WHERE and(equals(e.team_id, 2), and(equals(e.event, '$pageview'), ifNull(in(e__pdi__person.properties___name, tuple('person-1', 'person-2')), 0)), ifNull(greaterOrEquals(timestamp, minus(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC')), toIntervalDay(7))), 0), ifNull(lessOrEquals(timestamp, assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-12 23:59:59', 6, 'UTC'))), 0))
              GROUP BY timestamp, actor_id) AS e
           WHERE and(ifNull(lessOrEquals(e.timestamp, plus(d.timestamp, toIntervalDay(1))), 0), ifNull(greater(e.timestamp, minus(d.timestamp, toIntervalDay(6))), 0))
           GROUP BY d.timestamp
           ORDER BY d.timestamp ASC)
        WHERE and(ifNull(greaterOrEquals(timestamp, toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC')))), 0), ifNull(lessOrEquals(timestamp, assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-12 23:59:59', 6, 'UTC'))), 0)))
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY sum(count) DESC
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_weekly_active_users_hourly
  '
  SELECT groupArray(day_start) AS date,
         groupArray(count) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start
     FROM
       (SELECT 0 AS total,
               minus(toStartOfHour(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-09 17:00:00', 6, 'UTC'))), toIntervalHour(numbers.number)) AS day_start
        FROM numbers(coalesce(dateDiff('hour', assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-09 06:00:00', 6, 'UTC')), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-09 17:00:00', 6, 'UTC'))), 0)) AS numbers
        UNION ALL SELECT 0 AS total,
                         toStartOfHour(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-09 06:00:00', 6, 'UTC'))) AS day_start
        UNION ALL SELECT counts AS total,
                         toStartOfHour(timestamp) AS day_start
        FROM
          (SELECT d.timestamp,
                  count(DISTINCT e.actor_id) AS counts
           FROM
             (SELECT minus(toStartOfHour(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-09 17:00:00', 6, 'UTC'))), toIntervalHour(numbers.number)) AS timestamp
              FROM numbers(dateDiff('hour', minus(toStartOfHour(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-09 06:00:00', 6, 'UTC'))), toIntervalDay(7)), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-09 17:00:00', 6, 'UTC')))) AS numbers) AS d
           CROSS JOIN
             (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                     e__pdi__person.id AS actor_id
              FROM events AS e SAMPLE 1
              INNER JOIN
                (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                        person_distinct_id2.distinct_id AS distinct_id
                 FROM person_distinct_id2
                 WHERE equals(person_distinct_id2.team_id, 2)
                 GROUP BY person_distinct_id2.distinct_id
                 HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
              INNER JOIN
                (SELECT person.id AS id
                 FROM person
                 WHERE equals(person.team_id, 2)
                 GROUP BY person.id
                 HAVING ifNull(equals(argMax(person.is_deleted, person.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS e__pdi__person ON equals(e__pdi.person_id, e__pdi__person.id)
              WHERE and(equals(e.team_id, 2), equals(e.event, '$pageview'), ifNull(greaterOrEquals(timestamp, minus(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-09 06:00:00', 6, 'UTC')), toIntervalDay(7))), 0), ifNull(lessOrEquals(timestamp, assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-09 17:00:00', 6, 'UTC'))), 0))
              GROUP BY timestamp, actor_id) AS e
           WHERE and(ifNull(lessOrEquals(e.timestamp, plus(d.timestamp, toIntervalDay(1))), 0), ifNull(greater(e.timestamp, minus(d.timestamp, toIntervalDay(6))), 0))
           GROUP BY d.timestamp
           ORDER BY d.timestamp ASC)
        WHERE and(ifNull(greaterOrEquals(timestamp, toStartOfHour(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-09 06:00:00', 6, 'UTC')))), 0), ifNull(lessOrEquals(timestamp, assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-09 17:00:00', 6, 'UTC'))), 0)))
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY sum(count) DESC
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_weekly_active_users_weekly
  '
  SELECT groupArray(day_start) AS date,
         groupArray(count) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start
     FROM
       (SELECT 0 AS total,
               minus(toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-18 23:59:59', 6, 'UTC')), 0), toIntervalWeek(numbers.number)) AS day_start
        FROM numbers(coalesce(dateDiff('week', assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-29 00:00:00', 6, 'UTC')), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-18 23:59:59', 6, 'UTC'))), 0)) AS numbers
        UNION ALL SELECT 0 AS total,
                         toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-29 00:00:00', 6, 'UTC')), 0) AS day_start
        UNION ALL SELECT counts AS total,
                         toStartOfWeek(timestamp, 0) AS day_start
        FROM
          (SELECT d.timestamp,
                  count(DISTINCT e.actor_id) AS counts
           FROM
             (SELECT minus(toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-18 23:59:59', 6, 'UTC')), 0), toIntervalWeek(numbers.number)) AS timestamp
              FROM numbers(dateDiff('week', minus(toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-29 00:00:00', 6, 'UTC')), 0), toIntervalDay(7)), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-18 23:59:59', 6, 'UTC')))) AS numbers) AS d
           CROSS JOIN
             (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                     e__pdi__person.id AS actor_id
              FROM events AS e SAMPLE 1
              INNER JOIN
                (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                        person_distinct_id2.distinct_id AS distinct_id
                 FROM person_distinct_id2
                 WHERE equals(person_distinct_id2.team_id, 2)
                 GROUP BY person_distinct_id2.distinct_id
                 HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
              INNER JOIN
                (SELECT person.id AS id
                 FROM person
                 WHERE equals(person.team_id, 2)
                 GROUP BY person.id
                 HAVING ifNull(equals(argMax(person.is_deleted, person.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS e__pdi__person ON equals(e__pdi.person_id, e__pdi__person.id)
              WHERE and(equals(e.team_id, 2), equals(e.event, '$pageview'), ifNull(greaterOrEquals(timestamp, minus(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-29 00:00:00', 6, 'UTC')), toIntervalDay(7))), 0), ifNull(lessOrEquals(timestamp, assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-18 23:59:59', 6, 'UTC'))), 0))
              GROUP BY timestamp, actor_id) AS e
           WHERE and(ifNull(lessOrEquals(e.timestamp, plus(d.timestamp, toIntervalDay(1))), 0), ifNull(greater(e.timestamp, minus(d.timestamp, toIntervalDay(6))), 0))
           GROUP BY d.timestamp
           ORDER BY d.timestamp ASC)
        WHERE and(ifNull(greaterOrEquals(timestamp, toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-29 00:00:00', 6, 'UTC')), 0)), 0), ifNull(lessOrEquals(timestamp, assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-18 23:59:59', 6, 'UTC'))), 0)))
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY sum(count) DESC
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_weekly_active_users_weekly_minus_utc
  '
  SELECT groupArray(day_start) AS date,
         groupArray(count) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start
     FROM
       (SELECT 0 AS total,
               minus(toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-18 23:59:59', 6, 'America/Phoenix')), 0), toIntervalWeek(numbers.number)) AS day_start
        FROM numbers(coalesce(dateDiff('week', assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-29 00:00:00', 6, 'America/Phoenix')), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-18 23:59:59', 6, 'America/Phoenix'))), 0)) AS numbers
        UNION ALL SELECT 0 AS total,
                         toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-29 00:00:00', 6, 'America/Phoenix')), 0) AS day_start
        UNION ALL SELECT counts AS total,
                         toStartOfWeek(timestamp, 0) AS day_start
        FROM
          (SELECT d.timestamp,
                  count(DISTINCT e.actor_id) AS counts
           FROM
             (SELECT minus(toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-18 23:59:59', 6, 'America/Phoenix')), 0), toIntervalWeek(numbers.number)) AS timestamp
              FROM numbers(dateDiff('week', minus(toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-29 00:00:00', 6, 'America/Phoenix')), 0), toIntervalDay(7)), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-18 23:59:59', 6, 'America/Phoenix')))) AS numbers) AS d
           CROSS JOIN
             (SELECT toTimeZone(e.timestamp, 'America/Phoenix') AS timestamp,
                     e__pdi__person.id AS actor_id
              FROM events AS e SAMPLE 1
              INNER JOIN
                (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                        person_distinct_id2.distinct_id AS distinct_id
                 FROM person_distinct_id2
                 WHERE equals(person_distinct_id2.team_id, 2)
                 GROUP BY person_distinct_id2.distinct_id
                 HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
              INNER JOIN
                (SELECT person.id AS id
                 FROM person
                 WHERE equals(person.team_id, 2)
                 GROUP BY person.id
                 HAVING ifNull(equals(argMax(person.is_deleted, person.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS e__pdi__person ON equals(e__pdi.person_id, e__pdi__person.id)
              WHERE and(equals(e.team_id, 2), equals(e.event, '$pageview'), ifNull(greaterOrEquals(timestamp, minus(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-29 00:00:00', 6, 'America/Phoenix')), toIntervalDay(7))), 0), ifNull(lessOrEquals(timestamp, assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-18 23:59:59', 6, 'America/Phoenix'))), 0))
              GROUP BY timestamp, actor_id) AS e
           WHERE and(ifNull(lessOrEquals(e.timestamp, plus(d.timestamp, toIntervalDay(1))), 0), ifNull(greater(e.timestamp, minus(d.timestamp, toIntervalDay(6))), 0))
           GROUP BY d.timestamp
           ORDER BY d.timestamp ASC)
        WHERE and(ifNull(greaterOrEquals(timestamp, toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-29 00:00:00', 6, 'America/Phoenix')), 0)), 0), ifNull(lessOrEquals(timestamp, assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-18 23:59:59', 6, 'America/Phoenix'))), 0)))
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY sum(count) DESC
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
# name: TestTrends.test_weekly_active_users_weekly_plus_utc
  '
  SELECT groupArray(day_start) AS date,
         groupArray(count) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start
     FROM
       (SELECT 0 AS total,
               minus(toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-18 23:59:59', 6, 'Asia/Tokyo')), 0), toIntervalWeek(numbers.number)) AS day_start
        FROM numbers(coalesce(dateDiff('week', assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-29 00:00:00', 6, 'Asia/Tokyo')), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-18 23:59:59', 6, 'Asia/Tokyo'))), 0)) AS numbers
        UNION ALL SELECT 0 AS total,
                         toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-29 00:00:00', 6, 'Asia/Tokyo')), 0) AS day_start
        UNION ALL SELECT counts AS total,
                         toStartOfWeek(timestamp, 0) AS day_start
        FROM
          (SELECT d.timestamp,
                  count(DISTINCT e.actor_id) AS counts
           FROM
             (SELECT minus(toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-18 23:59:59', 6, 'Asia/Tokyo')), 0), toIntervalWeek(numbers.number)) AS timestamp
              FROM numbers(dateDiff('week', minus(toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-29 00:00:00', 6, 'Asia/Tokyo')), 0), toIntervalDay(7)), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-18 23:59:59', 6, 'Asia/Tokyo')))) AS numbers) AS d
           CROSS JOIN
             (SELECT toTimeZone(e.timestamp, 'Asia/Tokyo') AS timestamp,
                     e__pdi__person.id AS actor_id
              FROM events AS e SAMPLE 1
              INNER JOIN
                (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                        person_distinct_id2.distinct_id AS distinct_id
                 FROM person_distinct_id2
                 WHERE equals(person_distinct_id2.team_id, 2)
                 GROUP BY person_distinct_id2.distinct_id
                 HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
              INNER JOIN
                (SELECT person.id AS id
                 FROM person
                 WHERE equals(person.team_id, 2)
                 GROUP BY person.id
                 HAVING ifNull(equals(argMax(person.is_deleted, person.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS e__pdi__person ON equals(e__pdi.person_id, e__pdi__person.id)
              WHERE and(equals(e.team_id, 2), equals(e.event, '$pageview'), ifNull(greaterOrEquals(timestamp, minus(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-29 00:00:00', 6, 'Asia/Tokyo')), toIntervalDay(7))), 0), ifNull(lessOrEquals(timestamp, assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-18 23:59:59', 6, 'Asia/Tokyo'))), 0))
              GROUP BY timestamp, actor_id) AS e
           WHERE and(ifNull(lessOrEquals(e.timestamp, plus(d.timestamp, toIntervalDay(1))), 0), ifNull(greater(e.timestamp, minus(d.timestamp, toIntervalDay(6))), 0))
           GROUP BY d.timestamp
           ORDER BY d.timestamp ASC)
        WHERE and(ifNull(greaterOrEquals(timestamp, toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-29 00:00:00', 6, 'Asia/Tokyo')), 0)), 0), ifNull(lessOrEquals(timestamp, assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-18 23:59:59', 6, 'Asia/Tokyo'))), 0)))
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY sum(count) DESC
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1
  '
---
