# serializer version: 1
# name: TestTrends.test_action_filtering_with_cohort
  '''
  
  SELECT count(DISTINCT person_id)
  FROM cohortpeople
  WHERE team_id = 2
    AND cohort_id = 2
    AND version = NULL
  '''
# ---
# name: TestTrends.test_action_filtering_with_cohort.1
  '''
  /* cohort_calculation: */
  SELECT count(DISTINCT person_id)
  FROM cohortpeople
  WHERE team_id = 2
    AND cohort_id = 2
    AND version = 0
  '''
# ---
# name: TestTrends.test_action_filtering_with_cohort.2
  '''
  
  SELECT count(DISTINCT person_id)
  FROM cohortpeople
  WHERE team_id = 2
    AND cohort_id = 2
    AND version = 0
  '''
# ---
# name: TestTrends.test_action_filtering_with_cohort.3
  '''
  /* cohort_calculation: */
  SELECT count(DISTINCT person_id)
  FROM cohortpeople
  WHERE team_id = 2
    AND cohort_id = 2
    AND version = 2
  '''
# ---
# name: TestTrends.test_action_filtering_with_cohort.4
  '''
  /* celery:posthog.tasks.calculate_cohort.clear_stale_cohort */
  SELECT count()
  FROM cohortpeople
  WHERE team_id = 2
    AND cohort_id = 2
    AND version < 2
  '''
# ---
# name: TestTrends.test_action_filtering_with_cohort.5
  '''
  SELECT arrayMap(number -> plus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC'))), toIntervalDay(number)), range(0, plus(coalesce(dateDiff('day', toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC'))), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-07 23:59:59', 6, 'UTC'))))), 1))) AS date,
         arrayMap(_match_date -> arraySum(arraySlice(groupArray(count), indexOf(groupArray(day_start) AS _days_for_count, _match_date) AS _index, plus(minus(arrayLastIndex(x -> ifNull(equals(x, _match_date), isNull(x)
                                                                                                                                                                                        and isNull(_match_date)), _days_for_count), _index), 1))), date) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start AS day_start
     FROM
       (SELECT count() AS total,
               toStartOfDay(toTimeZone(e.timestamp, 'UTC')) AS day_start
        FROM events AS e SAMPLE 1
        INNER JOIN
          (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                  argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS e__pdi___person_id,
                  person_distinct_id2.distinct_id AS distinct_id
           FROM person_distinct_id2
           WHERE equals(person_distinct_id2.team_id, 2)
           GROUP BY person_distinct_id2.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
        LEFT JOIN
          (SELECT person.id AS id,
                  replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, '$bool_prop'), ''), 'null'), '^"|"$', '') AS `properties___$bool_prop`
           FROM person
           WHERE and(equals(person.team_id, 2), ifNull(in(tuple(person.id, person.version),
                                                            (SELECT person.id AS id, max(person.version) AS version
                                                             FROM person
                                                             WHERE equals(person.team_id, 2)
                                                             GROUP BY person.id
                                                             HAVING and(ifNull(equals(argMax(person.is_deleted, person.version), 0), 0), ifNull(less(argMax(person.created_at, person.version), plus(now64(6, 'UTC'), toIntervalDay(1))), 0)))), 0)) SETTINGS optimize_aggregation_in_order=1) AS e__pdi__person ON equals(e__pdi.e__pdi___person_id, e__pdi__person.id)
        WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-07 23:59:59', 6, 'UTC'))), ifNull(equals(e__pdi__person.`properties___$bool_prop`, 'x'), 0), and(equals(e.event, 'sign up'), ifNull(in(e__pdi.person_id,
                                                                                                                                                                                                                                                                                                                                                                                                                                     (SELECT cohortpeople.person_id AS person_id
                                                                                                                                                                                                                                                                                                                                                                                                                                      FROM cohortpeople
                                                                                                                                                                                                                                                                                                                                                                                                                                      WHERE and(equals(cohortpeople.team_id, 2), equals(cohortpeople.cohort_id, 2), equals(cohortpeople.version, 2)))), 0)))
        GROUP BY day_start)
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY arraySum(total) DESC
  LIMIT 50000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1,
                       format_csv_allow_double_quotes=0,
                       max_ast_elements=1000000,
                       max_expanded_ast_elements=1000000,
                       max_query_size=524288,
                       max_bytes_before_external_group_by=0
  '''
# ---
# name: TestTrends.test_action_filtering_with_cohort_poe_v2
  '''
  
  SELECT count(DISTINCT person_id)
  FROM cohortpeople
  WHERE team_id = 2
    AND cohort_id = 2
    AND version = NULL
  '''
# ---
# name: TestTrends.test_action_filtering_with_cohort_poe_v2.1
  '''
  /* cohort_calculation: */
  SELECT count(DISTINCT person_id)
  FROM cohortpeople
  WHERE team_id = 2
    AND cohort_id = 2
    AND version = 0
  '''
# ---
# name: TestTrends.test_action_filtering_with_cohort_poe_v2.2
  '''
  
  SELECT count(DISTINCT person_id)
  FROM cohortpeople
  WHERE team_id = 2
    AND cohort_id = 2
    AND version = 0
  '''
# ---
# name: TestTrends.test_action_filtering_with_cohort_poe_v2.3
  '''
  /* cohort_calculation: */
  SELECT count(DISTINCT person_id)
  FROM cohortpeople
  WHERE team_id = 2
    AND cohort_id = 2
    AND version = 2
  '''
# ---
# name: TestTrends.test_action_filtering_with_cohort_poe_v2.4
  '''
  /* celery:posthog.tasks.calculate_cohort.clear_stale_cohort */
  SELECT count()
  FROM cohortpeople
  WHERE team_id = 2
    AND cohort_id = 2
    AND version < 2
  '''
# ---
# name: TestTrends.test_action_filtering_with_cohort_poe_v2.5
  '''
  SELECT arrayMap(number -> plus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC'))), toIntervalDay(number)), range(0, plus(coalesce(dateDiff('day', toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC'))), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-07 23:59:59', 6, 'UTC'))))), 1))) AS date,
         arrayMap(_match_date -> arraySum(arraySlice(groupArray(count), indexOf(groupArray(day_start) AS _days_for_count, _match_date) AS _index, plus(minus(arrayLastIndex(x -> ifNull(equals(x, _match_date), isNull(x)
                                                                                                                                                                                        and isNull(_match_date)), _days_for_count), _index), 1))), date) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start AS day_start
     FROM
       (SELECT count() AS total,
               toStartOfDay(toTimeZone(e.timestamp, 'UTC')) AS day_start
        FROM events AS e SAMPLE 1
        LEFT OUTER JOIN
          (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                  person_distinct_id_overrides.distinct_id AS distinct_id
           FROM person_distinct_id_overrides
           WHERE equals(person_distinct_id_overrides.team_id, 2)
           GROUP BY person_distinct_id_overrides.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0)) AS e__override ON equals(e.distinct_id, e__override.distinct_id)
        WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-07 23:59:59', 6, 'UTC'))), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.person_properties, '$bool_prop'), ''), 'null'), '^"|"$', ''), 'x'), 0), and(equals(e.event, 'sign up'), ifNull(in(if(not(empty(e__override.distinct_id)), e__override.person_id, e.person_id),
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         (SELECT cohortpeople.person_id AS person_id
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          FROM cohortpeople
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          WHERE and(equals(cohortpeople.team_id, 2), equals(cohortpeople.cohort_id, 2), equals(cohortpeople.version, 2)))), 0)))
        GROUP BY day_start)
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY arraySum(total) DESC
  LIMIT 50000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1,
                       format_csv_allow_double_quotes=0,
                       max_ast_elements=1000000,
                       max_expanded_ast_elements=1000000,
                       max_query_size=524288,
                       max_bytes_before_external_group_by=0
  '''
# ---
# name: TestTrends.test_breakdown_by_group_props_person_on_events
  '''
  SELECT groupArray(1)(date)[1] AS date,
                      arrayFold((acc, x) -> arrayMap(i -> plus(acc[i], x[i]), range(1, plus(length(date), 1))), groupArray(total), arrayWithConstant(length(date), reinterpretAsFloat64(0))) AS total,
                      if(ifNull(greaterOrEquals(row_number, 25), 0), '$$_posthog_breakdown_other_$$', toString(breakdown_value)) AS breakdown_value
  FROM
    (SELECT arrayMap(number -> plus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC'))), toIntervalDay(number)), range(0, plus(coalesce(dateDiff('day', toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC'))), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-12 23:59:59', 6, 'UTC'))))), 1))) AS date,
            arrayMap(_match_date -> arraySum(arraySlice(groupArray(count), indexOf(groupArray(day_start) AS _days_for_count, _match_date) AS _index, plus(minus(arrayLastIndex(x -> ifNull(equals(x, _match_date), isNull(x)
                                                                                                                                                                                           and isNull(_match_date)), _days_for_count), _index), 1))), date) AS total,
            ifNull(toString(breakdown_value), '$$_posthog_breakdown_null_$$') AS breakdown_value,
            rowNumberInAllBlocks() AS row_number
     FROM
       (SELECT sum(total) AS count,
               day_start AS day_start,
               breakdown_value AS breakdown_value
        FROM
          (SELECT count() AS total,
                  toStartOfDay(toTimeZone(e.timestamp, 'UTC')) AS day_start,
                  ifNull(nullIf(toString(e__group_0.properties___industry), ''), '$$_posthog_breakdown_null_$$') AS breakdown_value
           FROM events AS e SAMPLE 1
           LEFT JOIN
             (SELECT argMax(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(groups.group_properties, 'industry'), ''), 'null'), '^"|"$', ''), groups._timestamp) AS properties___industry,
                     groups.group_type_index AS index,
                     groups.group_key AS key
              FROM groups
              WHERE and(equals(groups.team_id, 2), ifNull(equals(index, 0), 0))
              GROUP BY groups.group_type_index,
                       groups.group_key) AS e__group_0 ON equals(e.`$group_0`, e__group_0.key)
           WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-12 23:59:59', 6, 'UTC'))), equals(e.event, 'sign up'), true)
           GROUP BY day_start,
                    breakdown_value)
        GROUP BY day_start,
                 breakdown_value
        ORDER BY day_start ASC, breakdown_value ASC)
     GROUP BY breakdown_value
     ORDER BY arraySum(total) DESC, breakdown_value ASC)
  WHERE isNotNull(breakdown_value)
  GROUP BY breakdown_value
  ORDER BY if(ifNull(equals(breakdown_value, '$$_posthog_breakdown_other_$$'), 0), 2, if(ifNull(equals(breakdown_value, '$$_posthog_breakdown_null_$$'), 0), 1, 0)) ASC, arraySum(total) DESC, breakdown_value ASC
  LIMIT 50000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1,
                       format_csv_allow_double_quotes=0,
                       max_ast_elements=1000000,
                       max_expanded_ast_elements=1000000,
                       max_query_size=524288,
                       max_bytes_before_external_group_by=0
  '''
# ---
# name: TestTrends.test_breakdown_by_group_props_person_on_events.1
  '''
  SELECT persons.id AS id,
         toTimeZone(persons.created_at, 'UTC') AS created_at,
         source.event_count AS event_count,
         source.matching_events AS matching_events
  FROM
    (SELECT actor_id AS actor_id,
            count() AS event_count,
            groupUniqArray(100)(tuple(timestamp, uuid, `$session_id`, `$window_id`)) AS matching_events
     FROM
       (SELECT e.person_id AS actor_id,
               toTimeZone(e.timestamp, 'UTC') AS timestamp,
               e.uuid AS uuid,
               e.`$session_id` AS `$session_id`,
               e.`$window_id` AS `$window_id`
        FROM events AS e
        LEFT JOIN
          (SELECT argMax(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(groups.group_properties, 'industry'), ''), 'null'), '^"|"$', ''), groups._timestamp) AS properties___industry,
                  groups.group_type_index AS index,
                  groups.group_key AS key
           FROM groups
           WHERE and(equals(groups.team_id, 2), ifNull(equals(index, 0), 0))
           GROUP BY groups.group_type_index,
                    groups.group_key) AS e__group_0 ON equals(e.`$group_0`, e__group_0.key)
        WHERE and(equals(e.team_id, 2), equals(e.event, 'sign up'), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-02 00:00:00.000000', 6, 'UTC')), less(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-03 00:00:00.000000', 6, 'UTC')), ifNull(equals(e__group_0.properties___industry, 'technology'), 0)))
     GROUP BY actor_id) AS source
  INNER JOIN
    (SELECT argMax(person.created_at, person.version) AS created_at,
            person.id AS id
     FROM person
     WHERE equals(person.team_id, 2)
     GROUP BY person.id
     HAVING and(ifNull(equals(argMax(person.is_deleted, person.version), 0), 0), ifNull(less(argMax(person.created_at, person.version), plus(now64(6, 'UTC'), toIntervalDay(1))), 0)) SETTINGS optimize_aggregation_in_order=1) AS persons ON equals(persons.id, source.actor_id)
  ORDER BY source.event_count DESC
  LIMIT 101
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestTrends.test_breakdown_by_group_props_person_on_events.2
  '''
  SELECT DISTINCT session_replay_events.session_id AS session_id
  FROM session_replay_events
  WHERE and(equals(session_replay_events.team_id, 2), ifNull(greaterOrEquals(toTimeZone(session_replay_events.min_first_timestamp, 'UTC'), minus(toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC'), toIntervalDay(21))), 0), in(session_replay_events.session_id, ['']))
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=0,
                     max_ast_elements=1000000,
                     max_expanded_ast_elements=1000000,
                     max_query_size=524288,
                     max_bytes_before_external_group_by=0
  '''
# ---
# name: TestTrends.test_breakdown_by_group_props_with_person_filter_person_on_events
  '''
  SELECT groupArray(1)(date)[1] AS date,
                      arrayFold((acc, x) -> arrayMap(i -> plus(acc[i], x[i]), range(1, plus(length(date), 1))), groupArray(total), arrayWithConstant(length(date), reinterpretAsFloat64(0))) AS total,
                      if(ifNull(greaterOrEquals(row_number, 25), 0), '$$_posthog_breakdown_other_$$', toString(breakdown_value)) AS breakdown_value
  FROM
    (SELECT arrayMap(number -> plus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC'))), toIntervalDay(number)), range(0, plus(coalesce(dateDiff('day', toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC'))), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-12 23:59:59', 6, 'UTC'))))), 1))) AS date,
            arrayMap(_match_date -> arraySum(arraySlice(groupArray(count), indexOf(groupArray(day_start) AS _days_for_count, _match_date) AS _index, plus(minus(arrayLastIndex(x -> ifNull(equals(x, _match_date), isNull(x)
                                                                                                                                                                                           and isNull(_match_date)), _days_for_count), _index), 1))), date) AS total,
            ifNull(toString(breakdown_value), '$$_posthog_breakdown_null_$$') AS breakdown_value,
            rowNumberInAllBlocks() AS row_number
     FROM
       (SELECT sum(total) AS count,
               day_start AS day_start,
               breakdown_value AS breakdown_value
        FROM
          (SELECT count() AS total,
                  toStartOfDay(toTimeZone(e.timestamp, 'UTC')) AS day_start,
                  ifNull(nullIf(toString(e__group_0.properties___industry), ''), '$$_posthog_breakdown_null_$$') AS breakdown_value
           FROM events AS e SAMPLE 1
           LEFT JOIN
             (SELECT argMax(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(groups.group_properties, 'industry'), ''), 'null'), '^"|"$', ''), groups._timestamp) AS properties___industry,
                     groups.group_type_index AS index,
                     groups.group_key AS key
              FROM groups
              WHERE and(equals(groups.team_id, 2), ifNull(equals(index, 0), 0))
              GROUP BY groups.group_type_index,
                       groups.group_key) AS e__group_0 ON equals(e.`$group_0`, e__group_0.key)
           WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-12 23:59:59', 6, 'UTC'))), equals(e.event, 'sign up'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.person_properties, 'key'), ''), 'null'), '^"|"$', ''), 'value'), 0), true)
           GROUP BY day_start,
                    breakdown_value)
        GROUP BY day_start,
                 breakdown_value
        ORDER BY day_start ASC, breakdown_value ASC)
     GROUP BY breakdown_value
     ORDER BY arraySum(total) DESC, breakdown_value ASC)
  WHERE isNotNull(breakdown_value)
  GROUP BY breakdown_value
  ORDER BY if(ifNull(equals(breakdown_value, '$$_posthog_breakdown_other_$$'), 0), 2, if(ifNull(equals(breakdown_value, '$$_posthog_breakdown_null_$$'), 0), 1, 0)) ASC, arraySum(total) DESC, breakdown_value ASC
  LIMIT 50000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1,
                       format_csv_allow_double_quotes=0,
                       max_ast_elements=1000000,
                       max_expanded_ast_elements=1000000,
                       max_query_size=524288,
                       max_bytes_before_external_group_by=0
  '''
# ---
# name: TestTrends.test_breakdown_filtering_with_properties_in_new_format
  '''
  SELECT groupArray(1)(date)[1] AS date,
                      arrayFold((acc, x) -> arrayMap(i -> plus(acc[i], x[i]), range(1, plus(length(date), 1))), groupArray(total), arrayWithConstant(length(date), reinterpretAsFloat64(0))) AS total,
                      if(ifNull(greaterOrEquals(row_number, 25), 0), '$$_posthog_breakdown_other_$$', toString(breakdown_value)) AS breakdown_value
  FROM
    (SELECT arrayMap(number -> plus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-22 00:00:00', 6, 'UTC'))), toIntervalDay(number)), range(0, plus(coalesce(dateDiff('day', toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-22 00:00:00', 6, 'UTC'))), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 23:59:59', 6, 'UTC'))))), 1))) AS date,
            arrayMap(_match_date -> arraySum(arraySlice(groupArray(count), indexOf(groupArray(day_start) AS _days_for_count, _match_date) AS _index, plus(minus(arrayLastIndex(x -> ifNull(equals(x, _match_date), isNull(x)
                                                                                                                                                                                           and isNull(_match_date)), _days_for_count), _index), 1))), date) AS total,
            ifNull(toString(breakdown_value), '$$_posthog_breakdown_null_$$') AS breakdown_value,
            rowNumberInAllBlocks() AS row_number
     FROM
       (SELECT sum(total) AS count,
               day_start AS day_start,
               breakdown_value AS breakdown_value
        FROM
          (SELECT count() AS total,
                  toStartOfDay(toTimeZone(e.timestamp, 'UTC')) AS day_start,
                  ifNull(nullIf(toString(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$current_url'), ''), 'null'), '^"|"$', '')), ''), '$$_posthog_breakdown_null_$$') AS breakdown_value
           FROM events AS e SAMPLE 1
           WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-22 00:00:00', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 23:59:59', 6, 'UTC'))), equals(e.event, 'sign up'), or(ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$browser'), ''), 'null'), '^"|"$', ''), 'Firefox'), 0), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$os'), ''), 'null'), '^"|"$', ''), 'Windows'), 0)), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$os'), ''), 'null'), '^"|"$', ''), 'Mac'), 0), true)
           GROUP BY day_start,
                    breakdown_value)
        GROUP BY day_start,
                 breakdown_value
        ORDER BY day_start ASC, breakdown_value ASC)
     GROUP BY breakdown_value
     ORDER BY arraySum(total) DESC, breakdown_value ASC)
  WHERE isNotNull(breakdown_value)
  GROUP BY breakdown_value
  ORDER BY if(ifNull(equals(breakdown_value, '$$_posthog_breakdown_other_$$'), 0), 2, if(ifNull(equals(breakdown_value, '$$_posthog_breakdown_null_$$'), 0), 1, 0)) ASC, arraySum(total) DESC, breakdown_value ASC
  LIMIT 50000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1,
                       format_csv_allow_double_quotes=0,
                       max_ast_elements=1000000,
                       max_expanded_ast_elements=1000000,
                       max_query_size=524288,
                       max_bytes_before_external_group_by=0
  '''
# ---
# name: TestTrends.test_breakdown_filtering_with_properties_in_new_format.1
  '''
  SELECT groupArray(1)(date)[1] AS date,
                      arrayFold((acc, x) -> arrayMap(i -> plus(acc[i], x[i]), range(1, plus(length(date), 1))), groupArray(total), arrayWithConstant(length(date), reinterpretAsFloat64(0))) AS total,
                      if(ifNull(greaterOrEquals(row_number, 25), 0), '$$_posthog_breakdown_other_$$', toString(breakdown_value)) AS breakdown_value
  FROM
    (SELECT arrayMap(number -> plus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-22 00:00:00', 6, 'UTC'))), toIntervalDay(number)), range(0, plus(coalesce(dateDiff('day', toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-22 00:00:00', 6, 'UTC'))), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 23:59:59', 6, 'UTC'))))), 1))) AS date,
            arrayMap(_match_date -> arraySum(arraySlice(groupArray(count), indexOf(groupArray(day_start) AS _days_for_count, _match_date) AS _index, plus(minus(arrayLastIndex(x -> ifNull(equals(x, _match_date), isNull(x)
                                                                                                                                                                                           and isNull(_match_date)), _days_for_count), _index), 1))), date) AS total,
            ifNull(toString(breakdown_value), '$$_posthog_breakdown_null_$$') AS breakdown_value,
            rowNumberInAllBlocks() AS row_number
     FROM
       (SELECT sum(total) AS count,
               day_start AS day_start,
               breakdown_value AS breakdown_value
        FROM
          (SELECT count() AS total,
                  toStartOfDay(toTimeZone(e.timestamp, 'UTC')) AS day_start,
                  ifNull(nullIf(toString(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$current_url'), ''), 'null'), '^"|"$', '')), ''), '$$_posthog_breakdown_null_$$') AS breakdown_value
           FROM events AS e SAMPLE 1
           WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-22 00:00:00', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 23:59:59', 6, 'UTC'))), equals(e.event, 'sign up'), and(ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$browser'), ''), 'null'), '^"|"$', ''), 'Firefox'), 0), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$os'), ''), 'null'), '^"|"$', ''), 'Windows'), 0)), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$os'), ''), 'null'), '^"|"$', ''), 'Mac'), 0), true)
           GROUP BY day_start,
                    breakdown_value)
        GROUP BY day_start,
                 breakdown_value
        ORDER BY day_start ASC, breakdown_value ASC)
     GROUP BY breakdown_value
     ORDER BY arraySum(total) DESC, breakdown_value ASC)
  WHERE isNotNull(breakdown_value)
  GROUP BY breakdown_value
  ORDER BY if(ifNull(equals(breakdown_value, '$$_posthog_breakdown_other_$$'), 0), 2, if(ifNull(equals(breakdown_value, '$$_posthog_breakdown_null_$$'), 0), 1, 0)) ASC, arraySum(total) DESC, breakdown_value ASC
  LIMIT 50000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1,
                       format_csv_allow_double_quotes=0,
                       max_ast_elements=1000000,
                       max_expanded_ast_elements=1000000,
                       max_query_size=524288,
                       max_bytes_before_external_group_by=0
  '''
# ---
# name: TestTrends.test_breakdown_weekly_active_users_aggregated
  '''
  SELECT sum(total) AS total,
         if(ifNull(ifNull(greaterOrEquals(row_number, 26), 0), 0), '$$_posthog_breakdown_other_$$', toString(breakdown_value)) AS breakdown_value
  FROM
    (SELECT total AS total,
            breakdown_value AS breakdown_value,
            row_number() OVER (
                               ORDER BY total DESC) AS row_number
     FROM
       (SELECT count(DISTINCT actor_id) AS total,
               breakdown_value AS breakdown_value
        FROM
          (SELECT d.timestamp AS timestamp,
                  e.actor_id AS actor_id,
                  e.breakdown_value AS breakdown_value
           FROM
             (SELECT minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-11 23:59:59', 6, 'UTC'))), toIntervalDay(numbers.number)) AS timestamp
              FROM numbers(dateDiff('day', minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-11 00:00:00', 6, 'UTC'))), toIntervalDay(7)), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-11 23:59:59', 6, 'UTC')))) AS numbers) AS d
           CROSS JOIN
             (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                     e__pdi.person_id AS actor_id,
                     ifNull(nullIf(toString(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, 'key'), ''), 'null'), '^"|"$', '')), ''), '$$_posthog_breakdown_null_$$') AS breakdown_value
              FROM events AS e SAMPLE 1
              INNER JOIN
                (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                        person_distinct_id2.distinct_id AS distinct_id
                 FROM person_distinct_id2
                 WHERE equals(person_distinct_id2.team_id, 2)
                 GROUP BY person_distinct_id2.distinct_id
                 HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
              WHERE and(equals(e.team_id, 2), and(equals(e.event, '$pageview'), true), ifNull(greaterOrEquals(timestamp, minus(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-11 23:59:59', 6, 'UTC')), toIntervalDay(7))), 0), ifNull(lessOrEquals(timestamp, assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-11 23:59:59', 6, 'UTC'))), 0))
              GROUP BY timestamp, actor_id,
                                  breakdown_value) AS e
           WHERE and(ifNull(lessOrEquals(e.timestamp, plus(d.timestamp, toIntervalDay(1))), 0), ifNull(greater(e.timestamp, minus(d.timestamp, toIntervalDay(6))), 0))
           GROUP BY d.timestamp,
                    e.actor_id,
                    e.breakdown_value
           ORDER BY d.timestamp ASC)
        WHERE and(ifNull(greaterOrEquals(timestamp, toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-11 00:00:00', 6, 'UTC')))), 0), ifNull(lessOrEquals(timestamp, assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-11 23:59:59', 6, 'UTC'))), 0))
        GROUP BY breakdown_value))
  WHERE isNotNull(breakdown_value)
  GROUP BY breakdown_value
  ORDER BY if(ifNull(equals(breakdown_value, '$$_posthog_breakdown_other_$$'), 0), 2, if(ifNull(equals(breakdown_value, '$$_posthog_breakdown_null_$$'), 0), 1, 0)) ASC, total DESC,
                                                                                                                                                                         breakdown_value ASC
  LIMIT 50000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1,
                       format_csv_allow_double_quotes=0,
                       max_ast_elements=1000000,
                       max_expanded_ast_elements=1000000,
                       max_query_size=524288,
                       max_bytes_before_external_group_by=0
  '''
# ---
# name: TestTrends.test_breakdown_weekly_active_users_aggregated_materialized
  '''
  SELECT sum(total) AS total,
         if(ifNull(ifNull(greaterOrEquals(row_number, 26), 0), 0), '$$_posthog_breakdown_other_$$', toString(breakdown_value)) AS breakdown_value
  FROM
    (SELECT total AS total,
            breakdown_value AS breakdown_value,
            row_number() OVER (
                               ORDER BY total DESC) AS row_number
     FROM
       (SELECT count(DISTINCT actor_id) AS total,
               breakdown_value AS breakdown_value
        FROM
          (SELECT d.timestamp AS timestamp,
                  e.actor_id AS actor_id,
                  e.breakdown_value AS breakdown_value
           FROM
             (SELECT minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-11 23:59:59', 6, 'UTC'))), toIntervalDay(numbers.number)) AS timestamp
              FROM numbers(dateDiff('day', minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-11 00:00:00', 6, 'UTC'))), toIntervalDay(7)), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-11 23:59:59', 6, 'UTC')))) AS numbers) AS d
           CROSS JOIN
             (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                     e__pdi.person_id AS actor_id,
                     ifNull(nullIf(toString(nullIf(nullIf(e.mat_key, ''), 'null')), ''), '$$_posthog_breakdown_null_$$') AS breakdown_value
              FROM events AS e SAMPLE 1
              INNER JOIN
                (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                        person_distinct_id2.distinct_id AS distinct_id
                 FROM person_distinct_id2
                 WHERE equals(person_distinct_id2.team_id, 2)
                 GROUP BY person_distinct_id2.distinct_id
                 HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
              WHERE and(equals(e.team_id, 2), and(equals(e.event, '$pageview'), true), ifNull(greaterOrEquals(timestamp, minus(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-11 23:59:59', 6, 'UTC')), toIntervalDay(7))), 0), ifNull(lessOrEquals(timestamp, assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-11 23:59:59', 6, 'UTC'))), 0))
              GROUP BY timestamp, actor_id,
                                  breakdown_value) AS e
           WHERE and(ifNull(lessOrEquals(e.timestamp, plus(d.timestamp, toIntervalDay(1))), 0), ifNull(greater(e.timestamp, minus(d.timestamp, toIntervalDay(6))), 0))
           GROUP BY d.timestamp,
                    e.actor_id,
                    e.breakdown_value
           ORDER BY d.timestamp ASC)
        WHERE and(ifNull(greaterOrEquals(timestamp, toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-11 00:00:00', 6, 'UTC')))), 0), ifNull(lessOrEquals(timestamp, assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-11 23:59:59', 6, 'UTC'))), 0))
        GROUP BY breakdown_value))
  WHERE isNotNull(breakdown_value)
  GROUP BY breakdown_value
  ORDER BY if(ifNull(equals(breakdown_value, '$$_posthog_breakdown_other_$$'), 0), 2, if(ifNull(equals(breakdown_value, '$$_posthog_breakdown_null_$$'), 0), 1, 0)) ASC, total DESC,
                                                                                                                                                                         breakdown_value ASC
  LIMIT 50000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1,
                       format_csv_allow_double_quotes=0,
                       max_ast_elements=1000000,
                       max_expanded_ast_elements=1000000,
                       max_query_size=524288,
                       max_bytes_before_external_group_by=0
  '''
# ---
# name: TestTrends.test_breakdown_weekly_active_users_daily_based_on_action
  '''
  
  SELECT count(DISTINCT person_id)
  FROM cohortpeople
  WHERE team_id = 2
    AND cohort_id = 2
    AND version = NULL
  '''
# ---
# name: TestTrends.test_breakdown_weekly_active_users_daily_based_on_action.1
  '''
  /* cohort_calculation: */
  SELECT count(DISTINCT person_id)
  FROM cohortpeople
  WHERE team_id = 2
    AND cohort_id = 2
    AND version = 0
  '''
# ---
# name: TestTrends.test_breakdown_weekly_active_users_daily_based_on_action.2
  '''
  SELECT groupArray(1)(date)[1] AS date,
                      arrayFold((acc, x) -> arrayMap(i -> plus(acc[i], x[i]), range(1, plus(length(date), 1))), groupArray(total), arrayWithConstant(length(date), reinterpretAsFloat64(0))) AS total,
                      if(ifNull(greaterOrEquals(row_number, 25), 0), '$$_posthog_breakdown_other_$$', toString(breakdown_value)) AS breakdown_value
  FROM
    (SELECT arrayMap(number -> plus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC'))), toIntervalDay(number)), range(0, plus(coalesce(dateDiff('day', toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC'))), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-12 23:59:59', 6, 'UTC'))))), 1))) AS date,
            arrayMap(_match_date -> arraySum(arraySlice(groupArray(count), indexOf(groupArray(day_start) AS _days_for_count, _match_date) AS _index, plus(minus(arrayLastIndex(x -> ifNull(equals(x, _match_date), isNull(x)
                                                                                                                                                                                           and isNull(_match_date)), _days_for_count), _index), 1))), date) AS total,
            ifNull(toString(breakdown_value), '$$_posthog_breakdown_null_$$') AS breakdown_value,
            rowNumberInAllBlocks() AS row_number
     FROM
       (SELECT sum(total) AS count,
               day_start AS day_start,
               breakdown_value AS breakdown_value
        FROM
          (SELECT counts AS total,
                  toStartOfDay(timestamp) AS day_start,
                  breakdown_value AS breakdown_value
           FROM
             (SELECT d.timestamp AS timestamp,
                     count(DISTINCT e.actor_id) AS counts,
                     e.breakdown_value AS breakdown_value
              FROM
                (SELECT minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-12 23:59:59', 6, 'UTC'))), toIntervalDay(numbers.number)) AS timestamp
                 FROM numbers(dateDiff('day', minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC'))), toIntervalDay(7)), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-12 23:59:59', 6, 'UTC')))) AS numbers) AS d
              CROSS JOIN
                (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                        e__pdi.person_id AS actor_id,
                        ifNull(nullIf(toString(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, 'key'), ''), 'null'), '^"|"$', '')), ''), '$$_posthog_breakdown_null_$$') AS breakdown_value
                 FROM events AS e SAMPLE 1
                 INNER JOIN
                   (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                           argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS e__pdi___person_id,
                           person_distinct_id2.distinct_id AS distinct_id
                    FROM person_distinct_id2
                    WHERE equals(person_distinct_id2.team_id, 2)
                    GROUP BY person_distinct_id2.distinct_id
                    HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
                 LEFT JOIN
                   (SELECT person.id AS id,
                           replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, 'name'), ''), 'null'), '^"|"$', '') AS properties___name
                    FROM person
                    WHERE and(equals(person.team_id, 2), ifNull(in(tuple(person.id, person.version),
                                                                     (SELECT person.id AS id, max(person.version) AS version
                                                                      FROM person
                                                                      WHERE equals(person.team_id, 2)
                                                                      GROUP BY person.id
                                                                      HAVING and(ifNull(equals(argMax(person.is_deleted, person.version), 0), 0), ifNull(less(argMax(person.created_at, person.version), plus(now64(6, 'UTC'), toIntervalDay(1))), 0)))), 0)) SETTINGS optimize_aggregation_in_order=1) AS e__pdi__person ON equals(e__pdi.e__pdi___person_id, e__pdi__person.id)
                 WHERE and(equals(e.team_id, 2), and(and(equals(e.event, '$pageview'), and(or(ifNull(equals(e__pdi__person.properties___name, 'p1'), 0), ifNull(equals(e__pdi__person.properties___name, 'p2'), 0), ifNull(equals(e__pdi__person.properties___name, 'p3'), 0)), ifNull(in(e__pdi.person_id,
                                                                                                                                                                                                                                                                                            (SELECT cohortpeople.person_id AS person_id
                                                                                                                                                                                                                                                                                             FROM cohortpeople
                                                                                                                                                                                                                                                                                             WHERE and(equals(cohortpeople.team_id, 2), equals(cohortpeople.cohort_id, 2), equals(cohortpeople.version, 0)))), 0))), true), ifNull(greaterOrEquals(timestamp, minus(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC')), toIntervalDay(7))), 0), ifNull(lessOrEquals(timestamp, assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-12 23:59:59', 6, 'UTC'))), 0))
                 GROUP BY timestamp, actor_id,
                                     breakdown_value) AS e
              WHERE and(ifNull(lessOrEquals(e.timestamp, plus(d.timestamp, toIntervalDay(1))), 0), ifNull(greater(e.timestamp, minus(d.timestamp, toIntervalDay(6))), 0))
              GROUP BY d.timestamp,
                       e.breakdown_value
              ORDER BY d.timestamp ASC)
           WHERE and(ifNull(greaterOrEquals(timestamp, toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC')))), 0), ifNull(lessOrEquals(timestamp, assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-12 23:59:59', 6, 'UTC'))), 0)))
        GROUP BY day_start,
                 breakdown_value
        ORDER BY day_start ASC, breakdown_value ASC)
     GROUP BY breakdown_value
     ORDER BY arraySum(total) DESC, breakdown_value ASC)
  WHERE isNotNull(breakdown_value)
  GROUP BY breakdown_value
  ORDER BY if(ifNull(equals(breakdown_value, '$$_posthog_breakdown_other_$$'), 0), 2, if(ifNull(equals(breakdown_value, '$$_posthog_breakdown_null_$$'), 0), 1, 0)) ASC, arraySum(total) DESC, breakdown_value ASC
  LIMIT 50000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1,
                       format_csv_allow_double_quotes=0,
                       max_ast_elements=1000000,
                       max_expanded_ast_elements=1000000,
                       max_query_size=524288,
                       max_bytes_before_external_group_by=0
  '''
# ---
# name: TestTrends.test_breakdown_with_filter_groups_person_on_events
  '''
  SELECT groupArray(1)(date)[1] AS date,
                      arrayFold((acc, x) -> arrayMap(i -> plus(acc[i], x[i]), range(1, plus(length(date), 1))), groupArray(total), arrayWithConstant(length(date), reinterpretAsFloat64(0))) AS total,
                      if(ifNull(greaterOrEquals(row_number, 25), 0), '$$_posthog_breakdown_other_$$', toString(breakdown_value)) AS breakdown_value
  FROM
    (SELECT arrayMap(number -> plus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC'))), toIntervalDay(number)), range(0, plus(coalesce(dateDiff('day', toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC'))), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-12 23:59:59', 6, 'UTC'))))), 1))) AS date,
            arrayMap(_match_date -> arraySum(arraySlice(groupArray(count), indexOf(groupArray(day_start) AS _days_for_count, _match_date) AS _index, plus(minus(arrayLastIndex(x -> ifNull(equals(x, _match_date), isNull(x)
                                                                                                                                                                                           and isNull(_match_date)), _days_for_count), _index), 1))), date) AS total,
            ifNull(toString(breakdown_value), '$$_posthog_breakdown_null_$$') AS breakdown_value,
            rowNumberInAllBlocks() AS row_number
     FROM
       (SELECT sum(total) AS count,
               day_start AS day_start,
               breakdown_value AS breakdown_value
        FROM
          (SELECT count() AS total,
                  toStartOfDay(toTimeZone(e.timestamp, 'UTC')) AS day_start,
                  ifNull(nullIf(toString(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, 'key'), ''), 'null'), '^"|"$', '')), ''), '$$_posthog_breakdown_null_$$') AS breakdown_value
           FROM events AS e SAMPLE 1
           LEFT JOIN
             (SELECT argMax(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(groups.group_properties, 'industry'), ''), 'null'), '^"|"$', ''), groups._timestamp) AS properties___industry,
                     groups.group_type_index AS index,
                     groups.group_key AS key
              FROM groups
              WHERE and(equals(groups.team_id, 2), ifNull(equals(index, 0), 0))
              GROUP BY groups.group_type_index,
                       groups.group_key) AS e__group_0 ON equals(e.`$group_0`, e__group_0.key)
           WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-12 23:59:59', 6, 'UTC'))), equals(e.event, 'sign up'), ifNull(equals(e__group_0.properties___industry, 'finance'), 0), true)
           GROUP BY day_start,
                    breakdown_value)
        GROUP BY day_start,
                 breakdown_value
        ORDER BY day_start ASC, breakdown_value ASC)
     GROUP BY breakdown_value
     ORDER BY arraySum(total) DESC, breakdown_value ASC)
  WHERE isNotNull(breakdown_value)
  GROUP BY breakdown_value
  ORDER BY if(ifNull(equals(breakdown_value, '$$_posthog_breakdown_other_$$'), 0), 2, if(ifNull(equals(breakdown_value, '$$_posthog_breakdown_null_$$'), 0), 1, 0)) ASC, arraySum(total) DESC, breakdown_value ASC
  LIMIT 50000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1,
                       format_csv_allow_double_quotes=0,
                       max_ast_elements=1000000,
                       max_expanded_ast_elements=1000000,
                       max_query_size=524288,
                       max_bytes_before_external_group_by=0
  '''
# ---
# name: TestTrends.test_breakdown_with_filter_groups_person_on_events_v2
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 2
    AND distinct_id = 'test_breakdown_d2'
  '''
# ---
# name: TestTrends.test_breakdown_with_filter_groups_person_on_events_v2.1
  '''
  SELECT groupArray(1)(date)[1] AS date,
                      arrayFold((acc, x) -> arrayMap(i -> plus(acc[i], x[i]), range(1, plus(length(date), 1))), groupArray(total), arrayWithConstant(length(date), reinterpretAsFloat64(0))) AS total,
                      if(ifNull(greaterOrEquals(row_number, 25), 0), '$$_posthog_breakdown_other_$$', toString(breakdown_value)) AS breakdown_value
  FROM
    (SELECT arrayMap(number -> plus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC'))), toIntervalDay(number)), range(0, plus(coalesce(dateDiff('day', toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC'))), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-12 23:59:59', 6, 'UTC'))))), 1))) AS date,
            arrayMap(_match_date -> arraySum(arraySlice(groupArray(count), indexOf(groupArray(day_start) AS _days_for_count, _match_date) AS _index, plus(minus(arrayLastIndex(x -> ifNull(equals(x, _match_date), isNull(x)
                                                                                                                                                                                           and isNull(_match_date)), _days_for_count), _index), 1))), date) AS total,
            ifNull(toString(breakdown_value), '$$_posthog_breakdown_null_$$') AS breakdown_value,
            rowNumberInAllBlocks() AS row_number
     FROM
       (SELECT sum(total) AS count,
               day_start AS day_start,
               breakdown_value AS breakdown_value
        FROM
          (SELECT count(DISTINCT if(not(empty(e__override.distinct_id)), e__override.person_id, e.person_id)) AS total,
                  toStartOfDay(toTimeZone(e.timestamp, 'UTC')) AS day_start,
                  ifNull(nullIf(toString(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, 'key'), ''), 'null'), '^"|"$', '')), ''), '$$_posthog_breakdown_null_$$') AS breakdown_value
           FROM events AS e SAMPLE 1
           LEFT OUTER JOIN
             (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                     person_distinct_id_overrides.distinct_id AS distinct_id
              FROM person_distinct_id_overrides
              WHERE equals(person_distinct_id_overrides.team_id, 2)
              GROUP BY person_distinct_id_overrides.distinct_id
              HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0)) AS e__override ON equals(e.distinct_id, e__override.distinct_id)
           LEFT JOIN
             (SELECT argMax(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(groups.group_properties, 'industry'), ''), 'null'), '^"|"$', ''), groups._timestamp) AS properties___industry,
                     groups.group_type_index AS index,
                     groups.group_key AS key
              FROM groups
              WHERE and(equals(groups.team_id, 2), ifNull(equals(index, 0), 0))
              GROUP BY groups.group_type_index,
                       groups.group_key) AS e__group_0 ON equals(e.`$group_0`, e__group_0.key)
           WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-12 23:59:59', 6, 'UTC'))), equals(e.event, 'sign up'), ifNull(equals(e__group_0.properties___industry, 'finance'), 0), true)
           GROUP BY day_start,
                    breakdown_value)
        GROUP BY day_start,
                 breakdown_value
        ORDER BY day_start ASC, breakdown_value ASC)
     GROUP BY breakdown_value
     ORDER BY arraySum(total) DESC, breakdown_value ASC)
  WHERE isNotNull(breakdown_value)
  GROUP BY breakdown_value
  ORDER BY if(ifNull(equals(breakdown_value, '$$_posthog_breakdown_other_$$'), 0), 2, if(ifNull(equals(breakdown_value, '$$_posthog_breakdown_null_$$'), 0), 1, 0)) ASC, arraySum(total) DESC, breakdown_value ASC
  LIMIT 50000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1,
                       format_csv_allow_double_quotes=0,
                       max_ast_elements=1000000,
                       max_expanded_ast_elements=1000000,
                       max_query_size=524288,
                       max_bytes_before_external_group_by=0
  '''
# ---
# name: TestTrends.test_dau_with_breakdown_filtering_with_sampling
  '''
  SELECT groupArray(1)(date)[1] AS date,
                      arrayFold((acc, x) -> arrayMap(i -> plus(acc[i], x[i]), range(1, plus(length(date), 1))), groupArray(total), arrayWithConstant(length(date), reinterpretAsFloat64(0))) AS total,
                      if(ifNull(greaterOrEquals(row_number, 25), 0), '$$_posthog_breakdown_other_$$', toString(breakdown_value)) AS breakdown_value
  FROM
    (SELECT arrayMap(number -> plus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 00:00:00', 6, 'UTC'))), toIntervalDay(number)), range(0, plus(coalesce(dateDiff('day', toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 00:00:00', 6, 'UTC'))), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))))), 1))) AS date,
            arrayMap(_match_date -> arraySum(arraySlice(groupArray(count), indexOf(groupArray(day_start) AS _days_for_count, _match_date) AS _index, plus(minus(arrayLastIndex(x -> ifNull(equals(x, _match_date), isNull(x)
                                                                                                                                                                                           and isNull(_match_date)), _days_for_count), _index), 1))), date) AS total,
            ifNull(toString(breakdown_value), '$$_posthog_breakdown_null_$$') AS breakdown_value,
            rowNumberInAllBlocks() AS row_number
     FROM
       (SELECT sum(total) AS count,
               day_start AS day_start,
               breakdown_value AS breakdown_value
        FROM
          (SELECT count(DISTINCT e__pdi.person_id) AS total,
                  toStartOfDay(toTimeZone(e.timestamp, 'UTC')) AS day_start,
                  ifNull(nullIf(toString(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$some_property'), ''), 'null'), '^"|"$', '')), ''), '$$_posthog_breakdown_null_$$') AS breakdown_value
           FROM events AS e SAMPLE 1.0
           INNER JOIN
             (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                     person_distinct_id2.distinct_id AS distinct_id
              FROM person_distinct_id2
              WHERE equals(person_distinct_id2.team_id, 2)
              GROUP BY person_distinct_id2.distinct_id
              HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
           WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 00:00:00', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), equals(e.event, 'sign up'), true)
           GROUP BY day_start,
                    breakdown_value)
        GROUP BY day_start,
                 breakdown_value
        ORDER BY day_start ASC, breakdown_value ASC)
     GROUP BY breakdown_value
     ORDER BY arraySum(total) DESC, breakdown_value ASC)
  WHERE isNotNull(breakdown_value)
  GROUP BY breakdown_value
  ORDER BY if(ifNull(equals(breakdown_value, '$$_posthog_breakdown_other_$$'), 0), 2, if(ifNull(equals(breakdown_value, '$$_posthog_breakdown_null_$$'), 0), 1, 0)) ASC, arraySum(total) DESC, breakdown_value ASC
  LIMIT 50000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1,
                       format_csv_allow_double_quotes=0,
                       max_ast_elements=1000000,
                       max_expanded_ast_elements=1000000,
                       max_query_size=524288,
                       max_bytes_before_external_group_by=0
  '''
# ---
# name: TestTrends.test_dau_with_breakdown_filtering_with_sampling.1
  '''
  SELECT groupArray(1)(date)[1] AS date,
                      arrayFold((acc, x) -> arrayMap(i -> plus(acc[i], x[i]), range(1, plus(length(date), 1))), groupArray(total), arrayWithConstant(length(date), reinterpretAsFloat64(0))) AS total,
                      if(ifNull(greaterOrEquals(row_number, 25), 0), '$$_posthog_breakdown_other_$$', toString(breakdown_value)) AS breakdown_value
  FROM
    (SELECT arrayMap(number -> plus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 00:00:00', 6, 'UTC'))), toIntervalDay(number)), range(0, plus(coalesce(dateDiff('day', toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 00:00:00', 6, 'UTC'))), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))))), 1))) AS date,
            arrayMap(_match_date -> arraySum(arraySlice(groupArray(count), indexOf(groupArray(day_start) AS _days_for_count, _match_date) AS _index, plus(minus(arrayLastIndex(x -> ifNull(equals(x, _match_date), isNull(x)
                                                                                                                                                                                           and isNull(_match_date)), _days_for_count), _index), 1))), date) AS total,
            ifNull(toString(breakdown_value), '$$_posthog_breakdown_null_$$') AS breakdown_value,
            rowNumberInAllBlocks() AS row_number
     FROM
       (SELECT sum(total) AS count,
               day_start AS day_start,
               breakdown_value AS breakdown_value
        FROM
          (SELECT count(DISTINCT e__pdi.person_id) AS total,
                  toStartOfDay(toTimeZone(e.timestamp, 'UTC')) AS day_start,
                  ifNull(nullIf(toString(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$some_property'), ''), 'null'), '^"|"$', '')), ''), '$$_posthog_breakdown_null_$$') AS breakdown_value
           FROM events AS e SAMPLE 1.0
           INNER JOIN
             (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                     person_distinct_id2.distinct_id AS distinct_id
              FROM person_distinct_id2
              WHERE equals(person_distinct_id2.team_id, 2)
              GROUP BY person_distinct_id2.distinct_id
              HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
           WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 00:00:00', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), equals(e.event, 'sign up'), true)
           GROUP BY day_start,
                    breakdown_value)
        GROUP BY day_start,
                 breakdown_value
        ORDER BY day_start ASC, breakdown_value ASC)
     GROUP BY breakdown_value
     ORDER BY arraySum(total) DESC, breakdown_value ASC)
  WHERE isNotNull(breakdown_value)
  GROUP BY breakdown_value
  ORDER BY if(ifNull(equals(breakdown_value, '$$_posthog_breakdown_other_$$'), 0), 2, if(ifNull(equals(breakdown_value, '$$_posthog_breakdown_null_$$'), 0), 1, 0)) ASC, arraySum(total) DESC, breakdown_value ASC
  LIMIT 50000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1,
                       format_csv_allow_double_quotes=0,
                       max_ast_elements=1000000,
                       max_expanded_ast_elements=1000000,
                       max_query_size=524288,
                       max_bytes_before_external_group_by=0
  '''
# ---
# name: TestTrends.test_filter_events_by_precalculated_cohort
  '''
  
  SELECT count(DISTINCT person_id)
  FROM cohortpeople
  WHERE team_id = 2
    AND cohort_id = 2
    AND version = NULL
  '''
# ---
# name: TestTrends.test_filter_events_by_precalculated_cohort.1
  '''
  /* cohort_calculation: */
  SELECT count(DISTINCT person_id)
  FROM cohortpeople
  WHERE team_id = 2
    AND cohort_id = 2
    AND version = 0
  '''
# ---
# name: TestTrends.test_filter_events_by_precalculated_cohort.2
  '''
  
  SELECT count(DISTINCT person_id)
  FROM cohortpeople
  WHERE team_id = 2
    AND cohort_id = 2
    AND version = 0
  '''
# ---
# name: TestTrends.test_filter_events_by_precalculated_cohort.3
  '''
  /* cohort_calculation: */
  SELECT count(DISTINCT person_id)
  FROM cohortpeople
  WHERE team_id = 2
    AND cohort_id = 2
    AND version = 0
  '''
# ---
# name: TestTrends.test_filter_events_by_precalculated_cohort.4
  '''
  SELECT arrayMap(number -> plus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-26 00:00:00', 6, 'UTC'))), toIntervalDay(number)), range(0, plus(coalesce(dateDiff('day', toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-26 00:00:00', 6, 'UTC'))), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-02 23:59:59', 6, 'UTC'))))), 1))) AS date,
         arrayMap(_match_date -> arraySum(arraySlice(groupArray(count), indexOf(groupArray(day_start) AS _days_for_count, _match_date) AS _index, plus(minus(arrayLastIndex(x -> ifNull(equals(x, _match_date), isNull(x)
                                                                                                                                                                                        and isNull(_match_date)), _days_for_count), _index), 1))), date) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start AS day_start
     FROM
       (SELECT count() AS total,
               toStartOfDay(toTimeZone(e.timestamp, 'UTC')) AS day_start
        FROM events AS e SAMPLE 1
        INNER JOIN
          (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS e__pdi___person_id,
                  argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                  person_distinct_id2.distinct_id AS distinct_id
           FROM person_distinct_id2
           WHERE equals(person_distinct_id2.team_id, 2)
           GROUP BY person_distinct_id2.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
        LEFT JOIN
          (SELECT person.id AS id,
                  replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, 'name'), ''), 'null'), '^"|"$', '') AS properties___name
           FROM person
           WHERE and(equals(person.team_id, 2), ifNull(in(tuple(person.id, person.version),
                                                            (SELECT person.id AS id, max(person.version) AS version
                                                             FROM person
                                                             WHERE equals(person.team_id, 2)
                                                             GROUP BY person.id
                                                             HAVING and(ifNull(equals(argMax(person.is_deleted, person.version), 0), 0), ifNull(less(argMax(person.created_at, person.version), plus(now64(6, 'UTC'), toIntervalDay(1))), 0)))), 0)) SETTINGS optimize_aggregation_in_order=1) AS e__pdi__person ON equals(e__pdi.e__pdi___person_id, e__pdi__person.id)
        WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-26 00:00:00', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-02 23:59:59', 6, 'UTC'))), equals(e.event, 'event_name'), ifNull(equals(e__pdi__person.properties___name, 'Jane'), 0))
        GROUP BY day_start)
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY arraySum(total) DESC
  LIMIT 50000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1,
                       format_csv_allow_double_quotes=0,
                       max_ast_elements=1000000,
                       max_expanded_ast_elements=1000000,
                       max_query_size=524288,
                       max_bytes_before_external_group_by=0
  '''
# ---
# name: TestTrends.test_filter_events_by_precalculated_cohort_poe_v2
  '''
  
  SELECT count(DISTINCT person_id)
  FROM cohortpeople
  WHERE team_id = 2
    AND cohort_id = 2
    AND version = NULL
  '''
# ---
# name: TestTrends.test_filter_events_by_precalculated_cohort_poe_v2.1
  '''
  /* cohort_calculation: */
  SELECT count(DISTINCT person_id)
  FROM cohortpeople
  WHERE team_id = 2
    AND cohort_id = 2
    AND version = 0
  '''
# ---
# name: TestTrends.test_filter_events_by_precalculated_cohort_poe_v2.2
  '''
  
  SELECT count(DISTINCT person_id)
  FROM cohortpeople
  WHERE team_id = 2
    AND cohort_id = 2
    AND version = 0
  '''
# ---
# name: TestTrends.test_filter_events_by_precalculated_cohort_poe_v2.3
  '''
  /* cohort_calculation: */
  SELECT count(DISTINCT person_id)
  FROM cohortpeople
  WHERE team_id = 2
    AND cohort_id = 2
    AND version = 0
  '''
# ---
# name: TestTrends.test_filter_events_by_precalculated_cohort_poe_v2.4
  '''
  SELECT arrayMap(number -> plus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-26 00:00:00', 6, 'UTC'))), toIntervalDay(number)), range(0, plus(coalesce(dateDiff('day', toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-26 00:00:00', 6, 'UTC'))), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-02 23:59:59', 6, 'UTC'))))), 1))) AS date,
         arrayMap(_match_date -> arraySum(arraySlice(groupArray(count), indexOf(groupArray(day_start) AS _days_for_count, _match_date) AS _index, plus(minus(arrayLastIndex(x -> ifNull(equals(x, _match_date), isNull(x)
                                                                                                                                                                                        and isNull(_match_date)), _days_for_count), _index), 1))), date) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start AS day_start
     FROM
       (SELECT count() AS total,
               toStartOfDay(toTimeZone(e.timestamp, 'UTC')) AS day_start
        FROM events AS e SAMPLE 1
        WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-26 00:00:00', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-02 23:59:59', 6, 'UTC'))), equals(e.event, 'event_name'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.person_properties, 'name'), ''), 'null'), '^"|"$', ''), 'Jane'), 0))
        GROUP BY day_start)
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY arraySum(total) DESC
  LIMIT 50000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1,
                       format_csv_allow_double_quotes=0,
                       max_ast_elements=1000000,
                       max_expanded_ast_elements=1000000,
                       max_query_size=524288,
                       max_bytes_before_external_group_by=0
  '''
# ---
# name: TestTrends.test_filtering_by_multiple_groups_person_on_events
  '''
  SELECT arrayMap(number -> plus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC'))), toIntervalDay(number)), range(0, plus(coalesce(dateDiff('day', toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC'))), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-12 23:59:59', 6, 'UTC'))))), 1))) AS date,
         arrayMap(_match_date -> arraySum(arraySlice(groupArray(count), indexOf(groupArray(day_start) AS _days_for_count, _match_date) AS _index, plus(minus(arrayLastIndex(x -> ifNull(equals(x, _match_date), isNull(x)
                                                                                                                                                                                        and isNull(_match_date)), _days_for_count), _index), 1))), date) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start AS day_start
     FROM
       (SELECT count() AS total,
               toStartOfDay(toTimeZone(e.timestamp, 'UTC')) AS day_start
        FROM events AS e SAMPLE 1
        LEFT JOIN
          (SELECT argMax(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(groups.group_properties, 'name'), ''), 'null'), '^"|"$', ''), groups._timestamp) AS properties___name,
                  groups.group_type_index AS index,
                  groups.group_key AS key
           FROM groups
           WHERE and(equals(groups.team_id, 2), ifNull(equals(index, 2), 0))
           GROUP BY groups.group_type_index,
                    groups.group_key) AS e__group_2 ON equals(e.`$group_2`, e__group_2.key)
        LEFT JOIN
          (SELECT argMax(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(groups.group_properties, 'industry'), ''), 'null'), '^"|"$', ''), groups._timestamp) AS properties___industry,
                  groups.group_type_index AS index,
                  groups.group_key AS key
           FROM groups
           WHERE and(equals(groups.team_id, 2), ifNull(equals(index, 0), 0))
           GROUP BY groups.group_type_index,
                    groups.group_key) AS e__group_0 ON equals(e.`$group_0`, e__group_0.key)
        WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-12 23:59:59', 6, 'UTC'))), equals(e.event, 'sign up'), and(ifNull(equals(e__group_0.properties___industry, 'finance'), 0), ifNull(equals(e__group_2.properties___name, 'six'), 0)))
        GROUP BY day_start)
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY arraySum(total) DESC
  LIMIT 50000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1,
                       format_csv_allow_double_quotes=0,
                       max_ast_elements=1000000,
                       max_expanded_ast_elements=1000000,
                       max_query_size=524288,
                       max_bytes_before_external_group_by=0
  '''
# ---
# name: TestTrends.test_filtering_by_multiple_groups_person_on_events.1
  '''
  SELECT persons.id AS id,
         toTimeZone(persons.created_at, 'UTC') AS created_at,
         source.event_count AS event_count,
         source.matching_events AS matching_events
  FROM
    (SELECT actor_id AS actor_id,
            count() AS event_count,
            groupUniqArray(100)(tuple(timestamp, uuid, `$session_id`, `$window_id`)) AS matching_events
     FROM
       (SELECT e.person_id AS actor_id,
               toTimeZone(e.timestamp, 'UTC') AS timestamp,
               e.uuid AS uuid,
               e.`$session_id` AS `$session_id`,
               e.`$window_id` AS `$window_id`
        FROM events AS e
        LEFT JOIN
          (SELECT argMax(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(groups.group_properties, 'name'), ''), 'null'), '^"|"$', ''), groups._timestamp) AS properties___name,
                  groups.group_type_index AS index,
                  groups.group_key AS key
           FROM groups
           WHERE and(equals(groups.team_id, 2), ifNull(equals(index, 2), 0))
           GROUP BY groups.group_type_index,
                    groups.group_key) AS e__group_2 ON equals(e.`$group_2`, e__group_2.key)
        LEFT JOIN
          (SELECT argMax(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(groups.group_properties, 'industry'), ''), 'null'), '^"|"$', ''), groups._timestamp) AS properties___industry,
                  groups.group_type_index AS index,
                  groups.group_key AS key
           FROM groups
           WHERE and(equals(groups.team_id, 2), ifNull(equals(index, 0), 0))
           GROUP BY groups.group_type_index,
                    groups.group_key) AS e__group_0 ON equals(e.`$group_0`, e__group_0.key)
        WHERE and(equals(e.team_id, 2), equals(e.event, 'sign up'), and(ifNull(equals(e__group_0.properties___industry, 'finance'), 0), ifNull(equals(e__group_2.properties___name, 'six'), 0)), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-02 00:00:00.000000', 6, 'UTC')), less(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-03 00:00:00.000000', 6, 'UTC'))))
     GROUP BY actor_id) AS source
  INNER JOIN
    (SELECT argMax(person.created_at, person.version) AS created_at,
            person.id AS id
     FROM person
     WHERE equals(person.team_id, 2)
     GROUP BY person.id
     HAVING and(ifNull(equals(argMax(person.is_deleted, person.version), 0), 0), ifNull(less(argMax(person.created_at, person.version), plus(now64(6, 'UTC'), toIntervalDay(1))), 0)) SETTINGS optimize_aggregation_in_order=1) AS persons ON equals(persons.id, source.actor_id)
  ORDER BY source.event_count DESC
  LIMIT 101
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=1000000,
                    max_expanded_ast_elements=1000000,
                    max_query_size=524288,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestTrends.test_filtering_by_multiple_groups_person_on_events.2
  '''
  SELECT DISTINCT session_replay_events.session_id AS session_id
  FROM session_replay_events
  WHERE and(equals(session_replay_events.team_id, 2), ifNull(greaterOrEquals(toTimeZone(session_replay_events.min_first_timestamp, 'UTC'), minus(toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC'), toIntervalDay(21))), 0), in(session_replay_events.session_id, ['']))
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=0,
                     max_ast_elements=1000000,
                     max_expanded_ast_elements=1000000,
                     max_query_size=524288,
                     max_bytes_before_external_group_by=0
  '''
# ---
# name: TestTrends.test_filtering_with_group_props_person_on_events
  '''
  SELECT arrayMap(number -> plus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC'))), toIntervalDay(number)), range(0, plus(coalesce(dateDiff('day', toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC'))), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-12 23:59:59', 6, 'UTC'))))), 1))) AS date,
         arrayMap(_match_date -> arraySum(arraySlice(groupArray(count), indexOf(groupArray(day_start) AS _days_for_count, _match_date) AS _index, plus(minus(arrayLastIndex(x -> ifNull(equals(x, _match_date), isNull(x)
                                                                                                                                                                                        and isNull(_match_date)), _days_for_count), _index), 1))), date) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start AS day_start
     FROM
       (SELECT count() AS total,
               toStartOfDay(toTimeZone(e.timestamp, 'UTC')) AS day_start
        FROM events AS e SAMPLE 1
        LEFT JOIN
          (SELECT argMax(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(groups.group_properties, 'industry'), ''), 'null'), '^"|"$', ''), groups._timestamp) AS properties___industry,
                  groups.group_type_index AS index,
                  groups.group_key AS key
           FROM groups
           WHERE and(equals(groups.team_id, 2), ifNull(equals(index, 0), 0))
           GROUP BY groups.group_type_index,
                    groups.group_key) AS e__group_0 ON equals(e.`$group_0`, e__group_0.key)
        WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-12 23:59:59', 6, 'UTC'))), equals(e.event, '$pageview'), and(ifNull(equals(e__group_0.properties___industry, 'finance'), 0), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.person_properties, 'key'), ''), 'null'), '^"|"$', ''), 'value'), 0)))
        GROUP BY day_start)
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY arraySum(total) DESC
  LIMIT 50000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1,
                       format_csv_allow_double_quotes=0,
                       max_ast_elements=1000000,
                       max_expanded_ast_elements=1000000,
                       max_query_size=524288,
                       max_bytes_before_external_group_by=0
  '''
# ---
# name: TestTrends.test_mau_with_breakdown_filtering_and_prop_filter
  '''
  SELECT groupArray(1)(date)[1] AS date,
                      arrayFold((acc, x) -> arrayMap(i -> plus(acc[i], x[i]), range(1, plus(length(date), 1))), groupArray(total), arrayWithConstant(length(date), reinterpretAsFloat64(0))) AS total,
                      if(ifNull(greaterOrEquals(row_number, 25), 0), '$$_posthog_breakdown_other_$$', toString(breakdown_value)) AS breakdown_value
  FROM
    (SELECT arrayMap(number -> plus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 00:00:00', 6, 'UTC'))), toIntervalDay(number)), range(0, plus(coalesce(dateDiff('day', toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 00:00:00', 6, 'UTC'))), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))))), 1))) AS date,
            arrayMap(_match_date -> arraySum(arraySlice(groupArray(count), indexOf(groupArray(day_start) AS _days_for_count, _match_date) AS _index, plus(minus(arrayLastIndex(x -> ifNull(equals(x, _match_date), isNull(x)
                                                                                                                                                                                           and isNull(_match_date)), _days_for_count), _index), 1))), date) AS total,
            ifNull(toString(breakdown_value), '$$_posthog_breakdown_null_$$') AS breakdown_value,
            rowNumberInAllBlocks() AS row_number
     FROM
       (SELECT sum(total) AS count,
               day_start AS day_start,
               breakdown_value AS breakdown_value
        FROM
          (SELECT counts AS total,
                  toStartOfDay(timestamp) AS day_start,
                  breakdown_value AS breakdown_value
           FROM
             (SELECT d.timestamp AS timestamp,
                     count(DISTINCT e.actor_id) AS counts,
                     e.breakdown_value AS breakdown_value
              FROM
                (SELECT minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), toIntervalDay(numbers.number)) AS timestamp
                 FROM numbers(dateDiff('day', minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 00:00:00', 6, 'UTC'))), toIntervalDay(30)), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC')))) AS numbers) AS d
              CROSS JOIN
                (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                        e__pdi.person_id AS actor_id,
                        ifNull(nullIf(toString(e__pdi__person.`properties___$some_prop`), ''), '$$_posthog_breakdown_null_$$') AS breakdown_value
                 FROM events AS e SAMPLE 1
                 INNER JOIN
                   (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                           argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS e__pdi___person_id,
                           person_distinct_id2.distinct_id AS distinct_id
                    FROM person_distinct_id2
                    WHERE equals(person_distinct_id2.team_id, 2)
                    GROUP BY person_distinct_id2.distinct_id
                    HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
                 LEFT JOIN
                   (SELECT person.id AS id,
                           replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, '$some_prop'), ''), 'null'), '^"|"$', '') AS `properties___$some_prop`,
                           replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, 'filter_prop'), ''), 'null'), '^"|"$', '') AS properties___filter_prop
                    FROM person
                    WHERE and(equals(person.team_id, 2), ifNull(in(tuple(person.id, person.version),
                                                                     (SELECT person.id AS id, max(person.version) AS version
                                                                      FROM person
                                                                      WHERE equals(person.team_id, 2)
                                                                      GROUP BY person.id
                                                                      HAVING and(ifNull(equals(argMax(person.is_deleted, person.version), 0), 0), ifNull(less(argMax(person.created_at, person.version), plus(now64(6, 'UTC'), toIntervalDay(1))), 0)))), 0)) SETTINGS optimize_aggregation_in_order=1) AS e__pdi__person ON equals(e__pdi.e__pdi___person_id, e__pdi__person.id)
                 WHERE and(equals(e.team_id, 2), and(equals(e.event, 'sign up'), ifNull(equals(e__pdi__person.properties___filter_prop, 'filter_val'), 0), true), ifNull(greaterOrEquals(timestamp, minus(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 00:00:00', 6, 'UTC')), toIntervalDay(30))), 0), ifNull(lessOrEquals(timestamp, assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), 0))
                 GROUP BY timestamp, actor_id,
                                     breakdown_value) AS e
              WHERE and(ifNull(lessOrEquals(e.timestamp, plus(d.timestamp, toIntervalDay(1))), 0), ifNull(greater(e.timestamp, minus(d.timestamp, toIntervalDay(29))), 0))
              GROUP BY d.timestamp,
                       e.breakdown_value
              ORDER BY d.timestamp ASC)
           WHERE and(ifNull(greaterOrEquals(timestamp, toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 00:00:00', 6, 'UTC')))), 0), ifNull(lessOrEquals(timestamp, assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), 0)))
        GROUP BY day_start,
                 breakdown_value
        ORDER BY day_start ASC, breakdown_value ASC)
     GROUP BY breakdown_value
     ORDER BY arraySum(total) DESC, breakdown_value ASC)
  WHERE isNotNull(breakdown_value)
  GROUP BY breakdown_value
  ORDER BY if(ifNull(equals(breakdown_value, '$$_posthog_breakdown_other_$$'), 0), 2, if(ifNull(equals(breakdown_value, '$$_posthog_breakdown_null_$$'), 0), 1, 0)) ASC, arraySum(total) DESC, breakdown_value ASC
  LIMIT 50000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1,
                       format_csv_allow_double_quotes=0,
                       max_ast_elements=1000000,
                       max_expanded_ast_elements=1000000,
                       max_query_size=524288,
                       max_bytes_before_external_group_by=0
  '''
# ---
# name: TestTrends.test_mau_with_breakdown_filtering_and_prop_filter_poe_v2
  '''
  SELECT groupArray(1)(date)[1] AS date,
                      arrayFold((acc, x) -> arrayMap(i -> plus(acc[i], x[i]), range(1, plus(length(date), 1))), groupArray(total), arrayWithConstant(length(date), reinterpretAsFloat64(0))) AS total,
                      if(ifNull(greaterOrEquals(row_number, 25), 0), '$$_posthog_breakdown_other_$$', toString(breakdown_value)) AS breakdown_value
  FROM
    (SELECT arrayMap(number -> plus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 00:00:00', 6, 'UTC'))), toIntervalDay(number)), range(0, plus(coalesce(dateDiff('day', toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 00:00:00', 6, 'UTC'))), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))))), 1))) AS date,
            arrayMap(_match_date -> arraySum(arraySlice(groupArray(count), indexOf(groupArray(day_start) AS _days_for_count, _match_date) AS _index, plus(minus(arrayLastIndex(x -> ifNull(equals(x, _match_date), isNull(x)
                                                                                                                                                                                           and isNull(_match_date)), _days_for_count), _index), 1))), date) AS total,
            ifNull(toString(breakdown_value), '$$_posthog_breakdown_null_$$') AS breakdown_value,
            rowNumberInAllBlocks() AS row_number
     FROM
       (SELECT sum(total) AS count,
               day_start AS day_start,
               breakdown_value AS breakdown_value
        FROM
          (SELECT counts AS total,
                  toStartOfDay(timestamp) AS day_start,
                  breakdown_value AS breakdown_value
           FROM
             (SELECT d.timestamp AS timestamp,
                     count(DISTINCT e.actor_id) AS counts,
                     e.breakdown_value AS breakdown_value
              FROM
                (SELECT minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), toIntervalDay(numbers.number)) AS timestamp
                 FROM numbers(dateDiff('day', minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 00:00:00', 6, 'UTC'))), toIntervalDay(30)), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC')))) AS numbers) AS d
              CROSS JOIN
                (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                        if(not(empty(e__override.distinct_id)), e__override.person_id, e.person_id) AS actor_id,
                        ifNull(nullIf(toString(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.person_properties, '$some_prop'), ''), 'null'), '^"|"$', '')), ''), '$$_posthog_breakdown_null_$$') AS breakdown_value
                 FROM events AS e SAMPLE 1
                 LEFT OUTER JOIN
                   (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                           person_distinct_id_overrides.distinct_id AS distinct_id
                    FROM person_distinct_id_overrides
                    WHERE equals(person_distinct_id_overrides.team_id, 2)
                    GROUP BY person_distinct_id_overrides.distinct_id
                    HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0)) AS e__override ON equals(e.distinct_id, e__override.distinct_id)
                 WHERE and(equals(e.team_id, 2), and(equals(e.event, 'sign up'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.person_properties, 'filter_prop'), ''), 'null'), '^"|"$', ''), 'filter_val'), 0), true), ifNull(greaterOrEquals(timestamp, minus(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 00:00:00', 6, 'UTC')), toIntervalDay(30))), 0), ifNull(lessOrEquals(timestamp, assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), 0))
                 GROUP BY timestamp, actor_id,
                                     breakdown_value) AS e
              WHERE and(ifNull(lessOrEquals(e.timestamp, plus(d.timestamp, toIntervalDay(1))), 0), ifNull(greater(e.timestamp, minus(d.timestamp, toIntervalDay(29))), 0))
              GROUP BY d.timestamp,
                       e.breakdown_value
              ORDER BY d.timestamp ASC)
           WHERE and(ifNull(greaterOrEquals(timestamp, toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 00:00:00', 6, 'UTC')))), 0), ifNull(lessOrEquals(timestamp, assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), 0)))
        GROUP BY day_start,
                 breakdown_value
        ORDER BY day_start ASC, breakdown_value ASC)
     GROUP BY breakdown_value
     ORDER BY arraySum(total) DESC, breakdown_value ASC)
  WHERE isNotNull(breakdown_value)
  GROUP BY breakdown_value
  ORDER BY if(ifNull(equals(breakdown_value, '$$_posthog_breakdown_other_$$'), 0), 2, if(ifNull(equals(breakdown_value, '$$_posthog_breakdown_null_$$'), 0), 1, 0)) ASC, arraySum(total) DESC, breakdown_value ASC
  LIMIT 50000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1,
                       format_csv_allow_double_quotes=0,
                       max_ast_elements=1000000,
                       max_expanded_ast_elements=1000000,
                       max_query_size=524288,
                       max_bytes_before_external_group_by=0
  '''
# ---
# name: TestTrends.test_non_deterministic_timezones
  '''
  SELECT arrayMap(number -> plus(toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2022-10-31 00:00:00', 6, 'US/Pacific')), 0), toIntervalWeek(number)), range(0, plus(coalesce(dateDiff('week', toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2022-10-31 00:00:00', 6, 'US/Pacific')), 0), toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2022-11-30 23:59:59', 6, 'US/Pacific')), 0))), 1))) AS date,
         arrayMap(_match_date -> arraySum(arraySlice(groupArray(count), indexOf(groupArray(day_start) AS _days_for_count, _match_date) AS _index, plus(minus(arrayLastIndex(x -> ifNull(equals(x, _match_date), isNull(x)
                                                                                                                                                                                        and isNull(_match_date)), _days_for_count), _index), 1))), date) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start AS day_start
     FROM
       (SELECT count() AS total,
               toStartOfWeek(toTimeZone(e.timestamp, 'US/Pacific'), 0) AS day_start
        FROM events AS e SAMPLE 1
        WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'US/Pacific'), toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2022-10-31 00:00:00', 6, 'US/Pacific')), 0)), lessOrEquals(toTimeZone(e.timestamp, 'US/Pacific'), assumeNotNull(parseDateTime64BestEffortOrNull('2022-11-30 23:59:59', 6, 'US/Pacific'))), equals(e.event, 'sign up'))
        GROUP BY day_start)
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY arraySum(total) DESC
  LIMIT 50000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1,
                       format_csv_allow_double_quotes=0,
                       max_ast_elements=1000000,
                       max_expanded_ast_elements=1000000,
                       max_query_size=524288,
                       max_bytes_before_external_group_by=0
  '''
# ---
# name: TestTrends.test_person_filtering_in_cohort_in_action
  '''
  
  SELECT count(DISTINCT person_id)
  FROM cohortpeople
  WHERE team_id = 2
    AND cohort_id = 2
    AND version = NULL
  '''
# ---
# name: TestTrends.test_person_filtering_in_cohort_in_action.1
  '''
  /* cohort_calculation: */
  SELECT count(DISTINCT person_id)
  FROM cohortpeople
  WHERE team_id = 2
    AND cohort_id = 2
    AND version = 0
  '''
# ---
# name: TestTrends.test_person_filtering_in_cohort_in_action.2
  '''
  SELECT groupArray(1)(date)[1] AS date,
                      arrayFold((acc, x) -> arrayMap(i -> plus(acc[i], x[i]), range(1, plus(length(date), 1))), groupArray(total), arrayWithConstant(length(date), reinterpretAsFloat64(0))) AS total,
                      if(ifNull(greaterOrEquals(row_number, 25), 0), '$$_posthog_breakdown_other_$$', toString(breakdown_value)) AS breakdown_value
  FROM
    (SELECT arrayMap(number -> plus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 00:00:00', 6, 'UTC'))), toIntervalDay(number)), range(0, plus(coalesce(dateDiff('day', toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 00:00:00', 6, 'UTC'))), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))))), 1))) AS date,
            arrayMap(_match_date -> arraySum(arraySlice(groupArray(count), indexOf(groupArray(day_start) AS _days_for_count, _match_date) AS _index, plus(minus(arrayLastIndex(x -> ifNull(equals(x, _match_date), isNull(x)
                                                                                                                                                                                           and isNull(_match_date)), _days_for_count), _index), 1))), date) AS total,
            ifNull(toString(breakdown_value), '$$_posthog_breakdown_null_$$') AS breakdown_value,
            rowNumberInAllBlocks() AS row_number
     FROM
       (SELECT sum(total) AS count,
               day_start AS day_start,
               breakdown_value AS breakdown_value
        FROM
          (SELECT count() AS total,
                  toStartOfDay(toTimeZone(e.timestamp, 'UTC')) AS day_start,
                  ifNull(nullIf(toString(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$some_property'), ''), 'null'), '^"|"$', '')), ''), '$$_posthog_breakdown_null_$$') AS breakdown_value
           FROM events AS e SAMPLE 1
           INNER JOIN
             (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                     person_distinct_id2.distinct_id AS distinct_id
              FROM person_distinct_id2
              WHERE equals(person_distinct_id2.team_id, 2)
              GROUP BY person_distinct_id2.distinct_id
              HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
           WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 00:00:00', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), and(equals(e.event, 'sign up'), ifNull(in(e__pdi.person_id,
                                                                                                                                                                                                                                                                                                                                                                      (SELECT cohortpeople.person_id AS person_id
                                                                                                                                                                                                                                                                                                                                                                       FROM cohortpeople
                                                                                                                                                                                                                                                                                                                                                                       WHERE and(equals(cohortpeople.team_id, 2), equals(cohortpeople.cohort_id, 2), equals(cohortpeople.version, 0)))), 0)), true)
           GROUP BY day_start,
                    breakdown_value)
        GROUP BY day_start,
                 breakdown_value
        ORDER BY day_start ASC, breakdown_value ASC)
     GROUP BY breakdown_value
     ORDER BY arraySum(total) DESC, breakdown_value ASC)
  WHERE isNotNull(breakdown_value)
  GROUP BY breakdown_value
  ORDER BY if(ifNull(equals(breakdown_value, '$$_posthog_breakdown_other_$$'), 0), 2, if(ifNull(equals(breakdown_value, '$$_posthog_breakdown_null_$$'), 0), 1, 0)) ASC, arraySum(total) DESC, breakdown_value ASC
  LIMIT 50000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1,
                       format_csv_allow_double_quotes=0,
                       max_ast_elements=1000000,
                       max_expanded_ast_elements=1000000,
                       max_query_size=524288,
                       max_bytes_before_external_group_by=0
  '''
# ---
# name: TestTrends.test_person_filtering_in_cohort_in_action_poe_v2
  '''
  
  SELECT count(DISTINCT person_id)
  FROM cohortpeople
  WHERE team_id = 2
    AND cohort_id = 2
    AND version = NULL
  '''
# ---
# name: TestTrends.test_person_filtering_in_cohort_in_action_poe_v2.1
  '''
  /* cohort_calculation: */
  SELECT count(DISTINCT person_id)
  FROM cohortpeople
  WHERE team_id = 2
    AND cohort_id = 2
    AND version = 0
  '''
# ---
# name: TestTrends.test_person_filtering_in_cohort_in_action_poe_v2.2
  '''
  SELECT groupArray(1)(date)[1] AS date,
                      arrayFold((acc, x) -> arrayMap(i -> plus(acc[i], x[i]), range(1, plus(length(date), 1))), groupArray(total), arrayWithConstant(length(date), reinterpretAsFloat64(0))) AS total,
                      if(ifNull(greaterOrEquals(row_number, 25), 0), '$$_posthog_breakdown_other_$$', toString(breakdown_value)) AS breakdown_value
  FROM
    (SELECT arrayMap(number -> plus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 00:00:00', 6, 'UTC'))), toIntervalDay(number)), range(0, plus(coalesce(dateDiff('day', toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 00:00:00', 6, 'UTC'))), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))))), 1))) AS date,
            arrayMap(_match_date -> arraySum(arraySlice(groupArray(count), indexOf(groupArray(day_start) AS _days_for_count, _match_date) AS _index, plus(minus(arrayLastIndex(x -> ifNull(equals(x, _match_date), isNull(x)
                                                                                                                                                                                           and isNull(_match_date)), _days_for_count), _index), 1))), date) AS total,
            ifNull(toString(breakdown_value), '$$_posthog_breakdown_null_$$') AS breakdown_value,
            rowNumberInAllBlocks() AS row_number
     FROM
       (SELECT sum(total) AS count,
               day_start AS day_start,
               breakdown_value AS breakdown_value
        FROM
          (SELECT count() AS total,
                  toStartOfDay(toTimeZone(e.timestamp, 'UTC')) AS day_start,
                  ifNull(nullIf(toString(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$some_property'), ''), 'null'), '^"|"$', '')), ''), '$$_posthog_breakdown_null_$$') AS breakdown_value
           FROM events AS e SAMPLE 1
           LEFT OUTER JOIN
             (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                     person_distinct_id_overrides.distinct_id AS distinct_id
              FROM person_distinct_id_overrides
              WHERE equals(person_distinct_id_overrides.team_id, 2)
              GROUP BY person_distinct_id_overrides.distinct_id
              HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0)) AS e__override ON equals(e.distinct_id, e__override.distinct_id)
           WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 00:00:00', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), and(equals(e.event, 'sign up'), ifNull(in(if(not(empty(e__override.distinct_id)), e__override.person_id, e.person_id),
                                                                                                                                                                                                                                                                                                                                                                      (SELECT cohortpeople.person_id AS person_id
                                                                                                                                                                                                                                                                                                                                                                       FROM cohortpeople
                                                                                                                                                                                                                                                                                                                                                                       WHERE and(equals(cohortpeople.team_id, 2), equals(cohortpeople.cohort_id, 2), equals(cohortpeople.version, 0)))), 0)), true)
           GROUP BY day_start,
                    breakdown_value)
        GROUP BY day_start,
                 breakdown_value
        ORDER BY day_start ASC, breakdown_value ASC)
     GROUP BY breakdown_value
     ORDER BY arraySum(total) DESC, breakdown_value ASC)
  WHERE isNotNull(breakdown_value)
  GROUP BY breakdown_value
  ORDER BY if(ifNull(equals(breakdown_value, '$$_posthog_breakdown_other_$$'), 0), 2, if(ifNull(equals(breakdown_value, '$$_posthog_breakdown_null_$$'), 0), 1, 0)) ASC, arraySum(total) DESC, breakdown_value ASC
  LIMIT 50000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1,
                       format_csv_allow_double_quotes=0,
                       max_ast_elements=1000000,
                       max_expanded_ast_elements=1000000,
                       max_query_size=524288,
                       max_bytes_before_external_group_by=0
  '''
# ---
# name: TestTrends.test_person_property_filtering
  '''
  SELECT arrayMap(number -> plus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 00:00:00', 6, 'UTC'))), toIntervalDay(number)), range(0, plus(coalesce(dateDiff('day', toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 00:00:00', 6, 'UTC'))), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))))), 1))) AS date,
         arrayMap(_match_date -> arraySum(arraySlice(groupArray(count), indexOf(groupArray(day_start) AS _days_for_count, _match_date) AS _index, plus(minus(arrayLastIndex(x -> ifNull(equals(x, _match_date), isNull(x)
                                                                                                                                                                                        and isNull(_match_date)), _days_for_count), _index), 1))), date) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start AS day_start
     FROM
       (SELECT count() AS total,
               toStartOfDay(toTimeZone(e.timestamp, 'UTC')) AS day_start
        FROM events AS e SAMPLE 1
        INNER JOIN
          (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS e__pdi___person_id,
                  argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                  person_distinct_id2.distinct_id AS distinct_id
           FROM person_distinct_id2
           WHERE equals(person_distinct_id2.team_id, 2)
           GROUP BY person_distinct_id2.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
        LEFT JOIN
          (SELECT person.id AS id,
                  replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, 'name'), ''), 'null'), '^"|"$', '') AS properties___name
           FROM person
           WHERE and(equals(person.team_id, 2), ifNull(in(tuple(person.id, person.version),
                                                            (SELECT person.id AS id, max(person.version) AS version
                                                             FROM person
                                                             WHERE equals(person.team_id, 2)
                                                             GROUP BY person.id
                                                             HAVING and(ifNull(equals(argMax(person.is_deleted, person.version), 0), 0), ifNull(less(argMax(person.created_at, person.version), plus(now64(6, 'UTC'), toIntervalDay(1))), 0)))), 0)) SETTINGS optimize_aggregation_in_order=1) AS e__pdi__person ON equals(e__pdi.e__pdi___person_id, e__pdi__person.id)
        WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 00:00:00', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), equals(e.event, 'watched movie'), ifNull(equals(e__pdi__person.properties___name, 'person1'), 0))
        GROUP BY day_start)
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY arraySum(total) DESC
  LIMIT 50000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1,
                       format_csv_allow_double_quotes=0,
                       max_ast_elements=1000000,
                       max_expanded_ast_elements=1000000,
                       max_query_size=524288,
                       max_bytes_before_external_group_by=0
  '''
# ---
# name: TestTrends.test_person_property_filtering_clashing_with_event_property
  '''
  SELECT arrayMap(number -> plus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 00:00:00', 6, 'UTC'))), toIntervalDay(number)), range(0, plus(coalesce(dateDiff('day', toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 00:00:00', 6, 'UTC'))), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))))), 1))) AS date,
         arrayMap(_match_date -> arraySum(arraySlice(groupArray(count), indexOf(groupArray(day_start) AS _days_for_count, _match_date) AS _index, plus(minus(arrayLastIndex(x -> ifNull(equals(x, _match_date), isNull(x)
                                                                                                                                                                                        and isNull(_match_date)), _days_for_count), _index), 1))), date) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start AS day_start
     FROM
       (SELECT count() AS total,
               toStartOfDay(toTimeZone(e.timestamp, 'UTC')) AS day_start
        FROM events AS e SAMPLE 1
        INNER JOIN
          (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS e__pdi___person_id,
                  argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                  person_distinct_id2.distinct_id AS distinct_id
           FROM person_distinct_id2
           WHERE equals(person_distinct_id2.team_id, 2)
           GROUP BY person_distinct_id2.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
        LEFT JOIN
          (SELECT person.id AS id,
                  replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, 'name'), ''), 'null'), '^"|"$', '') AS properties___name
           FROM person
           WHERE and(equals(person.team_id, 2), ifNull(in(tuple(person.id, person.version),
                                                            (SELECT person.id AS id, max(person.version) AS version
                                                             FROM person
                                                             WHERE equals(person.team_id, 2)
                                                             GROUP BY person.id
                                                             HAVING and(ifNull(equals(argMax(person.is_deleted, person.version), 0), 0), ifNull(less(argMax(person.created_at, person.version), plus(now64(6, 'UTC'), toIntervalDay(1))), 0)))), 0)) SETTINGS optimize_aggregation_in_order=1) AS e__pdi__person ON equals(e__pdi.e__pdi___person_id, e__pdi__person.id)
        WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 00:00:00', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), equals(e.event, 'watched movie'), ifNull(equals(e__pdi__person.properties___name, 'person1'), 0))
        GROUP BY day_start)
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY arraySum(total) DESC
  LIMIT 50000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1,
                       format_csv_allow_double_quotes=0,
                       max_ast_elements=1000000,
                       max_expanded_ast_elements=1000000,
                       max_query_size=524288,
                       max_bytes_before_external_group_by=0
  '''
# ---
# name: TestTrends.test_person_property_filtering_clashing_with_event_property.1
  '''
  SELECT arrayMap(number -> plus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 00:00:00', 6, 'UTC'))), toIntervalDay(number)), range(0, plus(coalesce(dateDiff('day', toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 00:00:00', 6, 'UTC'))), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))))), 1))) AS date,
         arrayMap(_match_date -> arraySum(arraySlice(groupArray(count), indexOf(groupArray(day_start) AS _days_for_count, _match_date) AS _index, plus(minus(arrayLastIndex(x -> ifNull(equals(x, _match_date), isNull(x)
                                                                                                                                                                                        and isNull(_match_date)), _days_for_count), _index), 1))), date) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start AS day_start
     FROM
       (SELECT count() AS total,
               toStartOfDay(toTimeZone(e.timestamp, 'UTC')) AS day_start
        FROM events AS e SAMPLE 1
        WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 00:00:00', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), equals(e.event, 'watched movie'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, 'name'), ''), 'null'), '^"|"$', ''), '1'), 0))
        GROUP BY day_start)
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY arraySum(total) DESC
  LIMIT 50000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1,
                       format_csv_allow_double_quotes=0,
                       max_ast_elements=1000000,
                       max_expanded_ast_elements=1000000,
                       max_query_size=524288,
                       max_bytes_before_external_group_by=0
  '''
# ---
# name: TestTrends.test_person_property_filtering_clashing_with_event_property_materialized
  '''
  SELECT arrayMap(number -> plus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 00:00:00', 6, 'UTC'))), toIntervalDay(number)), range(0, plus(coalesce(dateDiff('day', toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 00:00:00', 6, 'UTC'))), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))))), 1))) AS date,
         arrayMap(_match_date -> arraySum(arraySlice(groupArray(count), indexOf(groupArray(day_start) AS _days_for_count, _match_date) AS _index, plus(minus(arrayLastIndex(x -> ifNull(equals(x, _match_date), isNull(x)
                                                                                                                                                                                        and isNull(_match_date)), _days_for_count), _index), 1))), date) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start AS day_start
     FROM
       (SELECT count() AS total,
               toStartOfDay(toTimeZone(e.timestamp, 'UTC')) AS day_start
        FROM events AS e SAMPLE 1
        INNER JOIN
          (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS e__pdi___person_id,
                  argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                  person_distinct_id2.distinct_id AS distinct_id
           FROM person_distinct_id2
           WHERE equals(person_distinct_id2.team_id, 2)
           GROUP BY person_distinct_id2.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
        LEFT JOIN
          (SELECT person.id AS id,
                  nullIf(nullIf(person.pmat_name, ''), 'null') AS properties___name
           FROM person
           WHERE and(equals(person.team_id, 2), ifNull(in(tuple(person.id, person.version),
                                                            (SELECT person.id AS id, max(person.version) AS version
                                                             FROM person
                                                             WHERE equals(person.team_id, 2)
                                                             GROUP BY person.id
                                                             HAVING and(ifNull(equals(argMax(person.is_deleted, person.version), 0), 0), ifNull(less(argMax(person.created_at, person.version), plus(now64(6, 'UTC'), toIntervalDay(1))), 0)))), 0)) SETTINGS optimize_aggregation_in_order=1) AS e__pdi__person ON equals(e__pdi.e__pdi___person_id, e__pdi__person.id)
        WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 00:00:00', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), equals(e.event, 'watched movie'), ifNull(equals(e__pdi__person.properties___name, 'person1'), 0))
        GROUP BY day_start)
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY arraySum(total) DESC
  LIMIT 50000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1,
                       format_csv_allow_double_quotes=0,
                       max_ast_elements=1000000,
                       max_expanded_ast_elements=1000000,
                       max_query_size=524288,
                       max_bytes_before_external_group_by=0
  '''
# ---
# name: TestTrends.test_person_property_filtering_clashing_with_event_property_materialized.1
  '''
  SELECT arrayMap(number -> plus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 00:00:00', 6, 'UTC'))), toIntervalDay(number)), range(0, plus(coalesce(dateDiff('day', toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 00:00:00', 6, 'UTC'))), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))))), 1))) AS date,
         arrayMap(_match_date -> arraySum(arraySlice(groupArray(count), indexOf(groupArray(day_start) AS _days_for_count, _match_date) AS _index, plus(minus(arrayLastIndex(x -> ifNull(equals(x, _match_date), isNull(x)
                                                                                                                                                                                        and isNull(_match_date)), _days_for_count), _index), 1))), date) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start AS day_start
     FROM
       (SELECT count() AS total,
               toStartOfDay(toTimeZone(e.timestamp, 'UTC')) AS day_start
        FROM events AS e SAMPLE 1
        WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 00:00:00', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), equals(e.event, 'watched movie'), ifNull(equals(nullIf(nullIf(e.mat_name, ''), 'null'), '1'), 0))
        GROUP BY day_start)
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY arraySum(total) DESC
  LIMIT 50000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1,
                       format_csv_allow_double_quotes=0,
                       max_ast_elements=1000000,
                       max_expanded_ast_elements=1000000,
                       max_query_size=524288,
                       max_bytes_before_external_group_by=0
  '''
# ---
# name: TestTrends.test_person_property_filtering_materialized
  '''
  SELECT arrayMap(number -> plus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 00:00:00', 6, 'UTC'))), toIntervalDay(number)), range(0, plus(coalesce(dateDiff('day', toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 00:00:00', 6, 'UTC'))), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))))), 1))) AS date,
         arrayMap(_match_date -> arraySum(arraySlice(groupArray(count), indexOf(groupArray(day_start) AS _days_for_count, _match_date) AS _index, plus(minus(arrayLastIndex(x -> ifNull(equals(x, _match_date), isNull(x)
                                                                                                                                                                                        and isNull(_match_date)), _days_for_count), _index), 1))), date) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start AS day_start
     FROM
       (SELECT count() AS total,
               toStartOfDay(toTimeZone(e.timestamp, 'UTC')) AS day_start
        FROM events AS e SAMPLE 1
        INNER JOIN
          (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS e__pdi___person_id,
                  argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                  person_distinct_id2.distinct_id AS distinct_id
           FROM person_distinct_id2
           WHERE equals(person_distinct_id2.team_id, 2)
           GROUP BY person_distinct_id2.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
        LEFT JOIN
          (SELECT person.id AS id,
                  nullIf(nullIf(person.pmat_name, ''), 'null') AS properties___name
           FROM person
           WHERE and(equals(person.team_id, 2), ifNull(in(tuple(person.id, person.version),
                                                            (SELECT person.id AS id, max(person.version) AS version
                                                             FROM person
                                                             WHERE equals(person.team_id, 2)
                                                             GROUP BY person.id
                                                             HAVING and(ifNull(equals(argMax(person.is_deleted, person.version), 0), 0), ifNull(less(argMax(person.created_at, person.version), plus(now64(6, 'UTC'), toIntervalDay(1))), 0)))), 0)) SETTINGS optimize_aggregation_in_order=1) AS e__pdi__person ON equals(e__pdi.e__pdi___person_id, e__pdi__person.id)
        WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 00:00:00', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), equals(e.event, 'watched movie'), ifNull(equals(e__pdi__person.properties___name, 'person1'), 0))
        GROUP BY day_start)
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY arraySum(total) DESC
  LIMIT 50000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1,
                       format_csv_allow_double_quotes=0,
                       max_ast_elements=1000000,
                       max_expanded_ast_elements=1000000,
                       max_query_size=524288,
                       max_bytes_before_external_group_by=0
  '''
# ---
# name: TestTrends.test_same_day_with_person_on_events_v2
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 2
    AND distinct_id = 'distinctid2'
  '''
# ---
# name: TestTrends.test_same_day_with_person_on_events_v2.1
  '''
  SELECT arrayMap(number -> plus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-03 00:00:00', 6, 'UTC'))), toIntervalDay(number)), range(0, plus(coalesce(dateDiff('day', toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-03 00:00:00', 6, 'UTC'))), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-03 23:59:59', 6, 'UTC'))))), 1))) AS date,
         arrayMap(_match_date -> arraySum(arraySlice(groupArray(count), indexOf(groupArray(day_start) AS _days_for_count, _match_date) AS _index, plus(minus(arrayLastIndex(x -> ifNull(equals(x, _match_date), isNull(x)
                                                                                                                                                                                        and isNull(_match_date)), _days_for_count), _index), 1))), date) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start AS day_start
     FROM
       (SELECT count() AS total,
               toStartOfDay(toTimeZone(e.timestamp, 'UTC')) AS day_start
        FROM events AS e SAMPLE 1
        WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-03 00:00:00', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-03 23:59:59', 6, 'UTC'))), equals(e.event, 'sign up'))
        GROUP BY day_start)
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY arraySum(total) DESC
  LIMIT 50000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1,
                       format_csv_allow_double_quotes=0,
                       max_ast_elements=1000000,
                       max_expanded_ast_elements=1000000,
                       max_query_size=524288,
                       max_bytes_before_external_group_by=0
  '''
# ---
# name: TestTrends.test_same_day_with_person_on_events_v2.2
  '''
  SELECT arrayMap(number -> plus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-03 00:00:00', 6, 'UTC'))), toIntervalDay(number)), range(0, plus(coalesce(dateDiff('day', toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-03 00:00:00', 6, 'UTC'))), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-03 23:59:59', 6, 'UTC'))))), 1))) AS date,
         arrayMap(_match_date -> arraySum(arraySlice(groupArray(count), indexOf(groupArray(day_start) AS _days_for_count, _match_date) AS _index, plus(minus(arrayLastIndex(x -> ifNull(equals(x, _match_date), isNull(x)
                                                                                                                                                                                        and isNull(_match_date)), _days_for_count), _index), 1))), date) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start AS day_start
     FROM
       (SELECT count(DISTINCT if(not(empty(e__override.distinct_id)), e__override.person_id, e.person_id)) AS total,
               toStartOfDay(toTimeZone(e.timestamp, 'UTC')) AS day_start
        FROM events AS e SAMPLE 1
        LEFT OUTER JOIN
          (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                  person_distinct_id_overrides.distinct_id AS distinct_id
           FROM person_distinct_id_overrides
           WHERE equals(person_distinct_id_overrides.team_id, 2)
           GROUP BY person_distinct_id_overrides.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0)) AS e__override ON equals(e.distinct_id, e__override.distinct_id)
        WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-03 00:00:00', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-03 23:59:59', 6, 'UTC'))), equals(e.event, 'sign up'))
        GROUP BY day_start)
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY arraySum(total) DESC
  LIMIT 50000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1,
                       format_csv_allow_double_quotes=0,
                       max_ast_elements=1000000,
                       max_expanded_ast_elements=1000000,
                       max_query_size=524288,
                       max_bytes_before_external_group_by=0
  '''
# ---
# name: TestTrends.test_same_day_with_person_on_events_v2_latest_override
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 2
    AND distinct_id = 'distinctid2'
  '''
# ---
# name: TestTrends.test_same_day_with_person_on_events_v2_latest_override.1
  '''
  SELECT arrayMap(number -> plus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-03 00:00:00', 6, 'UTC'))), toIntervalDay(number)), range(0, plus(coalesce(dateDiff('day', toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-03 00:00:00', 6, 'UTC'))), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-03 23:59:59', 6, 'UTC'))))), 1))) AS date,
         arrayMap(_match_date -> arraySum(arraySlice(groupArray(count), indexOf(groupArray(day_start) AS _days_for_count, _match_date) AS _index, plus(minus(arrayLastIndex(x -> ifNull(equals(x, _match_date), isNull(x)
                                                                                                                                                                                        and isNull(_match_date)), _days_for_count), _index), 1))), date) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start AS day_start
     FROM
       (SELECT count(DISTINCT if(not(empty(e__override.distinct_id)), e__override.person_id, e.person_id)) AS total,
               toStartOfDay(toTimeZone(e.timestamp, 'UTC')) AS day_start
        FROM events AS e SAMPLE 1
        LEFT OUTER JOIN
          (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                  person_distinct_id_overrides.distinct_id AS distinct_id
           FROM person_distinct_id_overrides
           WHERE equals(person_distinct_id_overrides.team_id, 2)
           GROUP BY person_distinct_id_overrides.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0)) AS e__override ON equals(e.distinct_id, e__override.distinct_id)
        WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-03 00:00:00', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-03 23:59:59', 6, 'UTC'))), equals(e.event, 'sign up'))
        GROUP BY day_start)
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY arraySum(total) DESC
  LIMIT 50000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1,
                       format_csv_allow_double_quotes=0,
                       max_ast_elements=1000000,
                       max_expanded_ast_elements=1000000,
                       max_query_size=524288,
                       max_bytes_before_external_group_by=0
  '''
# ---
# name: TestTrends.test_same_day_with_person_on_events_v2_latest_override.2
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 2
    AND distinct_id = 'distinctid3'
  '''
# ---
# name: TestTrends.test_same_day_with_person_on_events_v2_latest_override.3
  '''
  SELECT arrayMap(number -> plus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-03 00:00:00', 6, 'UTC'))), toIntervalDay(number)), range(0, plus(coalesce(dateDiff('day', toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-03 00:00:00', 6, 'UTC'))), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-03 23:59:59', 6, 'UTC'))))), 1))) AS date,
         arrayMap(_match_date -> arraySum(arraySlice(groupArray(count), indexOf(groupArray(day_start) AS _days_for_count, _match_date) AS _index, plus(minus(arrayLastIndex(x -> ifNull(equals(x, _match_date), isNull(x)
                                                                                                                                                                                        and isNull(_match_date)), _days_for_count), _index), 1))), date) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start AS day_start
     FROM
       (SELECT count(DISTINCT if(not(empty(e__override.distinct_id)), e__override.person_id, e.person_id)) AS total,
               toStartOfDay(toTimeZone(e.timestamp, 'UTC')) AS day_start
        FROM events AS e SAMPLE 1
        LEFT OUTER JOIN
          (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                  person_distinct_id_overrides.distinct_id AS distinct_id
           FROM person_distinct_id_overrides
           WHERE equals(person_distinct_id_overrides.team_id, 2)
           GROUP BY person_distinct_id_overrides.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0)) AS e__override ON equals(e.distinct_id, e__override.distinct_id)
        WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-03 00:00:00', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-03 23:59:59', 6, 'UTC'))), equals(e.event, 'sign up'))
        GROUP BY day_start)
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY arraySum(total) DESC
  LIMIT 50000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1,
                       format_csv_allow_double_quotes=0,
                       max_ast_elements=1000000,
                       max_expanded_ast_elements=1000000,
                       max_query_size=524288,
                       max_bytes_before_external_group_by=0
  '''
# ---
# name: TestTrends.test_same_day_with_person_on_events_v2_latest_override.4
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 2
    AND distinct_id = 'distinctid2'
  '''
# ---
# name: TestTrends.test_same_day_with_person_on_events_v2_latest_override.5
  '''
  SELECT arrayMap(number -> plus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-03 00:00:00', 6, 'UTC'))), toIntervalDay(number)), range(0, plus(coalesce(dateDiff('day', toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-03 00:00:00', 6, 'UTC'))), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-03 23:59:59', 6, 'UTC'))))), 1))) AS date,
         arrayMap(_match_date -> arraySum(arraySlice(groupArray(count), indexOf(groupArray(day_start) AS _days_for_count, _match_date) AS _index, plus(minus(arrayLastIndex(x -> ifNull(equals(x, _match_date), isNull(x)
                                                                                                                                                                                        and isNull(_match_date)), _days_for_count), _index), 1))), date) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start AS day_start
     FROM
       (SELECT count(DISTINCT if(not(empty(e__override.distinct_id)), e__override.person_id, e.person_id)) AS total,
               toStartOfDay(toTimeZone(e.timestamp, 'UTC')) AS day_start
        FROM events AS e SAMPLE 1
        LEFT OUTER JOIN
          (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                  person_distinct_id_overrides.distinct_id AS distinct_id
           FROM person_distinct_id_overrides
           WHERE equals(person_distinct_id_overrides.team_id, 2)
           GROUP BY person_distinct_id_overrides.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0)) AS e__override ON equals(e.distinct_id, e__override.distinct_id)
        WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-03 00:00:00', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-03 23:59:59', 6, 'UTC'))), equals(e.event, 'sign up'))
        GROUP BY day_start)
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY arraySum(total) DESC
  LIMIT 50000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1,
                       format_csv_allow_double_quotes=0,
                       max_ast_elements=1000000,
                       max_expanded_ast_elements=1000000,
                       max_query_size=524288,
                       max_bytes_before_external_group_by=0
  '''
# ---
# name: TestTrends.test_timezones_daily
  '''
  SELECT arrayMap(number -> plus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-29 00:00:00', 6, 'UTC'))), toIntervalDay(number)), range(0, plus(coalesce(dateDiff('day', toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-29 00:00:00', 6, 'UTC'))), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 23:59:59', 6, 'UTC'))))), 1))) AS date,
         arrayMap(_match_date -> arraySum(arraySlice(groupArray(count), indexOf(groupArray(day_start) AS _days_for_count, _match_date) AS _index, plus(minus(arrayLastIndex(x -> ifNull(equals(x, _match_date), isNull(x)
                                                                                                                                                                                        and isNull(_match_date)), _days_for_count), _index), 1))), date) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start AS day_start
     FROM
       (SELECT count() AS total,
               toStartOfDay(toTimeZone(e.timestamp, 'UTC')) AS day_start
        FROM events AS e SAMPLE 1
        WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-29 00:00:00', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 23:59:59', 6, 'UTC'))), equals(e.event, 'sign up'))
        GROUP BY day_start)
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY arraySum(total) DESC
  LIMIT 50000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1,
                       format_csv_allow_double_quotes=0,
                       max_ast_elements=1000000,
                       max_expanded_ast_elements=1000000,
                       max_query_size=524288,
                       max_bytes_before_external_group_by=0
  '''
# ---
# name: TestTrends.test_timezones_daily.1
  '''
  SELECT arrayMap(number -> plus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-22 00:00:00', 6, 'UTC'))), toIntervalDay(number)), range(0, plus(coalesce(dateDiff('day', toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-22 00:00:00', 6, 'UTC'))), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 23:59:59', 6, 'UTC'))))), 1))) AS date,
         arrayMap(_match_date -> arraySum(arraySlice(groupArray(count), indexOf(groupArray(day_start) AS _days_for_count, _match_date) AS _index, plus(minus(arrayLastIndex(x -> ifNull(equals(x, _match_date), isNull(x)
                                                                                                                                                                                        and isNull(_match_date)), _days_for_count), _index), 1))), date) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start AS day_start
     FROM
       (SELECT count(DISTINCT e__pdi.person_id) AS total,
               toStartOfDay(toTimeZone(e.timestamp, 'UTC')) AS day_start
        FROM events AS e SAMPLE 1
        INNER JOIN
          (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                  person_distinct_id2.distinct_id AS distinct_id
           FROM person_distinct_id2
           WHERE equals(person_distinct_id2.team_id, 2)
           GROUP BY person_distinct_id2.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
        WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-22 00:00:00', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 23:59:59', 6, 'UTC'))), equals(e.event, 'sign up'))
        GROUP BY day_start)
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY arraySum(total) DESC
  LIMIT 50000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1,
                       format_csv_allow_double_quotes=0,
                       max_ast_elements=1000000,
                       max_expanded_ast_elements=1000000,
                       max_query_size=524288,
                       max_bytes_before_external_group_by=0
  '''
# ---
# name: TestTrends.test_timezones_daily.2
  '''
  SELECT arrayMap(number -> plus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-29 00:00:00', 6, 'UTC'))), toIntervalDay(number)), range(0, plus(coalesce(dateDiff('day', toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-29 00:00:00', 6, 'UTC'))), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 23:59:59', 6, 'UTC'))))), 1))) AS date,
         arrayMap(_match_date -> arraySum(arraySlice(groupArray(count), indexOf(groupArray(day_start) AS _days_for_count, _match_date) AS _index, plus(minus(arrayLastIndex(x -> ifNull(equals(x, _match_date), isNull(x)
                                                                                                                                                                                        and isNull(_match_date)), _days_for_count), _index), 1))), date) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start AS day_start
     FROM
       (SELECT counts AS total,
               toStartOfDay(timestamp) AS day_start
        FROM
          (SELECT d.timestamp AS timestamp,
                  count(DISTINCT e.actor_id) AS counts
           FROM
             (SELECT minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 23:59:59', 6, 'UTC'))), toIntervalDay(numbers.number)) AS timestamp
              FROM numbers(dateDiff('day', minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-29 00:00:00', 6, 'UTC'))), toIntervalDay(7)), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 23:59:59', 6, 'UTC')))) AS numbers) AS d
           CROSS JOIN
             (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                     e__pdi.person_id AS actor_id
              FROM events AS e SAMPLE 1
              INNER JOIN
                (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                        person_distinct_id2.distinct_id AS distinct_id
                 FROM person_distinct_id2
                 WHERE equals(person_distinct_id2.team_id, 2)
                 GROUP BY person_distinct_id2.distinct_id
                 HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
              WHERE and(equals(e.team_id, 2), equals(e.event, 'sign up'), ifNull(greaterOrEquals(timestamp, minus(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-29 00:00:00', 6, 'UTC')), toIntervalDay(7))), 0), ifNull(lessOrEquals(timestamp, assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 23:59:59', 6, 'UTC'))), 0))
              GROUP BY timestamp, actor_id) AS e
           WHERE and(ifNull(lessOrEquals(e.timestamp, plus(d.timestamp, toIntervalDay(1))), 0), ifNull(greater(e.timestamp, minus(d.timestamp, toIntervalDay(6))), 0))
           GROUP BY d.timestamp
           ORDER BY d.timestamp ASC)
        WHERE and(ifNull(greaterOrEquals(timestamp, toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-29 00:00:00', 6, 'UTC')))), 0), ifNull(lessOrEquals(timestamp, assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 23:59:59', 6, 'UTC'))), 0)))
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY arraySum(total) DESC
  LIMIT 50000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1,
                       format_csv_allow_double_quotes=0,
                       max_ast_elements=1000000,
                       max_expanded_ast_elements=1000000,
                       max_query_size=524288,
                       max_bytes_before_external_group_by=0
  '''
# ---
# name: TestTrends.test_timezones_daily.3
  '''
  SELECT arrayMap(number -> plus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-29 00:00:00', 6, 'UTC'))), toIntervalDay(number)), range(0, plus(coalesce(dateDiff('day', toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-29 00:00:00', 6, 'UTC'))), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 23:59:59', 6, 'UTC'))))), 1))) AS date,
         arrayMap(_match_date -> arraySum(arraySlice(groupArray(count), indexOf(groupArray(day_start) AS _days_for_count, _match_date) AS _index, plus(minus(arrayLastIndex(x -> ifNull(equals(x, _match_date), isNull(x)
                                                                                                                                                                                        and isNull(_match_date)), _days_for_count), _index), 1))), date) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start AS day_start
     FROM
       (SELECT count() AS total,
               toStartOfDay(toTimeZone(e.timestamp, 'UTC')) AS day_start
        FROM events AS e SAMPLE 1
        WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-29 00:00:00', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 23:59:59', 6, 'UTC'))), equals(e.event, 'sign up'))
        GROUP BY day_start)
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY arraySum(total) DESC
  LIMIT 50000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1,
                       format_csv_allow_double_quotes=0,
                       max_ast_elements=1000000,
                       max_expanded_ast_elements=1000000,
                       max_query_size=524288,
                       max_bytes_before_external_group_by=0
  '''
# ---
# name: TestTrends.test_timezones_daily.4
  '''
  SELECT groupArray(1)(date)[1] AS date,
                      arrayFold((acc, x) -> arrayMap(i -> plus(acc[i], x[i]), range(1, plus(length(date), 1))), groupArray(total), arrayWithConstant(length(date), reinterpretAsFloat64(0))) AS total,
                      if(ifNull(greaterOrEquals(row_number, 25), 0), '$$_posthog_breakdown_other_$$', toString(breakdown_value)) AS breakdown_value
  FROM
    (SELECT arrayMap(number -> plus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-29 00:00:00', 6, 'UTC'))), toIntervalDay(number)), range(0, plus(coalesce(dateDiff('day', toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-29 00:00:00', 6, 'UTC'))), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 23:59:59', 6, 'UTC'))))), 1))) AS date,
            arrayMap(_match_date -> arraySum(arraySlice(groupArray(count), indexOf(groupArray(day_start) AS _days_for_count, _match_date) AS _index, plus(minus(arrayLastIndex(x -> ifNull(equals(x, _match_date), isNull(x)
                                                                                                                                                                                           and isNull(_match_date)), _days_for_count), _index), 1))), date) AS total,
            ifNull(toString(breakdown_value), '$$_posthog_breakdown_null_$$') AS breakdown_value,
            rowNumberInAllBlocks() AS row_number
     FROM
       (SELECT sum(total) AS count,
               day_start AS day_start,
               breakdown_value AS breakdown_value
        FROM
          (SELECT count(DISTINCT e__pdi.person_id) AS total,
                  toStartOfDay(toTimeZone(e.timestamp, 'UTC')) AS day_start,
                  ifNull(nullIf(toString(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$os'), ''), 'null'), '^"|"$', '')), ''), '$$_posthog_breakdown_null_$$') AS breakdown_value
           FROM events AS e SAMPLE 1
           INNER JOIN
             (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                     person_distinct_id2.distinct_id AS distinct_id
              FROM person_distinct_id2
              WHERE equals(person_distinct_id2.team_id, 2)
              GROUP BY person_distinct_id2.distinct_id
              HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
           WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-29 00:00:00', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 23:59:59', 6, 'UTC'))), equals(e.event, 'sign up'), true)
           GROUP BY day_start,
                    breakdown_value)
        GROUP BY day_start,
                 breakdown_value
        ORDER BY day_start ASC, breakdown_value ASC)
     GROUP BY breakdown_value
     ORDER BY arraySum(total) DESC, breakdown_value ASC)
  WHERE isNotNull(breakdown_value)
  GROUP BY breakdown_value
  ORDER BY if(ifNull(equals(breakdown_value, '$$_posthog_breakdown_other_$$'), 0), 2, if(ifNull(equals(breakdown_value, '$$_posthog_breakdown_null_$$'), 0), 1, 0)) ASC, arraySum(total) DESC, breakdown_value ASC
  LIMIT 50000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1,
                       format_csv_allow_double_quotes=0,
                       max_ast_elements=1000000,
                       max_expanded_ast_elements=1000000,
                       max_query_size=524288,
                       max_bytes_before_external_group_by=0
  '''
# ---
# name: TestTrends.test_timezones_daily_minus_utc
  '''
  SELECT arrayMap(number -> plus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-29 00:00:00', 6, 'America/Phoenix'))), toIntervalDay(number)), range(0, plus(coalesce(dateDiff('day', toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-29 00:00:00', 6, 'America/Phoenix'))), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 23:59:59', 6, 'America/Phoenix'))))), 1))) AS date,
         arrayMap(_match_date -> arraySum(arraySlice(groupArray(count), indexOf(groupArray(day_start) AS _days_for_count, _match_date) AS _index, plus(minus(arrayLastIndex(x -> ifNull(equals(x, _match_date), isNull(x)
                                                                                                                                                                                        and isNull(_match_date)), _days_for_count), _index), 1))), date) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start AS day_start
     FROM
       (SELECT count() AS total,
               toStartOfDay(toTimeZone(e.timestamp, 'America/Phoenix')) AS day_start
        FROM events AS e SAMPLE 1
        WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'America/Phoenix'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-29 00:00:00', 6, 'America/Phoenix')))), lessOrEquals(toTimeZone(e.timestamp, 'America/Phoenix'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 23:59:59', 6, 'America/Phoenix'))), equals(e.event, 'sign up'))
        GROUP BY day_start)
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY arraySum(total) DESC
  LIMIT 50000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1,
                       format_csv_allow_double_quotes=0,
                       max_ast_elements=1000000,
                       max_expanded_ast_elements=1000000,
                       max_query_size=524288,
                       max_bytes_before_external_group_by=0
  '''
# ---
# name: TestTrends.test_timezones_daily_minus_utc.1
  '''
  SELECT arrayMap(number -> plus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-22 00:00:00', 6, 'America/Phoenix'))), toIntervalDay(number)), range(0, plus(coalesce(dateDiff('day', toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-22 00:00:00', 6, 'America/Phoenix'))), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 23:59:59', 6, 'America/Phoenix'))))), 1))) AS date,
         arrayMap(_match_date -> arraySum(arraySlice(groupArray(count), indexOf(groupArray(day_start) AS _days_for_count, _match_date) AS _index, plus(minus(arrayLastIndex(x -> ifNull(equals(x, _match_date), isNull(x)
                                                                                                                                                                                        and isNull(_match_date)), _days_for_count), _index), 1))), date) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start AS day_start
     FROM
       (SELECT count(DISTINCT e__pdi.person_id) AS total,
               toStartOfDay(toTimeZone(e.timestamp, 'America/Phoenix')) AS day_start
        FROM events AS e SAMPLE 1
        INNER JOIN
          (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                  person_distinct_id2.distinct_id AS distinct_id
           FROM person_distinct_id2
           WHERE equals(person_distinct_id2.team_id, 2)
           GROUP BY person_distinct_id2.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
        WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'America/Phoenix'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-22 00:00:00', 6, 'America/Phoenix')))), lessOrEquals(toTimeZone(e.timestamp, 'America/Phoenix'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 23:59:59', 6, 'America/Phoenix'))), equals(e.event, 'sign up'))
        GROUP BY day_start)
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY arraySum(total) DESC
  LIMIT 50000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1,
                       format_csv_allow_double_quotes=0,
                       max_ast_elements=1000000,
                       max_expanded_ast_elements=1000000,
                       max_query_size=524288,
                       max_bytes_before_external_group_by=0
  '''
# ---
# name: TestTrends.test_timezones_daily_minus_utc.2
  '''
  SELECT arrayMap(number -> plus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-29 00:00:00', 6, 'America/Phoenix'))), toIntervalDay(number)), range(0, plus(coalesce(dateDiff('day', toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-29 00:00:00', 6, 'America/Phoenix'))), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 23:59:59', 6, 'America/Phoenix'))))), 1))) AS date,
         arrayMap(_match_date -> arraySum(arraySlice(groupArray(count), indexOf(groupArray(day_start) AS _days_for_count, _match_date) AS _index, plus(minus(arrayLastIndex(x -> ifNull(equals(x, _match_date), isNull(x)
                                                                                                                                                                                        and isNull(_match_date)), _days_for_count), _index), 1))), date) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start AS day_start
     FROM
       (SELECT counts AS total,
               toStartOfDay(timestamp) AS day_start
        FROM
          (SELECT d.timestamp AS timestamp,
                  count(DISTINCT e.actor_id) AS counts
           FROM
             (SELECT minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 23:59:59', 6, 'America/Phoenix'))), toIntervalDay(numbers.number)) AS timestamp
              FROM numbers(dateDiff('day', minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-29 00:00:00', 6, 'America/Phoenix'))), toIntervalDay(7)), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 23:59:59', 6, 'America/Phoenix')))) AS numbers) AS d
           CROSS JOIN
             (SELECT toTimeZone(e.timestamp, 'America/Phoenix') AS timestamp,
                     e__pdi.person_id AS actor_id
              FROM events AS e SAMPLE 1
              INNER JOIN
                (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                        person_distinct_id2.distinct_id AS distinct_id
                 FROM person_distinct_id2
                 WHERE equals(person_distinct_id2.team_id, 2)
                 GROUP BY person_distinct_id2.distinct_id
                 HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
              WHERE and(equals(e.team_id, 2), equals(e.event, 'sign up'), ifNull(greaterOrEquals(timestamp, minus(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-29 00:00:00', 6, 'America/Phoenix')), toIntervalDay(7))), 0), ifNull(lessOrEquals(timestamp, assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 23:59:59', 6, 'America/Phoenix'))), 0))
              GROUP BY timestamp, actor_id) AS e
           WHERE and(ifNull(lessOrEquals(e.timestamp, plus(d.timestamp, toIntervalDay(1))), 0), ifNull(greater(e.timestamp, minus(d.timestamp, toIntervalDay(6))), 0))
           GROUP BY d.timestamp
           ORDER BY d.timestamp ASC)
        WHERE and(ifNull(greaterOrEquals(timestamp, toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-29 00:00:00', 6, 'America/Phoenix')))), 0), ifNull(lessOrEquals(timestamp, assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 23:59:59', 6, 'America/Phoenix'))), 0)))
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY arraySum(total) DESC
  LIMIT 50000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1,
                       format_csv_allow_double_quotes=0,
                       max_ast_elements=1000000,
                       max_expanded_ast_elements=1000000,
                       max_query_size=524288,
                       max_bytes_before_external_group_by=0
  '''
# ---
# name: TestTrends.test_timezones_daily_minus_utc.3
  '''
  SELECT arrayMap(number -> plus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-29 00:00:00', 6, 'America/Phoenix'))), toIntervalDay(number)), range(0, plus(coalesce(dateDiff('day', toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-29 00:00:00', 6, 'America/Phoenix'))), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 23:59:59', 6, 'America/Phoenix'))))), 1))) AS date,
         arrayMap(_match_date -> arraySum(arraySlice(groupArray(count), indexOf(groupArray(day_start) AS _days_for_count, _match_date) AS _index, plus(minus(arrayLastIndex(x -> ifNull(equals(x, _match_date), isNull(x)
                                                                                                                                                                                        and isNull(_match_date)), _days_for_count), _index), 1))), date) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start AS day_start
     FROM
       (SELECT count() AS total,
               toStartOfDay(toTimeZone(e.timestamp, 'America/Phoenix')) AS day_start
        FROM events AS e SAMPLE 1
        WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'America/Phoenix'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-29 00:00:00', 6, 'America/Phoenix')))), lessOrEquals(toTimeZone(e.timestamp, 'America/Phoenix'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 23:59:59', 6, 'America/Phoenix'))), equals(e.event, 'sign up'))
        GROUP BY day_start)
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY arraySum(total) DESC
  LIMIT 50000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1,
                       format_csv_allow_double_quotes=0,
                       max_ast_elements=1000000,
                       max_expanded_ast_elements=1000000,
                       max_query_size=524288,
                       max_bytes_before_external_group_by=0
  '''
# ---
# name: TestTrends.test_timezones_daily_minus_utc.4
  '''
  SELECT groupArray(1)(date)[1] AS date,
                      arrayFold((acc, x) -> arrayMap(i -> plus(acc[i], x[i]), range(1, plus(length(date), 1))), groupArray(total), arrayWithConstant(length(date), reinterpretAsFloat64(0))) AS total,
                      if(ifNull(greaterOrEquals(row_number, 25), 0), '$$_posthog_breakdown_other_$$', toString(breakdown_value)) AS breakdown_value
  FROM
    (SELECT arrayMap(number -> plus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-29 00:00:00', 6, 'America/Phoenix'))), toIntervalDay(number)), range(0, plus(coalesce(dateDiff('day', toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-29 00:00:00', 6, 'America/Phoenix'))), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 23:59:59', 6, 'America/Phoenix'))))), 1))) AS date,
            arrayMap(_match_date -> arraySum(arraySlice(groupArray(count), indexOf(groupArray(day_start) AS _days_for_count, _match_date) AS _index, plus(minus(arrayLastIndex(x -> ifNull(equals(x, _match_date), isNull(x)
                                                                                                                                                                                           and isNull(_match_date)), _days_for_count), _index), 1))), date) AS total,
            ifNull(toString(breakdown_value), '$$_posthog_breakdown_null_$$') AS breakdown_value,
            rowNumberInAllBlocks() AS row_number
     FROM
       (SELECT sum(total) AS count,
               day_start AS day_start,
               breakdown_value AS breakdown_value
        FROM
          (SELECT count(DISTINCT e__pdi.person_id) AS total,
                  toStartOfDay(toTimeZone(e.timestamp, 'America/Phoenix')) AS day_start,
                  ifNull(nullIf(toString(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$os'), ''), 'null'), '^"|"$', '')), ''), '$$_posthog_breakdown_null_$$') AS breakdown_value
           FROM events AS e SAMPLE 1
           INNER JOIN
             (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                     person_distinct_id2.distinct_id AS distinct_id
              FROM person_distinct_id2
              WHERE equals(person_distinct_id2.team_id, 2)
              GROUP BY person_distinct_id2.distinct_id
              HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
           WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'America/Phoenix'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-29 00:00:00', 6, 'America/Phoenix')))), lessOrEquals(toTimeZone(e.timestamp, 'America/Phoenix'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 23:59:59', 6, 'America/Phoenix'))), equals(e.event, 'sign up'), true)
           GROUP BY day_start,
                    breakdown_value)
        GROUP BY day_start,
                 breakdown_value
        ORDER BY day_start ASC, breakdown_value ASC)
     GROUP BY breakdown_value
     ORDER BY arraySum(total) DESC, breakdown_value ASC)
  WHERE isNotNull(breakdown_value)
  GROUP BY breakdown_value
  ORDER BY if(ifNull(equals(breakdown_value, '$$_posthog_breakdown_other_$$'), 0), 2, if(ifNull(equals(breakdown_value, '$$_posthog_breakdown_null_$$'), 0), 1, 0)) ASC, arraySum(total) DESC, breakdown_value ASC
  LIMIT 50000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1,
                       format_csv_allow_double_quotes=0,
                       max_ast_elements=1000000,
                       max_expanded_ast_elements=1000000,
                       max_query_size=524288,
                       max_bytes_before_external_group_by=0
  '''
# ---
# name: TestTrends.test_timezones_daily_plus_utc
  '''
  SELECT arrayMap(number -> plus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-29 00:00:00', 6, 'Asia/Tokyo'))), toIntervalDay(number)), range(0, plus(coalesce(dateDiff('day', toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-29 00:00:00', 6, 'Asia/Tokyo'))), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 23:59:59', 6, 'Asia/Tokyo'))))), 1))) AS date,
         arrayMap(_match_date -> arraySum(arraySlice(groupArray(count), indexOf(groupArray(day_start) AS _days_for_count, _match_date) AS _index, plus(minus(arrayLastIndex(x -> ifNull(equals(x, _match_date), isNull(x)
                                                                                                                                                                                        and isNull(_match_date)), _days_for_count), _index), 1))), date) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start AS day_start
     FROM
       (SELECT count() AS total,
               toStartOfDay(toTimeZone(e.timestamp, 'Asia/Tokyo')) AS day_start
        FROM events AS e SAMPLE 1
        WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'Asia/Tokyo'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-29 00:00:00', 6, 'Asia/Tokyo')))), lessOrEquals(toTimeZone(e.timestamp, 'Asia/Tokyo'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 23:59:59', 6, 'Asia/Tokyo'))), equals(e.event, 'sign up'))
        GROUP BY day_start)
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY arraySum(total) DESC
  LIMIT 50000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1,
                       format_csv_allow_double_quotes=0,
                       max_ast_elements=1000000,
                       max_expanded_ast_elements=1000000,
                       max_query_size=524288,
                       max_bytes_before_external_group_by=0
  '''
# ---
# name: TestTrends.test_timezones_daily_plus_utc.1
  '''
  SELECT arrayMap(number -> plus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-22 00:00:00', 6, 'Asia/Tokyo'))), toIntervalDay(number)), range(0, plus(coalesce(dateDiff('day', toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-22 00:00:00', 6, 'Asia/Tokyo'))), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 23:59:59', 6, 'Asia/Tokyo'))))), 1))) AS date,
         arrayMap(_match_date -> arraySum(arraySlice(groupArray(count), indexOf(groupArray(day_start) AS _days_for_count, _match_date) AS _index, plus(minus(arrayLastIndex(x -> ifNull(equals(x, _match_date), isNull(x)
                                                                                                                                                                                        and isNull(_match_date)), _days_for_count), _index), 1))), date) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start AS day_start
     FROM
       (SELECT count(DISTINCT e__pdi.person_id) AS total,
               toStartOfDay(toTimeZone(e.timestamp, 'Asia/Tokyo')) AS day_start
        FROM events AS e SAMPLE 1
        INNER JOIN
          (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                  person_distinct_id2.distinct_id AS distinct_id
           FROM person_distinct_id2
           WHERE equals(person_distinct_id2.team_id, 2)
           GROUP BY person_distinct_id2.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
        WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'Asia/Tokyo'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-22 00:00:00', 6, 'Asia/Tokyo')))), lessOrEquals(toTimeZone(e.timestamp, 'Asia/Tokyo'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 23:59:59', 6, 'Asia/Tokyo'))), equals(e.event, 'sign up'))
        GROUP BY day_start)
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY arraySum(total) DESC
  LIMIT 50000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1,
                       format_csv_allow_double_quotes=0,
                       max_ast_elements=1000000,
                       max_expanded_ast_elements=1000000,
                       max_query_size=524288,
                       max_bytes_before_external_group_by=0
  '''
# ---
# name: TestTrends.test_timezones_daily_plus_utc.2
  '''
  SELECT arrayMap(number -> plus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-29 00:00:00', 6, 'Asia/Tokyo'))), toIntervalDay(number)), range(0, plus(coalesce(dateDiff('day', toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-29 00:00:00', 6, 'Asia/Tokyo'))), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 23:59:59', 6, 'Asia/Tokyo'))))), 1))) AS date,
         arrayMap(_match_date -> arraySum(arraySlice(groupArray(count), indexOf(groupArray(day_start) AS _days_for_count, _match_date) AS _index, plus(minus(arrayLastIndex(x -> ifNull(equals(x, _match_date), isNull(x)
                                                                                                                                                                                        and isNull(_match_date)), _days_for_count), _index), 1))), date) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start AS day_start
     FROM
       (SELECT counts AS total,
               toStartOfDay(timestamp) AS day_start
        FROM
          (SELECT d.timestamp AS timestamp,
                  count(DISTINCT e.actor_id) AS counts
           FROM
             (SELECT minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 23:59:59', 6, 'Asia/Tokyo'))), toIntervalDay(numbers.number)) AS timestamp
              FROM numbers(dateDiff('day', minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-29 00:00:00', 6, 'Asia/Tokyo'))), toIntervalDay(7)), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 23:59:59', 6, 'Asia/Tokyo')))) AS numbers) AS d
           CROSS JOIN
             (SELECT toTimeZone(e.timestamp, 'Asia/Tokyo') AS timestamp,
                     e__pdi.person_id AS actor_id
              FROM events AS e SAMPLE 1
              INNER JOIN
                (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                        person_distinct_id2.distinct_id AS distinct_id
                 FROM person_distinct_id2
                 WHERE equals(person_distinct_id2.team_id, 2)
                 GROUP BY person_distinct_id2.distinct_id
                 HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
              WHERE and(equals(e.team_id, 2), equals(e.event, 'sign up'), ifNull(greaterOrEquals(timestamp, minus(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-29 00:00:00', 6, 'Asia/Tokyo')), toIntervalDay(7))), 0), ifNull(lessOrEquals(timestamp, assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 23:59:59', 6, 'Asia/Tokyo'))), 0))
              GROUP BY timestamp, actor_id) AS e
           WHERE and(ifNull(lessOrEquals(e.timestamp, plus(d.timestamp, toIntervalDay(1))), 0), ifNull(greater(e.timestamp, minus(d.timestamp, toIntervalDay(6))), 0))
           GROUP BY d.timestamp
           ORDER BY d.timestamp ASC)
        WHERE and(ifNull(greaterOrEquals(timestamp, toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-29 00:00:00', 6, 'Asia/Tokyo')))), 0), ifNull(lessOrEquals(timestamp, assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 23:59:59', 6, 'Asia/Tokyo'))), 0)))
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY arraySum(total) DESC
  LIMIT 50000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1,
                       format_csv_allow_double_quotes=0,
                       max_ast_elements=1000000,
                       max_expanded_ast_elements=1000000,
                       max_query_size=524288,
                       max_bytes_before_external_group_by=0
  '''
# ---
# name: TestTrends.test_timezones_daily_plus_utc.3
  '''
  SELECT arrayMap(number -> plus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-29 00:00:00', 6, 'Asia/Tokyo'))), toIntervalDay(number)), range(0, plus(coalesce(dateDiff('day', toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-29 00:00:00', 6, 'Asia/Tokyo'))), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 23:59:59', 6, 'Asia/Tokyo'))))), 1))) AS date,
         arrayMap(_match_date -> arraySum(arraySlice(groupArray(count), indexOf(groupArray(day_start) AS _days_for_count, _match_date) AS _index, plus(minus(arrayLastIndex(x -> ifNull(equals(x, _match_date), isNull(x)
                                                                                                                                                                                        and isNull(_match_date)), _days_for_count), _index), 1))), date) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start AS day_start
     FROM
       (SELECT count() AS total,
               toStartOfDay(toTimeZone(e.timestamp, 'Asia/Tokyo')) AS day_start
        FROM events AS e SAMPLE 1
        WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'Asia/Tokyo'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-29 00:00:00', 6, 'Asia/Tokyo')))), lessOrEquals(toTimeZone(e.timestamp, 'Asia/Tokyo'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 23:59:59', 6, 'Asia/Tokyo'))), equals(e.event, 'sign up'))
        GROUP BY day_start)
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY arraySum(total) DESC
  LIMIT 50000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1,
                       format_csv_allow_double_quotes=0,
                       max_ast_elements=1000000,
                       max_expanded_ast_elements=1000000,
                       max_query_size=524288,
                       max_bytes_before_external_group_by=0
  '''
# ---
# name: TestTrends.test_timezones_daily_plus_utc.4
  '''
  SELECT groupArray(1)(date)[1] AS date,
                      arrayFold((acc, x) -> arrayMap(i -> plus(acc[i], x[i]), range(1, plus(length(date), 1))), groupArray(total), arrayWithConstant(length(date), reinterpretAsFloat64(0))) AS total,
                      if(ifNull(greaterOrEquals(row_number, 25), 0), '$$_posthog_breakdown_other_$$', toString(breakdown_value)) AS breakdown_value
  FROM
    (SELECT arrayMap(number -> plus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-29 00:00:00', 6, 'Asia/Tokyo'))), toIntervalDay(number)), range(0, plus(coalesce(dateDiff('day', toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-29 00:00:00', 6, 'Asia/Tokyo'))), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 23:59:59', 6, 'Asia/Tokyo'))))), 1))) AS date,
            arrayMap(_match_date -> arraySum(arraySlice(groupArray(count), indexOf(groupArray(day_start) AS _days_for_count, _match_date) AS _index, plus(minus(arrayLastIndex(x -> ifNull(equals(x, _match_date), isNull(x)
                                                                                                                                                                                           and isNull(_match_date)), _days_for_count), _index), 1))), date) AS total,
            ifNull(toString(breakdown_value), '$$_posthog_breakdown_null_$$') AS breakdown_value,
            rowNumberInAllBlocks() AS row_number
     FROM
       (SELECT sum(total) AS count,
               day_start AS day_start,
               breakdown_value AS breakdown_value
        FROM
          (SELECT count(DISTINCT e__pdi.person_id) AS total,
                  toStartOfDay(toTimeZone(e.timestamp, 'Asia/Tokyo')) AS day_start,
                  ifNull(nullIf(toString(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$os'), ''), 'null'), '^"|"$', '')), ''), '$$_posthog_breakdown_null_$$') AS breakdown_value
           FROM events AS e SAMPLE 1
           INNER JOIN
             (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                     person_distinct_id2.distinct_id AS distinct_id
              FROM person_distinct_id2
              WHERE equals(person_distinct_id2.team_id, 2)
              GROUP BY person_distinct_id2.distinct_id
              HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
           WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'Asia/Tokyo'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-29 00:00:00', 6, 'Asia/Tokyo')))), lessOrEquals(toTimeZone(e.timestamp, 'Asia/Tokyo'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 23:59:59', 6, 'Asia/Tokyo'))), equals(e.event, 'sign up'), true)
           GROUP BY day_start,
                    breakdown_value)
        GROUP BY day_start,
                 breakdown_value
        ORDER BY day_start ASC, breakdown_value ASC)
     GROUP BY breakdown_value
     ORDER BY arraySum(total) DESC, breakdown_value ASC)
  WHERE isNotNull(breakdown_value)
  GROUP BY breakdown_value
  ORDER BY if(ifNull(equals(breakdown_value, '$$_posthog_breakdown_other_$$'), 0), 2, if(ifNull(equals(breakdown_value, '$$_posthog_breakdown_null_$$'), 0), 1, 0)) ASC, arraySum(total) DESC, breakdown_value ASC
  LIMIT 50000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1,
                       format_csv_allow_double_quotes=0,
                       max_ast_elements=1000000,
                       max_expanded_ast_elements=1000000,
                       max_query_size=524288,
                       max_bytes_before_external_group_by=0
  '''
# ---
# name: TestTrends.test_timezones_hourly_relative_from
  '''
  SELECT arrayMap(number -> plus(toStartOfHour(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 00:00:00', 6, 'UTC'))), toIntervalHour(number)), range(0, plus(coalesce(dateDiff('hour', toStartOfHour(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 00:00:00', 6, 'UTC'))), toStartOfHour(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 10:59:59', 6, 'UTC'))))), 1))) AS date,
         arrayMap(_match_date -> arraySum(arraySlice(groupArray(count), indexOf(groupArray(day_start) AS _days_for_count, _match_date) AS _index, plus(minus(arrayLastIndex(x -> ifNull(equals(x, _match_date), isNull(x)
                                                                                                                                                                                        and isNull(_match_date)), _days_for_count), _index), 1))), date) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start AS day_start
     FROM
       (SELECT count(DISTINCT e__pdi.person_id) AS total,
               toStartOfHour(toTimeZone(e.timestamp, 'UTC')) AS day_start
        FROM events AS e SAMPLE 1
        INNER JOIN
          (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                  person_distinct_id2.distinct_id AS distinct_id
           FROM person_distinct_id2
           WHERE equals(person_distinct_id2.team_id, 2)
           GROUP BY person_distinct_id2.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
        WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 00:00:00', 6, 'UTC'))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 10:59:59', 6, 'UTC'))), equals(e.event, 'sign up'))
        GROUP BY day_start)
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY arraySum(total) DESC
  LIMIT 50000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1,
                       format_csv_allow_double_quotes=0,
                       max_ast_elements=1000000,
                       max_expanded_ast_elements=1000000,
                       max_query_size=524288,
                       max_bytes_before_external_group_by=0
  '''
# ---
# name: TestTrends.test_timezones_hourly_relative_from.1
  '''
  SELECT arrayMap(number -> plus(toStartOfHour(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 00:00:00', 6, 'UTC'))), toIntervalHour(number)), range(0, plus(coalesce(dateDiff('hour', toStartOfHour(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 00:00:00', 6, 'UTC'))), toStartOfHour(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 10:59:59', 6, 'UTC'))))), 1))) AS date,
         arrayMap(_match_date -> arraySum(arraySlice(groupArray(count), indexOf(groupArray(day_start) AS _days_for_count, _match_date) AS _index, plus(minus(arrayLastIndex(x -> ifNull(equals(x, _match_date), isNull(x)
                                                                                                                                                                                        and isNull(_match_date)), _days_for_count), _index), 1))), date) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start AS day_start
     FROM
       (SELECT count() AS total,
               toStartOfHour(toTimeZone(e.timestamp, 'UTC')) AS day_start
        FROM events AS e SAMPLE 1
        WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 00:00:00', 6, 'UTC'))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 10:59:59', 6, 'UTC'))), equals(e.event, 'sign up'))
        GROUP BY day_start)
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY arraySum(total) DESC
  LIMIT 50000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1,
                       format_csv_allow_double_quotes=0,
                       max_ast_elements=1000000,
                       max_expanded_ast_elements=1000000,
                       max_query_size=524288,
                       max_bytes_before_external_group_by=0
  '''
# ---
# name: TestTrends.test_timezones_hourly_relative_from_minus_utc
  '''
  SELECT arrayMap(number -> plus(toStartOfHour(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 00:00:00', 6, 'America/Phoenix'))), toIntervalHour(number)), range(0, plus(coalesce(dateDiff('hour', toStartOfHour(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 00:00:00', 6, 'America/Phoenix'))), toStartOfHour(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 10:59:59', 6, 'America/Phoenix'))))), 1))) AS date,
         arrayMap(_match_date -> arraySum(arraySlice(groupArray(count), indexOf(groupArray(day_start) AS _days_for_count, _match_date) AS _index, plus(minus(arrayLastIndex(x -> ifNull(equals(x, _match_date), isNull(x)
                                                                                                                                                                                        and isNull(_match_date)), _days_for_count), _index), 1))), date) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start AS day_start
     FROM
       (SELECT count(DISTINCT e__pdi.person_id) AS total,
               toStartOfHour(toTimeZone(e.timestamp, 'America/Phoenix')) AS day_start
        FROM events AS e SAMPLE 1
        INNER JOIN
          (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                  person_distinct_id2.distinct_id AS distinct_id
           FROM person_distinct_id2
           WHERE equals(person_distinct_id2.team_id, 2)
           GROUP BY person_distinct_id2.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
        WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'America/Phoenix'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 00:00:00', 6, 'America/Phoenix'))), lessOrEquals(toTimeZone(e.timestamp, 'America/Phoenix'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 10:59:59', 6, 'America/Phoenix'))), equals(e.event, 'sign up'))
        GROUP BY day_start)
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY arraySum(total) DESC
  LIMIT 50000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1,
                       format_csv_allow_double_quotes=0,
                       max_ast_elements=1000000,
                       max_expanded_ast_elements=1000000,
                       max_query_size=524288,
                       max_bytes_before_external_group_by=0
  '''
# ---
# name: TestTrends.test_timezones_hourly_relative_from_minus_utc.1
  '''
  SELECT arrayMap(number -> plus(toStartOfHour(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 00:00:00', 6, 'America/Phoenix'))), toIntervalHour(number)), range(0, plus(coalesce(dateDiff('hour', toStartOfHour(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 00:00:00', 6, 'America/Phoenix'))), toStartOfHour(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 10:59:59', 6, 'America/Phoenix'))))), 1))) AS date,
         arrayMap(_match_date -> arraySum(arraySlice(groupArray(count), indexOf(groupArray(day_start) AS _days_for_count, _match_date) AS _index, plus(minus(arrayLastIndex(x -> ifNull(equals(x, _match_date), isNull(x)
                                                                                                                                                                                        and isNull(_match_date)), _days_for_count), _index), 1))), date) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start AS day_start
     FROM
       (SELECT count() AS total,
               toStartOfHour(toTimeZone(e.timestamp, 'America/Phoenix')) AS day_start
        FROM events AS e SAMPLE 1
        WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'America/Phoenix'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 00:00:00', 6, 'America/Phoenix'))), lessOrEquals(toTimeZone(e.timestamp, 'America/Phoenix'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 10:59:59', 6, 'America/Phoenix'))), equals(e.event, 'sign up'))
        GROUP BY day_start)
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY arraySum(total) DESC
  LIMIT 50000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1,
                       format_csv_allow_double_quotes=0,
                       max_ast_elements=1000000,
                       max_expanded_ast_elements=1000000,
                       max_query_size=524288,
                       max_bytes_before_external_group_by=0
  '''
# ---
# name: TestTrends.test_timezones_hourly_relative_from_plus_utc
  '''
  SELECT arrayMap(number -> plus(toStartOfHour(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 00:00:00', 6, 'Asia/Tokyo'))), toIntervalHour(number)), range(0, plus(coalesce(dateDiff('hour', toStartOfHour(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 00:00:00', 6, 'Asia/Tokyo'))), toStartOfHour(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 10:59:59', 6, 'Asia/Tokyo'))))), 1))) AS date,
         arrayMap(_match_date -> arraySum(arraySlice(groupArray(count), indexOf(groupArray(day_start) AS _days_for_count, _match_date) AS _index, plus(minus(arrayLastIndex(x -> ifNull(equals(x, _match_date), isNull(x)
                                                                                                                                                                                        and isNull(_match_date)), _days_for_count), _index), 1))), date) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start AS day_start
     FROM
       (SELECT count(DISTINCT e__pdi.person_id) AS total,
               toStartOfHour(toTimeZone(e.timestamp, 'Asia/Tokyo')) AS day_start
        FROM events AS e SAMPLE 1
        INNER JOIN
          (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                  person_distinct_id2.distinct_id AS distinct_id
           FROM person_distinct_id2
           WHERE equals(person_distinct_id2.team_id, 2)
           GROUP BY person_distinct_id2.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
        WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'Asia/Tokyo'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 00:00:00', 6, 'Asia/Tokyo'))), lessOrEquals(toTimeZone(e.timestamp, 'Asia/Tokyo'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 10:59:59', 6, 'Asia/Tokyo'))), equals(e.event, 'sign up'))
        GROUP BY day_start)
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY arraySum(total) DESC
  LIMIT 50000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1,
                       format_csv_allow_double_quotes=0,
                       max_ast_elements=1000000,
                       max_expanded_ast_elements=1000000,
                       max_query_size=524288,
                       max_bytes_before_external_group_by=0
  '''
# ---
# name: TestTrends.test_timezones_hourly_relative_from_plus_utc.1
  '''
  SELECT arrayMap(number -> plus(toStartOfHour(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 00:00:00', 6, 'Asia/Tokyo'))), toIntervalHour(number)), range(0, plus(coalesce(dateDiff('hour', toStartOfHour(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 00:00:00', 6, 'Asia/Tokyo'))), toStartOfHour(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 10:59:59', 6, 'Asia/Tokyo'))))), 1))) AS date,
         arrayMap(_match_date -> arraySum(arraySlice(groupArray(count), indexOf(groupArray(day_start) AS _days_for_count, _match_date) AS _index, plus(minus(arrayLastIndex(x -> ifNull(equals(x, _match_date), isNull(x)
                                                                                                                                                                                        and isNull(_match_date)), _days_for_count), _index), 1))), date) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start AS day_start
     FROM
       (SELECT count() AS total,
               toStartOfHour(toTimeZone(e.timestamp, 'Asia/Tokyo')) AS day_start
        FROM events AS e SAMPLE 1
        WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'Asia/Tokyo'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 00:00:00', 6, 'Asia/Tokyo'))), lessOrEquals(toTimeZone(e.timestamp, 'Asia/Tokyo'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-05 10:59:59', 6, 'Asia/Tokyo'))), equals(e.event, 'sign up'))
        GROUP BY day_start)
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY arraySum(total) DESC
  LIMIT 50000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1,
                       format_csv_allow_double_quotes=0,
                       max_ast_elements=1000000,
                       max_expanded_ast_elements=1000000,
                       max_query_size=524288,
                       max_bytes_before_external_group_by=0
  '''
# ---
# name: TestTrends.test_timezones_weekly
  '''
  SELECT arrayMap(number -> plus(toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-12 00:00:00', 6, 'UTC')), 0), toIntervalWeek(number)), range(0, plus(coalesce(dateDiff('week', toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-12 00:00:00', 6, 'UTC')), 0), toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-26 23:59:59', 6, 'UTC')), 0))), 1))) AS date,
         arrayMap(_match_date -> arraySum(arraySlice(groupArray(count), indexOf(groupArray(day_start) AS _days_for_count, _match_date) AS _index, plus(minus(arrayLastIndex(x -> ifNull(equals(x, _match_date), isNull(x)
                                                                                                                                                                                        and isNull(_match_date)), _days_for_count), _index), 1))), date) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start AS day_start
     FROM
       (SELECT count() AS total,
               toStartOfWeek(toTimeZone(e.timestamp, 'UTC'), 0) AS day_start
        FROM events AS e SAMPLE 1
        WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-12 00:00:00', 6, 'UTC')), 0)), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-26 23:59:59', 6, 'UTC'))), equals(e.event, 'sign up'))
        GROUP BY day_start)
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY arraySum(total) DESC
  LIMIT 50000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1,
                       format_csv_allow_double_quotes=0,
                       max_ast_elements=1000000,
                       max_expanded_ast_elements=1000000,
                       max_query_size=524288,
                       max_bytes_before_external_group_by=0
  '''
# ---
# name: TestTrends.test_timezones_weekly.1
  '''
  SELECT arrayMap(number -> plus(toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-12 00:00:00', 6, 'UTC')), 3), toIntervalWeek(number)), range(0, plus(coalesce(dateDiff('week', toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-12 00:00:00', 6, 'UTC')), 3), toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-26 23:59:59', 6, 'UTC')), 3))), 1))) AS date,
         arrayMap(_match_date -> arraySum(arraySlice(groupArray(count), indexOf(groupArray(day_start) AS _days_for_count, _match_date) AS _index, plus(minus(arrayLastIndex(x -> ifNull(equals(x, _match_date), isNull(x)
                                                                                                                                                                                        and isNull(_match_date)), _days_for_count), _index), 1))), date) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start AS day_start
     FROM
       (SELECT count() AS total,
               toStartOfWeek(toTimeZone(e.timestamp, 'UTC'), 3) AS day_start
        FROM events AS e SAMPLE 1
        WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-12 00:00:00', 6, 'UTC')), 3)), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-26 23:59:59', 6, 'UTC'))), equals(e.event, 'sign up'))
        GROUP BY day_start)
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY arraySum(total) DESC
  LIMIT 50000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1,
                       format_csv_allow_double_quotes=0,
                       max_ast_elements=1000000,
                       max_expanded_ast_elements=1000000,
                       max_query_size=524288,
                       max_bytes_before_external_group_by=0
  '''
# ---
# name: TestTrends.test_timezones_weekly_minus_utc
  '''
  SELECT arrayMap(number -> plus(toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-12 00:00:00', 6, 'America/Phoenix')), 0), toIntervalWeek(number)), range(0, plus(coalesce(dateDiff('week', toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-12 00:00:00', 6, 'America/Phoenix')), 0), toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-26 23:59:59', 6, 'America/Phoenix')), 0))), 1))) AS date,
         arrayMap(_match_date -> arraySum(arraySlice(groupArray(count), indexOf(groupArray(day_start) AS _days_for_count, _match_date) AS _index, plus(minus(arrayLastIndex(x -> ifNull(equals(x, _match_date), isNull(x)
                                                                                                                                                                                        and isNull(_match_date)), _days_for_count), _index), 1))), date) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start AS day_start
     FROM
       (SELECT count() AS total,
               toStartOfWeek(toTimeZone(e.timestamp, 'America/Phoenix'), 0) AS day_start
        FROM events AS e SAMPLE 1
        WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'America/Phoenix'), toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-12 00:00:00', 6, 'America/Phoenix')), 0)), lessOrEquals(toTimeZone(e.timestamp, 'America/Phoenix'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-26 23:59:59', 6, 'America/Phoenix'))), equals(e.event, 'sign up'))
        GROUP BY day_start)
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY arraySum(total) DESC
  LIMIT 50000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1,
                       format_csv_allow_double_quotes=0,
                       max_ast_elements=1000000,
                       max_expanded_ast_elements=1000000,
                       max_query_size=524288,
                       max_bytes_before_external_group_by=0
  '''
# ---
# name: TestTrends.test_timezones_weekly_minus_utc.1
  '''
  SELECT arrayMap(number -> plus(toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-12 00:00:00', 6, 'America/Phoenix')), 3), toIntervalWeek(number)), range(0, plus(coalesce(dateDiff('week', toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-12 00:00:00', 6, 'America/Phoenix')), 3), toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-26 23:59:59', 6, 'America/Phoenix')), 3))), 1))) AS date,
         arrayMap(_match_date -> arraySum(arraySlice(groupArray(count), indexOf(groupArray(day_start) AS _days_for_count, _match_date) AS _index, plus(minus(arrayLastIndex(x -> ifNull(equals(x, _match_date), isNull(x)
                                                                                                                                                                                        and isNull(_match_date)), _days_for_count), _index), 1))), date) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start AS day_start
     FROM
       (SELECT count() AS total,
               toStartOfWeek(toTimeZone(e.timestamp, 'America/Phoenix'), 3) AS day_start
        FROM events AS e SAMPLE 1
        WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'America/Phoenix'), toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-12 00:00:00', 6, 'America/Phoenix')), 3)), lessOrEquals(toTimeZone(e.timestamp, 'America/Phoenix'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-26 23:59:59', 6, 'America/Phoenix'))), equals(e.event, 'sign up'))
        GROUP BY day_start)
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY arraySum(total) DESC
  LIMIT 50000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1,
                       format_csv_allow_double_quotes=0,
                       max_ast_elements=1000000,
                       max_expanded_ast_elements=1000000,
                       max_query_size=524288,
                       max_bytes_before_external_group_by=0
  '''
# ---
# name: TestTrends.test_timezones_weekly_plus_utc
  '''
  SELECT arrayMap(number -> plus(toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-12 00:00:00', 6, 'Asia/Tokyo')), 0), toIntervalWeek(number)), range(0, plus(coalesce(dateDiff('week', toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-12 00:00:00', 6, 'Asia/Tokyo')), 0), toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-26 23:59:59', 6, 'Asia/Tokyo')), 0))), 1))) AS date,
         arrayMap(_match_date -> arraySum(arraySlice(groupArray(count), indexOf(groupArray(day_start) AS _days_for_count, _match_date) AS _index, plus(minus(arrayLastIndex(x -> ifNull(equals(x, _match_date), isNull(x)
                                                                                                                                                                                        and isNull(_match_date)), _days_for_count), _index), 1))), date) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start AS day_start
     FROM
       (SELECT count() AS total,
               toStartOfWeek(toTimeZone(e.timestamp, 'Asia/Tokyo'), 0) AS day_start
        FROM events AS e SAMPLE 1
        WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'Asia/Tokyo'), toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-12 00:00:00', 6, 'Asia/Tokyo')), 0)), lessOrEquals(toTimeZone(e.timestamp, 'Asia/Tokyo'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-26 23:59:59', 6, 'Asia/Tokyo'))), equals(e.event, 'sign up'))
        GROUP BY day_start)
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY arraySum(total) DESC
  LIMIT 50000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1,
                       format_csv_allow_double_quotes=0,
                       max_ast_elements=1000000,
                       max_expanded_ast_elements=1000000,
                       max_query_size=524288,
                       max_bytes_before_external_group_by=0
  '''
# ---
# name: TestTrends.test_timezones_weekly_plus_utc.1
  '''
  SELECT arrayMap(number -> plus(toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-12 00:00:00', 6, 'Asia/Tokyo')), 3), toIntervalWeek(number)), range(0, plus(coalesce(dateDiff('week', toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-12 00:00:00', 6, 'Asia/Tokyo')), 3), toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-26 23:59:59', 6, 'Asia/Tokyo')), 3))), 1))) AS date,
         arrayMap(_match_date -> arraySum(arraySlice(groupArray(count), indexOf(groupArray(day_start) AS _days_for_count, _match_date) AS _index, plus(minus(arrayLastIndex(x -> ifNull(equals(x, _match_date), isNull(x)
                                                                                                                                                                                        and isNull(_match_date)), _days_for_count), _index), 1))), date) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start AS day_start
     FROM
       (SELECT count() AS total,
               toStartOfWeek(toTimeZone(e.timestamp, 'Asia/Tokyo'), 3) AS day_start
        FROM events AS e SAMPLE 1
        WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'Asia/Tokyo'), toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-12 00:00:00', 6, 'Asia/Tokyo')), 3)), lessOrEquals(toTimeZone(e.timestamp, 'Asia/Tokyo'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-26 23:59:59', 6, 'Asia/Tokyo'))), equals(e.event, 'sign up'))
        GROUP BY day_start)
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY arraySum(total) DESC
  LIMIT 50000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1,
                       format_csv_allow_double_quotes=0,
                       max_ast_elements=1000000,
                       max_expanded_ast_elements=1000000,
                       max_query_size=524288,
                       max_bytes_before_external_group_by=0
  '''
# ---
# name: TestTrends.test_trend_breakdown_user_props_with_filter_with_partial_property_pushdowns
  '''
  SELECT groupArray(1)(date)[1] AS date,
                      arrayFold((acc, x) -> arrayMap(i -> plus(acc[i], x[i]), range(1, plus(length(date), 1))), groupArray(total), arrayWithConstant(length(date), reinterpretAsFloat64(0))) AS total,
                      if(ifNull(greaterOrEquals(row_number, 25), 0), '$$_posthog_breakdown_other_$$', toString(breakdown_value)) AS breakdown_value
  FROM
    (SELECT arrayMap(number -> plus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC'))), toIntervalDay(number)), range(0, plus(coalesce(dateDiff('day', toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC'))), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-07-01 23:59:59', 6, 'UTC'))))), 1))) AS date,
            arrayMap(_match_date -> arraySum(arraySlice(groupArray(count), indexOf(groupArray(day_start) AS _days_for_count, _match_date) AS _index, plus(minus(arrayLastIndex(x -> ifNull(equals(x, _match_date), isNull(x)
                                                                                                                                                                                           and isNull(_match_date)), _days_for_count), _index), 1))), date) AS total,
            ifNull(toString(breakdown_value), '$$_posthog_breakdown_null_$$') AS breakdown_value,
            rowNumberInAllBlocks() AS row_number
     FROM
       (SELECT sum(total) AS count,
               day_start AS day_start,
               breakdown_value AS breakdown_value
        FROM
          (SELECT count() AS total,
                  toStartOfDay(toTimeZone(e.timestamp, 'UTC')) AS day_start,
                  ifNull(nullIf(toString(e__pdi__person.properties___email), ''), '$$_posthog_breakdown_null_$$') AS breakdown_value
           FROM events AS e SAMPLE 1
           INNER JOIN
             (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS e__pdi___person_id,
                     argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                     person_distinct_id2.distinct_id AS distinct_id
              FROM person_distinct_id2
              WHERE equals(person_distinct_id2.team_id, 2)
              GROUP BY person_distinct_id2.distinct_id
              HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
           LEFT JOIN
             (SELECT person.id AS id,
                     replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, 'email'), ''), 'null'), '^"|"$', '') AS properties___email,
                     replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, '$os'), ''), 'null'), '^"|"$', '') AS `properties___$os`,
                     replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, '$browser'), ''), 'null'), '^"|"$', '') AS `properties___$browser`
              FROM person
              WHERE and(equals(person.team_id, 2), ifNull(in(tuple(person.id, person.version),
                                                               (SELECT person.id AS id, max(person.version) AS version
                                                                FROM person
                                                                WHERE equals(person.team_id, 2)
                                                                GROUP BY person.id
                                                                HAVING and(ifNull(equals(argMax(person.is_deleted, person.version), 0), 0), ifNull(less(argMax(person.created_at, person.version), plus(now64(6, 'UTC'), toIntervalDay(1))), 0)))), 0)) SETTINGS optimize_aggregation_in_order=1) AS e__pdi__person ON equals(e__pdi.e__pdi___person_id, e__pdi__person.id)
           WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-07-01 23:59:59', 6, 'UTC'))), equals(e.event, 'sign up'), and(or(ifNull(notILike(e__pdi__person.properties___email, '%@posthog.com%'), 1), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, 'key'), ''), 'null'), '^"|"$', ''), 'val'), 0)), or(ifNull(equals(e__pdi__person.`properties___$os`, 'android'), 0), ifNull(equals(e__pdi__person.`properties___$browser`, 'safari'), 0))), true)
           GROUP BY day_start,
                    breakdown_value)
        GROUP BY day_start,
                 breakdown_value
        ORDER BY day_start ASC, breakdown_value ASC)
     GROUP BY breakdown_value
     ORDER BY arraySum(total) DESC, breakdown_value ASC)
  WHERE isNotNull(breakdown_value)
  GROUP BY breakdown_value
  ORDER BY if(ifNull(equals(breakdown_value, '$$_posthog_breakdown_other_$$'), 0), 2, if(ifNull(equals(breakdown_value, '$$_posthog_breakdown_null_$$'), 0), 1, 0)) ASC, arraySum(total) DESC, breakdown_value ASC
  LIMIT 50000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1,
                       format_csv_allow_double_quotes=0,
                       max_ast_elements=1000000,
                       max_expanded_ast_elements=1000000,
                       max_query_size=524288,
                       max_bytes_before_external_group_by=0
  '''
# ---
# name: TestTrends.test_trend_breakdown_user_props_with_filter_with_partial_property_pushdowns.1
  '''
  SELECT groupArray(1)(date)[1] AS date,
                      arrayFold((acc, x) -> arrayMap(i -> plus(acc[i], x[i]), range(1, plus(length(date), 1))), groupArray(total), arrayWithConstant(length(date), reinterpretAsFloat64(0))) AS total,
                      if(ifNull(greaterOrEquals(row_number, 25), 0), '$$_posthog_breakdown_other_$$', toString(breakdown_value)) AS breakdown_value
  FROM
    (SELECT arrayMap(number -> plus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC'))), toIntervalDay(number)), range(0, plus(coalesce(dateDiff('day', toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC'))), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-07-01 23:59:59', 6, 'UTC'))))), 1))) AS date,
            arrayMap(_match_date -> arraySum(arraySlice(groupArray(count), indexOf(groupArray(day_start) AS _days_for_count, _match_date) AS _index, plus(minus(arrayLastIndex(x -> ifNull(equals(x, _match_date), isNull(x)
                                                                                                                                                                                           and isNull(_match_date)), _days_for_count), _index), 1))), date) AS total,
            ifNull(toString(breakdown_value), '$$_posthog_breakdown_null_$$') AS breakdown_value,
            rowNumberInAllBlocks() AS row_number
     FROM
       (SELECT sum(total) AS count,
               day_start AS day_start,
               breakdown_value AS breakdown_value
        FROM
          (SELECT count() AS total,
                  toStartOfDay(toTimeZone(e.timestamp, 'UTC')) AS day_start,
                  ifNull(nullIf(toString(e__pdi__person.properties___email), ''), '$$_posthog_breakdown_null_$$') AS breakdown_value
           FROM events AS e SAMPLE 1
           INNER JOIN
             (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS e__pdi___person_id,
                     argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                     person_distinct_id2.distinct_id AS distinct_id
              FROM person_distinct_id2
              WHERE equals(person_distinct_id2.team_id, 2)
              GROUP BY person_distinct_id2.distinct_id
              HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
           LEFT JOIN
             (SELECT person.id AS id,
                     replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, 'email'), ''), 'null'), '^"|"$', '') AS properties___email,
                     replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, '$os'), ''), 'null'), '^"|"$', '') AS `properties___$os`,
                     replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, '$browser'), ''), 'null'), '^"|"$', '') AS `properties___$browser`
              FROM person
              WHERE and(equals(person.team_id, 2), ifNull(in(tuple(person.id, person.version),
                                                               (SELECT person.id AS id, max(person.version) AS version
                                                                FROM person
                                                                WHERE equals(person.team_id, 2)
                                                                GROUP BY person.id
                                                                HAVING and(ifNull(equals(argMax(person.is_deleted, person.version), 0), 0), ifNull(less(argMax(person.created_at, person.version), plus(now64(6, 'UTC'), toIntervalDay(1))), 0)))), 0)) SETTINGS optimize_aggregation_in_order=1) AS e__pdi__person ON equals(e__pdi.e__pdi___person_id, e__pdi__person.id)
           WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-07-01 23:59:59', 6, 'UTC'))), equals(e.event, 'sign up'), and(ifNull(equals(e__pdi__person.`properties___$os`, 'android'), 0), ifNull(equals(e__pdi__person.`properties___$browser`, 'chrome'), 0)), and(ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, 'key'), ''), 'null'), '^"|"$', ''), 'val'), 0), ifNull(ilike(e__pdi__person.properties___email, '%@posthog.com%'), 0)), true)
           GROUP BY day_start,
                    breakdown_value)
        GROUP BY day_start,
                 breakdown_value
        ORDER BY day_start ASC, breakdown_value ASC)
     GROUP BY breakdown_value
     ORDER BY arraySum(total) DESC, breakdown_value ASC)
  WHERE isNotNull(breakdown_value)
  GROUP BY breakdown_value
  ORDER BY if(ifNull(equals(breakdown_value, '$$_posthog_breakdown_other_$$'), 0), 2, if(ifNull(equals(breakdown_value, '$$_posthog_breakdown_null_$$'), 0), 1, 0)) ASC, arraySum(total) DESC, breakdown_value ASC
  LIMIT 50000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1,
                       format_csv_allow_double_quotes=0,
                       max_ast_elements=1000000,
                       max_expanded_ast_elements=1000000,
                       max_query_size=524288,
                       max_bytes_before_external_group_by=0
  '''
# ---
# name: TestTrends.test_trends_aggregate_by_distinct_id
  '''
  SELECT arrayMap(number -> plus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-24 00:00:00', 6, 'UTC'))), toIntervalDay(number)), range(0, plus(coalesce(dateDiff('day', toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-24 00:00:00', 6, 'UTC'))), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-31 23:59:59', 6, 'UTC'))))), 1))) AS date,
         arrayMap(_match_date -> arraySum(arraySlice(groupArray(count), indexOf(groupArray(day_start) AS _days_for_count, _match_date) AS _index, plus(minus(arrayLastIndex(x -> ifNull(equals(x, _match_date), isNull(x)
                                                                                                                                                                                        and isNull(_match_date)), _days_for_count), _index), 1))), date) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start AS day_start
     FROM
       (SELECT count(DISTINCT e.distinct_id) AS total,
               toStartOfDay(toTimeZone(e.timestamp, 'UTC')) AS day_start
        FROM events AS e SAMPLE 1
        WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-24 00:00:00', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-31 23:59:59', 6, 'UTC'))), equals(e.event, 'sign up'))
        GROUP BY day_start)
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY arraySum(total) DESC
  LIMIT 50000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1,
                       format_csv_allow_double_quotes=0,
                       max_ast_elements=1000000,
                       max_expanded_ast_elements=1000000,
                       max_query_size=524288,
                       max_bytes_before_external_group_by=0
  '''
# ---
# name: TestTrends.test_trends_aggregate_by_distinct_id.1
  '''
  SELECT arrayMap(number -> plus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-24 00:00:00', 6, 'UTC'))), toIntervalDay(number)), range(0, plus(coalesce(dateDiff('day', toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-24 00:00:00', 6, 'UTC'))), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-31 23:59:59', 6, 'UTC'))))), 1))) AS date,
         arrayMap(_match_date -> arraySum(arraySlice(groupArray(count), indexOf(groupArray(day_start) AS _days_for_count, _match_date) AS _index, plus(minus(arrayLastIndex(x -> ifNull(equals(x, _match_date), isNull(x)
                                                                                                                                                                                        and isNull(_match_date)), _days_for_count), _index), 1))), date) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start AS day_start
     FROM
       (SELECT count(DISTINCT e.distinct_id) AS total,
               toStartOfDay(toTimeZone(e.timestamp, 'UTC')) AS day_start
        FROM events AS e SAMPLE 1
        INNER JOIN
          (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS e__pdi___person_id,
                  argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                  person_distinct_id2.distinct_id AS distinct_id
           FROM person_distinct_id2
           WHERE equals(person_distinct_id2.team_id, 2)
           GROUP BY person_distinct_id2.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
        LEFT JOIN
          (SELECT person.id AS id,
                  replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, '$some_prop'), ''), 'null'), '^"|"$', '') AS `properties___$some_prop`
           FROM person
           WHERE and(equals(person.team_id, 2), ifNull(in(tuple(person.id, person.version),
                                                            (SELECT person.id AS id, max(person.version) AS version
                                                             FROM person
                                                             WHERE equals(person.team_id, 2)
                                                             GROUP BY person.id
                                                             HAVING and(ifNull(equals(argMax(person.is_deleted, person.version), 0), 0), ifNull(less(argMax(person.created_at, person.version), plus(now64(6, 'UTC'), toIntervalDay(1))), 0)))), 0)) SETTINGS optimize_aggregation_in_order=1) AS e__pdi__person ON equals(e__pdi.e__pdi___person_id, e__pdi__person.id)
        WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-24 00:00:00', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-31 23:59:59', 6, 'UTC'))), equals(e.event, 'sign up'), ifNull(equals(e__pdi__person.`properties___$some_prop`, 'some_val'), 0))
        GROUP BY day_start)
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY arraySum(total) DESC
  LIMIT 50000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1,
                       format_csv_allow_double_quotes=0,
                       max_ast_elements=1000000,
                       max_expanded_ast_elements=1000000,
                       max_query_size=524288,
                       max_bytes_before_external_group_by=0
  '''
# ---
# name: TestTrends.test_trends_aggregate_by_distinct_id.2
  '''
  SELECT groupArray(1)(date)[1] AS date,
                      arrayFold((acc, x) -> arrayMap(i -> plus(acc[i], x[i]), range(1, plus(length(date), 1))), groupArray(total), arrayWithConstant(length(date), reinterpretAsFloat64(0))) AS total,
                      if(ifNull(greaterOrEquals(row_number, 25), 0), '$$_posthog_breakdown_other_$$', toString(breakdown_value)) AS breakdown_value
  FROM
    (SELECT arrayMap(number -> plus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-24 00:00:00', 6, 'UTC'))), toIntervalDay(number)), range(0, plus(coalesce(dateDiff('day', toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-24 00:00:00', 6, 'UTC'))), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-31 23:59:59', 6, 'UTC'))))), 1))) AS date,
            arrayMap(_match_date -> arraySum(arraySlice(groupArray(count), indexOf(groupArray(day_start) AS _days_for_count, _match_date) AS _index, plus(minus(arrayLastIndex(x -> ifNull(equals(x, _match_date), isNull(x)
                                                                                                                                                                                           and isNull(_match_date)), _days_for_count), _index), 1))), date) AS total,
            ifNull(toString(breakdown_value), '$$_posthog_breakdown_null_$$') AS breakdown_value,
            rowNumberInAllBlocks() AS row_number
     FROM
       (SELECT sum(total) AS count,
               day_start AS day_start,
               breakdown_value AS breakdown_value
        FROM
          (SELECT count(DISTINCT e.distinct_id) AS total,
                  toStartOfDay(toTimeZone(e.timestamp, 'UTC')) AS day_start,
                  ifNull(nullIf(toString(e__pdi__person.`properties___$some_prop`), ''), '$$_posthog_breakdown_null_$$') AS breakdown_value
           FROM events AS e SAMPLE 1
           INNER JOIN
             (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS e__pdi___person_id,
                     argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                     person_distinct_id2.distinct_id AS distinct_id
              FROM person_distinct_id2
              WHERE equals(person_distinct_id2.team_id, 2)
              GROUP BY person_distinct_id2.distinct_id
              HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
           LEFT JOIN
             (SELECT person.id AS id,
                     replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, '$some_prop'), ''), 'null'), '^"|"$', '') AS `properties___$some_prop`
              FROM person
              WHERE and(equals(person.team_id, 2), ifNull(in(tuple(person.id, person.version),
                                                               (SELECT person.id AS id, max(person.version) AS version
                                                                FROM person
                                                                WHERE equals(person.team_id, 2)
                                                                GROUP BY person.id
                                                                HAVING and(ifNull(equals(argMax(person.is_deleted, person.version), 0), 0), ifNull(less(argMax(person.created_at, person.version), plus(now64(6, 'UTC'), toIntervalDay(1))), 0)))), 0)) SETTINGS optimize_aggregation_in_order=1) AS e__pdi__person ON equals(e__pdi.e__pdi___person_id, e__pdi__person.id)
           WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-24 00:00:00', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-31 23:59:59', 6, 'UTC'))), equals(e.event, 'sign up'), true)
           GROUP BY day_start,
                    breakdown_value)
        GROUP BY day_start,
                 breakdown_value
        ORDER BY day_start ASC, breakdown_value ASC)
     GROUP BY breakdown_value
     ORDER BY arraySum(total) DESC, breakdown_value ASC)
  WHERE isNotNull(breakdown_value)
  GROUP BY breakdown_value
  ORDER BY if(ifNull(equals(breakdown_value, '$$_posthog_breakdown_other_$$'), 0), 2, if(ifNull(equals(breakdown_value, '$$_posthog_breakdown_null_$$'), 0), 1, 0)) ASC, arraySum(total) DESC, breakdown_value ASC
  LIMIT 50000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1,
                       format_csv_allow_double_quotes=0,
                       max_ast_elements=1000000,
                       max_expanded_ast_elements=1000000,
                       max_query_size=524288,
                       max_bytes_before_external_group_by=0
  '''
# ---
# name: TestTrends.test_trends_aggregate_by_distinct_id.3
  '''
  SELECT arrayMap(number -> plus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-24 00:00:00', 6, 'UTC'))), toIntervalDay(number)), range(0, plus(coalesce(dateDiff('day', toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-24 00:00:00', 6, 'UTC'))), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-31 23:59:59', 6, 'UTC'))))), 1))) AS date,
         arrayMap(_match_date -> arraySum(arraySlice(groupArray(count), indexOf(groupArray(day_start) AS _days_for_count, _match_date) AS _index, plus(minus(arrayLastIndex(x -> ifNull(equals(x, _match_date), isNull(x)
                                                                                                                                                                                        and isNull(_match_date)), _days_for_count), _index), 1))), date) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start AS day_start
     FROM
       (SELECT counts AS total,
               toStartOfDay(timestamp) AS day_start
        FROM
          (SELECT d.timestamp AS timestamp,
                  count(DISTINCT e.actor_id) AS counts
           FROM
             (SELECT minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-31 23:59:59', 6, 'UTC'))), toIntervalDay(numbers.number)) AS timestamp
              FROM numbers(dateDiff('day', minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-24 00:00:00', 6, 'UTC'))), toIntervalDay(30)), assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-31 23:59:59', 6, 'UTC')))) AS numbers) AS d
           CROSS JOIN
             (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                     e.distinct_id AS actor_id
              FROM events AS e SAMPLE 1
              WHERE and(equals(e.team_id, 2), equals(e.event, 'sign up'), ifNull(greaterOrEquals(timestamp, minus(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-24 00:00:00', 6, 'UTC')), toIntervalDay(30))), 0), ifNull(lessOrEquals(timestamp, assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-31 23:59:59', 6, 'UTC'))), 0))
              GROUP BY timestamp, actor_id) AS e
           WHERE and(ifNull(lessOrEquals(e.timestamp, plus(d.timestamp, toIntervalDay(1))), 0), ifNull(greater(e.timestamp, minus(d.timestamp, toIntervalDay(29))), 0))
           GROUP BY d.timestamp
           ORDER BY d.timestamp ASC)
        WHERE and(ifNull(greaterOrEquals(timestamp, toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-24 00:00:00', 6, 'UTC')))), 0), ifNull(lessOrEquals(timestamp, assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-31 23:59:59', 6, 'UTC'))), 0)))
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY arraySum(total) DESC
  LIMIT 50000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1,
                       format_csv_allow_double_quotes=0,
                       max_ast_elements=1000000,
                       max_expanded_ast_elements=1000000,
                       max_query_size=524288,
                       max_bytes_before_external_group_by=0
  '''
# ---
# name: TestTrends.test_trends_aggregate_by_distinct_id.4
  '''
  SELECT arrayMap(number -> plus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-24 00:00:00', 6, 'UTC'))), toIntervalDay(number)), range(0, plus(coalesce(dateDiff('day', toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-24 00:00:00', 6, 'UTC'))), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-31 23:59:59', 6, 'UTC'))))), 1))) AS date,
         arrayMap(_match_date -> arraySum(arraySlice(groupArray(count), indexOf(groupArray(day_start) AS _days_for_count, _match_date) AS _index, plus(minus(arrayLastIndex(x -> ifNull(equals(x, _match_date), isNull(x)
                                                                                                                                                                                        and isNull(_match_date)), _days_for_count), _index), 1))), date) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start AS day_start
     FROM
       (SELECT counts AS total,
               toStartOfDay(timestamp) AS day_start
        FROM
          (SELECT d.timestamp AS timestamp,
                  count(DISTINCT e.actor_id) AS counts
           FROM
             (SELECT minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-31 23:59:59', 6, 'UTC'))), toIntervalDay(numbers.number)) AS timestamp
              FROM numbers(dateDiff('day', minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-24 00:00:00', 6, 'UTC'))), toIntervalDay(7)), assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-31 23:59:59', 6, 'UTC')))) AS numbers) AS d
           CROSS JOIN
             (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                     e.distinct_id AS actor_id
              FROM events AS e SAMPLE 1
              WHERE and(equals(e.team_id, 2), equals(e.event, 'sign up'), ifNull(greaterOrEquals(timestamp, minus(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-24 00:00:00', 6, 'UTC')), toIntervalDay(7))), 0), ifNull(lessOrEquals(timestamp, assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-31 23:59:59', 6, 'UTC'))), 0))
              GROUP BY timestamp, actor_id) AS e
           WHERE and(ifNull(lessOrEquals(e.timestamp, plus(d.timestamp, toIntervalDay(1))), 0), ifNull(greater(e.timestamp, minus(d.timestamp, toIntervalDay(6))), 0))
           GROUP BY d.timestamp
           ORDER BY d.timestamp ASC)
        WHERE and(ifNull(greaterOrEquals(timestamp, toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-24 00:00:00', 6, 'UTC')))), 0), ifNull(lessOrEquals(timestamp, assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-31 23:59:59', 6, 'UTC'))), 0)))
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY arraySum(total) DESC
  LIMIT 50000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1,
                       format_csv_allow_double_quotes=0,
                       max_ast_elements=1000000,
                       max_expanded_ast_elements=1000000,
                       max_query_size=524288,
                       max_bytes_before_external_group_by=0
  '''
# ---
# name: TestTrends.test_trends_aggregate_by_distinct_id.5
  '''
  SELECT groupArray(1)(date)[1] AS date,
                      arrayFold((acc, x) -> arrayMap(i -> plus(acc[i], x[i]), range(1, plus(length(date), 1))), groupArray(total), arrayWithConstant(length(date), reinterpretAsFloat64(0))) AS total,
                      if(ifNull(greaterOrEquals(row_number, 25), 0), '$$_posthog_breakdown_other_$$', toString(breakdown_value)) AS breakdown_value
  FROM
    (SELECT arrayMap(number -> plus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-24 00:00:00', 6, 'UTC'))), toIntervalDay(number)), range(0, plus(coalesce(dateDiff('day', toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-24 00:00:00', 6, 'UTC'))), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-31 23:59:59', 6, 'UTC'))))), 1))) AS date,
            arrayMap(_match_date -> arraySum(arraySlice(groupArray(count), indexOf(groupArray(day_start) AS _days_for_count, _match_date) AS _index, plus(minus(arrayLastIndex(x -> ifNull(equals(x, _match_date), isNull(x)
                                                                                                                                                                                           and isNull(_match_date)), _days_for_count), _index), 1))), date) AS total,
            ifNull(toString(breakdown_value), '$$_posthog_breakdown_null_$$') AS breakdown_value,
            rowNumberInAllBlocks() AS row_number
     FROM
       (SELECT sum(total) AS count,
               day_start AS day_start,
               breakdown_value AS breakdown_value
        FROM
          (SELECT count(DISTINCT e.distinct_id) AS total,
                  toStartOfDay(toTimeZone(e.timestamp, 'UTC')) AS day_start,
                  ifNull(nullIf(toString(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$some_prop'), ''), 'null'), '^"|"$', '')), ''), '$$_posthog_breakdown_null_$$') AS breakdown_value
           FROM events AS e SAMPLE 1
           WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-24 00:00:00', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-31 23:59:59', 6, 'UTC'))), equals(e.event, 'sign up'), true)
           GROUP BY day_start,
                    breakdown_value)
        GROUP BY day_start,
                 breakdown_value
        ORDER BY day_start ASC, breakdown_value ASC)
     GROUP BY breakdown_value
     ORDER BY arraySum(total) DESC, breakdown_value ASC)
  WHERE isNotNull(breakdown_value)
  GROUP BY breakdown_value
  ORDER BY if(ifNull(equals(breakdown_value, '$$_posthog_breakdown_other_$$'), 0), 2, if(ifNull(equals(breakdown_value, '$$_posthog_breakdown_null_$$'), 0), 1, 0)) ASC, arraySum(total) DESC, breakdown_value ASC
  LIMIT 50000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1,
                       format_csv_allow_double_quotes=0,
                       max_ast_elements=1000000,
                       max_expanded_ast_elements=1000000,
                       max_query_size=524288,
                       max_bytes_before_external_group_by=0
  '''
# ---
# name: TestTrends.test_trends_any_event_total_count
  '''
  SELECT arrayMap(number -> plus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 00:00:00', 6, 'UTC'))), toIntervalDay(number)), range(0, plus(coalesce(dateDiff('day', toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 00:00:00', 6, 'UTC'))), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))))), 1))) AS date,
         arrayMap(_match_date -> arraySum(arraySlice(groupArray(count), indexOf(groupArray(day_start) AS _days_for_count, _match_date) AS _index, plus(minus(arrayLastIndex(x -> ifNull(equals(x, _match_date), isNull(x)
                                                                                                                                                                                        and isNull(_match_date)), _days_for_count), _index), 1))), date) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start AS day_start
     FROM
       (SELECT count() AS total,
               toStartOfDay(toTimeZone(e.timestamp, 'UTC')) AS day_start
        FROM events AS e SAMPLE 1
        WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 00:00:00', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))))
        GROUP BY day_start)
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY arraySum(total) DESC
  LIMIT 50000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1,
                       format_csv_allow_double_quotes=0,
                       max_ast_elements=1000000,
                       max_expanded_ast_elements=1000000,
                       max_query_size=524288,
                       max_bytes_before_external_group_by=0
  '''
# ---
# name: TestTrends.test_trends_any_event_total_count.1
  '''
  SELECT arrayMap(number -> plus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 00:00:00', 6, 'UTC'))), toIntervalDay(number)), range(0, plus(coalesce(dateDiff('day', toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 00:00:00', 6, 'UTC'))), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))))), 1))) AS date,
         arrayMap(_match_date -> arraySum(arraySlice(groupArray(count), indexOf(groupArray(day_start) AS _days_for_count, _match_date) AS _index, plus(minus(arrayLastIndex(x -> ifNull(equals(x, _match_date), isNull(x)
                                                                                                                                                                                        and isNull(_match_date)), _days_for_count), _index), 1))), date) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start AS day_start
     FROM
       (SELECT count() AS total,
               toStartOfDay(toTimeZone(e.timestamp, 'UTC')) AS day_start
        FROM events AS e SAMPLE 1
        WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 00:00:00', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), equals(e.event, 'sign up'))
        GROUP BY day_start)
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY arraySum(total) DESC
  LIMIT 50000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1,
                       format_csv_allow_double_quotes=0,
                       max_ast_elements=1000000,
                       max_expanded_ast_elements=1000000,
                       max_query_size=524288,
                       max_bytes_before_external_group_by=0
  '''
# ---
# name: TestTrends.test_trends_breakdown_cumulative
  '''
  SELECT groupArray(1)(date)[1] AS date,
                      arrayFold((acc, x) -> arrayMap(i -> plus(acc[i], x[i]), range(1, plus(length(date), 1))), groupArray(total), arrayWithConstant(length(date), reinterpretAsFloat64(0))) AS total,
                      if(ifNull(greaterOrEquals(row_number, 25), 0), '$$_posthog_breakdown_other_$$', toString(breakdown_value)) AS breakdown_value
  FROM
    (SELECT arrayMap(number -> plus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 00:00:00', 6, 'UTC'))), toIntervalDay(number)), range(0, plus(coalesce(dateDiff('day', toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 00:00:00', 6, 'UTC'))), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))))), 1))) AS date,
            arrayFill(x -> ifNull(greater(x, 0), 0), arrayMap(_match_date -> arraySum(arraySlice(groupArray(count), indexOf(groupArray(day_start) AS _days_for_count, _match_date) AS _index, plus(minus(arrayLastIndex(x -> ifNull(equals(x, _match_date), isNull(x)
                                                                                                                                                                                                                                    and isNull(_match_date)), _days_for_count), _index), 1))), date)) AS total,
            ifNull(toString(breakdown_value), '$$_posthog_breakdown_null_$$') AS breakdown_value,
            rowNumberInAllBlocks() AS row_number
     FROM
       (SELECT day_start AS day_start,
               sum(count) OVER (PARTITION BY breakdown_value
                                ORDER BY day_start ASC) AS count,
                               breakdown_value AS breakdown_value
        FROM
          (SELECT sum(total) AS count,
                  day_start AS day_start,
                  breakdown_value AS breakdown_value
           FROM
             (SELECT count(DISTINCT e__pdi.person_id) AS total,
                     min(toStartOfDay(toTimeZone(e.timestamp, 'UTC'))) AS day_start,
                     ifNull(nullIf(toString(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$some_property'), ''), 'null'), '^"|"$', '')), ''), '$$_posthog_breakdown_null_$$') AS breakdown_value
              FROM events AS e SAMPLE 1
              INNER JOIN
                (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                        person_distinct_id2.distinct_id AS distinct_id
                 FROM person_distinct_id2
                 WHERE equals(person_distinct_id2.team_id, 2)
                 GROUP BY person_distinct_id2.distinct_id
                 HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
              WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 00:00:00', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), equals(e.event, 'sign up'), true)
              GROUP BY e__pdi.person_id,
                       breakdown_value)
           GROUP BY day_start,
                    breakdown_value
           ORDER BY day_start ASC, breakdown_value ASC)
        ORDER BY day_start ASC)
     GROUP BY breakdown_value
     ORDER BY arraySum(total) DESC, breakdown_value ASC)
  WHERE isNotNull(breakdown_value)
  GROUP BY breakdown_value
  ORDER BY if(ifNull(equals(breakdown_value, '$$_posthog_breakdown_other_$$'), 0), 2, if(ifNull(equals(breakdown_value, '$$_posthog_breakdown_null_$$'), 0), 1, 0)) ASC, arraySum(total) DESC, breakdown_value ASC
  LIMIT 50000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1,
                       format_csv_allow_double_quotes=0,
                       max_ast_elements=1000000,
                       max_expanded_ast_elements=1000000,
                       max_query_size=524288,
                       max_bytes_before_external_group_by=0
  '''
# ---
# name: TestTrends.test_trends_breakdown_cumulative_poe_v2
  '''
  SELECT groupArray(1)(date)[1] AS date,
                      arrayFold((acc, x) -> arrayMap(i -> plus(acc[i], x[i]), range(1, plus(length(date), 1))), groupArray(total), arrayWithConstant(length(date), reinterpretAsFloat64(0))) AS total,
                      if(ifNull(greaterOrEquals(row_number, 25), 0), '$$_posthog_breakdown_other_$$', toString(breakdown_value)) AS breakdown_value
  FROM
    (SELECT arrayMap(number -> plus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 00:00:00', 6, 'UTC'))), toIntervalDay(number)), range(0, plus(coalesce(dateDiff('day', toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 00:00:00', 6, 'UTC'))), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))))), 1))) AS date,
            arrayFill(x -> ifNull(greater(x, 0), 0), arrayMap(_match_date -> arraySum(arraySlice(groupArray(count), indexOf(groupArray(day_start) AS _days_for_count, _match_date) AS _index, plus(minus(arrayLastIndex(x -> ifNull(equals(x, _match_date), isNull(x)
                                                                                                                                                                                                                                    and isNull(_match_date)), _days_for_count), _index), 1))), date)) AS total,
            ifNull(toString(breakdown_value), '$$_posthog_breakdown_null_$$') AS breakdown_value,
            rowNumberInAllBlocks() AS row_number
     FROM
       (SELECT day_start AS day_start,
               sum(count) OVER (PARTITION BY breakdown_value
                                ORDER BY day_start ASC) AS count,
                               breakdown_value AS breakdown_value
        FROM
          (SELECT sum(total) AS count,
                  day_start AS day_start,
                  breakdown_value AS breakdown_value
           FROM
             (SELECT count(DISTINCT if(not(empty(e__override.distinct_id)), e__override.person_id, e.person_id)) AS total,
                     min(toStartOfDay(toTimeZone(e.timestamp, 'UTC'))) AS day_start,
                     ifNull(nullIf(toString(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$some_property'), ''), 'null'), '^"|"$', '')), ''), '$$_posthog_breakdown_null_$$') AS breakdown_value
              FROM events AS e SAMPLE 1
              LEFT OUTER JOIN
                (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                        person_distinct_id_overrides.distinct_id AS distinct_id
                 FROM person_distinct_id_overrides
                 WHERE equals(person_distinct_id_overrides.team_id, 2)
                 GROUP BY person_distinct_id_overrides.distinct_id
                 HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0)) AS e__override ON equals(e.distinct_id, e__override.distinct_id)
              WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 00:00:00', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), equals(e.event, 'sign up'), true)
              GROUP BY if(not(empty(e__override.distinct_id)), e__override.person_id, e.person_id),
                       breakdown_value)
           GROUP BY day_start,
                    breakdown_value
           ORDER BY day_start ASC, breakdown_value ASC)
        ORDER BY day_start ASC)
     GROUP BY breakdown_value
     ORDER BY arraySum(total) DESC, breakdown_value ASC)
  WHERE isNotNull(breakdown_value)
  GROUP BY breakdown_value
  ORDER BY if(ifNull(equals(breakdown_value, '$$_posthog_breakdown_other_$$'), 0), 2, if(ifNull(equals(breakdown_value, '$$_posthog_breakdown_null_$$'), 0), 1, 0)) ASC, arraySum(total) DESC, breakdown_value ASC
  LIMIT 50000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1,
                       format_csv_allow_double_quotes=0,
                       max_ast_elements=1000000,
                       max_expanded_ast_elements=1000000,
                       max_query_size=524288,
                       max_bytes_before_external_group_by=0
  '''
# ---
# name: TestTrends.test_trends_breakdown_normalize_url
  '''
  SELECT groupArray(1)(date)[1] AS date,
                      arrayFold((acc, x) -> arrayMap(i -> plus(acc[i], x[i]), range(1, plus(length(date), 1))), groupArray(total), arrayWithConstant(length(date), reinterpretAsFloat64(0))) AS total,
                      if(ifNull(greaterOrEquals(row_number, 25), 0), '$$_posthog_breakdown_other_$$', toString(breakdown_value)) AS breakdown_value
  FROM
    (SELECT arrayMap(number -> plus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 00:00:00', 6, 'UTC'))), toIntervalDay(number)), range(0, plus(coalesce(dateDiff('day', toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 00:00:00', 6, 'UTC'))), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))))), 1))) AS date,
            arrayFill(x -> ifNull(greater(x, 0), 0), arrayMap(_match_date -> arraySum(arraySlice(groupArray(count), indexOf(groupArray(day_start) AS _days_for_count, _match_date) AS _index, plus(minus(arrayLastIndex(x -> ifNull(equals(x, _match_date), isNull(x)
                                                                                                                                                                                                                                    and isNull(_match_date)), _days_for_count), _index), 1))), date)) AS total,
            ifNull(toString(breakdown_value), '$$_posthog_breakdown_null_$$') AS breakdown_value,
            rowNumberInAllBlocks() AS row_number
     FROM
       (SELECT day_start AS day_start,
               sum(count) OVER (PARTITION BY breakdown_value
                                ORDER BY day_start ASC) AS count,
                               breakdown_value AS breakdown_value
        FROM
          (SELECT sum(total) AS count,
                  day_start AS day_start,
                  breakdown_value AS breakdown_value
           FROM
             (SELECT count(DISTINCT if(not(empty(e__override.distinct_id)), e__override.person_id, e.person_id)) AS total,
                     min(toStartOfDay(toTimeZone(e.timestamp, 'UTC'))) AS day_start,
                     ifNull(nullIf(toString(if(empty(trim(TRAILING '/?#'
                                                          FROM replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$current_url'), ''), 'null'), '^"|"$', ''))), '/', trim(TRAILING '/?#'
                                                                                                                                                                                    FROM replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$current_url'), ''), 'null'), '^"|"$', '')))), ''), '$$_posthog_breakdown_null_$$') AS breakdown_value
              FROM events AS e SAMPLE 1
              LEFT OUTER JOIN
                (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                        person_distinct_id_overrides.distinct_id AS distinct_id
                 FROM person_distinct_id_overrides
                 WHERE equals(person_distinct_id_overrides.team_id, 2)
                 GROUP BY person_distinct_id_overrides.distinct_id
                 HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0)) AS e__override ON equals(e.distinct_id, e__override.distinct_id)
              WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 00:00:00', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), equals(e.event, 'sign up'), true)
              GROUP BY if(not(empty(e__override.distinct_id)), e__override.person_id, e.person_id),
                       breakdown_value)
           GROUP BY day_start,
                    breakdown_value
           ORDER BY day_start ASC, breakdown_value ASC)
        ORDER BY day_start ASC)
     GROUP BY breakdown_value
     ORDER BY arraySum(total) DESC, breakdown_value ASC)
  WHERE isNotNull(breakdown_value)
  GROUP BY breakdown_value
  ORDER BY if(ifNull(equals(breakdown_value, '$$_posthog_breakdown_other_$$'), 0), 2, if(ifNull(equals(breakdown_value, '$$_posthog_breakdown_null_$$'), 0), 1, 0)) ASC, arraySum(total) DESC, breakdown_value ASC
  LIMIT 50000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1,
                       format_csv_allow_double_quotes=0,
                       max_ast_elements=1000000,
                       max_expanded_ast_elements=1000000,
                       max_query_size=524288,
                       max_bytes_before_external_group_by=0
  '''
# ---
# name: TestTrends.test_trends_breakdown_with_session_property_single_aggregate_math_and_breakdown
  '''
  SELECT sum(total) AS total,
         if(ifNull(ifNull(greaterOrEquals(row_number, 26), 0), 0), '$$_posthog_breakdown_other_$$', toString(breakdown_value)) AS breakdown_value
  FROM
    (SELECT total AS total,
            breakdown_value AS breakdown_value,
            row_number() OVER (
                               ORDER BY total DESC) AS row_number
     FROM
       (SELECT quantile(0.5)(session_duration) AS total,
               breakdown_value AS breakdown_value
        FROM
          (SELECT any(e__session.`$session_duration`) AS session_duration,
                  ifNull(nullIf(toString(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$some_property'), ''), 'null'), '^"|"$', '')), ''), '$$_posthog_breakdown_null_$$') AS breakdown_value
           FROM events AS e SAMPLE 1
           LEFT JOIN
             (SELECT dateDiff('second', min(sessions.min_timestamp), max(sessions.max_timestamp)) AS `$session_duration`,
                     sessions.session_id AS session_id
              FROM sessions
              WHERE and(equals(sessions.team_id, 2), ifNull(greaterOrEquals(plus(toTimeZone(sessions.min_timestamp, 'UTC'), toIntervalDay(3)), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 00:00:00', 6, 'UTC')))), 0), ifNull(lessOrEquals(minus(toTimeZone(sessions.min_timestamp, 'UTC'), toIntervalDay(3)), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), 0))
              GROUP BY sessions.session_id,
                       sessions.session_id) AS e__session ON equals(e.`$session_id`, e__session.session_id)
           WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 00:00:00', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), equals(e.event, 'sign up'), true)
           GROUP BY e.`$session_id`,
                    breakdown_value
           ORDER BY 1 DESC, breakdown_value DESC)
        GROUP BY breakdown_value))
  WHERE isNotNull(breakdown_value)
  GROUP BY breakdown_value
  ORDER BY if(ifNull(equals(breakdown_value, '$$_posthog_breakdown_other_$$'), 0), 2, if(ifNull(equals(breakdown_value, '$$_posthog_breakdown_null_$$'), 0), 1, 0)) ASC, total DESC,
                                                                                                                                                                         breakdown_value ASC
  LIMIT 50000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1,
                       format_csv_allow_double_quotes=0,
                       max_ast_elements=1000000,
                       max_expanded_ast_elements=1000000,
                       max_query_size=524288,
                       max_bytes_before_external_group_by=0
  '''
# ---
# name: TestTrends.test_trends_breakdown_with_session_property_single_aggregate_math_and_breakdown.1
  '''
  SELECT sum(total) AS total,
         if(ifNull(ifNull(greaterOrEquals(row_number, 26), 0), 0), '$$_posthog_breakdown_other_$$', toString(breakdown_value)) AS breakdown_value
  FROM
    (SELECT total AS total,
            breakdown_value AS breakdown_value,
            row_number() OVER (
                               ORDER BY total DESC) AS row_number
     FROM
       (SELECT quantile(0.5)(session_duration) AS total,
               breakdown_value AS breakdown_value
        FROM
          (SELECT any(e__session.`$session_duration`) AS session_duration,
                  ifNull(nullIf(toString(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$some_property'), ''), 'null'), '^"|"$', '')), ''), '$$_posthog_breakdown_null_$$') AS breakdown_value
           FROM events AS e SAMPLE 1
           LEFT JOIN
             (SELECT dateDiff('second', min(sessions.min_timestamp), max(sessions.max_timestamp)) AS `$session_duration`,
                     sessions.session_id AS session_id
              FROM sessions
              WHERE and(equals(sessions.team_id, 2), ifNull(greaterOrEquals(plus(toTimeZone(sessions.min_timestamp, 'UTC'), toIntervalDay(3)), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 00:00:00', 6, 'UTC')))), 0), ifNull(lessOrEquals(minus(toTimeZone(sessions.min_timestamp, 'UTC'), toIntervalDay(3)), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), 0))
              GROUP BY sessions.session_id,
                       sessions.session_id) AS e__session ON equals(e.`$session_id`, e__session.session_id)
           WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 00:00:00', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), equals(e.event, 'sign up'), true)
           GROUP BY e.`$session_id`,
                    breakdown_value
           ORDER BY 1 DESC, breakdown_value DESC)
        GROUP BY breakdown_value))
  WHERE isNotNull(breakdown_value)
  GROUP BY breakdown_value
  ORDER BY if(ifNull(equals(breakdown_value, '$$_posthog_breakdown_other_$$'), 0), 2, if(ifNull(equals(breakdown_value, '$$_posthog_breakdown_null_$$'), 0), 1, 0)) ASC, total DESC,
                                                                                                                                                                         breakdown_value ASC
  LIMIT 50000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1,
                       format_csv_allow_double_quotes=0,
                       max_ast_elements=1000000,
                       max_expanded_ast_elements=1000000,
                       max_query_size=524288,
                       max_bytes_before_external_group_by=0
  '''
# ---
# name: TestTrends.test_trends_compare_day_interval_relative_range
  '''
  SELECT arrayMap(number -> plus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 00:00:00', 6, 'UTC'))), toIntervalDay(number)), range(0, plus(coalesce(dateDiff('day', toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 00:00:00', 6, 'UTC'))), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))))), 1))) AS date,
         arrayMap(_match_date -> arraySum(arraySlice(groupArray(count), indexOf(groupArray(day_start) AS _days_for_count, _match_date) AS _index, plus(minus(arrayLastIndex(x -> ifNull(equals(x, _match_date), isNull(x)
                                                                                                                                                                                        and isNull(_match_date)), _days_for_count), _index), 1))), date) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start AS day_start
     FROM
       (SELECT count() AS total,
               toStartOfDay(toTimeZone(e.timestamp, 'UTC')) AS day_start
        FROM events AS e SAMPLE 1
        WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 00:00:00', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), equals(e.event, 'sign up'))
        GROUP BY day_start)
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY arraySum(total) DESC
  LIMIT 50000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1,
                       format_csv_allow_double_quotes=0,
                       max_ast_elements=1000000,
                       max_expanded_ast_elements=1000000,
                       max_query_size=524288,
                       max_bytes_before_external_group_by=0
  '''
# ---
# name: TestTrends.test_trends_compare_day_interval_relative_range.1
  '''
  SELECT arrayMap(number -> plus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-21 00:00:00', 6, 'UTC'))), toIntervalDay(number)), range(0, plus(coalesce(dateDiff('day', toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-21 00:00:00', 6, 'UTC'))), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 23:59:59', 6, 'UTC'))))), 1))) AS date,
         arrayMap(_match_date -> arraySum(arraySlice(groupArray(count), indexOf(groupArray(day_start) AS _days_for_count, _match_date) AS _index, plus(minus(arrayLastIndex(x -> ifNull(equals(x, _match_date), isNull(x)
                                                                                                                                                                                        and isNull(_match_date)), _days_for_count), _index), 1))), date) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start AS day_start
     FROM
       (SELECT count() AS total,
               toStartOfDay(toTimeZone(e.timestamp, 'UTC')) AS day_start
        FROM events AS e SAMPLE 1
        WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-21 00:00:00', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 23:59:59', 6, 'UTC'))), equals(e.event, 'sign up'))
        GROUP BY day_start)
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY arraySum(total) DESC
  LIMIT 50000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1,
                       format_csv_allow_double_quotes=0,
                       max_ast_elements=1000000,
                       max_expanded_ast_elements=1000000,
                       max_query_size=524288,
                       max_bytes_before_external_group_by=0
  '''
# ---
# name: TestTrends.test_trends_compare_day_interval_relative_range.2
  '''
  SELECT arrayMap(number -> plus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 00:00:00', 6, 'UTC'))), toIntervalDay(number)), range(0, plus(coalesce(dateDiff('day', toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 00:00:00', 6, 'UTC'))), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))))), 1))) AS date,
         arrayMap(_match_date -> arraySum(arraySlice(groupArray(count), indexOf(groupArray(day_start) AS _days_for_count, _match_date) AS _index, plus(minus(arrayLastIndex(x -> ifNull(equals(x, _match_date), isNull(x)
                                                                                                                                                                                        and isNull(_match_date)), _days_for_count), _index), 1))), date) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start AS day_start
     FROM
       (SELECT count() AS total,
               toStartOfDay(toTimeZone(e.timestamp, 'UTC')) AS day_start
        FROM events AS e SAMPLE 1
        WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 00:00:00', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), equals(e.event, 'sign up'))
        GROUP BY day_start)
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY arraySum(total) DESC
  LIMIT 50000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1,
                       format_csv_allow_double_quotes=0,
                       max_ast_elements=1000000,
                       max_expanded_ast_elements=1000000,
                       max_query_size=524288,
                       max_bytes_before_external_group_by=0
  '''
# ---
# name: TestTrends.test_trends_count_per_user_average_aggregated
  '''
  SELECT total AS total
  FROM
    (SELECT avg(total) AS total
     FROM
       (SELECT count() AS total
        FROM events AS e SAMPLE 1
        INNER JOIN
          (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                  person_distinct_id2.distinct_id AS distinct_id
           FROM person_distinct_id2
           WHERE equals(person_distinct_id2.team_id, 2)
           GROUP BY person_distinct_id2.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
        WHERE and(equals(e.team_id, 2), equals(e.event, 'viewed video'), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), minus(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC')), toIntervalDay(0))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-07 23:59:59', 6, 'UTC'))))
        GROUP BY e__pdi.person_id))
  LIMIT 50000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1,
                       format_csv_allow_double_quotes=0,
                       max_ast_elements=1000000,
                       max_expanded_ast_elements=1000000,
                       max_query_size=524288,
                       max_bytes_before_external_group_by=0
  '''
# ---
# name: TestTrends.test_trends_count_per_user_average_aggregated_poe_v2
  '''
  SELECT total AS total
  FROM
    (SELECT avg(total) AS total
     FROM
       (SELECT count() AS total
        FROM events AS e SAMPLE 1
        LEFT OUTER JOIN
          (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                  person_distinct_id_overrides.distinct_id AS distinct_id
           FROM person_distinct_id_overrides
           WHERE equals(person_distinct_id_overrides.team_id, 2)
           GROUP BY person_distinct_id_overrides.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0)) AS e__override ON equals(e.distinct_id, e__override.distinct_id)
        WHERE and(equals(e.team_id, 2), equals(e.event, 'viewed video'), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), minus(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC')), toIntervalDay(0))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-07 23:59:59', 6, 'UTC'))))
        GROUP BY if(not(empty(e__override.distinct_id)), e__override.person_id, e.person_id)))
  LIMIT 50000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1,
                       format_csv_allow_double_quotes=0,
                       max_ast_elements=1000000,
                       max_expanded_ast_elements=1000000,
                       max_query_size=524288,
                       max_bytes_before_external_group_by=0
  '''
# ---
# name: TestTrends.test_trends_count_per_user_average_aggregated_with_event_property_breakdown_with_sampling
  '''
  SELECT sum(total) AS total,
         if(ifNull(ifNull(greaterOrEquals(row_number, 26), 0), 0), '$$_posthog_breakdown_other_$$', toString(breakdown_value)) AS breakdown_value
  FROM
    (SELECT total AS total,
            breakdown_value AS breakdown_value,
            row_number() OVER (
                               ORDER BY total DESC) AS row_number
     FROM
       (SELECT total AS total,
               breakdown_value AS breakdown_value
        FROM
          (SELECT avg(total) AS total,
                  breakdown_value AS breakdown_value
           FROM
             (SELECT count() AS total,
                     ifNull(nullIf(toString(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, 'color'), ''), 'null'), '^"|"$', '')), ''), '$$_posthog_breakdown_null_$$') AS breakdown_value
              FROM events AS e SAMPLE 1.0
              INNER JOIN
                (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                        person_distinct_id2.distinct_id AS distinct_id
                 FROM person_distinct_id2
                 WHERE equals(person_distinct_id2.team_id, 2)
                 GROUP BY person_distinct_id2.distinct_id
                 HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
              WHERE and(equals(e.team_id, 2), and(equals(e.event, 'viewed video'), true), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), minus(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC')), toIntervalDay(0))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-07 23:59:59', 6, 'UTC'))))
              GROUP BY e__pdi.person_id,
                       breakdown_value)
           GROUP BY breakdown_value)))
  WHERE isNotNull(breakdown_value)
  GROUP BY breakdown_value
  ORDER BY if(ifNull(equals(breakdown_value, '$$_posthog_breakdown_other_$$'), 0), 2, if(ifNull(equals(breakdown_value, '$$_posthog_breakdown_null_$$'), 0), 1, 0)) ASC, total DESC,
                                                                                                                                                                         breakdown_value ASC
  LIMIT 50000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1,
                       format_csv_allow_double_quotes=0,
                       max_ast_elements=1000000,
                       max_expanded_ast_elements=1000000,
                       max_query_size=524288,
                       max_bytes_before_external_group_by=0
  '''
# ---
# name: TestTrends.test_trends_count_per_user_average_daily
  '''
  SELECT arrayMap(number -> plus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC'))), toIntervalDay(number)), range(0, plus(coalesce(dateDiff('day', toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC'))), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-07 23:59:59', 6, 'UTC'))))), 1))) AS date,
         arrayMap(_match_date -> arraySum(arraySlice(groupArray(count), indexOf(groupArray(day_start) AS _days_for_count, _match_date) AS _index, plus(minus(arrayLastIndex(x -> ifNull(equals(x, _match_date), isNull(x)
                                                                                                                                                                                        and isNull(_match_date)), _days_for_count), _index), 1))), date) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start AS day_start
     FROM
       (SELECT total AS total,
               day_start AS day_start
        FROM
          (SELECT avg(total) AS total,
                  day_start AS day_start
           FROM
             (SELECT count() AS total,
                     toStartOfDay(toTimeZone(e.timestamp, 'UTC')) AS day_start
              FROM events AS e SAMPLE 1
              INNER JOIN
                (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                        person_distinct_id2.distinct_id AS distinct_id
                 FROM person_distinct_id2
                 WHERE equals(person_distinct_id2.team_id, 2)
                 GROUP BY person_distinct_id2.distinct_id
                 HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
              WHERE and(equals(e.team_id, 2), equals(e.event, 'viewed video'), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), minus(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC')), toIntervalDay(0))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-07 23:59:59', 6, 'UTC'))))
              GROUP BY e__pdi.person_id,
                       day_start)
           GROUP BY day_start))
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY arraySum(total) DESC
  LIMIT 50000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1,
                       format_csv_allow_double_quotes=0,
                       max_ast_elements=1000000,
                       max_expanded_ast_elements=1000000,
                       max_query_size=524288,
                       max_bytes_before_external_group_by=0
  '''
# ---
# name: TestTrends.test_trends_count_per_user_average_daily_poe_v2
  '''
  SELECT arrayMap(number -> plus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC'))), toIntervalDay(number)), range(0, plus(coalesce(dateDiff('day', toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC'))), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-07 23:59:59', 6, 'UTC'))))), 1))) AS date,
         arrayMap(_match_date -> arraySum(arraySlice(groupArray(count), indexOf(groupArray(day_start) AS _days_for_count, _match_date) AS _index, plus(minus(arrayLastIndex(x -> ifNull(equals(x, _match_date), isNull(x)
                                                                                                                                                                                        and isNull(_match_date)), _days_for_count), _index), 1))), date) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start AS day_start
     FROM
       (SELECT total AS total,
               day_start AS day_start
        FROM
          (SELECT avg(total) AS total,
                  day_start AS day_start
           FROM
             (SELECT count() AS total,
                     toStartOfDay(toTimeZone(e.timestamp, 'UTC')) AS day_start
              FROM events AS e SAMPLE 1
              LEFT OUTER JOIN
                (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                        person_distinct_id_overrides.distinct_id AS distinct_id
                 FROM person_distinct_id_overrides
                 WHERE equals(person_distinct_id_overrides.team_id, 2)
                 GROUP BY person_distinct_id_overrides.distinct_id
                 HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0)) AS e__override ON equals(e.distinct_id, e__override.distinct_id)
              WHERE and(equals(e.team_id, 2), equals(e.event, 'viewed video'), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), minus(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC')), toIntervalDay(0))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-07 23:59:59', 6, 'UTC'))))
              GROUP BY if(not(empty(e__override.distinct_id)), e__override.person_id, e.person_id),
                       day_start)
           GROUP BY day_start))
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY arraySum(total) DESC
  LIMIT 50000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1,
                       format_csv_allow_double_quotes=0,
                       max_ast_elements=1000000,
                       max_expanded_ast_elements=1000000,
                       max_query_size=524288,
                       max_bytes_before_external_group_by=0
  '''
# ---
# name: TestTrends.test_trends_groups_per_day
  '''
  SELECT arrayMap(number -> plus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-30 00:00:00', 6, 'UTC'))), toIntervalDay(number)), range(0, plus(coalesce(dateDiff('day', toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-30 00:00:00', 6, 'UTC'))), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-06 23:59:59', 6, 'UTC'))))), 1))) AS date,
         arrayMap(_match_date -> arraySum(arraySlice(groupArray(count), indexOf(groupArray(day_start) AS _days_for_count, _match_date) AS _index, plus(minus(arrayLastIndex(x -> ifNull(equals(x, _match_date), isNull(x)
                                                                                                                                                                                        and isNull(_match_date)), _days_for_count), _index), 1))), date) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start AS day_start
     FROM
       (SELECT count(DISTINCT e.`$group_0`) AS total,
               toStartOfDay(toTimeZone(e.timestamp, 'UTC')) AS day_start
        FROM events AS e SAMPLE 1
        WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-30 00:00:00', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-06 23:59:59', 6, 'UTC'))), equals(e.event, 'viewed video'), ifNull(notEquals(nullIf(nullIf(e.`$group_0`, ''), 'null'), ''), 1), notEquals(e.`$group_0`, ''))
        GROUP BY day_start)
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY arraySum(total) DESC
  LIMIT 50000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1,
                       format_csv_allow_double_quotes=0,
                       max_ast_elements=1000000,
                       max_expanded_ast_elements=1000000,
                       max_query_size=524288,
                       max_bytes_before_external_group_by=0
  '''
# ---
# name: TestTrends.test_trends_groups_per_day_cumulative
  '''
  SELECT arrayMap(number -> plus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-30 00:00:00', 6, 'UTC'))), toIntervalDay(number)), range(0, plus(coalesce(dateDiff('day', toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-30 00:00:00', 6, 'UTC'))), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-06 23:59:59', 6, 'UTC'))))), 1))) AS date,
         arrayFill(x -> ifNull(greater(x, 0), 0), arrayMap(_match_date -> arraySum(arraySlice(groupArray(count), indexOf(groupArray(day_start) AS _days_for_count, _match_date) AS _index, plus(minus(arrayLastIndex(x -> ifNull(equals(x, _match_date), isNull(x)
                                                                                                                                                                                                                                 and isNull(_match_date)), _days_for_count), _index), 1))), date)) AS total
  FROM
    (SELECT day_start AS day_start,
            sum(count) OVER (
                             ORDER BY day_start ASC) AS count
     FROM
       (SELECT sum(total) AS count,
               day_start AS day_start
        FROM
          (SELECT count(DISTINCT e.`$group_0`) AS total,
                  min(toStartOfDay(toTimeZone(e.timestamp, 'UTC'))) AS day_start
           FROM events AS e SAMPLE 1
           WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-30 00:00:00', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-06 23:59:59', 6, 'UTC'))), equals(e.event, 'viewed video'), ifNull(notEquals(nullIf(nullIf(e.`$group_0`, ''), 'null'), ''), 1), notEquals(e.`$group_0`, ''))
           GROUP BY e.`$group_0`)
        GROUP BY day_start
        ORDER BY day_start ASC)
     ORDER BY day_start ASC)
  ORDER BY arraySum(total) DESC
  LIMIT 50000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1,
                       format_csv_allow_double_quotes=0,
                       max_ast_elements=1000000,
                       max_expanded_ast_elements=1000000,
                       max_query_size=524288,
                       max_bytes_before_external_group_by=0
  '''
# ---
# name: TestTrends.test_trends_per_day_cumulative
  '''
  SELECT arrayMap(number -> plus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 00:00:00', 6, 'UTC'))), toIntervalDay(number)), range(0, plus(coalesce(dateDiff('day', toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 00:00:00', 6, 'UTC'))), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))))), 1))) AS date,
         arrayFill(x -> ifNull(greater(x, 0), 0), arrayMap(_match_date -> arraySum(arraySlice(groupArray(count), indexOf(groupArray(day_start) AS _days_for_count, _match_date) AS _index, plus(minus(arrayLastIndex(x -> ifNull(equals(x, _match_date), isNull(x)
                                                                                                                                                                                                                                 and isNull(_match_date)), _days_for_count), _index), 1))), date)) AS total
  FROM
    (SELECT day_start AS day_start,
            sum(count) OVER (
                             ORDER BY day_start ASC) AS count
     FROM
       (SELECT sum(total) AS count,
               day_start AS day_start
        FROM
          (SELECT count() AS total,
                  toStartOfDay(toTimeZone(e.timestamp, 'UTC')) AS day_start
           FROM events AS e SAMPLE 1
           WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 00:00:00', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), equals(e.event, 'sign up'))
           GROUP BY day_start)
        GROUP BY day_start
        ORDER BY day_start ASC)
     ORDER BY day_start ASC)
  ORDER BY arraySum(total) DESC
  LIMIT 50000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1,
                       format_csv_allow_double_quotes=0,
                       max_ast_elements=1000000,
                       max_expanded_ast_elements=1000000,
                       max_query_size=524288,
                       max_bytes_before_external_group_by=0
  '''
# ---
# name: TestTrends.test_trends_per_day_dau_cumulative
  '''
  SELECT arrayMap(number -> plus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 00:00:00', 6, 'UTC'))), toIntervalDay(number)), range(0, plus(coalesce(dateDiff('day', toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 00:00:00', 6, 'UTC'))), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))))), 1))) AS date,
         arrayFill(x -> ifNull(greater(x, 0), 0), arrayMap(_match_date -> arraySum(arraySlice(groupArray(count), indexOf(groupArray(day_start) AS _days_for_count, _match_date) AS _index, plus(minus(arrayLastIndex(x -> ifNull(equals(x, _match_date), isNull(x)
                                                                                                                                                                                                                                 and isNull(_match_date)), _days_for_count), _index), 1))), date)) AS total
  FROM
    (SELECT day_start AS day_start,
            sum(count) OVER (
                             ORDER BY day_start ASC) AS count
     FROM
       (SELECT sum(total) AS count,
               day_start AS day_start
        FROM
          (SELECT count(DISTINCT e__pdi.person_id) AS total,
                  min(toStartOfDay(toTimeZone(e.timestamp, 'UTC'))) AS day_start
           FROM events AS e SAMPLE 1
           INNER JOIN
             (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                     person_distinct_id2.distinct_id AS distinct_id
              FROM person_distinct_id2
              WHERE equals(person_distinct_id2.team_id, 2)
              GROUP BY person_distinct_id2.distinct_id
              HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
           WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 00:00:00', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), equals(e.event, 'sign up'))
           GROUP BY e__pdi.person_id)
        GROUP BY day_start
        ORDER BY day_start ASC)
     ORDER BY day_start ASC)
  ORDER BY arraySum(total) DESC
  LIMIT 50000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1,
                       format_csv_allow_double_quotes=0,
                       max_ast_elements=1000000,
                       max_expanded_ast_elements=1000000,
                       max_query_size=524288,
                       max_bytes_before_external_group_by=0
  '''
# ---
# name: TestTrends.test_trends_person_breakdown_with_session_property_single_aggregate_math_and_breakdown
  '''
  SELECT sum(total) AS total,
         if(ifNull(ifNull(greaterOrEquals(row_number, 26), 0), 0), '$$_posthog_breakdown_other_$$', toString(breakdown_value)) AS breakdown_value
  FROM
    (SELECT total AS total,
            breakdown_value AS breakdown_value,
            row_number() OVER (
                               ORDER BY total DESC) AS row_number
     FROM
       (SELECT quantile(0.5)(session_duration) AS total,
               breakdown_value AS breakdown_value
        FROM
          (SELECT any(e__session.`$session_duration`) AS session_duration,
                  ifNull(nullIf(toString(e__pdi__person.`properties___$some_prop`), ''), '$$_posthog_breakdown_null_$$') AS breakdown_value
           FROM events AS e SAMPLE 1
           LEFT JOIN
             (SELECT dateDiff('second', min(sessions.min_timestamp), max(sessions.max_timestamp)) AS `$session_duration`,
                     sessions.session_id AS session_id
              FROM sessions
              WHERE and(equals(sessions.team_id, 2), ifNull(greaterOrEquals(plus(toTimeZone(sessions.min_timestamp, 'UTC'), toIntervalDay(3)), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 00:00:00', 6, 'UTC')))), 0), ifNull(lessOrEquals(minus(toTimeZone(sessions.min_timestamp, 'UTC'), toIntervalDay(3)), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), 0))
              GROUP BY sessions.session_id,
                       sessions.session_id) AS e__session ON equals(e.`$session_id`, e__session.session_id)
           INNER JOIN
             (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS e__pdi___person_id,
                     argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                     person_distinct_id2.distinct_id AS distinct_id
              FROM person_distinct_id2
              WHERE equals(person_distinct_id2.team_id, 2)
              GROUP BY person_distinct_id2.distinct_id
              HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
           LEFT JOIN
             (SELECT person.id AS id,
                     replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, '$some_prop'), ''), 'null'), '^"|"$', '') AS `properties___$some_prop`
              FROM person
              WHERE and(equals(person.team_id, 2), ifNull(in(tuple(person.id, person.version),
                                                               (SELECT person.id AS id, max(person.version) AS version
                                                                FROM person
                                                                WHERE equals(person.team_id, 2)
                                                                GROUP BY person.id
                                                                HAVING and(ifNull(equals(argMax(person.is_deleted, person.version), 0), 0), ifNull(less(argMax(person.created_at, person.version), plus(now64(6, 'UTC'), toIntervalDay(1))), 0)))), 0)) SETTINGS optimize_aggregation_in_order=1) AS e__pdi__person ON equals(e__pdi.e__pdi___person_id, e__pdi__person.id)
           WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 00:00:00', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), equals(e.event, 'sign up'), true)
           GROUP BY e.`$session_id`,
                    breakdown_value
           ORDER BY 1 DESC, breakdown_value DESC)
        GROUP BY breakdown_value))
  WHERE isNotNull(breakdown_value)
  GROUP BY breakdown_value
  ORDER BY if(ifNull(equals(breakdown_value, '$$_posthog_breakdown_other_$$'), 0), 2, if(ifNull(equals(breakdown_value, '$$_posthog_breakdown_null_$$'), 0), 1, 0)) ASC, total DESC,
                                                                                                                                                                         breakdown_value ASC
  LIMIT 50000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1,
                       format_csv_allow_double_quotes=0,
                       max_ast_elements=1000000,
                       max_expanded_ast_elements=1000000,
                       max_query_size=524288,
                       max_bytes_before_external_group_by=0
  '''
# ---
# name: TestTrends.test_trends_with_hogql_math
  '''
  SELECT arrayMap(number -> plus(toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 00:00:00', 6, 'UTC')), 0), toIntervalWeek(number)), range(0, plus(coalesce(dateDiff('week', toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 00:00:00', 6, 'UTC')), 0), toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC')), 0))), 1))) AS date,
         arrayMap(_match_date -> arraySum(arraySlice(groupArray(count), indexOf(groupArray(day_start) AS _days_for_count, _match_date) AS _index, plus(minus(arrayLastIndex(x -> ifNull(equals(x, _match_date), isNull(x)
                                                                                                                                                                                        and isNull(_match_date)), _days_for_count), _index), 1))), date) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start AS day_start
     FROM
       (SELECT plus(avg(accurateCastOrNull(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, 'x'), ''), 'null'), '^"|"$', ''), 'Float64')), 1000) AS total,
               toStartOfWeek(toTimeZone(e.timestamp, 'UTC'), 0) AS day_start
        FROM events AS e SAMPLE 1
        WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 00:00:00', 6, 'UTC')), 0)), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), equals(e.event, 'sign up'))
        GROUP BY day_start)
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY arraySum(total) DESC
  LIMIT 50000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1,
                       format_csv_allow_double_quotes=0,
                       max_ast_elements=1000000,
                       max_expanded_ast_elements=1000000,
                       max_query_size=524288,
                       max_bytes_before_external_group_by=0
  '''
# ---
# name: TestTrends.test_trends_with_session_property_single_aggregate_math
  '''
  SELECT quantile(0.5)(session_duration) AS total
  FROM
    (SELECT any(e__session.`$session_duration`) AS session_duration
     FROM events AS e SAMPLE 1
     LEFT JOIN
       (SELECT dateDiff('second', min(sessions.min_timestamp), max(sessions.max_timestamp)) AS `$session_duration`,
               sessions.session_id AS session_id
        FROM sessions
        WHERE and(equals(sessions.team_id, 2), ifNull(greaterOrEquals(plus(toTimeZone(sessions.min_timestamp, 'UTC'), toIntervalDay(3)), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 00:00:00', 6, 'UTC')))), 0), ifNull(lessOrEquals(minus(toTimeZone(sessions.min_timestamp, 'UTC'), toIntervalDay(3)), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), 0))
        GROUP BY sessions.session_id,
                 sessions.session_id) AS e__session ON equals(e.`$session_id`, e__session.session_id)
     WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 00:00:00', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), equals(e.event, 'sign up'))
     GROUP BY e.`$session_id`
     ORDER BY 1 DESC)
  LIMIT 50000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1,
                       format_csv_allow_double_quotes=0,
                       max_ast_elements=1000000,
                       max_expanded_ast_elements=1000000,
                       max_query_size=524288,
                       max_bytes_before_external_group_by=0
  '''
# ---
# name: TestTrends.test_trends_with_session_property_single_aggregate_math.1
  '''
  SELECT quantile(0.5)(session_duration) AS total
  FROM
    (SELECT any(e__session.`$session_duration`) AS session_duration
     FROM events AS e SAMPLE 1
     LEFT JOIN
       (SELECT dateDiff('second', min(sessions.min_timestamp), max(sessions.max_timestamp)) AS `$session_duration`,
               sessions.session_id AS session_id
        FROM sessions
        WHERE and(equals(sessions.team_id, 2), ifNull(greaterOrEquals(plus(toTimeZone(sessions.min_timestamp, 'UTC'), toIntervalDay(3)), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 00:00:00', 6, 'UTC')))), 0), ifNull(lessOrEquals(minus(toTimeZone(sessions.min_timestamp, 'UTC'), toIntervalDay(3)), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), 0))
        GROUP BY sessions.session_id,
                 sessions.session_id) AS e__session ON equals(e.`$session_id`, e__session.session_id)
     WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 00:00:00', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), equals(e.event, 'sign up'))
     GROUP BY e.`$session_id`
     ORDER BY 1 DESC)
  LIMIT 50000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1,
                       format_csv_allow_double_quotes=0,
                       max_ast_elements=1000000,
                       max_expanded_ast_elements=1000000,
                       max_query_size=524288,
                       max_bytes_before_external_group_by=0
  '''
# ---
# name: TestTrends.test_trends_with_session_property_total_volume_math
  '''
  SELECT arrayMap(number -> plus(toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 00:00:00', 6, 'UTC')), 0), toIntervalWeek(number)), range(0, plus(coalesce(dateDiff('week', toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 00:00:00', 6, 'UTC')), 0), toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC')), 0))), 1))) AS date,
         arrayMap(_match_date -> arraySum(arraySlice(groupArray(count), indexOf(groupArray(day_start) AS _days_for_count, _match_date) AS _index, plus(minus(arrayLastIndex(x -> ifNull(equals(x, _match_date), isNull(x)
                                                                                                                                                                                        and isNull(_match_date)), _days_for_count), _index), 1))), date) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start AS day_start
     FROM
       (SELECT quantile(0.5)(session_duration) AS total,
               day_start AS day_start
        FROM
          (SELECT any(e__session.`$session_duration`) AS session_duration,
                  toStartOfWeek(toTimeZone(e.timestamp, 'UTC'), 0) AS day_start
           FROM events AS e SAMPLE 1
           LEFT JOIN
             (SELECT dateDiff('second', min(sessions.min_timestamp), max(sessions.max_timestamp)) AS `$session_duration`,
                     sessions.session_id AS session_id
              FROM sessions
              WHERE and(equals(sessions.team_id, 2), ifNull(greaterOrEquals(plus(toTimeZone(sessions.min_timestamp, 'UTC'), toIntervalDay(3)), toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 00:00:00', 6, 'UTC')), 0)), 0), ifNull(lessOrEquals(minus(toTimeZone(sessions.min_timestamp, 'UTC'), toIntervalDay(3)), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), 0))
              GROUP BY sessions.session_id,
                       sessions.session_id) AS e__session ON equals(e.`$session_id`, e__session.session_id)
           WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 00:00:00', 6, 'UTC')), 0)), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), equals(e.event, 'sign up'))
           GROUP BY day_start,
                    e.`$session_id`,
                    day_start)
        GROUP BY day_start)
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY arraySum(total) DESC
  LIMIT 50000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1,
                       format_csv_allow_double_quotes=0,
                       max_ast_elements=1000000,
                       max_expanded_ast_elements=1000000,
                       max_query_size=524288,
                       max_bytes_before_external_group_by=0
  '''
# ---
# name: TestTrends.test_trends_with_session_property_total_volume_math.1
  '''
  SELECT arrayMap(number -> plus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 00:00:00', 6, 'UTC'))), toIntervalDay(number)), range(0, plus(coalesce(dateDiff('day', toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 00:00:00', 6, 'UTC'))), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))))), 1))) AS date,
         arrayMap(_match_date -> arraySum(arraySlice(groupArray(count), indexOf(groupArray(day_start) AS _days_for_count, _match_date) AS _index, plus(minus(arrayLastIndex(x -> ifNull(equals(x, _match_date), isNull(x)
                                                                                                                                                                                        and isNull(_match_date)), _days_for_count), _index), 1))), date) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start AS day_start
     FROM
       (SELECT quantile(0.5)(session_duration) AS total,
               day_start AS day_start
        FROM
          (SELECT any(e__session.`$session_duration`) AS session_duration,
                  toStartOfDay(toTimeZone(e.timestamp, 'UTC')) AS day_start
           FROM events AS e SAMPLE 1
           LEFT JOIN
             (SELECT dateDiff('second', min(sessions.min_timestamp), max(sessions.max_timestamp)) AS `$session_duration`,
                     sessions.session_id AS session_id
              FROM sessions
              WHERE and(equals(sessions.team_id, 2), ifNull(greaterOrEquals(plus(toTimeZone(sessions.min_timestamp, 'UTC'), toIntervalDay(3)), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 00:00:00', 6, 'UTC')))), 0), ifNull(lessOrEquals(minus(toTimeZone(sessions.min_timestamp, 'UTC'), toIntervalDay(3)), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), 0))
              GROUP BY sessions.session_id,
                       sessions.session_id) AS e__session ON equals(e.`$session_id`, e__session.session_id)
           WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 00:00:00', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), equals(e.event, 'sign up'))
           GROUP BY day_start,
                    e.`$session_id`,
                    day_start)
        GROUP BY day_start)
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY arraySum(total) DESC
  LIMIT 50000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1,
                       format_csv_allow_double_quotes=0,
                       max_ast_elements=1000000,
                       max_expanded_ast_elements=1000000,
                       max_query_size=524288,
                       max_bytes_before_external_group_by=0
  '''
# ---
# name: TestTrends.test_trends_with_session_property_total_volume_math_with_breakdowns
  '''
  SELECT groupArray(1)(date)[1] AS date,
                      arrayFold((acc, x) -> arrayMap(i -> plus(acc[i], x[i]), range(1, plus(length(date), 1))), groupArray(total), arrayWithConstant(length(date), reinterpretAsFloat64(0))) AS total,
                      if(ifNull(greaterOrEquals(row_number, 25), 0), '$$_posthog_breakdown_other_$$', toString(breakdown_value)) AS breakdown_value
  FROM
    (SELECT arrayMap(number -> plus(toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 00:00:00', 6, 'UTC')), 0), toIntervalWeek(number)), range(0, plus(coalesce(dateDiff('week', toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 00:00:00', 6, 'UTC')), 0), toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC')), 0))), 1))) AS date,
            arrayMap(_match_date -> arraySum(arraySlice(groupArray(count), indexOf(groupArray(day_start) AS _days_for_count, _match_date) AS _index, plus(minus(arrayLastIndex(x -> ifNull(equals(x, _match_date), isNull(x)
                                                                                                                                                                                           and isNull(_match_date)), _days_for_count), _index), 1))), date) AS total,
            ifNull(toString(breakdown_value), '$$_posthog_breakdown_null_$$') AS breakdown_value,
            rowNumberInAllBlocks() AS row_number
     FROM
       (SELECT sum(total) AS count,
               day_start AS day_start,
               breakdown_value AS breakdown_value
        FROM
          (SELECT quantile(0.5)(session_duration) AS total,
                  day_start AS day_start,
                  breakdown_value AS breakdown_value
           FROM
             (SELECT any(e__session.`$session_duration`) AS session_duration,
                     ifNull(nullIf(toString(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$some_property'), ''), 'null'), '^"|"$', '')), ''), '$$_posthog_breakdown_null_$$') AS breakdown_value,
                     toStartOfWeek(toTimeZone(e.timestamp, 'UTC'), 0) AS day_start
              FROM events AS e SAMPLE 1
              LEFT JOIN
                (SELECT dateDiff('second', min(sessions.min_timestamp), max(sessions.max_timestamp)) AS `$session_duration`,
                        sessions.session_id AS session_id
                 FROM sessions
                 WHERE and(equals(sessions.team_id, 2), ifNull(greaterOrEquals(plus(toTimeZone(sessions.min_timestamp, 'UTC'), toIntervalDay(3)), toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 00:00:00', 6, 'UTC')), 0)), 0), ifNull(lessOrEquals(minus(toTimeZone(sessions.min_timestamp, 'UTC'), toIntervalDay(3)), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), 0))
                 GROUP BY sessions.session_id,
                          sessions.session_id) AS e__session ON equals(e.`$session_id`, e__session.session_id)
              WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 00:00:00', 6, 'UTC')), 0)), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), equals(e.event, 'sign up'), true)
              GROUP BY day_start,
                       e.`$session_id`,
                       breakdown_value,
                       day_start)
           GROUP BY day_start,
                    breakdown_value)
        GROUP BY day_start,
                 breakdown_value
        ORDER BY day_start ASC, breakdown_value ASC)
     GROUP BY breakdown_value
     ORDER BY arraySum(total) DESC, breakdown_value ASC)
  WHERE isNotNull(breakdown_value)
  GROUP BY breakdown_value
  ORDER BY if(ifNull(equals(breakdown_value, '$$_posthog_breakdown_other_$$'), 0), 2, if(ifNull(equals(breakdown_value, '$$_posthog_breakdown_null_$$'), 0), 1, 0)) ASC, arraySum(total) DESC, breakdown_value ASC
  LIMIT 50000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1,
                       format_csv_allow_double_quotes=0,
                       max_ast_elements=1000000,
                       max_expanded_ast_elements=1000000,
                       max_query_size=524288,
                       max_bytes_before_external_group_by=0
  '''
# ---
# name: TestTrends.test_trends_with_session_property_total_volume_math_with_breakdowns.1
  '''
  SELECT groupArray(1)(date)[1] AS date,
                      arrayFold((acc, x) -> arrayMap(i -> plus(acc[i], x[i]), range(1, plus(length(date), 1))), groupArray(total), arrayWithConstant(length(date), reinterpretAsFloat64(0))) AS total,
                      if(ifNull(greaterOrEquals(row_number, 25), 0), '$$_posthog_breakdown_other_$$', toString(breakdown_value)) AS breakdown_value
  FROM
    (SELECT arrayMap(number -> plus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 00:00:00', 6, 'UTC'))), toIntervalDay(number)), range(0, plus(coalesce(dateDiff('day', toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 00:00:00', 6, 'UTC'))), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))))), 1))) AS date,
            arrayMap(_match_date -> arraySum(arraySlice(groupArray(count), indexOf(groupArray(day_start) AS _days_for_count, _match_date) AS _index, plus(minus(arrayLastIndex(x -> ifNull(equals(x, _match_date), isNull(x)
                                                                                                                                                                                           and isNull(_match_date)), _days_for_count), _index), 1))), date) AS total,
            ifNull(toString(breakdown_value), '$$_posthog_breakdown_null_$$') AS breakdown_value,
            rowNumberInAllBlocks() AS row_number
     FROM
       (SELECT sum(total) AS count,
               day_start AS day_start,
               breakdown_value AS breakdown_value
        FROM
          (SELECT quantile(0.5)(session_duration) AS total,
                  day_start AS day_start,
                  breakdown_value AS breakdown_value
           FROM
             (SELECT any(e__session.`$session_duration`) AS session_duration,
                     ifNull(nullIf(toString(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$some_property'), ''), 'null'), '^"|"$', '')), ''), '$$_posthog_breakdown_null_$$') AS breakdown_value,
                     toStartOfDay(toTimeZone(e.timestamp, 'UTC')) AS day_start
              FROM events AS e SAMPLE 1
              LEFT JOIN
                (SELECT dateDiff('second', min(sessions.min_timestamp), max(sessions.max_timestamp)) AS `$session_duration`,
                        sessions.session_id AS session_id
                 FROM sessions
                 WHERE and(equals(sessions.team_id, 2), ifNull(greaterOrEquals(plus(toTimeZone(sessions.min_timestamp, 'UTC'), toIntervalDay(3)), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 00:00:00', 6, 'UTC')))), 0), ifNull(lessOrEquals(minus(toTimeZone(sessions.min_timestamp, 'UTC'), toIntervalDay(3)), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), 0))
                 GROUP BY sessions.session_id,
                          sessions.session_id) AS e__session ON equals(e.`$session_id`, e__session.session_id)
              WHERE and(equals(e.team_id, 2), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-28 00:00:00', 6, 'UTC')))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-04 23:59:59', 6, 'UTC'))), equals(e.event, 'sign up'), true)
              GROUP BY day_start,
                       e.`$session_id`,
                       breakdown_value,
                       day_start)
           GROUP BY day_start,
                    breakdown_value)
        GROUP BY day_start,
                 breakdown_value
        ORDER BY day_start ASC, breakdown_value ASC)
     GROUP BY breakdown_value
     ORDER BY arraySum(total) DESC, breakdown_value ASC)
  WHERE isNotNull(breakdown_value)
  GROUP BY breakdown_value
  ORDER BY if(ifNull(equals(breakdown_value, '$$_posthog_breakdown_other_$$'), 0), 2, if(ifNull(equals(breakdown_value, '$$_posthog_breakdown_null_$$'), 0), 1, 0)) ASC, arraySum(total) DESC, breakdown_value ASC
  LIMIT 50000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1,
                       format_csv_allow_double_quotes=0,
                       max_ast_elements=1000000,
                       max_expanded_ast_elements=1000000,
                       max_query_size=524288,
                       max_bytes_before_external_group_by=0
  '''
# ---
# name: TestTrends.test_weekly_active_users_aggregated_range_narrower_than_week
  '''
  SELECT count(DISTINCT actor_id) AS total
  FROM
    (SELECT d.timestamp AS timestamp,
            e.actor_id AS actor_id
     FROM
       (SELECT minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-12 23:59:59', 6, 'UTC'))), toIntervalDay(numbers.number)) AS timestamp
        FROM numbers(dateDiff('day', minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-11 00:00:00', 6, 'UTC'))), toIntervalDay(7)), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-12 23:59:59', 6, 'UTC')))) AS numbers) AS d
     CROSS JOIN
       (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
               e__pdi.person_id AS actor_id
        FROM events AS e SAMPLE 1
        INNER JOIN
          (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                  person_distinct_id2.distinct_id AS distinct_id
           FROM person_distinct_id2
           WHERE equals(person_distinct_id2.team_id, 2)
           GROUP BY person_distinct_id2.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
        WHERE and(equals(e.team_id, 2), equals(e.event, '$pageview'), ifNull(greaterOrEquals(timestamp, minus(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-12 23:59:59', 6, 'UTC')), toIntervalDay(7))), 0), ifNull(lessOrEquals(timestamp, assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-12 23:59:59', 6, 'UTC'))), 0))
        GROUP BY timestamp, actor_id) AS e
     WHERE and(ifNull(lessOrEquals(e.timestamp, plus(d.timestamp, toIntervalDay(1))), 0), ifNull(greater(e.timestamp, minus(d.timestamp, toIntervalDay(6))), 0))
     GROUP BY d.timestamp,
              e.actor_id
     ORDER BY d.timestamp ASC)
  WHERE and(ifNull(greaterOrEquals(timestamp, toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-11 00:00:00', 6, 'UTC')))), 0), ifNull(lessOrEquals(timestamp, assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-12 23:59:59', 6, 'UTC'))), 0))
  LIMIT 50000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1,
                       format_csv_allow_double_quotes=0,
                       max_ast_elements=1000000,
                       max_expanded_ast_elements=1000000,
                       max_query_size=524288,
                       max_bytes_before_external_group_by=0
  '''
# ---
# name: TestTrends.test_weekly_active_users_aggregated_range_wider_than_week
  '''
  SELECT count(DISTINCT actor_id) AS total
  FROM
    (SELECT d.timestamp AS timestamp,
            e.actor_id AS actor_id
     FROM
       (SELECT minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-18 23:59:59', 6, 'UTC'))), toIntervalDay(numbers.number)) AS timestamp
        FROM numbers(dateDiff('day', minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC'))), toIntervalDay(7)), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-18 23:59:59', 6, 'UTC')))) AS numbers) AS d
     CROSS JOIN
       (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
               e__pdi.person_id AS actor_id
        FROM events AS e SAMPLE 1
        INNER JOIN
          (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                  person_distinct_id2.distinct_id AS distinct_id
           FROM person_distinct_id2
           WHERE equals(person_distinct_id2.team_id, 2)
           GROUP BY person_distinct_id2.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
        WHERE and(equals(e.team_id, 2), equals(e.event, '$pageview'), ifNull(greaterOrEquals(timestamp, minus(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-18 23:59:59', 6, 'UTC')), toIntervalDay(7))), 0), ifNull(lessOrEquals(timestamp, assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-18 23:59:59', 6, 'UTC'))), 0))
        GROUP BY timestamp, actor_id) AS e
     WHERE and(ifNull(lessOrEquals(e.timestamp, plus(d.timestamp, toIntervalDay(1))), 0), ifNull(greater(e.timestamp, minus(d.timestamp, toIntervalDay(6))), 0))
     GROUP BY d.timestamp,
              e.actor_id
     ORDER BY d.timestamp ASC)
  WHERE and(ifNull(greaterOrEquals(timestamp, toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC')))), 0), ifNull(lessOrEquals(timestamp, assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-18 23:59:59', 6, 'UTC'))), 0))
  LIMIT 50000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1,
                       format_csv_allow_double_quotes=0,
                       max_ast_elements=1000000,
                       max_expanded_ast_elements=1000000,
                       max_query_size=524288,
                       max_bytes_before_external_group_by=0
  '''
# ---
# name: TestTrends.test_weekly_active_users_aggregated_range_wider_than_week_with_sampling
  '''
  SELECT count(DISTINCT actor_id) AS total
  FROM
    (SELECT d.timestamp AS timestamp,
            e.actor_id AS actor_id
     FROM
       (SELECT minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-18 23:59:59', 6, 'UTC'))), toIntervalDay(numbers.number)) AS timestamp
        FROM numbers(dateDiff('day', minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC'))), toIntervalDay(7)), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-18 23:59:59', 6, 'UTC')))) AS numbers) AS d
     CROSS JOIN
       (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
               e__pdi.person_id AS actor_id
        FROM events AS e SAMPLE 1.0
        INNER JOIN
          (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                  person_distinct_id2.distinct_id AS distinct_id
           FROM person_distinct_id2
           WHERE equals(person_distinct_id2.team_id, 2)
           GROUP BY person_distinct_id2.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
        WHERE and(equals(e.team_id, 2), equals(e.event, '$pageview'), ifNull(greaterOrEquals(timestamp, minus(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-18 23:59:59', 6, 'UTC')), toIntervalDay(7))), 0), ifNull(lessOrEquals(timestamp, assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-18 23:59:59', 6, 'UTC'))), 0))
        GROUP BY timestamp, actor_id) AS e
     WHERE and(ifNull(lessOrEquals(e.timestamp, plus(d.timestamp, toIntervalDay(1))), 0), ifNull(greater(e.timestamp, minus(d.timestamp, toIntervalDay(6))), 0))
     GROUP BY d.timestamp,
              e.actor_id
     ORDER BY d.timestamp ASC)
  WHERE and(ifNull(greaterOrEquals(timestamp, toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC')))), 0), ifNull(lessOrEquals(timestamp, assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-18 23:59:59', 6, 'UTC'))), 0))
  LIMIT 50000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1,
                       format_csv_allow_double_quotes=0,
                       max_ast_elements=1000000,
                       max_expanded_ast_elements=1000000,
                       max_query_size=524288,
                       max_bytes_before_external_group_by=0
  '''
# ---
# name: TestTrends.test_weekly_active_users_daily
  '''
  SELECT arrayMap(number -> plus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-08 00:00:00', 6, 'UTC'))), toIntervalDay(number)), range(0, plus(coalesce(dateDiff('day', toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-08 00:00:00', 6, 'UTC'))), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-19 23:59:59', 6, 'UTC'))))), 1))) AS date,
         arrayMap(_match_date -> arraySum(arraySlice(groupArray(count), indexOf(groupArray(day_start) AS _days_for_count, _match_date) AS _index, plus(minus(arrayLastIndex(x -> ifNull(equals(x, _match_date), isNull(x)
                                                                                                                                                                                        and isNull(_match_date)), _days_for_count), _index), 1))), date) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start AS day_start
     FROM
       (SELECT counts AS total,
               toStartOfDay(timestamp) AS day_start
        FROM
          (SELECT d.timestamp AS timestamp,
                  count(DISTINCT e.actor_id) AS counts
           FROM
             (SELECT minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-19 23:59:59', 6, 'UTC'))), toIntervalDay(numbers.number)) AS timestamp
              FROM numbers(dateDiff('day', minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-08 00:00:00', 6, 'UTC'))), toIntervalDay(7)), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-19 23:59:59', 6, 'UTC')))) AS numbers) AS d
           CROSS JOIN
             (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                     e__pdi.person_id AS actor_id
              FROM events AS e SAMPLE 1
              INNER JOIN
                (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                        person_distinct_id2.distinct_id AS distinct_id
                 FROM person_distinct_id2
                 WHERE equals(person_distinct_id2.team_id, 2)
                 GROUP BY person_distinct_id2.distinct_id
                 HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
              WHERE and(equals(e.team_id, 2), equals(e.event, '$pageview'), ifNull(greaterOrEquals(timestamp, minus(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-08 00:00:00', 6, 'UTC')), toIntervalDay(7))), 0), ifNull(lessOrEquals(timestamp, assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-19 23:59:59', 6, 'UTC'))), 0))
              GROUP BY timestamp, actor_id) AS e
           WHERE and(ifNull(lessOrEquals(e.timestamp, plus(d.timestamp, toIntervalDay(1))), 0), ifNull(greater(e.timestamp, minus(d.timestamp, toIntervalDay(6))), 0))
           GROUP BY d.timestamp
           ORDER BY d.timestamp ASC)
        WHERE and(ifNull(greaterOrEquals(timestamp, toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-08 00:00:00', 6, 'UTC')))), 0), ifNull(lessOrEquals(timestamp, assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-19 23:59:59', 6, 'UTC'))), 0)))
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY arraySum(total) DESC
  LIMIT 50000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1,
                       format_csv_allow_double_quotes=0,
                       max_ast_elements=1000000,
                       max_expanded_ast_elements=1000000,
                       max_query_size=524288,
                       max_bytes_before_external_group_by=0
  '''
# ---
# name: TestTrends.test_weekly_active_users_daily_minus_utc
  '''
  SELECT arrayMap(number -> plus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-08 00:00:00', 6, 'America/Phoenix'))), toIntervalDay(number)), range(0, plus(coalesce(dateDiff('day', toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-08 00:00:00', 6, 'America/Phoenix'))), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-19 23:59:59', 6, 'America/Phoenix'))))), 1))) AS date,
         arrayMap(_match_date -> arraySum(arraySlice(groupArray(count), indexOf(groupArray(day_start) AS _days_for_count, _match_date) AS _index, plus(minus(arrayLastIndex(x -> ifNull(equals(x, _match_date), isNull(x)
                                                                                                                                                                                        and isNull(_match_date)), _days_for_count), _index), 1))), date) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start AS day_start
     FROM
       (SELECT counts AS total,
               toStartOfDay(timestamp) AS day_start
        FROM
          (SELECT d.timestamp AS timestamp,
                  count(DISTINCT e.actor_id) AS counts
           FROM
             (SELECT minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-19 23:59:59', 6, 'America/Phoenix'))), toIntervalDay(numbers.number)) AS timestamp
              FROM numbers(dateDiff('day', minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-08 00:00:00', 6, 'America/Phoenix'))), toIntervalDay(7)), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-19 23:59:59', 6, 'America/Phoenix')))) AS numbers) AS d
           CROSS JOIN
             (SELECT toTimeZone(e.timestamp, 'America/Phoenix') AS timestamp,
                     e__pdi.person_id AS actor_id
              FROM events AS e SAMPLE 1
              INNER JOIN
                (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                        person_distinct_id2.distinct_id AS distinct_id
                 FROM person_distinct_id2
                 WHERE equals(person_distinct_id2.team_id, 2)
                 GROUP BY person_distinct_id2.distinct_id
                 HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
              WHERE and(equals(e.team_id, 2), equals(e.event, '$pageview'), ifNull(greaterOrEquals(timestamp, minus(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-08 00:00:00', 6, 'America/Phoenix')), toIntervalDay(7))), 0), ifNull(lessOrEquals(timestamp, assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-19 23:59:59', 6, 'America/Phoenix'))), 0))
              GROUP BY timestamp, actor_id) AS e
           WHERE and(ifNull(lessOrEquals(e.timestamp, plus(d.timestamp, toIntervalDay(1))), 0), ifNull(greater(e.timestamp, minus(d.timestamp, toIntervalDay(6))), 0))
           GROUP BY d.timestamp
           ORDER BY d.timestamp ASC)
        WHERE and(ifNull(greaterOrEquals(timestamp, toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-08 00:00:00', 6, 'America/Phoenix')))), 0), ifNull(lessOrEquals(timestamp, assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-19 23:59:59', 6, 'America/Phoenix'))), 0)))
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY arraySum(total) DESC
  LIMIT 50000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1,
                       format_csv_allow_double_quotes=0,
                       max_ast_elements=1000000,
                       max_expanded_ast_elements=1000000,
                       max_query_size=524288,
                       max_bytes_before_external_group_by=0
  '''
# ---
# name: TestTrends.test_weekly_active_users_daily_plus_utc
  '''
  SELECT arrayMap(number -> plus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-08 00:00:00', 6, 'Asia/Tokyo'))), toIntervalDay(number)), range(0, plus(coalesce(dateDiff('day', toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-08 00:00:00', 6, 'Asia/Tokyo'))), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-19 23:59:59', 6, 'Asia/Tokyo'))))), 1))) AS date,
         arrayMap(_match_date -> arraySum(arraySlice(groupArray(count), indexOf(groupArray(day_start) AS _days_for_count, _match_date) AS _index, plus(minus(arrayLastIndex(x -> ifNull(equals(x, _match_date), isNull(x)
                                                                                                                                                                                        and isNull(_match_date)), _days_for_count), _index), 1))), date) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start AS day_start
     FROM
       (SELECT counts AS total,
               toStartOfDay(timestamp) AS day_start
        FROM
          (SELECT d.timestamp AS timestamp,
                  count(DISTINCT e.actor_id) AS counts
           FROM
             (SELECT minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-19 23:59:59', 6, 'Asia/Tokyo'))), toIntervalDay(numbers.number)) AS timestamp
              FROM numbers(dateDiff('day', minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-08 00:00:00', 6, 'Asia/Tokyo'))), toIntervalDay(7)), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-19 23:59:59', 6, 'Asia/Tokyo')))) AS numbers) AS d
           CROSS JOIN
             (SELECT toTimeZone(e.timestamp, 'Asia/Tokyo') AS timestamp,
                     e__pdi.person_id AS actor_id
              FROM events AS e SAMPLE 1
              INNER JOIN
                (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                        person_distinct_id2.distinct_id AS distinct_id
                 FROM person_distinct_id2
                 WHERE equals(person_distinct_id2.team_id, 2)
                 GROUP BY person_distinct_id2.distinct_id
                 HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
              WHERE and(equals(e.team_id, 2), equals(e.event, '$pageview'), ifNull(greaterOrEquals(timestamp, minus(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-08 00:00:00', 6, 'Asia/Tokyo')), toIntervalDay(7))), 0), ifNull(lessOrEquals(timestamp, assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-19 23:59:59', 6, 'Asia/Tokyo'))), 0))
              GROUP BY timestamp, actor_id) AS e
           WHERE and(ifNull(lessOrEquals(e.timestamp, plus(d.timestamp, toIntervalDay(1))), 0), ifNull(greater(e.timestamp, minus(d.timestamp, toIntervalDay(6))), 0))
           GROUP BY d.timestamp
           ORDER BY d.timestamp ASC)
        WHERE and(ifNull(greaterOrEquals(timestamp, toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-08 00:00:00', 6, 'Asia/Tokyo')))), 0), ifNull(lessOrEquals(timestamp, assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-19 23:59:59', 6, 'Asia/Tokyo'))), 0)))
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY arraySum(total) DESC
  LIMIT 50000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1,
                       format_csv_allow_double_quotes=0,
                       max_ast_elements=1000000,
                       max_expanded_ast_elements=1000000,
                       max_query_size=524288,
                       max_bytes_before_external_group_by=0
  '''
# ---
# name: TestTrends.test_weekly_active_users_filtering
  '''
  SELECT arrayMap(number -> plus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC'))), toIntervalDay(number)), range(0, plus(coalesce(dateDiff('day', toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC'))), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-12 23:59:59', 6, 'UTC'))))), 1))) AS date,
         arrayMap(_match_date -> arraySum(arraySlice(groupArray(count), indexOf(groupArray(day_start) AS _days_for_count, _match_date) AS _index, plus(minus(arrayLastIndex(x -> ifNull(equals(x, _match_date), isNull(x)
                                                                                                                                                                                        and isNull(_match_date)), _days_for_count), _index), 1))), date) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start AS day_start
     FROM
       (SELECT counts AS total,
               toStartOfDay(timestamp) AS day_start
        FROM
          (SELECT d.timestamp AS timestamp,
                  count(DISTINCT e.actor_id) AS counts
           FROM
             (SELECT minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-12 23:59:59', 6, 'UTC'))), toIntervalDay(numbers.number)) AS timestamp
              FROM numbers(dateDiff('day', minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC'))), toIntervalDay(7)), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-12 23:59:59', 6, 'UTC')))) AS numbers) AS d
           CROSS JOIN
             (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                     e__pdi.person_id AS actor_id
              FROM events AS e SAMPLE 1
              INNER JOIN
                (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                        argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS e__pdi___person_id,
                        person_distinct_id2.distinct_id AS distinct_id
                 FROM person_distinct_id2
                 WHERE equals(person_distinct_id2.team_id, 2)
                 GROUP BY person_distinct_id2.distinct_id
                 HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
              LEFT JOIN
                (SELECT person.id AS id,
                        replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, 'name'), ''), 'null'), '^"|"$', '') AS properties___name
                 FROM person
                 WHERE and(equals(person.team_id, 2), ifNull(in(tuple(person.id, person.version),
                                                                  (SELECT person.id AS id, max(person.version) AS version
                                                                   FROM person
                                                                   WHERE equals(person.team_id, 2)
                                                                   GROUP BY person.id
                                                                   HAVING and(ifNull(equals(argMax(person.is_deleted, person.version), 0), 0), ifNull(less(argMax(person.created_at, person.version), plus(now64(6, 'UTC'), toIntervalDay(1))), 0)))), 0)) SETTINGS optimize_aggregation_in_order=1) AS e__pdi__person ON equals(e__pdi.e__pdi___person_id, e__pdi__person.id)
              WHERE and(equals(e.team_id, 2), and(equals(e.event, '$pageview'), or(ifNull(equals(e__pdi__person.properties___name, 'person-1'), 0), ifNull(equals(e__pdi__person.properties___name, 'person-2'), 0))), ifNull(greaterOrEquals(timestamp, minus(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC')), toIntervalDay(7))), 0), ifNull(lessOrEquals(timestamp, assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-12 23:59:59', 6, 'UTC'))), 0))
              GROUP BY timestamp, actor_id) AS e
           WHERE and(ifNull(lessOrEquals(e.timestamp, plus(d.timestamp, toIntervalDay(1))), 0), ifNull(greater(e.timestamp, minus(d.timestamp, toIntervalDay(6))), 0))
           GROUP BY d.timestamp
           ORDER BY d.timestamp ASC)
        WHERE and(ifNull(greaterOrEquals(timestamp, toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC')))), 0), ifNull(lessOrEquals(timestamp, assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-12 23:59:59', 6, 'UTC'))), 0)))
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY arraySum(total) DESC
  LIMIT 50000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1,
                       format_csv_allow_double_quotes=0,
                       max_ast_elements=1000000,
                       max_expanded_ast_elements=1000000,
                       max_query_size=524288,
                       max_bytes_before_external_group_by=0
  '''
# ---
# name: TestTrends.test_weekly_active_users_filtering_materialized
  '''
  SELECT arrayMap(number -> plus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC'))), toIntervalDay(number)), range(0, plus(coalesce(dateDiff('day', toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC'))), toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-12 23:59:59', 6, 'UTC'))))), 1))) AS date,
         arrayMap(_match_date -> arraySum(arraySlice(groupArray(count), indexOf(groupArray(day_start) AS _days_for_count, _match_date) AS _index, plus(minus(arrayLastIndex(x -> ifNull(equals(x, _match_date), isNull(x)
                                                                                                                                                                                        and isNull(_match_date)), _days_for_count), _index), 1))), date) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start AS day_start
     FROM
       (SELECT counts AS total,
               toStartOfDay(timestamp) AS day_start
        FROM
          (SELECT d.timestamp AS timestamp,
                  count(DISTINCT e.actor_id) AS counts
           FROM
             (SELECT minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-12 23:59:59', 6, 'UTC'))), toIntervalDay(numbers.number)) AS timestamp
              FROM numbers(dateDiff('day', minus(toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC'))), toIntervalDay(7)), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-12 23:59:59', 6, 'UTC')))) AS numbers) AS d
           CROSS JOIN
             (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                     e__pdi.person_id AS actor_id
              FROM events AS e SAMPLE 1
              INNER JOIN
                (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                        argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS e__pdi___person_id,
                        person_distinct_id2.distinct_id AS distinct_id
                 FROM person_distinct_id2
                 WHERE equals(person_distinct_id2.team_id, 2)
                 GROUP BY person_distinct_id2.distinct_id
                 HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
              LEFT JOIN
                (SELECT person.id AS id,
                        nullIf(nullIf(person.pmat_name, ''), 'null') AS properties___name
                 FROM person
                 WHERE and(equals(person.team_id, 2), ifNull(in(tuple(person.id, person.version),
                                                                  (SELECT person.id AS id, max(person.version) AS version
                                                                   FROM person
                                                                   WHERE equals(person.team_id, 2)
                                                                   GROUP BY person.id
                                                                   HAVING and(ifNull(equals(argMax(person.is_deleted, person.version), 0), 0), ifNull(less(argMax(person.created_at, person.version), plus(now64(6, 'UTC'), toIntervalDay(1))), 0)))), 0)) SETTINGS optimize_aggregation_in_order=1) AS e__pdi__person ON equals(e__pdi.e__pdi___person_id, e__pdi__person.id)
              WHERE and(equals(e.team_id, 2), and(equals(e.event, '$pageview'), or(ifNull(equals(e__pdi__person.properties___name, 'person-1'), 0), ifNull(equals(e__pdi__person.properties___name, 'person-2'), 0))), ifNull(greaterOrEquals(timestamp, minus(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC')), toIntervalDay(7))), 0), ifNull(lessOrEquals(timestamp, assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-12 23:59:59', 6, 'UTC'))), 0))
              GROUP BY timestamp, actor_id) AS e
           WHERE and(ifNull(lessOrEquals(e.timestamp, plus(d.timestamp, toIntervalDay(1))), 0), ifNull(greater(e.timestamp, minus(d.timestamp, toIntervalDay(6))), 0))
           GROUP BY d.timestamp
           ORDER BY d.timestamp ASC)
        WHERE and(ifNull(greaterOrEquals(timestamp, toStartOfDay(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-01 00:00:00', 6, 'UTC')))), 0), ifNull(lessOrEquals(timestamp, assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-12 23:59:59', 6, 'UTC'))), 0)))
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY arraySum(total) DESC
  LIMIT 50000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1,
                       format_csv_allow_double_quotes=0,
                       max_ast_elements=1000000,
                       max_expanded_ast_elements=1000000,
                       max_query_size=524288,
                       max_bytes_before_external_group_by=0
  '''
# ---
# name: TestTrends.test_weekly_active_users_hourly
  '''
  SELECT arrayMap(number -> plus(toStartOfHour(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-09 06:00:00', 6, 'UTC'))), toIntervalHour(number)), range(0, plus(coalesce(dateDiff('hour', toStartOfHour(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-09 06:00:00', 6, 'UTC'))), toStartOfHour(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-09 17:00:00', 6, 'UTC'))))), 1))) AS date,
         arrayMap(_match_date -> arraySum(arraySlice(groupArray(count), indexOf(groupArray(day_start) AS _days_for_count, _match_date) AS _index, plus(minus(arrayLastIndex(x -> ifNull(equals(x, _match_date), isNull(x)
                                                                                                                                                                                        and isNull(_match_date)), _days_for_count), _index), 1))), date) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start AS day_start
     FROM
       (SELECT counts AS total,
               toStartOfHour(timestamp) AS day_start
        FROM
          (SELECT d.timestamp AS timestamp,
                  count(DISTINCT e.actor_id) AS counts
           FROM
             (SELECT minus(toStartOfHour(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-09 17:00:00', 6, 'UTC'))), toIntervalHour(numbers.number)) AS timestamp
              FROM numbers(dateDiff('hour', minus(toStartOfHour(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-09 06:00:00', 6, 'UTC'))), toIntervalDay(7)), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-09 17:00:00', 6, 'UTC')))) AS numbers) AS d
           CROSS JOIN
             (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                     e__pdi.person_id AS actor_id
              FROM events AS e SAMPLE 1
              INNER JOIN
                (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                        person_distinct_id2.distinct_id AS distinct_id
                 FROM person_distinct_id2
                 WHERE equals(person_distinct_id2.team_id, 2)
                 GROUP BY person_distinct_id2.distinct_id
                 HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
              WHERE and(equals(e.team_id, 2), equals(e.event, '$pageview'), ifNull(greaterOrEquals(timestamp, minus(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-09 06:00:00', 6, 'UTC')), toIntervalDay(7))), 0), ifNull(lessOrEquals(timestamp, assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-09 17:00:00', 6, 'UTC'))), 0))
              GROUP BY timestamp, actor_id) AS e
           WHERE and(ifNull(lessOrEquals(e.timestamp, plus(d.timestamp, toIntervalDay(1))), 0), ifNull(greater(e.timestamp, minus(d.timestamp, toIntervalDay(6))), 0))
           GROUP BY d.timestamp
           ORDER BY d.timestamp ASC)
        WHERE and(ifNull(greaterOrEquals(timestamp, toStartOfHour(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-09 06:00:00', 6, 'UTC')))), 0), ifNull(lessOrEquals(timestamp, assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-09 17:00:00', 6, 'UTC'))), 0)))
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY arraySum(total) DESC
  LIMIT 50000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1,
                       format_csv_allow_double_quotes=0,
                       max_ast_elements=1000000,
                       max_expanded_ast_elements=1000000,
                       max_query_size=524288,
                       max_bytes_before_external_group_by=0
  '''
# ---
# name: TestTrends.test_weekly_active_users_weekly
  '''
  SELECT arrayMap(number -> plus(toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-29 00:00:00', 6, 'UTC')), 0), toIntervalWeek(number)), range(0, plus(coalesce(dateDiff('week', toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-29 00:00:00', 6, 'UTC')), 0), toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-18 23:59:59', 6, 'UTC')), 0))), 1))) AS date,
         arrayMap(_match_date -> arraySum(arraySlice(groupArray(count), indexOf(groupArray(day_start) AS _days_for_count, _match_date) AS _index, plus(minus(arrayLastIndex(x -> ifNull(equals(x, _match_date), isNull(x)
                                                                                                                                                                                        and isNull(_match_date)), _days_for_count), _index), 1))), date) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start AS day_start
     FROM
       (SELECT counts AS total,
               toStartOfWeek(timestamp, 0) AS day_start
        FROM
          (SELECT d.timestamp AS timestamp,
                  count(DISTINCT e.actor_id) AS counts
           FROM
             (SELECT minus(toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-18 23:59:59', 6, 'UTC')), 0), toIntervalWeek(numbers.number)) AS timestamp
              FROM numbers(dateDiff('week', minus(toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-29 00:00:00', 6, 'UTC')), 0), toIntervalDay(7)), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-18 23:59:59', 6, 'UTC')))) AS numbers) AS d
           CROSS JOIN
             (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                     e__pdi.person_id AS actor_id
              FROM events AS e SAMPLE 1
              INNER JOIN
                (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                        person_distinct_id2.distinct_id AS distinct_id
                 FROM person_distinct_id2
                 WHERE equals(person_distinct_id2.team_id, 2)
                 GROUP BY person_distinct_id2.distinct_id
                 HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
              WHERE and(equals(e.team_id, 2), equals(e.event, '$pageview'), ifNull(greaterOrEquals(timestamp, minus(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-29 00:00:00', 6, 'UTC')), toIntervalDay(7))), 0), ifNull(lessOrEquals(timestamp, assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-18 23:59:59', 6, 'UTC'))), 0))
              GROUP BY timestamp, actor_id) AS e
           WHERE and(ifNull(lessOrEquals(e.timestamp, plus(d.timestamp, toIntervalDay(1))), 0), ifNull(greater(e.timestamp, minus(d.timestamp, toIntervalDay(6))), 0))
           GROUP BY d.timestamp
           ORDER BY d.timestamp ASC)
        WHERE and(ifNull(greaterOrEquals(timestamp, toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-29 00:00:00', 6, 'UTC')), 0)), 0), ifNull(lessOrEquals(timestamp, assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-18 23:59:59', 6, 'UTC'))), 0)))
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY arraySum(total) DESC
  LIMIT 50000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1,
                       format_csv_allow_double_quotes=0,
                       max_ast_elements=1000000,
                       max_expanded_ast_elements=1000000,
                       max_query_size=524288,
                       max_bytes_before_external_group_by=0
  '''
# ---
# name: TestTrends.test_weekly_active_users_weekly_minus_utc
  '''
  SELECT arrayMap(number -> plus(toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-29 00:00:00', 6, 'America/Phoenix')), 0), toIntervalWeek(number)), range(0, plus(coalesce(dateDiff('week', toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-29 00:00:00', 6, 'America/Phoenix')), 0), toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-18 23:59:59', 6, 'America/Phoenix')), 0))), 1))) AS date,
         arrayMap(_match_date -> arraySum(arraySlice(groupArray(count), indexOf(groupArray(day_start) AS _days_for_count, _match_date) AS _index, plus(minus(arrayLastIndex(x -> ifNull(equals(x, _match_date), isNull(x)
                                                                                                                                                                                        and isNull(_match_date)), _days_for_count), _index), 1))), date) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start AS day_start
     FROM
       (SELECT counts AS total,
               toStartOfWeek(timestamp, 0) AS day_start
        FROM
          (SELECT d.timestamp AS timestamp,
                  count(DISTINCT e.actor_id) AS counts
           FROM
             (SELECT minus(toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-18 23:59:59', 6, 'America/Phoenix')), 0), toIntervalWeek(numbers.number)) AS timestamp
              FROM numbers(dateDiff('week', minus(toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-29 00:00:00', 6, 'America/Phoenix')), 0), toIntervalDay(7)), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-18 23:59:59', 6, 'America/Phoenix')))) AS numbers) AS d
           CROSS JOIN
             (SELECT toTimeZone(e.timestamp, 'America/Phoenix') AS timestamp,
                     e__pdi.person_id AS actor_id
              FROM events AS e SAMPLE 1
              INNER JOIN
                (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                        person_distinct_id2.distinct_id AS distinct_id
                 FROM person_distinct_id2
                 WHERE equals(person_distinct_id2.team_id, 2)
                 GROUP BY person_distinct_id2.distinct_id
                 HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
              WHERE and(equals(e.team_id, 2), equals(e.event, '$pageview'), ifNull(greaterOrEquals(timestamp, minus(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-29 00:00:00', 6, 'America/Phoenix')), toIntervalDay(7))), 0), ifNull(lessOrEquals(timestamp, assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-18 23:59:59', 6, 'America/Phoenix'))), 0))
              GROUP BY timestamp, actor_id) AS e
           WHERE and(ifNull(lessOrEquals(e.timestamp, plus(d.timestamp, toIntervalDay(1))), 0), ifNull(greater(e.timestamp, minus(d.timestamp, toIntervalDay(6))), 0))
           GROUP BY d.timestamp
           ORDER BY d.timestamp ASC)
        WHERE and(ifNull(greaterOrEquals(timestamp, toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-29 00:00:00', 6, 'America/Phoenix')), 0)), 0), ifNull(lessOrEquals(timestamp, assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-18 23:59:59', 6, 'America/Phoenix'))), 0)))
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY arraySum(total) DESC
  LIMIT 50000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1,
                       format_csv_allow_double_quotes=0,
                       max_ast_elements=1000000,
                       max_expanded_ast_elements=1000000,
                       max_query_size=524288,
                       max_bytes_before_external_group_by=0
  '''
# ---
# name: TestTrends.test_weekly_active_users_weekly_plus_utc
  '''
  SELECT arrayMap(number -> plus(toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-29 00:00:00', 6, 'Asia/Tokyo')), 0), toIntervalWeek(number)), range(0, plus(coalesce(dateDiff('week', toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-29 00:00:00', 6, 'Asia/Tokyo')), 0), toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-18 23:59:59', 6, 'Asia/Tokyo')), 0))), 1))) AS date,
         arrayMap(_match_date -> arraySum(arraySlice(groupArray(count), indexOf(groupArray(day_start) AS _days_for_count, _match_date) AS _index, plus(minus(arrayLastIndex(x -> ifNull(equals(x, _match_date), isNull(x)
                                                                                                                                                                                        and isNull(_match_date)), _days_for_count), _index), 1))), date) AS total
  FROM
    (SELECT sum(total) AS count,
            day_start AS day_start
     FROM
       (SELECT counts AS total,
               toStartOfWeek(timestamp, 0) AS day_start
        FROM
          (SELECT d.timestamp AS timestamp,
                  count(DISTINCT e.actor_id) AS counts
           FROM
             (SELECT minus(toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-18 23:59:59', 6, 'Asia/Tokyo')), 0), toIntervalWeek(numbers.number)) AS timestamp
              FROM numbers(dateDiff('week', minus(toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-29 00:00:00', 6, 'Asia/Tokyo')), 0), toIntervalDay(7)), assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-18 23:59:59', 6, 'Asia/Tokyo')))) AS numbers) AS d
           CROSS JOIN
             (SELECT toTimeZone(e.timestamp, 'Asia/Tokyo') AS timestamp,
                     e__pdi.person_id AS actor_id
              FROM events AS e SAMPLE 1
              INNER JOIN
                (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                        person_distinct_id2.distinct_id AS distinct_id
                 FROM person_distinct_id2
                 WHERE equals(person_distinct_id2.team_id, 2)
                 GROUP BY person_distinct_id2.distinct_id
                 HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0)) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
              WHERE and(equals(e.team_id, 2), equals(e.event, '$pageview'), ifNull(greaterOrEquals(timestamp, minus(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-29 00:00:00', 6, 'Asia/Tokyo')), toIntervalDay(7))), 0), ifNull(lessOrEquals(timestamp, assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-18 23:59:59', 6, 'Asia/Tokyo'))), 0))
              GROUP BY timestamp, actor_id) AS e
           WHERE and(ifNull(lessOrEquals(e.timestamp, plus(d.timestamp, toIntervalDay(1))), 0), ifNull(greater(e.timestamp, minus(d.timestamp, toIntervalDay(6))), 0))
           GROUP BY d.timestamp
           ORDER BY d.timestamp ASC)
        WHERE and(ifNull(greaterOrEquals(timestamp, toStartOfWeek(assumeNotNull(parseDateTime64BestEffortOrNull('2019-12-29 00:00:00', 6, 'Asia/Tokyo')), 0)), 0), ifNull(lessOrEquals(timestamp, assumeNotNull(parseDateTime64BestEffortOrNull('2020-01-18 23:59:59', 6, 'Asia/Tokyo'))), 0)))
     GROUP BY day_start
     ORDER BY day_start ASC)
  ORDER BY arraySum(total) DESC
  LIMIT 50000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1,
                       format_csv_allow_double_quotes=0,
                       max_ast_elements=1000000,
                       max_expanded_ast_elements=1000000,
                       max_query_size=524288,
                       max_bytes_before_external_group_by=0
  '''
# ---
