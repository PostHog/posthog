# serializer version: 1
# name: TestExperimentFunnelMetric.test_funnel_metric_duplicate_events
  '''
  SELECT metric_events.variant AS variant,
         count(metric_events.entity_id) AS num_users,
         countIf(ifNull(equals((metric_events.value).1, 1), 0)) AS total_sum,
         countIf(ifNull(equals((metric_events.value).1, 1), 0)) AS total_sum_of_squares,
         tuple(countIf(ifNull(greaterOrEquals((metric_events.value).1, 0), 0)), countIf(ifNull(greaterOrEquals((metric_events.value).1, 1), 0))) AS step_counts,
         tuple(groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(0, 1)), isNull((metric_events.value).1)
                                                                                                                                                                                                                                                                                                                                                                    and isNull(minus(0, 1)))), groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(1, 1)), isNull((metric_events.value).1)
and isNull(minus(1, 1)))), groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(2, 1)), isNull((metric_events.value).1)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    and isNull(minus(2, 1))))) AS steps_event_data
  FROM
    (SELECT exposures.variant AS variant,
            exposures.entity_id AS entity_id,
            any(exposures.exposure_event_uuid) AS exposure_event_uuid,
            any(exposures.exposure_session_id) AS exposure_session_id,
            arraySort(x -> minus(0, x.1), arrayMap(result -> tuple(result.1, if(and(ifNull(greaterOrEquals(result.1, 0), 0), ifNull(greater(length(result.4), result.1), 0)), if(ifNull(greater(length(arrayElement(result.4, plus(result.1, 1))), 0), 0), toString(arrayElement(result.4, plus(result.1, 1))[1]), ''), '')), aggregate_funnel_array_v8(2, 94608000, 'first_touch', 'ordered', array(array('')), [], arraySort(t -> t.1, groupArray(tuple(accurateCastOrNull(metric_events.timestamp, 'Float64'), metric_events.uuid, array(''), arrayFilter(x -> ifNull(notEquals(x, 0), 1), [multiply(1, metric_events.step_0), multiply(2, metric_events.step_1)])))))))[1] AS value,
            mapFromArrays(groupArray(coalesce(toString(metric_events.uuid), '')), groupArray(coalesce(toString(metric_events.session_id), ''))) AS uuid_to_session
     FROM
       (SELECT if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id) AS entity_id,
               if(ifNull(greater(count(DISTINCT replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', '')), 1), 0), '$multiple', any(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''))) AS variant,
               min(toTimeZone(events.timestamp, 'UTC')) AS first_exposure_time,
               argMin(events.uuid, toTimeZone(events.timestamp, 'UTC')) AS exposure_event_uuid,
               argMin(events.`$session_id`, toTimeZone(events.timestamp, 'UTC')) AS exposure_session_id
        FROM events
        LEFT OUTER JOIN
          (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                  person_distinct_id_overrides.distinct_id AS distinct_id
           FROM person_distinct_id_overrides
           WHERE equals(person_distinct_id_overrides.team_id, 99999)
           GROUP BY person_distinct_id_overrides.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id)
        WHERE and(equals(events.team_id, 99999), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('today', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('explicit_redacted_timestamp', 6, 'UTC')), in(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''), ['control', 'test']), equals(events.event, '$feature_flag_called'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag'), ''), 'null'), '^"|"$', ''), 'test-experiment'), 0))
        GROUP BY entity_id) AS exposures
     LEFT JOIN
       (SELECT toTimeZone(events.timestamp, 'UTC') AS timestamp,
               if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id) AS entity_id,
               events.event AS event,
               events.uuid AS uuid,
               events.properties AS properties,
               nullIf(nullIf(events.`$session_id`, ''), 'null') AS session_id,
               if(equals(events.event, '$pageview'), 1, 0) AS step_0,
               if(equals(events.event, 'purchase'), 1, 0) AS step_1
        FROM events
        LEFT OUTER JOIN
          (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                  person_distinct_id_overrides.distinct_id AS distinct_id
           FROM person_distinct_id_overrides
           WHERE equals(person_distinct_id_overrides.team_id, 99999)
           GROUP BY person_distinct_id_overrides.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id)
        WHERE and(equals(events.team_id, 99999), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('today', 6, 'UTC')), less(toTimeZone(events.timestamp, 'UTC'), toDateTime64('explicit_redacted_timestamp', 6, 'UTC')), or(equals(events.event, '$pageview'), equals(events.event, 'purchase')))) AS metric_events ON and(equals(toString(exposures.entity_id), toString(metric_events.entity_id)), greaterOrEquals(metric_events.timestamp, exposures.first_exposure_time))
     GROUP BY exposures.variant,
              exposures.entity_id) AS metric_events
  GROUP BY metric_events.variant
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=600,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=0,
                     max_ast_elements=4000000,
                     max_expanded_ast_elements=4000000,
                     max_bytes_before_external_group_by=0,
                     allow_experimental_analyzer=1,
                     transform_null_in=1,
                     optimize_min_equality_disjunction_chain_length=4294967295,
                     allow_experimental_join_condition=1
  '''
# ---
# name: TestExperimentFunnelMetric.test_funnel_metric_duplicate_events_0_disable_new_query_builder
  '''
  SELECT metric_events.variant AS variant,
         count(metric_events.entity_id) AS num_users,
         countIf(ifNull(equals((metric_events.value).1, 1), 0)) AS total_sum,
         countIf(ifNull(equals((metric_events.value).1, 1), 0)) AS total_sum_of_squares,
         tuple(countIf(ifNull(greaterOrEquals((metric_events.value).1, 0), 0)), countIf(ifNull(greaterOrEquals((metric_events.value).1, 1), 0))) AS step_counts,
         tuple(groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(0, 1)), isNull((metric_events.value).1)
                                                                                                                                                                                                                                                                                                                                                                    and isNull(minus(0, 1)))), groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(1, 1)), isNull((metric_events.value).1)
and isNull(minus(1, 1)))), groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(2, 1)), isNull((metric_events.value).1)
and isNull(minus(2, 1))))) AS steps_event_data
  FROM
    (SELECT exposures.variant AS variant,
            exposures.entity_id AS entity_id,
            any(exposures.exposure_event_uuid) AS exposure_event_uuid,
            any(exposures.exposure_session_id) AS exposure_session_id,
            arraySort(x -> minus(0, x.1), arrayMap(result -> tuple(result.1, if(and(ifNull(greaterOrEquals(result.1, 0), 0), ifNull(greater(length(result.4), result.1), 0)), if(ifNull(greater(length(arrayElement(result.4, plus(result.1, 1))), 0), 0), toString(arrayElement(result.4, plus(result.1, 1))[1]), ''), '')), aggregate_funnel_array_v8(2, 94608000, 'first_touch', 'ordered', array(array('')), [], arraySort(t -> t.1, groupArray(tuple(accurateCastOrNull(metric_events.timestamp, 'Float64'), metric_events.uuid, array(''), arrayFilter(x -> ifNull(notEquals(x, 0), 1), [multiply(1, metric_events.step_0), multiply(2, metric_events.step_1)])))))))[1] AS value,
            mapFromArrays(groupArray(coalesce(toString(metric_events.uuid), '')), groupArray(coalesce(toString(metric_events.session_id), ''))) AS uuid_to_session
     FROM
       (SELECT if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id) AS entity_id,
               if(ifNull(greater(count(DISTINCT replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', '')), 1), 0), '$multiple', any(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''))) AS variant,
               min(toTimeZone(events.timestamp, 'UTC')) AS first_exposure_time,
               argMin(events.uuid, toTimeZone(events.timestamp, 'UTC')) AS exposure_event_uuid,
               argMin(events.`$session_id`, toTimeZone(events.timestamp, 'UTC')) AS exposure_session_id
        FROM events
        LEFT OUTER JOIN
          (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                  person_distinct_id_overrides.distinct_id AS distinct_id
           FROM person_distinct_id_overrides
           WHERE equals(person_distinct_id_overrides.team_id, 99999)
           GROUP BY person_distinct_id_overrides.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id)
        WHERE and(equals(events.team_id, 99999), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('today', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('explicit_redacted_timestamp', 6, 'UTC')), in(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''), ['control', 'test']), equals(events.event, '$feature_flag_called'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag'), ''), 'null'), '^"|"$', ''), 'test-experiment'), 0))
        GROUP BY entity_id) AS exposures
     LEFT JOIN
       (SELECT toTimeZone(events.timestamp, 'UTC') AS timestamp,
               if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id) AS entity_id,
               events.event AS event,
               events.uuid AS uuid,
               events.properties AS properties,
               nullIf(nullIf(events.`$session_id`, ''), 'null') AS session_id,
               if(equals(events.event, '$pageview'), 1, 0) AS step_0,
               if(equals(events.event, 'purchase'), 1, 0) AS step_1
        FROM events
        LEFT OUTER JOIN
          (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                  person_distinct_id_overrides.distinct_id AS distinct_id
           FROM person_distinct_id_overrides
           WHERE equals(person_distinct_id_overrides.team_id, 99999)
           GROUP BY person_distinct_id_overrides.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id)
        WHERE and(equals(events.team_id, 99999), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('today', 6, 'UTC')), less(toTimeZone(events.timestamp, 'UTC'), toDateTime64('explicit_redacted_timestamp', 6, 'UTC')), or(equals(events.event, '$pageview'), equals(events.event, 'purchase')))) AS metric_events ON and(equals(toString(exposures.entity_id), toString(metric_events.entity_id)), greaterOrEquals(metric_events.timestamp, exposures.first_exposure_time))
     GROUP BY exposures.variant,
              exposures.entity_id) AS metric_events
  GROUP BY metric_events.variant
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=600,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=0,
                     max_ast_elements=4000000,
                     max_expanded_ast_elements=4000000,
                     max_bytes_before_external_group_by=0,
                     allow_experimental_analyzer=1,
                     transform_null_in=1,
                     optimize_min_equality_disjunction_chain_length=4294967295,
                     allow_experimental_join_condition=1
  '''
# ---
# name: TestExperimentFunnelMetric.test_funnel_metric_duplicate_events_1_enable_new_query_builder
  '''
  SELECT entity_metrics.variant AS variant,
         count(entity_metrics.entity_id) AS num_users,
         countIf(ifNull(equals((entity_metrics.value).1, 2), 0)) AS total_sum,
         countIf(ifNull(equals((entity_metrics.value).1, 2), 0)) AS total_sum_of_squares,
         tuple(countIf(ifNull(greaterOrEquals((entity_metrics.value).1, 1), 0)), countIf(ifNull(greaterOrEquals((entity_metrics.value).1, 2), 0))) AS step_counts,
         tuple(groupArraySampleIf(100)(if(ifNull(notEquals((entity_metrics.value).2, ''), 1), tuple(toString(entity_metrics.entity_id), entity_metrics.uuid_to_session[(entity_metrics.value).2], (entity_metrics.value).2), tuple(toString(entity_metrics.entity_id), toString(entity_metrics.exposure_session_id), toString(entity_metrics.exposure_event_uuid))), ifNull(equals((entity_metrics.value).1, minus(1, 1)), isNull((entity_metrics.value).1)
                                                                                                                                                                                                                                                                                                                                                                            and isNull(minus(1, 1)))), groupArraySampleIf(100)(if(ifNull(notEquals((entity_metrics.value).2, ''), 1), tuple(toString(entity_metrics.entity_id), entity_metrics.uuid_to_session[(entity_metrics.value).2], (entity_metrics.value).2), tuple(toString(entity_metrics.entity_id), toString(entity_metrics.exposure_session_id), toString(entity_metrics.exposure_event_uuid))), ifNull(equals((entity_metrics.value).1, minus(2, 1)), isNull((entity_metrics.value).1)
and isNull(minus(2, 1)))), groupArraySampleIf(100)(if(ifNull(notEquals((entity_metrics.value).2, ''), 1), tuple(toString(entity_metrics.entity_id), entity_metrics.uuid_to_session[(entity_metrics.value).2], (entity_metrics.value).2), tuple(toString(entity_metrics.entity_id), toString(entity_metrics.exposure_session_id), toString(entity_metrics.exposure_event_uuid))), ifNull(equals((entity_metrics.value).1, minus(3, 1)), isNull((entity_metrics.value).1)
and isNull(minus(3, 1))))) AS steps_event_data
  FROM
    (SELECT metric_events.entity_id AS entity_id,
            if(ifNull(greater(uniqExactIf(metric_events.variant, ifNull(equals(metric_events.step_0, 1), 0)), 1), 0), '$multiple', anyIf(metric_events.variant, ifNull(equals(metric_events.step_0, 1), 0))) AS variant,
            argMinIf(metric_events.uuid, metric_events.timestamp, ifNull(equals(metric_events.step_0, 1), 0)) AS exposure_event_uuid,
            argMinIf(metric_events.session_id, metric_events.timestamp, ifNull(equals(metric_events.step_0, 1), 0)) AS exposure_session_id,
            arraySort(x -> minus(0, x.1), arrayMap(result -> tuple(result.1, if(and(ifNull(greaterOrEquals(result.1, 0), 0), ifNull(greater(length(result.4), result.1), 0)), if(ifNull(greater(length(arrayElement(result.4, plus(result.1, 1))), 0), 0), toString(arrayElement(result.4, plus(result.1, 1))[1]), ''), '')), aggregate_funnel_array_v8(3, 94608000, 'first_touch', 'ordered', array(array('')), [], arraySort(t -> t.1, groupArray(tuple(accurateCastOrNull(metric_events.timestamp, 'Float64'), metric_events.uuid, array(''), arrayFilter(x -> ifNull(notEquals(x, 0), 1), [multiply(1, metric_events.step_0), multiply(2, metric_events.step_1), multiply(3, metric_events.step_2)])))))))[1] AS value,
            mapFromArrays(groupArray(coalesce(toString(metric_events.uuid), '')), groupArray(coalesce(toString(metric_events.session_id), ''))) AS uuid_to_session
     FROM
       (SELECT if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id) AS entity_id,
               replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', '') AS variant,
               toTimeZone(events.timestamp, 'UTC') AS timestamp,
               events.uuid AS uuid,
               nullIf(nullIf(events.`$session_id`, ''), 'null') AS session_id,
               and(greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2024-01-01 12:00:00', 'UTC'))), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2024-01-15 12:00:00', 'UTC'))), and(equals(events.event, '$feature_flag_called'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag'), ''), 'null'), '^"|"$', ''), 'test-experiment'), 0)), in(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''), ['control', 'test'])) AS step_0,
               if(equals(events.event, '$pageview'), 1, 0) AS step_1,
               if(equals(events.event, 'purchase'), 1, 0) AS step_2
        FROM events
        LEFT OUTER JOIN
          (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                  person_distinct_id_overrides.distinct_id AS distinct_id
           FROM person_distinct_id_overrides
           WHERE equals(person_distinct_id_overrides.team_id, 99999)
           GROUP BY person_distinct_id_overrides.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id)
        WHERE and(equals(events.team_id, 99999), or(and(greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2024-01-01 12:00:00', 'UTC'))), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2024-01-15 12:00:00', 'UTC'))), and(equals(events.event, '$feature_flag_called'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag'), ''), 'null'), '^"|"$', ''), 'test-experiment'), 0)), in(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''), ['control', 'test'])), and(greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2024-01-01 12:00:00', 'UTC'))), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2024-01-15 12:00:00', 'UTC'))), or(equals(events.event, '$pageview'), equals(events.event, 'purchase')))))) AS metric_events
     GROUP BY metric_events.entity_id) AS entity_metrics
  WHERE notEmpty(variant)
  GROUP BY entity_metrics.variant
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=600,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=0,
                     max_ast_elements=4000000,
                     max_expanded_ast_elements=4000000,
                     max_bytes_before_external_group_by=0,
                     allow_experimental_analyzer=1,
                     transform_null_in=1,
                     optimize_min_equality_disjunction_chain_length=4294967295,
                     allow_experimental_join_condition=1
  '''
# ---
# name: TestExperimentFunnelMetric.test_funnel_metric_events_out_of_order
  '''
  SELECT metric_events.variant AS variant,
         count(metric_events.entity_id) AS num_users,
         countIf(ifNull(equals((metric_events.value).1, 1), 0)) AS total_sum,
         countIf(ifNull(equals((metric_events.value).1, 1), 0)) AS total_sum_of_squares,
         tuple(countIf(ifNull(greaterOrEquals((metric_events.value).1, 0), 0)), countIf(ifNull(greaterOrEquals((metric_events.value).1, 1), 0))) AS step_counts,
         tuple(groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(0, 1)), isNull((metric_events.value).1)
                                                                                                                                                                                                                                                                                                                                                                    and isNull(minus(0, 1)))), groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(1, 1)), isNull((metric_events.value).1)
and isNull(minus(1, 1)))), groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(2, 1)), isNull((metric_events.value).1)
and isNull(minus(2, 1))))) AS steps_event_data
  FROM
    (SELECT exposures.variant AS variant,
            exposures.entity_id AS entity_id,
            any(exposures.exposure_event_uuid) AS exposure_event_uuid,
            any(exposures.exposure_session_id) AS exposure_session_id,
            arraySort(x -> minus(0, x.1), arrayMap(result -> tuple(result.1, if(and(ifNull(greaterOrEquals(result.1, 0), 0), ifNull(greater(length(result.4), result.1), 0)), if(ifNull(greater(length(arrayElement(result.4, plus(result.1, 1))), 0), 0), toString(arrayElement(result.4, plus(result.1, 1))[1]), ''), '')), aggregate_funnel_array_v8(2, 94608000, 'first_touch', 'ordered', array(array('')), [], arraySort(t -> t.1, groupArray(tuple(accurateCastOrNull(metric_events.timestamp, 'Float64'), metric_events.uuid, array(''), arrayFilter(x -> ifNull(notEquals(x, 0), 1), [multiply(1, metric_events.step_0), multiply(2, metric_events.step_1)])))))))[1] AS value,
            mapFromArrays(groupArray(coalesce(toString(metric_events.uuid), '')), groupArray(coalesce(toString(metric_events.session_id), ''))) AS uuid_to_session
     FROM
       (SELECT if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id) AS entity_id,
               if(ifNull(greater(count(DISTINCT replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', '')), 1), 0), '$multiple', any(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''))) AS variant,
               min(toTimeZone(events.timestamp, 'UTC')) AS first_exposure_time,
               argMin(events.uuid, toTimeZone(events.timestamp, 'UTC')) AS exposure_event_uuid,
               argMin(events.`$session_id`, toTimeZone(events.timestamp, 'UTC')) AS exposure_session_id
        FROM events
        LEFT OUTER JOIN
          (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                  person_distinct_id_overrides.distinct_id AS distinct_id
           FROM person_distinct_id_overrides
           WHERE equals(person_distinct_id_overrides.team_id, 99999)
           GROUP BY person_distinct_id_overrides.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id)
        WHERE and(equals(events.team_id, 99999), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('today', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('explicit_redacted_timestamp', 6, 'UTC')), in(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''), ['control', 'test']), equals(events.event, '$feature_flag_called'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag'), ''), 'null'), '^"|"$', ''), 'test-experiment'), 0))
        GROUP BY entity_id) AS exposures
     LEFT JOIN
       (SELECT toTimeZone(events.timestamp, 'UTC') AS timestamp,
               if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id) AS entity_id,
               events.event AS event,
               events.uuid AS uuid,
               events.properties AS properties,
               nullIf(nullIf(events.`$session_id`, ''), 'null') AS session_id,
               if(equals(events.event, '$pageview'), 1, 0) AS step_0,
               if(equals(events.event, 'purchase'), 1, 0) AS step_1
        FROM events
        LEFT OUTER JOIN
          (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                  person_distinct_id_overrides.distinct_id AS distinct_id
           FROM person_distinct_id_overrides
           WHERE equals(person_distinct_id_overrides.team_id, 99999)
           GROUP BY person_distinct_id_overrides.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id)
        WHERE and(equals(events.team_id, 99999), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('today', 6, 'UTC')), less(toTimeZone(events.timestamp, 'UTC'), toDateTime64('explicit_redacted_timestamp', 6, 'UTC')), or(equals(events.event, '$pageview'), equals(events.event, 'purchase')))) AS metric_events ON and(equals(toString(exposures.entity_id), toString(metric_events.entity_id)), greaterOrEquals(metric_events.timestamp, exposures.first_exposure_time))
     GROUP BY exposures.variant,
              exposures.entity_id) AS metric_events
  GROUP BY metric_events.variant
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=600,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=0,
                     max_ast_elements=4000000,
                     max_expanded_ast_elements=4000000,
                     max_bytes_before_external_group_by=0,
                     allow_experimental_analyzer=1,
                     transform_null_in=1,
                     optimize_min_equality_disjunction_chain_length=4294967295,
                     allow_experimental_join_condition=1
  '''
# ---
# name: TestExperimentFunnelMetric.test_funnel_metric_events_out_of_order_0_disable_new_query_builder
  '''
  SELECT metric_events.variant AS variant,
         count(metric_events.entity_id) AS num_users,
         countIf(ifNull(equals((metric_events.value).1, 1), 0)) AS total_sum,
         countIf(ifNull(equals((metric_events.value).1, 1), 0)) AS total_sum_of_squares,
         tuple(countIf(ifNull(greaterOrEquals((metric_events.value).1, 0), 0)), countIf(ifNull(greaterOrEquals((metric_events.value).1, 1), 0))) AS step_counts,
         tuple(groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(0, 1)), isNull((metric_events.value).1)
                                                                                                                                                                                                                                                                                                                                                                    and isNull(minus(0, 1)))), groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(1, 1)), isNull((metric_events.value).1)
and isNull(minus(1, 1)))), groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(2, 1)), isNull((metric_events.value).1)
and isNull(minus(2, 1))))) AS steps_event_data
  FROM
    (SELECT exposures.variant AS variant,
            exposures.entity_id AS entity_id,
            any(exposures.exposure_event_uuid) AS exposure_event_uuid,
            any(exposures.exposure_session_id) AS exposure_session_id,
            arraySort(x -> minus(0, x.1), arrayMap(result -> tuple(result.1, if(and(ifNull(greaterOrEquals(result.1, 0), 0), ifNull(greater(length(result.4), result.1), 0)), if(ifNull(greater(length(arrayElement(result.4, plus(result.1, 1))), 0), 0), toString(arrayElement(result.4, plus(result.1, 1))[1]), ''), '')), aggregate_funnel_array_v8(2, 94608000, 'first_touch', 'ordered', array(array('')), [], arraySort(t -> t.1, groupArray(tuple(accurateCastOrNull(metric_events.timestamp, 'Float64'), metric_events.uuid, array(''), arrayFilter(x -> ifNull(notEquals(x, 0), 1), [multiply(1, metric_events.step_0), multiply(2, metric_events.step_1)])))))))[1] AS value,
            mapFromArrays(groupArray(coalesce(toString(metric_events.uuid), '')), groupArray(coalesce(toString(metric_events.session_id), ''))) AS uuid_to_session
     FROM
       (SELECT if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id) AS entity_id,
               if(ifNull(greater(count(DISTINCT replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', '')), 1), 0), '$multiple', any(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''))) AS variant,
               min(toTimeZone(events.timestamp, 'UTC')) AS first_exposure_time,
               argMin(events.uuid, toTimeZone(events.timestamp, 'UTC')) AS exposure_event_uuid,
               argMin(events.`$session_id`, toTimeZone(events.timestamp, 'UTC')) AS exposure_session_id
        FROM events
        LEFT OUTER JOIN
          (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                  person_distinct_id_overrides.distinct_id AS distinct_id
           FROM person_distinct_id_overrides
           WHERE equals(person_distinct_id_overrides.team_id, 99999)
           GROUP BY person_distinct_id_overrides.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id)
        WHERE and(equals(events.team_id, 99999), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('today', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('explicit_redacted_timestamp', 6, 'UTC')), in(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''), ['control', 'test']), equals(events.event, '$feature_flag_called'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag'), ''), 'null'), '^"|"$', ''), 'test-experiment'), 0))
        GROUP BY entity_id) AS exposures
     LEFT JOIN
       (SELECT toTimeZone(events.timestamp, 'UTC') AS timestamp,
               if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id) AS entity_id,
               events.event AS event,
               events.uuid AS uuid,
               events.properties AS properties,
               nullIf(nullIf(events.`$session_id`, ''), 'null') AS session_id,
               if(equals(events.event, '$pageview'), 1, 0) AS step_0,
               if(equals(events.event, 'purchase'), 1, 0) AS step_1
        FROM events
        LEFT OUTER JOIN
          (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                  person_distinct_id_overrides.distinct_id AS distinct_id
           FROM person_distinct_id_overrides
           WHERE equals(person_distinct_id_overrides.team_id, 99999)
           GROUP BY person_distinct_id_overrides.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id)
        WHERE and(equals(events.team_id, 99999), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('today', 6, 'UTC')), less(toTimeZone(events.timestamp, 'UTC'), toDateTime64('explicit_redacted_timestamp', 6, 'UTC')), or(equals(events.event, '$pageview'), equals(events.event, 'purchase')))) AS metric_events ON and(equals(toString(exposures.entity_id), toString(metric_events.entity_id)), greaterOrEquals(metric_events.timestamp, exposures.first_exposure_time))
     GROUP BY exposures.variant,
              exposures.entity_id) AS metric_events
  GROUP BY metric_events.variant
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=600,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=0,
                     max_ast_elements=4000000,
                     max_expanded_ast_elements=4000000,
                     max_bytes_before_external_group_by=0,
                     allow_experimental_analyzer=1,
                     transform_null_in=1,
                     optimize_min_equality_disjunction_chain_length=4294967295,
                     allow_experimental_join_condition=1
  '''
# ---
# name: TestExperimentFunnelMetric.test_funnel_metric_events_out_of_order_1_enable_new_query_builder
  '''
  SELECT entity_metrics.variant AS variant,
         count(entity_metrics.entity_id) AS num_users,
         countIf(ifNull(equals((entity_metrics.value).1, 2), 0)) AS total_sum,
         countIf(ifNull(equals((entity_metrics.value).1, 2), 0)) AS total_sum_of_squares,
         tuple(countIf(ifNull(greaterOrEquals((entity_metrics.value).1, 1), 0)), countIf(ifNull(greaterOrEquals((entity_metrics.value).1, 2), 0))) AS step_counts,
         tuple(groupArraySampleIf(100)(if(ifNull(notEquals((entity_metrics.value).2, ''), 1), tuple(toString(entity_metrics.entity_id), entity_metrics.uuid_to_session[(entity_metrics.value).2], (entity_metrics.value).2), tuple(toString(entity_metrics.entity_id), toString(entity_metrics.exposure_session_id), toString(entity_metrics.exposure_event_uuid))), ifNull(equals((entity_metrics.value).1, minus(1, 1)), isNull((entity_metrics.value).1)
                                                                                                                                                                                                                                                                                                                                                                            and isNull(minus(1, 1)))), groupArraySampleIf(100)(if(ifNull(notEquals((entity_metrics.value).2, ''), 1), tuple(toString(entity_metrics.entity_id), entity_metrics.uuid_to_session[(entity_metrics.value).2], (entity_metrics.value).2), tuple(toString(entity_metrics.entity_id), toString(entity_metrics.exposure_session_id), toString(entity_metrics.exposure_event_uuid))), ifNull(equals((entity_metrics.value).1, minus(2, 1)), isNull((entity_metrics.value).1)
and isNull(minus(2, 1)))), groupArraySampleIf(100)(if(ifNull(notEquals((entity_metrics.value).2, ''), 1), tuple(toString(entity_metrics.entity_id), entity_metrics.uuid_to_session[(entity_metrics.value).2], (entity_metrics.value).2), tuple(toString(entity_metrics.entity_id), toString(entity_metrics.exposure_session_id), toString(entity_metrics.exposure_event_uuid))), ifNull(equals((entity_metrics.value).1, minus(3, 1)), isNull((entity_metrics.value).1)
and isNull(minus(3, 1))))) AS steps_event_data
  FROM
    (SELECT metric_events.entity_id AS entity_id,
            if(ifNull(greater(uniqExactIf(metric_events.variant, ifNull(equals(metric_events.step_0, 1), 0)), 1), 0), '$multiple', anyIf(metric_events.variant, ifNull(equals(metric_events.step_0, 1), 0))) AS variant,
            argMinIf(metric_events.uuid, metric_events.timestamp, ifNull(equals(metric_events.step_0, 1), 0)) AS exposure_event_uuid,
            argMinIf(metric_events.session_id, metric_events.timestamp, ifNull(equals(metric_events.step_0, 1), 0)) AS exposure_session_id,
            arraySort(x -> minus(0, x.1), arrayMap(result -> tuple(result.1, if(and(ifNull(greaterOrEquals(result.1, 0), 0), ifNull(greater(length(result.4), result.1), 0)), if(ifNull(greater(length(arrayElement(result.4, plus(result.1, 1))), 0), 0), toString(arrayElement(result.4, plus(result.1, 1))[1]), ''), '')), aggregate_funnel_array_v8(3, 94608000, 'first_touch', 'ordered', array(array('')), [], arraySort(t -> t.1, groupArray(tuple(accurateCastOrNull(metric_events.timestamp, 'Float64'), metric_events.uuid, array(''), arrayFilter(x -> ifNull(notEquals(x, 0), 1), [multiply(1, metric_events.step_0), multiply(2, metric_events.step_1), multiply(3, metric_events.step_2)])))))))[1] AS value,
            mapFromArrays(groupArray(coalesce(toString(metric_events.uuid), '')), groupArray(coalesce(toString(metric_events.session_id), ''))) AS uuid_to_session
     FROM
       (SELECT if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id) AS entity_id,
               replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', '') AS variant,
               toTimeZone(events.timestamp, 'UTC') AS timestamp,
               events.uuid AS uuid,
               nullIf(nullIf(events.`$session_id`, ''), 'null') AS session_id,
               and(greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2024-01-01 12:00:00', 'UTC'))), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2024-01-15 12:00:00', 'UTC'))), and(equals(events.event, '$feature_flag_called'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag'), ''), 'null'), '^"|"$', ''), 'test-experiment'), 0)), in(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''), ['control', 'test'])) AS step_0,
               if(equals(events.event, '$pageview'), 1, 0) AS step_1,
               if(equals(events.event, 'purchase'), 1, 0) AS step_2
        FROM events
        LEFT OUTER JOIN
          (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                  person_distinct_id_overrides.distinct_id AS distinct_id
           FROM person_distinct_id_overrides
           WHERE equals(person_distinct_id_overrides.team_id, 99999)
           GROUP BY person_distinct_id_overrides.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id)
        WHERE and(equals(events.team_id, 99999), or(and(greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2024-01-01 12:00:00', 'UTC'))), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2024-01-15 12:00:00', 'UTC'))), and(equals(events.event, '$feature_flag_called'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag'), ''), 'null'), '^"|"$', ''), 'test-experiment'), 0)), in(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''), ['control', 'test'])), and(greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2024-01-01 12:00:00', 'UTC'))), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2024-01-15 12:00:00', 'UTC'))), or(equals(events.event, '$pageview'), equals(events.event, 'purchase')))))) AS metric_events
     GROUP BY metric_events.entity_id) AS entity_metrics
  WHERE notEmpty(variant)
  GROUP BY entity_metrics.variant
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=600,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=0,
                     max_ast_elements=4000000,
                     max_expanded_ast_elements=4000000,
                     max_bytes_before_external_group_by=0,
                     allow_experimental_analyzer=1,
                     transform_null_in=1,
                     optimize_min_equality_disjunction_chain_length=4294967295,
                     allow_experimental_join_condition=1
  '''
# ---
# name: TestExperimentFunnelMetric.test_funnel_metric_excludes_different_feature_flags_0_disable_new_query_builder
  '''
  SELECT metric_events.variant AS variant,
         count(metric_events.entity_id) AS num_users,
         countIf(ifNull(equals((metric_events.value).1, 1), 0)) AS total_sum,
         countIf(ifNull(equals((metric_events.value).1, 1), 0)) AS total_sum_of_squares,
         tuple(countIf(ifNull(greaterOrEquals((metric_events.value).1, 0), 0)), countIf(ifNull(greaterOrEquals((metric_events.value).1, 1), 0))) AS step_counts,
         tuple(groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(0, 1)), isNull((metric_events.value).1)
                                                                                                                                                                                                                                                                                                                                                                    and isNull(minus(0, 1)))), groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(1, 1)), isNull((metric_events.value).1)
and isNull(minus(1, 1)))), groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(2, 1)), isNull((metric_events.value).1)
and isNull(minus(2, 1))))) AS steps_event_data
  FROM
    (SELECT exposures.variant AS variant,
            exposures.entity_id AS entity_id,
            any(exposures.exposure_event_uuid) AS exposure_event_uuid,
            any(exposures.exposure_session_id) AS exposure_session_id,
            arraySort(x -> minus(0, x.1), arrayMap(result -> tuple(result.1, if(and(ifNull(greaterOrEquals(result.1, 0), 0), ifNull(greater(length(result.4), result.1), 0)), if(ifNull(greater(length(arrayElement(result.4, plus(result.1, 1))), 0), 0), toString(arrayElement(result.4, plus(result.1, 1))[1]), ''), '')), aggregate_funnel_array_v8(2, 94608000, 'first_touch', 'ordered', array(array('')), [], arraySort(t -> t.1, groupArray(tuple(accurateCastOrNull(metric_events.timestamp, 'Float64'), metric_events.uuid, array(''), arrayFilter(x -> ifNull(notEquals(x, 0), 1), [multiply(1, metric_events.step_0), multiply(2, metric_events.step_1)])))))))[1] AS value,
            mapFromArrays(groupArray(coalesce(toString(metric_events.uuid), '')), groupArray(coalesce(toString(metric_events.session_id), ''))) AS uuid_to_session
     FROM
       (SELECT if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id) AS entity_id,
               if(ifNull(greater(count(DISTINCT replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', '')), 1), 0), '$multiple', any(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''))) AS variant,
               min(toTimeZone(events.timestamp, 'UTC')) AS first_exposure_time,
               argMin(events.uuid, toTimeZone(events.timestamp, 'UTC')) AS exposure_event_uuid,
               argMin(events.`$session_id`, toTimeZone(events.timestamp, 'UTC')) AS exposure_session_id
        FROM events
        LEFT OUTER JOIN
          (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                  person_distinct_id_overrides.distinct_id AS distinct_id
           FROM person_distinct_id_overrides
           WHERE equals(person_distinct_id_overrides.team_id, 99999)
           GROUP BY person_distinct_id_overrides.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id)
        WHERE and(equals(events.team_id, 99999), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('today', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('explicit_redacted_timestamp', 6, 'UTC')), in(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''), ['control', 'test']), equals(events.event, '$feature_flag_called'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag'), ''), 'null'), '^"|"$', ''), 'experiment-flag'), 0))
        GROUP BY entity_id) AS exposures
     LEFT JOIN
       (SELECT toTimeZone(events.timestamp, 'UTC') AS timestamp,
               if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id) AS entity_id,
               events.event AS event,
               events.uuid AS uuid,
               events.properties AS properties,
               nullIf(nullIf(events.`$session_id`, ''), 'null') AS session_id,
               if(equals(events.event, '$pageview'), 1, 0) AS step_0,
               if(equals(events.event, 'purchase'), 1, 0) AS step_1
        FROM events
        LEFT OUTER JOIN
          (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                  person_distinct_id_overrides.distinct_id AS distinct_id
           FROM person_distinct_id_overrides
           WHERE equals(person_distinct_id_overrides.team_id, 99999)
           GROUP BY person_distinct_id_overrides.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id)
        WHERE and(equals(events.team_id, 99999), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('today', 6, 'UTC')), less(toTimeZone(events.timestamp, 'UTC'), toDateTime64('explicit_redacted_timestamp', 6, 'UTC')), or(equals(events.event, '$pageview'), equals(events.event, 'purchase')))) AS metric_events ON and(equals(toString(exposures.entity_id), toString(metric_events.entity_id)), greaterOrEquals(metric_events.timestamp, exposures.first_exposure_time))
     GROUP BY exposures.variant,
              exposures.entity_id) AS metric_events
  GROUP BY metric_events.variant
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=600,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=0,
                     max_ast_elements=4000000,
                     max_expanded_ast_elements=4000000,
                     max_bytes_before_external_group_by=0,
                     allow_experimental_analyzer=1,
                     transform_null_in=1,
                     optimize_min_equality_disjunction_chain_length=4294967295,
                     allow_experimental_join_condition=1
  '''
# ---
# name: TestExperimentFunnelMetric.test_funnel_metric_excludes_different_feature_flags_1_enable_new_query_builder
  '''
  SELECT entity_metrics.variant AS variant,
         count(entity_metrics.entity_id) AS num_users,
         countIf(ifNull(equals((entity_metrics.value).1, 2), 0)) AS total_sum,
         countIf(ifNull(equals((entity_metrics.value).1, 2), 0)) AS total_sum_of_squares,
         tuple(countIf(ifNull(greaterOrEquals((entity_metrics.value).1, 1), 0)), countIf(ifNull(greaterOrEquals((entity_metrics.value).1, 2), 0))) AS step_counts,
         tuple(groupArraySampleIf(100)(if(ifNull(notEquals((entity_metrics.value).2, ''), 1), tuple(toString(entity_metrics.entity_id), entity_metrics.uuid_to_session[(entity_metrics.value).2], (entity_metrics.value).2), tuple(toString(entity_metrics.entity_id), toString(entity_metrics.exposure_session_id), toString(entity_metrics.exposure_event_uuid))), ifNull(equals((entity_metrics.value).1, minus(1, 1)), isNull((entity_metrics.value).1)
                                                                                                                                                                                                                                                                                                                                                                            and isNull(minus(1, 1)))), groupArraySampleIf(100)(if(ifNull(notEquals((entity_metrics.value).2, ''), 1), tuple(toString(entity_metrics.entity_id), entity_metrics.uuid_to_session[(entity_metrics.value).2], (entity_metrics.value).2), tuple(toString(entity_metrics.entity_id), toString(entity_metrics.exposure_session_id), toString(entity_metrics.exposure_event_uuid))), ifNull(equals((entity_metrics.value).1, minus(2, 1)), isNull((entity_metrics.value).1)
and isNull(minus(2, 1)))), groupArraySampleIf(100)(if(ifNull(notEquals((entity_metrics.value).2, ''), 1), tuple(toString(entity_metrics.entity_id), entity_metrics.uuid_to_session[(entity_metrics.value).2], (entity_metrics.value).2), tuple(toString(entity_metrics.entity_id), toString(entity_metrics.exposure_session_id), toString(entity_metrics.exposure_event_uuid))), ifNull(equals((entity_metrics.value).1, minus(3, 1)), isNull((entity_metrics.value).1)
and isNull(minus(3, 1))))) AS steps_event_data
  FROM
    (SELECT metric_events.entity_id AS entity_id,
            if(ifNull(greater(uniqExactIf(metric_events.variant, ifNull(equals(metric_events.step_0, 1), 0)), 1), 0), '$multiple', anyIf(metric_events.variant, ifNull(equals(metric_events.step_0, 1), 0))) AS variant,
            argMinIf(metric_events.uuid, metric_events.timestamp, ifNull(equals(metric_events.step_0, 1), 0)) AS exposure_event_uuid,
            argMinIf(metric_events.session_id, metric_events.timestamp, ifNull(equals(metric_events.step_0, 1), 0)) AS exposure_session_id,
            arraySort(x -> minus(0, x.1), arrayMap(result -> tuple(result.1, if(and(ifNull(greaterOrEquals(result.1, 0), 0), ifNull(greater(length(result.4), result.1), 0)), if(ifNull(greater(length(arrayElement(result.4, plus(result.1, 1))), 0), 0), toString(arrayElement(result.4, plus(result.1, 1))[1]), ''), '')), aggregate_funnel_array_v8(3, 94608000, 'first_touch', 'ordered', array(array('')), [], arraySort(t -> t.1, groupArray(tuple(accurateCastOrNull(metric_events.timestamp, 'Float64'), metric_events.uuid, array(''), arrayFilter(x -> ifNull(notEquals(x, 0), 1), [multiply(1, metric_events.step_0), multiply(2, metric_events.step_1), multiply(3, metric_events.step_2)])))))))[1] AS value,
            mapFromArrays(groupArray(coalesce(toString(metric_events.uuid), '')), groupArray(coalesce(toString(metric_events.session_id), ''))) AS uuid_to_session
     FROM
       (SELECT if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id) AS entity_id,
               replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', '') AS variant,
               toTimeZone(events.timestamp, 'UTC') AS timestamp,
               events.uuid AS uuid,
               nullIf(nullIf(events.`$session_id`, ''), 'null') AS session_id,
               and(greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2024-01-01 12:00:00', 'UTC'))), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2024-01-15 12:00:00', 'UTC'))), and(equals(events.event, '$feature_flag_called'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag'), ''), 'null'), '^"|"$', ''), 'experiment-flag'), 0)), in(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''), ['control', 'test'])) AS step_0,
               if(equals(events.event, '$pageview'), 1, 0) AS step_1,
               if(equals(events.event, 'purchase'), 1, 0) AS step_2
        FROM events
        LEFT OUTER JOIN
          (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                  person_distinct_id_overrides.distinct_id AS distinct_id
           FROM person_distinct_id_overrides
           WHERE equals(person_distinct_id_overrides.team_id, 99999)
           GROUP BY person_distinct_id_overrides.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id)
        WHERE and(equals(events.team_id, 99999), or(and(greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2024-01-01 12:00:00', 'UTC'))), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2024-01-15 12:00:00', 'UTC'))), and(equals(events.event, '$feature_flag_called'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag'), ''), 'null'), '^"|"$', ''), 'experiment-flag'), 0)), in(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''), ['control', 'test'])), and(greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2024-01-01 12:00:00', 'UTC'))), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2024-01-15 12:00:00', 'UTC'))), or(equals(events.event, '$pageview'), equals(events.event, 'purchase')))))) AS metric_events
     GROUP BY metric_events.entity_id) AS entity_metrics
  WHERE notEmpty(variant)
  GROUP BY entity_metrics.variant
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=600,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=0,
                     max_ast_elements=4000000,
                     max_expanded_ast_elements=4000000,
                     max_bytes_before_external_group_by=0,
                     allow_experimental_analyzer=1,
                     transform_null_in=1,
                     optimize_min_equality_disjunction_chain_length=4294967295,
                     allow_experimental_join_condition=1
  '''
# ---
# name: TestExperimentFunnelMetric.test_funnel_metric_excludes_events_after_experiment_end_date_0_disable_new_query_builder
  '''
  SELECT metric_events.variant AS variant,
         count(metric_events.entity_id) AS num_users,
         countIf(ifNull(equals((metric_events.value).1, 0), 0)) AS total_sum,
         countIf(ifNull(equals((metric_events.value).1, 0), 0)) AS total_sum_of_squares,
         tuple(countIf(ifNull(greaterOrEquals((metric_events.value).1, 0), 0))) AS step_counts,
         tuple(groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(0, 1)), isNull((metric_events.value).1)
                                                                                                                                                                                                                                                                                                                                                                    and isNull(minus(0, 1)))), groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(1, 1)), isNull((metric_events.value).1)
and isNull(minus(1, 1))))) AS steps_event_data
  FROM
    (SELECT exposures.variant AS variant,
            exposures.entity_id AS entity_id,
            any(exposures.exposure_event_uuid) AS exposure_event_uuid,
            any(exposures.exposure_session_id) AS exposure_session_id,
            arraySort(x -> minus(0, x.1), arrayMap(result -> tuple(result.1, if(and(ifNull(greaterOrEquals(result.1, 0), 0), ifNull(greater(length(result.4), result.1), 0)), if(ifNull(greater(length(arrayElement(result.4, plus(result.1, 1))), 0), 0), toString(arrayElement(result.4, plus(result.1, 1))[1]), ''), '')), aggregate_funnel_array_v8(1, 94608000, 'first_touch', 'ordered', array(array('')), [], arraySort(t -> t.1, groupArray(tuple(accurateCastOrNull(metric_events.timestamp, 'Float64'), metric_events.uuid, array(''), arrayFilter(x -> ifNull(notEquals(x, 0), 1), [multiply(1, metric_events.step_0)])))))))[1] AS value,
            mapFromArrays(groupArray(coalesce(toString(metric_events.uuid), '')), groupArray(coalesce(toString(metric_events.session_id), ''))) AS uuid_to_session
     FROM
       (SELECT if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id) AS entity_id,
               if(ifNull(greater(count(DISTINCT replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', '')), 1), 0), '$multiple', any(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''))) AS variant,
               min(toTimeZone(events.timestamp, 'UTC')) AS first_exposure_time,
               argMin(events.uuid, toTimeZone(events.timestamp, 'UTC')) AS exposure_event_uuid,
               argMin(events.`$session_id`, toTimeZone(events.timestamp, 'UTC')) AS exposure_session_id
        FROM events
        LEFT OUTER JOIN
          (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                  person_distinct_id_overrides.distinct_id AS distinct_id
           FROM person_distinct_id_overrides
           WHERE equals(person_distinct_id_overrides.team_id, 99999)
           GROUP BY person_distinct_id_overrides.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id)
        WHERE and(equals(events.team_id, 99999), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('today', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('explicit_redacted_timestamp', 6, 'UTC')), in(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''), ['control', 'test']), equals(events.event, '$feature_flag_called'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag'), ''), 'null'), '^"|"$', ''), 'test-experiment'), 0))
        GROUP BY entity_id) AS exposures
     LEFT JOIN
       (SELECT toTimeZone(events.timestamp, 'UTC') AS timestamp,
               if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id) AS entity_id,
               events.event AS event,
               events.uuid AS uuid,
               events.properties AS properties,
               nullIf(nullIf(events.`$session_id`, ''), 'null') AS session_id,
               if(equals(events.event, 'purchase'), 1, 0) AS step_0
        FROM events
        LEFT OUTER JOIN
          (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                  person_distinct_id_overrides.distinct_id AS distinct_id
           FROM person_distinct_id_overrides
           WHERE equals(person_distinct_id_overrides.team_id, 99999)
           GROUP BY person_distinct_id_overrides.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id)
        WHERE and(equals(events.team_id, 99999), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('today', 6, 'UTC')), less(toTimeZone(events.timestamp, 'UTC'), toDateTime64('explicit_redacted_timestamp', 6, 'UTC')), equals(events.event, 'purchase'))) AS metric_events ON and(equals(toString(exposures.entity_id), toString(metric_events.entity_id)), greaterOrEquals(metric_events.timestamp, exposures.first_exposure_time))
     GROUP BY exposures.variant,
              exposures.entity_id) AS metric_events
  GROUP BY metric_events.variant
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=600,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=0,
                     max_ast_elements=4000000,
                     max_expanded_ast_elements=4000000,
                     max_bytes_before_external_group_by=0,
                     allow_experimental_analyzer=1,
                     transform_null_in=1,
                     optimize_min_equality_disjunction_chain_length=4294967295,
                     allow_experimental_join_condition=1
  '''
# ---
# name: TestExperimentFunnelMetric.test_funnel_metric_excludes_events_after_experiment_end_date_1_enable_new_query_builder
  '''
  SELECT entity_metrics.variant AS variant,
         count(entity_metrics.entity_id) AS num_users,
         countIf(ifNull(equals((entity_metrics.value).1, 1), 0)) AS total_sum,
         countIf(ifNull(equals((entity_metrics.value).1, 1), 0)) AS total_sum_of_squares,
         tuple(countIf(ifNull(greaterOrEquals((entity_metrics.value).1, 1), 0))) AS step_counts,
         tuple(groupArraySampleIf(100)(if(ifNull(notEquals((entity_metrics.value).2, ''), 1), tuple(toString(entity_metrics.entity_id), entity_metrics.uuid_to_session[(entity_metrics.value).2], (entity_metrics.value).2), tuple(toString(entity_metrics.entity_id), toString(entity_metrics.exposure_session_id), toString(entity_metrics.exposure_event_uuid))), ifNull(equals((entity_metrics.value).1, minus(1, 1)), isNull((entity_metrics.value).1)
                                                                                                                                                                                                                                                                                                                                                                            and isNull(minus(1, 1)))), groupArraySampleIf(100)(if(ifNull(notEquals((entity_metrics.value).2, ''), 1), tuple(toString(entity_metrics.entity_id), entity_metrics.uuid_to_session[(entity_metrics.value).2], (entity_metrics.value).2), tuple(toString(entity_metrics.entity_id), toString(entity_metrics.exposure_session_id), toString(entity_metrics.exposure_event_uuid))), ifNull(equals((entity_metrics.value).1, minus(2, 1)), isNull((entity_metrics.value).1)
and isNull(minus(2, 1))))) AS steps_event_data
  FROM
    (SELECT metric_events.entity_id AS entity_id,
            if(ifNull(greater(uniqExactIf(metric_events.variant, ifNull(equals(metric_events.step_0, 1), 0)), 1), 0), '$multiple', anyIf(metric_events.variant, ifNull(equals(metric_events.step_0, 1), 0))) AS variant,
            argMinIf(metric_events.uuid, metric_events.timestamp, ifNull(equals(metric_events.step_0, 1), 0)) AS exposure_event_uuid,
            argMinIf(metric_events.session_id, metric_events.timestamp, ifNull(equals(metric_events.step_0, 1), 0)) AS exposure_session_id,
            arraySort(x -> minus(0, x.1), arrayMap(result -> tuple(result.1, if(and(ifNull(greaterOrEquals(result.1, 0), 0), ifNull(greater(length(result.4), result.1), 0)), if(ifNull(greater(length(arrayElement(result.4, plus(result.1, 1))), 0), 0), toString(arrayElement(result.4, plus(result.1, 1))[1]), ''), '')), aggregate_funnel_array_v8(2, 94608000, 'first_touch', 'ordered', array(array('')), [], arraySort(t -> t.1, groupArray(tuple(accurateCastOrNull(metric_events.timestamp, 'Float64'), metric_events.uuid, array(''), arrayFilter(x -> ifNull(notEquals(x, 0), 1), [multiply(1, metric_events.step_0), multiply(2, metric_events.step_1)])))))))[1] AS value,
            mapFromArrays(groupArray(coalesce(toString(metric_events.uuid), '')), groupArray(coalesce(toString(metric_events.session_id), ''))) AS uuid_to_session
     FROM
       (SELECT if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id) AS entity_id,
               replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', '') AS variant,
               toTimeZone(events.timestamp, 'UTC') AS timestamp,
               events.uuid AS uuid,
               nullIf(nullIf(events.`$session_id`, ''), 'null') AS session_id,
               and(greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2024-01-02 00:00:00', 'UTC'))), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2024-01-10 00:00:00', 'UTC'))), and(equals(events.event, '$feature_flag_called'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag'), ''), 'null'), '^"|"$', ''), 'test-experiment'), 0)), in(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''), ['control', 'test'])) AS step_0,
               if(equals(events.event, 'purchase'), 1, 0) AS step_1
        FROM events
        LEFT OUTER JOIN
          (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                  person_distinct_id_overrides.distinct_id AS distinct_id
           FROM person_distinct_id_overrides
           WHERE equals(person_distinct_id_overrides.team_id, 99999)
           GROUP BY person_distinct_id_overrides.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id)
        WHERE and(equals(events.team_id, 99999), or(and(greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2024-01-02 00:00:00', 'UTC'))), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2024-01-10 00:00:00', 'UTC'))), and(equals(events.event, '$feature_flag_called'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag'), ''), 'null'), '^"|"$', ''), 'test-experiment'), 0)), in(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''), ['control', 'test'])), and(greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2024-01-02 00:00:00', 'UTC'))), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2024-01-10 00:00:00', 'UTC'))), equals(events.event, 'purchase'))))) AS metric_events
     GROUP BY metric_events.entity_id) AS entity_metrics
  WHERE notEmpty(variant)
  GROUP BY entity_metrics.variant
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=600,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=0,
                     max_ast_elements=4000000,
                     max_expanded_ast_elements=4000000,
                     max_bytes_before_external_group_by=0,
                     allow_experimental_analyzer=1,
                     transform_null_in=1,
                     optimize_min_equality_disjunction_chain_length=4294967295,
                     allow_experimental_join_condition=1
  '''
# ---
# name: TestExperimentFunnelMetric.test_funnel_metric_ordered_vs_unordered_comparison
  '''
  SELECT metric_events.variant AS variant,
         count(metric_events.entity_id) AS num_users,
         countIf(ifNull(equals((metric_events.value).1, 1), 0)) AS total_sum,
         countIf(ifNull(equals((metric_events.value).1, 1), 0)) AS total_sum_of_squares,
         tuple(countIf(ifNull(greaterOrEquals((metric_events.value).1, 0), 0)), countIf(ifNull(greaterOrEquals((metric_events.value).1, 1), 0))) AS step_counts,
         tuple(groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(0, 1)), isNull((metric_events.value).1)
                                                                                                                                                                                                                                                                                                                                                                    and isNull(minus(0, 1)))), groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(1, 1)), isNull((metric_events.value).1)
and isNull(minus(1, 1)))), groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(2, 1)), isNull((metric_events.value).1)
and isNull(minus(2, 1))))) AS steps_event_data
  FROM
    (SELECT exposures.variant AS variant,
            exposures.entity_id AS entity_id,
            any(exposures.exposure_event_uuid) AS exposure_event_uuid,
            any(exposures.exposure_session_id) AS exposure_session_id,
            arraySort(x -> minus(0, x.1), arrayMap(result -> tuple(result.1, if(and(ifNull(greaterOrEquals(result.1, 0), 0), ifNull(greater(length(result.4), result.1), 0)), if(ifNull(greater(length(arrayElement(result.4, plus(result.1, 1))), 0), 0), toString(arrayElement(result.4, plus(result.1, 1))[1]), ''), '')), aggregate_funnel_array_v8(2, 94608000, 'first_touch', 'ordered', array(array('')), [], arraySort(t -> t.1, groupArray(tuple(accurateCastOrNull(metric_events.timestamp, 'Float64'), metric_events.uuid, array(''), arrayFilter(x -> ifNull(notEquals(x, 0), 1), [multiply(1, metric_events.step_0), multiply(2, metric_events.step_1)])))))))[1] AS value,
            mapFromArrays(groupArray(coalesce(toString(metric_events.uuid), '')), groupArray(coalesce(toString(metric_events.session_id), ''))) AS uuid_to_session
     FROM
       (SELECT if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id) AS entity_id,
               if(ifNull(greater(count(DISTINCT replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', '')), 1), 0), '$multiple', any(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''))) AS variant,
               min(toTimeZone(events.timestamp, 'UTC')) AS first_exposure_time,
               argMin(events.uuid, toTimeZone(events.timestamp, 'UTC')) AS exposure_event_uuid,
               argMin(events.`$session_id`, toTimeZone(events.timestamp, 'UTC')) AS exposure_session_id
        FROM events
        LEFT OUTER JOIN
          (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                  person_distinct_id_overrides.distinct_id AS distinct_id
           FROM person_distinct_id_overrides
           WHERE equals(person_distinct_id_overrides.team_id, 99999)
           GROUP BY person_distinct_id_overrides.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id)
        WHERE and(equals(events.team_id, 99999), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('today', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('explicit_redacted_timestamp', 6, 'UTC')), in(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''), ['control', 'test']), equals(events.event, '$feature_flag_called'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag'), ''), 'null'), '^"|"$', ''), 'test-experiment'), 0))
        GROUP BY entity_id) AS exposures
     LEFT JOIN
       (SELECT toTimeZone(events.timestamp, 'UTC') AS timestamp,
               if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id) AS entity_id,
               events.event AS event,
               events.uuid AS uuid,
               events.properties AS properties,
               nullIf(nullIf(events.`$session_id`, ''), 'null') AS session_id,
               if(equals(events.event, '$pageview'), 1, 0) AS step_0,
               if(equals(events.event, 'purchase'), 1, 0) AS step_1
        FROM events
        LEFT OUTER JOIN
          (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                  person_distinct_id_overrides.distinct_id AS distinct_id
           FROM person_distinct_id_overrides
           WHERE equals(person_distinct_id_overrides.team_id, 99999)
           GROUP BY person_distinct_id_overrides.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id)
        WHERE and(equals(events.team_id, 99999), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('today', 6, 'UTC')), less(toTimeZone(events.timestamp, 'UTC'), toDateTime64('explicit_redacted_timestamp', 6, 'UTC')), or(equals(events.event, '$pageview'), equals(events.event, 'purchase')))) AS metric_events ON and(equals(toString(exposures.entity_id), toString(metric_events.entity_id)), greaterOrEquals(metric_events.timestamp, exposures.first_exposure_time))
     GROUP BY exposures.variant,
              exposures.entity_id) AS metric_events
  GROUP BY metric_events.variant
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=600,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=0,
                     max_ast_elements=4000000,
                     max_expanded_ast_elements=4000000,
                     max_bytes_before_external_group_by=0,
                     allow_experimental_analyzer=1,
                     transform_null_in=1,
                     optimize_min_equality_disjunction_chain_length=4294967295,
                     allow_experimental_join_condition=1
  '''
# ---
# name: TestExperimentFunnelMetric.test_funnel_metric_ordered_vs_unordered_comparison.1
  '''
  SELECT metric_events.variant AS variant,
         count(metric_events.entity_id) AS num_users,
         countIf(ifNull(equals((metric_events.value).1, 1), 0)) AS total_sum,
         countIf(ifNull(equals((metric_events.value).1, 1), 0)) AS total_sum_of_squares,
         tuple(countIf(ifNull(greaterOrEquals((metric_events.value).1, 0), 0)), countIf(ifNull(greaterOrEquals((metric_events.value).1, 1), 0))) AS step_counts,
         tuple(groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(0, 1)), isNull((metric_events.value).1)
                                                                                                                                                                                                                                                                                                                                                                    and isNull(minus(0, 1)))), groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(1, 1)), isNull((metric_events.value).1)
and isNull(minus(1, 1)))), groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(2, 1)), isNull((metric_events.value).1)
and isNull(minus(2, 1))))) AS steps_event_data
  FROM
    (SELECT exposures.variant AS variant,
            exposures.entity_id AS entity_id,
            any(exposures.exposure_event_uuid) AS exposure_event_uuid,
            any(exposures.exposure_session_id) AS exposure_session_id,
            arraySort(x -> minus(0, x.1), arrayMap(result -> tuple(result.1, if(and(ifNull(greaterOrEquals(result.1, 0), 0), ifNull(greater(length(result.4), result.1), 0)), if(ifNull(greater(length(arrayElement(result.4, plus(result.1, 1))), 0), 0), toString(arrayElement(result.4, plus(result.1, 1))[1]), ''), '')), aggregate_funnel_array_v8(2, 94608000, 'first_touch', 'unordered', array(array('')), [], arraySort(t -> t.1, groupArray(tuple(accurateCastOrNull(metric_events.timestamp, 'Float64'), metric_events.uuid, array(''), arrayFilter(x -> ifNull(notEquals(x, 0), 1), [multiply(1, metric_events.step_0), multiply(2, metric_events.step_1)])))))))[1] AS value,
            mapFromArrays(groupArray(coalesce(toString(metric_events.uuid), '')), groupArray(coalesce(toString(metric_events.session_id), ''))) AS uuid_to_session
     FROM
       (SELECT if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id) AS entity_id,
               if(ifNull(greater(count(DISTINCT replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', '')), 1), 0), '$multiple', any(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''))) AS variant,
               min(toTimeZone(events.timestamp, 'UTC')) AS first_exposure_time,
               argMin(events.uuid, toTimeZone(events.timestamp, 'UTC')) AS exposure_event_uuid,
               argMin(events.`$session_id`, toTimeZone(events.timestamp, 'UTC')) AS exposure_session_id
        FROM events
        LEFT OUTER JOIN
          (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                  person_distinct_id_overrides.distinct_id AS distinct_id
           FROM person_distinct_id_overrides
           WHERE equals(person_distinct_id_overrides.team_id, 99999)
           GROUP BY person_distinct_id_overrides.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id)
        WHERE and(equals(events.team_id, 99999), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('today', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('explicit_redacted_timestamp', 6, 'UTC')), in(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''), ['control', 'test']), equals(events.event, '$feature_flag_called'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag'), ''), 'null'), '^"|"$', ''), 'test-experiment'), 0))
        GROUP BY entity_id) AS exposures
     LEFT JOIN
       (SELECT toTimeZone(events.timestamp, 'UTC') AS timestamp,
               if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id) AS entity_id,
               events.event AS event,
               events.uuid AS uuid,
               events.properties AS properties,
               nullIf(nullIf(events.`$session_id`, ''), 'null') AS session_id,
               if(equals(events.event, '$pageview'), 1, 0) AS step_0,
               if(equals(events.event, 'purchase'), 1, 0) AS step_1
        FROM events
        LEFT OUTER JOIN
          (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                  person_distinct_id_overrides.distinct_id AS distinct_id
           FROM person_distinct_id_overrides
           WHERE equals(person_distinct_id_overrides.team_id, 99999)
           GROUP BY person_distinct_id_overrides.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id)
        WHERE and(equals(events.team_id, 99999), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('today', 6, 'UTC')), less(toTimeZone(events.timestamp, 'UTC'), toDateTime64('explicit_redacted_timestamp', 6, 'UTC')), or(equals(events.event, '$pageview'), equals(events.event, 'purchase')))) AS metric_events ON and(equals(toString(exposures.entity_id), toString(metric_events.entity_id)), greaterOrEquals(metric_events.timestamp, exposures.first_exposure_time))
     GROUP BY exposures.variant,
              exposures.entity_id) AS metric_events
  GROUP BY metric_events.variant
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=600,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=0,
                     max_ast_elements=4000000,
                     max_expanded_ast_elements=4000000,
                     max_bytes_before_external_group_by=0,
                     allow_experimental_analyzer=1,
                     transform_null_in=1,
                     optimize_min_equality_disjunction_chain_length=4294967295,
                     allow_experimental_join_condition=1
  '''
# ---
# name: TestExperimentFunnelMetric.test_funnel_metric_ordered_vs_unordered_comparison_0_disable_new_query_builder
  '''
  SELECT metric_events.variant AS variant,
         count(metric_events.entity_id) AS num_users,
         countIf(ifNull(equals((metric_events.value).1, 1), 0)) AS total_sum,
         countIf(ifNull(equals((metric_events.value).1, 1), 0)) AS total_sum_of_squares,
         tuple(countIf(ifNull(greaterOrEquals((metric_events.value).1, 0), 0)), countIf(ifNull(greaterOrEquals((metric_events.value).1, 1), 0))) AS step_counts,
         tuple(groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(0, 1)), isNull((metric_events.value).1)
                                                                                                                                                                                                                                                                                                                                                                    and isNull(minus(0, 1)))), groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(1, 1)), isNull((metric_events.value).1)
and isNull(minus(1, 1)))), groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(2, 1)), isNull((metric_events.value).1)
and isNull(minus(2, 1))))) AS steps_event_data
  FROM
    (SELECT exposures.variant AS variant,
            exposures.entity_id AS entity_id,
            any(exposures.exposure_event_uuid) AS exposure_event_uuid,
            any(exposures.exposure_session_id) AS exposure_session_id,
            arraySort(x -> minus(0, x.1), arrayMap(result -> tuple(result.1, if(and(ifNull(greaterOrEquals(result.1, 0), 0), ifNull(greater(length(result.4), result.1), 0)), if(ifNull(greater(length(arrayElement(result.4, plus(result.1, 1))), 0), 0), toString(arrayElement(result.4, plus(result.1, 1))[1]), ''), '')), aggregate_funnel_array_v8(2, 94608000, 'first_touch', 'ordered', array(array('')), [], arraySort(t -> t.1, groupArray(tuple(accurateCastOrNull(metric_events.timestamp, 'Float64'), metric_events.uuid, array(''), arrayFilter(x -> ifNull(notEquals(x, 0), 1), [multiply(1, metric_events.step_0), multiply(2, metric_events.step_1)])))))))[1] AS value,
            mapFromArrays(groupArray(coalesce(toString(metric_events.uuid), '')), groupArray(coalesce(toString(metric_events.session_id), ''))) AS uuid_to_session
     FROM
       (SELECT if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id) AS entity_id,
               if(ifNull(greater(count(DISTINCT replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', '')), 1), 0), '$multiple', any(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''))) AS variant,
               min(toTimeZone(events.timestamp, 'UTC')) AS first_exposure_time,
               argMin(events.uuid, toTimeZone(events.timestamp, 'UTC')) AS exposure_event_uuid,
               argMin(events.`$session_id`, toTimeZone(events.timestamp, 'UTC')) AS exposure_session_id
        FROM events
        LEFT OUTER JOIN
          (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                  person_distinct_id_overrides.distinct_id AS distinct_id
           FROM person_distinct_id_overrides
           WHERE equals(person_distinct_id_overrides.team_id, 99999)
           GROUP BY person_distinct_id_overrides.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id)
        WHERE and(equals(events.team_id, 99999), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('today', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('explicit_redacted_timestamp', 6, 'UTC')), in(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''), ['control', 'test']), equals(events.event, '$feature_flag_called'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag'), ''), 'null'), '^"|"$', ''), 'test-experiment'), 0))
        GROUP BY entity_id) AS exposures
     LEFT JOIN
       (SELECT toTimeZone(events.timestamp, 'UTC') AS timestamp,
               if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id) AS entity_id,
               events.event AS event,
               events.uuid AS uuid,
               events.properties AS properties,
               nullIf(nullIf(events.`$session_id`, ''), 'null') AS session_id,
               if(equals(events.event, '$pageview'), 1, 0) AS step_0,
               if(equals(events.event, 'purchase'), 1, 0) AS step_1
        FROM events
        LEFT OUTER JOIN
          (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                  person_distinct_id_overrides.distinct_id AS distinct_id
           FROM person_distinct_id_overrides
           WHERE equals(person_distinct_id_overrides.team_id, 99999)
           GROUP BY person_distinct_id_overrides.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id)
        WHERE and(equals(events.team_id, 99999), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('today', 6, 'UTC')), less(toTimeZone(events.timestamp, 'UTC'), toDateTime64('explicit_redacted_timestamp', 6, 'UTC')), or(equals(events.event, '$pageview'), equals(events.event, 'purchase')))) AS metric_events ON and(equals(toString(exposures.entity_id), toString(metric_events.entity_id)), greaterOrEquals(metric_events.timestamp, exposures.first_exposure_time))
     GROUP BY exposures.variant,
              exposures.entity_id) AS metric_events
  GROUP BY metric_events.variant
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=600,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=0,
                     max_ast_elements=4000000,
                     max_expanded_ast_elements=4000000,
                     max_bytes_before_external_group_by=0,
                     allow_experimental_analyzer=1,
                     transform_null_in=1,
                     optimize_min_equality_disjunction_chain_length=4294967295,
                     allow_experimental_join_condition=1
  '''
# ---
# name: TestExperimentFunnelMetric.test_funnel_metric_ordered_vs_unordered_comparison_0_disable_new_query_builder.1
  '''
  SELECT metric_events.variant AS variant,
         count(metric_events.entity_id) AS num_users,
         countIf(ifNull(equals((metric_events.value).1, 1), 0)) AS total_sum,
         countIf(ifNull(equals((metric_events.value).1, 1), 0)) AS total_sum_of_squares,
         tuple(countIf(ifNull(greaterOrEquals((metric_events.value).1, 0), 0)), countIf(ifNull(greaterOrEquals((metric_events.value).1, 1), 0))) AS step_counts,
         tuple(groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(0, 1)), isNull((metric_events.value).1)
                                                                                                                                                                                                                                                                                                                                                                    and isNull(minus(0, 1)))), groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(1, 1)), isNull((metric_events.value).1)
and isNull(minus(1, 1)))), groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(2, 1)), isNull((metric_events.value).1)
and isNull(minus(2, 1))))) AS steps_event_data
  FROM
    (SELECT exposures.variant AS variant,
            exposures.entity_id AS entity_id,
            any(exposures.exposure_event_uuid) AS exposure_event_uuid,
            any(exposures.exposure_session_id) AS exposure_session_id,
            arraySort(x -> minus(0, x.1), arrayMap(result -> tuple(result.1, if(and(ifNull(greaterOrEquals(result.1, 0), 0), ifNull(greater(length(result.4), result.1), 0)), if(ifNull(greater(length(arrayElement(result.4, plus(result.1, 1))), 0), 0), toString(arrayElement(result.4, plus(result.1, 1))[1]), ''), '')), aggregate_funnel_array_v8(2, 94608000, 'first_touch', 'unordered', array(array('')), [], arraySort(t -> t.1, groupArray(tuple(accurateCastOrNull(metric_events.timestamp, 'Float64'), metric_events.uuid, array(''), arrayFilter(x -> ifNull(notEquals(x, 0), 1), [multiply(1, metric_events.step_0), multiply(2, metric_events.step_1)])))))))[1] AS value,
            mapFromArrays(groupArray(coalesce(toString(metric_events.uuid), '')), groupArray(coalesce(toString(metric_events.session_id), ''))) AS uuid_to_session
     FROM
       (SELECT if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id) AS entity_id,
               if(ifNull(greater(count(DISTINCT replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', '')), 1), 0), '$multiple', any(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''))) AS variant,
               min(toTimeZone(events.timestamp, 'UTC')) AS first_exposure_time,
               argMin(events.uuid, toTimeZone(events.timestamp, 'UTC')) AS exposure_event_uuid,
               argMin(events.`$session_id`, toTimeZone(events.timestamp, 'UTC')) AS exposure_session_id
        FROM events
        LEFT OUTER JOIN
          (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                  person_distinct_id_overrides.distinct_id AS distinct_id
           FROM person_distinct_id_overrides
           WHERE equals(person_distinct_id_overrides.team_id, 99999)
           GROUP BY person_distinct_id_overrides.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id)
        WHERE and(equals(events.team_id, 99999), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('today', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('explicit_redacted_timestamp', 6, 'UTC')), in(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''), ['control', 'test']), equals(events.event, '$feature_flag_called'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag'), ''), 'null'), '^"|"$', ''), 'test-experiment'), 0))
        GROUP BY entity_id) AS exposures
     LEFT JOIN
       (SELECT toTimeZone(events.timestamp, 'UTC') AS timestamp,
               if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id) AS entity_id,
               events.event AS event,
               events.uuid AS uuid,
               events.properties AS properties,
               nullIf(nullIf(events.`$session_id`, ''), 'null') AS session_id,
               if(equals(events.event, '$pageview'), 1, 0) AS step_0,
               if(equals(events.event, 'purchase'), 1, 0) AS step_1
        FROM events
        LEFT OUTER JOIN
          (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                  person_distinct_id_overrides.distinct_id AS distinct_id
           FROM person_distinct_id_overrides
           WHERE equals(person_distinct_id_overrides.team_id, 99999)
           GROUP BY person_distinct_id_overrides.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id)
        WHERE and(equals(events.team_id, 99999), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('today', 6, 'UTC')), less(toTimeZone(events.timestamp, 'UTC'), toDateTime64('explicit_redacted_timestamp', 6, 'UTC')), or(equals(events.event, '$pageview'), equals(events.event, 'purchase')))) AS metric_events ON and(equals(toString(exposures.entity_id), toString(metric_events.entity_id)), greaterOrEquals(metric_events.timestamp, exposures.first_exposure_time))
     GROUP BY exposures.variant,
              exposures.entity_id) AS metric_events
  GROUP BY metric_events.variant
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=600,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=0,
                     max_ast_elements=4000000,
                     max_expanded_ast_elements=4000000,
                     max_bytes_before_external_group_by=0,
                     allow_experimental_analyzer=1,
                     transform_null_in=1,
                     optimize_min_equality_disjunction_chain_length=4294967295,
                     allow_experimental_join_condition=1
  '''
# ---
# name: TestExperimentFunnelMetric.test_funnel_metric_ordered_vs_unordered_comparison_1_enable_new_query_builder
  '''
  SELECT entity_metrics.variant AS variant,
         count(entity_metrics.entity_id) AS num_users,
         countIf(ifNull(equals((entity_metrics.value).1, 2), 0)) AS total_sum,
         countIf(ifNull(equals((entity_metrics.value).1, 2), 0)) AS total_sum_of_squares,
         tuple(countIf(ifNull(greaterOrEquals((entity_metrics.value).1, 1), 0)), countIf(ifNull(greaterOrEquals((entity_metrics.value).1, 2), 0))) AS step_counts,
         tuple(groupArraySampleIf(100)(if(ifNull(notEquals((entity_metrics.value).2, ''), 1), tuple(toString(entity_metrics.entity_id), entity_metrics.uuid_to_session[(entity_metrics.value).2], (entity_metrics.value).2), tuple(toString(entity_metrics.entity_id), toString(entity_metrics.exposure_session_id), toString(entity_metrics.exposure_event_uuid))), ifNull(equals((entity_metrics.value).1, minus(1, 1)), isNull((entity_metrics.value).1)
                                                                                                                                                                                                                                                                                                                                                                            and isNull(minus(1, 1)))), groupArraySampleIf(100)(if(ifNull(notEquals((entity_metrics.value).2, ''), 1), tuple(toString(entity_metrics.entity_id), entity_metrics.uuid_to_session[(entity_metrics.value).2], (entity_metrics.value).2), tuple(toString(entity_metrics.entity_id), toString(entity_metrics.exposure_session_id), toString(entity_metrics.exposure_event_uuid))), ifNull(equals((entity_metrics.value).1, minus(2, 1)), isNull((entity_metrics.value).1)
and isNull(minus(2, 1)))), groupArraySampleIf(100)(if(ifNull(notEquals((entity_metrics.value).2, ''), 1), tuple(toString(entity_metrics.entity_id), entity_metrics.uuid_to_session[(entity_metrics.value).2], (entity_metrics.value).2), tuple(toString(entity_metrics.entity_id), toString(entity_metrics.exposure_session_id), toString(entity_metrics.exposure_event_uuid))), ifNull(equals((entity_metrics.value).1, minus(3, 1)), isNull((entity_metrics.value).1)
and isNull(minus(3, 1))))) AS steps_event_data
  FROM
    (SELECT metric_events.entity_id AS entity_id,
            if(ifNull(greater(uniqExactIf(metric_events.variant, ifNull(equals(metric_events.step_0, 1), 0)), 1), 0), '$multiple', anyIf(metric_events.variant, ifNull(equals(metric_events.step_0, 1), 0))) AS variant,
            argMinIf(metric_events.uuid, metric_events.timestamp, ifNull(equals(metric_events.step_0, 1), 0)) AS exposure_event_uuid,
            argMinIf(metric_events.session_id, metric_events.timestamp, ifNull(equals(metric_events.step_0, 1), 0)) AS exposure_session_id,
            arraySort(x -> minus(0, x.1), arrayMap(result -> tuple(result.1, if(and(ifNull(greaterOrEquals(result.1, 0), 0), ifNull(greater(length(result.4), result.1), 0)), if(ifNull(greater(length(arrayElement(result.4, plus(result.1, 1))), 0), 0), toString(arrayElement(result.4, plus(result.1, 1))[1]), ''), '')), aggregate_funnel_array_v8(3, 94608000, 'first_touch', 'ordered', array(array('')), [], arraySort(t -> t.1, groupArray(tuple(accurateCastOrNull(metric_events.timestamp, 'Float64'), metric_events.uuid, array(''), arrayFilter(x -> ifNull(notEquals(x, 0), 1), [multiply(1, metric_events.step_0), multiply(2, metric_events.step_1), multiply(3, metric_events.step_2)])))))))[1] AS value,
            mapFromArrays(groupArray(coalesce(toString(metric_events.uuid), '')), groupArray(coalesce(toString(metric_events.session_id), ''))) AS uuid_to_session
     FROM
       (SELECT if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id) AS entity_id,
               replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', '') AS variant,
               toTimeZone(events.timestamp, 'UTC') AS timestamp,
               events.uuid AS uuid,
               nullIf(nullIf(events.`$session_id`, ''), 'null') AS session_id,
               and(greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2024-01-01 12:00:00', 'UTC'))), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2024-01-15 12:00:00', 'UTC'))), and(equals(events.event, '$feature_flag_called'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag'), ''), 'null'), '^"|"$', ''), 'test-experiment'), 0)), in(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''), ['control', 'test'])) AS step_0,
               if(equals(events.event, '$pageview'), 1, 0) AS step_1,
               if(equals(events.event, 'purchase'), 1, 0) AS step_2
        FROM events
        LEFT OUTER JOIN
          (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                  person_distinct_id_overrides.distinct_id AS distinct_id
           FROM person_distinct_id_overrides
           WHERE equals(person_distinct_id_overrides.team_id, 99999)
           GROUP BY person_distinct_id_overrides.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id)
        WHERE and(equals(events.team_id, 99999), or(and(greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2024-01-01 12:00:00', 'UTC'))), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2024-01-15 12:00:00', 'UTC'))), and(equals(events.event, '$feature_flag_called'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag'), ''), 'null'), '^"|"$', ''), 'test-experiment'), 0)), in(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''), ['control', 'test'])), and(greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2024-01-01 12:00:00', 'UTC'))), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2024-01-15 12:00:00', 'UTC'))), or(equals(events.event, '$pageview'), equals(events.event, 'purchase')))))) AS metric_events
     GROUP BY metric_events.entity_id) AS entity_metrics
  WHERE notEmpty(variant)
  GROUP BY entity_metrics.variant
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=600,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=0,
                     max_ast_elements=4000000,
                     max_expanded_ast_elements=4000000,
                     max_bytes_before_external_group_by=0,
                     allow_experimental_analyzer=1,
                     transform_null_in=1,
                     optimize_min_equality_disjunction_chain_length=4294967295,
                     allow_experimental_join_condition=1
  '''
# ---
# name: TestExperimentFunnelMetric.test_funnel_metric_ordered_vs_unordered_comparison_1_enable_new_query_builder.1
  '''
  SELECT entity_metrics.variant AS variant,
         count(entity_metrics.entity_id) AS num_users,
         countIf(ifNull(equals((entity_metrics.value).1, 2), 0)) AS total_sum,
         countIf(ifNull(equals((entity_metrics.value).1, 2), 0)) AS total_sum_of_squares,
         tuple(countIf(ifNull(greaterOrEquals((entity_metrics.value).1, 1), 0)), countIf(ifNull(greaterOrEquals((entity_metrics.value).1, 2), 0))) AS step_counts,
         tuple(groupArraySampleIf(100)(if(ifNull(notEquals((entity_metrics.value).2, ''), 1), tuple(toString(entity_metrics.entity_id), entity_metrics.uuid_to_session[(entity_metrics.value).2], (entity_metrics.value).2), tuple(toString(entity_metrics.entity_id), toString(entity_metrics.exposure_session_id), toString(entity_metrics.exposure_event_uuid))), ifNull(equals((entity_metrics.value).1, minus(1, 1)), isNull((entity_metrics.value).1)
                                                                                                                                                                                                                                                                                                                                                                            and isNull(minus(1, 1)))), groupArraySampleIf(100)(if(ifNull(notEquals((entity_metrics.value).2, ''), 1), tuple(toString(entity_metrics.entity_id), entity_metrics.uuid_to_session[(entity_metrics.value).2], (entity_metrics.value).2), tuple(toString(entity_metrics.entity_id), toString(entity_metrics.exposure_session_id), toString(entity_metrics.exposure_event_uuid))), ifNull(equals((entity_metrics.value).1, minus(2, 1)), isNull((entity_metrics.value).1)
and isNull(minus(2, 1)))), groupArraySampleIf(100)(if(ifNull(notEquals((entity_metrics.value).2, ''), 1), tuple(toString(entity_metrics.entity_id), entity_metrics.uuid_to_session[(entity_metrics.value).2], (entity_metrics.value).2), tuple(toString(entity_metrics.entity_id), toString(entity_metrics.exposure_session_id), toString(entity_metrics.exposure_event_uuid))), ifNull(equals((entity_metrics.value).1, minus(3, 1)), isNull((entity_metrics.value).1)
and isNull(minus(3, 1))))) AS steps_event_data
  FROM
    (SELECT metric_events.entity_id AS entity_id,
            if(ifNull(greater(uniqExactIf(metric_events.variant, ifNull(equals(metric_events.step_0, 1), 0)), 1), 0), '$multiple', anyIf(metric_events.variant, ifNull(equals(metric_events.step_0, 1), 0))) AS variant,
            argMinIf(metric_events.uuid, metric_events.timestamp, ifNull(equals(metric_events.step_0, 1), 0)) AS exposure_event_uuid,
            argMinIf(metric_events.session_id, metric_events.timestamp, ifNull(equals(metric_events.step_0, 1), 0)) AS exposure_session_id,
            arraySort(x -> minus(0, x.1), arrayMap(result -> tuple(result.1, if(and(ifNull(greaterOrEquals(result.1, 0), 0), ifNull(greater(length(result.4), result.1), 0)), if(ifNull(greater(length(arrayElement(result.4, plus(result.1, 1))), 0), 0), toString(arrayElement(result.4, plus(result.1, 1))[1]), ''), '')), aggregate_funnel_array_v8(3, 94608000, 'first_touch', 'unordered', array(array('')), [], arraySort(t -> t.1, groupArray(tuple(accurateCastOrNull(metric_events.timestamp, 'Float64'), metric_events.uuid, array(''), arrayFilter(x -> ifNull(notEquals(x, 0), 1), [multiply(1, metric_events.step_0), multiply(2, metric_events.step_1), multiply(3, metric_events.step_2)])))))))[1] AS value,
            mapFromArrays(groupArray(coalesce(toString(metric_events.uuid), '')), groupArray(coalesce(toString(metric_events.session_id), ''))) AS uuid_to_session
     FROM
       (SELECT if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id) AS entity_id,
               replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', '') AS variant,
               toTimeZone(events.timestamp, 'UTC') AS timestamp,
               events.uuid AS uuid,
               nullIf(nullIf(events.`$session_id`, ''), 'null') AS session_id,
               and(greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2024-01-01 12:00:00', 'UTC'))), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2024-01-15 12:00:00', 'UTC'))), and(equals(events.event, '$feature_flag_called'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag'), ''), 'null'), '^"|"$', ''), 'test-experiment'), 0)), in(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''), ['control', 'test'])) AS step_0,
               if(equals(events.event, '$pageview'), 1, 0) AS step_1,
               if(equals(events.event, 'purchase'), 1, 0) AS step_2
        FROM events
        LEFT OUTER JOIN
          (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                  person_distinct_id_overrides.distinct_id AS distinct_id
           FROM person_distinct_id_overrides
           WHERE equals(person_distinct_id_overrides.team_id, 99999)
           GROUP BY person_distinct_id_overrides.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id)
        WHERE and(equals(events.team_id, 99999), or(and(greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2024-01-01 12:00:00', 'UTC'))), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2024-01-15 12:00:00', 'UTC'))), and(equals(events.event, '$feature_flag_called'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag'), ''), 'null'), '^"|"$', ''), 'test-experiment'), 0)), in(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''), ['control', 'test'])), and(greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2024-01-01 12:00:00', 'UTC'))), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2024-01-15 12:00:00', 'UTC'))), or(equals(events.event, '$pageview'), equals(events.event, 'purchase')))))) AS metric_events
     GROUP BY metric_events.entity_id) AS entity_metrics
  WHERE notEmpty(variant)
  GROUP BY entity_metrics.variant
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=600,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=0,
                     max_ast_elements=4000000,
                     max_expanded_ast_elements=4000000,
                     max_bytes_before_external_group_by=0,
                     allow_experimental_analyzer=1,
                     transform_null_in=1,
                     optimize_min_equality_disjunction_chain_length=4294967295,
                     allow_experimental_join_condition=1
  '''
# ---
# name: TestExperimentFunnelMetric.test_funnel_metric_with_action
  '''
  SELECT metric_events.variant AS variant,
         count(metric_events.entity_id) AS num_users,
         countIf(ifNull(equals((metric_events.value).1, 1), 0)) AS total_sum,
         countIf(ifNull(equals((metric_events.value).1, 1), 0)) AS total_sum_of_squares,
         tuple(countIf(ifNull(greaterOrEquals((metric_events.value).1, 0), 0)), countIf(ifNull(greaterOrEquals((metric_events.value).1, 1), 0))) AS step_counts,
         tuple(groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(0, 1)), isNull((metric_events.value).1)
                                                                                                                                                                                                                                                                                                                                                                    and isNull(minus(0, 1)))), groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(1, 1)), isNull((metric_events.value).1)
and isNull(minus(1, 1)))), groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(2, 1)), isNull((metric_events.value).1)
and isNull(minus(2, 1))))) AS steps_event_data
  FROM
    (SELECT exposures.variant AS variant,
            exposures.entity_id AS entity_id,
            any(exposures.exposure_event_uuid) AS exposure_event_uuid,
            any(exposures.exposure_session_id) AS exposure_session_id,
            arraySort(x -> minus(0, x.1), arrayMap(result -> tuple(result.1, if(and(ifNull(greaterOrEquals(result.1, 0), 0), ifNull(greater(length(result.4), result.1), 0)), if(ifNull(greater(length(arrayElement(result.4, plus(result.1, 1))), 0), 0), toString(arrayElement(result.4, plus(result.1, 1))[1]), ''), '')), aggregate_funnel_array_v8(2, 94608000, 'first_touch', 'ordered', array(array('')), [], arraySort(t -> t.1, groupArray(tuple(accurateCastOrNull(metric_events.timestamp, 'Float64'), metric_events.uuid, array(''), arrayFilter(x -> ifNull(notEquals(x, 0), 1), [multiply(1, metric_events.step_0), multiply(2, metric_events.step_1)])))))))[1] AS value,
            mapFromArrays(groupArray(coalesce(toString(metric_events.uuid), '')), groupArray(coalesce(toString(metric_events.session_id), ''))) AS uuid_to_session
     FROM
       (SELECT if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id) AS entity_id,
               if(ifNull(greater(count(DISTINCT replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', '')), 1), 0), '$multiple', any(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''))) AS variant,
               min(toTimeZone(events.timestamp, 'UTC')) AS first_exposure_time,
               argMin(events.uuid, toTimeZone(events.timestamp, 'UTC')) AS exposure_event_uuid,
               argMin(events.`$session_id`, toTimeZone(events.timestamp, 'UTC')) AS exposure_session_id
        FROM events
        LEFT OUTER JOIN
          (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                  person_distinct_id_overrides.distinct_id AS distinct_id
           FROM person_distinct_id_overrides
           WHERE equals(person_distinct_id_overrides.team_id, 99999)
           GROUP BY person_distinct_id_overrides.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id)
        WHERE and(equals(events.team_id, 99999), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('today', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('explicit_redacted_timestamp', 6, 'UTC')), in(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''), ['control', 'test']), equals(events.event, '$feature_flag_called'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag'), ''), 'null'), '^"|"$', ''), 'test-experiment'), 0))
        GROUP BY entity_id) AS exposures
     LEFT JOIN
       (SELECT toTimeZone(events.timestamp, 'UTC') AS timestamp,
               if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id) AS entity_id,
               events.event AS event,
               events.uuid AS uuid,
               events.properties AS properties,
               nullIf(nullIf(events.`$session_id`, ''), 'null') AS session_id,
               if(equals(events.event, '$pageview'), 1, 0) AS step_0,
               if(equals(events.event, 'purchase'), 1, 0) AS step_1
        FROM events
        LEFT OUTER JOIN
          (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                  person_distinct_id_overrides.distinct_id AS distinct_id
           FROM person_distinct_id_overrides
           WHERE equals(person_distinct_id_overrides.team_id, 99999)
           GROUP BY person_distinct_id_overrides.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id)
        WHERE and(equals(events.team_id, 99999), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('today', 6, 'UTC')), less(toTimeZone(events.timestamp, 'UTC'), toDateTime64('explicit_redacted_timestamp', 6, 'UTC')), or(equals(events.event, '$pageview'), equals(events.event, 'purchase')))) AS metric_events ON and(equals(toString(exposures.entity_id), toString(metric_events.entity_id)), greaterOrEquals(metric_events.timestamp, exposures.first_exposure_time))
     GROUP BY exposures.variant,
              exposures.entity_id) AS metric_events
  GROUP BY metric_events.variant
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=600,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=0,
                     max_ast_elements=4000000,
                     max_expanded_ast_elements=4000000,
                     max_bytes_before_external_group_by=0,
                     allow_experimental_analyzer=1,
                     transform_null_in=1,
                     optimize_min_equality_disjunction_chain_length=4294967295,
                     allow_experimental_join_condition=1
  '''
# ---
# name: TestExperimentFunnelMetric.test_funnel_metric_with_action_0_disable_new_query_builder
  '''
  SELECT metric_events.variant AS variant,
         count(metric_events.entity_id) AS num_users,
         countIf(ifNull(equals((metric_events.value).1, 1), 0)) AS total_sum,
         countIf(ifNull(equals((metric_events.value).1, 1), 0)) AS total_sum_of_squares,
         tuple(countIf(ifNull(greaterOrEquals((metric_events.value).1, 0), 0)), countIf(ifNull(greaterOrEquals((metric_events.value).1, 1), 0))) AS step_counts,
         tuple(groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(0, 1)), isNull((metric_events.value).1)
                                                                                                                                                                                                                                                                                                                                                                    and isNull(minus(0, 1)))), groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(1, 1)), isNull((metric_events.value).1)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    and isNull(minus(1, 1)))), groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(2, 1)), isNull((metric_events.value).1)
and isNull(minus(2, 1))))) AS steps_event_data
  FROM
    (SELECT exposures.variant AS variant,
            exposures.entity_id AS entity_id,
            any(exposures.exposure_event_uuid) AS exposure_event_uuid,
            any(exposures.exposure_session_id) AS exposure_session_id,
            arraySort(x -> minus(0, x.1), arrayMap(result -> tuple(result.1, if(and(ifNull(greaterOrEquals(result.1, 0), 0), ifNull(greater(length(result.4), result.1), 0)), if(ifNull(greater(length(arrayElement(result.4, plus(result.1, 1))), 0), 0), toString(arrayElement(result.4, plus(result.1, 1))[1]), ''), '')), aggregate_funnel_array_v8(2, 94608000, 'first_touch', 'ordered', array(array('')), [], arraySort(t -> t.1, groupArray(tuple(accurateCastOrNull(metric_events.timestamp, 'Float64'), metric_events.uuid, array(''), arrayFilter(x -> ifNull(notEquals(x, 0), 1), [multiply(1, metric_events.step_0), multiply(2, metric_events.step_1)])))))))[1] AS value,
            mapFromArrays(groupArray(coalesce(toString(metric_events.uuid), '')), groupArray(coalesce(toString(metric_events.session_id), ''))) AS uuid_to_session
     FROM
       (SELECT if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id) AS entity_id,
               if(ifNull(greater(count(DISTINCT replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', '')), 1), 0), '$multiple', any(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''))) AS variant,
               min(toTimeZone(events.timestamp, 'UTC')) AS first_exposure_time,
               argMin(events.uuid, toTimeZone(events.timestamp, 'UTC')) AS exposure_event_uuid,
               argMin(events.`$session_id`, toTimeZone(events.timestamp, 'UTC')) AS exposure_session_id
        FROM events
        LEFT OUTER JOIN
          (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                  person_distinct_id_overrides.distinct_id AS distinct_id
           FROM person_distinct_id_overrides
           WHERE equals(person_distinct_id_overrides.team_id, 99999)
           GROUP BY person_distinct_id_overrides.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id)
        WHERE and(equals(events.team_id, 99999), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('today', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('explicit_redacted_timestamp', 6, 'UTC')), in(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''), ['control', 'test']), equals(events.event, '$feature_flag_called'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag'), ''), 'null'), '^"|"$', ''), 'test-experiment'), 0))
        GROUP BY entity_id) AS exposures
     LEFT JOIN
       (SELECT toTimeZone(events.timestamp, 'UTC') AS timestamp,
               if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id) AS entity_id,
               events.event AS event,
               events.uuid AS uuid,
               events.properties AS properties,
               nullIf(nullIf(events.`$session_id`, ''), 'null') AS session_id,
               if(equals(events.event, '$pageview'), 1, 0) AS step_0,
               if(equals(events.event, 'purchase'), 1, 0) AS step_1
        FROM events
        LEFT OUTER JOIN
          (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                  person_distinct_id_overrides.distinct_id AS distinct_id
           FROM person_distinct_id_overrides
           WHERE equals(person_distinct_id_overrides.team_id, 99999)
           GROUP BY person_distinct_id_overrides.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id)
        WHERE and(equals(events.team_id, 99999), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('today', 6, 'UTC')), less(toTimeZone(events.timestamp, 'UTC'), toDateTime64('explicit_redacted_timestamp', 6, 'UTC')), or(equals(events.event, '$pageview'), equals(events.event, 'purchase')))) AS metric_events ON and(equals(toString(exposures.entity_id), toString(metric_events.entity_id)), greaterOrEquals(metric_events.timestamp, exposures.first_exposure_time))
     GROUP BY exposures.variant,
              exposures.entity_id) AS metric_events
  GROUP BY metric_events.variant
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=600,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=0,
                     max_ast_elements=4000000,
                     max_expanded_ast_elements=4000000,
                     max_bytes_before_external_group_by=0,
                     allow_experimental_analyzer=1,
                     transform_null_in=1,
                     optimize_min_equality_disjunction_chain_length=4294967295,
                     allow_experimental_join_condition=1
  '''
# ---
# name: TestExperimentFunnelMetric.test_funnel_metric_with_action_1_enable_new_query_builder
  '''
  SELECT entity_metrics.variant AS variant,
         count(entity_metrics.entity_id) AS num_users,
         countIf(ifNull(equals((entity_metrics.value).1, 2), 0)) AS total_sum,
         countIf(ifNull(equals((entity_metrics.value).1, 2), 0)) AS total_sum_of_squares,
         tuple(countIf(ifNull(greaterOrEquals((entity_metrics.value).1, 1), 0)), countIf(ifNull(greaterOrEquals((entity_metrics.value).1, 2), 0))) AS step_counts,
         tuple(groupArraySampleIf(100)(if(ifNull(notEquals((entity_metrics.value).2, ''), 1), tuple(toString(entity_metrics.entity_id), entity_metrics.uuid_to_session[(entity_metrics.value).2], (entity_metrics.value).2), tuple(toString(entity_metrics.entity_id), toString(entity_metrics.exposure_session_id), toString(entity_metrics.exposure_event_uuid))), ifNull(equals((entity_metrics.value).1, minus(1, 1)), isNull((entity_metrics.value).1)
                                                                                                                                                                                                                                                                                                                                                                            and isNull(minus(1, 1)))), groupArraySampleIf(100)(if(ifNull(notEquals((entity_metrics.value).2, ''), 1), tuple(toString(entity_metrics.entity_id), entity_metrics.uuid_to_session[(entity_metrics.value).2], (entity_metrics.value).2), tuple(toString(entity_metrics.entity_id), toString(entity_metrics.exposure_session_id), toString(entity_metrics.exposure_event_uuid))), ifNull(equals((entity_metrics.value).1, minus(2, 1)), isNull((entity_metrics.value).1)
and isNull(minus(2, 1)))), groupArraySampleIf(100)(if(ifNull(notEquals((entity_metrics.value).2, ''), 1), tuple(toString(entity_metrics.entity_id), entity_metrics.uuid_to_session[(entity_metrics.value).2], (entity_metrics.value).2), tuple(toString(entity_metrics.entity_id), toString(entity_metrics.exposure_session_id), toString(entity_metrics.exposure_event_uuid))), ifNull(equals((entity_metrics.value).1, minus(3, 1)), isNull((entity_metrics.value).1)
and isNull(minus(3, 1))))) AS steps_event_data
  FROM
    (SELECT metric_events.entity_id AS entity_id,
            if(ifNull(greater(uniqExactIf(metric_events.variant, ifNull(equals(metric_events.step_0, 1), 0)), 1), 0), '$multiple', anyIf(metric_events.variant, ifNull(equals(metric_events.step_0, 1), 0))) AS variant,
            argMinIf(metric_events.uuid, metric_events.timestamp, ifNull(equals(metric_events.step_0, 1), 0)) AS exposure_event_uuid,
            argMinIf(metric_events.session_id, metric_events.timestamp, ifNull(equals(metric_events.step_0, 1), 0)) AS exposure_session_id,
            arraySort(x -> minus(0, x.1), arrayMap(result -> tuple(result.1, if(and(ifNull(greaterOrEquals(result.1, 0), 0), ifNull(greater(length(result.4), result.1), 0)), if(ifNull(greater(length(arrayElement(result.4, plus(result.1, 1))), 0), 0), toString(arrayElement(result.4, plus(result.1, 1))[1]), ''), '')), aggregate_funnel_array_v8(3, 94608000, 'first_touch', 'ordered', array(array('')), [], arraySort(t -> t.1, groupArray(tuple(accurateCastOrNull(metric_events.timestamp, 'Float64'), metric_events.uuid, array(''), arrayFilter(x -> ifNull(notEquals(x, 0), 1), [multiply(1, metric_events.step_0), multiply(2, metric_events.step_1), multiply(3, metric_events.step_2)])))))))[1] AS value,
            mapFromArrays(groupArray(coalesce(toString(metric_events.uuid), '')), groupArray(coalesce(toString(metric_events.session_id), ''))) AS uuid_to_session
     FROM
       (SELECT if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id) AS entity_id,
               replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', '') AS variant,
               toTimeZone(events.timestamp, 'UTC') AS timestamp,
               events.uuid AS uuid,
               nullIf(nullIf(events.`$session_id`, ''), 'null') AS session_id,
               and(greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2024-01-01 12:00:00', 'UTC'))), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2024-01-15 12:00:00', 'UTC'))), and(equals(events.event, '$feature_flag_called'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag'), ''), 'null'), '^"|"$', ''), 'test-experiment'), 0)), in(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''), ['control', 'test'])) AS step_0,
               if(equals(events.event, '$pageview'), 1, 0) AS step_1,
               if(equals(events.event, 'purchase'), 1, 0) AS step_2
        FROM events
        LEFT OUTER JOIN
          (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                  person_distinct_id_overrides.distinct_id AS distinct_id
           FROM person_distinct_id_overrides
           WHERE equals(person_distinct_id_overrides.team_id, 99999)
           GROUP BY person_distinct_id_overrides.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id)
        WHERE and(equals(events.team_id, 99999), or(and(greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2024-01-01 12:00:00', 'UTC'))), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2024-01-15 12:00:00', 'UTC'))), and(equals(events.event, '$feature_flag_called'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag'), ''), 'null'), '^"|"$', ''), 'test-experiment'), 0)), in(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''), ['control', 'test'])), and(greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2024-01-01 12:00:00', 'UTC'))), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2024-01-15 12:00:00', 'UTC'))), or(equals(events.event, '$pageview'), equals(events.event, 'purchase')))))) AS metric_events
     GROUP BY metric_events.entity_id) AS entity_metrics
  WHERE notEmpty(variant)
  GROUP BY entity_metrics.variant
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=600,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=0,
                     max_ast_elements=4000000,
                     max_expanded_ast_elements=4000000,
                     max_bytes_before_external_group_by=0,
                     allow_experimental_analyzer=1,
                     transform_null_in=1,
                     optimize_min_equality_disjunction_chain_length=4294967295,
                     allow_experimental_join_condition=1
  '''
# ---
# name: TestExperimentFunnelMetric.test_funnel_metric_with_conversion_window
  '''
  SELECT metric_events.variant AS variant,
         count(metric_events.entity_id) AS num_users,
         countIf(ifNull(equals((metric_events.value).1, 1), 0)) AS total_sum,
         countIf(ifNull(equals((metric_events.value).1, 1), 0)) AS total_sum_of_squares,
         tuple(countIf(ifNull(greaterOrEquals((metric_events.value).1, 0), 0)), countIf(ifNull(greaterOrEquals((metric_events.value).1, 1), 0))) AS step_counts,
         tuple(groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(0, 1)), isNull((metric_events.value).1)
                                                                                                                                                                                                                                                                                                                                                                    and isNull(minus(0, 1)))), groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(1, 1)), isNull((metric_events.value).1)
and isNull(minus(1, 1)))), groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(2, 1)), isNull((metric_events.value).1)
and isNull(minus(2, 1))))) AS steps_event_data
  FROM
    (SELECT exposures.variant AS variant,
            exposures.entity_id AS entity_id,
            any(exposures.exposure_event_uuid) AS exposure_event_uuid,
            any(exposures.exposure_session_id) AS exposure_session_id,
            arraySort(x -> minus(0, x.1), arrayMap(result -> tuple(result.1, if(and(ifNull(greaterOrEquals(result.1, 0), 0), ifNull(greater(length(result.4), result.1), 0)), if(ifNull(greater(length(arrayElement(result.4, plus(result.1, 1))), 0), 0), toString(arrayElement(result.4, plus(result.1, 1))[1]), ''), '')), aggregate_funnel_array_v8(2, 94608000, 'first_touch', 'ordered', array(array('')), [], arraySort(t -> t.1, groupArray(tuple(accurateCastOrNull(metric_events.timestamp, 'Float64'), metric_events.uuid, array(''), arrayFilter(x -> ifNull(notEquals(x, 0), 1), [multiply(1, metric_events.step_0), multiply(2, metric_events.step_1)])))))))[1] AS value,
            mapFromArrays(groupArray(coalesce(toString(metric_events.uuid), '')), groupArray(coalesce(toString(metric_events.session_id), ''))) AS uuid_to_session
     FROM
       (SELECT if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id) AS entity_id,
               if(ifNull(greater(count(DISTINCT replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', '')), 1), 0), '$multiple', any(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''))) AS variant,
               min(toTimeZone(events.timestamp, 'UTC')) AS first_exposure_time,
               argMin(events.uuid, toTimeZone(events.timestamp, 'UTC')) AS exposure_event_uuid,
               argMin(events.`$session_id`, toTimeZone(events.timestamp, 'UTC')) AS exposure_session_id
        FROM events
        LEFT OUTER JOIN
          (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                  person_distinct_id_overrides.distinct_id AS distinct_id
           FROM person_distinct_id_overrides
           WHERE equals(person_distinct_id_overrides.team_id, 99999)
           GROUP BY person_distinct_id_overrides.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id)
        WHERE and(equals(events.team_id, 99999), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('today', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('explicit_redacted_timestamp', 6, 'UTC')), in(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''), ['control', 'test']), equals(events.event, '$feature_flag_called'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag'), ''), 'null'), '^"|"$', ''), 'test-experiment'), 0))
        GROUP BY entity_id) AS exposures
     LEFT JOIN
       (SELECT toTimeZone(events.timestamp, 'UTC') AS timestamp,
               if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id) AS entity_id,
               events.event AS event,
               events.uuid AS uuid,
               events.properties AS properties,
               nullIf(nullIf(events.`$session_id`, ''), 'null') AS session_id,
               if(equals(events.event, '$pageview'), 1, 0) AS step_0,
               if(equals(events.event, 'purchase'), 1, 0) AS step_1
        FROM events
        LEFT OUTER JOIN
          (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                  person_distinct_id_overrides.distinct_id AS distinct_id
           FROM person_distinct_id_overrides
           WHERE equals(person_distinct_id_overrides.team_id, 99999)
           GROUP BY person_distinct_id_overrides.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id)
        WHERE and(equals(events.team_id, 99999), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('today', 6, 'UTC')), less(toTimeZone(events.timestamp, 'UTC'), toDateTime64('explicit_redacted_timestamp', 6, 'UTC')), or(equals(events.event, '$pageview'), equals(events.event, 'purchase')))) AS metric_events ON and(equals(toString(exposures.entity_id), toString(metric_events.entity_id)), greaterOrEquals(metric_events.timestamp, exposures.first_exposure_time))
     GROUP BY exposures.variant,
              exposures.entity_id) AS metric_events
  GROUP BY metric_events.variant
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=600,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=0,
                     max_ast_elements=4000000,
                     max_expanded_ast_elements=4000000,
                     max_bytes_before_external_group_by=0,
                     allow_experimental_analyzer=1,
                     transform_null_in=1,
                     optimize_min_equality_disjunction_chain_length=4294967295,
                     allow_experimental_join_condition=1
  '''
# ---
# name: TestExperimentFunnelMetric.test_funnel_metric_with_conversion_window_0_disable_new_query_builder
  '''
  SELECT metric_events.variant AS variant,
         count(metric_events.entity_id) AS num_users,
         countIf(ifNull(equals((metric_events.value).1, 1), 0)) AS total_sum,
         countIf(ifNull(equals((metric_events.value).1, 1), 0)) AS total_sum_of_squares,
         tuple(countIf(ifNull(greaterOrEquals((metric_events.value).1, 0), 0)), countIf(ifNull(greaterOrEquals((metric_events.value).1, 1), 0))) AS step_counts,
         tuple(groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(0, 1)), isNull((metric_events.value).1)
                                                                                                                                                                                                                                                                                                                                                                    and isNull(minus(0, 1)))), groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(1, 1)), isNull((metric_events.value).1)
and isNull(minus(1, 1)))), groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(2, 1)), isNull((metric_events.value).1)
and isNull(minus(2, 1))))) AS steps_event_data
  FROM
    (SELECT exposures.variant AS variant,
            exposures.entity_id AS entity_id,
            any(exposures.exposure_event_uuid) AS exposure_event_uuid,
            any(exposures.exposure_session_id) AS exposure_session_id,
            arraySort(x -> minus(0, x.1), arrayMap(result -> tuple(result.1, if(and(ifNull(greaterOrEquals(result.1, 0), 0), ifNull(greater(length(result.4), result.1), 0)), if(ifNull(greater(length(arrayElement(result.4, plus(result.1, 1))), 0), 0), toString(arrayElement(result.4, plus(result.1, 1))[1]), ''), '')), aggregate_funnel_array_v8(2, 94608000, 'first_touch', 'ordered', array(array('')), [], arraySort(t -> t.1, groupArray(tuple(accurateCastOrNull(metric_events.timestamp, 'Float64'), metric_events.uuid, array(''), arrayFilter(x -> ifNull(notEquals(x, 0), 1), [multiply(1, metric_events.step_0), multiply(2, metric_events.step_1)])))))))[1] AS value,
            mapFromArrays(groupArray(coalesce(toString(metric_events.uuid), '')), groupArray(coalesce(toString(metric_events.session_id), ''))) AS uuid_to_session
     FROM
       (SELECT if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id) AS entity_id,
               if(ifNull(greater(count(DISTINCT replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', '')), 1), 0), '$multiple', any(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''))) AS variant,
               min(toTimeZone(events.timestamp, 'UTC')) AS first_exposure_time,
               argMin(events.uuid, toTimeZone(events.timestamp, 'UTC')) AS exposure_event_uuid,
               argMin(events.`$session_id`, toTimeZone(events.timestamp, 'UTC')) AS exposure_session_id
        FROM events
        LEFT OUTER JOIN
          (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                  person_distinct_id_overrides.distinct_id AS distinct_id
           FROM person_distinct_id_overrides
           WHERE equals(person_distinct_id_overrides.team_id, 99999)
           GROUP BY person_distinct_id_overrides.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id)
        WHERE and(equals(events.team_id, 99999), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('today', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('explicit_redacted_timestamp', 6, 'UTC')), in(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''), ['control', 'test']), equals(events.event, '$feature_flag_called'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag'), ''), 'null'), '^"|"$', ''), 'test-experiment'), 0))
        GROUP BY entity_id) AS exposures
     LEFT JOIN
       (SELECT toTimeZone(events.timestamp, 'UTC') AS timestamp,
               if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id) AS entity_id,
               events.event AS event,
               events.uuid AS uuid,
               events.properties AS properties,
               nullIf(nullIf(events.`$session_id`, ''), 'null') AS session_id,
               if(equals(events.event, '$pageview'), 1, 0) AS step_0,
               if(equals(events.event, 'purchase'), 1, 0) AS step_1
        FROM events
        LEFT OUTER JOIN
          (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                  person_distinct_id_overrides.distinct_id AS distinct_id
           FROM person_distinct_id_overrides
           WHERE equals(person_distinct_id_overrides.team_id, 99999)
           GROUP BY person_distinct_id_overrides.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id)
        WHERE and(equals(events.team_id, 99999), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('today', 6, 'UTC')), less(toTimeZone(events.timestamp, 'UTC'), toDateTime64('explicit_redacted_timestamp', 6, 'UTC')), or(equals(events.event, '$pageview'), equals(events.event, 'purchase')))) AS metric_events ON and(equals(toString(exposures.entity_id), toString(metric_events.entity_id)), greaterOrEquals(metric_events.timestamp, exposures.first_exposure_time))
     GROUP BY exposures.variant,
              exposures.entity_id) AS metric_events
  GROUP BY metric_events.variant
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=600,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=0,
                     max_ast_elements=4000000,
                     max_expanded_ast_elements=4000000,
                     max_bytes_before_external_group_by=0,
                     allow_experimental_analyzer=1,
                     transform_null_in=1,
                     optimize_min_equality_disjunction_chain_length=4294967295,
                     allow_experimental_join_condition=1
  '''
# ---
# name: TestExperimentFunnelMetric.test_funnel_metric_with_conversion_window_1_enable_new_query_builder
  '''
  SELECT entity_metrics.variant AS variant,
         count(entity_metrics.entity_id) AS num_users,
         countIf(ifNull(equals((entity_metrics.value).1, 2), 0)) AS total_sum,
         countIf(ifNull(equals((entity_metrics.value).1, 2), 0)) AS total_sum_of_squares,
         tuple(countIf(ifNull(greaterOrEquals((entity_metrics.value).1, 1), 0)), countIf(ifNull(greaterOrEquals((entity_metrics.value).1, 2), 0))) AS step_counts,
         tuple(groupArraySampleIf(100)(if(ifNull(notEquals((entity_metrics.value).2, ''), 1), tuple(toString(entity_metrics.entity_id), entity_metrics.uuid_to_session[(entity_metrics.value).2], (entity_metrics.value).2), tuple(toString(entity_metrics.entity_id), toString(entity_metrics.exposure_session_id), toString(entity_metrics.exposure_event_uuid))), ifNull(equals((entity_metrics.value).1, minus(1, 1)), isNull((entity_metrics.value).1)
                                                                                                                                                                                                                                                                                                                                                                            and isNull(minus(1, 1)))), groupArraySampleIf(100)(if(ifNull(notEquals((entity_metrics.value).2, ''), 1), tuple(toString(entity_metrics.entity_id), entity_metrics.uuid_to_session[(entity_metrics.value).2], (entity_metrics.value).2), tuple(toString(entity_metrics.entity_id), toString(entity_metrics.exposure_session_id), toString(entity_metrics.exposure_event_uuid))), ifNull(equals((entity_metrics.value).1, minus(2, 1)), isNull((entity_metrics.value).1)
and isNull(minus(2, 1)))), groupArraySampleIf(100)(if(ifNull(notEquals((entity_metrics.value).2, ''), 1), tuple(toString(entity_metrics.entity_id), entity_metrics.uuid_to_session[(entity_metrics.value).2], (entity_metrics.value).2), tuple(toString(entity_metrics.entity_id), toString(entity_metrics.exposure_session_id), toString(entity_metrics.exposure_event_uuid))), ifNull(equals((entity_metrics.value).1, minus(3, 1)), isNull((entity_metrics.value).1)
and isNull(minus(3, 1))))) AS steps_event_data
  FROM
    (SELECT metric_events.entity_id AS entity_id,
            if(ifNull(greater(uniqExactIf(metric_events.variant, ifNull(equals(metric_events.step_0, 1), 0)), 1), 0), '$multiple', anyIf(metric_events.variant, ifNull(equals(metric_events.step_0, 1), 0))) AS variant,
            argMinIf(metric_events.uuid, metric_events.timestamp, ifNull(equals(metric_events.step_0, 1), 0)) AS exposure_event_uuid,
            argMinIf(metric_events.session_id, metric_events.timestamp, ifNull(equals(metric_events.step_0, 1), 0)) AS exposure_session_id,
            arraySort(x -> minus(0, x.1), arrayMap(result -> tuple(result.1, if(and(ifNull(greaterOrEquals(result.1, 0), 0), ifNull(greater(length(result.4), result.1), 0)), if(ifNull(greater(length(arrayElement(result.4, plus(result.1, 1))), 0), 0), toString(arrayElement(result.4, plus(result.1, 1))[1]), ''), '')), aggregate_funnel_array_v8(3, 94608000, 'first_touch', 'ordered', array(array('')), [], arraySort(t -> t.1, groupArray(tuple(accurateCastOrNull(metric_events.timestamp, 'Float64'), metric_events.uuid, array(''), arrayFilter(x -> ifNull(notEquals(x, 0), 1), [multiply(1, metric_events.step_0), multiply(2, metric_events.step_1), multiply(3, metric_events.step_2)])))))))[1] AS value,
            mapFromArrays(groupArray(coalesce(toString(metric_events.uuid), '')), groupArray(coalesce(toString(metric_events.session_id), ''))) AS uuid_to_session
     FROM
       (SELECT if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id) AS entity_id,
               replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', '') AS variant,
               toTimeZone(events.timestamp, 'UTC') AS timestamp,
               events.uuid AS uuid,
               nullIf(nullIf(events.`$session_id`, ''), 'null') AS session_id,
               and(greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2024-01-01 12:00:00', 'UTC'))), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2024-01-15 12:00:00', 'UTC'))), and(equals(events.event, '$feature_flag_called'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag'), ''), 'null'), '^"|"$', ''), 'test-experiment'), 0)), in(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''), ['control', 'test'])) AS step_0,
               if(equals(events.event, '$pageview'), 1, 0) AS step_1,
               if(equals(events.event, 'purchase'), 1, 0) AS step_2
        FROM events
        LEFT OUTER JOIN
          (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                  person_distinct_id_overrides.distinct_id AS distinct_id
           FROM person_distinct_id_overrides
           WHERE equals(person_distinct_id_overrides.team_id, 99999)
           GROUP BY person_distinct_id_overrides.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id)
        WHERE and(equals(events.team_id, 99999), or(and(greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2024-01-01 12:00:00', 'UTC'))), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2024-01-15 12:00:00', 'UTC'))), and(equals(events.event, '$feature_flag_called'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag'), ''), 'null'), '^"|"$', ''), 'test-experiment'), 0)), in(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''), ['control', 'test'])), and(greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2024-01-01 12:00:00', 'UTC'))), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2024-01-15 12:00:00', 'UTC'))), or(equals(events.event, '$pageview'), equals(events.event, 'purchase')))))) AS metric_events
     GROUP BY metric_events.entity_id) AS entity_metrics
  WHERE notEmpty(variant)
  GROUP BY entity_metrics.variant
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=600,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=0,
                     max_ast_elements=4000000,
                     max_expanded_ast_elements=4000000,
                     max_bytes_before_external_group_by=0,
                     allow_experimental_analyzer=1,
                     transform_null_in=1,
                     optimize_min_equality_disjunction_chain_length=4294967295,
                     allow_experimental_join_condition=1
  '''
# ---
# name: TestExperimentFunnelMetric.test_funnel_metric_with_custom_conversion_window
  '''
  SELECT metric_events.variant AS variant,
         count(metric_events.entity_id) AS num_users,
         countIf(ifNull(equals((metric_events.value).1, 1), 0)) AS total_sum,
         countIf(ifNull(equals((metric_events.value).1, 1), 0)) AS total_sum_of_squares,
         tuple(countIf(ifNull(greaterOrEquals((metric_events.value).1, 0), 0)), countIf(ifNull(greaterOrEquals((metric_events.value).1, 1), 0))) AS step_counts,
         tuple(groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(0, 1)), isNull((metric_events.value).1)
                                                                                                                                                                                                                                                                                                                                                                    and isNull(minus(0, 1)))), groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(1, 1)), isNull((metric_events.value).1)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    and isNull(minus(1, 1)))), groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(2, 1)), isNull((metric_events.value).1)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    and isNull(minus(2, 1))))) AS steps_event_data
  FROM
    (SELECT exposures.variant AS variant,
            exposures.entity_id AS entity_id,
            any(exposures.exposure_event_uuid) AS exposure_event_uuid,
            any(exposures.exposure_session_id) AS exposure_session_id,
            arraySort(x -> minus(0, x.1), arrayMap(result -> tuple(result.1, if(and(ifNull(greaterOrEquals(result.1, 0), 0), ifNull(greater(length(result.4), result.1), 0)), if(ifNull(greater(length(arrayElement(result.4, plus(result.1, 1))), 0), 0), toString(arrayElement(result.4, plus(result.1, 1))[1]), ''), '')), aggregate_funnel_array_v8(2, 86400, 'first_touch', 'ordered', array(array('')), [], arraySort(t -> t.1, groupArray(tuple(accurateCastOrNull(metric_events.timestamp, 'Float64'), metric_events.uuid, array(''), arrayFilter(x -> ifNull(notEquals(x, 0), 1), [multiply(1, metric_events.step_0), multiply(2, metric_events.step_1)])))))))[1] AS value,
            mapFromArrays(groupArray(coalesce(toString(metric_events.uuid), '')), groupArray(coalesce(toString(metric_events.session_id), ''))) AS uuid_to_session
     FROM
       (SELECT if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id) AS entity_id,
               if(ifNull(greater(count(DISTINCT replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', '')), 1), 0), '$multiple', any(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''))) AS variant,
               min(toTimeZone(events.timestamp, 'UTC')) AS first_exposure_time,
               argMin(events.uuid, toTimeZone(events.timestamp, 'UTC')) AS exposure_event_uuid,
               argMin(events.`$session_id`, toTimeZone(events.timestamp, 'UTC')) AS exposure_session_id
        FROM events
        LEFT OUTER JOIN
          (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                  person_distinct_id_overrides.distinct_id AS distinct_id
           FROM person_distinct_id_overrides
           WHERE equals(person_distinct_id_overrides.team_id, 99999)
           GROUP BY person_distinct_id_overrides.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id)
        WHERE and(equals(events.team_id, 99999), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('today', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('explicit_redacted_timestamp', 6, 'UTC')), in(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''), ['control', 'test']), equals(events.event, '$feature_flag_called'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag'), ''), 'null'), '^"|"$', ''), 'test-experiment'), 0))
        GROUP BY entity_id) AS exposures
     LEFT JOIN
       (SELECT toTimeZone(events.timestamp, 'UTC') AS timestamp,
               if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id) AS entity_id,
               events.event AS event,
               events.uuid AS uuid,
               events.properties AS properties,
               nullIf(nullIf(events.`$session_id`, ''), 'null') AS session_id,
               if(equals(events.event, '$pageview'), 1, 0) AS step_0,
               if(equals(events.event, 'purchase'), 1, 0) AS step_1
        FROM events
        LEFT OUTER JOIN
          (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                  person_distinct_id_overrides.distinct_id AS distinct_id
           FROM person_distinct_id_overrides
           WHERE equals(person_distinct_id_overrides.team_id, 99999)
           GROUP BY person_distinct_id_overrides.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id)
        WHERE and(equals(events.team_id, 99999), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('today', 6, 'UTC')), less(toTimeZone(events.timestamp, 'UTC'), plus(toDateTime64('explicit_redacted_timestamp', 6, 'UTC'), toIntervalSecond(86400))), or(equals(events.event, '$pageview'), equals(events.event, 'purchase')))) AS metric_events ON and(equals(toString(exposures.entity_id), toString(metric_events.entity_id)), greaterOrEquals(metric_events.timestamp, exposures.first_exposure_time), less(metric_events.timestamp, plus(exposures.first_exposure_time, toIntervalSecond(86400))))
     GROUP BY exposures.variant,
              exposures.entity_id) AS metric_events
  GROUP BY metric_events.variant
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=600,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=0,
                     max_ast_elements=4000000,
                     max_expanded_ast_elements=4000000,
                     max_bytes_before_external_group_by=0,
                     allow_experimental_analyzer=1,
                     transform_null_in=1,
                     optimize_min_equality_disjunction_chain_length=4294967295,
                     allow_experimental_join_condition=1
  '''
# ---
# name: TestExperimentFunnelMetric.test_funnel_metric_with_custom_conversion_window_0_disable_new_query_builder
  '''
  SELECT metric_events.variant AS variant,
         count(metric_events.entity_id) AS num_users,
         countIf(ifNull(equals((metric_events.value).1, 1), 0)) AS total_sum,
         countIf(ifNull(equals((metric_events.value).1, 1), 0)) AS total_sum_of_squares,
         tuple(countIf(ifNull(greaterOrEquals((metric_events.value).1, 0), 0)), countIf(ifNull(greaterOrEquals((metric_events.value).1, 1), 0))) AS step_counts,
         tuple(groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(0, 1)), isNull((metric_events.value).1)
                                                                                                                                                                                                                                                                                                                                                                    and isNull(minus(0, 1)))), groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(1, 1)), isNull((metric_events.value).1)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    and isNull(minus(1, 1)))), groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(2, 1)), isNull((metric_events.value).1)
and isNull(minus(2, 1))))) AS steps_event_data
  FROM
    (SELECT exposures.variant AS variant,
            exposures.entity_id AS entity_id,
            any(exposures.exposure_event_uuid) AS exposure_event_uuid,
            any(exposures.exposure_session_id) AS exposure_session_id,
            arraySort(x -> minus(0, x.1), arrayMap(result -> tuple(result.1, if(and(ifNull(greaterOrEquals(result.1, 0), 0), ifNull(greater(length(result.4), result.1), 0)), if(ifNull(greater(length(arrayElement(result.4, plus(result.1, 1))), 0), 0), toString(arrayElement(result.4, plus(result.1, 1))[1]), ''), '')), aggregate_funnel_array_v8(2, 86400, 'first_touch', 'ordered', array(array('')), [], arraySort(t -> t.1, groupArray(tuple(accurateCastOrNull(metric_events.timestamp, 'Float64'), metric_events.uuid, array(''), arrayFilter(x -> ifNull(notEquals(x, 0), 1), [multiply(1, metric_events.step_0), multiply(2, metric_events.step_1)])))))))[1] AS value,
            mapFromArrays(groupArray(coalesce(toString(metric_events.uuid), '')), groupArray(coalesce(toString(metric_events.session_id), ''))) AS uuid_to_session
     FROM
       (SELECT if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id) AS entity_id,
               if(ifNull(greater(count(DISTINCT replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', '')), 1), 0), '$multiple', any(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''))) AS variant,
               min(toTimeZone(events.timestamp, 'UTC')) AS first_exposure_time,
               argMin(events.uuid, toTimeZone(events.timestamp, 'UTC')) AS exposure_event_uuid,
               argMin(events.`$session_id`, toTimeZone(events.timestamp, 'UTC')) AS exposure_session_id
        FROM events
        LEFT OUTER JOIN
          (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                  person_distinct_id_overrides.distinct_id AS distinct_id
           FROM person_distinct_id_overrides
           WHERE equals(person_distinct_id_overrides.team_id, 99999)
           GROUP BY person_distinct_id_overrides.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id)
        WHERE and(equals(events.team_id, 99999), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('today', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('explicit_redacted_timestamp', 6, 'UTC')), in(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''), ['control', 'test']), equals(events.event, '$feature_flag_called'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag'), ''), 'null'), '^"|"$', ''), 'test-experiment'), 0))
        GROUP BY entity_id) AS exposures
     LEFT JOIN
       (SELECT toTimeZone(events.timestamp, 'UTC') AS timestamp,
               if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id) AS entity_id,
               events.event AS event,
               events.uuid AS uuid,
               events.properties AS properties,
               nullIf(nullIf(events.`$session_id`, ''), 'null') AS session_id,
               if(equals(events.event, '$pageview'), 1, 0) AS step_0,
               if(equals(events.event, 'purchase'), 1, 0) AS step_1
        FROM events
        LEFT OUTER JOIN
          (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                  person_distinct_id_overrides.distinct_id AS distinct_id
           FROM person_distinct_id_overrides
           WHERE equals(person_distinct_id_overrides.team_id, 99999)
           GROUP BY person_distinct_id_overrides.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id)
        WHERE and(equals(events.team_id, 99999), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('today', 6, 'UTC')), less(toTimeZone(events.timestamp, 'UTC'), plus(toDateTime64('explicit_redacted_timestamp', 6, 'UTC'), toIntervalSecond(86400))), or(equals(events.event, '$pageview'), equals(events.event, 'purchase')))) AS metric_events ON and(equals(toString(exposures.entity_id), toString(metric_events.entity_id)), greaterOrEquals(metric_events.timestamp, exposures.first_exposure_time), less(metric_events.timestamp, plus(exposures.first_exposure_time, toIntervalSecond(86400))))
     GROUP BY exposures.variant,
              exposures.entity_id) AS metric_events
  GROUP BY metric_events.variant
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=600,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=0,
                     max_ast_elements=4000000,
                     max_expanded_ast_elements=4000000,
                     max_bytes_before_external_group_by=0,
                     allow_experimental_analyzer=1,
                     transform_null_in=1,
                     optimize_min_equality_disjunction_chain_length=4294967295,
                     allow_experimental_join_condition=1
  '''
# ---
# name: TestExperimentFunnelMetric.test_funnel_metric_with_custom_conversion_window_1_enable_new_query_builder
  '''
  SELECT entity_metrics.variant AS variant,
         count(entity_metrics.entity_id) AS num_users,
         countIf(ifNull(equals((entity_metrics.value).1, 2), 0)) AS total_sum,
         countIf(ifNull(equals((entity_metrics.value).1, 2), 0)) AS total_sum_of_squares,
         tuple(countIf(ifNull(greaterOrEquals((entity_metrics.value).1, 1), 0)), countIf(ifNull(greaterOrEquals((entity_metrics.value).1, 2), 0))) AS step_counts,
         tuple(groupArraySampleIf(100)(if(ifNull(notEquals((entity_metrics.value).2, ''), 1), tuple(toString(entity_metrics.entity_id), entity_metrics.uuid_to_session[(entity_metrics.value).2], (entity_metrics.value).2), tuple(toString(entity_metrics.entity_id), toString(entity_metrics.exposure_session_id), toString(entity_metrics.exposure_event_uuid))), ifNull(equals((entity_metrics.value).1, minus(1, 1)), isNull((entity_metrics.value).1)
                                                                                                                                                                                                                                                                                                                                                                            and isNull(minus(1, 1)))), groupArraySampleIf(100)(if(ifNull(notEquals((entity_metrics.value).2, ''), 1), tuple(toString(entity_metrics.entity_id), entity_metrics.uuid_to_session[(entity_metrics.value).2], (entity_metrics.value).2), tuple(toString(entity_metrics.entity_id), toString(entity_metrics.exposure_session_id), toString(entity_metrics.exposure_event_uuid))), ifNull(equals((entity_metrics.value).1, minus(2, 1)), isNull((entity_metrics.value).1)
and isNull(minus(2, 1)))), groupArraySampleIf(100)(if(ifNull(notEquals((entity_metrics.value).2, ''), 1), tuple(toString(entity_metrics.entity_id), entity_metrics.uuid_to_session[(entity_metrics.value).2], (entity_metrics.value).2), tuple(toString(entity_metrics.entity_id), toString(entity_metrics.exposure_session_id), toString(entity_metrics.exposure_event_uuid))), ifNull(equals((entity_metrics.value).1, minus(3, 1)), isNull((entity_metrics.value).1)
and isNull(minus(3, 1))))) AS steps_event_data
  FROM
    (SELECT metric_events.entity_id AS entity_id,
            if(ifNull(greater(uniqExactIf(metric_events.variant, ifNull(equals(metric_events.step_0, 1), 0)), 1), 0), '$multiple', anyIf(metric_events.variant, ifNull(equals(metric_events.step_0, 1), 0))) AS variant,
            argMinIf(metric_events.uuid, metric_events.timestamp, ifNull(equals(metric_events.step_0, 1), 0)) AS exposure_event_uuid,
            argMinIf(metric_events.session_id, metric_events.timestamp, ifNull(equals(metric_events.step_0, 1), 0)) AS exposure_session_id,
            arraySort(x -> minus(0, x.1), arrayMap(result -> tuple(result.1, if(and(ifNull(greaterOrEquals(result.1, 0), 0), ifNull(greater(length(result.4), result.1), 0)), if(ifNull(greater(length(arrayElement(result.4, plus(result.1, 1))), 0), 0), toString(arrayElement(result.4, plus(result.1, 1))[1]), ''), '')), aggregate_funnel_array_v8(3, 86400, 'first_touch', 'ordered', array(array('')), [], arraySort(t -> t.1, groupArray(tuple(accurateCastOrNull(metric_events.timestamp, 'Float64'), metric_events.uuid, array(''), arrayFilter(x -> ifNull(notEquals(x, 0), 1), [multiply(1, metric_events.step_0), multiply(2, metric_events.step_1), multiply(3, metric_events.step_2)])))))))[1] AS value,
            mapFromArrays(groupArray(coalesce(toString(metric_events.uuid), '')), groupArray(coalesce(toString(metric_events.session_id), ''))) AS uuid_to_session
     FROM
       (SELECT if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id) AS entity_id,
               replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', '') AS variant,
               toTimeZone(events.timestamp, 'UTC') AS timestamp,
               events.uuid AS uuid,
               nullIf(nullIf(events.`$session_id`, ''), 'null') AS session_id,
               and(greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2024-01-01 12:00:00', 'UTC'))), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2024-01-15 12:00:00', 'UTC'))), and(equals(events.event, '$feature_flag_called'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag'), ''), 'null'), '^"|"$', ''), 'test-experiment'), 0)), in(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''), ['control', 'test'])) AS step_0,
               if(equals(events.event, '$pageview'), 1, 0) AS step_1,
               if(equals(events.event, 'purchase'), 1, 0) AS step_2
        FROM events
        LEFT OUTER JOIN
          (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                  person_distinct_id_overrides.distinct_id AS distinct_id
           FROM person_distinct_id_overrides
           WHERE equals(person_distinct_id_overrides.team_id, 99999)
           GROUP BY person_distinct_id_overrides.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id)
        WHERE and(equals(events.team_id, 99999), or(and(greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2024-01-01 12:00:00', 'UTC'))), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2024-01-15 12:00:00', 'UTC'))), and(equals(events.event, '$feature_flag_called'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag'), ''), 'null'), '^"|"$', ''), 'test-experiment'), 0)), in(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''), ['control', 'test'])), and(greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2024-01-01 12:00:00', 'UTC'))), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), plus(assumeNotNull(toDateTime('2024-01-15 12:00:00', 'UTC')), toIntervalSecond(86400))), or(equals(events.event, '$pageview'), equals(events.event, 'purchase')))))) AS metric_events
     GROUP BY metric_events.entity_id) AS entity_metrics
  WHERE notEmpty(variant)
  GROUP BY entity_metrics.variant
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=600,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=0,
                     max_ast_elements=4000000,
                     max_expanded_ast_elements=4000000,
                     max_bytes_before_external_group_by=0,
                     allow_experimental_analyzer=1,
                     transform_null_in=1,
                     optimize_min_equality_disjunction_chain_length=4294967295,
                     allow_experimental_join_condition=1
  '''
# ---
# name: TestExperimentFunnelMetric.test_funnel_metric_with_many_steps
  '''
  SELECT metric_events.variant AS variant,
         count(metric_events.entity_id) AS num_users,
         countIf(ifNull(equals((metric_events.value).1, 5), 0)) AS total_sum,
         countIf(ifNull(equals((metric_events.value).1, 5), 0)) AS total_sum_of_squares,
         tuple(countIf(ifNull(greaterOrEquals((metric_events.value).1, 0), 0)), countIf(ifNull(greaterOrEquals((metric_events.value).1, 1), 0)), countIf(ifNull(greaterOrEquals((metric_events.value).1, 2), 0)), countIf(ifNull(greaterOrEquals((metric_events.value).1, 3), 0)), countIf(ifNull(greaterOrEquals((metric_events.value).1, 4), 0)), countIf(ifNull(greaterOrEquals((metric_events.value).1, 5), 0))) AS step_counts,
         tuple(groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(0, 1)), isNull((metric_events.value).1)
                                                                                                                                                                                                                                                                                                                                                                    and isNull(minus(0, 1)))), groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(1, 1)), isNull((metric_events.value).1)
and isNull(minus(1, 1)))), groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(2, 1)), isNull((metric_events.value).1)
and isNull(minus(2, 1)))), groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(3, 1)), isNull((metric_events.value).1)
and isNull(minus(3, 1)))), groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(4, 1)), isNull((metric_events.value).1)
and isNull(minus(4, 1)))), groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(5, 1)), isNull((metric_events.value).1)
and isNull(minus(5, 1)))), groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(6, 1)), isNull((metric_events.value).1)
and isNull(minus(6, 1))))) AS steps_event_data
  FROM
    (SELECT exposures.variant AS variant,
            exposures.entity_id AS entity_id,
            any(exposures.exposure_event_uuid) AS exposure_event_uuid,
            any(exposures.exposure_session_id) AS exposure_session_id,
            arraySort(x -> minus(0, x.1), arrayMap(result -> tuple(result.1, if(and(ifNull(greaterOrEquals(result.1, 0), 0), ifNull(greater(length(result.4), result.1), 0)), if(ifNull(greater(length(arrayElement(result.4, plus(result.1, 1))), 0), 0), toString(arrayElement(result.4, plus(result.1, 1))[1]), ''), '')), aggregate_funnel_array_v8(6, 94608000, 'first_touch', 'ordered', array(array('')), [], arraySort(t -> t.1, groupArray(tuple(accurateCastOrNull(metric_events.timestamp, 'Float64'), metric_events.uuid, array(''), arrayFilter(x -> ifNull(notEquals(x, 0), 1), [multiply(1, metric_events.step_0), multiply(2, metric_events.step_1), multiply(3, metric_events.step_2), multiply(4, metric_events.step_3), multiply(5, metric_events.step_4), multiply(6, metric_events.step_5)])))))))[1] AS value,
            mapFromArrays(groupArray(coalesce(toString(metric_events.uuid), '')), groupArray(coalesce(toString(metric_events.session_id), ''))) AS uuid_to_session
     FROM
       (SELECT if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id) AS entity_id,
               if(ifNull(greater(count(DISTINCT replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', '')), 1), 0), '$multiple', any(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''))) AS variant,
               min(toTimeZone(events.timestamp, 'UTC')) AS first_exposure_time,
               argMin(events.uuid, toTimeZone(events.timestamp, 'UTC')) AS exposure_event_uuid,
               argMin(events.`$session_id`, toTimeZone(events.timestamp, 'UTC')) AS exposure_session_id
        FROM events
        LEFT OUTER JOIN
          (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                  person_distinct_id_overrides.distinct_id AS distinct_id
           FROM person_distinct_id_overrides
           WHERE equals(person_distinct_id_overrides.team_id, 99999)
           GROUP BY person_distinct_id_overrides.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id)
        WHERE and(equals(events.team_id, 99999), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('today', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('explicit_redacted_timestamp', 6, 'UTC')), in(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''), ['control', 'test']), equals(events.event, '$feature_flag_called'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag'), ''), 'null'), '^"|"$', ''), 'test-experiment'), 0))
        GROUP BY entity_id) AS exposures
     LEFT JOIN
       (SELECT toTimeZone(events.timestamp, 'UTC') AS timestamp,
               if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id) AS entity_id,
               events.event AS event,
               events.uuid AS uuid,
               events.properties AS properties,
               nullIf(nullIf(events.`$session_id`, ''), 'null') AS session_id,
               if(equals(events.event, '$pageview'), 1, 0) AS step_0,
               if(equals(events.event, 'add to cart'), 1, 0) AS step_1,
               if(equals(events.event, 'checkout started'), 1, 0) AS step_2,
               if(equals(events.event, 'checkout completed'), 1, 0) AS step_3,
               if(equals(events.event, 'survey submitted'), 1, 0) AS step_4,
               if(equals(events.event, 'referral'), 1, 0) AS step_5
        FROM events
        LEFT OUTER JOIN
          (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                  person_distinct_id_overrides.distinct_id AS distinct_id
           FROM person_distinct_id_overrides
           WHERE equals(person_distinct_id_overrides.team_id, 99999)
           GROUP BY person_distinct_id_overrides.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id)
        WHERE and(equals(events.team_id, 99999), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('today', 6, 'UTC')), less(toTimeZone(events.timestamp, 'UTC'), toDateTime64('explicit_redacted_timestamp', 6, 'UTC')), or(equals(events.event, '$pageview'), equals(events.event, 'add to cart'), equals(events.event, 'checkout started'), equals(events.event, 'checkout completed'), equals(events.event, 'survey submitted'), equals(events.event, 'referral')))) AS metric_events ON and(equals(toString(exposures.entity_id), toString(metric_events.entity_id)), greaterOrEquals(metric_events.timestamp, exposures.first_exposure_time))
     GROUP BY exposures.variant,
              exposures.entity_id) AS metric_events
  GROUP BY metric_events.variant
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=600,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=0,
                     max_ast_elements=4000000,
                     max_expanded_ast_elements=4000000,
                     max_bytes_before_external_group_by=0,
                     allow_experimental_analyzer=1,
                     transform_null_in=1,
                     optimize_min_equality_disjunction_chain_length=4294967295,
                     allow_experimental_join_condition=1
  '''
# ---
# name: TestExperimentFunnelMetric.test_funnel_metric_with_many_steps_0_disable_new_query_builder
  '''
  SELECT metric_events.variant AS variant,
         count(metric_events.entity_id) AS num_users,
         countIf(ifNull(equals((metric_events.value).1, 5), 0)) AS total_sum,
         countIf(ifNull(equals((metric_events.value).1, 5), 0)) AS total_sum_of_squares,
         tuple(countIf(ifNull(greaterOrEquals((metric_events.value).1, 0), 0)), countIf(ifNull(greaterOrEquals((metric_events.value).1, 1), 0)), countIf(ifNull(greaterOrEquals((metric_events.value).1, 2), 0)), countIf(ifNull(greaterOrEquals((metric_events.value).1, 3), 0)), countIf(ifNull(greaterOrEquals((metric_events.value).1, 4), 0)), countIf(ifNull(greaterOrEquals((metric_events.value).1, 5), 0))) AS step_counts,
         tuple(groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(0, 1)), isNull((metric_events.value).1)
                                                                                                                                                                                                                                                                                                                                                                    and isNull(minus(0, 1)))), groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(1, 1)), isNull((metric_events.value).1)
and isNull(minus(1, 1)))), groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(2, 1)), isNull((metric_events.value).1)
and isNull(minus(2, 1)))), groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(3, 1)), isNull((metric_events.value).1)
and isNull(minus(3, 1)))), groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(4, 1)), isNull((metric_events.value).1)
and isNull(minus(4, 1)))), groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(5, 1)), isNull((metric_events.value).1)
and isNull(minus(5, 1)))), groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(6, 1)), isNull((metric_events.value).1)
and isNull(minus(6, 1))))) AS steps_event_data
  FROM
    (SELECT exposures.variant AS variant,
            exposures.entity_id AS entity_id,
            any(exposures.exposure_event_uuid) AS exposure_event_uuid,
            any(exposures.exposure_session_id) AS exposure_session_id,
            arraySort(x -> minus(0, x.1), arrayMap(result -> tuple(result.1, if(and(ifNull(greaterOrEquals(result.1, 0), 0), ifNull(greater(length(result.4), result.1), 0)), if(ifNull(greater(length(arrayElement(result.4, plus(result.1, 1))), 0), 0), toString(arrayElement(result.4, plus(result.1, 1))[1]), ''), '')), aggregate_funnel_array_v8(6, 94608000, 'first_touch', 'ordered', array(array('')), [], arraySort(t -> t.1, groupArray(tuple(accurateCastOrNull(metric_events.timestamp, 'Float64'), metric_events.uuid, array(''), arrayFilter(x -> ifNull(notEquals(x, 0), 1), [multiply(1, metric_events.step_0), multiply(2, metric_events.step_1), multiply(3, metric_events.step_2), multiply(4, metric_events.step_3), multiply(5, metric_events.step_4), multiply(6, metric_events.step_5)])))))))[1] AS value,
            mapFromArrays(groupArray(coalesce(toString(metric_events.uuid), '')), groupArray(coalesce(toString(metric_events.session_id), ''))) AS uuid_to_session
     FROM
       (SELECT if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id) AS entity_id,
               if(ifNull(greater(count(DISTINCT replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', '')), 1), 0), '$multiple', any(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''))) AS variant,
               min(toTimeZone(events.timestamp, 'UTC')) AS first_exposure_time,
               argMin(events.uuid, toTimeZone(events.timestamp, 'UTC')) AS exposure_event_uuid,
               argMin(events.`$session_id`, toTimeZone(events.timestamp, 'UTC')) AS exposure_session_id
        FROM events
        LEFT OUTER JOIN
          (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                  person_distinct_id_overrides.distinct_id AS distinct_id
           FROM person_distinct_id_overrides
           WHERE equals(person_distinct_id_overrides.team_id, 99999)
           GROUP BY person_distinct_id_overrides.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id)
        WHERE and(equals(events.team_id, 99999), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('today', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('explicit_redacted_timestamp', 6, 'UTC')), in(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''), ['control', 'test']), equals(events.event, '$feature_flag_called'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag'), ''), 'null'), '^"|"$', ''), 'test-experiment'), 0))
        GROUP BY entity_id) AS exposures
     LEFT JOIN
       (SELECT toTimeZone(events.timestamp, 'UTC') AS timestamp,
               if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id) AS entity_id,
               events.event AS event,
               events.uuid AS uuid,
               events.properties AS properties,
               nullIf(nullIf(events.`$session_id`, ''), 'null') AS session_id,
               if(equals(events.event, '$pageview'), 1, 0) AS step_0,
               if(equals(events.event, 'add to cart'), 1, 0) AS step_1,
               if(equals(events.event, 'checkout started'), 1, 0) AS step_2,
               if(equals(events.event, 'checkout completed'), 1, 0) AS step_3,
               if(equals(events.event, 'survey submitted'), 1, 0) AS step_4,
               if(equals(events.event, 'referral'), 1, 0) AS step_5
        FROM events
        LEFT OUTER JOIN
          (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                  person_distinct_id_overrides.distinct_id AS distinct_id
           FROM person_distinct_id_overrides
           WHERE equals(person_distinct_id_overrides.team_id, 99999)
           GROUP BY person_distinct_id_overrides.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id)
        WHERE and(equals(events.team_id, 99999), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('today', 6, 'UTC')), less(toTimeZone(events.timestamp, 'UTC'), toDateTime64('explicit_redacted_timestamp', 6, 'UTC')), or(equals(events.event, '$pageview'), equals(events.event, 'add to cart'), equals(events.event, 'checkout started'), equals(events.event, 'checkout completed'), equals(events.event, 'survey submitted'), equals(events.event, 'referral')))) AS metric_events ON and(equals(toString(exposures.entity_id), toString(metric_events.entity_id)), greaterOrEquals(metric_events.timestamp, exposures.first_exposure_time))
     GROUP BY exposures.variant,
              exposures.entity_id) AS metric_events
  GROUP BY metric_events.variant
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=600,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=0,
                     max_ast_elements=4000000,
                     max_expanded_ast_elements=4000000,
                     max_bytes_before_external_group_by=0,
                     allow_experimental_analyzer=1,
                     transform_null_in=1,
                     optimize_min_equality_disjunction_chain_length=4294967295,
                     allow_experimental_join_condition=1
  '''
# ---
# name: TestExperimentFunnelMetric.test_funnel_metric_with_many_steps_1_enable_new_query_builder
  '''
  SELECT entity_metrics.variant AS variant,
         count(entity_metrics.entity_id) AS num_users,
         countIf(ifNull(equals((entity_metrics.value).1, 6), 0)) AS total_sum,
         countIf(ifNull(equals((entity_metrics.value).1, 6), 0)) AS total_sum_of_squares,
         tuple(countIf(ifNull(greaterOrEquals((entity_metrics.value).1, 1), 0)), countIf(ifNull(greaterOrEquals((entity_metrics.value).1, 2), 0)), countIf(ifNull(greaterOrEquals((entity_metrics.value).1, 3), 0)), countIf(ifNull(greaterOrEquals((entity_metrics.value).1, 4), 0)), countIf(ifNull(greaterOrEquals((entity_metrics.value).1, 5), 0)), countIf(ifNull(greaterOrEquals((entity_metrics.value).1, 6), 0))) AS step_counts,
         tuple(groupArraySampleIf(100)(if(ifNull(notEquals((entity_metrics.value).2, ''), 1), tuple(toString(entity_metrics.entity_id), entity_metrics.uuid_to_session[(entity_metrics.value).2], (entity_metrics.value).2), tuple(toString(entity_metrics.entity_id), toString(entity_metrics.exposure_session_id), toString(entity_metrics.exposure_event_uuid))), ifNull(equals((entity_metrics.value).1, minus(1, 1)), isNull((entity_metrics.value).1)
                                                                                                                                                                                                                                                                                                                                                                            and isNull(minus(1, 1)))), groupArraySampleIf(100)(if(ifNull(notEquals((entity_metrics.value).2, ''), 1), tuple(toString(entity_metrics.entity_id), entity_metrics.uuid_to_session[(entity_metrics.value).2], (entity_metrics.value).2), tuple(toString(entity_metrics.entity_id), toString(entity_metrics.exposure_session_id), toString(entity_metrics.exposure_event_uuid))), ifNull(equals((entity_metrics.value).1, minus(2, 1)), isNull((entity_metrics.value).1)
and isNull(minus(2, 1)))), groupArraySampleIf(100)(if(ifNull(notEquals((entity_metrics.value).2, ''), 1), tuple(toString(entity_metrics.entity_id), entity_metrics.uuid_to_session[(entity_metrics.value).2], (entity_metrics.value).2), tuple(toString(entity_metrics.entity_id), toString(entity_metrics.exposure_session_id), toString(entity_metrics.exposure_event_uuid))), ifNull(equals((entity_metrics.value).1, minus(3, 1)), isNull((entity_metrics.value).1)
and isNull(minus(3, 1)))), groupArraySampleIf(100)(if(ifNull(notEquals((entity_metrics.value).2, ''), 1), tuple(toString(entity_metrics.entity_id), entity_metrics.uuid_to_session[(entity_metrics.value).2], (entity_metrics.value).2), tuple(toString(entity_metrics.entity_id), toString(entity_metrics.exposure_session_id), toString(entity_metrics.exposure_event_uuid))), ifNull(equals((entity_metrics.value).1, minus(4, 1)), isNull((entity_metrics.value).1)
and isNull(minus(4, 1)))), groupArraySampleIf(100)(if(ifNull(notEquals((entity_metrics.value).2, ''), 1), tuple(toString(entity_metrics.entity_id), entity_metrics.uuid_to_session[(entity_metrics.value).2], (entity_metrics.value).2), tuple(toString(entity_metrics.entity_id), toString(entity_metrics.exposure_session_id), toString(entity_metrics.exposure_event_uuid))), ifNull(equals((entity_metrics.value).1, minus(5, 1)), isNull((entity_metrics.value).1)
and isNull(minus(5, 1)))), groupArraySampleIf(100)(if(ifNull(notEquals((entity_metrics.value).2, ''), 1), tuple(toString(entity_metrics.entity_id), entity_metrics.uuid_to_session[(entity_metrics.value).2], (entity_metrics.value).2), tuple(toString(entity_metrics.entity_id), toString(entity_metrics.exposure_session_id), toString(entity_metrics.exposure_event_uuid))), ifNull(equals((entity_metrics.value).1, minus(6, 1)), isNull((entity_metrics.value).1)
and isNull(minus(6, 1)))), groupArraySampleIf(100)(if(ifNull(notEquals((entity_metrics.value).2, ''), 1), tuple(toString(entity_metrics.entity_id), entity_metrics.uuid_to_session[(entity_metrics.value).2], (entity_metrics.value).2), tuple(toString(entity_metrics.entity_id), toString(entity_metrics.exposure_session_id), toString(entity_metrics.exposure_event_uuid))), ifNull(equals((entity_metrics.value).1, minus(7, 1)), isNull((entity_metrics.value).1)
and isNull(minus(7, 1))))) AS steps_event_data
  FROM
    (SELECT metric_events.entity_id AS entity_id,
            if(ifNull(greater(uniqExactIf(metric_events.variant, ifNull(equals(metric_events.step_0, 1), 0)), 1), 0), '$multiple', anyIf(metric_events.variant, ifNull(equals(metric_events.step_0, 1), 0))) AS variant,
            argMinIf(metric_events.uuid, metric_events.timestamp, ifNull(equals(metric_events.step_0, 1), 0)) AS exposure_event_uuid,
            argMinIf(metric_events.session_id, metric_events.timestamp, ifNull(equals(metric_events.step_0, 1), 0)) AS exposure_session_id,
            arraySort(x -> minus(0, x.1), arrayMap(result -> tuple(result.1, if(and(ifNull(greaterOrEquals(result.1, 0), 0), ifNull(greater(length(result.4), result.1), 0)), if(ifNull(greater(length(arrayElement(result.4, plus(result.1, 1))), 0), 0), toString(arrayElement(result.4, plus(result.1, 1))[1]), ''), '')), aggregate_funnel_array_v8(7, 94608000, 'first_touch', 'ordered', array(array('')), [], arraySort(t -> t.1, groupArray(tuple(accurateCastOrNull(metric_events.timestamp, 'Float64'), metric_events.uuid, array(''), arrayFilter(x -> ifNull(notEquals(x, 0), 1), [multiply(1, metric_events.step_0), multiply(2, metric_events.step_1), multiply(3, metric_events.step_2), multiply(4, metric_events.step_3), multiply(5, metric_events.step_4), multiply(6, metric_events.step_5), multiply(7, metric_events.step_6)])))))))[1] AS value,
            mapFromArrays(groupArray(coalesce(toString(metric_events.uuid), '')), groupArray(coalesce(toString(metric_events.session_id), ''))) AS uuid_to_session
     FROM
       (SELECT if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id) AS entity_id,
               replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', '') AS variant,
               toTimeZone(events.timestamp, 'UTC') AS timestamp,
               events.uuid AS uuid,
               nullIf(nullIf(events.`$session_id`, ''), 'null') AS session_id,
               and(greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2024-01-01 12:00:00', 'UTC'))), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2024-01-15 12:00:00', 'UTC'))), and(equals(events.event, '$feature_flag_called'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag'), ''), 'null'), '^"|"$', ''), 'test-experiment'), 0)), in(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''), ['control', 'test'])) AS step_0,
               if(equals(events.event, '$pageview'), 1, 0) AS step_1,
               if(equals(events.event, 'add to cart'), 1, 0) AS step_2,
               if(equals(events.event, 'checkout started'), 1, 0) AS step_3,
               if(equals(events.event, 'checkout completed'), 1, 0) AS step_4,
               if(equals(events.event, 'survey submitted'), 1, 0) AS step_5,
               if(equals(events.event, 'referral'), 1, 0) AS step_6
        FROM events
        LEFT OUTER JOIN
          (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                  person_distinct_id_overrides.distinct_id AS distinct_id
           FROM person_distinct_id_overrides
           WHERE equals(person_distinct_id_overrides.team_id, 99999)
           GROUP BY person_distinct_id_overrides.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id)
        WHERE and(equals(events.team_id, 99999), or(and(greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2024-01-01 12:00:00', 'UTC'))), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2024-01-15 12:00:00', 'UTC'))), and(equals(events.event, '$feature_flag_called'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag'), ''), 'null'), '^"|"$', ''), 'test-experiment'), 0)), in(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''), ['control', 'test'])), and(greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2024-01-01 12:00:00', 'UTC'))), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2024-01-15 12:00:00', 'UTC'))), or(equals(events.event, '$pageview'), equals(events.event, 'add to cart'), equals(events.event, 'checkout started'), equals(events.event, 'checkout completed'), equals(events.event, 'survey submitted'), equals(events.event, 'referral')))))) AS metric_events
     GROUP BY metric_events.entity_id) AS entity_metrics
  WHERE notEmpty(variant)
  GROUP BY entity_metrics.variant
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=600,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=0,
                     max_ast_elements=4000000,
                     max_expanded_ast_elements=4000000,
                     max_bytes_before_external_group_by=0,
                     allow_experimental_analyzer=1,
                     transform_null_in=1,
                     optimize_min_equality_disjunction_chain_length=4294967295,
                     allow_experimental_join_condition=1
  '''
# ---
# name: TestExperimentFunnelMetric.test_funnel_metric_with_multiple_similar_steps
  '''
  SELECT metric_events.variant AS variant,
         count(metric_events.entity_id) AS num_users,
         countIf(ifNull(equals((metric_events.value).1, 2), 0)) AS total_sum,
         countIf(ifNull(equals((metric_events.value).1, 2), 0)) AS total_sum_of_squares,
         tuple(countIf(ifNull(greaterOrEquals((metric_events.value).1, 0), 0)), countIf(ifNull(greaterOrEquals((metric_events.value).1, 1), 0)), countIf(ifNull(greaterOrEquals((metric_events.value).1, 2), 0))) AS step_counts,
         tuple(groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(0, 1)), isNull((metric_events.value).1)
                                                                                                                                                                                                                                                                                                                                                                    and isNull(minus(0, 1)))), groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(1, 1)), isNull((metric_events.value).1)
and isNull(minus(1, 1)))), groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(2, 1)), isNull((metric_events.value).1)
and isNull(minus(2, 1)))), groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(3, 1)), isNull((metric_events.value).1)
and isNull(minus(3, 1))))) AS steps_event_data
  FROM
    (SELECT exposures.variant AS variant,
            exposures.entity_id AS entity_id,
            any(exposures.exposure_event_uuid) AS exposure_event_uuid,
            any(exposures.exposure_session_id) AS exposure_session_id,
            arraySort(x -> minus(0, x.1), arrayMap(result -> tuple(result.1, if(and(ifNull(greaterOrEquals(result.1, 0), 0), ifNull(greater(length(result.4), result.1), 0)), if(ifNull(greater(length(arrayElement(result.4, plus(result.1, 1))), 0), 0), toString(arrayElement(result.4, plus(result.1, 1))[1]), ''), '')), aggregate_funnel_array_v8(3, 94608000, 'first_touch', 'ordered', array(array('')), [], arraySort(t -> t.1, groupArray(tuple(accurateCastOrNull(metric_events.timestamp, 'Float64'), metric_events.uuid, array(''), arrayFilter(x -> ifNull(notEquals(x, 0), 1), [multiply(1, metric_events.step_0), multiply(2, metric_events.step_1), multiply(3, metric_events.step_2)])))))))[1] AS value,
            mapFromArrays(groupArray(coalesce(toString(metric_events.uuid), '')), groupArray(coalesce(toString(metric_events.session_id), ''))) AS uuid_to_session
     FROM
       (SELECT if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id) AS entity_id,
               if(ifNull(greater(count(DISTINCT replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', '')), 1), 0), '$multiple', any(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''))) AS variant,
               min(toTimeZone(events.timestamp, 'UTC')) AS first_exposure_time,
               argMin(events.uuid, toTimeZone(events.timestamp, 'UTC')) AS exposure_event_uuid,
               argMin(events.`$session_id`, toTimeZone(events.timestamp, 'UTC')) AS exposure_session_id
        FROM events
        LEFT OUTER JOIN
          (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                  person_distinct_id_overrides.distinct_id AS distinct_id
           FROM person_distinct_id_overrides
           WHERE equals(person_distinct_id_overrides.team_id, 99999)
           GROUP BY person_distinct_id_overrides.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id)
        WHERE and(equals(events.team_id, 99999), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('today', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('explicit_redacted_timestamp', 6, 'UTC')), in(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''), ['control', 'test']), equals(events.event, '$feature_flag_called'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag'), ''), 'null'), '^"|"$', ''), 'test-experiment'), 0))
        GROUP BY entity_id) AS exposures
     LEFT JOIN
       (SELECT toTimeZone(events.timestamp, 'UTC') AS timestamp,
               if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id) AS entity_id,
               events.event AS event,
               events.uuid AS uuid,
               events.properties AS properties,
               nullIf(nullIf(events.`$session_id`, ''), 'null') AS session_id,
               if(equals(events.event, '$pageview'), 1, 0) AS step_0,
               if(equals(events.event, 'purchase'), 1, 0) AS step_1,
               if(equals(events.event, 'purchase'), 1, 0) AS step_2
        FROM events
        LEFT OUTER JOIN
          (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                  person_distinct_id_overrides.distinct_id AS distinct_id
           FROM person_distinct_id_overrides
           WHERE equals(person_distinct_id_overrides.team_id, 99999)
           GROUP BY person_distinct_id_overrides.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id)
        WHERE and(equals(events.team_id, 99999), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('today', 6, 'UTC')), less(toTimeZone(events.timestamp, 'UTC'), toDateTime64('explicit_redacted_timestamp', 6, 'UTC')), or(equals(events.event, '$pageview'), equals(events.event, 'purchase'), equals(events.event, 'purchase')))) AS metric_events ON and(equals(toString(exposures.entity_id), toString(metric_events.entity_id)), greaterOrEquals(metric_events.timestamp, exposures.first_exposure_time))
     GROUP BY exposures.variant,
              exposures.entity_id) AS metric_events
  GROUP BY metric_events.variant
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=600,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=0,
                     max_ast_elements=4000000,
                     max_expanded_ast_elements=4000000,
                     max_bytes_before_external_group_by=0,
                     allow_experimental_analyzer=1,
                     transform_null_in=1,
                     optimize_min_equality_disjunction_chain_length=4294967295,
                     allow_experimental_join_condition=1
  '''
# ---
# name: TestExperimentFunnelMetric.test_funnel_metric_with_multiple_similar_steps_0_disable_new_query_builder
  '''
  SELECT metric_events.variant AS variant,
         count(metric_events.entity_id) AS num_users,
         countIf(ifNull(equals((metric_events.value).1, 2), 0)) AS total_sum,
         countIf(ifNull(equals((metric_events.value).1, 2), 0)) AS total_sum_of_squares,
         tuple(countIf(ifNull(greaterOrEquals((metric_events.value).1, 0), 0)), countIf(ifNull(greaterOrEquals((metric_events.value).1, 1), 0)), countIf(ifNull(greaterOrEquals((metric_events.value).1, 2), 0))) AS step_counts,
         tuple(groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(0, 1)), isNull((metric_events.value).1)
                                                                                                                                                                                                                                                                                                                                                                    and isNull(minus(0, 1)))), groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(1, 1)), isNull((metric_events.value).1)
and isNull(minus(1, 1)))), groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(2, 1)), isNull((metric_events.value).1)
and isNull(minus(2, 1)))), groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(3, 1)), isNull((metric_events.value).1)
and isNull(minus(3, 1))))) AS steps_event_data
  FROM
    (SELECT exposures.variant AS variant,
            exposures.entity_id AS entity_id,
            any(exposures.exposure_event_uuid) AS exposure_event_uuid,
            any(exposures.exposure_session_id) AS exposure_session_id,
            arraySort(x -> minus(0, x.1), arrayMap(result -> tuple(result.1, if(and(ifNull(greaterOrEquals(result.1, 0), 0), ifNull(greater(length(result.4), result.1), 0)), if(ifNull(greater(length(arrayElement(result.4, plus(result.1, 1))), 0), 0), toString(arrayElement(result.4, plus(result.1, 1))[1]), ''), '')), aggregate_funnel_array_v8(3, 94608000, 'first_touch', 'ordered', array(array('')), [], arraySort(t -> t.1, groupArray(tuple(accurateCastOrNull(metric_events.timestamp, 'Float64'), metric_events.uuid, array(''), arrayFilter(x -> ifNull(notEquals(x, 0), 1), [multiply(1, metric_events.step_0), multiply(2, metric_events.step_1), multiply(3, metric_events.step_2)])))))))[1] AS value,
            mapFromArrays(groupArray(coalesce(toString(metric_events.uuid), '')), groupArray(coalesce(toString(metric_events.session_id), ''))) AS uuid_to_session
     FROM
       (SELECT if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id) AS entity_id,
               if(ifNull(greater(count(DISTINCT replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', '')), 1), 0), '$multiple', any(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''))) AS variant,
               min(toTimeZone(events.timestamp, 'UTC')) AS first_exposure_time,
               argMin(events.uuid, toTimeZone(events.timestamp, 'UTC')) AS exposure_event_uuid,
               argMin(events.`$session_id`, toTimeZone(events.timestamp, 'UTC')) AS exposure_session_id
        FROM events
        LEFT OUTER JOIN
          (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                  person_distinct_id_overrides.distinct_id AS distinct_id
           FROM person_distinct_id_overrides
           WHERE equals(person_distinct_id_overrides.team_id, 99999)
           GROUP BY person_distinct_id_overrides.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id)
        WHERE and(equals(events.team_id, 99999), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('today', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('explicit_redacted_timestamp', 6, 'UTC')), in(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''), ['control', 'test']), equals(events.event, '$feature_flag_called'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag'), ''), 'null'), '^"|"$', ''), 'test-experiment'), 0))
        GROUP BY entity_id) AS exposures
     LEFT JOIN
       (SELECT toTimeZone(events.timestamp, 'UTC') AS timestamp,
               if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id) AS entity_id,
               events.event AS event,
               events.uuid AS uuid,
               events.properties AS properties,
               nullIf(nullIf(events.`$session_id`, ''), 'null') AS session_id,
               if(equals(events.event, '$pageview'), 1, 0) AS step_0,
               if(equals(events.event, 'purchase'), 1, 0) AS step_1,
               if(equals(events.event, 'purchase'), 1, 0) AS step_2
        FROM events
        LEFT OUTER JOIN
          (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                  person_distinct_id_overrides.distinct_id AS distinct_id
           FROM person_distinct_id_overrides
           WHERE equals(person_distinct_id_overrides.team_id, 99999)
           GROUP BY person_distinct_id_overrides.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id)
        WHERE and(equals(events.team_id, 99999), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('today', 6, 'UTC')), less(toTimeZone(events.timestamp, 'UTC'), toDateTime64('explicit_redacted_timestamp', 6, 'UTC')), or(equals(events.event, '$pageview'), equals(events.event, 'purchase'), equals(events.event, 'purchase')))) AS metric_events ON and(equals(toString(exposures.entity_id), toString(metric_events.entity_id)), greaterOrEquals(metric_events.timestamp, exposures.first_exposure_time))
     GROUP BY exposures.variant,
              exposures.entity_id) AS metric_events
  GROUP BY metric_events.variant
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=600,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=0,
                     max_ast_elements=4000000,
                     max_expanded_ast_elements=4000000,
                     max_bytes_before_external_group_by=0,
                     allow_experimental_analyzer=1,
                     transform_null_in=1,
                     optimize_min_equality_disjunction_chain_length=4294967295,
                     allow_experimental_join_condition=1
  '''
# ---
# name: TestExperimentFunnelMetric.test_funnel_metric_with_multiple_similar_steps_1_enable_new_query_builder
  '''
  SELECT entity_metrics.variant AS variant,
         count(entity_metrics.entity_id) AS num_users,
         countIf(ifNull(equals((entity_metrics.value).1, 3), 0)) AS total_sum,
         countIf(ifNull(equals((entity_metrics.value).1, 3), 0)) AS total_sum_of_squares,
         tuple(countIf(ifNull(greaterOrEquals((entity_metrics.value).1, 1), 0)), countIf(ifNull(greaterOrEquals((entity_metrics.value).1, 2), 0)), countIf(ifNull(greaterOrEquals((entity_metrics.value).1, 3), 0))) AS step_counts,
         tuple(groupArraySampleIf(100)(if(ifNull(notEquals((entity_metrics.value).2, ''), 1), tuple(toString(entity_metrics.entity_id), entity_metrics.uuid_to_session[(entity_metrics.value).2], (entity_metrics.value).2), tuple(toString(entity_metrics.entity_id), toString(entity_metrics.exposure_session_id), toString(entity_metrics.exposure_event_uuid))), ifNull(equals((entity_metrics.value).1, minus(1, 1)), isNull((entity_metrics.value).1)
                                                                                                                                                                                                                                                                                                                                                                            and isNull(minus(1, 1)))), groupArraySampleIf(100)(if(ifNull(notEquals((entity_metrics.value).2, ''), 1), tuple(toString(entity_metrics.entity_id), entity_metrics.uuid_to_session[(entity_metrics.value).2], (entity_metrics.value).2), tuple(toString(entity_metrics.entity_id), toString(entity_metrics.exposure_session_id), toString(entity_metrics.exposure_event_uuid))), ifNull(equals((entity_metrics.value).1, minus(2, 1)), isNull((entity_metrics.value).1)
and isNull(minus(2, 1)))), groupArraySampleIf(100)(if(ifNull(notEquals((entity_metrics.value).2, ''), 1), tuple(toString(entity_metrics.entity_id), entity_metrics.uuid_to_session[(entity_metrics.value).2], (entity_metrics.value).2), tuple(toString(entity_metrics.entity_id), toString(entity_metrics.exposure_session_id), toString(entity_metrics.exposure_event_uuid))), ifNull(equals((entity_metrics.value).1, minus(3, 1)), isNull((entity_metrics.value).1)
and isNull(minus(3, 1)))), groupArraySampleIf(100)(if(ifNull(notEquals((entity_metrics.value).2, ''), 1), tuple(toString(entity_metrics.entity_id), entity_metrics.uuid_to_session[(entity_metrics.value).2], (entity_metrics.value).2), tuple(toString(entity_metrics.entity_id), toString(entity_metrics.exposure_session_id), toString(entity_metrics.exposure_event_uuid))), ifNull(equals((entity_metrics.value).1, minus(4, 1)), isNull((entity_metrics.value).1)
and isNull(minus(4, 1))))) AS steps_event_data
  FROM
    (SELECT metric_events.entity_id AS entity_id,
            if(ifNull(greater(uniqExactIf(metric_events.variant, ifNull(equals(metric_events.step_0, 1), 0)), 1), 0), '$multiple', anyIf(metric_events.variant, ifNull(equals(metric_events.step_0, 1), 0))) AS variant,
            argMinIf(metric_events.uuid, metric_events.timestamp, ifNull(equals(metric_events.step_0, 1), 0)) AS exposure_event_uuid,
            argMinIf(metric_events.session_id, metric_events.timestamp, ifNull(equals(metric_events.step_0, 1), 0)) AS exposure_session_id,
            arraySort(x -> minus(0, x.1), arrayMap(result -> tuple(result.1, if(and(ifNull(greaterOrEquals(result.1, 0), 0), ifNull(greater(length(result.4), result.1), 0)), if(ifNull(greater(length(arrayElement(result.4, plus(result.1, 1))), 0), 0), toString(arrayElement(result.4, plus(result.1, 1))[1]), ''), '')), aggregate_funnel_array_v8(4, 94608000, 'first_touch', 'ordered', array(array('')), [], arraySort(t -> t.1, groupArray(tuple(accurateCastOrNull(metric_events.timestamp, 'Float64'), metric_events.uuid, array(''), arrayFilter(x -> ifNull(notEquals(x, 0), 1), [multiply(1, metric_events.step_0), multiply(2, metric_events.step_1), multiply(3, metric_events.step_2), multiply(4, metric_events.step_3)])))))))[1] AS value,
            mapFromArrays(groupArray(coalesce(toString(metric_events.uuid), '')), groupArray(coalesce(toString(metric_events.session_id), ''))) AS uuid_to_session
     FROM
       (SELECT if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id) AS entity_id,
               replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', '') AS variant,
               toTimeZone(events.timestamp, 'UTC') AS timestamp,
               events.uuid AS uuid,
               nullIf(nullIf(events.`$session_id`, ''), 'null') AS session_id,
               and(greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2024-01-01 12:00:00', 'UTC'))), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2024-01-15 12:00:00', 'UTC'))), and(equals(events.event, '$feature_flag_called'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag'), ''), 'null'), '^"|"$', ''), 'test-experiment'), 0)), in(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''), ['control', 'test'])) AS step_0,
               if(equals(events.event, '$pageview'), 1, 0) AS step_1,
               if(equals(events.event, 'purchase'), 1, 0) AS step_2,
               if(equals(events.event, 'purchase'), 1, 0) AS step_3
        FROM events
        LEFT OUTER JOIN
          (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                  person_distinct_id_overrides.distinct_id AS distinct_id
           FROM person_distinct_id_overrides
           WHERE equals(person_distinct_id_overrides.team_id, 99999)
           GROUP BY person_distinct_id_overrides.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id)
        WHERE and(equals(events.team_id, 99999), or(and(greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2024-01-01 12:00:00', 'UTC'))), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2024-01-15 12:00:00', 'UTC'))), and(equals(events.event, '$feature_flag_called'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag'), ''), 'null'), '^"|"$', ''), 'test-experiment'), 0)), in(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''), ['control', 'test'])), and(greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2024-01-01 12:00:00', 'UTC'))), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2024-01-15 12:00:00', 'UTC'))), or(equals(events.event, '$pageview'), equals(events.event, 'purchase'), equals(events.event, 'purchase')))))) AS metric_events
     GROUP BY metric_events.entity_id) AS entity_metrics
  WHERE notEmpty(variant)
  GROUP BY entity_metrics.variant
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=600,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=0,
                     max_ast_elements=4000000,
                     max_expanded_ast_elements=4000000,
                     max_bytes_before_external_group_by=0,
                     allow_experimental_analyzer=1,
                     transform_null_in=1,
                     optimize_min_equality_disjunction_chain_length=4294967295,
                     allow_experimental_join_condition=1
  '''
# ---
# name: TestExperimentFunnelMetric.test_funnel_metric_with_step_property_filter
  '''
  SELECT metric_events.variant AS variant,
         count(metric_events.entity_id) AS num_users,
         countIf(ifNull(equals((metric_events.value).1, 1), 0)) AS total_sum,
         countIf(ifNull(equals((metric_events.value).1, 1), 0)) AS total_sum_of_squares,
         tuple(countIf(ifNull(greaterOrEquals((metric_events.value).1, 0), 0)), countIf(ifNull(greaterOrEquals((metric_events.value).1, 1), 0))) AS step_counts,
         tuple(groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(0, 1)), isNull((metric_events.value).1)
                                                                                                                                                                                                                                                                                                                                                                    and isNull(minus(0, 1)))), groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(1, 1)), isNull((metric_events.value).1)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    and isNull(minus(1, 1)))), groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(2, 1)), isNull((metric_events.value).1)
and isNull(minus(2, 1))))) AS steps_event_data
  FROM
    (SELECT exposures.variant AS variant,
            exposures.entity_id AS entity_id,
            any(exposures.exposure_event_uuid) AS exposure_event_uuid,
            any(exposures.exposure_session_id) AS exposure_session_id,
            arraySort(x -> minus(0, x.1), arrayMap(result -> tuple(result.1, if(and(ifNull(greaterOrEquals(result.1, 0), 0), ifNull(greater(length(result.4), result.1), 0)), if(ifNull(greater(length(arrayElement(result.4, plus(result.1, 1))), 0), 0), toString(arrayElement(result.4, plus(result.1, 1))[1]), ''), '')), aggregate_funnel_array_v8(2, 94608000, 'first_touch', 'ordered', array(array('')), [], arraySort(t -> t.1, groupArray(tuple(accurateCastOrNull(metric_events.timestamp, 'Float64'), metric_events.uuid, array(''), arrayFilter(x -> ifNull(notEquals(x, 0), 1), [multiply(1, metric_events.step_0), multiply(2, metric_events.step_1)])))))))[1] AS value,
            mapFromArrays(groupArray(coalesce(toString(metric_events.uuid), '')), groupArray(coalesce(toString(metric_events.session_id), ''))) AS uuid_to_session
     FROM
       (SELECT if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id) AS entity_id,
               if(ifNull(greater(count(DISTINCT replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', '')), 1), 0), '$multiple', any(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''))) AS variant,
               min(toTimeZone(events.timestamp, 'UTC')) AS first_exposure_time,
               argMin(events.uuid, toTimeZone(events.timestamp, 'UTC')) AS exposure_event_uuid,
               argMin(events.`$session_id`, toTimeZone(events.timestamp, 'UTC')) AS exposure_session_id
        FROM events
        LEFT OUTER JOIN
          (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                  person_distinct_id_overrides.distinct_id AS distinct_id
           FROM person_distinct_id_overrides
           WHERE equals(person_distinct_id_overrides.team_id, 99999)
           GROUP BY person_distinct_id_overrides.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id)
        WHERE and(equals(events.team_id, 99999), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('today', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('explicit_redacted_timestamp', 6, 'UTC')), in(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''), ['control', 'test']), equals(events.event, '$feature_flag_called'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag'), ''), 'null'), '^"|"$', ''), 'test-experiment'), 0))
        GROUP BY entity_id) AS exposures
     LEFT JOIN
       (SELECT toTimeZone(events.timestamp, 'UTC') AS timestamp,
               if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id) AS entity_id,
               events.event AS event,
               events.uuid AS uuid,
               events.properties AS properties,
               nullIf(nullIf(events.`$session_id`, ''), 'null') AS session_id,
               if(and(equals(events.event, '$pageview'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, 'wizard_step'), ''), 'null'), '^"|"$', ''), 'step_1'), 0)), 1, 0) AS step_0,
               if(and(equals(events.event, '$pageview'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, 'wizard_step'), ''), 'null'), '^"|"$', ''), 'step_2'), 0)), 1, 0) AS step_1
        FROM events
        LEFT OUTER JOIN
          (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                  person_distinct_id_overrides.distinct_id AS distinct_id
           FROM person_distinct_id_overrides
           WHERE equals(person_distinct_id_overrides.team_id, 99999)
           GROUP BY person_distinct_id_overrides.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id)
        WHERE and(equals(events.team_id, 99999), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('today', 6, 'UTC')), less(toTimeZone(events.timestamp, 'UTC'), toDateTime64('explicit_redacted_timestamp', 6, 'UTC')), or(and(equals(events.event, '$pageview'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, 'wizard_step'), ''), 'null'), '^"|"$', ''), 'step_1'), 0)), and(equals(events.event, '$pageview'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, 'wizard_step'), ''), 'null'), '^"|"$', ''), 'step_2'), 0))))) AS metric_events ON and(equals(toString(exposures.entity_id), toString(metric_events.entity_id)), greaterOrEquals(metric_events.timestamp, exposures.first_exposure_time))
     GROUP BY exposures.variant,
              exposures.entity_id) AS metric_events
  GROUP BY metric_events.variant
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=600,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=0,
                     max_ast_elements=4000000,
                     max_expanded_ast_elements=4000000,
                     max_bytes_before_external_group_by=0,
                     allow_experimental_analyzer=1,
                     transform_null_in=1,
                     optimize_min_equality_disjunction_chain_length=4294967295,
                     allow_experimental_join_condition=1
  '''
# ---
# name: TestExperimentFunnelMetric.test_funnel_metric_with_step_property_filter_0_disable_new_query_builder
  '''
  SELECT metric_events.variant AS variant,
         count(metric_events.entity_id) AS num_users,
         countIf(ifNull(equals((metric_events.value).1, 1), 0)) AS total_sum,
         countIf(ifNull(equals((metric_events.value).1, 1), 0)) AS total_sum_of_squares,
         tuple(countIf(ifNull(greaterOrEquals((metric_events.value).1, 0), 0)), countIf(ifNull(greaterOrEquals((metric_events.value).1, 1), 0))) AS step_counts,
         tuple(groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(0, 1)), isNull((metric_events.value).1)
                                                                                                                                                                                                                                                                                                                                                                    and isNull(minus(0, 1)))), groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(1, 1)), isNull((metric_events.value).1)
and isNull(minus(1, 1)))), groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(2, 1)), isNull((metric_events.value).1)
and isNull(minus(2, 1))))) AS steps_event_data
  FROM
    (SELECT exposures.variant AS variant,
            exposures.entity_id AS entity_id,
            any(exposures.exposure_event_uuid) AS exposure_event_uuid,
            any(exposures.exposure_session_id) AS exposure_session_id,
            arraySort(x -> minus(0, x.1), arrayMap(result -> tuple(result.1, if(and(ifNull(greaterOrEquals(result.1, 0), 0), ifNull(greater(length(result.4), result.1), 0)), if(ifNull(greater(length(arrayElement(result.4, plus(result.1, 1))), 0), 0), toString(arrayElement(result.4, plus(result.1, 1))[1]), ''), '')), aggregate_funnel_array_v8(2, 94608000, 'first_touch', 'ordered', array(array('')), [], arraySort(t -> t.1, groupArray(tuple(accurateCastOrNull(metric_events.timestamp, 'Float64'), metric_events.uuid, array(''), arrayFilter(x -> ifNull(notEquals(x, 0), 1), [multiply(1, metric_events.step_0), multiply(2, metric_events.step_1)])))))))[1] AS value,
            mapFromArrays(groupArray(coalesce(toString(metric_events.uuid), '')), groupArray(coalesce(toString(metric_events.session_id), ''))) AS uuid_to_session
     FROM
       (SELECT if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id) AS entity_id,
               if(ifNull(greater(count(DISTINCT replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', '')), 1), 0), '$multiple', any(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''))) AS variant,
               min(toTimeZone(events.timestamp, 'UTC')) AS first_exposure_time,
               argMin(events.uuid, toTimeZone(events.timestamp, 'UTC')) AS exposure_event_uuid,
               argMin(events.`$session_id`, toTimeZone(events.timestamp, 'UTC')) AS exposure_session_id
        FROM events
        LEFT OUTER JOIN
          (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                  person_distinct_id_overrides.distinct_id AS distinct_id
           FROM person_distinct_id_overrides
           WHERE equals(person_distinct_id_overrides.team_id, 99999)
           GROUP BY person_distinct_id_overrides.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id)
        WHERE and(equals(events.team_id, 99999), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('today', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('explicit_redacted_timestamp', 6, 'UTC')), in(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''), ['control', 'test']), equals(events.event, '$feature_flag_called'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag'), ''), 'null'), '^"|"$', ''), 'test-experiment'), 0))
        GROUP BY entity_id) AS exposures
     LEFT JOIN
       (SELECT toTimeZone(events.timestamp, 'UTC') AS timestamp,
               if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id) AS entity_id,
               events.event AS event,
               events.uuid AS uuid,
               events.properties AS properties,
               nullIf(nullIf(events.`$session_id`, ''), 'null') AS session_id,
               if(and(equals(events.event, '$pageview'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, 'wizard_step'), ''), 'null'), '^"|"$', ''), 'step_1'), 0)), 1, 0) AS step_0,
               if(and(equals(events.event, '$pageview'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, 'wizard_step'), ''), 'null'), '^"|"$', ''), 'step_2'), 0)), 1, 0) AS step_1
        FROM events
        LEFT OUTER JOIN
          (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                  person_distinct_id_overrides.distinct_id AS distinct_id
           FROM person_distinct_id_overrides
           WHERE equals(person_distinct_id_overrides.team_id, 99999)
           GROUP BY person_distinct_id_overrides.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id)
        WHERE and(equals(events.team_id, 99999), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('today', 6, 'UTC')), less(toTimeZone(events.timestamp, 'UTC'), toDateTime64('explicit_redacted_timestamp', 6, 'UTC')), or(and(equals(events.event, '$pageview'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, 'wizard_step'), ''), 'null'), '^"|"$', ''), 'step_1'), 0)), and(equals(events.event, '$pageview'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, 'wizard_step'), ''), 'null'), '^"|"$', ''), 'step_2'), 0))))) AS metric_events ON and(equals(toString(exposures.entity_id), toString(metric_events.entity_id)), greaterOrEquals(metric_events.timestamp, exposures.first_exposure_time))
     GROUP BY exposures.variant,
              exposures.entity_id) AS metric_events
  GROUP BY metric_events.variant
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=600,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=0,
                     max_ast_elements=4000000,
                     max_expanded_ast_elements=4000000,
                     max_bytes_before_external_group_by=0,
                     allow_experimental_analyzer=1,
                     transform_null_in=1,
                     optimize_min_equality_disjunction_chain_length=4294967295,
                     allow_experimental_join_condition=1
  '''
# ---
# name: TestExperimentFunnelMetric.test_funnel_metric_with_step_property_filter_1_enable_new_query_builder
  '''
  SELECT entity_metrics.variant AS variant,
         count(entity_metrics.entity_id) AS num_users,
         countIf(ifNull(equals((entity_metrics.value).1, 2), 0)) AS total_sum,
         countIf(ifNull(equals((entity_metrics.value).1, 2), 0)) AS total_sum_of_squares,
         tuple(countIf(ifNull(greaterOrEquals((entity_metrics.value).1, 1), 0)), countIf(ifNull(greaterOrEquals((entity_metrics.value).1, 2), 0))) AS step_counts,
         tuple(groupArraySampleIf(100)(if(ifNull(notEquals((entity_metrics.value).2, ''), 1), tuple(toString(entity_metrics.entity_id), entity_metrics.uuid_to_session[(entity_metrics.value).2], (entity_metrics.value).2), tuple(toString(entity_metrics.entity_id), toString(entity_metrics.exposure_session_id), toString(entity_metrics.exposure_event_uuid))), ifNull(equals((entity_metrics.value).1, minus(1, 1)), isNull((entity_metrics.value).1)
                                                                                                                                                                                                                                                                                                                                                                            and isNull(minus(1, 1)))), groupArraySampleIf(100)(if(ifNull(notEquals((entity_metrics.value).2, ''), 1), tuple(toString(entity_metrics.entity_id), entity_metrics.uuid_to_session[(entity_metrics.value).2], (entity_metrics.value).2), tuple(toString(entity_metrics.entity_id), toString(entity_metrics.exposure_session_id), toString(entity_metrics.exposure_event_uuid))), ifNull(equals((entity_metrics.value).1, minus(2, 1)), isNull((entity_metrics.value).1)
and isNull(minus(2, 1)))), groupArraySampleIf(100)(if(ifNull(notEquals((entity_metrics.value).2, ''), 1), tuple(toString(entity_metrics.entity_id), entity_metrics.uuid_to_session[(entity_metrics.value).2], (entity_metrics.value).2), tuple(toString(entity_metrics.entity_id), toString(entity_metrics.exposure_session_id), toString(entity_metrics.exposure_event_uuid))), ifNull(equals((entity_metrics.value).1, minus(3, 1)), isNull((entity_metrics.value).1)
and isNull(minus(3, 1))))) AS steps_event_data
  FROM
    (SELECT metric_events.entity_id AS entity_id,
            if(ifNull(greater(uniqExactIf(metric_events.variant, ifNull(equals(metric_events.step_0, 1), 0)), 1), 0), '$multiple', anyIf(metric_events.variant, ifNull(equals(metric_events.step_0, 1), 0))) AS variant,
            argMinIf(metric_events.uuid, metric_events.timestamp, ifNull(equals(metric_events.step_0, 1), 0)) AS exposure_event_uuid,
            argMinIf(metric_events.session_id, metric_events.timestamp, ifNull(equals(metric_events.step_0, 1), 0)) AS exposure_session_id,
            arraySort(x -> minus(0, x.1), arrayMap(result -> tuple(result.1, if(and(ifNull(greaterOrEquals(result.1, 0), 0), ifNull(greater(length(result.4), result.1), 0)), if(ifNull(greater(length(arrayElement(result.4, plus(result.1, 1))), 0), 0), toString(arrayElement(result.4, plus(result.1, 1))[1]), ''), '')), aggregate_funnel_array_v8(3, 94608000, 'first_touch', 'ordered', array(array('')), [], arraySort(t -> t.1, groupArray(tuple(accurateCastOrNull(metric_events.timestamp, 'Float64'), metric_events.uuid, array(''), arrayFilter(x -> ifNull(notEquals(x, 0), 1), [multiply(1, metric_events.step_0), multiply(2, metric_events.step_1), multiply(3, metric_events.step_2)])))))))[1] AS value,
            mapFromArrays(groupArray(coalesce(toString(metric_events.uuid), '')), groupArray(coalesce(toString(metric_events.session_id), ''))) AS uuid_to_session
     FROM
       (SELECT if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id) AS entity_id,
               replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', '') AS variant,
               toTimeZone(events.timestamp, 'UTC') AS timestamp,
               events.uuid AS uuid,
               nullIf(nullIf(events.`$session_id`, ''), 'null') AS session_id,
               and(greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2024-01-01 12:00:00', 'UTC'))), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2024-01-15 12:00:00', 'UTC'))), and(equals(events.event, '$feature_flag_called'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag'), ''), 'null'), '^"|"$', ''), 'test-experiment'), 0)), in(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''), ['control', 'test'])) AS step_0,
               if(and(equals(events.event, '$pageview'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, 'wizard_step'), ''), 'null'), '^"|"$', ''), 'step_1'), 0)), 1, 0) AS step_1,
               if(and(equals(events.event, '$pageview'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, 'wizard_step'), ''), 'null'), '^"|"$', ''), 'step_2'), 0)), 1, 0) AS step_2
        FROM events
        LEFT OUTER JOIN
          (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                  person_distinct_id_overrides.distinct_id AS distinct_id
           FROM person_distinct_id_overrides
           WHERE equals(person_distinct_id_overrides.team_id, 99999)
           GROUP BY person_distinct_id_overrides.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id)
        WHERE and(equals(events.team_id, 99999), or(and(greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2024-01-01 12:00:00', 'UTC'))), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2024-01-15 12:00:00', 'UTC'))), and(equals(events.event, '$feature_flag_called'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag'), ''), 'null'), '^"|"$', ''), 'test-experiment'), 0)), in(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''), ['control', 'test'])), and(greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2024-01-01 12:00:00', 'UTC'))), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2024-01-15 12:00:00', 'UTC'))), or(and(equals(events.event, '$pageview'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, 'wizard_step'), ''), 'null'), '^"|"$', ''), 'step_1'), 0)), and(equals(events.event, '$pageview'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, 'wizard_step'), ''), 'null'), '^"|"$', ''), 'step_2'), 0))))))) AS metric_events
     GROUP BY metric_events.entity_id) AS entity_metrics
  WHERE notEmpty(variant)
  GROUP BY entity_metrics.variant
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=600,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=0,
                     max_ast_elements=4000000,
                     max_expanded_ast_elements=4000000,
                     max_bytes_before_external_group_by=0,
                     allow_experimental_analyzer=1,
                     transform_null_in=1,
                     optimize_min_equality_disjunction_chain_length=4294967295,
                     allow_experimental_join_condition=1
  '''
# ---
# name: TestExperimentFunnelMetric.test_funnel_metric_with_unordered_steps
  '''
  SELECT metric_events.variant AS variant,
         count(metric_events.entity_id) AS num_users,
         countIf(ifNull(equals((metric_events.value).1, 1), 0)) AS total_sum,
         countIf(ifNull(equals((metric_events.value).1, 1), 0)) AS total_sum_of_squares,
         tuple(countIf(ifNull(greaterOrEquals((metric_events.value).1, 0), 0)), countIf(ifNull(greaterOrEquals((metric_events.value).1, 1), 0))) AS step_counts,
         tuple(groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(0, 1)), isNull((metric_events.value).1)
                                                                                                                                                                                                                                                                                                                                                                    and isNull(minus(0, 1)))), groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(1, 1)), isNull((metric_events.value).1)
and isNull(minus(1, 1)))), groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(2, 1)), isNull((metric_events.value).1)
and isNull(minus(2, 1))))) AS steps_event_data
  FROM
    (SELECT exposures.variant AS variant,
            exposures.entity_id AS entity_id,
            any(exposures.exposure_event_uuid) AS exposure_event_uuid,
            any(exposures.exposure_session_id) AS exposure_session_id,
            arraySort(x -> minus(0, x.1), arrayMap(result -> tuple(result.1, if(and(ifNull(greaterOrEquals(result.1, 0), 0), ifNull(greater(length(result.4), result.1), 0)), if(ifNull(greater(length(arrayElement(result.4, plus(result.1, 1))), 0), 0), toString(arrayElement(result.4, plus(result.1, 1))[1]), ''), '')), aggregate_funnel_array_v8(2, 94608000, 'first_touch', 'unordered', array(array('')), [], arraySort(t -> t.1, groupArray(tuple(accurateCastOrNull(metric_events.timestamp, 'Float64'), metric_events.uuid, array(''), arrayFilter(x -> ifNull(notEquals(x, 0), 1), [multiply(1, metric_events.step_0), multiply(2, metric_events.step_1)])))))))[1] AS value,
            mapFromArrays(groupArray(coalesce(toString(metric_events.uuid), '')), groupArray(coalesce(toString(metric_events.session_id), ''))) AS uuid_to_session
     FROM
       (SELECT if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id) AS entity_id,
               if(ifNull(greater(count(DISTINCT replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', '')), 1), 0), '$multiple', any(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''))) AS variant,
               min(toTimeZone(events.timestamp, 'UTC')) AS first_exposure_time,
               argMin(events.uuid, toTimeZone(events.timestamp, 'UTC')) AS exposure_event_uuid,
               argMin(events.`$session_id`, toTimeZone(events.timestamp, 'UTC')) AS exposure_session_id
        FROM events
        LEFT OUTER JOIN
          (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                  person_distinct_id_overrides.distinct_id AS distinct_id
           FROM person_distinct_id_overrides
           WHERE equals(person_distinct_id_overrides.team_id, 99999)
           GROUP BY person_distinct_id_overrides.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id)
        WHERE and(equals(events.team_id, 99999), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('today', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('explicit_redacted_timestamp', 6, 'UTC')), in(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''), ['control', 'test']), equals(events.event, '$feature_flag_called'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag'), ''), 'null'), '^"|"$', ''), 'test-experiment'), 0))
        GROUP BY entity_id) AS exposures
     LEFT JOIN
       (SELECT toTimeZone(events.timestamp, 'UTC') AS timestamp,
               if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id) AS entity_id,
               events.event AS event,
               events.uuid AS uuid,
               events.properties AS properties,
               nullIf(nullIf(events.`$session_id`, ''), 'null') AS session_id,
               if(equals(events.event, '$pageview'), 1, 0) AS step_0,
               if(equals(events.event, 'purchase'), 1, 0) AS step_1
        FROM events
        LEFT OUTER JOIN
          (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                  person_distinct_id_overrides.distinct_id AS distinct_id
           FROM person_distinct_id_overrides
           WHERE equals(person_distinct_id_overrides.team_id, 99999)
           GROUP BY person_distinct_id_overrides.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id)
        WHERE and(equals(events.team_id, 99999), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('today', 6, 'UTC')), less(toTimeZone(events.timestamp, 'UTC'), toDateTime64('explicit_redacted_timestamp', 6, 'UTC')), or(equals(events.event, '$pageview'), equals(events.event, 'purchase')))) AS metric_events ON and(equals(toString(exposures.entity_id), toString(metric_events.entity_id)), greaterOrEquals(metric_events.timestamp, exposures.first_exposure_time))
     GROUP BY exposures.variant,
              exposures.entity_id) AS metric_events
  GROUP BY metric_events.variant
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=600,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=0,
                     max_ast_elements=4000000,
                     max_expanded_ast_elements=4000000,
                     max_bytes_before_external_group_by=0,
                     allow_experimental_analyzer=1,
                     transform_null_in=1,
                     optimize_min_equality_disjunction_chain_length=4294967295,
                     allow_experimental_join_condition=1
  '''
# ---
# name: TestExperimentFunnelMetric.test_funnel_metric_with_unordered_steps_0_disable_new_query_builder
  '''
  SELECT metric_events.variant AS variant,
         count(metric_events.entity_id) AS num_users,
         countIf(ifNull(equals((metric_events.value).1, 1), 0)) AS total_sum,
         countIf(ifNull(equals((metric_events.value).1, 1), 0)) AS total_sum_of_squares,
         tuple(countIf(ifNull(greaterOrEquals((metric_events.value).1, 0), 0)), countIf(ifNull(greaterOrEquals((metric_events.value).1, 1), 0))) AS step_counts,
         tuple(groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(0, 1)), isNull((metric_events.value).1)
                                                                                                                                                                                                                                                                                                                                                                    and isNull(minus(0, 1)))), groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(1, 1)), isNull((metric_events.value).1)
and isNull(minus(1, 1)))), groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(2, 1)), isNull((metric_events.value).1)
and isNull(minus(2, 1))))) AS steps_event_data
  FROM
    (SELECT exposures.variant AS variant,
            exposures.entity_id AS entity_id,
            any(exposures.exposure_event_uuid) AS exposure_event_uuid,
            any(exposures.exposure_session_id) AS exposure_session_id,
            arraySort(x -> minus(0, x.1), arrayMap(result -> tuple(result.1, if(and(ifNull(greaterOrEquals(result.1, 0), 0), ifNull(greater(length(result.4), result.1), 0)), if(ifNull(greater(length(arrayElement(result.4, plus(result.1, 1))), 0), 0), toString(arrayElement(result.4, plus(result.1, 1))[1]), ''), '')), aggregate_funnel_array_v8(2, 94608000, 'first_touch', 'unordered', array(array('')), [], arraySort(t -> t.1, groupArray(tuple(accurateCastOrNull(metric_events.timestamp, 'Float64'), metric_events.uuid, array(''), arrayFilter(x -> ifNull(notEquals(x, 0), 1), [multiply(1, metric_events.step_0), multiply(2, metric_events.step_1)])))))))[1] AS value,
            mapFromArrays(groupArray(coalesce(toString(metric_events.uuid), '')), groupArray(coalesce(toString(metric_events.session_id), ''))) AS uuid_to_session
     FROM
       (SELECT if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id) AS entity_id,
               if(ifNull(greater(count(DISTINCT replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', '')), 1), 0), '$multiple', any(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''))) AS variant,
               min(toTimeZone(events.timestamp, 'UTC')) AS first_exposure_time,
               argMin(events.uuid, toTimeZone(events.timestamp, 'UTC')) AS exposure_event_uuid,
               argMin(events.`$session_id`, toTimeZone(events.timestamp, 'UTC')) AS exposure_session_id
        FROM events
        LEFT OUTER JOIN
          (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                  person_distinct_id_overrides.distinct_id AS distinct_id
           FROM person_distinct_id_overrides
           WHERE equals(person_distinct_id_overrides.team_id, 99999)
           GROUP BY person_distinct_id_overrides.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id)
        WHERE and(equals(events.team_id, 99999), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('today', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('explicit_redacted_timestamp', 6, 'UTC')), in(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''), ['control', 'test']), equals(events.event, '$feature_flag_called'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag'), ''), 'null'), '^"|"$', ''), 'test-experiment'), 0))
        GROUP BY entity_id) AS exposures
     LEFT JOIN
       (SELECT toTimeZone(events.timestamp, 'UTC') AS timestamp,
               if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id) AS entity_id,
               events.event AS event,
               events.uuid AS uuid,
               events.properties AS properties,
               nullIf(nullIf(events.`$session_id`, ''), 'null') AS session_id,
               if(equals(events.event, '$pageview'), 1, 0) AS step_0,
               if(equals(events.event, 'purchase'), 1, 0) AS step_1
        FROM events
        LEFT OUTER JOIN
          (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                  person_distinct_id_overrides.distinct_id AS distinct_id
           FROM person_distinct_id_overrides
           WHERE equals(person_distinct_id_overrides.team_id, 99999)
           GROUP BY person_distinct_id_overrides.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id)
        WHERE and(equals(events.team_id, 99999), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('today', 6, 'UTC')), less(toTimeZone(events.timestamp, 'UTC'), toDateTime64('explicit_redacted_timestamp', 6, 'UTC')), or(equals(events.event, '$pageview'), equals(events.event, 'purchase')))) AS metric_events ON and(equals(toString(exposures.entity_id), toString(metric_events.entity_id)), greaterOrEquals(metric_events.timestamp, exposures.first_exposure_time))
     GROUP BY exposures.variant,
              exposures.entity_id) AS metric_events
  GROUP BY metric_events.variant
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=600,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=0,
                     max_ast_elements=4000000,
                     max_expanded_ast_elements=4000000,
                     max_bytes_before_external_group_by=0,
                     allow_experimental_analyzer=1,
                     transform_null_in=1,
                     optimize_min_equality_disjunction_chain_length=4294967295,
                     allow_experimental_join_condition=1
  '''
# ---
# name: TestExperimentFunnelMetric.test_funnel_metric_with_unordered_steps_1_enable_new_query_builder
  '''
  SELECT entity_metrics.variant AS variant,
         count(entity_metrics.entity_id) AS num_users,
         countIf(ifNull(equals((entity_metrics.value).1, 2), 0)) AS total_sum,
         countIf(ifNull(equals((entity_metrics.value).1, 2), 0)) AS total_sum_of_squares,
         tuple(countIf(ifNull(greaterOrEquals((entity_metrics.value).1, 1), 0)), countIf(ifNull(greaterOrEquals((entity_metrics.value).1, 2), 0))) AS step_counts,
         tuple(groupArraySampleIf(100)(if(ifNull(notEquals((entity_metrics.value).2, ''), 1), tuple(toString(entity_metrics.entity_id), entity_metrics.uuid_to_session[(entity_metrics.value).2], (entity_metrics.value).2), tuple(toString(entity_metrics.entity_id), toString(entity_metrics.exposure_session_id), toString(entity_metrics.exposure_event_uuid))), ifNull(equals((entity_metrics.value).1, minus(1, 1)), isNull((entity_metrics.value).1)
                                                                                                                                                                                                                                                                                                                                                                            and isNull(minus(1, 1)))), groupArraySampleIf(100)(if(ifNull(notEquals((entity_metrics.value).2, ''), 1), tuple(toString(entity_metrics.entity_id), entity_metrics.uuid_to_session[(entity_metrics.value).2], (entity_metrics.value).2), tuple(toString(entity_metrics.entity_id), toString(entity_metrics.exposure_session_id), toString(entity_metrics.exposure_event_uuid))), ifNull(equals((entity_metrics.value).1, minus(2, 1)), isNull((entity_metrics.value).1)
and isNull(minus(2, 1)))), groupArraySampleIf(100)(if(ifNull(notEquals((entity_metrics.value).2, ''), 1), tuple(toString(entity_metrics.entity_id), entity_metrics.uuid_to_session[(entity_metrics.value).2], (entity_metrics.value).2), tuple(toString(entity_metrics.entity_id), toString(entity_metrics.exposure_session_id), toString(entity_metrics.exposure_event_uuid))), ifNull(equals((entity_metrics.value).1, minus(3, 1)), isNull((entity_metrics.value).1)
and isNull(minus(3, 1))))) AS steps_event_data
  FROM
    (SELECT metric_events.entity_id AS entity_id,
            if(ifNull(greater(uniqExactIf(metric_events.variant, ifNull(equals(metric_events.step_0, 1), 0)), 1), 0), '$multiple', anyIf(metric_events.variant, ifNull(equals(metric_events.step_0, 1), 0))) AS variant,
            argMinIf(metric_events.uuid, metric_events.timestamp, ifNull(equals(metric_events.step_0, 1), 0)) AS exposure_event_uuid,
            argMinIf(metric_events.session_id, metric_events.timestamp, ifNull(equals(metric_events.step_0, 1), 0)) AS exposure_session_id,
            arraySort(x -> minus(0, x.1), arrayMap(result -> tuple(result.1, if(and(ifNull(greaterOrEquals(result.1, 0), 0), ifNull(greater(length(result.4), result.1), 0)), if(ifNull(greater(length(arrayElement(result.4, plus(result.1, 1))), 0), 0), toString(arrayElement(result.4, plus(result.1, 1))[1]), ''), '')), aggregate_funnel_array_v8(3, 94608000, 'first_touch', 'unordered', array(array('')), [], arraySort(t -> t.1, groupArray(tuple(accurateCastOrNull(metric_events.timestamp, 'Float64'), metric_events.uuid, array(''), arrayFilter(x -> ifNull(notEquals(x, 0), 1), [multiply(1, metric_events.step_0), multiply(2, metric_events.step_1), multiply(3, metric_events.step_2)])))))))[1] AS value,
            mapFromArrays(groupArray(coalesce(toString(metric_events.uuid), '')), groupArray(coalesce(toString(metric_events.session_id), ''))) AS uuid_to_session
     FROM
       (SELECT if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id) AS entity_id,
               replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', '') AS variant,
               toTimeZone(events.timestamp, 'UTC') AS timestamp,
               events.uuid AS uuid,
               nullIf(nullIf(events.`$session_id`, ''), 'null') AS session_id,
               and(greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2024-01-01 12:00:00', 'UTC'))), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2024-01-15 12:00:00', 'UTC'))), and(equals(events.event, '$feature_flag_called'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag'), ''), 'null'), '^"|"$', ''), 'test-experiment'), 0)), in(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''), ['control', 'test'])) AS step_0,
               if(equals(events.event, '$pageview'), 1, 0) AS step_1,
               if(equals(events.event, 'purchase'), 1, 0) AS step_2
        FROM events
        LEFT OUTER JOIN
          (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                  person_distinct_id_overrides.distinct_id AS distinct_id
           FROM person_distinct_id_overrides
           WHERE equals(person_distinct_id_overrides.team_id, 99999)
           GROUP BY person_distinct_id_overrides.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id)
        WHERE and(equals(events.team_id, 99999), or(and(greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2024-01-01 12:00:00', 'UTC'))), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2024-01-15 12:00:00', 'UTC'))), and(equals(events.event, '$feature_flag_called'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag'), ''), 'null'), '^"|"$', ''), 'test-experiment'), 0)), in(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''), ['control', 'test'])), and(greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2024-01-01 12:00:00', 'UTC'))), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2024-01-15 12:00:00', 'UTC'))), or(equals(events.event, '$pageview'), equals(events.event, 'purchase')))))) AS metric_events
     GROUP BY metric_events.entity_id) AS entity_metrics
  WHERE notEmpty(variant)
  GROUP BY entity_metrics.variant
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=600,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=0,
                     max_ast_elements=4000000,
                     max_expanded_ast_elements=4000000,
                     max_bytes_before_external_group_by=0,
                     allow_experimental_analyzer=1,
                     transform_null_in=1,
                     optimize_min_equality_disjunction_chain_length=4294967295,
                     allow_experimental_join_condition=1
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_funnel_metric_0_disable_new_query_builder
  '''
  SELECT metric_events.variant AS variant,
         count(metric_events.entity_id) AS num_users,
         countIf(ifNull(equals((metric_events.value).1, 0), 0)) AS total_sum,
         countIf(ifNull(equals((metric_events.value).1, 0), 0)) AS total_sum_of_squares,
         tuple(countIf(ifNull(greaterOrEquals((metric_events.value).1, 0), 0))) AS step_counts,
         tuple(groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(0, 1)), isNull((metric_events.value).1)
                                                                                                                                                                                                                                                                                                                                                                    and isNull(minus(0, 1)))), groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(1, 1)), isNull((metric_events.value).1)
and isNull(minus(1, 1))))) AS steps_event_data
  FROM
    (SELECT exposures.variant AS variant,
            exposures.entity_id AS entity_id,
            any(exposures.exposure_event_uuid) AS exposure_event_uuid,
            any(exposures.exposure_session_id) AS exposure_session_id,
            arraySort(x -> minus(0, x.1), arrayMap(result -> tuple(result.1, if(and(ifNull(greaterOrEquals(result.1, 0), 0), ifNull(greater(length(result.4), result.1), 0)), if(ifNull(greater(length(arrayElement(result.4, plus(result.1, 1))), 0), 0), toString(arrayElement(result.4, plus(result.1, 1))[1]), ''), '')), aggregate_funnel_array_v8(1, 94608000, 'first_touch', 'ordered', array(array('')), [], arraySort(t -> t.1, groupArray(tuple(accurateCastOrNull(metric_events.timestamp, 'Float64'), metric_events.uuid, array(''), arrayFilter(x -> ifNull(notEquals(x, 0), 1), [multiply(1, metric_events.step_0)])))))))[1] AS value,
            mapFromArrays(groupArray(coalesce(toString(metric_events.uuid), '')), groupArray(coalesce(toString(metric_events.session_id), ''))) AS uuid_to_session
     FROM
       (SELECT if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id) AS entity_id,
               if(ifNull(greater(count(DISTINCT replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', '')), 1), 0), '$multiple', any(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''))) AS variant,
               min(toTimeZone(events.timestamp, 'UTC')) AS first_exposure_time,
               argMin(events.uuid, toTimeZone(events.timestamp, 'UTC')) AS exposure_event_uuid,
               argMin(events.`$session_id`, toTimeZone(events.timestamp, 'UTC')) AS exposure_session_id
        FROM events
        LEFT OUTER JOIN
          (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                  person_distinct_id_overrides.distinct_id AS distinct_id
           FROM person_distinct_id_overrides
           WHERE equals(person_distinct_id_overrides.team_id, 99999)
           GROUP BY person_distinct_id_overrides.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id)
        WHERE and(equals(events.team_id, 99999), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('today', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('explicit_redacted_timestamp', 6, 'UTC')), in(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''), ['control', 'test']), equals(events.event, '$feature_flag_called'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag'), ''), 'null'), '^"|"$', ''), 'test-experiment'), 0))
        GROUP BY entity_id) AS exposures
     LEFT JOIN
       (SELECT toTimeZone(events.timestamp, 'UTC') AS timestamp,
               if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id) AS entity_id,
               events.event AS event,
               events.uuid AS uuid,
               events.properties AS properties,
               nullIf(nullIf(events.`$session_id`, ''), 'null') AS session_id,
               if(equals(events.event, 'purchase'), 1, 0) AS step_0
        FROM events
        LEFT OUTER JOIN
          (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                  person_distinct_id_overrides.distinct_id AS distinct_id
           FROM person_distinct_id_overrides
           WHERE equals(person_distinct_id_overrides.team_id, 99999)
           GROUP BY person_distinct_id_overrides.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id)
        WHERE and(equals(events.team_id, 99999), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('today', 6, 'UTC')), less(toTimeZone(events.timestamp, 'UTC'), toDateTime64('explicit_redacted_timestamp', 6, 'UTC')), equals(events.event, 'purchase'))) AS metric_events ON and(equals(toString(exposures.entity_id), toString(metric_events.entity_id)), greaterOrEquals(metric_events.timestamp, exposures.first_exposure_time))
     GROUP BY exposures.variant,
              exposures.entity_id) AS metric_events
  GROUP BY metric_events.variant
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=600,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=0,
                     max_ast_elements=4000000,
                     max_expanded_ast_elements=4000000,
                     max_bytes_before_external_group_by=0,
                     allow_experimental_analyzer=1,
                     transform_null_in=1,
                     optimize_min_equality_disjunction_chain_length=4294967295,
                     allow_experimental_join_condition=1
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_funnel_metric_1_enable_new_query_builder
  '''
  SELECT entity_metrics.variant AS variant,
         count(entity_metrics.entity_id) AS num_users,
         countIf(ifNull(equals((entity_metrics.value).1, 1), 0)) AS total_sum,
         countIf(ifNull(equals((entity_metrics.value).1, 1), 0)) AS total_sum_of_squares,
         tuple(countIf(ifNull(greaterOrEquals((entity_metrics.value).1, 1), 0))) AS step_counts,
         tuple(groupArraySampleIf(100)(if(ifNull(notEquals((entity_metrics.value).2, ''), 1), tuple(toString(entity_metrics.entity_id), entity_metrics.uuid_to_session[(entity_metrics.value).2], (entity_metrics.value).2), tuple(toString(entity_metrics.entity_id), toString(entity_metrics.exposure_session_id), toString(entity_metrics.exposure_event_uuid))), ifNull(equals((entity_metrics.value).1, minus(1, 1)), isNull((entity_metrics.value).1)
                                                                                                                                                                                                                                                                                                                                                                            and isNull(minus(1, 1)))), groupArraySampleIf(100)(if(ifNull(notEquals((entity_metrics.value).2, ''), 1), tuple(toString(entity_metrics.entity_id), entity_metrics.uuid_to_session[(entity_metrics.value).2], (entity_metrics.value).2), tuple(toString(entity_metrics.entity_id), toString(entity_metrics.exposure_session_id), toString(entity_metrics.exposure_event_uuid))), ifNull(equals((entity_metrics.value).1, minus(2, 1)), isNull((entity_metrics.value).1)
and isNull(minus(2, 1))))) AS steps_event_data
  FROM
    (SELECT metric_events.entity_id AS entity_id,
            if(ifNull(greater(uniqExactIf(metric_events.variant, ifNull(equals(metric_events.step_0, 1), 0)), 1), 0), '$multiple', anyIf(metric_events.variant, ifNull(equals(metric_events.step_0, 1), 0))) AS variant,
            argMinIf(metric_events.uuid, metric_events.timestamp, ifNull(equals(metric_events.step_0, 1), 0)) AS exposure_event_uuid,
            argMinIf(metric_events.session_id, metric_events.timestamp, ifNull(equals(metric_events.step_0, 1), 0)) AS exposure_session_id,
            arraySort(x -> minus(0, x.1), arrayMap(result -> tuple(result.1, if(and(ifNull(greaterOrEquals(result.1, 0), 0), ifNull(greater(length(result.4), result.1), 0)), if(ifNull(greater(length(arrayElement(result.4, plus(result.1, 1))), 0), 0), toString(arrayElement(result.4, plus(result.1, 1))[1]), ''), '')), aggregate_funnel_array_v8(2, 94608000, 'first_touch', 'ordered', array(array('')), [], arraySort(t -> t.1, groupArray(tuple(accurateCastOrNull(metric_events.timestamp, 'Float64'), metric_events.uuid, array(''), arrayFilter(x -> ifNull(notEquals(x, 0), 1), [multiply(1, metric_events.step_0), multiply(2, metric_events.step_1)])))))))[1] AS value,
            mapFromArrays(groupArray(coalesce(toString(metric_events.uuid), '')), groupArray(coalesce(toString(metric_events.session_id), ''))) AS uuid_to_session
     FROM
       (SELECT if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id) AS entity_id,
               replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', '') AS variant,
               toTimeZone(events.timestamp, 'UTC') AS timestamp,
               events.uuid AS uuid,
               nullIf(nullIf(events.`$session_id`, ''), 'null') AS session_id,
               and(greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2020-01-01 12:00:00', 'UTC'))), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2020-01-15 12:00:00', 'UTC'))), and(equals(events.event, '$feature_flag_called'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag'), ''), 'null'), '^"|"$', ''), 'test-experiment'), 0)), in(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''), ['control', 'test'])) AS step_0,
               if(equals(events.event, 'purchase'), 1, 0) AS step_1
        FROM events
        LEFT OUTER JOIN
          (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                  person_distinct_id_overrides.distinct_id AS distinct_id
           FROM person_distinct_id_overrides
           WHERE equals(person_distinct_id_overrides.team_id, 99999)
           GROUP BY person_distinct_id_overrides.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id)
        WHERE and(equals(events.team_id, 99999), or(and(greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2020-01-01 12:00:00', 'UTC'))), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2020-01-15 12:00:00', 'UTC'))), and(equals(events.event, '$feature_flag_called'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag'), ''), 'null'), '^"|"$', ''), 'test-experiment'), 0)), in(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''), ['control', 'test'])), and(greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2020-01-01 12:00:00', 'UTC'))), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2020-01-15 12:00:00', 'UTC'))), equals(events.event, 'purchase'))))) AS metric_events
     GROUP BY metric_events.entity_id) AS entity_metrics
  WHERE notEmpty(variant)
  GROUP BY entity_metrics.variant
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=600,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=0,
                     max_ast_elements=4000000,
                     max_expanded_ast_elements=4000000,
                     max_bytes_before_external_group_by=0,
                     allow_experimental_analyzer=1,
                     transform_null_in=1,
                     optimize_min_equality_disjunction_chain_length=4294967295,
                     allow_experimental_join_condition=1
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_group_aggregation_funnel_metric
  '''
  SELECT metric_events.variant AS variant,
         count(metric_events.entity_id) AS num_users,
         countIf(ifNull(equals((metric_events.value).1, 0), 0)) AS total_sum,
         countIf(ifNull(equals((metric_events.value).1, 0), 0)) AS total_sum_of_squares,
         tuple(countIf(ifNull(greaterOrEquals((metric_events.value).1, 0), 0))) AS step_counts,
         tuple(groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(0, 1)), isNull((metric_events.value).1)
                                                                                                                                                                                                                                                                                                                                                                    and isNull(minus(0, 1)))), groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(1, 1)), isNull((metric_events.value).1)
and isNull(minus(1, 1))))) AS steps_event_data
  FROM
    (SELECT exposures.variant AS variant,
            exposures.entity_id AS entity_id,
            any(exposures.exposure_event_uuid) AS exposure_event_uuid,
            any(exposures.exposure_session_id) AS exposure_session_id,
            arraySort(x -> minus(0, x.1), arrayMap(result -> tuple(result.1, if(and(ifNull(greaterOrEquals(result.1, 0), 0), ifNull(greater(length(result.4), result.1), 0)), if(ifNull(greater(length(arrayElement(result.4, plus(result.1, 1))), 0), 0), toString(arrayElement(result.4, plus(result.1, 1))[1]), ''), '')), aggregate_funnel_array_v8(1, 94608000, 'first_touch', 'ordered', array(array('')), [], arraySort(t -> t.1, groupArray(tuple(accurateCastOrNull(metric_events.timestamp, 'Float64'), metric_events.uuid, array(''), arrayFilter(x -> ifNull(notEquals(x, 0), 1), [multiply(1, metric_events.step_0)])))))))[1] AS value,
            mapFromArrays(groupArray(coalesce(toString(metric_events.uuid), '')), groupArray(coalesce(toString(metric_events.session_id), ''))) AS uuid_to_session
     FROM
       (SELECT events.`$group_0` AS entity_id,
               if(ifNull(greater(count(DISTINCT replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', '')), 1), 0), '$multiple', any(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''))) AS variant,
               min(toTimeZone(events.timestamp, 'UTC')) AS first_exposure_time,
               argMin(events.uuid, toTimeZone(events.timestamp, 'UTC')) AS exposure_event_uuid,
               argMin(events.`$session_id`, toTimeZone(events.timestamp, 'UTC')) AS exposure_session_id
        FROM events
        WHERE and(equals(events.team_id, 99999), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('today', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-01-15 12:00:00.000000', 6, 'UTC')), in(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''), ['control', 'test']), equals(events.event, '$feature_flag_called'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag'), ''), 'null'), '^"|"$', ''), 'test-experiment'), 0))
        GROUP BY entity_id) AS exposures
     LEFT JOIN
       (SELECT toTimeZone(events.timestamp, 'UTC') AS timestamp,
               events.`$group_0` AS entity_id,
               events.event AS event,
               events.uuid AS uuid,
               events.properties AS properties,
               nullIf(nullIf(events.`$session_id`, ''), 'null') AS session_id,
               if(equals(events.event, 'purchase'), 1, 0) AS step_0
        FROM events
        WHERE and(equals(events.team_id, 99999), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('today', 6, 'UTC')), less(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-01-15 12:00:00.000000', 6, 'UTC')), equals(events.event, 'purchase'))) AS metric_events ON and(equals(toString(exposures.entity_id), toString(metric_events.entity_id)), greaterOrEquals(metric_events.timestamp, exposures.first_exposure_time))
     GROUP BY exposures.variant,
              exposures.entity_id) AS metric_events
  GROUP BY metric_events.variant
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=600,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=0,
                     max_ast_elements=4000000,
                     max_expanded_ast_elements=4000000,
                     max_bytes_before_external_group_by=0,
                     allow_experimental_analyzer=1,
                     transform_null_in=1,
                     optimize_min_equality_disjunction_chain_length=4294967295,
                     allow_experimental_join_condition=1
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_group_aggregation_funnel_metric_0_disable_new_query_builder
  '''
  SELECT metric_events.variant AS variant,
         count(metric_events.entity_id) AS num_users,
         countIf(ifNull(equals((metric_events.value).1, 0), 0)) AS total_sum,
         countIf(ifNull(equals((metric_events.value).1, 0), 0)) AS total_sum_of_squares,
         tuple(countIf(ifNull(greaterOrEquals((metric_events.value).1, 0), 0))) AS step_counts,
         tuple(groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(0, 1)), isNull((metric_events.value).1)
                                                                                                                                                                                                                                                                                                                                                                    and isNull(minus(0, 1)))), groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(1, 1)), isNull((metric_events.value).1)
and isNull(minus(1, 1))))) AS steps_event_data
  FROM
    (SELECT exposures.variant AS variant,
            exposures.entity_id AS entity_id,
            any(exposures.exposure_event_uuid) AS exposure_event_uuid,
            any(exposures.exposure_session_id) AS exposure_session_id,
            arraySort(x -> minus(0, x.1), arrayMap(result -> tuple(result.1, if(and(ifNull(greaterOrEquals(result.1, 0), 0), ifNull(greater(length(result.4), result.1), 0)), if(ifNull(greater(length(arrayElement(result.4, plus(result.1, 1))), 0), 0), toString(arrayElement(result.4, plus(result.1, 1))[1]), ''), '')), aggregate_funnel_array_v8(1, 94608000, 'first_touch', 'ordered', array(array('')), [], arraySort(t -> t.1, groupArray(tuple(accurateCastOrNull(metric_events.timestamp, 'Float64'), metric_events.uuid, array(''), arrayFilter(x -> ifNull(notEquals(x, 0), 1), [multiply(1, metric_events.step_0)])))))))[1] AS value,
            mapFromArrays(groupArray(coalesce(toString(metric_events.uuid), '')), groupArray(coalesce(toString(metric_events.session_id), ''))) AS uuid_to_session
     FROM
       (SELECT events.`$group_0` AS entity_id,
               if(ifNull(greater(count(DISTINCT replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', '')), 1), 0), '$multiple', any(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''))) AS variant,
               min(toTimeZone(events.timestamp, 'UTC')) AS first_exposure_time,
               argMin(events.uuid, toTimeZone(events.timestamp, 'UTC')) AS exposure_event_uuid,
               argMin(events.`$session_id`, toTimeZone(events.timestamp, 'UTC')) AS exposure_session_id
        FROM events
        WHERE and(equals(events.team_id, 99999), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('today', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-01-15 12:00:00.000000', 6, 'UTC')), in(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''), ['control', 'test']), equals(events.event, '$feature_flag_called'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag'), ''), 'null'), '^"|"$', ''), 'test-experiment'), 0))
        GROUP BY entity_id) AS exposures
     LEFT JOIN
       (SELECT toTimeZone(events.timestamp, 'UTC') AS timestamp,
               events.`$group_0` AS entity_id,
               events.event AS event,
               events.uuid AS uuid,
               events.properties AS properties,
               nullIf(nullIf(events.`$session_id`, ''), 'null') AS session_id,
               if(equals(events.event, 'purchase'), 1, 0) AS step_0
        FROM events
        WHERE and(equals(events.team_id, 99999), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('today', 6, 'UTC')), less(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-01-15 12:00:00.000000', 6, 'UTC')), equals(events.event, 'purchase'))) AS metric_events ON and(equals(toString(exposures.entity_id), toString(metric_events.entity_id)), greaterOrEquals(metric_events.timestamp, exposures.first_exposure_time))
     GROUP BY exposures.variant,
              exposures.entity_id) AS metric_events
  GROUP BY metric_events.variant
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=600,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=0,
                     max_ast_elements=4000000,
                     max_expanded_ast_elements=4000000,
                     max_bytes_before_external_group_by=0,
                     allow_experimental_analyzer=1,
                     transform_null_in=1,
                     optimize_min_equality_disjunction_chain_length=4294967295,
                     allow_experimental_join_condition=1
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_group_aggregation_funnel_metric_1_enable_new_query_builder
  '''
  SELECT entity_metrics.variant AS variant,
         count(entity_metrics.entity_id) AS num_users,
         countIf(ifNull(equals((entity_metrics.value).1, 1), 0)) AS total_sum,
         countIf(ifNull(equals((entity_metrics.value).1, 1), 0)) AS total_sum_of_squares,
         tuple(countIf(ifNull(greaterOrEquals((entity_metrics.value).1, 1), 0))) AS step_counts,
         tuple(groupArraySampleIf(100)(if(ifNull(notEquals((entity_metrics.value).2, ''), 1), tuple(toString(entity_metrics.entity_id), entity_metrics.uuid_to_session[(entity_metrics.value).2], (entity_metrics.value).2), tuple(toString(entity_metrics.entity_id), toString(entity_metrics.exposure_session_id), toString(entity_metrics.exposure_event_uuid))), ifNull(equals((entity_metrics.value).1, minus(1, 1)), isNull((entity_metrics.value).1)
                                                                                                                                                                                                                                                                                                                                                                            and isNull(minus(1, 1)))), groupArraySampleIf(100)(if(ifNull(notEquals((entity_metrics.value).2, ''), 1), tuple(toString(entity_metrics.entity_id), entity_metrics.uuid_to_session[(entity_metrics.value).2], (entity_metrics.value).2), tuple(toString(entity_metrics.entity_id), toString(entity_metrics.exposure_session_id), toString(entity_metrics.exposure_event_uuid))), ifNull(equals((entity_metrics.value).1, minus(2, 1)), isNull((entity_metrics.value).1)
and isNull(minus(2, 1))))) AS steps_event_data
  FROM
    (SELECT metric_events.entity_id AS entity_id,
            if(ifNull(greater(uniqExactIf(metric_events.variant, ifNull(equals(metric_events.step_0, 1), 0)), 1), 0), '$multiple', anyIf(metric_events.variant, ifNull(equals(metric_events.step_0, 1), 0))) AS variant,
            argMinIf(metric_events.uuid, metric_events.timestamp, ifNull(equals(metric_events.step_0, 1), 0)) AS exposure_event_uuid,
            argMinIf(metric_events.session_id, metric_events.timestamp, ifNull(equals(metric_events.step_0, 1), 0)) AS exposure_session_id,
            arraySort(x -> minus(0, x.1), arrayMap(result -> tuple(result.1, if(and(ifNull(greaterOrEquals(result.1, 0), 0), ifNull(greater(length(result.4), result.1), 0)), if(ifNull(greater(length(arrayElement(result.4, plus(result.1, 1))), 0), 0), toString(arrayElement(result.4, plus(result.1, 1))[1]), ''), '')), aggregate_funnel_array_v8(2, 94608000, 'first_touch', 'ordered', array(array('')), [], arraySort(t -> t.1, groupArray(tuple(accurateCastOrNull(metric_events.timestamp, 'Float64'), metric_events.uuid, array(''), arrayFilter(x -> ifNull(notEquals(x, 0), 1), [multiply(1, metric_events.step_0), multiply(2, metric_events.step_1)])))))))[1] AS value,
            mapFromArrays(groupArray(coalesce(toString(metric_events.uuid), '')), groupArray(coalesce(toString(metric_events.session_id), ''))) AS uuid_to_session
     FROM
       (SELECT events.`$group_0` AS entity_id,
               replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', '') AS variant,
               toTimeZone(events.timestamp, 'UTC') AS timestamp,
               events.uuid AS uuid,
               nullIf(nullIf(events.`$session_id`, ''), 'null') AS session_id,
               and(greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2020-01-01 12:00:00', 'UTC'))), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2020-01-15 12:00:00', 'UTC'))), and(equals(events.event, '$feature_flag_called'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag'), ''), 'null'), '^"|"$', ''), 'test-experiment'), 0)), in(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''), ['control', 'test'])) AS step_0,
               if(equals(events.event, 'purchase'), 1, 0) AS step_1
        FROM events
        WHERE and(equals(events.team_id, 99999), or(and(greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2020-01-01 12:00:00', 'UTC'))), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2020-01-15 12:00:00', 'UTC'))), and(equals(events.event, '$feature_flag_called'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag'), ''), 'null'), '^"|"$', ''), 'test-experiment'), 0)), in(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''), ['control', 'test'])), and(greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2020-01-01 12:00:00', 'UTC'))), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2020-01-15 12:00:00', 'UTC'))), equals(events.event, 'purchase'))))) AS metric_events
     GROUP BY metric_events.entity_id) AS entity_metrics
  WHERE notEmpty(variant)
  GROUP BY entity_metrics.variant
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=600,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=0,
                     max_ast_elements=4000000,
                     max_expanded_ast_elements=4000000,
                     max_bytes_before_external_group_by=0,
                     allow_experimental_analyzer=1,
                     transform_null_in=1,
                     optimize_min_equality_disjunction_chain_length=4294967295,
                     allow_experimental_join_condition=1
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_00_person_id_override_properties_on_events_no_filter_disable_new_query_builder
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_0_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_00_person_id_override_properties_on_events_no_filter_disable_new_query_builder.1
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_1_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_00_person_id_override_properties_on_events_no_filter_disable_new_query_builder.10
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_10_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_00_person_id_override_properties_on_events_no_filter_disable_new_query_builder.11
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_11_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_00_person_id_override_properties_on_events_no_filter_disable_new_query_builder.12
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_12_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_00_person_id_override_properties_on_events_no_filter_disable_new_query_builder.13
  '''
  SELECT metric_events.variant AS variant,
         count(metric_events.entity_id) AS num_users,
         countIf(ifNull(equals((metric_events.value).1, 0), 0)) AS total_sum,
         countIf(ifNull(equals((metric_events.value).1, 0), 0)) AS total_sum_of_squares,
         tuple(countIf(ifNull(greaterOrEquals((metric_events.value).1, 0), 0))) AS step_counts,
         tuple(groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(0, 1)), isNull((metric_events.value).1)
                                                                                                                                                                                                                                                                                                                                                                    and isNull(minus(0, 1)))), groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(1, 1)), isNull((metric_events.value).1)
and isNull(minus(1, 1))))) AS steps_event_data
  FROM
    (SELECT exposures.variant AS variant,
            exposures.entity_id AS entity_id,
            any(exposures.exposure_event_uuid) AS exposure_event_uuid,
            any(exposures.exposure_session_id) AS exposure_session_id,
            arraySort(x -> minus(0, x.1), arrayMap(result -> tuple(result.1, if(and(ifNull(greaterOrEquals(result.1, 0), 0), ifNull(greater(length(result.4), result.1), 0)), if(ifNull(greater(length(arrayElement(result.4, plus(result.1, 1))), 0), 0), toString(arrayElement(result.4, plus(result.1, 1))[1]), ''), '')), aggregate_funnel_array_v8(1, 94608000, 'first_touch', 'ordered', array(array('')), [], arraySort(t -> t.1, groupArray(tuple(accurateCastOrNull(metric_events.timestamp, 'Float64'), metric_events.uuid, array(''), arrayFilter(x -> ifNull(notEquals(x, 0), 1), [multiply(1, metric_events.step_0)])))))))[1] AS value,
            mapFromArrays(groupArray(coalesce(toString(metric_events.uuid), '')), groupArray(coalesce(toString(metric_events.session_id), ''))) AS uuid_to_session
     FROM
       (SELECT if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id) AS entity_id,
               if(ifNull(greater(count(DISTINCT replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', '')), 1), 0), '$multiple', any(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''))) AS variant,
               min(toTimeZone(events.timestamp, 'UTC')) AS first_exposure_time,
               argMin(events.uuid, toTimeZone(events.timestamp, 'UTC')) AS exposure_event_uuid,
               argMin(events.`$session_id`, toTimeZone(events.timestamp, 'UTC')) AS exposure_session_id
        FROM events
        LEFT OUTER JOIN
          (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                  person_distinct_id_overrides.distinct_id AS distinct_id
           FROM person_distinct_id_overrides
           WHERE equals(person_distinct_id_overrides.team_id, 99999)
           GROUP BY person_distinct_id_overrides.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id)
        WHERE and(equals(events.team_id, 99999), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('explicit_redacted_timestamp', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('explicit_redacted_timestamp', 6, 'UTC')), in(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''), ['control', 'test']), ifNull(notILike(toString(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.person_properties, 'email'), ''), 'null'), '^"|"$', '')), '%@posthog.com%'), 1), equals(events.event, '$feature_flag_called'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag'), ''), 'null'), '^"|"$', ''), 'test-experiment'), 0))
        GROUP BY entity_id) AS exposures
     LEFT JOIN
       (SELECT toTimeZone(events.timestamp, 'UTC') AS timestamp,
               if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id) AS entity_id,
               events.event AS event,
               events.uuid AS uuid,
               events.properties AS properties,
               nullIf(nullIf(events.`$session_id`, ''), 'null') AS session_id,
               if(equals(events.event, 'purchase'), 1, 0) AS step_0
        FROM events
        LEFT OUTER JOIN
          (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                  person_distinct_id_overrides.distinct_id AS distinct_id
           FROM person_distinct_id_overrides
           WHERE equals(person_distinct_id_overrides.team_id, 99999)
           GROUP BY person_distinct_id_overrides.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id)
        WHERE and(equals(events.team_id, 99999), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('explicit_redacted_timestamp', 6, 'UTC')), less(toTimeZone(events.timestamp, 'UTC'), toDateTime64('explicit_redacted_timestamp', 6, 'UTC')), ifNull(notILike(toString(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.person_properties, 'email'), ''), 'null'), '^"|"$', '')), '%@posthog.com%'), 1), equals(events.event, 'purchase'))) AS metric_events ON and(equals(toString(exposures.entity_id), toString(metric_events.entity_id)), greaterOrEquals(metric_events.timestamp, exposures.first_exposure_time))
     GROUP BY exposures.variant,
              exposures.entity_id) AS metric_events
  GROUP BY metric_events.variant
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=600,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=0,
                     max_ast_elements=4000000,
                     max_expanded_ast_elements=4000000,
                     max_bytes_before_external_group_by=0,
                     allow_experimental_analyzer=1,
                     transform_null_in=1,
                     optimize_min_equality_disjunction_chain_length=4294967295,
                     allow_experimental_join_condition=1
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_00_person_id_override_properties_on_events_no_filter_disable_new_query_builder.2
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_2_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_00_person_id_override_properties_on_events_no_filter_disable_new_query_builder.3
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_3_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_00_person_id_override_properties_on_events_no_filter_disable_new_query_builder.4
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_4_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_00_person_id_override_properties_on_events_no_filter_disable_new_query_builder.5
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_5_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_00_person_id_override_properties_on_events_no_filter_disable_new_query_builder.6
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_6_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_00_person_id_override_properties_on_events_no_filter_disable_new_query_builder.7
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_7_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_00_person_id_override_properties_on_events_no_filter_disable_new_query_builder.8
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_8_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_00_person_id_override_properties_on_events_no_filter_disable_new_query_builder.9
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_9_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_01_person_id_override_properties_on_events_no_filter_enable_new_query_builder
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_0_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_01_person_id_override_properties_on_events_no_filter_enable_new_query_builder.1
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_1_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_01_person_id_override_properties_on_events_no_filter_enable_new_query_builder.10
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_10_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_01_person_id_override_properties_on_events_no_filter_enable_new_query_builder.11
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_11_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_01_person_id_override_properties_on_events_no_filter_enable_new_query_builder.12
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_12_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_01_person_id_override_properties_on_events_no_filter_enable_new_query_builder.13
  '''
  SELECT entity_metrics.variant AS variant,
         count(entity_metrics.entity_id) AS num_users,
         countIf(ifNull(equals((entity_metrics.value).1, 1), 0)) AS total_sum,
         countIf(ifNull(equals((entity_metrics.value).1, 1), 0)) AS total_sum_of_squares,
         tuple(countIf(ifNull(greaterOrEquals((entity_metrics.value).1, 1), 0))) AS step_counts,
         tuple(groupArraySampleIf(100)(if(ifNull(notEquals((entity_metrics.value).2, ''), 1), tuple(toString(entity_metrics.entity_id), entity_metrics.uuid_to_session[(entity_metrics.value).2], (entity_metrics.value).2), tuple(toString(entity_metrics.entity_id), toString(entity_metrics.exposure_session_id), toString(entity_metrics.exposure_event_uuid))), ifNull(equals((entity_metrics.value).1, minus(1, 1)), isNull((entity_metrics.value).1)
                                                                                                                                                                                                                                                                                                                                                                            and isNull(minus(1, 1)))), groupArraySampleIf(100)(if(ifNull(notEquals((entity_metrics.value).2, ''), 1), tuple(toString(entity_metrics.entity_id), entity_metrics.uuid_to_session[(entity_metrics.value).2], (entity_metrics.value).2), tuple(toString(entity_metrics.entity_id), toString(entity_metrics.exposure_session_id), toString(entity_metrics.exposure_event_uuid))), ifNull(equals((entity_metrics.value).1, minus(2, 1)), isNull((entity_metrics.value).1)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    and isNull(minus(2, 1))))) AS steps_event_data
  FROM
    (SELECT metric_events.entity_id AS entity_id,
            if(ifNull(greater(uniqExactIf(metric_events.variant, ifNull(equals(metric_events.step_0, 1), 0)), 1), 0), '$multiple', anyIf(metric_events.variant, ifNull(equals(metric_events.step_0, 1), 0))) AS variant,
            argMinIf(metric_events.uuid, metric_events.timestamp, ifNull(equals(metric_events.step_0, 1), 0)) AS exposure_event_uuid,
            argMinIf(metric_events.session_id, metric_events.timestamp, ifNull(equals(metric_events.step_0, 1), 0)) AS exposure_session_id,
            arraySort(x -> minus(0, x.1), arrayMap(result -> tuple(result.1, if(and(ifNull(greaterOrEquals(result.1, 0), 0), ifNull(greater(length(result.4), result.1), 0)), if(ifNull(greater(length(arrayElement(result.4, plus(result.1, 1))), 0), 0), toString(arrayElement(result.4, plus(result.1, 1))[1]), ''), '')), aggregate_funnel_array_v8(2, 94608000, 'first_touch', 'ordered', array(array('')), [], arraySort(t -> t.1, groupArray(tuple(accurateCastOrNull(metric_events.timestamp, 'Float64'), metric_events.uuid, array(''), arrayFilter(x -> ifNull(notEquals(x, 0), 1), [multiply(1, metric_events.step_0), multiply(2, metric_events.step_1)])))))))[1] AS value,
            mapFromArrays(groupArray(coalesce(toString(metric_events.uuid), '')), groupArray(coalesce(toString(metric_events.session_id), ''))) AS uuid_to_session
     FROM
       (SELECT if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id) AS entity_id,
               replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', '') AS variant,
               toTimeZone(events.timestamp, 'UTC') AS timestamp,
               events.uuid AS uuid,
               nullIf(nullIf(events.`$session_id`, ''), 'null') AS session_id,
               and(greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2020-01-01 00:00:00', 'UTC'))), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2020-01-31 00:00:00', 'UTC'))), and(equals(events.event, '$feature_flag_called'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag'), ''), 'null'), '^"|"$', ''), 'test-experiment'), 0)), ifNull(notILike(toString(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.person_properties, 'email'), ''), 'null'), '^"|"$', '')), '%@posthog.com%'), 1), in(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''), ['control', 'test'])) AS step_0,
               if(equals(events.event, 'purchase'), 1, 0) AS step_1
        FROM events
        LEFT OUTER JOIN
          (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                  person_distinct_id_overrides.distinct_id AS distinct_id
           FROM person_distinct_id_overrides
           WHERE equals(person_distinct_id_overrides.team_id, 99999)
           GROUP BY person_distinct_id_overrides.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id)
        WHERE and(equals(events.team_id, 99999), or(and(greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2020-01-01 00:00:00', 'UTC'))), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2020-01-31 00:00:00', 'UTC'))), and(equals(events.event, '$feature_flag_called'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag'), ''), 'null'), '^"|"$', ''), 'test-experiment'), 0)), ifNull(notILike(toString(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.person_properties, 'email'), ''), 'null'), '^"|"$', '')), '%@posthog.com%'), 1), in(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''), ['control', 'test'])), and(greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2020-01-01 00:00:00', 'UTC'))), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2020-01-31 00:00:00', 'UTC'))), equals(events.event, 'purchase'))))) AS metric_events
     GROUP BY metric_events.entity_id) AS entity_metrics
  WHERE notEmpty(variant)
  GROUP BY entity_metrics.variant
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=600,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=0,
                     max_ast_elements=4000000,
                     max_expanded_ast_elements=4000000,
                     max_bytes_before_external_group_by=0,
                     allow_experimental_analyzer=1,
                     transform_null_in=1,
                     optimize_min_equality_disjunction_chain_length=4294967295,
                     allow_experimental_join_condition=1
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_01_person_id_override_properties_on_events_no_filter_enable_new_query_builder.2
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_2_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_01_person_id_override_properties_on_events_no_filter_enable_new_query_builder.3
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_3_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_01_person_id_override_properties_on_events_no_filter_enable_new_query_builder.4
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_4_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_01_person_id_override_properties_on_events_no_filter_enable_new_query_builder.5
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_5_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_01_person_id_override_properties_on_events_no_filter_enable_new_query_builder.6
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_6_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_01_person_id_override_properties_on_events_no_filter_enable_new_query_builder.7
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_7_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_01_person_id_override_properties_on_events_no_filter_enable_new_query_builder.8
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_8_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_01_person_id_override_properties_on_events_no_filter_enable_new_query_builder.9
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_9_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_02_person_id_override_properties_on_events_filter_earlierevent_disable_new_query_builder
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_0_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_02_person_id_override_properties_on_events_filter_earlierevent_disable_new_query_builder.1
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_1_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_02_person_id_override_properties_on_events_filter_earlierevent_disable_new_query_builder.10
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_10_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_02_person_id_override_properties_on_events_filter_earlierevent_disable_new_query_builder.11
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_11_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_02_person_id_override_properties_on_events_filter_earlierevent_disable_new_query_builder.12
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_12_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_02_person_id_override_properties_on_events_filter_earlierevent_disable_new_query_builder.13
  '''
  SELECT metric_events.variant AS variant,
         count(metric_events.entity_id) AS num_users,
         countIf(ifNull(equals((metric_events.value).1, 0), 0)) AS total_sum,
         countIf(ifNull(equals((metric_events.value).1, 0), 0)) AS total_sum_of_squares,
         tuple(countIf(ifNull(greaterOrEquals((metric_events.value).1, 0), 0))) AS step_counts,
         tuple(groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(0, 1)), isNull((metric_events.value).1)
                                                                                                                                                                                                                                                                                                                                                                    and isNull(minus(0, 1)))), groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(1, 1)), isNull((metric_events.value).1)
and isNull(minus(1, 1))))) AS steps_event_data
  FROM
    (SELECT exposures.variant AS variant,
            exposures.entity_id AS entity_id,
            any(exposures.exposure_event_uuid) AS exposure_event_uuid,
            any(exposures.exposure_session_id) AS exposure_session_id,
            arraySort(x -> minus(0, x.1), arrayMap(result -> tuple(result.1, if(and(ifNull(greaterOrEquals(result.1, 0), 0), ifNull(greater(length(result.4), result.1), 0)), if(ifNull(greater(length(arrayElement(result.4, plus(result.1, 1))), 0), 0), toString(arrayElement(result.4, plus(result.1, 1))[1]), ''), '')), aggregate_funnel_array_v8(1, 94608000, 'first_touch', 'ordered', array(array('')), [], arraySort(t -> t.1, groupArray(tuple(accurateCastOrNull(metric_events.timestamp, 'Float64'), metric_events.uuid, array(''), arrayFilter(x -> ifNull(notEquals(x, 0), 1), [multiply(1, metric_events.step_0)])))))))[1] AS value,
            mapFromArrays(groupArray(coalesce(toString(metric_events.uuid), '')), groupArray(coalesce(toString(metric_events.session_id), ''))) AS uuid_to_session
     FROM
       (SELECT if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id) AS entity_id,
               if(ifNull(greater(count(DISTINCT replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', '')), 1), 0), '$multiple', any(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''))) AS variant,
               min(toTimeZone(events.timestamp, 'UTC')) AS first_exposure_time,
               argMin(events.uuid, toTimeZone(events.timestamp, 'UTC')) AS exposure_event_uuid,
               argMin(events.`$session_id`, toTimeZone(events.timestamp, 'UTC')) AS exposure_session_id
        FROM events
        LEFT OUTER JOIN
          (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                  person_distinct_id_overrides.distinct_id AS distinct_id
           FROM person_distinct_id_overrides
           WHERE equals(person_distinct_id_overrides.team_id, 99999)
           GROUP BY person_distinct_id_overrides.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id)
        WHERE and(equals(events.team_id, 99999), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('explicit_redacted_timestamp', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('explicit_redacted_timestamp', 6, 'UTC')), in(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''), ['control', 'test']), ifNull(notILike(toString(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.person_properties, 'email'), ''), 'null'), '^"|"$', '')), '%@earlierevent.com%'), 1), equals(events.event, '$feature_flag_called'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag'), ''), 'null'), '^"|"$', ''), 'test-experiment'), 0))
        GROUP BY entity_id) AS exposures
     LEFT JOIN
       (SELECT toTimeZone(events.timestamp, 'UTC') AS timestamp,
               if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id) AS entity_id,
               events.event AS event,
               events.uuid AS uuid,
               events.properties AS properties,
               nullIf(nullIf(events.`$session_id`, ''), 'null') AS session_id,
               if(equals(events.event, 'purchase'), 1, 0) AS step_0
        FROM events
        LEFT OUTER JOIN
          (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                  person_distinct_id_overrides.distinct_id AS distinct_id
           FROM person_distinct_id_overrides
           WHERE equals(person_distinct_id_overrides.team_id, 99999)
           GROUP BY person_distinct_id_overrides.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id)
        WHERE and(equals(events.team_id, 99999), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('explicit_redacted_timestamp', 6, 'UTC')), less(toTimeZone(events.timestamp, 'UTC'), toDateTime64('explicit_redacted_timestamp', 6, 'UTC')), ifNull(notILike(toString(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.person_properties, 'email'), ''), 'null'), '^"|"$', '')), '%@earlierevent.com%'), 1), equals(events.event, 'purchase'))) AS metric_events ON and(equals(toString(exposures.entity_id), toString(metric_events.entity_id)), greaterOrEquals(metric_events.timestamp, exposures.first_exposure_time))
     GROUP BY exposures.variant,
              exposures.entity_id) AS metric_events
  GROUP BY metric_events.variant
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=600,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=0,
                     max_ast_elements=4000000,
                     max_expanded_ast_elements=4000000,
                     max_bytes_before_external_group_by=0,
                     allow_experimental_analyzer=1,
                     transform_null_in=1,
                     optimize_min_equality_disjunction_chain_length=4294967295,
                     allow_experimental_join_condition=1
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_02_person_id_override_properties_on_events_filter_earlierevent_disable_new_query_builder.2
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_2_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_02_person_id_override_properties_on_events_filter_earlierevent_disable_new_query_builder.3
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_3_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_02_person_id_override_properties_on_events_filter_earlierevent_disable_new_query_builder.4
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_4_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_02_person_id_override_properties_on_events_filter_earlierevent_disable_new_query_builder.5
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_5_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_02_person_id_override_properties_on_events_filter_earlierevent_disable_new_query_builder.6
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_6_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_02_person_id_override_properties_on_events_filter_earlierevent_disable_new_query_builder.7
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_7_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_02_person_id_override_properties_on_events_filter_earlierevent_disable_new_query_builder.8
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_8_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_02_person_id_override_properties_on_events_filter_earlierevent_disable_new_query_builder.9
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_9_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_03_person_id_override_properties_on_events_filter_earlierevent_enable_new_query_builder
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_0_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_03_person_id_override_properties_on_events_filter_earlierevent_enable_new_query_builder.1
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_1_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_03_person_id_override_properties_on_events_filter_earlierevent_enable_new_query_builder.10
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_10_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_03_person_id_override_properties_on_events_filter_earlierevent_enable_new_query_builder.11
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_11_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_03_person_id_override_properties_on_events_filter_earlierevent_enable_new_query_builder.12
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_12_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_03_person_id_override_properties_on_events_filter_earlierevent_enable_new_query_builder.13
  '''
  SELECT entity_metrics.variant AS variant,
         count(entity_metrics.entity_id) AS num_users,
         countIf(ifNull(equals((entity_metrics.value).1, 1), 0)) AS total_sum,
         countIf(ifNull(equals((entity_metrics.value).1, 1), 0)) AS total_sum_of_squares,
         tuple(countIf(ifNull(greaterOrEquals((entity_metrics.value).1, 1), 0))) AS step_counts,
         tuple(groupArraySampleIf(100)(if(ifNull(notEquals((entity_metrics.value).2, ''), 1), tuple(toString(entity_metrics.entity_id), entity_metrics.uuid_to_session[(entity_metrics.value).2], (entity_metrics.value).2), tuple(toString(entity_metrics.entity_id), toString(entity_metrics.exposure_session_id), toString(entity_metrics.exposure_event_uuid))), ifNull(equals((entity_metrics.value).1, minus(1, 1)), isNull((entity_metrics.value).1)
                                                                                                                                                                                                                                                                                                                                                                            and isNull(minus(1, 1)))), groupArraySampleIf(100)(if(ifNull(notEquals((entity_metrics.value).2, ''), 1), tuple(toString(entity_metrics.entity_id), entity_metrics.uuid_to_session[(entity_metrics.value).2], (entity_metrics.value).2), tuple(toString(entity_metrics.entity_id), toString(entity_metrics.exposure_session_id), toString(entity_metrics.exposure_event_uuid))), ifNull(equals((entity_metrics.value).1, minus(2, 1)), isNull((entity_metrics.value).1)
and isNull(minus(2, 1))))) AS steps_event_data
  FROM
    (SELECT metric_events.entity_id AS entity_id,
            if(ifNull(greater(uniqExactIf(metric_events.variant, ifNull(equals(metric_events.step_0, 1), 0)), 1), 0), '$multiple', anyIf(metric_events.variant, ifNull(equals(metric_events.step_0, 1), 0))) AS variant,
            argMinIf(metric_events.uuid, metric_events.timestamp, ifNull(equals(metric_events.step_0, 1), 0)) AS exposure_event_uuid,
            argMinIf(metric_events.session_id, metric_events.timestamp, ifNull(equals(metric_events.step_0, 1), 0)) AS exposure_session_id,
            arraySort(x -> minus(0, x.1), arrayMap(result -> tuple(result.1, if(and(ifNull(greaterOrEquals(result.1, 0), 0), ifNull(greater(length(result.4), result.1), 0)), if(ifNull(greater(length(arrayElement(result.4, plus(result.1, 1))), 0), 0), toString(arrayElement(result.4, plus(result.1, 1))[1]), ''), '')), aggregate_funnel_array_v8(2, 94608000, 'first_touch', 'ordered', array(array('')), [], arraySort(t -> t.1, groupArray(tuple(accurateCastOrNull(metric_events.timestamp, 'Float64'), metric_events.uuid, array(''), arrayFilter(x -> ifNull(notEquals(x, 0), 1), [multiply(1, metric_events.step_0), multiply(2, metric_events.step_1)])))))))[1] AS value,
            mapFromArrays(groupArray(coalesce(toString(metric_events.uuid), '')), groupArray(coalesce(toString(metric_events.session_id), ''))) AS uuid_to_session
     FROM
       (SELECT if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id) AS entity_id,
               replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', '') AS variant,
               toTimeZone(events.timestamp, 'UTC') AS timestamp,
               events.uuid AS uuid,
               nullIf(nullIf(events.`$session_id`, ''), 'null') AS session_id,
               and(greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2020-01-01 00:00:00', 'UTC'))), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2020-01-31 00:00:00', 'UTC'))), and(equals(events.event, '$feature_flag_called'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag'), ''), 'null'), '^"|"$', ''), 'test-experiment'), 0)), ifNull(notILike(toString(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.person_properties, 'email'), ''), 'null'), '^"|"$', '')), '%@earlierevent.com%'), 1), in(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''), ['control', 'test'])) AS step_0,
               if(equals(events.event, 'purchase'), 1, 0) AS step_1
        FROM events
        LEFT OUTER JOIN
          (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                  person_distinct_id_overrides.distinct_id AS distinct_id
           FROM person_distinct_id_overrides
           WHERE equals(person_distinct_id_overrides.team_id, 99999)
           GROUP BY person_distinct_id_overrides.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id)
        WHERE and(equals(events.team_id, 99999), or(and(greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2020-01-01 00:00:00', 'UTC'))), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2020-01-31 00:00:00', 'UTC'))), and(equals(events.event, '$feature_flag_called'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag'), ''), 'null'), '^"|"$', ''), 'test-experiment'), 0)), ifNull(notILike(toString(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.person_properties, 'email'), ''), 'null'), '^"|"$', '')), '%@earlierevent.com%'), 1), in(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''), ['control', 'test'])), and(greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2020-01-01 00:00:00', 'UTC'))), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2020-01-31 00:00:00', 'UTC'))), equals(events.event, 'purchase'))))) AS metric_events
     GROUP BY metric_events.entity_id) AS entity_metrics
  WHERE notEmpty(variant)
  GROUP BY entity_metrics.variant
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=600,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=0,
                     max_ast_elements=4000000,
                     max_expanded_ast_elements=4000000,
                     max_bytes_before_external_group_by=0,
                     allow_experimental_analyzer=1,
                     transform_null_in=1,
                     optimize_min_equality_disjunction_chain_length=4294967295,
                     allow_experimental_join_condition=1
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_03_person_id_override_properties_on_events_filter_earlierevent_enable_new_query_builder.2
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_2_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_03_person_id_override_properties_on_events_filter_earlierevent_enable_new_query_builder.3
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_3_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_03_person_id_override_properties_on_events_filter_earlierevent_enable_new_query_builder.4
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_4_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_03_person_id_override_properties_on_events_filter_earlierevent_enable_new_query_builder.5
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_5_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_03_person_id_override_properties_on_events_filter_earlierevent_enable_new_query_builder.6
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_6_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_03_person_id_override_properties_on_events_filter_earlierevent_enable_new_query_builder.7
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_7_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_03_person_id_override_properties_on_events_filter_earlierevent_enable_new_query_builder.8
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_8_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_03_person_id_override_properties_on_events_filter_earlierevent_enable_new_query_builder.9
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_9_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_04_person_id_override_properties_on_events_filter_laterevent_disable_new_query_builder
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_0_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_04_person_id_override_properties_on_events_filter_laterevent_disable_new_query_builder.1
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_1_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_04_person_id_override_properties_on_events_filter_laterevent_disable_new_query_builder.10
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_10_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_04_person_id_override_properties_on_events_filter_laterevent_disable_new_query_builder.11
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_11_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_04_person_id_override_properties_on_events_filter_laterevent_disable_new_query_builder.12
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_12_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_04_person_id_override_properties_on_events_filter_laterevent_disable_new_query_builder.13
  '''
  SELECT metric_events.variant AS variant,
         count(metric_events.entity_id) AS num_users,
         countIf(ifNull(equals((metric_events.value).1, 0), 0)) AS total_sum,
         countIf(ifNull(equals((metric_events.value).1, 0), 0)) AS total_sum_of_squares,
         tuple(countIf(ifNull(greaterOrEquals((metric_events.value).1, 0), 0))) AS step_counts,
         tuple(groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(0, 1)), isNull((metric_events.value).1)
                                                                                                                                                                                                                                                                                                                                                                    and isNull(minus(0, 1)))), groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(1, 1)), isNull((metric_events.value).1)
and isNull(minus(1, 1))))) AS steps_event_data
  FROM
    (SELECT exposures.variant AS variant,
            exposures.entity_id AS entity_id,
            any(exposures.exposure_event_uuid) AS exposure_event_uuid,
            any(exposures.exposure_session_id) AS exposure_session_id,
            arraySort(x -> minus(0, x.1), arrayMap(result -> tuple(result.1, if(and(ifNull(greaterOrEquals(result.1, 0), 0), ifNull(greater(length(result.4), result.1), 0)), if(ifNull(greater(length(arrayElement(result.4, plus(result.1, 1))), 0), 0), toString(arrayElement(result.4, plus(result.1, 1))[1]), ''), '')), aggregate_funnel_array_v8(1, 94608000, 'first_touch', 'ordered', array(array('')), [], arraySort(t -> t.1, groupArray(tuple(accurateCastOrNull(metric_events.timestamp, 'Float64'), metric_events.uuid, array(''), arrayFilter(x -> ifNull(notEquals(x, 0), 1), [multiply(1, metric_events.step_0)])))))))[1] AS value,
            mapFromArrays(groupArray(coalesce(toString(metric_events.uuid), '')), groupArray(coalesce(toString(metric_events.session_id), ''))) AS uuid_to_session
     FROM
       (SELECT if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id) AS entity_id,
               if(ifNull(greater(count(DISTINCT replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', '')), 1), 0), '$multiple', any(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''))) AS variant,
               min(toTimeZone(events.timestamp, 'UTC')) AS first_exposure_time,
               argMin(events.uuid, toTimeZone(events.timestamp, 'UTC')) AS exposure_event_uuid,
               argMin(events.`$session_id`, toTimeZone(events.timestamp, 'UTC')) AS exposure_session_id
        FROM events
        LEFT OUTER JOIN
          (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                  person_distinct_id_overrides.distinct_id AS distinct_id
           FROM person_distinct_id_overrides
           WHERE equals(person_distinct_id_overrides.team_id, 99999)
           GROUP BY person_distinct_id_overrides.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id)
        WHERE and(equals(events.team_id, 99999), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('explicit_redacted_timestamp', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('explicit_redacted_timestamp', 6, 'UTC')), in(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''), ['control', 'test']), ifNull(notILike(toString(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.person_properties, 'email'), ''), 'null'), '^"|"$', '')), '%@laterevent.com%'), 1), equals(events.event, '$feature_flag_called'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag'), ''), 'null'), '^"|"$', ''), 'test-experiment'), 0))
        GROUP BY entity_id) AS exposures
     LEFT JOIN
       (SELECT toTimeZone(events.timestamp, 'UTC') AS timestamp,
               if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id) AS entity_id,
               events.event AS event,
               events.uuid AS uuid,
               events.properties AS properties,
               nullIf(nullIf(events.`$session_id`, ''), 'null') AS session_id,
               if(equals(events.event, 'purchase'), 1, 0) AS step_0
        FROM events
        LEFT OUTER JOIN
          (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                  person_distinct_id_overrides.distinct_id AS distinct_id
           FROM person_distinct_id_overrides
           WHERE equals(person_distinct_id_overrides.team_id, 99999)
           GROUP BY person_distinct_id_overrides.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id)
        WHERE and(equals(events.team_id, 99999), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('explicit_redacted_timestamp', 6, 'UTC')), less(toTimeZone(events.timestamp, 'UTC'), toDateTime64('explicit_redacted_timestamp', 6, 'UTC')), ifNull(notILike(toString(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.person_properties, 'email'), ''), 'null'), '^"|"$', '')), '%@laterevent.com%'), 1), equals(events.event, 'purchase'))) AS metric_events ON and(equals(toString(exposures.entity_id), toString(metric_events.entity_id)), greaterOrEquals(metric_events.timestamp, exposures.first_exposure_time))
     GROUP BY exposures.variant,
              exposures.entity_id) AS metric_events
  GROUP BY metric_events.variant
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=600,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=0,
                     max_ast_elements=4000000,
                     max_expanded_ast_elements=4000000,
                     max_bytes_before_external_group_by=0,
                     allow_experimental_analyzer=1,
                     transform_null_in=1,
                     optimize_min_equality_disjunction_chain_length=4294967295,
                     allow_experimental_join_condition=1
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_04_person_id_override_properties_on_events_filter_laterevent_disable_new_query_builder.2
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_2_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_04_person_id_override_properties_on_events_filter_laterevent_disable_new_query_builder.3
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_3_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_04_person_id_override_properties_on_events_filter_laterevent_disable_new_query_builder.4
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_4_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_04_person_id_override_properties_on_events_filter_laterevent_disable_new_query_builder.5
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_5_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_04_person_id_override_properties_on_events_filter_laterevent_disable_new_query_builder.6
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_6_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_04_person_id_override_properties_on_events_filter_laterevent_disable_new_query_builder.7
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_7_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_04_person_id_override_properties_on_events_filter_laterevent_disable_new_query_builder.8
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_8_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_04_person_id_override_properties_on_events_filter_laterevent_disable_new_query_builder.9
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_9_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_05_person_id_override_properties_on_events_filter_laterevent_enable_new_query_builder
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_0_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_05_person_id_override_properties_on_events_filter_laterevent_enable_new_query_builder.1
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_1_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_05_person_id_override_properties_on_events_filter_laterevent_enable_new_query_builder.10
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_10_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_05_person_id_override_properties_on_events_filter_laterevent_enable_new_query_builder.11
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_11_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_05_person_id_override_properties_on_events_filter_laterevent_enable_new_query_builder.12
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_12_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_05_person_id_override_properties_on_events_filter_laterevent_enable_new_query_builder.13
  '''
  SELECT entity_metrics.variant AS variant,
         count(entity_metrics.entity_id) AS num_users,
         countIf(ifNull(equals((entity_metrics.value).1, 1), 0)) AS total_sum,
         countIf(ifNull(equals((entity_metrics.value).1, 1), 0)) AS total_sum_of_squares,
         tuple(countIf(ifNull(greaterOrEquals((entity_metrics.value).1, 1), 0))) AS step_counts,
         tuple(groupArraySampleIf(100)(if(ifNull(notEquals((entity_metrics.value).2, ''), 1), tuple(toString(entity_metrics.entity_id), entity_metrics.uuid_to_session[(entity_metrics.value).2], (entity_metrics.value).2), tuple(toString(entity_metrics.entity_id), toString(entity_metrics.exposure_session_id), toString(entity_metrics.exposure_event_uuid))), ifNull(equals((entity_metrics.value).1, minus(1, 1)), isNull((entity_metrics.value).1)
                                                                                                                                                                                                                                                                                                                                                                            and isNull(minus(1, 1)))), groupArraySampleIf(100)(if(ifNull(notEquals((entity_metrics.value).2, ''), 1), tuple(toString(entity_metrics.entity_id), entity_metrics.uuid_to_session[(entity_metrics.value).2], (entity_metrics.value).2), tuple(toString(entity_metrics.entity_id), toString(entity_metrics.exposure_session_id), toString(entity_metrics.exposure_event_uuid))), ifNull(equals((entity_metrics.value).1, minus(2, 1)), isNull((entity_metrics.value).1)
and isNull(minus(2, 1))))) AS steps_event_data
  FROM
    (SELECT metric_events.entity_id AS entity_id,
            if(ifNull(greater(uniqExactIf(metric_events.variant, ifNull(equals(metric_events.step_0, 1), 0)), 1), 0), '$multiple', anyIf(metric_events.variant, ifNull(equals(metric_events.step_0, 1), 0))) AS variant,
            argMinIf(metric_events.uuid, metric_events.timestamp, ifNull(equals(metric_events.step_0, 1), 0)) AS exposure_event_uuid,
            argMinIf(metric_events.session_id, metric_events.timestamp, ifNull(equals(metric_events.step_0, 1), 0)) AS exposure_session_id,
            arraySort(x -> minus(0, x.1), arrayMap(result -> tuple(result.1, if(and(ifNull(greaterOrEquals(result.1, 0), 0), ifNull(greater(length(result.4), result.1), 0)), if(ifNull(greater(length(arrayElement(result.4, plus(result.1, 1))), 0), 0), toString(arrayElement(result.4, plus(result.1, 1))[1]), ''), '')), aggregate_funnel_array_v8(2, 94608000, 'first_touch', 'ordered', array(array('')), [], arraySort(t -> t.1, groupArray(tuple(accurateCastOrNull(metric_events.timestamp, 'Float64'), metric_events.uuid, array(''), arrayFilter(x -> ifNull(notEquals(x, 0), 1), [multiply(1, metric_events.step_0), multiply(2, metric_events.step_1)])))))))[1] AS value,
            mapFromArrays(groupArray(coalesce(toString(metric_events.uuid), '')), groupArray(coalesce(toString(metric_events.session_id), ''))) AS uuid_to_session
     FROM
       (SELECT if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id) AS entity_id,
               replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', '') AS variant,
               toTimeZone(events.timestamp, 'UTC') AS timestamp,
               events.uuid AS uuid,
               nullIf(nullIf(events.`$session_id`, ''), 'null') AS session_id,
               and(greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2020-01-01 00:00:00', 'UTC'))), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2020-01-31 00:00:00', 'UTC'))), and(equals(events.event, '$feature_flag_called'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag'), ''), 'null'), '^"|"$', ''), 'test-experiment'), 0)), ifNull(notILike(toString(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.person_properties, 'email'), ''), 'null'), '^"|"$', '')), '%@laterevent.com%'), 1), in(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''), ['control', 'test'])) AS step_0,
               if(equals(events.event, 'purchase'), 1, 0) AS step_1
        FROM events
        LEFT OUTER JOIN
          (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                  person_distinct_id_overrides.distinct_id AS distinct_id
           FROM person_distinct_id_overrides
           WHERE equals(person_distinct_id_overrides.team_id, 99999)
           GROUP BY person_distinct_id_overrides.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id)
        WHERE and(equals(events.team_id, 99999), or(and(greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2020-01-01 00:00:00', 'UTC'))), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2020-01-31 00:00:00', 'UTC'))), and(equals(events.event, '$feature_flag_called'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag'), ''), 'null'), '^"|"$', ''), 'test-experiment'), 0)), ifNull(notILike(toString(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.person_properties, 'email'), ''), 'null'), '^"|"$', '')), '%@laterevent.com%'), 1), in(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''), ['control', 'test'])), and(greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2020-01-01 00:00:00', 'UTC'))), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2020-01-31 00:00:00', 'UTC'))), equals(events.event, 'purchase'))))) AS metric_events
     GROUP BY metric_events.entity_id) AS entity_metrics
  WHERE notEmpty(variant)
  GROUP BY entity_metrics.variant
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=600,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=0,
                     max_ast_elements=4000000,
                     max_expanded_ast_elements=4000000,
                     max_bytes_before_external_group_by=0,
                     allow_experimental_analyzer=1,
                     transform_null_in=1,
                     optimize_min_equality_disjunction_chain_length=4294967295,
                     allow_experimental_join_condition=1
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_05_person_id_override_properties_on_events_filter_laterevent_enable_new_query_builder.2
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_2_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_05_person_id_override_properties_on_events_filter_laterevent_enable_new_query_builder.3
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_3_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_05_person_id_override_properties_on_events_filter_laterevent_enable_new_query_builder.4
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_4_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_05_person_id_override_properties_on_events_filter_laterevent_enable_new_query_builder.5
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_5_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_05_person_id_override_properties_on_events_filter_laterevent_enable_new_query_builder.6
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_6_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_05_person_id_override_properties_on_events_filter_laterevent_enable_new_query_builder.7
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_7_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_05_person_id_override_properties_on_events_filter_laterevent_enable_new_query_builder.8
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_8_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_05_person_id_override_properties_on_events_filter_laterevent_enable_new_query_builder.9
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_9_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_06_person_id_override_properties_joined_no_filter_disable_new_query_builder
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_0_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_06_person_id_override_properties_joined_no_filter_disable_new_query_builder.1
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_1_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_06_person_id_override_properties_joined_no_filter_disable_new_query_builder.10
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_10_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_06_person_id_override_properties_joined_no_filter_disable_new_query_builder.11
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_11_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_06_person_id_override_properties_joined_no_filter_disable_new_query_builder.12
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_12_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_06_person_id_override_properties_joined_no_filter_disable_new_query_builder.13
  '''
  SELECT metric_events.variant AS variant,
         count(metric_events.entity_id) AS num_users,
         countIf(ifNull(equals((metric_events.value).1, 0), 0)) AS total_sum,
         countIf(ifNull(equals((metric_events.value).1, 0), 0)) AS total_sum_of_squares,
         tuple(countIf(ifNull(greaterOrEquals((metric_events.value).1, 0), 0))) AS step_counts,
         tuple(groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(0, 1)), isNull((metric_events.value).1)
                                                                                                                                                                                                                                                                                                                                                                    and isNull(minus(0, 1)))), groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(1, 1)), isNull((metric_events.value).1)
and isNull(minus(1, 1))))) AS steps_event_data
  FROM
    (SELECT exposures.variant AS variant,
            exposures.entity_id AS entity_id,
            any(exposures.exposure_event_uuid) AS exposure_event_uuid,
            any(exposures.exposure_session_id) AS exposure_session_id,
            arraySort(x -> minus(0, x.1), arrayMap(result -> tuple(result.1, if(and(ifNull(greaterOrEquals(result.1, 0), 0), ifNull(greater(length(result.4), result.1), 0)), if(ifNull(greater(length(arrayElement(result.4, plus(result.1, 1))), 0), 0), toString(arrayElement(result.4, plus(result.1, 1))[1]), ''), '')), aggregate_funnel_array_v8(1, 94608000, 'first_touch', 'ordered', array(array('')), [], arraySort(t -> t.1, groupArray(tuple(accurateCastOrNull(metric_events.timestamp, 'Float64'), metric_events.uuid, array(''), arrayFilter(x -> ifNull(notEquals(x, 0), 1), [multiply(1, metric_events.step_0)])))))))[1] AS value,
            mapFromArrays(groupArray(coalesce(toString(metric_events.uuid), '')), groupArray(coalesce(toString(metric_events.session_id), ''))) AS uuid_to_session
     FROM
       (SELECT if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id) AS entity_id,
               if(ifNull(greater(count(DISTINCT replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', '')), 1), 0), '$multiple', any(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''))) AS variant,
               min(toTimeZone(events.timestamp, 'UTC')) AS first_exposure_time,
               argMin(events.uuid, toTimeZone(events.timestamp, 'UTC')) AS exposure_event_uuid,
               argMin(events.`$session_id`, toTimeZone(events.timestamp, 'UTC')) AS exposure_session_id
        FROM events
        LEFT OUTER JOIN
          (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                  person_distinct_id_overrides.distinct_id AS distinct_id
           FROM person_distinct_id_overrides
           WHERE equals(person_distinct_id_overrides.team_id, 99999)
           GROUP BY person_distinct_id_overrides.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id)
        LEFT JOIN
          (SELECT person.id AS id,
                  replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, 'email'), ''), 'null'), '^"|"$', '') AS properties___email
           FROM person
           WHERE and(equals(person.team_id, 99999), in(tuple(person.id, person.version),
                                                         (SELECT person.id AS id, max(person.version) AS version
                                                          FROM person
                                                          WHERE equals(person.team_id, 99999)
                                                          GROUP BY person.id
                                                          HAVING and(ifNull(equals(argMax(person.is_deleted, person.version), 0), 0), ifNull(less(argMax(toTimeZone(person.created_at, 'UTC'), person.version), plus(now64(6, 'UTC'), toIntervalDay(1))), 0))))) SETTINGS optimize_aggregation_in_order=1) AS events__person ON equals(if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id), events__person.id)
        WHERE and(equals(events.team_id, 99999), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('explicit_redacted_timestamp', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('explicit_redacted_timestamp', 6, 'UTC')), in(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''), ['control', 'test']), ifNull(notILike(toString(events__person.properties___email), '%@posthog.com%'), 1), equals(events.event, '$feature_flag_called'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag'), ''), 'null'), '^"|"$', ''), 'test-experiment'), 0))
        GROUP BY entity_id) AS exposures
     LEFT JOIN
       (SELECT toTimeZone(events.timestamp, 'UTC') AS timestamp,
               if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id) AS entity_id,
               events.event AS event,
               events.uuid AS uuid,
               events.properties AS properties,
               nullIf(nullIf(events.`$session_id`, ''), 'null') AS session_id,
               if(equals(events.event, 'purchase'), 1, 0) AS step_0
        FROM events
        LEFT OUTER JOIN
          (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                  person_distinct_id_overrides.distinct_id AS distinct_id
           FROM person_distinct_id_overrides
           WHERE equals(person_distinct_id_overrides.team_id, 99999)
           GROUP BY person_distinct_id_overrides.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id)
        LEFT JOIN
          (SELECT person.id AS id,
                  replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, 'email'), ''), 'null'), '^"|"$', '') AS properties___email
           FROM person
           WHERE and(equals(person.team_id, 99999), in(tuple(person.id, person.version),
                                                         (SELECT person.id AS id, max(person.version) AS version
                                                          FROM person
                                                          WHERE equals(person.team_id, 99999)
                                                          GROUP BY person.id
                                                          HAVING and(ifNull(equals(argMax(person.is_deleted, person.version), 0), 0), ifNull(less(argMax(toTimeZone(person.created_at, 'UTC'), person.version), plus(now64(6, 'UTC'), toIntervalDay(1))), 0))))) SETTINGS optimize_aggregation_in_order=1) AS events__person ON equals(if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id), events__person.id)
        WHERE and(equals(events.team_id, 99999), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('explicit_redacted_timestamp', 6, 'UTC')), less(toTimeZone(events.timestamp, 'UTC'), toDateTime64('explicit_redacted_timestamp', 6, 'UTC')), ifNull(notILike(toString(events__person.properties___email), '%@posthog.com%'), 1), equals(events.event, 'purchase'))) AS metric_events ON and(equals(toString(exposures.entity_id), toString(metric_events.entity_id)), greaterOrEquals(metric_events.timestamp, exposures.first_exposure_time))
     GROUP BY exposures.variant,
              exposures.entity_id) AS metric_events
  GROUP BY metric_events.variant
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=600,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=0,
                     max_ast_elements=4000000,
                     max_expanded_ast_elements=4000000,
                     max_bytes_before_external_group_by=0,
                     allow_experimental_analyzer=1,
                     transform_null_in=1,
                     optimize_min_equality_disjunction_chain_length=4294967295,
                     allow_experimental_join_condition=1
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_06_person_id_override_properties_joined_no_filter_disable_new_query_builder.2
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_2_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_06_person_id_override_properties_joined_no_filter_disable_new_query_builder.3
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_3_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_06_person_id_override_properties_joined_no_filter_disable_new_query_builder.4
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_4_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_06_person_id_override_properties_joined_no_filter_disable_new_query_builder.5
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_5_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_06_person_id_override_properties_joined_no_filter_disable_new_query_builder.6
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_6_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_06_person_id_override_properties_joined_no_filter_disable_new_query_builder.7
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_7_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_06_person_id_override_properties_joined_no_filter_disable_new_query_builder.8
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_8_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_06_person_id_override_properties_joined_no_filter_disable_new_query_builder.9
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_9_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_07_person_id_override_properties_joined_no_filter_enable_new_query_builder
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_0_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_07_person_id_override_properties_joined_no_filter_enable_new_query_builder.1
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_1_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_07_person_id_override_properties_joined_no_filter_enable_new_query_builder.10
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_10_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_07_person_id_override_properties_joined_no_filter_enable_new_query_builder.11
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_11_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_07_person_id_override_properties_joined_no_filter_enable_new_query_builder.12
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_12_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_07_person_id_override_properties_joined_no_filter_enable_new_query_builder.13
  '''
  SELECT entity_metrics.variant AS variant,
         count(entity_metrics.entity_id) AS num_users,
         countIf(ifNull(equals((entity_metrics.value).1, 1), 0)) AS total_sum,
         countIf(ifNull(equals((entity_metrics.value).1, 1), 0)) AS total_sum_of_squares,
         tuple(countIf(ifNull(greaterOrEquals((entity_metrics.value).1, 1), 0))) AS step_counts,
         tuple(groupArraySampleIf(100)(if(ifNull(notEquals((entity_metrics.value).2, ''), 1), tuple(toString(entity_metrics.entity_id), entity_metrics.uuid_to_session[(entity_metrics.value).2], (entity_metrics.value).2), tuple(toString(entity_metrics.entity_id), toString(entity_metrics.exposure_session_id), toString(entity_metrics.exposure_event_uuid))), ifNull(equals((entity_metrics.value).1, minus(1, 1)), isNull((entity_metrics.value).1)
                                                                                                                                                                                                                                                                                                                                                                            and isNull(minus(1, 1)))), groupArraySampleIf(100)(if(ifNull(notEquals((entity_metrics.value).2, ''), 1), tuple(toString(entity_metrics.entity_id), entity_metrics.uuid_to_session[(entity_metrics.value).2], (entity_metrics.value).2), tuple(toString(entity_metrics.entity_id), toString(entity_metrics.exposure_session_id), toString(entity_metrics.exposure_event_uuid))), ifNull(equals((entity_metrics.value).1, minus(2, 1)), isNull((entity_metrics.value).1)
and isNull(minus(2, 1))))) AS steps_event_data
  FROM
    (SELECT metric_events.entity_id AS entity_id,
            if(ifNull(greater(uniqExactIf(metric_events.variant, ifNull(equals(metric_events.step_0, 1), 0)), 1), 0), '$multiple', anyIf(metric_events.variant, ifNull(equals(metric_events.step_0, 1), 0))) AS variant,
            argMinIf(metric_events.uuid, metric_events.timestamp, ifNull(equals(metric_events.step_0, 1), 0)) AS exposure_event_uuid,
            argMinIf(metric_events.session_id, metric_events.timestamp, ifNull(equals(metric_events.step_0, 1), 0)) AS exposure_session_id,
            arraySort(x -> minus(0, x.1), arrayMap(result -> tuple(result.1, if(and(ifNull(greaterOrEquals(result.1, 0), 0), ifNull(greater(length(result.4), result.1), 0)), if(ifNull(greater(length(arrayElement(result.4, plus(result.1, 1))), 0), 0), toString(arrayElement(result.4, plus(result.1, 1))[1]), ''), '')), aggregate_funnel_array_v8(2, 94608000, 'first_touch', 'ordered', array(array('')), [], arraySort(t -> t.1, groupArray(tuple(accurateCastOrNull(metric_events.timestamp, 'Float64'), metric_events.uuid, array(''), arrayFilter(x -> ifNull(notEquals(x, 0), 1), [multiply(1, metric_events.step_0), multiply(2, metric_events.step_1)])))))))[1] AS value,
            mapFromArrays(groupArray(coalesce(toString(metric_events.uuid), '')), groupArray(coalesce(toString(metric_events.session_id), ''))) AS uuid_to_session
     FROM
       (SELECT if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id) AS entity_id,
               replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', '') AS variant,
               toTimeZone(events.timestamp, 'UTC') AS timestamp,
               events.uuid AS uuid,
               nullIf(nullIf(events.`$session_id`, ''), 'null') AS session_id,
               and(greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2020-01-01 00:00:00', 'UTC'))), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2020-01-31 00:00:00', 'UTC'))), and(equals(events.event, '$feature_flag_called'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag'), ''), 'null'), '^"|"$', ''), 'test-experiment'), 0)), ifNull(notILike(toString(events__person.properties___email), '%@posthog.com%'), 1), in(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''), ['control', 'test'])) AS step_0,
               if(equals(events.event, 'purchase'), 1, 0) AS step_1
        FROM events
        LEFT OUTER JOIN
          (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                  person_distinct_id_overrides.distinct_id AS distinct_id
           FROM person_distinct_id_overrides
           WHERE equals(person_distinct_id_overrides.team_id, 99999)
           GROUP BY person_distinct_id_overrides.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id)
        LEFT JOIN
          (SELECT person.id AS id,
                  replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, 'email'), ''), 'null'), '^"|"$', '') AS properties___email
           FROM person
           WHERE and(equals(person.team_id, 99999), in(tuple(person.id, person.version),
                                                         (SELECT person.id AS id, max(person.version) AS version
                                                          FROM person
                                                          WHERE equals(person.team_id, 99999)
                                                          GROUP BY person.id
                                                          HAVING and(ifNull(equals(argMax(person.is_deleted, person.version), 0), 0), ifNull(less(argMax(toTimeZone(person.created_at, 'UTC'), person.version), plus(now64(6, 'UTC'), toIntervalDay(1))), 0))))) SETTINGS optimize_aggregation_in_order=1) AS events__person ON equals(if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id), events__person.id)
        WHERE and(equals(events.team_id, 99999), or(and(greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2020-01-01 00:00:00', 'UTC'))), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2020-01-31 00:00:00', 'UTC'))), and(equals(events.event, '$feature_flag_called'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag'), ''), 'null'), '^"|"$', ''), 'test-experiment'), 0)), ifNull(notILike(toString(events__person.properties___email), '%@posthog.com%'), 1), in(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''), ['control', 'test'])), and(greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2020-01-01 00:00:00', 'UTC'))), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2020-01-31 00:00:00', 'UTC'))), equals(events.event, 'purchase'))))) AS metric_events
     GROUP BY metric_events.entity_id) AS entity_metrics
  WHERE notEmpty(variant)
  GROUP BY entity_metrics.variant
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=600,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=0,
                     max_ast_elements=4000000,
                     max_expanded_ast_elements=4000000,
                     max_bytes_before_external_group_by=0,
                     allow_experimental_analyzer=1,
                     transform_null_in=1,
                     optimize_min_equality_disjunction_chain_length=4294967295,
                     allow_experimental_join_condition=1
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_07_person_id_override_properties_joined_no_filter_enable_new_query_builder.2
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_2_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_07_person_id_override_properties_joined_no_filter_enable_new_query_builder.3
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_3_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_07_person_id_override_properties_joined_no_filter_enable_new_query_builder.4
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_4_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_07_person_id_override_properties_joined_no_filter_enable_new_query_builder.5
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_5_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_07_person_id_override_properties_joined_no_filter_enable_new_query_builder.6
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_6_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_07_person_id_override_properties_joined_no_filter_enable_new_query_builder.7
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_7_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_07_person_id_override_properties_joined_no_filter_enable_new_query_builder.8
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_8_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_07_person_id_override_properties_joined_no_filter_enable_new_query_builder.9
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_9_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_08_person_id_override_properties_joined_filter_earlierevent_disable_new_query_builder
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_0_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_08_person_id_override_properties_joined_filter_earlierevent_disable_new_query_builder.1
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_1_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_08_person_id_override_properties_joined_filter_earlierevent_disable_new_query_builder.10
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_10_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_08_person_id_override_properties_joined_filter_earlierevent_disable_new_query_builder.11
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_11_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_08_person_id_override_properties_joined_filter_earlierevent_disable_new_query_builder.12
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_12_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_08_person_id_override_properties_joined_filter_earlierevent_disable_new_query_builder.13
  '''
  SELECT metric_events.variant AS variant,
         count(metric_events.entity_id) AS num_users,
         countIf(ifNull(equals((metric_events.value).1, 0), 0)) AS total_sum,
         countIf(ifNull(equals((metric_events.value).1, 0), 0)) AS total_sum_of_squares,
         tuple(countIf(ifNull(greaterOrEquals((metric_events.value).1, 0), 0))) AS step_counts,
         tuple(groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(0, 1)), isNull((metric_events.value).1)
                                                                                                                                                                                                                                                                                                                                                                    and isNull(minus(0, 1)))), groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(1, 1)), isNull((metric_events.value).1)
and isNull(minus(1, 1))))) AS steps_event_data
  FROM
    (SELECT exposures.variant AS variant,
            exposures.entity_id AS entity_id,
            any(exposures.exposure_event_uuid) AS exposure_event_uuid,
            any(exposures.exposure_session_id) AS exposure_session_id,
            arraySort(x -> minus(0, x.1), arrayMap(result -> tuple(result.1, if(and(ifNull(greaterOrEquals(result.1, 0), 0), ifNull(greater(length(result.4), result.1), 0)), if(ifNull(greater(length(arrayElement(result.4, plus(result.1, 1))), 0), 0), toString(arrayElement(result.4, plus(result.1, 1))[1]), ''), '')), aggregate_funnel_array_v8(1, 94608000, 'first_touch', 'ordered', array(array('')), [], arraySort(t -> t.1, groupArray(tuple(accurateCastOrNull(metric_events.timestamp, 'Float64'), metric_events.uuid, array(''), arrayFilter(x -> ifNull(notEquals(x, 0), 1), [multiply(1, metric_events.step_0)])))))))[1] AS value,
            mapFromArrays(groupArray(coalesce(toString(metric_events.uuid), '')), groupArray(coalesce(toString(metric_events.session_id), ''))) AS uuid_to_session
     FROM
       (SELECT if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id) AS entity_id,
               if(ifNull(greater(count(DISTINCT replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', '')), 1), 0), '$multiple', any(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''))) AS variant,
               min(toTimeZone(events.timestamp, 'UTC')) AS first_exposure_time,
               argMin(events.uuid, toTimeZone(events.timestamp, 'UTC')) AS exposure_event_uuid,
               argMin(events.`$session_id`, toTimeZone(events.timestamp, 'UTC')) AS exposure_session_id
        FROM events
        LEFT OUTER JOIN
          (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                  person_distinct_id_overrides.distinct_id AS distinct_id
           FROM person_distinct_id_overrides
           WHERE equals(person_distinct_id_overrides.team_id, 99999)
           GROUP BY person_distinct_id_overrides.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id)
        LEFT JOIN
          (SELECT person.id AS id,
                  replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, 'email'), ''), 'null'), '^"|"$', '') AS properties___email
           FROM person
           WHERE and(equals(person.team_id, 99999), in(tuple(person.id, person.version),
                                                         (SELECT person.id AS id, max(person.version) AS version
                                                          FROM person
                                                          WHERE equals(person.team_id, 99999)
                                                          GROUP BY person.id
                                                          HAVING and(ifNull(equals(argMax(person.is_deleted, person.version), 0), 0), ifNull(less(argMax(toTimeZone(person.created_at, 'UTC'), person.version), plus(now64(6, 'UTC'), toIntervalDay(1))), 0))))) SETTINGS optimize_aggregation_in_order=1) AS events__person ON equals(if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id), events__person.id)
        WHERE and(equals(events.team_id, 99999), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('explicit_redacted_timestamp', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('explicit_redacted_timestamp', 6, 'UTC')), in(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''), ['control', 'test']), ifNull(notILike(toString(events__person.properties___email), '%@earlierevent.com%'), 1), equals(events.event, '$feature_flag_called'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag'), ''), 'null'), '^"|"$', ''), 'test-experiment'), 0))
        GROUP BY entity_id) AS exposures
     LEFT JOIN
       (SELECT toTimeZone(events.timestamp, 'UTC') AS timestamp,
               if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id) AS entity_id,
               events.event AS event,
               events.uuid AS uuid,
               events.properties AS properties,
               nullIf(nullIf(events.`$session_id`, ''), 'null') AS session_id,
               if(equals(events.event, 'purchase'), 1, 0) AS step_0
        FROM events
        LEFT OUTER JOIN
          (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                  person_distinct_id_overrides.distinct_id AS distinct_id
           FROM person_distinct_id_overrides
           WHERE equals(person_distinct_id_overrides.team_id, 99999)
           GROUP BY person_distinct_id_overrides.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id)
        LEFT JOIN
          (SELECT person.id AS id,
                  replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, 'email'), ''), 'null'), '^"|"$', '') AS properties___email
           FROM person
           WHERE and(equals(person.team_id, 99999), in(tuple(person.id, person.version),
                                                         (SELECT person.id AS id, max(person.version) AS version
                                                          FROM person
                                                          WHERE equals(person.team_id, 99999)
                                                          GROUP BY person.id
                                                          HAVING and(ifNull(equals(argMax(person.is_deleted, person.version), 0), 0), ifNull(less(argMax(toTimeZone(person.created_at, 'UTC'), person.version), plus(now64(6, 'UTC'), toIntervalDay(1))), 0))))) SETTINGS optimize_aggregation_in_order=1) AS events__person ON equals(if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id), events__person.id)
        WHERE and(equals(events.team_id, 99999), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('explicit_redacted_timestamp', 6, 'UTC')), less(toTimeZone(events.timestamp, 'UTC'), toDateTime64('explicit_redacted_timestamp', 6, 'UTC')), ifNull(notILike(toString(events__person.properties___email), '%@earlierevent.com%'), 1), equals(events.event, 'purchase'))) AS metric_events ON and(equals(toString(exposures.entity_id), toString(metric_events.entity_id)), greaterOrEquals(metric_events.timestamp, exposures.first_exposure_time))
     GROUP BY exposures.variant,
              exposures.entity_id) AS metric_events
  GROUP BY metric_events.variant
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=600,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=0,
                     max_ast_elements=4000000,
                     max_expanded_ast_elements=4000000,
                     max_bytes_before_external_group_by=0,
                     allow_experimental_analyzer=1,
                     transform_null_in=1,
                     optimize_min_equality_disjunction_chain_length=4294967295,
                     allow_experimental_join_condition=1
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_08_person_id_override_properties_joined_filter_earlierevent_disable_new_query_builder.2
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_2_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_08_person_id_override_properties_joined_filter_earlierevent_disable_new_query_builder.3
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_3_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_08_person_id_override_properties_joined_filter_earlierevent_disable_new_query_builder.4
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_4_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_08_person_id_override_properties_joined_filter_earlierevent_disable_new_query_builder.5
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_5_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_08_person_id_override_properties_joined_filter_earlierevent_disable_new_query_builder.6
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_6_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_08_person_id_override_properties_joined_filter_earlierevent_disable_new_query_builder.7
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_7_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_08_person_id_override_properties_joined_filter_earlierevent_disable_new_query_builder.8
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_8_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_08_person_id_override_properties_joined_filter_earlierevent_disable_new_query_builder.9
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_9_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_09_person_id_override_properties_joined_filter_earlierevent_enable_new_query_builder
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_0_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_09_person_id_override_properties_joined_filter_earlierevent_enable_new_query_builder.1
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_1_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_09_person_id_override_properties_joined_filter_earlierevent_enable_new_query_builder.10
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_10_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_09_person_id_override_properties_joined_filter_earlierevent_enable_new_query_builder.11
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_11_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_09_person_id_override_properties_joined_filter_earlierevent_enable_new_query_builder.12
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_12_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_09_person_id_override_properties_joined_filter_earlierevent_enable_new_query_builder.13
  '''
  SELECT entity_metrics.variant AS variant,
         count(entity_metrics.entity_id) AS num_users,
         countIf(ifNull(equals((entity_metrics.value).1, 1), 0)) AS total_sum,
         countIf(ifNull(equals((entity_metrics.value).1, 1), 0)) AS total_sum_of_squares,
         tuple(countIf(ifNull(greaterOrEquals((entity_metrics.value).1, 1), 0))) AS step_counts,
         tuple(groupArraySampleIf(100)(if(ifNull(notEquals((entity_metrics.value).2, ''), 1), tuple(toString(entity_metrics.entity_id), entity_metrics.uuid_to_session[(entity_metrics.value).2], (entity_metrics.value).2), tuple(toString(entity_metrics.entity_id), toString(entity_metrics.exposure_session_id), toString(entity_metrics.exposure_event_uuid))), ifNull(equals((entity_metrics.value).1, minus(1, 1)), isNull((entity_metrics.value).1)
                                                                                                                                                                                                                                                                                                                                                                            and isNull(minus(1, 1)))), groupArraySampleIf(100)(if(ifNull(notEquals((entity_metrics.value).2, ''), 1), tuple(toString(entity_metrics.entity_id), entity_metrics.uuid_to_session[(entity_metrics.value).2], (entity_metrics.value).2), tuple(toString(entity_metrics.entity_id), toString(entity_metrics.exposure_session_id), toString(entity_metrics.exposure_event_uuid))), ifNull(equals((entity_metrics.value).1, minus(2, 1)), isNull((entity_metrics.value).1)
and isNull(minus(2, 1))))) AS steps_event_data
  FROM
    (SELECT metric_events.entity_id AS entity_id,
            if(ifNull(greater(uniqExactIf(metric_events.variant, ifNull(equals(metric_events.step_0, 1), 0)), 1), 0), '$multiple', anyIf(metric_events.variant, ifNull(equals(metric_events.step_0, 1), 0))) AS variant,
            argMinIf(metric_events.uuid, metric_events.timestamp, ifNull(equals(metric_events.step_0, 1), 0)) AS exposure_event_uuid,
            argMinIf(metric_events.session_id, metric_events.timestamp, ifNull(equals(metric_events.step_0, 1), 0)) AS exposure_session_id,
            arraySort(x -> minus(0, x.1), arrayMap(result -> tuple(result.1, if(and(ifNull(greaterOrEquals(result.1, 0), 0), ifNull(greater(length(result.4), result.1), 0)), if(ifNull(greater(length(arrayElement(result.4, plus(result.1, 1))), 0), 0), toString(arrayElement(result.4, plus(result.1, 1))[1]), ''), '')), aggregate_funnel_array_v8(2, 94608000, 'first_touch', 'ordered', array(array('')), [], arraySort(t -> t.1, groupArray(tuple(accurateCastOrNull(metric_events.timestamp, 'Float64'), metric_events.uuid, array(''), arrayFilter(x -> ifNull(notEquals(x, 0), 1), [multiply(1, metric_events.step_0), multiply(2, metric_events.step_1)])))))))[1] AS value,
            mapFromArrays(groupArray(coalesce(toString(metric_events.uuid), '')), groupArray(coalesce(toString(metric_events.session_id), ''))) AS uuid_to_session
     FROM
       (SELECT if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id) AS entity_id,
               replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', '') AS variant,
               toTimeZone(events.timestamp, 'UTC') AS timestamp,
               events.uuid AS uuid,
               nullIf(nullIf(events.`$session_id`, ''), 'null') AS session_id,
               and(greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2020-01-01 00:00:00', 'UTC'))), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2020-01-31 00:00:00', 'UTC'))), and(equals(events.event, '$feature_flag_called'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag'), ''), 'null'), '^"|"$', ''), 'test-experiment'), 0)), ifNull(notILike(toString(events__person.properties___email), '%@earlierevent.com%'), 1), in(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''), ['control', 'test'])) AS step_0,
               if(equals(events.event, 'purchase'), 1, 0) AS step_1
        FROM events
        LEFT OUTER JOIN
          (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                  person_distinct_id_overrides.distinct_id AS distinct_id
           FROM person_distinct_id_overrides
           WHERE equals(person_distinct_id_overrides.team_id, 99999)
           GROUP BY person_distinct_id_overrides.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id)
        LEFT JOIN
          (SELECT person.id AS id,
                  replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, 'email'), ''), 'null'), '^"|"$', '') AS properties___email
           FROM person
           WHERE and(equals(person.team_id, 99999), in(tuple(person.id, person.version),
                                                         (SELECT person.id AS id, max(person.version) AS version
                                                          FROM person
                                                          WHERE equals(person.team_id, 99999)
                                                          GROUP BY person.id
                                                          HAVING and(ifNull(equals(argMax(person.is_deleted, person.version), 0), 0), ifNull(less(argMax(toTimeZone(person.created_at, 'UTC'), person.version), plus(now64(6, 'UTC'), toIntervalDay(1))), 0))))) SETTINGS optimize_aggregation_in_order=1) AS events__person ON equals(if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id), events__person.id)
        WHERE and(equals(events.team_id, 99999), or(and(greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2020-01-01 00:00:00', 'UTC'))), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2020-01-31 00:00:00', 'UTC'))), and(equals(events.event, '$feature_flag_called'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag'), ''), 'null'), '^"|"$', ''), 'test-experiment'), 0)), ifNull(notILike(toString(events__person.properties___email), '%@earlierevent.com%'), 1), in(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''), ['control', 'test'])), and(greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2020-01-01 00:00:00', 'UTC'))), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2020-01-31 00:00:00', 'UTC'))), equals(events.event, 'purchase'))))) AS metric_events
     GROUP BY metric_events.entity_id) AS entity_metrics
  WHERE notEmpty(variant)
  GROUP BY entity_metrics.variant
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=600,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=0,
                     max_ast_elements=4000000,
                     max_expanded_ast_elements=4000000,
                     max_bytes_before_external_group_by=0,
                     allow_experimental_analyzer=1,
                     transform_null_in=1,
                     optimize_min_equality_disjunction_chain_length=4294967295,
                     allow_experimental_join_condition=1
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_09_person_id_override_properties_joined_filter_earlierevent_enable_new_query_builder.2
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_2_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_09_person_id_override_properties_joined_filter_earlierevent_enable_new_query_builder.3
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_3_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_09_person_id_override_properties_joined_filter_earlierevent_enable_new_query_builder.4
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_4_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_09_person_id_override_properties_joined_filter_earlierevent_enable_new_query_builder.5
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_5_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_09_person_id_override_properties_joined_filter_earlierevent_enable_new_query_builder.6
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_6_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_09_person_id_override_properties_joined_filter_earlierevent_enable_new_query_builder.7
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_7_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_09_person_id_override_properties_joined_filter_earlierevent_enable_new_query_builder.8
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_8_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_09_person_id_override_properties_joined_filter_earlierevent_enable_new_query_builder.9
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_9_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_0_person_id_override_properties_on_events_no_filter
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_0_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_0_person_id_override_properties_on_events_no_filter.1
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_1_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_0_person_id_override_properties_on_events_no_filter.10
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_10_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_0_person_id_override_properties_on_events_no_filter.11
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_11_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_0_person_id_override_properties_on_events_no_filter.12
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_12_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_0_person_id_override_properties_on_events_no_filter.13
  '''
  SELECT metric_events.variant AS variant,
         count(metric_events.entity_id) AS num_users,
         countIf(ifNull(equals((metric_events.value).1, 0), 0)) AS total_sum,
         countIf(ifNull(equals((metric_events.value).1, 0), 0)) AS total_sum_of_squares,
         tuple(countIf(ifNull(greaterOrEquals((metric_events.value).1, 0), 0))) AS step_counts,
         tuple(groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(0, 1)), isNull((metric_events.value).1)
                                                                                                                                                                                                                                                                                                                                                                    and isNull(minus(0, 1)))), groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(1, 1)), isNull((metric_events.value).1)
and isNull(minus(1, 1))))) AS steps_event_data
  FROM
    (SELECT exposures.variant AS variant,
            exposures.entity_id AS entity_id,
            any(exposures.exposure_event_uuid) AS exposure_event_uuid,
            any(exposures.exposure_session_id) AS exposure_session_id,
            arraySort(x -> minus(0, x.1), arrayMap(result -> tuple(result.1, if(and(ifNull(greaterOrEquals(result.1, 0), 0), ifNull(greater(length(result.4), result.1), 0)), if(ifNull(greater(length(arrayElement(result.4, plus(result.1, 1))), 0), 0), toString(arrayElement(result.4, plus(result.1, 1))[1]), ''), '')), aggregate_funnel_array_v8(1, 94608000, 'first_touch', 'ordered', array(array('')), [], arraySort(t -> t.1, groupArray(tuple(accurateCastOrNull(metric_events.timestamp, 'Float64'), metric_events.uuid, array(''), arrayFilter(x -> ifNull(notEquals(x, 0), 1), [multiply(1, metric_events.step_0)])))))))[1] AS value,
            mapFromArrays(groupArray(coalesce(toString(metric_events.uuid), '')), groupArray(coalesce(toString(metric_events.session_id), ''))) AS uuid_to_session
     FROM
       (SELECT if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id) AS entity_id,
               if(ifNull(greater(count(DISTINCT replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', '')), 1), 0), '$multiple', any(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''))) AS variant,
               min(toTimeZone(events.timestamp, 'UTC')) AS first_exposure_time,
               argMin(events.uuid, toTimeZone(events.timestamp, 'UTC')) AS exposure_event_uuid,
               argMin(events.`$session_id`, toTimeZone(events.timestamp, 'UTC')) AS exposure_session_id
        FROM events
        LEFT OUTER JOIN
          (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                  person_distinct_id_overrides.distinct_id AS distinct_id
           FROM person_distinct_id_overrides
           WHERE equals(person_distinct_id_overrides.team_id, 99999)
           GROUP BY person_distinct_id_overrides.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id)
        WHERE and(equals(events.team_id, 99999), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('explicit_redacted_timestamp', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('explicit_redacted_timestamp', 6, 'UTC')), in(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''), ['control', 'test']), ifNull(notILike(toString(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.person_properties, 'email'), ''), 'null'), '^"|"$', '')), '%@posthog.com%'), 1), equals(events.event, '$feature_flag_called'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag'), ''), 'null'), '^"|"$', ''), 'test-experiment'), 0))
        GROUP BY entity_id) AS exposures
     LEFT JOIN
       (SELECT toTimeZone(events.timestamp, 'UTC') AS timestamp,
               if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id) AS entity_id,
               events.event AS event,
               events.uuid AS uuid,
               events.properties AS properties,
               nullIf(nullIf(events.`$session_id`, ''), 'null') AS session_id,
               if(equals(events.event, 'purchase'), 1, 0) AS step_0
        FROM events
        LEFT OUTER JOIN
          (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                  person_distinct_id_overrides.distinct_id AS distinct_id
           FROM person_distinct_id_overrides
           WHERE equals(person_distinct_id_overrides.team_id, 99999)
           GROUP BY person_distinct_id_overrides.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id)
        WHERE and(equals(events.team_id, 99999), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('explicit_redacted_timestamp', 6, 'UTC')), less(toTimeZone(events.timestamp, 'UTC'), toDateTime64('explicit_redacted_timestamp', 6, 'UTC')), ifNull(notILike(toString(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.person_properties, 'email'), ''), 'null'), '^"|"$', '')), '%@posthog.com%'), 1), equals(events.event, 'purchase'))) AS metric_events ON and(equals(toString(exposures.entity_id), toString(metric_events.entity_id)), greaterOrEquals(metric_events.timestamp, exposures.first_exposure_time))
     GROUP BY exposures.variant,
              exposures.entity_id) AS metric_events
  GROUP BY metric_events.variant
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=600,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=0,
                     max_ast_elements=4000000,
                     max_expanded_ast_elements=4000000,
                     max_bytes_before_external_group_by=0,
                     allow_experimental_analyzer=1,
                     transform_null_in=1,
                     optimize_min_equality_disjunction_chain_length=4294967295,
                     allow_experimental_join_condition=1
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_0_person_id_override_properties_on_events_no_filter.2
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_2_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_0_person_id_override_properties_on_events_no_filter.3
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_3_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_0_person_id_override_properties_on_events_no_filter.4
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_4_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_0_person_id_override_properties_on_events_no_filter.5
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_5_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_0_person_id_override_properties_on_events_no_filter.6
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_6_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_0_person_id_override_properties_on_events_no_filter.7
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_7_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_0_person_id_override_properties_on_events_no_filter.8
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_8_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_0_person_id_override_properties_on_events_no_filter.9
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_9_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_10_person_id_override_properties_joined_filter_laterevent_disable_new_query_builder
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_0_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_10_person_id_override_properties_joined_filter_laterevent_disable_new_query_builder.1
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_1_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_10_person_id_override_properties_joined_filter_laterevent_disable_new_query_builder.10
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_10_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_10_person_id_override_properties_joined_filter_laterevent_disable_new_query_builder.11
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_11_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_10_person_id_override_properties_joined_filter_laterevent_disable_new_query_builder.12
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_12_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_10_person_id_override_properties_joined_filter_laterevent_disable_new_query_builder.13
  '''
  SELECT metric_events.variant AS variant,
         count(metric_events.entity_id) AS num_users,
         countIf(ifNull(equals((metric_events.value).1, 0), 0)) AS total_sum,
         countIf(ifNull(equals((metric_events.value).1, 0), 0)) AS total_sum_of_squares,
         tuple(countIf(ifNull(greaterOrEquals((metric_events.value).1, 0), 0))) AS step_counts,
         tuple(groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(0, 1)), isNull((metric_events.value).1)
                                                                                                                                                                                                                                                                                                                                                                    and isNull(minus(0, 1)))), groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(1, 1)), isNull((metric_events.value).1)
and isNull(minus(1, 1))))) AS steps_event_data
  FROM
    (SELECT exposures.variant AS variant,
            exposures.entity_id AS entity_id,
            any(exposures.exposure_event_uuid) AS exposure_event_uuid,
            any(exposures.exposure_session_id) AS exposure_session_id,
            arraySort(x -> minus(0, x.1), arrayMap(result -> tuple(result.1, if(and(ifNull(greaterOrEquals(result.1, 0), 0), ifNull(greater(length(result.4), result.1), 0)), if(ifNull(greater(length(arrayElement(result.4, plus(result.1, 1))), 0), 0), toString(arrayElement(result.4, plus(result.1, 1))[1]), ''), '')), aggregate_funnel_array_v8(1, 94608000, 'first_touch', 'ordered', array(array('')), [], arraySort(t -> t.1, groupArray(tuple(accurateCastOrNull(metric_events.timestamp, 'Float64'), metric_events.uuid, array(''), arrayFilter(x -> ifNull(notEquals(x, 0), 1), [multiply(1, metric_events.step_0)])))))))[1] AS value,
            mapFromArrays(groupArray(coalesce(toString(metric_events.uuid), '')), groupArray(coalesce(toString(metric_events.session_id), ''))) AS uuid_to_session
     FROM
       (SELECT if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id) AS entity_id,
               if(ifNull(greater(count(DISTINCT replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', '')), 1), 0), '$multiple', any(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''))) AS variant,
               min(toTimeZone(events.timestamp, 'UTC')) AS first_exposure_time,
               argMin(events.uuid, toTimeZone(events.timestamp, 'UTC')) AS exposure_event_uuid,
               argMin(events.`$session_id`, toTimeZone(events.timestamp, 'UTC')) AS exposure_session_id
        FROM events
        LEFT OUTER JOIN
          (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                  person_distinct_id_overrides.distinct_id AS distinct_id
           FROM person_distinct_id_overrides
           WHERE equals(person_distinct_id_overrides.team_id, 99999)
           GROUP BY person_distinct_id_overrides.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id)
        LEFT JOIN
          (SELECT person.id AS id,
                  replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, 'email'), ''), 'null'), '^"|"$', '') AS properties___email
           FROM person
           WHERE and(equals(person.team_id, 99999), in(tuple(person.id, person.version),
                                                         (SELECT person.id AS id, max(person.version) AS version
                                                          FROM person
                                                          WHERE equals(person.team_id, 99999)
                                                          GROUP BY person.id
                                                          HAVING and(ifNull(equals(argMax(person.is_deleted, person.version), 0), 0), ifNull(less(argMax(toTimeZone(person.created_at, 'UTC'), person.version), plus(now64(6, 'UTC'), toIntervalDay(1))), 0))))) SETTINGS optimize_aggregation_in_order=1) AS events__person ON equals(if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id), events__person.id)
        WHERE and(equals(events.team_id, 99999), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('explicit_redacted_timestamp', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('explicit_redacted_timestamp', 6, 'UTC')), in(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''), ['control', 'test']), ifNull(notILike(toString(events__person.properties___email), '%@laterevent.com%'), 1), equals(events.event, '$feature_flag_called'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag'), ''), 'null'), '^"|"$', ''), 'test-experiment'), 0))
        GROUP BY entity_id) AS exposures
     LEFT JOIN
       (SELECT toTimeZone(events.timestamp, 'UTC') AS timestamp,
               if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id) AS entity_id,
               events.event AS event,
               events.uuid AS uuid,
               events.properties AS properties,
               nullIf(nullIf(events.`$session_id`, ''), 'null') AS session_id,
               if(equals(events.event, 'purchase'), 1, 0) AS step_0
        FROM events
        LEFT OUTER JOIN
          (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                  person_distinct_id_overrides.distinct_id AS distinct_id
           FROM person_distinct_id_overrides
           WHERE equals(person_distinct_id_overrides.team_id, 99999)
           GROUP BY person_distinct_id_overrides.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id)
        LEFT JOIN
          (SELECT person.id AS id,
                  replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, 'email'), ''), 'null'), '^"|"$', '') AS properties___email
           FROM person
           WHERE and(equals(person.team_id, 99999), in(tuple(person.id, person.version),
                                                         (SELECT person.id AS id, max(person.version) AS version
                                                          FROM person
                                                          WHERE equals(person.team_id, 99999)
                                                          GROUP BY person.id
                                                          HAVING and(ifNull(equals(argMax(person.is_deleted, person.version), 0), 0), ifNull(less(argMax(toTimeZone(person.created_at, 'UTC'), person.version), plus(now64(6, 'UTC'), toIntervalDay(1))), 0))))) SETTINGS optimize_aggregation_in_order=1) AS events__person ON equals(if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id), events__person.id)
        WHERE and(equals(events.team_id, 99999), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('explicit_redacted_timestamp', 6, 'UTC')), less(toTimeZone(events.timestamp, 'UTC'), toDateTime64('explicit_redacted_timestamp', 6, 'UTC')), ifNull(notILike(toString(events__person.properties___email), '%@laterevent.com%'), 1), equals(events.event, 'purchase'))) AS metric_events ON and(equals(toString(exposures.entity_id), toString(metric_events.entity_id)), greaterOrEquals(metric_events.timestamp, exposures.first_exposure_time))
     GROUP BY exposures.variant,
              exposures.entity_id) AS metric_events
  GROUP BY metric_events.variant
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=600,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=0,
                     max_ast_elements=4000000,
                     max_expanded_ast_elements=4000000,
                     max_bytes_before_external_group_by=0,
                     allow_experimental_analyzer=1,
                     transform_null_in=1,
                     optimize_min_equality_disjunction_chain_length=4294967295,
                     allow_experimental_join_condition=1
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_10_person_id_override_properties_joined_filter_laterevent_disable_new_query_builder.2
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_2_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_10_person_id_override_properties_joined_filter_laterevent_disable_new_query_builder.3
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_3_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_10_person_id_override_properties_joined_filter_laterevent_disable_new_query_builder.4
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_4_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_10_person_id_override_properties_joined_filter_laterevent_disable_new_query_builder.5
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_5_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_10_person_id_override_properties_joined_filter_laterevent_disable_new_query_builder.6
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_6_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_10_person_id_override_properties_joined_filter_laterevent_disable_new_query_builder.7
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_7_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_10_person_id_override_properties_joined_filter_laterevent_disable_new_query_builder.8
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_8_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_10_person_id_override_properties_joined_filter_laterevent_disable_new_query_builder.9
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_9_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_11_person_id_override_properties_joined_filter_laterevent_enable_new_query_builder
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_0_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_11_person_id_override_properties_joined_filter_laterevent_enable_new_query_builder.1
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_1_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_11_person_id_override_properties_joined_filter_laterevent_enable_new_query_builder.10
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_10_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_11_person_id_override_properties_joined_filter_laterevent_enable_new_query_builder.11
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_11_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_11_person_id_override_properties_joined_filter_laterevent_enable_new_query_builder.12
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_12_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_11_person_id_override_properties_joined_filter_laterevent_enable_new_query_builder.13
  '''
  SELECT entity_metrics.variant AS variant,
         count(entity_metrics.entity_id) AS num_users,
         countIf(ifNull(equals((entity_metrics.value).1, 1), 0)) AS total_sum,
         countIf(ifNull(equals((entity_metrics.value).1, 1), 0)) AS total_sum_of_squares,
         tuple(countIf(ifNull(greaterOrEquals((entity_metrics.value).1, 1), 0))) AS step_counts,
         tuple(groupArraySampleIf(100)(if(ifNull(notEquals((entity_metrics.value).2, ''), 1), tuple(toString(entity_metrics.entity_id), entity_metrics.uuid_to_session[(entity_metrics.value).2], (entity_metrics.value).2), tuple(toString(entity_metrics.entity_id), toString(entity_metrics.exposure_session_id), toString(entity_metrics.exposure_event_uuid))), ifNull(equals((entity_metrics.value).1, minus(1, 1)), isNull((entity_metrics.value).1)
                                                                                                                                                                                                                                                                                                                                                                            and isNull(minus(1, 1)))), groupArraySampleIf(100)(if(ifNull(notEquals((entity_metrics.value).2, ''), 1), tuple(toString(entity_metrics.entity_id), entity_metrics.uuid_to_session[(entity_metrics.value).2], (entity_metrics.value).2), tuple(toString(entity_metrics.entity_id), toString(entity_metrics.exposure_session_id), toString(entity_metrics.exposure_event_uuid))), ifNull(equals((entity_metrics.value).1, minus(2, 1)), isNull((entity_metrics.value).1)
and isNull(minus(2, 1))))) AS steps_event_data
  FROM
    (SELECT metric_events.entity_id AS entity_id,
            if(ifNull(greater(uniqExactIf(metric_events.variant, ifNull(equals(metric_events.step_0, 1), 0)), 1), 0), '$multiple', anyIf(metric_events.variant, ifNull(equals(metric_events.step_0, 1), 0))) AS variant,
            argMinIf(metric_events.uuid, metric_events.timestamp, ifNull(equals(metric_events.step_0, 1), 0)) AS exposure_event_uuid,
            argMinIf(metric_events.session_id, metric_events.timestamp, ifNull(equals(metric_events.step_0, 1), 0)) AS exposure_session_id,
            arraySort(x -> minus(0, x.1), arrayMap(result -> tuple(result.1, if(and(ifNull(greaterOrEquals(result.1, 0), 0), ifNull(greater(length(result.4), result.1), 0)), if(ifNull(greater(length(arrayElement(result.4, plus(result.1, 1))), 0), 0), toString(arrayElement(result.4, plus(result.1, 1))[1]), ''), '')), aggregate_funnel_array_v8(2, 94608000, 'first_touch', 'ordered', array(array('')), [], arraySort(t -> t.1, groupArray(tuple(accurateCastOrNull(metric_events.timestamp, 'Float64'), metric_events.uuid, array(''), arrayFilter(x -> ifNull(notEquals(x, 0), 1), [multiply(1, metric_events.step_0), multiply(2, metric_events.step_1)])))))))[1] AS value,
            mapFromArrays(groupArray(coalesce(toString(metric_events.uuid), '')), groupArray(coalesce(toString(metric_events.session_id), ''))) AS uuid_to_session
     FROM
       (SELECT if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id) AS entity_id,
               replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', '') AS variant,
               toTimeZone(events.timestamp, 'UTC') AS timestamp,
               events.uuid AS uuid,
               nullIf(nullIf(events.`$session_id`, ''), 'null') AS session_id,
               and(greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2020-01-01 00:00:00', 'UTC'))), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2020-01-31 00:00:00', 'UTC'))), and(equals(events.event, '$feature_flag_called'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag'), ''), 'null'), '^"|"$', ''), 'test-experiment'), 0)), ifNull(notILike(toString(events__person.properties___email), '%@laterevent.com%'), 1), in(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''), ['control', 'test'])) AS step_0,
               if(equals(events.event, 'purchase'), 1, 0) AS step_1
        FROM events
        LEFT OUTER JOIN
          (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                  person_distinct_id_overrides.distinct_id AS distinct_id
           FROM person_distinct_id_overrides
           WHERE equals(person_distinct_id_overrides.team_id, 99999)
           GROUP BY person_distinct_id_overrides.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id)
        LEFT JOIN
          (SELECT person.id AS id,
                  replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, 'email'), ''), 'null'), '^"|"$', '') AS properties___email
           FROM person
           WHERE and(equals(person.team_id, 99999), in(tuple(person.id, person.version),
                                                         (SELECT person.id AS id, max(person.version) AS version
                                                          FROM person
                                                          WHERE equals(person.team_id, 99999)
                                                          GROUP BY person.id
                                                          HAVING and(ifNull(equals(argMax(person.is_deleted, person.version), 0), 0), ifNull(less(argMax(toTimeZone(person.created_at, 'UTC'), person.version), plus(now64(6, 'UTC'), toIntervalDay(1))), 0))))) SETTINGS optimize_aggregation_in_order=1) AS events__person ON equals(if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id), events__person.id)
        WHERE and(equals(events.team_id, 99999), or(and(greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2020-01-01 00:00:00', 'UTC'))), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2020-01-31 00:00:00', 'UTC'))), and(equals(events.event, '$feature_flag_called'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag'), ''), 'null'), '^"|"$', ''), 'test-experiment'), 0)), ifNull(notILike(toString(events__person.properties___email), '%@laterevent.com%'), 1), in(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''), ['control', 'test'])), and(greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2020-01-01 00:00:00', 'UTC'))), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2020-01-31 00:00:00', 'UTC'))), equals(events.event, 'purchase'))))) AS metric_events
     GROUP BY metric_events.entity_id) AS entity_metrics
  WHERE notEmpty(variant)
  GROUP BY entity_metrics.variant
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=600,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=0,
                     max_ast_elements=4000000,
                     max_expanded_ast_elements=4000000,
                     max_bytes_before_external_group_by=0,
                     allow_experimental_analyzer=1,
                     transform_null_in=1,
                     optimize_min_equality_disjunction_chain_length=4294967295,
                     allow_experimental_join_condition=1
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_11_person_id_override_properties_joined_filter_laterevent_enable_new_query_builder.2
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_2_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_11_person_id_override_properties_joined_filter_laterevent_enable_new_query_builder.3
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_3_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_11_person_id_override_properties_joined_filter_laterevent_enable_new_query_builder.4
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_4_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_11_person_id_override_properties_joined_filter_laterevent_enable_new_query_builder.5
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_5_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_11_person_id_override_properties_joined_filter_laterevent_enable_new_query_builder.6
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_6_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_11_person_id_override_properties_joined_filter_laterevent_enable_new_query_builder.7
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_7_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_11_person_id_override_properties_joined_filter_laterevent_enable_new_query_builder.8
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_8_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_11_person_id_override_properties_joined_filter_laterevent_enable_new_query_builder.9
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_9_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_12_person_id_no_override_properties_on_events_no_filter_disable_new_query_builder
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_0_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_12_person_id_no_override_properties_on_events_no_filter_disable_new_query_builder.1
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_1_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_12_person_id_no_override_properties_on_events_no_filter_disable_new_query_builder.10
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_10_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_12_person_id_no_override_properties_on_events_no_filter_disable_new_query_builder.11
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_11_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_12_person_id_no_override_properties_on_events_no_filter_disable_new_query_builder.12
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_12_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_12_person_id_no_override_properties_on_events_no_filter_disable_new_query_builder.13
  '''
  SELECT metric_events.variant AS variant,
         count(metric_events.entity_id) AS num_users,
         countIf(ifNull(equals((metric_events.value).1, 0), 0)) AS total_sum,
         countIf(ifNull(equals((metric_events.value).1, 0), 0)) AS total_sum_of_squares,
         tuple(countIf(ifNull(greaterOrEquals((metric_events.value).1, 0), 0))) AS step_counts,
         tuple(groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(0, 1)), isNull((metric_events.value).1)
                                                                                                                                                                                                                                                                                                                                                                    and isNull(minus(0, 1)))), groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(1, 1)), isNull((metric_events.value).1)
and isNull(minus(1, 1))))) AS steps_event_data
  FROM
    (SELECT exposures.variant AS variant,
            exposures.entity_id AS entity_id,
            any(exposures.exposure_event_uuid) AS exposure_event_uuid,
            any(exposures.exposure_session_id) AS exposure_session_id,
            arraySort(x -> minus(0, x.1), arrayMap(result -> tuple(result.1, if(and(ifNull(greaterOrEquals(result.1, 0), 0), ifNull(greater(length(result.4), result.1), 0)), if(ifNull(greater(length(arrayElement(result.4, plus(result.1, 1))), 0), 0), toString(arrayElement(result.4, plus(result.1, 1))[1]), ''), '')), aggregate_funnel_array_v8(1, 94608000, 'first_touch', 'ordered', array(array('')), [], arraySort(t -> t.1, groupArray(tuple(accurateCastOrNull(metric_events.timestamp, 'Float64'), metric_events.uuid, array(''), arrayFilter(x -> ifNull(notEquals(x, 0), 1), [multiply(1, metric_events.step_0)])))))))[1] AS value,
            mapFromArrays(groupArray(coalesce(toString(metric_events.uuid), '')), groupArray(coalesce(toString(metric_events.session_id), ''))) AS uuid_to_session
     FROM
       (SELECT events.person_id AS entity_id,
               if(ifNull(greater(count(DISTINCT replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', '')), 1), 0), '$multiple', any(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''))) AS variant,
               min(toTimeZone(events.timestamp, 'UTC')) AS first_exposure_time,
               argMin(events.uuid, toTimeZone(events.timestamp, 'UTC')) AS exposure_event_uuid,
               argMin(events.`$session_id`, toTimeZone(events.timestamp, 'UTC')) AS exposure_session_id
        FROM events
        WHERE and(equals(events.team_id, 99999), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-01-31 00:00:00.000000', 6, 'UTC')), in(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''), ['control', 'test']), ifNull(notILike(toString(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.person_properties, 'email'), ''), 'null'), '^"|"$', '')), '%@posthog.com%'), 1), equals(events.event, '$feature_flag_called'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag'), ''), 'null'), '^"|"$', ''), 'test-experiment'), 0))
        GROUP BY entity_id) AS exposures
     LEFT JOIN
       (SELECT toTimeZone(events.timestamp, 'UTC') AS timestamp,
               events.person_id AS entity_id,
               events.event AS event,
               events.uuid AS uuid,
               events.properties AS properties,
               nullIf(nullIf(events.`$session_id`, ''), 'null') AS session_id,
               if(equals(events.event, 'purchase'), 1, 0) AS step_0
        FROM events
        WHERE and(equals(events.team_id, 99999), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), less(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-01-31 00:00:00.000000', 6, 'UTC')), ifNull(notILike(toString(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.person_properties, 'email'), ''), 'null'), '^"|"$', '')), '%@posthog.com%'), 1), equals(events.event, 'purchase'))) AS metric_events ON and(equals(toString(exposures.entity_id), toString(metric_events.entity_id)), greaterOrEquals(metric_events.timestamp, exposures.first_exposure_time))
     GROUP BY exposures.variant,
              exposures.entity_id) AS metric_events
  GROUP BY metric_events.variant
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=600,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=0,
                     max_ast_elements=4000000,
                     max_expanded_ast_elements=4000000,
                     max_bytes_before_external_group_by=0,
                     allow_experimental_analyzer=1,
                     transform_null_in=1,
                     optimize_min_equality_disjunction_chain_length=4294967295,
                     allow_experimental_join_condition=1
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_12_person_id_no_override_properties_on_events_no_filter_disable_new_query_builder.2
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_2_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_12_person_id_no_override_properties_on_events_no_filter_disable_new_query_builder.3
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_3_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_12_person_id_no_override_properties_on_events_no_filter_disable_new_query_builder.4
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_4_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_12_person_id_no_override_properties_on_events_no_filter_disable_new_query_builder.5
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_5_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_12_person_id_no_override_properties_on_events_no_filter_disable_new_query_builder.6
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_6_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_12_person_id_no_override_properties_on_events_no_filter_disable_new_query_builder.7
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_7_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_12_person_id_no_override_properties_on_events_no_filter_disable_new_query_builder.8
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_8_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_12_person_id_no_override_properties_on_events_no_filter_disable_new_query_builder.9
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_9_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_13_person_id_no_override_properties_on_events_no_filter_enable_new_query_builder
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_0_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_13_person_id_no_override_properties_on_events_no_filter_enable_new_query_builder.1
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_1_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_13_person_id_no_override_properties_on_events_no_filter_enable_new_query_builder.10
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_10_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_13_person_id_no_override_properties_on_events_no_filter_enable_new_query_builder.11
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_11_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_13_person_id_no_override_properties_on_events_no_filter_enable_new_query_builder.12
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_12_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_13_person_id_no_override_properties_on_events_no_filter_enable_new_query_builder.13
  '''
  SELECT entity_metrics.variant AS variant,
         count(entity_metrics.entity_id) AS num_users,
         countIf(ifNull(equals((entity_metrics.value).1, 1), 0)) AS total_sum,
         countIf(ifNull(equals((entity_metrics.value).1, 1), 0)) AS total_sum_of_squares,
         tuple(countIf(ifNull(greaterOrEquals((entity_metrics.value).1, 1), 0))) AS step_counts,
         tuple(groupArraySampleIf(100)(if(ifNull(notEquals((entity_metrics.value).2, ''), 1), tuple(toString(entity_metrics.entity_id), entity_metrics.uuid_to_session[(entity_metrics.value).2], (entity_metrics.value).2), tuple(toString(entity_metrics.entity_id), toString(entity_metrics.exposure_session_id), toString(entity_metrics.exposure_event_uuid))), ifNull(equals((entity_metrics.value).1, minus(1, 1)), isNull((entity_metrics.value).1)
                                                                                                                                                                                                                                                                                                                                                                            and isNull(minus(1, 1)))), groupArraySampleIf(100)(if(ifNull(notEquals((entity_metrics.value).2, ''), 1), tuple(toString(entity_metrics.entity_id), entity_metrics.uuid_to_session[(entity_metrics.value).2], (entity_metrics.value).2), tuple(toString(entity_metrics.entity_id), toString(entity_metrics.exposure_session_id), toString(entity_metrics.exposure_event_uuid))), ifNull(equals((entity_metrics.value).1, minus(2, 1)), isNull((entity_metrics.value).1)
and isNull(minus(2, 1))))) AS steps_event_data
  FROM
    (SELECT metric_events.entity_id AS entity_id,
            if(ifNull(greater(uniqExactIf(metric_events.variant, ifNull(equals(metric_events.step_0, 1), 0)), 1), 0), '$multiple', anyIf(metric_events.variant, ifNull(equals(metric_events.step_0, 1), 0))) AS variant,
            argMinIf(metric_events.uuid, metric_events.timestamp, ifNull(equals(metric_events.step_0, 1), 0)) AS exposure_event_uuid,
            argMinIf(metric_events.session_id, metric_events.timestamp, ifNull(equals(metric_events.step_0, 1), 0)) AS exposure_session_id,
            arraySort(x -> minus(0, x.1), arrayMap(result -> tuple(result.1, if(and(ifNull(greaterOrEquals(result.1, 0), 0), ifNull(greater(length(result.4), result.1), 0)), if(ifNull(greater(length(arrayElement(result.4, plus(result.1, 1))), 0), 0), toString(arrayElement(result.4, plus(result.1, 1))[1]), ''), '')), aggregate_funnel_array_v8(2, 94608000, 'first_touch', 'ordered', array(array('')), [], arraySort(t -> t.1, groupArray(tuple(accurateCastOrNull(metric_events.timestamp, 'Float64'), metric_events.uuid, array(''), arrayFilter(x -> ifNull(notEquals(x, 0), 1), [multiply(1, metric_events.step_0), multiply(2, metric_events.step_1)])))))))[1] AS value,
            mapFromArrays(groupArray(coalesce(toString(metric_events.uuid), '')), groupArray(coalesce(toString(metric_events.session_id), ''))) AS uuid_to_session
     FROM
       (SELECT events.person_id AS entity_id,
               replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', '') AS variant,
               toTimeZone(events.timestamp, 'UTC') AS timestamp,
               events.uuid AS uuid,
               nullIf(nullIf(events.`$session_id`, ''), 'null') AS session_id,
               and(greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2020-01-01 00:00:00', 'UTC'))), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2020-01-31 00:00:00', 'UTC'))), and(equals(events.event, '$feature_flag_called'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag'), ''), 'null'), '^"|"$', ''), 'test-experiment'), 0)), ifNull(notILike(toString(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.person_properties, 'email'), ''), 'null'), '^"|"$', '')), '%@posthog.com%'), 1), in(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''), ['control', 'test'])) AS step_0,
               if(equals(events.event, 'purchase'), 1, 0) AS step_1
        FROM events
        WHERE and(equals(events.team_id, 99999), or(and(greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2020-01-01 00:00:00', 'UTC'))), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2020-01-31 00:00:00', 'UTC'))), and(equals(events.event, '$feature_flag_called'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag'), ''), 'null'), '^"|"$', ''), 'test-experiment'), 0)), ifNull(notILike(toString(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.person_properties, 'email'), ''), 'null'), '^"|"$', '')), '%@posthog.com%'), 1), in(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''), ['control', 'test'])), and(greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2020-01-01 00:00:00', 'UTC'))), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2020-01-31 00:00:00', 'UTC'))), equals(events.event, 'purchase'))))) AS metric_events
     GROUP BY metric_events.entity_id) AS entity_metrics
  WHERE notEmpty(variant)
  GROUP BY entity_metrics.variant
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=600,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=0,
                     max_ast_elements=4000000,
                     max_expanded_ast_elements=4000000,
                     max_bytes_before_external_group_by=0,
                     allow_experimental_analyzer=1,
                     transform_null_in=1,
                     optimize_min_equality_disjunction_chain_length=4294967295,
                     allow_experimental_join_condition=1
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_13_person_id_no_override_properties_on_events_no_filter_enable_new_query_builder.2
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_2_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_13_person_id_no_override_properties_on_events_no_filter_enable_new_query_builder.3
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_3_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_13_person_id_no_override_properties_on_events_no_filter_enable_new_query_builder.4
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_4_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_13_person_id_no_override_properties_on_events_no_filter_enable_new_query_builder.5
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_5_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_13_person_id_no_override_properties_on_events_no_filter_enable_new_query_builder.6
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_6_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_13_person_id_no_override_properties_on_events_no_filter_enable_new_query_builder.7
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_7_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_13_person_id_no_override_properties_on_events_no_filter_enable_new_query_builder.8
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_8_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_13_person_id_no_override_properties_on_events_no_filter_enable_new_query_builder.9
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_9_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_14_person_id_no_override_properties_on_events_filter_earlierevent_disable_new_query_builder
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_0_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_14_person_id_no_override_properties_on_events_filter_earlierevent_disable_new_query_builder.1
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_1_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_14_person_id_no_override_properties_on_events_filter_earlierevent_disable_new_query_builder.10
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_10_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_14_person_id_no_override_properties_on_events_filter_earlierevent_disable_new_query_builder.11
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_11_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_14_person_id_no_override_properties_on_events_filter_earlierevent_disable_new_query_builder.12
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_12_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_14_person_id_no_override_properties_on_events_filter_earlierevent_disable_new_query_builder.13
  '''
  SELECT metric_events.variant AS variant,
         count(metric_events.entity_id) AS num_users,
         countIf(ifNull(equals((metric_events.value).1, 0), 0)) AS total_sum,
         countIf(ifNull(equals((metric_events.value).1, 0), 0)) AS total_sum_of_squares,
         tuple(countIf(ifNull(greaterOrEquals((metric_events.value).1, 0), 0))) AS step_counts,
         tuple(groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(0, 1)), isNull((metric_events.value).1)
                                                                                                                                                                                                                                                                                                                                                                    and isNull(minus(0, 1)))), groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(1, 1)), isNull((metric_events.value).1)
and isNull(minus(1, 1))))) AS steps_event_data
  FROM
    (SELECT exposures.variant AS variant,
            exposures.entity_id AS entity_id,
            any(exposures.exposure_event_uuid) AS exposure_event_uuid,
            any(exposures.exposure_session_id) AS exposure_session_id,
            arraySort(x -> minus(0, x.1), arrayMap(result -> tuple(result.1, if(and(ifNull(greaterOrEquals(result.1, 0), 0), ifNull(greater(length(result.4), result.1), 0)), if(ifNull(greater(length(arrayElement(result.4, plus(result.1, 1))), 0), 0), toString(arrayElement(result.4, plus(result.1, 1))[1]), ''), '')), aggregate_funnel_array_v8(1, 94608000, 'first_touch', 'ordered', array(array('')), [], arraySort(t -> t.1, groupArray(tuple(accurateCastOrNull(metric_events.timestamp, 'Float64'), metric_events.uuid, array(''), arrayFilter(x -> ifNull(notEquals(x, 0), 1), [multiply(1, metric_events.step_0)])))))))[1] AS value,
            mapFromArrays(groupArray(coalesce(toString(metric_events.uuid), '')), groupArray(coalesce(toString(metric_events.session_id), ''))) AS uuid_to_session
     FROM
       (SELECT events.person_id AS entity_id,
               if(ifNull(greater(count(DISTINCT replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', '')), 1), 0), '$multiple', any(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''))) AS variant,
               min(toTimeZone(events.timestamp, 'UTC')) AS first_exposure_time,
               argMin(events.uuid, toTimeZone(events.timestamp, 'UTC')) AS exposure_event_uuid,
               argMin(events.`$session_id`, toTimeZone(events.timestamp, 'UTC')) AS exposure_session_id
        FROM events
        WHERE and(equals(events.team_id, 99999), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-01-31 00:00:00.000000', 6, 'UTC')), in(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''), ['control', 'test']), ifNull(notILike(toString(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.person_properties, 'email'), ''), 'null'), '^"|"$', '')), '%@earlierevent.com%'), 1), equals(events.event, '$feature_flag_called'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag'), ''), 'null'), '^"|"$', ''), 'test-experiment'), 0))
        GROUP BY entity_id) AS exposures
     LEFT JOIN
       (SELECT toTimeZone(events.timestamp, 'UTC') AS timestamp,
               events.person_id AS entity_id,
               events.event AS event,
               events.uuid AS uuid,
               events.properties AS properties,
               nullIf(nullIf(events.`$session_id`, ''), 'null') AS session_id,
               if(equals(events.event, 'purchase'), 1, 0) AS step_0
        FROM events
        WHERE and(equals(events.team_id, 99999), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), less(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-01-31 00:00:00.000000', 6, 'UTC')), ifNull(notILike(toString(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.person_properties, 'email'), ''), 'null'), '^"|"$', '')), '%@earlierevent.com%'), 1), equals(events.event, 'purchase'))) AS metric_events ON and(equals(toString(exposures.entity_id), toString(metric_events.entity_id)), greaterOrEquals(metric_events.timestamp, exposures.first_exposure_time))
     GROUP BY exposures.variant,
              exposures.entity_id) AS metric_events
  GROUP BY metric_events.variant
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=600,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=0,
                     max_ast_elements=4000000,
                     max_expanded_ast_elements=4000000,
                     max_bytes_before_external_group_by=0,
                     allow_experimental_analyzer=1,
                     transform_null_in=1,
                     optimize_min_equality_disjunction_chain_length=4294967295,
                     allow_experimental_join_condition=1
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_14_person_id_no_override_properties_on_events_filter_earlierevent_disable_new_query_builder.2
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_2_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_14_person_id_no_override_properties_on_events_filter_earlierevent_disable_new_query_builder.3
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_3_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_14_person_id_no_override_properties_on_events_filter_earlierevent_disable_new_query_builder.4
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_4_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_14_person_id_no_override_properties_on_events_filter_earlierevent_disable_new_query_builder.5
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_5_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_14_person_id_no_override_properties_on_events_filter_earlierevent_disable_new_query_builder.6
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_6_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_14_person_id_no_override_properties_on_events_filter_earlierevent_disable_new_query_builder.7
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_7_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_14_person_id_no_override_properties_on_events_filter_earlierevent_disable_new_query_builder.8
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_8_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_14_person_id_no_override_properties_on_events_filter_earlierevent_disable_new_query_builder.9
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_9_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_15_person_id_no_override_properties_on_events_filter_earlierevent_enable_new_query_builder
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_0_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_15_person_id_no_override_properties_on_events_filter_earlierevent_enable_new_query_builder.1
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_1_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_15_person_id_no_override_properties_on_events_filter_earlierevent_enable_new_query_builder.10
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_10_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_15_person_id_no_override_properties_on_events_filter_earlierevent_enable_new_query_builder.11
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_11_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_15_person_id_no_override_properties_on_events_filter_earlierevent_enable_new_query_builder.12
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_12_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_15_person_id_no_override_properties_on_events_filter_earlierevent_enable_new_query_builder.13
  '''
  SELECT entity_metrics.variant AS variant,
         count(entity_metrics.entity_id) AS num_users,
         countIf(ifNull(equals((entity_metrics.value).1, 1), 0)) AS total_sum,
         countIf(ifNull(equals((entity_metrics.value).1, 1), 0)) AS total_sum_of_squares,
         tuple(countIf(ifNull(greaterOrEquals((entity_metrics.value).1, 1), 0))) AS step_counts,
         tuple(groupArraySampleIf(100)(if(ifNull(notEquals((entity_metrics.value).2, ''), 1), tuple(toString(entity_metrics.entity_id), entity_metrics.uuid_to_session[(entity_metrics.value).2], (entity_metrics.value).2), tuple(toString(entity_metrics.entity_id), toString(entity_metrics.exposure_session_id), toString(entity_metrics.exposure_event_uuid))), ifNull(equals((entity_metrics.value).1, minus(1, 1)), isNull((entity_metrics.value).1)
                                                                                                                                                                                                                                                                                                                                                                            and isNull(minus(1, 1)))), groupArraySampleIf(100)(if(ifNull(notEquals((entity_metrics.value).2, ''), 1), tuple(toString(entity_metrics.entity_id), entity_metrics.uuid_to_session[(entity_metrics.value).2], (entity_metrics.value).2), tuple(toString(entity_metrics.entity_id), toString(entity_metrics.exposure_session_id), toString(entity_metrics.exposure_event_uuid))), ifNull(equals((entity_metrics.value).1, minus(2, 1)), isNull((entity_metrics.value).1)
and isNull(minus(2, 1))))) AS steps_event_data
  FROM
    (SELECT metric_events.entity_id AS entity_id,
            if(ifNull(greater(uniqExactIf(metric_events.variant, ifNull(equals(metric_events.step_0, 1), 0)), 1), 0), '$multiple', anyIf(metric_events.variant, ifNull(equals(metric_events.step_0, 1), 0))) AS variant,
            argMinIf(metric_events.uuid, metric_events.timestamp, ifNull(equals(metric_events.step_0, 1), 0)) AS exposure_event_uuid,
            argMinIf(metric_events.session_id, metric_events.timestamp, ifNull(equals(metric_events.step_0, 1), 0)) AS exposure_session_id,
            arraySort(x -> minus(0, x.1), arrayMap(result -> tuple(result.1, if(and(ifNull(greaterOrEquals(result.1, 0), 0), ifNull(greater(length(result.4), result.1), 0)), if(ifNull(greater(length(arrayElement(result.4, plus(result.1, 1))), 0), 0), toString(arrayElement(result.4, plus(result.1, 1))[1]), ''), '')), aggregate_funnel_array_v8(2, 94608000, 'first_touch', 'ordered', array(array('')), [], arraySort(t -> t.1, groupArray(tuple(accurateCastOrNull(metric_events.timestamp, 'Float64'), metric_events.uuid, array(''), arrayFilter(x -> ifNull(notEquals(x, 0), 1), [multiply(1, metric_events.step_0), multiply(2, metric_events.step_1)])))))))[1] AS value,
            mapFromArrays(groupArray(coalesce(toString(metric_events.uuid), '')), groupArray(coalesce(toString(metric_events.session_id), ''))) AS uuid_to_session
     FROM
       (SELECT events.person_id AS entity_id,
               replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', '') AS variant,
               toTimeZone(events.timestamp, 'UTC') AS timestamp,
               events.uuid AS uuid,
               nullIf(nullIf(events.`$session_id`, ''), 'null') AS session_id,
               and(greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2020-01-01 00:00:00', 'UTC'))), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2020-01-31 00:00:00', 'UTC'))), and(equals(events.event, '$feature_flag_called'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag'), ''), 'null'), '^"|"$', ''), 'test-experiment'), 0)), ifNull(notILike(toString(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.person_properties, 'email'), ''), 'null'), '^"|"$', '')), '%@earlierevent.com%'), 1), in(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''), ['control', 'test'])) AS step_0,
               if(equals(events.event, 'purchase'), 1, 0) AS step_1
        FROM events
        WHERE and(equals(events.team_id, 99999), or(and(greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2020-01-01 00:00:00', 'UTC'))), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2020-01-31 00:00:00', 'UTC'))), and(equals(events.event, '$feature_flag_called'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag'), ''), 'null'), '^"|"$', ''), 'test-experiment'), 0)), ifNull(notILike(toString(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.person_properties, 'email'), ''), 'null'), '^"|"$', '')), '%@earlierevent.com%'), 1), in(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''), ['control', 'test'])), and(greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2020-01-01 00:00:00', 'UTC'))), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2020-01-31 00:00:00', 'UTC'))), equals(events.event, 'purchase'))))) AS metric_events
     GROUP BY metric_events.entity_id) AS entity_metrics
  WHERE notEmpty(variant)
  GROUP BY entity_metrics.variant
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=600,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=0,
                     max_ast_elements=4000000,
                     max_expanded_ast_elements=4000000,
                     max_bytes_before_external_group_by=0,
                     allow_experimental_analyzer=1,
                     transform_null_in=1,
                     optimize_min_equality_disjunction_chain_length=4294967295,
                     allow_experimental_join_condition=1
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_15_person_id_no_override_properties_on_events_filter_earlierevent_enable_new_query_builder.2
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_2_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_15_person_id_no_override_properties_on_events_filter_earlierevent_enable_new_query_builder.3
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_3_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_15_person_id_no_override_properties_on_events_filter_earlierevent_enable_new_query_builder.4
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_4_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_15_person_id_no_override_properties_on_events_filter_earlierevent_enable_new_query_builder.5
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_5_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_15_person_id_no_override_properties_on_events_filter_earlierevent_enable_new_query_builder.6
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_6_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_15_person_id_no_override_properties_on_events_filter_earlierevent_enable_new_query_builder.7
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_7_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_15_person_id_no_override_properties_on_events_filter_earlierevent_enable_new_query_builder.8
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_8_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_15_person_id_no_override_properties_on_events_filter_earlierevent_enable_new_query_builder.9
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_9_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_16_person_id_no_override_properties_on_events_filter_laterevent_disable_new_query_builder
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_0_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_16_person_id_no_override_properties_on_events_filter_laterevent_disable_new_query_builder.1
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_1_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_16_person_id_no_override_properties_on_events_filter_laterevent_disable_new_query_builder.10
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_10_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_16_person_id_no_override_properties_on_events_filter_laterevent_disable_new_query_builder.11
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_11_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_16_person_id_no_override_properties_on_events_filter_laterevent_disable_new_query_builder.12
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_12_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_16_person_id_no_override_properties_on_events_filter_laterevent_disable_new_query_builder.13
  '''
  SELECT metric_events.variant AS variant,
         count(metric_events.entity_id) AS num_users,
         countIf(ifNull(equals((metric_events.value).1, 0), 0)) AS total_sum,
         countIf(ifNull(equals((metric_events.value).1, 0), 0)) AS total_sum_of_squares,
         tuple(countIf(ifNull(greaterOrEquals((metric_events.value).1, 0), 0))) AS step_counts,
         tuple(groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(0, 1)), isNull((metric_events.value).1)
                                                                                                                                                                                                                                                                                                                                                                    and isNull(minus(0, 1)))), groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(1, 1)), isNull((metric_events.value).1)
and isNull(minus(1, 1))))) AS steps_event_data
  FROM
    (SELECT exposures.variant AS variant,
            exposures.entity_id AS entity_id,
            any(exposures.exposure_event_uuid) AS exposure_event_uuid,
            any(exposures.exposure_session_id) AS exposure_session_id,
            arraySort(x -> minus(0, x.1), arrayMap(result -> tuple(result.1, if(and(ifNull(greaterOrEquals(result.1, 0), 0), ifNull(greater(length(result.4), result.1), 0)), if(ifNull(greater(length(arrayElement(result.4, plus(result.1, 1))), 0), 0), toString(arrayElement(result.4, plus(result.1, 1))[1]), ''), '')), aggregate_funnel_array_v8(1, 94608000, 'first_touch', 'ordered', array(array('')), [], arraySort(t -> t.1, groupArray(tuple(accurateCastOrNull(metric_events.timestamp, 'Float64'), metric_events.uuid, array(''), arrayFilter(x -> ifNull(notEquals(x, 0), 1), [multiply(1, metric_events.step_0)])))))))[1] AS value,
            mapFromArrays(groupArray(coalesce(toString(metric_events.uuid), '')), groupArray(coalesce(toString(metric_events.session_id), ''))) AS uuid_to_session
     FROM
       (SELECT events.person_id AS entity_id,
               if(ifNull(greater(count(DISTINCT replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', '')), 1), 0), '$multiple', any(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''))) AS variant,
               min(toTimeZone(events.timestamp, 'UTC')) AS first_exposure_time,
               argMin(events.uuid, toTimeZone(events.timestamp, 'UTC')) AS exposure_event_uuid,
               argMin(events.`$session_id`, toTimeZone(events.timestamp, 'UTC')) AS exposure_session_id
        FROM events
        WHERE and(equals(events.team_id, 99999), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-01-31 00:00:00.000000', 6, 'UTC')), in(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''), ['control', 'test']), ifNull(notILike(toString(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.person_properties, 'email'), ''), 'null'), '^"|"$', '')), '%@laterevent.com%'), 1), equals(events.event, '$feature_flag_called'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag'), ''), 'null'), '^"|"$', ''), 'test-experiment'), 0))
        GROUP BY entity_id) AS exposures
     LEFT JOIN
       (SELECT toTimeZone(events.timestamp, 'UTC') AS timestamp,
               events.person_id AS entity_id,
               events.event AS event,
               events.uuid AS uuid,
               events.properties AS properties,
               nullIf(nullIf(events.`$session_id`, ''), 'null') AS session_id,
               if(equals(events.event, 'purchase'), 1, 0) AS step_0
        FROM events
        WHERE and(equals(events.team_id, 99999), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), less(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-01-31 00:00:00.000000', 6, 'UTC')), ifNull(notILike(toString(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.person_properties, 'email'), ''), 'null'), '^"|"$', '')), '%@laterevent.com%'), 1), equals(events.event, 'purchase'))) AS metric_events ON and(equals(toString(exposures.entity_id), toString(metric_events.entity_id)), greaterOrEquals(metric_events.timestamp, exposures.first_exposure_time))
     GROUP BY exposures.variant,
              exposures.entity_id) AS metric_events
  GROUP BY metric_events.variant
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=600,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=0,
                     max_ast_elements=4000000,
                     max_expanded_ast_elements=4000000,
                     max_bytes_before_external_group_by=0,
                     allow_experimental_analyzer=1,
                     transform_null_in=1,
                     optimize_min_equality_disjunction_chain_length=4294967295,
                     allow_experimental_join_condition=1
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_16_person_id_no_override_properties_on_events_filter_laterevent_disable_new_query_builder.2
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_2_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_16_person_id_no_override_properties_on_events_filter_laterevent_disable_new_query_builder.3
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_3_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_16_person_id_no_override_properties_on_events_filter_laterevent_disable_new_query_builder.4
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_4_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_16_person_id_no_override_properties_on_events_filter_laterevent_disable_new_query_builder.5
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_5_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_16_person_id_no_override_properties_on_events_filter_laterevent_disable_new_query_builder.6
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_6_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_16_person_id_no_override_properties_on_events_filter_laterevent_disable_new_query_builder.7
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_7_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_16_person_id_no_override_properties_on_events_filter_laterevent_disable_new_query_builder.8
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_8_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_16_person_id_no_override_properties_on_events_filter_laterevent_disable_new_query_builder.9
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_9_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_17_person_id_no_override_properties_on_events_filter_laterevent_enable_new_query_builder
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_0_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_17_person_id_no_override_properties_on_events_filter_laterevent_enable_new_query_builder.1
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_1_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_17_person_id_no_override_properties_on_events_filter_laterevent_enable_new_query_builder.10
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_10_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_17_person_id_no_override_properties_on_events_filter_laterevent_enable_new_query_builder.11
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_11_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_17_person_id_no_override_properties_on_events_filter_laterevent_enable_new_query_builder.12
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_12_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_17_person_id_no_override_properties_on_events_filter_laterevent_enable_new_query_builder.13
  '''
  SELECT entity_metrics.variant AS variant,
         count(entity_metrics.entity_id) AS num_users,
         countIf(ifNull(equals((entity_metrics.value).1, 1), 0)) AS total_sum,
         countIf(ifNull(equals((entity_metrics.value).1, 1), 0)) AS total_sum_of_squares,
         tuple(countIf(ifNull(greaterOrEquals((entity_metrics.value).1, 1), 0))) AS step_counts,
         tuple(groupArraySampleIf(100)(if(ifNull(notEquals((entity_metrics.value).2, ''), 1), tuple(toString(entity_metrics.entity_id), entity_metrics.uuid_to_session[(entity_metrics.value).2], (entity_metrics.value).2), tuple(toString(entity_metrics.entity_id), toString(entity_metrics.exposure_session_id), toString(entity_metrics.exposure_event_uuid))), ifNull(equals((entity_metrics.value).1, minus(1, 1)), isNull((entity_metrics.value).1)
                                                                                                                                                                                                                                                                                                                                                                            and isNull(minus(1, 1)))), groupArraySampleIf(100)(if(ifNull(notEquals((entity_metrics.value).2, ''), 1), tuple(toString(entity_metrics.entity_id), entity_metrics.uuid_to_session[(entity_metrics.value).2], (entity_metrics.value).2), tuple(toString(entity_metrics.entity_id), toString(entity_metrics.exposure_session_id), toString(entity_metrics.exposure_event_uuid))), ifNull(equals((entity_metrics.value).1, minus(2, 1)), isNull((entity_metrics.value).1)
and isNull(minus(2, 1))))) AS steps_event_data
  FROM
    (SELECT metric_events.entity_id AS entity_id,
            if(ifNull(greater(uniqExactIf(metric_events.variant, ifNull(equals(metric_events.step_0, 1), 0)), 1), 0), '$multiple', anyIf(metric_events.variant, ifNull(equals(metric_events.step_0, 1), 0))) AS variant,
            argMinIf(metric_events.uuid, metric_events.timestamp, ifNull(equals(metric_events.step_0, 1), 0)) AS exposure_event_uuid,
            argMinIf(metric_events.session_id, metric_events.timestamp, ifNull(equals(metric_events.step_0, 1), 0)) AS exposure_session_id,
            arraySort(x -> minus(0, x.1), arrayMap(result -> tuple(result.1, if(and(ifNull(greaterOrEquals(result.1, 0), 0), ifNull(greater(length(result.4), result.1), 0)), if(ifNull(greater(length(arrayElement(result.4, plus(result.1, 1))), 0), 0), toString(arrayElement(result.4, plus(result.1, 1))[1]), ''), '')), aggregate_funnel_array_v8(2, 94608000, 'first_touch', 'ordered', array(array('')), [], arraySort(t -> t.1, groupArray(tuple(accurateCastOrNull(metric_events.timestamp, 'Float64'), metric_events.uuid, array(''), arrayFilter(x -> ifNull(notEquals(x, 0), 1), [multiply(1, metric_events.step_0), multiply(2, metric_events.step_1)])))))))[1] AS value,
            mapFromArrays(groupArray(coalesce(toString(metric_events.uuid), '')), groupArray(coalesce(toString(metric_events.session_id), ''))) AS uuid_to_session
     FROM
       (SELECT events.person_id AS entity_id,
               replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', '') AS variant,
               toTimeZone(events.timestamp, 'UTC') AS timestamp,
               events.uuid AS uuid,
               nullIf(nullIf(events.`$session_id`, ''), 'null') AS session_id,
               and(greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2020-01-01 00:00:00', 'UTC'))), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2020-01-31 00:00:00', 'UTC'))), and(equals(events.event, '$feature_flag_called'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag'), ''), 'null'), '^"|"$', ''), 'test-experiment'), 0)), ifNull(notILike(toString(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.person_properties, 'email'), ''), 'null'), '^"|"$', '')), '%@laterevent.com%'), 1), in(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''), ['control', 'test'])) AS step_0,
               if(equals(events.event, 'purchase'), 1, 0) AS step_1
        FROM events
        WHERE and(equals(events.team_id, 99999), or(and(greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2020-01-01 00:00:00', 'UTC'))), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2020-01-31 00:00:00', 'UTC'))), and(equals(events.event, '$feature_flag_called'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag'), ''), 'null'), '^"|"$', ''), 'test-experiment'), 0)), ifNull(notILike(toString(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.person_properties, 'email'), ''), 'null'), '^"|"$', '')), '%@laterevent.com%'), 1), in(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''), ['control', 'test'])), and(greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2020-01-01 00:00:00', 'UTC'))), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2020-01-31 00:00:00', 'UTC'))), equals(events.event, 'purchase'))))) AS metric_events
     GROUP BY metric_events.entity_id) AS entity_metrics
  WHERE notEmpty(variant)
  GROUP BY entity_metrics.variant
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=600,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=0,
                     max_ast_elements=4000000,
                     max_expanded_ast_elements=4000000,
                     max_bytes_before_external_group_by=0,
                     allow_experimental_analyzer=1,
                     transform_null_in=1,
                     optimize_min_equality_disjunction_chain_length=4294967295,
                     allow_experimental_join_condition=1
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_17_person_id_no_override_properties_on_events_filter_laterevent_enable_new_query_builder.2
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_2_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_17_person_id_no_override_properties_on_events_filter_laterevent_enable_new_query_builder.3
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_3_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_17_person_id_no_override_properties_on_events_filter_laterevent_enable_new_query_builder.4
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_4_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_17_person_id_no_override_properties_on_events_filter_laterevent_enable_new_query_builder.5
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_5_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_17_person_id_no_override_properties_on_events_filter_laterevent_enable_new_query_builder.6
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_6_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_17_person_id_no_override_properties_on_events_filter_laterevent_enable_new_query_builder.7
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_7_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_17_person_id_no_override_properties_on_events_filter_laterevent_enable_new_query_builder.8
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_8_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_17_person_id_no_override_properties_on_events_filter_laterevent_enable_new_query_builder.9
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_9_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_1_person_id_override_properties_on_events_filter_earlierevent
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_0_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_1_person_id_override_properties_on_events_filter_earlierevent.1
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_1_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_1_person_id_override_properties_on_events_filter_earlierevent.10
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_10_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_1_person_id_override_properties_on_events_filter_earlierevent.11
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_11_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_1_person_id_override_properties_on_events_filter_earlierevent.12
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_12_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_1_person_id_override_properties_on_events_filter_earlierevent.13
  '''
  SELECT metric_events.variant AS variant,
         count(metric_events.entity_id) AS num_users,
         countIf(ifNull(equals((metric_events.value).1, 0), 0)) AS total_sum,
         countIf(ifNull(equals((metric_events.value).1, 0), 0)) AS total_sum_of_squares,
         tuple(countIf(ifNull(greaterOrEquals((metric_events.value).1, 0), 0))) AS step_counts,
         tuple(groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(0, 1)), isNull((metric_events.value).1)
                                                                                                                                                                                                                                                                                                                                                                    and isNull(minus(0, 1)))), groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(1, 1)), isNull((metric_events.value).1)
and isNull(minus(1, 1))))) AS steps_event_data
  FROM
    (SELECT exposures.variant AS variant,
            exposures.entity_id AS entity_id,
            any(exposures.exposure_event_uuid) AS exposure_event_uuid,
            any(exposures.exposure_session_id) AS exposure_session_id,
            arraySort(x -> minus(0, x.1), arrayMap(result -> tuple(result.1, if(and(ifNull(greaterOrEquals(result.1, 0), 0), ifNull(greater(length(result.4), result.1), 0)), if(ifNull(greater(length(arrayElement(result.4, plus(result.1, 1))), 0), 0), toString(arrayElement(result.4, plus(result.1, 1))[1]), ''), '')), aggregate_funnel_array_v8(1, 94608000, 'first_touch', 'ordered', array(array('')), [], arraySort(t -> t.1, groupArray(tuple(accurateCastOrNull(metric_events.timestamp, 'Float64'), metric_events.uuid, array(''), arrayFilter(x -> ifNull(notEquals(x, 0), 1), [multiply(1, metric_events.step_0)])))))))[1] AS value,
            mapFromArrays(groupArray(coalesce(toString(metric_events.uuid), '')), groupArray(coalesce(toString(metric_events.session_id), ''))) AS uuid_to_session
     FROM
       (SELECT if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id) AS entity_id,
               if(ifNull(greater(count(DISTINCT replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', '')), 1), 0), '$multiple', any(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''))) AS variant,
               min(toTimeZone(events.timestamp, 'UTC')) AS first_exposure_time,
               argMin(events.uuid, toTimeZone(events.timestamp, 'UTC')) AS exposure_event_uuid,
               argMin(events.`$session_id`, toTimeZone(events.timestamp, 'UTC')) AS exposure_session_id
        FROM events
        LEFT OUTER JOIN
          (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                  person_distinct_id_overrides.distinct_id AS distinct_id
           FROM person_distinct_id_overrides
           WHERE equals(person_distinct_id_overrides.team_id, 99999)
           GROUP BY person_distinct_id_overrides.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id)
        WHERE and(equals(events.team_id, 99999), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('explicit_redacted_timestamp', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('explicit_redacted_timestamp', 6, 'UTC')), in(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''), ['control', 'test']), ifNull(notILike(toString(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.person_properties, 'email'), ''), 'null'), '^"|"$', '')), '%@earlierevent.com%'), 1), equals(events.event, '$feature_flag_called'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag'), ''), 'null'), '^"|"$', ''), 'test-experiment'), 0))
        GROUP BY entity_id) AS exposures
     LEFT JOIN
       (SELECT toTimeZone(events.timestamp, 'UTC') AS timestamp,
               if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id) AS entity_id,
               events.event AS event,
               events.uuid AS uuid,
               events.properties AS properties,
               nullIf(nullIf(events.`$session_id`, ''), 'null') AS session_id,
               if(equals(events.event, 'purchase'), 1, 0) AS step_0
        FROM events
        LEFT OUTER JOIN
          (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                  person_distinct_id_overrides.distinct_id AS distinct_id
           FROM person_distinct_id_overrides
           WHERE equals(person_distinct_id_overrides.team_id, 99999)
           GROUP BY person_distinct_id_overrides.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id)
        WHERE and(equals(events.team_id, 99999), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('explicit_redacted_timestamp', 6, 'UTC')), less(toTimeZone(events.timestamp, 'UTC'), toDateTime64('explicit_redacted_timestamp', 6, 'UTC')), ifNull(notILike(toString(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.person_properties, 'email'), ''), 'null'), '^"|"$', '')), '%@earlierevent.com%'), 1), equals(events.event, 'purchase'))) AS metric_events ON and(equals(toString(exposures.entity_id), toString(metric_events.entity_id)), greaterOrEquals(metric_events.timestamp, exposures.first_exposure_time))
     GROUP BY exposures.variant,
              exposures.entity_id) AS metric_events
  GROUP BY metric_events.variant
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=600,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=0,
                     max_ast_elements=4000000,
                     max_expanded_ast_elements=4000000,
                     max_bytes_before_external_group_by=0,
                     allow_experimental_analyzer=1,
                     transform_null_in=1,
                     optimize_min_equality_disjunction_chain_length=4294967295,
                     allow_experimental_join_condition=1
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_1_person_id_override_properties_on_events_filter_earlierevent.2
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_2_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_1_person_id_override_properties_on_events_filter_earlierevent.3
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_3_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_1_person_id_override_properties_on_events_filter_earlierevent.4
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_4_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_1_person_id_override_properties_on_events_filter_earlierevent.5
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_5_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_1_person_id_override_properties_on_events_filter_earlierevent.6
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_6_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_1_person_id_override_properties_on_events_filter_earlierevent.7
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_7_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_1_person_id_override_properties_on_events_filter_earlierevent.8
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_8_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_1_person_id_override_properties_on_events_filter_earlierevent.9
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_9_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_2_person_id_override_properties_on_events_filter_laterevent
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_0_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_2_person_id_override_properties_on_events_filter_laterevent.1
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_1_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_2_person_id_override_properties_on_events_filter_laterevent.10
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_10_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_2_person_id_override_properties_on_events_filter_laterevent.11
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_11_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_2_person_id_override_properties_on_events_filter_laterevent.12
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_12_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_2_person_id_override_properties_on_events_filter_laterevent.13
  '''
  SELECT metric_events.variant AS variant,
         count(metric_events.entity_id) AS num_users,
         countIf(ifNull(equals((metric_events.value).1, 0), 0)) AS total_sum,
         countIf(ifNull(equals((metric_events.value).1, 0), 0)) AS total_sum_of_squares,
         tuple(countIf(ifNull(greaterOrEquals((metric_events.value).1, 0), 0))) AS step_counts,
         tuple(groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(0, 1)), isNull((metric_events.value).1)
                                                                                                                                                                                                                                                                                                                                                                    and isNull(minus(0, 1)))), groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(1, 1)), isNull((metric_events.value).1)
and isNull(minus(1, 1))))) AS steps_event_data
  FROM
    (SELECT exposures.variant AS variant,
            exposures.entity_id AS entity_id,
            any(exposures.exposure_event_uuid) AS exposure_event_uuid,
            any(exposures.exposure_session_id) AS exposure_session_id,
            arraySort(x -> minus(0, x.1), arrayMap(result -> tuple(result.1, if(and(ifNull(greaterOrEquals(result.1, 0), 0), ifNull(greater(length(result.4), result.1), 0)), if(ifNull(greater(length(arrayElement(result.4, plus(result.1, 1))), 0), 0), toString(arrayElement(result.4, plus(result.1, 1))[1]), ''), '')), aggregate_funnel_array_v8(1, 94608000, 'first_touch', 'ordered', array(array('')), [], arraySort(t -> t.1, groupArray(tuple(accurateCastOrNull(metric_events.timestamp, 'Float64'), metric_events.uuid, array(''), arrayFilter(x -> ifNull(notEquals(x, 0), 1), [multiply(1, metric_events.step_0)])))))))[1] AS value,
            mapFromArrays(groupArray(coalesce(toString(metric_events.uuid), '')), groupArray(coalesce(toString(metric_events.session_id), ''))) AS uuid_to_session
     FROM
       (SELECT if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id) AS entity_id,
               if(ifNull(greater(count(DISTINCT replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', '')), 1), 0), '$multiple', any(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''))) AS variant,
               min(toTimeZone(events.timestamp, 'UTC')) AS first_exposure_time,
               argMin(events.uuid, toTimeZone(events.timestamp, 'UTC')) AS exposure_event_uuid,
               argMin(events.`$session_id`, toTimeZone(events.timestamp, 'UTC')) AS exposure_session_id
        FROM events
        LEFT OUTER JOIN
          (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                  person_distinct_id_overrides.distinct_id AS distinct_id
           FROM person_distinct_id_overrides
           WHERE equals(person_distinct_id_overrides.team_id, 99999)
           GROUP BY person_distinct_id_overrides.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id)
        WHERE and(equals(events.team_id, 99999), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('explicit_redacted_timestamp', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('explicit_redacted_timestamp', 6, 'UTC')), in(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''), ['control', 'test']), ifNull(notILike(toString(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.person_properties, 'email'), ''), 'null'), '^"|"$', '')), '%@laterevent.com%'), 1), equals(events.event, '$feature_flag_called'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag'), ''), 'null'), '^"|"$', ''), 'test-experiment'), 0))
        GROUP BY entity_id) AS exposures
     LEFT JOIN
       (SELECT toTimeZone(events.timestamp, 'UTC') AS timestamp,
               if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id) AS entity_id,
               events.event AS event,
               events.uuid AS uuid,
               events.properties AS properties,
               nullIf(nullIf(events.`$session_id`, ''), 'null') AS session_id,
               if(equals(events.event, 'purchase'), 1, 0) AS step_0
        FROM events
        LEFT OUTER JOIN
          (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                  person_distinct_id_overrides.distinct_id AS distinct_id
           FROM person_distinct_id_overrides
           WHERE equals(person_distinct_id_overrides.team_id, 99999)
           GROUP BY person_distinct_id_overrides.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id)
        WHERE and(equals(events.team_id, 99999), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('explicit_redacted_timestamp', 6, 'UTC')), less(toTimeZone(events.timestamp, 'UTC'), toDateTime64('explicit_redacted_timestamp', 6, 'UTC')), ifNull(notILike(toString(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.person_properties, 'email'), ''), 'null'), '^"|"$', '')), '%@laterevent.com%'), 1), equals(events.event, 'purchase'))) AS metric_events ON and(equals(toString(exposures.entity_id), toString(metric_events.entity_id)), greaterOrEquals(metric_events.timestamp, exposures.first_exposure_time))
     GROUP BY exposures.variant,
              exposures.entity_id) AS metric_events
  GROUP BY metric_events.variant
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=600,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=0,
                     max_ast_elements=4000000,
                     max_expanded_ast_elements=4000000,
                     max_bytes_before_external_group_by=0,
                     allow_experimental_analyzer=1,
                     transform_null_in=1,
                     optimize_min_equality_disjunction_chain_length=4294967295,
                     allow_experimental_join_condition=1
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_2_person_id_override_properties_on_events_filter_laterevent.2
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_2_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_2_person_id_override_properties_on_events_filter_laterevent.3
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_3_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_2_person_id_override_properties_on_events_filter_laterevent.4
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_4_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_2_person_id_override_properties_on_events_filter_laterevent.5
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_5_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_2_person_id_override_properties_on_events_filter_laterevent.6
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_6_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_2_person_id_override_properties_on_events_filter_laterevent.7
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_7_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_2_person_id_override_properties_on_events_filter_laterevent.8
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_8_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_2_person_id_override_properties_on_events_filter_laterevent.9
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_9_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_3_person_id_override_properties_joined_no_filter
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_0_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_3_person_id_override_properties_joined_no_filter.1
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_1_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_3_person_id_override_properties_joined_no_filter.10
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_10_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_3_person_id_override_properties_joined_no_filter.11
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_11_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_3_person_id_override_properties_joined_no_filter.12
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_12_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_3_person_id_override_properties_joined_no_filter.13
  '''
  SELECT metric_events.variant AS variant,
         count(metric_events.entity_id) AS num_users,
         countIf(ifNull(equals((metric_events.value).1, 0), 0)) AS total_sum,
         countIf(ifNull(equals((metric_events.value).1, 0), 0)) AS total_sum_of_squares,
         tuple(countIf(ifNull(greaterOrEquals((metric_events.value).1, 0), 0))) AS step_counts,
         tuple(groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(0, 1)), isNull((metric_events.value).1)
                                                                                                                                                                                                                                                                                                                                                                    and isNull(minus(0, 1)))), groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(1, 1)), isNull((metric_events.value).1)
and isNull(minus(1, 1))))) AS steps_event_data
  FROM
    (SELECT exposures.variant AS variant,
            exposures.entity_id AS entity_id,
            any(exposures.exposure_event_uuid) AS exposure_event_uuid,
            any(exposures.exposure_session_id) AS exposure_session_id,
            arraySort(x -> minus(0, x.1), arrayMap(result -> tuple(result.1, if(and(ifNull(greaterOrEquals(result.1, 0), 0), ifNull(greater(length(result.4), result.1), 0)), if(ifNull(greater(length(arrayElement(result.4, plus(result.1, 1))), 0), 0), toString(arrayElement(result.4, plus(result.1, 1))[1]), ''), '')), aggregate_funnel_array_v8(1, 94608000, 'first_touch', 'ordered', array(array('')), [], arraySort(t -> t.1, groupArray(tuple(accurateCastOrNull(metric_events.timestamp, 'Float64'), metric_events.uuid, array(''), arrayFilter(x -> ifNull(notEquals(x, 0), 1), [multiply(1, metric_events.step_0)])))))))[1] AS value,
            mapFromArrays(groupArray(coalesce(toString(metric_events.uuid), '')), groupArray(coalesce(toString(metric_events.session_id), ''))) AS uuid_to_session
     FROM
       (SELECT if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id) AS entity_id,
               if(ifNull(greater(count(DISTINCT replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', '')), 1), 0), '$multiple', any(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''))) AS variant,
               min(toTimeZone(events.timestamp, 'UTC')) AS first_exposure_time,
               argMin(events.uuid, toTimeZone(events.timestamp, 'UTC')) AS exposure_event_uuid,
               argMin(events.`$session_id`, toTimeZone(events.timestamp, 'UTC')) AS exposure_session_id
        FROM events
        LEFT OUTER JOIN
          (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                  person_distinct_id_overrides.distinct_id AS distinct_id
           FROM person_distinct_id_overrides
           WHERE equals(person_distinct_id_overrides.team_id, 99999)
           GROUP BY person_distinct_id_overrides.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id)
        LEFT JOIN
          (SELECT person.id AS id,
                  replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, 'email'), ''), 'null'), '^"|"$', '') AS properties___email
           FROM person
           WHERE and(equals(person.team_id, 99999), in(tuple(person.id, person.version),
                                                         (SELECT person.id AS id, max(person.version) AS version
                                                          FROM person
                                                          WHERE equals(person.team_id, 99999)
                                                          GROUP BY person.id
                                                          HAVING and(ifNull(equals(argMax(person.is_deleted, person.version), 0), 0), ifNull(less(argMax(toTimeZone(person.created_at, 'UTC'), person.version), plus(now64(6, 'UTC'), toIntervalDay(1))), 0))))) SETTINGS optimize_aggregation_in_order=1) AS events__person ON equals(if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id), events__person.id)
        WHERE and(equals(events.team_id, 99999), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('explicit_redacted_timestamp', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('explicit_redacted_timestamp', 6, 'UTC')), in(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''), ['control', 'test']), ifNull(notILike(toString(events__person.properties___email), '%@posthog.com%'), 1), equals(events.event, '$feature_flag_called'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag'), ''), 'null'), '^"|"$', ''), 'test-experiment'), 0))
        GROUP BY entity_id) AS exposures
     LEFT JOIN
       (SELECT toTimeZone(events.timestamp, 'UTC') AS timestamp,
               if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id) AS entity_id,
               events.event AS event,
               events.uuid AS uuid,
               events.properties AS properties,
               nullIf(nullIf(events.`$session_id`, ''), 'null') AS session_id,
               if(equals(events.event, 'purchase'), 1, 0) AS step_0
        FROM events
        LEFT OUTER JOIN
          (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                  person_distinct_id_overrides.distinct_id AS distinct_id
           FROM person_distinct_id_overrides
           WHERE equals(person_distinct_id_overrides.team_id, 99999)
           GROUP BY person_distinct_id_overrides.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id)
        LEFT JOIN
          (SELECT person.id AS id,
                  replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, 'email'), ''), 'null'), '^"|"$', '') AS properties___email
           FROM person
           WHERE and(equals(person.team_id, 99999), in(tuple(person.id, person.version),
                                                         (SELECT person.id AS id, max(person.version) AS version
                                                          FROM person
                                                          WHERE equals(person.team_id, 99999)
                                                          GROUP BY person.id
                                                          HAVING and(ifNull(equals(argMax(person.is_deleted, person.version), 0), 0), ifNull(less(argMax(toTimeZone(person.created_at, 'UTC'), person.version), plus(now64(6, 'UTC'), toIntervalDay(1))), 0))))) SETTINGS optimize_aggregation_in_order=1) AS events__person ON equals(if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id), events__person.id)
        WHERE and(equals(events.team_id, 99999), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('explicit_redacted_timestamp', 6, 'UTC')), less(toTimeZone(events.timestamp, 'UTC'), toDateTime64('explicit_redacted_timestamp', 6, 'UTC')), ifNull(notILike(toString(events__person.properties___email), '%@posthog.com%'), 1), equals(events.event, 'purchase'))) AS metric_events ON and(equals(toString(exposures.entity_id), toString(metric_events.entity_id)), greaterOrEquals(metric_events.timestamp, exposures.first_exposure_time))
     GROUP BY exposures.variant,
              exposures.entity_id) AS metric_events
  GROUP BY metric_events.variant
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=600,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=0,
                     max_ast_elements=4000000,
                     max_expanded_ast_elements=4000000,
                     max_bytes_before_external_group_by=0,
                     allow_experimental_analyzer=1,
                     transform_null_in=1,
                     optimize_min_equality_disjunction_chain_length=4294967295,
                     allow_experimental_join_condition=1
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_3_person_id_override_properties_joined_no_filter.2
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_2_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_3_person_id_override_properties_joined_no_filter.3
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_3_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_3_person_id_override_properties_joined_no_filter.4
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_4_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_3_person_id_override_properties_joined_no_filter.5
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_5_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_3_person_id_override_properties_joined_no_filter.6
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_6_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_3_person_id_override_properties_joined_no_filter.7
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_7_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_3_person_id_override_properties_joined_no_filter.8
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_8_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_3_person_id_override_properties_joined_no_filter.9
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_9_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_4_person_id_override_properties_joined_filter_earlierevent
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_0_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_4_person_id_override_properties_joined_filter_earlierevent.1
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_1_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_4_person_id_override_properties_joined_filter_earlierevent.10
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_10_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_4_person_id_override_properties_joined_filter_earlierevent.11
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_11_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_4_person_id_override_properties_joined_filter_earlierevent.12
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_12_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_4_person_id_override_properties_joined_filter_earlierevent.13
  '''
  SELECT metric_events.variant AS variant,
         count(metric_events.entity_id) AS num_users,
         countIf(ifNull(equals((metric_events.value).1, 0), 0)) AS total_sum,
         countIf(ifNull(equals((metric_events.value).1, 0), 0)) AS total_sum_of_squares,
         tuple(countIf(ifNull(greaterOrEquals((metric_events.value).1, 0), 0))) AS step_counts,
         tuple(groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(0, 1)), isNull((metric_events.value).1)
                                                                                                                                                                                                                                                                                                                                                                    and isNull(minus(0, 1)))), groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(1, 1)), isNull((metric_events.value).1)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    and isNull(minus(1, 1))))) AS steps_event_data
  FROM
    (SELECT exposures.variant AS variant,
            exposures.entity_id AS entity_id,
            any(exposures.exposure_event_uuid) AS exposure_event_uuid,
            any(exposures.exposure_session_id) AS exposure_session_id,
            arraySort(x -> minus(0, x.1), arrayMap(result -> tuple(result.1, if(and(ifNull(greaterOrEquals(result.1, 0), 0), ifNull(greater(length(result.4), result.1), 0)), if(ifNull(greater(length(arrayElement(result.4, plus(result.1, 1))), 0), 0), toString(arrayElement(result.4, plus(result.1, 1))[1]), ''), '')), aggregate_funnel_array_v8(1, 94608000, 'first_touch', 'ordered', array(array('')), [], arraySort(t -> t.1, groupArray(tuple(accurateCastOrNull(metric_events.timestamp, 'Float64'), metric_events.uuid, array(''), arrayFilter(x -> ifNull(notEquals(x, 0), 1), [multiply(1, metric_events.step_0)])))))))[1] AS value,
            mapFromArrays(groupArray(coalesce(toString(metric_events.uuid), '')), groupArray(coalesce(toString(metric_events.session_id), ''))) AS uuid_to_session
     FROM
       (SELECT if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id) AS entity_id,
               if(ifNull(greater(count(DISTINCT replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', '')), 1), 0), '$multiple', any(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''))) AS variant,
               min(toTimeZone(events.timestamp, 'UTC')) AS first_exposure_time,
               argMin(events.uuid, toTimeZone(events.timestamp, 'UTC')) AS exposure_event_uuid,
               argMin(events.`$session_id`, toTimeZone(events.timestamp, 'UTC')) AS exposure_session_id
        FROM events
        LEFT OUTER JOIN
          (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                  person_distinct_id_overrides.distinct_id AS distinct_id
           FROM person_distinct_id_overrides
           WHERE equals(person_distinct_id_overrides.team_id, 99999)
           GROUP BY person_distinct_id_overrides.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id)
        LEFT JOIN
          (SELECT person.id AS id,
                  replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, 'email'), ''), 'null'), '^"|"$', '') AS properties___email
           FROM person
           WHERE and(equals(person.team_id, 99999), in(tuple(person.id, person.version),
                                                         (SELECT person.id AS id, max(person.version) AS version
                                                          FROM person
                                                          WHERE equals(person.team_id, 99999)
                                                          GROUP BY person.id
                                                          HAVING and(ifNull(equals(argMax(person.is_deleted, person.version), 0), 0), ifNull(less(argMax(toTimeZone(person.created_at, 'UTC'), person.version), plus(now64(6, 'UTC'), toIntervalDay(1))), 0))))) SETTINGS optimize_aggregation_in_order=1) AS events__person ON equals(if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id), events__person.id)
        WHERE and(equals(events.team_id, 99999), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('explicit_redacted_timestamp', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('explicit_redacted_timestamp', 6, 'UTC')), in(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''), ['control', 'test']), ifNull(notILike(toString(events__person.properties___email), '%@earlierevent.com%'), 1), equals(events.event, '$feature_flag_called'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag'), ''), 'null'), '^"|"$', ''), 'test-experiment'), 0))
        GROUP BY entity_id) AS exposures
     LEFT JOIN
       (SELECT toTimeZone(events.timestamp, 'UTC') AS timestamp,
               if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id) AS entity_id,
               events.event AS event,
               events.uuid AS uuid,
               events.properties AS properties,
               nullIf(nullIf(events.`$session_id`, ''), 'null') AS session_id,
               if(equals(events.event, 'purchase'), 1, 0) AS step_0
        FROM events
        LEFT OUTER JOIN
          (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                  person_distinct_id_overrides.distinct_id AS distinct_id
           FROM person_distinct_id_overrides
           WHERE equals(person_distinct_id_overrides.team_id, 99999)
           GROUP BY person_distinct_id_overrides.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id)
        LEFT JOIN
          (SELECT person.id AS id,
                  replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, 'email'), ''), 'null'), '^"|"$', '') AS properties___email
           FROM person
           WHERE and(equals(person.team_id, 99999), in(tuple(person.id, person.version),
                                                         (SELECT person.id AS id, max(person.version) AS version
                                                          FROM person
                                                          WHERE equals(person.team_id, 99999)
                                                          GROUP BY person.id
                                                          HAVING and(ifNull(equals(argMax(person.is_deleted, person.version), 0), 0), ifNull(less(argMax(toTimeZone(person.created_at, 'UTC'), person.version), plus(now64(6, 'UTC'), toIntervalDay(1))), 0))))) SETTINGS optimize_aggregation_in_order=1) AS events__person ON equals(if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id), events__person.id)
        WHERE and(equals(events.team_id, 99999), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('explicit_redacted_timestamp', 6, 'UTC')), less(toTimeZone(events.timestamp, 'UTC'), toDateTime64('explicit_redacted_timestamp', 6, 'UTC')), ifNull(notILike(toString(events__person.properties___email), '%@earlierevent.com%'), 1), equals(events.event, 'purchase'))) AS metric_events ON and(equals(toString(exposures.entity_id), toString(metric_events.entity_id)), greaterOrEquals(metric_events.timestamp, exposures.first_exposure_time))
     GROUP BY exposures.variant,
              exposures.entity_id) AS metric_events
  GROUP BY metric_events.variant
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=600,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=0,
                     max_ast_elements=4000000,
                     max_expanded_ast_elements=4000000,
                     max_bytes_before_external_group_by=0,
                     allow_experimental_analyzer=1,
                     transform_null_in=1,
                     optimize_min_equality_disjunction_chain_length=4294967295,
                     allow_experimental_join_condition=1
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_4_person_id_override_properties_joined_filter_earlierevent.2
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_2_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_4_person_id_override_properties_joined_filter_earlierevent.3
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_3_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_4_person_id_override_properties_joined_filter_earlierevent.4
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_4_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_4_person_id_override_properties_joined_filter_earlierevent.5
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_5_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_4_person_id_override_properties_joined_filter_earlierevent.6
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_6_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_4_person_id_override_properties_joined_filter_earlierevent.7
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_7_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_4_person_id_override_properties_joined_filter_earlierevent.8
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_8_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_4_person_id_override_properties_joined_filter_earlierevent.9
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_9_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_5_person_id_override_properties_joined_filter_laterevent
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_0_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_5_person_id_override_properties_joined_filter_laterevent.1
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_1_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_5_person_id_override_properties_joined_filter_laterevent.10
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_10_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_5_person_id_override_properties_joined_filter_laterevent.11
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_11_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_5_person_id_override_properties_joined_filter_laterevent.12
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_12_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_5_person_id_override_properties_joined_filter_laterevent.13
  '''
  SELECT metric_events.variant AS variant,
         count(metric_events.entity_id) AS num_users,
         countIf(ifNull(equals((metric_events.value).1, 0), 0)) AS total_sum,
         countIf(ifNull(equals((metric_events.value).1, 0), 0)) AS total_sum_of_squares,
         tuple(countIf(ifNull(greaterOrEquals((metric_events.value).1, 0), 0))) AS step_counts,
         tuple(groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(0, 1)), isNull((metric_events.value).1)
                                                                                                                                                                                                                                                                                                                                                                    and isNull(minus(0, 1)))), groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(1, 1)), isNull((metric_events.value).1)
and isNull(minus(1, 1))))) AS steps_event_data
  FROM
    (SELECT exposures.variant AS variant,
            exposures.entity_id AS entity_id,
            any(exposures.exposure_event_uuid) AS exposure_event_uuid,
            any(exposures.exposure_session_id) AS exposure_session_id,
            arraySort(x -> minus(0, x.1), arrayMap(result -> tuple(result.1, if(and(ifNull(greaterOrEquals(result.1, 0), 0), ifNull(greater(length(result.4), result.1), 0)), if(ifNull(greater(length(arrayElement(result.4, plus(result.1, 1))), 0), 0), toString(arrayElement(result.4, plus(result.1, 1))[1]), ''), '')), aggregate_funnel_array_v8(1, 94608000, 'first_touch', 'ordered', array(array('')), [], arraySort(t -> t.1, groupArray(tuple(accurateCastOrNull(metric_events.timestamp, 'Float64'), metric_events.uuid, array(''), arrayFilter(x -> ifNull(notEquals(x, 0), 1), [multiply(1, metric_events.step_0)])))))))[1] AS value,
            mapFromArrays(groupArray(coalesce(toString(metric_events.uuid), '')), groupArray(coalesce(toString(metric_events.session_id), ''))) AS uuid_to_session
     FROM
       (SELECT if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id) AS entity_id,
               if(ifNull(greater(count(DISTINCT replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', '')), 1), 0), '$multiple', any(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''))) AS variant,
               min(toTimeZone(events.timestamp, 'UTC')) AS first_exposure_time,
               argMin(events.uuid, toTimeZone(events.timestamp, 'UTC')) AS exposure_event_uuid,
               argMin(events.`$session_id`, toTimeZone(events.timestamp, 'UTC')) AS exposure_session_id
        FROM events
        LEFT OUTER JOIN
          (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                  person_distinct_id_overrides.distinct_id AS distinct_id
           FROM person_distinct_id_overrides
           WHERE equals(person_distinct_id_overrides.team_id, 99999)
           GROUP BY person_distinct_id_overrides.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id)
        LEFT JOIN
          (SELECT person.id AS id,
                  replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, 'email'), ''), 'null'), '^"|"$', '') AS properties___email
           FROM person
           WHERE and(equals(person.team_id, 99999), in(tuple(person.id, person.version),
                                                         (SELECT person.id AS id, max(person.version) AS version
                                                          FROM person
                                                          WHERE equals(person.team_id, 99999)
                                                          GROUP BY person.id
                                                          HAVING and(ifNull(equals(argMax(person.is_deleted, person.version), 0), 0), ifNull(less(argMax(toTimeZone(person.created_at, 'UTC'), person.version), plus(now64(6, 'UTC'), toIntervalDay(1))), 0))))) SETTINGS optimize_aggregation_in_order=1) AS events__person ON equals(if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id), events__person.id)
        WHERE and(equals(events.team_id, 99999), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('explicit_redacted_timestamp', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('explicit_redacted_timestamp', 6, 'UTC')), in(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''), ['control', 'test']), ifNull(notILike(toString(events__person.properties___email), '%@laterevent.com%'), 1), equals(events.event, '$feature_flag_called'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag'), ''), 'null'), '^"|"$', ''), 'test-experiment'), 0))
        GROUP BY entity_id) AS exposures
     LEFT JOIN
       (SELECT toTimeZone(events.timestamp, 'UTC') AS timestamp,
               if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id) AS entity_id,
               events.event AS event,
               events.uuid AS uuid,
               events.properties AS properties,
               nullIf(nullIf(events.`$session_id`, ''), 'null') AS session_id,
               if(equals(events.event, 'purchase'), 1, 0) AS step_0
        FROM events
        LEFT OUTER JOIN
          (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                  person_distinct_id_overrides.distinct_id AS distinct_id
           FROM person_distinct_id_overrides
           WHERE equals(person_distinct_id_overrides.team_id, 99999)
           GROUP BY person_distinct_id_overrides.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id)
        LEFT JOIN
          (SELECT person.id AS id,
                  replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, 'email'), ''), 'null'), '^"|"$', '') AS properties___email
           FROM person
           WHERE and(equals(person.team_id, 99999), in(tuple(person.id, person.version),
                                                         (SELECT person.id AS id, max(person.version) AS version
                                                          FROM person
                                                          WHERE equals(person.team_id, 99999)
                                                          GROUP BY person.id
                                                          HAVING and(ifNull(equals(argMax(person.is_deleted, person.version), 0), 0), ifNull(less(argMax(toTimeZone(person.created_at, 'UTC'), person.version), plus(now64(6, 'UTC'), toIntervalDay(1))), 0))))) SETTINGS optimize_aggregation_in_order=1) AS events__person ON equals(if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id), events__person.id)
        WHERE and(equals(events.team_id, 99999), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('explicit_redacted_timestamp', 6, 'UTC')), less(toTimeZone(events.timestamp, 'UTC'), toDateTime64('explicit_redacted_timestamp', 6, 'UTC')), ifNull(notILike(toString(events__person.properties___email), '%@laterevent.com%'), 1), equals(events.event, 'purchase'))) AS metric_events ON and(equals(toString(exposures.entity_id), toString(metric_events.entity_id)), greaterOrEquals(metric_events.timestamp, exposures.first_exposure_time))
     GROUP BY exposures.variant,
              exposures.entity_id) AS metric_events
  GROUP BY metric_events.variant
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=600,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=0,
                     max_ast_elements=4000000,
                     max_expanded_ast_elements=4000000,
                     max_bytes_before_external_group_by=0,
                     allow_experimental_analyzer=1,
                     transform_null_in=1,
                     optimize_min_equality_disjunction_chain_length=4294967295,
                     allow_experimental_join_condition=1
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_5_person_id_override_properties_joined_filter_laterevent.2
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_2_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_5_person_id_override_properties_joined_filter_laterevent.3
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_3_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_5_person_id_override_properties_joined_filter_laterevent.4
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_4_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_5_person_id_override_properties_joined_filter_laterevent.5
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_5_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_5_person_id_override_properties_joined_filter_laterevent.6
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_6_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_5_person_id_override_properties_joined_filter_laterevent.7
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_7_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_5_person_id_override_properties_joined_filter_laterevent.8
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_8_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_5_person_id_override_properties_joined_filter_laterevent.9
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_9_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_6_person_id_no_override_properties_on_events_no_filter
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_0_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_6_person_id_no_override_properties_on_events_no_filter.1
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_1_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_6_person_id_no_override_properties_on_events_no_filter.10
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_10_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_6_person_id_no_override_properties_on_events_no_filter.11
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_11_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_6_person_id_no_override_properties_on_events_no_filter.12
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_12_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_6_person_id_no_override_properties_on_events_no_filter.13
  '''
  SELECT metric_events.variant AS variant,
         count(metric_events.entity_id) AS num_users,
         countIf(ifNull(equals((metric_events.value).1, 0), 0)) AS total_sum,
         countIf(ifNull(equals((metric_events.value).1, 0), 0)) AS total_sum_of_squares,
         tuple(countIf(ifNull(greaterOrEquals((metric_events.value).1, 0), 0))) AS step_counts,
         tuple(groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(0, 1)), isNull((metric_events.value).1)
                                                                                                                                                                                                                                                                                                                                                                    and isNull(minus(0, 1)))), groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(1, 1)), isNull((metric_events.value).1)
and isNull(minus(1, 1))))) AS steps_event_data
  FROM
    (SELECT exposures.variant AS variant,
            exposures.entity_id AS entity_id,
            any(exposures.exposure_event_uuid) AS exposure_event_uuid,
            any(exposures.exposure_session_id) AS exposure_session_id,
            arraySort(x -> minus(0, x.1), arrayMap(result -> tuple(result.1, if(and(ifNull(greaterOrEquals(result.1, 0), 0), ifNull(greater(length(result.4), result.1), 0)), if(ifNull(greater(length(arrayElement(result.4, plus(result.1, 1))), 0), 0), toString(arrayElement(result.4, plus(result.1, 1))[1]), ''), '')), aggregate_funnel_array_v8(1, 94608000, 'first_touch', 'ordered', array(array('')), [], arraySort(t -> t.1, groupArray(tuple(accurateCastOrNull(metric_events.timestamp, 'Float64'), metric_events.uuid, array(''), arrayFilter(x -> ifNull(notEquals(x, 0), 1), [multiply(1, metric_events.step_0)])))))))[1] AS value,
            mapFromArrays(groupArray(coalesce(toString(metric_events.uuid), '')), groupArray(coalesce(toString(metric_events.session_id), ''))) AS uuid_to_session
     FROM
       (SELECT events.person_id AS entity_id,
               if(ifNull(greater(count(DISTINCT replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', '')), 1), 0), '$multiple', any(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''))) AS variant,
               min(toTimeZone(events.timestamp, 'UTC')) AS first_exposure_time,
               argMin(events.uuid, toTimeZone(events.timestamp, 'UTC')) AS exposure_event_uuid,
               argMin(events.`$session_id`, toTimeZone(events.timestamp, 'UTC')) AS exposure_session_id
        FROM events
        WHERE and(equals(events.team_id, 99999), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-01-31 00:00:00.000000', 6, 'UTC')), in(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''), ['control', 'test']), ifNull(notILike(toString(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.person_properties, 'email'), ''), 'null'), '^"|"$', '')), '%@posthog.com%'), 1), equals(events.event, '$feature_flag_called'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag'), ''), 'null'), '^"|"$', ''), 'test-experiment'), 0))
        GROUP BY entity_id) AS exposures
     LEFT JOIN
       (SELECT toTimeZone(events.timestamp, 'UTC') AS timestamp,
               events.person_id AS entity_id,
               events.event AS event,
               events.uuid AS uuid,
               events.properties AS properties,
               nullIf(nullIf(events.`$session_id`, ''), 'null') AS session_id,
               if(equals(events.event, 'purchase'), 1, 0) AS step_0
        FROM events
        WHERE and(equals(events.team_id, 99999), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), less(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-01-31 00:00:00.000000', 6, 'UTC')), ifNull(notILike(toString(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.person_properties, 'email'), ''), 'null'), '^"|"$', '')), '%@posthog.com%'), 1), equals(events.event, 'purchase'))) AS metric_events ON and(equals(toString(exposures.entity_id), toString(metric_events.entity_id)), greaterOrEquals(metric_events.timestamp, exposures.first_exposure_time))
     GROUP BY exposures.variant,
              exposures.entity_id) AS metric_events
  GROUP BY metric_events.variant
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=600,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=0,
                     max_ast_elements=4000000,
                     max_expanded_ast_elements=4000000,
                     max_bytes_before_external_group_by=0,
                     allow_experimental_analyzer=1,
                     transform_null_in=1,
                     optimize_min_equality_disjunction_chain_length=4294967295,
                     allow_experimental_join_condition=1
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_6_person_id_no_override_properties_on_events_no_filter.2
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_2_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_6_person_id_no_override_properties_on_events_no_filter.3
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_3_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_6_person_id_no_override_properties_on_events_no_filter.4
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_4_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_6_person_id_no_override_properties_on_events_no_filter.5
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_5_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_6_person_id_no_override_properties_on_events_no_filter.6
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_6_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_6_person_id_no_override_properties_on_events_no_filter.7
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_7_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_6_person_id_no_override_properties_on_events_no_filter.8
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_8_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_6_person_id_no_override_properties_on_events_no_filter.9
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_9_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_7_person_id_no_override_properties_on_events_filter_earlierevent
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_0_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_7_person_id_no_override_properties_on_events_filter_earlierevent.1
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_1_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_7_person_id_no_override_properties_on_events_filter_earlierevent.10
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_10_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_7_person_id_no_override_properties_on_events_filter_earlierevent.11
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_11_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_7_person_id_no_override_properties_on_events_filter_earlierevent.12
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_12_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_7_person_id_no_override_properties_on_events_filter_earlierevent.13
  '''
  SELECT metric_events.variant AS variant,
         count(metric_events.entity_id) AS num_users,
         countIf(ifNull(equals((metric_events.value).1, 0), 0)) AS total_sum,
         countIf(ifNull(equals((metric_events.value).1, 0), 0)) AS total_sum_of_squares,
         tuple(countIf(ifNull(greaterOrEquals((metric_events.value).1, 0), 0))) AS step_counts,
         tuple(groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(0, 1)), isNull((metric_events.value).1)
                                                                                                                                                                                                                                                                                                                                                                    and isNull(minus(0, 1)))), groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(1, 1)), isNull((metric_events.value).1)
and isNull(minus(1, 1))))) AS steps_event_data
  FROM
    (SELECT exposures.variant AS variant,
            exposures.entity_id AS entity_id,
            any(exposures.exposure_event_uuid) AS exposure_event_uuid,
            any(exposures.exposure_session_id) AS exposure_session_id,
            arraySort(x -> minus(0, x.1), arrayMap(result -> tuple(result.1, if(and(ifNull(greaterOrEquals(result.1, 0), 0), ifNull(greater(length(result.4), result.1), 0)), if(ifNull(greater(length(arrayElement(result.4, plus(result.1, 1))), 0), 0), toString(arrayElement(result.4, plus(result.1, 1))[1]), ''), '')), aggregate_funnel_array_v8(1, 94608000, 'first_touch', 'ordered', array(array('')), [], arraySort(t -> t.1, groupArray(tuple(accurateCastOrNull(metric_events.timestamp, 'Float64'), metric_events.uuid, array(''), arrayFilter(x -> ifNull(notEquals(x, 0), 1), [multiply(1, metric_events.step_0)])))))))[1] AS value,
            mapFromArrays(groupArray(coalesce(toString(metric_events.uuid), '')), groupArray(coalesce(toString(metric_events.session_id), ''))) AS uuid_to_session
     FROM
       (SELECT events.person_id AS entity_id,
               if(ifNull(greater(count(DISTINCT replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', '')), 1), 0), '$multiple', any(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''))) AS variant,
               min(toTimeZone(events.timestamp, 'UTC')) AS first_exposure_time,
               argMin(events.uuid, toTimeZone(events.timestamp, 'UTC')) AS exposure_event_uuid,
               argMin(events.`$session_id`, toTimeZone(events.timestamp, 'UTC')) AS exposure_session_id
        FROM events
        WHERE and(equals(events.team_id, 99999), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-01-31 00:00:00.000000', 6, 'UTC')), in(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''), ['control', 'test']), ifNull(notILike(toString(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.person_properties, 'email'), ''), 'null'), '^"|"$', '')), '%@earlierevent.com%'), 1), equals(events.event, '$feature_flag_called'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag'), ''), 'null'), '^"|"$', ''), 'test-experiment'), 0))
        GROUP BY entity_id) AS exposures
     LEFT JOIN
       (SELECT toTimeZone(events.timestamp, 'UTC') AS timestamp,
               events.person_id AS entity_id,
               events.event AS event,
               events.uuid AS uuid,
               events.properties AS properties,
               nullIf(nullIf(events.`$session_id`, ''), 'null') AS session_id,
               if(equals(events.event, 'purchase'), 1, 0) AS step_0
        FROM events
        WHERE and(equals(events.team_id, 99999), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), less(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-01-31 00:00:00.000000', 6, 'UTC')), ifNull(notILike(toString(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.person_properties, 'email'), ''), 'null'), '^"|"$', '')), '%@earlierevent.com%'), 1), equals(events.event, 'purchase'))) AS metric_events ON and(equals(toString(exposures.entity_id), toString(metric_events.entity_id)), greaterOrEquals(metric_events.timestamp, exposures.first_exposure_time))
     GROUP BY exposures.variant,
              exposures.entity_id) AS metric_events
  GROUP BY metric_events.variant
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=600,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=0,
                     max_ast_elements=4000000,
                     max_expanded_ast_elements=4000000,
                     max_bytes_before_external_group_by=0,
                     allow_experimental_analyzer=1,
                     transform_null_in=1,
                     optimize_min_equality_disjunction_chain_length=4294967295,
                     allow_experimental_join_condition=1
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_7_person_id_no_override_properties_on_events_filter_earlierevent.2
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_2_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_7_person_id_no_override_properties_on_events_filter_earlierevent.3
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_3_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_7_person_id_no_override_properties_on_events_filter_earlierevent.4
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_4_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_7_person_id_no_override_properties_on_events_filter_earlierevent.5
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_5_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_7_person_id_no_override_properties_on_events_filter_earlierevent.6
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_6_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_7_person_id_no_override_properties_on_events_filter_earlierevent.7
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_7_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_7_person_id_no_override_properties_on_events_filter_earlierevent.8
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_8_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_7_person_id_no_override_properties_on_events_filter_earlierevent.9
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_9_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_8_person_id_no_override_properties_on_events_filter_laterevent
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_0_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_8_person_id_no_override_properties_on_events_filter_laterevent.1
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_1_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_8_person_id_no_override_properties_on_events_filter_laterevent.10
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_10_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_8_person_id_no_override_properties_on_events_filter_laterevent.11
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_11_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_8_person_id_no_override_properties_on_events_filter_laterevent.12
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_12_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_8_person_id_no_override_properties_on_events_filter_laterevent.13
  '''
  SELECT metric_events.variant AS variant,
         count(metric_events.entity_id) AS num_users,
         countIf(ifNull(equals((metric_events.value).1, 0), 0)) AS total_sum,
         countIf(ifNull(equals((metric_events.value).1, 0), 0)) AS total_sum_of_squares,
         tuple(countIf(ifNull(greaterOrEquals((metric_events.value).1, 0), 0))) AS step_counts,
         tuple(groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(0, 1)), isNull((metric_events.value).1)
                                                                                                                                                                                                                                                                                                                                                                    and isNull(minus(0, 1)))), groupArraySampleIf(100)(if(ifNull(notEquals((metric_events.value).2, ''), 1), tuple(toString(metric_events.entity_id), metric_events.uuid_to_session[(metric_events.value).2], (metric_events.value).2), tuple(toString(metric_events.entity_id), toString(metric_events.exposure_session_id), toString(metric_events.exposure_event_uuid))), ifNull(equals((metric_events.value).1, minus(1, 1)), isNull((metric_events.value).1)
and isNull(minus(1, 1))))) AS steps_event_data
  FROM
    (SELECT exposures.variant AS variant,
            exposures.entity_id AS entity_id,
            any(exposures.exposure_event_uuid) AS exposure_event_uuid,
            any(exposures.exposure_session_id) AS exposure_session_id,
            arraySort(x -> minus(0, x.1), arrayMap(result -> tuple(result.1, if(and(ifNull(greaterOrEquals(result.1, 0), 0), ifNull(greater(length(result.4), result.1), 0)), if(ifNull(greater(length(arrayElement(result.4, plus(result.1, 1))), 0), 0), toString(arrayElement(result.4, plus(result.1, 1))[1]), ''), '')), aggregate_funnel_array_v8(1, 94608000, 'first_touch', 'ordered', array(array('')), [], arraySort(t -> t.1, groupArray(tuple(accurateCastOrNull(metric_events.timestamp, 'Float64'), metric_events.uuid, array(''), arrayFilter(x -> ifNull(notEquals(x, 0), 1), [multiply(1, metric_events.step_0)])))))))[1] AS value,
            mapFromArrays(groupArray(coalesce(toString(metric_events.uuid), '')), groupArray(coalesce(toString(metric_events.session_id), ''))) AS uuid_to_session
     FROM
       (SELECT events.person_id AS entity_id,
               if(ifNull(greater(count(DISTINCT replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', '')), 1), 0), '$multiple', any(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''))) AS variant,
               min(toTimeZone(events.timestamp, 'UTC')) AS first_exposure_time,
               argMin(events.uuid, toTimeZone(events.timestamp, 'UTC')) AS exposure_event_uuid,
               argMin(events.`$session_id`, toTimeZone(events.timestamp, 'UTC')) AS exposure_session_id
        FROM events
        WHERE and(equals(events.team_id, 99999), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-01-31 00:00:00.000000', 6, 'UTC')), in(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''), ['control', 'test']), ifNull(notILike(toString(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.person_properties, 'email'), ''), 'null'), '^"|"$', '')), '%@laterevent.com%'), 1), equals(events.event, '$feature_flag_called'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$feature_flag'), ''), 'null'), '^"|"$', ''), 'test-experiment'), 0))
        GROUP BY entity_id) AS exposures
     LEFT JOIN
       (SELECT toTimeZone(events.timestamp, 'UTC') AS timestamp,
               events.person_id AS entity_id,
               events.event AS event,
               events.uuid AS uuid,
               events.properties AS properties,
               nullIf(nullIf(events.`$session_id`, ''), 'null') AS session_id,
               if(equals(events.event, 'purchase'), 1, 0) AS step_0
        FROM events
        WHERE and(equals(events.team_id, 99999), greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), less(toTimeZone(events.timestamp, 'UTC'), toDateTime64('2020-01-31 00:00:00.000000', 6, 'UTC')), ifNull(notILike(toString(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.person_properties, 'email'), ''), 'null'), '^"|"$', '')), '%@laterevent.com%'), 1), equals(events.event, 'purchase'))) AS metric_events ON and(equals(toString(exposures.entity_id), toString(metric_events.entity_id)), greaterOrEquals(metric_events.timestamp, exposures.first_exposure_time))
     GROUP BY exposures.variant,
              exposures.entity_id) AS metric_events
  GROUP BY metric_events.variant
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=600,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=0,
                     max_ast_elements=4000000,
                     max_expanded_ast_elements=4000000,
                     max_bytes_before_external_group_by=0,
                     allow_experimental_analyzer=1,
                     transform_null_in=1,
                     optimize_min_equality_disjunction_chain_length=4294967295,
                     allow_experimental_join_condition=1
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_8_person_id_no_override_properties_on_events_filter_laterevent.2
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_2_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_8_person_id_no_override_properties_on_events_filter_laterevent.3
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_3_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_8_person_id_no_override_properties_on_events_filter_laterevent.4
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_4_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_8_person_id_no_override_properties_on_events_filter_laterevent.5
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_5_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_8_person_id_no_override_properties_on_events_filter_laterevent.6
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_6_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_8_person_id_no_override_properties_on_events_filter_laterevent.7
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_7_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_8_person_id_no_override_properties_on_events_filter_laterevent.8
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_8_distinct_id_2'
  '''
# ---
# name: TestExperimentFunnelMetric.test_query_runner_with_persons_on_events_mode_8_person_id_no_override_properties_on_events_filter_laterevent.9
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person_id_9_distinct_id_2'
  '''
# ---
