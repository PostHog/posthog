# serializer version: 1
# name: TestExperimentTrendsQueryRunner.test_query_runner_with_action
  '''
  SELECT date AS date,
         total AS total,
         breakdown_value AS breakdown_value
  FROM
    (SELECT arrayMap(number -> plus(toStartOfInterval(assumeNotNull(toDateTime('2020-01-01 12:00:00', 'UTC')), toIntervalDay(1)), toIntervalDay(number)), range(0, plus(coalesce(dateDiff('day', toStartOfInterval(assumeNotNull(toDateTime('2020-01-01 12:00:00', 'UTC')), toIntervalDay(1)), toStartOfInterval(assumeNotNull(toDateTime('2020-01-15 12:00:00', 'UTC')), toIntervalDay(1)))), 1))) AS date,
            arrayMap(d -> arraySum(arrayMap((v, dd) -> if(ifNull(equals(dd, d), isNull(dd)
                                                                 and isNull(d)), v, 0), vals, days)), date) AS
     values,
            arrayMap(i -> arraySum(arraySlice(
                                              values, 1, i)), arrayEnumerate(
                                                                             values)) AS total,
            breakdown_value AS breakdown_value
     FROM
       (SELECT groupArray(top_n_and_other_breakdown_values.day_start) AS days,
               groupArray(top_n_and_other_breakdown_values.value) AS vals,
               top_n_and_other_breakdown_values.breakdown_value AS breakdown_value
        FROM
          (SELECT day_start AS day_start,
                  value AS value,
                  breakdown_value AS breakdown_value
           FROM
             (SELECT top_n_breakdown_values.day_start AS day_start,
                     top_n_breakdown_values.value AS value,
                     top_n_breakdown_values.breakdown_value AS breakdown_value
              FROM
                (SELECT ranked_breakdown_values.day_start AS day_start,
                        ranked_breakdown_values.count AS value,
                        ranked_breakdown_values.breakdown_value AS breakdown_value
                 FROM
                   (SELECT breakdown_series.count AS count,
                           breakdown_series.day_start AS day_start,
                           breakdown_series.breakdown_value AS breakdown_value,
                           ranked_breakdown_totals.ordering AS ordering,
                           ranked_breakdown_totals.breakdown_rank AS breakdown_rank
                    FROM
                      (SELECT count AS count,
                                       day_start AS day_start,
                                       breakdown_value AS breakdown_value
                       FROM
                         (SELECT sum(total) AS count,
                                 day_start AS day_start,
                                 breakdown_value AS breakdown_value
                          FROM
                            (SELECT count() AS total,
                                    toStartOfDay(toTimeZone(e.timestamp, 'UTC')) AS day_start,
                                    ifNull(nullIf(toString(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$feature/test-experiment'), ''), 'null'), '^"|"$', '')), ''), '$$_posthog_breakdown_null_$$') AS breakdown_value
                             FROM events AS e SAMPLE 1
                             WHERE and(equals(e.team_id, 99999), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(toDateTime('2020-01-01 12:00:00', 'UTC'))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(toDateTime('2020-01-15 12:00:00', 'UTC'))), equals(e.event, '$pageview'), in(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$feature/test-experiment'), ''), 'null'), '^"|"$', ''), tuple('control', 'test')))
                             GROUP BY day_start,
                                      breakdown_value)
                          GROUP BY day_start,
                                   breakdown_value
                          ORDER BY day_start ASC, breakdown_value ASC)) AS breakdown_series
                    JOIN
                      (SELECT totals_per_breakdown.breakdown_value AS breakdown_value,
                              totals_per_breakdown.ordering AS ordering,
                              totals_per_breakdown.total_count_for_breakdown AS total_count_for_breakdown,
                              row_number() OVER (
                                                 ORDER BY totals_per_breakdown.ordering ASC, totals_per_breakdown.total_count_for_breakdown DESC, totals_per_breakdown.breakdown_value ASC) AS breakdown_rank
                       FROM
                         (SELECT breakdown_series.breakdown_value AS breakdown_value,
                                 sum(breakdown_series.count) AS total_count_for_breakdown,
                                 if(ifNull(equals(breakdown_series.breakdown_value, '$$_posthog_breakdown_other_$$'), 0), 2, if(ifNull(equals(breakdown_series.breakdown_value, '$$_posthog_breakdown_null_$$'), 0), 1, 0)) AS ordering
                          FROM
                            (SELECT count AS count,
                                             day_start AS day_start,
                                             breakdown_value AS breakdown_value
                             FROM
                               (SELECT sum(total) AS count,
                                       day_start AS day_start,
                                       breakdown_value AS breakdown_value
                                FROM
                                  (SELECT count() AS total,
                                          toStartOfDay(toTimeZone(e.timestamp, 'UTC')) AS day_start,
                                          ifNull(nullIf(toString(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$feature/test-experiment'), ''), 'null'), '^"|"$', '')), ''), '$$_posthog_breakdown_null_$$') AS breakdown_value
                                   FROM events AS e SAMPLE 1
                                   WHERE and(equals(e.team_id, 99999), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(toDateTime('2020-01-01 12:00:00', 'UTC'))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(toDateTime('2020-01-15 12:00:00', 'UTC'))), equals(e.event, '$pageview'), in(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$feature/test-experiment'), ''), 'null'), '^"|"$', ''), tuple('control', 'test')))
                                   GROUP BY day_start,
                                            breakdown_value)
                                GROUP BY day_start,
                                         breakdown_value
                                ORDER BY day_start ASC, breakdown_value ASC)) AS breakdown_series
                          GROUP BY breakdown_series.breakdown_value) AS totals_per_breakdown) AS ranked_breakdown_totals ON equals(ranked_breakdown_totals.breakdown_value, breakdown_series.breakdown_value)) AS ranked_breakdown_values
                 WHERE ifNull(lessOrEquals(ranked_breakdown_values.breakdown_rank, 25), 0)) AS top_n_breakdown_values
              UNION ALL SELECT other_breakdown_values.day_start AS day_start,
                               other_breakdown_values.value AS value,
                               other_breakdown_values.breakdown_value AS breakdown_value
              FROM
                (SELECT ranked_breakdown_values.day_start AS day_start,
                        sum(ranked_breakdown_values.count) AS value,
                        '$$_posthog_breakdown_other_$$' AS breakdown_value
                 FROM
                   (SELECT breakdown_series.count AS count,
                           breakdown_series.day_start AS day_start,
                           breakdown_series.breakdown_value AS breakdown_value,
                           ranked_breakdown_totals.ordering AS ordering,
                           ranked_breakdown_totals.breakdown_rank AS breakdown_rank
                    FROM
                      (SELECT count AS count,
                                       day_start AS day_start,
                                       breakdown_value AS breakdown_value
                       FROM
                         (SELECT sum(total) AS count,
                                 day_start AS day_start,
                                 breakdown_value AS breakdown_value
                          FROM
                            (SELECT count() AS total,
                                    toStartOfDay(toTimeZone(e.timestamp, 'UTC')) AS day_start,
                                    ifNull(nullIf(toString(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$feature/test-experiment'), ''), 'null'), '^"|"$', '')), ''), '$$_posthog_breakdown_null_$$') AS breakdown_value
                             FROM events AS e SAMPLE 1
                             WHERE and(equals(e.team_id, 99999), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(toDateTime('2020-01-01 12:00:00', 'UTC'))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(toDateTime('2020-01-15 12:00:00', 'UTC'))), equals(e.event, '$pageview'), in(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$feature/test-experiment'), ''), 'null'), '^"|"$', ''), tuple('control', 'test')))
                             GROUP BY day_start,
                                      breakdown_value)
                          GROUP BY day_start,
                                   breakdown_value
                          ORDER BY day_start ASC, breakdown_value ASC)) AS breakdown_series
                    JOIN
                      (SELECT totals_per_breakdown.breakdown_value AS breakdown_value,
                              totals_per_breakdown.ordering AS ordering,
                              totals_per_breakdown.total_count_for_breakdown AS total_count_for_breakdown,
                              row_number() OVER (
                                                 ORDER BY totals_per_breakdown.ordering ASC, totals_per_breakdown.total_count_for_breakdown DESC, totals_per_breakdown.breakdown_value ASC) AS breakdown_rank
                       FROM
                         (SELECT breakdown_series.breakdown_value AS breakdown_value,
                                 sum(breakdown_series.count) AS total_count_for_breakdown,
                                 if(ifNull(equals(breakdown_series.breakdown_value, '$$_posthog_breakdown_other_$$'), 0), 2, if(ifNull(equals(breakdown_series.breakdown_value, '$$_posthog_breakdown_null_$$'), 0), 1, 0)) AS ordering
                          FROM
                            (SELECT count AS count,
                                             day_start AS day_start,
                                             breakdown_value AS breakdown_value
                             FROM
                               (SELECT sum(total) AS count,
                                       day_start AS day_start,
                                       breakdown_value AS breakdown_value
                                FROM
                                  (SELECT count() AS total,
                                          toStartOfDay(toTimeZone(e.timestamp, 'UTC')) AS day_start,
                                          ifNull(nullIf(toString(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$feature/test-experiment'), ''), 'null'), '^"|"$', '')), ''), '$$_posthog_breakdown_null_$$') AS breakdown_value
                                   FROM events AS e SAMPLE 1
                                   WHERE and(equals(e.team_id, 99999), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(toDateTime('2020-01-01 12:00:00', 'UTC'))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(toDateTime('2020-01-15 12:00:00', 'UTC'))), equals(e.event, '$pageview'), in(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$feature/test-experiment'), ''), 'null'), '^"|"$', ''), tuple('control', 'test')))
                                   GROUP BY day_start,
                                            breakdown_value)
                                GROUP BY day_start,
                                         breakdown_value
                                ORDER BY day_start ASC, breakdown_value ASC)) AS breakdown_series
                          GROUP BY breakdown_series.breakdown_value) AS totals_per_breakdown) AS ranked_breakdown_totals ON equals(ranked_breakdown_totals.breakdown_value, breakdown_series.breakdown_value)) AS ranked_breakdown_values
                 WHERE ifNull(greater(ranked_breakdown_values.breakdown_rank, 25), 0)
                 GROUP BY breakdown_value,
                          ranked_breakdown_values.day_start) AS other_breakdown_values)
           ORDER BY day_start ASC, value ASC) AS top_n_and_other_breakdown_values
        GROUP BY top_n_and_other_breakdown_values.breakdown_value)
     ORDER BY if(ifNull(equals(breakdown_value, '$$_posthog_breakdown_other_$$'), 0), 2, if(ifNull(equals(breakdown_value, '$$_posthog_breakdown_null_$$'), 0), 1, 0)) ASC, arraySum(total) DESC, breakdown_value ASC)
  LIMIT 50000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1,
                       format_csv_allow_double_quotes=0,
                       max_ast_elements=4000000,
                       max_expanded_ast_elements=4000000,
                       max_bytes_before_external_group_by=0,
                       transform_null_in=1,
                       optimize_min_equality_disjunction_chain_length=4294967295,
                       allow_experimental_join_condition=1
  '''
# ---
# name: TestExperimentTrendsQueryRunner.test_query_runner_with_action.1
  '''
  SELECT date AS date,
         total AS total,
         breakdown_value AS breakdown_value
  FROM
    (SELECT arrayMap(number -> plus(toStartOfInterval(assumeNotNull(toDateTime('2020-01-01 12:00:00', 'UTC')), toIntervalDay(1)), toIntervalDay(number)), range(0, plus(coalesce(dateDiff('day', toStartOfInterval(assumeNotNull(toDateTime('2020-01-01 12:00:00', 'UTC')), toIntervalDay(1)), toStartOfInterval(assumeNotNull(toDateTime('2020-01-15 12:00:00', 'UTC')), toIntervalDay(1)))), 1))) AS date,
            arrayMap(d -> arraySum(arrayMap((v, dd) -> if(ifNull(equals(dd, d), isNull(dd)
                                                                 and isNull(d)), v, 0), vals, days)), date) AS
     values,
            arrayMap(i -> arraySum(arraySlice(
                                              values, 1, i)), arrayEnumerate(
                                                                             values)) AS total,
            breakdown_value AS breakdown_value
     FROM
       (SELECT groupArray(top_n_and_other_breakdown_values.day_start) AS days,
               groupArray(top_n_and_other_breakdown_values.value) AS vals,
               top_n_and_other_breakdown_values.breakdown_value AS breakdown_value
        FROM
          (SELECT day_start AS day_start,
                  value AS value,
                  breakdown_value AS breakdown_value
           FROM
             (SELECT top_n_breakdown_values.day_start AS day_start,
                     top_n_breakdown_values.value AS value,
                     top_n_breakdown_values.breakdown_value AS breakdown_value
              FROM
                (SELECT ranked_breakdown_values.day_start AS day_start,
                        ranked_breakdown_values.count AS value,
                        ranked_breakdown_values.breakdown_value AS breakdown_value
                 FROM
                   (SELECT breakdown_series.count AS count,
                           breakdown_series.day_start AS day_start,
                           breakdown_series.breakdown_value AS breakdown_value,
                           ranked_breakdown_totals.ordering AS ordering,
                           ranked_breakdown_totals.breakdown_rank AS breakdown_rank
                    FROM
                      (SELECT count AS count,
                                       day_start AS day_start,
                                       breakdown_value AS breakdown_value
                       FROM
                         (SELECT sum(total) AS count,
                                 day_start AS day_start,
                                 breakdown_value AS breakdown_value
                          FROM
                            (SELECT count(DISTINCT if(not(empty(e__override.distinct_id)), e__override.person_id, e.person_id)) AS total,
                                    min(toStartOfDay(toTimeZone(e.timestamp, 'UTC'))) AS day_start,
                                    ifNull(nullIf(toString(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', '')), ''), '$$_posthog_breakdown_null_$$') AS breakdown_value
                             FROM events AS e SAMPLE 1
                             LEFT OUTER JOIN
                               (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                                       person_distinct_id_overrides.distinct_id AS distinct_id
                                FROM person_distinct_id_overrides
                                WHERE equals(person_distinct_id_overrides.team_id, 99999)
                                GROUP BY person_distinct_id_overrides.distinct_id
                                HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS e__override ON equals(e.distinct_id, e__override.distinct_id)
                             WHERE and(equals(e.team_id, 99999), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(toDateTime('2020-01-01 12:00:00', 'UTC'))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(toDateTime('2020-01-15 12:00:00', 'UTC'))), equals(e.event, '$feature_flag_called'), and(in(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''), tuple('control', 'test')), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$feature_flag'), ''), 'null'), '^"|"$', ''), 'test-experiment'), 0)))
                             GROUP BY if(not(empty(e__override.distinct_id)), e__override.person_id, e.person_id),
                                      breakdown_value)
                          GROUP BY day_start,
                                   breakdown_value
                          ORDER BY day_start ASC, breakdown_value ASC)) AS breakdown_series
                    JOIN
                      (SELECT totals_per_breakdown.breakdown_value AS breakdown_value,
                              totals_per_breakdown.ordering AS ordering,
                              totals_per_breakdown.total_count_for_breakdown AS total_count_for_breakdown,
                              row_number() OVER (
                                                 ORDER BY totals_per_breakdown.ordering ASC, totals_per_breakdown.total_count_for_breakdown DESC, totals_per_breakdown.breakdown_value ASC) AS breakdown_rank
                       FROM
                         (SELECT breakdown_series.breakdown_value AS breakdown_value,
                                 sum(breakdown_series.count) AS total_count_for_breakdown,
                                 if(ifNull(equals(breakdown_series.breakdown_value, '$$_posthog_breakdown_other_$$'), 0), 2, if(ifNull(equals(breakdown_series.breakdown_value, '$$_posthog_breakdown_null_$$'), 0), 1, 0)) AS ordering
                          FROM
                            (SELECT count AS count,
                                             day_start AS day_start,
                                             breakdown_value AS breakdown_value
                             FROM
                               (SELECT sum(total) AS count,
                                       day_start AS day_start,
                                       breakdown_value AS breakdown_value
                                FROM
                                  (SELECT count(DISTINCT if(not(empty(e__override.distinct_id)), e__override.person_id, e.person_id)) AS total,
                                          min(toStartOfDay(toTimeZone(e.timestamp, 'UTC'))) AS day_start,
                                          ifNull(nullIf(toString(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', '')), ''), '$$_posthog_breakdown_null_$$') AS breakdown_value
                                   FROM events AS e SAMPLE 1
                                   LEFT OUTER JOIN
                                     (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                                             person_distinct_id_overrides.distinct_id AS distinct_id
                                      FROM person_distinct_id_overrides
                                      WHERE equals(person_distinct_id_overrides.team_id, 99999)
                                      GROUP BY person_distinct_id_overrides.distinct_id
                                      HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS e__override ON equals(e.distinct_id, e__override.distinct_id)
                                   WHERE and(equals(e.team_id, 99999), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(toDateTime('2020-01-01 12:00:00', 'UTC'))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(toDateTime('2020-01-15 12:00:00', 'UTC'))), equals(e.event, '$feature_flag_called'), and(in(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''), tuple('control', 'test')), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$feature_flag'), ''), 'null'), '^"|"$', ''), 'test-experiment'), 0)))
                                   GROUP BY if(not(empty(e__override.distinct_id)), e__override.person_id, e.person_id),
                                            breakdown_value)
                                GROUP BY day_start,
                                         breakdown_value
                                ORDER BY day_start ASC, breakdown_value ASC)) AS breakdown_series
                          GROUP BY breakdown_series.breakdown_value) AS totals_per_breakdown) AS ranked_breakdown_totals ON equals(ranked_breakdown_totals.breakdown_value, breakdown_series.breakdown_value)) AS ranked_breakdown_values
                 WHERE ifNull(lessOrEquals(ranked_breakdown_values.breakdown_rank, 25), 0)) AS top_n_breakdown_values
              UNION ALL SELECT other_breakdown_values.day_start AS day_start,
                               other_breakdown_values.value AS value,
                               other_breakdown_values.breakdown_value AS breakdown_value
              FROM
                (SELECT ranked_breakdown_values.day_start AS day_start,
                        sum(ranked_breakdown_values.count) AS value,
                        '$$_posthog_breakdown_other_$$' AS breakdown_value
                 FROM
                   (SELECT breakdown_series.count AS count,
                           breakdown_series.day_start AS day_start,
                           breakdown_series.breakdown_value AS breakdown_value,
                           ranked_breakdown_totals.ordering AS ordering,
                           ranked_breakdown_totals.breakdown_rank AS breakdown_rank
                    FROM
                      (SELECT count AS count,
                                       day_start AS day_start,
                                       breakdown_value AS breakdown_value
                       FROM
                         (SELECT sum(total) AS count,
                                 day_start AS day_start,
                                 breakdown_value AS breakdown_value
                          FROM
                            (SELECT count(DISTINCT if(not(empty(e__override.distinct_id)), e__override.person_id, e.person_id)) AS total,
                                    min(toStartOfDay(toTimeZone(e.timestamp, 'UTC'))) AS day_start,
                                    ifNull(nullIf(toString(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', '')), ''), '$$_posthog_breakdown_null_$$') AS breakdown_value
                             FROM events AS e SAMPLE 1
                             LEFT OUTER JOIN
                               (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                                       person_distinct_id_overrides.distinct_id AS distinct_id
                                FROM person_distinct_id_overrides
                                WHERE equals(person_distinct_id_overrides.team_id, 99999)
                                GROUP BY person_distinct_id_overrides.distinct_id
                                HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS e__override ON equals(e.distinct_id, e__override.distinct_id)
                             WHERE and(equals(e.team_id, 99999), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(toDateTime('2020-01-01 12:00:00', 'UTC'))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(toDateTime('2020-01-15 12:00:00', 'UTC'))), equals(e.event, '$feature_flag_called'), and(in(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''), tuple('control', 'test')), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$feature_flag'), ''), 'null'), '^"|"$', ''), 'test-experiment'), 0)))
                             GROUP BY if(not(empty(e__override.distinct_id)), e__override.person_id, e.person_id),
                                      breakdown_value)
                          GROUP BY day_start,
                                   breakdown_value
                          ORDER BY day_start ASC, breakdown_value ASC)) AS breakdown_series
                    JOIN
                      (SELECT totals_per_breakdown.breakdown_value AS breakdown_value,
                              totals_per_breakdown.ordering AS ordering,
                              totals_per_breakdown.total_count_for_breakdown AS total_count_for_breakdown,
                              row_number() OVER (
                                                 ORDER BY totals_per_breakdown.ordering ASC, totals_per_breakdown.total_count_for_breakdown DESC, totals_per_breakdown.breakdown_value ASC) AS breakdown_rank
                       FROM
                         (SELECT breakdown_series.breakdown_value AS breakdown_value,
                                 sum(breakdown_series.count) AS total_count_for_breakdown,
                                 if(ifNull(equals(breakdown_series.breakdown_value, '$$_posthog_breakdown_other_$$'), 0), 2, if(ifNull(equals(breakdown_series.breakdown_value, '$$_posthog_breakdown_null_$$'), 0), 1, 0)) AS ordering
                          FROM
                            (SELECT count AS count,
                                             day_start AS day_start,
                                             breakdown_value AS breakdown_value
                             FROM
                               (SELECT sum(total) AS count,
                                       day_start AS day_start,
                                       breakdown_value AS breakdown_value
                                FROM
                                  (SELECT count(DISTINCT if(not(empty(e__override.distinct_id)), e__override.person_id, e.person_id)) AS total,
                                          min(toStartOfDay(toTimeZone(e.timestamp, 'UTC'))) AS day_start,
                                          ifNull(nullIf(toString(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', '')), ''), '$$_posthog_breakdown_null_$$') AS breakdown_value
                                   FROM events AS e SAMPLE 1
                                   LEFT OUTER JOIN
                                     (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                                             person_distinct_id_overrides.distinct_id AS distinct_id
                                      FROM person_distinct_id_overrides
                                      WHERE equals(person_distinct_id_overrides.team_id, 99999)
                                      GROUP BY person_distinct_id_overrides.distinct_id
                                      HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS e__override ON equals(e.distinct_id, e__override.distinct_id)
                                   WHERE and(equals(e.team_id, 99999), greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(toDateTime('2020-01-01 12:00:00', 'UTC'))), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), assumeNotNull(toDateTime('2020-01-15 12:00:00', 'UTC'))), equals(e.event, '$feature_flag_called'), and(in(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$feature_flag_response'), ''), 'null'), '^"|"$', ''), tuple('control', 'test')), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$feature_flag'), ''), 'null'), '^"|"$', ''), 'test-experiment'), 0)))
                                   GROUP BY if(not(empty(e__override.distinct_id)), e__override.person_id, e.person_id),
                                            breakdown_value)
                                GROUP BY day_start,
                                         breakdown_value
                                ORDER BY day_start ASC, breakdown_value ASC)) AS breakdown_series
                          GROUP BY breakdown_series.breakdown_value) AS totals_per_breakdown) AS ranked_breakdown_totals ON equals(ranked_breakdown_totals.breakdown_value, breakdown_series.breakdown_value)) AS ranked_breakdown_values
                 WHERE ifNull(greater(ranked_breakdown_values.breakdown_rank, 25), 0)
                 GROUP BY breakdown_value,
                          ranked_breakdown_values.day_start) AS other_breakdown_values)
           ORDER BY day_start ASC, value ASC) AS top_n_and_other_breakdown_values
        GROUP BY top_n_and_other_breakdown_values.breakdown_value)
     ORDER BY if(ifNull(equals(breakdown_value, '$$_posthog_breakdown_other_$$'), 0), 2, if(ifNull(equals(breakdown_value, '$$_posthog_breakdown_null_$$'), 0), 1, 0)) ASC, arraySum(total) DESC, breakdown_value ASC)
  LIMIT 50000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1,
                       format_csv_allow_double_quotes=0,
                       max_ast_elements=4000000,
                       max_expanded_ast_elements=4000000,
                       max_bytes_before_external_group_by=0,
                       transform_null_in=1,
                       optimize_min_equality_disjunction_chain_length=4294967295,
                       allow_experimental_join_condition=1
  '''
# ---
