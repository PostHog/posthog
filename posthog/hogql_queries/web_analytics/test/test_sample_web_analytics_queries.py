"""
Sample web analytics queries for HogQL snapshot testing.

This is a special test file designed to capture HogQL query snapshots from the web analytics components.
These snapshots serve as living documentation of the SQL queries generated by our web analytics features
and help detect unintended query changes during development.

But mostly, they can help us on some support tickets when people ask "what query Web Analytics is running"
or to come up with some SQL queries. We already have the clickhouse snapshots, but by using hogQL we can
use them on their SQL editor or the /query api in a easier way.

## Test Coverage

This file provides comprehensive test coverage for all web analytics query types, with separate
test methods for each breakdown type. Each test method generates its own HogQL snapshot.

Let's try to keep this up to date with the components used in the WebAnalyticsScene.
"""

from posthog.test.base import APIBaseTest, ClickhouseTestMixin, snapshot_hogql_queries

from posthog.schema import (
    BaseMathType,
    ChartDisplayType,
    DateRange,
    EventPropertyFilter,
    EventsNode,
    IntervalType,
    NodeKind,
    PropertyOperator,
    SessionPropertyFilter,
    TrendsFilter,
    TrendsQuery,
    WebOverviewQuery,
    WebStatsBreakdown,
    WebStatsTableQuery,
)

from posthog.hogql_queries.insights.trends.trends_query_runner import TrendsQueryRunner
from posthog.hogql_queries.web_analytics.stats_table import WebStatsTableQueryRunner
from posthog.hogql_queries.web_analytics.web_overview import WebOverviewQueryRunner


@snapshot_hogql_queries
class TestSampleWebAnalyticsQueries(ClickhouseTestMixin, APIBaseTest):
    """
    Sample web analytics queries that demonstrate HogQL query generation.

    These tests capture snapshots of the HogQL queries generated by our web analytics components.
    They serve as both documentation and regression tests for query structure.

    The tests cover:
    - All WebStatsBreakdown types (24 variations)
    - WebOverview queries with and without filters
    - Event property filters (e.g., filtering by pathname)
    - Session property filters (e.g., filtering by channel type)
    """

    def test_web_overview_query_snapshot(self):
        """
        Web overview query example showing the main analytics dashboard query.

        This query powers the web analytics overview dashboard, fetching key metrics like
        visitors, views, sessions, session duration, and bounce rate for a given date range.
        """
        query = WebOverviewQuery(
            dateRange=DateRange(date_from="2024-01-01", date_to="2024-01-31"),
            properties=[],
        )
        runner = WebOverviewQueryRunner(team=self.team, query=query)
        runner.calculate()

    def test_web_overview_with_event_filter_snapshot(self):
        """
        Web overview query with an event property filter.

        This example demonstrates filtering web analytics data by event properties.
        In this case, we filter to only include pageviews for a specific pathname.

        Event property filters are useful for analyzing specific pages, sources, or user behaviors.
        """
        query = WebOverviewQuery(
            dateRange=DateRange(date_from="2024-01-01", date_to="2024-01-31"),
            properties=[
                EventPropertyFilter(
                    key="$pathname",
                    operator=PropertyOperator.EXACT,
                    value="/pricing",
                )
            ],
        )
        runner = WebOverviewQueryRunner(team=self.team, query=query)
        runner.calculate()

    def test_web_overview_with_session_filter_snapshot(self):
        """
        Web overview query with a session property filter.

        This example demonstrates filtering web analytics data by session properties.
        Here we filter to only include sessions that came from Direct traffic.

        Session property filters are useful for analyzing traffic sources, channels,
        or session-level characteristics like initial UTM parameters.
        """
        query = WebOverviewQuery(
            dateRange=DateRange(date_from="2024-01-01", date_to="2024-01-31"),
            properties=[
                SessionPropertyFilter(
                    key="$channel_type",
                    value="Direct",
                    operator="exact",
                    type="session",
                )
            ],
        )
        runner = WebOverviewQueryRunner(team=self.team, query=query)
        runner.calculate()

    def _run_breakdown_query(self, breakdown: WebStatsBreakdown):
        """Helper method to run a breakdown query."""
        query = WebStatsTableQuery(
            dateRange=DateRange(date_from="2024-01-01", date_to="2024-01-31"),
            properties=[],
            breakdownBy=breakdown,
            limit=10,
        )
        runner = WebStatsTableQueryRunner(team=self.team, query=query)
        runner.calculate()

    def test_web_stats_breakdown_page(self):
        self._run_breakdown_query(WebStatsBreakdown.PAGE)

    def test_web_stats_breakdown_initial_page(self):
        self._run_breakdown_query(WebStatsBreakdown.INITIAL_PAGE)

    def test_web_stats_breakdown_exit_page(self):
        self._run_breakdown_query(WebStatsBreakdown.EXIT_PAGE)

    def test_web_stats_breakdown_previous_page(self):
        self._run_breakdown_query(WebStatsBreakdown.PREVIOUS_PAGE)

    def test_web_stats_breakdown_screen_name(self):
        self._run_breakdown_query(WebStatsBreakdown.SCREEN_NAME)

    def test_web_stats_breakdown_exit_click(self):
        self._run_breakdown_query(WebStatsBreakdown.EXIT_CLICK)

    def test_web_stats_breakdown_initial_channel_type(self):
        self._run_breakdown_query(WebStatsBreakdown.INITIAL_CHANNEL_TYPE)

    def test_web_stats_breakdown_initial_referring_domain(self):
        self._run_breakdown_query(WebStatsBreakdown.INITIAL_REFERRING_DOMAIN)

    def test_web_stats_breakdown_initial_utm_source(self):
        self._run_breakdown_query(WebStatsBreakdown.INITIAL_UTM_SOURCE)

    def test_web_stats_breakdown_initial_utm_medium(self):
        self._run_breakdown_query(WebStatsBreakdown.INITIAL_UTM_MEDIUM)

    def test_web_stats_breakdown_initial_utm_campaign(self):
        self._run_breakdown_query(WebStatsBreakdown.INITIAL_UTM_CAMPAIGN)

    def test_web_stats_breakdown_initial_utm_content(self):
        self._run_breakdown_query(WebStatsBreakdown.INITIAL_UTM_CONTENT)

    def test_web_stats_breakdown_initial_utm_term(self):
        self._run_breakdown_query(WebStatsBreakdown.INITIAL_UTM_TERM)

    def test_web_stats_breakdown_initial_utm_source_medium_campaign(self):
        self._run_breakdown_query(WebStatsBreakdown.INITIAL_UTM_SOURCE_MEDIUM_CAMPAIGN)

    def test_web_stats_breakdown_browser(self):
        self._run_breakdown_query(WebStatsBreakdown.BROWSER)

    def test_web_stats_breakdown_os(self):
        self._run_breakdown_query(WebStatsBreakdown.OS)

    def test_web_stats_breakdown_device_type(self):
        self._run_breakdown_query(WebStatsBreakdown.DEVICE_TYPE)

    def test_web_stats_breakdown_viewport(self):
        self._run_breakdown_query(WebStatsBreakdown.VIEWPORT)

    def test_web_stats_breakdown_country(self):
        self._run_breakdown_query(WebStatsBreakdown.COUNTRY)

    def test_web_stats_breakdown_region(self):
        self._run_breakdown_query(WebStatsBreakdown.REGION)

    def test_web_stats_breakdown_city(self):
        self._run_breakdown_query(WebStatsBreakdown.CITY)

    def test_web_stats_breakdown_language(self):
        self._run_breakdown_query(WebStatsBreakdown.LANGUAGE)

    def test_web_stats_breakdown_timezone(self):
        self._run_breakdown_query(WebStatsBreakdown.TIMEZONE)

    def test_web_stats_breakdown_frustration_metrics(self):
        self._run_breakdown_query(WebStatsBreakdown.FRUSTRATION_METRICS)

    def test_web_stats_with_event_filter_snapshot(self):
        """
        WebStatsTable query with event property filter.

        This demonstrates how to combine breakdowns with event property filters.
        Here we break down by PAGE but only include events where the pathname matches "/pricing".

        This is useful for analyzing traffic patterns for specific pages or page types.
        """
        query = WebStatsTableQuery(
            dateRange=DateRange(date_from="2024-01-01", date_to="2024-01-31"),
            properties=[
                EventPropertyFilter(
                    key="$pathname",
                    operator=PropertyOperator.EXACT,
                    value="/pricing",
                )
            ],
            breakdownBy=WebStatsBreakdown.PAGE,
            limit=10,
        )
        runner = WebStatsTableQueryRunner(team=self.team, query=query)
        runner.calculate()

    def test_web_stats_with_session_filter_snapshot(self):
        """
        WebStatsTable query with session property filter.

        This demonstrates how to combine breakdowns with session property filters.
        Here we break down by DEVICE_TYPE but only include sessions from Direct traffic.

        This is useful for analyzing device usage patterns for specific traffic sources.
        """
        query = WebStatsTableQuery(
            dateRange=DateRange(date_from="2024-01-01", date_to="2024-01-31"),
            properties=[
                SessionPropertyFilter(
                    key="$channel_type",
                    value="Direct",
                    operator="exact",
                    type="session",
                )
            ],
            breakdownBy=WebStatsBreakdown.DEVICE_TYPE,
            limit=10,
        )
        runner = WebStatsTableQueryRunner(team=self.team, query=query)
        runner.calculate()

    def test_web_stats_with_bounce_rate_snapshot(self):
        """
        Paths breakdown with bounce rate query example.

        This query shows page-level metrics including bounce rate, demonstrating
        how we calculate bounce rates for each page in the site.
        """
        query = WebStatsTableQuery(
            dateRange=DateRange(date_from="2024-01-01", date_to="2024-01-31"),
            properties=[],
            breakdownBy=WebStatsBreakdown.PAGE,
            includeBounceRate=True,
            limit=10,
        )
        runner = WebStatsTableQueryRunner(team=self.team, query=query)
        runner.calculate()

    def test_web_trends_unique_users_snapshot(self):
        """
        Web analytics trends query for unique visitors over time.

        This query powers the "Unique visitors" trend line in the web analytics graphs tab.
        It shows the number of unique users who had pageviews, grouped by day.
        This is one of the core metrics for understanding website traffic patterns.
        """
        query = TrendsQuery(
            dateRange=DateRange(date_from="2024-01-01", date_to="2024-01-31"),
            interval=IntervalType.DAY,
            series=[
                EventsNode(
                    event="$pageview",
                    kind=NodeKind.EVENTS_NODE,
                    math=BaseMathType.DAU,
                    name="Pageview",
                    custom_name="Unique visitors",
                )
            ],
            trendsFilter=TrendsFilter(display=ChartDisplayType.ACTIONS_LINE_GRAPH),
            filterTestAccounts=True,
        )
        runner = TrendsQueryRunner(team=self.team, query=query)
        runner.calculate()

    def test_web_trends_page_views_snapshot(self):
        """
        Web analytics trends query for page views over time.

        This query powers the "Page views" trend line in the web analytics graphs tab.
        It shows the total number of pageview events, grouped by day.
        This metric helps track overall content consumption on the website.
        """
        query = TrendsQuery(
            dateRange=DateRange(date_from="2024-01-01", date_to="2024-01-31"),
            interval=IntervalType.DAY,
            series=[
                EventsNode(
                    event="$pageview",
                    kind=NodeKind.EVENTS_NODE,
                    math=BaseMathType.TOTAL,
                    name="Pageview",
                    custom_name="Page views",
                )
            ],
            trendsFilter=TrendsFilter(display=ChartDisplayType.ACTIONS_LINE_GRAPH),
            filterTestAccounts=True,
        )
        runner = TrendsQueryRunner(team=self.team, query=query)
        runner.calculate()

    def test_web_trends_sessions_snapshot(self):
        """
        Web analytics trends query for unique sessions over time.

        This query powers the "Unique sessions" trend line in the web analytics graphs tab.
        It shows the number of unique sessions with pageviews, grouped by day.
        This metric helps understand user engagement patterns and session frequency.
        """
        query = TrendsQuery(
            dateRange=DateRange(date_from="2024-01-01", date_to="2024-01-31"),
            interval=IntervalType.DAY,
            series=[
                EventsNode(
                    event="$pageview",
                    kind=NodeKind.EVENTS_NODE,
                    math=BaseMathType.UNIQUE_SESSION,
                    name="Pageview",
                    custom_name="Sessions",
                )
            ],
            trendsFilter=TrendsFilter(display=ChartDisplayType.ACTIONS_LINE_GRAPH),
            filterTestAccounts=True,
        )
        runner = TrendsQueryRunner(team=self.team, query=query)
        runner.calculate()
