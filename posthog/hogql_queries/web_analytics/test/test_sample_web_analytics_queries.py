"""
Sample web analytics queries for HogQL snapshot testing.

This is a special test file designed to capture HogQL query snapshots from the web analytics components.
These snapshots serve as living documentation of the SQL queries generated by our web analytics features
and help detect unintended query changes during development.

The tests in this file demonstrate how to use the @snapshot_hogql_queries decorator to automatically
capture and snapshot all HogQL queries executed during test execution. Each test represents a common
web analytics query pattern used in the product.

Usage:
    Run these tests to generate/update HogQL snapshots:
        pytest posthog/hogql_queries/web_analytics/test/test_sample_web_analytics_queries.py

    The snapshots are stored in the __snapshots__ directory and should be committed to version control.
"""

from posthog.test.base import APIBaseTest, ClickhouseTestMixin, snapshot_hogql_queries

from posthog.schema import DateRange, WebOverviewQuery, WebStatsBreakdown, WebStatsTableQuery

from posthog.hogql_queries.web_analytics.stats_table import WebStatsTableQueryRunner
from posthog.hogql_queries.web_analytics.web_overview import WebOverviewQueryRunner


@snapshot_hogql_queries
class TestSampleWebAnalyticsQueries(ClickhouseTestMixin, APIBaseTest):
    """
    Sample web analytics queries that demonstrate HogQL query generation.

    These tests capture snapshots of the HogQL queries generated by our web analytics components.
    They serve as both documentation and regression tests for query structure.
    """

    def test_web_overview_query_snapshot(self):
        """
        Web overview query example showing the main analytics dashboard query.

        This query powers the web analytics overview dashboard, fetching key metrics like
        visitors, views, sessions, session duration, and bounce rate for a given date range.
        """
        query = WebOverviewQuery(
            dateRange=DateRange(date_from="2024-01-01", date_to="2024-01-31"),
            properties=[],
        )
        runner = WebOverviewQueryRunner(team=self.team, query=query)
        runner.calculate()

    def test_web_stats_entry_paths_snapshot(self):
        """
        Entry paths query example showing the initial pages users land on.

        This query analyzes which pages users first visit when entering the site,
        breaking down by the initial page in each session.
        """
        query = WebStatsTableQuery(
            dateRange=DateRange(date_from="2024-01-01", date_to="2024-01-31"),
            properties=[],
            breakdownBy=WebStatsBreakdown.INITIAL_PAGE,
            limit=10,
        )
        runner = WebStatsTableQueryRunner(team=self.team, query=query)
        runner.calculate()

    def test_web_stats_exit_paths_snapshot(self):
        """
        Exit paths query example showing the last pages users visit before leaving.

        This query identifies which pages users exit from, helping understand
        where users drop off in their journey.
        """
        query = WebStatsTableQuery(
            dateRange=DateRange(date_from="2024-01-01", date_to="2024-01-31"),
            properties=[],
            breakdownBy=WebStatsBreakdown.EXIT_PAGE,
            limit=10,
        )
        runner = WebStatsTableQueryRunner(team=self.team, query=query)
        runner.calculate()

    def test_web_stats_paths_with_bounce_rate_snapshot(self):
        """
        Paths breakdown with bounce rate query example.

        This query shows page-level metrics including bounce rate, demonstrating
        how we calculate bounce rates for each page in the site.
        """
        query = WebStatsTableQuery(
            dateRange=DateRange(date_from="2024-01-01", date_to="2024-01-31"),
            properties=[],
            breakdownBy=WebStatsBreakdown.PAGE,
            includeBounceRate=True,
            limit=10,
        )
        runner = WebStatsTableQueryRunner(team=self.team, query=query)
        runner.calculate()
