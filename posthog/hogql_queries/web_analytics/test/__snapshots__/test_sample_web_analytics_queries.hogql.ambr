# serializer version: 1
# name: TestSampleWebAnalyticsQueries.test_web_overview_query_snapshot
  '''
  SELECT uniq(session_person_id) AS unique_users,
         NULL AS previous_unique_users,
         sum(filtered_pageview_count) AS total_filtered_pageview_count,
         NULL AS previous_total_filtered_pageview_count,
         uniq(session_id) AS unique_sessions,
         NULL AS previous_unique_sessions,
         avg(session_duration) AS avg_duration_s,
         NULL AS previous_avg_duration_s,
         avg(is_bounce) AS bounce_rate,
         NULL AS previous_bounce_rate
  FROM
    (SELECT any(events.person_id) AS session_person_id,
            session.session_id AS session_id,
            min(session.$start_timestamp) AS start_timestamp,
            any(session.$session_duration) AS session_duration,
            countIf(or(equals(event, '$pageview'), equals(event, '$screen'))) AS filtered_pageview_count,
            any(session.$is_bounce) AS is_bounce
     FROM events
     WHERE and(notEquals(events.$session_id, NULL), or(equals(event, '$pageview'), equals(event, '$screen')), or(and(greaterOrEquals(timestamp, assumeNotNull(toDateTime('2024-01-01 00:00:00'))), lessOrEquals(timestamp, assumeNotNull(toDateTime('2024-01-31 23:59:59')))), false), 1)
     GROUP BY session_id
     HAVING or(and(greaterOrEquals(start_timestamp, assumeNotNull(toDateTime('2024-01-01 00:00:00'))), lessOrEquals(start_timestamp, assumeNotNull(toDateTime('2024-01-31 23:59:59')))), false))
  LIMIT 50000
  '''
  
# ---
# name: TestSampleWebAnalyticsQueries.test_web_stats_entry_paths_snapshot
  '''
  SELECT breakdown_value AS `context.columns.breakdown_value`,
         tuple(uniq(filtered_person_id), NULL) AS `context.columns.visitors`,
         tuple(sum(filtered_pageview_count), NULL) AS `context.columns.views`,
         divide(`context.columns.visitors`.1, sum(`context.columns.visitors`.1) OVER ()) AS `context.columns.ui_fill_fraction`
  FROM
    (SELECT any(person_id) AS filtered_person_id,
            count() AS filtered_pageview_count,
            session.$entry_pathname AS breakdown_value,
            session.session_id AS session_id,
            any(session.$is_bounce) AS is_bounce,
            min(session.$start_timestamp) AS start_timestamp
     FROM events
     WHERE and(or(and(greaterOrEquals(timestamp, assumeNotNull(toDateTime('2024-01-01 00:00:00'))), lessOrEquals(timestamp, assumeNotNull(toDateTime('2024-01-31 23:59:59')))), false), or(equals(event, '$pageview'), equals(event, '$screen')), 1, notEquals(breakdown_value, NULL))
     GROUP BY session_id,
              breakdown_value)
  GROUP BY `context.columns.breakdown_value`
  ORDER BY `context.columns.visitors` DESC,
           `context.columns.views` DESC,
           `context.columns.breakdown_value` ASC
  LIMIT 50000
  '''
  
# ---
# name: TestSampleWebAnalyticsQueries.test_web_stats_exit_paths_snapshot
  '''
  SELECT breakdown_value AS `context.columns.breakdown_value`,
         tuple(uniq(filtered_person_id), NULL) AS `context.columns.visitors`,
         tuple(sum(filtered_pageview_count), NULL) AS `context.columns.views`,
         divide(`context.columns.visitors`.1, sum(`context.columns.visitors`.1) OVER ()) AS `context.columns.ui_fill_fraction`
  FROM
    (SELECT any(person_id) AS filtered_person_id,
            count() AS filtered_pageview_count,
            session.$end_pathname AS breakdown_value,
            session.session_id AS session_id,
            any(session.$is_bounce) AS is_bounce,
            min(session.$start_timestamp) AS start_timestamp
     FROM events
     WHERE and(or(and(greaterOrEquals(timestamp, assumeNotNull(toDateTime('2024-01-01 00:00:00'))), lessOrEquals(timestamp, assumeNotNull(toDateTime('2024-01-31 23:59:59')))), false), or(equals(event, '$pageview'), equals(event, '$screen')), 1, notEquals(breakdown_value, NULL))
     GROUP BY session_id,
              breakdown_value)
  GROUP BY `context.columns.breakdown_value`
  ORDER BY `context.columns.visitors` DESC,
           `context.columns.views` DESC,
           `context.columns.breakdown_value` ASC
  LIMIT 50000
  '''
  
# ---
# name: TestSampleWebAnalyticsQueries.test_web_stats_paths_with_bounce_rate_snapshot
  '''
  SELECT counts.breakdown_value AS `context.columns.breakdown_value`,
         tuple(counts.visitors, counts.previous_visitors) AS `context.columns.visitors`,
         tuple(counts.views, counts.previous_views) AS `context.columns.views`,
         tuple(bounce.bounce_rate, bounce.previous_bounce_rate) AS `context.columns.bounce_rate`,
         divide(`context.columns.visitors`.1, sum(`context.columns.visitors`.1) OVER ()) AS `context.columns.ui_fill_fraction`
  FROM
    (SELECT breakdown_value,
            uniqIf(filtered_person_id, and(greaterOrEquals(start_timestamp, assumeNotNull(toDateTime('2024-01-01 00:00:00'))), lessOrEquals(start_timestamp, assumeNotNull(toDateTime('2024-01-31 23:59:59'))))) AS visitors,
            uniqIf(filtered_person_id, false) AS previous_visitors,
            sumIf(filtered_pageview_count, and(greaterOrEquals(start_timestamp, assumeNotNull(toDateTime('2024-01-01 00:00:00'))), lessOrEquals(start_timestamp, assumeNotNull(toDateTime('2024-01-31 23:59:59'))))) AS views,
            sumIf(filtered_pageview_count, false) AS previous_views
     FROM
       (SELECT any(person_id) AS filtered_person_id,
               count() AS filtered_pageview_count,
               events.properties.$pathname AS breakdown_value,
               session.session_id AS session_id,
               min(session.$start_timestamp) AS start_timestamp
        FROM events
        WHERE and(or(equals(events.event, '$pageview'), equals(events.event, '$screen')), or(and(greaterOrEquals(timestamp, assumeNotNull(toDateTime('2024-01-01 00:00:00'))), lessOrEquals(timestamp, assumeNotNull(toDateTime('2024-01-31 23:59:59')))), false), 1, 1, notEquals(breakdown_value, NULL))
        GROUP BY session_id,
                 breakdown_value)
     GROUP BY breakdown_value) AS counts
  LEFT JOIN
    (SELECT breakdown_value,
            avgIf(is_bounce, and(greaterOrEquals(start_timestamp, assumeNotNull(toDateTime('2024-01-01 00:00:00'))), lessOrEquals(start_timestamp, assumeNotNull(toDateTime('2024-01-31 23:59:59'))))) AS bounce_rate,
            avgIf(is_bounce, false) AS previous_bounce_rate
     FROM
       (SELECT session.$entry_pathname AS breakdown_value,
               any(session.$is_bounce) AS is_bounce,
               session.session_id AS session_id,
               min(session.$start_timestamp) AS start_timestamp
        FROM events
        WHERE and(or(equals(events.event, '$pageview'), equals(events.event, '$screen')), notEquals(breakdown_value, NULL), or(and(greaterOrEquals(timestamp, assumeNotNull(toDateTime('2024-01-01 00:00:00'))), lessOrEquals(timestamp, assumeNotNull(toDateTime('2024-01-31 23:59:59')))), false), 1, 1)
        GROUP BY session_id,
                 breakdown_value)
     GROUP BY breakdown_value) AS bounce ON equals(counts.breakdown_value, bounce.breakdown_value)
  ORDER BY `context.columns.visitors` DESC,
           `context.columns.views` DESC,
           `context.columns.breakdown_value` ASC
  LIMIT 50000
  '''
  
# ---
