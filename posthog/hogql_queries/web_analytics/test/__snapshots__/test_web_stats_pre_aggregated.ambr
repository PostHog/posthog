# serializer version: 1
# name: TestWebStatsPreAggregated.test_breakdown_consistency_preagg_vs_regular
  '''
  SELECT nullIf(nullIf(web_stats_combined.device_type, ''), 'null') AS `context.columns.breakdown_value`,
         tuple(uniqMergeIf(web_stats_combined.persons_uniq_state, and(greaterOrEquals(web_stats_combined.period_bucket, toDateTime64('2024-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(web_stats_combined.period_bucket, toDateTime64('2024-01-02 23:59:59.999999', 6, 'UTC')))), NULL) AS `context.columns.visitors`,
         tuple(sumMergeIf(web_stats_combined.pageviews_count_state, and(greaterOrEquals(web_stats_combined.period_bucket, toDateTime64('2024-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(web_stats_combined.period_bucket, toDateTime64('2024-01-02 23:59:59.999999', 6, 'UTC')))), NULL) AS `context.columns.views`
  FROM web_stats_combined
  WHERE and(equals(web_stats_combined.team_id, 99999), greaterOrEquals(web_stats_combined.period_bucket, toDateTime64('2024-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(web_stats_combined.period_bucket, toDateTime64('2024-01-02 23:59:59.999999', 6, 'UTC')))
  GROUP BY `context.columns.breakdown_value`
  ORDER BY `context.columns.views` DESC
  LIMIT 101
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=4000000,
                    max_expanded_ast_elements=4000000,
                    max_bytes_before_external_group_by=0,
                    transform_null_in=1,
                    optimize_min_equality_disjunction_chain_length=4294967295,
                    allow_experimental_join_condition=1
  '''
# ---
# name: TestWebStatsPreAggregated.test_breakdown_consistency_preagg_vs_regular.1
  '''
  SELECT breakdown_value AS `context.columns.breakdown_value`,
         tuple(uniq(filtered_person_id), NULL) AS `context.columns.visitors`,
         tuple(sum(filtered_pageview_count), NULL) AS `context.columns.views`
  FROM
    (SELECT any(if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id)) AS filtered_person_id,
            count() AS filtered_pageview_count,
            nullIf(nullIf(events.`mat_$device_type`, ''), 'null') AS breakdown_value,
            events__session.session_id AS session_id,
            any(events__session.`$is_bounce`) AS is_bounce,
            min(events__session.`$start_timestamp`) AS start_timestamp
     FROM events
     LEFT JOIN
       (SELECT toString(reinterpretAsUUID(bitOr(bitShiftLeft(raw_sessions.session_id_v7, 64), bitShiftRight(raw_sessions.session_id_v7, 64)))) AS session_id,
               if(ifNull(equals(uniqMerge(raw_sessions.pageview_uniq), 0), 0), NULL, not(or(ifNull(greater(uniqMerge(raw_sessions.pageview_uniq), 1), 0), ifNull(greater(uniqMerge(raw_sessions.autocapture_uniq), 0), 0), greaterOrEquals(dateDiff('second', min(toTimeZone(raw_sessions.min_timestamp, 'UTC')), max(toTimeZone(raw_sessions.max_timestamp, 'UTC'))), 10)))) AS `$is_bounce`,
               min(toTimeZone(raw_sessions.min_timestamp, 'UTC')) AS `$start_timestamp`,
               raw_sessions.session_id_v7 AS session_id_v7
        FROM raw_sessions
        WHERE and(equals(raw_sessions.team_id, 99999), greaterOrEquals(fromUnixTimestamp(intDiv(toUInt64(bitShiftRight(raw_sessions.session_id_v7, 80)), 1000)), minus(assumeNotNull(toDateTime('2024-01-01 00:00:00', 'UTC')), toIntervalDay(3))), lessOrEquals(fromUnixTimestamp(intDiv(toUInt64(bitShiftRight(raw_sessions.session_id_v7, 80)), 1000)), plus(assumeNotNull(toDateTime('2024-01-02 23:59:59', 'UTC')), toIntervalDay(3))))
        GROUP BY raw_sessions.session_id_v7,
                 raw_sessions.session_id_v7) AS events__session ON equals(toUInt128(accurateCastOrNull(events.`$session_id`, 'UUID')), events__session.session_id_v7)
     LEFT OUTER JOIN
       (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
               person_distinct_id_overrides.distinct_id AS distinct_id
        FROM person_distinct_id_overrides
        WHERE equals(person_distinct_id_overrides.team_id, 99999)
        GROUP BY person_distinct_id_overrides.distinct_id
        HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id)
     WHERE and(equals(events.team_id, 99999), and(or(and(greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2024-01-01 00:00:00', 'UTC'))), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2024-01-02 23:59:59', 'UTC')))), 0), or(equals(events.event, '$pageview'), equals(events.event, '$screen')), 1, isNotNull(breakdown_value)))
     GROUP BY session_id,
              breakdown_value)
  GROUP BY `context.columns.breakdown_value`
  ORDER BY `context.columns.visitors` DESC,
           `context.columns.views` DESC,
           `context.columns.breakdown_value` ASC
  LIMIT 101
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=4000000,
                    max_expanded_ast_elements=4000000,
                    max_bytes_before_external_group_by=0,
                    transform_null_in=1,
                    optimize_min_equality_disjunction_chain_length=4294967295,
                    allow_experimental_join_condition=1
  '''
# ---
# name: TestWebStatsPreAggregated.test_breakdown_consistency_preagg_vs_regular.2
  '''
  SELECT nullIf(nullIf(web_stats_combined.browser, ''), 'null') AS `context.columns.breakdown_value`,
         tuple(uniqMergeIf(web_stats_combined.persons_uniq_state, and(greaterOrEquals(web_stats_combined.period_bucket, toDateTime64('2024-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(web_stats_combined.period_bucket, toDateTime64('2024-01-02 23:59:59.999999', 6, 'UTC')))), NULL) AS `context.columns.visitors`,
         tuple(sumMergeIf(web_stats_combined.pageviews_count_state, and(greaterOrEquals(web_stats_combined.period_bucket, toDateTime64('2024-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(web_stats_combined.period_bucket, toDateTime64('2024-01-02 23:59:59.999999', 6, 'UTC')))), NULL) AS `context.columns.views`
  FROM web_stats_combined
  WHERE and(equals(web_stats_combined.team_id, 99999), greaterOrEquals(web_stats_combined.period_bucket, toDateTime64('2024-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(web_stats_combined.period_bucket, toDateTime64('2024-01-02 23:59:59.999999', 6, 'UTC')))
  GROUP BY `context.columns.breakdown_value`
  ORDER BY `context.columns.views` DESC
  LIMIT 101
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=4000000,
                    max_expanded_ast_elements=4000000,
                    max_bytes_before_external_group_by=0,
                    transform_null_in=1,
                    optimize_min_equality_disjunction_chain_length=4294967295,
                    allow_experimental_join_condition=1
  '''
# ---
# name: TestWebStatsPreAggregated.test_breakdown_consistency_preagg_vs_regular.3
  '''
  SELECT breakdown_value AS `context.columns.breakdown_value`,
         tuple(uniq(filtered_person_id), NULL) AS `context.columns.visitors`,
         tuple(sum(filtered_pageview_count), NULL) AS `context.columns.views`
  FROM
    (SELECT any(if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id)) AS filtered_person_id,
            count() AS filtered_pageview_count,
            nullIf(nullIf(events.`mat_$browser`, ''), 'null') AS breakdown_value,
            events__session.session_id AS session_id,
            any(events__session.`$is_bounce`) AS is_bounce,
            min(events__session.`$start_timestamp`) AS start_timestamp
     FROM events
     LEFT JOIN
       (SELECT toString(reinterpretAsUUID(bitOr(bitShiftLeft(raw_sessions.session_id_v7, 64), bitShiftRight(raw_sessions.session_id_v7, 64)))) AS session_id,
               if(ifNull(equals(uniqMerge(raw_sessions.pageview_uniq), 0), 0), NULL, not(or(ifNull(greater(uniqMerge(raw_sessions.pageview_uniq), 1), 0), ifNull(greater(uniqMerge(raw_sessions.autocapture_uniq), 0), 0), greaterOrEquals(dateDiff('second', min(toTimeZone(raw_sessions.min_timestamp, 'UTC')), max(toTimeZone(raw_sessions.max_timestamp, 'UTC'))), 10)))) AS `$is_bounce`,
               min(toTimeZone(raw_sessions.min_timestamp, 'UTC')) AS `$start_timestamp`,
               raw_sessions.session_id_v7 AS session_id_v7
        FROM raw_sessions
        WHERE and(equals(raw_sessions.team_id, 99999), greaterOrEquals(fromUnixTimestamp(intDiv(toUInt64(bitShiftRight(raw_sessions.session_id_v7, 80)), 1000)), minus(assumeNotNull(toDateTime('2024-01-01 00:00:00', 'UTC')), toIntervalDay(3))), lessOrEquals(fromUnixTimestamp(intDiv(toUInt64(bitShiftRight(raw_sessions.session_id_v7, 80)), 1000)), plus(assumeNotNull(toDateTime('2024-01-02 23:59:59', 'UTC')), toIntervalDay(3))))
        GROUP BY raw_sessions.session_id_v7,
                 raw_sessions.session_id_v7) AS events__session ON equals(toUInt128(accurateCastOrNull(events.`$session_id`, 'UUID')), events__session.session_id_v7)
     LEFT OUTER JOIN
       (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
               person_distinct_id_overrides.distinct_id AS distinct_id
        FROM person_distinct_id_overrides
        WHERE equals(person_distinct_id_overrides.team_id, 99999)
        GROUP BY person_distinct_id_overrides.distinct_id
        HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id)
     WHERE and(equals(events.team_id, 99999), and(or(and(greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2024-01-01 00:00:00', 'UTC'))), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2024-01-02 23:59:59', 'UTC')))), 0), or(equals(events.event, '$pageview'), equals(events.event, '$screen')), 1, isNotNull(breakdown_value)))
     GROUP BY session_id,
              breakdown_value)
  GROUP BY `context.columns.breakdown_value`
  ORDER BY `context.columns.visitors` DESC,
           `context.columns.views` DESC,
           `context.columns.breakdown_value` ASC
  LIMIT 101
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=4000000,
                    max_expanded_ast_elements=4000000,
                    max_bytes_before_external_group_by=0,
                    transform_null_in=1,
                    optimize_min_equality_disjunction_chain_length=4294967295,
                    allow_experimental_join_condition=1
  '''
# ---
# name: TestWebStatsPreAggregated.test_breakdown_consistency_preagg_vs_regular.4
  '''
  SELECT nullIf(nullIf(web_stats_combined.country_code, ''), 'null') AS `context.columns.breakdown_value`,
         tuple(uniqMergeIf(web_stats_combined.persons_uniq_state, and(greaterOrEquals(web_stats_combined.period_bucket, toDateTime64('2024-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(web_stats_combined.period_bucket, toDateTime64('2024-01-02 23:59:59.999999', 6, 'UTC')))), NULL) AS `context.columns.visitors`,
         tuple(sumMergeIf(web_stats_combined.pageviews_count_state, and(greaterOrEquals(web_stats_combined.period_bucket, toDateTime64('2024-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(web_stats_combined.period_bucket, toDateTime64('2024-01-02 23:59:59.999999', 6, 'UTC')))), NULL) AS `context.columns.views`
  FROM web_stats_combined
  WHERE and(equals(web_stats_combined.team_id, 99999), greaterOrEquals(web_stats_combined.period_bucket, toDateTime64('2024-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(web_stats_combined.period_bucket, toDateTime64('2024-01-02 23:59:59.999999', 6, 'UTC')))
  GROUP BY `context.columns.breakdown_value`
  ORDER BY `context.columns.views` DESC
  LIMIT 101
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=4000000,
                    max_expanded_ast_elements=4000000,
                    max_bytes_before_external_group_by=0,
                    transform_null_in=1,
                    optimize_min_equality_disjunction_chain_length=4294967295,
                    allow_experimental_join_condition=1
  '''
# ---
# name: TestWebStatsPreAggregated.test_breakdown_consistency_preagg_vs_regular.5
  '''
  SELECT breakdown_value AS `context.columns.breakdown_value`,
         tuple(uniq(filtered_person_id), NULL) AS `context.columns.visitors`,
         tuple(sum(filtered_pageview_count), NULL) AS `context.columns.views`
  FROM
    (SELECT any(if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id)) AS filtered_person_id,
            count() AS filtered_pageview_count,
            nullIf(nullIf(events.`mat_$geoip_country_code`, ''), 'null') AS breakdown_value,
            events__session.session_id AS session_id,
            any(events__session.`$is_bounce`) AS is_bounce,
            min(events__session.`$start_timestamp`) AS start_timestamp
     FROM events
     LEFT JOIN
       (SELECT toString(reinterpretAsUUID(bitOr(bitShiftLeft(raw_sessions.session_id_v7, 64), bitShiftRight(raw_sessions.session_id_v7, 64)))) AS session_id,
               if(ifNull(equals(uniqMerge(raw_sessions.pageview_uniq), 0), 0), NULL, not(or(ifNull(greater(uniqMerge(raw_sessions.pageview_uniq), 1), 0), ifNull(greater(uniqMerge(raw_sessions.autocapture_uniq), 0), 0), greaterOrEquals(dateDiff('second', min(toTimeZone(raw_sessions.min_timestamp, 'UTC')), max(toTimeZone(raw_sessions.max_timestamp, 'UTC'))), 10)))) AS `$is_bounce`,
               min(toTimeZone(raw_sessions.min_timestamp, 'UTC')) AS `$start_timestamp`,
               raw_sessions.session_id_v7 AS session_id_v7
        FROM raw_sessions
        WHERE and(equals(raw_sessions.team_id, 99999), greaterOrEquals(fromUnixTimestamp(intDiv(toUInt64(bitShiftRight(raw_sessions.session_id_v7, 80)), 1000)), minus(assumeNotNull(toDateTime('2024-01-01 00:00:00', 'UTC')), toIntervalDay(3))), lessOrEquals(fromUnixTimestamp(intDiv(toUInt64(bitShiftRight(raw_sessions.session_id_v7, 80)), 1000)), plus(assumeNotNull(toDateTime('2024-01-02 23:59:59', 'UTC')), toIntervalDay(3))))
        GROUP BY raw_sessions.session_id_v7,
                 raw_sessions.session_id_v7) AS events__session ON equals(toUInt128(accurateCastOrNull(events.`$session_id`, 'UUID')), events__session.session_id_v7)
     LEFT OUTER JOIN
       (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
               person_distinct_id_overrides.distinct_id AS distinct_id
        FROM person_distinct_id_overrides
        WHERE equals(person_distinct_id_overrides.team_id, 99999)
        GROUP BY person_distinct_id_overrides.distinct_id
        HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id)
     WHERE and(equals(events.team_id, 99999), and(or(and(greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2024-01-01 00:00:00', 'UTC'))), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2024-01-02 23:59:59', 'UTC')))), 0), or(equals(events.event, '$pageview'), equals(events.event, '$screen')), 1, isNotNull(breakdown_value)))
     GROUP BY session_id,
              breakdown_value)
  GROUP BY `context.columns.breakdown_value`
  ORDER BY `context.columns.visitors` DESC,
           `context.columns.views` DESC,
           `context.columns.breakdown_value` ASC
  LIMIT 101
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=4000000,
                    max_expanded_ast_elements=4000000,
                    max_bytes_before_external_group_by=0,
                    transform_null_in=1,
                    optimize_min_equality_disjunction_chain_length=4294967295,
                    allow_experimental_join_condition=1
  '''
# ---
# name: TestWebStatsPreAggregated.test_breakdown_consistency_preagg_vs_regular.6
  '''
  SELECT nullIf(nullIf(web_stats_combined.utm_source, ''), 'null') AS `context.columns.breakdown_value`,
         tuple(uniqMergeIf(web_stats_combined.persons_uniq_state, and(greaterOrEquals(web_stats_combined.period_bucket, toDateTime64('2024-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(web_stats_combined.period_bucket, toDateTime64('2024-01-02 23:59:59.999999', 6, 'UTC')))), NULL) AS `context.columns.visitors`,
         tuple(sumMergeIf(web_stats_combined.pageviews_count_state, and(greaterOrEquals(web_stats_combined.period_bucket, toDateTime64('2024-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(web_stats_combined.period_bucket, toDateTime64('2024-01-02 23:59:59.999999', 6, 'UTC')))), NULL) AS `context.columns.views`
  FROM web_stats_combined
  WHERE and(equals(web_stats_combined.team_id, 99999), greaterOrEquals(web_stats_combined.period_bucket, toDateTime64('2024-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(web_stats_combined.period_bucket, toDateTime64('2024-01-02 23:59:59.999999', 6, 'UTC')))
  GROUP BY `context.columns.breakdown_value`
  ORDER BY `context.columns.views` DESC
  LIMIT 101
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=4000000,
                    max_expanded_ast_elements=4000000,
                    max_bytes_before_external_group_by=0,
                    transform_null_in=1,
                    optimize_min_equality_disjunction_chain_length=4294967295,
                    allow_experimental_join_condition=1
  '''
# ---
# name: TestWebStatsPreAggregated.test_breakdown_consistency_preagg_vs_regular.7
  '''
  SELECT breakdown_value AS `context.columns.breakdown_value`,
         tuple(uniq(filtered_person_id), NULL) AS `context.columns.visitors`,
         tuple(sum(filtered_pageview_count), NULL) AS `context.columns.views`
  FROM
    (SELECT any(if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id)) AS filtered_person_id,
            count() AS filtered_pageview_count,
            events__session.`$entry_utm_source` AS breakdown_value,
            events__session.session_id AS session_id,
            any(events__session.`$is_bounce`) AS is_bounce,
            min(events__session.`$start_timestamp`) AS start_timestamp
     FROM events
     LEFT JOIN
       (SELECT nullIf(nullIf(argMinMerge(raw_sessions.initial_utm_source), 'null'), '') AS `$entry_utm_source`,
               toString(reinterpretAsUUID(bitOr(bitShiftLeft(raw_sessions.session_id_v7, 64), bitShiftRight(raw_sessions.session_id_v7, 64)))) AS session_id,
               if(ifNull(equals(uniqMerge(raw_sessions.pageview_uniq), 0), 0), NULL, not(or(ifNull(greater(uniqMerge(raw_sessions.pageview_uniq), 1), 0), ifNull(greater(uniqMerge(raw_sessions.autocapture_uniq), 0), 0), greaterOrEquals(dateDiff('second', min(toTimeZone(raw_sessions.min_timestamp, 'UTC')), max(toTimeZone(raw_sessions.max_timestamp, 'UTC'))), 10)))) AS `$is_bounce`,
               min(toTimeZone(raw_sessions.min_timestamp, 'UTC')) AS `$start_timestamp`,
               raw_sessions.session_id_v7 AS session_id_v7
        FROM raw_sessions
        WHERE and(equals(raw_sessions.team_id, 99999), greaterOrEquals(fromUnixTimestamp(intDiv(toUInt64(bitShiftRight(raw_sessions.session_id_v7, 80)), 1000)), minus(assumeNotNull(toDateTime('2024-01-01 00:00:00', 'UTC')), toIntervalDay(3))), lessOrEquals(fromUnixTimestamp(intDiv(toUInt64(bitShiftRight(raw_sessions.session_id_v7, 80)), 1000)), plus(assumeNotNull(toDateTime('2024-01-02 23:59:59', 'UTC')), toIntervalDay(3))))
        GROUP BY raw_sessions.session_id_v7,
                 raw_sessions.session_id_v7) AS events__session ON equals(toUInt128(accurateCastOrNull(events.`$session_id`, 'UUID')), events__session.session_id_v7)
     LEFT OUTER JOIN
       (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
               person_distinct_id_overrides.distinct_id AS distinct_id
        FROM person_distinct_id_overrides
        WHERE equals(person_distinct_id_overrides.team_id, 99999)
        GROUP BY person_distinct_id_overrides.distinct_id
        HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id)
     WHERE and(equals(events.team_id, 99999), and(or(and(greaterOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2024-01-01 00:00:00', 'UTC'))), lessOrEquals(toTimeZone(events.timestamp, 'UTC'), assumeNotNull(toDateTime('2024-01-02 23:59:59', 'UTC')))), 0), or(equals(events.event, '$pageview'), equals(events.event, '$screen')), 1, 1))
     GROUP BY session_id,
              breakdown_value)
  GROUP BY `context.columns.breakdown_value`
  ORDER BY `context.columns.visitors` DESC,
           `context.columns.views` DESC,
           `context.columns.breakdown_value` ASC
  LIMIT 101
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=4000000,
                    max_expanded_ast_elements=4000000,
                    max_bytes_before_external_group_by=0,
                    transform_null_in=1,
                    optimize_min_equality_disjunction_chain_length=4294967295,
                    allow_experimental_join_condition=1
  '''
# ---
# name: TestWebStatsPreAggregated.test_browser_breakdown
  '''
  SELECT nullIf(nullIf(web_stats_combined.browser, ''), 'null') AS `context.columns.breakdown_value`,
         tuple(uniqMergeIf(web_stats_combined.persons_uniq_state, and(greaterOrEquals(web_stats_combined.period_bucket, toDateTime64('2024-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(web_stats_combined.period_bucket, toDateTime64('2024-01-02 23:59:59.999999', 6, 'UTC')))), NULL) AS `context.columns.visitors`,
         tuple(sumMergeIf(web_stats_combined.pageviews_count_state, and(greaterOrEquals(web_stats_combined.period_bucket, toDateTime64('2024-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(web_stats_combined.period_bucket, toDateTime64('2024-01-02 23:59:59.999999', 6, 'UTC')))), NULL) AS `context.columns.views`
  FROM web_stats_combined
  WHERE and(equals(web_stats_combined.team_id, 99999), greaterOrEquals(web_stats_combined.period_bucket, toDateTime64('2024-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(web_stats_combined.period_bucket, toDateTime64('2024-01-02 23:59:59.999999', 6, 'UTC')))
  GROUP BY `context.columns.breakdown_value`
  ORDER BY `context.columns.views` DESC
  LIMIT 101
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=4000000,
                    max_expanded_ast_elements=4000000,
                    max_bytes_before_external_group_by=0,
                    transform_null_in=1,
                    optimize_min_equality_disjunction_chain_length=4294967295,
                    allow_experimental_join_condition=1
  '''
# ---
# name: TestWebStatsPreAggregated.test_country_breakdown
  '''
  SELECT nullIf(nullIf(web_stats_combined.country_code, ''), 'null') AS `context.columns.breakdown_value`,
         tuple(uniqMergeIf(web_stats_combined.persons_uniq_state, and(greaterOrEquals(web_stats_combined.period_bucket, toDateTime64('2024-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(web_stats_combined.period_bucket, toDateTime64('2024-01-02 23:59:59.999999', 6, 'UTC')))), NULL) AS `context.columns.visitors`,
         tuple(sumMergeIf(web_stats_combined.pageviews_count_state, and(greaterOrEquals(web_stats_combined.period_bucket, toDateTime64('2024-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(web_stats_combined.period_bucket, toDateTime64('2024-01-02 23:59:59.999999', 6, 'UTC')))), NULL) AS `context.columns.views`
  FROM web_stats_combined
  WHERE and(equals(web_stats_combined.team_id, 99999), greaterOrEquals(web_stats_combined.period_bucket, toDateTime64('2024-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(web_stats_combined.period_bucket, toDateTime64('2024-01-02 23:59:59.999999', 6, 'UTC')))
  GROUP BY `context.columns.breakdown_value`
  ORDER BY `context.columns.views` DESC
  LIMIT 101
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=4000000,
                    max_expanded_ast_elements=4000000,
                    max_bytes_before_external_group_by=0,
                    transform_null_in=1,
                    optimize_min_equality_disjunction_chain_length=4294967295,
                    allow_experimental_join_condition=1
  '''
# ---
# name: TestWebStatsPreAggregated.test_device_type_breakdown
  '''
  SELECT nullIf(nullIf(web_stats_combined.device_type, ''), 'null') AS `context.columns.breakdown_value`,
         tuple(uniqMergeIf(web_stats_combined.persons_uniq_state, and(greaterOrEquals(web_stats_combined.period_bucket, toDateTime64('2024-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(web_stats_combined.period_bucket, toDateTime64('2024-01-02 23:59:59.999999', 6, 'UTC')))), NULL) AS `context.columns.visitors`,
         tuple(sumMergeIf(web_stats_combined.pageviews_count_state, and(greaterOrEquals(web_stats_combined.period_bucket, toDateTime64('2024-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(web_stats_combined.period_bucket, toDateTime64('2024-01-02 23:59:59.999999', 6, 'UTC')))), NULL) AS `context.columns.views`
  FROM web_stats_combined
  WHERE and(equals(web_stats_combined.team_id, 99999), greaterOrEquals(web_stats_combined.period_bucket, toDateTime64('2024-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(web_stats_combined.period_bucket, toDateTime64('2024-01-02 23:59:59.999999', 6, 'UTC')))
  GROUP BY `context.columns.breakdown_value`
  ORDER BY `context.columns.views` DESC
  LIMIT 101
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=4000000,
                    max_expanded_ast_elements=4000000,
                    max_bytes_before_external_group_by=0,
                    transform_null_in=1,
                    optimize_min_equality_disjunction_chain_length=4294967295,
                    allow_experimental_join_condition=1
  '''
# ---
# name: TestWebStatsPreAggregated.test_page_breakdown
  '''
  SELECT nullIf(web_stats_combined.pathname, '') AS `context.columns.breakdown_value`,
         tuple(uniqMergeIf(web_stats_combined.persons_uniq_state, and(greaterOrEquals(web_stats_combined.period_bucket, toDateTime64('2024-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(web_stats_combined.period_bucket, toDateTime64('2024-01-02 23:59:59.999999', 6, 'UTC')))), NULL) AS `context.columns.visitors`,
         tuple(sumMergeIf(web_stats_combined.pageviews_count_state, and(greaterOrEquals(web_stats_combined.period_bucket, toDateTime64('2024-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(web_stats_combined.period_bucket, toDateTime64('2024-01-02 23:59:59.999999', 6, 'UTC')))), NULL) AS `context.columns.views`,
         any(bounces.`context.columns.bounce_rate`) AS `context.columns.bounce_rate`
  FROM web_stats_combined
  LEFT JOIN
    (SELECT nullIf(web_bounces_combined.entry_pathname, '') AS `context.columns.breakdown_value`,
            tuple(uniqMergeIf(web_bounces_combined.persons_uniq_state, and(greaterOrEquals(web_bounces_combined.period_bucket, toDateTime64('2024-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(web_bounces_combined.period_bucket, toDateTime64('2024-01-02 23:59:59.999999', 6, 'UTC')))), NULL) AS `context.columns.visitors`,
            tuple(sumMergeIf(web_bounces_combined.pageviews_count_state, and(greaterOrEquals(web_bounces_combined.period_bucket, toDateTime64('2024-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(web_bounces_combined.period_bucket, toDateTime64('2024-01-02 23:59:59.999999', 6, 'UTC')))), NULL) AS `context.columns.views`,
            tuple(divide(sumMergeIf(web_bounces_combined.bounces_count_state, and(greaterOrEquals(web_bounces_combined.period_bucket, toDateTime64('2024-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(web_bounces_combined.period_bucket, toDateTime64('2024-01-02 23:59:59.999999', 6, 'UTC')))), nullIf(uniqMergeIf(web_bounces_combined.sessions_uniq_state, and(greaterOrEquals(web_bounces_combined.period_bucket, toDateTime64('2024-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(web_bounces_combined.period_bucket, toDateTime64('2024-01-02 23:59:59.999999', 6, 'UTC')))), 0)), NULL) AS `context.columns.bounce_rate`
     FROM web_bounces_combined
     WHERE and(equals(web_bounces_combined.team_id, 99999), and(and(greaterOrEquals(web_bounces_combined.period_bucket, toDateTime64('2024-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(web_bounces_combined.period_bucket, toDateTime64('2024-01-02 23:59:59.999999', 6, 'UTC'))), isNotNull(nullIf(web_bounces_combined.entry_pathname, ''))))
     GROUP BY `context.columns.breakdown_value`) AS bounces ON equals(web_stats_combined.pathname, bounces.`context.columns.breakdown_value`)
  WHERE and(equals(web_stats_combined.team_id, 99999), and(and(greaterOrEquals(web_stats_combined.period_bucket, toDateTime64('2024-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(web_stats_combined.period_bucket, toDateTime64('2024-01-02 23:59:59.999999', 6, 'UTC'))), isNotNull(nullIf(web_stats_combined.pathname, ''))))
  GROUP BY `context.columns.breakdown_value`
  ORDER BY `context.columns.views` DESC
  LIMIT 101
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=4000000,
                    max_expanded_ast_elements=4000000,
                    max_bytes_before_external_group_by=0,
                    transform_null_in=1,
                    optimize_min_equality_disjunction_chain_length=4294967295,
                    allow_experimental_join_condition=1
  '''
# ---
# name: TestWebStatsPreAggregated.test_property_filtering
  '''
  SELECT nullIf(nullIf(web_stats_combined.device_type, ''), 'null') AS `context.columns.breakdown_value`,
         tuple(uniqMergeIf(web_stats_combined.persons_uniq_state, and(greaterOrEquals(web_stats_combined.period_bucket, toDateTime64('2024-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(web_stats_combined.period_bucket, toDateTime64('2024-01-02 23:59:59.999999', 6, 'UTC')))), NULL) AS `context.columns.visitors`,
         tuple(sumMergeIf(web_stats_combined.pageviews_count_state, and(greaterOrEquals(web_stats_combined.period_bucket, toDateTime64('2024-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(web_stats_combined.period_bucket, toDateTime64('2024-01-02 23:59:59.999999', 6, 'UTC')))), NULL) AS `context.columns.views`
  FROM web_stats_combined
  WHERE and(equals(web_stats_combined.team_id, 99999), greaterOrEquals(web_stats_combined.period_bucket, toDateTime64('2024-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(web_stats_combined.period_bucket, toDateTime64('2024-01-02 23:59:59.999999', 6, 'UTC')), ifNull(equals(web_stats_combined.pathname, '/landing'), 0))
  GROUP BY `context.columns.breakdown_value`
  ORDER BY `context.columns.views` DESC
  LIMIT 101
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=4000000,
                    max_expanded_ast_elements=4000000,
                    max_bytes_before_external_group_by=0,
                    transform_null_in=1,
                    optimize_min_equality_disjunction_chain_length=4294967295,
                    allow_experimental_join_condition=1
  '''
# ---
# name: TestWebStatsPreAggregated.test_utm_source_breakdown
  '''
  SELECT nullIf(nullIf(web_stats_combined.utm_source, ''), 'null') AS `context.columns.breakdown_value`,
         tuple(uniqMergeIf(web_stats_combined.persons_uniq_state, and(greaterOrEquals(web_stats_combined.period_bucket, toDateTime64('2024-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(web_stats_combined.period_bucket, toDateTime64('2024-01-02 23:59:59.999999', 6, 'UTC')))), NULL) AS `context.columns.visitors`,
         tuple(sumMergeIf(web_stats_combined.pageviews_count_state, and(greaterOrEquals(web_stats_combined.period_bucket, toDateTime64('2024-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(web_stats_combined.period_bucket, toDateTime64('2024-01-02 23:59:59.999999', 6, 'UTC')))), NULL) AS `context.columns.views`
  FROM web_stats_combined
  WHERE and(equals(web_stats_combined.team_id, 99999), greaterOrEquals(web_stats_combined.period_bucket, toDateTime64('2024-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(web_stats_combined.period_bucket, toDateTime64('2024-01-02 23:59:59.999999', 6, 'UTC')))
  GROUP BY `context.columns.breakdown_value`
  ORDER BY `context.columns.views` DESC
  LIMIT 101
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=4000000,
                    max_expanded_ast_elements=4000000,
                    max_bytes_before_external_group_by=0,
                    transform_null_in=1,
                    optimize_min_equality_disjunction_chain_length=4294967295,
                    allow_experimental_join_condition=1
  '''
# ---
# name: TestWebStatsPreAggregated.test_viewport_breakdown
  '''
  SELECT nullIf(nullIf(concat(ifNull(toString(web_stats_combined.viewport_width), ''), 'x', ifNull(toString(web_stats_combined.viewport_height), '')), ''), 'null') AS `context.columns.breakdown_value`,
         tuple(uniqMergeIf(web_stats_combined.persons_uniq_state, and(greaterOrEquals(web_stats_combined.period_bucket, toDateTime64('2024-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(web_stats_combined.period_bucket, toDateTime64('2024-01-02 23:59:59.999999', 6, 'UTC')))), NULL) AS `context.columns.visitors`,
         tuple(sumMergeIf(web_stats_combined.pageviews_count_state, and(greaterOrEquals(web_stats_combined.period_bucket, toDateTime64('2024-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(web_stats_combined.period_bucket, toDateTime64('2024-01-02 23:59:59.999999', 6, 'UTC')))), NULL) AS `context.columns.views`
  FROM web_stats_combined
  WHERE and(equals(web_stats_combined.team_id, 99999), greaterOrEquals(web_stats_combined.period_bucket, toDateTime64('2024-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(web_stats_combined.period_bucket, toDateTime64('2024-01-02 23:59:59.999999', 6, 'UTC')))
  GROUP BY `context.columns.breakdown_value`
  ORDER BY `context.columns.views` DESC
  LIMIT 101
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=4000000,
                    max_expanded_ast_elements=4000000,
                    max_bytes_before_external_group_by=0,
                    transform_null_in=1,
                    optimize_min_equality_disjunction_chain_length=4294967295,
                    allow_experimental_join_condition=1
  '''
# ---
