# serializer version: 1
# name: TestRevenueExampleDataWarehouseTablesQueryRunner.test_multiple_tables_query
  '''
  SELECT 'database_with_revenue_column_a' AS table_name,
         accurateCastOrNull(database_with_revenue_column_a.revenue_a, 'Decimal64(10)') AS original_revenue,
         accurateCastOrNull(database_with_revenue_column_a.revenue_a, 'Decimal64(10)') AS revenue,
         'USD' AS original_currency,
         'GBP' AS currency
  FROM s3('test://localhost', 'test-key', 'test-secret', 'Parquet', '`id` String, `revenue_a` Float64, `timestamp` DateTime') AS database_with_revenue_column_a
  ORDER BY toTimeZone(database_with_revenue_column_a.timestamp, 'UTC') DESC
  LIMIT 101
  OFFSET 0
  UNION ALL
  SELECT 'database_with_revenue_column_b' AS table_name,
         accurateCastOrNull(database_with_revenue_column_b.revenue_b, 'Decimal64(10)') AS original_revenue,
         accurateCastOrNull(database_with_revenue_column_b.revenue_b, 'Decimal64(10)') AS revenue,
         'EUR' AS original_currency,
         'GBP' AS currency
  FROM s3('test://localhost', 'test-key', 'test-secret', 'Parquet', '`id` String, `revenue_b` Float64, `timestamp` DateTime') AS database_with_revenue_column_b
  ORDER BY toTimeZone(database_with_revenue_column_b.timestamp, 'UTC') DESC
  LIMIT 101
  OFFSET 0
  UNION ALL
  SELECT 'database_with_revenue_column_c' AS table_name,
         accurateCastOrNull(database_with_revenue_column_c.revenue_c, 'Decimal64(10)') AS original_revenue,
         accurateCastOrNull(database_with_revenue_column_c.revenue_c, 'Decimal64(10)') AS revenue,
         upper(database_with_revenue_column_c.currency) AS original_currency,
         'GBP' AS currency
  FROM s3('test://localhost', 'test-key', 'test-secret', 'Parquet', '`id` String, `currency` Float64, `revenue_c` Float64, `timestamp` DateTime') AS database_with_revenue_column_c
  ORDER BY toTimeZone(database_with_revenue_column_c.timestamp, 'UTC') DESC
  LIMIT 101
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=4000000,
                    max_expanded_ast_elements=4000000,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestRevenueExampleDataWarehouseTablesQueryRunner.test_multiple_tables_query_with_currency_conversion
  '''
  SELECT 'database_with_revenue_column_a' AS table_name,
         accurateCastOrNull(database_with_revenue_column_a.revenue_a, 'Decimal64(10)') AS original_revenue,
         if(isNull('USD'), accurateCastOrNull(database_with_revenue_column_a.revenue_a, 'Decimal64(10)'), if(dictGetOrDefault(`posthog_test`.`exchange_rate_dict`, 'rate', 'USD', toDate(toTimeZone(database_with_revenue_column_a.timestamp, 'UTC')), toDecimal64(0, 10)) = 0, toDecimal64(0, 10), multiplyDecimal(divideDecimal(toDecimal64(database_with_revenue_column_a.revenue_a, 10), dictGetOrDefault(`posthog_test`.`exchange_rate_dict`, 'rate', 'USD', toDate(toTimeZone(database_with_revenue_column_a.timestamp, 'UTC')), toDecimal64(0, 10))), dictGetOrDefault(`posthog_test`.`exchange_rate_dict`, 'rate', 'GBP', toDate(toTimeZone(database_with_revenue_column_a.timestamp, 'UTC')), toDecimal64(0, 10))))) AS revenue,
         'USD' AS original_currency,
         'GBP' AS currency
  FROM s3('test://localhost', 'test-key', 'test-secret', 'Parquet', '`id` String, `revenue_a` Float64, `timestamp` DateTime') AS database_with_revenue_column_a
  ORDER BY toTimeZone(database_with_revenue_column_a.timestamp, 'UTC') DESC
  LIMIT 101
  OFFSET 0
  UNION ALL
  SELECT 'database_with_revenue_column_b' AS table_name,
         accurateCastOrNull(database_with_revenue_column_b.revenue_b, 'Decimal64(10)') AS original_revenue,
         if(isNull('EUR'), accurateCastOrNull(database_with_revenue_column_b.revenue_b, 'Decimal64(10)'), if(dictGetOrDefault(`posthog_test`.`exchange_rate_dict`, 'rate', 'EUR', toDate(toTimeZone(database_with_revenue_column_b.timestamp, 'UTC')), toDecimal64(0, 10)) = 0, toDecimal64(0, 10), multiplyDecimal(divideDecimal(toDecimal64(database_with_revenue_column_b.revenue_b, 10), dictGetOrDefault(`posthog_test`.`exchange_rate_dict`, 'rate', 'EUR', toDate(toTimeZone(database_with_revenue_column_b.timestamp, 'UTC')), toDecimal64(0, 10))), dictGetOrDefault(`posthog_test`.`exchange_rate_dict`, 'rate', 'GBP', toDate(toTimeZone(database_with_revenue_column_b.timestamp, 'UTC')), toDecimal64(0, 10))))) AS revenue,
         'EUR' AS original_currency,
         'GBP' AS currency
  FROM s3('test://localhost', 'test-key', 'test-secret', 'Parquet', '`id` String, `revenue_b` Float64, `timestamp` DateTime') AS database_with_revenue_column_b
  ORDER BY toTimeZone(database_with_revenue_column_b.timestamp, 'UTC') DESC
  LIMIT 101
  OFFSET 0
  UNION ALL
  SELECT 'database_with_revenue_column_c' AS table_name,
         accurateCastOrNull(database_with_revenue_column_c.revenue_c, 'Decimal64(10)') AS original_revenue,
         if(isNull(upper(database_with_revenue_column_c.currency)), accurateCastOrNull(database_with_revenue_column_c.revenue_c, 'Decimal64(10)'), if(dictGetOrDefault(`posthog_test`.`exchange_rate_dict`, 'rate', upper(database_with_revenue_column_c.currency), toDate(toTimeZone(database_with_revenue_column_c.timestamp, 'UTC')), toDecimal64(0, 10)) = 0, toDecimal64(0, 10), multiplyDecimal(divideDecimal(toDecimal64(database_with_revenue_column_c.revenue_c, 10), dictGetOrDefault(`posthog_test`.`exchange_rate_dict`, 'rate', upper(database_with_revenue_column_c.currency), toDate(toTimeZone(database_with_revenue_column_c.timestamp, 'UTC')), toDecimal64(0, 10))), dictGetOrDefault(`posthog_test`.`exchange_rate_dict`, 'rate', 'GBP', toDate(toTimeZone(database_with_revenue_column_c.timestamp, 'UTC')), toDecimal64(0, 10))))) AS revenue,
         upper(database_with_revenue_column_c.currency) AS original_currency,
         'GBP' AS currency
  FROM s3('test://localhost', 'test-key', 'test-secret', 'Parquet', '`id` String, `currency` Float64, `revenue_c` Float64, `timestamp` DateTime') AS database_with_revenue_column_c
  ORDER BY toTimeZone(database_with_revenue_column_c.timestamp, 'UTC') DESC
  LIMIT 101
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=4000000,
                    max_expanded_ast_elements=4000000,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestRevenueExampleDataWarehouseTablesQueryRunner.test_no_crash_when_no_data
  '''
  SELECT 1
  WHERE 0
  LIMIT 101
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=4000000,
                    max_expanded_ast_elements=4000000,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestRevenueExampleDataWarehouseTablesQueryRunner.test_single_table_query
  '''
  SELECT 'database_with_revenue_column' AS table_name,
         accurateCastOrNull(database_with_revenue_column.revenue, 'Decimal64(10)') AS original_revenue,
         accurateCastOrNull(database_with_revenue_column.revenue, 'Decimal64(10)') AS revenue,
         'USD' AS original_currency,
         'USD' AS currency
  FROM s3('test://localhost', 'test-key', 'test-secret', 'Parquet', '`id` String, `revenue` Float64, `timestamp` DateTime') AS database_with_revenue_column
  ORDER BY toTimeZone(database_with_revenue_column.timestamp, 'UTC') DESC
  LIMIT 101
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=4000000,
                    max_expanded_ast_elements=4000000,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestRevenueExampleDataWarehouseTablesQueryRunner.test_single_table_query_with_currency_conversion
  '''
  SELECT 'database_with_revenue_column' AS table_name,
         accurateCastOrNull(database_with_revenue_column.revenue, 'Decimal64(10)') AS original_revenue,
         if(isNull('USD'), accurateCastOrNull(database_with_revenue_column.revenue, 'Decimal64(10)'), if(dictGetOrDefault(`posthog_test`.`exchange_rate_dict`, 'rate', 'USD', toDate(toTimeZone(database_with_revenue_column.timestamp, 'UTC')), toDecimal64(0, 10)) = 0, toDecimal64(0, 10), multiplyDecimal(divideDecimal(toDecimal64(database_with_revenue_column.revenue, 10), dictGetOrDefault(`posthog_test`.`exchange_rate_dict`, 'rate', 'USD', toDate(toTimeZone(database_with_revenue_column.timestamp, 'UTC')), toDecimal64(0, 10))), dictGetOrDefault(`posthog_test`.`exchange_rate_dict`, 'rate', 'GBP', toDate(toTimeZone(database_with_revenue_column.timestamp, 'UTC')), toDecimal64(0, 10))))) AS revenue,
         'USD' AS original_currency,
         'GBP' AS currency
  FROM s3('test://localhost', 'test-key', 'test-secret', 'Parquet', '`id` String, `revenue` Float64, `timestamp` DateTime') AS database_with_revenue_column
  ORDER BY toTimeZone(database_with_revenue_column.timestamp, 'UTC') DESC
  LIMIT 101
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=4000000,
                    max_expanded_ast_elements=4000000,
                    max_bytes_before_external_group_by=0
  '''
# ---
