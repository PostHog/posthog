# serializer version: 1
# name: TestCohort.test_async_deletion_of_cohort
  '''
  /* user_id:0 celery:posthog.tasks.calculate_cohort.calculate_cohort_ch */
  SELECT count(DISTINCT person_id)
  FROM cohortpeople
  WHERE team_id = 99999
    AND cohort_id = 99999
    AND version = NULL
  '''
# ---
# name: TestCohort.test_async_deletion_of_cohort.1
  '''
  /* user_id:0 cohort_calculation:posthog.tasks.calculate_cohort.calculate_cohort_ch */
  INSERT INTO cohortpeople
  SELECT id,
         99999 as cohort_id,
         99999 as team_id,
         1 AS sign,
         1 AS version
  FROM
    (SELECT if(behavior_query.person_id = '00000000-0000-0000-0000-000000000000', person.person_id, behavior_query.person_id) AS id
     FROM
       (SELECT pdi.person_id AS person_id,
               countIf(timestamp > now() - INTERVAL 1 day
                       AND timestamp < now()
                       AND event = '$pageview'
                       AND 1=1) > 0 AS performed_event_condition_X_level_level_0_level_1_level_0_0
        FROM events e
        LEFT OUTER JOIN
          (SELECT distinct_id,
                  argMax(person_id, version) as person_id
           FROM person_distinct_id2
           WHERE team_id = 99999
           GROUP BY distinct_id
           HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
        WHERE team_id = 99999
          AND event IN ['$pageview']
          AND timestamp <= now()
          AND timestamp >= now() - INTERVAL 1 day
        GROUP BY person_id) behavior_query
     FULL OUTER JOIN
       (SELECT *,
               id AS person_id
        FROM
          (SELECT id,
                  argMax(properties, version) as person_props
           FROM person
           WHERE team_id = 99999
           GROUP BY id
           HAVING max(is_deleted) = 0 SETTINGS optimize_aggregation_in_order = 1)) person ON person.person_id = behavior_query.person_id
     WHERE 1 = 1
       AND ((((has(['something'], replaceRegexpAll(JSONExtractRaw(person_props, '$some_prop'), '^"|"$', ''))))
             OR ((performed_event_condition_X_level_level_0_level_1_level_0_0)))) SETTINGS optimize_aggregation_in_order = 1,
                                                                                           join_algorithm = 'auto' ) as person
  UNION ALL
  SELECT person_id,
         cohort_id,
         team_id,
         -1,
         version
  FROM cohortpeople
  WHERE team_id = 99999
    AND cohort_id = 99999
    AND version < 1
    AND sign = 1 SETTINGS optimize_aggregation_in_order = 1,
                          join_algorithm = 'auto'
  '''
# ---
# name: TestCohort.test_async_deletion_of_cohort.10
  '''
  /* celery:posthog.tasks.tasks.clickhouse_clear_removed_data */
  SELECT DISTINCT team_id,
                  cohort_id
  FROM cohortpeople
  WHERE (team_id = 99999
         AND cohort_id = '2'
         AND version < '4')
  '''
# ---
# name: TestCohort.test_async_deletion_of_cohort.11
  '''
  /* celery:posthog.tasks.tasks.clickhouse_clear_removed_data */
  DELETE
  FROM cohortpeople
  WHERE (team_id = 99999
         AND cohort_id = '2'
         AND version < '4')
  '''
# ---
# name: TestCohort.test_async_deletion_of_cohort.12
  '''
  SELECT count()
  FROM cohortpeople
  WHERE cohort_id = 99999
  '''
# ---
# name: TestCohort.test_async_deletion_of_cohort.13
  '''
  /* celery:posthog.tasks.tasks.clickhouse_clear_removed_data */
  SELECT DISTINCT team_id,
                  cohort_id
  FROM cohortpeople
  WHERE (team_id = 99999
         AND cohort_id = '2'
         AND version < '4')
  '''
# ---
# name: TestCohort.test_async_deletion_of_cohort.2
  '''
  /* user_id:0 cohort_calculation:posthog.tasks.calculate_cohort.calculate_cohort_ch */
  SELECT count(DISTINCT person_id)
  FROM cohortpeople
  WHERE team_id = 99999
    AND cohort_id = 99999
    AND version = 1
  '''
# ---
# name: TestCohort.test_async_deletion_of_cohort.3
  '''
  /* user_id:0 celery:posthog.tasks.calculate_cohort.clear_stale_cohort */
  SELECT team_id,
         count() AS stale_people_count
  FROM cohortpeople
  WHERE team_id IN [1, 2, 3, 4, 5 /* ... */]
    AND cohort_id = 99999
    AND version < 1
  GROUP BY team_id
  HAVING stale_people_count > 0
  '''
# ---
# name: TestCohort.test_async_deletion_of_cohort.4
  '''
  /* user_id:0 cohort_calculation: */
  INSERT INTO cohortpeople
  SELECT id,
         99999 as cohort_id,
         99999 as team_id,
         -1 AS sign,
         0 AS version
  FROM ((
           (SELECT persons.id AS id
            FROM
              (SELECT argMax(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, '$some_prop'), ''), 'null'), '^"|"$', ''), person.version) AS `properties___$some_prop`,
                      person.id AS id
               FROM person
               WHERE and(equals(person.team_id, 99999), in(id,
                                                             (SELECT where_optimization.id AS id
                                                              FROM person AS where_optimization
                                                              WHERE and(equals(where_optimization.team_id, 99999), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(where_optimization.properties, '$some_prop'), ''), 'null'), '^"|"$', ''), 'something'), 0)))))
               GROUP BY person.id
               HAVING and(ifNull(equals(argMax(person.is_deleted, person.version), 0), 0), ifNull(less(argMax(toTimeZone(person.created_at, 'UTC'), person.version), plus(now64(6, 'UTC'), toIntervalDay(1))), 0))) AS persons
            WHERE ifNull(equals(persons.`properties___$some_prop`, 'something'), 0)
            ORDER BY persons.id ASC
            LIMIT 100 SETTINGS optimize_aggregation_in_order=1,
                               join_algorithm='auto'))
        UNION DISTINCT (
                          (SELECT source.id AS id
                           FROM
                             (SELECT actor_id AS actor_id,
                                     count() AS event_count,
                                     groupUniqArray(distinct_id) AS event_distinct_ids,
                                     actor_id AS id
                              FROM
                                (SELECT if(not(empty(e__override.distinct_id)), e__override.person_id, e.person_id) AS actor_id,
                                        toTimeZone(e.timestamp, 'UTC') AS timestamp,
                                        e.uuid AS uuid,
                                        e.distinct_id AS distinct_id
                                 FROM events AS e
                                 LEFT OUTER JOIN
                                   (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                                           person_distinct_id_overrides.distinct_id AS distinct_id
                                    FROM person_distinct_id_overrides
                                    WHERE equals(person_distinct_id_overrides.team_id, 99999)
                                    GROUP BY person_distinct_id_overrides.distinct_id
                                    HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS e__override ON equals(e.distinct_id, e__override.distinct_id)
                                 WHERE and(equals(e.team_id, 99999), greaterOrEquals(timestamp, toDateTime64('explicit_redacted_timestamp.000000', 6, 'UTC')), lessOrEquals(timestamp, toDateTime64('explicit_redacted_timestamp.999999', 6, 'UTC')), equals(e.event, '$pageview')))
                              GROUP BY actor_id) AS source
                           ORDER BY source.id ASC
                           LIMIT 100 SETTINGS optimize_aggregation_in_order=1,
                                              join_algorithm='auto'))) as person SETTINGS optimize_aggregation_in_order = 1,
                                                                                          join_algorithm = 'auto'
  '''
# ---
# name: TestCohort.test_async_deletion_of_cohort.5
  '''
  /* user_id:0 celery:posthog.tasks.calculate_cohort.calculate_cohort_ch */
  SELECT count(DISTINCT person_id)
  FROM cohortpeople
  WHERE team_id = 99999
    AND cohort_id = 99999
    AND version = 1
  '''
# ---
# name: TestCohort.test_async_deletion_of_cohort.6
  '''
  /* user_id:0 cohort_calculation:posthog.tasks.calculate_cohort.calculate_cohort_ch */
  INSERT INTO cohortpeople
  SELECT id,
         99999 as cohort_id,
         99999 as team_id,
         1 AS sign,
         4 AS version
  FROM
    (SELECT id
     FROM person
     WHERE team_id = 99999
       AND id IN
         (SELECT id
          FROM person
          WHERE team_id = 99999
            AND ((has(['something'], replaceRegexpAll(JSONExtractRaw(properties, '$some_prop'), '^"|"$', '')))) )
     GROUP BY id
     HAVING max(is_deleted) = 0
     AND ((has(['something'], replaceRegexpAll(JSONExtractRaw(argMax(person.properties, version), '$some_prop'), '^"|"$', '')))) SETTINGS optimize_aggregation_in_order = 1) as person
  UNION ALL
  SELECT person_id,
         cohort_id,
         team_id,
         -1,
         version
  FROM cohortpeople
  WHERE team_id = 99999
    AND cohort_id = 99999
    AND version < 4
    AND sign = 1 SETTINGS optimize_aggregation_in_order = 1,
                          join_algorithm = 'auto'
  '''
# ---
# name: TestCohort.test_async_deletion_of_cohort.7
  '''
  /* user_id:0 cohort_calculation:posthog.tasks.calculate_cohort.calculate_cohort_ch */
  SELECT count(DISTINCT person_id)
  FROM cohortpeople
  WHERE team_id = 99999
    AND cohort_id = 99999
    AND version = 4
  '''
# ---
# name: TestCohort.test_async_deletion_of_cohort.8
  '''
  /* user_id:0 celery:posthog.tasks.calculate_cohort.clear_stale_cohort */
  SELECT team_id,
         count() AS stale_people_count
  FROM cohortpeople
  WHERE team_id IN [1, 2, 3, 4, 5 /* ... */]
    AND cohort_id = 99999
    AND version < 4
  GROUP BY team_id
  HAVING stale_people_count > 0
  '''
# ---
# name: TestCohort.test_async_deletion_of_cohort.9
  '''
  /* user_id:0 cohort_calculation: */
  INSERT INTO cohortpeople
  SELECT id,
         99999 as cohort_id,
         99999 as team_id,
         -1 AS sign,
         3 AS version
  FROM (
          (SELECT persons.id AS id
           FROM
             (SELECT argMax(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, '$some_prop'), ''), 'null'), '^"|"$', ''), person.version) AS `properties___$some_prop`,
                     person.id AS id
              FROM person
              WHERE and(equals(person.team_id, 99999), in(id,
                                                            (SELECT where_optimization.id AS id
                                                             FROM person AS where_optimization
                                                             WHERE and(equals(where_optimization.team_id, 99999), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(where_optimization.properties, '$some_prop'), ''), 'null'), '^"|"$', ''), 'something'), 0)))))
              GROUP BY person.id
              HAVING and(ifNull(equals(argMax(person.is_deleted, person.version), 0), 0), ifNull(less(argMax(toTimeZone(person.created_at, 'UTC'), person.version), plus(now64(6, 'UTC'), toIntervalDay(1))), 0))) AS persons
           WHERE ifNull(equals(persons.`properties___$some_prop`, 'something'), 0)
           ORDER BY persons.id ASC
           LIMIT 100 SETTINGS optimize_aggregation_in_order=1,
                              join_algorithm='auto')) as person SETTINGS optimize_aggregation_in_order = 1,
                                                                         join_algorithm = 'auto'
  '''
# ---
