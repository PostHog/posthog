# name: TestActionPeople.test_trends_people_endpoint_includes_recordings
  '
  /* request:api_projects_(?P<parent_lookup_team_id>[^_.]+)_actions_people_?$ (ActionViewSet) */
  SELECT person_id AS actor_id ,
         groupUniqArray(10)((timestamp,
                             uuid,
                             $session_id,
                             $window_id)) as matching_events
  FROM
    (SELECT e.timestamp as timestamp,
            e."properties" as "properties",
            e."$window_id" as $window_id,
            e."$session_id" as $session_id,
            pdi.person_id as person_id,
            e.distinct_id as distinct_id,
            e.team_id as team_id,
            e.uuid as uuid
     FROM events e
     INNER JOIN
       (SELECT distinct_id,
               argMax(person_id, version) as person_id
        FROM person_distinct_id2
        WHERE team_id = 2
        GROUP BY distinct_id
        HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
     WHERE team_id = 2
       AND event = '$pageview'
       AND timestamp >= toStartOfDay(toDateTime('2020-01-08 00:00:00'), 'UTC')
       AND timestamp <= toDateTime('2020-01-12 23:59:59')
       AND (has([''], replaceRegexpAll(JSONExtractRaw(e.properties, 'key'), '^"|"$', ''))) )
  GROUP BY actor_id
  LIMIT 200
  OFFSET 0
  '
---
# name: TestActionPeople.test_trends_people_endpoint_includes_recordings.1
  '
  /* request:api_projects_(?P<parent_lookup_team_id>[^_.]+)_actions_people_?$ (ActionViewSet) */
  SELECT DISTINCT session_id
  FROM session_recording_events
  WHERE team_id = 2
    and has_full_snapshot = 1
    and session_id in ['s1']
  '
---
