# name: TestPerson.test_filter_person_email
  '
  /* user_id:0 request:_snapshot_ */
  SELECT id
  FROM person
  WHERE team_id = 2
  GROUP BY id
  HAVING max(is_deleted) = 0
  AND has(['another@gmail.com'], replaceRegexpAll(JSONExtractRaw(properties, 'email'), '^"|"$', ''))
  ORDER BY max(created_at) DESC, id
  LIMIT 100
  '
---
# name: TestPerson.test_filter_person_email_materialized
  '
  /* user_id:0 request:_snapshot_ */
  SELECT id
  FROM person
  WHERE team_id = 2
  GROUP BY id
  HAVING max(is_deleted) = 0
  AND has(['another@gmail.com'], "pmat_email")
  ORDER BY max(created_at) DESC, id
  LIMIT 100
  '
---
# name: TestPerson.test_filter_person_prop
  '
  /* user_id:0 request:_snapshot_ */
  SELECT id
  FROM person
  WHERE team_id = 2
    AND id IN
      (SELECT id
       FROM person
       WHERE team_id = 2
         AND (has(['some_value'], replaceRegexpAll(JSONExtractRaw(person.properties, 'some_prop'), '^"|"$', ''))) )
  GROUP BY id
  HAVING max(is_deleted) = 0
  AND (has(['some_value'], replaceRegexpAll(JSONExtractRaw(argMax(person.properties, version), 'some_prop'), '^"|"$', '')))
  ORDER BY max(created_at) DESC, id
  LIMIT 100
  '
---
# name: TestPerson.test_person_property_values
  '
  /* user_id:0 request:_snapshot_ */
  SELECT value,
         count(value)
  FROM
    (SELECT replaceRegexpAll(JSONExtractRaw(properties, 'random_prop'), '^"|"$', '') as value
     FROM person
     WHERE team_id = 2
       AND is_deleted = 0
       AND replaceRegexpAll(JSONExtractRaw(properties, 'random_prop'), '^"|"$', '') IS NOT NULL
       AND replaceRegexpAll(JSONExtractRaw(properties, 'random_prop'), '^"|"$', '') != ''
     ORDER BY id DESC
     LIMIT 100000)
  GROUP BY value
  ORDER BY count(value) DESC
  LIMIT 20
  '
---
# name: TestPerson.test_person_property_values.1
  '
  /* user_id:0 request:_snapshot_ */
  SELECT value,
         count(value)
  FROM
    (SELECT replaceRegexpAll(JSONExtractRaw(properties, 'random_prop'), '^"|"$', '') as value
     FROM person
     WHERE team_id = 2
       AND is_deleted = 0
       AND replaceRegexpAll(JSONExtractRaw(properties, 'random_prop'), '^"|"$', '') ILIKE '%qw%'
     ORDER BY id DESC
     LIMIT 100000)
  GROUP BY value
  ORDER BY count(value) DESC
  LIMIT 20
  '
---
# name: TestPerson.test_person_property_values_materialized
  '
  /* user_id:0 request:_snapshot_ */
  SELECT value,
         count(value)
  FROM
    (SELECT "pmat_random_prop" as value
     FROM person
     WHERE team_id = 2
       AND is_deleted = 0
       AND "pmat_random_prop" IS NOT NULL
       AND "pmat_random_prop" != ''
     ORDER BY id DESC
     LIMIT 100000)
  GROUP BY value
  ORDER BY count(value) DESC
  LIMIT 20
  '
---
# name: TestPerson.test_person_property_values_materialized.1
  '
  /* user_id:0 request:_snapshot_ */
  SELECT value,
         count(value)
  FROM
    (SELECT "pmat_random_prop" as value
     FROM person
     WHERE team_id = 2
       AND is_deleted = 0
       AND "pmat_random_prop" ILIKE '%qw%'
     ORDER BY id DESC
     LIMIT 100000)
  GROUP BY value
  ORDER BY count(value) DESC
  LIMIT 20
  '
---
# name: TestPropertiesTimeline.test_double_point_timeline_for_existing_person_is_returned
  '
  /* user_id:0 request:_snapshot_ */
  SELECT timestamp,
         properties,
         start_event_number - if(previous_start_event_number > 0, previous_start_event_number, 1) AS relevant_events_since_previous_point
  FROM
    (SELECT timestamp,
            properties,
            start_event_number,
            lagInFrame(start_event_number) OVER person_points AS previous_start_event_number
     FROM
       (SELECT timestamp,
               person_properties AS properties,
               tuple(replaceRegexpAll(JSONExtractRaw(person_properties, 'bar'), '^"|"$', '')) AS relevant_property_values,
               lagInFrame(tuple(replaceRegexpAll(JSONExtractRaw(person_properties, 'bar'), '^"|"$', ''))) OVER person_events AS previous_relevant_property_values,
                                                                                                               row_number() OVER person_events AS start_event_number
        FROM (
                (SELECT e.timestamp as timestamp,
                        e."person_properties" as "person_properties"
                 FROM events e PREWHERE team_id = 2
                 AND e.person_id = '00000000-0000-4000-8000-000000000001'
                 AND (event = '$pageview')
                 AND toDateTime(timestamp, 'UTC') < toDateTime('2020-01-01 00:00:00', 'UTC')
                 ORDER BY timestamp DESC
                 LIMIT 1)
              UNION ALL
                (SELECT e.timestamp as timestamp,
                        e."person_properties" as "person_properties"
                 FROM events e PREWHERE team_id = 2
                 AND e.person_id = '00000000-0000-4000-8000-000000000001'
                 AND (event = '$pageview')
                 AND toDateTime(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
                 AND toDateTime(timestamp, 'UTC') <= toDateTime('2020-01-05 23:59:59', 'UTC')
                 ORDER BY timestamp ASC)) WINDOW person_events AS (
                                                                   ORDER BY timestamp ASC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING))
     WHERE start_event_number = 1
       OR relevant_property_values != previous_relevant_property_values WINDOW person_points AS (
                                                                                                 ORDER BY timestamp ASC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) )
  '
---
# name: TestPropertiesTimeline.test_single_point_timeline_is_returned
  '
  /* user_id:0 request:_snapshot_ */
  SELECT timestamp,
         properties,
         start_event_number - if(previous_start_event_number > 0, previous_start_event_number, 1) AS relevant_events_since_previous_point
  FROM
    (SELECT timestamp,
            properties,
            start_event_number,
            lagInFrame(start_event_number) OVER person_points AS previous_start_event_number
     FROM
       (SELECT timestamp,
               person_properties AS properties,
               tuple(replaceRegexpAll(JSONExtractRaw(person_properties, 'bar'), '^"|"$', '')) AS relevant_property_values,
               lagInFrame(tuple(replaceRegexpAll(JSONExtractRaw(person_properties, 'bar'), '^"|"$', ''))) OVER person_events AS previous_relevant_property_values,
                                                                                                               row_number() OVER person_events AS start_event_number
        FROM (
                (SELECT e.timestamp as timestamp,
                        e."person_properties" as "person_properties"
                 FROM events e PREWHERE team_id = 2
                 AND e.person_id = '00000000-0000-4000-8000-000000000000'
                 AND (event = '$pageview')
                 AND toDateTime(timestamp, 'UTC') < toDateTime('2020-01-01 00:00:00', 'UTC')
                 ORDER BY timestamp DESC
                 LIMIT 1)
              UNION ALL
                (SELECT e.timestamp as timestamp,
                        e."person_properties" as "person_properties"
                 FROM events e PREWHERE team_id = 2
                 AND e.person_id = '00000000-0000-4000-8000-000000000000'
                 AND (event = '$pageview')
                 AND toDateTime(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
                 AND toDateTime(timestamp, 'UTC') <= toDateTime('2020-01-05 23:59:59', 'UTC')
                 ORDER BY timestamp ASC)) WINDOW person_events AS (
                                                                   ORDER BY timestamp ASC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING))
     WHERE start_event_number = 1
       OR relevant_property_values != previous_relevant_property_values WINDOW person_points AS (
                                                                                                 ORDER BY timestamp ASC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) )
  '
---
# name: TestPropertiesTimeline.test_single_point_timeline_is_returned_materialized
  '
  /* user_id:0 request:_snapshot_ */
  SELECT timestamp,
         properties,
         start_event_number - if(previous_start_event_number > 0, previous_start_event_number, 1) AS relevant_events_since_previous_point
  FROM
    (SELECT timestamp,
            properties,
            start_event_number,
            lagInFrame(start_event_number) OVER person_points AS previous_start_event_number
     FROM
       (SELECT timestamp,
               person_properties AS properties,
               tuple("mat_pp_bar") AS relevant_property_values,
               lagInFrame(tuple("mat_pp_bar")) OVER person_events AS previous_relevant_property_values,
                                                    row_number() OVER person_events AS start_event_number
        FROM (
                (SELECT e.timestamp as timestamp,
                        e."mat_pp_bar" as "mat_pp_bar",
                        e."person_properties" as "person_properties"
                 FROM events e PREWHERE team_id = 2
                 AND e.person_id = '00000000-0000-4000-8000-000000000000'
                 AND (event = '$pageview')
                 AND toDateTime(timestamp, 'UTC') < toDateTime('2020-01-01 00:00:00', 'UTC')
                 ORDER BY timestamp DESC
                 LIMIT 1)
              UNION ALL
                (SELECT e.timestamp as timestamp,
                        e."mat_pp_bar" as "mat_pp_bar",
                        e."person_properties" as "person_properties"
                 FROM events e PREWHERE team_id = 2
                 AND e.person_id = '00000000-0000-4000-8000-000000000000'
                 AND (event = '$pageview')
                 AND toDateTime(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
                 AND toDateTime(timestamp, 'UTC') <= toDateTime('2020-01-05 23:59:59', 'UTC')
                 ORDER BY timestamp ASC)) WINDOW person_events AS (
                                                                   ORDER BY timestamp ASC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING))
     WHERE start_event_number = 1
       OR relevant_property_values != previous_relevant_property_values WINDOW person_points AS (
                                                                                                 ORDER BY timestamp ASC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) )
  '
---
# name: TestPropertiesTimeline.test_timeline_for_existing_person_with_five_events_but_only_two_relevant_changes
  '
  /* user_id:0 request:_snapshot_ */
  SELECT timestamp,
         properties,
         start_event_number - if(previous_start_event_number > 0, previous_start_event_number, 1) AS relevant_events_since_previous_point
  FROM
    (SELECT timestamp,
            properties,
            start_event_number,
            lagInFrame(start_event_number) OVER person_points AS previous_start_event_number
     FROM
       (SELECT timestamp,
               person_properties AS properties,
               tuple(replaceRegexpAll(JSONExtractRaw(person_properties, 'bar'), '^"|"$', '')) AS relevant_property_values,
               lagInFrame(tuple(replaceRegexpAll(JSONExtractRaw(person_properties, 'bar'), '^"|"$', ''))) OVER person_events AS previous_relevant_property_values,
                                                                                                               row_number() OVER person_events AS start_event_number
        FROM (
                (SELECT e.timestamp as timestamp,
                        e."person_properties" as "person_properties"
                 FROM events e PREWHERE team_id = 2
                 AND e.person_id = '00000000-0000-4000-8000-000000000001'
                 AND (event = '$pageview')
                 AND toDateTime(timestamp, 'UTC') < toDateTime('2020-01-01 00:00:00', 'UTC')
                 ORDER BY timestamp DESC
                 LIMIT 1)
              UNION ALL
                (SELECT e.timestamp as timestamp,
                        e."person_properties" as "person_properties"
                 FROM events e PREWHERE team_id = 2
                 AND e.person_id = '00000000-0000-4000-8000-000000000001'
                 AND (event = '$pageview')
                 AND toDateTime(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
                 AND toDateTime(timestamp, 'UTC') <= toDateTime('2020-01-05 23:59:59', 'UTC')
                 ORDER BY timestamp ASC)) WINDOW person_events AS (
                                                                   ORDER BY timestamp ASC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING))
     WHERE start_event_number = 1
       OR relevant_property_values != previous_relevant_property_values WINDOW person_points AS (
                                                                                                 ORDER BY timestamp ASC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) )
  '
---
# name: TestPropertiesTimeline.test_timeline_for_existing_person_with_six_events_but_only_two_relevant_changes
  '
  /* user_id:0 request:_snapshot_ */
  SELECT timestamp,
         properties,
         start_event_number - if(previous_start_event_number > 0, previous_start_event_number, 1) AS relevant_events_since_previous_point
  FROM
    (SELECT timestamp,
            properties,
            start_event_number,
            lagInFrame(start_event_number) OVER person_points AS previous_start_event_number
     FROM
       (SELECT timestamp,
               person_properties AS properties,
               tuple(replaceRegexpAll(JSONExtractRaw(person_properties, 'bar'), '^"|"$', '')) AS relevant_property_values,
               lagInFrame(tuple(replaceRegexpAll(JSONExtractRaw(person_properties, 'bar'), '^"|"$', ''))) OVER person_events AS previous_relevant_property_values,
                                                                                                               row_number() OVER person_events AS start_event_number
        FROM (
                (SELECT e.timestamp as timestamp,
                        e."person_properties" as "person_properties"
                 FROM events e PREWHERE team_id = 2
                 AND person_id = '00000000-0000-4000-8000-000000000001'
                 AND event = '$pageview'
                 AND toDateTime(timestamp, 'UTC') < toDateTime('2020-01-01 00:00:00', 'UTC')
                 ORDER BY timestamp DESC
                 LIMIT 1)
              UNION ALL
                (SELECT e.timestamp as timestamp,
                        e."person_properties" as "person_properties"
                 FROM events e PREWHERE team_id = 2
                 AND person_id = '00000000-0000-4000-8000-000000000001'
                 AND event = '$pageview'
                 AND toDateTime(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
                 AND toDateTime(timestamp, 'UTC') <= toDateTime('2020-01-05 23:59:59', 'UTC')
                 ORDER BY timestamp ASC)) WINDOW person_events AS (
                                                                   ORDER BY timestamp ASC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING))
     WHERE start_event_number = 1
       OR relevant_property_values != previous_relevant_property_values WINDOW person_points AS (
                                                                                                 ORDER BY timestamp ASC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) )
  '
---
# name: TestPropertiesTimeline.test_timeline_for_existing_person_with_two_events
  '
  /* user_id:0 request:_snapshot_ */
  SELECT timestamp,
         properties,
         start_event_number - if(previous_start_event_number > 0, previous_start_event_number, 1) AS relevant_events_since_previous_point
  FROM
    (SELECT timestamp,
            properties,
            start_event_number,
            lagInFrame(start_event_number) OVER person_points AS previous_start_event_number
     FROM
       (SELECT timestamp,
               person_properties AS properties,
               tuple(replaceRegexpAll(JSONExtractRaw(person_properties, 'bar'), '^"|"$', '')) AS relevant_property_values,
               lagInFrame(tuple(replaceRegexpAll(JSONExtractRaw(person_properties, 'bar'), '^"|"$', ''))) OVER person_events AS previous_relevant_property_values,
                                                                                                               row_number() OVER person_events AS start_event_number
        FROM (
                (SELECT e.timestamp as timestamp,
                        e."person_properties" as "person_properties"
                 FROM events e PREWHERE team_id = 2
                 AND person_id = '00000000-0000-4000-8000-000000000000'
                 AND event = '$pageview'
                 AND toDateTime(timestamp, 'UTC') < toDateTime('2020-01-01 00:00:00', 'UTC')
                 ORDER BY timestamp DESC
                 LIMIT 1)
              UNION ALL
                (SELECT e.timestamp as timestamp,
                        e."person_properties" as "person_properties"
                 FROM events e PREWHERE team_id = 2
                 AND person_id = '00000000-0000-4000-8000-000000000000'
                 AND event = '$pageview'
                 AND toDateTime(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
                 AND toDateTime(timestamp, 'UTC') <= toDateTime('2020-01-05 23:59:59', 'UTC')
                 ORDER BY timestamp ASC)) WINDOW person_events AS (
                                                                   ORDER BY timestamp ASC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING))
     WHERE start_event_number = 1
       OR relevant_property_values != previous_relevant_property_values WINDOW person_points AS (
                                                                                                 ORDER BY timestamp ASC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) )
  '
---
# name: TestPropertiesTimeline.test_timeline_for_new_person_with_one_event
  '
  /* user_id:0 request:_snapshot_ */
  SELECT timestamp,
         properties,
         start_event_number - if(previous_start_event_number > 0, previous_start_event_number, 1) AS relevant_events_since_previous_point
  FROM
    (SELECT timestamp,
            properties,
            start_event_number,
            lagInFrame(start_event_number) OVER person_points AS previous_start_event_number
     FROM
       (SELECT timestamp,
               person_properties AS properties,
               tuple(replaceRegexpAll(JSONExtractRaw(person_properties, 'bar'), '^"|"$', '')) AS relevant_property_values,
               lagInFrame(tuple(replaceRegexpAll(JSONExtractRaw(person_properties, 'bar'), '^"|"$', ''))) OVER person_events AS previous_relevant_property_values,
                                                                                                               row_number() OVER person_events AS start_event_number
        FROM (
                (SELECT e.timestamp as timestamp,
                        e."person_properties" as "person_properties"
                 FROM events e PREWHERE team_id = 2
                 AND person_id = '00000000-0000-4000-8000-000000000000'
                 AND event = '$pageview'
                 AND toDateTime(timestamp, 'UTC') < toDateTime('2020-01-01 00:00:00', 'UTC')
                 ORDER BY timestamp DESC
                 LIMIT 1)
              UNION ALL
                (SELECT e.timestamp as timestamp,
                        e."person_properties" as "person_properties"
                 FROM events e PREWHERE team_id = 2
                 AND person_id = '00000000-0000-4000-8000-000000000000'
                 AND event = '$pageview'
                 AND toDateTime(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
                 AND toDateTime(timestamp, 'UTC') <= toDateTime('2020-01-05 23:59:59', 'UTC')
                 ORDER BY timestamp ASC)) WINDOW person_events AS (
                                                                   ORDER BY timestamp ASC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING))
     WHERE start_event_number = 1
       OR relevant_property_values != previous_relevant_property_values WINDOW person_points AS (
                                                                                                 ORDER BY timestamp ASC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) )
  '
---
# name: TestPropertiesTimeline.test_timeline_for_new_person_with_one_event_materialized
  '
  /* user_id:0 request:_snapshot_ */
  SELECT timestamp,
         properties,
         start_event_number - if(previous_start_event_number > 0, previous_start_event_number, 1) AS relevant_events_since_previous_point
  FROM
    (SELECT timestamp,
            properties,
            start_event_number,
            lagInFrame(start_event_number) OVER person_points AS previous_start_event_number
     FROM
       (SELECT timestamp,
               person_properties AS properties,
               tuple("mat_pp_bar") AS relevant_property_values,
               lagInFrame(tuple("mat_pp_bar")) OVER person_events AS previous_relevant_property_values,
                                                    row_number() OVER person_events AS start_event_number
        FROM (
                (SELECT e.timestamp as timestamp,
                        e."mat_pp_bar" as "mat_pp_bar",
                        e."person_properties" as "person_properties"
                 FROM events e PREWHERE team_id = 2
                 AND person_id = '00000000-0000-4000-8000-000000000000'
                 AND event = '$pageview'
                 AND toDateTime(timestamp, 'UTC') < toDateTime('2020-01-01 00:00:00', 'UTC')
                 ORDER BY timestamp DESC
                 LIMIT 1)
              UNION ALL
                (SELECT e.timestamp as timestamp,
                        e."mat_pp_bar" as "mat_pp_bar",
                        e."person_properties" as "person_properties"
                 FROM events e PREWHERE team_id = 2
                 AND person_id = '00000000-0000-4000-8000-000000000000'
                 AND event = '$pageview'
                 AND toDateTime(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
                 AND toDateTime(timestamp, 'UTC') <= toDateTime('2020-01-05 23:59:59', 'UTC')
                 ORDER BY timestamp ASC)) WINDOW person_events AS (
                                                                   ORDER BY timestamp ASC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING))
     WHERE start_event_number = 1
       OR relevant_property_values != previous_relevant_property_values WINDOW person_points AS (
                                                                                                 ORDER BY timestamp ASC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) )
  '
---
