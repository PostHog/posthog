[
    {
        "status": "beta",
        "type": "destination",
        "id": "template-webhook",
        "name": "HTTP Webhook",
        "description": "Sends a webhook templated by the incoming event data",
        "icon_url": "/static/posthog-icon.svg",
        "category": ["Custom"],
        "hog": "\nlet payload := {\n  'headers': inputs.headers,\n  'body': inputs.body,\n  'method': inputs.method\n}\n\nif (inputs.debug) {\n  print('Request', inputs.url, payload)\n}\n\nlet res := fetch(inputs.url, payload);\n\nif (inputs.debug) {\n  print('Response', res.status, res.body);\n}\n",
        "inputs_schema": [
            {
                "key": "url",
                "type": "string",
                "label": "Webhook URL",
                "secret": false,
                "required": true
            },
            {
                "key": "method",
                "type": "choice",
                "label": "Method",
                "secret": false,
                "choices": [
                    {
                        "label": "POST",
                        "value": "POST"
                    },
                    {
                        "label": "PUT",
                        "value": "PUT"
                    },
                    {
                        "label": "PATCH",
                        "value": "PATCH"
                    },
                    {
                        "label": "GET",
                        "value": "GET"
                    },
                    {
                        "label": "DELETE",
                        "value": "DELETE"
                    }
                ],
                "default": "POST",
                "required": false
            },
            {
                "key": "body",
                "type": "json",
                "label": "JSON Body",
                "default": {
                    "event": "{event}",
                    "person": "{person}"
                },
                "secret": false,
                "required": false
            },
            {
                "key": "headers",
                "type": "dictionary",
                "label": "Headers",
                "secret": false,
                "required": false,
                "default": {
                    "Content-Type": "application/json"
                }
            },
            {
                "key": "debug",
                "type": "boolean",
                "label": "Log responses",
                "description": "Logs the response of http calls for debugging.",
                "secret": false,
                "required": false,
                "default": false
            }
        ],
        "sub_templates": [
            {
                "id": "early-access-feature-enrollment",
                "name": "HTTP Webhook on feature enrollment",
                "filters": {
                    "events": [
                        {
                            "id": "$feature_enrollment_update",
                            "type": "events"
                        }
                    ]
                }
            },
            {
                "id": "survey-response",
                "name": "HTTP Webhook on survey response",
                "filters": {
                    "events": [
                        {
                            "id": "survey sent",
                            "type": "events",
                            "properties": [
                                {
                                    "key": "$survey_response",
                                    "type": "event",
                                    "value": "is_set",
                                    "operator": "is_set"
                                }
                            ]
                        }
                    ]
                }
            },
            {
                "id": "activity-log",
                "name": "HTTP Webhook on team activity",
                "filters": {
                    "events": [
                        {
                            "id": "$activity_log_entry_created",
                            "type": "events"
                        }
                    ]
                },
                "type": "internal_destination"
            }
        ]
    },
    {
        "status": "alpha",
        "type": "transformation",
        "id": "template-blank-transformation",
        "name": "Custom transformation",
        "description": "This is a starter template for custom transformations",
        "icon_url": "/static/hedgehog/builder-hog-01.png",
        "category": ["Custom"],
        "hog": "\n// This is a blank template for custom transformations\n// The function receives 'event' as a global object and expects it to be returned\n// If you return null then the event will be discarded\nreturn event\n    ",
        "inputs_schema": []
    },
    {
        "status": "beta",
        "type": "transformation",
        "id": "template-geoip",
        "name": "GeoIP",
        "description": "Adds geoip data to the event",
        "icon_url": "/static/hedgehog/builder-hog-01.png",
        "category": ["Custom"],
        "hog": "\n// Define the properties to be added to the event\nlet geoipProperties := {\n    'city_name': null,\n    'city_confidence': null,\n    'subdivision_2_name': null,\n    'subdivision_2_code': null,\n    'subdivision_1_name': null,\n    'subdivision_1_code': null,\n    'country_name': null,\n    'country_code': null,\n    'continent_name': null,\n    'continent_code': null,\n    'postal_code': null,\n    'latitude': null,\n    'longitude': null,\n    'accuracy_radius': null,\n    'time_zone': null\n}\n// Check if the event has an IP address\nif (event.properties?.$geoip_disable or empty(event.properties?.$ip)) {\n    print('geoip disabled or no ip', event.properties, event.properties?.$ip)\n    return event\n}\nlet ip := event.properties.$ip\nif (ip == '127.0.0.1') {\n    print('spoofing ip for local development', ip)\n    ip := '89.160.20.129'\n}\nlet response := geoipLookup(ip)\nif (not response) {\n    print('geoip lookup failed for ip', ip)\n    return event\n}\nlet location := {}\nif (response.city) {\n    location['city_name'] := response.city.names?.en\n}\nif (response.country) {\n    location['country_name'] := response.country.names?.en\n    location['country_code'] := response.country.isoCode\n}\nif (response.continent) {\n    location['continent_name'] := response.continent.names?.en\n    location['continent_code'] := response.continent.code\n}\nif (response.postal) {\n    location['postal_code'] := response.postal.code\n}\nif (response.location) {\n    location['latitude'] := response.location?.latitude\n    location['longitude'] := response.location?.longitude\n    location['accuracy_radius'] := response.location?.accuracyRadius\n    location['time_zone'] := response.location?.timeZone\n}\nif (response.subdivisions) {\n    for (let index, subdivision in response.subdivisions) {\n        location[f'subdivision_{index + 1}_code'] := subdivision.isoCode\n        location[f'subdivision_{index + 1}_name'] := subdivision.names?.en\n    }\n}\nprint('geoip location data for ip:', location) \nlet returnEvent := event\nreturnEvent.properties := returnEvent.properties ?? {}\nreturnEvent.properties.$set := returnEvent.properties.$set ?? {}\nreturnEvent.properties.$set_once := returnEvent.properties.$set_once ?? {}\nfor (let key, value in geoipProperties) {\n    if (value != null) {\n        returnEvent.properties.$set[f'$geoip_{key}'] := value\n        returnEvent.properties.$set_once[f'$initial_geoip_{key}'] := value\n    }\n    returnEvent.properties.$set[f'$geoip_{key}'] := value\n    returnEvent.properties.$set_once[f'$initial_geoip_{key}'] := value\n}\nfor (let key, value in location) {\n    returnEvent.properties[f'$geoip_{key}'] := value\n    returnEvent.properties.$set[f'$geoip_{key}'] := value\n    returnEvent.properties.$set_once[f'$initial_geoip_{key}'] := value\n}\nreturn returnEvent\n    ",
        "inputs_schema": []
    },
    {
        "status": "alpha",
        "type": "transformation",
        "id": "plugin-downsampling-plugin",
        "name": "Downsample",
        "description": "Reduces event volume coming into PostHog",
        "icon_url": "https://raw.githubusercontent.com/posthog/downsampling-plugin/main/logo.png",
        "category": ["Custom"],
        "hog": "return event",
        "inputs_schema": [
            {
                "type": "string",
                "key": "percentage",
                "label": "% of events to keep",
                "default": "100",
                "required": false
            },
            {
                "type": "choice",
                "key": "samplingMethod",
                "label": "Sampling method",
                "choices": [
                    {
                        "value": "Random sampling",
                        "label": "Random sampling"
                    },
                    {
                        "value": "Distinct ID aware sampling",
                        "label": "Distinct ID aware sampling"
                    }
                ],
                "default": "Distinct ID aware sampling",
                "required": false
            }
        ]
    },
    {
        "status": "alpha",
        "type": "transformation",
        "id": "plugin-language-url-splitter-app",
        "name": "Language URL splitter",
        "description": "Splits the language from the URL",
        "icon_url": "https://raw.githubusercontent.com/posthog/language-url-splitter-app/main/logo.png",
        "category": ["Transformation"],
        "hog": "return event",
        "inputs_schema": [
            {
                "key": "pattern",
                "label": "Pattern",
                "type": "string",
                "default": "^/([a-z]{2})(?=/|#|\\?|$)",
                "description": "Initialized with `const regexp = new RegExp($pattern)`",
                "required": true
            },
            {
                "key": "matchGroup",
                "label": "Match group",
                "type": "string",
                "default": "1",
                "description": "Used in: `const value = regexp.match($pathname)[$matchGroup]`",
                "required": true
            },
            {
                "key": "property",
                "label": "Property",
                "type": "string",
                "default": "locale",
                "description": "Name of the event property we will store the matched value in",
                "required": true
            },
            {
                "key": "replacePattern",
                "label": "Replacement pattern",
                "type": "string",
                "default": "^(/[a-z]{2})(/|(?=/|#|\\?|$))",
                "description": "Initialized with `new RegExp($pattern)`, leave empty to disable path cleanup.",
                "required": true
            },
            {
                "key": "replaceKey",
                "label": "Replacement key",
                "type": "string",
                "default": "$pathname",
                "description": "Where to store the updated path. Keep as `$pathname` to override.",
                "required": true
            },
            {
                "key": "replaceValue",
                "label": "Replacement value",
                "type": "string",
                "default": "/",
                "description": "`properties[key] = $pathname.replace(pattern, value)`",
                "required": true
            }
        ]
    },
    {
        "status": "alpha",
        "type": "transformation",
        "id": "plugin-posthog-app-url-parameters-to-event-properties",
        "name": "URL parameters to event properties",
        "description": "Converts URL query parameters to event properties",
        "icon_url": "https://raw.githubusercontent.com/posthog/posthog-app-url-parameters-to-event-properties/main/logo.png",
        "category": ["Transformation"],
        "hog": "return event",
        "inputs_schema": [
            {
                "key": "parameters",
                "label": "URL query parameters to convert",
                "type": "string",
                "default": "",
                "description": "Comma separated list of URL query parameters to capture. Leaving this blank will capture nothing."
            },
            {
                "key": "prefix",
                "label": "Prefix",
                "type": "string",
                "default": "",
                "description": "Add a prefix to the property name e.g. set it to 'prefix_' to get followerId -\u003E prefix_followerId"
            },
            {
                "key": "suffix",
                "label": "Suffix",
                "type": "string",
                "default": "",
                "description": "Add a suffix to the property name e.g. set it to '_suffix' to get followerId -\u003E followerId_suffix"
            },
            {
                "key": "ignoreCase",
                "label": "Ignore the case of URL parameters",
                "type": "choice",
                "choices": [
                    {
                        "value": "true",
                        "label": "true"
                    },
                    {
                        "value": "false",
                        "label": "false"
                    }
                ],
                "default": "false",
                "description": "Ignores the case of parameters e.g. when set to true than followerId would match FollowerId, followerID, FoLlOwErId and similar"
            },
            {
                "key": "setAsUserProperties",
                "label": "Add to user properties",
                "type": "choice",
                "choices": [
                    {
                        "value": "true",
                        "label": "true"
                    },
                    {
                        "value": "false",
                        "label": "false"
                    }
                ],
                "default": "false",
                "description": "Additionally adds the property to the user properties"
            },
            {
                "key": "setAsInitialUserProperties",
                "label": "Add to user initial properties",
                "type": "choice",
                "choices": [
                    {
                        "value": "true",
                        "label": "true"
                    },
                    {
                        "value": "false",
                        "label": "false"
                    }
                ],
                "default": "false",
                "description": "Additionally adds the property to the user initial properties. This will add a prefix of 'initial_' before the already fully composed property e.g. initial_prefix_followerId_suffix"
            },
            {
                "key": "alwaysJson",
                "label": "Always JSON stringify the property data",
                "type": "choice",
                "choices": [
                    {
                        "value": "true",
                        "label": "true"
                    },
                    {
                        "value": "false",
                        "label": "false"
                    }
                ],
                "default": "false",
                "description": "If set, always store the resulting data as a JSON array. (Otherwise, single parameters get stored as-is, and multi-value parameters get stored as a JSON array.)"
            }
        ]
    },
    {
        "status": "alpha",
        "type": "transformation",
        "id": "plugin-posthog-filter-out-plugin",
        "name": "Filter Out Plugin",
        "description": "Filter out events where property values satisfy the given condition",
        "icon_url": "https://raw.githubusercontent.com/posthog/posthog-filter-out-plugin/main/logo.png",
        "category": ["Transformation"],
        "hog": "return event",
        "inputs_schema": [
            {
                "key": "filters",
                "label": "Filters to apply",
                "type": "string",
                "description": "A JSON file containing an array of filters to apply. See the README for more information.",
                "required": false
            },
            {
                "key": "eventsToDrop",
                "label": "Events to filter out",
                "type": "string",
                "description": "A comma-separated list of event names to filter out (e.g. $pageview,$autocapture)",
                "required": false
            },
            {
                "key": "keepUndefinedProperties",
                "label": "Keep event if any of the filtered properties are undefined?",
                "type": "choice",
                "choices": [
                    {
                        "value": "Yes",
                        "label": "Yes"
                    },
                    {
                        "value": "No",
                        "label": "No"
                    }
                ],
                "default": "No"
            }
        ]
    },
    {
        "status": "alpha",
        "type": "transformation",
        "id": "plugin-posthog-url-normalizer-plugin",
        "name": "URL Normalizer",
        "description": "Normalize the format of urls in your application allowing you to more easily compare them in insights.",
        "icon_url": "https://raw.githubusercontent.com/posthog/posthog-url-normalizer-plugin/main/logo.png",
        "category": ["Transformation"],
        "hog": "return event",
        "inputs_schema": []
    },
    {
        "status": "alpha",
        "type": "transformation",
        "id": "plugin-property-filter-plugin",
        "name": "Property Filter",
        "description": "This plugin will set all configured properties to null inside an ingested event.",
        "icon_url": "https://raw.githubusercontent.com/posthog/posthog-property-filter-plugin/main/logo.png",
        "category": ["Transformation"],
        "hog": "return event",
        "inputs_schema": [
            {
                "key": "properties",
                "label": "Properties to filter out",
                "type": "string",
                "description": "A comma-separated list of properties to filter out (e.g. $ip, $current_url)",
                "default": "",
                "required": true
            }
        ]
    },
    {
        "status": "alpha",
        "type": "transformation",
        "id": "plugin-semver-flattener-plugin",
        "name": "SemVer Flattener",
        "description": "This plugin will flatten semver versions in the specified properties.",
        "icon_url": "https://raw.githubusercontent.com/posthog/semver-flattener-plugin/main/logo.png",
        "category": ["Transformation"],
        "hog": "return event",
        "inputs_schema": [
            {
                "key": "properties",
                "label": "comma separated properties to explode version number from",
                "type": "string",
                "description": "my_version_number,app_version",
                "default": "",
                "required": true
            }
        ]
    },
    {
        "status": "alpha",
        "type": "transformation",
        "id": "plugin-taxonomy-plugin",
        "name": "Taxonomy",
        "description": "Standardize your event names into a single pattern.",
        "icon_url": "https://raw.githubusercontent.com/posthog/taxonomy-plugin/main/logo.png",
        "category": ["Transformation"],
        "hog": "return event",
        "inputs_schema": [
            {
                "key": "defaultNamingConvention",
                "label": "Select your default naming pattern",
                "type": "choice",
                "choices": [
                    {
                        "value": "camelCase",
                        "label": "camelCase"
                    },
                    {
                        "value": "PascalCase",
                        "label": "PascalCase"
                    },
                    {
                        "value": "snake_case",
                        "label": "snake_case"
                    },
                    {
                        "value": "kebab-case",
                        "label": "kebab-case"
                    },
                    {
                        "value": "spaces in between",
                        "label": "spaces in between"
                    }
                ],
                "default": "camelCase",
                "required": true
            }
        ]
    },
    {
        "status": "alpha",
        "type": "transformation",
        "id": "plugin-timestamp-parser-plugin",
        "name": "Timestamp Parser",
        "description": "Parse your event timestamps into useful date properties.",
        "icon_url": "https://raw.githubusercontent.com/posthog/timestamp-parser-plugin/main/logo.png",
        "category": ["Transformation"],
        "hog": "return event",
        "inputs_schema": []
    },
    {
        "status": "alpha",
        "type": "transformation",
        "id": "plugin-user-agent-plugin",
        "name": "User Agent Populator",
        "description": "Enhances events with user agent details. User Agent plugin allows you to populate events with the $browser, $browser_version for PostHog Clients that don't  typically populate these properties",
        "icon_url": "https://raw.githubusercontent.com/posthog/useragent-plugin/main/logo.png",
        "category": ["Transformation"],
        "hog": "return event",
        "inputs_schema": [
            {
                "key": "overrideUserAgentDetails",
                "label": "Can override existing browser related properties of event?",
                "type": "string",
                "description": "If the ingested event already have $browser $browser_version properties in combination with $useragent the $browser, $browser_version properties will be re-populated with the value of $useragent",
                "default": "false",
                "required": false
            },
            {
                "key": "enableSegmentAnalyticsJs",
                "label": "Automatically read segment_userAgent property, automatically sent by Segment via analytics.js?",
                "type": "choice",
                "description": "Segment's analytics.js library automatically sends a useragent property that Posthog sees as segment_userAgent. Enabling this causes this plugin to parse that property",
                "choices": [
                    {
                        "value": "false",
                        "label": "false"
                    },
                    {
                        "value": "true",
                        "label": "true"
                    }
                ],
                "default": "false",
                "required": false
            },
            {
                "key": "debugMode",
                "type": "choice",
                "description": "Enable debug mode to log when the plugin is unable to extract values from the user agent",
                "choices": [
                    {
                        "value": "false",
                        "label": "false"
                    },
                    {
                        "value": "true",
                        "label": "true"
                    }
                ],
                "default": "false",
                "required": false
            }
        ]
    }
]
