#
# This is a composite action that packages our backend Django tests.
# It is called by the `ci-backend.yml` job using a matrix.
#
name: Run Backend Django tests
inputs:
    cache-id:
        required: true
        type: string
    python-version:
        required: true
        type: string
    clickhouse-server-image:
        required: true
        type: string
    ee:
        required: true
        type: boolean
    foss:
        required: true
        type: boolean
    concurrency:
        required: true
        type: number
    group:
        required: true
        type: number
    person-on-events:
        required: true
        type: boolean

runs:
    using: 'composite'
    steps:
        - name: Start stack with Docker Compose
          shell: bash
          run: |
              export CLICKHOUSE_SERVER_IMAGE=${{ inputs.clickhouse-server-image }}
              docker-compose -f docker-compose.dev.yml down
              docker-compose -f docker-compose.dev.yml up -d db clickhouse zookeeper kafka redis object_storage &

        - name: Set up Python
          uses: actions/setup-python@v2
          with:
              python-version: ${{ inputs.python-version }}

        - name: Install SAML (python3-saml) dependencies
          shell: bash
          run: |
              sudo apt-get update
              sudo apt-get install libxml2-dev libxmlsec1-dev libxmlsec1-openssl

        - uses: syphar/restore-virtualenv@v1.2
          id: cache-backend-tests
          with:
              custom_cache_key_element: v1-${{ inputs.cache-id }}

        - uses: syphar/restore-pip-download-cache@v1
          if: steps.cache-backend-tests.outputs.cache-hit != 'true'

        - name: Install python dependencies
          if: steps.cache-backend-tests.outputs.cache-hit != 'true'
          shell: bash
          run: |
              python -m pip install -r requirements-dev.txt
              python -m pip install -r requirements.txt

        - name: Add kafka host to /etc/hosts for kafka connectivity
          shell: bash
          run: sudo echo "127.0.0.1 kafka" | sudo tee -a /etc/hosts

        - name: Set up needed files
          shell: bash
          run: |
              mkdir -p frontend/dist
              touch frontend/dist/index.html
              touch frontend/dist/layout.html
              touch frontend/dist/shared_dashboard.html
              touch frontend/dist/exporter.html

        - name: Wait for Clickhouse & Kafka
          shell: bash
          run: bin/check_kafka_clickhouse_up

        - name: Determine if --snapshot-update should be on
          # Skip on forks (due to GITHUB_TOKEN being read-only in PRs coming from them) except for persons-on-events
          # runs, as we want to ignore snapshots diverging there
          if: github.event.pull_request.head.repo.full_name == github.repository || inputs.person-on-events == 'true' || inputs.foss == 'true'
          shell: bash
          run: echo "PYTEST_ARGS=--snapshot-update" >> $GITHUB_ENV # We can only update snapshots within the PostHog org

        - name: Run FOSS tests
          if: ${{ inputs.foss == 'true' }}
          shell: bash
          run: |
              pytest -m "not ee and not async_migrations" posthog/ --cov  --cov-report=xml:coverage-postgres.xml \
                --durations=150 --durations-min=1.0 $PYTEST_ARGS

        - name: Run ee/ tests
          if: ${{ inputs.ee == 'true' && inputs.person-on-events != 'true' }}
          shell: bash
          run: |
              pytest ee \
                  --splits ${{ inputs.concurrency }} \
                  --group ${{ inputs.group }} \
                  --store-durations \
                  --cov \
                  --cov-report=xml:coverage-clickhouse.xml \
                  --durations=100 --durations-min=1.0 \
                  $PYTEST_ARGS

        - name: Run ee/ tests with person-on-events, no snapshot commits
          if: ${{ inputs.ee == 'true' && inputs.person-on-events == 'true' }}
          shell: bash
          run: |
              ENABLE_ACTOR_ON_EVENTS_TEAMS=all pytest ee \
                  --splits ${{ inputs.concurrency }} \
                  --group ${{ inputs.group }} \
                  $PYTEST_ARGS

        - name: Run pytest.mark.ee tests
          if: ${{ inputs.ee == 'true' && inputs.group == '1' }}
          shell: bash
          run: |
              pytest posthog -m "ee" --durations=100 --durations-min=1.0

        - uses: codecov/codecov-action@v2
          if: ${{ inputs.cloud == 'false' }}
          with:
              files: ./coverage-postgres.xml,./coverage-clickhouse.xml
              fail_ci_if_error: false
              verbose: true

        - name: Upload updated timing data as artifacts
          uses: actions/upload-artifact@v2
          if: ${{ inputs.ee == 'true' && inputs.person-on-events != 'true'}}
          with:
              name: timing_data-${{ inputs.group }}
              path: .test_durations
