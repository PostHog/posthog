#
# This is a composite action that packages our backend Django tests.
# It is called by the `ci-backend.yml` job using a matrix.
#
name: Run Django tests
inputs:
    python-version:
        required: true
        description: Python version, e.g. 3.10.10
    clickhouse-server-image:
        required: true
        description: ClickHouse server image tag, e.g. clickhouse/clickhouse-server:latest
    segment:
        required: true
        description: Either 'FOSS' or 'EE' segment
    concurrency:
        required: true
        description: Count of concurrency groups
    group:
        required: true
        description: Group number
    person-on-events:
        required: true
        description: Whether testing with persons on events, true or false
    token:
        required: false
        description: GitHub token

runs:
    using: 'composite'
    steps:
        # Pre-tests

        - name: Stop/Start stack with Docker Compose
          shell: bash
          run: |
              export CLICKHOUSE_SERVER_IMAGE=${{ inputs.clickhouse-server-image }}
              export DOCKER_REGISTRY_PREFIX="us-east1-docker.pkg.dev/posthog-301601/mirror/"
              docker compose -f docker-compose.dev.yml down
              docker compose -f docker-compose.dev.yml up -d

        - name: Add Kafka to /etc/hosts
          shell: bash
          run: echo "127.0.0.1 kafka" | sudo tee -a /etc/hosts

        - name: Set up Python
          uses: actions/setup-python@v4
          with:
              python-version: ${{ inputs.python-version }}
              token: ${{ inputs.token }}

        - name: Determine if hogql-parser has changed compared to master
          shell: bash
          id: hogql-parser-diff
          run: |
              changed=$(git diff --quiet HEAD master -- hogql_parser/ && echo "false" || echo "true")
              echo "::set-output name=changed::$changed"

        - name: Install SAML (python3-saml) dependencies
          shell: bash
          run: |
              sudo apt-get update && sudo apt-get install libxml2-dev libxmlsec1-dev libxmlsec1-openssl

        - uses: syphar/restore-virtualenv@v1
          id: cache-backend-tests
          with:
              custom_cache_key_element: v1

        - uses: syphar/restore-pip-download-cache@v1
          if: steps.cache-backend-tests.outputs.cache-hit != 'true'

        - name: Install Python dependencies
          if: steps.cache-backend-tests.outputs.cache-hit != 'true'
          shell: bash
          run: |
              pip install -r requirements.txt -r requirements-dev.txt

        - name: Install the working version of hogql-parser
          if: steps.hogql-parser-diff.outputs.changed == 'true'
          shell: bash
          # This is not cached currently, as it's important to build the current HEAD version of hogql-parser if it has
          # changed (requirements.txt has the already-published version)
          run: |
              sudo apt-get install libboost-all-dev unzip cmake curl uuid pkg-config
              curl https://www.antlr.org/download/antlr4-cpp-runtime-4.13.1-source.zip --output antlr4-source.zip
              # Check that the downloaded archive is the expected runtime - a security measure
              anltr_known_md5sum="c875c148991aacd043f733827644a76f"
              antlr_found_ms5sum="$(md5sum antlr4-source.zip | cut -d' ' -f1)"
              if [[ "$anltr_known_md5sum" != "$antlr_found_ms5sum" ]]; then
                  echo "Unexpected MD5 sum of antlr4-source.zip!"
                  echo "Known: $anltr_known_md5sum"
                  echo "Found: $antlr_found_ms5sum"
                  exit 64
              fi
              unzip antlr4-source.zip -d antlr4-source && cd antlr4-source
              cmake .
              DESTDIR=out make install
              sudo cp -r out/usr/local/include/antlr4-runtime /usr/include/
              sudo cp out/usr/local/lib/libantlr4-runtime.so* /usr/lib/
              sudo ldconfig
              cd ..
              pip install ./hogql_parser

        - name: Set up needed files
          shell: bash
          run: |
              mkdir -p frontend/dist
              touch frontend/dist/index.html
              touch frontend/dist/layout.html
              touch frontend/dist/exporter.html
              [ ! -f ./share/GeoLite2-City.mmdb ] && ( curl -L "https://mmdbcdn.posthog.net/" | brotli --decompress --output=./share/GeoLite2-City.mmdb )

        - name: Wait for Clickhouse & Kafka
          shell: bash
          run: bin/check_kafka_clickhouse_up

        - name: Wait for Temporal
          shell: bash
          run: |
              bin/check_temporal_up

        - name: Determine if --snapshot-update should be on
          # Skip on forks (due to GITHUB_TOKEN being read-only in PRs coming from them) except for persons-on-events
          # runs, as we want to ignore snapshots diverging there
          if: github.event.pull_request.head.repo.full_name == github.repository || inputs.person-on-events == 'true'
          shell: bash
          run: echo "PYTEST_ARGS=--snapshot-update" >> $GITHUB_ENV # We can only update snapshots within the PostHog org

        # Tests

        - name: Run FOSS tests
          if: ${{ inputs.segment == 'FOSS' }}
          env:
              PERSON_ON_EVENTS_V2_ENABLED: ${{ inputs.person-on-events }}
              GROUPS_ON_EVENTS_ENABLED: ${{ inputs.person-on-events }}
          shell: bash
          run: | # async_migrations covered in ci-async-migrations.yml
              pytest ${{
                  inputs.person-on-events == 'true'
                  && './posthog/clickhouse/ ./posthog/hogql/ ./posthog/queries/ ./posthog/api/test/test_insight* ./posthog/api/test/dashboards/test_dashboard.py'
                  || 'hogvm posthog'
              }} -m "not async_migrations" \
                  --splits ${{ inputs.concurrency }} --group ${{ inputs.group }} \
                  --durations=100 --durations-min=1.0 \
                  $PYTEST_ARGS

        - name: Run EE tests
          if: ${{ inputs.segment == 'EE' }}
          env:
              PERSON_ON_EVENTS_V2_ENABLED: ${{ inputs.person-on-events }}
              GROUPS_ON_EVENTS_ENABLED: ${{ inputs.person-on-events }}
          shell: bash
          run: | # async_migrations covered in ci-async-migrations.yml
              pytest ${{ inputs.person-on-events == 'true' && 'ee/clickhouse/' || 'ee/' }} -m "not async_migrations" \
                  --splits ${{ inputs.concurrency }} --group ${{ inputs.group }} \
                  --durations=100 --durations-min=1.0 \
                  $PYTEST_ARGS

        - name: Run /decide read replica tests
          if: ${{ inputs.segment == 'FOSS' && inputs.group == 1 && inputs.person-on-events != 'true' }}
          env:
              POSTHOG_DB_NAME: posthog
              READ_REPLICA_OPT_IN: 'decide,PersonalAPIKey, local_evaluation'
              POSTHOG_POSTGRES_READ_HOST: localhost
              POSTHOG_DB_PASSWORD: posthog
              POSTHOG_DB_USER: posthog
          shell: bash
          run: |
              pytest posthog/api/test/test_decide.py::TestDecideUsesReadReplica \
                  --durations=100 --durations-min=1.0 \
                  $PYTEST_ARGS
