name: Trigger Docs Preview Build

on:
  pull_request:
    paths:
      - 'docs/**'

permissions:
  pull-requests: write

jobs:
  trigger-preview:
    name: Trigger posthog.com preview build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Get PR details
        id: pr-info
        run: |
          echo "pr_number=${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
          echo "pr_title=${{ github.event.pull_request.title }}" >> $GITHUB_OUTPUT
          echo "pr_branch=${{ github.event.pull_request.head.ref }}" >> $GITHUB_OUTPUT
          echo "pr_ref=refs/pull/${{ github.event.pull_request.number }}/head" >> $GITHUB_OUTPUT

      - name: Detect changed docs files
        id: changed-files
        run: |
          # Fetch base branch to compare
          git fetch origin ${{ github.event.pull_request.base.ref }}

          # Get list of changed .md/.mdx files in docs/published/
          CHANGED_FILES=$(git diff --name-only origin/${{ github.event.pull_request.base.ref }}...HEAD -- 'docs/published/*.md' 'docs/published/*.mdx' 'docs/published/**/*.md' 'docs/published/**/*.mdx' || echo "")

          # Convert to JSON array for use in PR comment
          if [ -n "$CHANGED_FILES" ]; then
            FILES_JSON=$(echo "$CHANGED_FILES" | jq -R -s -c 'split("\n") | map(select(length > 0))')
            echo "files=$FILES_JSON" >> $GITHUB_OUTPUT
            echo "count=$(echo "$CHANGED_FILES" | wc -l | tr -d ' ')" >> $GITHUB_OUTPUT
          else
            echo "files=[]" >> $GITHUB_OUTPUT
            echo "count=0" >> $GITHUB_OUTPUT
          fi

      - name: Trigger Vercel preview build
        id: trigger-build
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_TEAM_ID: ${{ secrets.VERCEL_TEAM_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        run: |
          # Check if all required secrets are configured
          if [ -z "$VERCEL_TOKEN" ] || [ -z "$VERCEL_PROJECT_ID" ]; then
            echo "‚ö†Ô∏è Vercel secrets not configured (VERCEL_TOKEN, VERCEL_PROJECT_ID)"
            echo "configure_needed=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          PR_NUMBER=${{ github.event.pull_request.number }}
          PR_REF="refs/pull/${PR_NUMBER}/head"

          echo "üì¢ Triggering Vercel deployment for posthog.com@feat/docs-monorepo-poc (PoC)"
          echo "   with POSTHOG_MONOREPO_REF=${PR_REF}"

          # Build request payload with env var for monorepo docs
          PAYLOAD='{
            "name": "posthog-com",
            "project": "'"$VERCEL_PROJECT_ID"'",
            "gitSource": {
              "type": "github",
              "repo": "PostHog/posthog.com",
              "ref": "feat/docs-monorepo-poc"
            },
            "env": [
              {
                "key": "POSTHOG_MONOREPO_REF",
                "value": "'"$PR_REF"'",
                "target": ["production", "preview", "development"]
              }
            ]
          }'

          # Add teamId if configured
          if [ -n "$VERCEL_TEAM_ID" ]; then
            PAYLOAD=$(echo "$PAYLOAD" | jq --arg team "$VERCEL_TEAM_ID" '.team = $team')
          fi

          # Call Vercel Deployments API
          RESPONSE=$(curl -s -w "\n%{http_code}" -X POST "https://api.vercel.com/v13/deployments" \
            -H "Authorization: Bearer $VERCEL_TOKEN" \
            -H "Content-Type: application/json" \
            -d "$PAYLOAD")

          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
          BODY=$(echo "$RESPONSE" | head -n-1)

          if [ "$HTTP_CODE" -eq 200 ] || [ "$HTTP_CODE" -eq 201 ]; then
            DEPLOYMENT_URL=$(echo "$BODY" | jq -r '.url // empty')
            echo "‚úÖ Successfully triggered Vercel preview build"
            echo "trigger_status=success" >> $GITHUB_OUTPUT
            if [ -n "$DEPLOYMENT_URL" ]; then
              echo "deployment_url=https://${DEPLOYMENT_URL}" >> $GITHUB_OUTPUT
            fi
          else
            echo "‚ùå Failed to trigger preview build (HTTP $HTTP_CODE)"
            echo "$BODY" | jq '.' 2>/dev/null || echo "$BODY"
            echo "trigger_status=failed" >> $GITHUB_OUTPUT
          fi

      - name: Comment on PR with preview info
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = ${{ steps.pr-info.outputs.pr_number }};
            const prRef = "${{ steps.pr-info.outputs.pr_ref }}";
            const triggerStatus = "${{ steps.trigger-build.outputs.trigger_status }}";
            const configNeeded = "${{ steps.trigger-build.outputs.configure_needed }}";
            const deploymentUrl = "${{ steps.trigger-build.outputs.deployment_url }}";
            const changedFiles = ${{ steps.changed-files.outputs.files }};
            const fileCount = "${{ steps.changed-files.outputs.count }}";

            let message = '';

            if (configNeeded === 'true') {
              message = `## üìö Docs Preview Build

**Preview build not configured** - Required Vercel secrets not found.

### Setup Required (One-time in PostHog/posthog repo)
Add these repository secrets in Settings ‚Üí Secrets and variables ‚Üí Actions:

1. **VERCEL_TOKEN** - Vercel API token for deployments
2. **VERCEL_PROJECT_ID** - ID of posthog.com Vercel project
3. **VERCEL_TEAM_ID** (Optional) - If posthog.com is in a team

See [workflow file](https://github.com/PostHog/posthog/blob/master/.github/workflows/docs-preview-trigger.yml) for details.`;
            } else if (triggerStatus === 'success') {
              // Build preview URL
              const baseUrl = deploymentUrl || 'https://posthog.com';
              const handbookBase = `${baseUrl}/handbook/engineering`;

              // Build table of changed files with preview links
              let filesTable = '';
              if (changedFiles && changedFiles.length > 0) {
                filesTable = '\n### Changed Documentation\n\n| File | Preview |\n|------|---------|';

                for (const file of changedFiles) {
                  // Convert docs/published/foo/bar.md -> /handbook/engineering/foo/bar
                  const relativePath = file.replace('docs/published/', '').replace(/\.mdx?$/, '');
                  const previewUrl = `${handbookBase}/${relativePath}`;
                  const fileName = file.split('/').pop();

                  filesTable += `\n| \`${fileName}\` | [View ‚Üí](${previewUrl}) |`;
                }
              }

              message = `## üìö Docs Preview

**Preview URL:** ${baseUrl}

${filesTable || `\n**${fileCount} docs file(s) changed** in \`docs/published/\``}

### Resources

- [Handbook base](${handbookBase})
- [External docs manifest](${baseUrl}/external-docs-map.json)

Preview will be ready in ~2 minutes. Check Vercel bot comment below for deployment status.`;
            } else {
              message = `## üìö Docs Preview Build Failed

Preview build could not be triggered. Check the [GitHub Action logs](https://github.com/PostHog/posthog/actions/runs/${{ github.run_id }}) for details.

### Common issues:
- Invalid git ref or deleted branch
- Vercel API error (check secrets)
- Rate limiting

Try re-running the workflow or contact a maintainer.`;
            }

            github.rest.issues.createComment({
              issue_number: prNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message
            });

  validate-docs:
    name: Validate docs structure
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Check frontmatter in published docs
        run: |
          echo "Checking for required frontmatter in published docs..."

          MISSING_FRONTMATTER=0

          # Find all markdown/mdx files in published docs
          for file in docs/published/**/*.{md,mdx}; do
            if [ -f "$file" ]; then
              # Check if file starts with ---
              if ! head -1 "$file" | grep -q "^---"; then
                echo "‚ùå Missing frontmatter in: $file"
                MISSING_FRONTMATTER=1
              fi
            fi
          done

          if [ $MISSING_FRONTMATTER -eq 1 ]; then
            echo "Some files are missing required frontmatter. All docs in /docs/published/ must have YAML frontmatter."
            exit 1
          fi

          echo "‚úÖ All published docs have frontmatter"

      - name: Verify internal docs not in published
        run: |
          echo "Verifying internal docs are not accidentally in published..."

          if find docs/published -name "*internal*" -o -name "*private*" -o -name "*secret*" 2>/dev/null | grep -q .; then
            echo "‚ùå Found internal/private docs in published directory!"
            exit 1
          fi

          echo "‚úÖ No internal docs found in published directory"

      - name: Check for broken relative links
        run: |
          echo "Checking for obvious link issues..."

          # Check for links pointing outside /published/
          if grep -r '\[.*\](\.\.\/\.\./' docs/published/ 2>/dev/null; then
            echo "‚ö†Ô∏è Found links that go outside /published/ directory - verify these are intentional"
          else
            echo "‚úÖ Links appear to be within /published/ directory"
          fi
