name: Rust CI
on:
    workflow_dispatch:
    push:
        branches: [master, main]
    pull_request:

env:
    CARGO_TERM_COLOR: always

jobs:
    # Job to decide if we should run rust ci
    # See https://github.com/dorny/paths-filter#conditional-execution for more details
    changes:
        runs-on: ubuntu-24.04
        timeout-minutes: 5
        if: github.repository == 'PostHog/posthog'
        name: Determine need to run Rust checks
        # Set job outputs to values from filter step
        outputs:
            rust: ${{ steps.filter.outputs.rust }}
        steps:
            # For pull requests it's not necessary to checkout the code, but we
            # also want this to run on master so we need to checkout
            - uses: actions/checkout@v4
            - uses: dorny/paths-filter@4512585405083f25c027a35db413c2b3b9006d50 # v2
              id: filter
              with:
                  filters: |
                      rust:
                        # Avoid running rust tests for irrelevant changes
                        - 'rust/**'
                        - '.github/workflows/ci-rust.yml'
                        - '.github/workflows/rust.yml'
                        - '.github/workflows/rust-docker-build.yml'
                        - 'posthog/management/commands/setup_test_environment.py'
                        - 'posthog/migrations/**'
                        - 'ee/migrations/**'
                        - 'docker-compose.dev.yml'

    build:
        name: Build Rust services
        needs: changes
        runs-on: depot-ubuntu-22.04-4

        defaults:
            run:
                working-directory: rust

        steps:
            # Checkout project code
            # Use sparse checkout to only select files in rust directory
            # Turning off cone mode ensures that files in the project root are not included during checkout
            - uses: actions/checkout@v4
              if: needs.changes.outputs.rust == 'true'
              with:
                  sparse-checkout: 'rust/'
                  sparse-checkout-cone-mode: false

            - name: Install rust
              if: needs.changes.outputs.rust == 'true'
              uses: dtolnay/rust-toolchain@6691ebadcb18182cc1391d07c9f295f657c593cd # 1.88

            - name: Install sccache
              if: needs.changes.outputs.rust == 'true'
              uses: mozilla-actions/sccache-action@7d986dd989559c6ecdb630a3fd2557667be217ad # v0.0.9

            - name: Configure sccache
              if: needs.changes.outputs.rust == 'true'
              run: |
                  echo "RUSTC_WRAPPER=sccache" >> $GITHUB_ENV
                  sccache --start-server

            - name: Run cargo build
              if: needs.changes.outputs.rust == 'true'
              run: cargo build --all --locked --release && find target/release/ -maxdepth 1 -executable -type f | xargs strip

    test:
        name: Test Rust services
        strategy:
            matrix:
                package:
                    - batch-import-worker
                    - capture
                    - common-alloc
                    - common-cookieless
                    - common-database
                    - common-dns
                    - common-geoip
                    - common-metrics
                    - common-kafka
                    - cyclotron-core
                    - cyclotron-node
                    - cyclotron-janitor
                    - cymbal
                    - feature-flags
                    - health
                    - hogvm
                    - hook-api
                    - hook-common
                    - hook-janitor
                    - hook-worker
                    - kafka-deduplicator
                    - limiters
                    - log-capture
                    - posthog-symbol-data
                    - property-defs-rs
                    - serve-metrics
        needs: changes
        runs-on: depot-ubuntu-24.04-4
        timeout-minutes: 20

        defaults:
            run:
                working-directory: rust

        steps:
            - uses: actions/checkout@v4
              if: needs.changes.outputs.rust == 'true'

            - name: Setup main repo and dependencies
              if: needs.changes.outputs.rust == 'true'
              run: |
                  docker compose -f ../docker-compose.dev.yml down
                  docker compose -f ../docker-compose.dev.yml up -d
                  echo "127.0.0.1 kafka clickhouse" | sudo tee -a /etc/hosts

            - name: Dump Kafka logs on failure
              if: failure()
              run: |
                  docker ps -a || true
                  docker logs --tail=500 rust-kafka-1 || true
                  docker inspect rust-kafka-1 || true

            # please keep the tag version here in sync with rust-version in rust/*/Cargo.toml
            - name: Install rust
              if: needs.changes.outputs.rust == 'true'
              uses: dtolnay/rust-toolchain@6691ebadcb18182cc1391d07c9f295f657c593cd # 1.88

            - name: Install sccache
              if: needs.changes.outputs.rust == 'true'
              uses: mozilla-actions/sccache-action@7d986dd989559c6ecdb630a3fd2557667be217ad # v0.0.9

            - name: Configure sccache
              if: needs.changes.outputs.rust == 'true'
              run: |
                  echo "RUSTC_WRAPPER=sccache" >> $GITHUB_ENV
                  sccache --start-server

            - name: Set up Python
              if: needs.changes.outputs.rust == 'true'
              uses: actions/setup-python@v5
              with:
                  python-version-file: 'pyproject.toml'
                  token: ${{ secrets.POSTHOG_BOT_GITHUB_TOKEN }}

            - name: Install uv
              if: needs.changes.outputs.rust == 'true'
              uses: astral-sh/setup-uv@0c5e2b8115b80b4c7c5ddf6ffdd634974642d182 # v5.4.1
              with:
                  enable-cache: true
                  version: 0.7.8

            - name: Install SAML (python3-saml) dependencies
              if: needs.changes.outputs.rust == 'true'
              run: |
                  sudo apt-get update
                  sudo apt-get install libxml2-dev libxmlsec1-dev libxmlsec1-openssl postgresql-client

            - name: Install python dependencies
              if: needs.changes.outputs.rust == 'true'
              run: |
                  UV_PROJECT_ENVIRONMENT=$pythonLocation uv sync --frozen --dev --directory ..

            - name: Download MaxMind Database
              if: needs.changes.outputs.rust == 'true'
              run: |
                  cd ../ && ./bin/download-mmdb

            - name: Wait for services to be ready
              if: needs.changes.outputs.rust == 'true'
              run: |
                  cd ../ && bin/check_kafka_clickhouse_up

            - name: Set up databases
              if: needs.changes.outputs.rust == 'true'
              env:
                  DEBUG: 'true'
                  TEST: 'true'
                  SECRET_KEY: 'abcdef' # unsafe - for testing only
                  DATABASE_URL: 'postgres://posthog:posthog@localhost:5432/posthog'
              run: cd ../ && python manage.py setup_test_environment

            - name: Run cargo test
              if: needs.changes.outputs.rust == 'true'
              run: |
                  echo "Starting cargo test"
                  RUST_BACKTRACE=1 cargo test -p ${{matrix.package}}
                  echo "Cargo test completed"

    linting:
        name: Lint Rust services
        needs: changes
        runs-on: depot-ubuntu-22.04-4

        defaults:
            run:
                working-directory: rust

        steps:
            # Checkout project code
            # Use sparse checkout to only select files in rust directory
            # Turning off cone mode ensures that files in the project root are not included during checkout
            - uses: actions/checkout@v4
              if: needs.changes.outputs.rust == 'true'
              with:
                  sparse-checkout: 'rust/'
                  sparse-checkout-cone-mode: false

            - name: Install rust
              if: needs.changes.outputs.rust == 'true'
              uses: dtolnay/rust-toolchain@6691ebadcb18182cc1391d07c9f295f657c593cd # 1.88
              with:
                  components: clippy,rustfmt

            - name: Install sccache
              if: needs.changes.outputs.rust == 'true'
              uses: mozilla-actions/sccache-action@7d986dd989559c6ecdb630a3fd2557667be217ad # v0.0.9

            - name: Configure sccache
              if: needs.changes.outputs.rust == 'true'
              run: |
                  echo "RUSTC_WRAPPER=sccache" >> $GITHUB_ENV
                  sccache --start-server

            - name: Check format
              if: needs.changes.outputs.rust == 'true'
              run: cargo fmt -- --check

            - name: Run clippy
              if: needs.changes.outputs.rust == 'true'
              run: cargo clippy --all-targets --all-features -- -D warnings

            - name: Run cargo check
              if: needs.changes.outputs.rust == 'true'
              run: cargo check --all-features

    shear:
        name: Shear Rust services
        needs: changes
        runs-on: depot-ubuntu-22.04-4

        defaults:
            run:
                working-directory: rust

        steps:
            # Checkout project code
            # Use sparse checkout to only select files in rust directory
            # Turning off cone mode ensures that files in the project root are not included during checkout
            - uses: actions/checkout@v4
              if: needs.changes.outputs.rust == 'true'
              with:
                  sparse-checkout: 'rust/'
                  sparse-checkout-cone-mode: false

            - name: Install cargo-binstall
              if: needs.changes.outputs.rust == 'true'
              uses: cargo-bins/cargo-binstall@5cbf019d8cb9b9d5b086218c41458ea35d817691 # main

            - name: Install cargo-shear
              if: needs.changes.outputs.rust == 'true'
              run: cargo binstall --no-confirm cargo-shear@1.1.12

            - run: cargo shear
              if: needs.changes.outputs.rust == 'true'

    # Coordination job to ensure tests pass before building Docker images on non-master branches
    wait-for-tests:
        name: Wait for tests to pass
        needs: [changes, build, test, linting, shear]
        runs-on: ubuntu-24.04
        if: |
            needs.changes.outputs.rust == 'true' && 
            github.ref != 'refs/heads/master' && 
            github.ref != 'refs/heads/main'
        steps:
            - name: Check test results
              if: |
                  needs.build.result != 'success' ||
                  needs.test.result != 'success' ||
                  needs.linting.result != 'success' ||
                  needs.shear.result != 'success'
              run: |
                  echo "Tests failed! Build: ${{ needs.build.result }}, Test: ${{ needs.test.result }}, Linting: ${{ needs.linting.result }}, Shear: ${{ needs.shear.result }}"
                  exit 1
            - name: Tests passed
              run: echo "All tests passed, proceeding to Docker build"

    docker-images:
        name: Build Docker image - ${{ matrix.image }}
        needs: [changes, wait-for-tests]
        # Run if:
        # - On master/main: wait-for-tests is skipped (runs immediately)
        # - On other branches: wait-for-tests succeeded (tests passed)
        if: |
            always() && 
            needs.changes.outputs.rust == 'true' && 
            (needs.wait-for-tests.result == 'success' || needs.wait-for-tests.result == 'skipped')
        strategy:
            matrix:
                include:
                    - image: capture
                      dockerfile: ./rust/Dockerfile
                      project: kshskj225r
                    - image: hook-api
                      dockerfile: ./rust/Dockerfile
                      project: c1bwj4j4qg
                    - image: hook-janitor
                      dockerfile: ./rust/Dockerfile
                      project: c1bwj4j4qg
                    - image: hook-worker
                      dockerfile: ./rust/Dockerfile
                      project: c1bwj4j4qg
                    - image: hook-migrator
                      dockerfile: ./rust/Dockerfile.migrate-hooks
                      project: c1bwj4j4qg
                    - image: cyclotron-janitor
                      dockerfile: ./rust/Dockerfile
                      project: r4zm8vtlbw
                    - image: property-defs-rs
                      dockerfile: ./rust/Dockerfile
                      project: vznmbshh6q
                    - image: cymbal
                      dockerfile: ./rust/Dockerfile
                      project: 8dq0xkk0ck
                    - image: feature-flags
                      dockerfile: ./rust/Dockerfile
                      project: vglf58qgzw
                    - image: batch-import-worker
                      dockerfile: ./rust/Dockerfile
                      project: 4ppc15q4bv
                    - image: log-capture
                      dockerfile: ./rust/Dockerfile
                      project: c1bwj4j4qg
                    - image: kafka-deduplicator
                      dockerfile: ./rust/Dockerfile
                      project: vznmbshh6q
        runs-on: depot-ubuntu-22.04
        permissions:
            id-token: write # allow issuing OIDC tokens for this workflow run
            contents: read # allow reading the repo contents
            packages: write # allow push to ghcr.io

        outputs:
            capture_digest: ${{ steps.digest.outputs.capture_digest }}
            cyclotron-janitor_digest: ${{ steps.digest.outputs.cyclotron-janitor_digest }}
            property-defs-rs_digest: ${{ steps.digest.outputs.property-defs-rs_digest }}
            batch-import-worker_digest: ${{ steps.digest.outputs.batch-import-worker_digest }}
            hook-api_digest: ${{ steps.digest.outputs.hook-api_digest }}
            hook-janitor_digest: ${{ steps.digest.outputs.hook-janitor_digest }}
            hook-worker_digest: ${{ steps.digest.outputs.hook-worker_digest }}
            hook-migrator_digest: ${{ steps.digest.outputs.hook-migrator_digest }}
            cymbal_digest: ${{ steps.digest.outputs.cymbal_digest }}
            feature-flags_digest: ${{ steps.digest.outputs.feature-flags_digest }}
            log-capture_digest: ${{ steps.digest.outputs.log-capture_digest }}
            kafka-deduplicator_digest: ${{ steps.digest.outputs.kafka-deduplicator_digest }}
        defaults:
            run:
                working-directory: rust

        steps:
            - name: Check Out Repo
              # Checkout project code
              # Use sparse checkout to only select files in rust directory
              # Turning off cone mode ensures that files in the project root are not included during checkout
              uses: actions/checkout@v4
              with:
                  sparse-checkout: 'rust/'
                  sparse-checkout-cone-mode: false

            - name: Set up Depot CLI
              uses: depot/setup-action@b0b1ea4f69e92ebf5dea3f8713a1b0c37b2126a5 # v1

            - name: Set up QEMU
              uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3
              with:
                  image: tonistiigi/binfmt:latest
                  platforms: all

            - name: Login to ghcr.io
              uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3
              with:
                  registry: ghcr.io
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}
                  logout: false

            - name: Docker meta
              id: meta
              uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804 # v5
              with:
                  images: ghcr.io/posthog/posthog/${{ matrix.image }}
                  tags: |
                      type=ref,event=pr
                      type=ref,event=branch
                      type=semver,pattern={{version}}
                      type=semver,pattern={{major}}.{{minor}}
                      type=sha

            - name: Set up Docker Buildx
              id: buildx
              uses: docker/setup-buildx-action@885d1462b80bc1c1c7f0b00334ad271f09369c55 # v2

            - name: Retrieve sccache configuration
              id: sccache
              run: |
                  echo "endpoint=$SCCACHE_WEBDAV_ENDPOINT" >> "$GITHUB_OUTPUT"
                  echo "::add-mask::$SCCACHE_WEBDAV_TOKEN"
                  echo "token=$SCCACHE_WEBDAV_TOKEN" >> "$GITHUB_OUTPUT"

            - name: Build and push image
              id: docker_build
              uses: depot/build-push-action@2583627a84956d07561420dcc1d0eb1f2af3fac0 # v1
              with:
                  project: ${{ matrix.project }}
                  context: ./rust/
                  file: ${{ matrix.dockerfile }}
                  push: true
                  tags: ${{ steps.meta.outputs.tags }}
                  labels: ${{ steps.meta.outputs.labels }}
                  platforms: linux/arm64,linux/amd64
                  build-args: BIN=${{ matrix.image }}
                  secrets: |
                      SCCACHE_WEBDAV_ENDPOINT=${{ steps.sccache.outputs.endpoint }}
                      SCCACHE_WEBDAV_TOKEN=${{ steps.sccache.outputs.token }}

            - name: Container image digest
              id: digest
              run: |
                  echo ${{ steps.docker_build.outputs.digest }}
                  echo "${{matrix.image}}_digest=${{ steps.docker_build.outputs.digest }}" >> $GITHUB_OUTPUT
                  cat $GITHUB_OUTPUT

    deploy:
        name: Deploy ${{ matrix.release }}
        runs-on: ubuntu-24.04
        needs: docker-images
        # Only deploy from master branches when docker images succeeded
        if: |
            github.ref == 'refs/heads/master' &&
            needs.docker-images.result == 'success'
        strategy:
            matrix:
                include:
                    - release: capture
                      values:
                          image:
                              sha: '${{ needs.docker-images.outputs.capture_digest }}'
                    - release: capture-replay
                      values:
                          image:
                              sha: '${{ needs.docker-images.outputs.capture_digest }}'
                    - release: cyclotron
                      values:
                          janitor_image:
                              sha: '${{ needs.docker-images.outputs.cyclotron-janitor_digest }}'
                    - release: property-defs-rs
                      values:
                          image:
                              sha: '${{ needs.docker-images.outputs.property-defs-rs_digest }}'
                    - release: feature-flags
                      values:
                          image:
                              sha: '${{ needs.docker-images.outputs.feature-flags_digest }}'
                    - release: batch-import-worker
                      values:
                          image:
                              sha: '${{ needs.docker-images.outputs.batch-import-worker_digest }}'
                    - release: cymbal
                      values:
                          image:
                              sha: '${{ needs.docker-images.outputs.cymbal_digest }}'
                    - release: hoghooks
                      values:
                          api_image:
                              sha: '${{ needs.docker-images.outputs.hook-api_digest }}'
                          janitor_image:
                              sha: '${{ needs.docker-images.outputs.hook-janitor_digest }}'
                          worker_image:
                              sha: '${{ needs.docker-images.outputs.hook-worker_digest }}'
                          migrator_image:
                              sha: '${{ needs.docker-images.outputs.hook-migrator_digest }}'
                    - release: log-capture
                      values:
                          image:
                              sha: '${{ needs.docker-images.outputs.log-capture_digest }}'
                    - release: kafka-deduplicator
                      values:
                          image:
                              sha: '${{ needs.docker-images.outputs.kafka-deduplicator_digest }}'
        steps:
            - name: get deployer token
              id: deployer
              uses: getsentry/action-github-app-token@d4b5da6c5e37703f8c3b3e43abb5705b46e159cc # v3
              with:
                  app_id: ${{ secrets.DEPLOYER_APP_ID }}
                  private_key: ${{ secrets.DEPLOYER_APP_PRIVATE_KEY }}

            - name: trigger ${{ matrix.release }} deployment
              uses: peter-evans/repository-dispatch@ff45666b9427631e3450c54a1bcbee4d9ff4d7c0 # v3
              with:
                  token: ${{ steps.deployer.outputs.token }}
                  repository: PostHog/charts
                  event-type: commit_state_update
                  client-payload: |
                      {
                        "values": ${{ toJson(matrix.values) }},
                        "release": "${{ matrix.release }}",
                        "commit": ${{ toJson(github.event.head_commit) }},
                        "repository": ${{ toJson(github.repository) }},
                        "labels": [],
                        "timestamp": "${{ github.event.head_commit.timestamp }}"
                      }
