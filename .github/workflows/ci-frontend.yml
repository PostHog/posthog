name: Frontend CI
on:
    pull_request:
    push:
        branches:
            - master

concurrency:
    group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
    cancel-in-progress: true

jobs:
    # Job to decide if we should run frontend ci
    # See https://github.com/dorny/paths-filter#conditional-execution for more details
    # we skip each step individually, so   they are still reported as success
    # because many of them are required for CI checks to be green
    changes:
        runs-on: ubuntu-latest
        timeout-minutes: 5
        name: Determine need to run frontend checks
        outputs:
            frontend: ${{ steps.filter.outputs.frontend }}
        steps:
            # For pull requests it's not necessary to check out the code, but we
            # also want this to run on master, so we need to check out
            - uses: actions/checkout@v4

            - uses: dorny/paths-filter@4512585405083f25c027a35db413c2b3b9006d50 # v2
              id: filter
              with:
                  filters: |
                      frontend:
                        # Avoid running frontend tests for irrelevant changes
                        # NOTE: we are at risk of missing a dependency here.
                        - 'bin/**'
                        - 'frontend/**'
                        - 'ee/frontend/**'
                        - 'common/esbuilder/**'
                        - 'products/**/*.ts'
                        - 'products/**/*.tsx'
                        - 'playwright/**'
                        # Make sure we run if someone is explicitly change the workflow
                        - .github/workflows/ci-frontend.yml
                        # various JS config files
                        - .oxlintrc.json
                        - .prettier*
                        - babel.config.js
                        - package.json
                        - pnpm-lock.yaml
                        - jest.*.ts
                        - tsconfig.json
                        - tsconfig.*.json
                        - webpack.config.js
                        - stylelint*
                        - '**/*.md'
                        - '**/*.mdx'
                        - .config/.markdownlint-cli2.jsonc

    frontend-format:
        name: Frontend formatting
        needs: changes
        if: needs.changes.outputs.frontend == 'true'
        runs-on: depot-ubuntu-24.04
        steps:
            - uses: actions/checkout@v4

            - name: Install pnpm
              uses: pnpm/action-setup@a7487c7e89a18df4991f7f222e4898a00d66ddda # v4

            - name: Set up Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: 22.17.1
                  cache: 'pnpm'

            - name: Get pnpm cache directory path
              id: pnpm-cache-dir
              run: echo "PNPM_STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

            - uses: actions/cache@v4
              id: pnpm-cache
              with:
                  path: ${{ steps.pnpm-cache-dir.outputs.PNPM_STORE_PATH }}
                  key: ${{ runner.os }}-pnpm-frontend-${{ hashFiles('pnpm-lock.yaml') }}
                  restore-keys: ${{ runner.os }}-pnpm-frontend-

            - name: Install package.json dependencies with pnpm
              run: |
                  pnpm --filter=@posthog/playwright... install --frozen-lockfile
                  bin/turbo --filter=@posthog/frontend prepare

            - name: Check formatting with prettier
              run: pnpm --filter=@posthog/frontend prettier:check

            - name: Lint with Stylelint
              run: pnpm --filter=@posthog/frontend lint:css

            - name: Lint with Oxlint
              run: pnpm --filter=@posthog/frontend lint:js -f github

            - name: Lint markdown files
              run: pnpm exec markdownlint-cli2 --config .config/.markdownlint-cli2.jsonc "**/*.{md,mdx}"

    frontend-toolbar-checks:
        name: Frontend toolbar checks
        needs: [changes]
        if: needs.changes.outputs.frontend == 'true'
        runs-on: depot-ubuntu-24.04
        steps:
            - uses: actions/checkout@v4
            - name: Install pnpm
              uses: pnpm/action-setup@a7487c7e89a18df4991f7f222e4898a00d66ddda # v4

            - name: Set up Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: 22.17.1
                  cache: 'pnpm'

            - name: Get pnpm cache directory path
              id: pnpm-cache-dir
              run: echo "PNPM_STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

            - uses: actions/cache@v4
              id: pnpm-cache
              with:
                  path: ${{ steps.pnpm-cache-dir.outputs.PNPM_STORE_PATH }}
                  key: ${{ runner.os }}-pnpm-frontend-${{ hashFiles('pnpm-lock.yaml') }}
                  restore-keys: ${{ runner.os }}-pnpm-frontend-

            - name: Install package.json dependencies with pnpm
              run: |
                  pnpm --filter=@posthog/playwright... install --frozen-lockfile
                  bin/turbo --filter=@posthog/frontend prepare

            - name: Build products
              run: pnpm --filter=@posthog/frontend build:products

            - name: Check toolbar bundle size
              uses: preactjs/compressed-size-action@946a292cd35bd1088e0d7eb92b69d1a8d5b5d76a # v2
              with:
                  build-script: '--filter=@posthog/frontend build'
                  install-script: 'pnpm --filter=@posthog/frontend... install'
                  compression: 'none'
                  pattern: 'frontend/dist/toolbar.js'
                  # we only care if the toolbar will increase a lot
                  minimum-change-threshold: 1000

            - name: Check toolbar for CSP eval violations
              run: pnpm --filter=@posthog/frontend check-toolbar-csp-eval

    frontend-typescript-checks:
        name: Frontend typechecking
        needs: [changes]
        if: needs.changes.outputs.frontend == 'true'
        runs-on: depot-ubuntu-24.04-4
        steps:
            - uses: actions/checkout@v4

            - name: Install pnpm
              uses: pnpm/action-setup@a7487c7e89a18df4991f7f222e4898a00d66ddda # v4

            - name: Set up Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: 22.17.1
                  cache: 'pnpm'

            - name: Get pnpm cache directory path
              id: pnpm-cache-dir
              run: echo "PNPM_STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

            - uses: actions/cache@v4
              id: pnpm-cache
              with:
                  path: ${{ steps.pnpm-cache-dir.outputs.PNPM_STORE_PATH }}
                  key: ${{ runner.os }}-pnpm-frontend-${{ hashFiles('pnpm-lock.yaml') }}
                  restore-keys: ${{ runner.os }}-pnpm-frontend-

            - name: Install package.json dependencies with pnpm
              run: |
                  pnpm --filter=@posthog/playwright... install --frozen-lockfile
                  bin/turbo --filter=@posthog/frontend prepare

            - name: Cache .typegen
              uses: actions/cache@v4
              with:
                  path: .typegen
                  key: ${{ runner.os }}-typegen-${{ hashFiles('pnpm-lock.yaml') }}
                  restore-keys: ${{ runner.os }}-typegen-

            - name: Build products
              run: pnpm --filter=@posthog/frontend build:products

            - name: Kea typegen
              run: pnpm --filter=@posthog/frontend typegen:write

            - name: Run typescript with strict
              run: pnpm --filter=@posthog/frontend typescript:check
              env:
                  NODE_OPTIONS: --max-old-space-size=16384

            - name: Check if "schema.json" is up to date
              run: pnpm --filter=@posthog/frontend schema:build:json && git diff --exit-code

            - name: Check if mobile replay "schema.json" is up to date
              run: pnpm --filter=@posthog/ee mobile-replay:schema:build:json && git diff --exit-code

    vite-build-test:
        name: Vite build test and bundle comparison
        needs: [changes]
        if: needs.changes.outputs.frontend == 'true'
        runs-on: depot-ubuntu-24.04-4
        steps:
            - uses: actions/checkout@v4

            - name: Install pnpm
              uses: pnpm/action-setup@a7487c7e89a18df4991f7f222e4898a00d66ddda # v4

            - name: Set up Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: 22.17.1
                  cache: 'pnpm'

            - name: Get pnpm cache directory path
              id: pnpm-cache-dir
              run: echo "PNPM_STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

            - uses: actions/cache@v4
              id: pnpm-cache
              with:
                  path: ${{ steps.pnpm-cache-dir.outputs.PNPM_STORE_PATH }}
                  key: ${{ runner.os }}-pnpm-frontend-${{ hashFiles('pnpm-lock.yaml') }}
                  restore-keys: ${{ runner.os }}-pnpm-frontend-

            - name: Install package.json dependencies with pnpm
              run: |
                  pnpm --filter=@posthog/playwright... install --frozen-lockfile
                  bin/turbo --filter=@posthog/frontend prepare

            - name: Build products
              run: pnpm --filter=@posthog/frontend build:products

            - name: Build with ESBuild (baseline)
              run: pnpm --filter=@posthog/frontend build
              env:
                  NODE_OPTIONS: --max-old-space-size=16384

            - name: Collect ESBuild bundle stats
              run: |
                  echo "=== ESBuild Bundle Analysis ===" > esbuild-stats.txt
                  echo "Build completed at: $(date)" >> esbuild-stats.txt
                  echo "" >> esbuild-stats.txt
                  ls -la frontend/dist/ >> esbuild-stats.txt
                  echo "" >> esbuild-stats.txt
                  echo "File sizes:" >> esbuild-stats.txt
                  du -h frontend/dist/*.js frontend/dist/*.css 2>/dev/null >> esbuild-stats.txt || true
                  echo "" >> esbuild-stats.txt
                  echo "Total dist size:" >> esbuild-stats.txt
                  du -sh frontend/dist/ >> esbuild-stats.txt

            - name: Save ESBuild artifacts
              run: |
                  mkdir -p build-comparison/esbuild
                  cp -r frontend/dist/* build-comparison/esbuild/
                  cp esbuild-stats.txt build-comparison/

            - name: Clean dist directory
              run: rm -rf frontend/dist/*

            - name: Build with Vite
              run: NODE_OPTIONS="--max-old-space-size=16384" POSTHOG_USE_VITE_PROD=1 pnpm --filter=@posthog/frontend build

            - name: Collect Vite bundle stats
              run: |
                  echo "=== Vite Bundle Analysis ===" > vite-stats.txt
                  echo "Build completed at: $(date)" >> vite-stats.txt
                  echo "" >> vite-stats.txt
                  ls -la frontend/dist/ >> vite-stats.txt
                  echo "" >> vite-stats.txt
                  echo "File sizes:" >> vite-stats.txt
                  du -h frontend/dist/*.js frontend/dist/*.css 2>/dev/null >> vite-stats.txt || true
                  echo "" >> vite-stats.txt
                  echo "Total dist size:" >> vite-stats.txt
                  du -sh frontend/dist/ >> vite-stats.txt

            - name: Save Vite artifacts
              run: |
                  mkdir -p build-comparison/vite
                  cp -r frontend/dist/* build-comparison/vite/
                  cp vite-stats.txt build-comparison/

            - name: Generate bundle comparison report
              run: |
                  echo "# Bundle Size Comparison Report" > build-comparison/comparison-report.md
                  echo "" >> build-comparison/comparison-report.md
                  echo "Generated on: $(date)" >> build-comparison/comparison-report.md
                  echo "" >> build-comparison/comparison-report.md

                  echo "## ESBuild Results" >> build-comparison/comparison-report.md
                  echo "\`\`\`" >> build-comparison/comparison-report.md
                  cat build-comparison/esbuild-stats.txt >> build-comparison/comparison-report.md
                  echo "\`\`\`" >> build-comparison/comparison-report.md
                  echo "" >> build-comparison/comparison-report.md

                  echo "## Vite Results" >> build-comparison/comparison-report.md
                  echo "\`\`\`" >> build-comparison/comparison-report.md
                  cat build-comparison/vite-stats.txt >> build-comparison/comparison-report.md
                  echo "\`\`\`" >> build-comparison/comparison-report.md
                  echo "" >> build-comparison/comparison-report.md

                  echo "## Bundle Size Comparison" >> build-comparison/comparison-report.md
                  echo "" >> build-comparison/comparison-report.md

                  # Compare specific entry points
                  for entry in index exporter render-query toolbar; do
                      echo "### $entry.js" >> build-comparison/comparison-report.md
                      esbuild_size=$(find build-comparison/esbuild -name "${entry}*.js" -exec du -h {} \; | cut -f1 | head -1)
                      vite_size=$(find build-comparison/vite -name "${entry}*.js" -exec du -h {} \; | cut -f1 | head -1)
                      echo "- ESBuild: $esbuild_size" >> build-comparison/comparison-report.md
                      echo "- Vite: $vite_size" >> build-comparison/comparison-report.md
                      echo "" >> build-comparison/comparison-report.md
                  done

            - name: Validate build artifacts
              run: |
                  echo "Validating Vite build artifacts..."

                  # Check that all expected entry points exist
                  for entry in index exporter render-query toolbar testWorker; do
                      if ! find build-comparison/vite -name "${entry}*.js" | grep -q .; then
                          echo "❌ Missing entry point: $entry"
                          exit 1
                      else
                          echo "✅ Found entry point: $entry"
                      fi
                  done

                  # Check that manifest.json exists
                  if [ ! -f "build-comparison/vite/.vite/manifest.json" ]; then
                      echo "❌ Missing Vite manifest.json"
                      exit 1
                  else
                      echo "✅ Found Vite manifest.json"
                  fi

                  # Check that assets are copied
                  if [ ! -d "build-comparison/vite/assets" ]; then
                      echo "❌ Missing assets directory"
                      exit 1
                  else
                      echo "✅ Found assets directory"
                  fi

                  echo "✅ All Vite build artifacts validated successfully"

            - name: Upload build comparison artifacts
              uses: actions/upload-artifact@v4
              with:
                  name: bundle-comparison-${{ github.run_id }}
                  path: build-comparison/
                  retention-days: 7

            - name: Comment bundle comparison on PR
              if: github.event_name == 'pull_request'
              uses: actions/github-script@v7
              with:
                  script: |
                      const fs = require('fs');

                      if (fs.existsSync('build-comparison/comparison-report.md')) {
                          const report = fs.readFileSync('build-comparison/comparison-report.md', 'utf8');
                          
                          github.rest.issues.createComment({
                              issue_number: context.issue.number,
                              owner: context.repo.owner,
                              repo: context.repo.repo,
                              body: `## 📦 Vite Build Test Results\n\n${report}\n\n*This comment was generated by the vite-build-test CI job.*`
                          });
                      }

    jest:
        runs-on: depot-ubuntu-24.04
        needs: changes
        if: needs.changes.outputs.frontend == 'true'
        name: Jest test (${{ matrix.segment }} - ${{ matrix.chunk }})

        strategy:
            # If one test fails, still run the others
            fail-fast: false
            matrix:
                segment: ['FOSS', 'EE']
                chunk: [1, 2, 3]

        steps:
            - uses: actions/checkout@v4

            - name: Remove ee
              if: matrix.segment == 'FOSS'
              run: rm -rf ee

            - name: Install pnpm
              uses: pnpm/action-setup@a7487c7e89a18df4991f7f222e4898a00d66ddda # v4

            - name: Set up Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: 22.17.1
                  cache: pnpm

            - name: Install package.json dependencies with pnpm
              run: pnpm --filter=@posthog/frontend... install --frozen-lockfile

            - name: Test with Jest
              run: bin/turbo run test --filter=@posthog/frontend
              env:
                  NODE_OPTIONS: --max-old-space-size=16384
                  SHARD_INDEX: ${{ matrix.chunk }}
                  SHARD_COUNT: 3

    calculate-running-time:
        name: Calculate running time
        needs: [jest, frontend-typescript-checks, frontend-format, frontend-toolbar-checks, vite-build-test, changes]
        runs-on: ubuntu-latest
        if: # Run on pull requests to PostHog/posthog + on PostHog/posthog outside of PRs - but never on forks
            needs.changes.outputs.frontend == 'true' && (
            (github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == 'PostHog/posthog') ||
            (github.event_name != 'pull_request' && github.repository == 'PostHog/posthog'))
        steps:
            - name: Calculate running time
              run: |
                  echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token
                  run_id=${GITHUB_RUN_ID}
                  repo=${GITHUB_REPOSITORY}
                  run_info=$(gh api repos/${repo}/actions/runs/${run_id})
                  echo run_info: ${run_info}
                  # name is the name of the workflow file
                  # run_started_at is the start time of the workflow
                  # we want to get the number of seconds between the start time and now
                  name=$(echo ${run_info} | jq -r '.name')
                  run_url=$(echo ${run_info} | jq -r '.url')
                  run_started_at=$(echo ${run_info} | jq -r '.run_started_at')
                  run_attempt=$(echo ${run_info} | jq -r '.run_attempt')
                  start_seconds=$(date -d "${run_started_at}" +%s)
                  now_seconds=$(date +%s)
                  duration=$((now_seconds-start_seconds))
                  echo running_time_duration_seconds=${duration} >> $GITHUB_ENV
                  echo running_time_run_url=${run_url} >> $GITHUB_ENV
                  echo running_time_run_attempt=${run_attempt} >> $GITHUB_ENV
                  echo running_time_run_id=${run_id} >> $GITHUB_ENV
                  echo running_time_run_started_at=${run_started_at} >> $GITHUB_ENV

            - name: Capture running time to PostHog
              if: needs.changes.outputs.frontend == 'true'
              uses: PostHog/posthog-github-action@v0.1
              with:
                  posthog-token: ${{secrets.POSTHOG_API_TOKEN}}
                  event: 'posthog-ci-running-time'
                  properties: '{"runner": "depot", "duration_seconds": ${{ env.running_time_duration_seconds }}, "run_url": "${{ env.running_time_run_url }}", "run_attempt": "${{ env.running_time_run_attempt }}", "run_id": "${{ env.running_time_run_id }}", "run_started_at": "${{ env.running_time_run_started_at }}"}'

    frontend_tests:
        needs: [jest, frontend-format, frontend-toolbar-checks, frontend-typescript-checks, vite-build-test]
        name: Frontend Tests Pass
        runs-on: ubuntu-latest
        if: always()
        steps:
            - run: exit 0
            - name: Check outcomes
              run: |
                  if [[ "${{ needs.jest.result }}" != "success" && "${{ needs.jest.result }}" != "skipped" ]]; then
                    echo "Frontend jest tests failed."
                    exit 1
                  fi
                  echo "Frontend jest tests passed."
                  if [[ "${{ needs.frontend-format.result }}" != "success" && "${{ needs.frontend-format.result }}" != "skipped" ]]; then
                    echo "Frontend linting failed."
                    exit 1
                  fi
                  echo "Frontend linting passed."
                  if [[ "${{ needs.frontend-toolbar-checks.result }}" != "success" && "${{ needs.frontend-toolbar-checks.result }}" != "skipped" ]]; then
                    echo "Frontend toolbar checks failed."
                    exit 1
                  fi
                  echo "Frontend toolbar checks passed."
                  if [[ "${{ needs.frontend-typescript-checks.result }}" != "success" && "${{ needs.frontend-typescript-checks.result }}" != "skipped" ]]; then
                    echo "Frontend TypeScript checks failed."
                    exit 1
                  fi
                  echo "Frontend TypeScript checks passed."
                  if [[ "${{ needs.vite-build-test.result }}" != "success" && "${{ needs.vite-build-test.result }}" != "skipped" ]]; then
                    echo "Vite build test failed."
                    exit 1
                  fi
                  echo "Vite build test passed."
