name: Container Images CI

on:
    pull_request:
        paths-ignore:
            - 'rust/**'
            - 'livestream/**'

concurrency:
    group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
    cancel-in-progress: true

jobs:
    posthog_build:
        name: Build Docker image
        runs-on: ubuntu-latest
        permissions:
            id-token: write # allow issuing OIDC tokens for this workflow run
            contents: read # allow at least reading the repo contents, add other permissions if necessary

        steps:
            # If this run wasn't initiated by PostHog Bot (meaning: snapshot update),
            # cancel previous runs of snapshot update-inducing workflows

            - uses: n1hility/cancel-previous-runs@v3
              if: github.actor != 'posthog-bot'
              with:
                  token: ${{ secrets.GITHUB_TOKEN }}
                  workflow: .github/workflows/storybook-chromatic.yml

            - uses: n1hility/cancel-previous-runs@v3
              if: github.actor != 'posthog-bot'
              with:
                  token: ${{ secrets.GITHUB_TOKEN }}
                  workflow: .github/workflows/ci-backend.yml

            - name: Check out
              uses: actions/checkout@v3

            - name: Build and cache Docker image in Depot
              uses: ./.github/actions/build-n-cache-image
              with:
                  actions-id-token-request-url: ${{ env.ACTIONS_ID_TOKEN_REQUEST_URL }}

    test_docker_startup:
        name: Test posthog services startup safely
        runs-on: ubuntu-latest
        timeout-minutes: 5
        needs: [posthog_build]
        permissions:
            id-token: write # allow issuing OIDC tokens for this workflow run
            contents: read # allow at least reading the repo contents, add other permissions if necessary

        steps:
            - name: Checkout
              uses: actions/checkout@v3

            - name: Stop/Start stack with Docker Compose
              run: |
                  docker compose -f docker-compose.dev.yml down
                  docker compose -f docker-compose.dev.yml up -d

            - name: Wait for ClickHouse
              # these are required checks so, we can't skip entire sections
              if: needs.changes.outputs.shouldTriggerCypress == 'true'
              run: ./bin/check_kafka_clickhouse_up

            - name: Install Depot CLI
              if: needs.changes.outputs.shouldTriggerCypress == 'true'
              uses: depot/setup-action@v1

            - name: Get Docker image cached in Depot
              if: needs.changes.outputs.shouldTriggerCypress == 'true'
              uses: depot/pull-action@v1
              with:
                  build-id: ${{ needs.container.outputs.build-id }}
                  tags: ${{ needs.container.outputs.tag }}

            - name: Write .env # This step intentionally has no if, so that GH always considers the action as having run
              run: |
                  cat <<EOT >> .env
                  SECRET_KEY=6b01eee4f945ca25045b5aab440b953461faf08693a9abbf1166dc7c6b9772da
                  REDIS_URL=redis://localhost
                  DATABASE_URL=postgres://posthog:posthog@localhost:5432/posthog
                  KAFKA_HOSTS=kafka:9092
                  DISABLE_SECURE_SSL_REDIRECT=1
                  SECURE_COOKIES=0
                  OPT_OUT_CAPTURE=0
                  E2E_TESTING=1
                  SKIP_SERVICE_VERSION_REQUIREMENTS=1
                  EMAIL_HOST=email.test.posthog.net
                  SITE_URL=http://localhost:8000
                  NO_RESTART_LOOP=1
                  CLICKHOUSE_SECURE=0
                  OBJECT_STORAGE_ENABLED=1
                  OBJECT_STORAGE_ENDPOINT=http://localhost:19000
                  OBJECT_STORAGE_ACCESS_KEY_ID=object_storage_root_user
                  OBJECT_STORAGE_SECRET_ACCESS_KEY=object_storage_root_password
                  GITHUB_ACTION_RUN_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                  CELERY_METRICS_PORT=8999
                  CLOUD_DEPLOYMENT=E2E
                  EOT

            - name: Start PostHog
              run: |
                  mkdir -p /tmp/logs

                  echo "Starting PostHog using the container image ${{ needs.container.outputs.tag }}"
                  DOCKER_RUN="docker run --rm --network host --add-host kafka:127.0.0.1 --env-file .env ${{ needs.container.outputs.tag }}"

                  $DOCKER_RUN ./bin/migrate
                  $DOCKER_RUN python manage.py setup_dev
                  $DOCKER_RUN ./bin/docker-worker &> /tmp/logs/worker.txt &
                  $DOCKER_RUN ./bin/docker-server &> /tmp/logs/server.txt &

            - name: Wait for PostHog
              uses: iFaxity/wait-on-action@v1.2.1
              timeout-minutes: 3
              with:
                  verbose: true
                  log: true
                  resource: http://localhost:8000

            - name: Validate healthy logs
              run: |
                  cat /tmp/logs/server.txt
                  cat /tmp/logs/worker.txt

            - name: Show logs on failure
              # use artefact here, as I think the output will be too large for display in an action
              uses: actions/upload-artifact@v3
              with:
                  name: logs
                  path: /tmp/logs
              if: ${{ failure() }}

    deploy_preview:
        name: Deploy preview environment
        uses: ./.github/workflows/pr-deploy.yml
        needs: [posthog_build]
        secrets: inherit
        if: ${{ contains(github.event.pull_request.labels.*.name, 'deploy') }}

    lint:
        name: Lint changed Dockerfiles
        runs-on: ubuntu-latest
        steps:
            - name: Check out
              uses: actions/checkout@v3
              with:
                  fetch-depth: 0

            - name: Check if any Dockerfile has changed
              id: changed-files
              uses: tj-actions/changed-files@v43
              with:
                  files: |
                      **/Dockerfile
                      **/*.Dockerfile
                      **/Dockerfile.*
                  separator: ' '

            - name: Lint changed Dockerfile(s) with Hadolint
              uses: jbergstroem/hadolint-gh-action@v1
              if: steps.changed-files.outputs.any_changed == 'true'
              with:
                  dockerfile: '${{ steps.changed-files.outputs.all_modified_files }}'
