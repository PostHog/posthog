name: Build & Deploy Production Containers

# on:
#     push:
#         branches: master
on:
    - pull_request

jobs:
    build:
        name: Build & Deploy Production Docker image
        runs-on: ubuntu-20.04
        steps:
            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v1
              with:
                  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  aws-region: us-east-1

            - name: Login to Amazon ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v1

            - name: Fetch posthog-production
              run: |
                  curl -L https://github.com/posthog/posthog-production/tarball/master | tar --strip-components=1 -xz --
                  mkdir deploy/

            - name: Checkout master
              uses: actions/checkout@v2
              with:
                  # ref: 'master'
                  ref: 'moarservices'
                  path: 'deploy/'

            - name: Build, tag, and push image to Amazon ECR
              id: build-image
              env:
                  ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                  ECR_REPOSITORY: posthog-production
                  IMAGE_TAG: ${{ github.sha }}
              run: |
                  docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f prod.web.Dockerfile .
                  docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
                  echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

            - name: Fill in the new image ID in the Amazon ECS task definition
              id: task-def
              uses: aws-actions/amazon-ecs-render-task-definition@v1
              with:
                  task-definition: deploy/task-definition.json
                  container-name: posthog-production
                  image: ${{ steps.build-image.outputs.image }}

            - name: Fill in the new worker image ID in the Amazon ECS task definition
              id: task-def-worker
              uses: aws-actions/amazon-ecs-render-task-definition@v1
              with:
                  task-definition: ${{ steps.task-def.outputs.task-definition }}
                  container-name: posthog-production-worker
                  image: ${{ steps.build-image.outputs.image }}

            - name: Fill in the new migration image ID in the Amazon ECS task definition
              id: task-def-migrate
              uses: aws-actions/amazon-ecs-render-task-definition@v1
              with:
                  task-definition: ${{ steps.task-def.outputs.task-definition }}
                  container-name: posthog-production-migration
                  image: ${{ steps.build-image.outputs.image }}

            - name: Perform migrations
              run: |
                  aws ecs run-task --cluster posthog-production-cluster --count 1 --launch-type fargate --task-definition posthog-production-migration
              env:
                  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  AWS_DEFAULT_REGION: 'us-east-1'

            - name: Deploy Amazon ECS task definition
              uses: aws-actions/amazon-ecs-deploy-task-definition@v1
              with:
                  task-definition: ${{ steps.task-def-migrate.outputs.task-definition }}
                  service: posthog-production
                  cluster: posthog-production-cluster

            - name: Deploy Amazon ECS Posthog event handler task definition
              uses: aws-actions/amazon-ecs-deploy-task-definition@v1
              with:
                  task-definition: ${{ steps.task-def-migrate.outputs.task-definition }}
                  service: posthog-production-events
                  cluster: posthog-production-cluster
