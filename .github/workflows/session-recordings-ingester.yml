name: Session Recordings Ingester

on:
    pull_request:
    push:
        branches:
            - master

concurrency:
    group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
    cancel-in-progress: true

jobs:
    build:
        name: Build docker image
        runs-on: ubuntu-20.04

        outputs:
            docker_image: ghcr.io/posthog/posthog/session-recordings-ingester@${{ steps.docker_build.outputs.digest }}

        steps:
            - name: Checkout PR branch
              uses: actions/checkout@v2

            # As ghcr.io complains if the image has upper case letters, we use
            # this action to ensure we get a lower case version. See
            # https://github.com/docker/build-push-action/issues/237#issuecomment-848673650
            # for more details
            - name: Docker image metadata
              id: meta
              uses: docker/metadata-action@v3
              with:
                  images: ghcr.io/${{ github.repository }}/session-recordings-ingester
                  tags: |
                      type=ref,event=pr
                      type=sha,enable=${{ github.ref == format('refs/heads/{0}', 'master') }}
                      type=raw,value=master,enable=${{ github.ref == format('refs/heads/{0}', 'master') }}

            # We also want to use cache-from when building, but we want to also
            # include the master tag so we get the master branch image as well.
            # This creates a scope similar to the github cache action scoping
            - name: Docker cache-from/cache-to metadata
              id: meta-for-cache
              uses: docker/metadata-action@v3
              with:
                  images: ghcr.io/${{ github.repository }}/session-recordings-ingester
                  tags: |
                      type=raw,value=master
                      type=ref,event=pr

            - name: Set up QEMU
              uses: docker/setup-qemu-action@v1

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v1

            - name: Login to GitHub Container Registry
              uses: docker/login-action@v1
              with:
                  registry: ghcr.io
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}

            - name: Build
              id: docker_build
              uses: docker/build-push-action@v2
              with:
                  push: true
                  cache-from: ${{ steps.meta-for-cache.outputs.tags }}
                  tags: ${{ steps.meta.outputs.tags }}
                  labels: ${{ steps.meta.outputs.labels }}
                  context: ./session-recordings/
                  # load: true # NOTE: this option is not compatible with `push: true`
                  # NOTE: we use inline as suggested here:
                  # https://github.com/docker/build-push-action/blob/master/docs/advanced/cache.md#inline-cache
                  # It notes that it doesn't support mode=max, but we're not
                  # removing any layers, soooo, maybe it's fine.
                  cache-to: type=inline

            - name: Output image info including size
              run: |
                  export docker_image=ghcr.io/posthog/posthog/posthog@${{ steps.docker_build.outputs.digest }}
                  image_size_bytes=$(docker manifest inspect $docker_image | jq '[.layers[].size] | add')
                  echo "### Build info" >> $GITHUB_STEP_SUMMARY
                  echo "Image size: $(numfmt --to=iec --suffix=B --format="%.2f" $image_size_bytes)" >> $GITHUB_STEP_SUMMARY
                  echo "Image name: $docker_image" >> $GITHUB_STEP_SUMMARY

    test:
        name: Tests
        runs-on: ubuntu-20.04

        defaults:
            run:
                working-directory: session-recordings/

        needs: build

        steps:
            - name: Checkout PR branch
              uses: actions/checkout@v2

            - name: Install Node.js
              uses: actions/setup-node@v2
              with:
                  node-version: '16.x'

            - name: Install dependencies
              run: yarn install --frozen-lockfile

            - name: Test
              run: |
                  bin/test.sh ${{ needs.build.outputs.docker_image }}
