name: CI CLI
permissions:
    contents: read
    pull-requests: write
on:
    pull_request:
        paths:
            - 'cli/**'
            - '.github/workflows/ci-cli.yml'
            - docs/**

jobs:
    check-lockfile:
        name: Check lockfile is up to date
        runs-on: ubuntu-latest
        defaults:
            run:
                working-directory: cli
        steps:
            - uses: actions/checkout@v4

            - name: Install rust
              uses: dtolnay/rust-toolchain@6691ebadcb18182cc1391d07c9f295f657c593cd # 1.88

            - name: Check Cargo.lock is up to date
              run: |
                  cargo update --workspace --locked
                  git diff --exit-code Cargo.lock

    tests:
        name: Run tests
        runs-on: ubuntu-latest
        defaults:
            run:
                working-directory: cli
        steps:
            - uses: actions/checkout@v4

            - name: Install rust
              uses: dtolnay/rust-toolchain@6691ebadcb18182cc1391d07c9f295f657c593cd # 1.88

            - name: Run tests
              run: cargo test --all-features

    clippy:
        name: Clippy
        runs-on: ubuntu-latest
        defaults:
            run:
                working-directory: cli
        steps:
            - uses: actions/checkout@v4

            - name: Install rust
              uses: dtolnay/rust-toolchain@6691ebadcb18182cc1391d07c9f295f657c593cd # 1.88
              with:
                  components: clippy

            - name: Run clippy
              run: cargo clippy --all-targets --all-features -- -D warnings

    format:
        name: Format
        runs-on: ubuntu-latest
        defaults:
            run:
                working-directory: cli
        steps:
            - uses: actions/checkout@v4

            - name: Install rust
              uses: dtolnay/rust-toolchain@6691ebadcb18182cc1391d07c9f295f657c593cd # 1.88
              with:
                  components: rustfmt

            - name: Check formatting
              run: cargo fmt --all -- --check

    trigger-docs-preview:
        name: Trigger docs preview (PoC)
        runs-on: ubuntu-latest
        steps:
            - name: Trigger Vercel build with inline env
              env:
                  VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
                  VERCEL_TEAM_ID: ${{ secrets.VERCEL_TEAM_ID }}
                  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
              run: |
                  if [ -z "$VERCEL_TOKEN" ] || [ -z "$VERCEL_TEAM_ID" ] || [ -z "$VERCEL_PROJECT_ID" ]; then
                    echo "⚠️ Vercel secrets not configured, skipping"
                    exit 0
                  fi

                  PR_BRANCH="${{ github.event.pull_request.head.ref }}"

                  echo "📢 Triggering Vercel deployment for posthog.com@feat/docs-monorepo-poc (PoC)"
                  echo "   Monorepo branch: $PR_BRANCH (per-deployment env)"

                  PAYLOAD='{
                    "name": "posthog-com",
                    "project": "'"$VERCEL_PROJECT_ID"'",
                    "gitSource": {
                      "type": "github",
                      "repoId": "260550412",
                      "ref": "feat/docs-monorepo-poc"
                    },
                    "build": {
                      "env": {
                        "POSTHOG_MONOREPO_REF": "'"$PR_BRANCH"'"
                      }
                    }
                  }'

                  RESPONSE=$(curl -s -w "\n%{http_code}" -X POST "https://api.vercel.com/v13/deployments?teamId=${VERCEL_TEAM_ID}" \
                    -H "Authorization: Bearer $VERCEL_TOKEN" \
                    -H "Content-Type: application/json" \
                    -d "$PAYLOAD")

                  HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
                  BODY=$(echo "$RESPONSE" | head -n-1)

                  if [ "$HTTP_CODE" -eq 200 ] || [ "$HTTP_CODE" -eq 201 ]; then
                    DEPLOYMENT_URL=$(echo "$BODY" | jq -r '.url // empty')
                    echo "✅ Successfully triggered Vercel preview build"
                    if [ -n "$DEPLOYMENT_URL" ]; then
                      echo "   Preview URL: https://${DEPLOYMENT_URL}"
                    fi
                  else
                    echo "❌ Failed to trigger preview build (HTTP $HTTP_CODE)"
                    echo "$BODY" | jq '.' 2>/dev/null || echo "$BODY"
                  fi

            - name: Comment on PR
              if: always()
              uses: actions/github-script@v7
              with:
                  script: |
                      const prNumber = ${{ github.event.pull_request.number }};
                      const message = '## 📚 Docs Preview Build (PoC)\n\n✅ Triggered Vercel deployment!\n\nCheck the **Vercel** deployment check below for preview URL.';
                      github.rest.issues.createComment({
                        issue_number: prNumber,
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        body: message
                      });
