# hogli scripts manifest - auto-discovered bin/ scripts
# Generated by LLM analysis of bin/ directory
# This defines all available commands accessible via hogli

health_checks:
    check_clickhouse:
        cli_name: check:clickhouse
        bin_script: check_clickhouse_up
        description: Poll ClickHouse HTTP port until service is ready
        delegate: true
        args: none

    check_dagster_graphql:
        cli_name: check:dagster-graphql
        bin_script: check_dagster_graphql_up
        description: Wait for Dagster UI to become available
        delegate: true
        args: none

    check_hosts:
        cli_name: check:hosts
        bin_script: check_hosts
        description: Verify DNS resolution for required service hostnames (clickhouse, kafka, etc)
        delegate: true
        args: none

    check_kafka_clickhouse:
        bin_script: check_kafka_clickhouse_up
        description: Wait for both Kafka and ClickHouse services to be ready
        delegate: true
        args: none

    check_postgres:
        bin_script: check_postgres_up
        description: Poll PostgreSQL connection until database is available
        delegate: true
        args: optional

    check_temporal:
        bin_script: check_temporal_up
        description: Wait for Temporal service port with 180s timeout
        delegate: true
        args: none

    check_video_deps:
        bin_script: check_video_deps
        description: Install and verify Playwright browsers and FFmpeg dependencies
        delegate: true
        args: none

start:
    start:
        bin_script: start
        description: Main entry point that launches all dev services via mprocs orchestrator
        delegate: true
        allow_extra_args: true
        args: optional

    start_backend:
        bin_script: start-backend
        description: Run Django development server on port 8000 with auto-reload
        delegate: true
        args: none

    start_celery:
        bin_script: start-celery
        description: Start Celery worker or beat scheduler with auto-reload
        delegate: true
        args: required (worker|beat)

    start_frontend:
        bin_script: start-frontend
        description: Install dependencies and start frontend with Vite dev server
        delegate: true
        allow_extra_args: true
        args: optional

    start_frontend_vite:
        bin_script: start-frontend-vite
        description: Start Vite dev server for frontend (runs pnpm start-vite)
        delegate: true
        allow_extra_args: true
        args: optional

    start_worker:
        bin_script: start-worker
        description: Launch all background workers (Celery worker, beat scheduler, plugin-server)
        delegate: true
        args: none

    start_rust_service:
        bin_script: start-rust-service
        description: Build and run live Rust microservice with auto-restart on crash
        delegate: true
        allow_extra_args: true
        args: required (service name)

deploy:
    deploy_hobby:
        bin_script: deploy-hobby
        description: Interactive installer for single-instance PostHog deployment on remote server
        delegate: true
        allow_extra_args: true
        args: optional

    upgrade_hobby:
        bin_script: upgrade-hobby
        description: Upgrade existing hobby deployment with data loss warnings and volume checks
        delegate: true
        args: none

build:
    build_schema_python:
        bin_script: build-schema-python.sh
        description: Generate Pydantic schema.py from schema.json with datamodel-codegen
        delegate: true
        args: none

    build_schema_latest_versions:
        bin_script: build-schema-latest-versions.py
        description: Extract latest schema versions and generate frontend JSON config
        delegate: true
        args: none

    build_taxonomy_json:
        bin_script: build-taxonomy-json.py
        description: Generate core filter definitions taxonomy JSON for frontend
        delegate: true
        args: none

docker:
    docker:
        bin_script: docker
        description: Run all services (migrate, backend, worker) via Docker orchestration
        delegate: true
        args: none

    docker_dev:
        bin_script: docker-dev
        description: Migrate, run Django dev server on port 8000, and start frontend in Docker
        delegate: true
        args: none

    docker_dev_web:
        bin_script: docker-dev-web
        description: Run Django dev server on port 8000 and start frontend in Docker
        delegate: true
        args: none

    docker_backend:
        bin_script: docker-backend
        description: Run Django development server on port 8000 with migrations
        delegate: true
        args: none

    docker_frontend:
        bin_script: docker-frontend
        description: Build and run frontend in Docker with Webpack hot reload
        delegate: true
        args: none

    docker_migrate:
        bin_script: docker-migrate
        description: Run database migrations in Docker
        delegate: true
        args: none

    docker_server:
        bin_script: docker-server
        description: Run gunicorn application server with Prometheus metrics support
        delegate: true
        allow_extra_args: true
        args: optional

    docker_server_unit:
        bin_script: docker-server-unit
        description: Run NGINX Unit application server with configurable workers
        delegate: true
        args: none

    docker_worker:
        bin_script: docker-worker
        description: Start plugin-server and Celery worker/beat in parallel with restart loop
        delegate: true
        args: none

    docker_worker_beat:
        bin_script: docker-worker-beat
        description: Run Celery beat scheduler with RedBeat backend
        delegate: true
        args: none

    docker_worker_celery:
        bin_script: docker-worker-celery
        description: Start Celery worker with optional scheduler, gossip, heartbeat, mingle
        delegate: true
        allow_extra_args: true
        args: optional

    docker_ai_evals:
        bin_script: docker-ai-evals
        description: Set up Docker services and run evaluation scripts with cleanup
        delegate: true
        args: none

migration:
    migrate:
        bin_script: migrate
        description: Run all database migrations (ClickHouse, Postgres, async) in parallel
        delegate: true
        args: none

    migrate_check:
        bin_script: migrate-check
        description: Verify all migrations are ready without applying them
        delegate: true
        args: none

    migrate_kafka:
        bin_script: migrate_kafka_data.py
        description: Migrate data between Kafka clusters/topics with consumer group tracking
        delegate: true
        allow_extra_args: true
        args: required

testing:
    tests:
        bin_script: tests
        description: Interactive test runner with watch mode and changed file detection
        delegate: true
        allow_extra_args: true
        args: optional

    e2e_test_runner:
        bin_script: e2e-test-runner
        description: Set up test databases and run Playwright E2E tests
        delegate: true
        allow_extra_args: true
        args: optional

tools:
    temporal_django_worker:
        bin_script: temporal-django-worker
        description: Start Temporal worker with graceful shutdown handling
        delegate: true
        allow_extra_args: true
        args: optional

    plugin_server:
        bin_script: plugin-server
        description: Start plugin-server with optional restart loop
        delegate: true
        allow_extra_args: true
        args: optional

    download_mmdb:
        bin_script: download-mmdb
        description: Download and cache GeoLite2 MaxMind database with retry logic
        delegate: true
        args: none

    hog:
        bin_script: hog
        description: Run HogQL interpreter (TypeScript/Python) or compiled bytecode
        delegate: true
        allow_extra_args: true
        args: required (file.hog or file.hoge)

    hoge:
        bin_script: hoge
        description: Compile HogQL source to bytecode or JavaScript
        delegate: true
        allow_extra_args: true
        args: required (input.hog)

    ruff:
        bin_script: ruff.sh
        description: Python linter and formatter with virtualenv auto-activation
        delegate: true
        allow_extra_args: true
        args: required (check|format|etc)

    ty:
        bin_script: ty.py
        description: Type checker with mypy-baseline filtering and sync
        delegate: true
        allow_extra_args: true
        args: required (check|sync)

    turbo:
        bin_script: turbo
        description: Turborepo wrapper with automatic dependency installation
        delegate: true
        allow_extra_args: true
        args: required (turbo command)

    unit_metrics:
        bin_script: unit_metrics.py
        description: WSGI app that aggregates Prometheus metrics from NGINX Unit status endpoint
        delegate: true
        args: none

utilities:
    posthog_worktree:
        bin_script: posthog-worktree
        description: Manage isolated git worktrees for PostHog development
        delegate: true
        allow_extra_args: true
        args: required (create|checkout|pr|remove|list)

    phw:
        bin_script: phw
        description: Shell function wrapper for worktree management with auto-cd
        delegate: true
        allow_extra_args: true
        args: required (create|checkout|pr|remove|list|switch)

    update_bots_list:
        bin_script: update-bots-list
        description: Download bot IP list from GoodBots GitHub and save locally
        delegate: true
        args: none

    dump_hogvmrs_stl:
        bin_script: dump_hogvmrs_stl
        description: Generate Rust HogVM standard library definitions for error tracking
        delegate: true
        args: none

    hobby_ci:
        bin_script: hobby-ci.py
        description: DigitalOcean CI automation for Hobby deployment testing
        delegate: true
        allow_extra_args: true
        args: optional (create|destroy|test)

# Compositions: Multi-step hogli workflows defined declaratively
# These chain hogli commands in sequence, stopping on first failure
compositions:
    infra_ready:
        cli_name: infra:ready
        steps:
            - check:clickhouse
            - check:postgres
            - check:temporal
        description: Verify all core infrastructure services are ready

    quality_check:
        cli_name: quality:check
        steps:
            - lint:check
            - build:frontend
        description: Quick quality checks without tests (lint + build)

# Direct shell commands (alternative to bin_script for simple single-line commands)
# Could potentially move some env:shell, db:migrate, etc. here instead of Python
direct_commands:
    example_git_status:
        cli_name: git:status
        cmd: git status
        description: Show git repository status
