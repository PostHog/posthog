"""Generate shell completion scripts for hogli."""

import click


def generate_bash_completion(cli_name: str = "hogli") -> str:
    """Generate bash completion script for hogli."""
    return f"""# bash completion for {cli_name}
# Generated by hogli completion system

_hogli_completion() {{
    local cur prev words cword
    COMPREPLY=()
    cur="${"{COMP_WORDS[COMP_CWORD]}"}"
    prev="${"{COMP_WORDS[COMP_CWORD-1]}"}"

    # Get all available commands from hogli --help
    local commands=$(python -m hogli --help 2>/dev/null | grep -E '^  [a-z]' | awk '{{print $1}}')

    if [[ ${{cur}} == -* ]] ; then
        COMPREPLY=($(compgen -W '--help' -- ${{cur}}))
        return 0
    fi

    COMPREPLY=($(compgen -W "${{commands}}" -- ${{cur}}))
    return 0
}}

complete -o bashdefault -o default -o nospace -F _hogli_completion {cli_name}
"""


def generate_zsh_completion(cli_name: str = "hogli") -> str:
    """Generate zsh completion script for hogli."""
    return f"""#compdef hogli

# zsh completion for {cli_name}
# Dynamically loads commands from hogli --help
# Handles colon-separated command names properly

_hogli() {{
  local -a commands

  # Parse output from hogli --help to get all commands
  # hogli --help outputs: "  command:name    description here"
  commands=(${{(f)"$(hogli --help 2>/dev/null | grep -E '^  [a-z:]' | sed -E 's/^  ([a-z:]+)[[:space:]]+(.*)$/\\1:\\2/')"}})

  # Use _describe to show commands with descriptions
  _describe 'hogli commands' commands
}}

_hogli
"""


def install_completion(shell: str = "bash") -> None:
    """Install shell completion for the specified shell."""
    if shell == "bash":
        completion_script = generate_bash_completion()
        # Bash completions typically go in /etc/bash_completion.d/ or ~/.bash_completion
        # For flox, we'll output to a location that can be sourced
        click.echo(completion_script)
    elif shell == "zsh":
        completion_script = generate_zsh_completion()
        # Zsh completions go in fpath directories
        click.echo(completion_script)
    else:
        raise ValueError(f"Unsupported shell: {shell}")


if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser(description="Generate shell completion for hogli")
    parser.add_argument("--shell", choices=["bash", "zsh"], default="bash", help="Shell to generate completion for")
    args = parser.parse_args()

    install_completion(args.shell)
