metadata:
    categories:
        - key: core
          title: Core development commands
        - key: health_checks
          title: Verify infrastructure readiness
        - key: start
          title: Start services and background workers
        - key: deploy
          title: Deploy PostHog to remote instances
        - key: build
          title: Build and generate code
        - key: docker
          title: Docker-based service orchestration
        - key: migration
          title: Database migrations
        - key: testing
          title: Run tests
        - key: code_quality
          title: Code quality and formatting
        - key: tools
          title: Developer tools and utilities
        - key: utilities
          title: Git worktrees and admin
        - key: compositions
          title: Multi-step workflows
        - key: environment
          title: Environment and shell
    services:
        flox:
            name: Flox
            about: Manages reproducible development environments. All developers get the
                same exact versions of tools and dependencies.
        docker:
            name: Docker
            about: Isolates services and dependencies in containers to match production
                without requiring local installation.
        migration:
            name: Database migrations
            about: Schema updates and data migrations across PostgreSQL, ClickHouse, and
                async systems.
        clickhouse:
            name: ClickHouse
            about: Analytics database used for metrics, events, and funnel analysis throughout
                PostHog.
        postgresql:
            name: PostgreSQL
            about: Primary relational database for application data, authentication, and
                feature flags.
        redis:
            name: Redis
            about: In-memory cache and queue backend for fast data access and job processing.
        kafka:
            name: Kafka
            about: Event streaming platform for reliable event processing and data pipelines.
        temporal:
            name: Temporal
            about: Workflow orchestration engine for reliable, long-running background jobs
                and retries.
        testing:
            name: Testing
            about: Automated test suites (unit, integration, E2E) to ensure code quality
                and prevent regressions.
core:
    categories:
        description: Show all available commands grouped by category
    dev:up:
        description: Start full PostHog dev stack via mprocs
    qa:check:
        description: Run pre-push quality checks (lint + build, ~5 min)
health_checks:
    check:clickhouse:
        bin_script: check_clickhouse_up
        description: Poll ClickHouse HTTP port until service is ready
        services:
            - clickhouse
    check:dagster-graphql:
        bin_script: check_dagster_graphql_up
        description: Wait for Dagster UI to become available
    check:hosts:
        bin_script: check_hosts
        description: Verify DNS resolution for required service hostnames (clickhouse,
            kafka, etc)
    check:kafka-clickhouse:
        bin_script: check_kafka_clickhouse_up
        description: Wait for both Kafka and ClickHouse services to be ready
        services:
            - kafka
            - clickhouse
    check:postgres:
        bin_script: check_postgres_up
        description: Poll PostgreSQL connection until database is available
        services:
            - postgresql
    check:temporal:
        bin_script: check_temporal_up
        description: Wait for Temporal service port with 180s timeout
        services:
            - temporal
    check:video-deps:
        bin_script: check_video_deps
        description: Install and verify Playwright browsers and FFmpeg dependencies
start:
    start:
        bin_script: start
        description: Main entry point that launches all dev services via mprocs orchestrator
        services:
            - docker
            - postgresql
            - redis
            - kafka
            - clickhouse
            - temporal
    start:backend:
        bin_script: start-backend
        description: Run Django development server on port 8000 with auto-reload
        services:
            - postgresql
            - redis
    start:celery:
        bin_script: start-celery
        description: Start Celery worker or beat scheduler with auto-reload
        services:
            - redis
            - kafka
    start:frontend:
        bin_script: start-frontend
        description: Install dependencies and start frontend with Vite dev server
        services:
            - docker
    start:frontend-vite:
        bin_script: start-frontend-vite
        description: Start Vite dev server for frontend (runs pnpm start-vite)
    start:worker:
        bin_script: start-worker
        description: Launch all background workers (Celery worker, beat scheduler, plugin-server)
        services:
            - kafka
            - temporal
            - redis
    start:rust-service:
        bin_script: start-rust-service
        description: Build and run live Rust microservice with auto-restart on crash
deploy:
    deploy:hobby:
        bin_script: deploy-hobby
        description: Interactive installer for single-instance PostHog deployment on remote
            server
    deploy:upgrade-hobby:
        bin_script: upgrade-hobby
        description: Upgrade existing hobby deployment with data loss warnings and volume
            checks
build:
    build:frontend:
        description: Build frontend packages and run TypeScript compilation
    build:schema-python:
        bin_script: build-schema-python.sh
        description: Generate Pydantic schema.py from schema.json with datamodel-codegen
    build:schema-latest-versions:
        bin_script: build-schema-latest-versions.py
        description: Extract latest schema versions and generate frontend JSON config
    build:taxonomy-json:
        bin_script: build-taxonomy-json.py
        description: Generate core filter definitions taxonomy JSON for frontend
docker:
    docker:services:up:
        description: Start Docker infrastructure services (Postgres, ClickHouse, Redis,
            Kafka)
    docker:services:down:
        description: Stop Docker infrastructure services
    docker:
        bin_script: docker
        description: Run all services (migrate, backend, worker) via Docker orchestration
    docker:dev:
        bin_script: docker-dev
        description: Migrate, run Django dev server on port 8000, and start frontend in
            Docker
    docker:dev-web:
        bin_script: docker-dev-web
        description: Run Django dev server on port 8000 and start frontend in Docker
    docker:backend:
        bin_script: docker-backend
        description: Run Django development server on port 8000 with migrations
    docker:frontend:
        bin_script: docker-frontend
        description: Build and run frontend in Docker with Webpack hot reload
    docker:migrate:
        bin_script: docker-migrate
        description: Run database migrations in Docker
    docker:server:
        bin_script: docker-server
        description: Run gunicorn application server with Prometheus metrics support
    docker:server-unit:
        bin_script: docker-server-unit
        description: Run NGINX Unit application server with configurable workers
    docker:worker:
        bin_script: docker-worker
        description: Start plugin-server and Celery worker/beat in parallel with restart
            loop
    docker:worker-beat:
        bin_script: docker-worker-beat
        description: Run Celery beat scheduler with RedBeat backend
    docker:worker-celery:
        bin_script: docker-worker-celery
        description: Start Celery worker with optional scheduler, gossip, heartbeat, mingle
    docker:ai-evals:
        bin_script: docker-ai-evals
        description: Set up Docker services and run evaluation scripts with cleanup
migration:
    db:migrate:
        description: Apply database migrations (Django and ClickHouse)
    migration:migrate:
        bin_script: migrate
        description: Run all database migrations (ClickHouse, Postgres, async) in parallel
    migration:migrate-check:
        bin_script: migrate-check
        description: Verify all migrations are ready without applying them
    migration:migrate-kafka:
        bin_script: migrate_kafka_data.py
        description: Migrate data between Kafka clusters/topics with consumer group tracking
testing:
    test:python:
        description: Run Python test suite
    test:js:
        description: Run JavaScript test suite
    testing:tests:
        bin_script: tests
        description: Interactive test runner with watch mode and changed file detection
    testing:e2e-test-runner:
        bin_script: e2e-test-runner
        description: Set up test databases and run Playwright E2E tests
code_quality:
    lint:check:
        description: Run code quality checks for Python and JavaScript
    lint:fix:
        description: Fix code quality issues automatically
    fmt:code:
        description: Format Python and JavaScript code
tools:
    tool:temporal-django-worker:
        bin_script: temporal-django-worker
        description: Start Temporal worker with graceful shutdown handling
    tool:plugin-server:
        bin_script: plugin-server
        description: Start plugin-server with optional restart loop
    tool:download-mmdb:
        bin_script: download-mmdb
        description: Download and cache GeoLite2 MaxMind database with retry logic
    tool:hog:
        bin_script: hog
        description: Run HogQL interpreter (TypeScript/Python) or compiled bytecode
    tool:hoge:
        bin_script: hoge
        description: Compile HogQL source to bytecode or JavaScript
    tool:ruff:
        bin_script: ruff.sh
        description: Python linter and formatter with virtualenv auto-activation
    tool:ty:
        bin_script: ty.py
        description: Type checker with mypy-baseline filtering and sync
    tool:turbo:
        bin_script: turbo
        description: Turborepo wrapper with automatic dependency installation
    tool:unit-metrics:
        bin_script: unit_metrics.py
        description: WSGI app that aggregates Prometheus metrics from NGINX Unit status
            endpoint
    test:new:script:
        bin_script: test-new-script
        description: 'TODO: add description for test-new-script'
    new:tool:
        bin_script: new-tool
        description: 'TODO: add description for new-tool'
utilities:
    git:worktree:
        description: Manage git worktrees for isolated development
    products:list:
        description: List available product packages across frontend and backend
    utilitie:posthog-worktree:
        bin_script: posthog-worktree
        description: Manage isolated git worktrees for PostHog development
    utilitie:phw:
        bin_script: phw
        description: Shell function wrapper for worktree management with auto-cd
    utilitie:update-bots-list:
        bin_script: update-bots-list
        description: Download bot IP list from GoodBots GitHub and save locally
    utilitie:dump-hogvmrs-stl:
        bin_script: dump_hogvmrs_stl
        description: Generate Rust HogVM standard library definitions for error tracking
    utilitie:hobby-ci:
        bin_script: hobby-ci.py
        description: DigitalOcean CI automation for Hobby deployment testing
compositions:
    infra:ready:
        steps:
            - check:clickhouse
            - check:postgres
            - check:temporal
        description: Verify all core infrastructure services are ready
    quality:check:
        steps:
            - lint:check
            - build:frontend
        description: Quick quality checks without tests (lint + build)
environment:
    flox:activate:
        cmd: flox activate
        description: Enter Flox development environment shell.
