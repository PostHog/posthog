#
# This is a Flox environment manifest.
# Visit flox.dev/docs/concepts/manifest/
# or see flox-edit(1), manifest.toml(5) for more information.
#
# Flox manifest version managed by Flox CLI
version = 1

# List packages you wish to install in your environment inside
# the `[install]` section.
[install]
python3 = { pkg-path = "python3", version = "3.11", pkg-group = "python" }
uv = { pkg-path = "uv", pkg-group = "python" }
xmlsec = { pkg-path = "xmlsec", pkg-group = "python", version = "1.2.34" }
libtool = { pkg-path = "libtool", pkg-group = "python" }
nodejs = { pkg-path = "nodejs_18", pkg-group = "nodejs" }
corepack = { pkg-path = "corepack", pkg-group = "nodejs" }
brotli = { pkg-path = "brotli", pkg-group = "nodejs" }
mprocs = { pkg-path = "mprocs", pkg-group = "mprocs" }

# Rust toolchain (based on https://flox.dev/blog/a-real-world-rust-project-with-flox/)
cargo.pkg-path = "cargo"
cargo.pkg-group = "rust-toolchain"
rustc.pkg-path = "rustc"
rustc.pkg-group = "rust-toolchain"
clippy.pkg-path = "clippy"
clippy.pkg-group = "rust-toolchain"
rustfmt.pkg-path = "rustfmt"
rustfmt.pkg-group = "rust-toolchain"
rust-lib-src.pkg-path = "rustPlatform.rustLibSrc"
rust-lib-src.pkg-group = "rust-toolchain"
libiconv.pkg-path = "libiconv"
libiconv.systems = ["aarch64-darwin"]

# Set environment variables in the `[vars]` section. These variables may not
# reference one another, and are added to the environment without first
# expanding them. They are available for use in the `[profile]` and `[hook]`
# scripts.
[vars]
DEBUG = "1"
POSTHOG_SKIP_MIGRATION_CHECKS = "1"

# The `hook.on-activate` script is run by the *bash* shell immediately upon
# activating an environment, and will not be invoked if Flox detects that the
# environment has previously been activated. Variables set by the script will
# be inherited by `[profile]` scripts defined below. Note that any stdout
# generated by the script will be redirected to stderr.
[hook]
on-activate = '''
  # Setup a Python virtual environment

  export PYTHON_DIR="$FLOX_ENV_CACHE/python"
  if [ ! -d "$PYTHON_DIR" ]; then
    echo "Creating python virtual environment in $PYTHON_DIR"
    python -m venv "$PYTHON_DIR"
  fi

  # Quietly activate venv and install packages in a subshell so
  # that the venv can be freshly activated in the profile section.
  (
    source "$PYTHON_DIR/bin/activate"
    # install the dependencies for this project based on pyproject.toml
    # <https://pip.pypa.io/en/stable/cli/pip_install/>
    uv pip install -r requirements.txt -r requirements-dev.txt
  )
'''

# Scripts defined in the `[profile]` section are *sourced* by *your shell* and
# inherit environment variables set in the `[vars]` section and by `[hook]` scripts.
# The `profile.common` script is sourced by all shells and special care should be
# taken to ensure compatibility with all shells, after which exactly one of
# `profile.{bash,fish,tcsh,zsh}` is sourced by the corresponding shell.
[profile]
bash = '''
  source "$PYTHON_DIR/bin/activate"

  echo "READY TO GO!";
  echo "1. Start the stack: 'bin/start-mprocs' (migrations will run automatically)";
  echo "2. Create a user with demo data: './manage.py generate_demo_data'";
  echo "";
  echo "Hint: set the Python interpreter path in your code edtior to '.flox/cache/python/bin/python'";
  echo "";
'''
fish = '''
  source "$PYTHON_DIR/bin/activate.fish"

  echo "READY TO GO!";
  echo "1. Start the stack: 'bin/start-mprocs' (migrations will run automatically)";
  echo "2. Create a user with demo data: './manage.py generate_demo_data'";
  echo "";
  echo "Hint: set the Python interpreter path in your code edtior to '.flox/cache/python/bin/python'";
  echo "";
'''
tcsh = '''
  source "$PYTHON_DIR/bin/activate.csh"

  echo "READY TO GO!";
  echo "1. Start the stack: 'bin/start-mprocs' (migrations will run automatically)";
  echo "2. Create a user with demo data: './manage.py generate_demo_data'";
  echo "";
  echo "Hint: set the Python interpreter path in your code edtior to '.flox/cache/python/bin/python'";
  echo "";
'''
zsh = '''
  source "$PYTHON_DIR/bin/activate"

  echo "READY TO GO!";
  echo "1. Start the stack: 'bin/start-mprocs' (migrations will run automatically)";
  echo "2. Create a user with demo data: './manage.py generate_demo_data'";
  echo "";
  echo "Hint: set the Python interpreter path in your code edtior to '.flox/cache/python/bin/python'";
  echo "";
'''

# The `[services]` section of the manifest allows you to define services.
# Services defined here use the packages provided by the `[install]` section
# and any variables you've defined in the `[vars]` section or `hook.on-activate` script.
[services]
# db.command = "postgres -D $FLOX_ENV_CACHE/postgres"

# Additional options can be set in the `[options]` section. Refer to
# manifest.toml(5) for a list of available options.
[options]
systems = ["aarch64-darwin", "aarch64-linux", "x86_64-darwin", "x86_64-linux"]
