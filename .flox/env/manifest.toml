#
# This is a Flox environment manifest.
# Visit flox.dev/docs/concepts/manifest/
# or see flox-edit(1), manifest.toml(5) for more information.
#
# Flox manifest version managed by Flox CLI
version = 1

# List packages you wish to install in your environment inside
# the `[install]` section.
[install]
# Python
python3 = { pkg-path = "python3", version = "3.11.9", pkg-group = "python" } # Same as in Dockerfile
uv = { pkg-path = "uv", pkg-group = "python" }
libtool = { pkg-path = "libtool", pkg-group = "python" }
# Node
nodejs = { pkg-path = "nodejs_18", pkg-group = "nodejs", version = "nodejs-18.19.1" } # Same as in Dockerfile
corepack = { pkg-path = "corepack_18", pkg-group = "nodejs" }
brotli = { pkg-path = "brotli", pkg-group = "nodejs" }
# Rust toolchain (based on https://flox.dev/docs/cookbook/languages/rust/)
cargo.pkg-path = "cargo"
cargo.pkg-group = "rust-toolchain"
cargo.version = "1.82.0"
rustc.pkg-path = "rustc"
rustc.pkg-group = "rust-toolchain"
clippy.pkg-path = "clippy"
clippy.pkg-group = "rust-toolchain"
rustfmt.pkg-path = "rustfmt"
rustfmt.pkg-group = "rust-toolchain"
rust-lib-src.pkg-path = "rustPlatform.rustLibSrc"
rust-lib-src.pkg-group = "rust-toolchain"
libiconv.pkg-path = "libiconv"
libiconv.systems = ["aarch64-darwin"]
libiconv.pkg-group = "rust-toolchain"

# rust-analyzer should be isolated in its own group, details in cookbook example
rust-analyzer.pkg-path = "rust-analyzer"
rust-analyzer.pkg-group = "rust-analyzer"

# Go
go = { pkg-path = "go", version = "1.22", pkg-group = "go" }
# Top level
mprocs = { pkg-path = "mprocs" }
nodemon = { pkg-path = "nodemon" }
xmlsec = { pkg-path = "xmlsec", version = "1.3.6" }

# Set environment variables in the `[vars]` section. These variables may not
# reference one another, and are added to the environment without first
# expanding them. They are available for use in the `[profile]` and `[hook]`
# scripts.
[vars]
DEBUG = "1"
POSTHOG_SKIP_MIGRATION_CHECKS = "1"
DIRENV_LOG_FORMAT = "" # Disable direnv activation logging (in case direnv is present)

# The `hook.on-activate` script is run by the *bash* shell immediately upon
# activating an environment, and will not be invoked if Flox detects that the
# environment has previously been activated. Variables set by the script will
# be inherited by `[profile]` scripts defined below. Note that any stdout
# generated by the script will be redirected to stderr.
[hook]
on-activate = '''
# Guide through installing and configuring direnv if it's not present (optionally)
if [[ -t 0 ]] && [ ! -d "$DIRENV_DIR" ] && [ ! -f "$FLOX_ENV_CACHE/.hush-direnv" ]; then
  read -p "
👉 Use direnv (https://direnv.net) for automatic activation of this environment by your shell.
❓ Would you like direnv to be set up now? (y/n, default: y)" -n 1 -r
  if [[ $REPLY =~ ^[Yy]$ || -z $REPLY ]]; then
    $FLOX_ENV_CACHE/../env/direnv-setup.sh
  else
    echo "⏭️ Skipping direnv setup. This message will not be shown again, but if you change your mind, just run '.flox/bin/direnv-setup.sh'"
    touch $FLOX_ENV_CACHE/.hush-direnv
  fi
  echo
fi

# Set up a Python virtual environment
export PYTHON_DIR="$FLOX_ENV_CACHE/venv"
if [ ! -d "$PYTHON_DIR" ]; then
  uv venv "$PYTHON_DIR" --allow-existing
fi

echo -e "Python virtual environment path: \033[33m.flox/cache/venv\033[0m"
echo -e "Python interpreter path, for your code editor: \033[33m.flox/cache/venv/bin/python\033[0m"

source "$PYTHON_DIR/bin/activate"

# Install Python dependencies (this is practically instant thanks to uv)
uv pip install -q -r requirements.txt -r requirements-dev.txt

# Install top-level Node dependencies (only if not present all yet, because this takes almost a second even with pnpm)
# This also sets up pre-commit hooks via Husky
if [ ! -d "node_modules" ]; then
  echo "Installing Node dependencies..."
  pnpm install -s
  echo "Node dependencies installed"
fi

if [[ -t 0 ]]; then # The block below only runs when in an interactive shell
  # Add required entries to /etc/hosts if not present
  if ! grep -q "127.0.0.1 kafka clickhouse clickhouse-coordinator" /etc/hosts; then
    echo
    echo "🚨 Amending /etc/hosts to map hostnames 'kafka', 'clickhouse' and 'clickhouse-coordinator' to 127.0.0.1..."
    echo "127.0.0.1 kafka clickhouse clickhouse-coordinator" | sudo tee -a /etc/hosts 1> /dev/null
    echo "✅ /etc/hosts amended"
  fi

  quotes=(
    # https://github.com/PostHog/posthog.com/blob/cd0ad2e5a96c3ff7d2662ec696a5560022ff318d/src/components/Careers/FounderNote/Audio
    "At PostHog, we don't follow trends, we set them, like records."
    "Be bold, be fearless, and let's lead the way in tech innovation with beast mode."
    "The future belongs to the bold and the strong."
    "Break the mold, push the limits, and let's redefine what's possible with beast mode on."
    "Our best feature? Still in the pipeline."
    "Mindset matters. Stay positive, stay resilient, and keep grinding."
    "Challenges are just opportunities in disguise."
    "Ownership isn't a task, it's a mindset."
  )
  
  echo -e "\nInspirational James Hawkins quote he never said:\n\"${quotes[$RANDOM % ${#quotes[@]}]}\""

  # Print intro message
  echo -e "
\033[3mRun the following commands in the given order to get the stack up and running:\033[0m
1. Spin up containers - \033[33mdocker compose -f docker-compose.dev.yml up -d\033[0m
2. Run all migrations - \033[31mbin/migrate\033[0m
3. Start the stack - \033[32mbin/start\033[0m
4. (optional) Create a user with demo data - \033[34m./manage.py generate_demo_data\033[0m
"
fi
'''

# Scripts defined in the `[profile]` section are *sourced* by *your shell* and
# inherit environment variables set in the `[vars]` section and by `[hook]` scripts.
# The `profile.common` script is sourced by all shells and special care should be
# taken to ensure compatibility with all shells, after which exactly one of
# `profile.{bash,fish,tcsh,zsh}` is sourced by the corresponding shell.
[profile]
bash = '''
  source "$PYTHON_DIR/bin/activate"
  if [ -f "$HOME/.bash_profile" ]; then
    source "$HOME/.bash_profile"
    # ensure even with your shell prefs in place we know this is a Flox.dev env
    export PS1="\033[47m(flox)\033[0m $PS1"
  fi
'''
zsh = '''
  source "$PYTHON_DIR/bin/activate"
  if [[ -f "$HOME/.zshrc" ]]; then
    source "$HOME/.zshrc"
    # ensure even with your shell prefs in place we know this is a Flox.dev env
    export PS1="%K{white}%F{black}(flox)%k%f $PS1"
  fi
'''
fish = '''
  source "$PYTHON_DIR/bin/activate.fish"
'''
tcsh = '''
  source "$PYTHON_DIR/bin/activate.csh"
'''

# The `[services]` section of the manifest allows you to define services.
# Services defined here use the packages provided by the `[install]` section
# and any variables you've defined in the `[vars]` section or `hook.on-activate` script.
[services]
# db.command = "postgres -D $FLOX_ENV_CACHE/postgres"

# Additional options can be set in the `[options]` section. Refer to
# manifest.toml(5) for a list of available options.
[options]
systems = ["aarch64-darwin", "aarch64-linux", "x86_64-darwin", "x86_64-linux"]
