if command -v flox >/dev/null 2>&1; then # Only activate flox if installed
    # Capture the directory user intended to work in before any Flox operations
    ORIGINAL_PWD="${PWD}"
    
    # Use Git to detect if we're in a different project/worktree that should have its own environment
    CURRENT_WORKTREE_ROOT=$(git rev-parse --show-toplevel 2>/dev/null || echo "")
    ENV_WORKTREE_ROOT=""
    if [[ -n "${FLOX_ENV_PROJECT}" ]]; then
        ENV_WORKTREE_ROOT=$(cd "${FLOX_ENV_PROJECT}" && git rev-parse --show-toplevel 2>/dev/null || echo "")
    fi
    
    if [ -z "${FLOX_ENV_PROJECT}" ]; then
        # No environment active, safe to activate
        unset VIRTUAL_ENV 2>/dev/null || :
        unset PYTHONPATH 2>/dev/null || :
        unset CONDA_DEFAULT_ENV 2>/dev/null || :
        flox activate
    elif [[ -n "$CURRENT_WORKTREE_ROOT" && -n "$ENV_WORKTREE_ROOT" && "$CURRENT_WORKTREE_ROOT" != "$ENV_WORKTREE_ROOT" ]] || \
         [[ -z "$CURRENT_WORKTREE_ROOT" && "${PWD}" != "${FLOX_ENV_PROJECT}"* ]]; then
        # Different project environment active, check for nesting
        echo "⚠️  About to activate Flox environment in worktree while already in environment for:"
        echo "   ${FLOX_ENV_PROJECT}"
        echo ""
        printf "Continue with nested activation? (y/N): "
        read -r REPLY
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            echo "Skipping Flox activation. To switch environments:"
            echo "  1. Exit current environment: exit"
            echo "  2. Return to your intended directory: cd '${ORIGINAL_PWD}'"
            echo "     (Environment will reactivate automatically with direnv)"
            return 0
        fi
        # Clean up conflicting environment variables before activation
        unset VIRTUAL_ENV 2>/dev/null || :
        unset PYTHONPATH 2>/dev/null || :
        unset CONDA_DEFAULT_ENV 2>/dev/null || :
        flox activate
    fi
fi
