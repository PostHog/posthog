// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// KafkaConsumer is an autogenerated mock type for the KafkaConsumer type
type KafkaConsumer struct {
	mock.Mock
}

type KafkaConsumer_Expecter struct {
	mock *mock.Mock
}

func (_m *KafkaConsumer) EXPECT() *KafkaConsumer_Expecter {
	return &KafkaConsumer_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields:
func (_m *KafkaConsumer) Close() {
	_m.Called()
}

// KafkaConsumer_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type KafkaConsumer_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *KafkaConsumer_Expecter) Close() *KafkaConsumer_Close_Call {
	return &KafkaConsumer_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *KafkaConsumer_Close_Call) Run(run func()) *KafkaConsumer_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *KafkaConsumer_Close_Call) Return() *KafkaConsumer_Close_Call {
	_c.Call.Return()
	return _c
}

func (_c *KafkaConsumer_Close_Call) RunAndReturn(run func()) *KafkaConsumer_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Consume provides a mock function with given fields:
func (_m *KafkaConsumer) Consume() {
	_m.Called()
}

// KafkaConsumer_Consume_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Consume'
type KafkaConsumer_Consume_Call struct {
	*mock.Call
}

// Consume is a helper method to define mock.On call
func (_e *KafkaConsumer_Expecter) Consume() *KafkaConsumer_Consume_Call {
	return &KafkaConsumer_Consume_Call{Call: _e.mock.On("Consume")}
}

func (_c *KafkaConsumer_Consume_Call) Run(run func()) *KafkaConsumer_Consume_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *KafkaConsumer_Consume_Call) Return() *KafkaConsumer_Consume_Call {
	_c.Call.Return()
	return _c
}

func (_c *KafkaConsumer_Consume_Call) RunAndReturn(run func()) *KafkaConsumer_Consume_Call {
	_c.Call.Return(run)
	return _c
}

// NewKafkaConsumer creates a new instance of KafkaConsumer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewKafkaConsumer(t interface {
	mock.TestingT
	Cleanup(func())
}) *KafkaConsumer {
	mock := &KafkaConsumer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
