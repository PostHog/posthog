# name: TestCohortQuery.test_basic_query
  '
  
  SELECT person.person_id AS id
  FROM
    (SELECT pdi.person_id AS person_id,
            countIf(timestamp > now() - INTERVAL 1 day
                    AND timestamp < now()
                    AND event = '$pageview') > 0 AS performed_event_condition_None_level_level_0_level_0_level_0_0,
            countIf(timestamp > now() - INTERVAL 2 week
                    AND timestamp < now()
                    AND event = '$pageview') > 0 AS performed_event_condition_None_level_level_0_level_0_level_1_0,
            minIf(timestamp, ((replaceRegexpAll(JSONExtractRaw(properties, '$current_url'), '^"|"$', '') = 'https://posthog.com/feedback/123'
                               AND event = '$autocapture'))) >= now() - INTERVAL 2 week
     AND minIf(timestamp, ((replaceRegexpAll(JSONExtractRaw(properties, '$current_url'), '^"|"$', '') = 'https://posthog.com/feedback/123'
                            AND event = '$autocapture'))) < now() as first_time_condition_None_level_level_0_level_1_level_0_0
     FROM events e
     INNER JOIN
       (SELECT distinct_id,
               argMax(person_id, version) as person_id
        FROM person_distinct_id2
        WHERE team_id = 2
        GROUP BY distinct_id
        HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
     WHERE team_id = 2
       AND event IN ['$pageview', '$pageview', '$autocapture']
     GROUP BY person_id) behavior_query
  INNER JOIN
    (SELECT *,
            id AS person_id
     FROM
       (SELECT id
        FROM person
        WHERE team_id = 2
        GROUP BY id
        HAVING max(is_deleted) = 0
        AND (((has(['test@posthog.com'], replaceRegexpAll(JSONExtractRaw(argMax(person.properties, _timestamp), 'email'), '^"|"$', ''))))))) person ON person.person_id = behavior_query.person_id
  WHERE 1 = 1
    AND ((((performed_event_condition_None_level_level_0_level_0_level_0_0)
           OR (performed_event_condition_None_level_level_0_level_0_level_1_0))
          AND ((first_time_condition_None_level_level_0_level_1_level_0_0)))) SETTINGS allow_experimental_window_functions = 1
  '
---
# name: TestCohortQuery.test_cohort_filter_with_another_cohort_with_event_sequence
  '
  
  SELECT person.person_id AS id
  FROM
    (SELECT person_id,
            max(if(event = '$pageview'
                   AND event_0_latest_0 < event_0_latest_1
                   AND event_0_latest_1 <= event_0_latest_0 + INTERVAL 3 day, 2, 1)) = 2 AS steps_0,
            max(if(event = '$new_view'
                   AND event_1_latest_0 < event_1_latest_1
                   AND event_1_latest_1 <= event_1_latest_0 + INTERVAL 8 day, 2, 1)) = 2 AS steps_1
     FROM
       (SELECT person_id,
               event,
               properties,
               distinct_id,
               timestamp,
               event_0_latest_0,
               min(event_0_latest_1) over (PARTITION by person_id
                                           ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 1 PRECEDING) event_0_latest_1,
                                          event_1_latest_0,
                                          min(event_1_latest_1) over (PARTITION by person_id
                                                                      ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 1 PRECEDING) event_1_latest_1
        FROM
          (SELECT pdi.person_id AS person_id,
                  event,
                  properties,
                  distinct_id,
                  timestamp,
                  if(event = '$pageview'
                     AND timestamp > now() - INTERVAL 8 day, 1, 0) AS event_0_step_0,
                  if(event_0_step_0 = 1, timestamp, null) AS event_0_latest_0,
                  if(event = '$pageview'
                     AND timestamp > now() - INTERVAL 8 day, 1, 0) AS event_0_step_1,
                  if(event_0_step_1 = 1, timestamp, null) AS event_0_latest_1,
                  if(event = '$new_view'
                     AND timestamp > now() - INTERVAL 8 day, 1, 0) AS event_1_step_0,
                  if(event_1_step_0 = 1, timestamp, null) AS event_1_latest_0,
                  if(event = '$new_view'
                     AND timestamp > now() - INTERVAL 8 day, 1, 0) AS event_1_step_1,
                  if(event_1_step_1 = 1, timestamp, null) AS event_1_latest_1
           FROM events AS e
           INNER JOIN
             (SELECT distinct_id,
                     argMax(person_id, version) as person_id
              FROM person_distinct_id2
              WHERE team_id = 2
              GROUP BY distinct_id
              HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
           WHERE team_id = 2
             AND event IN ['$pageview', '$pageview', '$new_view', '$new_view']
             AND timestamp <= now()
             AND timestamp >= now() - INTERVAL 8 day ))
     GROUP BY person_id) funnel_query
  INNER JOIN
    (SELECT *,
            id AS person_id
     FROM
       (SELECT id
        FROM person
        WHERE team_id = 2
        GROUP BY id
        HAVING max(is_deleted) = 0
        AND (((has(['test'], replaceRegexpAll(JSONExtractRaw(argMax(person.properties, _timestamp), 'name'), '^"|"$', ''))))))) person ON person.person_id = funnel_query.person_id
  WHERE 1 = 1
    AND ((((steps_0))
          AND (steps_1))) SETTINGS allow_experimental_window_functions = 1
  '
---
# name: TestCohortQuery.test_cohort_filter_with_extra
  '
  
  SELECT person.person_id AS id
  FROM
    (SELECT pdi.person_id AS person_id,
            countIf(timestamp > now() - INTERVAL 1 week
                    AND timestamp < now()
                    AND event = '$pageview') > 0 AS performed_event_condition_None_level_level_0_level_0_0
     FROM events e
     INNER JOIN
       (SELECT distinct_id,
               argMax(person_id, version) as person_id
        FROM person_distinct_id2
        WHERE team_id = 2
        GROUP BY distinct_id
        HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
     WHERE team_id = 2
       AND event IN ['$pageview']
       AND timestamp <= now()
       AND timestamp >= now() - INTERVAL 1 week
     GROUP BY person_id) behavior_query
  INNER JOIN
    (SELECT *,
            id AS person_id
     FROM
       (SELECT id
        FROM person
        WHERE team_id = 2
        GROUP BY id
        HAVING max(is_deleted) = 0
        AND ((((has(['test'], replaceRegexpAll(JSONExtractRaw(argMax(person.properties, _timestamp), 'name'), '^"|"$', '')))))))) person ON person.person_id = behavior_query.person_id
  WHERE 1 = 1
    AND (((performed_event_condition_None_level_level_0_level_0_0))) SETTINGS allow_experimental_window_functions = 1
  '
---
# name: TestCohortQuery.test_cohort_filter_with_extra.1
  '
  
  SELECT if(behavior_query.person_id = '00000000-0000-0000-0000-000000000000', person.person_id, behavior_query.person_id) AS id
  FROM
    (SELECT pdi.person_id AS person_id,
            countIf(timestamp > now() - INTERVAL 1 week
                    AND timestamp < now()
                    AND event = '$pageview') > 0 AS performed_event_condition_None_level_level_0_level_1_level_0_0
     FROM events e
     INNER JOIN
       (SELECT distinct_id,
               argMax(person_id, version) as person_id
        FROM person_distinct_id2
        WHERE team_id = 2
        GROUP BY distinct_id
        HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
     WHERE team_id = 2
       AND event IN ['$pageview']
       AND timestamp <= now()
       AND timestamp >= now() - INTERVAL 1 week
     GROUP BY person_id) behavior_query
  FULL OUTER JOIN
    (SELECT *,
            id AS person_id
     FROM
       (SELECT id,
               argMax(properties, version) as person_props
        FROM person
        WHERE team_id = 2
        GROUP BY id
        HAVING max(is_deleted) = 0)) person ON person.person_id = behavior_query.person_id
  WHERE 1 = 1
    AND ((((has(['test'], replaceRegexpAll(JSONExtractRaw(person_props, 'name'), '^"|"$', ''))))
          OR ((performed_event_condition_None_level_level_0_level_1_level_0_0)))) SETTINGS allow_experimental_window_functions = 1
  '
---
# name: TestCohortQuery.test_performed_event_sequence
  '
  
  SELECT funnel_query.person_id AS id
  FROM
    (SELECT person_id,
            max(if(event = '$pageview'
                   AND event_0_latest_0 < event_0_latest_1
                   AND event_0_latest_1 <= event_0_latest_0 + INTERVAL 3 day, 2, 1)) = 2 AS steps_0
     FROM
       (SELECT person_id,
               event,
               properties,
               distinct_id,
               timestamp,
               event_0_latest_0,
               min(event_0_latest_1) over (PARTITION by person_id
                                           ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 1 PRECEDING) event_0_latest_1
        FROM
          (SELECT pdi.person_id AS person_id,
                  event,
                  properties,
                  distinct_id,
                  timestamp,
                  if(event = '$pageview'
                     AND timestamp > now() - INTERVAL 7 day, 1, 0) AS event_0_step_0,
                  if(event_0_step_0 = 1, timestamp, null) AS event_0_latest_0,
                  if(event = '$pageview'
                     AND timestamp > now() - INTERVAL 7 day, 1, 0) AS event_0_step_1,
                  if(event_0_step_1 = 1, timestamp, null) AS event_0_latest_1
           FROM events AS e
           INNER JOIN
             (SELECT distinct_id,
                     argMax(person_id, version) as person_id
              FROM person_distinct_id2
              WHERE team_id = 2
              GROUP BY distinct_id
              HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
           WHERE team_id = 2
             AND event IN ['$pageview', '$pageview']
             AND timestamp <= now()
             AND timestamp >= now() - INTERVAL 7 day ))
     GROUP BY person_id) funnel_query
  WHERE 1 = 1
    AND (((steps_0))) SETTINGS allow_experimental_window_functions = 1
  '
---
# name: TestCohortQuery.test_performed_event_sequence_and_clause_with_additional_event
  '
  
  SELECT funnel_query.person_id AS id
  FROM
    (SELECT person_id,
            max(if(event = '$pageview'
                   AND event_0_latest_0 < event_0_latest_1
                   AND event_0_latest_1 <= event_0_latest_0 + INTERVAL 3 day, 2, 1)) = 2 AS steps_0,
            countIf(timestamp > now() - INTERVAL 1 week
                    AND timestamp < now()
                    AND event = '$new_view') >= 1 AS performed_event_multiple_condition_None_level_level_0_level_1_0
     FROM
       (SELECT person_id,
               event,
               properties,
               distinct_id,
               timestamp,
               event_0_latest_0,
               min(event_0_latest_1) over (PARTITION by person_id
                                           ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 1 PRECEDING) event_0_latest_1
        FROM
          (SELECT pdi.person_id AS person_id,
                  event,
                  properties,
                  distinct_id,
                  timestamp,
                  if(event = '$pageview'
                     AND timestamp > now() - INTERVAL 7 day, 1, 0) AS event_0_step_0,
                  if(event_0_step_0 = 1, timestamp, null) AS event_0_latest_0,
                  if(event = '$pageview'
                     AND timestamp > now() - INTERVAL 7 day, 1, 0) AS event_0_step_1,
                  if(event_0_step_1 = 1, timestamp, null) AS event_0_latest_1
           FROM events AS e
           INNER JOIN
             (SELECT distinct_id,
                     argMax(person_id, version) as person_id
              FROM person_distinct_id2
              WHERE team_id = 2
              GROUP BY distinct_id
              HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
           WHERE team_id = 2
             AND event IN ['$new_view', '$pageview', '$pageview']
             AND timestamp <= now()
             AND timestamp >= now() - INTERVAL 1 week ))
     GROUP BY person_id) funnel_query
  WHERE 1 = 1
    AND (((steps_0)
          OR (performed_event_multiple_condition_None_level_level_0_level_1_0))) SETTINGS allow_experimental_window_functions = 1
  '
---
# name: TestCohortQuery.test_performed_event_sequence_with_person_properties
  '
  
  SELECT person.person_id AS id
  FROM
    (SELECT person_id,
            max(if(event = '$pageview'
                   AND event_0_latest_0 < event_0_latest_1
                   AND event_0_latest_1 <= event_0_latest_0 + INTERVAL 3 day, 2, 1)) = 2 AS steps_0,
            countIf(timestamp > now() - INTERVAL 1 week
                    AND timestamp < now()
                    AND event = '$pageview') >= 1 AS performed_event_multiple_condition_None_level_level_0_level_1_0
     FROM
       (SELECT person_id,
               event,
               properties,
               distinct_id,
               timestamp,
               event_0_latest_0,
               min(event_0_latest_1) over (PARTITION by person_id
                                           ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 1 PRECEDING) event_0_latest_1
        FROM
          (SELECT pdi.person_id AS person_id,
                  event,
                  properties,
                  distinct_id,
                  timestamp,
                  if(event = '$pageview'
                     AND timestamp > now() - INTERVAL 7 day, 1, 0) AS event_0_step_0,
                  if(event_0_step_0 = 1, timestamp, null) AS event_0_latest_0,
                  if(event = '$pageview'
                     AND timestamp > now() - INTERVAL 7 day, 1, 0) AS event_0_step_1,
                  if(event_0_step_1 = 1, timestamp, null) AS event_0_latest_1
           FROM events AS e
           INNER JOIN
             (SELECT distinct_id,
                     argMax(person_id, version) as person_id
              FROM person_distinct_id2
              WHERE team_id = 2
              GROUP BY distinct_id
              HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
           WHERE team_id = 2
             AND event IN ['$pageview', '$pageview', '$pageview']
             AND timestamp <= now()
             AND timestamp >= now() - INTERVAL 1 week ))
     GROUP BY person_id) funnel_query
  INNER JOIN
    (SELECT *,
            id AS person_id
     FROM
       (SELECT id
        FROM person
        WHERE team_id = 2
        GROUP BY id
        HAVING max(is_deleted) = 0
        AND ((has(['test@posthog.com'], replaceRegexpAll(JSONExtractRaw(argMax(person.properties, _timestamp), 'email'), '^"|"$', '')))))) person ON person.person_id = funnel_query.person_id
  WHERE 1 = 1
    AND (((steps_0)
          AND (performed_event_multiple_condition_None_level_level_0_level_1_0))) SETTINGS allow_experimental_window_functions = 1
  '
---
# name: TestCohortQuery.test_person
  '
  
  SELECT if(behavior_query.person_id = '00000000-0000-0000-0000-000000000000', person.person_id, behavior_query.person_id) AS id
  FROM
    (SELECT pdi.person_id AS person_id,
            countIf(timestamp > now() - INTERVAL 1 week
                    AND timestamp < now()
                    AND event = '$pageview') > 0 AS performed_event_condition_None_level_level_0_level_0_0
     FROM events e
     INNER JOIN
       (SELECT distinct_id,
               argMax(person_id, version) as person_id
        FROM person_distinct_id2
        WHERE team_id = 2
        GROUP BY distinct_id
        HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
     WHERE team_id = 2
       AND event IN ['$pageview']
       AND timestamp <= now()
       AND timestamp >= now() - INTERVAL 1 week
     GROUP BY person_id) behavior_query
  FULL OUTER JOIN
    (SELECT *,
            id AS person_id
     FROM
       (SELECT id,
               argMax(properties, version) as person_props
        FROM person
        WHERE team_id = 2
        GROUP BY id
        HAVING max(is_deleted) = 0)) person ON person.person_id = behavior_query.person_id
  WHERE 1 = 1
    AND (((performed_event_condition_None_level_level_0_level_0_0)
          OR (has(['test@posthog.com'], replaceRegexpAll(JSONExtractRaw(person_props, '$sample_field'), '^"|"$', ''))))) SETTINGS allow_experimental_window_functions = 1
  '
---
# name: TestCohortQuery.test_person_materialized
  '
  
  SELECT if(behavior_query.person_id = '00000000-0000-0000-0000-000000000000', person.person_id, behavior_query.person_id) AS id
  FROM
    (SELECT pdi.person_id AS person_id,
            countIf(timestamp > now() - INTERVAL 1 week
                    AND timestamp < now()
                    AND event = '$pageview') > 0 AS performed_event_condition_None_level_level_0_level_0_0
     FROM events e
     INNER JOIN
       (SELECT distinct_id,
               argMax(person_id, version) as person_id
        FROM person_distinct_id2
        WHERE team_id = 2
        GROUP BY distinct_id
        HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
     WHERE team_id = 2
       AND event IN ['$pageview']
       AND timestamp <= now()
       AND timestamp >= now() - INTERVAL 1 week
     GROUP BY person_id) behavior_query
  FULL OUTER JOIN
    (SELECT *,
            id AS person_id
     FROM
       (SELECT id,
               argMax(pmat_$sample_field, version) as pmat_$sample_field
        FROM person
        WHERE team_id = 2
        GROUP BY id
        HAVING max(is_deleted) = 0)) person ON person.person_id = behavior_query.person_id
  WHERE 1 = 1
    AND (((performed_event_condition_None_level_level_0_level_0_0)
          OR (has(['test@posthog.com'], "pmat_$sample_field")))) SETTINGS allow_experimental_window_functions = 1
  '
---
# name: TestCohortQuery.test_person_properties_with_pushdowns
  '
  
  SELECT if(behavior_query.person_id = '00000000-0000-0000-0000-000000000000', person.person_id, behavior_query.person_id) AS id
  FROM
    (SELECT pdi.person_id AS person_id,
            countIf(timestamp > now() - INTERVAL 1 day
                    AND timestamp < now()
                    AND event = '$pageview') > 0 AS performed_event_condition_None_level_level_0_level_0_level_0_0,
            countIf(timestamp > now() - INTERVAL 2 week
                    AND timestamp < now()
                    AND event = '$pageview') > 0 AS performed_event_condition_None_level_level_0_level_0_level_1_0,
            minIf(timestamp, ((replaceRegexpAll(JSONExtractRaw(properties, '$current_url'), '^"|"$', '') = 'https://posthog.com/feedback/123'
                               AND event = '$autocapture'))) >= now() - INTERVAL 2 week
     AND minIf(timestamp, ((replaceRegexpAll(JSONExtractRaw(properties, '$current_url'), '^"|"$', '') = 'https://posthog.com/feedback/123'
                            AND event = '$autocapture'))) < now() as first_time_condition_None_level_level_0_level_1_level_0_0
     FROM events e
     INNER JOIN
       (SELECT distinct_id,
               argMax(person_id, version) as person_id
        FROM person_distinct_id2
        WHERE team_id = 2
        GROUP BY distinct_id
        HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
     WHERE team_id = 2
       AND event IN ['$pageview', '$pageview', '$autocapture']
     GROUP BY person_id) behavior_query
  FULL OUTER JOIN
    (SELECT *,
            id AS person_id
     FROM
       (SELECT id,
               argMax(properties, version) as person_props
        FROM person
        WHERE team_id = 2
        GROUP BY id
        HAVING max(is_deleted) = 0
        AND (((has(['test@posthog.com'], replaceRegexpAll(JSONExtractRaw(argMax(person.properties, _timestamp), 'email'), '^"|"$', ''))))))) person ON person.person_id = behavior_query.person_id
  WHERE 1 = 1
    AND ((((performed_event_condition_None_level_level_0_level_0_level_0_0)
           OR (performed_event_condition_None_level_level_0_level_0_level_1_0)
           OR (has(['special'], replaceRegexpAll(JSONExtractRaw(person_props, 'name'), '^"|"$', ''))))
          AND ((first_time_condition_None_level_level_0_level_1_level_0_0)))) SETTINGS allow_experimental_window_functions = 1
  '
---
# name: TestCohortQuery.test_person_props_only
  '
  
  SELECT id
  FROM person
  WHERE team_id = 2
  GROUP BY id
  HAVING max(is_deleted) = 0
  AND (((has(['test1@posthog.com'], replaceRegexpAll(JSONExtractRaw(argMax(person.properties, _timestamp), 'email'), '^"|"$', '')))
        OR (has(['test2@posthog.com'], replaceRegexpAll(JSONExtractRaw(argMax(person.properties, _timestamp), 'email'), '^"|"$', ''))))
       OR ((has(['test3'], replaceRegexpAll(JSONExtractRaw(argMax(person.properties, _timestamp), 'name'), '^"|"$', '')))
           AND (has(['test3@posthog.com'], replaceRegexpAll(JSONExtractRaw(argMax(person.properties, _timestamp), 'email'), '^"|"$', '')))))
  '
---
# name: TestCohortQuery.test_precalculated_cohort_filter_with_extra_filters
  '
  
  SELECT count(*)
  FROM
    (SELECT 1
     FROM cohortpeople
     WHERE team_id = 2
       AND cohort_id = 2
     GROUP BY person_id,
              cohort_id,
              team_id,
              version
     HAVING sum(sign) > 0)
  '
---
# name: TestCohortQuery.test_precalculated_cohort_filter_with_extra_filters.1
  '
  
  SELECT count(*)
  FROM
    (SELECT 1
     FROM cohortpeople
     WHERE team_id = 2
       AND cohort_id = 2
     GROUP BY person_id,
              cohort_id,
              team_id,
              version
     HAVING sum(sign) > 0)
  '
---
# name: TestCohortQuery.test_precalculated_cohort_filter_with_extra_filters.2
  '
  
  SELECT id
  FROM person
  WHERE team_id = 2
  GROUP BY id
  HAVING max(is_deleted) = 0
  AND ((((has(['test'], replaceRegexpAll(JSONExtractRaw(argMax(person.properties, _timestamp), 'name'), '^"|"$', '')))))
       OR (has(['test2'], replaceRegexpAll(JSONExtractRaw(argMax(person.properties, _timestamp), 'name'), '^"|"$', ''))))
  '
---
# name: TestCohortQuery.test_static_cohort_filter
  '
  
  SELECT person.person_id AS id
  FROM
    (SELECT *,
            id AS person_id
     FROM
       (SELECT id
        FROM person
        WHERE team_id = 2
        GROUP BY id
        HAVING max(is_deleted) = 0)) person
  WHERE 1 = 1
    AND (((id IN
             (SELECT person_id
              FROM person_static_cohort
              WHERE cohort_id = 2
                AND team_id = 2)))) SETTINGS allow_experimental_window_functions = 1
  '
---
# name: TestCohortQuery.test_static_cohort_filter_with_extra
  '
  
  SELECT if(behavior_query.person_id = '00000000-0000-0000-0000-000000000000', person.person_id, behavior_query.person_id) AS id
  FROM
    (SELECT pdi.person_id AS person_id,
            countIf(timestamp > now() - INTERVAL 1 week
                    AND timestamp < now()
                    AND event = '$pageview') > 0 AS performed_event_condition_None_level_level_0_level_1_0
     FROM events e
     INNER JOIN
       (SELECT distinct_id,
               argMax(person_id, version) as person_id
        FROM person_distinct_id2
        WHERE team_id = 2
        GROUP BY distinct_id
        HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
     WHERE team_id = 2
       AND event IN ['$pageview']
       AND timestamp <= now()
       AND timestamp >= now() - INTERVAL 1 week
     GROUP BY person_id) behavior_query
  FULL OUTER JOIN
    (SELECT *,
            id AS person_id
     FROM
       (SELECT id
        FROM person
        WHERE team_id = 2
        GROUP BY id
        HAVING max(is_deleted) = 0)) person ON person.person_id = behavior_query.person_id
  WHERE 1 = 1
    AND (((id IN
             (SELECT person_id
              FROM person_static_cohort
              WHERE cohort_id = 2
                AND team_id = 2))
          AND (performed_event_condition_None_level_level_0_level_1_0))) SETTINGS allow_experimental_window_functions = 1
  '
---
# name: TestCohortQuery.test_static_cohort_filter_with_extra.1
  '
  
  SELECT if(behavior_query.person_id = '00000000-0000-0000-0000-000000000000', person.person_id, behavior_query.person_id) AS id
  FROM
    (SELECT pdi.person_id AS person_id,
            countIf(timestamp > now() - INTERVAL 1 week
                    AND timestamp < now()
                    AND event = '$pageview') > 0 AS performed_event_condition_None_level_level_0_level_1_level_0_0
     FROM events e
     INNER JOIN
       (SELECT distinct_id,
               argMax(person_id, version) as person_id
        FROM person_distinct_id2
        WHERE team_id = 2
        GROUP BY distinct_id
        HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
     WHERE team_id = 2
       AND event IN ['$pageview']
       AND timestamp <= now()
       AND timestamp >= now() - INTERVAL 1 week
     GROUP BY person_id) behavior_query
  FULL OUTER JOIN
    (SELECT *,
            id AS person_id
     FROM
       (SELECT id
        FROM person
        WHERE team_id = 2
        GROUP BY id
        HAVING max(is_deleted) = 0)) person ON person.person_id = behavior_query.person_id
  WHERE 1 = 1
    AND ((((id IN
              (SELECT person_id
               FROM person_static_cohort
               WHERE cohort_id = 2
                 AND team_id = 2)))
          OR ((performed_event_condition_None_level_level_0_level_1_level_0_0)))) SETTINGS allow_experimental_window_functions = 1
  '
---
# name: TestCohortQuery.test_unwrapping_static_cohort_filter_hidden_in_layers_of_cohorts
  '
  
  SELECT if(behavior_query.person_id = '00000000-0000-0000-0000-000000000000', person.person_id, behavior_query.person_id) AS id
  FROM
    (SELECT pdi.person_id AS person_id,
            countIf(timestamp > now() - INTERVAL 7 day
                    AND timestamp < now()
                    AND event = '$new_view') > 0 AS performed_event_condition_None_level_level_0_level_0_level_0_0,
            countIf(timestamp > now() - INTERVAL 1 week
                    AND timestamp < now()
                    AND event = '$pageview') > 0 AS performed_event_condition_None_level_level_0_level_1_0
     FROM events e
     INNER JOIN
       (SELECT distinct_id,
               argMax(person_id, version) as person_id
        FROM person_distinct_id2
        WHERE team_id = 2
        GROUP BY distinct_id
        HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
     WHERE team_id = 2
       AND event IN ['$new_view', '$pageview']
       AND timestamp <= now()
       AND timestamp >= now() - INTERVAL 7 day
     GROUP BY person_id) behavior_query
  FULL OUTER JOIN
    (SELECT *,
            id AS person_id
     FROM
       (SELECT id
        FROM person
        WHERE team_id = 2
        GROUP BY id
        HAVING max(is_deleted) = 0)) person ON person.person_id = behavior_query.person_id
  WHERE 1 = 1
    AND ((((performed_event_condition_None_level_level_0_level_0_level_0_0)
           AND (id NOT IN
                  (SELECT person_id
                   FROM person_static_cohort
                   WHERE cohort_id = 2
                     AND team_id = 2)))
          OR (performed_event_condition_None_level_level_0_level_1_0))) SETTINGS allow_experimental_window_functions = 1
  '
---
