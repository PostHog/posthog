# name: TestCohortQuery.test_basic_query
  '''
  
  SELECT person.person_id AS id
  FROM
    (SELECT pdi.person_id AS person_id,
            countIf(timestamp > now() - INTERVAL 1 day
                    AND timestamp < now()
                    AND event = '$pageview') > 0 AS performed_event_condition_None_level_level_0_level_0_level_0_0,
            countIf(timestamp > now() - INTERVAL 2 week
                    AND timestamp < now()
                    AND event = '$pageview') > 0 AS performed_event_condition_None_level_level_0_level_0_level_1_0,
            minIf(timestamp, ((replaceRegexpAll(JSONExtractRaw(properties, '$current_url'), '^"|"$', '') = 'https://posthog.com/feedback/123'
                               AND event = '$autocapture'))) >= now() - INTERVAL 2 week
     AND minIf(timestamp, ((replaceRegexpAll(JSONExtractRaw(properties, '$current_url'), '^"|"$', '') = 'https://posthog.com/feedback/123'
                            AND event = '$autocapture'))) < now() as first_time_condition_None_level_level_0_level_1_level_0_0
     FROM events e
     INNER JOIN
       (SELECT distinct_id,
               argMax(person_id, version) as person_id
        FROM person_distinct_id2
        WHERE team_id = 2
        GROUP BY distinct_id
        HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
     WHERE team_id = 2
       AND event IN ['$pageview', '$pageview', '$autocapture']
     GROUP BY person_id) behavior_query
  INNER JOIN
    (SELECT *,
            id AS person_id
     FROM
       (SELECT id
        FROM person
        WHERE team_id = 2
          AND id IN
            (SELECT id
             FROM person
             WHERE team_id = 2
               AND (((has(['test@posthog.com'], replaceRegexpAll(JSONExtractRaw(properties, 'email'), '^"|"$', ''))))) )
        GROUP BY id
        HAVING max(is_deleted) = 0
        AND (((has(['test@posthog.com'], replaceRegexpAll(JSONExtractRaw(argMax(person.properties, version), 'email'), '^"|"$', ''))))) SETTINGS optimize_aggregation_in_order = 1)) person ON person.person_id = behavior_query.person_id
  WHERE 1 = 1
    AND ((((performed_event_condition_None_level_level_0_level_0_level_0_0)
           OR (performed_event_condition_None_level_level_0_level_0_level_1_0))
          AND ((first_time_condition_None_level_level_0_level_1_level_0_0))))
  '''
# ---
# name: TestCohortQuery.test_cohort_filter_with_another_cohort_with_event_sequence
  '''
  
  SELECT person.person_id AS id
  FROM
    (SELECT person_id,
            max(if(event = '$pageview'
                   AND event_0_latest_0 < event_0_latest_1
                   AND event_0_latest_1 <= event_0_latest_0 + INTERVAL 3 day, 2, 1)) = 2 AS steps_0,
            max(if(event = '$new_view'
                   AND event_1_latest_0 < event_1_latest_1
                   AND event_1_latest_1 <= event_1_latest_0 + INTERVAL 8 day, 2, 1)) = 2 AS steps_1
     FROM
       (SELECT person_id,
               event,
               properties,
               distinct_id, timestamp, event_0_latest_0,
                                       min(event_0_latest_1) over (PARTITION by person_id
                                                                   ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 1 PRECEDING) event_0_latest_1,
                                                                  event_1_latest_0,
                                                                  min(event_1_latest_1) over (PARTITION by person_id
                                                                                              ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 1 PRECEDING) event_1_latest_1
        FROM
          (SELECT pdi.person_id AS person_id,
                  event,
                  properties,
                  distinct_id, timestamp, if(event = '$pageview'
                                             AND timestamp > now() - INTERVAL 8 day, 1, 0) AS event_0_step_0,
                                          if(event_0_step_0 = 1, timestamp, null) AS event_0_latest_0,
                                          if(event = '$pageview'
                                             AND timestamp > now() - INTERVAL 8 day, 1, 0) AS event_0_step_1,
                                          if(event_0_step_1 = 1, timestamp, null) AS event_0_latest_1,
                                          if(event = '$new_view'
                                             AND timestamp > now() - INTERVAL 8 day, 1, 0) AS event_1_step_0,
                                          if(event_1_step_0 = 1, timestamp, null) AS event_1_latest_0,
                                          if(event = '$new_view'
                                             AND timestamp > now() - INTERVAL 8 day, 1, 0) AS event_1_step_1,
                                          if(event_1_step_1 = 1, timestamp, null) AS event_1_latest_1
           FROM events AS e
           INNER JOIN
             (SELECT distinct_id,
                     argMax(person_id, version) as person_id
              FROM person_distinct_id2
              WHERE team_id = 2
              GROUP BY distinct_id
              HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
           WHERE team_id = 2
             AND event IN ['$pageview', '$pageview', '$new_view', '$new_view']
             AND timestamp <= now()
             AND timestamp >= now() - INTERVAL 8 day ))
     GROUP BY person_id) funnel_query
  INNER JOIN
    (SELECT *,
            id AS person_id
     FROM
       (SELECT id
        FROM person
        WHERE team_id = 2
          AND id IN
            (SELECT id
             FROM person
             WHERE team_id = 2
               AND (((has(['test'], replaceRegexpAll(JSONExtractRaw(properties, 'name'), '^"|"$', ''))))) )
        GROUP BY id
        HAVING max(is_deleted) = 0
        AND (((has(['test'], replaceRegexpAll(JSONExtractRaw(argMax(person.properties, version), 'name'), '^"|"$', ''))))) SETTINGS optimize_aggregation_in_order = 1)) person ON person.person_id = funnel_query.person_id
  WHERE 1 = 1
    AND ((((steps_0))
          AND (steps_1)))
  '''
# ---
