# name: TestClickhouseLifecycle.test_test_account_filters_with_groups
  '
  WITH 'day' AS selected_period,
       periods AS
    (SELECT dateSub(DAY, number, dateTrunc(selected_period, toDateTime('2020-01-19 23:59:59'))) AS start_of_period
     FROM numbers(dateDiff('day', dateTrunc('day', toDateTime('2020-01-12 00:00:00')), dateTrunc('day', toDateTime('2020-01-19 23:59:59') + INTERVAL 1 DAY))))
  SELECT groupArray(start_of_period) as date,
         groupArray(counts) as data,
         status
  FROM
    (SELECT if(status = 'dormant', toInt64(SUM(counts)) * toInt16(-1), toInt64(SUM(counts))) as counts,
            start_of_period,
            status
     FROM
       (SELECT periods.start_of_period as start_of_period,
               toUInt16(0) AS counts,
               status
        FROM periods
        CROSS JOIN
          (SELECT status
           FROM
             (SELECT ['new', 'returning', 'resurrecting', 'dormant'] as status) ARRAY
           JOIN status) as sec
        ORDER BY status,
                 start_of_period
        UNION ALL SELECT start_of_period,
                         count(DISTINCT person_id) counts,
                         status
        FROM
          (WITH 'day' AS selected_period, INTERVAL 1 DAY AS interval_type,
                                                            toDateTime('2020-01-12 00:00:00') AS selected_date_from,
                                                            toDateTime('2020-01-19 23:59:59') AS selected_date_to,
                                                            toDateTime(dateTrunc(selected_period, selected_date_from)) AS selected_interval_from,
                                                            toDateTime(dateTrunc(selected_period, selected_date_to)) AS selected_interval_to,
                                                            selected_interval_from - INTERVAL 1 DAY AS previous_interval_from,
                                                                                                       unbounded_filtered_events AS
             (SELECT e.timestamp as timestamp,
                     pdi.person_id as person_id
              FROM events e
              INNER JOIN
                (SELECT cityHash64(distinct_id) as distinct_id,
                        person_id
                 FROM
                   (SELECT distinct_id,
                           argMax(person_id, version) as person_id
                    FROM person_distinct_id2
                    WHERE team_id = 2
                    GROUP BY distinct_id
                    HAVING argMax(is_deleted, version) = 0)) AS pdi ON cityHash64(e.distinct_id) = pdi.distinct_id
              INNER JOIN
                (SELECT group_key,
                        argMax(group_properties, _timestamp) AS group_properties_0
                 FROM groups
                 WHERE team_id = 2
                   AND group_type_index = 0
                 GROUP BY group_key) groups_0 ON $group_0 == groups_0.group_key
              WHERE team_id = 2
                AND event = '$pageview'
                AND has(['value'], trim(BOTH '"'
                                        FROM JSONExtractRaw(group_properties_0, 'key'))) ),
                                                                                                       bounded_person_activity_by_period AS
             (SELECT DISTINCT person_id,
                              dateTrunc(selected_period, events.timestamp) start_of_period
              FROM unbounded_filtered_events events
              WHERE events.timestamp <= selected_interval_to + interval_type
                AND events.timestamp >= previous_interval_from ) SELECT person_id,
                                                                        period_status_pairs.1 AS start_of_period,
                                                                        period_status_pairs.2 AS status
           FROM
             (SELECT person_id,
                     arrayJoin(arrayZip([start_of_period, start_of_period + interval_type], [activity_status, if(next_is_active, '', 'dormant')])) AS period_status_pairs
              FROM
                (SELECT activity.person_id as person_id,
                        activity.start_of_period as start_of_period,
                        if(previous_activity.person_id = '00000000-0000-0000-0000-000000000000', 'new', if(dateDiff(selected_period, previous_activity.timestamp, activity.start_of_period) > 1, 'resurrecting', 'returning')) as activity_status,
                        next_period.person_id != '00000000-0000-0000-0000-000000000000' AS next_is_active
                 FROM bounded_person_activity_by_period activity ASOF
                 LEFT JOIN unbounded_filtered_events previous_activity ON previous_activity.person_id = activity.person_id
                 AND activity.start_of_period > previous_activity.timestamp
                 LEFT JOIN bounded_person_activity_by_period next_period ON activity.person_id = next_period.person_id
                 AND next_period.start_of_period = activity.start_of_period + interval_type)
              WHERE period_status_pairs.2 != '' ))
        WHERE start_of_period <= toDateTime('2020-01-19 23:59:59')
          AND start_of_period >= toDateTime('2020-01-12 00:00:00')
        GROUP BY start_of_period,
                 status)
     GROUP BY start_of_period,
              status
     ORDER BY start_of_period ASC)
  GROUP BY status
  '
---
