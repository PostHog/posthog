# serializer version: 1
# name: TestClickhouseRetention.test_groups_aggregating_person_on_events
  '''
  WITH actor_query AS
    (WITH 'Week' as period,
          NULL as breakdown_values_filter,
          NULL as selected_interval,
          returning_event_query as
       (SELECT toStartOfWeek(toTimeZone(toDateTime(e.timestamp, 'UTC'), 'UTC'), 0) AS event_date,
               e."$group_0" as target
        FROM events e
        WHERE team_id = 99999
          AND e.event = '$pageview'
          AND toDateTime(e.timestamp) >= toDateTime('2020-06-07 00:00:00', 'UTC')
          AND toDateTime(e.timestamp) <= toDateTime('2020-07-27 00:00:00', 'UTC')
          AND (NOT has([''], "$group_0"))
          AND notEmpty(e.person_id)
        GROUP BY target,
                 event_date),
          target_event_query as
       (SELECT DISTINCT toStartOfWeek(toTimeZone(toDateTime(e.timestamp, 'UTC'), 'UTC'), 0) AS event_date,
                        e."$group_0" as target,
                        [
                          dateDiff(
                              'Week',
                              toStartOfWeek(toDateTime('2020-06-07 00:00:00', 'UTC'), 0),
                              toStartOfWeek(toTimeZone(toDateTime(e.timestamp, 'UTC'), 'UTC'), 0)
                          )
                      ] as breakdown_values
        FROM events e
        WHERE team_id = 99999
          AND e.event = '$pageview'
          AND toDateTime(e.timestamp) >= toDateTime('2020-06-07 00:00:00', 'UTC')
          AND toDateTime(e.timestamp) <= toDateTime('2020-07-27 00:00:00', 'UTC')
          AND (NOT has([''], "$group_0"))
          AND notEmpty(e.person_id) ) SELECT DISTINCT breakdown_values,
                                                      intervals_from_base,
                                                      actor_id
     FROM
       (SELECT target_event.breakdown_values AS breakdown_values,
               datediff(period, target_event.event_date, returning_event.event_date) AS intervals_from_base,
               returning_event.target AS actor_id
        FROM target_event_query AS target_event
        JOIN returning_event_query AS returning_event ON returning_event.target = target_event.target
        WHERE returning_event.event_date > target_event.event_date
        UNION ALL SELECT target_event.breakdown_values AS breakdown_values,
                         0 AS intervals_from_base,
                         target_event.target AS actor_id
        FROM target_event_query AS target_event)
     WHERE (breakdown_values_filter is NULL
            OR breakdown_values = breakdown_values_filter)
       AND (selected_interval is NULL
            OR intervals_from_base = selected_interval) )
  SELECT actor_activity.breakdown_values AS breakdown_values,
         actor_activity.intervals_from_base AS intervals_from_base,
         COUNT(DISTINCT actor_activity.actor_id) AS count
  FROM actor_query AS actor_activity
  GROUP BY breakdown_values,
           intervals_from_base
  ORDER BY breakdown_values,
           intervals_from_base
  '''
# ---
# name: TestClickhouseRetention.test_groups_aggregating_person_on_events.1
  '''
  
  SELECT actor_id,
         groupArray(actor_activity.intervals_from_base) AS appearances
  FROM
    (WITH 'Week' as period,
          [0] as breakdown_values_filter,
          NULL as selected_interval,
          returning_event_query as
       (SELECT toStartOfWeek(toTimeZone(toDateTime(e.timestamp, 'UTC'), 'UTC'), 0) AS event_date,
               e."$group_0" as target
        FROM events e
        WHERE team_id = 99999
          AND e.event = '$pageview'
          AND toDateTime(e.timestamp) >= toDateTime('2020-06-07 00:00:00', 'UTC')
          AND toDateTime(e.timestamp) <= toDateTime('2020-07-27 00:00:00', 'UTC')
          AND (NOT has([''], "$group_0"))
          AND notEmpty(e.person_id)
        GROUP BY target,
                 event_date),
          target_event_query as
       (SELECT DISTINCT toStartOfWeek(toTimeZone(toDateTime(e.timestamp, 'UTC'), 'UTC'), 0) AS event_date,
                        e."$group_0" as target,
                        [
                          dateDiff(
                              'Week',
                              toStartOfWeek(toDateTime('2020-06-07 00:00:00', 'UTC'), 0),
                              toStartOfWeek(toTimeZone(toDateTime(e.timestamp, 'UTC'), 'UTC'), 0)
                          )
                      ] as breakdown_values
        FROM events e
        WHERE team_id = 99999
          AND e.event = '$pageview'
          AND toDateTime(e.timestamp) >= toDateTime('2020-06-07 00:00:00', 'UTC')
          AND toDateTime(e.timestamp) <= toDateTime('2020-07-27 00:00:00', 'UTC')
          AND (NOT has([''], "$group_0"))
          AND notEmpty(e.person_id) ) SELECT DISTINCT breakdown_values,
                                                      intervals_from_base,
                                                      actor_id
     FROM
       (SELECT target_event.breakdown_values AS breakdown_values,
               datediff(period, target_event.event_date, returning_event.event_date) AS intervals_from_base,
               returning_event.target AS actor_id
        FROM target_event_query AS target_event
        JOIN returning_event_query AS returning_event ON returning_event.target = target_event.target
        WHERE returning_event.event_date > target_event.event_date
        UNION ALL SELECT target_event.breakdown_values AS breakdown_values,
                         0 AS intervals_from_base,
                         target_event.target AS actor_id
        FROM target_event_query AS target_event)
     WHERE (breakdown_values_filter is NULL
            OR breakdown_values = breakdown_values_filter)
       AND (selected_interval is NULL
            OR intervals_from_base = selected_interval) ) AS actor_activity
  GROUP BY actor_id
  ORDER BY length(appearances) DESC, actor_id
  LIMIT 100
  OFFSET 0
  '''
# ---
# name: TestClickhouseRetention.test_groups_aggregating_person_on_events.2
  '''
  WITH actor_query AS
    (WITH 'Week' as period,
          NULL as breakdown_values_filter,
          NULL as selected_interval,
          returning_event_query as
       (SELECT toStartOfWeek(toTimeZone(toDateTime(e.timestamp, 'UTC'), 'UTC'), 0) AS event_date,
               e."$group_1" as target
        FROM events e
        WHERE team_id = 99999
          AND e.event = '$pageview'
          AND toDateTime(e.timestamp) >= toDateTime('2020-06-07 00:00:00', 'UTC')
          AND toDateTime(e.timestamp) <= toDateTime('2020-07-27 00:00:00', 'UTC')
          AND (NOT has([''], "$group_1"))
          AND notEmpty(e.person_id)
        GROUP BY target,
                 event_date),
          target_event_query as
       (SELECT DISTINCT toStartOfWeek(toTimeZone(toDateTime(e.timestamp, 'UTC'), 'UTC'), 0) AS event_date,
                        e."$group_1" as target,
                        [
                          dateDiff(
                              'Week',
                              toStartOfWeek(toDateTime('2020-06-07 00:00:00', 'UTC'), 0),
                              toStartOfWeek(toTimeZone(toDateTime(e.timestamp, 'UTC'), 'UTC'), 0)
                          )
                      ] as breakdown_values
        FROM events e
        WHERE team_id = 99999
          AND e.event = '$pageview'
          AND toDateTime(e.timestamp) >= toDateTime('2020-06-07 00:00:00', 'UTC')
          AND toDateTime(e.timestamp) <= toDateTime('2020-07-27 00:00:00', 'UTC')
          AND (NOT has([''], "$group_1"))
          AND notEmpty(e.person_id) ) SELECT DISTINCT breakdown_values,
                                                      intervals_from_base,
                                                      actor_id
     FROM
       (SELECT target_event.breakdown_values AS breakdown_values,
               datediff(period, target_event.event_date, returning_event.event_date) AS intervals_from_base,
               returning_event.target AS actor_id
        FROM target_event_query AS target_event
        JOIN returning_event_query AS returning_event ON returning_event.target = target_event.target
        WHERE returning_event.event_date > target_event.event_date
        UNION ALL SELECT target_event.breakdown_values AS breakdown_values,
                         0 AS intervals_from_base,
                         target_event.target AS actor_id
        FROM target_event_query AS target_event)
     WHERE (breakdown_values_filter is NULL
            OR breakdown_values = breakdown_values_filter)
       AND (selected_interval is NULL
            OR intervals_from_base = selected_interval) )
  SELECT actor_activity.breakdown_values AS breakdown_values,
         actor_activity.intervals_from_base AS intervals_from_base,
         COUNT(DISTINCT actor_activity.actor_id) AS count
  FROM actor_query AS actor_activity
  GROUP BY breakdown_values,
           intervals_from_base
  ORDER BY breakdown_values,
           intervals_from_base
  '''
# ---
# name: TestClickhouseRetention.test_groups_filtering_person_on_events
  '''
  WITH actor_query AS
    (WITH 'Week' as period,
          NULL as breakdown_values_filter,
          NULL as selected_interval,
          returning_event_query as
       (SELECT toStartOfWeek(toTimeZone(toDateTime(e.timestamp, 'UTC'), 'UTC'), 0) AS event_date,
               e.person_id as target
        FROM events e
        LEFT JOIN
          (SELECT group_key,
                  argMax(group_properties, _timestamp) AS group_properties_0
           FROM groups
           WHERE team_id = 99999
             AND group_type_index = 0
           GROUP BY group_key) groups_0 ON "$group_0" == groups_0.group_key
        WHERE team_id = 99999
          AND e.event = '$pageview'
          AND toDateTime(e.timestamp) >= toDateTime('2020-06-07 00:00:00', 'UTC')
          AND toDateTime(e.timestamp) <= toDateTime('2020-07-27 00:00:00', 'UTC')
          AND (has(['technology'], replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '')))
          AND notEmpty(e.person_id)
        GROUP BY target,
                 event_date),
          target_event_query as
       (SELECT DISTINCT toStartOfWeek(toTimeZone(toDateTime(e.timestamp, 'UTC'), 'UTC'), 0) AS event_date,
                        e.person_id as target,
                        [
                          dateDiff(
                              'Week',
                              toStartOfWeek(toDateTime('2020-06-07 00:00:00', 'UTC'), 0),
                              toStartOfWeek(toTimeZone(toDateTime(e.timestamp, 'UTC'), 'UTC'), 0)
                          )
                      ] as breakdown_values
        FROM events e
        LEFT JOIN
          (SELECT group_key,
                  argMax(group_properties, _timestamp) AS group_properties_0
           FROM groups
           WHERE team_id = 99999
             AND group_type_index = 0
           GROUP BY group_key) groups_0 ON "$group_0" == groups_0.group_key
        WHERE team_id = 99999
          AND e.event = '$pageview'
          AND toDateTime(e.timestamp) >= toDateTime('2020-06-07 00:00:00', 'UTC')
          AND toDateTime(e.timestamp) <= toDateTime('2020-07-27 00:00:00', 'UTC')
          AND (has(['technology'], replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '')))
          AND notEmpty(e.person_id) ) SELECT DISTINCT breakdown_values,
                                                      intervals_from_base,
                                                      actor_id
     FROM
       (SELECT target_event.breakdown_values AS breakdown_values,
               datediff(period, target_event.event_date, returning_event.event_date) AS intervals_from_base,
               returning_event.target AS actor_id
        FROM target_event_query AS target_event
        JOIN returning_event_query AS returning_event ON returning_event.target = target_event.target
        WHERE returning_event.event_date > target_event.event_date
        UNION ALL SELECT target_event.breakdown_values AS breakdown_values,
                         0 AS intervals_from_base,
                         target_event.target AS actor_id
        FROM target_event_query AS target_event)
     WHERE (breakdown_values_filter is NULL
            OR breakdown_values = breakdown_values_filter)
       AND (selected_interval is NULL
            OR intervals_from_base = selected_interval) )
  SELECT actor_activity.breakdown_values AS breakdown_values,
         actor_activity.intervals_from_base AS intervals_from_base,
         COUNT(DISTINCT actor_activity.actor_id) AS count
  FROM actor_query AS actor_activity
  GROUP BY breakdown_values,
           intervals_from_base
  ORDER BY breakdown_values,
           intervals_from_base
  '''
# ---
# name: TestClickhouseRetention.test_groups_filtering_person_on_events.1
  '''
  WITH actor_query AS
    (WITH 'Week' as period,
          NULL as breakdown_values_filter,
          NULL as selected_interval,
          returning_event_query as
       (SELECT toStartOfWeek(toTimeZone(toDateTime(e.timestamp, 'UTC'), 'UTC'), 0) AS event_date,
               e.person_id as target
        FROM events e
        LEFT JOIN
          (SELECT group_key,
                  argMax(group_properties, _timestamp) AS group_properties_0
           FROM groups
           WHERE team_id = 99999
             AND group_type_index = 0
           GROUP BY group_key) groups_0 ON "$group_0" == groups_0.group_key
        WHERE team_id = 99999
          AND e.event = '$pageview'
          AND toDateTime(e.timestamp) >= toDateTime('2020-06-07 00:00:00', 'UTC')
          AND toDateTime(e.timestamp) <= toDateTime('2020-07-27 00:00:00', 'UTC')
          AND (JSONHas(group_properties_0, 'industry'))
          AND notEmpty(e.person_id)
        GROUP BY target,
                 event_date),
          target_event_query as
       (SELECT DISTINCT toStartOfWeek(toTimeZone(toDateTime(e.timestamp, 'UTC'), 'UTC'), 0) AS event_date,
                        e.person_id as target,
                        [
                          dateDiff(
                              'Week',
                              toStartOfWeek(toDateTime('2020-06-07 00:00:00', 'UTC'), 0),
                              toStartOfWeek(toTimeZone(toDateTime(e.timestamp, 'UTC'), 'UTC'), 0)
                          )
                      ] as breakdown_values
        FROM events e
        LEFT JOIN
          (SELECT group_key,
                  argMax(group_properties, _timestamp) AS group_properties_0
           FROM groups
           WHERE team_id = 99999
             AND group_type_index = 0
           GROUP BY group_key) groups_0 ON "$group_0" == groups_0.group_key
        WHERE team_id = 99999
          AND e.event = '$pageview'
          AND toDateTime(e.timestamp) >= toDateTime('2020-06-07 00:00:00', 'UTC')
          AND toDateTime(e.timestamp) <= toDateTime('2020-07-27 00:00:00', 'UTC')
          AND (JSONHas(group_properties_0, 'industry'))
          AND notEmpty(e.person_id) ) SELECT DISTINCT breakdown_values,
                                                      intervals_from_base,
                                                      actor_id
     FROM
       (SELECT target_event.breakdown_values AS breakdown_values,
               datediff(period, target_event.event_date, returning_event.event_date) AS intervals_from_base,
               returning_event.target AS actor_id
        FROM target_event_query AS target_event
        JOIN returning_event_query AS returning_event ON returning_event.target = target_event.target
        WHERE returning_event.event_date > target_event.event_date
        UNION ALL SELECT target_event.breakdown_values AS breakdown_values,
                         0 AS intervals_from_base,
                         target_event.target AS actor_id
        FROM target_event_query AS target_event)
     WHERE (breakdown_values_filter is NULL
            OR breakdown_values = breakdown_values_filter)
       AND (selected_interval is NULL
            OR intervals_from_base = selected_interval) )
  SELECT actor_activity.breakdown_values AS breakdown_values,
         actor_activity.intervals_from_base AS intervals_from_base,
         COUNT(DISTINCT actor_activity.actor_id) AS count
  FROM actor_query AS actor_activity
  GROUP BY breakdown_values,
           intervals_from_base
  ORDER BY breakdown_values,
           intervals_from_base
  '''
# ---
# name: TestClickhouseRetention.test_groups_filtering_person_on_events_v2
  '''
  
  SELECT DISTINCT person_id
  FROM events
  WHERE team_id = 99999
    AND distinct_id = 'person2'
  '''
# ---
# name: TestClickhouseRetention.test_groups_filtering_person_on_events_v2.1
  '''
  WITH actor_query AS
    (WITH 'Day' as period,
          NULL as breakdown_values_filter,
          NULL as selected_interval,
          returning_event_query as
       (SELECT toStartOfDay(toTimeZone(toDateTime(e.timestamp, 'UTC'), 'UTC')) AS event_date,
               if(notEmpty(overrides.distinct_id), overrides.person_id, e.person_id) as target
        FROM events e
        LEFT OUTER JOIN
          (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                  person_distinct_id_overrides.distinct_id AS distinct_id
           FROM person_distinct_id_overrides
           WHERE equals(person_distinct_id_overrides.team_id, 99999)
           GROUP BY person_distinct_id_overrides.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0)) AS overrides ON e.distinct_id = overrides.distinct_id
        LEFT JOIN
          (SELECT group_key,
                  argMax(group_properties, _timestamp) AS group_properties_0
           FROM groups
           WHERE team_id = 99999
             AND group_type_index = 0
           GROUP BY group_key) groups_0 ON "$group_0" == groups_0.group_key
        WHERE team_id = 99999
          AND e.event = '$pageview'
          AND toDateTime(e.timestamp) >= toDateTime('2020-06-12 00:00:00', 'UTC')
          AND toDateTime(e.timestamp) <= toDateTime('2020-06-19 00:00:00', 'UTC')
          AND (JSONHas(group_properties_0, 'industry'))
          AND notEmpty(e.person_id)
        GROUP BY target,
                 event_date),
          target_event_query as
       (SELECT DISTINCT toStartOfDay(toTimeZone(toDateTime(e.timestamp, 'UTC'), 'UTC')) AS event_date,
                        if(notEmpty(overrides.distinct_id), overrides.person_id, e.person_id) as target,
                        [
                          dateDiff(
                              'Day',
                              toStartOfDay(toDateTime('2020-06-12 00:00:00', 'UTC')),
                              toStartOfDay(toTimeZone(toDateTime(e.timestamp, 'UTC'), 'UTC'))
                          )
                      ] as breakdown_values
        FROM events e
        LEFT OUTER JOIN
          (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                  person_distinct_id_overrides.distinct_id AS distinct_id
           FROM person_distinct_id_overrides
           WHERE equals(person_distinct_id_overrides.team_id, 99999)
           GROUP BY person_distinct_id_overrides.distinct_id
           HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0)) AS overrides ON e.distinct_id = overrides.distinct_id
        LEFT JOIN
          (SELECT group_key,
                  argMax(group_properties, _timestamp) AS group_properties_0
           FROM groups
           WHERE team_id = 99999
             AND group_type_index = 0
           GROUP BY group_key) groups_0 ON "$group_0" == groups_0.group_key
        WHERE team_id = 99999
          AND e.event = '$pageview'
          AND toDateTime(e.timestamp) >= toDateTime('2020-06-12 00:00:00', 'UTC')
          AND toDateTime(e.timestamp) <= toDateTime('2020-06-19 00:00:00', 'UTC')
          AND (JSONHas(group_properties_0, 'industry'))
          AND notEmpty(e.person_id) ) SELECT DISTINCT breakdown_values,
                                                      intervals_from_base,
                                                      actor_id
     FROM
       (SELECT target_event.breakdown_values AS breakdown_values,
               datediff(period, target_event.event_date, returning_event.event_date) AS intervals_from_base,
               returning_event.target AS actor_id
        FROM target_event_query AS target_event
        JOIN returning_event_query AS returning_event ON returning_event.target = target_event.target
        WHERE returning_event.event_date > target_event.event_date
        UNION ALL SELECT target_event.breakdown_values AS breakdown_values,
                         0 AS intervals_from_base,
                         target_event.target AS actor_id
        FROM target_event_query AS target_event)
     WHERE (breakdown_values_filter is NULL
            OR breakdown_values = breakdown_values_filter)
       AND (selected_interval is NULL
            OR intervals_from_base = selected_interval) )
  SELECT actor_activity.breakdown_values AS breakdown_values,
         actor_activity.intervals_from_base AS intervals_from_base,
         COUNT(DISTINCT actor_activity.actor_id) AS count
  FROM actor_query AS actor_activity
  GROUP BY breakdown_values,
           intervals_from_base
  ORDER BY breakdown_values,
           intervals_from_base
  '''
# ---
# name: TestClickhouseRetention.test_groups_in_period_person_on_events
  '''
  
  SELECT actor_id,
         groupArray(actor_activity.intervals_from_base) AS appearances
  FROM
    (WITH 'Week' as period,
          [0] as breakdown_values_filter,
          NULL as selected_interval,
          returning_event_query as
       (SELECT toStartOfWeek(toTimeZone(toDateTime(e.timestamp, 'UTC'), 'UTC'), 0) AS event_date,
               e."$group_0" as target
        FROM events e
        WHERE team_id = 99999
          AND e.event = '$pageview'
          AND toDateTime(e.timestamp) >= toDateTime('2020-06-07 00:00:00', 'UTC')
          AND toDateTime(e.timestamp) <= toDateTime('2020-07-27 00:00:00', 'UTC')
          AND (NOT has([''], "$group_0"))
          AND notEmpty(e.person_id)
        GROUP BY target,
                 event_date),
          target_event_query as
       (SELECT DISTINCT toStartOfWeek(toTimeZone(toDateTime(e.timestamp, 'UTC'), 'UTC'), 0) AS event_date,
                        e."$group_0" as target,
                        [
                          dateDiff(
                              'Week',
                              toStartOfWeek(toDateTime('2020-06-07 00:00:00', 'UTC'), 0),
                              toStartOfWeek(toTimeZone(toDateTime(e.timestamp, 'UTC'), 'UTC'), 0)
                          )
                      ] as breakdown_values
        FROM events e
        WHERE team_id = 99999
          AND e.event = '$pageview'
          AND toDateTime(e.timestamp) >= toDateTime('2020-06-07 00:00:00', 'UTC')
          AND toDateTime(e.timestamp) <= toDateTime('2020-07-27 00:00:00', 'UTC')
          AND (NOT has([''], "$group_0"))
          AND notEmpty(e.person_id) ) SELECT DISTINCT breakdown_values,
                                                      intervals_from_base,
                                                      actor_id
     FROM
       (SELECT target_event.breakdown_values AS breakdown_values,
               datediff(period, target_event.event_date, returning_event.event_date) AS intervals_from_base,
               returning_event.target AS actor_id
        FROM target_event_query AS target_event
        JOIN returning_event_query AS returning_event ON returning_event.target = target_event.target
        WHERE returning_event.event_date > target_event.event_date
        UNION ALL SELECT target_event.breakdown_values AS breakdown_values,
                         0 AS intervals_from_base,
                         target_event.target AS actor_id
        FROM target_event_query AS target_event)
     WHERE (breakdown_values_filter is NULL
            OR breakdown_values = breakdown_values_filter)
       AND (selected_interval is NULL
            OR intervals_from_base = selected_interval) ) AS actor_activity
  GROUP BY actor_id
  ORDER BY length(appearances) DESC, actor_id
  LIMIT 100
  OFFSET 0
  '''
# ---
