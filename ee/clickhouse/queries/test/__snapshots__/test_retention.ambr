# name: TestClickhouseRetention.test_groups_filtering
  '
  
  SELECT datediff('Week', toStartOfWeek(toDateTime('2020-06-07 00:00:00')), reference_event.event_date) as base_interval,
         datediff('Week', reference_event.event_date, toStartOfWeek(toDateTime(event_date))) as intervals_from_base,
         COUNT(DISTINCT event.person_id) count
  FROM
    (SELECT e.timestamp AS event_date,
            pdi.person_id as person_id,
            e.uuid AS uuid,
            e.event AS event
     FROM events e
     INNER JOIN
       (SELECT distinct_id,
               argMax(person_id, _timestamp) as person_id
        FROM
          (SELECT distinct_id,
                  person_id,
                  max(_timestamp) as _timestamp
           FROM person_distinct_id
           WHERE team_id = 2
           GROUP BY person_id,
                    distinct_id,
                    team_id
           HAVING max(is_deleted) = 0)
        GROUP BY distinct_id) AS pdi ON events.distinct_id = pdi.distinct_id
     INNER JOIN
       (SELECT group_key,
               argMax(group_properties, _timestamp) AS group_properties_0
        FROM groups
        WHERE team_id = 2
          AND group_type_index = 0
        GROUP BY group_key) groups_0 ON JSONExtractString(properties, '$group_0') == groups_0.group_key
     WHERE team_id = 2
       AND e.event = '$pageview'
       AND toDateTime(e.timestamp) >= toDateTime('2020-06-07 00:00:00')
       AND toDateTime(e.timestamp) <= toDateTime('2020-07-27 00:00:00')
       AND has(['technology'], trim(BOTH '"'
                                    FROM JSONExtractRaw(group_properties_0, 'industry'))) ) event
  JOIN
    (SELECT DISTINCT toStartOfWeek(e.timestamp) AS event_date,
                     pdi.person_id as person_id,
                     e.uuid AS uuid,
                     e.event AS event
     FROM events e
     INNER JOIN
       (SELECT distinct_id,
               argMax(person_id, _timestamp) as person_id
        FROM
          (SELECT distinct_id,
                  person_id,
                  max(_timestamp) as _timestamp
           FROM person_distinct_id
           WHERE team_id = 2
           GROUP BY person_id,
                    distinct_id,
                    team_id
           HAVING max(is_deleted) = 0)
        GROUP BY distinct_id) AS pdi ON events.distinct_id = pdi.distinct_id
     INNER JOIN
       (SELECT group_key,
               argMax(group_properties, _timestamp) AS group_properties_0
        FROM groups
        WHERE team_id = 2
          AND group_type_index = 0
        GROUP BY group_key) groups_0 ON JSONExtractString(properties, '$group_0') == groups_0.group_key
     WHERE team_id = 2
       AND e.event = '$pageview'
       AND toDateTime(e.timestamp) >= toDateTime('2020-06-07 00:00:00')
       AND toDateTime(e.timestamp) <= toDateTime('2020-07-27 00:00:00')
       AND has(['technology'], trim(BOTH '"'
                                    FROM JSONExtractRaw(group_properties_0, 'industry'))) ) reference_event ON (event.person_id = reference_event.person_id)
  WHERE toStartOfWeek(event.event_date) > toStartOfWeek(reference_event.event_date)
  GROUP BY base_interval,
           intervals_from_base
  ORDER BY base_interval,
           intervals_from_base
  '
---
# name: TestClickhouseRetention.test_groups_filtering.1
  '
  
  SELECT datediff('Week', toStartOfWeek(toDateTime('2020-06-07 00:00:00')), event_date) event_date,
         count(DISTINCT person_id)
  FROM
    (SELECT DISTINCT toStartOfWeek(e.timestamp) AS event_date,
                     pdi.person_id as person_id,
                     e.uuid AS uuid,
                     e.event AS event
     FROM events e
     INNER JOIN
       (SELECT distinct_id,
               argMax(person_id, _timestamp) as person_id
        FROM
          (SELECT distinct_id,
                  person_id,
                  max(_timestamp) as _timestamp
           FROM person_distinct_id
           WHERE team_id = 2
           GROUP BY person_id,
                    distinct_id,
                    team_id
           HAVING max(is_deleted) = 0)
        GROUP BY distinct_id) AS pdi ON events.distinct_id = pdi.distinct_id
     INNER JOIN
       (SELECT group_key,
               argMax(group_properties, _timestamp) AS group_properties_0
        FROM groups
        WHERE team_id = 2
          AND group_type_index = 0
        GROUP BY group_key) groups_0 ON JSONExtractString(properties, '$group_0') == groups_0.group_key
     WHERE team_id = 2
       AND e.event = '$pageview'
       AND toDateTime(e.timestamp) >= toDateTime('2020-06-07 00:00:00')
       AND toDateTime(e.timestamp) <= toDateTime('2020-07-27 00:00:00')
       AND has(['technology'], trim(BOTH '"'
                                    FROM JSONExtractRaw(group_properties_0, 'industry'))) )
  GROUP BY event_date
  ORDER BY event_date
  '
---
# name: TestClickhouseRetention.test_groups_filtering.2
  '
  
  SELECT datediff('Week', toStartOfWeek(toDateTime('2020-06-07 00:00:00')), reference_event.event_date) as base_interval,
         datediff('Week', reference_event.event_date, toStartOfWeek(toDateTime(event_date))) as intervals_from_base,
         COUNT(DISTINCT event.person_id) count
  FROM
    (SELECT e.timestamp AS event_date,
            pdi.person_id as person_id,
            e.uuid AS uuid,
            e.event AS event
     FROM events e
     INNER JOIN
       (SELECT distinct_id,
               argMax(person_id, _timestamp) as person_id
        FROM
          (SELECT distinct_id,
                  person_id,
                  max(_timestamp) as _timestamp
           FROM person_distinct_id
           WHERE team_id = 2
           GROUP BY person_id,
                    distinct_id,
                    team_id
           HAVING max(is_deleted) = 0)
        GROUP BY distinct_id) AS pdi ON events.distinct_id = pdi.distinct_id
     INNER JOIN
       (SELECT group_key,
               argMax(group_properties, _timestamp) AS group_properties_0
        FROM groups
        WHERE team_id = 2
          AND group_type_index = 0
        GROUP BY group_key) groups_0 ON JSONExtractString(properties, '$group_0') == groups_0.group_key
     WHERE team_id = 2
       AND e.event = '$pageview'
       AND toDateTime(e.timestamp) >= toDateTime('2020-06-07 00:00:00')
       AND toDateTime(e.timestamp) <= toDateTime('2020-07-27 00:00:00')
       AND JSONHas(group_properties_0, 'industry') ) event
  JOIN
    (SELECT DISTINCT toStartOfWeek(e.timestamp) AS event_date,
                     pdi.person_id as person_id,
                     e.uuid AS uuid,
                     e.event AS event
     FROM events e
     INNER JOIN
       (SELECT distinct_id,
               argMax(person_id, _timestamp) as person_id
        FROM
          (SELECT distinct_id,
                  person_id,
                  max(_timestamp) as _timestamp
           FROM person_distinct_id
           WHERE team_id = 2
           GROUP BY person_id,
                    distinct_id,
                    team_id
           HAVING max(is_deleted) = 0)
        GROUP BY distinct_id) AS pdi ON events.distinct_id = pdi.distinct_id
     INNER JOIN
       (SELECT group_key,
               argMax(group_properties, _timestamp) AS group_properties_0
        FROM groups
        WHERE team_id = 2
          AND group_type_index = 0
        GROUP BY group_key) groups_0 ON JSONExtractString(properties, '$group_0') == groups_0.group_key
     WHERE team_id = 2
       AND e.event = '$pageview'
       AND toDateTime(e.timestamp) >= toDateTime('2020-06-07 00:00:00')
       AND toDateTime(e.timestamp) <= toDateTime('2020-07-27 00:00:00')
       AND JSONHas(group_properties_0, 'industry') ) reference_event ON (event.person_id = reference_event.person_id)
  WHERE toStartOfWeek(event.event_date) > toStartOfWeek(reference_event.event_date)
  GROUP BY base_interval,
           intervals_from_base
  ORDER BY base_interval,
           intervals_from_base
  '
---
# name: TestClickhouseRetention.test_groups_filtering.3
  '
  
  SELECT datediff('Week', toStartOfWeek(toDateTime('2020-06-07 00:00:00')), event_date) event_date,
         count(DISTINCT person_id)
  FROM
    (SELECT DISTINCT toStartOfWeek(e.timestamp) AS event_date,
                     pdi.person_id as person_id,
                     e.uuid AS uuid,
                     e.event AS event
     FROM events e
     INNER JOIN
       (SELECT distinct_id,
               argMax(person_id, _timestamp) as person_id
        FROM
          (SELECT distinct_id,
                  person_id,
                  max(_timestamp) as _timestamp
           FROM person_distinct_id
           WHERE team_id = 2
           GROUP BY person_id,
                    distinct_id,
                    team_id
           HAVING max(is_deleted) = 0)
        GROUP BY distinct_id) AS pdi ON events.distinct_id = pdi.distinct_id
     INNER JOIN
       (SELECT group_key,
               argMax(group_properties, _timestamp) AS group_properties_0
        FROM groups
        WHERE team_id = 2
          AND group_type_index = 0
        GROUP BY group_key) groups_0 ON JSONExtractString(properties, '$group_0') == groups_0.group_key
     WHERE team_id = 2
       AND e.event = '$pageview'
       AND toDateTime(e.timestamp) >= toDateTime('2020-06-07 00:00:00')
       AND toDateTime(e.timestamp) <= toDateTime('2020-07-27 00:00:00')
       AND JSONHas(group_properties_0, 'industry') )
  GROUP BY event_date
  ORDER BY event_date
  '
---
