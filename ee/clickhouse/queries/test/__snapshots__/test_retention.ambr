# name: TestClickhouseRetention.test_groups_aggregating_person_on_events
  '
  WITH actor_query AS
    (WITH 'week' as period,
          NULL as breakdown_values_filter,
          NULL as selected_interval,
          returning_event_query as
       (SELECT toStartOfWeek(toDateTime(e.timestamp, 'UTC')) AS event_date,
               e."$group_0" as target
        FROM events e
        WHERE team_id = 2
          AND e.event = '$pageview'
          AND toDateTime(e.timestamp) >= toDateTime('2020-06-07 00:00:00')
          AND toDateTime(e.timestamp) <= toDateTime('2020-07-27 00:00:00')
          AND (NOT has([''], "$group_0"))
          AND e.person_id != toUUIDOrZero('')
        GROUP BY target,
                 event_date),
          target_event_query as
       (SELECT DISTINCT toStartOfWeek(toDateTime(e.timestamp, 'UTC')) AS event_date,
                        e."$group_0" as target,
                        [
                          dateDiff(
                              'Week',
                              toStartOfWeek(toDateTime('2020-06-07 00:00:00')),
                              toStartOfWeek(e.timestamp)
                          )
                      ] as breakdown_values
        FROM events e
        WHERE team_id = 2
          AND e.event = '$pageview'
          AND toDateTime(e.timestamp) >= toDateTime('2020-06-07 00:00:00')
          AND toDateTime(e.timestamp) <= toDateTime('2020-07-27 00:00:00')
          AND (NOT has([''], "$group_0"))
          AND e.person_id != toUUIDOrZero('') ) SELECT DISTINCT breakdown_values,
                                                                intervals_from_base,
                                                                actor_id
     FROM
       (SELECT target_event.breakdown_values AS breakdown_values,
               datediff(period, target_event.event_date, returning_event.event_date) AS intervals_from_base,
               returning_event.target AS actor_id
        FROM target_event_query AS target_event
        JOIN returning_event_query AS returning_event ON returning_event.target = target_event.target
        WHERE returning_event.event_date > target_event.event_date
        UNION ALL SELECT target_event.breakdown_values AS breakdown_values,
                         0 AS intervals_from_base,
                         target_event.target AS actor_id
        FROM target_event_query AS target_event)
     WHERE (breakdown_values_filter is NULL
            OR breakdown_values = breakdown_values_filter)
       AND (selected_interval is NULL
            OR intervals_from_base = selected_interval) )
  SELECT actor_activity.breakdown_values AS breakdown_values,
         actor_activity.intervals_from_base AS intervals_from_base,
         COUNT(DISTINCT actor_activity.actor_id) AS count
  FROM actor_query AS actor_activity
  GROUP BY breakdown_values,
           intervals_from_base
  ORDER BY breakdown_values,
           intervals_from_base
  '
---
# name: TestClickhouseRetention.test_groups_aggregating_person_on_events.1
  '
  
  SELECT actor_id,
         groupArray(actor_activity.intervals_from_base) AS appearances
  FROM
    (WITH 'week' as period,
          [0] as breakdown_values_filter,
          NULL as selected_interval,
          returning_event_query as
       (SELECT toStartOfWeek(toDateTime(e.timestamp, 'UTC')) AS event_date,
               e."$group_0" as target
        FROM events e
        WHERE team_id = 2
          AND e.event = '$pageview'
          AND toDateTime(e.timestamp) >= toDateTime('2020-06-07 00:00:00')
          AND toDateTime(e.timestamp) <= toDateTime('2020-07-27 00:00:00')
          AND (NOT has([''], "$group_0"))
          AND e.person_id != toUUIDOrZero('')
        GROUP BY target,
                 event_date),
          target_event_query as
       (SELECT DISTINCT toStartOfWeek(toDateTime(e.timestamp, 'UTC')) AS event_date,
                        e."$group_0" as target,
                        [
                          dateDiff(
                              'Week',
                              toStartOfWeek(toDateTime('2020-06-07 00:00:00')),
                              toStartOfWeek(e.timestamp)
                          )
                      ] as breakdown_values
        FROM events e
        WHERE team_id = 2
          AND e.event = '$pageview'
          AND toDateTime(e.timestamp) >= toDateTime('2020-06-07 00:00:00')
          AND toDateTime(e.timestamp) <= toDateTime('2020-07-27 00:00:00')
          AND (NOT has([''], "$group_0"))
          AND e.person_id != toUUIDOrZero('') ) SELECT DISTINCT breakdown_values,
                                                                intervals_from_base,
                                                                actor_id
     FROM
       (SELECT target_event.breakdown_values AS breakdown_values,
               datediff(period, target_event.event_date, returning_event.event_date) AS intervals_from_base,
               returning_event.target AS actor_id
        FROM target_event_query AS target_event
        JOIN returning_event_query AS returning_event ON returning_event.target = target_event.target
        WHERE returning_event.event_date > target_event.event_date
        UNION ALL SELECT target_event.breakdown_values AS breakdown_values,
                         0 AS intervals_from_base,
                         target_event.target AS actor_id
        FROM target_event_query AS target_event)
     WHERE (breakdown_values_filter is NULL
            OR breakdown_values = breakdown_values_filter)
       AND (selected_interval is NULL
            OR intervals_from_base = selected_interval) ) AS actor_activity
  GROUP BY actor_id
  ORDER BY length(appearances) DESC, actor_id
  LIMIT 100
  OFFSET 0
  '
---
# name: TestClickhouseRetention.test_groups_aggregating_person_on_events.2
  '
  WITH actor_query AS
    (WITH 'week' as period,
          NULL as breakdown_values_filter,
          NULL as selected_interval,
          returning_event_query as
       (SELECT toStartOfWeek(toDateTime(e.timestamp, 'UTC')) AS event_date,
               e."$group_1" as target
        FROM events e
        WHERE team_id = 2
          AND e.event = '$pageview'
          AND toDateTime(e.timestamp) >= toDateTime('2020-06-07 00:00:00')
          AND toDateTime(e.timestamp) <= toDateTime('2020-07-27 00:00:00')
          AND (NOT has([''], "$group_1"))
          AND e.person_id != toUUIDOrZero('')
        GROUP BY target,
                 event_date),
          target_event_query as
       (SELECT DISTINCT toStartOfWeek(toDateTime(e.timestamp, 'UTC')) AS event_date,
                        e."$group_1" as target,
                        [
                          dateDiff(
                              'Week',
                              toStartOfWeek(toDateTime('2020-06-07 00:00:00')),
                              toStartOfWeek(e.timestamp)
                          )
                      ] as breakdown_values
        FROM events e
        WHERE team_id = 2
          AND e.event = '$pageview'
          AND toDateTime(e.timestamp) >= toDateTime('2020-06-07 00:00:00')
          AND toDateTime(e.timestamp) <= toDateTime('2020-07-27 00:00:00')
          AND (NOT has([''], "$group_1"))
          AND e.person_id != toUUIDOrZero('') ) SELECT DISTINCT breakdown_values,
                                                                intervals_from_base,
                                                                actor_id
     FROM
       (SELECT target_event.breakdown_values AS breakdown_values,
               datediff(period, target_event.event_date, returning_event.event_date) AS intervals_from_base,
               returning_event.target AS actor_id
        FROM target_event_query AS target_event
        JOIN returning_event_query AS returning_event ON returning_event.target = target_event.target
        WHERE returning_event.event_date > target_event.event_date
        UNION ALL SELECT target_event.breakdown_values AS breakdown_values,
                         0 AS intervals_from_base,
                         target_event.target AS actor_id
        FROM target_event_query AS target_event)
     WHERE (breakdown_values_filter is NULL
            OR breakdown_values = breakdown_values_filter)
       AND (selected_interval is NULL
            OR intervals_from_base = selected_interval) )
  SELECT actor_activity.breakdown_values AS breakdown_values,
         actor_activity.intervals_from_base AS intervals_from_base,
         COUNT(DISTINCT actor_activity.actor_id) AS count
  FROM actor_query AS actor_activity
  GROUP BY breakdown_values,
           intervals_from_base
  ORDER BY breakdown_values,
           intervals_from_base
  '
---
# name: TestClickhouseRetention.test_groups_aggregating_person_on_events_materialized
  '
  WITH actor_query AS
    (WITH 'week' as period,
          NULL as breakdown_values_filter,
          NULL as selected_interval,
          returning_event_query as
       (SELECT toStartOfWeek(toDateTime(e.timestamp, 'UTC')) AS event_date,
               e."$group_0" as target
        FROM events e
        WHERE team_id = 2
          AND e.event = '$pageview'
          AND toDateTime(e.timestamp) >= toDateTime('2020-06-07 00:00:00')
          AND toDateTime(e.timestamp) <= toDateTime('2020-07-27 00:00:00')
          AND (NOT has([''], "$group_0"))
          AND e.person_id != toUUIDOrZero('')
        GROUP BY target,
                 event_date),
          target_event_query as
       (SELECT DISTINCT toStartOfWeek(toDateTime(e.timestamp, 'UTC')) AS event_date,
                        e."$group_0" as target,
                        [
                          dateDiff(
                              'Week',
                              toStartOfWeek(toDateTime('2020-06-07 00:00:00')),
                              toStartOfWeek(e.timestamp)
                          )
                      ] as breakdown_values
        FROM events e
        WHERE team_id = 2
          AND e.event = '$pageview'
          AND toDateTime(e.timestamp) >= toDateTime('2020-06-07 00:00:00')
          AND toDateTime(e.timestamp) <= toDateTime('2020-07-27 00:00:00')
          AND (NOT has([''], "$group_0"))
          AND e.person_id != toUUIDOrZero('') ) SELECT DISTINCT breakdown_values,
                                                                intervals_from_base,
                                                                actor_id
     FROM
       (SELECT target_event.breakdown_values AS breakdown_values,
               datediff(period, target_event.event_date, returning_event.event_date) AS intervals_from_base,
               returning_event.target AS actor_id
        FROM target_event_query AS target_event
        JOIN returning_event_query AS returning_event ON returning_event.target = target_event.target
        WHERE returning_event.event_date > target_event.event_date
        UNION ALL SELECT target_event.breakdown_values AS breakdown_values,
                         0 AS intervals_from_base,
                         target_event.target AS actor_id
        FROM target_event_query AS target_event)
     WHERE (breakdown_values_filter is NULL
            OR breakdown_values = breakdown_values_filter)
       AND (selected_interval is NULL
            OR intervals_from_base = selected_interval) )
  SELECT actor_activity.breakdown_values AS breakdown_values,
         actor_activity.intervals_from_base AS intervals_from_base,
         COUNT(DISTINCT actor_activity.actor_id) AS count
  FROM actor_query AS actor_activity
  GROUP BY breakdown_values,
           intervals_from_base
  ORDER BY breakdown_values,
           intervals_from_base
  '
---
# name: TestClickhouseRetention.test_groups_aggregating_person_on_events_materialized.1
  '
  
  SELECT actor_id,
         groupArray(actor_activity.intervals_from_base) AS appearances
  FROM
    (WITH 'week' as period,
          [0] as breakdown_values_filter,
          NULL as selected_interval,
          returning_event_query as
       (SELECT toStartOfWeek(toDateTime(e.timestamp, 'UTC')) AS event_date,
               e."$group_0" as target
        FROM events e
        WHERE team_id = 2
          AND e.event = '$pageview'
          AND toDateTime(e.timestamp) >= toDateTime('2020-06-07 00:00:00')
          AND toDateTime(e.timestamp) <= toDateTime('2020-07-27 00:00:00')
          AND (NOT has([''], "$group_0"))
          AND e.person_id != toUUIDOrZero('')
        GROUP BY target,
                 event_date),
          target_event_query as
       (SELECT DISTINCT toStartOfWeek(toDateTime(e.timestamp, 'UTC')) AS event_date,
                        e."$group_0" as target,
                        [
                          dateDiff(
                              'Week',
                              toStartOfWeek(toDateTime('2020-06-07 00:00:00')),
                              toStartOfWeek(e.timestamp)
                          )
                      ] as breakdown_values
        FROM events e
        WHERE team_id = 2
          AND e.event = '$pageview'
          AND toDateTime(e.timestamp) >= toDateTime('2020-06-07 00:00:00')
          AND toDateTime(e.timestamp) <= toDateTime('2020-07-27 00:00:00')
          AND (NOT has([''], "$group_0"))
          AND e.person_id != toUUIDOrZero('') ) SELECT DISTINCT breakdown_values,
                                                                intervals_from_base,
                                                                actor_id
     FROM
       (SELECT target_event.breakdown_values AS breakdown_values,
               datediff(period, target_event.event_date, returning_event.event_date) AS intervals_from_base,
               returning_event.target AS actor_id
        FROM target_event_query AS target_event
        JOIN returning_event_query AS returning_event ON returning_event.target = target_event.target
        WHERE returning_event.event_date > target_event.event_date
        UNION ALL SELECT target_event.breakdown_values AS breakdown_values,
                         0 AS intervals_from_base,
                         target_event.target AS actor_id
        FROM target_event_query AS target_event)
     WHERE (breakdown_values_filter is NULL
            OR breakdown_values = breakdown_values_filter)
       AND (selected_interval is NULL
            OR intervals_from_base = selected_interval) ) AS actor_activity
  GROUP BY actor_id
  ORDER BY length(appearances) DESC, actor_id
  LIMIT 100
  OFFSET 0
  '
---
# name: TestClickhouseRetention.test_groups_aggregating_person_on_events_materialized.2
  '
  WITH actor_query AS
    (WITH 'week' as period,
          NULL as breakdown_values_filter,
          NULL as selected_interval,
          returning_event_query as
       (SELECT toStartOfWeek(toDateTime(e.timestamp, 'UTC')) AS event_date,
               e."$group_1" as target
        FROM events e
        WHERE team_id = 2
          AND e.event = '$pageview'
          AND toDateTime(e.timestamp) >= toDateTime('2020-06-07 00:00:00')
          AND toDateTime(e.timestamp) <= toDateTime('2020-07-27 00:00:00')
          AND (NOT has([''], "$group_1"))
          AND e.person_id != toUUIDOrZero('')
        GROUP BY target,
                 event_date),
          target_event_query as
       (SELECT DISTINCT toStartOfWeek(toDateTime(e.timestamp, 'UTC')) AS event_date,
                        e."$group_1" as target,
                        [
                          dateDiff(
                              'Week',
                              toStartOfWeek(toDateTime('2020-06-07 00:00:00')),
                              toStartOfWeek(e.timestamp)
                          )
                      ] as breakdown_values
        FROM events e
        WHERE team_id = 2
          AND e.event = '$pageview'
          AND toDateTime(e.timestamp) >= toDateTime('2020-06-07 00:00:00')
          AND toDateTime(e.timestamp) <= toDateTime('2020-07-27 00:00:00')
          AND (NOT has([''], "$group_1"))
          AND e.person_id != toUUIDOrZero('') ) SELECT DISTINCT breakdown_values,
                                                                intervals_from_base,
                                                                actor_id
     FROM
       (SELECT target_event.breakdown_values AS breakdown_values,
               datediff(period, target_event.event_date, returning_event.event_date) AS intervals_from_base,
               returning_event.target AS actor_id
        FROM target_event_query AS target_event
        JOIN returning_event_query AS returning_event ON returning_event.target = target_event.target
        WHERE returning_event.event_date > target_event.event_date
        UNION ALL SELECT target_event.breakdown_values AS breakdown_values,
                         0 AS intervals_from_base,
                         target_event.target AS actor_id
        FROM target_event_query AS target_event)
     WHERE (breakdown_values_filter is NULL
            OR breakdown_values = breakdown_values_filter)
       AND (selected_interval is NULL
            OR intervals_from_base = selected_interval) )
  SELECT actor_activity.breakdown_values AS breakdown_values,
         actor_activity.intervals_from_base AS intervals_from_base,
         COUNT(DISTINCT actor_activity.actor_id) AS count
  FROM actor_query AS actor_activity
  GROUP BY breakdown_values,
           intervals_from_base
  ORDER BY breakdown_values,
           intervals_from_base
  '
---
# name: TestClickhouseRetention.test_groups_filtering_person_on_events
  '
  WITH actor_query AS
    (WITH 'week' as period,
          NULL as breakdown_values_filter,
          NULL as selected_interval,
          returning_event_query as
       (SELECT toStartOfWeek(toDateTime(e.timestamp, 'UTC')) AS event_date,
               e.person_id as target
        FROM events e
        WHERE team_id = 2
          AND e.event = '$pageview'
          AND toDateTime(e.timestamp) >= toDateTime('2020-06-07 00:00:00')
          AND toDateTime(e.timestamp) <= toDateTime('2020-07-27 00:00:00')
          AND (has(['technology'], replaceRegexpAll(JSONExtractRaw(group0_properties, 'industry'), '^"|"$', '')))
          AND e.person_id != toUUIDOrZero('')
        GROUP BY target,
                 event_date),
          target_event_query as
       (SELECT DISTINCT toStartOfWeek(toDateTime(e.timestamp, 'UTC')) AS event_date,
                        e.person_id as target,
                        [
                          dateDiff(
                              'Week',
                              toStartOfWeek(toDateTime('2020-06-07 00:00:00')),
                              toStartOfWeek(e.timestamp)
                          )
                      ] as breakdown_values
        FROM events e
        WHERE team_id = 2
          AND e.event = '$pageview'
          AND toDateTime(e.timestamp) >= toDateTime('2020-06-07 00:00:00')
          AND toDateTime(e.timestamp) <= toDateTime('2020-07-27 00:00:00')
          AND (has(['technology'], replaceRegexpAll(JSONExtractRaw(group0_properties, 'industry'), '^"|"$', '')))
          AND e.person_id != toUUIDOrZero('') ) SELECT DISTINCT breakdown_values,
                                                                intervals_from_base,
                                                                actor_id
     FROM
       (SELECT target_event.breakdown_values AS breakdown_values,
               datediff(period, target_event.event_date, returning_event.event_date) AS intervals_from_base,
               returning_event.target AS actor_id
        FROM target_event_query AS target_event
        JOIN returning_event_query AS returning_event ON returning_event.target = target_event.target
        WHERE returning_event.event_date > target_event.event_date
        UNION ALL SELECT target_event.breakdown_values AS breakdown_values,
                         0 AS intervals_from_base,
                         target_event.target AS actor_id
        FROM target_event_query AS target_event)
     WHERE (breakdown_values_filter is NULL
            OR breakdown_values = breakdown_values_filter)
       AND (selected_interval is NULL
            OR intervals_from_base = selected_interval) )
  SELECT actor_activity.breakdown_values AS breakdown_values,
         actor_activity.intervals_from_base AS intervals_from_base,
         COUNT(DISTINCT actor_activity.actor_id) AS count
  FROM actor_query AS actor_activity
  GROUP BY breakdown_values,
           intervals_from_base
  ORDER BY breakdown_values,
           intervals_from_base
  '
---
# name: TestClickhouseRetention.test_groups_filtering_person_on_events.1
  '
  WITH actor_query AS
    (WITH 'week' as period,
          NULL as breakdown_values_filter,
          NULL as selected_interval,
          returning_event_query as
       (SELECT toStartOfWeek(toDateTime(e.timestamp, 'UTC')) AS event_date,
               e.person_id as target
        FROM events e
        WHERE team_id = 2
          AND e.event = '$pageview'
          AND toDateTime(e.timestamp) >= toDateTime('2020-06-07 00:00:00')
          AND toDateTime(e.timestamp) <= toDateTime('2020-07-27 00:00:00')
          AND (JSONHas(group0_properties, 'industry'))
          AND e.person_id != toUUIDOrZero('')
        GROUP BY target,
                 event_date),
          target_event_query as
       (SELECT DISTINCT toStartOfWeek(toDateTime(e.timestamp, 'UTC')) AS event_date,
                        e.person_id as target,
                        [
                          dateDiff(
                              'Week',
                              toStartOfWeek(toDateTime('2020-06-07 00:00:00')),
                              toStartOfWeek(e.timestamp)
                          )
                      ] as breakdown_values
        FROM events e
        WHERE team_id = 2
          AND e.event = '$pageview'
          AND toDateTime(e.timestamp) >= toDateTime('2020-06-07 00:00:00')
          AND toDateTime(e.timestamp) <= toDateTime('2020-07-27 00:00:00')
          AND (JSONHas(group0_properties, 'industry'))
          AND e.person_id != toUUIDOrZero('') ) SELECT DISTINCT breakdown_values,
                                                                intervals_from_base,
                                                                actor_id
     FROM
       (SELECT target_event.breakdown_values AS breakdown_values,
               datediff(period, target_event.event_date, returning_event.event_date) AS intervals_from_base,
               returning_event.target AS actor_id
        FROM target_event_query AS target_event
        JOIN returning_event_query AS returning_event ON returning_event.target = target_event.target
        WHERE returning_event.event_date > target_event.event_date
        UNION ALL SELECT target_event.breakdown_values AS breakdown_values,
                         0 AS intervals_from_base,
                         target_event.target AS actor_id
        FROM target_event_query AS target_event)
     WHERE (breakdown_values_filter is NULL
            OR breakdown_values = breakdown_values_filter)
       AND (selected_interval is NULL
            OR intervals_from_base = selected_interval) )
  SELECT actor_activity.breakdown_values AS breakdown_values,
         actor_activity.intervals_from_base AS intervals_from_base,
         COUNT(DISTINCT actor_activity.actor_id) AS count
  FROM actor_query AS actor_activity
  GROUP BY breakdown_values,
           intervals_from_base
  ORDER BY breakdown_values,
           intervals_from_base
  '
---
# name: TestClickhouseRetention.test_groups_filtering_person_on_events_materialized
  '
  WITH actor_query AS
    (WITH 'week' as period,
          NULL as breakdown_values_filter,
          NULL as selected_interval,
          returning_event_query as
       (SELECT toStartOfWeek(toDateTime(e.timestamp, 'UTC')) AS event_date,
               e.person_id as target
        FROM events e
        WHERE team_id = 2
          AND e.event = '$pageview'
          AND toDateTime(e.timestamp) >= toDateTime('2020-06-07 00:00:00')
          AND toDateTime(e.timestamp) <= toDateTime('2020-07-27 00:00:00')
          AND (has(['technology'], "mat_gp0_industry"))
          AND e.person_id != toUUIDOrZero('')
        GROUP BY target,
                 event_date),
          target_event_query as
       (SELECT DISTINCT toStartOfWeek(toDateTime(e.timestamp, 'UTC')) AS event_date,
                        e.person_id as target,
                        [
                          dateDiff(
                              'Week',
                              toStartOfWeek(toDateTime('2020-06-07 00:00:00')),
                              toStartOfWeek(e.timestamp)
                          )
                      ] as breakdown_values
        FROM events e
        WHERE team_id = 2
          AND e.event = '$pageview'
          AND toDateTime(e.timestamp) >= toDateTime('2020-06-07 00:00:00')
          AND toDateTime(e.timestamp) <= toDateTime('2020-07-27 00:00:00')
          AND (has(['technology'], "mat_gp0_industry"))
          AND e.person_id != toUUIDOrZero('') ) SELECT DISTINCT breakdown_values,
                                                                intervals_from_base,
                                                                actor_id
     FROM
       (SELECT target_event.breakdown_values AS breakdown_values,
               datediff(period, target_event.event_date, returning_event.event_date) AS intervals_from_base,
               returning_event.target AS actor_id
        FROM target_event_query AS target_event
        JOIN returning_event_query AS returning_event ON returning_event.target = target_event.target
        WHERE returning_event.event_date > target_event.event_date
        UNION ALL SELECT target_event.breakdown_values AS breakdown_values,
                         0 AS intervals_from_base,
                         target_event.target AS actor_id
        FROM target_event_query AS target_event)
     WHERE (breakdown_values_filter is NULL
            OR breakdown_values = breakdown_values_filter)
       AND (selected_interval is NULL
            OR intervals_from_base = selected_interval) )
  SELECT actor_activity.breakdown_values AS breakdown_values,
         actor_activity.intervals_from_base AS intervals_from_base,
         COUNT(DISTINCT actor_activity.actor_id) AS count
  FROM actor_query AS actor_activity
  GROUP BY breakdown_values,
           intervals_from_base
  ORDER BY breakdown_values,
           intervals_from_base
  '
---
# name: TestClickhouseRetention.test_groups_filtering_person_on_events_materialized.1
  '
  WITH actor_query AS
    (WITH 'week' as period,
          NULL as breakdown_values_filter,
          NULL as selected_interval,
          returning_event_query as
       (SELECT toStartOfWeek(toDateTime(e.timestamp, 'UTC')) AS event_date,
               e.person_id as target
        FROM events e
        WHERE team_id = 2
          AND e.event = '$pageview'
          AND toDateTime(e.timestamp) >= toDateTime('2020-06-07 00:00:00')
          AND toDateTime(e.timestamp) <= toDateTime('2020-07-27 00:00:00')
          AND (notEmpty("mat_gp0_industry"))
          AND e.person_id != toUUIDOrZero('')
        GROUP BY target,
                 event_date),
          target_event_query as
       (SELECT DISTINCT toStartOfWeek(toDateTime(e.timestamp, 'UTC')) AS event_date,
                        e.person_id as target,
                        [
                          dateDiff(
                              'Week',
                              toStartOfWeek(toDateTime('2020-06-07 00:00:00')),
                              toStartOfWeek(e.timestamp)
                          )
                      ] as breakdown_values
        FROM events e
        WHERE team_id = 2
          AND e.event = '$pageview'
          AND toDateTime(e.timestamp) >= toDateTime('2020-06-07 00:00:00')
          AND toDateTime(e.timestamp) <= toDateTime('2020-07-27 00:00:00')
          AND (notEmpty("mat_gp0_industry"))
          AND e.person_id != toUUIDOrZero('') ) SELECT DISTINCT breakdown_values,
                                                                intervals_from_base,
                                                                actor_id
     FROM
       (SELECT target_event.breakdown_values AS breakdown_values,
               datediff(period, target_event.event_date, returning_event.event_date) AS intervals_from_base,
               returning_event.target AS actor_id
        FROM target_event_query AS target_event
        JOIN returning_event_query AS returning_event ON returning_event.target = target_event.target
        WHERE returning_event.event_date > target_event.event_date
        UNION ALL SELECT target_event.breakdown_values AS breakdown_values,
                         0 AS intervals_from_base,
                         target_event.target AS actor_id
        FROM target_event_query AS target_event)
     WHERE (breakdown_values_filter is NULL
            OR breakdown_values = breakdown_values_filter)
       AND (selected_interval is NULL
            OR intervals_from_base = selected_interval) )
  SELECT actor_activity.breakdown_values AS breakdown_values,
         actor_activity.intervals_from_base AS intervals_from_base,
         COUNT(DISTINCT actor_activity.actor_id) AS count
  FROM actor_query AS actor_activity
  GROUP BY breakdown_values,
           intervals_from_base
  ORDER BY breakdown_values,
           intervals_from_base
  '
---
# name: TestClickhouseRetention.test_groups_in_period_person_on_events
  '
  
  SELECT actor_id,
         groupArray(actor_activity.intervals_from_base) AS appearances
  FROM
    (WITH 'week' as period,
          [0] as breakdown_values_filter,
          NULL as selected_interval,
          returning_event_query as
       (SELECT toStartOfWeek(toDateTime(e.timestamp, 'UTC')) AS event_date,
               e."$group_0" as target
        FROM events e
        WHERE team_id = 2
          AND e.event = '$pageview'
          AND toDateTime(e.timestamp) >= toDateTime('2020-06-07 00:00:00')
          AND toDateTime(e.timestamp) <= toDateTime('2020-07-27 00:00:00')
          AND (NOT has([''], "$group_0"))
          AND e.person_id != toUUIDOrZero('')
        GROUP BY target,
                 event_date),
          target_event_query as
       (SELECT DISTINCT toStartOfWeek(toDateTime(e.timestamp, 'UTC')) AS event_date,
                        e."$group_0" as target,
                        [
                          dateDiff(
                              'Week',
                              toStartOfWeek(toDateTime('2020-06-07 00:00:00')),
                              toStartOfWeek(e.timestamp)
                          )
                      ] as breakdown_values
        FROM events e
        WHERE team_id = 2
          AND e.event = '$pageview'
          AND toDateTime(e.timestamp) >= toDateTime('2020-06-07 00:00:00')
          AND toDateTime(e.timestamp) <= toDateTime('2020-07-27 00:00:00')
          AND (NOT has([''], "$group_0"))
          AND e.person_id != toUUIDOrZero('') ) SELECT DISTINCT breakdown_values,
                                                                intervals_from_base,
                                                                actor_id
     FROM
       (SELECT target_event.breakdown_values AS breakdown_values,
               datediff(period, target_event.event_date, returning_event.event_date) AS intervals_from_base,
               returning_event.target AS actor_id
        FROM target_event_query AS target_event
        JOIN returning_event_query AS returning_event ON returning_event.target = target_event.target
        WHERE returning_event.event_date > target_event.event_date
        UNION ALL SELECT target_event.breakdown_values AS breakdown_values,
                         0 AS intervals_from_base,
                         target_event.target AS actor_id
        FROM target_event_query AS target_event)
     WHERE (breakdown_values_filter is NULL
            OR breakdown_values = breakdown_values_filter)
       AND (selected_interval is NULL
            OR intervals_from_base = selected_interval) ) AS actor_activity
  GROUP BY actor_id
  ORDER BY length(appearances) DESC, actor_id
  LIMIT 100
  OFFSET 0
  '
---
# name: TestClickhouseRetention.test_groups_in_period_person_on_events_materialized
  '
  
  SELECT actor_id,
         groupArray(actor_activity.intervals_from_base) AS appearances
  FROM
    (WITH 'week' as period,
          [0] as breakdown_values_filter,
          NULL as selected_interval,
          returning_event_query as
       (SELECT toStartOfWeek(toDateTime(e.timestamp, 'UTC')) AS event_date,
               e."$group_0" as target
        FROM events e
        WHERE team_id = 2
          AND e.event = '$pageview'
          AND toDateTime(e.timestamp) >= toDateTime('2020-06-07 00:00:00')
          AND toDateTime(e.timestamp) <= toDateTime('2020-07-27 00:00:00')
          AND (NOT has([''], "$group_0"))
          AND e.person_id != toUUIDOrZero('')
        GROUP BY target,
                 event_date),
          target_event_query as
       (SELECT DISTINCT toStartOfWeek(toDateTime(e.timestamp, 'UTC')) AS event_date,
                        e."$group_0" as target,
                        [
                          dateDiff(
                              'Week',
                              toStartOfWeek(toDateTime('2020-06-07 00:00:00')),
                              toStartOfWeek(e.timestamp)
                          )
                      ] as breakdown_values
        FROM events e
        WHERE team_id = 2
          AND e.event = '$pageview'
          AND toDateTime(e.timestamp) >= toDateTime('2020-06-07 00:00:00')
          AND toDateTime(e.timestamp) <= toDateTime('2020-07-27 00:00:00')
          AND (NOT has([''], "$group_0"))
          AND e.person_id != toUUIDOrZero('') ) SELECT DISTINCT breakdown_values,
                                                                intervals_from_base,
                                                                actor_id
     FROM
       (SELECT target_event.breakdown_values AS breakdown_values,
               datediff(period, target_event.event_date, returning_event.event_date) AS intervals_from_base,
               returning_event.target AS actor_id
        FROM target_event_query AS target_event
        JOIN returning_event_query AS returning_event ON returning_event.target = target_event.target
        WHERE returning_event.event_date > target_event.event_date
        UNION ALL SELECT target_event.breakdown_values AS breakdown_values,
                         0 AS intervals_from_base,
                         target_event.target AS actor_id
        FROM target_event_query AS target_event)
     WHERE (breakdown_values_filter is NULL
            OR breakdown_values = breakdown_values_filter)
       AND (selected_interval is NULL
            OR intervals_from_base = selected_interval) ) AS actor_activity
  GROUP BY actor_id
  ORDER BY length(appearances) DESC, actor_id
  LIMIT 100
  OFFSET 0
  '
---
