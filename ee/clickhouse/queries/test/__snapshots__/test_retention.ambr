# name: TestClickhouseRetention.test_groups_aggregating
  '
  
  SELECT datediff('Week', toStartOfWeek(toDateTime('2020-06-07 00:00:00')), reference_event.event_date) as base_interval,
         datediff('Week', reference_event.event_date, toStartOfWeek(toDateTime(event_date))) as intervals_from_base,
         COUNT(DISTINCT event.target) count
  FROM
    (SELECT e.timestamp AS event_date,
            e.$group_0 as target,
            e.uuid AS uuid,
            e.event AS event
     FROM events e
     WHERE team_id = 2
       AND e.event = '$pageview'
       AND toDateTime(e.timestamp) >= toDateTime('2020-06-07 00:00:00')
       AND toDateTime(e.timestamp) <= toDateTime('2020-07-27 00:00:00')
       AND NOT has([''], $group_0) ) event
  JOIN
    (SELECT DISTINCT toStartOfWeek(e.timestamp) AS event_date,
                     e.$group_0 as target,
                     e.uuid AS uuid,
                     e.event AS event
     FROM events e
     WHERE team_id = 2
       AND e.event = '$pageview'
       AND toDateTime(e.timestamp) >= toDateTime('2020-06-07 00:00:00')
       AND toDateTime(e.timestamp) <= toDateTime('2020-07-27 00:00:00')
       AND NOT has([''], $group_0) ) reference_event ON (event.target = reference_event.target)
  WHERE toStartOfWeek(event.event_date) > toStartOfWeek(reference_event.event_date)
  GROUP BY base_interval,
           intervals_from_base
  ORDER BY base_interval,
           intervals_from_base
  '
---
# name: TestClickhouseRetention.test_groups_aggregating.1
  '
  
  SELECT datediff('Week', toStartOfWeek(toDateTime('2020-06-07 00:00:00')), event_date) event_date,
         count(DISTINCT target)
  FROM
    (SELECT DISTINCT toStartOfWeek(e.timestamp) AS event_date,
                     e.$group_0 as target,
                     e.uuid AS uuid,
                     e.event AS event
     FROM events e
     WHERE team_id = 2
       AND e.event = '$pageview'
       AND toDateTime(e.timestamp) >= toDateTime('2020-06-07 00:00:00')
       AND toDateTime(e.timestamp) <= toDateTime('2020-07-27 00:00:00')
       AND NOT has([''], $group_0) )
  GROUP BY event_date
  ORDER BY event_date
  '
---
# name: TestClickhouseRetention.test_groups_aggregating.2
  '
  
  SELECT DISTINCT e.$group_0 AS actor_id
  FROM events e
  where toDateTime(e.timestamp) >= toDateTime('2020-06-07 00:00:00')
    AND toDateTime(e.timestamp) <= toDateTime('2020-06-14 00:00:00')
    AND e.team_id = 2
    AND actor_id IN
      (SELECT target
       FROM
         (SELECT DISTINCT toStartOfWeek(e.timestamp) AS event_date,
                          e.$group_0 as target,
                          e.uuid AS uuid,
                          e.event AS event
          FROM events e
          WHERE team_id = 2
            AND e.event = '$pageview'
            AND toDateTime(e.timestamp) >= toDateTime('2020-06-07 00:00:00')
            AND toDateTime(e.timestamp) <= toDateTime('2020-06-14 00:00:00')
            AND NOT has([''], $group_0) ) as actors)
    AND e.event = '$pageview'
    AND NOT has([''], $group_0)
  LIMIT 100
  OFFSET 0
  '
---
# name: TestClickhouseRetention.test_groups_aggregating.3
  '
  
  SELECT datediff('Week', toStartOfWeek(toDateTime('2020-06-07 00:00:00')), reference_event.event_date) as base_interval,
         datediff('Week', reference_event.event_date, toStartOfWeek(toDateTime(event_date))) as intervals_from_base,
         COUNT(DISTINCT event.target) count
  FROM
    (SELECT e.timestamp AS event_date,
            e.$group_1 as target,
            e.uuid AS uuid,
            e.event AS event
     FROM events e
     WHERE team_id = 2
       AND e.event = '$pageview'
       AND toDateTime(e.timestamp) >= toDateTime('2020-06-07 00:00:00')
       AND toDateTime(e.timestamp) <= toDateTime('2020-07-27 00:00:00')
       AND NOT has([''], $group_1) ) event
  JOIN
    (SELECT DISTINCT toStartOfWeek(e.timestamp) AS event_date,
                     e.$group_1 as target,
                     e.uuid AS uuid,
                     e.event AS event
     FROM events e
     WHERE team_id = 2
       AND e.event = '$pageview'
       AND toDateTime(e.timestamp) >= toDateTime('2020-06-07 00:00:00')
       AND toDateTime(e.timestamp) <= toDateTime('2020-07-27 00:00:00')
       AND NOT has([''], $group_1) ) reference_event ON (event.target = reference_event.target)
  WHERE toStartOfWeek(event.event_date) > toStartOfWeek(reference_event.event_date)
  GROUP BY base_interval,
           intervals_from_base
  ORDER BY base_interval,
           intervals_from_base
  '
---
# name: TestClickhouseRetention.test_groups_aggregating.4
  '
  
  SELECT datediff('Week', toStartOfWeek(toDateTime('2020-06-07 00:00:00')), event_date) event_date,
         count(DISTINCT target)
  FROM
    (SELECT DISTINCT toStartOfWeek(e.timestamp) AS event_date,
                     e.$group_1 as target,
                     e.uuid AS uuid,
                     e.event AS event
     FROM events e
     WHERE team_id = 2
       AND e.event = '$pageview'
       AND toDateTime(e.timestamp) >= toDateTime('2020-06-07 00:00:00')
       AND toDateTime(e.timestamp) <= toDateTime('2020-07-27 00:00:00')
       AND NOT has([''], $group_1) )
  GROUP BY event_date
  ORDER BY event_date
  '
---
# name: TestClickhouseRetention.test_groups_filtering
  '
  
  SELECT datediff('Week', toStartOfWeek(toDateTime('2020-06-07 00:00:00')), reference_event.event_date) as base_interval,
         datediff('Week', reference_event.event_date, toStartOfWeek(toDateTime(event_date))) as intervals_from_base,
         COUNT(DISTINCT event.target) count
  FROM
    (SELECT e.timestamp AS event_date,
            pdi.person_id as target,
            e.uuid AS uuid,
            e.event AS event
     FROM events e
     INNER JOIN
       (SELECT distinct_id,
               argMax(person_id, _timestamp) as person_id
        FROM
          (SELECT distinct_id,
                  person_id,
                  max(_timestamp) as _timestamp
           FROM person_distinct_id
           WHERE team_id = 2
           GROUP BY person_id,
                    distinct_id,
                    team_id
           HAVING max(is_deleted) = 0)
        GROUP BY distinct_id) AS pdi ON events.distinct_id = pdi.distinct_id
     INNER JOIN
       (SELECT group_key,
               argMax(group_properties, _timestamp) AS group_properties_0
        FROM groups
        WHERE team_id = 2
          AND group_type_index = 0
        GROUP BY group_key) groups_0 ON $group_0 == groups_0.group_key
     WHERE team_id = 2
       AND e.event = '$pageview'
       AND toDateTime(e.timestamp) >= toDateTime('2020-06-07 00:00:00')
       AND toDateTime(e.timestamp) <= toDateTime('2020-07-27 00:00:00')
       AND has(['technology'], trim(BOTH '"'
                                    FROM JSONExtractRaw(group_properties_0, 'industry'))) ) event
  JOIN
    (SELECT DISTINCT toStartOfWeek(e.timestamp) AS event_date,
                     pdi.person_id as target,
                     e.uuid AS uuid,
                     e.event AS event
     FROM events e
     INNER JOIN
       (SELECT distinct_id,
               argMax(person_id, _timestamp) as person_id
        FROM
          (SELECT distinct_id,
                  person_id,
                  max(_timestamp) as _timestamp
           FROM person_distinct_id
           WHERE team_id = 2
           GROUP BY person_id,
                    distinct_id,
                    team_id
           HAVING max(is_deleted) = 0)
        GROUP BY distinct_id) AS pdi ON events.distinct_id = pdi.distinct_id
     INNER JOIN
       (SELECT group_key,
               argMax(group_properties, _timestamp) AS group_properties_0
        FROM groups
        WHERE team_id = 2
          AND group_type_index = 0
        GROUP BY group_key) groups_0 ON $group_0 == groups_0.group_key
     WHERE team_id = 2
       AND e.event = '$pageview'
       AND toDateTime(e.timestamp) >= toDateTime('2020-06-07 00:00:00')
       AND toDateTime(e.timestamp) <= toDateTime('2020-07-27 00:00:00')
       AND has(['technology'], trim(BOTH '"'
                                    FROM JSONExtractRaw(group_properties_0, 'industry'))) ) reference_event ON (event.target = reference_event.target)
  WHERE toStartOfWeek(event.event_date) > toStartOfWeek(reference_event.event_date)
  GROUP BY base_interval,
           intervals_from_base
  ORDER BY base_interval,
           intervals_from_base
  '
---
# name: TestClickhouseRetention.test_groups_filtering.1
  '
  
  SELECT datediff('Week', toStartOfWeek(toDateTime('2020-06-07 00:00:00')), event_date) event_date,
         count(DISTINCT target)
  FROM
    (SELECT DISTINCT toStartOfWeek(e.timestamp) AS event_date,
                     pdi.person_id as target,
                     e.uuid AS uuid,
                     e.event AS event
     FROM events e
     INNER JOIN
       (SELECT distinct_id,
               argMax(person_id, _timestamp) as person_id
        FROM
          (SELECT distinct_id,
                  person_id,
                  max(_timestamp) as _timestamp
           FROM person_distinct_id
           WHERE team_id = 2
           GROUP BY person_id,
                    distinct_id,
                    team_id
           HAVING max(is_deleted) = 0)
        GROUP BY distinct_id) AS pdi ON events.distinct_id = pdi.distinct_id
     INNER JOIN
       (SELECT group_key,
               argMax(group_properties, _timestamp) AS group_properties_0
        FROM groups
        WHERE team_id = 2
          AND group_type_index = 0
        GROUP BY group_key) groups_0 ON $group_0 == groups_0.group_key
     WHERE team_id = 2
       AND e.event = '$pageview'
       AND toDateTime(e.timestamp) >= toDateTime('2020-06-07 00:00:00')
       AND toDateTime(e.timestamp) <= toDateTime('2020-07-27 00:00:00')
       AND has(['technology'], trim(BOTH '"'
                                    FROM JSONExtractRaw(group_properties_0, 'industry'))) )
  GROUP BY event_date
  ORDER BY event_date
  '
---
# name: TestClickhouseRetention.test_groups_filtering.2
  '
  
  SELECT datediff('Week', toStartOfWeek(toDateTime('2020-06-07 00:00:00')), reference_event.event_date) as base_interval,
         datediff('Week', reference_event.event_date, toStartOfWeek(toDateTime(event_date))) as intervals_from_base,
         COUNT(DISTINCT event.target) count
  FROM
    (SELECT e.timestamp AS event_date,
            pdi.person_id as target,
            e.uuid AS uuid,
            e.event AS event
     FROM events e
     INNER JOIN
       (SELECT distinct_id,
               argMax(person_id, _timestamp) as person_id
        FROM
          (SELECT distinct_id,
                  person_id,
                  max(_timestamp) as _timestamp
           FROM person_distinct_id
           WHERE team_id = 2
           GROUP BY person_id,
                    distinct_id,
                    team_id
           HAVING max(is_deleted) = 0)
        GROUP BY distinct_id) AS pdi ON events.distinct_id = pdi.distinct_id
     INNER JOIN
       (SELECT group_key,
               argMax(group_properties, _timestamp) AS group_properties_0
        FROM groups
        WHERE team_id = 2
          AND group_type_index = 0
        GROUP BY group_key) groups_0 ON $group_0 == groups_0.group_key
     WHERE team_id = 2
       AND e.event = '$pageview'
       AND toDateTime(e.timestamp) >= toDateTime('2020-06-07 00:00:00')
       AND toDateTime(e.timestamp) <= toDateTime('2020-07-27 00:00:00')
       AND JSONHas(group_properties_0, 'industry') ) event
  JOIN
    (SELECT DISTINCT toStartOfWeek(e.timestamp) AS event_date,
                     pdi.person_id as target,
                     e.uuid AS uuid,
                     e.event AS event
     FROM events e
     INNER JOIN
       (SELECT distinct_id,
               argMax(person_id, _timestamp) as person_id
        FROM
          (SELECT distinct_id,
                  person_id,
                  max(_timestamp) as _timestamp
           FROM person_distinct_id
           WHERE team_id = 2
           GROUP BY person_id,
                    distinct_id,
                    team_id
           HAVING max(is_deleted) = 0)
        GROUP BY distinct_id) AS pdi ON events.distinct_id = pdi.distinct_id
     INNER JOIN
       (SELECT group_key,
               argMax(group_properties, _timestamp) AS group_properties_0
        FROM groups
        WHERE team_id = 2
          AND group_type_index = 0
        GROUP BY group_key) groups_0 ON $group_0 == groups_0.group_key
     WHERE team_id = 2
       AND e.event = '$pageview'
       AND toDateTime(e.timestamp) >= toDateTime('2020-06-07 00:00:00')
       AND toDateTime(e.timestamp) <= toDateTime('2020-07-27 00:00:00')
       AND JSONHas(group_properties_0, 'industry') ) reference_event ON (event.target = reference_event.target)
  WHERE toStartOfWeek(event.event_date) > toStartOfWeek(reference_event.event_date)
  GROUP BY base_interval,
           intervals_from_base
  ORDER BY base_interval,
           intervals_from_base
  '
---
# name: TestClickhouseRetention.test_groups_filtering.3
  '
  
  SELECT datediff('Week', toStartOfWeek(toDateTime('2020-06-07 00:00:00')), event_date) event_date,
         count(DISTINCT target)
  FROM
    (SELECT DISTINCT toStartOfWeek(e.timestamp) AS event_date,
                     pdi.person_id as target,
                     e.uuid AS uuid,
                     e.event AS event
     FROM events e
     INNER JOIN
       (SELECT distinct_id,
               argMax(person_id, _timestamp) as person_id
        FROM
          (SELECT distinct_id,
                  person_id,
                  max(_timestamp) as _timestamp
           FROM person_distinct_id
           WHERE team_id = 2
           GROUP BY person_id,
                    distinct_id,
                    team_id
           HAVING max(is_deleted) = 0)
        GROUP BY distinct_id) AS pdi ON events.distinct_id = pdi.distinct_id
     INNER JOIN
       (SELECT group_key,
               argMax(group_properties, _timestamp) AS group_properties_0
        FROM groups
        WHERE team_id = 2
          AND group_type_index = 0
        GROUP BY group_key) groups_0 ON $group_0 == groups_0.group_key
     WHERE team_id = 2
       AND e.event = '$pageview'
       AND toDateTime(e.timestamp) >= toDateTime('2020-06-07 00:00:00')
       AND toDateTime(e.timestamp) <= toDateTime('2020-07-27 00:00:00')
       AND JSONHas(group_properties_0, 'industry') )
  GROUP BY event_date
  ORDER BY event_date
  '
---
# name: TestClickhouseRetention.test_groups_in_period
  '
  
  SELECT toString(actor_id),
         count(actor_id) appearance_count,
         groupArray(intervals_from_base) appearances
  FROM
    (SELECT DISTINCT datediff('Week', toStartOfWeek(toDateTime('2020-06-07 00:00:00')), reference_event.event_date) as base_interval,
                     datediff('Week', reference_event.event_date, toStartOfWeek(toDateTime(event_date))) as intervals_from_base,
                     event.actor_id
     FROM
       (SELECT timestamp AS event_date,
                            e.$group_0 AS actor_id,
                            e.uuid as uuid,
                            e.event as event
        FROM events e
        where toDateTime(e.timestamp) >= toDateTime('2020-06-07 00:00:00')
          AND toDateTime(e.timestamp) <= toDateTime('2020-07-27 00:00:00')
          AND e.team_id = 2
          AND e.event = '$pageview'
          AND NOT has([''], $group_0) ) event
     JOIN
       (SELECT DISTINCT toStartOfWeek(e.timestamp) as event_date,
                        e.$group_0 AS actor_id,
                        e.uuid as uuid,
                        e.event as event
        from events e
        where event_date = toStartOfWeek(toDateTime('2020-06-07 00:00:00'))
          AND e.team_id = 2
          AND e.event = '$pageview'
          AND NOT has([''], $group_0) ) reference_event ON (event.actor_id = reference_event.actor_id)
     WHERE toStartOfWeek(event.event_date) > toStartOfWeek(reference_event.event_date)
     UNION ALL SELECT DISTINCT 0,
                               0,
                               e.$group_0 AS actor_id
     from events e
     where toStartOfWeek(e.timestamp) = toStartOfWeek(toDateTime('2020-06-07 00:00:00'))
       AND e.team_id = 2
       AND e.event = '$pageview'
       AND NOT has([''], $group_0) ) person_appearances
  WHERE base_interval = 0
  GROUP BY actor_id
  ORDER BY appearance_count DESC
  LIMIT 100
  OFFSET 0
  '
---
