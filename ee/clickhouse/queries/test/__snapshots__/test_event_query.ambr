# name: TestEventQuery.test_basic_event_filter
  '
  
  SELECT e.timestamp as timestamp
  FROM events e
  WHERE team_id = %(team_id)s
    AND event = %(event)s
    AND toStartOfDay(timestamp) >= toStartOfDay(toDateTime(%(date_from)s))
    AND timestamp <= %(date_to)s
  '
---
# name: TestEventQuery.test_basic_event_filter.1
  <class 'dict'> {
    'date_from': '2021-05-01 00:00:00',
    'date_to': '2021-05-07 23:59:59',
    'event': 'viewed',
  }
---
# name: TestEventQuery.test_denormalised_props
  '
  
  SELECT e.timestamp as timestamp,
         e.mat_test_prop as mat_test_prop
  FROM events e
  WHERE team_id = %(team_id)s
    AND event = %(event)s
    AND toStartOfDay(timestamp) >= toStartOfDay(toDateTime(%(date_from)s))
    AND timestamp <= %(date_to)s
    AND has(%(vglobal_0_0)s, mat_test_prop)
    AND team_id = %(team_id)s
    AND has(%(vglobal_1_0)s, mat_test_prop)
    AND team_id = %(team_id)s
  '
---
# name: TestEventQuery.test_denormalised_props.1
  <class 'dict'> {
    'date_from': '2020-01-01 00:00:00',
    'date_to': '2020-01-14 23:59:59',
    'event': 'user signed up',
    'kglobal_0_0': 'test_prop',
    'kglobal_1_0': 'test_prop',
    'vglobal_0_0': <class 'list'> [
      'hi',
    ],
    'vglobal_1_0': <class 'list'> [
      'hi',
    ],
  }
---
# name: TestEventQuery.test_groups_filters
  '
  
  SELECT e.timestamp as timestamp
  FROM events e
  INNER JOIN
    (SELECT group_key,
            argMax(group_properties, _timestamp) AS group_properties_0
     FROM groups
     WHERE team_id = %(team_id)s
       AND group_type_index = %(group_index_0)s
     GROUP BY group_key) groups_0 ON JSONExtractString(properties, '$group_0') == groups_0.group_key
  INNER JOIN
    (SELECT group_key,
            argMax(group_properties, _timestamp) AS group_properties_1
     FROM groups
     WHERE team_id = %(team_id)s
       AND group_type_index = %(group_index_1)s
     GROUP BY group_key) groups_1 ON JSONExtractString(properties, '$group_1') == groups_1.group_key
  WHERE team_id = %(team_id)s
    AND event = %(event)s
    AND toStartOfDay(timestamp) >= toStartOfDay(toDateTime(%(date_from)s))
    AND timestamp <= %(date_to)s
    AND has(%(vglobal_0_0)s, trim(BOTH '"'
                                  FROM JSONExtractRaw(group_properties_0, %(kglobal_0_0)s)))
    AND has(%(vglobal_1_0)s, trim(BOTH '"'
                                  FROM JSONExtractRaw(group_properties_0, %(kglobal_1_0)s)))
    AND has(%(vglobal_2_0)s, trim(BOTH '"'
                                  FROM JSONExtractRaw(group_properties_1, %(kglobal_2_0)s)))
  '
---
# name: TestEventQuery.test_groups_filters.1
  <class 'dict'> {
    'date_from': '2020-01-01 00:00:00',
    'date_to': '2020-01-12 23:59:59',
    'event': '$pageview',
    'group_index_0': 0,
    'group_index_1': 1,
    'kglobal_0_0': 'industry',
    'kglobal_1_0': 'key',
    'kglobal_2_0': 'another',
    'vglobal_0_0': <class 'list'> [
      'finance',
    ],
    'vglobal_1_0': <class 'list'> [
      'value',
    ],
    'vglobal_2_0': <class 'list'> [
      'value',
    ],
  }
---
