# name: TestFunnelGroupBreakdown.test_funnel_aggregate_by_groups_breakdown_group_person_on_events
  '
  
  SELECT groupArray(value)
  FROM
    (SELECT replaceRegexpAll(JSONExtractRaw(group0_properties, 'industry'), '^"|"$', '') AS value,
            count(*) as count
     FROM events e
     LEFT JOIN
       (SELECT group_key,
               argMax(group_properties, _timestamp) AS group_properties_0
        FROM groups
        WHERE team_id = 2
          AND group_type_index = 0
        GROUP BY group_key) groups_0 ON "$group_0" == groups_0.group_key
     WHERE team_id = 2
       AND event IN ['buy', 'play movie', 'sign up']
       AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
       AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-08 23:59:59', 'UTC')
       AND (NOT has([''], "$group_0"))
       AND notEmpty(e.person_id)
     GROUP BY value
     ORDER BY count DESC, value DESC
     LIMIT 25
     OFFSET 0)
  '
---
# name: TestFunnelGroupBreakdown.test_funnel_aggregate_by_groups_breakdown_group_person_on_events.1
  '
  
  SELECT countIf(steps = 1) step_1,
         countIf(steps = 2) step_2,
         countIf(steps = 3) step_3,
         avg(step_1_average_conversion_time_inner) step_1_average_conversion_time,
         avg(step_2_average_conversion_time_inner) step_2_average_conversion_time,
         median(step_1_median_conversion_time_inner) step_1_median_conversion_time,
         median(step_2_median_conversion_time_inner) step_2_median_conversion_time,
         prop
  FROM
    (SELECT aggregation_target,
            steps,
            avg(step_1_conversion_time) step_1_average_conversion_time_inner,
            avg(step_2_conversion_time) step_2_average_conversion_time_inner,
            median(step_1_conversion_time) step_1_median_conversion_time_inner,
            median(step_2_conversion_time) step_2_median_conversion_time_inner ,
            prop
     FROM
       (SELECT aggregation_target,
               steps,
               max(steps) over (PARTITION BY aggregation_target,
                                             prop) as max_steps,
                               step_1_conversion_time,
                               step_2_conversion_time ,
                               prop
        FROM
          (SELECT *,
                  if(latest_0 <= latest_1
                     AND latest_1 <= latest_0 + INTERVAL 7 DAY
                     AND latest_1 <= latest_2
                     AND latest_2 <= latest_0 + INTERVAL 7 DAY, 3, if(latest_0 <= latest_1
                                                                      AND latest_1 <= latest_0 + INTERVAL 7 DAY, 2, 1)) AS steps ,
                  if(isNotNull(latest_1)
                     AND latest_1 <= latest_0 + INTERVAL 7 DAY, dateDiff('second', toDateTime(latest_0), toDateTime(latest_1)), NULL) step_1_conversion_time,
                  if(isNotNull(latest_2)
                     AND latest_2 <= latest_1 + INTERVAL 7 DAY, dateDiff('second', toDateTime(latest_1), toDateTime(latest_2)), NULL) step_2_conversion_time,
                  prop
           FROM
             (SELECT aggregation_target, timestamp, step_0,
                                                    latest_0,
                                                    step_1,
                                                    latest_1,
                                                    step_2,
                                                    min(latest_2) over (PARTITION by aggregation_target,
                                                                                     prop
                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_2 ,
                                                                       prop
              FROM
                (SELECT aggregation_target, timestamp, step_0,
                                                       latest_0,
                                                       step_1,
                                                       latest_1,
                                                       step_2,
                                                       if(latest_2 < latest_1, NULL, latest_2) as latest_2 ,
                                                       prop
                 FROM
                   (SELECT aggregation_target, timestamp, step_0,
                                                          latest_0,
                                                          step_1,
                                                          min(latest_1) over (PARTITION by aggregation_target,
                                                                                           prop
                                                                              ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_1,
                                                                             step_2,
                                                                             min(latest_2) over (PARTITION by aggregation_target,
                                                                                                              prop
                                                                                                 ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_2 ,
                                                                                                if(has(['technology', 'finance'], prop), prop, 'Other') as prop
                    FROM
                      (SELECT *,
                              prop_vals as prop
                       FROM
                         (SELECT e.timestamp as timestamp,
                                 e."$group_0" as aggregation_target,
                                 e.person_id as person_id ,
                                 if(event = 'sign up', 1, 0) as step_0,
                                 if(step_0 = 1, timestamp, null) as latest_0,
                                 if(event = 'play movie', 1, 0) as step_1,
                                 if(step_1 = 1, timestamp, null) as latest_1,
                                 if(event = 'buy', 1, 0) as step_2,
                                 if(step_2 = 1, timestamp, null) as latest_2,
                                 replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '') AS prop_basic,
                                 prop_basic as prop,
                                 argMinIf(prop, timestamp, isNotNull(prop)) over (PARTITION by aggregation_target) as prop_vals
                          FROM events e
                          LEFT JOIN
                            (SELECT group_key,
                                    argMax(group_properties, _timestamp) AS group_properties_0
                             FROM groups
                             WHERE team_id = 2
                               AND group_type_index = 0
                             GROUP BY group_key) groups_0 ON "$group_0" == groups_0.group_key
                          WHERE team_id = 2
                            AND event IN ['buy', 'play movie', 'sign up']
                            AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
                            AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-08 23:59:59', 'UTC')
                            AND (NOT has([''], "$group_0"))
                            AND notEmpty(e.person_id)
                            AND (step_0 = 1
                                 OR step_1 = 1
                                 OR step_2 = 1) )))))
           WHERE step_0 = 1 ))
     GROUP BY aggregation_target,
              steps,
              prop
     HAVING steps = max_steps)
  GROUP BY prop
  '
---
# name: TestFunnelGroupBreakdown.test_funnel_aggregate_by_groups_breakdown_group_person_on_events_poe_v2
  '
  
  SELECT groupArray(value)
  FROM
    (SELECT replaceRegexpAll(JSONExtractRaw(group0_properties, 'industry'), '^"|"$', '') AS value,
            count(*) as count
     FROM events e
     LEFT OUTER JOIN
       (SELECT argMax(override_person_id, version) as person_id,
               old_person_id
        FROM person_overrides
        WHERE team_id = 2
        GROUP BY old_person_id) AS overrides ON e.person_id = overrides.old_person_id
     LEFT JOIN
       (SELECT group_key,
               argMax(group_properties, _timestamp) AS group_properties_0
        FROM groups
        WHERE team_id = 2
          AND group_type_index = 0
        GROUP BY group_key) groups_0 ON "$group_0" == groups_0.group_key
     WHERE team_id = 2
       AND event IN ['buy', 'play movie', 'sign up']
       AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
       AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-08 23:59:59', 'UTC')
       AND (NOT has([''], "$group_0"))
       AND notEmpty(e.person_id)
     GROUP BY value
     ORDER BY count DESC, value DESC
     LIMIT 25
     OFFSET 0)
  '
---
# name: TestFunnelGroupBreakdown.test_funnel_aggregate_by_groups_breakdown_group_person_on_events_poe_v2.1
  '
  
  SELECT countIf(steps = 1) step_1,
         countIf(steps = 2) step_2,
         countIf(steps = 3) step_3,
         avg(step_1_average_conversion_time_inner) step_1_average_conversion_time,
         avg(step_2_average_conversion_time_inner) step_2_average_conversion_time,
         median(step_1_median_conversion_time_inner) step_1_median_conversion_time,
         median(step_2_median_conversion_time_inner) step_2_median_conversion_time,
         prop
  FROM
    (SELECT aggregation_target,
            steps,
            avg(step_1_conversion_time) step_1_average_conversion_time_inner,
            avg(step_2_conversion_time) step_2_average_conversion_time_inner,
            median(step_1_conversion_time) step_1_median_conversion_time_inner,
            median(step_2_conversion_time) step_2_median_conversion_time_inner ,
            prop
     FROM
       (SELECT aggregation_target,
               steps,
               max(steps) over (PARTITION BY aggregation_target,
                                             prop) as max_steps,
                               step_1_conversion_time,
                               step_2_conversion_time ,
                               prop
        FROM
          (SELECT *,
                  if(latest_0 <= latest_1
                     AND latest_1 <= latest_0 + INTERVAL 7 DAY
                     AND latest_1 <= latest_2
                     AND latest_2 <= latest_0 + INTERVAL 7 DAY, 3, if(latest_0 <= latest_1
                                                                      AND latest_1 <= latest_0 + INTERVAL 7 DAY, 2, 1)) AS steps ,
                  if(isNotNull(latest_1)
                     AND latest_1 <= latest_0 + INTERVAL 7 DAY, dateDiff('second', toDateTime(latest_0), toDateTime(latest_1)), NULL) step_1_conversion_time,
                  if(isNotNull(latest_2)
                     AND latest_2 <= latest_1 + INTERVAL 7 DAY, dateDiff('second', toDateTime(latest_1), toDateTime(latest_2)), NULL) step_2_conversion_time,
                  prop
           FROM
             (SELECT aggregation_target, timestamp, step_0,
                                                    latest_0,
                                                    step_1,
                                                    latest_1,
                                                    step_2,
                                                    min(latest_2) over (PARTITION by aggregation_target,
                                                                                     prop
                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_2 ,
                                                                       prop
              FROM
                (SELECT aggregation_target, timestamp, step_0,
                                                       latest_0,
                                                       step_1,
                                                       latest_1,
                                                       step_2,
                                                       if(latest_2 < latest_1, NULL, latest_2) as latest_2 ,
                                                       prop
                 FROM
                   (SELECT aggregation_target, timestamp, step_0,
                                                          latest_0,
                                                          step_1,
                                                          min(latest_1) over (PARTITION by aggregation_target,
                                                                                           prop
                                                                              ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_1,
                                                                             step_2,
                                                                             min(latest_2) over (PARTITION by aggregation_target,
                                                                                                              prop
                                                                                                 ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_2 ,
                                                                                                if(has(['technology', 'finance'], prop), prop, 'Other') as prop
                    FROM
                      (SELECT *,
                              prop_vals as prop
                       FROM
                         (SELECT e.timestamp as timestamp,
                                 e."$group_0" as aggregation_target,
                                 if(notEmpty(overrides.person_id), overrides.person_id, e.person_id) as person_id ,
                                 if(event = 'sign up', 1, 0) as step_0,
                                 if(step_0 = 1, timestamp, null) as latest_0,
                                 if(event = 'play movie', 1, 0) as step_1,
                                 if(step_1 = 1, timestamp, null) as latest_1,
                                 if(event = 'buy', 1, 0) as step_2,
                                 if(step_2 = 1, timestamp, null) as latest_2,
                                 replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '') AS prop_basic,
                                 prop_basic as prop,
                                 argMinIf(prop, timestamp, isNotNull(prop)) over (PARTITION by aggregation_target) as prop_vals
                          FROM events e
                          LEFT OUTER JOIN
                            (SELECT argMax(override_person_id, version) as person_id,
                                    old_person_id
                             FROM person_overrides
                             WHERE team_id = 2
                             GROUP BY old_person_id) AS overrides ON e.person_id = overrides.old_person_id
                          LEFT JOIN
                            (SELECT group_key,
                                    argMax(group_properties, _timestamp) AS group_properties_0
                             FROM groups
                             WHERE team_id = 2
                               AND group_type_index = 0
                             GROUP BY group_key) groups_0 ON "$group_0" == groups_0.group_key
                          WHERE team_id = 2
                            AND event IN ['buy', 'play movie', 'sign up']
                            AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
                            AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-08 23:59:59', 'UTC')
                            AND (NOT has([''], "$group_0"))
                            AND notEmpty(e.person_id)
                            AND (step_0 = 1
                                 OR step_1 = 1
                                 OR step_2 = 1) )))))
           WHERE step_0 = 1 ))
     GROUP BY aggregation_target,
              steps,
              prop
     HAVING steps = max_steps)
  GROUP BY prop
  '
---
# name: TestFunnelGroupBreakdown.test_funnel_breakdown_group
  '
  
  SELECT groupArray(value)
  FROM
    (SELECT replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '') AS value,
            count(*) as count
     FROM events e
     LEFT JOIN
       (SELECT group_key,
               argMax(group_properties, _timestamp) AS group_properties_0
        FROM groups
        WHERE team_id = 2
          AND group_type_index = 0
        GROUP BY group_key) groups_0 ON "$group_0" == groups_0.group_key
     WHERE team_id = 2
       AND event IN ['buy', 'play movie', 'sign up']
       AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
       AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-08 23:59:59', 'UTC')
     GROUP BY value
     ORDER BY count DESC, value DESC
     LIMIT 25
     OFFSET 0)
  '
---
# name: TestFunnelGroupBreakdown.test_funnel_breakdown_group.1
  '
  
  SELECT countIf(steps = 1) step_1,
         countIf(steps = 2) step_2,
         countIf(steps = 3) step_3,
         avg(step_1_average_conversion_time_inner) step_1_average_conversion_time,
         avg(step_2_average_conversion_time_inner) step_2_average_conversion_time,
         median(step_1_median_conversion_time_inner) step_1_median_conversion_time,
         median(step_2_median_conversion_time_inner) step_2_median_conversion_time,
         prop
  FROM
    (SELECT aggregation_target,
            steps,
            avg(step_1_conversion_time) step_1_average_conversion_time_inner,
            avg(step_2_conversion_time) step_2_average_conversion_time_inner,
            median(step_1_conversion_time) step_1_median_conversion_time_inner,
            median(step_2_conversion_time) step_2_median_conversion_time_inner ,
            prop
     FROM
       (SELECT aggregation_target,
               steps,
               max(steps) over (PARTITION BY aggregation_target,
                                             prop) as max_steps,
                               step_1_conversion_time,
                               step_2_conversion_time ,
                               prop
        FROM
          (SELECT *,
                  if(latest_0 <= latest_1
                     AND latest_1 <= latest_0 + INTERVAL 7 DAY
                     AND latest_1 <= latest_2
                     AND latest_2 <= latest_0 + INTERVAL 7 DAY, 3, if(latest_0 <= latest_1
                                                                      AND latest_1 <= latest_0 + INTERVAL 7 DAY, 2, 1)) AS steps ,
                  if(isNotNull(latest_1)
                     AND latest_1 <= latest_0 + INTERVAL 7 DAY, dateDiff('second', toDateTime(latest_0), toDateTime(latest_1)), NULL) step_1_conversion_time,
                  if(isNotNull(latest_2)
                     AND latest_2 <= latest_1 + INTERVAL 7 DAY, dateDiff('second', toDateTime(latest_1), toDateTime(latest_2)), NULL) step_2_conversion_time,
                  prop
           FROM
             (SELECT aggregation_target, timestamp, step_0,
                                                    latest_0,
                                                    step_1,
                                                    latest_1,
                                                    step_2,
                                                    min(latest_2) over (PARTITION by aggregation_target,
                                                                                     prop
                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_2 ,
                                                                       prop
              FROM
                (SELECT aggregation_target, timestamp, step_0,
                                                       latest_0,
                                                       step_1,
                                                       latest_1,
                                                       step_2,
                                                       if(latest_2 < latest_1, NULL, latest_2) as latest_2 ,
                                                       prop
                 FROM
                   (SELECT aggregation_target, timestamp, step_0,
                                                          latest_0,
                                                          step_1,
                                                          min(latest_1) over (PARTITION by aggregation_target,
                                                                                           prop
                                                                              ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_1,
                                                                             step_2,
                                                                             min(latest_2) over (PARTITION by aggregation_target,
                                                                                                              prop
                                                                                                 ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_2 ,
                                                                                                if(has(['technology', 'finance'], prop), prop, 'Other') as prop
                    FROM
                      (SELECT *,
                              prop_vals as prop
                       FROM
                         (SELECT e.timestamp as timestamp,
                                 pdi.person_id as aggregation_target,
                                 pdi.person_id as person_id ,
                                 if(event = 'sign up', 1, 0) as step_0,
                                 if(step_0 = 1, timestamp, null) as latest_0,
                                 if(event = 'play movie', 1, 0) as step_1,
                                 if(step_1 = 1, timestamp, null) as latest_1,
                                 if(event = 'buy', 1, 0) as step_2,
                                 if(step_2 = 1, timestamp, null) as latest_2,
                                 replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '') AS prop_basic,
                                 prop_basic as prop,
                                 argMinIf(prop, timestamp, isNotNull(prop)) over (PARTITION by aggregation_target) as prop_vals
                          FROM events e
                          INNER JOIN
                            (SELECT distinct_id,
                                    argMax(person_id, version) as person_id
                             FROM person_distinct_id2
                             WHERE team_id = 2
                             GROUP BY distinct_id
                             HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
                          LEFT JOIN
                            (SELECT group_key,
                                    argMax(group_properties, _timestamp) AS group_properties_0
                             FROM groups
                             WHERE team_id = 2
                               AND group_type_index = 0
                             GROUP BY group_key) groups_0 ON "$group_0" == groups_0.group_key
                          WHERE team_id = 2
                            AND event IN ['buy', 'play movie', 'sign up']
                            AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
                            AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-08 23:59:59', 'UTC')
                            AND (step_0 = 1
                                 OR step_1 = 1
                                 OR step_2 = 1) )))))
           WHERE step_0 = 1 ))
     GROUP BY aggregation_target,
              steps,
              prop
     HAVING steps = max_steps)
  GROUP BY prop
  '
---
# name: TestFunnelGroupBreakdown.test_funnel_breakdown_group.2
  '
  
  SELECT groupArray(value)
  FROM
    (SELECT replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '') AS value,
            count(*) as count
     FROM events e
     LEFT JOIN
       (SELECT group_key,
               argMax(group_properties, _timestamp) AS group_properties_0
        FROM groups
        WHERE team_id = 2
          AND group_type_index = 0
        GROUP BY group_key) groups_0 ON "$group_0" == groups_0.group_key
     WHERE team_id = 2
       AND event IN ['buy', 'play movie', 'sign up']
       AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
       AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-08 23:59:59', 'UTC')
     GROUP BY value
     ORDER BY count DESC, value DESC
     LIMIT 25
     OFFSET 0)
  '
---
# name: TestFunnelGroupBreakdown.test_funnel_breakdown_group.3
  '
  
  SELECT aggregation_target AS actor_id
  FROM
    (SELECT aggregation_target,
            steps,
            avg(step_1_conversion_time) step_1_average_conversion_time_inner,
            avg(step_2_conversion_time) step_2_average_conversion_time_inner,
            median(step_1_conversion_time) step_1_median_conversion_time_inner,
            median(step_2_conversion_time) step_2_median_conversion_time_inner ,
            prop
     FROM
       (SELECT aggregation_target,
               steps,
               max(steps) over (PARTITION BY aggregation_target,
                                             prop) as max_steps,
                               step_1_conversion_time,
                               step_2_conversion_time ,
                               prop
        FROM
          (SELECT *,
                  if(latest_0 <= latest_1
                     AND latest_1 <= latest_0 + INTERVAL 7 DAY
                     AND latest_1 <= latest_2
                     AND latest_2 <= latest_0 + INTERVAL 7 DAY, 3, if(latest_0 <= latest_1
                                                                      AND latest_1 <= latest_0 + INTERVAL 7 DAY, 2, 1)) AS steps ,
                  if(isNotNull(latest_1)
                     AND latest_1 <= latest_0 + INTERVAL 7 DAY, dateDiff('second', toDateTime(latest_0), toDateTime(latest_1)), NULL) step_1_conversion_time,
                  if(isNotNull(latest_2)
                     AND latest_2 <= latest_1 + INTERVAL 7 DAY, dateDiff('second', toDateTime(latest_1), toDateTime(latest_2)), NULL) step_2_conversion_time,
                  prop
           FROM
             (SELECT aggregation_target, timestamp, step_0,
                                                    latest_0,
                                                    step_1,
                                                    latest_1,
                                                    step_2,
                                                    min(latest_2) over (PARTITION by aggregation_target,
                                                                                     prop
                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_2 ,
                                                                       prop
              FROM
                (SELECT aggregation_target, timestamp, step_0,
                                                       latest_0,
                                                       step_1,
                                                       latest_1,
                                                       step_2,
                                                       if(latest_2 < latest_1, NULL, latest_2) as latest_2 ,
                                                       prop
                 FROM
                   (SELECT aggregation_target, timestamp, step_0,
                                                          latest_0,
                                                          step_1,
                                                          min(latest_1) over (PARTITION by aggregation_target,
                                                                                           prop
                                                                              ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_1,
                                                                             step_2,
                                                                             min(latest_2) over (PARTITION by aggregation_target,
                                                                                                              prop
                                                                                                 ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_2 ,
                                                                                                if(has(['technology', 'finance'], prop), prop, 'Other') as prop
                    FROM
                      (SELECT *,
                              prop_vals as prop
                       FROM
                         (SELECT e.timestamp as timestamp,
                                 pdi.person_id as aggregation_target,
                                 pdi.person_id as person_id ,
                                 if(event = 'sign up', 1, 0) as step_0,
                                 if(step_0 = 1, timestamp, null) as latest_0,
                                 if(event = 'play movie', 1, 0) as step_1,
                                 if(step_1 = 1, timestamp, null) as latest_1,
                                 if(event = 'buy', 1, 0) as step_2,
                                 if(step_2 = 1, timestamp, null) as latest_2,
                                 replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '') AS prop_basic,
                                 prop_basic as prop,
                                 argMinIf(prop, timestamp, isNotNull(prop)) over (PARTITION by aggregation_target) as prop_vals
                          FROM events e
                          INNER JOIN
                            (SELECT distinct_id,
                                    argMax(person_id, version) as person_id
                             FROM person_distinct_id2
                             WHERE team_id = 2
                             GROUP BY distinct_id
                             HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
                          LEFT JOIN
                            (SELECT group_key,
                                    argMax(group_properties, _timestamp) AS group_properties_0
                             FROM groups
                             WHERE team_id = 2
                               AND group_type_index = 0
                             GROUP BY group_key) groups_0 ON "$group_0" == groups_0.group_key
                          WHERE team_id = 2
                            AND event IN ['buy', 'play movie', 'sign up']
                            AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
                            AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-08 23:59:59', 'UTC')
                            AND (step_0 = 1
                                 OR step_1 = 1
                                 OR step_2 = 1) )))))
           WHERE step_0 = 1 ))
     GROUP BY aggregation_target,
              steps,
              prop
     HAVING steps = max_steps)
  WHERE steps IN [1, 2, 3]
    AND arrayFlatten(array(prop)) = arrayFlatten(array('finance'))
  ORDER BY aggregation_target
  LIMIT 100
  OFFSET 0
  '
---
# name: TestFunnelGroupBreakdown.test_funnel_breakdown_group.4
  '
  
  SELECT groupArray(value)
  FROM
    (SELECT replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '') AS value,
            count(*) as count
     FROM events e
     LEFT JOIN
       (SELECT group_key,
               argMax(group_properties, _timestamp) AS group_properties_0
        FROM groups
        WHERE team_id = 2
          AND group_type_index = 0
        GROUP BY group_key) groups_0 ON "$group_0" == groups_0.group_key
     WHERE team_id = 2
       AND event IN ['buy', 'play movie', 'sign up']
       AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
       AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-08 23:59:59', 'UTC')
     GROUP BY value
     ORDER BY count DESC, value DESC
     LIMIT 25
     OFFSET 0)
  '
---
# name: TestFunnelGroupBreakdown.test_funnel_breakdown_group.5
  '
  
  SELECT aggregation_target AS actor_id
  FROM
    (SELECT aggregation_target,
            steps,
            avg(step_1_conversion_time) step_1_average_conversion_time_inner,
            avg(step_2_conversion_time) step_2_average_conversion_time_inner,
            median(step_1_conversion_time) step_1_median_conversion_time_inner,
            median(step_2_conversion_time) step_2_median_conversion_time_inner ,
            prop
     FROM
       (SELECT aggregation_target,
               steps,
               max(steps) over (PARTITION BY aggregation_target,
                                             prop) as max_steps,
                               step_1_conversion_time,
                               step_2_conversion_time ,
                               prop
        FROM
          (SELECT *,
                  if(latest_0 <= latest_1
                     AND latest_1 <= latest_0 + INTERVAL 7 DAY
                     AND latest_1 <= latest_2
                     AND latest_2 <= latest_0 + INTERVAL 7 DAY, 3, if(latest_0 <= latest_1
                                                                      AND latest_1 <= latest_0 + INTERVAL 7 DAY, 2, 1)) AS steps ,
                  if(isNotNull(latest_1)
                     AND latest_1 <= latest_0 + INTERVAL 7 DAY, dateDiff('second', toDateTime(latest_0), toDateTime(latest_1)), NULL) step_1_conversion_time,
                  if(isNotNull(latest_2)
                     AND latest_2 <= latest_1 + INTERVAL 7 DAY, dateDiff('second', toDateTime(latest_1), toDateTime(latest_2)), NULL) step_2_conversion_time,
                  prop
           FROM
             (SELECT aggregation_target, timestamp, step_0,
                                                    latest_0,
                                                    step_1,
                                                    latest_1,
                                                    step_2,
                                                    min(latest_2) over (PARTITION by aggregation_target,
                                                                                     prop
                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_2 ,
                                                                       prop
              FROM
                (SELECT aggregation_target, timestamp, step_0,
                                                       latest_0,
                                                       step_1,
                                                       latest_1,
                                                       step_2,
                                                       if(latest_2 < latest_1, NULL, latest_2) as latest_2 ,
                                                       prop
                 FROM
                   (SELECT aggregation_target, timestamp, step_0,
                                                          latest_0,
                                                          step_1,
                                                          min(latest_1) over (PARTITION by aggregation_target,
                                                                                           prop
                                                                              ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_1,
                                                                             step_2,
                                                                             min(latest_2) over (PARTITION by aggregation_target,
                                                                                                              prop
                                                                                                 ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_2 ,
                                                                                                if(has(['technology', 'finance'], prop), prop, 'Other') as prop
                    FROM
                      (SELECT *,
                              prop_vals as prop
                       FROM
                         (SELECT e.timestamp as timestamp,
                                 pdi.person_id as aggregation_target,
                                 pdi.person_id as person_id ,
                                 if(event = 'sign up', 1, 0) as step_0,
                                 if(step_0 = 1, timestamp, null) as latest_0,
                                 if(event = 'play movie', 1, 0) as step_1,
                                 if(step_1 = 1, timestamp, null) as latest_1,
                                 if(event = 'buy', 1, 0) as step_2,
                                 if(step_2 = 1, timestamp, null) as latest_2,
                                 replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '') AS prop_basic,
                                 prop_basic as prop,
                                 argMinIf(prop, timestamp, isNotNull(prop)) over (PARTITION by aggregation_target) as prop_vals
                          FROM events e
                          INNER JOIN
                            (SELECT distinct_id,
                                    argMax(person_id, version) as person_id
                             FROM person_distinct_id2
                             WHERE team_id = 2
                             GROUP BY distinct_id
                             HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
                          LEFT JOIN
                            (SELECT group_key,
                                    argMax(group_properties, _timestamp) AS group_properties_0
                             FROM groups
                             WHERE team_id = 2
                               AND group_type_index = 0
                             GROUP BY group_key) groups_0 ON "$group_0" == groups_0.group_key
                          WHERE team_id = 2
                            AND event IN ['buy', 'play movie', 'sign up']
                            AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
                            AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-08 23:59:59', 'UTC')
                            AND (step_0 = 1
                                 OR step_1 = 1
                                 OR step_2 = 1) )))))
           WHERE step_0 = 1 ))
     GROUP BY aggregation_target,
              steps,
              prop
     HAVING steps = max_steps)
  WHERE steps IN [2, 3]
    AND arrayFlatten(array(prop)) = arrayFlatten(array('finance'))
  ORDER BY aggregation_target
  LIMIT 100
  OFFSET 0
  '
---
# name: TestFunnelGroupBreakdown.test_funnel_breakdown_group.6
  '
  
  SELECT groupArray(value)
  FROM
    (SELECT replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '') AS value,
            count(*) as count
     FROM events e
     LEFT JOIN
       (SELECT group_key,
               argMax(group_properties, _timestamp) AS group_properties_0
        FROM groups
        WHERE team_id = 2
          AND group_type_index = 0
        GROUP BY group_key) groups_0 ON "$group_0" == groups_0.group_key
     WHERE team_id = 2
       AND event IN ['buy', 'play movie', 'sign up']
       AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
       AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-08 23:59:59', 'UTC')
     GROUP BY value
     ORDER BY count DESC, value DESC
     LIMIT 25
     OFFSET 0)
  '
---
# name: TestFunnelGroupBreakdown.test_funnel_breakdown_group.7
  '
  
  SELECT aggregation_target AS actor_id
  FROM
    (SELECT aggregation_target,
            steps,
            avg(step_1_conversion_time) step_1_average_conversion_time_inner,
            avg(step_2_conversion_time) step_2_average_conversion_time_inner,
            median(step_1_conversion_time) step_1_median_conversion_time_inner,
            median(step_2_conversion_time) step_2_median_conversion_time_inner ,
            prop
     FROM
       (SELECT aggregation_target,
               steps,
               max(steps) over (PARTITION BY aggregation_target,
                                             prop) as max_steps,
                               step_1_conversion_time,
                               step_2_conversion_time ,
                               prop
        FROM
          (SELECT *,
                  if(latest_0 <= latest_1
                     AND latest_1 <= latest_0 + INTERVAL 7 DAY
                     AND latest_1 <= latest_2
                     AND latest_2 <= latest_0 + INTERVAL 7 DAY, 3, if(latest_0 <= latest_1
                                                                      AND latest_1 <= latest_0 + INTERVAL 7 DAY, 2, 1)) AS steps ,
                  if(isNotNull(latest_1)
                     AND latest_1 <= latest_0 + INTERVAL 7 DAY, dateDiff('second', toDateTime(latest_0), toDateTime(latest_1)), NULL) step_1_conversion_time,
                  if(isNotNull(latest_2)
                     AND latest_2 <= latest_1 + INTERVAL 7 DAY, dateDiff('second', toDateTime(latest_1), toDateTime(latest_2)), NULL) step_2_conversion_time,
                  prop
           FROM
             (SELECT aggregation_target, timestamp, step_0,
                                                    latest_0,
                                                    step_1,
                                                    latest_1,
                                                    step_2,
                                                    min(latest_2) over (PARTITION by aggregation_target,
                                                                                     prop
                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_2 ,
                                                                       prop
              FROM
                (SELECT aggregation_target, timestamp, step_0,
                                                       latest_0,
                                                       step_1,
                                                       latest_1,
                                                       step_2,
                                                       if(latest_2 < latest_1, NULL, latest_2) as latest_2 ,
                                                       prop
                 FROM
                   (SELECT aggregation_target, timestamp, step_0,
                                                          latest_0,
                                                          step_1,
                                                          min(latest_1) over (PARTITION by aggregation_target,
                                                                                           prop
                                                                              ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_1,
                                                                             step_2,
                                                                             min(latest_2) over (PARTITION by aggregation_target,
                                                                                                              prop
                                                                                                 ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_2 ,
                                                                                                if(has(['technology', 'finance'], prop), prop, 'Other') as prop
                    FROM
                      (SELECT *,
                              prop_vals as prop
                       FROM
                         (SELECT e.timestamp as timestamp,
                                 pdi.person_id as aggregation_target,
                                 pdi.person_id as person_id ,
                                 if(event = 'sign up', 1, 0) as step_0,
                                 if(step_0 = 1, timestamp, null) as latest_0,
                                 if(event = 'play movie', 1, 0) as step_1,
                                 if(step_1 = 1, timestamp, null) as latest_1,
                                 if(event = 'buy', 1, 0) as step_2,
                                 if(step_2 = 1, timestamp, null) as latest_2,
                                 replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '') AS prop_basic,
                                 prop_basic as prop,
                                 argMinIf(prop, timestamp, isNotNull(prop)) over (PARTITION by aggregation_target) as prop_vals
                          FROM events e
                          INNER JOIN
                            (SELECT distinct_id,
                                    argMax(person_id, version) as person_id
                             FROM person_distinct_id2
                             WHERE team_id = 2
                             GROUP BY distinct_id
                             HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
                          LEFT JOIN
                            (SELECT group_key,
                                    argMax(group_properties, _timestamp) AS group_properties_0
                             FROM groups
                             WHERE team_id = 2
                               AND group_type_index = 0
                             GROUP BY group_key) groups_0 ON "$group_0" == groups_0.group_key
                          WHERE team_id = 2
                            AND event IN ['buy', 'play movie', 'sign up']
                            AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
                            AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-08 23:59:59', 'UTC')
                            AND (step_0 = 1
                                 OR step_1 = 1
                                 OR step_2 = 1) )))))
           WHERE step_0 = 1 ))
     GROUP BY aggregation_target,
              steps,
              prop
     HAVING steps = max_steps)
  WHERE steps IN [1, 2, 3]
    AND arrayFlatten(array(prop)) = arrayFlatten(array('technology'))
  ORDER BY aggregation_target
  LIMIT 100
  OFFSET 0
  '
---
# name: TestFunnelGroupBreakdown.test_funnel_breakdown_group.8
  '
  
  SELECT groupArray(value)
  FROM
    (SELECT replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '') AS value,
            count(*) as count
     FROM events e
     LEFT JOIN
       (SELECT group_key,
               argMax(group_properties, _timestamp) AS group_properties_0
        FROM groups
        WHERE team_id = 2
          AND group_type_index = 0
        GROUP BY group_key) groups_0 ON "$group_0" == groups_0.group_key
     WHERE team_id = 2
       AND event IN ['buy', 'play movie', 'sign up']
       AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
       AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-08 23:59:59', 'UTC')
     GROUP BY value
     ORDER BY count DESC, value DESC
     LIMIT 25
     OFFSET 0)
  '
---
# name: TestFunnelGroupBreakdown.test_funnel_breakdown_group.9
  '
  
  SELECT aggregation_target AS actor_id
  FROM
    (SELECT aggregation_target,
            steps,
            avg(step_1_conversion_time) step_1_average_conversion_time_inner,
            avg(step_2_conversion_time) step_2_average_conversion_time_inner,
            median(step_1_conversion_time) step_1_median_conversion_time_inner,
            median(step_2_conversion_time) step_2_median_conversion_time_inner ,
            prop
     FROM
       (SELECT aggregation_target,
               steps,
               max(steps) over (PARTITION BY aggregation_target,
                                             prop) as max_steps,
                               step_1_conversion_time,
                               step_2_conversion_time ,
                               prop
        FROM
          (SELECT *,
                  if(latest_0 <= latest_1
                     AND latest_1 <= latest_0 + INTERVAL 7 DAY
                     AND latest_1 <= latest_2
                     AND latest_2 <= latest_0 + INTERVAL 7 DAY, 3, if(latest_0 <= latest_1
                                                                      AND latest_1 <= latest_0 + INTERVAL 7 DAY, 2, 1)) AS steps ,
                  if(isNotNull(latest_1)
                     AND latest_1 <= latest_0 + INTERVAL 7 DAY, dateDiff('second', toDateTime(latest_0), toDateTime(latest_1)), NULL) step_1_conversion_time,
                  if(isNotNull(latest_2)
                     AND latest_2 <= latest_1 + INTERVAL 7 DAY, dateDiff('second', toDateTime(latest_1), toDateTime(latest_2)), NULL) step_2_conversion_time,
                  prop
           FROM
             (SELECT aggregation_target, timestamp, step_0,
                                                    latest_0,
                                                    step_1,
                                                    latest_1,
                                                    step_2,
                                                    min(latest_2) over (PARTITION by aggregation_target,
                                                                                     prop
                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_2 ,
                                                                       prop
              FROM
                (SELECT aggregation_target, timestamp, step_0,
                                                       latest_0,
                                                       step_1,
                                                       latest_1,
                                                       step_2,
                                                       if(latest_2 < latest_1, NULL, latest_2) as latest_2 ,
                                                       prop
                 FROM
                   (SELECT aggregation_target, timestamp, step_0,
                                                          latest_0,
                                                          step_1,
                                                          min(latest_1) over (PARTITION by aggregation_target,
                                                                                           prop
                                                                              ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_1,
                                                                             step_2,
                                                                             min(latest_2) over (PARTITION by aggregation_target,
                                                                                                              prop
                                                                                                 ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_2 ,
                                                                                                if(has(['technology', 'finance'], prop), prop, 'Other') as prop
                    FROM
                      (SELECT *,
                              prop_vals as prop
                       FROM
                         (SELECT e.timestamp as timestamp,
                                 pdi.person_id as aggregation_target,
                                 pdi.person_id as person_id ,
                                 if(event = 'sign up', 1, 0) as step_0,
                                 if(step_0 = 1, timestamp, null) as latest_0,
                                 if(event = 'play movie', 1, 0) as step_1,
                                 if(step_1 = 1, timestamp, null) as latest_1,
                                 if(event = 'buy', 1, 0) as step_2,
                                 if(step_2 = 1, timestamp, null) as latest_2,
                                 replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '') AS prop_basic,
                                 prop_basic as prop,
                                 argMinIf(prop, timestamp, isNotNull(prop)) over (PARTITION by aggregation_target) as prop_vals
                          FROM events e
                          INNER JOIN
                            (SELECT distinct_id,
                                    argMax(person_id, version) as person_id
                             FROM person_distinct_id2
                             WHERE team_id = 2
                             GROUP BY distinct_id
                             HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
                          LEFT JOIN
                            (SELECT group_key,
                                    argMax(group_properties, _timestamp) AS group_properties_0
                             FROM groups
                             WHERE team_id = 2
                               AND group_type_index = 0
                             GROUP BY group_key) groups_0 ON "$group_0" == groups_0.group_key
                          WHERE team_id = 2
                            AND event IN ['buy', 'play movie', 'sign up']
                            AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
                            AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-08 23:59:59', 'UTC')
                            AND (step_0 = 1
                                 OR step_1 = 1
                                 OR step_2 = 1) )))))
           WHERE step_0 = 1 ))
     GROUP BY aggregation_target,
              steps,
              prop
     HAVING steps = max_steps)
  WHERE steps IN [2, 3]
    AND arrayFlatten(array(prop)) = arrayFlatten(array('technology'))
  ORDER BY aggregation_target
  LIMIT 100
  OFFSET 0
  '
---
# name: TestStrictFunnelGroupBreakdown.test_funnel_aggregate_by_groups_breakdown_group_person_on_events
  '
  
  SELECT groupArray(value)
  FROM
    (SELECT replaceRegexpAll(JSONExtractRaw(group0_properties, 'industry'), '^"|"$', '') AS value,
            count(*) as count
     FROM events e
     LEFT JOIN
       (SELECT group_key,
               argMax(group_properties, _timestamp) AS group_properties_0
        FROM groups
        WHERE team_id = 2
          AND group_type_index = 0
        GROUP BY group_key) groups_0 ON "$group_0" == groups_0.group_key
     WHERE team_id = 2
       AND event IN ['buy', 'play movie', 'sign up']
       AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
       AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-08 23:59:59', 'UTC')
       AND (NOT has([''], "$group_0"))
       AND notEmpty(e.person_id)
     GROUP BY value
     ORDER BY count DESC, value DESC
     LIMIT 25
     OFFSET 0)
  '
---
# name: TestStrictFunnelGroupBreakdown.test_funnel_aggregate_by_groups_breakdown_group_person_on_events.1
  '
  
  SELECT countIf(steps = 1) step_1,
         countIf(steps = 2) step_2,
         countIf(steps = 3) step_3,
         avg(step_1_average_conversion_time_inner) step_1_average_conversion_time,
         avg(step_2_average_conversion_time_inner) step_2_average_conversion_time,
         median(step_1_median_conversion_time_inner) step_1_median_conversion_time,
         median(step_2_median_conversion_time_inner) step_2_median_conversion_time,
         prop
  FROM
    (SELECT aggregation_target,
            steps,
            avg(step_1_conversion_time) step_1_average_conversion_time_inner,
            avg(step_2_conversion_time) step_2_average_conversion_time_inner,
            median(step_1_conversion_time) step_1_median_conversion_time_inner,
            median(step_2_conversion_time) step_2_median_conversion_time_inner ,
            prop
     FROM
       (SELECT aggregation_target,
               steps,
               max(steps) over (PARTITION BY aggregation_target,
                                             prop) as max_steps,
                               step_1_conversion_time,
                               step_2_conversion_time ,
                               prop
        FROM
          (SELECT *,
                  if(latest_0 <= latest_1
                     AND latest_1 <= latest_0 + INTERVAL 7 DAY
                     AND latest_1 <= latest_2
                     AND latest_2 <= latest_0 + INTERVAL 7 DAY, 3, if(latest_0 <= latest_1
                                                                      AND latest_1 <= latest_0 + INTERVAL 7 DAY, 2, 1)) AS steps ,
                  if(isNotNull(latest_1)
                     AND latest_1 <= latest_0 + INTERVAL 7 DAY, dateDiff('second', toDateTime(latest_0), toDateTime(latest_1)), NULL) step_1_conversion_time,
                  if(isNotNull(latest_2)
                     AND latest_2 <= latest_1 + INTERVAL 7 DAY, dateDiff('second', toDateTime(latest_1), toDateTime(latest_2)), NULL) step_2_conversion_time,
                  prop
           FROM
             (SELECT aggregation_target, timestamp, step_0,
                                                    latest_0,
                                                    step_1,
                                                    latest_1,
                                                    step_2,
                                                    min(latest_2) over (PARTITION by aggregation_target,
                                                                                     prop
                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_2 ,
                                                                       prop
              FROM
                (SELECT aggregation_target, timestamp, step_0,
                                                       latest_0,
                                                       step_1,
                                                       latest_1,
                                                       step_2,
                                                       if(latest_2 < latest_1, NULL, latest_2) as latest_2 ,
                                                       prop
                 FROM
                   (SELECT aggregation_target, timestamp, step_0,
                                                          latest_0,
                                                          step_1,
                                                          min(latest_1) over (PARTITION by aggregation_target,
                                                                                           prop
                                                                              ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_1,
                                                                             step_2,
                                                                             min(latest_2) over (PARTITION by aggregation_target,
                                                                                                              prop
                                                                                                 ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_2 ,
                                                                                                if(has(['technology', 'finance'], prop), prop, 'Other') as prop
                    FROM
                      (SELECT *,
                              prop_vals as prop
                       FROM
                         (SELECT e.timestamp as timestamp,
                                 e."$group_0" as aggregation_target,
                                 e.person_id as person_id ,
                                 if(event = 'sign up', 1, 0) as step_0,
                                 if(step_0 = 1, timestamp, null) as latest_0,
                                 if(event = 'play movie', 1, 0) as step_1,
                                 if(step_1 = 1, timestamp, null) as latest_1,
                                 if(event = 'buy', 1, 0) as step_2,
                                 if(step_2 = 1, timestamp, null) as latest_2,
                                 replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '') AS prop_basic,
                                 prop_basic as prop,
                                 argMinIf(prop, timestamp, isNotNull(prop)) over (PARTITION by aggregation_target) as prop_vals
                          FROM events e
                          LEFT JOIN
                            (SELECT group_key,
                                    argMax(group_properties, _timestamp) AS group_properties_0
                             FROM groups
                             WHERE team_id = 2
                               AND group_type_index = 0
                             GROUP BY group_key) groups_0 ON "$group_0" == groups_0.group_key
                          WHERE team_id = 2
                            AND event IN ['buy', 'play movie', 'sign up']
                            AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
                            AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-08 23:59:59', 'UTC')
                            AND (NOT has([''], "$group_0"))
                            AND notEmpty(e.person_id)
                            AND (step_0 = 1
                                 OR step_1 = 1
                                 OR step_2 = 1) )))))
           WHERE step_0 = 1 ))
     GROUP BY aggregation_target,
              steps,
              prop
     HAVING steps = max_steps)
  GROUP BY prop
  '
---
# name: TestStrictFunnelGroupBreakdown.test_funnel_aggregate_by_groups_breakdown_group_person_on_events_poe_v2
  '
  
  SELECT groupArray(value)
  FROM
    (SELECT replaceRegexpAll(JSONExtractRaw(group0_properties, 'industry'), '^"|"$', '') AS value,
            count(*) as count
     FROM events e
     LEFT OUTER JOIN
       (SELECT argMax(override_person_id, version) as person_id,
               old_person_id
        FROM person_overrides
        WHERE team_id = 2
        GROUP BY old_person_id) AS overrides ON e.person_id = overrides.old_person_id
     LEFT JOIN
       (SELECT group_key,
               argMax(group_properties, _timestamp) AS group_properties_0
        FROM groups
        WHERE team_id = 2
          AND group_type_index = 0
        GROUP BY group_key) groups_0 ON "$group_0" == groups_0.group_key
     WHERE team_id = 2
       AND event IN ['buy', 'play movie', 'sign up']
       AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
       AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-08 23:59:59', 'UTC')
       AND (NOT has([''], "$group_0"))
       AND notEmpty(e.person_id)
     GROUP BY value
     ORDER BY count DESC, value DESC
     LIMIT 25
     OFFSET 0)
  '
---
# name: TestStrictFunnelGroupBreakdown.test_funnel_aggregate_by_groups_breakdown_group_person_on_events_poe_v2.1
  '
  
  SELECT countIf(steps = 1) step_1,
         countIf(steps = 2) step_2,
         countIf(steps = 3) step_3,
         avg(step_1_average_conversion_time_inner) step_1_average_conversion_time,
         avg(step_2_average_conversion_time_inner) step_2_average_conversion_time,
         median(step_1_median_conversion_time_inner) step_1_median_conversion_time,
         median(step_2_median_conversion_time_inner) step_2_median_conversion_time,
         prop
  FROM
    (SELECT aggregation_target,
            steps,
            avg(step_1_conversion_time) step_1_average_conversion_time_inner,
            avg(step_2_conversion_time) step_2_average_conversion_time_inner,
            median(step_1_conversion_time) step_1_median_conversion_time_inner,
            median(step_2_conversion_time) step_2_median_conversion_time_inner ,
            prop
     FROM
       (SELECT aggregation_target,
               steps,
               max(steps) over (PARTITION BY aggregation_target,
                                             prop) as max_steps,
                               step_1_conversion_time,
                               step_2_conversion_time ,
                               prop
        FROM
          (SELECT *,
                  if(latest_0 <= latest_1
                     AND latest_1 <= latest_0 + INTERVAL 7 DAY
                     AND latest_1 <= latest_2
                     AND latest_2 <= latest_0 + INTERVAL 7 DAY, 3, if(latest_0 <= latest_1
                                                                      AND latest_1 <= latest_0 + INTERVAL 7 DAY, 2, 1)) AS steps ,
                  if(isNotNull(latest_1)
                     AND latest_1 <= latest_0 + INTERVAL 7 DAY, dateDiff('second', toDateTime(latest_0), toDateTime(latest_1)), NULL) step_1_conversion_time,
                  if(isNotNull(latest_2)
                     AND latest_2 <= latest_1 + INTERVAL 7 DAY, dateDiff('second', toDateTime(latest_1), toDateTime(latest_2)), NULL) step_2_conversion_time,
                  prop
           FROM
             (SELECT aggregation_target, timestamp, step_0,
                                                    latest_0,
                                                    step_1,
                                                    latest_1,
                                                    step_2,
                                                    min(latest_2) over (PARTITION by aggregation_target,
                                                                                     prop
                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_2 ,
                                                                       prop
              FROM
                (SELECT aggregation_target, timestamp, step_0,
                                                       latest_0,
                                                       step_1,
                                                       latest_1,
                                                       step_2,
                                                       if(latest_2 < latest_1, NULL, latest_2) as latest_2 ,
                                                       prop
                 FROM
                   (SELECT aggregation_target, timestamp, step_0,
                                                          latest_0,
                                                          step_1,
                                                          min(latest_1) over (PARTITION by aggregation_target,
                                                                                           prop
                                                                              ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_1,
                                                                             step_2,
                                                                             min(latest_2) over (PARTITION by aggregation_target,
                                                                                                              prop
                                                                                                 ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_2 ,
                                                                                                if(has(['technology', 'finance'], prop), prop, 'Other') as prop
                    FROM
                      (SELECT *,
                              prop_vals as prop
                       FROM
                         (SELECT e.timestamp as timestamp,
                                 e."$group_0" as aggregation_target,
                                 if(notEmpty(overrides.person_id), overrides.person_id, e.person_id) as person_id ,
                                 if(event = 'sign up', 1, 0) as step_0,
                                 if(step_0 = 1, timestamp, null) as latest_0,
                                 if(event = 'play movie', 1, 0) as step_1,
                                 if(step_1 = 1, timestamp, null) as latest_1,
                                 if(event = 'buy', 1, 0) as step_2,
                                 if(step_2 = 1, timestamp, null) as latest_2,
                                 replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '') AS prop_basic,
                                 prop_basic as prop,
                                 argMinIf(prop, timestamp, isNotNull(prop)) over (PARTITION by aggregation_target) as prop_vals
                          FROM events e
                          LEFT OUTER JOIN
                            (SELECT argMax(override_person_id, version) as person_id,
                                    old_person_id
                             FROM person_overrides
                             WHERE team_id = 2
                             GROUP BY old_person_id) AS overrides ON e.person_id = overrides.old_person_id
                          LEFT JOIN
                            (SELECT group_key,
                                    argMax(group_properties, _timestamp) AS group_properties_0
                             FROM groups
                             WHERE team_id = 2
                               AND group_type_index = 0
                             GROUP BY group_key) groups_0 ON "$group_0" == groups_0.group_key
                          WHERE team_id = 2
                            AND event IN ['buy', 'play movie', 'sign up']
                            AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
                            AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-08 23:59:59', 'UTC')
                            AND (NOT has([''], "$group_0"))
                            AND notEmpty(e.person_id)
                            AND (step_0 = 1
                                 OR step_1 = 1
                                 OR step_2 = 1) )))))
           WHERE step_0 = 1 ))
     GROUP BY aggregation_target,
              steps,
              prop
     HAVING steps = max_steps)
  GROUP BY prop
  '
---
# name: TestStrictFunnelGroupBreakdown.test_funnel_breakdown_group
  '
  
  SELECT groupArray(value)
  FROM
    (SELECT replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '') AS value,
            count(*) as count
     FROM events e
     LEFT JOIN
       (SELECT group_key,
               argMax(group_properties, _timestamp) AS group_properties_0
        FROM groups
        WHERE team_id = 2
          AND group_type_index = 0
        GROUP BY group_key) groups_0 ON "$group_0" == groups_0.group_key
     WHERE team_id = 2
       AND event IN ['buy', 'play movie', 'sign up']
       AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
       AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-08 23:59:59', 'UTC')
     GROUP BY value
     ORDER BY count DESC, value DESC
     LIMIT 25
     OFFSET 0)
  '
---
# name: TestStrictFunnelGroupBreakdown.test_funnel_breakdown_group.1
  '
  
  SELECT countIf(steps = 1) step_1,
         countIf(steps = 2) step_2,
         countIf(steps = 3) step_3,
         avg(step_1_average_conversion_time_inner) step_1_average_conversion_time,
         avg(step_2_average_conversion_time_inner) step_2_average_conversion_time,
         median(step_1_median_conversion_time_inner) step_1_median_conversion_time,
         median(step_2_median_conversion_time_inner) step_2_median_conversion_time,
         prop
  FROM
    (SELECT aggregation_target,
            steps,
            avg(step_1_conversion_time) step_1_average_conversion_time_inner,
            avg(step_2_conversion_time) step_2_average_conversion_time_inner,
            median(step_1_conversion_time) step_1_median_conversion_time_inner,
            median(step_2_conversion_time) step_2_median_conversion_time_inner ,
            prop
     FROM
       (SELECT aggregation_target,
               steps,
               max(steps) over (PARTITION BY aggregation_target,
                                             prop) as max_steps,
                               step_1_conversion_time,
                               step_2_conversion_time ,
                               prop
        FROM
          (SELECT *,
                  if(latest_0 <= latest_1
                     AND latest_1 <= latest_0 + INTERVAL 7 DAY
                     AND latest_1 <= latest_2
                     AND latest_2 <= latest_0 + INTERVAL 7 DAY, 3, if(latest_0 <= latest_1
                                                                      AND latest_1 <= latest_0 + INTERVAL 7 DAY, 2, 1)) AS steps ,
                  if(isNotNull(latest_1)
                     AND latest_1 <= latest_0 + INTERVAL 7 DAY, dateDiff('second', toDateTime(latest_0), toDateTime(latest_1)), NULL) step_1_conversion_time,
                  if(isNotNull(latest_2)
                     AND latest_2 <= latest_1 + INTERVAL 7 DAY, dateDiff('second', toDateTime(latest_1), toDateTime(latest_2)), NULL) step_2_conversion_time,
                  prop
           FROM
             (SELECT aggregation_target, timestamp, step_0,
                                                    latest_0,
                                                    step_1,
                                                    latest_1,
                                                    step_2,
                                                    min(latest_2) over (PARTITION by aggregation_target,
                                                                                     prop
                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_2 ,
                                                                       prop
              FROM
                (SELECT aggregation_target, timestamp, step_0,
                                                       latest_0,
                                                       step_1,
                                                       latest_1,
                                                       step_2,
                                                       if(latest_2 < latest_1, NULL, latest_2) as latest_2 ,
                                                       prop
                 FROM
                   (SELECT aggregation_target, timestamp, step_0,
                                                          latest_0,
                                                          step_1,
                                                          min(latest_1) over (PARTITION by aggregation_target,
                                                                                           prop
                                                                              ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_1,
                                                                             step_2,
                                                                             min(latest_2) over (PARTITION by aggregation_target,
                                                                                                              prop
                                                                                                 ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_2 ,
                                                                                                if(has(['technology', 'finance'], prop), prop, 'Other') as prop
                    FROM
                      (SELECT *,
                              prop_vals as prop
                       FROM
                         (SELECT e.timestamp as timestamp,
                                 pdi.person_id as aggregation_target,
                                 pdi.person_id as person_id ,
                                 if(event = 'sign up', 1, 0) as step_0,
                                 if(step_0 = 1, timestamp, null) as latest_0,
                                 if(event = 'play movie', 1, 0) as step_1,
                                 if(step_1 = 1, timestamp, null) as latest_1,
                                 if(event = 'buy', 1, 0) as step_2,
                                 if(step_2 = 1, timestamp, null) as latest_2,
                                 replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '') AS prop_basic,
                                 prop_basic as prop,
                                 argMinIf(prop, timestamp, isNotNull(prop)) over (PARTITION by aggregation_target) as prop_vals
                          FROM events e
                          INNER JOIN
                            (SELECT distinct_id,
                                    argMax(person_id, version) as person_id
                             FROM person_distinct_id2
                             WHERE team_id = 2
                             GROUP BY distinct_id
                             HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
                          LEFT JOIN
                            (SELECT group_key,
                                    argMax(group_properties, _timestamp) AS group_properties_0
                             FROM groups
                             WHERE team_id = 2
                               AND group_type_index = 0
                             GROUP BY group_key) groups_0 ON "$group_0" == groups_0.group_key
                          WHERE team_id = 2
                            AND event IN ['buy', 'play movie', 'sign up']
                            AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
                            AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-08 23:59:59', 'UTC')
                            AND (step_0 = 1
                                 OR step_1 = 1
                                 OR step_2 = 1) )))))
           WHERE step_0 = 1 ))
     GROUP BY aggregation_target,
              steps,
              prop
     HAVING steps = max_steps)
  GROUP BY prop
  '
---
# name: TestStrictFunnelGroupBreakdown.test_funnel_breakdown_group.2
  '
  
  SELECT groupArray(value)
  FROM
    (SELECT replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '') AS value,
            count(*) as count
     FROM events e
     LEFT JOIN
       (SELECT group_key,
               argMax(group_properties, _timestamp) AS group_properties_0
        FROM groups
        WHERE team_id = 2
          AND group_type_index = 0
        GROUP BY group_key) groups_0 ON "$group_0" == groups_0.group_key
     WHERE team_id = 2
       AND event IN ['buy', 'play movie', 'sign up']
       AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
       AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-08 23:59:59', 'UTC')
     GROUP BY value
     ORDER BY count DESC, value DESC
     LIMIT 25
     OFFSET 0)
  '
---
# name: TestStrictFunnelGroupBreakdown.test_funnel_breakdown_group.3
  '
  
  SELECT aggregation_target AS actor_id
  FROM
    (SELECT aggregation_target,
            steps,
            avg(step_1_conversion_time) step_1_average_conversion_time_inner,
            avg(step_2_conversion_time) step_2_average_conversion_time_inner,
            median(step_1_conversion_time) step_1_median_conversion_time_inner,
            median(step_2_conversion_time) step_2_median_conversion_time_inner,
            prop
     FROM
       (SELECT aggregation_target,
               steps,
               max(steps) over (PARTITION BY aggregation_target,
                                             prop) as max_steps,
                               step_1_conversion_time,
                               step_2_conversion_time,
                               prop
        FROM
          (SELECT *,
                  if(latest_0 <= latest_1
                     AND latest_1 <= latest_0 + INTERVAL 7 DAY
                     AND latest_1 <= latest_2
                     AND latest_2 <= latest_0 + INTERVAL 7 DAY, 3, if(latest_0 <= latest_1
                                                                      AND latest_1 <= latest_0 + INTERVAL 7 DAY, 2, 1)) AS steps,
                  if(isNotNull(latest_1)
                     AND latest_1 <= latest_0 + INTERVAL 7 DAY, dateDiff('second', toDateTime(latest_0), toDateTime(latest_1)), NULL) step_1_conversion_time,
                  if(isNotNull(latest_2)
                     AND latest_2 <= latest_1 + INTERVAL 7 DAY, dateDiff('second', toDateTime(latest_1), toDateTime(latest_2)), NULL) step_2_conversion_time
           FROM
             (SELECT aggregation_target, timestamp, step_0,
                                                    latest_0,
                                                    step_1,
                                                    min(latest_1) over (PARTITION by aggregation_target,
                                                                                     prop
                                                                        ORDER BY timestamp DESC ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING) latest_1,
                                                                       step_2,
                                                                       min(latest_2) over (PARTITION by aggregation_target,
                                                                                                        prop
                                                                                           ORDER BY timestamp DESC ROWS BETWEEN 2 PRECEDING AND 2 PRECEDING) latest_2 ,
                                                                                          if(has(['technology', 'finance'], prop), prop, 'Other') as prop
              FROM
                (SELECT *,
                        prop_vals as prop
                 FROM
                   (SELECT e.timestamp as timestamp,
                           pdi.person_id as aggregation_target,
                           pdi.person_id as person_id ,
                           if(event = 'sign up', 1, 0) as step_0,
                           if(step_0 = 1, timestamp, null) as latest_0,
                           if(event = 'play movie', 1, 0) as step_1,
                           if(step_1 = 1, timestamp, null) as latest_1,
                           if(event = 'buy', 1, 0) as step_2,
                           if(step_2 = 1, timestamp, null) as latest_2,
                           replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '') AS prop_basic,
                           prop_basic as prop,
                           argMinIf(prop, timestamp, isNotNull(prop)) over (PARTITION by aggregation_target) as prop_vals
                    FROM events e
                    INNER JOIN
                      (SELECT distinct_id,
                              argMax(person_id, version) as person_id
                       FROM person_distinct_id2
                       WHERE team_id = 2
                       GROUP BY distinct_id
                       HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
                    LEFT JOIN
                      (SELECT group_key,
                              argMax(group_properties, _timestamp) AS group_properties_0
                       FROM groups
                       WHERE team_id = 2
                         AND group_type_index = 0
                       GROUP BY group_key) groups_0 ON "$group_0" == groups_0.group_key
                    WHERE team_id = 2
                      AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
                      AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-08 23:59:59', 'UTC')
                      AND (1=1) )))
           WHERE step_0 = 1 ))
     GROUP BY aggregation_target,
              steps,
              prop
     HAVING steps = max_steps)
  WHERE steps IN [1, 2, 3]
    AND arrayFlatten(array(prop)) = arrayFlatten(array('finance'))
  ORDER BY aggregation_target
  LIMIT 100
  OFFSET 0
  '
---
# name: TestStrictFunnelGroupBreakdown.test_funnel_breakdown_group.4
  '
  
  SELECT groupArray(value)
  FROM
    (SELECT replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '') AS value,
            count(*) as count
     FROM events e
     LEFT JOIN
       (SELECT group_key,
               argMax(group_properties, _timestamp) AS group_properties_0
        FROM groups
        WHERE team_id = 2
          AND group_type_index = 0
        GROUP BY group_key) groups_0 ON "$group_0" == groups_0.group_key
     WHERE team_id = 2
       AND event IN ['buy', 'play movie', 'sign up']
       AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
       AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-08 23:59:59', 'UTC')
     GROUP BY value
     ORDER BY count DESC, value DESC
     LIMIT 25
     OFFSET 0)
  '
---
# name: TestStrictFunnelGroupBreakdown.test_funnel_breakdown_group.5
  '
  
  SELECT aggregation_target AS actor_id
  FROM
    (SELECT aggregation_target,
            steps,
            avg(step_1_conversion_time) step_1_average_conversion_time_inner,
            avg(step_2_conversion_time) step_2_average_conversion_time_inner,
            median(step_1_conversion_time) step_1_median_conversion_time_inner,
            median(step_2_conversion_time) step_2_median_conversion_time_inner,
            prop
     FROM
       (SELECT aggregation_target,
               steps,
               max(steps) over (PARTITION BY aggregation_target,
                                             prop) as max_steps,
                               step_1_conversion_time,
                               step_2_conversion_time,
                               prop
        FROM
          (SELECT *,
                  if(latest_0 <= latest_1
                     AND latest_1 <= latest_0 + INTERVAL 7 DAY
                     AND latest_1 <= latest_2
                     AND latest_2 <= latest_0 + INTERVAL 7 DAY, 3, if(latest_0 <= latest_1
                                                                      AND latest_1 <= latest_0 + INTERVAL 7 DAY, 2, 1)) AS steps,
                  if(isNotNull(latest_1)
                     AND latest_1 <= latest_0 + INTERVAL 7 DAY, dateDiff('second', toDateTime(latest_0), toDateTime(latest_1)), NULL) step_1_conversion_time,
                  if(isNotNull(latest_2)
                     AND latest_2 <= latest_1 + INTERVAL 7 DAY, dateDiff('second', toDateTime(latest_1), toDateTime(latest_2)), NULL) step_2_conversion_time
           FROM
             (SELECT aggregation_target, timestamp, step_0,
                                                    latest_0,
                                                    step_1,
                                                    min(latest_1) over (PARTITION by aggregation_target,
                                                                                     prop
                                                                        ORDER BY timestamp DESC ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING) latest_1,
                                                                       step_2,
                                                                       min(latest_2) over (PARTITION by aggregation_target,
                                                                                                        prop
                                                                                           ORDER BY timestamp DESC ROWS BETWEEN 2 PRECEDING AND 2 PRECEDING) latest_2 ,
                                                                                          if(has(['technology', 'finance'], prop), prop, 'Other') as prop
              FROM
                (SELECT *,
                        prop_vals as prop
                 FROM
                   (SELECT e.timestamp as timestamp,
                           pdi.person_id as aggregation_target,
                           pdi.person_id as person_id ,
                           if(event = 'sign up', 1, 0) as step_0,
                           if(step_0 = 1, timestamp, null) as latest_0,
                           if(event = 'play movie', 1, 0) as step_1,
                           if(step_1 = 1, timestamp, null) as latest_1,
                           if(event = 'buy', 1, 0) as step_2,
                           if(step_2 = 1, timestamp, null) as latest_2,
                           replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '') AS prop_basic,
                           prop_basic as prop,
                           argMinIf(prop, timestamp, isNotNull(prop)) over (PARTITION by aggregation_target) as prop_vals
                    FROM events e
                    INNER JOIN
                      (SELECT distinct_id,
                              argMax(person_id, version) as person_id
                       FROM person_distinct_id2
                       WHERE team_id = 2
                       GROUP BY distinct_id
                       HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
                    LEFT JOIN
                      (SELECT group_key,
                              argMax(group_properties, _timestamp) AS group_properties_0
                       FROM groups
                       WHERE team_id = 2
                         AND group_type_index = 0
                       GROUP BY group_key) groups_0 ON "$group_0" == groups_0.group_key
                    WHERE team_id = 2
                      AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
                      AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-08 23:59:59', 'UTC')
                      AND (1=1) )))
           WHERE step_0 = 1 ))
     GROUP BY aggregation_target,
              steps,
              prop
     HAVING steps = max_steps)
  WHERE steps IN [2, 3]
    AND arrayFlatten(array(prop)) = arrayFlatten(array('finance'))
  ORDER BY aggregation_target
  LIMIT 100
  OFFSET 0
  '
---
# name: TestStrictFunnelGroupBreakdown.test_funnel_breakdown_group.6
  '
  
  SELECT groupArray(value)
  FROM
    (SELECT replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '') AS value,
            count(*) as count
     FROM events e
     LEFT JOIN
       (SELECT group_key,
               argMax(group_properties, _timestamp) AS group_properties_0
        FROM groups
        WHERE team_id = 2
          AND group_type_index = 0
        GROUP BY group_key) groups_0 ON "$group_0" == groups_0.group_key
     WHERE team_id = 2
       AND event IN ['buy', 'play movie', 'sign up']
       AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
       AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-08 23:59:59', 'UTC')
     GROUP BY value
     ORDER BY count DESC, value DESC
     LIMIT 25
     OFFSET 0)
  '
---
# name: TestStrictFunnelGroupBreakdown.test_funnel_breakdown_group.7
  '
  
  SELECT aggregation_target AS actor_id
  FROM
    (SELECT aggregation_target,
            steps,
            avg(step_1_conversion_time) step_1_average_conversion_time_inner,
            avg(step_2_conversion_time) step_2_average_conversion_time_inner,
            median(step_1_conversion_time) step_1_median_conversion_time_inner,
            median(step_2_conversion_time) step_2_median_conversion_time_inner,
            prop
     FROM
       (SELECT aggregation_target,
               steps,
               max(steps) over (PARTITION BY aggregation_target,
                                             prop) as max_steps,
                               step_1_conversion_time,
                               step_2_conversion_time,
                               prop
        FROM
          (SELECT *,
                  if(latest_0 <= latest_1
                     AND latest_1 <= latest_0 + INTERVAL 7 DAY
                     AND latest_1 <= latest_2
                     AND latest_2 <= latest_0 + INTERVAL 7 DAY, 3, if(latest_0 <= latest_1
                                                                      AND latest_1 <= latest_0 + INTERVAL 7 DAY, 2, 1)) AS steps,
                  if(isNotNull(latest_1)
                     AND latest_1 <= latest_0 + INTERVAL 7 DAY, dateDiff('second', toDateTime(latest_0), toDateTime(latest_1)), NULL) step_1_conversion_time,
                  if(isNotNull(latest_2)
                     AND latest_2 <= latest_1 + INTERVAL 7 DAY, dateDiff('second', toDateTime(latest_1), toDateTime(latest_2)), NULL) step_2_conversion_time
           FROM
             (SELECT aggregation_target, timestamp, step_0,
                                                    latest_0,
                                                    step_1,
                                                    min(latest_1) over (PARTITION by aggregation_target,
                                                                                     prop
                                                                        ORDER BY timestamp DESC ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING) latest_1,
                                                                       step_2,
                                                                       min(latest_2) over (PARTITION by aggregation_target,
                                                                                                        prop
                                                                                           ORDER BY timestamp DESC ROWS BETWEEN 2 PRECEDING AND 2 PRECEDING) latest_2 ,
                                                                                          if(has(['technology', 'finance'], prop), prop, 'Other') as prop
              FROM
                (SELECT *,
                        prop_vals as prop
                 FROM
                   (SELECT e.timestamp as timestamp,
                           pdi.person_id as aggregation_target,
                           pdi.person_id as person_id ,
                           if(event = 'sign up', 1, 0) as step_0,
                           if(step_0 = 1, timestamp, null) as latest_0,
                           if(event = 'play movie', 1, 0) as step_1,
                           if(step_1 = 1, timestamp, null) as latest_1,
                           if(event = 'buy', 1, 0) as step_2,
                           if(step_2 = 1, timestamp, null) as latest_2,
                           replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '') AS prop_basic,
                           prop_basic as prop,
                           argMinIf(prop, timestamp, isNotNull(prop)) over (PARTITION by aggregation_target) as prop_vals
                    FROM events e
                    INNER JOIN
                      (SELECT distinct_id,
                              argMax(person_id, version) as person_id
                       FROM person_distinct_id2
                       WHERE team_id = 2
                       GROUP BY distinct_id
                       HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
                    LEFT JOIN
                      (SELECT group_key,
                              argMax(group_properties, _timestamp) AS group_properties_0
                       FROM groups
                       WHERE team_id = 2
                         AND group_type_index = 0
                       GROUP BY group_key) groups_0 ON "$group_0" == groups_0.group_key
                    WHERE team_id = 2
                      AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
                      AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-08 23:59:59', 'UTC')
                      AND (1=1) )))
           WHERE step_0 = 1 ))
     GROUP BY aggregation_target,
              steps,
              prop
     HAVING steps = max_steps)
  WHERE steps IN [1, 2, 3]
    AND arrayFlatten(array(prop)) = arrayFlatten(array('technology'))
  ORDER BY aggregation_target
  LIMIT 100
  OFFSET 0
  '
---
# name: TestStrictFunnelGroupBreakdown.test_funnel_breakdown_group.8
  '
  
  SELECT groupArray(value)
  FROM
    (SELECT replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '') AS value,
            count(*) as count
     FROM events e
     LEFT JOIN
       (SELECT group_key,
               argMax(group_properties, _timestamp) AS group_properties_0
        FROM groups
        WHERE team_id = 2
          AND group_type_index = 0
        GROUP BY group_key) groups_0 ON "$group_0" == groups_0.group_key
     WHERE team_id = 2
       AND event IN ['buy', 'play movie', 'sign up']
       AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
       AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-08 23:59:59', 'UTC')
     GROUP BY value
     ORDER BY count DESC, value DESC
     LIMIT 25
     OFFSET 0)
  '
---
# name: TestStrictFunnelGroupBreakdown.test_funnel_breakdown_group.9
  '
  
  SELECT aggregation_target AS actor_id
  FROM
    (SELECT aggregation_target,
            steps,
            avg(step_1_conversion_time) step_1_average_conversion_time_inner,
            avg(step_2_conversion_time) step_2_average_conversion_time_inner,
            median(step_1_conversion_time) step_1_median_conversion_time_inner,
            median(step_2_conversion_time) step_2_median_conversion_time_inner,
            prop
     FROM
       (SELECT aggregation_target,
               steps,
               max(steps) over (PARTITION BY aggregation_target,
                                             prop) as max_steps,
                               step_1_conversion_time,
                               step_2_conversion_time,
                               prop
        FROM
          (SELECT *,
                  if(latest_0 <= latest_1
                     AND latest_1 <= latest_0 + INTERVAL 7 DAY
                     AND latest_1 <= latest_2
                     AND latest_2 <= latest_0 + INTERVAL 7 DAY, 3, if(latest_0 <= latest_1
                                                                      AND latest_1 <= latest_0 + INTERVAL 7 DAY, 2, 1)) AS steps,
                  if(isNotNull(latest_1)
                     AND latest_1 <= latest_0 + INTERVAL 7 DAY, dateDiff('second', toDateTime(latest_0), toDateTime(latest_1)), NULL) step_1_conversion_time,
                  if(isNotNull(latest_2)
                     AND latest_2 <= latest_1 + INTERVAL 7 DAY, dateDiff('second', toDateTime(latest_1), toDateTime(latest_2)), NULL) step_2_conversion_time
           FROM
             (SELECT aggregation_target, timestamp, step_0,
                                                    latest_0,
                                                    step_1,
                                                    min(latest_1) over (PARTITION by aggregation_target,
                                                                                     prop
                                                                        ORDER BY timestamp DESC ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING) latest_1,
                                                                       step_2,
                                                                       min(latest_2) over (PARTITION by aggregation_target,
                                                                                                        prop
                                                                                           ORDER BY timestamp DESC ROWS BETWEEN 2 PRECEDING AND 2 PRECEDING) latest_2 ,
                                                                                          if(has(['technology', 'finance'], prop), prop, 'Other') as prop
              FROM
                (SELECT *,
                        prop_vals as prop
                 FROM
                   (SELECT e.timestamp as timestamp,
                           pdi.person_id as aggregation_target,
                           pdi.person_id as person_id ,
                           if(event = 'sign up', 1, 0) as step_0,
                           if(step_0 = 1, timestamp, null) as latest_0,
                           if(event = 'play movie', 1, 0) as step_1,
                           if(step_1 = 1, timestamp, null) as latest_1,
                           if(event = 'buy', 1, 0) as step_2,
                           if(step_2 = 1, timestamp, null) as latest_2,
                           replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '') AS prop_basic,
                           prop_basic as prop,
                           argMinIf(prop, timestamp, isNotNull(prop)) over (PARTITION by aggregation_target) as prop_vals
                    FROM events e
                    INNER JOIN
                      (SELECT distinct_id,
                              argMax(person_id, version) as person_id
                       FROM person_distinct_id2
                       WHERE team_id = 2
                       GROUP BY distinct_id
                       HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
                    LEFT JOIN
                      (SELECT group_key,
                              argMax(group_properties, _timestamp) AS group_properties_0
                       FROM groups
                       WHERE team_id = 2
                         AND group_type_index = 0
                       GROUP BY group_key) groups_0 ON "$group_0" == groups_0.group_key
                    WHERE team_id = 2
                      AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
                      AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-08 23:59:59', 'UTC')
                      AND (1=1) )))
           WHERE step_0 = 1 ))
     GROUP BY aggregation_target,
              steps,
              prop
     HAVING steps = max_steps)
  WHERE steps IN [2, 3]
    AND arrayFlatten(array(prop)) = arrayFlatten(array('technology'))
  ORDER BY aggregation_target
  LIMIT 100
  OFFSET 0
  '
---
# name: TestUnorderedFunnelGroupBreakdown.test_funnel_aggregate_by_groups_breakdown_group_person_on_events
  '
  
  SELECT groupArray(value)
  FROM
    (SELECT replaceRegexpAll(JSONExtractRaw(group0_properties, 'industry'), '^"|"$', '') AS value,
            count(*) as count
     FROM events e
     LEFT JOIN
       (SELECT group_key,
               argMax(group_properties, _timestamp) AS group_properties_0
        FROM groups
        WHERE team_id = 2
          AND group_type_index = 0
        GROUP BY group_key) groups_0 ON "$group_0" == groups_0.group_key
     WHERE team_id = 2
       AND event IN ['buy', 'play movie', 'sign up']
       AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
       AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-08 23:59:59', 'UTC')
       AND (NOT has([''], "$group_0"))
       AND notEmpty(e.person_id)
     GROUP BY value
     ORDER BY count DESC, value DESC
     LIMIT 25
     OFFSET 0)
  '
---
# name: TestUnorderedFunnelGroupBreakdown.test_funnel_aggregate_by_groups_breakdown_group_person_on_events.1
  '
  
  SELECT countIf(steps = 1) step_1,
         countIf(steps = 2) step_2,
         countIf(steps = 3) step_3,
         avg(step_1_average_conversion_time_inner) step_1_average_conversion_time,
         avg(step_2_average_conversion_time_inner) step_2_average_conversion_time,
         median(step_1_median_conversion_time_inner) step_1_median_conversion_time,
         median(step_2_median_conversion_time_inner) step_2_median_conversion_time,
         prop
  FROM
    (SELECT aggregation_target,
            steps,
            avg(step_1_conversion_time) step_1_average_conversion_time_inner,
            avg(step_2_conversion_time) step_2_average_conversion_time_inner,
            median(step_1_conversion_time) step_1_median_conversion_time_inner,
            median(step_2_conversion_time) step_2_median_conversion_time_inner ,
            prop
     FROM
       (SELECT aggregation_target,
               steps,
               max(steps) over (PARTITION BY aggregation_target,
                                             prop) as max_steps,
                               step_1_conversion_time,
                               step_2_conversion_time ,
                               prop
        FROM
          (SELECT *,
                  if(latest_0 <= latest_1
                     AND latest_1 <= latest_0 + INTERVAL 7 DAY
                     AND latest_1 <= latest_2
                     AND latest_2 <= latest_0 + INTERVAL 7 DAY, 3, if(latest_0 <= latest_1
                                                                      AND latest_1 <= latest_0 + INTERVAL 7 DAY, 2, 1)) AS steps ,
                  if(isNotNull(latest_1)
                     AND latest_1 <= latest_0 + INTERVAL 7 DAY, dateDiff('second', toDateTime(latest_0), toDateTime(latest_1)), NULL) step_1_conversion_time,
                  if(isNotNull(latest_2)
                     AND latest_2 <= latest_1 + INTERVAL 7 DAY, dateDiff('second', toDateTime(latest_1), toDateTime(latest_2)), NULL) step_2_conversion_time,
                  prop
           FROM
             (SELECT aggregation_target, timestamp, step_0,
                                                    latest_0,
                                                    step_1,
                                                    latest_1,
                                                    step_2,
                                                    min(latest_2) over (PARTITION by aggregation_target,
                                                                                     prop
                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_2 ,
                                                                       prop
              FROM
                (SELECT aggregation_target, timestamp, step_0,
                                                       latest_0,
                                                       step_1,
                                                       latest_1,
                                                       step_2,
                                                       if(latest_2 < latest_1, NULL, latest_2) as latest_2 ,
                                                       prop
                 FROM
                   (SELECT aggregation_target, timestamp, step_0,
                                                          latest_0,
                                                          step_1,
                                                          min(latest_1) over (PARTITION by aggregation_target,
                                                                                           prop
                                                                              ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_1,
                                                                             step_2,
                                                                             min(latest_2) over (PARTITION by aggregation_target,
                                                                                                              prop
                                                                                                 ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_2 ,
                                                                                                if(has(['technology', 'finance'], prop), prop, 'Other') as prop
                    FROM
                      (SELECT *,
                              prop_vals as prop
                       FROM
                         (SELECT e.timestamp as timestamp,
                                 e."$group_0" as aggregation_target,
                                 e.person_id as person_id ,
                                 if(event = 'sign up', 1, 0) as step_0,
                                 if(step_0 = 1, timestamp, null) as latest_0,
                                 if(event = 'play movie', 1, 0) as step_1,
                                 if(step_1 = 1, timestamp, null) as latest_1,
                                 if(event = 'buy', 1, 0) as step_2,
                                 if(step_2 = 1, timestamp, null) as latest_2,
                                 replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '') AS prop_basic,
                                 prop_basic as prop,
                                 argMinIf(prop, timestamp, isNotNull(prop)) over (PARTITION by aggregation_target) as prop_vals
                          FROM events e
                          LEFT JOIN
                            (SELECT group_key,
                                    argMax(group_properties, _timestamp) AS group_properties_0
                             FROM groups
                             WHERE team_id = 2
                               AND group_type_index = 0
                             GROUP BY group_key) groups_0 ON "$group_0" == groups_0.group_key
                          WHERE team_id = 2
                            AND event IN ['buy', 'play movie', 'sign up']
                            AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
                            AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-08 23:59:59', 'UTC')
                            AND (NOT has([''], "$group_0"))
                            AND notEmpty(e.person_id)
                            AND (step_0 = 1
                                 OR step_1 = 1
                                 OR step_2 = 1) )))))
           WHERE step_0 = 1 ))
     GROUP BY aggregation_target,
              steps,
              prop
     HAVING steps = max_steps)
  GROUP BY prop
  '
---
# name: TestUnorderedFunnelGroupBreakdown.test_funnel_aggregate_by_groups_breakdown_group_person_on_events_poe_v2
  '
  
  SELECT groupArray(value)
  FROM
    (SELECT replaceRegexpAll(JSONExtractRaw(group0_properties, 'industry'), '^"|"$', '') AS value,
            count(*) as count
     FROM events e
     LEFT OUTER JOIN
       (SELECT argMax(override_person_id, version) as person_id,
               old_person_id
        FROM person_overrides
        WHERE team_id = 2
        GROUP BY old_person_id) AS overrides ON e.person_id = overrides.old_person_id
     LEFT JOIN
       (SELECT group_key,
               argMax(group_properties, _timestamp) AS group_properties_0
        FROM groups
        WHERE team_id = 2
          AND group_type_index = 0
        GROUP BY group_key) groups_0 ON "$group_0" == groups_0.group_key
     WHERE team_id = 2
       AND event IN ['buy', 'play movie', 'sign up']
       AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
       AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-08 23:59:59', 'UTC')
       AND (NOT has([''], "$group_0"))
       AND notEmpty(e.person_id)
     GROUP BY value
     ORDER BY count DESC, value DESC
     LIMIT 25
     OFFSET 0)
  '
---
# name: TestUnorderedFunnelGroupBreakdown.test_funnel_aggregate_by_groups_breakdown_group_person_on_events_poe_v2.1
  '
  
  SELECT countIf(steps = 1) step_1,
         countIf(steps = 2) step_2,
         countIf(steps = 3) step_3,
         avg(step_1_average_conversion_time_inner) step_1_average_conversion_time,
         avg(step_2_average_conversion_time_inner) step_2_average_conversion_time,
         median(step_1_median_conversion_time_inner) step_1_median_conversion_time,
         median(step_2_median_conversion_time_inner) step_2_median_conversion_time,
         prop
  FROM
    (SELECT aggregation_target,
            steps,
            avg(step_1_conversion_time) step_1_average_conversion_time_inner,
            avg(step_2_conversion_time) step_2_average_conversion_time_inner,
            median(step_1_conversion_time) step_1_median_conversion_time_inner,
            median(step_2_conversion_time) step_2_median_conversion_time_inner ,
            prop
     FROM
       (SELECT aggregation_target,
               steps,
               max(steps) over (PARTITION BY aggregation_target,
                                             prop) as max_steps,
                               step_1_conversion_time,
                               step_2_conversion_time ,
                               prop
        FROM
          (SELECT *,
                  if(latest_0 <= latest_1
                     AND latest_1 <= latest_0 + INTERVAL 7 DAY
                     AND latest_1 <= latest_2
                     AND latest_2 <= latest_0 + INTERVAL 7 DAY, 3, if(latest_0 <= latest_1
                                                                      AND latest_1 <= latest_0 + INTERVAL 7 DAY, 2, 1)) AS steps ,
                  if(isNotNull(latest_1)
                     AND latest_1 <= latest_0 + INTERVAL 7 DAY, dateDiff('second', toDateTime(latest_0), toDateTime(latest_1)), NULL) step_1_conversion_time,
                  if(isNotNull(latest_2)
                     AND latest_2 <= latest_1 + INTERVAL 7 DAY, dateDiff('second', toDateTime(latest_1), toDateTime(latest_2)), NULL) step_2_conversion_time,
                  prop
           FROM
             (SELECT aggregation_target, timestamp, step_0,
                                                    latest_0,
                                                    step_1,
                                                    latest_1,
                                                    step_2,
                                                    min(latest_2) over (PARTITION by aggregation_target,
                                                                                     prop
                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_2 ,
                                                                       prop
              FROM
                (SELECT aggregation_target, timestamp, step_0,
                                                       latest_0,
                                                       step_1,
                                                       latest_1,
                                                       step_2,
                                                       if(latest_2 < latest_1, NULL, latest_2) as latest_2 ,
                                                       prop
                 FROM
                   (SELECT aggregation_target, timestamp, step_0,
                                                          latest_0,
                                                          step_1,
                                                          min(latest_1) over (PARTITION by aggregation_target,
                                                                                           prop
                                                                              ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_1,
                                                                             step_2,
                                                                             min(latest_2) over (PARTITION by aggregation_target,
                                                                                                              prop
                                                                                                 ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_2 ,
                                                                                                if(has(['technology', 'finance'], prop), prop, 'Other') as prop
                    FROM
                      (SELECT *,
                              prop_vals as prop
                       FROM
                         (SELECT e.timestamp as timestamp,
                                 e."$group_0" as aggregation_target,
                                 if(notEmpty(overrides.person_id), overrides.person_id, e.person_id) as person_id ,
                                 if(event = 'sign up', 1, 0) as step_0,
                                 if(step_0 = 1, timestamp, null) as latest_0,
                                 if(event = 'play movie', 1, 0) as step_1,
                                 if(step_1 = 1, timestamp, null) as latest_1,
                                 if(event = 'buy', 1, 0) as step_2,
                                 if(step_2 = 1, timestamp, null) as latest_2,
                                 replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '') AS prop_basic,
                                 prop_basic as prop,
                                 argMinIf(prop, timestamp, isNotNull(prop)) over (PARTITION by aggregation_target) as prop_vals
                          FROM events e
                          LEFT OUTER JOIN
                            (SELECT argMax(override_person_id, version) as person_id,
                                    old_person_id
                             FROM person_overrides
                             WHERE team_id = 2
                             GROUP BY old_person_id) AS overrides ON e.person_id = overrides.old_person_id
                          LEFT JOIN
                            (SELECT group_key,
                                    argMax(group_properties, _timestamp) AS group_properties_0
                             FROM groups
                             WHERE team_id = 2
                               AND group_type_index = 0
                             GROUP BY group_key) groups_0 ON "$group_0" == groups_0.group_key
                          WHERE team_id = 2
                            AND event IN ['buy', 'play movie', 'sign up']
                            AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
                            AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-08 23:59:59', 'UTC')
                            AND (NOT has([''], "$group_0"))
                            AND notEmpty(e.person_id)
                            AND (step_0 = 1
                                 OR step_1 = 1
                                 OR step_2 = 1) )))))
           WHERE step_0 = 1 ))
     GROUP BY aggregation_target,
              steps,
              prop
     HAVING steps = max_steps)
  GROUP BY prop
  '
---
# name: TestUnorderedFunnelGroupBreakdown.test_funnel_breakdown_group
  '
  
  SELECT groupArray(value)
  FROM
    (SELECT replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '') AS value,
            count(*) as count
     FROM events e
     LEFT JOIN
       (SELECT group_key,
               argMax(group_properties, _timestamp) AS group_properties_0
        FROM groups
        WHERE team_id = 2
          AND group_type_index = 0
        GROUP BY group_key) groups_0 ON "$group_0" == groups_0.group_key
     WHERE team_id = 2
       AND event IN ['buy', 'play movie', 'sign up']
       AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
       AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-08 23:59:59', 'UTC')
     GROUP BY value
     ORDER BY count DESC, value DESC
     LIMIT 25
     OFFSET 0)
  '
---
# name: TestUnorderedFunnelGroupBreakdown.test_funnel_breakdown_group.1
  '
  
  SELECT countIf(steps = 1) step_1,
         countIf(steps = 2) step_2,
         countIf(steps = 3) step_3,
         avg(step_1_average_conversion_time_inner) step_1_average_conversion_time,
         avg(step_2_average_conversion_time_inner) step_2_average_conversion_time,
         median(step_1_median_conversion_time_inner) step_1_median_conversion_time,
         median(step_2_median_conversion_time_inner) step_2_median_conversion_time,
         prop
  FROM
    (SELECT aggregation_target,
            steps,
            avg(step_1_conversion_time) step_1_average_conversion_time_inner,
            avg(step_2_conversion_time) step_2_average_conversion_time_inner,
            median(step_1_conversion_time) step_1_median_conversion_time_inner,
            median(step_2_conversion_time) step_2_median_conversion_time_inner ,
            prop
     FROM
       (SELECT aggregation_target,
               steps,
               max(steps) over (PARTITION BY aggregation_target,
                                             prop) as max_steps,
                               step_1_conversion_time,
                               step_2_conversion_time ,
                               prop
        FROM
          (SELECT *,
                  if(latest_0 <= latest_1
                     AND latest_1 <= latest_0 + INTERVAL 7 DAY
                     AND latest_1 <= latest_2
                     AND latest_2 <= latest_0 + INTERVAL 7 DAY, 3, if(latest_0 <= latest_1
                                                                      AND latest_1 <= latest_0 + INTERVAL 7 DAY, 2, 1)) AS steps ,
                  if(isNotNull(latest_1)
                     AND latest_1 <= latest_0 + INTERVAL 7 DAY, dateDiff('second', toDateTime(latest_0), toDateTime(latest_1)), NULL) step_1_conversion_time,
                  if(isNotNull(latest_2)
                     AND latest_2 <= latest_1 + INTERVAL 7 DAY, dateDiff('second', toDateTime(latest_1), toDateTime(latest_2)), NULL) step_2_conversion_time,
                  prop
           FROM
             (SELECT aggregation_target, timestamp, step_0,
                                                    latest_0,
                                                    step_1,
                                                    latest_1,
                                                    step_2,
                                                    min(latest_2) over (PARTITION by aggregation_target,
                                                                                     prop
                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_2 ,
                                                                       prop
              FROM
                (SELECT aggregation_target, timestamp, step_0,
                                                       latest_0,
                                                       step_1,
                                                       latest_1,
                                                       step_2,
                                                       if(latest_2 < latest_1, NULL, latest_2) as latest_2 ,
                                                       prop
                 FROM
                   (SELECT aggregation_target, timestamp, step_0,
                                                          latest_0,
                                                          step_1,
                                                          min(latest_1) over (PARTITION by aggregation_target,
                                                                                           prop
                                                                              ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_1,
                                                                             step_2,
                                                                             min(latest_2) over (PARTITION by aggregation_target,
                                                                                                              prop
                                                                                                 ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_2 ,
                                                                                                if(has(['technology', 'finance'], prop), prop, 'Other') as prop
                    FROM
                      (SELECT *,
                              prop_vals as prop
                       FROM
                         (SELECT e.timestamp as timestamp,
                                 pdi.person_id as aggregation_target,
                                 pdi.person_id as person_id ,
                                 if(event = 'sign up', 1, 0) as step_0,
                                 if(step_0 = 1, timestamp, null) as latest_0,
                                 if(event = 'play movie', 1, 0) as step_1,
                                 if(step_1 = 1, timestamp, null) as latest_1,
                                 if(event = 'buy', 1, 0) as step_2,
                                 if(step_2 = 1, timestamp, null) as latest_2,
                                 replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '') AS prop_basic,
                                 prop_basic as prop,
                                 argMinIf(prop, timestamp, isNotNull(prop)) over (PARTITION by aggregation_target) as prop_vals
                          FROM events e
                          INNER JOIN
                            (SELECT distinct_id,
                                    argMax(person_id, version) as person_id
                             FROM person_distinct_id2
                             WHERE team_id = 2
                             GROUP BY distinct_id
                             HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
                          LEFT JOIN
                            (SELECT group_key,
                                    argMax(group_properties, _timestamp) AS group_properties_0
                             FROM groups
                             WHERE team_id = 2
                               AND group_type_index = 0
                             GROUP BY group_key) groups_0 ON "$group_0" == groups_0.group_key
                          WHERE team_id = 2
                            AND event IN ['buy', 'play movie', 'sign up']
                            AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
                            AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-08 23:59:59', 'UTC')
                            AND (step_0 = 1
                                 OR step_1 = 1
                                 OR step_2 = 1) )))))
           WHERE step_0 = 1 ))
     GROUP BY aggregation_target,
              steps,
              prop
     HAVING steps = max_steps)
  GROUP BY prop
  '
---
# name: TestUnorderedFunnelGroupBreakdown.test_funnel_breakdown_group.10
  '
  
  SELECT groupArray(value)
  FROM
    (SELECT replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '') AS value,
            count(*) as count
     FROM events e
     LEFT JOIN
       (SELECT group_key,
               argMax(group_properties, _timestamp) AS group_properties_0
        FROM groups
        WHERE team_id = 2
          AND group_type_index = 0
        GROUP BY group_key) groups_0 ON "$group_0" == groups_0.group_key
     WHERE team_id = 2
       AND event IN ['buy', 'play movie', 'sign up']
       AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
       AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-08 23:59:59', 'UTC')
     GROUP BY value
     ORDER BY count DESC, value DESC
     LIMIT 25
     OFFSET 0)
  '
---
# name: TestUnorderedFunnelGroupBreakdown.test_funnel_breakdown_group.11
  '
  
  SELECT groupArray(value)
  FROM
    (SELECT replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '') AS value,
            count(*) as count
     FROM events e
     LEFT JOIN
       (SELECT group_key,
               argMax(group_properties, _timestamp) AS group_properties_0
        FROM groups
        WHERE team_id = 2
          AND group_type_index = 0
        GROUP BY group_key) groups_0 ON "$group_0" == groups_0.group_key
     WHERE team_id = 2
       AND event IN ['buy', 'play movie', 'sign up']
       AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
       AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-08 23:59:59', 'UTC')
     GROUP BY value
     ORDER BY count DESC, value DESC
     LIMIT 25
     OFFSET 0)
  '
---
# name: TestUnorderedFunnelGroupBreakdown.test_funnel_breakdown_group.12
  '
  
  SELECT groupArray(value)
  FROM
    (SELECT replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '') AS value,
            count(*) as count
     FROM events e
     LEFT JOIN
       (SELECT group_key,
               argMax(group_properties, _timestamp) AS group_properties_0
        FROM groups
        WHERE team_id = 2
          AND group_type_index = 0
        GROUP BY group_key) groups_0 ON "$group_0" == groups_0.group_key
     WHERE team_id = 2
       AND event IN ['buy', 'play movie', 'sign up']
       AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
       AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-08 23:59:59', 'UTC')
     GROUP BY value
     ORDER BY count DESC, value DESC
     LIMIT 25
     OFFSET 0)
  '
---
# name: TestUnorderedFunnelGroupBreakdown.test_funnel_breakdown_group.13
  '
  
  SELECT aggregation_target AS actor_id
  FROM
    (SELECT aggregation_target,
            steps,
            avg(step_1_conversion_time) step_1_average_conversion_time_inner,
            avg(step_2_conversion_time) step_2_average_conversion_time_inner,
            median(step_1_conversion_time) step_1_median_conversion_time_inner,
            median(step_2_conversion_time) step_2_median_conversion_time_inner,
            prop
     FROM
       (SELECT aggregation_target,
               steps,
               max(steps) over (PARTITION BY aggregation_target,
                                             prop) as max_steps,
                               step_1_conversion_time,
                               step_2_conversion_time,
                               prop
        FROM
          (SELECT *,
                  arraySort([latest_0,latest_1,latest_2]) as event_times,
                  arraySum([if(latest_0 < latest_1 AND latest_1 <= latest_0 + INTERVAL 7 DAY, 1, 0),if(latest_0 < latest_2 AND latest_2 <= latest_0 + INTERVAL 7 DAY, 1, 0), 1]) AS steps ,
                  arraySort([latest_0,latest_1,latest_2]) as conversion_times,
                  if(isNotNull(conversion_times[2])
                     AND conversion_times[2] <= conversion_times[1] + INTERVAL 7 DAY, dateDiff('second', conversion_times[1], conversion_times[2]), NULL) step_1_conversion_time,
                  if(isNotNull(conversion_times[3])
                     AND conversion_times[3] <= conversion_times[2] + INTERVAL 7 DAY, dateDiff('second', conversion_times[2], conversion_times[3]), NULL) step_2_conversion_time
           FROM
             (SELECT aggregation_target, timestamp, step_0,
                                                    latest_0,
                                                    step_1,
                                                    min(latest_1) over (PARTITION by aggregation_target,
                                                                                     prop
                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_1,
                                                                       step_2,
                                                                       min(latest_2) over (PARTITION by aggregation_target,
                                                                                                        prop
                                                                                           ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_2 ,
                                                                                          if(has(['technology', 'finance'], prop), prop, 'Other') as prop
              FROM
                (SELECT *,
                        prop_vals as prop
                 FROM
                   (SELECT e.timestamp as timestamp,
                           pdi.person_id as aggregation_target,
                           pdi.person_id as person_id ,
                           if(event = 'sign up', 1, 0) as step_0,
                           if(step_0 = 1, timestamp, null) as latest_0,
                           if(event = 'play movie', 1, 0) as step_1,
                           if(step_1 = 1, timestamp, null) as latest_1,
                           if(event = 'buy', 1, 0) as step_2,
                           if(step_2 = 1, timestamp, null) as latest_2,
                           replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '') AS prop_basic,
                           prop_basic as prop,
                           argMinIf(prop, timestamp, isNotNull(prop)) over (PARTITION by aggregation_target) as prop_vals
                    FROM events e
                    INNER JOIN
                      (SELECT distinct_id,
                              argMax(person_id, version) as person_id
                       FROM person_distinct_id2
                       WHERE team_id = 2
                       GROUP BY distinct_id
                       HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
                    LEFT JOIN
                      (SELECT group_key,
                              argMax(group_properties, _timestamp) AS group_properties_0
                       FROM groups
                       WHERE team_id = 2
                         AND group_type_index = 0
                       GROUP BY group_key) groups_0 ON "$group_0" == groups_0.group_key
                    WHERE team_id = 2
                      AND event IN ['buy', 'play movie', 'sign up']
                      AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
                      AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-08 23:59:59', 'UTC')
                      AND (step_0 = 1
                           OR step_1 = 1
                           OR step_2 = 1) )))
           WHERE step_0 = 1
           UNION ALL SELECT *,
                            arraySort([latest_0,latest_1,latest_2]) as event_times,
                            arraySum([if(latest_0 < latest_1 AND latest_1 <= latest_0 + INTERVAL 7 DAY, 1, 0),if(latest_0 < latest_2 AND latest_2 <= latest_0 + INTERVAL 7 DAY, 1, 0), 1]) AS steps ,
                            arraySort([latest_0,latest_1,latest_2]) as conversion_times,
                            if(isNotNull(conversion_times[2])
                               AND conversion_times[2] <= conversion_times[1] + INTERVAL 7 DAY, dateDiff('second', conversion_times[1], conversion_times[2]), NULL) step_1_conversion_time,
                            if(isNotNull(conversion_times[3])
                               AND conversion_times[3] <= conversion_times[2] + INTERVAL 7 DAY, dateDiff('second', conversion_times[2], conversion_times[3]), NULL) step_2_conversion_time
           FROM
             (SELECT aggregation_target, timestamp, step_0,
                                                    latest_0,
                                                    step_1,
                                                    min(latest_1) over (PARTITION by aggregation_target,
                                                                                     prop
                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_1,
                                                                       step_2,
                                                                       min(latest_2) over (PARTITION by aggregation_target,
                                                                                                        prop
                                                                                           ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_2 ,
                                                                                          if(has(['technology', 'finance'], prop), prop, 'Other') as prop
              FROM
                (SELECT *,
                        prop_vals as prop
                 FROM
                   (SELECT e.timestamp as timestamp,
                           pdi.person_id as aggregation_target,
                           pdi.person_id as person_id ,
                           if(event = 'play movie', 1, 0) as step_0,
                           if(step_0 = 1, timestamp, null) as latest_0,
                           if(event = 'buy', 1, 0) as step_1,
                           if(step_1 = 1, timestamp, null) as latest_1,
                           if(event = 'sign up', 1, 0) as step_2,
                           if(step_2 = 1, timestamp, null) as latest_2,
                           replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '') AS prop_basic,
                           prop_basic as prop,
                           argMinIf(prop, timestamp, isNotNull(prop)) over (PARTITION by aggregation_target) as prop_vals
                    FROM events e
                    INNER JOIN
                      (SELECT distinct_id,
                              argMax(person_id, version) as person_id
                       FROM person_distinct_id2
                       WHERE team_id = 2
                       GROUP BY distinct_id
                       HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
                    LEFT JOIN
                      (SELECT group_key,
                              argMax(group_properties, _timestamp) AS group_properties_0
                       FROM groups
                       WHERE team_id = 2
                         AND group_type_index = 0
                       GROUP BY group_key) groups_0 ON "$group_0" == groups_0.group_key
                    WHERE team_id = 2
                      AND event IN ['buy', 'play movie', 'sign up']
                      AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
                      AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-08 23:59:59', 'UTC')
                      AND (step_0 = 1
                           OR step_1 = 1
                           OR step_2 = 1) )))
           WHERE step_0 = 1
           UNION ALL SELECT *,
                            arraySort([latest_0,latest_1,latest_2]) as event_times,
                            arraySum([if(latest_0 < latest_1 AND latest_1 <= latest_0 + INTERVAL 7 DAY, 1, 0),if(latest_0 < latest_2 AND latest_2 <= latest_0 + INTERVAL 7 DAY, 1, 0), 1]) AS steps ,
                            arraySort([latest_0,latest_1,latest_2]) as conversion_times,
                            if(isNotNull(conversion_times[2])
                               AND conversion_times[2] <= conversion_times[1] + INTERVAL 7 DAY, dateDiff('second', conversion_times[1], conversion_times[2]), NULL) step_1_conversion_time,
                            if(isNotNull(conversion_times[3])
                               AND conversion_times[3] <= conversion_times[2] + INTERVAL 7 DAY, dateDiff('second', conversion_times[2], conversion_times[3]), NULL) step_2_conversion_time
           FROM
             (SELECT aggregation_target, timestamp, step_0,
                                                    latest_0,
                                                    step_1,
                                                    min(latest_1) over (PARTITION by aggregation_target,
                                                                                     prop
                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_1,
                                                                       step_2,
                                                                       min(latest_2) over (PARTITION by aggregation_target,
                                                                                                        prop
                                                                                           ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_2 ,
                                                                                          if(has(['technology', 'finance'], prop), prop, 'Other') as prop
              FROM
                (SELECT *,
                        prop_vals as prop
                 FROM
                   (SELECT e.timestamp as timestamp,
                           pdi.person_id as aggregation_target,
                           pdi.person_id as person_id ,
                           if(event = 'buy', 1, 0) as step_0,
                           if(step_0 = 1, timestamp, null) as latest_0,
                           if(event = 'sign up', 1, 0) as step_1,
                           if(step_1 = 1, timestamp, null) as latest_1,
                           if(event = 'play movie', 1, 0) as step_2,
                           if(step_2 = 1, timestamp, null) as latest_2,
                           replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '') AS prop_basic,
                           prop_basic as prop,
                           argMinIf(prop, timestamp, isNotNull(prop)) over (PARTITION by aggregation_target) as prop_vals
                    FROM events e
                    INNER JOIN
                      (SELECT distinct_id,
                              argMax(person_id, version) as person_id
                       FROM person_distinct_id2
                       WHERE team_id = 2
                       GROUP BY distinct_id
                       HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
                    LEFT JOIN
                      (SELECT group_key,
                              argMax(group_properties, _timestamp) AS group_properties_0
                       FROM groups
                       WHERE team_id = 2
                         AND group_type_index = 0
                       GROUP BY group_key) groups_0 ON "$group_0" == groups_0.group_key
                    WHERE team_id = 2
                      AND event IN ['buy', 'play movie', 'sign up']
                      AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
                      AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-08 23:59:59', 'UTC')
                      AND (step_0 = 1
                           OR step_1 = 1
                           OR step_2 = 1) )))
           WHERE step_0 = 1 ))
     GROUP BY aggregation_target,
              steps,
              prop
     HAVING steps = max_steps)
  WHERE steps IN [1, 2, 3]
    AND arrayFlatten(array(prop)) = arrayFlatten(array('technology'))
  ORDER BY aggregation_target
  LIMIT 100
  OFFSET 0
  '
---
# name: TestUnorderedFunnelGroupBreakdown.test_funnel_breakdown_group.14
  '
  
  SELECT groupArray(value)
  FROM
    (SELECT replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '') AS value,
            count(*) as count
     FROM events e
     LEFT JOIN
       (SELECT group_key,
               argMax(group_properties, _timestamp) AS group_properties_0
        FROM groups
        WHERE team_id = 2
          AND group_type_index = 0
        GROUP BY group_key) groups_0 ON "$group_0" == groups_0.group_key
     WHERE team_id = 2
       AND event IN ['buy', 'play movie', 'sign up']
       AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
       AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-08 23:59:59', 'UTC')
     GROUP BY value
     ORDER BY count DESC, value DESC
     LIMIT 25
     OFFSET 0)
  '
---
# name: TestUnorderedFunnelGroupBreakdown.test_funnel_breakdown_group.15
  '
  
  SELECT groupArray(value)
  FROM
    (SELECT replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '') AS value,
            count(*) as count
     FROM events e
     LEFT JOIN
       (SELECT group_key,
               argMax(group_properties, _timestamp) AS group_properties_0
        FROM groups
        WHERE team_id = 2
          AND group_type_index = 0
        GROUP BY group_key) groups_0 ON "$group_0" == groups_0.group_key
     WHERE team_id = 2
       AND event IN ['buy', 'play movie', 'sign up']
       AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
       AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-08 23:59:59', 'UTC')
     GROUP BY value
     ORDER BY count DESC, value DESC
     LIMIT 25
     OFFSET 0)
  '
---
# name: TestUnorderedFunnelGroupBreakdown.test_funnel_breakdown_group.16
  '
  
  SELECT groupArray(value)
  FROM
    (SELECT replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '') AS value,
            count(*) as count
     FROM events e
     LEFT JOIN
       (SELECT group_key,
               argMax(group_properties, _timestamp) AS group_properties_0
        FROM groups
        WHERE team_id = 2
          AND group_type_index = 0
        GROUP BY group_key) groups_0 ON "$group_0" == groups_0.group_key
     WHERE team_id = 2
       AND event IN ['buy', 'play movie', 'sign up']
       AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
       AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-08 23:59:59', 'UTC')
     GROUP BY value
     ORDER BY count DESC, value DESC
     LIMIT 25
     OFFSET 0)
  '
---
# name: TestUnorderedFunnelGroupBreakdown.test_funnel_breakdown_group.17
  '
  
  SELECT aggregation_target AS actor_id
  FROM
    (SELECT aggregation_target,
            steps,
            avg(step_1_conversion_time) step_1_average_conversion_time_inner,
            avg(step_2_conversion_time) step_2_average_conversion_time_inner,
            median(step_1_conversion_time) step_1_median_conversion_time_inner,
            median(step_2_conversion_time) step_2_median_conversion_time_inner,
            prop
     FROM
       (SELECT aggregation_target,
               steps,
               max(steps) over (PARTITION BY aggregation_target,
                                             prop) as max_steps,
                               step_1_conversion_time,
                               step_2_conversion_time,
                               prop
        FROM
          (SELECT *,
                  arraySort([latest_0,latest_1,latest_2]) as event_times,
                  arraySum([if(latest_0 < latest_1 AND latest_1 <= latest_0 + INTERVAL 7 DAY, 1, 0),if(latest_0 < latest_2 AND latest_2 <= latest_0 + INTERVAL 7 DAY, 1, 0), 1]) AS steps ,
                  arraySort([latest_0,latest_1,latest_2]) as conversion_times,
                  if(isNotNull(conversion_times[2])
                     AND conversion_times[2] <= conversion_times[1] + INTERVAL 7 DAY, dateDiff('second', conversion_times[1], conversion_times[2]), NULL) step_1_conversion_time,
                  if(isNotNull(conversion_times[3])
                     AND conversion_times[3] <= conversion_times[2] + INTERVAL 7 DAY, dateDiff('second', conversion_times[2], conversion_times[3]), NULL) step_2_conversion_time
           FROM
             (SELECT aggregation_target, timestamp, step_0,
                                                    latest_0,
                                                    step_1,
                                                    min(latest_1) over (PARTITION by aggregation_target,
                                                                                     prop
                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_1,
                                                                       step_2,
                                                                       min(latest_2) over (PARTITION by aggregation_target,
                                                                                                        prop
                                                                                           ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_2 ,
                                                                                          if(has(['technology', 'finance'], prop), prop, 'Other') as prop
              FROM
                (SELECT *,
                        prop_vals as prop
                 FROM
                   (SELECT e.timestamp as timestamp,
                           pdi.person_id as aggregation_target,
                           pdi.person_id as person_id ,
                           if(event = 'sign up', 1, 0) as step_0,
                           if(step_0 = 1, timestamp, null) as latest_0,
                           if(event = 'play movie', 1, 0) as step_1,
                           if(step_1 = 1, timestamp, null) as latest_1,
                           if(event = 'buy', 1, 0) as step_2,
                           if(step_2 = 1, timestamp, null) as latest_2,
                           replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '') AS prop_basic,
                           prop_basic as prop,
                           argMinIf(prop, timestamp, isNotNull(prop)) over (PARTITION by aggregation_target) as prop_vals
                    FROM events e
                    INNER JOIN
                      (SELECT distinct_id,
                              argMax(person_id, version) as person_id
                       FROM person_distinct_id2
                       WHERE team_id = 2
                       GROUP BY distinct_id
                       HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
                    LEFT JOIN
                      (SELECT group_key,
                              argMax(group_properties, _timestamp) AS group_properties_0
                       FROM groups
                       WHERE team_id = 2
                         AND group_type_index = 0
                       GROUP BY group_key) groups_0 ON "$group_0" == groups_0.group_key
                    WHERE team_id = 2
                      AND event IN ['buy', 'play movie', 'sign up']
                      AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
                      AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-08 23:59:59', 'UTC')
                      AND (step_0 = 1
                           OR step_1 = 1
                           OR step_2 = 1) )))
           WHERE step_0 = 1
           UNION ALL SELECT *,
                            arraySort([latest_0,latest_1,latest_2]) as event_times,
                            arraySum([if(latest_0 < latest_1 AND latest_1 <= latest_0 + INTERVAL 7 DAY, 1, 0),if(latest_0 < latest_2 AND latest_2 <= latest_0 + INTERVAL 7 DAY, 1, 0), 1]) AS steps ,
                            arraySort([latest_0,latest_1,latest_2]) as conversion_times,
                            if(isNotNull(conversion_times[2])
                               AND conversion_times[2] <= conversion_times[1] + INTERVAL 7 DAY, dateDiff('second', conversion_times[1], conversion_times[2]), NULL) step_1_conversion_time,
                            if(isNotNull(conversion_times[3])
                               AND conversion_times[3] <= conversion_times[2] + INTERVAL 7 DAY, dateDiff('second', conversion_times[2], conversion_times[3]), NULL) step_2_conversion_time
           FROM
             (SELECT aggregation_target, timestamp, step_0,
                                                    latest_0,
                                                    step_1,
                                                    min(latest_1) over (PARTITION by aggregation_target,
                                                                                     prop
                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_1,
                                                                       step_2,
                                                                       min(latest_2) over (PARTITION by aggregation_target,
                                                                                                        prop
                                                                                           ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_2 ,
                                                                                          if(has(['technology', 'finance'], prop), prop, 'Other') as prop
              FROM
                (SELECT *,
                        prop_vals as prop
                 FROM
                   (SELECT e.timestamp as timestamp,
                           pdi.person_id as aggregation_target,
                           pdi.person_id as person_id ,
                           if(event = 'play movie', 1, 0) as step_0,
                           if(step_0 = 1, timestamp, null) as latest_0,
                           if(event = 'buy', 1, 0) as step_1,
                           if(step_1 = 1, timestamp, null) as latest_1,
                           if(event = 'sign up', 1, 0) as step_2,
                           if(step_2 = 1, timestamp, null) as latest_2,
                           replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '') AS prop_basic,
                           prop_basic as prop,
                           argMinIf(prop, timestamp, isNotNull(prop)) over (PARTITION by aggregation_target) as prop_vals
                    FROM events e
                    INNER JOIN
                      (SELECT distinct_id,
                              argMax(person_id, version) as person_id
                       FROM person_distinct_id2
                       WHERE team_id = 2
                       GROUP BY distinct_id
                       HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
                    LEFT JOIN
                      (SELECT group_key,
                              argMax(group_properties, _timestamp) AS group_properties_0
                       FROM groups
                       WHERE team_id = 2
                         AND group_type_index = 0
                       GROUP BY group_key) groups_0 ON "$group_0" == groups_0.group_key
                    WHERE team_id = 2
                      AND event IN ['buy', 'play movie', 'sign up']
                      AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
                      AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-08 23:59:59', 'UTC')
                      AND (step_0 = 1
                           OR step_1 = 1
                           OR step_2 = 1) )))
           WHERE step_0 = 1
           UNION ALL SELECT *,
                            arraySort([latest_0,latest_1,latest_2]) as event_times,
                            arraySum([if(latest_0 < latest_1 AND latest_1 <= latest_0 + INTERVAL 7 DAY, 1, 0),if(latest_0 < latest_2 AND latest_2 <= latest_0 + INTERVAL 7 DAY, 1, 0), 1]) AS steps ,
                            arraySort([latest_0,latest_1,latest_2]) as conversion_times,
                            if(isNotNull(conversion_times[2])
                               AND conversion_times[2] <= conversion_times[1] + INTERVAL 7 DAY, dateDiff('second', conversion_times[1], conversion_times[2]), NULL) step_1_conversion_time,
                            if(isNotNull(conversion_times[3])
                               AND conversion_times[3] <= conversion_times[2] + INTERVAL 7 DAY, dateDiff('second', conversion_times[2], conversion_times[3]), NULL) step_2_conversion_time
           FROM
             (SELECT aggregation_target, timestamp, step_0,
                                                    latest_0,
                                                    step_1,
                                                    min(latest_1) over (PARTITION by aggregation_target,
                                                                                     prop
                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_1,
                                                                       step_2,
                                                                       min(latest_2) over (PARTITION by aggregation_target,
                                                                                                        prop
                                                                                           ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_2 ,
                                                                                          if(has(['technology', 'finance'], prop), prop, 'Other') as prop
              FROM
                (SELECT *,
                        prop_vals as prop
                 FROM
                   (SELECT e.timestamp as timestamp,
                           pdi.person_id as aggregation_target,
                           pdi.person_id as person_id ,
                           if(event = 'buy', 1, 0) as step_0,
                           if(step_0 = 1, timestamp, null) as latest_0,
                           if(event = 'sign up', 1, 0) as step_1,
                           if(step_1 = 1, timestamp, null) as latest_1,
                           if(event = 'play movie', 1, 0) as step_2,
                           if(step_2 = 1, timestamp, null) as latest_2,
                           replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '') AS prop_basic,
                           prop_basic as prop,
                           argMinIf(prop, timestamp, isNotNull(prop)) over (PARTITION by aggregation_target) as prop_vals
                    FROM events e
                    INNER JOIN
                      (SELECT distinct_id,
                              argMax(person_id, version) as person_id
                       FROM person_distinct_id2
                       WHERE team_id = 2
                       GROUP BY distinct_id
                       HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
                    LEFT JOIN
                      (SELECT group_key,
                              argMax(group_properties, _timestamp) AS group_properties_0
                       FROM groups
                       WHERE team_id = 2
                         AND group_type_index = 0
                       GROUP BY group_key) groups_0 ON "$group_0" == groups_0.group_key
                    WHERE team_id = 2
                      AND event IN ['buy', 'play movie', 'sign up']
                      AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
                      AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-08 23:59:59', 'UTC')
                      AND (step_0 = 1
                           OR step_1 = 1
                           OR step_2 = 1) )))
           WHERE step_0 = 1 ))
     GROUP BY aggregation_target,
              steps,
              prop
     HAVING steps = max_steps)
  WHERE steps IN [2, 3]
    AND arrayFlatten(array(prop)) = arrayFlatten(array('technology'))
  ORDER BY aggregation_target
  LIMIT 100
  OFFSET 0
  '
---
# name: TestUnorderedFunnelGroupBreakdown.test_funnel_breakdown_group.2
  '
  
  SELECT groupArray(value)
  FROM
    (SELECT replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '') AS value,
            count(*) as count
     FROM events e
     LEFT JOIN
       (SELECT group_key,
               argMax(group_properties, _timestamp) AS group_properties_0
        FROM groups
        WHERE team_id = 2
          AND group_type_index = 0
        GROUP BY group_key) groups_0 ON "$group_0" == groups_0.group_key
     WHERE team_id = 2
       AND event IN ['buy', 'play movie', 'sign up']
       AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
       AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-08 23:59:59', 'UTC')
     GROUP BY value
     ORDER BY count DESC, value DESC
     LIMIT 25
     OFFSET 0)
  '
---
# name: TestUnorderedFunnelGroupBreakdown.test_funnel_breakdown_group.3
  '
  
  SELECT groupArray(value)
  FROM
    (SELECT replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '') AS value,
            count(*) as count
     FROM events e
     LEFT JOIN
       (SELECT group_key,
               argMax(group_properties, _timestamp) AS group_properties_0
        FROM groups
        WHERE team_id = 2
          AND group_type_index = 0
        GROUP BY group_key) groups_0 ON "$group_0" == groups_0.group_key
     WHERE team_id = 2
       AND event IN ['buy', 'play movie', 'sign up']
       AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
       AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-08 23:59:59', 'UTC')
     GROUP BY value
     ORDER BY count DESC, value DESC
     LIMIT 25
     OFFSET 0)
  '
---
# name: TestUnorderedFunnelGroupBreakdown.test_funnel_breakdown_group.4
  '
  
  SELECT groupArray(value)
  FROM
    (SELECT replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '') AS value,
            count(*) as count
     FROM events e
     LEFT JOIN
       (SELECT group_key,
               argMax(group_properties, _timestamp) AS group_properties_0
        FROM groups
        WHERE team_id = 2
          AND group_type_index = 0
        GROUP BY group_key) groups_0 ON "$group_0" == groups_0.group_key
     WHERE team_id = 2
       AND event IN ['buy', 'play movie', 'sign up']
       AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
       AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-08 23:59:59', 'UTC')
     GROUP BY value
     ORDER BY count DESC, value DESC
     LIMIT 25
     OFFSET 0)
  '
---
# name: TestUnorderedFunnelGroupBreakdown.test_funnel_breakdown_group.5
  '
  
  SELECT aggregation_target AS actor_id
  FROM
    (SELECT aggregation_target,
            steps,
            avg(step_1_conversion_time) step_1_average_conversion_time_inner,
            avg(step_2_conversion_time) step_2_average_conversion_time_inner,
            median(step_1_conversion_time) step_1_median_conversion_time_inner,
            median(step_2_conversion_time) step_2_median_conversion_time_inner,
            prop
     FROM
       (SELECT aggregation_target,
               steps,
               max(steps) over (PARTITION BY aggregation_target,
                                             prop) as max_steps,
                               step_1_conversion_time,
                               step_2_conversion_time,
                               prop
        FROM
          (SELECT *,
                  arraySort([latest_0,latest_1,latest_2]) as event_times,
                  arraySum([if(latest_0 < latest_1 AND latest_1 <= latest_0 + INTERVAL 7 DAY, 1, 0),if(latest_0 < latest_2 AND latest_2 <= latest_0 + INTERVAL 7 DAY, 1, 0), 1]) AS steps ,
                  arraySort([latest_0,latest_1,latest_2]) as conversion_times,
                  if(isNotNull(conversion_times[2])
                     AND conversion_times[2] <= conversion_times[1] + INTERVAL 7 DAY, dateDiff('second', conversion_times[1], conversion_times[2]), NULL) step_1_conversion_time,
                  if(isNotNull(conversion_times[3])
                     AND conversion_times[3] <= conversion_times[2] + INTERVAL 7 DAY, dateDiff('second', conversion_times[2], conversion_times[3]), NULL) step_2_conversion_time
           FROM
             (SELECT aggregation_target, timestamp, step_0,
                                                    latest_0,
                                                    step_1,
                                                    min(latest_1) over (PARTITION by aggregation_target,
                                                                                     prop
                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_1,
                                                                       step_2,
                                                                       min(latest_2) over (PARTITION by aggregation_target,
                                                                                                        prop
                                                                                           ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_2 ,
                                                                                          if(has(['technology', 'finance'], prop), prop, 'Other') as prop
              FROM
                (SELECT *,
                        prop_vals as prop
                 FROM
                   (SELECT e.timestamp as timestamp,
                           pdi.person_id as aggregation_target,
                           pdi.person_id as person_id ,
                           if(event = 'sign up', 1, 0) as step_0,
                           if(step_0 = 1, timestamp, null) as latest_0,
                           if(event = 'play movie', 1, 0) as step_1,
                           if(step_1 = 1, timestamp, null) as latest_1,
                           if(event = 'buy', 1, 0) as step_2,
                           if(step_2 = 1, timestamp, null) as latest_2,
                           replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '') AS prop_basic,
                           prop_basic as prop,
                           argMinIf(prop, timestamp, isNotNull(prop)) over (PARTITION by aggregation_target) as prop_vals
                    FROM events e
                    INNER JOIN
                      (SELECT distinct_id,
                              argMax(person_id, version) as person_id
                       FROM person_distinct_id2
                       WHERE team_id = 2
                       GROUP BY distinct_id
                       HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
                    LEFT JOIN
                      (SELECT group_key,
                              argMax(group_properties, _timestamp) AS group_properties_0
                       FROM groups
                       WHERE team_id = 2
                         AND group_type_index = 0
                       GROUP BY group_key) groups_0 ON "$group_0" == groups_0.group_key
                    WHERE team_id = 2
                      AND event IN ['buy', 'play movie', 'sign up']
                      AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
                      AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-08 23:59:59', 'UTC')
                      AND (step_0 = 1
                           OR step_1 = 1
                           OR step_2 = 1) )))
           WHERE step_0 = 1
           UNION ALL SELECT *,
                            arraySort([latest_0,latest_1,latest_2]) as event_times,
                            arraySum([if(latest_0 < latest_1 AND latest_1 <= latest_0 + INTERVAL 7 DAY, 1, 0),if(latest_0 < latest_2 AND latest_2 <= latest_0 + INTERVAL 7 DAY, 1, 0), 1]) AS steps ,
                            arraySort([latest_0,latest_1,latest_2]) as conversion_times,
                            if(isNotNull(conversion_times[2])
                               AND conversion_times[2] <= conversion_times[1] + INTERVAL 7 DAY, dateDiff('second', conversion_times[1], conversion_times[2]), NULL) step_1_conversion_time,
                            if(isNotNull(conversion_times[3])
                               AND conversion_times[3] <= conversion_times[2] + INTERVAL 7 DAY, dateDiff('second', conversion_times[2], conversion_times[3]), NULL) step_2_conversion_time
           FROM
             (SELECT aggregation_target, timestamp, step_0,
                                                    latest_0,
                                                    step_1,
                                                    min(latest_1) over (PARTITION by aggregation_target,
                                                                                     prop
                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_1,
                                                                       step_2,
                                                                       min(latest_2) over (PARTITION by aggregation_target,
                                                                                                        prop
                                                                                           ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_2 ,
                                                                                          if(has(['technology', 'finance'], prop), prop, 'Other') as prop
              FROM
                (SELECT *,
                        prop_vals as prop
                 FROM
                   (SELECT e.timestamp as timestamp,
                           pdi.person_id as aggregation_target,
                           pdi.person_id as person_id ,
                           if(event = 'play movie', 1, 0) as step_0,
                           if(step_0 = 1, timestamp, null) as latest_0,
                           if(event = 'buy', 1, 0) as step_1,
                           if(step_1 = 1, timestamp, null) as latest_1,
                           if(event = 'sign up', 1, 0) as step_2,
                           if(step_2 = 1, timestamp, null) as latest_2,
                           replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '') AS prop_basic,
                           prop_basic as prop,
                           argMinIf(prop, timestamp, isNotNull(prop)) over (PARTITION by aggregation_target) as prop_vals
                    FROM events e
                    INNER JOIN
                      (SELECT distinct_id,
                              argMax(person_id, version) as person_id
                       FROM person_distinct_id2
                       WHERE team_id = 2
                       GROUP BY distinct_id
                       HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
                    LEFT JOIN
                      (SELECT group_key,
                              argMax(group_properties, _timestamp) AS group_properties_0
                       FROM groups
                       WHERE team_id = 2
                         AND group_type_index = 0
                       GROUP BY group_key) groups_0 ON "$group_0" == groups_0.group_key
                    WHERE team_id = 2
                      AND event IN ['buy', 'play movie', 'sign up']
                      AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
                      AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-08 23:59:59', 'UTC')
                      AND (step_0 = 1
                           OR step_1 = 1
                           OR step_2 = 1) )))
           WHERE step_0 = 1
           UNION ALL SELECT *,
                            arraySort([latest_0,latest_1,latest_2]) as event_times,
                            arraySum([if(latest_0 < latest_1 AND latest_1 <= latest_0 + INTERVAL 7 DAY, 1, 0),if(latest_0 < latest_2 AND latest_2 <= latest_0 + INTERVAL 7 DAY, 1, 0), 1]) AS steps ,
                            arraySort([latest_0,latest_1,latest_2]) as conversion_times,
                            if(isNotNull(conversion_times[2])
                               AND conversion_times[2] <= conversion_times[1] + INTERVAL 7 DAY, dateDiff('second', conversion_times[1], conversion_times[2]), NULL) step_1_conversion_time,
                            if(isNotNull(conversion_times[3])
                               AND conversion_times[3] <= conversion_times[2] + INTERVAL 7 DAY, dateDiff('second', conversion_times[2], conversion_times[3]), NULL) step_2_conversion_time
           FROM
             (SELECT aggregation_target, timestamp, step_0,
                                                    latest_0,
                                                    step_1,
                                                    min(latest_1) over (PARTITION by aggregation_target,
                                                                                     prop
                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_1,
                                                                       step_2,
                                                                       min(latest_2) over (PARTITION by aggregation_target,
                                                                                                        prop
                                                                                           ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_2 ,
                                                                                          if(has(['technology', 'finance'], prop), prop, 'Other') as prop
              FROM
                (SELECT *,
                        prop_vals as prop
                 FROM
                   (SELECT e.timestamp as timestamp,
                           pdi.person_id as aggregation_target,
                           pdi.person_id as person_id ,
                           if(event = 'buy', 1, 0) as step_0,
                           if(step_0 = 1, timestamp, null) as latest_0,
                           if(event = 'sign up', 1, 0) as step_1,
                           if(step_1 = 1, timestamp, null) as latest_1,
                           if(event = 'play movie', 1, 0) as step_2,
                           if(step_2 = 1, timestamp, null) as latest_2,
                           replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '') AS prop_basic,
                           prop_basic as prop,
                           argMinIf(prop, timestamp, isNotNull(prop)) over (PARTITION by aggregation_target) as prop_vals
                    FROM events e
                    INNER JOIN
                      (SELECT distinct_id,
                              argMax(person_id, version) as person_id
                       FROM person_distinct_id2
                       WHERE team_id = 2
                       GROUP BY distinct_id
                       HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
                    LEFT JOIN
                      (SELECT group_key,
                              argMax(group_properties, _timestamp) AS group_properties_0
                       FROM groups
                       WHERE team_id = 2
                         AND group_type_index = 0
                       GROUP BY group_key) groups_0 ON "$group_0" == groups_0.group_key
                    WHERE team_id = 2
                      AND event IN ['buy', 'play movie', 'sign up']
                      AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
                      AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-08 23:59:59', 'UTC')
                      AND (step_0 = 1
                           OR step_1 = 1
                           OR step_2 = 1) )))
           WHERE step_0 = 1 ))
     GROUP BY aggregation_target,
              steps,
              prop
     HAVING steps = max_steps)
  WHERE steps IN [1, 2, 3]
    AND arrayFlatten(array(prop)) = arrayFlatten(array('finance'))
  ORDER BY aggregation_target
  LIMIT 100
  OFFSET 0
  '
---
# name: TestUnorderedFunnelGroupBreakdown.test_funnel_breakdown_group.6
  '
  
  SELECT groupArray(value)
  FROM
    (SELECT replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '') AS value,
            count(*) as count
     FROM events e
     LEFT JOIN
       (SELECT group_key,
               argMax(group_properties, _timestamp) AS group_properties_0
        FROM groups
        WHERE team_id = 2
          AND group_type_index = 0
        GROUP BY group_key) groups_0 ON "$group_0" == groups_0.group_key
     WHERE team_id = 2
       AND event IN ['buy', 'play movie', 'sign up']
       AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
       AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-08 23:59:59', 'UTC')
     GROUP BY value
     ORDER BY count DESC, value DESC
     LIMIT 25
     OFFSET 0)
  '
---
# name: TestUnorderedFunnelGroupBreakdown.test_funnel_breakdown_group.7
  '
  
  SELECT groupArray(value)
  FROM
    (SELECT replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '') AS value,
            count(*) as count
     FROM events e
     LEFT JOIN
       (SELECT group_key,
               argMax(group_properties, _timestamp) AS group_properties_0
        FROM groups
        WHERE team_id = 2
          AND group_type_index = 0
        GROUP BY group_key) groups_0 ON "$group_0" == groups_0.group_key
     WHERE team_id = 2
       AND event IN ['buy', 'play movie', 'sign up']
       AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
       AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-08 23:59:59', 'UTC')
     GROUP BY value
     ORDER BY count DESC, value DESC
     LIMIT 25
     OFFSET 0)
  '
---
# name: TestUnorderedFunnelGroupBreakdown.test_funnel_breakdown_group.8
  '
  
  SELECT groupArray(value)
  FROM
    (SELECT replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '') AS value,
            count(*) as count
     FROM events e
     LEFT JOIN
       (SELECT group_key,
               argMax(group_properties, _timestamp) AS group_properties_0
        FROM groups
        WHERE team_id = 2
          AND group_type_index = 0
        GROUP BY group_key) groups_0 ON "$group_0" == groups_0.group_key
     WHERE team_id = 2
       AND event IN ['buy', 'play movie', 'sign up']
       AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
       AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-08 23:59:59', 'UTC')
     GROUP BY value
     ORDER BY count DESC, value DESC
     LIMIT 25
     OFFSET 0)
  '
---
# name: TestUnorderedFunnelGroupBreakdown.test_funnel_breakdown_group.9
  '
  
  SELECT aggregation_target AS actor_id
  FROM
    (SELECT aggregation_target,
            steps,
            avg(step_1_conversion_time) step_1_average_conversion_time_inner,
            avg(step_2_conversion_time) step_2_average_conversion_time_inner,
            median(step_1_conversion_time) step_1_median_conversion_time_inner,
            median(step_2_conversion_time) step_2_median_conversion_time_inner,
            prop
     FROM
       (SELECT aggregation_target,
               steps,
               max(steps) over (PARTITION BY aggregation_target,
                                             prop) as max_steps,
                               step_1_conversion_time,
                               step_2_conversion_time,
                               prop
        FROM
          (SELECT *,
                  arraySort([latest_0,latest_1,latest_2]) as event_times,
                  arraySum([if(latest_0 < latest_1 AND latest_1 <= latest_0 + INTERVAL 7 DAY, 1, 0),if(latest_0 < latest_2 AND latest_2 <= latest_0 + INTERVAL 7 DAY, 1, 0), 1]) AS steps ,
                  arraySort([latest_0,latest_1,latest_2]) as conversion_times,
                  if(isNotNull(conversion_times[2])
                     AND conversion_times[2] <= conversion_times[1] + INTERVAL 7 DAY, dateDiff('second', conversion_times[1], conversion_times[2]), NULL) step_1_conversion_time,
                  if(isNotNull(conversion_times[3])
                     AND conversion_times[3] <= conversion_times[2] + INTERVAL 7 DAY, dateDiff('second', conversion_times[2], conversion_times[3]), NULL) step_2_conversion_time
           FROM
             (SELECT aggregation_target, timestamp, step_0,
                                                    latest_0,
                                                    step_1,
                                                    min(latest_1) over (PARTITION by aggregation_target,
                                                                                     prop
                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_1,
                                                                       step_2,
                                                                       min(latest_2) over (PARTITION by aggregation_target,
                                                                                                        prop
                                                                                           ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_2 ,
                                                                                          if(has(['technology', 'finance'], prop), prop, 'Other') as prop
              FROM
                (SELECT *,
                        prop_vals as prop
                 FROM
                   (SELECT e.timestamp as timestamp,
                           pdi.person_id as aggregation_target,
                           pdi.person_id as person_id ,
                           if(event = 'sign up', 1, 0) as step_0,
                           if(step_0 = 1, timestamp, null) as latest_0,
                           if(event = 'play movie', 1, 0) as step_1,
                           if(step_1 = 1, timestamp, null) as latest_1,
                           if(event = 'buy', 1, 0) as step_2,
                           if(step_2 = 1, timestamp, null) as latest_2,
                           replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '') AS prop_basic,
                           prop_basic as prop,
                           argMinIf(prop, timestamp, isNotNull(prop)) over (PARTITION by aggregation_target) as prop_vals
                    FROM events e
                    INNER JOIN
                      (SELECT distinct_id,
                              argMax(person_id, version) as person_id
                       FROM person_distinct_id2
                       WHERE team_id = 2
                       GROUP BY distinct_id
                       HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
                    LEFT JOIN
                      (SELECT group_key,
                              argMax(group_properties, _timestamp) AS group_properties_0
                       FROM groups
                       WHERE team_id = 2
                         AND group_type_index = 0
                       GROUP BY group_key) groups_0 ON "$group_0" == groups_0.group_key
                    WHERE team_id = 2
                      AND event IN ['buy', 'play movie', 'sign up']
                      AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
                      AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-08 23:59:59', 'UTC')
                      AND (step_0 = 1
                           OR step_1 = 1
                           OR step_2 = 1) )))
           WHERE step_0 = 1
           UNION ALL SELECT *,
                            arraySort([latest_0,latest_1,latest_2]) as event_times,
                            arraySum([if(latest_0 < latest_1 AND latest_1 <= latest_0 + INTERVAL 7 DAY, 1, 0),if(latest_0 < latest_2 AND latest_2 <= latest_0 + INTERVAL 7 DAY, 1, 0), 1]) AS steps ,
                            arraySort([latest_0,latest_1,latest_2]) as conversion_times,
                            if(isNotNull(conversion_times[2])
                               AND conversion_times[2] <= conversion_times[1] + INTERVAL 7 DAY, dateDiff('second', conversion_times[1], conversion_times[2]), NULL) step_1_conversion_time,
                            if(isNotNull(conversion_times[3])
                               AND conversion_times[3] <= conversion_times[2] + INTERVAL 7 DAY, dateDiff('second', conversion_times[2], conversion_times[3]), NULL) step_2_conversion_time
           FROM
             (SELECT aggregation_target, timestamp, step_0,
                                                    latest_0,
                                                    step_1,
                                                    min(latest_1) over (PARTITION by aggregation_target,
                                                                                     prop
                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_1,
                                                                       step_2,
                                                                       min(latest_2) over (PARTITION by aggregation_target,
                                                                                                        prop
                                                                                           ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_2 ,
                                                                                          if(has(['technology', 'finance'], prop), prop, 'Other') as prop
              FROM
                (SELECT *,
                        prop_vals as prop
                 FROM
                   (SELECT e.timestamp as timestamp,
                           pdi.person_id as aggregation_target,
                           pdi.person_id as person_id ,
                           if(event = 'play movie', 1, 0) as step_0,
                           if(step_0 = 1, timestamp, null) as latest_0,
                           if(event = 'buy', 1, 0) as step_1,
                           if(step_1 = 1, timestamp, null) as latest_1,
                           if(event = 'sign up', 1, 0) as step_2,
                           if(step_2 = 1, timestamp, null) as latest_2,
                           replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '') AS prop_basic,
                           prop_basic as prop,
                           argMinIf(prop, timestamp, isNotNull(prop)) over (PARTITION by aggregation_target) as prop_vals
                    FROM events e
                    INNER JOIN
                      (SELECT distinct_id,
                              argMax(person_id, version) as person_id
                       FROM person_distinct_id2
                       WHERE team_id = 2
                       GROUP BY distinct_id
                       HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
                    LEFT JOIN
                      (SELECT group_key,
                              argMax(group_properties, _timestamp) AS group_properties_0
                       FROM groups
                       WHERE team_id = 2
                         AND group_type_index = 0
                       GROUP BY group_key) groups_0 ON "$group_0" == groups_0.group_key
                    WHERE team_id = 2
                      AND event IN ['buy', 'play movie', 'sign up']
                      AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
                      AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-08 23:59:59', 'UTC')
                      AND (step_0 = 1
                           OR step_1 = 1
                           OR step_2 = 1) )))
           WHERE step_0 = 1
           UNION ALL SELECT *,
                            arraySort([latest_0,latest_1,latest_2]) as event_times,
                            arraySum([if(latest_0 < latest_1 AND latest_1 <= latest_0 + INTERVAL 7 DAY, 1, 0),if(latest_0 < latest_2 AND latest_2 <= latest_0 + INTERVAL 7 DAY, 1, 0), 1]) AS steps ,
                            arraySort([latest_0,latest_1,latest_2]) as conversion_times,
                            if(isNotNull(conversion_times[2])
                               AND conversion_times[2] <= conversion_times[1] + INTERVAL 7 DAY, dateDiff('second', conversion_times[1], conversion_times[2]), NULL) step_1_conversion_time,
                            if(isNotNull(conversion_times[3])
                               AND conversion_times[3] <= conversion_times[2] + INTERVAL 7 DAY, dateDiff('second', conversion_times[2], conversion_times[3]), NULL) step_2_conversion_time
           FROM
             (SELECT aggregation_target, timestamp, step_0,
                                                    latest_0,
                                                    step_1,
                                                    min(latest_1) over (PARTITION by aggregation_target,
                                                                                     prop
                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_1,
                                                                       step_2,
                                                                       min(latest_2) over (PARTITION by aggregation_target,
                                                                                                        prop
                                                                                           ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_2 ,
                                                                                          if(has(['technology', 'finance'], prop), prop, 'Other') as prop
              FROM
                (SELECT *,
                        prop_vals as prop
                 FROM
                   (SELECT e.timestamp as timestamp,
                           pdi.person_id as aggregation_target,
                           pdi.person_id as person_id ,
                           if(event = 'buy', 1, 0) as step_0,
                           if(step_0 = 1, timestamp, null) as latest_0,
                           if(event = 'sign up', 1, 0) as step_1,
                           if(step_1 = 1, timestamp, null) as latest_1,
                           if(event = 'play movie', 1, 0) as step_2,
                           if(step_2 = 1, timestamp, null) as latest_2,
                           replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '') AS prop_basic,
                           prop_basic as prop,
                           argMinIf(prop, timestamp, isNotNull(prop)) over (PARTITION by aggregation_target) as prop_vals
                    FROM events e
                    INNER JOIN
                      (SELECT distinct_id,
                              argMax(person_id, version) as person_id
                       FROM person_distinct_id2
                       WHERE team_id = 2
                       GROUP BY distinct_id
                       HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
                    LEFT JOIN
                      (SELECT group_key,
                              argMax(group_properties, _timestamp) AS group_properties_0
                       FROM groups
                       WHERE team_id = 2
                         AND group_type_index = 0
                       GROUP BY group_key) groups_0 ON "$group_0" == groups_0.group_key
                    WHERE team_id = 2
                      AND event IN ['buy', 'play movie', 'sign up']
                      AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
                      AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-08 23:59:59', 'UTC')
                      AND (step_0 = 1
                           OR step_1 = 1
                           OR step_2 = 1) )))
           WHERE step_0 = 1 ))
     GROUP BY aggregation_target,
              steps,
              prop
     HAVING steps = max_steps)
  WHERE steps IN [2, 3]
    AND arrayFlatten(array(prop)) = arrayFlatten(array('finance'))
  ORDER BY aggregation_target
  LIMIT 100
  OFFSET 0
  '
---
