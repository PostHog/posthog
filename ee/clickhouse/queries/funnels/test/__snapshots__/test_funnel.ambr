# name: TestClickhouseFunnel.test_funnel_with_cohorts_step_filter
  '
  
  SELECT countIf(steps = 1) step_1,
         countIf(steps = 2) step_2,
         avg(step_1_average_conversion_time_inner) step_1_average_conversion_time,
         median(step_1_median_conversion_time_inner) step_1_median_conversion_time
  FROM
    (SELECT aggregation_target,
            steps,
            avg(step_1_conversion_time) step_1_average_conversion_time_inner,
            median(step_1_conversion_time) step_1_median_conversion_time_inner
     FROM
       (SELECT aggregation_target,
               steps,
               max(steps) over (PARTITION BY aggregation_target) as max_steps,
                               step_1_conversion_time
        FROM
          (SELECT *,
                  if(latest_0 < latest_1
                     AND latest_1 <= latest_0 + INTERVAL 14 DAY, 2, 1) AS steps ,
                  if(isNotNull(latest_1)
                     AND latest_1 <= latest_0 + INTERVAL 14 DAY, dateDiff('second', toDateTime(latest_0), toDateTime(latest_1)), NULL) step_1_conversion_time
           FROM
             (SELECT aggregation_target,
                     timestamp,
                     step_0,
                     latest_0,
                     step_1,
                     min(latest_1) over (PARTITION by aggregation_target
                                         ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_1
              FROM
                (SELECT aggregation_target,
                        timestamp,
                        if(event = 'user signed up'
                           AND distinct_id IN
                             (SELECT distinct_id
                              FROM
                                (SELECT distinct_id, argMax(person_id, version) as person_id
                                 FROM person_distinct_id2
                                 WHERE team_id = 2
                                 GROUP BY distinct_id
                                 HAVING argMax(is_deleted, version) = 0)
                              WHERE person_id IN
                                  (select id
                                   from
                                     (SELECT *
                                      FROM person
                                      JOIN
                                        (SELECT id, max(_timestamp) as _timestamp, max(is_deleted) as is_deleted
                                         FROM person
                                         WHERE team_id = 2
                                         GROUP BY id) as person_max ON person.id = person_max.id
                                      AND person._timestamp = person_max._timestamp
                                      WHERE team_id = 2
                                        AND person_max.is_deleted = 0
                                        AND (trim(BOTH '"'
                                                  FROM JSONExtractRaw(properties, 'email')) ILIKE '%.com%') )) ), 1, 0) as step_0,
                        if(step_0 = 1, timestamp, null) as latest_0,
                        if(event = 'paid', 1, 0) as step_1,
                        if(step_1 = 1, timestamp, null) as latest_1
                 FROM
                   (SELECT e.event as event,
                           e.team_id as team_id,
                           e.distinct_id as distinct_id,
                           e.timestamp as timestamp,
                           pdi.person_id as aggregation_target
                    FROM events e
                    INNER JOIN
                      (SELECT distinct_id,
                              argMax(person_id, version) as person_id
                       FROM person_distinct_id2
                       WHERE team_id = 2
                       GROUP BY distinct_id
                       HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
                    INNER JOIN
                      (SELECT id
                       FROM person
                       WHERE team_id = 2
                       GROUP BY id
                       HAVING max(is_deleted) = 0) person ON person.id = pdi.person_id
                    WHERE team_id = 2
                      AND event IN ['paid', 'user signed up']
                      AND timestamp >= '2020-01-01 00:00:00'
                      AND timestamp <= '2020-01-14 23:59:59' ) events
                 WHERE (step_0 = 1
                        OR step_1 = 1) ))
           WHERE step_0 = 1 SETTINGS allow_experimental_window_functions = 1 ))
     GROUP BY aggregation_target,
              steps
     HAVING steps = max_steps SETTINGS allow_experimental_window_functions = 1) SETTINGS allow_experimental_window_functions = 1
  '
---
# name: TestClickhouseFunnel.test_funnel_with_precalculated_cohort_step_filter
  '
  
  SELECT count(*)
  FROM
    (SELECT 1
     FROM cohortpeople
     WHERE team_id = 2
       AND cohort_id = 2
     GROUP BY person_id,
              cohort_id,
              team_id
     HAVING sum(sign) > 0)
  '
---
# name: TestClickhouseFunnel.test_funnel_with_precalculated_cohort_step_filter.1
  '
  
  SELECT count(*)
  FROM
    (SELECT 1
     FROM cohortpeople
     WHERE team_id = 2
       AND cohort_id = 2
     GROUP BY person_id,
              cohort_id,
              team_id
     HAVING sum(sign) > 0)
  '
---
# name: TestClickhouseFunnel.test_funnel_with_precalculated_cohort_step_filter.2
  '
  
  SELECT DISTINCT p.id
  FROM
    (SELECT *
     FROM person
     JOIN
       (SELECT id,
               max(_timestamp) as _timestamp,
               max(is_deleted) as is_deleted
        FROM person
        WHERE team_id = 2
        GROUP BY id) as person_max ON person.id = person_max.id
     AND person._timestamp = person_max._timestamp
     WHERE team_id = 2
       AND person_max.is_deleted = 0 ) AS p
  INNER JOIN
    (SELECT distinct_id,
            argMax(person_id, version) as person_id
     FROM person_distinct_id2
     WHERE team_id = 2
     GROUP BY distinct_id
     HAVING argMax(is_deleted, version) = 0) AS pdi ON p.id = pdi.person_id
  WHERE team_id = 2
    AND pdi.distinct_id IN
      (SELECT distinct_id
       FROM
         (SELECT distinct_id,
                 argMax(person_id, version) as person_id
          FROM person_distinct_id2
          WHERE team_id = 2
          GROUP BY distinct_id
          HAVING argMax(is_deleted, version) = 0)
       WHERE person_id IN
           (select id
            from
              (SELECT *
               FROM person
               JOIN
                 (SELECT id,
                         max(_timestamp) as _timestamp,
                         max(is_deleted) as is_deleted
                  FROM person
                  WHERE team_id = 2
                  GROUP BY id) as person_max ON person.id = person_max.id
               AND person._timestamp = person_max._timestamp
               WHERE team_id = 2
                 AND person_max.is_deleted = 0
                 AND (trim(BOTH '"'
                           FROM JSONExtractRaw(properties, 'email')) ILIKE '%.com%') )) )
  '
---
# name: TestClickhouseFunnel.test_funnel_with_precalculated_cohort_step_filter.3
  '
  
  SELECT countIf(steps = 1) step_1,
         countIf(steps = 2) step_2,
         avg(step_1_average_conversion_time_inner) step_1_average_conversion_time,
         median(step_1_median_conversion_time_inner) step_1_median_conversion_time
  FROM
    (SELECT aggregation_target,
            steps,
            avg(step_1_conversion_time) step_1_average_conversion_time_inner,
            median(step_1_conversion_time) step_1_median_conversion_time_inner
     FROM
       (SELECT aggregation_target,
               steps,
               max(steps) over (PARTITION BY aggregation_target) as max_steps,
                               step_1_conversion_time
        FROM
          (SELECT *,
                  if(latest_0 < latest_1
                     AND latest_1 <= latest_0 + INTERVAL 14 DAY, 2, 1) AS steps ,
                  if(isNotNull(latest_1)
                     AND latest_1 <= latest_0 + INTERVAL 14 DAY, dateDiff('second', toDateTime(latest_0), toDateTime(latest_1)), NULL) step_1_conversion_time
           FROM
             (SELECT aggregation_target,
                     timestamp,
                     step_0,
                     latest_0,
                     step_1,
                     min(latest_1) over (PARTITION by aggregation_target
                                         ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_1
              FROM
                (SELECT aggregation_target,
                        timestamp,
                        if(event = 'user signed up'
                           AND aggregation_target IN
                             (SELECT person_id
                              FROM cohortpeople
                              WHERE team_id = 2
                                AND cohort_id = 2
                              GROUP BY person_id, cohort_id, team_id
                              HAVING sum(sign) > 0) , 1, 0) as step_0,
                        if(step_0 = 1, timestamp, null) as latest_0,
                        if(event = 'paid', 1, 0) as step_1,
                        if(step_1 = 1, timestamp, null) as latest_1
                 FROM
                   (SELECT e.event as event,
                           e.team_id as team_id,
                           e.distinct_id as distinct_id,
                           e.timestamp as timestamp,
                           pdi.person_id as aggregation_target
                    FROM events e
                    INNER JOIN
                      (SELECT distinct_id,
                              argMax(person_id, version) as person_id
                       FROM person_distinct_id2
                       WHERE team_id = 2
                       GROUP BY distinct_id
                       HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
                    INNER JOIN
                      (SELECT id
                       FROM person
                       WHERE team_id = 2
                       GROUP BY id
                       HAVING max(is_deleted) = 0) person ON person.id = pdi.person_id
                    WHERE team_id = 2
                      AND event IN ['paid', 'user signed up']
                      AND timestamp >= '2020-01-01 00:00:00'
                      AND timestamp <= '2020-01-14 23:59:59' ) events
                 WHERE (step_0 = 1
                        OR step_1 = 1) ))
           WHERE step_0 = 1 SETTINGS allow_experimental_window_functions = 1 ))
     GROUP BY aggregation_target,
              steps
     HAVING steps = max_steps SETTINGS allow_experimental_window_functions = 1) SETTINGS allow_experimental_window_functions = 1
  '
---
# name: TestClickhouseFunnel.test_funnel_with_static_cohort_step_filter
  '
  
  SELECT countIf(steps = 1) step_1,
         countIf(steps = 2) step_2,
         avg(step_1_average_conversion_time_inner) step_1_average_conversion_time,
         median(step_1_median_conversion_time_inner) step_1_median_conversion_time
  FROM
    (SELECT aggregation_target,
            steps,
            avg(step_1_conversion_time) step_1_average_conversion_time_inner,
            median(step_1_conversion_time) step_1_median_conversion_time_inner
     FROM
       (SELECT aggregation_target,
               steps,
               max(steps) over (PARTITION BY aggregation_target) as max_steps,
                               step_1_conversion_time
        FROM
          (SELECT *,
                  if(latest_0 < latest_1
                     AND latest_1 <= latest_0 + INTERVAL 14 DAY, 2, 1) AS steps ,
                  if(isNotNull(latest_1)
                     AND latest_1 <= latest_0 + INTERVAL 14 DAY, dateDiff('second', toDateTime(latest_0), toDateTime(latest_1)), NULL) step_1_conversion_time
           FROM
             (SELECT aggregation_target,
                     timestamp,
                     step_0,
                     latest_0,
                     step_1,
                     min(latest_1) over (PARTITION by aggregation_target
                                         ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_1
              FROM
                (SELECT aggregation_target,
                        timestamp,
                        if(event = 'user signed up'
                           AND aggregation_target IN
                             (SELECT person_id
                              FROM person_static_cohort
                              WHERE cohort_id = 2
                                AND team_id = 2), 1, 0) as step_0,
                        if(step_0 = 1, timestamp, null) as latest_0,
                        if(event = 'paid', 1, 0) as step_1,
                        if(step_1 = 1, timestamp, null) as latest_1
                 FROM
                   (SELECT e.event as event,
                           e.team_id as team_id,
                           e.distinct_id as distinct_id,
                           e.timestamp as timestamp,
                           pdi.person_id as aggregation_target
                    FROM events e
                    INNER JOIN
                      (SELECT distinct_id,
                              argMax(person_id, version) as person_id
                       FROM person_distinct_id2
                       WHERE team_id = 2
                       GROUP BY distinct_id
                       HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
                    INNER JOIN
                      (SELECT id
                       FROM person
                       WHERE team_id = 2
                       GROUP BY id
                       HAVING max(is_deleted) = 0) person ON person.id = pdi.person_id
                    WHERE team_id = 2
                      AND event IN ['paid', 'user signed up']
                      AND timestamp >= '2020-01-01 00:00:00'
                      AND timestamp <= '2020-01-14 23:59:59' ) events
                 WHERE (step_0 = 1
                        OR step_1 = 1) ))
           WHERE step_0 = 1 SETTINGS allow_experimental_window_functions = 1 ))
     GROUP BY aggregation_target,
              steps
     HAVING steps = max_steps SETTINGS allow_experimental_window_functions = 1) SETTINGS allow_experimental_window_functions = 1
  '
---
# name: TestFunnelBreakdown.test_funnel_aggregate_by_groups_breakdown_group
  '
  
  SELECT groupArray(value)
  FROM
    (SELECT trim(BOTH '"'
                 FROM JSONExtractRaw(group_properties_0, 'industry')) AS value,
            count(*) as count
     FROM events e
     INNER JOIN
       (SELECT group_key,
               argMax(group_properties, _timestamp) AS group_properties_0
        FROM groups
        WHERE team_id = 2
          AND group_type_index = 0
        GROUP BY group_key) groups_0 ON $group_0 == groups_0.group_key
     WHERE team_id = 2
       AND event = 'sign up'
       AND timestamp >= '2020-01-01 00:00:00'
       AND timestamp <= '2020-01-08 23:59:59'
       AND NOT has([''], $group_0)
     GROUP BY value
     ORDER BY count DESC
     LIMIT 10
     OFFSET 0)
  '
---
# name: TestFunnelBreakdown.test_funnel_aggregate_by_groups_breakdown_group.1
  '
  
  SELECT countIf(steps = 1) step_1,
         countIf(steps = 2) step_2,
         countIf(steps = 3) step_3,
         avg(step_1_average_conversion_time_inner) step_1_average_conversion_time,
         avg(step_2_average_conversion_time_inner) step_2_average_conversion_time,
         median(step_1_median_conversion_time_inner) step_1_median_conversion_time,
         median(step_2_median_conversion_time_inner) step_2_median_conversion_time,
         prop
  FROM
    (SELECT aggregation_target,
            steps,
            avg(step_1_conversion_time) step_1_average_conversion_time_inner,
            avg(step_2_conversion_time) step_2_average_conversion_time_inner,
            median(step_1_conversion_time) step_1_median_conversion_time_inner,
            median(step_2_conversion_time) step_2_median_conversion_time_inner,
            prop
     FROM
       (SELECT aggregation_target,
               steps,
               max(steps) over (PARTITION BY aggregation_target,
                                             prop) as max_steps,
                               step_1_conversion_time,
                               step_2_conversion_time,
                               prop
        FROM
          (SELECT *,
                  if(latest_0 < latest_1
                     AND latest_1 <= latest_0 + INTERVAL 7 DAY
                     AND latest_1 < latest_2
                     AND latest_2 <= latest_0 + INTERVAL 7 DAY, 3, if(latest_0 < latest_1
                                                                      AND latest_1 <= latest_0 + INTERVAL 7 DAY, 2, 1)) AS steps ,
                  if(isNotNull(latest_1)
                     AND latest_1 <= latest_0 + INTERVAL 7 DAY, dateDiff('second', toDateTime(latest_0), toDateTime(latest_1)), NULL) step_1_conversion_time,
                  if(isNotNull(latest_2)
                     AND latest_2 <= latest_1 + INTERVAL 7 DAY, dateDiff('second', toDateTime(latest_1), toDateTime(latest_2)), NULL) step_2_conversion_time,
                  prop
           FROM
             (SELECT aggregation_target,
                     timestamp,
                     step_0,
                     latest_0,
                     step_1,
                     latest_1,
                     step_2,
                     min(latest_2) over (PARTITION by aggregation_target,
                                                      prop
                                         ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_2 ,
                                        prop
              FROM
                (SELECT aggregation_target,
                        timestamp,
                        step_0,
                        latest_0,
                        step_1,
                        latest_1,
                        step_2,
                        if(latest_2 < latest_1, NULL, latest_2) as latest_2 ,
                        prop
                 FROM
                   (SELECT aggregation_target,
                           timestamp,
                           step_0,
                           latest_0,
                           step_1,
                           min(latest_1) over (PARTITION by aggregation_target,
                                                            prop
                                               ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_1,
                                              step_2,
                                              min(latest_2) over (PARTITION by aggregation_target,
                                                                               prop
                                                                  ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_2 ,
                                                                 if(has(['finance', 'technology'], prop), prop, 'Other') as prop
                    FROM
                      (SELECT aggregation_target,
                              timestamp,
                              if(event = 'sign up', 1, 0) as step_0,
                              if(step_0 = 1, timestamp, null) as latest_0,
                              if(event = 'play movie', 1, 0) as step_1,
                              if(step_1 = 1, timestamp, null) as latest_1,
                              if(event = 'buy', 1, 0) as step_2,
                              if(step_2 = 1, timestamp, null) as latest_2,
                              trim(BOTH '"'
                                   FROM JSONExtractRaw(group_properties_0, 'industry')) AS prop
                       FROM
                         (SELECT e.event as event,
                                 e.team_id as team_id,
                                 e.distinct_id as distinct_id,
                                 e.timestamp as timestamp,
                                 e.$group_0 as aggregation_target,
                                 e.$group_0 as $group_0,
                                 groups_0.group_properties_0 as group_properties_0
                          FROM events e
                          INNER JOIN
                            (SELECT distinct_id,
                                    argMax(person_id, version) as person_id
                             FROM person_distinct_id2
                             WHERE team_id = 2
                             GROUP BY distinct_id
                             HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
                          INNER JOIN
                            (SELECT group_key,
                                    argMax(group_properties, _timestamp) AS group_properties_0
                             FROM groups
                             WHERE team_id = 2
                               AND group_type_index = 0
                             GROUP BY group_key) groups_0 ON $group_0 == groups_0.group_key
                          WHERE team_id = 2
                            AND event IN ['buy', 'play movie', 'sign up']
                            AND timestamp >= '2020-01-01 00:00:00'
                            AND timestamp <= '2020-01-08 23:59:59'
                            AND NOT has([''], $group_0) ) events
                       WHERE (step_0 = 1
                              OR step_1 = 1
                              OR step_2 = 1) ))))
           WHERE step_0 = 1 SETTINGS allow_experimental_window_functions = 1 ))
     GROUP BY aggregation_target,
              steps,
              prop
     HAVING steps = max_steps SETTINGS allow_experimental_window_functions = 1)
  GROUP BY prop SETTINGS allow_experimental_window_functions = 1
  '
---
# name: TestFunnelBreakdown.test_funnel_breakdown_group
  '
  
  SELECT groupArray(value)
  FROM
    (SELECT trim(BOTH '"'
                 FROM JSONExtractRaw(group_properties_0, 'industry')) AS value,
            count(*) as count
     FROM events e
     INNER JOIN
       (SELECT group_key,
               argMax(group_properties, _timestamp) AS group_properties_0
        FROM groups
        WHERE team_id = 2
          AND group_type_index = 0
        GROUP BY group_key) groups_0 ON $group_0 == groups_0.group_key
     WHERE team_id = 2
       AND event = 'sign up'
       AND timestamp >= '2020-01-01 00:00:00'
       AND timestamp <= '2020-01-08 23:59:59'
     GROUP BY value
     ORDER BY count DESC
     LIMIT 10
     OFFSET 0)
  '
---
# name: TestFunnelBreakdown.test_funnel_breakdown_group.1
  '
  
  SELECT countIf(steps = 1) step_1,
         countIf(steps = 2) step_2,
         countIf(steps = 3) step_3,
         avg(step_1_average_conversion_time_inner) step_1_average_conversion_time,
         avg(step_2_average_conversion_time_inner) step_2_average_conversion_time,
         median(step_1_median_conversion_time_inner) step_1_median_conversion_time,
         median(step_2_median_conversion_time_inner) step_2_median_conversion_time,
         prop
  FROM
    (SELECT aggregation_target,
            steps,
            avg(step_1_conversion_time) step_1_average_conversion_time_inner,
            avg(step_2_conversion_time) step_2_average_conversion_time_inner,
            median(step_1_conversion_time) step_1_median_conversion_time_inner,
            median(step_2_conversion_time) step_2_median_conversion_time_inner,
            prop
     FROM
       (SELECT aggregation_target,
               steps,
               max(steps) over (PARTITION BY aggregation_target,
                                             prop) as max_steps,
                               step_1_conversion_time,
                               step_2_conversion_time,
                               prop
        FROM
          (SELECT *,
                  if(latest_0 < latest_1
                     AND latest_1 <= latest_0 + INTERVAL 7 DAY
                     AND latest_1 < latest_2
                     AND latest_2 <= latest_0 + INTERVAL 7 DAY, 3, if(latest_0 < latest_1
                                                                      AND latest_1 <= latest_0 + INTERVAL 7 DAY, 2, 1)) AS steps ,
                  if(isNotNull(latest_1)
                     AND latest_1 <= latest_0 + INTERVAL 7 DAY, dateDiff('second', toDateTime(latest_0), toDateTime(latest_1)), NULL) step_1_conversion_time,
                  if(isNotNull(latest_2)
                     AND latest_2 <= latest_1 + INTERVAL 7 DAY, dateDiff('second', toDateTime(latest_1), toDateTime(latest_2)), NULL) step_2_conversion_time,
                  prop
           FROM
             (SELECT aggregation_target,
                     timestamp,
                     step_0,
                     latest_0,
                     step_1,
                     latest_1,
                     step_2,
                     min(latest_2) over (PARTITION by aggregation_target,
                                                      prop
                                         ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_2 ,
                                        prop
              FROM
                (SELECT aggregation_target,
                        timestamp,
                        step_0,
                        latest_0,
                        step_1,
                        latest_1,
                        step_2,
                        if(latest_2 < latest_1, NULL, latest_2) as latest_2 ,
                        prop
                 FROM
                   (SELECT aggregation_target,
                           timestamp,
                           step_0,
                           latest_0,
                           step_1,
                           min(latest_1) over (PARTITION by aggregation_target,
                                                            prop
                                               ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_1,
                                              step_2,
                                              min(latest_2) over (PARTITION by aggregation_target,
                                                                               prop
                                                                  ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_2 ,
                                                                 if(has(['technology', 'finance'], prop), prop, 'Other') as prop
                    FROM
                      (SELECT aggregation_target,
                              timestamp,
                              if(event = 'sign up', 1, 0) as step_0,
                              if(step_0 = 1, timestamp, null) as latest_0,
                              if(event = 'play movie', 1, 0) as step_1,
                              if(step_1 = 1, timestamp, null) as latest_1,
                              if(event = 'buy', 1, 0) as step_2,
                              if(step_2 = 1, timestamp, null) as latest_2,
                              trim(BOTH '"'
                                   FROM JSONExtractRaw(group_properties_0, 'industry')) AS prop
                       FROM
                         (SELECT e.event as event,
                                 e.team_id as team_id,
                                 e.distinct_id as distinct_id,
                                 e.timestamp as timestamp,
                                 pdi.person_id as aggregation_target,
                                 groups_0.group_properties_0 as group_properties_0
                          FROM events e
                          INNER JOIN
                            (SELECT distinct_id,
                                    argMax(person_id, version) as person_id
                             FROM person_distinct_id2
                             WHERE team_id = 2
                             GROUP BY distinct_id
                             HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
                          INNER JOIN
                            (SELECT group_key,
                                    argMax(group_properties, _timestamp) AS group_properties_0
                             FROM groups
                             WHERE team_id = 2
                               AND group_type_index = 0
                             GROUP BY group_key) groups_0 ON $group_0 == groups_0.group_key
                          WHERE team_id = 2
                            AND event IN ['buy', 'play movie', 'sign up']
                            AND timestamp >= '2020-01-01 00:00:00'
                            AND timestamp <= '2020-01-08 23:59:59' ) events
                       WHERE (step_0 = 1
                              OR step_1 = 1
                              OR step_2 = 1) ))))
           WHERE step_0 = 1 SETTINGS allow_experimental_window_functions = 1 ))
     GROUP BY aggregation_target,
              steps,
              prop
     HAVING steps = max_steps SETTINGS allow_experimental_window_functions = 1)
  GROUP BY prop SETTINGS allow_experimental_window_functions = 1
  '
---
# name: TestFunnelBreakdown.test_funnel_breakdown_group.2
  '
  
  SELECT groupArray(value)
  FROM
    (SELECT trim(BOTH '"'
                 FROM JSONExtractRaw(group_properties_0, 'industry')) AS value,
            count(*) as count
     FROM events e
     INNER JOIN
       (SELECT group_key,
               argMax(group_properties, _timestamp) AS group_properties_0
        FROM groups
        WHERE team_id = 2
          AND group_type_index = 0
        GROUP BY group_key) groups_0 ON $group_0 == groups_0.group_key
     WHERE team_id = 2
       AND event = 'sign up'
       AND timestamp >= '2020-01-01 00:00:00'
       AND timestamp <= '2020-01-08 23:59:59'
     GROUP BY value
     ORDER BY count DESC
     LIMIT 10
     OFFSET 0)
  '
---
# name: TestFunnelBreakdown.test_funnel_breakdown_group.3
  '
  
  SELECT aggregation_target AS actor_id
  FROM
    (SELECT aggregation_target,
            steps,
            avg(step_1_conversion_time) step_1_average_conversion_time_inner,
            avg(step_2_conversion_time) step_2_average_conversion_time_inner,
            median(step_1_conversion_time) step_1_median_conversion_time_inner,
            median(step_2_conversion_time) step_2_median_conversion_time_inner,
            prop
     FROM
       (SELECT aggregation_target,
               steps,
               max(steps) over (PARTITION BY aggregation_target,
                                             prop) as max_steps,
                               step_1_conversion_time,
                               step_2_conversion_time,
                               prop
        FROM
          (SELECT *,
                  if(latest_0 < latest_1
                     AND latest_1 <= latest_0 + INTERVAL 7 DAY
                     AND latest_1 < latest_2
                     AND latest_2 <= latest_0 + INTERVAL 7 DAY, 3, if(latest_0 < latest_1
                                                                      AND latest_1 <= latest_0 + INTERVAL 7 DAY, 2, 1)) AS steps ,
                  if(isNotNull(latest_1)
                     AND latest_1 <= latest_0 + INTERVAL 7 DAY, dateDiff('second', toDateTime(latest_0), toDateTime(latest_1)), NULL) step_1_conversion_time,
                  if(isNotNull(latest_2)
                     AND latest_2 <= latest_1 + INTERVAL 7 DAY, dateDiff('second', toDateTime(latest_1), toDateTime(latest_2)), NULL) step_2_conversion_time,
                  prop
           FROM
             (SELECT aggregation_target,
                     timestamp,
                     step_0,
                     latest_0,
                     step_1,
                     latest_1,
                     step_2,
                     min(latest_2) over (PARTITION by aggregation_target,
                                                      prop
                                         ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_2 ,
                                        prop
              FROM
                (SELECT aggregation_target,
                        timestamp,
                        step_0,
                        latest_0,
                        step_1,
                        latest_1,
                        step_2,
                        if(latest_2 < latest_1, NULL, latest_2) as latest_2 ,
                        prop
                 FROM
                   (SELECT aggregation_target,
                           timestamp,
                           step_0,
                           latest_0,
                           step_1,
                           min(latest_1) over (PARTITION by aggregation_target,
                                                            prop
                                               ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_1,
                                              step_2,
                                              min(latest_2) over (PARTITION by aggregation_target,
                                                                               prop
                                                                  ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_2 ,
                                                                 if(has(['technology', 'finance'], prop), prop, 'Other') as prop
                    FROM
                      (SELECT aggregation_target,
                              timestamp,
                              if(event = 'sign up', 1, 0) as step_0,
                              if(step_0 = 1, timestamp, null) as latest_0,
                              if(event = 'play movie', 1, 0) as step_1,
                              if(step_1 = 1, timestamp, null) as latest_1,
                              if(event = 'buy', 1, 0) as step_2,
                              if(step_2 = 1, timestamp, null) as latest_2,
                              trim(BOTH '"'
                                   FROM JSONExtractRaw(group_properties_0, 'industry')) AS prop
                       FROM
                         (SELECT e.event as event,
                                 e.team_id as team_id,
                                 e.distinct_id as distinct_id,
                                 e.timestamp as timestamp,
                                 pdi.person_id as aggregation_target,
                                 groups_0.group_properties_0 as group_properties_0
                          FROM events e
                          INNER JOIN
                            (SELECT distinct_id,
                                    argMax(person_id, version) as person_id
                             FROM person_distinct_id2
                             WHERE team_id = 2
                             GROUP BY distinct_id
                             HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
                          INNER JOIN
                            (SELECT group_key,
                                    argMax(group_properties, _timestamp) AS group_properties_0
                             FROM groups
                             WHERE team_id = 2
                               AND group_type_index = 0
                             GROUP BY group_key) groups_0 ON $group_0 == groups_0.group_key
                          WHERE team_id = 2
                            AND event IN ['buy', 'play movie', 'sign up']
                            AND timestamp >= '2020-01-01 00:00:00'
                            AND timestamp <= '2020-01-08 23:59:59' ) events
                       WHERE (step_0 = 1
                              OR step_1 = 1
                              OR step_2 = 1) ))))
           WHERE step_0 = 1 SETTINGS allow_experimental_window_functions = 1 ))
     GROUP BY aggregation_target,
              steps,
              prop
     HAVING steps = max_steps SETTINGS allow_experimental_window_functions = 1)
  WHERE steps IN [1, 2, 3]
    AND hasAll(arrayFlatten(array(prop)), arrayFlatten(array('finance')))
  ORDER BY aggregation_target
  LIMIT 100
  OFFSET 0 SETTINGS allow_experimental_window_functions = 1
  '
---
# name: TestFunnelBreakdown.test_funnel_breakdown_group.4
  '
  
  SELECT groupArray(value)
  FROM
    (SELECT trim(BOTH '"'
                 FROM JSONExtractRaw(group_properties_0, 'industry')) AS value,
            count(*) as count
     FROM events e
     INNER JOIN
       (SELECT group_key,
               argMax(group_properties, _timestamp) AS group_properties_0
        FROM groups
        WHERE team_id = 2
          AND group_type_index = 0
        GROUP BY group_key) groups_0 ON $group_0 == groups_0.group_key
     WHERE team_id = 2
       AND event = 'sign up'
       AND timestamp >= '2020-01-01 00:00:00'
       AND timestamp <= '2020-01-08 23:59:59'
     GROUP BY value
     ORDER BY count DESC
     LIMIT 10
     OFFSET 0)
  '
---
# name: TestFunnelBreakdown.test_funnel_breakdown_group.5
  '
  
  SELECT aggregation_target AS actor_id
  FROM
    (SELECT aggregation_target,
            steps,
            avg(step_1_conversion_time) step_1_average_conversion_time_inner,
            avg(step_2_conversion_time) step_2_average_conversion_time_inner,
            median(step_1_conversion_time) step_1_median_conversion_time_inner,
            median(step_2_conversion_time) step_2_median_conversion_time_inner,
            prop
     FROM
       (SELECT aggregation_target,
               steps,
               max(steps) over (PARTITION BY aggregation_target,
                                             prop) as max_steps,
                               step_1_conversion_time,
                               step_2_conversion_time,
                               prop
        FROM
          (SELECT *,
                  if(latest_0 < latest_1
                     AND latest_1 <= latest_0 + INTERVAL 7 DAY
                     AND latest_1 < latest_2
                     AND latest_2 <= latest_0 + INTERVAL 7 DAY, 3, if(latest_0 < latest_1
                                                                      AND latest_1 <= latest_0 + INTERVAL 7 DAY, 2, 1)) AS steps ,
                  if(isNotNull(latest_1)
                     AND latest_1 <= latest_0 + INTERVAL 7 DAY, dateDiff('second', toDateTime(latest_0), toDateTime(latest_1)), NULL) step_1_conversion_time,
                  if(isNotNull(latest_2)
                     AND latest_2 <= latest_1 + INTERVAL 7 DAY, dateDiff('second', toDateTime(latest_1), toDateTime(latest_2)), NULL) step_2_conversion_time,
                  prop
           FROM
             (SELECT aggregation_target,
                     timestamp,
                     step_0,
                     latest_0,
                     step_1,
                     latest_1,
                     step_2,
                     min(latest_2) over (PARTITION by aggregation_target,
                                                      prop
                                         ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_2 ,
                                        prop
              FROM
                (SELECT aggregation_target,
                        timestamp,
                        step_0,
                        latest_0,
                        step_1,
                        latest_1,
                        step_2,
                        if(latest_2 < latest_1, NULL, latest_2) as latest_2 ,
                        prop
                 FROM
                   (SELECT aggregation_target,
                           timestamp,
                           step_0,
                           latest_0,
                           step_1,
                           min(latest_1) over (PARTITION by aggregation_target,
                                                            prop
                                               ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_1,
                                              step_2,
                                              min(latest_2) over (PARTITION by aggregation_target,
                                                                               prop
                                                                  ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_2 ,
                                                                 if(has(['technology', 'finance'], prop), prop, 'Other') as prop
                    FROM
                      (SELECT aggregation_target,
                              timestamp,
                              if(event = 'sign up', 1, 0) as step_0,
                              if(step_0 = 1, timestamp, null) as latest_0,
                              if(event = 'play movie', 1, 0) as step_1,
                              if(step_1 = 1, timestamp, null) as latest_1,
                              if(event = 'buy', 1, 0) as step_2,
                              if(step_2 = 1, timestamp, null) as latest_2,
                              trim(BOTH '"'
                                   FROM JSONExtractRaw(group_properties_0, 'industry')) AS prop
                       FROM
                         (SELECT e.event as event,
                                 e.team_id as team_id,
                                 e.distinct_id as distinct_id,
                                 e.timestamp as timestamp,
                                 pdi.person_id as aggregation_target,
                                 groups_0.group_properties_0 as group_properties_0
                          FROM events e
                          INNER JOIN
                            (SELECT distinct_id,
                                    argMax(person_id, version) as person_id
                             FROM person_distinct_id2
                             WHERE team_id = 2
                             GROUP BY distinct_id
                             HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
                          INNER JOIN
                            (SELECT group_key,
                                    argMax(group_properties, _timestamp) AS group_properties_0
                             FROM groups
                             WHERE team_id = 2
                               AND group_type_index = 0
                             GROUP BY group_key) groups_0 ON $group_0 == groups_0.group_key
                          WHERE team_id = 2
                            AND event IN ['buy', 'play movie', 'sign up']
                            AND timestamp >= '2020-01-01 00:00:00'
                            AND timestamp <= '2020-01-08 23:59:59' ) events
                       WHERE (step_0 = 1
                              OR step_1 = 1
                              OR step_2 = 1) ))))
           WHERE step_0 = 1 SETTINGS allow_experimental_window_functions = 1 ))
     GROUP BY aggregation_target,
              steps,
              prop
     HAVING steps = max_steps SETTINGS allow_experimental_window_functions = 1)
  WHERE steps IN [2, 3]
    AND hasAll(arrayFlatten(array(prop)), arrayFlatten(array('finance')))
  ORDER BY aggregation_target
  LIMIT 100
  OFFSET 0 SETTINGS allow_experimental_window_functions = 1
  '
---
# name: TestFunnelBreakdown.test_funnel_breakdown_group.6
  '
  
  SELECT groupArray(value)
  FROM
    (SELECT trim(BOTH '"'
                 FROM JSONExtractRaw(group_properties_0, 'industry')) AS value,
            count(*) as count
     FROM events e
     INNER JOIN
       (SELECT group_key,
               argMax(group_properties, _timestamp) AS group_properties_0
        FROM groups
        WHERE team_id = 2
          AND group_type_index = 0
        GROUP BY group_key) groups_0 ON $group_0 == groups_0.group_key
     WHERE team_id = 2
       AND event = 'sign up'
       AND timestamp >= '2020-01-01 00:00:00'
       AND timestamp <= '2020-01-08 23:59:59'
     GROUP BY value
     ORDER BY count DESC
     LIMIT 10
     OFFSET 0)
  '
---
# name: TestFunnelBreakdown.test_funnel_breakdown_group.7
  '
  
  SELECT aggregation_target AS actor_id
  FROM
    (SELECT aggregation_target,
            steps,
            avg(step_1_conversion_time) step_1_average_conversion_time_inner,
            avg(step_2_conversion_time) step_2_average_conversion_time_inner,
            median(step_1_conversion_time) step_1_median_conversion_time_inner,
            median(step_2_conversion_time) step_2_median_conversion_time_inner,
            prop
     FROM
       (SELECT aggregation_target,
               steps,
               max(steps) over (PARTITION BY aggregation_target,
                                             prop) as max_steps,
                               step_1_conversion_time,
                               step_2_conversion_time,
                               prop
        FROM
          (SELECT *,
                  if(latest_0 < latest_1
                     AND latest_1 <= latest_0 + INTERVAL 7 DAY
                     AND latest_1 < latest_2
                     AND latest_2 <= latest_0 + INTERVAL 7 DAY, 3, if(latest_0 < latest_1
                                                                      AND latest_1 <= latest_0 + INTERVAL 7 DAY, 2, 1)) AS steps ,
                  if(isNotNull(latest_1)
                     AND latest_1 <= latest_0 + INTERVAL 7 DAY, dateDiff('second', toDateTime(latest_0), toDateTime(latest_1)), NULL) step_1_conversion_time,
                  if(isNotNull(latest_2)
                     AND latest_2 <= latest_1 + INTERVAL 7 DAY, dateDiff('second', toDateTime(latest_1), toDateTime(latest_2)), NULL) step_2_conversion_time,
                  prop
           FROM
             (SELECT aggregation_target,
                     timestamp,
                     step_0,
                     latest_0,
                     step_1,
                     latest_1,
                     step_2,
                     min(latest_2) over (PARTITION by aggregation_target,
                                                      prop
                                         ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_2 ,
                                        prop
              FROM
                (SELECT aggregation_target,
                        timestamp,
                        step_0,
                        latest_0,
                        step_1,
                        latest_1,
                        step_2,
                        if(latest_2 < latest_1, NULL, latest_2) as latest_2 ,
                        prop
                 FROM
                   (SELECT aggregation_target,
                           timestamp,
                           step_0,
                           latest_0,
                           step_1,
                           min(latest_1) over (PARTITION by aggregation_target,
                                                            prop
                                               ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_1,
                                              step_2,
                                              min(latest_2) over (PARTITION by aggregation_target,
                                                                               prop
                                                                  ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_2 ,
                                                                 if(has(['technology', 'finance'], prop), prop, 'Other') as prop
                    FROM
                      (SELECT aggregation_target,
                              timestamp,
                              if(event = 'sign up', 1, 0) as step_0,
                              if(step_0 = 1, timestamp, null) as latest_0,
                              if(event = 'play movie', 1, 0) as step_1,
                              if(step_1 = 1, timestamp, null) as latest_1,
                              if(event = 'buy', 1, 0) as step_2,
                              if(step_2 = 1, timestamp, null) as latest_2,
                              trim(BOTH '"'
                                   FROM JSONExtractRaw(group_properties_0, 'industry')) AS prop
                       FROM
                         (SELECT e.event as event,
                                 e.team_id as team_id,
                                 e.distinct_id as distinct_id,
                                 e.timestamp as timestamp,
                                 pdi.person_id as aggregation_target,
                                 groups_0.group_properties_0 as group_properties_0
                          FROM events e
                          INNER JOIN
                            (SELECT distinct_id,
                                    argMax(person_id, version) as person_id
                             FROM person_distinct_id2
                             WHERE team_id = 2
                             GROUP BY distinct_id
                             HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
                          INNER JOIN
                            (SELECT group_key,
                                    argMax(group_properties, _timestamp) AS group_properties_0
                             FROM groups
                             WHERE team_id = 2
                               AND group_type_index = 0
                             GROUP BY group_key) groups_0 ON $group_0 == groups_0.group_key
                          WHERE team_id = 2
                            AND event IN ['buy', 'play movie', 'sign up']
                            AND timestamp >= '2020-01-01 00:00:00'
                            AND timestamp <= '2020-01-08 23:59:59' ) events
                       WHERE (step_0 = 1
                              OR step_1 = 1
                              OR step_2 = 1) ))))
           WHERE step_0 = 1 SETTINGS allow_experimental_window_functions = 1 ))
     GROUP BY aggregation_target,
              steps,
              prop
     HAVING steps = max_steps SETTINGS allow_experimental_window_functions = 1)
  WHERE steps IN [1, 2, 3]
    AND hasAll(arrayFlatten(array(prop)), arrayFlatten(array('technology')))
  ORDER BY aggregation_target
  LIMIT 100
  OFFSET 0 SETTINGS allow_experimental_window_functions = 1
  '
---
# name: TestFunnelBreakdown.test_funnel_breakdown_group.8
  '
  
  SELECT groupArray(value)
  FROM
    (SELECT trim(BOTH '"'
                 FROM JSONExtractRaw(group_properties_0, 'industry')) AS value,
            count(*) as count
     FROM events e
     INNER JOIN
       (SELECT group_key,
               argMax(group_properties, _timestamp) AS group_properties_0
        FROM groups
        WHERE team_id = 2
          AND group_type_index = 0
        GROUP BY group_key) groups_0 ON $group_0 == groups_0.group_key
     WHERE team_id = 2
       AND event = 'sign up'
       AND timestamp >= '2020-01-01 00:00:00'
       AND timestamp <= '2020-01-08 23:59:59'
     GROUP BY value
     ORDER BY count DESC
     LIMIT 10
     OFFSET 0)
  '
---
# name: TestFunnelBreakdown.test_funnel_breakdown_group.9
  '
  
  SELECT aggregation_target AS actor_id
  FROM
    (SELECT aggregation_target,
            steps,
            avg(step_1_conversion_time) step_1_average_conversion_time_inner,
            avg(step_2_conversion_time) step_2_average_conversion_time_inner,
            median(step_1_conversion_time) step_1_median_conversion_time_inner,
            median(step_2_conversion_time) step_2_median_conversion_time_inner,
            prop
     FROM
       (SELECT aggregation_target,
               steps,
               max(steps) over (PARTITION BY aggregation_target,
                                             prop) as max_steps,
                               step_1_conversion_time,
                               step_2_conversion_time,
                               prop
        FROM
          (SELECT *,
                  if(latest_0 < latest_1
                     AND latest_1 <= latest_0 + INTERVAL 7 DAY
                     AND latest_1 < latest_2
                     AND latest_2 <= latest_0 + INTERVAL 7 DAY, 3, if(latest_0 < latest_1
                                                                      AND latest_1 <= latest_0 + INTERVAL 7 DAY, 2, 1)) AS steps ,
                  if(isNotNull(latest_1)
                     AND latest_1 <= latest_0 + INTERVAL 7 DAY, dateDiff('second', toDateTime(latest_0), toDateTime(latest_1)), NULL) step_1_conversion_time,
                  if(isNotNull(latest_2)
                     AND latest_2 <= latest_1 + INTERVAL 7 DAY, dateDiff('second', toDateTime(latest_1), toDateTime(latest_2)), NULL) step_2_conversion_time,
                  prop
           FROM
             (SELECT aggregation_target,
                     timestamp,
                     step_0,
                     latest_0,
                     step_1,
                     latest_1,
                     step_2,
                     min(latest_2) over (PARTITION by aggregation_target,
                                                      prop
                                         ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_2 ,
                                        prop
              FROM
                (SELECT aggregation_target,
                        timestamp,
                        step_0,
                        latest_0,
                        step_1,
                        latest_1,
                        step_2,
                        if(latest_2 < latest_1, NULL, latest_2) as latest_2 ,
                        prop
                 FROM
                   (SELECT aggregation_target,
                           timestamp,
                           step_0,
                           latest_0,
                           step_1,
                           min(latest_1) over (PARTITION by aggregation_target,
                                                            prop
                                               ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_1,
                                              step_2,
                                              min(latest_2) over (PARTITION by aggregation_target,
                                                                               prop
                                                                  ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_2 ,
                                                                 if(has(['technology', 'finance'], prop), prop, 'Other') as prop
                    FROM
                      (SELECT aggregation_target,
                              timestamp,
                              if(event = 'sign up', 1, 0) as step_0,
                              if(step_0 = 1, timestamp, null) as latest_0,
                              if(event = 'play movie', 1, 0) as step_1,
                              if(step_1 = 1, timestamp, null) as latest_1,
                              if(event = 'buy', 1, 0) as step_2,
                              if(step_2 = 1, timestamp, null) as latest_2,
                              trim(BOTH '"'
                                   FROM JSONExtractRaw(group_properties_0, 'industry')) AS prop
                       FROM
                         (SELECT e.event as event,
                                 e.team_id as team_id,
                                 e.distinct_id as distinct_id,
                                 e.timestamp as timestamp,
                                 pdi.person_id as aggregation_target,
                                 groups_0.group_properties_0 as group_properties_0
                          FROM events e
                          INNER JOIN
                            (SELECT distinct_id,
                                    argMax(person_id, version) as person_id
                             FROM person_distinct_id2
                             WHERE team_id = 2
                             GROUP BY distinct_id
                             HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
                          INNER JOIN
                            (SELECT group_key,
                                    argMax(group_properties, _timestamp) AS group_properties_0
                             FROM groups
                             WHERE team_id = 2
                               AND group_type_index = 0
                             GROUP BY group_key) groups_0 ON $group_0 == groups_0.group_key
                          WHERE team_id = 2
                            AND event IN ['buy', 'play movie', 'sign up']
                            AND timestamp >= '2020-01-01 00:00:00'
                            AND timestamp <= '2020-01-08 23:59:59' ) events
                       WHERE (step_0 = 1
                              OR step_1 = 1
                              OR step_2 = 1) ))))
           WHERE step_0 = 1 SETTINGS allow_experimental_window_functions = 1 ))
     GROUP BY aggregation_target,
              steps,
              prop
     HAVING steps = max_steps SETTINGS allow_experimental_window_functions = 1)
  WHERE steps IN [2, 3]
    AND hasAll(arrayFlatten(array(prop)), arrayFlatten(array('technology')))
  ORDER BY aggregation_target
  LIMIT 100
  OFFSET 0 SETTINGS allow_experimental_window_functions = 1
  '
---
