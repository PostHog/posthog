# serializer version: 1
# name: ClickhouseTestFunnelExperimentResults.test_experiment_flow_with_event_results
  '''
  /* user_id:0 request:_snapshot_ */
  SELECT array(replaceRegexpAll(JSONExtractRaw(properties, '$feature/a-b-test'), '^"|"$', '')) AS value,
         count(*) as count
  FROM events e
  WHERE team_id = 99999
    AND event IN ['$pageleave', '$pageview']
    AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
    AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-06 00:00:00', 'UTC')
  GROUP BY value
  ORDER BY count DESC, value DESC
  LIMIT 26
  OFFSET 0
  '''
# ---
# name: ClickhouseTestFunnelExperimentResults.test_experiment_flow_with_event_results.1
  '''
  /* user_id:0 request:_snapshot_ */
  SELECT countIf(steps = 1) step_1,
         countIf(steps = 2) step_2,
         avg(step_1_average_conversion_time_inner) step_1_average_conversion_time,
         median(step_1_median_conversion_time_inner) step_1_median_conversion_time,
         prop
  FROM
    (SELECT aggregation_target,
            steps,
            avg(step_1_conversion_time) step_1_average_conversion_time_inner,
            median(step_1_conversion_time) step_1_median_conversion_time_inner ,
            prop
     FROM
       (SELECT aggregation_target,
               steps,
               max(steps) over (PARTITION BY aggregation_target,
                                             prop) as max_steps,
                               step_1_conversion_time ,
                               prop
        FROM
          (SELECT *,
                  if(latest_0 <= latest_1
                     AND latest_1 <= latest_0 + INTERVAL 14 DAY, 2, 1) AS steps ,
                  if(isNotNull(latest_1)
                     AND latest_1 <= latest_0 + INTERVAL 14 DAY, dateDiff('second', toDateTime(latest_0), toDateTime(latest_1)), NULL) step_1_conversion_time,
                  prop
           FROM
             (SELECT aggregation_target, timestamp, step_0,
                                                    latest_0,
                                                    step_1,
                                                    min(latest_1) over (PARTITION by aggregation_target,
                                                                                     prop
                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_1 ,
                                                                       if(has([['test'], ['control'], ['']], prop), prop, ['Other']) as prop
              FROM
                (SELECT *,
                        if(notEmpty(arrayFilter(x -> notEmpty(x), prop_vals)), prop_vals, ['']) as prop
                 FROM
                   (SELECT e.timestamp as timestamp,
                           if(notEmpty(pdi.distinct_id), pdi.person_id, e.person_id) as aggregation_target,
                           if(notEmpty(pdi.distinct_id), pdi.person_id, e.person_id) as person_id,
                           if(event = '$pageview', 1, 0) as step_0,
                           if(step_0 = 1, timestamp, null) as latest_0,
                           if(event = '$pageleave', 1, 0) as step_1,
                           if(step_1 = 1, timestamp, null) as latest_1,
                           array(replaceRegexpAll(JSONExtractRaw(properties, '$feature/a-b-test'), '^"|"$', '')) AS prop_basic,
                           prop_basic as prop,
                           argMinIf(prop, timestamp, notEmpty(arrayFilter(x -> notEmpty(x), prop))) over (PARTITION by aggregation_target) as prop_vals
                    FROM events e
                    LEFT OUTER JOIN
                      (SELECT distinct_id,
                              argMax(person_id, version) as person_id
                       FROM person_distinct_id2
                       WHERE team_id = 99999
                         AND distinct_id IN
                           (SELECT distinct_id
                            FROM events
                            WHERE team_id = 99999
                              AND event IN ['$pageleave', '$pageview']
                              AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
                              AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-06 00:00:00', 'UTC') )
                       GROUP BY distinct_id
                       HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
                    WHERE team_id = 99999
                      AND event IN ['$pageleave', '$pageview']
                      AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
                      AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-06 00:00:00', 'UTC')
                      AND (step_0 = 1
                           OR step_1 = 1) )))
           WHERE step_0 = 1 ))
     GROUP BY aggregation_target,
              steps,
              prop
     HAVING steps = max(max_steps))
  GROUP BY prop
  '''
# ---
# name: ClickhouseTestFunnelExperimentResults.test_experiment_flow_with_event_results.2
  '''
  /* user_id:0 request:_snapshot_ */
  SELECT countIf(steps = 1) step_1,
         countIf(steps = 2) step_2,
         avg(step_1_average_conversion_time_inner) step_1_average_conversion_time,
         median(step_1_median_conversion_time_inner) step_1_median_conversion_time,
         prop
  FROM
    (SELECT aggregation_target,
            steps,
            avg(step_1_conversion_time) step_1_average_conversion_time_inner,
            median(step_1_conversion_time) step_1_median_conversion_time_inner ,
            prop
     FROM
       (SELECT aggregation_target,
               steps,
               max(steps) over (PARTITION BY aggregation_target,
                                             prop) as max_steps,
                               step_1_conversion_time ,
                               prop
        FROM
          (SELECT *,
                  if(latest_0 <= latest_1
                     AND latest_1 <= latest_0 + INTERVAL 14 DAY, 2, 1) AS steps ,
                  if(isNotNull(latest_1)
                     AND latest_1 <= latest_0 + INTERVAL 14 DAY, dateDiff('second', toDateTime(latest_0), toDateTime(latest_1)), NULL) step_1_conversion_time,
                  prop
           FROM
             (SELECT aggregation_target, timestamp, step_0,
                                                    latest_0,
                                                    step_1,
                                                    min(latest_1) over (PARTITION by aggregation_target,
                                                                                     prop
                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_1 ,
                                                                       if(has([['test'], ['control'], ['']], prop), prop, ['Other']) as prop
              FROM
                (SELECT *,
                        if(notEmpty(arrayFilter(x -> notEmpty(x), prop_vals)), prop_vals, ['']) as prop
                 FROM
                   (SELECT e.timestamp as timestamp,
                           if(notEmpty(pdi.distinct_id), pdi.person_id, e.person_id) as aggregation_target,
                           if(notEmpty(pdi.distinct_id), pdi.person_id, e.person_id) as person_id,
                           if(event = '$pageview', 1, 0) as step_0,
                           if(step_0 = 1, timestamp, null) as latest_0,
                           if(event = '$pageleave', 1, 0) as step_1,
                           if(step_1 = 1, timestamp, null) as latest_1,
                           array(replaceRegexpAll(JSONExtractRaw(properties, '$feature/a-b-test'), '^"|"$', '')) AS prop_basic,
                           prop_basic as prop,
                           argMinIf(prop, timestamp, notEmpty(arrayFilter(x -> notEmpty(x), prop))) over (PARTITION by aggregation_target) as prop_vals
                    FROM events e
                    LEFT OUTER JOIN
                      (SELECT distinct_id,
                              argMax(person_id, version) as person_id
                       FROM person_distinct_id2
                       WHERE team_id = 99999
                         AND distinct_id IN
                           (SELECT distinct_id
                            FROM events
                            WHERE team_id = 99999
                              AND event IN ['$pageleave', '$pageview']
                              AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
                              AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-06 00:00:00', 'UTC') )
                       GROUP BY distinct_id
                       HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
                    WHERE team_id = 99999
                      AND event IN ['$pageleave', '$pageview']
                      AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
                      AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-06 00:00:00', 'UTC')
                      AND (step_0 = 1
                           OR step_1 = 1) )))
           WHERE step_0 = 1 ))
     GROUP BY aggregation_target,
              steps,
              prop
     HAVING steps = max(max_steps))
  GROUP BY prop
  '''
# ---
# name: ClickhouseTestFunnelExperimentResults.test_experiment_flow_with_event_results_and_events_out_of_time_range_timezones
  '''
  /* user_id:0 request:_snapshot_ */
  SELECT array(replaceRegexpAll(JSONExtractRaw(properties, '$feature/a-b-test'), '^"|"$', '')) AS value,
         count(*) as count
  FROM events e
  WHERE team_id = 99999
    AND event IN ['$pageleave', '$pageview']
    AND toTimeZone(timestamp, 'Europe/Amsterdam') >= toDateTime('2020-01-01 14:20:21', 'Europe/Amsterdam')
    AND toTimeZone(timestamp, 'Europe/Amsterdam') <= toDateTime('2020-01-06 10:00:00', 'Europe/Amsterdam')
  GROUP BY value
  ORDER BY count DESC, value DESC
  LIMIT 26
  OFFSET 0
  '''
# ---
# name: ClickhouseTestFunnelExperimentResults.test_experiment_flow_with_event_results_and_events_out_of_time_range_timezones.1
  '''
  /* user_id:0 request:_snapshot_ */
  SELECT countIf(steps = 1) step_1,
         countIf(steps = 2) step_2,
         avg(step_1_average_conversion_time_inner) step_1_average_conversion_time,
         median(step_1_median_conversion_time_inner) step_1_median_conversion_time,
         prop
  FROM
    (SELECT aggregation_target,
            steps,
            avg(step_1_conversion_time) step_1_average_conversion_time_inner,
            median(step_1_conversion_time) step_1_median_conversion_time_inner ,
            prop
     FROM
       (SELECT aggregation_target,
               steps,
               max(steps) over (PARTITION BY aggregation_target,
                                             prop) as max_steps,
                               step_1_conversion_time ,
                               prop
        FROM
          (SELECT *,
                  if(latest_0 <= latest_1
                     AND latest_1 <= latest_0 + INTERVAL 14 DAY, 2, 1) AS steps ,
                  if(isNotNull(latest_1)
                     AND latest_1 <= latest_0 + INTERVAL 14 DAY, dateDiff('second', toDateTime(latest_0), toDateTime(latest_1)), NULL) step_1_conversion_time,
                  prop
           FROM
             (SELECT aggregation_target, timestamp, step_0,
                                                    latest_0,
                                                    step_1,
                                                    min(latest_1) over (PARTITION by aggregation_target,
                                                                                     prop
                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_1 ,
                                                                       if(has([['test'], ['control']], prop), prop, ['Other']) as prop
              FROM
                (SELECT *,
                        if(notEmpty(arrayFilter(x -> notEmpty(x), prop_vals)), prop_vals, ['']) as prop
                 FROM
                   (SELECT e.timestamp as timestamp,
                           if(notEmpty(pdi.distinct_id), pdi.person_id, e.person_id) as aggregation_target,
                           if(notEmpty(pdi.distinct_id), pdi.person_id, e.person_id) as person_id,
                           if(event = '$pageview', 1, 0) as step_0,
                           if(step_0 = 1, timestamp, null) as latest_0,
                           if(event = '$pageleave', 1, 0) as step_1,
                           if(step_1 = 1, timestamp, null) as latest_1,
                           array(replaceRegexpAll(JSONExtractRaw(properties, '$feature/a-b-test'), '^"|"$', '')) AS prop_basic,
                           prop_basic as prop,
                           argMinIf(prop, timestamp, notEmpty(arrayFilter(x -> notEmpty(x), prop))) over (PARTITION by aggregation_target) as prop_vals
                    FROM events e
                    LEFT OUTER JOIN
                      (SELECT distinct_id,
                              argMax(person_id, version) as person_id
                       FROM person_distinct_id2
                       WHERE team_id = 99999
                         AND distinct_id IN
                           (SELECT distinct_id
                            FROM events
                            WHERE team_id = 99999
                              AND event IN ['$pageleave', '$pageview']
                              AND toTimeZone(timestamp, 'Europe/Amsterdam') >= toDateTime('2020-01-01 14:20:21', 'Europe/Amsterdam')
                              AND toTimeZone(timestamp, 'Europe/Amsterdam') <= toDateTime('2020-01-06 10:00:00', 'Europe/Amsterdam') )
                       GROUP BY distinct_id
                       HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
                    WHERE team_id = 99999
                      AND event IN ['$pageleave', '$pageview']
                      AND toTimeZone(timestamp, 'Europe/Amsterdam') >= toDateTime('2020-01-01 14:20:21', 'Europe/Amsterdam')
                      AND toTimeZone(timestamp, 'Europe/Amsterdam') <= toDateTime('2020-01-06 10:00:00', 'Europe/Amsterdam')
                      AND (step_0 = 1
                           OR step_1 = 1) )))
           WHERE step_0 = 1 ))
     GROUP BY aggregation_target,
              steps,
              prop
     HAVING steps = max(max_steps))
  GROUP BY prop
  '''
# ---
# name: ClickhouseTestFunnelExperimentResults.test_experiment_flow_with_event_results_and_events_out_of_time_range_timezones.2
  '''
  /* user_id:0 request:_snapshot_ */
  SELECT countIf(steps = 1) step_1,
         countIf(steps = 2) step_2,
         avg(step_1_average_conversion_time_inner) step_1_average_conversion_time,
         median(step_1_median_conversion_time_inner) step_1_median_conversion_time,
         prop
  FROM
    (SELECT aggregation_target,
            steps,
            avg(step_1_conversion_time) step_1_average_conversion_time_inner,
            median(step_1_conversion_time) step_1_median_conversion_time_inner ,
            prop
     FROM
       (SELECT aggregation_target,
               steps,
               max(steps) over (PARTITION BY aggregation_target,
                                             prop) as max_steps,
                               step_1_conversion_time ,
                               prop
        FROM
          (SELECT *,
                  if(latest_0 <= latest_1
                     AND latest_1 <= latest_0 + INTERVAL 14 DAY, 2, 1) AS steps ,
                  if(isNotNull(latest_1)
                     AND latest_1 <= latest_0 + INTERVAL 14 DAY, dateDiff('second', toDateTime(latest_0), toDateTime(latest_1)), NULL) step_1_conversion_time,
                  prop
           FROM
             (SELECT aggregation_target, timestamp, step_0,
                                                    latest_0,
                                                    step_1,
                                                    min(latest_1) over (PARTITION by aggregation_target,
                                                                                     prop
                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_1 ,
                                                                       if(has([['test'], ['control']], prop), prop, ['Other']) as prop
              FROM
                (SELECT *,
                        if(notEmpty(arrayFilter(x -> notEmpty(x), prop_vals)), prop_vals, ['']) as prop
                 FROM
                   (SELECT e.timestamp as timestamp,
                           if(notEmpty(pdi.distinct_id), pdi.person_id, e.person_id) as aggregation_target,
                           if(notEmpty(pdi.distinct_id), pdi.person_id, e.person_id) as person_id,
                           if(event = '$pageview', 1, 0) as step_0,
                           if(step_0 = 1, timestamp, null) as latest_0,
                           if(event = '$pageleave', 1, 0) as step_1,
                           if(step_1 = 1, timestamp, null) as latest_1,
                           array(replaceRegexpAll(JSONExtractRaw(properties, '$feature/a-b-test'), '^"|"$', '')) AS prop_basic,
                           prop_basic as prop,
                           argMinIf(prop, timestamp, notEmpty(arrayFilter(x -> notEmpty(x), prop))) over (PARTITION by aggregation_target) as prop_vals
                    FROM events e
                    LEFT OUTER JOIN
                      (SELECT distinct_id,
                              argMax(person_id, version) as person_id
                       FROM person_distinct_id2
                       WHERE team_id = 99999
                         AND distinct_id IN
                           (SELECT distinct_id
                            FROM events
                            WHERE team_id = 99999
                              AND event IN ['$pageleave', '$pageview']
                              AND toTimeZone(timestamp, 'Europe/Amsterdam') >= toDateTime('2020-01-01 14:20:21', 'Europe/Amsterdam')
                              AND toTimeZone(timestamp, 'Europe/Amsterdam') <= toDateTime('2020-01-06 10:00:00', 'Europe/Amsterdam') )
                       GROUP BY distinct_id
                       HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
                    WHERE team_id = 99999
                      AND event IN ['$pageleave', '$pageview']
                      AND toTimeZone(timestamp, 'Europe/Amsterdam') >= toDateTime('2020-01-01 14:20:21', 'Europe/Amsterdam')
                      AND toTimeZone(timestamp, 'Europe/Amsterdam') <= toDateTime('2020-01-06 10:00:00', 'Europe/Amsterdam')
                      AND (step_0 = 1
                           OR step_1 = 1) )))
           WHERE step_0 = 1 ))
     GROUP BY aggregation_target,
              steps,
              prop
     HAVING steps = max(max_steps))
  GROUP BY prop
  '''
# ---
# name: ClickhouseTestFunnelExperimentResults.test_experiment_flow_with_event_results_for_three_test_variants
  '''
  /* user_id:0 request:_snapshot_ */
  SELECT array(replaceRegexpAll(JSONExtractRaw(properties, '$feature/a-b-test'), '^"|"$', '')) AS value,
         count(*) as count
  FROM events e
  WHERE team_id = 99999
    AND event IN ['$pageleave', '$pageview']
    AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
    AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-06 00:00:00', 'UTC')
  GROUP BY value
  ORDER BY count DESC, value DESC
  LIMIT 26
  OFFSET 0
  '''
# ---
# name: ClickhouseTestFunnelExperimentResults.test_experiment_flow_with_event_results_for_three_test_variants.1
  '''
  /* user_id:0 request:_snapshot_ */
  SELECT countIf(steps = 1) step_1,
         countIf(steps = 2) step_2,
         avg(step_1_average_conversion_time_inner) step_1_average_conversion_time,
         median(step_1_median_conversion_time_inner) step_1_median_conversion_time,
         prop
  FROM
    (SELECT aggregation_target,
            steps,
            avg(step_1_conversion_time) step_1_average_conversion_time_inner,
            median(step_1_conversion_time) step_1_median_conversion_time_inner ,
            prop
     FROM
       (SELECT aggregation_target,
               steps,
               max(steps) over (PARTITION BY aggregation_target,
                                             prop) as max_steps,
                               step_1_conversion_time ,
                               prop
        FROM
          (SELECT *,
                  if(latest_0 <= latest_1
                     AND latest_1 <= latest_0 + INTERVAL 14 DAY, 2, 1) AS steps ,
                  if(isNotNull(latest_1)
                     AND latest_1 <= latest_0 + INTERVAL 14 DAY, dateDiff('second', toDateTime(latest_0), toDateTime(latest_1)), NULL) step_1_conversion_time,
                  prop
           FROM
             (SELECT aggregation_target, timestamp, step_0,
                                                    latest_0,
                                                    step_1,
                                                    min(latest_1) over (PARTITION by aggregation_target,
                                                                                     prop
                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_1 ,
                                                                       if(has([[''], ['test_1'], ['test'], ['control'], ['unknown_3'], ['unknown_2'], ['unknown_1'], ['test_2']], prop), prop, ['Other']) as prop
              FROM
                (SELECT *,
                        if(notEmpty(arrayFilter(x -> notEmpty(x), prop_vals)), prop_vals, ['']) as prop
                 FROM
                   (SELECT e.timestamp as timestamp,
                           if(notEmpty(pdi.distinct_id), pdi.person_id, e.person_id) as aggregation_target,
                           if(notEmpty(pdi.distinct_id), pdi.person_id, e.person_id) as person_id,
                           if(event = '$pageview', 1, 0) as step_0,
                           if(step_0 = 1, timestamp, null) as latest_0,
                           if(event = '$pageleave', 1, 0) as step_1,
                           if(step_1 = 1, timestamp, null) as latest_1,
                           array(replaceRegexpAll(JSONExtractRaw(properties, '$feature/a-b-test'), '^"|"$', '')) AS prop_basic,
                           prop_basic as prop,
                           argMinIf(prop, timestamp, notEmpty(arrayFilter(x -> notEmpty(x), prop))) over (PARTITION by aggregation_target) as prop_vals
                    FROM events e
                    LEFT OUTER JOIN
                      (SELECT distinct_id,
                              argMax(person_id, version) as person_id
                       FROM person_distinct_id2
                       WHERE team_id = 99999
                         AND distinct_id IN
                           (SELECT distinct_id
                            FROM events
                            WHERE team_id = 99999
                              AND event IN ['$pageleave', '$pageview']
                              AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
                              AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-06 00:00:00', 'UTC') )
                       GROUP BY distinct_id
                       HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
                    WHERE team_id = 99999
                      AND event IN ['$pageleave', '$pageview']
                      AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
                      AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-06 00:00:00', 'UTC')
                      AND (step_0 = 1
                           OR step_1 = 1) )))
           WHERE step_0 = 1 ))
     GROUP BY aggregation_target,
              steps,
              prop
     HAVING steps = max(max_steps))
  GROUP BY prop
  '''
# ---
# name: ClickhouseTestFunnelExperimentResults.test_experiment_flow_with_event_results_for_three_test_variants.2
  '''
  /* user_id:0 request:_snapshot_ */
  SELECT countIf(steps = 1) step_1,
         countIf(steps = 2) step_2,
         avg(step_1_average_conversion_time_inner) step_1_average_conversion_time,
         median(step_1_median_conversion_time_inner) step_1_median_conversion_time,
         prop
  FROM
    (SELECT aggregation_target,
            steps,
            avg(step_1_conversion_time) step_1_average_conversion_time_inner,
            median(step_1_conversion_time) step_1_median_conversion_time_inner ,
            prop
     FROM
       (SELECT aggregation_target,
               steps,
               max(steps) over (PARTITION BY aggregation_target,
                                             prop) as max_steps,
                               step_1_conversion_time ,
                               prop
        FROM
          (SELECT *,
                  if(latest_0 <= latest_1
                     AND latest_1 <= latest_0 + INTERVAL 14 DAY, 2, 1) AS steps ,
                  if(isNotNull(latest_1)
                     AND latest_1 <= latest_0 + INTERVAL 14 DAY, dateDiff('second', toDateTime(latest_0), toDateTime(latest_1)), NULL) step_1_conversion_time,
                  prop
           FROM
             (SELECT aggregation_target, timestamp, step_0,
                                                    latest_0,
                                                    step_1,
                                                    min(latest_1) over (PARTITION by aggregation_target,
                                                                                     prop
                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_1 ,
                                                                       if(has([[''], ['test_1'], ['test'], ['control'], ['unknown_3'], ['unknown_2'], ['unknown_1'], ['test_2']], prop), prop, ['Other']) as prop
              FROM
                (SELECT *,
                        if(notEmpty(arrayFilter(x -> notEmpty(x), prop_vals)), prop_vals, ['']) as prop
                 FROM
                   (SELECT e.timestamp as timestamp,
                           if(notEmpty(pdi.distinct_id), pdi.person_id, e.person_id) as aggregation_target,
                           if(notEmpty(pdi.distinct_id), pdi.person_id, e.person_id) as person_id,
                           if(event = '$pageview', 1, 0) as step_0,
                           if(step_0 = 1, timestamp, null) as latest_0,
                           if(event = '$pageleave', 1, 0) as step_1,
                           if(step_1 = 1, timestamp, null) as latest_1,
                           array(replaceRegexpAll(JSONExtractRaw(properties, '$feature/a-b-test'), '^"|"$', '')) AS prop_basic,
                           prop_basic as prop,
                           argMinIf(prop, timestamp, notEmpty(arrayFilter(x -> notEmpty(x), prop))) over (PARTITION by aggregation_target) as prop_vals
                    FROM events e
                    LEFT OUTER JOIN
                      (SELECT distinct_id,
                              argMax(person_id, version) as person_id
                       FROM person_distinct_id2
                       WHERE team_id = 99999
                         AND distinct_id IN
                           (SELECT distinct_id
                            FROM events
                            WHERE team_id = 99999
                              AND event IN ['$pageleave', '$pageview']
                              AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
                              AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-06 00:00:00', 'UTC') )
                       GROUP BY distinct_id
                       HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
                    WHERE team_id = 99999
                      AND event IN ['$pageleave', '$pageview']
                      AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
                      AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-06 00:00:00', 'UTC')
                      AND (step_0 = 1
                           OR step_1 = 1) )))
           WHERE step_0 = 1 ))
     GROUP BY aggregation_target,
              steps,
              prop
     HAVING steps = max(max_steps))
  GROUP BY prop
  '''
# ---
# name: ClickhouseTestFunnelExperimentResults.test_experiment_flow_with_event_results_with_hogql_aggregation
  '''
  /* user_id:0 request:_snapshot_ */
  SELECT array(replaceRegexpAll(JSONExtractRaw(properties, '$feature/a-b-test'), '^"|"$', '')) AS value,
         count(*) as count
  FROM events e
  WHERE team_id = 99999
    AND event IN ['$pageleave', '$pageview']
    AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
    AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-06 00:00:00', 'UTC')
  GROUP BY value
  ORDER BY count DESC, value DESC
  LIMIT 26
  OFFSET 0
  '''
# ---
# name: ClickhouseTestFunnelExperimentResults.test_experiment_flow_with_event_results_with_hogql_aggregation.1
  '''
  /* user_id:0 request:_snapshot_ */
  SELECT countIf(steps = 1) step_1,
         countIf(steps = 2) step_2,
         avg(step_1_average_conversion_time_inner) step_1_average_conversion_time,
         median(step_1_median_conversion_time_inner) step_1_median_conversion_time,
         prop
  FROM
    (SELECT aggregation_target,
            steps,
            avg(step_1_conversion_time) step_1_average_conversion_time_inner,
            median(step_1_conversion_time) step_1_median_conversion_time_inner ,
            prop
     FROM
       (SELECT aggregation_target,
               steps,
               max(steps) over (PARTITION BY aggregation_target,
                                             prop) as max_steps,
                               step_1_conversion_time ,
                               prop
        FROM
          (SELECT *,
                  if(latest_0 <= latest_1
                     AND latest_1 <= latest_0 + INTERVAL 14 DAY, 2, 1) AS steps ,
                  if(isNotNull(latest_1)
                     AND latest_1 <= latest_0 + INTERVAL 14 DAY, dateDiff('second', toDateTime(latest_0), toDateTime(latest_1)), NULL) step_1_conversion_time,
                  prop
           FROM
             (SELECT aggregation_target, timestamp, step_0,
                                                    latest_0,
                                                    step_1,
                                                    min(latest_1) over (PARTITION by aggregation_target,
                                                                                     prop
                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_1 ,
                                                                       if(has([['test'], ['control'], ['']], prop), prop, ['Other']) as prop
              FROM
                (SELECT *,
                        if(notEmpty(arrayFilter(x -> notEmpty(x), prop_vals)), prop_vals, ['']) as prop
                 FROM
                   (SELECT e.timestamp as timestamp,
                           replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(properties, '$account_id'), ''), 'null'), '^"|"$', '') as aggregation_target,
                           if(notEmpty(pdi.distinct_id), pdi.person_id, e.person_id) as person_id,
                           if(event = '$pageview', 1, 0) as step_0,
                           if(step_0 = 1, timestamp, null) as latest_0,
                           if(event = '$pageleave', 1, 0) as step_1,
                           if(step_1 = 1, timestamp, null) as latest_1,
                           array(replaceRegexpAll(JSONExtractRaw(properties, '$feature/a-b-test'), '^"|"$', '')) AS prop_basic,
                           prop_basic as prop,
                           argMinIf(prop, timestamp, notEmpty(arrayFilter(x -> notEmpty(x), prop))) over (PARTITION by aggregation_target) as prop_vals
                    FROM events e
                    LEFT OUTER JOIN
                      (SELECT distinct_id,
                              argMax(person_id, version) as person_id
                       FROM person_distinct_id2
                       WHERE team_id = 99999
                         AND distinct_id IN
                           (SELECT distinct_id
                            FROM events
                            WHERE team_id = 99999
                              AND event IN ['$pageleave', '$pageview']
                              AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
                              AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-06 00:00:00', 'UTC') )
                       GROUP BY distinct_id
                       HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
                    WHERE team_id = 99999
                      AND event IN ['$pageleave', '$pageview']
                      AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
                      AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-06 00:00:00', 'UTC')
                      AND (step_0 = 1
                           OR step_1 = 1) )))
           WHERE step_0 = 1 ))
     GROUP BY aggregation_target,
              steps,
              prop
     HAVING steps = max(max_steps))
  GROUP BY prop
  '''
# ---
# name: ClickhouseTestFunnelExperimentResults.test_experiment_flow_with_event_results_with_hogql_aggregation.2
  '''
  /* user_id:0 request:_snapshot_ */
  SELECT countIf(steps = 1) step_1,
         countIf(steps = 2) step_2,
         avg(step_1_average_conversion_time_inner) step_1_average_conversion_time,
         median(step_1_median_conversion_time_inner) step_1_median_conversion_time,
         prop
  FROM
    (SELECT aggregation_target,
            steps,
            avg(step_1_conversion_time) step_1_average_conversion_time_inner,
            median(step_1_conversion_time) step_1_median_conversion_time_inner ,
            prop
     FROM
       (SELECT aggregation_target,
               steps,
               max(steps) over (PARTITION BY aggregation_target,
                                             prop) as max_steps,
                               step_1_conversion_time ,
                               prop
        FROM
          (SELECT *,
                  if(latest_0 <= latest_1
                     AND latest_1 <= latest_0 + INTERVAL 14 DAY, 2, 1) AS steps ,
                  if(isNotNull(latest_1)
                     AND latest_1 <= latest_0 + INTERVAL 14 DAY, dateDiff('second', toDateTime(latest_0), toDateTime(latest_1)), NULL) step_1_conversion_time,
                  prop
           FROM
             (SELECT aggregation_target, timestamp, step_0,
                                                    latest_0,
                                                    step_1,
                                                    min(latest_1) over (PARTITION by aggregation_target,
                                                                                     prop
                                                                        ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) latest_1 ,
                                                                       if(has([['test'], ['control'], ['']], prop), prop, ['Other']) as prop
              FROM
                (SELECT *,
                        if(notEmpty(arrayFilter(x -> notEmpty(x), prop_vals)), prop_vals, ['']) as prop
                 FROM
                   (SELECT e.timestamp as timestamp,
                           replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(properties, '$account_id'), ''), 'null'), '^"|"$', '') as aggregation_target,
                           if(notEmpty(pdi.distinct_id), pdi.person_id, e.person_id) as person_id,
                           if(event = '$pageview', 1, 0) as step_0,
                           if(step_0 = 1, timestamp, null) as latest_0,
                           if(event = '$pageleave', 1, 0) as step_1,
                           if(step_1 = 1, timestamp, null) as latest_1,
                           array(replaceRegexpAll(JSONExtractRaw(properties, '$feature/a-b-test'), '^"|"$', '')) AS prop_basic,
                           prop_basic as prop,
                           argMinIf(prop, timestamp, notEmpty(arrayFilter(x -> notEmpty(x), prop))) over (PARTITION by aggregation_target) as prop_vals
                    FROM events e
                    LEFT OUTER JOIN
                      (SELECT distinct_id,
                              argMax(person_id, version) as person_id
                       FROM person_distinct_id2
                       WHERE team_id = 99999
                         AND distinct_id IN
                           (SELECT distinct_id
                            FROM events
                            WHERE team_id = 99999
                              AND event IN ['$pageleave', '$pageview']
                              AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
                              AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-06 00:00:00', 'UTC') )
                       GROUP BY distinct_id
                       HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
                    WHERE team_id = 99999
                      AND event IN ['$pageleave', '$pageview']
                      AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
                      AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-06 00:00:00', 'UTC')
                      AND (step_0 = 1
                           OR step_1 = 1) )))
           WHERE step_0 = 1 ))
     GROUP BY aggregation_target,
              steps,
              prop
     HAVING steps = max(max_steps))
  GROUP BY prop
  '''
# ---
# name: ClickhouseTestTrendExperimentResults.test_experiment_flow_with_event_results
  '''
  /* user_id:0 request:_snapshot_ */
  SELECT replaceRegexpAll(JSONExtractRaw(properties, '$feature/a-b-test'), '^"|"$', '') AS value,
         count(*) as count
  FROM events e
  WHERE team_id = 99999
    AND event = '$pageview'
    AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
    AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-06 00:00:00', 'UTC')
    AND (((isNull(replaceRegexpAll(JSONExtractRaw(e.properties, 'exclude'), '^"|"$', ''))
           OR NOT JSONHas(e.properties, 'exclude')))
         AND (has(['control', 'test'], replaceRegexpAll(JSONExtractRaw(e.properties, '$feature/a-b-test'), '^"|"$', ''))))
  GROUP BY value
  ORDER BY count DESC, value DESC
  LIMIT 26
  OFFSET 0
  '''
# ---
# name: ClickhouseTestTrendExperimentResults.test_experiment_flow_with_event_results.1
  '''
  /* user_id:0 request:_snapshot_ */
  SELECT groupArray(day_start) as date,
         groupArray(count) AS total,
         breakdown_value
  FROM
    (SELECT SUM(total) as count,
            day_start,
            breakdown_value
     FROM
       (SELECT *
        FROM
          (SELECT toUInt16(0) AS total,
                  ticks.day_start as day_start,
                  breakdown_value
           FROM
             (SELECT toStartOfDay(toDateTime('2020-01-06 00:00:00', 'UTC')) - toIntervalDay(number) as day_start
              FROM numbers(6)
              UNION ALL SELECT toStartOfDay(toDateTime('2020-01-01 00:00:00', 'UTC')) as day_start) as ticks
           CROSS JOIN
             (SELECT breakdown_value
              FROM
                (SELECT ['test', 'control'] as breakdown_value) ARRAY
              JOIN breakdown_value) as sec
           ORDER BY breakdown_value,
                    day_start
           UNION ALL SELECT count(*) as total,
                            toStartOfDay(toTimeZone(toDateTime(timestamp, 'UTC'), 'UTC')) as day_start,
                            transform(ifNull(nullIf(replaceRegexpAll(JSONExtractRaw(properties, '$feature/a-b-test'), '^"|"$', ''), ''), '$$_posthog_breakdown_null_$$'), (['test', 'control']), (['test', 'control']), '$$_posthog_breakdown_other_$$') as breakdown_value
           FROM events e
           WHERE e.team_id = 99999
             AND event = '$pageview'
             AND (((isNull(replaceRegexpAll(JSONExtractRaw(e.properties, 'exclude'), '^"|"$', ''))
                    OR NOT JSONHas(e.properties, 'exclude')))
                  AND (has(['control', 'test'], replaceRegexpAll(JSONExtractRaw(e.properties, '$feature/a-b-test'), '^"|"$', ''))))
             AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
             AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-06 00:00:00', 'UTC')
           GROUP BY day_start,
                    breakdown_value))
     GROUP BY day_start,
              breakdown_value
     ORDER BY breakdown_value,
              day_start)
  GROUP BY breakdown_value
  ORDER BY breakdown_value
  '''
# ---
# name: ClickhouseTestTrendExperimentResults.test_experiment_flow_with_event_results.2
  '''
  /* user_id:0 request:_snapshot_ */
  SELECT replaceRegexpAll(JSONExtractRaw(properties, '$feature_flag_response'), '^"|"$', '') AS value,
         count(*) as count
  FROM events e
  WHERE team_id = 99999
    AND event = '$feature_flag_called'
    AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
    AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-06 00:00:00', 'UTC')
    AND (((isNull(replaceRegexpAll(JSONExtractRaw(e.properties, 'exclude'), '^"|"$', ''))
           OR NOT JSONHas(e.properties, 'exclude')))
         AND ((has(['control', 'test'], replaceRegexpAll(JSONExtractRaw(e.properties, '$feature_flag_response'), '^"|"$', '')))
              AND (has(['a-b-test'], replaceRegexpAll(JSONExtractRaw(e.properties, '$feature_flag'), '^"|"$', '')))))
  GROUP BY value
  ORDER BY count DESC, value DESC
  LIMIT 26
  OFFSET 0
  '''
# ---
# name: ClickhouseTestTrendExperimentResults.test_experiment_flow_with_event_results.3
  '''
  /* user_id:0 request:_snapshot_ */
  SELECT groupArray(day_start) as date,
         groupArray(count) AS total,
         breakdown_value
  FROM
    (SELECT SUM(total) as count,
            day_start,
            breakdown_value
     FROM
       (SELECT *
        FROM
          (SELECT toUInt16(0) AS total,
                  ticks.day_start as day_start,
                  breakdown_value
           FROM
             (SELECT toStartOfDay(toDateTime('2020-01-06 00:00:00', 'UTC')) - toIntervalDay(number) as day_start
              FROM numbers(6)
              UNION ALL SELECT toStartOfDay(toDateTime('2020-01-01 00:00:00', 'UTC')) as day_start) as ticks
           CROSS JOIN
             (SELECT breakdown_value
              FROM
                (SELECT ['control', 'test'] as breakdown_value) ARRAY
              JOIN breakdown_value) as sec
           ORDER BY breakdown_value,
                    day_start
           UNION ALL SELECT count(DISTINCT person_id) as total,
                            toStartOfDay(toTimeZone(toDateTime(timestamp, 'UTC'), 'UTC')) as day_start,
                            breakdown_value
           FROM
             (SELECT person_id,
                     min(timestamp) as timestamp,
                     breakdown_value
              FROM
                (SELECT pdi.person_id as person_id, timestamp, transform(ifNull(nullIf(replaceRegexpAll(JSONExtractRaw(properties, '$feature_flag_response'), '^"|"$', ''), ''), '$$_posthog_breakdown_null_$$'), (['control', 'test']), (['control', 'test']), '$$_posthog_breakdown_other_$$') as breakdown_value
                 FROM events e
                 INNER JOIN
                   (SELECT distinct_id,
                           argMax(person_id, version) as person_id
                    FROM person_distinct_id2
                    WHERE team_id = 99999
                    GROUP BY distinct_id
                    HAVING argMax(is_deleted, version) = 0) as pdi ON events.distinct_id = pdi.distinct_id
                 WHERE e.team_id = 99999
                   AND event = '$feature_flag_called'
                   AND (((isNull(replaceRegexpAll(JSONExtractRaw(e.properties, 'exclude'), '^"|"$', ''))
                          OR NOT JSONHas(e.properties, 'exclude')))
                        AND ((has(['control', 'test'], replaceRegexpAll(JSONExtractRaw(e.properties, '$feature_flag_response'), '^"|"$', '')))
                             AND (has(['a-b-test'], replaceRegexpAll(JSONExtractRaw(e.properties, '$feature_flag'), '^"|"$', '')))))
                   AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
                   AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-06 00:00:00', 'UTC') )
              GROUP BY person_id,
                       breakdown_value) AS pdi
           GROUP BY day_start,
                    breakdown_value))
     GROUP BY day_start,
              breakdown_value
     ORDER BY breakdown_value,
              day_start)
  GROUP BY breakdown_value
  ORDER BY breakdown_value
  '''
# ---
# name: ClickhouseTestTrendExperimentResults.test_experiment_flow_with_event_results.4
  '''
  /* user_id:0 request:_snapshot_ */
  SELECT groupArray(day_start) as date,
         groupArray(count) AS total,
         breakdown_value
  FROM
    (SELECT SUM(total) as count,
            day_start,
            breakdown_value
     FROM
       (SELECT *
        FROM
          (SELECT toUInt16(0) AS total,
                  ticks.day_start as day_start,
                  breakdown_value
           FROM
             (SELECT toStartOfDay(toDateTime('2020-01-06 00:00:00', 'UTC')) - toIntervalDay(number) as day_start
              FROM numbers(6)
              UNION ALL SELECT toStartOfDay(toDateTime('2020-01-01 00:00:00', 'UTC')) as day_start) as ticks
           CROSS JOIN
             (SELECT breakdown_value
              FROM
                (SELECT ['control', 'test'] as breakdown_value) ARRAY
              JOIN breakdown_value) as sec
           ORDER BY breakdown_value,
                    day_start
           UNION ALL SELECT count(DISTINCT person_id) as total,
                            toStartOfDay(toTimeZone(toDateTime(timestamp, 'UTC'), 'UTC')) as day_start,
                            breakdown_value
           FROM
             (SELECT person_id,
                     min(timestamp) as timestamp,
                     breakdown_value
              FROM
                (SELECT pdi.person_id as person_id, timestamp, transform(ifNull(nullIf(replaceRegexpAll(JSONExtractRaw(properties, '$feature_flag_response'), '^"|"$', ''), ''), '$$_posthog_breakdown_null_$$'), (['control', 'test']), (['control', 'test']), '$$_posthog_breakdown_other_$$') as breakdown_value
                 FROM events e
                 INNER JOIN
                   (SELECT distinct_id,
                           argMax(person_id, version) as person_id
                    FROM person_distinct_id2
                    WHERE team_id = 99999
                    GROUP BY distinct_id
                    HAVING argMax(is_deleted, version) = 0) as pdi ON events.distinct_id = pdi.distinct_id
                 WHERE e.team_id = 99999
                   AND event = '$feature_flag_called'
                   AND (((isNull(replaceRegexpAll(JSONExtractRaw(e.properties, 'exclude'), '^"|"$', ''))
                          OR NOT JSONHas(e.properties, 'exclude')))
                        AND ((has(['control', 'test'], replaceRegexpAll(JSONExtractRaw(e.properties, '$feature_flag_response'), '^"|"$', '')))
                             AND (has(['a-b-test'], replaceRegexpAll(JSONExtractRaw(e.properties, '$feature_flag'), '^"|"$', '')))))
                   AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
                   AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-06 00:00:00', 'UTC') )
              GROUP BY person_id,
                       breakdown_value) AS pdi
           GROUP BY day_start,
                    breakdown_value))
     GROUP BY day_start,
              breakdown_value
     ORDER BY breakdown_value,
              day_start)
  GROUP BY breakdown_value
  ORDER BY breakdown_value
  '''
# ---
# name: ClickhouseTestTrendExperimentResults.test_experiment_flow_with_event_results_for_three_test_variants
  '''
  /* user_id:0 request:_snapshot_ */
  SELECT replaceRegexpAll(JSONExtractRaw(properties, '$feature/a-b-test'), '^"|"$', '') AS value,
         count(*) as count
  FROM events e
  WHERE team_id = 99999
    AND event = '$pageview1'
    AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
    AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-06 00:00:00', 'UTC')
    AND (has(['control', 'test_1', 'test_2', 'test'], replaceRegexpAll(JSONExtractRaw(e.properties, '$feature/a-b-test'), '^"|"$', '')))
  GROUP BY value
  ORDER BY count DESC, value DESC
  LIMIT 26
  OFFSET 0
  '''
# ---
# name: ClickhouseTestTrendExperimentResults.test_experiment_flow_with_event_results_for_three_test_variants.1
  '''
  /* user_id:0 request:_snapshot_ */
  SELECT groupArray(day_start) as date,
         groupArray(count) AS total,
         breakdown_value
  FROM
    (SELECT SUM(total) as count,
            day_start,
            breakdown_value
     FROM
       (SELECT *
        FROM
          (SELECT toUInt16(0) AS total,
                  ticks.day_start as day_start,
                  breakdown_value
           FROM
             (SELECT toStartOfDay(toDateTime('2020-01-06 00:00:00', 'UTC')) - toIntervalDay(number) as day_start
              FROM numbers(6)
              UNION ALL SELECT toStartOfDay(toDateTime('2020-01-01 00:00:00', 'UTC')) as day_start) as ticks
           CROSS JOIN
             (SELECT breakdown_value
              FROM
                (SELECT ['control', 'test_1', 'test_2'] as breakdown_value) ARRAY
              JOIN breakdown_value) as sec
           ORDER BY breakdown_value,
                    day_start
           UNION ALL SELECT count(*) as total,
                            toStartOfDay(toTimeZone(toDateTime(timestamp, 'UTC'), 'UTC')) as day_start,
                            transform(ifNull(nullIf(replaceRegexpAll(JSONExtractRaw(properties, '$feature/a-b-test'), '^"|"$', ''), ''), '$$_posthog_breakdown_null_$$'), (['control', 'test_1', 'test_2']), (['control', 'test_1', 'test_2']), '$$_posthog_breakdown_other_$$') as breakdown_value
           FROM events e
           WHERE e.team_id = 99999
             AND event = '$pageview1'
             AND (has(['control', 'test_1', 'test_2', 'test'], replaceRegexpAll(JSONExtractRaw(e.properties, '$feature/a-b-test'), '^"|"$', '')))
             AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
             AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-06 00:00:00', 'UTC')
           GROUP BY day_start,
                    breakdown_value))
     GROUP BY day_start,
              breakdown_value
     ORDER BY breakdown_value,
              day_start)
  GROUP BY breakdown_value
  ORDER BY breakdown_value
  '''
# ---
# name: ClickhouseTestTrendExperimentResults.test_experiment_flow_with_event_results_for_three_test_variants.2
  '''
  /* user_id:0 request:_snapshot_ */
  SELECT replaceRegexpAll(JSONExtractRaw(properties, '$feature_flag_response'), '^"|"$', '') AS value,
         count(*) as count
  FROM events e
  WHERE team_id = 99999
    AND event = '$feature_flag_called'
    AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
    AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-06 00:00:00', 'UTC')
    AND ((has(['control', 'test_1', 'test_2', 'test'], replaceRegexpAll(JSONExtractRaw(e.properties, '$feature_flag_response'), '^"|"$', '')))
         AND (has(['a-b-test'], replaceRegexpAll(JSONExtractRaw(e.properties, '$feature_flag'), '^"|"$', ''))))
  GROUP BY value
  ORDER BY count DESC, value DESC
  LIMIT 26
  OFFSET 0
  '''
# ---
# name: ClickhouseTestTrendExperimentResults.test_experiment_flow_with_event_results_for_three_test_variants.3
  '''
  /* user_id:0 request:_snapshot_ */
  SELECT [now()] AS date,
         [0] AS total,
         '' AS breakdown_value
  LIMIT 0
  '''
# ---
# name: ClickhouseTestTrendExperimentResults.test_experiment_flow_with_event_results_for_three_test_variants.4
  '''
  /* user_id:0 request:_snapshot_ */
  SELECT [now()] AS date,
         [0] AS total,
         '' AS breakdown_value
  LIMIT 0
  '''
# ---
# name: ClickhouseTestTrendExperimentResults.test_experiment_flow_with_event_results_out_of_timerange_timezone
  '''
  /* user_id:0 request:_snapshot_ */
  SELECT replaceRegexpAll(JSONExtractRaw(properties, '$feature/a-b-test'), '^"|"$', '') AS value,
         count(*) as count
  FROM events e
  WHERE team_id = 99999
    AND event = '$pageview'
    AND toTimeZone(timestamp, 'US/Pacific') >= toDateTime('2020-01-01 02:10:00', 'US/Pacific')
    AND toTimeZone(timestamp, 'US/Pacific') <= toDateTime('2020-01-06 07:00:00', 'US/Pacific')
    AND (has(['control', 'test'], replaceRegexpAll(JSONExtractRaw(e.properties, '$feature/a-b-test'), '^"|"$', '')))
  GROUP BY value
  ORDER BY count DESC, value DESC
  LIMIT 26
  OFFSET 0
  '''
# ---
# name: ClickhouseTestTrendExperimentResults.test_experiment_flow_with_event_results_out_of_timerange_timezone.1
  '''
  /* user_id:0 request:_snapshot_ */
  SELECT groupArray(day_start) as date,
         groupArray(count) AS total,
         breakdown_value
  FROM
    (SELECT SUM(total) as count,
            day_start,
            breakdown_value
     FROM
       (SELECT *
        FROM
          (SELECT toUInt16(0) AS total,
                  ticks.day_start as day_start,
                  breakdown_value
           FROM
             (SELECT toStartOfDay(toDateTime('2020-01-06 07:00:00', 'US/Pacific')) - toIntervalDay(number) as day_start
              FROM numbers(6)
              UNION ALL SELECT toStartOfDay(toDateTime('2020-01-01 02:10:00', 'US/Pacific')) as day_start) as ticks
           CROSS JOIN
             (SELECT breakdown_value
              FROM
                (SELECT ['test', 'control'] as breakdown_value) ARRAY
              JOIN breakdown_value) as sec
           ORDER BY breakdown_value,
                    day_start
           UNION ALL SELECT count(*) as total,
                            toStartOfDay(toTimeZone(toDateTime(timestamp, 'UTC'), 'US/Pacific')) as day_start,
                            transform(ifNull(nullIf(replaceRegexpAll(JSONExtractRaw(properties, '$feature/a-b-test'), '^"|"$', ''), ''), '$$_posthog_breakdown_null_$$'), (['test', 'control']), (['test', 'control']), '$$_posthog_breakdown_other_$$') as breakdown_value
           FROM events e
           WHERE e.team_id = 99999
             AND event = '$pageview'
             AND (has(['control', 'test'], replaceRegexpAll(JSONExtractRaw(e.properties, '$feature/a-b-test'), '^"|"$', '')))
             AND toTimeZone(timestamp, 'US/Pacific') >= toDateTime('2020-01-01 02:10:00', 'US/Pacific')
             AND toTimeZone(timestamp, 'US/Pacific') <= toDateTime('2020-01-06 07:00:00', 'US/Pacific')
           GROUP BY day_start,
                    breakdown_value))
     GROUP BY day_start,
              breakdown_value
     ORDER BY breakdown_value,
              day_start)
  GROUP BY breakdown_value
  ORDER BY breakdown_value
  '''
# ---
# name: ClickhouseTestTrendExperimentResults.test_experiment_flow_with_event_results_out_of_timerange_timezone.2
  '''
  /* user_id:0 request:_snapshot_ */
  SELECT replaceRegexpAll(JSONExtractRaw(properties, '$feature_flag_response'), '^"|"$', '') AS value,
         count(*) as count
  FROM events e
  WHERE team_id = 99999
    AND event = '$feature_flag_called'
    AND toTimeZone(timestamp, 'US/Pacific') >= toDateTime('2020-01-01 02:10:00', 'US/Pacific')
    AND toTimeZone(timestamp, 'US/Pacific') <= toDateTime('2020-01-06 07:00:00', 'US/Pacific')
    AND ((has(['control', 'test'], replaceRegexpAll(JSONExtractRaw(e.properties, '$feature_flag_response'), '^"|"$', '')))
         AND (has(['a-b-test'], replaceRegexpAll(JSONExtractRaw(e.properties, '$feature_flag'), '^"|"$', ''))))
  GROUP BY value
  ORDER BY count DESC, value DESC
  LIMIT 26
  OFFSET 0
  '''
# ---
# name: ClickhouseTestTrendExperimentResults.test_experiment_flow_with_event_results_out_of_timerange_timezone.3
  '''
  /* user_id:0 request:_snapshot_ */
  SELECT groupArray(day_start) as date,
         groupArray(count) AS total,
         breakdown_value
  FROM
    (SELECT SUM(total) as count,
            day_start,
            breakdown_value
     FROM
       (SELECT *
        FROM
          (SELECT toUInt16(0) AS total,
                  ticks.day_start as day_start,
                  breakdown_value
           FROM
             (SELECT toStartOfDay(toDateTime('2020-01-06 07:00:00', 'US/Pacific')) - toIntervalDay(number) as day_start
              FROM numbers(6)
              UNION ALL SELECT toStartOfDay(toDateTime('2020-01-01 02:10:00', 'US/Pacific')) as day_start) as ticks
           CROSS JOIN
             (SELECT breakdown_value
              FROM
                (SELECT ['control', 'test'] as breakdown_value) ARRAY
              JOIN breakdown_value) as sec
           ORDER BY breakdown_value,
                    day_start
           UNION ALL SELECT count(DISTINCT person_id) as total,
                            toStartOfDay(toTimeZone(toDateTime(timestamp, 'UTC'), 'US/Pacific')) as day_start,
                            breakdown_value
           FROM
             (SELECT person_id,
                     min(timestamp) as timestamp,
                     breakdown_value
              FROM
                (SELECT pdi.person_id as person_id, timestamp, transform(ifNull(nullIf(replaceRegexpAll(JSONExtractRaw(properties, '$feature_flag_response'), '^"|"$', ''), ''), '$$_posthog_breakdown_null_$$'), (['control', 'test']), (['control', 'test']), '$$_posthog_breakdown_other_$$') as breakdown_value
                 FROM events e
                 INNER JOIN
                   (SELECT distinct_id,
                           argMax(person_id, version) as person_id
                    FROM person_distinct_id2
                    WHERE team_id = 99999
                    GROUP BY distinct_id
                    HAVING argMax(is_deleted, version) = 0) as pdi ON events.distinct_id = pdi.distinct_id
                 WHERE e.team_id = 99999
                   AND event = '$feature_flag_called'
                   AND ((has(['control', 'test'], replaceRegexpAll(JSONExtractRaw(e.properties, '$feature_flag_response'), '^"|"$', '')))
                        AND (has(['a-b-test'], replaceRegexpAll(JSONExtractRaw(e.properties, '$feature_flag'), '^"|"$', ''))))
                   AND toTimeZone(timestamp, 'US/Pacific') >= toDateTime('2020-01-01 02:10:00', 'US/Pacific')
                   AND toTimeZone(timestamp, 'US/Pacific') <= toDateTime('2020-01-06 07:00:00', 'US/Pacific') )
              GROUP BY person_id,
                       breakdown_value) AS pdi
           GROUP BY day_start,
                    breakdown_value))
     GROUP BY day_start,
              breakdown_value
     ORDER BY breakdown_value,
              day_start)
  GROUP BY breakdown_value
  ORDER BY breakdown_value
  '''
# ---
# name: ClickhouseTestTrendExperimentResults.test_experiment_flow_with_event_results_out_of_timerange_timezone.4
  '''
  /* user_id:0 request:_snapshot_ */
  SELECT groupArray(day_start) as date,
         groupArray(count) AS total,
         breakdown_value
  FROM
    (SELECT SUM(total) as count,
            day_start,
            breakdown_value
     FROM
       (SELECT *
        FROM
          (SELECT toUInt16(0) AS total,
                  ticks.day_start as day_start,
                  breakdown_value
           FROM
             (SELECT toStartOfDay(toDateTime('2020-01-06 07:00:00', 'US/Pacific')) - toIntervalDay(number) as day_start
              FROM numbers(6)
              UNION ALL SELECT toStartOfDay(toDateTime('2020-01-01 02:10:00', 'US/Pacific')) as day_start) as ticks
           CROSS JOIN
             (SELECT breakdown_value
              FROM
                (SELECT ['control', 'test'] as breakdown_value) ARRAY
              JOIN breakdown_value) as sec
           ORDER BY breakdown_value,
                    day_start
           UNION ALL SELECT count(DISTINCT person_id) as total,
                            toStartOfDay(toTimeZone(toDateTime(timestamp, 'UTC'), 'US/Pacific')) as day_start,
                            breakdown_value
           FROM
             (SELECT person_id,
                     min(timestamp) as timestamp,
                     breakdown_value
              FROM
                (SELECT pdi.person_id as person_id, timestamp, transform(ifNull(nullIf(replaceRegexpAll(JSONExtractRaw(properties, '$feature_flag_response'), '^"|"$', ''), ''), '$$_posthog_breakdown_null_$$'), (['control', 'test']), (['control', 'test']), '$$_posthog_breakdown_other_$$') as breakdown_value
                 FROM events e
                 INNER JOIN
                   (SELECT distinct_id,
                           argMax(person_id, version) as person_id
                    FROM person_distinct_id2
                    WHERE team_id = 99999
                    GROUP BY distinct_id
                    HAVING argMax(is_deleted, version) = 0) as pdi ON events.distinct_id = pdi.distinct_id
                 WHERE e.team_id = 99999
                   AND event = '$feature_flag_called'
                   AND ((has(['control', 'test'], replaceRegexpAll(JSONExtractRaw(e.properties, '$feature_flag_response'), '^"|"$', '')))
                        AND (has(['a-b-test'], replaceRegexpAll(JSONExtractRaw(e.properties, '$feature_flag'), '^"|"$', ''))))
                   AND toTimeZone(timestamp, 'US/Pacific') >= toDateTime('2020-01-01 02:10:00', 'US/Pacific')
                   AND toTimeZone(timestamp, 'US/Pacific') <= toDateTime('2020-01-06 07:00:00', 'US/Pacific') )
              GROUP BY person_id,
                       breakdown_value) AS pdi
           GROUP BY day_start,
                    breakdown_value))
     GROUP BY day_start,
              breakdown_value
     ORDER BY breakdown_value,
              day_start)
  GROUP BY breakdown_value
  ORDER BY breakdown_value
  '''
# ---
# name: ClickhouseTestTrendExperimentResults.test_experiment_flow_with_event_results_with_hogql_filter
  '''
  /* user_id:0 request:_snapshot_ */
  SELECT replaceRegexpAll(JSONExtractRaw(properties, '$feature/a-b-test'), '^"|"$', '') AS value,
         count(*) as count
  FROM events e
  WHERE team_id = 99999
    AND event = '$pageview'
    AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
    AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-06 00:00:00', 'UTC')
    AND ((has(['control', 'test'], replaceRegexpAll(JSONExtractRaw(e.properties, '$feature/a-b-test'), '^"|"$', '')))
         AND (ifNull(ilike(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(properties, 'hogql'), ''), 'null'), '^"|"$', ''), 'true'), 0)))
  GROUP BY value
  ORDER BY count DESC, value DESC
  LIMIT 26
  OFFSET 0
  '''
# ---
# name: ClickhouseTestTrendExperimentResults.test_experiment_flow_with_event_results_with_hogql_filter.1
  '''
  /* user_id:0 request:_snapshot_ */
  SELECT groupArray(day_start) as date,
         groupArray(count) AS total,
         breakdown_value
  FROM
    (SELECT SUM(total) as count,
            day_start,
            breakdown_value
     FROM
       (SELECT *
        FROM
          (SELECT toUInt16(0) AS total,
                  ticks.day_start as day_start,
                  breakdown_value
           FROM
             (SELECT toStartOfDay(toDateTime('2020-01-06 00:00:00', 'UTC')) - toIntervalDay(number) as day_start
              FROM numbers(6)
              UNION ALL SELECT toStartOfDay(toDateTime('2020-01-01 00:00:00', 'UTC')) as day_start) as ticks
           CROSS JOIN
             (SELECT breakdown_value
              FROM
                (SELECT ['test', 'control'] as breakdown_value) ARRAY
              JOIN breakdown_value) as sec
           ORDER BY breakdown_value,
                    day_start
           UNION ALL SELECT count(*) as total,
                            toStartOfDay(toTimeZone(toDateTime(timestamp, 'UTC'), 'UTC')) as day_start,
                            transform(ifNull(nullIf(replaceRegexpAll(JSONExtractRaw(properties, '$feature/a-b-test'), '^"|"$', ''), ''), '$$_posthog_breakdown_null_$$'), (['test', 'control']), (['test', 'control']), '$$_posthog_breakdown_other_$$') as breakdown_value
           FROM events e
           WHERE e.team_id = 99999
             AND event = '$pageview'
             AND ((has(['control', 'test'], replaceRegexpAll(JSONExtractRaw(e.properties, '$feature/a-b-test'), '^"|"$', '')))
                  AND (ifNull(ilike(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(properties, 'hogql'), ''), 'null'), '^"|"$', ''), 'true'), 0)))
             AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
             AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-06 00:00:00', 'UTC')
           GROUP BY day_start,
                    breakdown_value))
     GROUP BY day_start,
              breakdown_value
     ORDER BY breakdown_value,
              day_start)
  GROUP BY breakdown_value
  ORDER BY breakdown_value
  '''
# ---
# name: ClickhouseTestTrendExperimentResults.test_experiment_flow_with_event_results_with_hogql_filter.2
  '''
  /* user_id:0 request:_snapshot_ */
  SELECT replaceRegexpAll(JSONExtractRaw(properties, '$feature_flag_response'), '^"|"$', '') AS value,
         count(*) as count
  FROM events e
  WHERE team_id = 99999
    AND event = '$feature_flag_called'
    AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
    AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-06 00:00:00', 'UTC')
    AND ((has(['control', 'test'], replaceRegexpAll(JSONExtractRaw(e.properties, '$feature_flag_response'), '^"|"$', '')))
         AND (has(['a-b-test'], replaceRegexpAll(JSONExtractRaw(e.properties, '$feature_flag'), '^"|"$', ''))))
  GROUP BY value
  ORDER BY count DESC, value DESC
  LIMIT 26
  OFFSET 0
  '''
# ---
# name: ClickhouseTestTrendExperimentResults.test_experiment_flow_with_event_results_with_hogql_filter.3
  '''
  /* user_id:0 request:_snapshot_ */
  SELECT groupArray(day_start) as date,
         groupArray(count) AS total,
         breakdown_value
  FROM
    (SELECT SUM(total) as count,
            day_start,
            breakdown_value
     FROM
       (SELECT *
        FROM
          (SELECT toUInt16(0) AS total,
                  ticks.day_start as day_start,
                  breakdown_value
           FROM
             (SELECT toStartOfDay(toDateTime('2020-01-06 00:00:00', 'UTC')) - toIntervalDay(number) as day_start
              FROM numbers(6)
              UNION ALL SELECT toStartOfDay(toDateTime('2020-01-01 00:00:00', 'UTC')) as day_start) as ticks
           CROSS JOIN
             (SELECT breakdown_value
              FROM
                (SELECT ['control', 'test'] as breakdown_value) ARRAY
              JOIN breakdown_value) as sec
           ORDER BY breakdown_value,
                    day_start
           UNION ALL SELECT count(DISTINCT person_id) as total,
                            toStartOfDay(toTimeZone(toDateTime(timestamp, 'UTC'), 'UTC')) as day_start,
                            breakdown_value
           FROM
             (SELECT person_id,
                     min(timestamp) as timestamp,
                     breakdown_value
              FROM
                (SELECT pdi.person_id as person_id, timestamp, transform(ifNull(nullIf(replaceRegexpAll(JSONExtractRaw(properties, '$feature_flag_response'), '^"|"$', ''), ''), '$$_posthog_breakdown_null_$$'), (['control', 'test']), (['control', 'test']), '$$_posthog_breakdown_other_$$') as breakdown_value
                 FROM events e
                 INNER JOIN
                   (SELECT distinct_id,
                           argMax(person_id, version) as person_id
                    FROM person_distinct_id2
                    WHERE team_id = 99999
                    GROUP BY distinct_id
                    HAVING argMax(is_deleted, version) = 0) as pdi ON events.distinct_id = pdi.distinct_id
                 WHERE e.team_id = 99999
                   AND event = '$feature_flag_called'
                   AND ((has(['control', 'test'], replaceRegexpAll(JSONExtractRaw(e.properties, '$feature_flag_response'), '^"|"$', '')))
                        AND (has(['a-b-test'], replaceRegexpAll(JSONExtractRaw(e.properties, '$feature_flag'), '^"|"$', ''))))
                   AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
                   AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-06 00:00:00', 'UTC') )
              GROUP BY person_id,
                       breakdown_value) AS pdi
           GROUP BY day_start,
                    breakdown_value))
     GROUP BY day_start,
              breakdown_value
     ORDER BY breakdown_value,
              day_start)
  GROUP BY breakdown_value
  ORDER BY breakdown_value
  '''
# ---
# name: ClickhouseTestTrendExperimentResults.test_experiment_flow_with_event_results_with_hogql_filter.4
  '''
  /* user_id:0 request:_snapshot_ */
  SELECT groupArray(day_start) as date,
         groupArray(count) AS total,
         breakdown_value
  FROM
    (SELECT SUM(total) as count,
            day_start,
            breakdown_value
     FROM
       (SELECT *
        FROM
          (SELECT toUInt16(0) AS total,
                  ticks.day_start as day_start,
                  breakdown_value
           FROM
             (SELECT toStartOfDay(toDateTime('2020-01-06 00:00:00', 'UTC')) - toIntervalDay(number) as day_start
              FROM numbers(6)
              UNION ALL SELECT toStartOfDay(toDateTime('2020-01-01 00:00:00', 'UTC')) as day_start) as ticks
           CROSS JOIN
             (SELECT breakdown_value
              FROM
                (SELECT ['control', 'test'] as breakdown_value) ARRAY
              JOIN breakdown_value) as sec
           ORDER BY breakdown_value,
                    day_start
           UNION ALL SELECT count(DISTINCT person_id) as total,
                            toStartOfDay(toTimeZone(toDateTime(timestamp, 'UTC'), 'UTC')) as day_start,
                            breakdown_value
           FROM
             (SELECT person_id,
                     min(timestamp) as timestamp,
                     breakdown_value
              FROM
                (SELECT pdi.person_id as person_id, timestamp, transform(ifNull(nullIf(replaceRegexpAll(JSONExtractRaw(properties, '$feature_flag_response'), '^"|"$', ''), ''), '$$_posthog_breakdown_null_$$'), (['control', 'test']), (['control', 'test']), '$$_posthog_breakdown_other_$$') as breakdown_value
                 FROM events e
                 INNER JOIN
                   (SELECT distinct_id,
                           argMax(person_id, version) as person_id
                    FROM person_distinct_id2
                    WHERE team_id = 99999
                    GROUP BY distinct_id
                    HAVING argMax(is_deleted, version) = 0) as pdi ON events.distinct_id = pdi.distinct_id
                 WHERE e.team_id = 99999
                   AND event = '$feature_flag_called'
                   AND ((has(['control', 'test'], replaceRegexpAll(JSONExtractRaw(e.properties, '$feature_flag_response'), '^"|"$', '')))
                        AND (has(['a-b-test'], replaceRegexpAll(JSONExtractRaw(e.properties, '$feature_flag'), '^"|"$', ''))))
                   AND toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')
                   AND toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-06 00:00:00', 'UTC') )
              GROUP BY person_id,
                       breakdown_value) AS pdi
           GROUP BY day_start,
                    breakdown_value))
     GROUP BY day_start,
              breakdown_value
     ORDER BY breakdown_value,
              day_start)
  GROUP BY breakdown_value
  ORDER BY breakdown_value
  '''
# ---
# name: TestExperimentAuxiliaryEndpoints.test_create_exposure_cohort_for_experiment_with_custom_action_filters_exposure
  '''
  /* cohort_calculation: */
  INSERT INTO cohortpeople
  SELECT id,
         99999 as cohort_id,
         99999 as team_id,
         1 AS sign,
         1 AS version
  FROM
    (SELECT id
     FROM person
     WHERE team_id = 99999
       AND id IN
         (SELECT id
          FROM person
          WHERE team_id = 99999
            AND ((has(['http://example.com'], replaceRegexpAll(JSONExtractRaw(properties, '$pageview'), '^"|"$', '')))) )
     GROUP BY id
     HAVING max(is_deleted) = 0
     AND ((has(['http://example.com'], replaceRegexpAll(JSONExtractRaw(argMax(person.properties, version), '$pageview'), '^"|"$', '')))) SETTINGS optimize_aggregation_in_order = 1) as person
  UNION ALL
  SELECT person_id,
         cohort_id,
         team_id,
         -1,
         version
  FROM cohortpeople
  WHERE team_id = 99999
    AND cohort_id = 99999
    AND version < 1
    AND sign = 1 SETTINGS optimize_aggregation_in_order = 1,
                          join_algorithm = 'auto'
  '''
# ---
# name: TestExperimentAuxiliaryEndpoints.test_create_exposure_cohort_for_experiment_with_custom_action_filters_exposure.1
  '''
  /* cohort_calculation: */
  INSERT INTO cohortpeople
  SELECT id,
         99999 as cohort_id,
         99999 as team_id,
         -1 AS sign,
         0 AS version
  FROM (
          (SELECT persons.id AS id
           FROM
             (SELECT argMax(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, '$pageview'), ''), 'null'), '^"|"$', ''), person.version) AS `properties___$pageview`,
                     person.id AS id
              FROM person
              WHERE and(equals(person.team_id, 99999), in(id,
                                                            (SELECT where_optimization.id AS id
                                                             FROM person AS where_optimization
                                                             WHERE and(equals(where_optimization.team_id, 99999), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(where_optimization.properties, '$pageview'), ''), 'null'), '^"|"$', ''), 'http://example.com'), 0)))))
              GROUP BY person.id
              HAVING and(ifNull(equals(argMax(person.is_deleted, person.version), 0), 0), ifNull(less(argMax(toTimeZone(person.created_at, 'UTC'), person.version), plus(now64(6, 'UTC'), toIntervalDay(1))), 0))) AS persons
           WHERE ifNull(equals(persons.`properties___$pageview`, 'http://example.com'), 0)
           ORDER BY persons.id ASC
           LIMIT 100 SETTINGS optimize_aggregation_in_order=1,
                              join_algorithm='auto')) as person SETTINGS optimize_aggregation_in_order = 1,
                                                                         join_algorithm = 'auto'
  '''
# ---
# name: TestExperimentAuxiliaryEndpoints.test_create_exposure_cohort_for_experiment_with_custom_action_filters_exposure.2
  '''
  /* user_id:0 cohort_calculation:posthog.tasks.calculate_cohort.calculate_cohort_ch */
  INSERT INTO cohortpeople
  SELECT id,
         99999 as cohort_id,
         99999 as team_id,
         1 AS sign,
         1 AS version
  FROM
    (SELECT behavior_query.person_id AS id
     FROM
       (SELECT pdi.person_id AS person_id,
               countIf(timestamp > 'explicit_timestamp'
                       AND timestamp < now()
                       AND ((event = 'insight viewed'
                             AND (has(['RETENTION'], replaceRegexpAll(JSONExtractRaw(properties, 'insight'), '^"|"$', ''))
                                  AND distinct_id IN
                                    (SELECT distinct_id
                                     FROM
                                       (SELECT distinct_id, argMax(person_id, version) as person_id
                                        FROM person_distinct_id2
                                        WHERE team_id = 99999
                                        GROUP BY distinct_id
                                        HAVING argMax(is_deleted, version) = 0)
                                     WHERE person_id IN
                                         (SELECT id
                                          FROM person
                                          WHERE team_id = 99999
                                            AND id IN
                                              (SELECT id
                                               FROM person
                                               WHERE team_id = 99999
                                                 AND ((has(['http://example.com'], replaceRegexpAll(JSONExtractRaw(properties, '$pageview'), '^"|"$', '')))) )
                                          GROUP BY id
                                          HAVING max(is_deleted) = 0
                                          AND ((has(['http://example.com'], replaceRegexpAll(JSONExtractRaw(argMax(person.properties, version), '$pageview'), '^"|"$', '')))) SETTINGS optimize_aggregation_in_order = 1) )))
                            OR (event = 'insight viewed'
                                AND (toFloat64OrNull(replaceRegexpAll(replaceRegexpAll(replaceRegexpAll(JSONExtractRaw(properties, 'filters_count'), '^"|"$', ''), ' ', ''), '^"|"$', '')) > '1'))
                            OR (match(replaceRegexpAll(JSONExtractRaw(properties, '$current_url'), '^"|"$', ''), '/123')
                                AND event = '$autocapture'))
                       AND (has(['bonk'], replaceRegexpAll(JSONExtractRaw(properties, 'bonk'), '^"|"$', ''))
                            AND ifNull(in(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(properties, '$current_url'), ''), 'null'), '^"|"$', ''), tuple('x', 'y')), 0))) > 0 AS performed_event_condition_X_level_level_0_level_0_0
        FROM events e
        LEFT OUTER JOIN
          (SELECT distinct_id,
                  argMax(person_id, version) as person_id
           FROM person_distinct_id2
           WHERE team_id = 99999
           GROUP BY distinct_id
           HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
        WHERE team_id = 99999
          AND event IN ['insight viewed', 'insight viewed', '$autocapture']
          AND timestamp <= now()
          AND timestamp >= now() - INTERVAL 6 day
        GROUP BY person_id) behavior_query
     WHERE 1 = 1
       AND (((performed_event_condition_X_level_level_0_level_0_0))) SETTINGS optimize_aggregation_in_order = 1,
                                                                              join_algorithm = 'auto' ) as person
  UNION ALL
  SELECT person_id,
         cohort_id,
         team_id,
         -1,
         version
  FROM cohortpeople
  WHERE team_id = 99999
    AND cohort_id = 99999
    AND version < 1
    AND sign = 1 SETTINGS optimize_aggregation_in_order = 1,
                          join_algorithm = 'auto'
  '''
# ---
# name: TestExperimentAuxiliaryEndpoints.test_create_exposure_cohort_for_experiment_with_custom_action_filters_exposure.3
  '''
  /* user_id:0 cohort_calculation: */
  INSERT INTO cohortpeople
  SELECT id,
         99999 as cohort_id,
         99999 as team_id,
         -1 AS sign,
         0 AS version
  FROM (
          (SELECT source.id AS id
           FROM
             (SELECT actor_id AS actor_id,
                     count() AS event_count,
                     groupUniqArray(distinct_id) AS event_distinct_ids,
                     actor_id AS id
              FROM
                (SELECT if(not(empty(e__override.distinct_id)), e__override.person_id, e.person_id) AS actor_id,
                        toTimeZone(e.timestamp, 'UTC') AS timestamp,
                        e.uuid AS uuid,
                        e.distinct_id AS distinct_id
                 FROM events AS e
                 LEFT OUTER JOIN
                   (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                           person_distinct_id_overrides.distinct_id AS distinct_id
                    FROM person_distinct_id_overrides
                    WHERE equals(person_distinct_id_overrides.team_id, 99999)
                    GROUP BY person_distinct_id_overrides.distinct_id
                    HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS e__override ON equals(e.distinct_id, e__override.distinct_id)
                 WHERE and(equals(e.team_id, 99999), and(ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, 'bonk'), ''), 'null'), '^"|"$', ''), 'bonk'), 0), ifNull(in(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$current_url'), ''), 'null'), '^"|"$', ''), tuple('x', 'y')), 0)), greaterOrEquals(timestamp, toDateTime64('2025-01-02 21:38:36.820637', 6, 'UTC')), lessOrEquals(timestamp, toDateTime64('2025-01-07 23:59:59.999999', 6, 'UTC')), or(and(equals(e.event, 'insight viewed'), and(ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, 'insight'), ''), 'null'), '^"|"$', ''), 'RETENTION'), 0), ifNull(in(if(not(empty(e__override.distinct_id)), e__override.person_id, e.person_id),
cohortpeople.person_id AS person_id
cohortpeople
and(equals(cohortpeople.team_id, 99999), equals(cohortpeople.cohort_id, 99999), equals(cohortpeople.version, 1)))), 0))), and(equals(e.event, 'insight viewed'), ifNull(greater(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, 'filters_count'), ''), 'null'), '^"|"$', ''), '1'), 0)), and(equals(e.event, '$autocapture'), ifNull(match(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$current_url'), ''), 'null'), '^"|"$', ''), '/123'), isNull(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$current_url'), ''), 'null'), '^"|"$', ''))
and isNull('/123'))))))
              GROUP BY actor_id) AS source
           ORDER BY source.id ASC
           LIMIT 100 SETTINGS optimize_aggregation_in_order=1,
                              join_algorithm='auto')) as person SETTINGS optimize_aggregation_in_order = 1,
                                                                         join_algorithm = 'auto'
  '''
# ---
