# name: TestCohort.test_cohortpeople_basic
  '
  
  INSERT INTO cohortpeople
  SELECT id,
         2 as cohort_id,
         2 as team_id,
         1 AS sign,
         0 AS version
  FROM
    (SELECT id
     FROM person
     WHERE team_id = 2
       AND id IN
         (SELECT id
          FROM person
          WHERE team_id = 2
            AND ((((has(['something'], replaceRegexpAll(JSONExtractRaw(properties, '$some_prop'), '^"|"$', ''))))
                  AND ((has(['something'], replaceRegexpAll(JSONExtractRaw(properties, '$another_prop'), '^"|"$', '')))))) )
     GROUP BY id
     HAVING max(is_deleted) = 0
     AND ((((has(['something'], replaceRegexpAll(JSONExtractRaw(argMax(person.properties, version), '$some_prop'), '^"|"$', ''))))
           AND ((has(['something'], replaceRegexpAll(JSONExtractRaw(argMax(person.properties, version), '$another_prop'), '^"|"$', '')))))) SETTINGS optimize_aggregation_in_order = 1) as person
  UNION ALL
  SELECT person_id,
         cohort_id,
         team_id,
         -1,
         version
  FROM cohortpeople
  WHERE team_id = 2
    AND cohort_id = 2
    AND version < 0
    AND sign = 1
  '
---
# name: TestCohort.test_cohortpeople_with_not_in_cohort_operator
  '
  
  INSERT INTO cohortpeople
  SELECT id,
         2 as cohort_id,
         2 as team_id,
         1 AS sign,
         0 AS version
  FROM
    (SELECT id
     FROM person
     WHERE team_id = 2
       AND id IN
         (SELECT id
          FROM person
          WHERE team_id = 2
            AND ((has(['something1'], replaceRegexpAll(JSONExtractRaw(properties, '$some_prop'), '^"|"$', '')))) )
     GROUP BY id
     HAVING max(is_deleted) = 0
     AND ((has(['something1'], replaceRegexpAll(JSONExtractRaw(argMax(person.properties, version), '$some_prop'), '^"|"$', '')))) SETTINGS optimize_aggregation_in_order = 1) as person
  UNION ALL
  SELECT person_id,
         cohort_id,
         team_id,
         -1,
         version
  FROM cohortpeople
  WHERE team_id = 2
    AND cohort_id = 2
    AND version < 0
    AND sign = 1
  '
---
# name: TestCohort.test_cohortpeople_with_not_in_cohort_operator.1
  '
  
  INSERT INTO cohortpeople
  SELECT id,
         2 as cohort_id,
         2 as team_id,
         1 AS sign,
         0 AS version
  FROM
    (SELECT person.person_id AS id
     FROM
       (SELECT pdi.person_id AS person_id,
               countIf(timestamp > now() - INTERVAL 2 year
                       AND timestamp < now()
                       AND event = '$pageview') > 0 AS performed_event_condition_15_level_level_0_level_0_level_0_0
        FROM events e
        INNER JOIN
          (SELECT distinct_id,
                  argMax(person_id, version) as person_id
           FROM person_distinct_id2
           WHERE team_id = 2
           GROUP BY distinct_id
           HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
        WHERE team_id = 2
          AND event IN ['$pageview']
          AND timestamp <= now()
          AND timestamp >= now() - INTERVAL 2 year
        GROUP BY person_id) behavior_query
     INNER JOIN
       (SELECT *,
               id AS person_id
        FROM
          (SELECT id
           FROM person
           WHERE team_id = 2
             AND id IN
               (SELECT id
                FROM person
                WHERE team_id = 2
                  AND (((((NOT has(['something1'], replaceRegexpAll(JSONExtractRaw(properties, '$some_prop'), '^"|"$', ''))))))) )
           GROUP BY id
           HAVING max(is_deleted) = 0
           AND (((((NOT has(['something1'], replaceRegexpAll(JSONExtractRaw(argMax(person.properties, version), '$some_prop'), '^"|"$', ''))))))) SETTINGS optimize_aggregation_in_order = 1)) person ON person.person_id = behavior_query.person_id
     WHERE 1 = 1
       AND ((((performed_event_condition_15_level_level_0_level_0_level_0_0)))) ) as person
  UNION ALL
  SELECT person_id,
         cohort_id,
         team_id,
         -1,
         version
  FROM cohortpeople
  WHERE team_id = 2
    AND cohort_id = 2
    AND version < 0
    AND sign = 1
  '
---
# name: TestCohort.test_cohortpeople_with_not_in_cohort_operator_and_no_precalculation
  '
  SELECT uuid,
         distinct_id
  FROM events
  WHERE team_id = 2
    AND (distinct_id IN
           (SELECT distinct_id
            FROM
              (SELECT distinct_id,
                      argMax(person_id, version) as person_id
               FROM person_distinct_id2
               WHERE team_id = 2
               GROUP BY distinct_id
               HAVING argMax(is_deleted, version) = 0)
            WHERE person_id IN
                (SELECT person.person_id AS id
                 FROM
                   (SELECT pdi.person_id AS person_id,
                           countIf(timestamp > now() - INTERVAL 2 year
                                   AND timestamp < now()
                                   AND event = '$pageview') > 0 AS performed_event_condition_17_level_level_0_level_0_level_0_0
                    FROM events e
                    INNER JOIN
                      (SELECT distinct_id,
                              argMax(person_id, version) as person_id
                       FROM person_distinct_id2
                       WHERE team_id = 2
                       GROUP BY distinct_id
                       HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
                    WHERE team_id = 2
                      AND event IN ['$pageview']
                      AND timestamp <= now()
                      AND timestamp >= now() - INTERVAL 2 year
                    GROUP BY person_id) behavior_query
                 INNER JOIN
                   (SELECT *,
                           id AS person_id
                    FROM
                      (SELECT id
                       FROM person
                       WHERE team_id = 2
                         AND id IN
                           (SELECT id
                            FROM person
                            WHERE team_id = 2
                              AND (((((NOT has(['something1'], replaceRegexpAll(JSONExtractRaw(properties, '$some_prop'), '^"|"$', ''))))))) )
                       GROUP BY id
                       HAVING max(is_deleted) = 0
                       AND (((((NOT has(['something1'], replaceRegexpAll(JSONExtractRaw(argMax(person.properties, version), '$some_prop'), '^"|"$', ''))))))) SETTINGS optimize_aggregation_in_order = 1)) person ON person.person_id = behavior_query.person_id
                 WHERE 1 = 1
                   AND ((((performed_event_condition_17_level_level_0_level_0_level_0_0)))) ) ))
  '
---
# name: TestCohort.test_cohortpeople_with_not_in_cohort_operator_for_behavioural_cohorts
  '
  
  INSERT INTO cohortpeople
  SELECT id,
         2 as cohort_id,
         2 as team_id,
         1 AS sign,
         0 AS version
  FROM
    (SELECT behavior_query.person_id AS id
     FROM
       (SELECT pdi.person_id AS person_id,
               minIf(timestamp, event = 'signup') >= now() - INTERVAL 15 day
        AND minIf(timestamp, event = 'signup') < now() as first_time_condition_18_level_level_0_level_0_0
        FROM events e
        INNER JOIN
          (SELECT distinct_id,
                  argMax(person_id, version) as person_id
           FROM person_distinct_id2
           WHERE team_id = 2
           GROUP BY distinct_id
           HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
        WHERE team_id = 2
          AND event IN ['signup']
        GROUP BY person_id) behavior_query
     WHERE 1 = 1
       AND (((first_time_condition_18_level_level_0_level_0_0))) ) as person
  UNION ALL
  SELECT person_id,
         cohort_id,
         team_id,
         -1,
         version
  FROM cohortpeople
  WHERE team_id = 2
    AND cohort_id = 2
    AND version < 0
    AND sign = 1
  '
---
# name: TestCohort.test_cohortpeople_with_not_in_cohort_operator_for_behavioural_cohorts.1
  '
  
  INSERT INTO cohortpeople
  SELECT id,
         2 as cohort_id,
         2 as team_id,
         1 AS sign,
         0 AS version
  FROM
    (SELECT behavior_query.person_id AS id
     FROM
       (SELECT pdi.person_id AS person_id,
               countIf(timestamp > now() - INTERVAL 2 year
                       AND timestamp < now()
                       AND event = '$pageview') > 0 AS performed_event_condition_19_level_level_0_level_0_level_0_0,
               minIf(timestamp, event = 'signup') >= now() - INTERVAL 15 day
        AND minIf(timestamp, event = 'signup') < now() as first_time_condition_19_level_level_0_level_1_level_0_level_0_level_0_0
        FROM events e
        INNER JOIN
          (SELECT distinct_id,
                  argMax(person_id, version) as person_id
           FROM person_distinct_id2
           WHERE team_id = 2
           GROUP BY distinct_id
           HAVING argMax(is_deleted, version) = 0) AS pdi ON e.distinct_id = pdi.distinct_id
        WHERE team_id = 2
          AND event IN ['$pageview', 'signup']
        GROUP BY person_id) behavior_query
     WHERE 1 = 1
       AND ((((performed_event_condition_19_level_level_0_level_0_level_0_0))
             AND ((((NOT first_time_condition_19_level_level_0_level_1_level_0_level_0_level_0_0)))))) ) as person
  UNION ALL
  SELECT person_id,
         cohort_id,
         team_id,
         -1,
         version
  FROM cohortpeople
  WHERE team_id = 2
    AND cohort_id = 2
    AND version < 0
    AND sign = 1
  '
---
# name: TestCohort.test_static_cohort_precalculated
  '
  
  SELECT distinct_id
  FROM
    (SELECT distinct_id,
            argMax(person_id, version) as person_id
     FROM person_distinct_id2
     WHERE team_id = 2
     GROUP BY distinct_id
     HAVING argMax(is_deleted, version) = 0)
  WHERE person_id IN
      (SELECT person_id as id
       FROM person_static_cohort
       WHERE cohort_id = %(_cohort_id_0)s
         AND team_id = %(team_id)s)
  '
---
