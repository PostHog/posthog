<events_input_format>
You'll receive a list of events with columns:
- event: Type of event (e.g., $pageview, $autocapture) - signals user actions or system events
- timestamp: When the event occurred - helps track sequence and time between actions
- elements_chain_href: URL fragment interacted with - shows specific link or element targets
- elements_chain_texts: Text content of elements the user interacted with
- elements_chain_elements: Types of elements the user interacted with (clicked buttons, forms, etc.)
- $window_id: Unique identifier for browser window/tab - helps track multi-window workflows (use simplified references from window_mapping)
- $current_url: Page URL where the interaction happened on (use simplified references from url_mapping)
- $event_type: Type of interaction (e.g., click, submit) - specifies how the user interacted
- event_id: Unique identifier for the event - use this to reference specific events
- event_index: Index of the event in the session - helps understand sequence

Use these events to reconstruct the user journey. Events are provided in a chronologically order. Focus on what these events reveal about user intentions rather than the raw event data itself. 

Don't include raw `elements_chain_texts` data in your summary, but use it to improve your understanding of user goals.
</events_input_format>

<events_input>
```
{{ EVENTS_DATA|safe }}
```
</events_input>

<url_mapping_input_format>
URLs mapping table shows the actual URLs for simplified URL references in the events data. 

When analyzing events, use these mappings to understand the actual pages visited. For example, if an event shows 'url_1', refer to this mapping to find the actual URL. In your summary and tags, always use the actual page/feature names, not the simplified URL references. Always refer to the URL with the simplest version e.g. `posthog.com` or `posthog.com/replay`, instead of mentioning the full URL with long query parameters.
</url_mapping_input_format>

<url_mapping_input>
```
{{ URL_MAPPING|safe }}
```
</url_mapping_input>

<window_mapping_input_format>
Window IDs mapping table shows the actual browser windows/tabs IDs for simplified references in the events data.

Window IDs help track user activity across different browser windows or tabs. For example:
- If events switch from 'window_1' to 'window_2', the user switched to a different browser window/tab
- Multiple events with the same window ID indicate continuous activity in the same window/tab
- Frequent window switches might indicate comparing content or multitasking

Use this information to understand user navigation patterns and parallel browsing behavior.
</window_mapping_input_format>

<window_mapping_input>
```
{{ WINDOW_ID_MAPPING|safe }}
```
</window_mapping_input>

<session_metadata_input_format>
Use session metadata to understand user engagement context:

- active_seconds: Total time user actively engaged with the application
  * <30 seconds: Very brief session, likely a single objective
  * 30-120 seconds: Short session, typically 1-3 distinct objectives
  * 120-300 seconds: Medium session, may contain 3-5 related objectives
  * >300 seconds: Extensive session, likely contains multiple complex objectives
- inactive_seconds: Periods when user wasn't interacting with the application
- click_count, keypress_count, mouse_activity_count: Interaction density
- start_url: Entry point to the application, often indicates initial user intent

Use these metrics to calibrate your analysis of user objectives and engagement quality.
</session_metadata_input_format>

<session_medata_input>
```
{{ SESSION_METADATA|safe }}
```
</session_medata_input>

<identify_objectives_instructions>
CRITICAL WARNING: DO NOT hallucinate errors. Only mark events as errors when there is EXPLICIT evidence in the event data that an error occurred.

1. Identify the primary user objectives (goals) in the session. Scale appropriately based on session length and complexity (as described in the `session_metadata_input_format`).

2. Each objective must represent an intentional user goal:
   ✓ GOOD OBJECTIVES: "Login to application," "Filter products," "Complete checkout"
   ✗ BAD OBJECTIVES: "Page loaded," "Error occurred," "Session started"

3. For each objective, provide:
   - A concise, descriptive name that captures the user's goal
   - A brief summary incorporating both user actions AND any technical issues
   - List key actions with their corresponding event_id and error status (see Key Actions guidance below)

4. Key Actions Guidelines:

   A. General Guidelines:
      - Include 1-5 key actions per objective based on objective's complexity and duration
      - Each key action should represent a significant step in the user's journey toward the objective
      - Consolidate repeated similar actions (e.g., "Clicked search button 3 times")
      - Create separate key actions for repeated behaviors ONLY if they represent distinct phases

   B. Error Identification Guidelines (CRITICAL): 

      - NEVER flag as errors:
        ✗ Normal page navigation
        ✗ Sequential UI interactions (changing filters, adjusting parameters)
        ✗ Any other action without direct failure evidence
   
      - Flag event as an error (`error: true`) ONLY with EXPLICIT evidence:
        ✓ Event name/type contains: 'exception', 'failed', 'error', etc.
        ✓ `elements_chain_texts` contains error messages (e.g., "404 Not Found", "Failed to load", etc.)
        ✓ Session abandonment shortly after exception events
        ✓ Multiple rapid identical form submissions followed by a change in form data
        ✓ And other similar patterns

      - Error severity filter:
        ✓ INCLUDE: Errors interrupting user progress (login failures, submission errors, API errors, etc.)
        ✗ EXCLUDE: Background errors (tracking failures, minor rendering glitches, etc.)
      
      - Error description requirements:
        * Specify error nature (API failure, validation error, timeout, etc.)
        * Include potential causes when identifiable (e.g., "possibly caused by incorrect password format", etc.)
        * Explain impact on user flow (e.g., "forcing user to retry" or "causing user to abandon task", etc.)
        * Provide more detail than regular action descriptions

   C. User Action Guidelines:
      - Focus on actions that demonstrate clear user intent
      - Keep descriptions concise but informative (e.g., "User applied filter parameters", etc.)
      - For complex actions, briefly include the outcome (e.g., "User submitted form successfully", etc.)
      - Prioritize actions showing progress or completion of the objective

5. Objective Boundary Guidelines:
   ✓ DO: 
      * create new objectives when user clearly switches tasks/goals
      * incorporate errors into relevant user objective summaries
      * account for non-linear behavior (users may return to previous objectives)
   ✗ DO NOT:
      * create objectives for error states or technical issues
      create overlapping objectives (each event belongs to one primary objective)

6. Pay special attention to:
   - URL patterns and journey (use url_mapping to interpret actual pages visited)
   - Distinguishing meaningful goals from technical events
   - Signs of user confusion, repeated attempts, or workarounds

7. Determine the initial user goal:
   - Analyze the `start_url` from the `session_medata_input` to identify the entry point context
   - Review the user's objectives/actions during the session to confirm the goal
   - Distinguish between intentional visits and redirects/automated navigation

8. Assess the session outcome:
   - Identify the exit URL, final actions and their context
   - Determine if the user achieved their initial goal based on completed objectives
   - If the user abandoned the session after encountering errors, briefly describe their nature and impact
</identify_objectives_instructions>

<output_format>
Provide your summary in YAML format using the provided example. Don't replicate the data or logic of the example, or the number of example entries. Use it ONLY to understand the format.
</output_format>

<output_example>
```
{{ SUMMARY_EXAMPLE|safe }}
```
</output_example>