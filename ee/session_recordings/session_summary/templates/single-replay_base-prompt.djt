<base_task>
Generate a summary of a user session on a website based on a series of events in a chronological order. Events columns explain what each value of the event means based on the index in the event array. Events data includes user activity in a chronological order to summarize.
</base_task>

<session_metadata>
The following metadata provides an overview of the session:

```
{{ SESSION_METADATA|safe }}
```

Use this metadata to understand:
- Session duration and user engagement level
- Error frequency and potential technical issues
- Overall interaction intensity
- Starting point of the user journey
</session_metadata>

<events_columns>
{% for column in EVENTS_COLUMNS %}
{{ forloop.counter0 }}. `{{ column }}` - {% if forloop.counter0 == 0 %}Event type{% elif forloop.counter0 == 1 %}Href of the element user interacted with{% elif forloop.counter0 == 2 %}Text of the element user interacted with{% elif forloop.counter0 == 3 %}Tag of the element user interacted with{% elif forloop.counter0 == 4 %}Window/browser tab id (uses simplified references from window_mapping){% elif forloop.counter0 == 5 %}Current URL (uses simplified references from url_mapping){% elif forloop.counter0 == 6 %}Event subtype (if applicable){% elif forloop.counter0 == 7 %}Time (in ms) since the session start{% elif forloop.counter0 == 8 %}Unique `event_id`{% endif %}
{% endfor %}
</events_columns>

<events_data>
```
{{ EVENTS_DATA|safe }}
```
</events_data>

<url_mapping>
The following mapping table shows the actual URLs for simplified URL references in the events data:

```
{{ URL_MAPPING|safe }}
```

When analyzing events, use these mappings to understand the actual pages visited. For example, if an event shows 'url_1', refer to this mapping to find the actual URL. In your summary and tags, always use the actual page/feature names, not the URL references.
</url_mapping>

<window_mapping>
The following mapping table shows browser windows/tabs used during the session:

```
{{ WINDOW_ID_MAPPING|safe }}
```

Window IDs help track user activity across different browser windows or tabs. For example:
- If events switch from 'window_1' to 'window_2', the user switched to a different browser window/tab
- Multiple events with the same window ID indicate continuous activity in the same window/tab
- Frequent window switches might indicate comparing content or multitasking

Use this information to understand user navigation patterns and parallel browsing behavior.
</window_mapping>

<summary_instructions>
Your task is to analyze these events chronologically and create a concise, readable summary of the user's session. Ensure chronological order of the events. Follow these steps:

1. Examine the events in the order they occurred.

2. Interpret the different event types:
   - '$pageview': Indicates the user visited a new page
   - '$autocapture': Represents user interactions like clicks or form submissions
   - 'client_request_failure': Suggests an error or failed request
   - And others, get their meaning from the context

3. Pay special attention to:
   - The URLs visited (use url_mapping to find actual URLs)
   - User interactions (clicks, form submissions) in '$autocapture' events
   - Any error or failure events (mark them as `error: true` in the event list)

4. Create a narrative of the user's journey through the site, focusing on:
   - Pages visited (use actual URLs from mapping)
   - Actions taken (clicks, form submissions)
   - Any errors or issues encountered

5. Assign importance scores (0.0 to 1.0) to each event:
   - 1.0: Critical events that significantly impact the user journey (signup completion, payment, major errors)
   - 0.7-0.9: Important user decisions (plan selection, starting signup)
   - 0.4-0.6: Meaningful interactions (feature exploration, settings changes)
   - 0.1-0.3: Basic navigation and minor interactions (page views, small UI interactions)
   - 0.0: Negligible events (mouse movements, unfocused windows)

6. Generate a concise summary of the session:
   - Highlight the key events and user actions. 
   - Don't pick more than 10 events. 
   - Write 1-3 short, clear sentences per event as a description.
   - Keep the event description short and focused (for example, instead of starting with "User clicked" start with just "Clicked").
   - Keep technical details when relevant, but present them clearly (for example, instead of "API exception was logged during the login" say "user wasn't able to login because of API error").
</summary_instructions>

<tag_categorization>
For each event, you must assign appropriate tags in two categories:

1. "where" tags - describe the location/page/section where the event occurred. For example:
   - `landing_page`
   - `pricing_page`
   - `feature_modal`
   - `signup_page`
   - `checkout_page`
   - `dashboard`
   - `settings_page`
   - `documentation_page`
   - `billing_page`
   - and any other you see fit

2. "what" tags - describe the action/interaction that occurred:
   - `feature_comparison`
   - `plan_selection`
   - `signup_start`
   - `payment`
   - `workspace_setup`
   - `documentation_search`
   - `feature_enable`
   - `export_data`
   - `settings_update`
   - and any other you see fit

Notes on tagging:
- Most events will have one tag per category
- About 25% of events may have multiple tags in either category when the event spans multiple areas or actions
- Tags should be specific enough to be useful but generic enough to be reusable
- Avoid creating new tags unless absolutely necessary - use existing ones when possible
- When determining tags, use the actual URLs from url_mapping, not the simplified references
</tag_categorization>

<output_details>
Provide your summary in YAML format using the provided example. Don't replicate the data of the example, or the number of example entries, use it for formatting only.
</output_details>

<summary_example>
```
{{SUMMARY_EXAMPLE|safe}}
```
</summary_example>
