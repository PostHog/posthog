// Generated by @posthog/esbuilder/utils.mjs, based on product folder manifests under products/*/manifest.tsx

import { Params } from 'scenes/sceneTypes'

import { manifest as early_access_featuresManifest } from '../../products/early_access_features/manifest'
import { manifest as llm_observabilityManifest } from '../../products/llm_observability/manifest'
import { manifest as messagingManifest } from '../../products/messaging/manifest'

/** This const is auto-generated, as is the whole file */
export const productScenes: Record<string, any> = Object.fromEntries(
    Object.entries({
        ...early_access_featuresManifest.scenes,
        ...llm_observabilityManifest.scenes,
        ...messagingManifest.scenes,
    }).map(([k, v]) => [k, v.import])
)

/** This const is auto-generated, as is the whole file */
export const productRoutes: Record<string, [string, string]> = {
    ...early_access_featuresManifest.routes,
    ...llm_observabilityManifest.routes,
    ...messagingManifest.routes,
}

/** This const is auto-generated, as is the whole file */
export const productRedirects: Record<
    string,
    string | ((params: Params, searchParams: Params, hashParams: Params) => string)
> = {
    ...early_access_featuresManifest.redirects,
    ...llm_observabilityManifest.redirects,
    ...messagingManifest.redirects,
}

/** This const is auto-generated, as is the whole file */
export const productConfiguration: Record<string, any> = {
    ...early_access_featuresManifest.scenes,
    ...llm_observabilityManifest.scenes,
    ...messagingManifest.scenes,
}

/** This const is auto-generated, as is the whole file */
export const productUrls = {
    earlyAccessFeatures: (): string => '/early_access_features',
    earlyAccessFeature: (id: string): string => `/early_access_features/${id}`,
    llmObservabilityDashboard: (): string => '/llm-observability',
    llmObservabilityGenerations: (): string => '/llm-observability/generations',
    llmObservabilityTraces: (): string => '/llm-observability/traces',
    llmObservabilityTrace: (
        id: string,
        params?: {
            event?: string
            timestamp: string
        }
    ): string => {
        const queryParams = new URLSearchParams(params)
        const stringifiedParams = queryParams.toString()
        return `/llm-observability/traces/${id}${stringifiedParams ? `?${stringifiedParams}` : ''}`
    },
    llmObservabilityUsers: (): string => '/llm-observability/users',
    messagingBroadcasts: (): string => '/messaging/broadcasts',
    messagingBroadcast: (id?: string): string => `/messaging/broadcasts/${id}`,
    messagingBroadcastNew: (): string => '/messaging/broadcasts/new',
    messagingProviders: (): string => '/messaging/providers',
    messagingProvider: (id?: string): string => `/messaging/providers/${id}`,
    messagingProviderNew: (template?: string): string => '/messaging/providers/new' + (template ? `/${template}` : ''),
}
