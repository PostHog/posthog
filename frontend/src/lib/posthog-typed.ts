/**
 * GENERATED FILE - DO NOT EDIT
 *
 * This file was auto-generated by PostHog
 * Generated at: 2025-10-31T07:49:54.109430
 * Generator version: 1.0.0
 *
 * Provides capture() for type-safe events and captureRaw() for flexibility
 */
import originalPostHog from 'posthog-js'
import type { CaptureOptions, CaptureResult, PostHog as OriginalPostHog, Properties } from 'posthog-js'

// Define event schemas
interface EventSchemas {
    $pageleave: Record<string, any>
    $pageview: Record<string, any>
    'activation sidebar task completed': Record<string, any>
    client_request_failure: Record<string, any>
    'dashboard insight refreshed': Record<string, any>
    'dashboard refreshed': Record<string, any>
    downloaded_file: {
        file_name?: string
        file_size_b: number
        file_type?: string
    }
    'event definitions page event nested properties load succeeded': Record<string, any>
    'event definitions page load succeeded': Record<string, any>
    'event property definitions page load succeeded': Record<string, any>
    'insight analyzed': Record<string, any>
    'insight created': Record<string, any>
    'insight refresh time': Record<string, any>
    'insight viewed': Record<string, any>
    invited_team_member: Record<string, any>
    logged_out: Record<string, any>
    memory_usage: Record<string, any>
    not_found_shown: Record<string, any>
    'onboarding_tasks team setting updated': Record<string, any>
    paid_bill: Record<string, any>
    'query completed': Record<string, any>
    'query executed': Record<string, any>
    'query failed': Record<string, any>
    'recording viewed with no playtime summary': Record<string, any>
    signed_up: Record<string, any>
    spinner_unloaded: Record<string, any>
    'time to see data': Record<string, any>
    upgraded_plan: Record<string, any>
    uploaded_file: {
        file_name?: string
        file_size_b: number
        file_type?: string
    }
    'user logged in': Record<string, any>
    'viewed dashboard': Record<string, any>
}

// Type alias for all valid event names
export type EventName = keyof EventSchemas

// Type helper to get properties for a specific event
// Intersects the schema with Record<string, any> to allow additional properties
export type EventProperties<K extends EventName> = EventSchemas[K] & Record<string, any>

// Helper type to check if a type has required properties
type HasRequiredProperties<K extends EventName> = {} extends EventSchemas[K] ? false : true

// Helper to detect if T is exactly 'string' (not a literal)
type IsExactlyString<T> = string extends T ? (T extends string ? true : false) : false

// Enhanced PostHog interface with typed capture
interface TypedPostHog extends Omit<OriginalPostHog, 'capture'> {
    /**
     * Type-safe capture for defined events, or flexible capture for undefined events
     *
     * Note: For defined events, wrap properties in a variable to allow additional properties:
     * const props = { file_size_b: 100, extra: 'data' }
     * posthog.capture('downloaded_file', props)
     *
     * @example
     * // Defined event with type safety
     * posthog.capture('uploaded_file', {
     *   file_name: 'test.txt',
     *   file_size_b: 100
     * })
     *
     * @example
     * // For events with all optional properties, properties argument is optional
     * posthog.capture('logged_out') // no properties needed
     *
     * @example
     * // Undefined events work with arbitrary properties
     * posthog.capture('custom_event', { any: 'data' })
     * posthog.capture('another_event') // or no properties
     */
    // Overload 1: For known events (specific EventName literals)
    // This should match first for all known event names
    capture<K extends EventName>(
        event_name: K,
        ...args: HasRequiredProperties<K> extends true
            ? [properties: EventProperties<K>, options?: CaptureOptions]
            : [properties?: EventProperties<K>, options?: CaptureOptions]
    ): CaptureResult | undefined

    // Overload 2: For undefined events and blocking string variables
    // Only matches if event_name is NOT a known EventName
    // The conditional type rejects broad string type
    capture<T extends string>(
        event_name: IsExactlyString<T> extends true ? never : T extends EventName ? never : T,
        properties?: Properties | null,
        options?: CaptureOptions
    ): CaptureResult | undefined

    /**
     * Raw capture for any event (original behavior, no type checking)
     *
     * Use capture() for type-safe defined events or flexible undefined events.
     * Use captureRaw() only when you need to bypass all type checking.
     *
     * @example
     * posthog.captureRaw('Any Event Name', { any: 'data' })
     */
    captureRaw(event_name: string, properties?: Properties | null, options?: CaptureOptions): CaptureResult | undefined
}

// Create the implementation
const createTypedPostHog = (original: OriginalPostHog): TypedPostHog => {
    // Create the enhanced PostHog object
    const enhanced: TypedPostHog = Object.create(original)

    // Add capture method (type-safe for defined events, flexible for undefined)
    enhanced.capture = function (event_name: string, ...args: any[]): CaptureResult | undefined {
        const [properties, options] = args
        return original.capture(event_name, properties, options)
    }

    // Add captureRaw method for untyped/flexible event tracking
    enhanced.captureRaw = function (
        event_name: string,
        properties?: Properties | null,
        options?: CaptureOptions
    ): CaptureResult | undefined {
        return original.capture(event_name, properties, options)
    }

    // Proxy to delegate all other properties/methods to the original
    return new Proxy(enhanced, {
        get(target, prop) {
            if (prop in target) {
                return (target as any)[prop]
            }
            return (original as any)[prop]
        },
        set(target, prop, value) {
            ;(original as any)[prop] = value
            return true
        },
    })
}

// Create and export the typed instance
const posthog = createTypedPostHog(originalPostHog as OriginalPostHog)

export default posthog
export { posthog }
export type { EventSchemas, TypedPostHog }

// Re-export everything else from posthog-js
export * from 'posthog-js'

/**
 * USAGE GUIDE
 * ===========
 *
 * For type-safe defined events (recommended):
 *   posthog.capture('uploaded_file', { file_name: 'test.txt', file_size_b: 100 })
 *
 * For undefined events (flexible):
 *   posthog.capture('Custom Event', { any: 'data' })
 *
 * For bypassing all type checking (rare):
 *   posthog.captureRaw('Any Event', { any: 'data' })
 */
