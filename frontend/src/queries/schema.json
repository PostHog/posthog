{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "definitions": {
        "ActionsNode": {
            "additionalProperties": false,
            "properties": {
                "custom_name": {
                    "type": "string"
                },
                "fixedProperties": {
                    "description": "Fixed properties in the query, can't be edited in the interface (e.g. scoping down by person)",
                    "items": {
                        "$ref": "#/definitions/AnyPropertyFilter"
                    },
                    "type": "array"
                },
                "id": {
                    "type": "number"
                },
                "kind": {
                    "const": "ActionsNode",
                    "type": "string"
                },
                "math": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/BaseMathType"
                        },
                        {
                            "$ref": "#/definitions/PropertyMathType"
                        },
                        {
                            "$ref": "#/definitions/CountPerActorMathType"
                        },
                        {
                            "$ref": "#/definitions/GroupMathType"
                        },
                        {
                            "$ref": "#/definitions/HogQLMathType"
                        }
                    ]
                },
                "math_group_type_index": {
                    "enum": [0, 1, 2, 3, 4],
                    "type": "number"
                },
                "math_hogql": {
                    "type": "string"
                },
                "math_property": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "properties": {
                    "description": "Properties configurable in the interface",
                    "items": {
                        "$ref": "#/definitions/AnyPropertyFilter"
                    },
                    "type": "array"
                },
                "response": {
                    "description": "Cached query response",
                    "type": "object"
                }
            },
            "required": ["id", "kind"],
            "type": "object"
        },
        "AggregationAxisFormat": {
            "enum": ["numeric", "duration", "duration_ms", "percentage", "percentage_scaled"],
            "type": "string"
        },
        "AnyDataNode": {
            "anyOf": [
                {
                    "$ref": "#/definitions/EventsNode"
                },
                {
                    "$ref": "#/definitions/ActionsNode"
                },
                {
                    "$ref": "#/definitions/PersonsNode"
                },
                {
                    "$ref": "#/definitions/TimeToSeeDataSessionsQuery"
                },
                {
                    "$ref": "#/definitions/EventsQuery"
                },
                {
                    "$ref": "#/definitions/PersonsQuery"
                },
                {
                    "$ref": "#/definitions/InsightPersonsQuery"
                },
                {
                    "$ref": "#/definitions/SessionsTimelineQuery"
                },
                {
                    "$ref": "#/definitions/HogQLQuery"
                },
                {
                    "$ref": "#/definitions/HogQLMetadata"
                },
                {
                    "$ref": "#/definitions/WebOverviewQuery"
                },
                {
                    "$ref": "#/definitions/WebStatsTableQuery"
                },
                {
                    "$ref": "#/definitions/WebTopClicksQuery"
                }
            ]
        },
        "AnyPropertyFilter": {
            "anyOf": [
                {
                    "$ref": "#/definitions/EventPropertyFilter"
                },
                {
                    "$ref": "#/definitions/PersonPropertyFilter"
                },
                {
                    "$ref": "#/definitions/ElementPropertyFilter"
                },
                {
                    "$ref": "#/definitions/SessionPropertyFilter"
                },
                {
                    "$ref": "#/definitions/CohortPropertyFilter"
                },
                {
                    "$ref": "#/definitions/RecordingDurationFilter"
                },
                {
                    "$ref": "#/definitions/GroupPropertyFilter"
                },
                {
                    "$ref": "#/definitions/FeaturePropertyFilter"
                },
                {
                    "$ref": "#/definitions/HogQLPropertyFilter"
                },
                {
                    "$ref": "#/definitions/EmptyPropertyFilter"
                }
            ]
        },
        "AnyResponseType": {
            "anyOf": [
                {
                    "type": "object"
                },
                {
                    "$ref": "#/definitions/HogQLQueryResponse"
                },
                {
                    "$ref": "#/definitions/HogQLMetadataResponse"
                },
                {
                    "anyOf": [
                        {
                            "additionalProperties": false,
                            "properties": {
                                "next": {
                                    "type": "string"
                                },
                                "results": {
                                    "items": {
                                        "$ref": "#/definitions/EventType"
                                    },
                                    "type": "array"
                                }
                            },
                            "required": ["results"],
                            "type": "object"
                        },
                        {
                            "not": {}
                        }
                    ],
                    "description": "Return a limited set of data"
                },
                {
                    "$ref": "#/definitions/EventsQueryResponse"
                }
            ]
        },
        "BaseMathType": {
            "enum": ["total", "dau", "weekly_active", "monthly_active", "unique_session"],
            "type": "string"
        },
        "BinCountValue": {
            "anyOf": [
                {
                    "type": "number"
                },
                {
                    "const": "auto",
                    "type": "string"
                }
            ]
        },
        "Breakdown": {
            "additionalProperties": false,
            "properties": {
                "normalize_url": {
                    "type": "boolean"
                },
                "property": {
                    "type": ["string", "number"]
                },
                "type": {
                    "$ref": "#/definitions/BreakdownType"
                }
            },
            "required": ["property", "type"],
            "type": "object"
        },
        "BreakdownAttributionType": {
            "enum": ["first_touch", "last_touch", "all_events", "step"],
            "type": "string"
        },
        "BreakdownFilter": {
            "additionalProperties": false,
            "properties": {
                "breakdown": {
                    "$ref": "#/definitions/BreakdownKeyType"
                },
                "breakdown_group_type_index": {
                    "type": ["number", "null"]
                },
                "breakdown_histogram_bin_count": {
                    "type": "number"
                },
                "breakdown_normalize_url": {
                    "type": "boolean"
                },
                "breakdown_type": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/BreakdownType"
                        },
                        {
                            "type": "null"
                        }
                    ]
                },
                "breakdowns": {
                    "items": {
                        "$ref": "#/definitions/Breakdown"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "BreakdownKeyType": {
            "anyOf": [
                {
                    "type": "string"
                },
                {
                    "type": "number"
                },
                {
                    "items": {
                        "type": ["string", "number"]
                    },
                    "type": "array"
                },
                {
                    "type": "null"
                }
            ]
        },
        "BreakdownType": {
            "enum": ["cohort", "person", "event", "group", "session", "hogql"],
            "type": "string"
        },
        "ChartDisplayType": {
            "enum": [
                "ActionsLineGraph",
                "ActionsLineGraphCumulative",
                "ActionsAreaGraph",
                "ActionsTable",
                "ActionsPie",
                "ActionsBar",
                "ActionsBarValue",
                "WorldMap",
                "BoldNumber"
            ],
            "type": "string"
        },
        "CohortPropertyFilter": {
            "additionalProperties": false,
            "description": "Sync with plugin-server/src/types.ts",
            "properties": {
                "key": {
                    "const": "id",
                    "type": "string"
                },
                "label": {
                    "type": "string"
                },
                "type": {
                    "const": "cohort",
                    "type": "string"
                },
                "value": {
                    "type": "number"
                }
            },
            "required": ["key", "type", "value"],
            "type": "object"
        },
        "CountPerActorMathType": {
            "enum": [
                "avg_count_per_actor",
                "min_count_per_actor",
                "max_count_per_actor",
                "median_count_per_actor",
                "p90_count_per_actor",
                "p95_count_per_actor",
                "p99_count_per_actor"
            ],
            "type": "string"
        },
        "DashboardFilter": {
            "additionalProperties": false,
            "properties": {
                "date_from": {
                    "type": ["string", "null"]
                },
                "date_to": {
                    "type": ["string", "null"]
                },
                "properties": {
                    "anyOf": [
                        {
                            "items": {
                                "$ref": "#/definitions/AnyPropertyFilter"
                            },
                            "type": "array"
                        },
                        {
                            "type": "null"
                        }
                    ]
                }
            },
            "type": "object"
        },
        "DataNode": {
            "additionalProperties": false,
            "properties": {
                "kind": {
                    "$ref": "#/definitions/NodeKind"
                },
                "response": {
                    "description": "Cached query response",
                    "type": "object"
                }
            },
            "required": ["kind"],
            "type": "object"
        },
        "DataTableNode": {
            "additionalProperties": false,
            "properties": {
                "allowSorting": {
                    "description": "Can the user click on column headers to sort the table? (default: true)",
                    "type": "boolean"
                },
                "columns": {
                    "description": "Columns shown in the table, unless the `source` provides them.",
                    "items": {
                        "$ref": "#/definitions/HogQLExpression"
                    },
                    "type": "array"
                },
                "embedded": {
                    "description": "Uses the embedded version of LemonTable",
                    "type": "boolean"
                },
                "expandable": {
                    "description": "Can expand row to show raw event data (default: true)",
                    "type": "boolean"
                },
                "full": {
                    "description": "Show with most visual options enabled. Used in scenes.",
                    "type": "boolean"
                },
                "hiddenColumns": {
                    "description": "Columns that aren't shown in the table, even if in columns or returned data",
                    "items": {
                        "$ref": "#/definitions/HogQLExpression"
                    },
                    "type": "array"
                },
                "kind": {
                    "const": "DataTableNode",
                    "type": "string"
                },
                "propertiesViaUrl": {
                    "description": "Link properties via the URL (default: false)",
                    "type": "boolean"
                },
                "showActions": {
                    "description": "Show the kebab menu at the end of the row",
                    "type": "boolean"
                },
                "showColumnConfigurator": {
                    "description": "Show a button to configure the table's columns if possible",
                    "type": "boolean"
                },
                "showDateRange": {
                    "description": "Show date range selector",
                    "type": "boolean"
                },
                "showElapsedTime": {
                    "description": "Show the time it takes to run a query",
                    "type": "boolean"
                },
                "showEventFilter": {
                    "description": "Include an event filter above the table (EventsNode only)",
                    "type": "boolean"
                },
                "showExport": {
                    "description": "Show the export button",
                    "type": "boolean"
                },
                "showHogQLEditor": {
                    "description": "Include a HogQL query editor above HogQL tables",
                    "type": "boolean"
                },
                "showOpenEditorButton": {
                    "description": "Show a button to open the current query as a new insight. (default: true)",
                    "type": "boolean"
                },
                "showPersistentColumnConfigurator": {
                    "description": "Show a button to configure and persist the table's default columns if possible",
                    "type": "boolean"
                },
                "showPropertyFilter": {
                    "description": "Include a property filter above the table",
                    "type": "boolean"
                },
                "showReload": {
                    "description": "Show a reload button",
                    "type": "boolean"
                },
                "showResultsTable": {
                    "description": "Show a results table",
                    "type": "boolean"
                },
                "showSavedQueries": {
                    "description": "Shows a list of saved queries",
                    "type": "boolean"
                },
                "showSearch": {
                    "description": "Include a free text search field (PersonsNode only)",
                    "type": "boolean"
                },
                "showTimings": {
                    "description": "Show a detailed query timing breakdown",
                    "type": "boolean"
                },
                "source": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/EventsNode"
                        },
                        {
                            "$ref": "#/definitions/EventsQuery"
                        },
                        {
                            "$ref": "#/definitions/PersonsNode"
                        },
                        {
                            "$ref": "#/definitions/PersonsQuery"
                        },
                        {
                            "$ref": "#/definitions/HogQLQuery"
                        },
                        {
                            "$ref": "#/definitions/TimeToSeeDataSessionsQuery"
                        },
                        {
                            "$ref": "#/definitions/WebOverviewQuery"
                        },
                        {
                            "$ref": "#/definitions/WebStatsTableQuery"
                        },
                        {
                            "$ref": "#/definitions/WebTopClicksQuery"
                        }
                    ],
                    "description": "Source of the events"
                }
            },
            "required": ["kind", "source"],
            "type": "object"
        },
        "DatabaseSchemaQuery": {
            "additionalProperties": false,
            "properties": {
                "kind": {
                    "const": "DatabaseSchemaQuery",
                    "type": "string"
                },
                "response": {
                    "$ref": "#/definitions/DatabaseSchemaQueryResponse",
                    "description": "Cached query response"
                }
            },
            "required": ["kind"],
            "type": "object"
        },
        "DatabaseSchemaQueryResponse": {
            "additionalProperties": {
                "items": {
                    "$ref": "#/definitions/DatabaseSchemaQueryResponseField"
                },
                "type": "array"
            },
            "type": "object"
        },
        "DatabaseSchemaQueryResponseField": {
            "additionalProperties": false,
            "properties": {
                "chain": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "fields": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "key": {
                    "type": "string"
                },
                "table": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "required": ["key", "type"],
            "type": "object"
        },
        "DateRange": {
            "additionalProperties": false,
            "properties": {
                "date_from": {
                    "type": ["string", "null"]
                },
                "date_to": {
                    "type": ["string", "null"]
                }
            },
            "type": "object"
        },
        "ElementPropertyFilter": {
            "additionalProperties": false,
            "description": "Sync with plugin-server/src/types.ts",
            "properties": {
                "key": {
                    "enum": ["tag_name", "text", "href", "selector"],
                    "type": "string"
                },
                "label": {
                    "type": "string"
                },
                "operator": {
                    "$ref": "#/definitions/PropertyOperator"
                },
                "type": {
                    "const": "element",
                    "type": "string"
                },
                "value": {
                    "$ref": "#/definitions/PropertyFilterValue"
                }
            },
            "required": ["key", "operator", "type"],
            "type": "object"
        },
        "ElementType": {
            "additionalProperties": false,
            "properties": {
                "attr_class": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "attr_id": {
                    "type": "string"
                },
                "attributes": {
                    "additionalProperties": {
                        "type": "string"
                    },
                    "type": "object"
                },
                "href": {
                    "type": "string"
                },
                "nth_child": {
                    "type": "number"
                },
                "nth_of_type": {
                    "type": "number"
                },
                "order": {
                    "type": "number"
                },
                "tag_name": {
                    "type": "string"
                },
                "text": {
                    "type": "string"
                }
            },
            "required": ["attributes", "tag_name"],
            "type": "object"
        },
        "EmptyPropertyFilter": {
            "additionalProperties": false,
            "type": "object"
        },
        "EntityNode": {
            "additionalProperties": false,
            "properties": {
                "custom_name": {
                    "type": "string"
                },
                "fixedProperties": {
                    "description": "Fixed properties in the query, can't be edited in the interface (e.g. scoping down by person)",
                    "items": {
                        "$ref": "#/definitions/AnyPropertyFilter"
                    },
                    "type": "array"
                },
                "kind": {
                    "$ref": "#/definitions/NodeKind"
                },
                "math": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/BaseMathType"
                        },
                        {
                            "$ref": "#/definitions/PropertyMathType"
                        },
                        {
                            "$ref": "#/definitions/CountPerActorMathType"
                        },
                        {
                            "$ref": "#/definitions/GroupMathType"
                        },
                        {
                            "$ref": "#/definitions/HogQLMathType"
                        }
                    ]
                },
                "math_group_type_index": {
                    "enum": [0, 1, 2, 3, 4],
                    "type": "number"
                },
                "math_hogql": {
                    "type": "string"
                },
                "math_property": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "properties": {
                    "description": "Properties configurable in the interface",
                    "items": {
                        "$ref": "#/definitions/AnyPropertyFilter"
                    },
                    "type": "array"
                },
                "response": {
                    "description": "Cached query response",
                    "type": "object"
                }
            },
            "required": ["kind"],
            "type": "object"
        },
        "EntityType": {
            "enum": ["actions", "events", "new_entity"],
            "type": "string"
        },
        "EventPropertyFilter": {
            "additionalProperties": false,
            "description": "Sync with plugin-server/src/types.ts",
            "properties": {
                "key": {
                    "type": "string"
                },
                "label": {
                    "type": "string"
                },
                "operator": {
                    "$ref": "#/definitions/PropertyOperator"
                },
                "type": {
                    "const": "event",
                    "description": "Event properties",
                    "type": "string"
                },
                "value": {
                    "$ref": "#/definitions/PropertyFilterValue"
                }
            },
            "required": ["key", "operator", "type"],
            "type": "object"
        },
        "EventType": {
            "additionalProperties": false,
            "properties": {
                "distinct_id": {
                    "type": "string"
                },
                "elements": {
                    "items": {
                        "$ref": "#/definitions/ElementType"
                    },
                    "type": "array"
                },
                "elements_chain": {
                    "type": ["string", "null"]
                },
                "event": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "person": {
                    "additionalProperties": false,
                    "properties": {
                        "distinct_ids": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "is_identified": {
                            "type": "boolean"
                        },
                        "properties": {
                            "type": "object"
                        }
                    },
                    "required": ["distinct_ids", "properties"],
                    "type": "object"
                },
                "properties": {
                    "type": "object"
                },
                "timestamp": {
                    "type": "string"
                },
                "uuid": {
                    "type": "string"
                }
            },
            "required": ["id", "distinct_id", "properties", "event", "timestamp", "elements"],
            "type": "object"
        },
        "EventsNode": {
            "additionalProperties": false,
            "properties": {
                "custom_name": {
                    "type": "string"
                },
                "event": {
                    "description": "The event or `null` for all events.",
                    "type": ["string", "null"]
                },
                "fixedProperties": {
                    "description": "Fixed properties in the query, can't be edited in the interface (e.g. scoping down by person)",
                    "items": {
                        "$ref": "#/definitions/AnyPropertyFilter"
                    },
                    "type": "array"
                },
                "kind": {
                    "const": "EventsNode",
                    "type": "string"
                },
                "limit": {
                    "type": "number"
                },
                "math": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/BaseMathType"
                        },
                        {
                            "$ref": "#/definitions/PropertyMathType"
                        },
                        {
                            "$ref": "#/definitions/CountPerActorMathType"
                        },
                        {
                            "$ref": "#/definitions/GroupMathType"
                        },
                        {
                            "$ref": "#/definitions/HogQLMathType"
                        }
                    ]
                },
                "math_group_type_index": {
                    "enum": [0, 1, 2, 3, 4],
                    "type": "number"
                },
                "math_hogql": {
                    "type": "string"
                },
                "math_property": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "orderBy": {
                    "description": "Columns to order by",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "properties": {
                    "description": "Properties configurable in the interface",
                    "items": {
                        "$ref": "#/definitions/AnyPropertyFilter"
                    },
                    "type": "array"
                },
                "response": {
                    "additionalProperties": false,
                    "description": "Return a limited set of data",
                    "properties": {
                        "next": {
                            "type": "string"
                        },
                        "results": {
                            "items": {
                                "$ref": "#/definitions/EventType"
                            },
                            "type": "array"
                        }
                    },
                    "required": ["results"],
                    "type": "object"
                }
            },
            "required": ["kind"],
            "type": "object"
        },
        "EventsQuery": {
            "additionalProperties": false,
            "properties": {
                "actionId": {
                    "description": "Show events matching a given action",
                    "type": "integer"
                },
                "after": {
                    "description": "Only fetch events that happened after this timestamp",
                    "type": "string"
                },
                "before": {
                    "description": "Only fetch events that happened before this timestamp",
                    "type": "string"
                },
                "event": {
                    "description": "Limit to events matching this string",
                    "type": ["string", "null"]
                },
                "fixedProperties": {
                    "description": "Fixed properties in the query, can't be edited in the interface (e.g. scoping down by person)",
                    "items": {
                        "$ref": "#/definitions/AnyPropertyFilter"
                    },
                    "type": "array"
                },
                "kind": {
                    "const": "EventsQuery",
                    "type": "string"
                },
                "limit": {
                    "description": "Number of rows to return",
                    "type": "integer"
                },
                "offset": {
                    "description": "Number of rows to skip before returning rows",
                    "type": "integer"
                },
                "orderBy": {
                    "description": "Columns to order by",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "personId": {
                    "description": "Show events for a given person",
                    "type": "string"
                },
                "properties": {
                    "description": "Properties configurable in the interface",
                    "items": {
                        "$ref": "#/definitions/AnyPropertyFilter"
                    },
                    "type": "array"
                },
                "response": {
                    "$ref": "#/definitions/EventsQueryResponse",
                    "description": "Cached query response"
                },
                "select": {
                    "description": "Return a limited set of data. Required.",
                    "items": {
                        "$ref": "#/definitions/HogQLExpression"
                    },
                    "type": "array"
                },
                "where": {
                    "description": "HogQL filters to apply on returned data",
                    "items": {
                        "$ref": "#/definitions/HogQLExpression"
                    },
                    "type": "array"
                }
            },
            "required": ["kind", "select"],
            "type": "object"
        },
        "EventsQueryPersonColumn": {
            "additionalProperties": false,
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "distinct_id": {
                    "type": "string"
                },
                "properties": {
                    "additionalProperties": false,
                    "properties": {
                        "email": {
                            "type": "string"
                        },
                        "name": {
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "uuid": {
                    "type": "string"
                }
            },
            "required": ["uuid", "created_at", "properties", "distinct_id"],
            "type": "object"
        },
        "EventsQueryResponse": {
            "additionalProperties": false,
            "properties": {
                "columns": {
                    "items": {},
                    "type": "array"
                },
                "hasMore": {
                    "type": "boolean"
                },
                "hogql": {
                    "type": "string"
                },
                "results": {
                    "items": {
                        "items": {},
                        "type": "array"
                    },
                    "type": "array"
                },
                "timings": {
                    "items": {
                        "$ref": "#/definitions/QueryTiming"
                    },
                    "type": "array"
                },
                "types": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": ["columns", "types", "results", "hogql"],
            "type": "object"
        },
        "FeaturePropertyFilter": {
            "additionalProperties": false,
            "properties": {
                "key": {
                    "type": "string"
                },
                "label": {
                    "type": "string"
                },
                "operator": {
                    "$ref": "#/definitions/PropertyOperator"
                },
                "type": {
                    "const": "feature",
                    "description": "Event property with \"$feature/\" prepended",
                    "type": "string"
                },
                "value": {
                    "$ref": "#/definitions/PropertyFilterValue"
                }
            },
            "required": ["key", "operator", "type"],
            "type": "object"
        },
        "FilterLogicalOperator": {
            "enum": ["AND", "OR"],
            "type": "string"
        },
        "FilterType": {
            "additionalProperties": false,
            "properties": {
                "actions": {
                    "items": {
                        "type": "object"
                    },
                    "type": "array"
                },
                "aggregation_group_type_index": {
                    "type": "number"
                },
                "breakdown": {
                    "$ref": "#/definitions/BreakdownKeyType"
                },
                "breakdown_group_type_index": {
                    "type": ["number", "null"]
                },
                "breakdown_normalize_url": {
                    "type": "boolean"
                },
                "breakdown_type": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/BreakdownType"
                        },
                        {
                            "type": "null"
                        }
                    ]
                },
                "breakdowns": {
                    "items": {
                        "$ref": "#/definitions/Breakdown"
                    },
                    "type": "array"
                },
                "date_from": {
                    "type": ["string", "null"]
                },
                "date_to": {
                    "type": ["string", "null"]
                },
                "entity_id": {
                    "type": ["string", "number"]
                },
                "entity_math": {
                    "type": "string"
                },
                "entity_type": {
                    "$ref": "#/definitions/EntityType"
                },
                "events": {
                    "items": {
                        "type": "object"
                    },
                    "type": "array"
                },
                "explicit_date": {
                    "description": "Whether the `date_from` and `date_to` should be used verbatim. Disables rounding to the start and end of period. Strings are cast to bools, e.g. \"true\" -> true.",
                    "type": ["boolean", "string", "null"]
                },
                "filter_test_accounts": {
                    "type": "boolean"
                },
                "from_dashboard": {
                    "type": ["boolean", "number"]
                },
                "insight": {
                    "$ref": "#/definitions/InsightType"
                },
                "interval": {
                    "$ref": "#/definitions/IntervalType"
                },
                "new_entity": {
                    "items": {
                        "type": "object"
                    },
                    "type": "array"
                },
                "properties": {
                    "anyOf": [
                        {
                            "items": {
                                "$ref": "#/definitions/AnyPropertyFilter"
                            },
                            "type": "array"
                        },
                        {
                            "$ref": "#/definitions/PropertyGroupFilter"
                        }
                    ]
                },
                "sampling_factor": {
                    "type": ["number", "null"]
                }
            },
            "type": "object"
        },
        "FunnelConversionWindowTimeUnit": {
            "enum": ["second", "minute", "hour", "day", "week", "month"],
            "type": "string"
        },
        "FunnelExclusion": {
            "additionalProperties": false,
            "properties": {
                "custom_name": {
                    "type": ["string", "null"]
                },
                "funnel_from_step": {
                    "type": "number"
                },
                "funnel_to_step": {
                    "type": "number"
                },
                "id": {
                    "type": ["string", "number", "null"]
                },
                "index": {
                    "type": "number"
                },
                "name": {
                    "type": ["string", "null"]
                },
                "order": {
                    "type": "number"
                },
                "type": {
                    "$ref": "#/definitions/EntityType"
                }
            },
            "type": "object"
        },
        "FunnelLayout": {
            "enum": ["horizontal", "vertical"],
            "type": "string"
        },
        "FunnelPathType": {
            "enum": ["funnel_path_before_step", "funnel_path_between_steps", "funnel_path_after_step"],
            "type": "string"
        },
        "FunnelStepReference": {
            "enum": ["total", "previous"],
            "type": "string"
        },
        "FunnelVizType": {
            "enum": ["steps", "time_to_convert", "trends"],
            "type": "string"
        },
        "FunnelsFilter": {
            "additionalProperties": false,
            "description": "`FunnelsFilterType` minus everything inherited from `FilterType` and persons modal related params and `hidden_legend_keys` replaced by `hidden_legend_breakdowns`",
            "properties": {
                "bin_count": {
                    "$ref": "#/definitions/BinCountValue"
                },
                "breakdown_attribution_type": {
                    "$ref": "#/definitions/BreakdownAttributionType"
                },
                "breakdown_attribution_value": {
                    "type": "number"
                },
                "exclusions": {
                    "items": {
                        "$ref": "#/definitions/FunnelExclusion"
                    },
                    "type": "array"
                },
                "funnel_aggregate_by_hogql": {
                    "type": "string"
                },
                "funnel_from_step": {
                    "type": "number"
                },
                "funnel_order_type": {
                    "$ref": "#/definitions/StepOrderValue"
                },
                "funnel_step_reference": {
                    "$ref": "#/definitions/FunnelStepReference"
                },
                "funnel_to_step": {
                    "type": "number"
                },
                "funnel_viz_type": {
                    "$ref": "#/definitions/FunnelVizType"
                },
                "funnel_window_interval": {
                    "type": "number"
                },
                "funnel_window_interval_unit": {
                    "$ref": "#/definitions/FunnelConversionWindowTimeUnit"
                },
                "hidden_legend_breakdowns": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "layout": {
                    "$ref": "#/definitions/FunnelLayout"
                }
            },
            "type": "object"
        },
        "FunnelsQuery": {
            "additionalProperties": false,
            "properties": {
                "aggregation_group_type_index": {
                    "description": "Groups aggregation",
                    "type": "number"
                },
                "breakdown": {
                    "$ref": "#/definitions/BreakdownFilter",
                    "description": "Breakdown of the events and actions"
                },
                "dateRange": {
                    "$ref": "#/definitions/DateRange",
                    "description": "Date range for the query"
                },
                "filterTestAccounts": {
                    "description": "Exclude internal and test users by applying the respective filters",
                    "type": "boolean"
                },
                "funnelsFilter": {
                    "$ref": "#/definitions/FunnelsFilter",
                    "description": "Properties specific to the funnels insight"
                },
                "interval": {
                    "$ref": "#/definitions/IntervalType",
                    "description": "Granularity of the response. Can be one of `hour`, `day`, `week` or `month`"
                },
                "kind": {
                    "const": "FunnelsQuery",
                    "type": "string"
                },
                "properties": {
                    "anyOf": [
                        {
                            "items": {
                                "$ref": "#/definitions/AnyPropertyFilter"
                            },
                            "type": "array"
                        },
                        {
                            "$ref": "#/definitions/PropertyGroupFilter"
                        }
                    ],
                    "description": "Property filters for all series"
                },
                "samplingFactor": {
                    "description": "Sampling rate",
                    "type": ["number", "null"]
                },
                "series": {
                    "description": "Events and actions to include",
                    "items": {
                        "anyOf": [
                            {
                                "$ref": "#/definitions/EventsNode"
                            },
                            {
                                "$ref": "#/definitions/ActionsNode"
                            }
                        ]
                    },
                    "type": "array"
                }
            },
            "required": ["kind", "series"],
            "type": "object"
        },
        "GroupMathType": {
            "const": "unique_group",
            "type": "string"
        },
        "GroupPropertyFilter": {
            "additionalProperties": false,
            "properties": {
                "group_type_index": {
                    "type": ["number", "null"]
                },
                "key": {
                    "type": "string"
                },
                "label": {
                    "type": "string"
                },
                "operator": {
                    "$ref": "#/definitions/PropertyOperator"
                },
                "type": {
                    "const": "group",
                    "type": "string"
                },
                "value": {
                    "$ref": "#/definitions/PropertyFilterValue"
                }
            },
            "required": ["key", "operator", "type"],
            "type": "object"
        },
        "HasPropertiesNode": {
            "anyOf": [
                {
                    "$ref": "#/definitions/EventsNode"
                },
                {
                    "$ref": "#/definitions/EventsQuery"
                },
                {
                    "$ref": "#/definitions/PersonsNode"
                }
            ]
        },
        "HogQLExpression": {
            "type": "string"
        },
        "HogQLFilters": {
            "additionalProperties": false,
            "description": "Filters object that will be converted to a HogQL {filters} placeholder",
            "properties": {
                "dateRange": {
                    "$ref": "#/definitions/DateRange"
                },
                "properties": {
                    "items": {
                        "$ref": "#/definitions/AnyPropertyFilter"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "HogQLMathType": {
            "const": "hogql",
            "type": "string"
        },
        "HogQLMetadata": {
            "additionalProperties": false,
            "properties": {
                "expr": {
                    "description": "HogQL expression to validate (use `select` or `expr`, but not both)",
                    "type": "string"
                },
                "filters": {
                    "$ref": "#/definitions/HogQLFilters"
                },
                "kind": {
                    "const": "HogQLMetadata",
                    "type": "string"
                },
                "response": {
                    "$ref": "#/definitions/HogQLMetadataResponse",
                    "description": "Cached query response"
                },
                "select": {
                    "description": "Full select query to validate (use `select` or `expr`, but not both)",
                    "type": "string"
                },
                "table": {
                    "description": "Table to validate the expression against",
                    "type": "string"
                }
            },
            "required": ["kind"],
            "type": "object"
        },
        "HogQLMetadataResponse": {
            "additionalProperties": false,
            "properties": {
                "errors": {
                    "items": {
                        "$ref": "#/definitions/HogQLNotice"
                    },
                    "type": "array"
                },
                "inputExpr": {
                    "type": "string"
                },
                "inputSelect": {
                    "type": "string"
                },
                "isValid": {
                    "type": "boolean"
                },
                "isValidView": {
                    "type": "boolean"
                },
                "notices": {
                    "items": {
                        "$ref": "#/definitions/HogQLNotice"
                    },
                    "type": "array"
                },
                "warnings": {
                    "items": {
                        "$ref": "#/definitions/HogQLNotice"
                    },
                    "type": "array"
                }
            },
            "required": ["errors", "warnings", "notices"],
            "type": "object"
        },
        "HogQLNotice": {
            "additionalProperties": false,
            "properties": {
                "end": {
                    "type": "integer"
                },
                "fix": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "start": {
                    "type": "integer"
                }
            },
            "required": ["message"],
            "type": "object"
        },
        "HogQLPropertyFilter": {
            "additionalProperties": false,
            "properties": {
                "key": {
                    "type": "string"
                },
                "label": {
                    "type": "string"
                },
                "type": {
                    "const": "hogql",
                    "type": "string"
                },
                "value": {
                    "$ref": "#/definitions/PropertyFilterValue"
                }
            },
            "required": ["key", "type"],
            "type": "object"
        },
        "HogQLQuery": {
            "additionalProperties": false,
            "properties": {
                "explain": {
                    "type": "boolean"
                },
                "filters": {
                    "$ref": "#/definitions/HogQLFilters"
                },
                "kind": {
                    "const": "HogQLQuery",
                    "type": "string"
                },
                "modifiers": {
                    "$ref": "#/definitions/HogQLQueryModifiers"
                },
                "query": {
                    "type": "string"
                },
                "response": {
                    "$ref": "#/definitions/HogQLQueryResponse",
                    "description": "Cached query response"
                },
                "values": {
                    "description": "Constant values that can be referenced with the {placeholder} syntax in the query",
                    "type": "object"
                }
            },
            "required": ["kind", "query"],
            "type": "object"
        },
        "HogQLQueryModifiers": {
            "additionalProperties": false,
            "description": "HogQL Query Options are automatically set per team. However, they can be overriden in the query.",
            "properties": {
                "inCohortVia": {
                    "enum": ["leftjoin", "subquery"],
                    "type": "string"
                },
                "personsArgMaxVersion": {
                    "enum": ["auto", "v1", "v2"],
                    "type": "string"
                },
                "personsOnEventsMode": {
                    "enum": ["disabled", "v1_enabled", "v1_mixed", "v2_enabled"],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "HogQLQueryResponse": {
            "additionalProperties": false,
            "properties": {
                "clickhouse": {
                    "type": "string"
                },
                "columns": {
                    "items": {},
                    "type": "array"
                },
                "explain": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "hogql": {
                    "type": "string"
                },
                "modifiers": {
                    "$ref": "#/definitions/HogQLQueryModifiers"
                },
                "query": {
                    "type": "string"
                },
                "results": {
                    "items": {},
                    "type": "array"
                },
                "timings": {
                    "items": {
                        "$ref": "#/definitions/QueryTiming"
                    },
                    "type": "array"
                },
                "types": {
                    "items": {},
                    "type": "array"
                }
            },
            "type": "object"
        },
        "InsightFilter": {
            "anyOf": [
                {
                    "$ref": "#/definitions/TrendsFilter"
                },
                {
                    "$ref": "#/definitions/FunnelsFilter"
                },
                {
                    "$ref": "#/definitions/RetentionFilter"
                },
                {
                    "$ref": "#/definitions/PathsFilter"
                },
                {
                    "$ref": "#/definitions/StickinessFilter"
                },
                {
                    "$ref": "#/definitions/LifecycleFilter"
                }
            ]
        },
        "InsightFilterProperty": {
            "enum": [
                "trendsFilter",
                "funnelsFilter",
                "retentionFilter",
                "pathsFilter",
                "stickinessFilter",
                "lifecycleFilter"
            ],
            "type": "string"
        },
        "InsightNodeKind": {
            "enum": [
                "TrendsQuery",
                "FunnelsQuery",
                "RetentionQuery",
                "PathsQuery",
                "StickinessQuery",
                "LifecycleQuery"
            ],
            "type": "string"
        },
        "InsightPersonsQuery": {
            "additionalProperties": false,
            "properties": {
                "day": {
                    "type": "string"
                },
                "kind": {
                    "const": "InsightPersonsQuery",
                    "type": "string"
                },
                "response": {
                    "$ref": "#/definitions/PersonsQueryResponse"
                },
                "source": {
                    "$ref": "#/definitions/InsightQueryNode"
                },
                "status": {
                    "type": "string"
                }
            },
            "required": ["kind", "source"],
            "type": "object"
        },
        "InsightQueryNode": {
            "anyOf": [
                {
                    "$ref": "#/definitions/TrendsQuery"
                },
                {
                    "$ref": "#/definitions/FunnelsQuery"
                },
                {
                    "$ref": "#/definitions/RetentionQuery"
                },
                {
                    "$ref": "#/definitions/PathsQuery"
                },
                {
                    "$ref": "#/definitions/StickinessQuery"
                },
                {
                    "$ref": "#/definitions/LifecycleQuery"
                }
            ]
        },
        "InsightShortId": {
            "type": "string"
        },
        "InsightType": {
            "enum": ["TRENDS", "STICKINESS", "LIFECYCLE", "FUNNELS", "RETENTION", "PATHS", "JSON", "SQL"],
            "type": "string"
        },
        "InsightVizNode": {
            "additionalProperties": false,
            "properties": {
                "embedded": {
                    "description": "Query is embedded inside another bordered component",
                    "type": "boolean"
                },
                "full": {
                    "description": "Show with most visual options enabled. Used in insight scene.",
                    "type": "boolean"
                },
                "kind": {
                    "const": "InsightVizNode",
                    "type": "string"
                },
                "showCorrelationTable": {
                    "type": "boolean"
                },
                "showFilters": {
                    "type": "boolean"
                },
                "showHeader": {
                    "type": "boolean"
                },
                "showLastComputation": {
                    "type": "boolean"
                },
                "showLastComputationRefresh": {
                    "type": "boolean"
                },
                "showResults": {
                    "type": "boolean"
                },
                "showTable": {
                    "type": "boolean"
                },
                "source": {
                    "$ref": "#/definitions/InsightQueryNode"
                }
            },
            "required": ["kind", "source"],
            "type": "object"
        },
        "InsightsQueryBase": {
            "additionalProperties": false,
            "description": "Base class for insight query nodes. Should not be used directly.",
            "properties": {
                "aggregation_group_type_index": {
                    "description": "Groups aggregation",
                    "type": "number"
                },
                "dateRange": {
                    "$ref": "#/definitions/DateRange",
                    "description": "Date range for the query"
                },
                "filterTestAccounts": {
                    "description": "Exclude internal and test users by applying the respective filters",
                    "type": "boolean"
                },
                "kind": {
                    "$ref": "#/definitions/NodeKind"
                },
                "properties": {
                    "anyOf": [
                        {
                            "items": {
                                "$ref": "#/definitions/AnyPropertyFilter"
                            },
                            "type": "array"
                        },
                        {
                            "$ref": "#/definitions/PropertyGroupFilter"
                        }
                    ],
                    "description": "Property filters for all series"
                },
                "samplingFactor": {
                    "description": "Sampling rate",
                    "type": ["number", "null"]
                }
            },
            "required": ["kind"],
            "type": "object"
        },
        "IntervalType": {
            "enum": ["hour", "day", "week", "month"],
            "type": "string"
        },
        "LifecycleFilter": {
            "additionalProperties": false,
            "description": "`LifecycleFilterType` minus everything inherited from `FilterType`",
            "properties": {
                "show_values_on_series": {
                    "type": "boolean"
                },
                "toggledLifecycles": {
                    "items": {
                        "$ref": "#/definitions/LifecycleToggle"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "LifecycleQuery": {
            "additionalProperties": false,
            "properties": {
                "aggregation_group_type_index": {
                    "description": "Groups aggregation",
                    "type": "number"
                },
                "dateRange": {
                    "$ref": "#/definitions/DateRange",
                    "description": "Date range for the query"
                },
                "filterTestAccounts": {
                    "description": "Exclude internal and test users by applying the respective filters",
                    "type": "boolean"
                },
                "interval": {
                    "$ref": "#/definitions/IntervalType",
                    "description": "Granularity of the response. Can be one of `hour`, `day`, `week` or `month`"
                },
                "kind": {
                    "const": "LifecycleQuery",
                    "type": "string"
                },
                "lifecycleFilter": {
                    "$ref": "#/definitions/LifecycleFilter",
                    "description": "Properties specific to the lifecycle insight"
                },
                "properties": {
                    "anyOf": [
                        {
                            "items": {
                                "$ref": "#/definitions/AnyPropertyFilter"
                            },
                            "type": "array"
                        },
                        {
                            "$ref": "#/definitions/PropertyGroupFilter"
                        }
                    ],
                    "description": "Property filters for all series"
                },
                "response": {
                    "$ref": "#/definitions/LifecycleQueryResponse"
                },
                "samplingFactor": {
                    "description": "Sampling rate",
                    "type": ["number", "null"]
                },
                "series": {
                    "description": "Events and actions to include",
                    "items": {
                        "anyOf": [
                            {
                                "$ref": "#/definitions/EventsNode"
                            },
                            {
                                "$ref": "#/definitions/ActionsNode"
                            }
                        ]
                    },
                    "type": "array"
                }
            },
            "required": ["kind", "series"],
            "type": "object"
        },
        "LifecycleQueryResponse": {
            "additionalProperties": false,
            "properties": {
                "hogql": {
                    "type": "string"
                },
                "is_cached": {
                    "type": "boolean"
                },
                "last_refresh": {
                    "type": "string"
                },
                "next_allowed_client_refresh": {
                    "type": "string"
                },
                "results": {
                    "items": {
                        "type": "object"
                    },
                    "type": "array"
                },
                "timings": {
                    "items": {
                        "$ref": "#/definitions/QueryTiming"
                    },
                    "type": "array"
                }
            },
            "required": ["results"],
            "type": "object"
        },
        "LifecycleToggle": {
            "enum": ["new", "resurrecting", "returning", "dormant"],
            "type": "string"
        },
        "NamedParameters<typeof dateRangeForFilter>": {
            "additionalProperties": false,
            "properties": {
                "source": {
                    "$ref": "#/definitions/FilterType"
                }
            },
            "type": "object"
        },
        "Node": {
            "additionalProperties": false,
            "description": "Node base class, everything else inherits from here",
            "properties": {
                "kind": {
                    "$ref": "#/definitions/NodeKind"
                }
            },
            "required": ["kind"],
            "type": "object"
        },
        "NodeKind": {
            "description": "PostHog Query Schema definition.\n\nThis file acts as the source of truth for:\n\n- frontend/src/queries/schema.json   - generated from typescript via \"pnpm run generate:schema:json\"\n\n- posthog/schema.py   - generated from json the above json via \"pnpm run generate:schema:python\"",
            "enum": [
                "EventsNode",
                "ActionsNode",
                "EventsQuery",
                "PersonsNode",
                "HogQLQuery",
                "HogQLMetadata",
                "PersonsQuery",
                "SessionsTimelineQuery",
                "DataTableNode",
                "SavedInsightNode",
                "InsightVizNode",
                "TrendsQuery",
                "FunnelsQuery",
                "RetentionQuery",
                "PathsQuery",
                "StickinessQuery",
                "LifecycleQuery",
                "InsightPersonsQuery",
                "WebOverviewQuery",
                "WebTopClicksQuery",
                "WebStatsTableQuery",
                "TimeToSeeDataSessionsQuery",
                "TimeToSeeDataQuery",
                "TimeToSeeDataSessionsJSONNode",
                "TimeToSeeDataSessionsWaterfallNode",
                "DatabaseSchemaQuery"
            ],
            "type": "string"
        },
        "PathCleaningFilter": {
            "additionalProperties": false,
            "properties": {
                "alias": {
                    "type": "string"
                },
                "regex": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "PathType": {
            "enum": ["$pageview", "$screen", "custom_event", "hogql"],
            "type": "string"
        },
        "PathsFilter": {
            "additionalProperties": false,
            "description": "`PathsFilterType` minus everything inherited from `FilterType` and persons modal related params",
            "properties": {
                "edge_limit": {
                    "type": "number"
                },
                "end_point": {
                    "type": "string"
                },
                "exclude_events": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "funnel_filter": {
                    "type": "object"
                },
                "funnel_paths": {
                    "$ref": "#/definitions/FunnelPathType"
                },
                "include_event_types": {
                    "items": {
                        "$ref": "#/definitions/PathType"
                    },
                    "type": "array"
                },
                "local_path_cleaning_filters": {
                    "items": {
                        "$ref": "#/definitions/PathCleaningFilter"
                    },
                    "type": "array"
                },
                "max_edge_weight": {
                    "type": "number"
                },
                "min_edge_weight": {
                    "type": "number"
                },
                "path_groupings": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "path_replacements": {
                    "type": "boolean"
                },
                "path_type": {
                    "$ref": "#/definitions/PathType"
                },
                "paths_hogql_expression": {
                    "type": "string"
                },
                "start_point": {
                    "type": "string"
                },
                "step_limit": {
                    "type": "number"
                }
            },
            "type": "object"
        },
        "PathsQuery": {
            "additionalProperties": false,
            "properties": {
                "aggregation_group_type_index": {
                    "description": "Groups aggregation",
                    "type": "number"
                },
                "dateRange": {
                    "$ref": "#/definitions/DateRange",
                    "description": "Date range for the query"
                },
                "filterTestAccounts": {
                    "description": "Exclude internal and test users by applying the respective filters",
                    "type": "boolean"
                },
                "kind": {
                    "const": "PathsQuery",
                    "type": "string"
                },
                "pathsFilter": {
                    "$ref": "#/definitions/PathsFilter",
                    "description": "Properties specific to the paths insight"
                },
                "properties": {
                    "anyOf": [
                        {
                            "items": {
                                "$ref": "#/definitions/AnyPropertyFilter"
                            },
                            "type": "array"
                        },
                        {
                            "$ref": "#/definitions/PropertyGroupFilter"
                        }
                    ],
                    "description": "Property filters for all series"
                },
                "samplingFactor": {
                    "description": "Sampling rate",
                    "type": ["number", "null"]
                }
            },
            "required": ["kind"],
            "type": "object"
        },
        "PersonPropertyFilter": {
            "additionalProperties": false,
            "description": "Sync with plugin-server/src/types.ts",
            "properties": {
                "key": {
                    "type": "string"
                },
                "label": {
                    "type": "string"
                },
                "operator": {
                    "$ref": "#/definitions/PropertyOperator"
                },
                "type": {
                    "const": "person",
                    "description": "Person properties",
                    "type": "string"
                },
                "value": {
                    "$ref": "#/definitions/PropertyFilterValue"
                }
            },
            "required": ["key", "operator", "type"],
            "type": "object"
        },
        "PersonsNode": {
            "additionalProperties": false,
            "properties": {
                "cohort": {
                    "type": "number"
                },
                "distinctId": {
                    "type": "string"
                },
                "fixedProperties": {
                    "description": "Fixed properties in the query, can't be edited in the interface (e.g. scoping down by person)",
                    "items": {
                        "$ref": "#/definitions/AnyPropertyFilter"
                    },
                    "type": "array"
                },
                "kind": {
                    "const": "PersonsNode",
                    "type": "string"
                },
                "limit": {
                    "type": "number"
                },
                "offset": {
                    "type": "number"
                },
                "properties": {
                    "description": "Properties configurable in the interface",
                    "items": {
                        "$ref": "#/definitions/AnyPropertyFilter"
                    },
                    "type": "array"
                },
                "response": {
                    "description": "Cached query response",
                    "type": "object"
                },
                "search": {
                    "type": "string"
                }
            },
            "required": ["kind"],
            "type": "object"
        },
        "PersonsQuery": {
            "additionalProperties": false,
            "properties": {
                "fixedProperties": {
                    "items": {
                        "$ref": "#/definitions/AnyPropertyFilter"
                    },
                    "type": "array"
                },
                "kind": {
                    "const": "PersonsQuery",
                    "type": "string"
                },
                "limit": {
                    "type": "number"
                },
                "offset": {
                    "type": "number"
                },
                "orderBy": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "properties": {
                    "items": {
                        "$ref": "#/definitions/AnyPropertyFilter"
                    },
                    "type": "array"
                },
                "response": {
                    "$ref": "#/definitions/PersonsQueryResponse",
                    "description": "Cached query response"
                },
                "search": {
                    "type": "string"
                },
                "select": {
                    "items": {
                        "$ref": "#/definitions/HogQLExpression"
                    },
                    "type": "array"
                },
                "source": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/InsightPersonsQuery"
                        },
                        {
                            "$ref": "#/definitions/HogQLQuery"
                        }
                    ]
                }
            },
            "required": ["kind"],
            "type": "object"
        },
        "PersonsQueryResponse": {
            "additionalProperties": false,
            "properties": {
                "columns": {
                    "items": {},
                    "type": "array"
                },
                "hasMore": {
                    "type": "boolean"
                },
                "hogql": {
                    "type": "string"
                },
                "results": {
                    "items": {
                        "items": {},
                        "type": "array"
                    },
                    "type": "array"
                },
                "timings": {
                    "items": {
                        "$ref": "#/definitions/QueryTiming"
                    },
                    "type": "array"
                },
                "types": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": ["results", "columns", "types", "hogql"],
            "type": "object"
        },
        "PropertyFilterType": {
            "enum": [
                "meta",
                "event",
                "person",
                "element",
                "feature",
                "session",
                "cohort",
                "recording",
                "group",
                "hogql"
            ],
            "type": "string"
        },
        "PropertyFilterValue": {
            "anyOf": [
                {
                    "type": "string"
                },
                {
                    "type": "number"
                },
                {
                    "items": {
                        "type": ["string", "number"]
                    },
                    "type": "array"
                },
                {
                    "type": "null"
                }
            ]
        },
        "PropertyGroupFilter": {
            "additionalProperties": false,
            "properties": {
                "type": {
                    "$ref": "#/definitions/FilterLogicalOperator"
                },
                "values": {
                    "items": {
                        "$ref": "#/definitions/PropertyGroupFilterValue"
                    },
                    "type": "array"
                }
            },
            "required": ["type", "values"],
            "type": "object"
        },
        "PropertyGroupFilterValue": {
            "additionalProperties": false,
            "properties": {
                "type": {
                    "$ref": "#/definitions/FilterLogicalOperator"
                },
                "values": {
                    "items": {
                        "anyOf": [
                            {
                                "$ref": "#/definitions/AnyPropertyFilter"
                            },
                            {
                                "$ref": "#/definitions/PropertyGroupFilterValue"
                            }
                        ]
                    },
                    "type": "array"
                }
            },
            "required": ["type", "values"],
            "type": "object"
        },
        "PropertyMathType": {
            "enum": ["avg", "sum", "min", "max", "median", "p90", "p95", "p99"],
            "type": "string"
        },
        "PropertyOperator": {
            "description": "Sync with plugin-server/src/types.ts",
            "enum": [
                "exact",
                "is_not",
                "icontains",
                "not_icontains",
                "regex",
                "not_regex",
                "gt",
                "gte",
                "lt",
                "lte",
                "is_set",
                "is_not_set",
                "is_date_exact",
                "is_date_before",
                "is_date_after",
                "between",
                "not_between",
                "min",
                "max"
            ],
            "type": "string"
        },
        "QueryResponse": {
            "additionalProperties": false,
            "properties": {
                "hogql": {
                    "type": "string"
                },
                "is_cached": {
                    "type": "boolean"
                },
                "last_refresh": {
                    "type": "string"
                },
                "next_allowed_client_refresh": {
                    "type": "string"
                },
                "results": {
                    "items": {},
                    "type": "array"
                },
                "timings": {
                    "items": {
                        "$ref": "#/definitions/QueryTiming"
                    },
                    "type": "array"
                }
            },
            "required": ["results"],
            "type": "object"
        },
        "QuerySchema": {
            "anyOf": [
                {
                    "$ref": "#/definitions/AnyDataNode"
                },
                {
                    "$ref": "#/definitions/DataTableNode"
                },
                {
                    "$ref": "#/definitions/SavedInsightNode"
                },
                {
                    "$ref": "#/definitions/InsightVizNode"
                },
                {
                    "$ref": "#/definitions/TrendsQuery"
                },
                {
                    "$ref": "#/definitions/FunnelsQuery"
                },
                {
                    "$ref": "#/definitions/RetentionQuery"
                },
                {
                    "$ref": "#/definitions/PathsQuery"
                },
                {
                    "$ref": "#/definitions/StickinessQuery"
                },
                {
                    "$ref": "#/definitions/LifecycleQuery"
                },
                {
                    "$ref": "#/definitions/TimeToSeeDataSessionsQuery"
                },
                {
                    "$ref": "#/definitions/DatabaseSchemaQuery"
                }
            ]
        },
        "QueryTiming": {
            "additionalProperties": false,
            "properties": {
                "k": {
                    "description": "Key. Shortened to 'k' to save on data.",
                    "type": "string"
                },
                "t": {
                    "description": "Time in seconds. Shortened to 't' to save on data.",
                    "type": "number"
                }
            },
            "required": ["k", "t"],
            "type": "object"
        },
        "RecordingDurationFilter": {
            "additionalProperties": false,
            "properties": {
                "key": {
                    "const": "duration",
                    "type": "string"
                },
                "label": {
                    "type": "string"
                },
                "operator": {
                    "$ref": "#/definitions/PropertyOperator"
                },
                "type": {
                    "const": "recording",
                    "type": "string"
                },
                "value": {
                    "type": "number"
                }
            },
            "required": ["key", "operator", "type", "value"],
            "type": "object"
        },
        "RetentionFilter": {
            "additionalProperties": false,
            "description": "`RetentionFilterType` minus everything inherited from `FilterType`",
            "properties": {
                "period": {
                    "$ref": "#/definitions/RetentionPeriod"
                },
                "retention_reference": {
                    "enum": ["total", "previous"],
                    "type": "string"
                },
                "retention_type": {
                    "$ref": "#/definitions/RetentionType"
                },
                "returning_entity": {
                    "type": "object"
                },
                "target_entity": {
                    "type": "object"
                },
                "total_intervals": {
                    "type": "number"
                }
            },
            "type": "object"
        },
        "RetentionPeriod": {
            "enum": ["Hour", "Day", "Week", "Month"],
            "type": "string"
        },
        "RetentionQuery": {
            "additionalProperties": false,
            "properties": {
                "aggregation_group_type_index": {
                    "description": "Groups aggregation",
                    "type": "number"
                },
                "dateRange": {
                    "$ref": "#/definitions/DateRange",
                    "description": "Date range for the query"
                },
                "filterTestAccounts": {
                    "description": "Exclude internal and test users by applying the respective filters",
                    "type": "boolean"
                },
                "kind": {
                    "const": "RetentionQuery",
                    "type": "string"
                },
                "properties": {
                    "anyOf": [
                        {
                            "items": {
                                "$ref": "#/definitions/AnyPropertyFilter"
                            },
                            "type": "array"
                        },
                        {
                            "$ref": "#/definitions/PropertyGroupFilter"
                        }
                    ],
                    "description": "Property filters for all series"
                },
                "retentionFilter": {
                    "$ref": "#/definitions/RetentionFilter",
                    "description": "Properties specific to the retention insight"
                },
                "samplingFactor": {
                    "description": "Sampling rate",
                    "type": ["number", "null"]
                }
            },
            "required": ["kind"],
            "type": "object"
        },
        "RetentionType": {
            "enum": ["retention_recurring", "retention_first_time"],
            "type": "string"
        },
        "SavedInsightNode": {
            "additionalProperties": false,
            "properties": {
                "allowSorting": {
                    "description": "Can the user click on column headers to sort the table? (default: true)",
                    "type": "boolean"
                },
                "embedded": {
                    "description": "Query is embedded inside another bordered component",
                    "type": "boolean"
                },
                "expandable": {
                    "description": "Can expand row to show raw event data (default: true)",
                    "type": "boolean"
                },
                "full": {
                    "description": "Show with most visual options enabled. Used in insight scene.",
                    "type": "boolean"
                },
                "kind": {
                    "const": "SavedInsightNode",
                    "type": "string"
                },
                "propertiesViaUrl": {
                    "description": "Link properties via the URL (default: false)",
                    "type": "boolean"
                },
                "shortId": {
                    "$ref": "#/definitions/InsightShortId"
                },
                "showActions": {
                    "description": "Show the kebab menu at the end of the row",
                    "type": "boolean"
                },
                "showColumnConfigurator": {
                    "description": "Show a button to configure the table's columns if possible",
                    "type": "boolean"
                },
                "showCorrelationTable": {
                    "type": "boolean"
                },
                "showDateRange": {
                    "description": "Show date range selector",
                    "type": "boolean"
                },
                "showElapsedTime": {
                    "description": "Show the time it takes to run a query",
                    "type": "boolean"
                },
                "showEventFilter": {
                    "description": "Include an event filter above the table (EventsNode only)",
                    "type": "boolean"
                },
                "showExport": {
                    "description": "Show the export button",
                    "type": "boolean"
                },
                "showFilters": {
                    "type": "boolean"
                },
                "showHeader": {
                    "type": "boolean"
                },
                "showHogQLEditor": {
                    "description": "Include a HogQL query editor above HogQL tables",
                    "type": "boolean"
                },
                "showLastComputation": {
                    "type": "boolean"
                },
                "showLastComputationRefresh": {
                    "type": "boolean"
                },
                "showOpenEditorButton": {
                    "description": "Show a button to open the current query as a new insight. (default: true)",
                    "type": "boolean"
                },
                "showPersistentColumnConfigurator": {
                    "description": "Show a button to configure and persist the table's default columns if possible",
                    "type": "boolean"
                },
                "showPropertyFilter": {
                    "description": "Include a property filter above the table",
                    "type": "boolean"
                },
                "showReload": {
                    "description": "Show a reload button",
                    "type": "boolean"
                },
                "showResults": {
                    "type": "boolean"
                },
                "showResultsTable": {
                    "description": "Show a results table",
                    "type": "boolean"
                },
                "showSavedQueries": {
                    "description": "Shows a list of saved queries",
                    "type": "boolean"
                },
                "showSearch": {
                    "description": "Include a free text search field (PersonsNode only)",
                    "type": "boolean"
                },
                "showTable": {
                    "type": "boolean"
                },
                "showTimings": {
                    "description": "Show a detailed query timing breakdown",
                    "type": "boolean"
                }
            },
            "required": ["kind", "shortId"],
            "type": "object"
        },
        "SessionPropertyFilter": {
            "additionalProperties": false,
            "properties": {
                "key": {
                    "const": "$session_duration",
                    "type": "string"
                },
                "label": {
                    "type": "string"
                },
                "operator": {
                    "$ref": "#/definitions/PropertyOperator"
                },
                "type": {
                    "const": "session",
                    "type": "string"
                },
                "value": {
                    "$ref": "#/definitions/PropertyFilterValue"
                }
            },
            "required": ["key", "operator", "type"],
            "type": "object"
        },
        "SessionsTimelineQuery": {
            "additionalProperties": false,
            "properties": {
                "after": {
                    "description": "Only fetch sessions that started after this timestamp (default: '-24h')",
                    "type": "string"
                },
                "before": {
                    "description": "Only fetch sessions that started before this timestamp (default: '+5s')",
                    "type": "string"
                },
                "kind": {
                    "const": "SessionsTimelineQuery",
                    "type": "string"
                },
                "personId": {
                    "description": "Fetch sessions only for a given person",
                    "type": "string"
                },
                "response": {
                    "$ref": "#/definitions/SessionsTimelineQueryResponse",
                    "description": "Cached query response"
                }
            },
            "required": ["kind"],
            "type": "object"
        },
        "SessionsTimelineQueryResponse": {
            "additionalProperties": false,
            "properties": {
                "hasMore": {
                    "type": "boolean"
                },
                "hogql": {
                    "type": "string"
                },
                "results": {
                    "items": {
                        "$ref": "#/definitions/TimelineEntry"
                    },
                    "type": "array"
                },
                "timings": {
                    "items": {
                        "$ref": "#/definitions/QueryTiming"
                    },
                    "type": "array"
                }
            },
            "required": ["results"],
            "type": "object"
        },
        "StepOrderValue": {
            "enum": ["strict", "unordered", "ordered"],
            "type": "string"
        },
        "StickinessFilter": {
            "additionalProperties": false,
            "description": "`StickinessFilterType` minus everything inherited from `FilterType` and persons modal related params and `hidden_legend_keys` replaced by `hidden_legend_indexes`",
            "properties": {
                "compare": {
                    "type": "boolean"
                },
                "display": {
                    "$ref": "#/definitions/ChartDisplayType"
                },
                "hidden_legend_indexes": {
                    "items": {
                        "type": "number"
                    },
                    "type": "array"
                },
                "show_legend": {
                    "type": "boolean"
                },
                "show_values_on_series": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "StickinessQuery": {
            "additionalProperties": false,
            "properties": {
                "aggregation_group_type_index": {
                    "description": "Groups aggregation",
                    "type": "number"
                },
                "dateRange": {
                    "$ref": "#/definitions/DateRange",
                    "description": "Date range for the query"
                },
                "filterTestAccounts": {
                    "description": "Exclude internal and test users by applying the respective filters",
                    "type": "boolean"
                },
                "interval": {
                    "$ref": "#/definitions/IntervalType",
                    "description": "Granularity of the response. Can be one of `hour`, `day`, `week` or `month`"
                },
                "kind": {
                    "const": "StickinessQuery",
                    "type": "string"
                },
                "properties": {
                    "anyOf": [
                        {
                            "items": {
                                "$ref": "#/definitions/AnyPropertyFilter"
                            },
                            "type": "array"
                        },
                        {
                            "$ref": "#/definitions/PropertyGroupFilter"
                        }
                    ],
                    "description": "Property filters for all series"
                },
                "samplingFactor": {
                    "description": "Sampling rate",
                    "type": ["number", "null"]
                },
                "series": {
                    "description": "Events and actions to include",
                    "items": {
                        "anyOf": [
                            {
                                "$ref": "#/definitions/EventsNode"
                            },
                            {
                                "$ref": "#/definitions/ActionsNode"
                            }
                        ]
                    },
                    "type": "array"
                },
                "stickinessFilter": {
                    "$ref": "#/definitions/StickinessFilter",
                    "description": "Properties specific to the stickiness insight"
                }
            },
            "required": ["kind", "series"],
            "type": "object"
        },
        "TimeToSeeDataJSONNode": {
            "additionalProperties": false,
            "properties": {
                "kind": {
                    "const": "TimeToSeeDataSessionsJSONNode",
                    "type": "string"
                },
                "source": {
                    "$ref": "#/definitions/TimeToSeeDataQuery"
                }
            },
            "required": ["kind", "source"],
            "type": "object"
        },
        "TimeToSeeDataNode": {
            "anyOf": [
                {
                    "$ref": "#/definitions/TimeToSeeDataJSONNode"
                },
                {
                    "$ref": "#/definitions/TimeToSeeDataWaterfallNode"
                }
            ]
        },
        "TimeToSeeDataQuery": {
            "additionalProperties": false,
            "properties": {
                "kind": {
                    "const": "TimeToSeeDataQuery",
                    "type": "string"
                },
                "response": {
                    "description": "Cached query response",
                    "type": "object"
                },
                "sessionEnd": {
                    "type": "string"
                },
                "sessionId": {
                    "description": "Project to filter on. Defaults to current session",
                    "type": "string"
                },
                "sessionStart": {
                    "description": "Session start time. Defaults to current time - 2 hours",
                    "type": "string"
                },
                "teamId": {
                    "description": "Project to filter on. Defaults to current project",
                    "type": "number"
                }
            },
            "required": ["kind"],
            "type": "object"
        },
        "TimeToSeeDataSessionsQuery": {
            "additionalProperties": false,
            "properties": {
                "dateRange": {
                    "$ref": "#/definitions/DateRange",
                    "description": "Date range for the query"
                },
                "kind": {
                    "const": "TimeToSeeDataSessionsQuery",
                    "type": "string"
                },
                "response": {
                    "$ref": "#/definitions/TimeToSeeDataSessionsQueryResponse",
                    "description": "Cached query response"
                },
                "teamId": {
                    "description": "Project to filter on. Defaults to current project",
                    "type": "number"
                }
            },
            "required": ["kind"],
            "type": "object"
        },
        "TimeToSeeDataSessionsQueryResponse": {
            "additionalProperties": false,
            "properties": {
                "results": {
                    "items": {
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "required": ["results"],
            "type": "object"
        },
        "TimeToSeeDataWaterfallNode": {
            "additionalProperties": false,
            "properties": {
                "kind": {
                    "const": "TimeToSeeDataSessionsWaterfallNode",
                    "type": "string"
                },
                "source": {
                    "$ref": "#/definitions/TimeToSeeDataQuery"
                }
            },
            "required": ["kind", "source"],
            "type": "object"
        },
        "TimelineEntry": {
            "additionalProperties": false,
            "properties": {
                "events": {
                    "items": {
                        "$ref": "#/definitions/EventType"
                    },
                    "type": "array"
                },
                "recording_duration_s": {
                    "description": "Duration of the recording in seconds.",
                    "type": "number"
                },
                "sessionId": {
                    "description": "Session ID. None means out-of-session events",
                    "type": "string"
                }
            },
            "required": ["events"],
            "type": "object"
        },
        "TrendsFilter": {
            "additionalProperties": false,
            "description": "`TrendsFilterType` minus everything inherited from `FilterType` and `hidden_legend_keys` replaced by `hidden_legend_indexes`",
            "properties": {
                "aggregation_axis_format": {
                    "$ref": "#/definitions/AggregationAxisFormat"
                },
                "aggregation_axis_postfix": {
                    "type": "string"
                },
                "aggregation_axis_prefix": {
                    "type": "string"
                },
                "breakdown_histogram_bin_count": {
                    "type": "number"
                },
                "compare": {
                    "type": "boolean"
                },
                "display": {
                    "$ref": "#/definitions/ChartDisplayType"
                },
                "formula": {
                    "type": "string"
                },
                "hidden_legend_indexes": {
                    "items": {
                        "type": "number"
                    },
                    "type": "array"
                },
                "show_legend": {
                    "type": "boolean"
                },
                "show_percent_stack_view": {
                    "type": "boolean"
                },
                "show_values_on_series": {
                    "type": "boolean"
                },
                "smoothing_intervals": {
                    "type": "number"
                }
            },
            "type": "object"
        },
        "TrendsQuery": {
            "additionalProperties": false,
            "properties": {
                "aggregation_group_type_index": {
                    "description": "Groups aggregation",
                    "type": "number"
                },
                "breakdown": {
                    "$ref": "#/definitions/BreakdownFilter",
                    "description": "Breakdown of the events and actions"
                },
                "dateRange": {
                    "$ref": "#/definitions/DateRange",
                    "description": "Date range for the query"
                },
                "filterTestAccounts": {
                    "description": "Exclude internal and test users by applying the respective filters",
                    "type": "boolean"
                },
                "interval": {
                    "$ref": "#/definitions/IntervalType",
                    "description": "Granularity of the response. Can be one of `hour`, `day`, `week` or `month`"
                },
                "kind": {
                    "const": "TrendsQuery",
                    "type": "string"
                },
                "properties": {
                    "anyOf": [
                        {
                            "items": {
                                "$ref": "#/definitions/AnyPropertyFilter"
                            },
                            "type": "array"
                        },
                        {
                            "$ref": "#/definitions/PropertyGroupFilter"
                        }
                    ],
                    "description": "Property filters for all series"
                },
                "response": {
                    "$ref": "#/definitions/TrendsQueryResponse"
                },
                "samplingFactor": {
                    "description": "Sampling rate",
                    "type": ["number", "null"]
                },
                "series": {
                    "description": "Events and actions to include",
                    "items": {
                        "anyOf": [
                            {
                                "$ref": "#/definitions/EventsNode"
                            },
                            {
                                "$ref": "#/definitions/ActionsNode"
                            }
                        ]
                    },
                    "type": "array"
                },
                "trendsFilter": {
                    "$ref": "#/definitions/TrendsFilter",
                    "description": "Properties specific to the trends insight"
                }
            },
            "required": ["kind", "series"],
            "type": "object"
        },
        "TrendsQueryResponse": {
            "additionalProperties": false,
            "properties": {
                "hogql": {
                    "type": "string"
                },
                "is_cached": {
                    "type": "boolean"
                },
                "last_refresh": {
                    "type": "string"
                },
                "next_allowed_client_refresh": {
                    "type": "string"
                },
                "results": {
                    "items": {
                        "type": "object"
                    },
                    "type": "array"
                },
                "timings": {
                    "items": {
                        "$ref": "#/definitions/QueryTiming"
                    },
                    "type": "array"
                }
            },
            "required": ["results"],
            "type": "object"
        },
        "WebAnalyticsPropertyFilters": {
            "items": {
                "anyOf": [
                    {
                        "$ref": "#/definitions/EventPropertyFilter"
                    },
                    {
                        "$ref": "#/definitions/HogQLPropertyFilter"
                    }
                ]
            },
            "type": "array"
        },
        "WebAnalyticsQueryBase": {
            "additionalProperties": false,
            "properties": {
                "dateRange": {
                    "$ref": "#/definitions/DateRange"
                },
                "properties": {
                    "$ref": "#/definitions/WebAnalyticsPropertyFilters"
                }
            },
            "required": ["properties"],
            "type": "object"
        },
        "WebOverviewItem": {
            "additionalProperties": false,
            "properties": {
                "changeFromPreviousPct": {
                    "type": "number"
                },
                "isIncreaseBad": {
                    "type": "boolean"
                },
                "key": {
                    "type": "string"
                },
                "kind": {
                    "enum": ["unit", "duration_s", "percentage"],
                    "type": "string"
                },
                "previous": {
                    "type": "number"
                },
                "value": {
                    "type": "number"
                }
            },
            "required": ["key", "kind"],
            "type": "object"
        },
        "WebOverviewQuery": {
            "additionalProperties": false,
            "properties": {
                "dateRange": {
                    "$ref": "#/definitions/DateRange"
                },
                "kind": {
                    "const": "WebOverviewQuery",
                    "type": "string"
                },
                "properties": {
                    "$ref": "#/definitions/WebAnalyticsPropertyFilters"
                },
                "response": {
                    "$ref": "#/definitions/WebOverviewQueryResponse"
                }
            },
            "required": ["kind", "properties"],
            "type": "object"
        },
        "WebOverviewQueryResponse": {
            "additionalProperties": false,
            "properties": {
                "hogql": {
                    "type": "string"
                },
                "is_cached": {
                    "type": "boolean"
                },
                "last_refresh": {
                    "type": "string"
                },
                "next_allowed_client_refresh": {
                    "type": "string"
                },
                "results": {
                    "items": {
                        "$ref": "#/definitions/WebOverviewItem"
                    },
                    "type": "array"
                },
                "timings": {
                    "items": {
                        "$ref": "#/definitions/QueryTiming"
                    },
                    "type": "array"
                }
            },
            "required": ["results"],
            "type": "object"
        },
        "WebStatsBreakdown": {
            "enum": [
                "Page",
                "InitialPage",
                "InitialReferringDomain",
                "InitialUTMSource",
                "InitialUTMCampaign",
                "Browser",
                "OS",
                "DeviceType",
                "Country",
                "Region",
                "City"
            ],
            "type": "string"
        },
        "WebStatsTableQuery": {
            "additionalProperties": false,
            "properties": {
                "breakdownBy": {
                    "$ref": "#/definitions/WebStatsBreakdown"
                },
                "dateRange": {
                    "$ref": "#/definitions/DateRange"
                },
                "kind": {
                    "const": "WebStatsTableQuery",
                    "type": "string"
                },
                "properties": {
                    "$ref": "#/definitions/WebAnalyticsPropertyFilters"
                },
                "response": {
                    "$ref": "#/definitions/WebStatsTableQueryResponse"
                }
            },
            "required": ["breakdownBy", "kind", "properties"],
            "type": "object"
        },
        "WebStatsTableQueryResponse": {
            "additionalProperties": false,
            "properties": {
                "columns": {
                    "items": {},
                    "type": "array"
                },
                "hogql": {
                    "type": "string"
                },
                "is_cached": {
                    "type": "boolean"
                },
                "last_refresh": {
                    "type": "string"
                },
                "next_allowed_client_refresh": {
                    "type": "string"
                },
                "results": {
                    "items": {},
                    "type": "array"
                },
                "timings": {
                    "items": {
                        "$ref": "#/definitions/QueryTiming"
                    },
                    "type": "array"
                },
                "types": {
                    "items": {},
                    "type": "array"
                }
            },
            "required": ["results"],
            "type": "object"
        },
        "WebTopClicksQuery": {
            "additionalProperties": false,
            "properties": {
                "dateRange": {
                    "$ref": "#/definitions/DateRange"
                },
                "kind": {
                    "const": "WebTopClicksQuery",
                    "type": "string"
                },
                "properties": {
                    "$ref": "#/definitions/WebAnalyticsPropertyFilters"
                },
                "response": {
                    "$ref": "#/definitions/WebTopClicksQueryResponse"
                }
            },
            "required": ["kind", "properties"],
            "type": "object"
        },
        "WebTopClicksQueryResponse": {
            "additionalProperties": false,
            "properties": {
                "columns": {
                    "items": {},
                    "type": "array"
                },
                "hogql": {
                    "type": "string"
                },
                "is_cached": {
                    "type": "boolean"
                },
                "last_refresh": {
                    "type": "string"
                },
                "next_allowed_client_refresh": {
                    "type": "string"
                },
                "results": {
                    "items": {},
                    "type": "array"
                },
                "timings": {
                    "items": {
                        "$ref": "#/definitions/QueryTiming"
                    },
                    "type": "array"
                },
                "types": {
                    "items": {},
                    "type": "array"
                }
            },
            "required": ["results"],
            "type": "object"
        }
    }
}
