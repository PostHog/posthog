.Navigation3000 {
    --breadcrumbs-height: 3rem;
    --scene-padding-y: 1rem;
    --scene-padding-x: 1rem;

    display: flex;
    width: 100%;
    height: 100vh;
    background: var(--bg-3000);
    overflow: hidden;

    > main {
        flex: 1;
        min-width: 0;
        overflow: auto;
    }
}

.Navigation3000__scene {
    // `relative` is for positioning of the scene-level spinner
    position: relative;
    margin: var(--scene-padding-y) var(--scene-padding-x);
    min-height: calc(100vh - var(--breadcrumbs-height) - var(--scene-padding-y) * 2);
    overflow-x: hidden;
    &.Navigation3000__scene--raw {
        --scene-padding-y: 0px;
        --scene-padding-x: 0px;
        display: flex;
        flex-direction: column;
    }
}

// Navbar

.Navbar3000 {
    flex: 0 0 3rem;
    border-right: 1px solid transparent; // This is just for sizing, the visible border is on the content
    box-sizing: content-box;
    z-index: var(--z-main-nav);

    .LemonButton {
        min-height: 2.25rem !important; // Reduce minimum height
        padding: 0.375rem !important; // Use a custom padding for the navbar only
    }

    ul {
        padding: 0.5rem 0;
    }

    ul + ul {
        border-top-width: 1px;
    }

    li + li {
        margin-top: 1px;
    }
}

.Navbar3000__content {
    position: fixed;
    top: 0;
    left: 0;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    height: 100vh;
    padding: 0 0.375rem;
    border-right-width: 1px;
    background: var(--accent-3000);
    overflow-y: auto;
}

.NavbarButton {
    position: relative;
    .LemonButton__icon {
        transition: color 100ms ease, transform 100ms ease;
    }
    &.NavbarButton--here {
        &::after {
            content: 'â€¢';
            position: absolute;
            bottom: 0.25rem;
            left: 0;
            right: 0;
            text-align: center;
            font-size: 1.25rem;
            line-height: 0.5625rem;
            color: var(--default);
        }
        .LemonButton__icon {
            color: var(--default);
            transform: translateY(-0.25rem);
        }
    }
    &.NavbarButton--popover {
        &::before {
            content: '';
            position: absolute;
            top: 0.1875rem;
            right: 0.1875rem;
            width: 0;
            height: 0;
            border-radius: 1px;
            border: 0.1875rem solid transparent;
            border-top-color: currentColor;
            border-right-color: currentColor;
        }
    }
}

// Sidebar

.Sidebar3000 {
    --sidebar-slider-padding: 0.125rem;
    --sidebar-horizontal-padding: 0.5rem;
    --sidebar-row-height: 2rem;
    --sidebar-background: var(--bg-3000);
    position: relative;
    // This border is just for sizing, the visible border is on the content and slider
    // Hidden when the sidebar is closed
    border-right: min(1px, var(--sidebar-width)) solid transparent;
    flex: 0 0 var(--sidebar-width);
    box-sizing: content-box;

    [theme='dark'] & {
        --sidebar-background: var(--accent-3000);
    }

    &.Sidebar3000--resizing {
        will-change: flex-basis;
    }

    h3,
    h4,
    h5 {
        color: var(--default);
        text-overflow: ellipsis;
        overflow: hidden;
        margin: 0;
        line-height: inherit;
    }
    h3 {
        font-weight: 600;
        line-height: 2rem;
        font-size: 0.75rem;
    }
    h4 {
        font-weight: 600;
        line-height: 1.75rem;
        font-size: 0.6875rem;
        flex-grow: 1;
    }
    h5 {
        font-weight: 400;
        font-size: 0.75rem;
        text-transform: none;
        letter-spacing: normal;
    }
    b {
        font-weight: 700;
    }

    .LemonInput--type-search {
        transition: none;
        max-width: none;
        border-color: transparent; // Only show border on focus here
        border-radius: 0;
    }
}

.Sidebar3000__content {
    position: fixed;
    top: 0;
    display: flex;
    flex-direction: column;
    align-items: stretch;
    height: 100vh;
    width: var(--sidebar-width);
    font-size: 0.6875rem;
    box-sizing: content-box;
    white-space: nowrap;
    overflow: hidden;
    background: var(--sidebar-background);
    // Extend the border into viewport overscroll
    border-right: min(1px, var(--sidebar-width)) solid var(--border);

    .Sidebar3000--resizing & {
        will-change: width;
    }

    > div:not(:first-child) {
        border-top-width: 1px;
    }
}

.Sidebar3000__lists {
    position: relative; // For SpinnerOverlay
    display: flex;
    flex-direction: column;
    align-items: stretch;
    flex-grow: 1;
    overflow-x: hidden;
    overflow-y: auto;
}

.Sidebar3000__hint {
    z-index: 1;
    flex: 0 0 var(--sidebar-row-height);
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 0 var(--sidebar-horizontal-padding);
    background: var(--bg-3000);
    border-top-width: 1px;
    font-weight: 500;
    user-select: none;
}

.Sidebar3000__slider {
    position: absolute;
    top: 0;
    bottom: 0;
    right: calc(
        -1 * var(--sidebar-slider-padding) - min(1px, var(--sidebar-width))
    ); // Center around the original sidebar border
    width: calc(2 * var(--sidebar-slider-padding) + 1px); // The interactive area is enlarged for easier interaction
    cursor: col-resize;
    user-select: none; // Fixes inadvertent selection of scene text when resizing
    z-index: var(
        --z-notifications-popover
    ); // A bit above navbar for a nicer slider experience when the sidebar is closed
    &::before,
    &::after {
        content: '';
        position: absolute;
        top: 0;
        bottom: 0;
        left: var(--sidebar-slider-padding);
        width: 1px;
        pointer-events: none;
    }
    &::before {
        transition: 100ms ease transform;
        background: var(--border);
    }
    &::after {
        transition: 100ms ease transform;
        background: var(--text-3000);
        opacity: 0;
    }
    &:hover::after,
    .Sidebar3000--resizing &::after {
        opacity: 0.25;
    }
    .Sidebar3000--resizing &::before,
    .Sidebar3000--resizing &::after {
        transform: scaleX(3);
    }
    .Sidebar3000[aria-hidden='true'] & {
        cursor: e-resize;
    }
}

.Sidebar3000__header {
    flex: 0 0 var(--sidebar-row-height);
    gap: 0.25rem;
    display: flex;
    align-items: center;
    padding: 0 var(--sidebar-horizontal-padding);
}

// Accordion

.Accordion {
    --accordion-arrow-size: 1rem;
    --accordion-row-height: 1.75rem;
    --accordion-inset-expandable: 1.25rem;
    --accordion-header-background: var(--accent-3000);
    --accordion-inset: 0rem;
    min-height: var(--accordion-row-height);
    flex-shrink: 0;
    flex-basis: 0;
    display: flex;
    flex-direction: column;
    [theme='dark'] & {
        --accordion-header-background: var(--bg-3000);
    }
    &[aria-expanded] {
        // This means: if accordion is expandable
        --accordion-inset: var(--accordion-inset-expandable);
    }
    &:not([aria-expanded='false']) {
        flex-grow: 1;
        &:not(:last-child) {
            border-bottom-width: 1px;
        }
    }
}

.Accordion[aria-disabled='true'] {
    .Accordion__header {
        cursor: default;
        &:hover {
            background: var(--accordion-header-background);
        }
    }
    &:not([aria-busy='true']) .Accordion__header .LemonIcon {
        visibility: hidden;
    }
}

.Accordion__header {
    z-index: 1;
    display: flex;
    align-items: center;
    background: var(--accordion-header-background);
    height: var(--accordion-row-height);
    padding: 0 var(--sidebar-horizontal-padding);
    border-bottom-width: 1px;
    cursor: pointer;
    user-select: none;
    &:hover {
        background: var(--border-3000);
    }
    > .LemonIcon {
        transition: 50ms ease transform;
        font-size: var(--accordion-arrow-size);
        flex-shrink: 0;
        margin-right: calc(var(--accordion-inset-expandable) - var(--accordion-arrow-size));
        .Accordion[aria-expanded='true'] & {
            transform: rotate(90deg);
        }
    }
}

.SidebarListItem {
    --sidebar-list-item-status-color: var(--muted);
    --sidebar-list-item-fold-size: 0.5rem;
    --sidebar-list-item-ribbon-width: 0.1875rem;
    --sidebar-list-item-background: var(--sidebar-background);
    position: relative;
    color: var(--muted);
    line-height: 1.125rem;
    opacity: 0.9; // Make items slightly lower contrast when not hovered
    background: var(--sidebar-list-item-background);
    border-bottom-width: 1px;
    list-style: none;

    &:hover:not([aria-disabled='true']),
    &[aria-current='page'],
    &.SidebarListItem--is-renaming {
        opacity: 1;
        --sidebar-list-item-background: var(--border-3000);
    }
    &:hover,
    &:focus-within,
    &[aria-current='page'],
    &.SidebarListItem--is-renaming,
    &.SidebarListItem--is-menu-open {
        .SidebarListItem__actions {
            display: flex;
        }
        // Accommodate menu button by moving stuff out of the way
        &.SidebarListItem--has-menu:not(.SidebarListItem--extended) .SidebarListItem__link {
            padding-right: calc(var(--sidebar-horizontal-padding) + 1.25rem);
        }
        &.SidebarListItem--has-menu.SidebarListItem--extended {
            &::after {
                content: '';
                position: absolute;
                // Position 1px away so that the :focus-visible border isn't overlaid
                top: 1px;
                right: 1px;
                bottom: 1px;
                width: 3.5rem;
                background: linear-gradient(
                    to left,
                    var(--sidebar-list-item-background) 0%,
                    var(--sidebar-list-item-background) 50%,
                    transparent 100%
                );
            }
        }
    }

    &.SidebarListItem--marker-fold,
    &.SidebarListItem--marker-ribbon {
        &::before {
            content: '';
            display: block;
            position: absolute;
            top: 0;
            left: 0;
            z-index: 1;
        }
    }
    &.SidebarListItem--marker-fold {
        &::before {
            width: 0;
            height: 0;
            border-left: var(--sidebar-list-item-fold-size) solid var(--sidebar-list-item-status-color);
            border-bottom: var(--sidebar-list-item-fold-size) solid transparent;
        }
    }
    &.SidebarListItem--marker-ribbon {
        --sidebar-list-item-marker-offset: var(--sidebar-list-item-ribbon-width);
        &::before {
            width: var(--sidebar-list-item-ribbon-width);
            height: 100%;
            background: var(--sidebar-list-item-status-color);
        }
    }
    &.SidebarListItem--marker-status-success {
        --sidebar-list-item-status-color: var(--success);
    }
    &.SidebarListItem--marker-status-warning {
        --sidebar-list-item-status-color: var(--warning);
    }
    &.SidebarListItem--marker-status-danger {
        --sidebar-list-item-status-color: var(--danger);
    }
    &.SidebarListItem--marker-status-completion {
        --sidebar-list-item-status-color: var(--purple);
    }
}

.SidebarListItem__link,
.SidebarListItem__rename {
    --sidebar-list-item-inset: calc(
        var(--accordion-inset, 0px) + var(--sidebar-horizontal-padding) + var(--sidebar-list-item-marker-offset, 0px)
    );
    position: relative;
    display: flex;
    flex-direction: column;
    justify-content: center;
    width: 100%;
    height: 100%;
    color: inherit;
    &:focus-visible::after {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        bottom: -1px;
        right: 0;
        border: 1px solid var(--default);
        pointer-events: none;
    }
}

.SidebarListItem__link {
    row-gap: 1px;
    padding: 0 var(--sidebar-horizontal-padding) 0 var(--sidebar-list-item-inset);
    color: inherit !important; // Disable link color
    .SidebarListItem[aria-disabled='true'] & {
        cursor: default;
    }
}

.SidebarListItem__rename {
    // Pseudo-elements don't work on inputs, so we use a wrapper div
    background: var(--bg-light);
    input {
        outline: none;
        height: 100%;
        width: 100%;
        font-size: 0.75rem;
        color: var(--default);
        padding: 0 calc(var(--sidebar-horizontal-padding) + 2.5rem) 0 var(--sidebar-list-item-inset);
        background: none;
    }
    &::after {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        bottom: -1px;
        right: 0;
        border: 1px solid var(--default);
        pointer-events: none;
        .SidebarListItem[aria-invalid='true'] & {
            border-color: var(--danger);
        }
    }
}

.SidebarListItem__error {
    position: absolute;
    top: 2rem;
    left: 0;
    line-height: 1.25rem;
    padding: 0 0.25rem;
    z-index: 1;
    background: var(--danger);
    color: #fff;
    white-space: normal;
    &::before {
        display: block;
        content: '';
        position: absolute;
        top: -0.5rem;
        left: 0;
        border: 0.25rem solid transparent;
        border-left-color: var(--danger);
        border-bottom-color: var(--danger);
    }
}

.SidebarListItem__actions {
    z-index: 1; // Show above .SidebarListItem::after gradient
    position: absolute;
    right: var(--sidebar-horizontal-padding);
    top: 50%;
    transform: translateY(-50%);
    display: none; // Only show on hover/focus or for current page
}
