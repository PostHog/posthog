import { useValues } from 'kea'

import { IconCheckCircle, IconWarning } from '@posthog/icons'
import { LemonButton, LemonDivider, LemonTag } from '@posthog/lemon-ui'

import { createExperimentLogic } from '../createExperimentLogic'

interface ChecklistStep {
    key: string
    title: string
    description: string
    isComplete: boolean
    action?: () => void
    actionLabel?: string
    isOptional?: boolean
    comingSoon?: boolean
    valueDisplay?: JSX.Element | null
    isUsingDefaults?: boolean
    warningMessage?: string
}

interface ExperimentCreationChecklistProps {
    onPanelSelect: (panelKey: string) => void
}

export function ExperimentCreationChecklist({ onPanelSelect }: ExperimentCreationChecklistProps): JSX.Element {
    const { experiment, hasTargeting, hasPrimaryMetrics, variants, isFeatureFlagAutoGenerated } =
        useValues(createExperimentLogic)

    // Check completion status for each step
    const hasValidFeatureFlag = !!(
        experiment.feature_flag_key && experiment.parameters?.feature_flag_variants?.length >= 2
    )

    const hasExposureCriteria = !!(
        experiment.exposure_criteria?.filterTestAccounts !== undefined ||
        experiment.exposure_criteria?.exposure_config ||
        experiment.exposure_criteria?.multiple_variant_handling
    )

    // Helper function to format variant display
    const formatVariantsDisplay = (): JSX.Element | null => {
        if (!hasValidFeatureFlag) {
            return null
        }
        return (
            <div className="text-sm space-y-1 mt-2">
                {isFeatureFlagAutoGenerated && (
                    <div className="flex items-center gap-2 mb-2">
                        <LemonTag type="primary" size="small">
                            Using default setup
                        </LemonTag>
                    </div>
                )}
                <div className="text-muted">
                    Flag key: <span className="font-mono text-default">{experiment.feature_flag_key}</span>
                </div>
                <div className="space-y-0.5">
                    {variants.map((variant: any, index: number) => (
                        <div key={index} className="text-muted">
                            • {variant.key}: {variant.rollout_percentage}% of users
                        </div>
                    ))}
                </div>
            </div>
        )
    }

    // Helper function to format exposure criteria display
    const formatExposureCriteriaDisplay = (): JSX.Element => {
        const criteria = experiment.exposure_criteria || {}

        return (
            <div className="text-sm space-y-1 mt-2">
                <div className="text-muted">
                    {criteria.filterTestAccounts !== false ? '✓' : '✗'} Filter test accounts
                </div>
                <div className="text-muted">
                    • Exposure trigger:&nbsp;
                    {criteria.exposure_config
                        ? criteria.exposure_config.event || 'Custom event'
                        : 'Feature flag exposure'}
                </div>
                <div className="text-muted">
                    • Multi-variant: {criteria.multiple_variant_handling || 'Latest variant'}
                </div>
            </div>
        )
    }

    // Helper function to format metrics display
    const formatMetricsDisplay = (): JSX.Element | null => {
        if (!hasPrimaryMetrics) {
            return null
        }
        const primaryCount = experiment.metrics?.length || 0
        const secondaryCount = experiment.secondary_metrics?.length || 0

        return (
            <div className="text-sm space-y-1 mt-2">
                {primaryCount > 0 && (
                    <div className="text-muted">
                        • {primaryCount} primary metric{primaryCount > 1 ? 's' : ''}
                    </div>
                )}
                {secondaryCount > 0 && (
                    <div className="text-muted">
                        • {secondaryCount} secondary metric{secondaryCount > 1 ? 's' : ''}
                    </div>
                )}
            </div>
        )
    }

    // Helper function to format targeting display
    const formatTargetingDisplay = (): JSX.Element => {
        const filters = (experiment as any).feature_flag_filters
        const hasFilters = filters?.groups?.some(
            (group: any) =>
                group.properties?.length > 0 || (group.rollout_percentage !== null && group.rollout_percentage !== 100)
        )

        if (hasFilters) {
            const group = filters.groups[0]
            return (
                <div className="text-sm space-y-1 mt-2">
                    {group.rollout_percentage !== 100 && (
                        <div className="text-muted">• {group.rollout_percentage}% rollout</div>
                    )}
                    {group.properties?.length > 0 && (
                        <div className="text-muted">
                            • {group.properties.length} filter{group.properties.length > 1 ? 's' : ''} applied
                        </div>
                    )}
                </div>
            )
        }

        return (
            <div className="text-sm space-y-1 mt-2">
                <div className="text-muted">• All users (100% rollout)</div>
                <div className="text-muted">• No property filters</div>
            </div>
        )
    }

    const steps: ChecklistStep[] = [
        {
            key: 'feature-flag',
            title: 'Feature Flag & Variants',
            description: 'Set up your feature flag key and define test variants',
            isComplete: hasValidFeatureFlag,
            action: () => onPanelSelect('experiment-variants'),
            actionLabel: hasValidFeatureFlag ? 'Edit' : 'Configure variants',
            valueDisplay: formatVariantsDisplay(),
            isUsingDefaults: isFeatureFlagAutoGenerated,
            warningMessage: !hasValidFeatureFlag ? 'Feature flag and at least 2 variants required' : undefined,
        },
        {
            key: 'exposure-criteria',
            title: 'Exposure Criteria',
            description: 'Configure when users are considered exposed to the experiment',
            isComplete: hasExposureCriteria,
            action: () => onPanelSelect('experiment-exposure'),
            actionLabel: hasExposureCriteria ? 'Edit' : 'Set criteria',
            valueDisplay: formatExposureCriteriaDisplay(),
            isUsingDefaults:
                !experiment.exposure_criteria?.exposure_config &&
                !experiment.exposure_criteria?.multiple_variant_handling,
        },
        {
            key: 'metrics',
            title: 'Metrics',
            description: "Define your experiment's success metrics",
            isComplete: hasPrimaryMetrics,
            action: () => onPanelSelect('experiment-metrics'),
            actionLabel: hasPrimaryMetrics ? 'Edit' : 'Add metrics',
            valueDisplay: formatMetricsDisplay(),
            warningMessage: !hasPrimaryMetrics ? 'At least one primary metric required' : undefined,
        },
        {
            key: 'targeting',
            title: 'Targeting',
            description: 'Define your target audience',
            isComplete: hasTargeting,
            action: () => onPanelSelect('experiment-targeting'),
            actionLabel: hasTargeting ? 'Edit' : 'Set targeting',
            isOptional: true,
            valueDisplay: formatTargetingDisplay(),
        },
    ]

    return (
        <div className="space-y-4">
            <div className="bg-bg-light rounded p-4 border">
                <div className="flex items-center justify-between mb-4">
                    <h3 className="font-semibold">Experiment Summary</h3>
                </div>

                <LemonDivider className="mb-4" />

                <div className="space-y-6">
                    {steps.map((step) => (
                        <div key={step.key}>
                            <div className="flex gap-3">
                                <div className="flex-none mt-0.5">
                                    {step.isComplete ? (
                                        <IconCheckCircle className="text-success w-5 h-5" />
                                    ) : step.warningMessage ? (
                                        <IconWarning className="text-warning w-5 h-5" />
                                    ) : (
                                        <div className="w-5 h-5 rounded-full border-2 border-border mt-0.5" />
                                    )}
                                </div>

                                <div className="flex-1">
                                    <div className="flex items-start justify-between gap-2">
                                        <div className="flex-1">
                                            <div className="flex items-center gap-2 mb-1">
                                                <span className="font-semibold">{step.title}</span>
                                                {step.isOptional && (
                                                    <LemonTag type="default" size="small">
                                                        Optional
                                                    </LemonTag>
                                                )}
                                                {step.isUsingDefaults && (
                                                    <LemonTag type="highlight" size="small">
                                                        Using defaults
                                                    </LemonTag>
                                                )}
                                            </div>

                                            {step.warningMessage && !step.isComplete ? (
                                                <div className="text-sm text-warning mb-2">{step.warningMessage}</div>
                                            ) : (
                                                <div className="text-sm text-muted">{step.description}</div>
                                            )}

                                            {step.valueDisplay}
                                        </div>

                                        {step.action && !step.comingSoon && (
                                            <LemonButton
                                                type={step.isComplete ? 'tertiary' : 'secondary'}
                                                size="small"
                                                onClick={step.action}
                                            >
                                                {step.actionLabel}
                                            </LemonButton>
                                        )}
                                    </div>
                                </div>
                            </div>
                        </div>
                    ))}
                </div>
            </div>
        </div>
    )
}
