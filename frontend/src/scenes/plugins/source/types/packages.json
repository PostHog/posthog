{
    "@types/react/index.d.ts": "// Type definitions for React 16.14\n// Project: http://facebook.github.io/react/\n// Definitions by: Asana <https://asana.com>\n//                 AssureSign <http://www.assuresign.com>\n//                 Microsoft <https://microsoft.com>\n//                 John Reilly <https://github.com/johnnyreilly>\n//                 Benoit Benezech <https://github.com/bbenezech>\n//                 Patricio Zavolinsky <https://github.com/pzavolinsky>\n//                 Digiguru <https://github.com/digiguru>\n//                 Eric Anderson <https://github.com/ericanderson>\n//                 Dovydas Navickas <https://github.com/DovydasNavickas>\n//                 Josh Rutherford <https://github.com/theruther4d>\n//                 Guilherme Hübner <https://github.com/guilhermehubner>\n//                 Ferdy Budhidharma <https://github.com/ferdaber>\n//                 Johann Rakotoharisoa <https://github.com/jrakotoharisoa>\n//                 Olivier Pascal <https://github.com/pascaloliv>\n//                 Martin Hochel <https://github.com/hotell>\n//                 Frank Li <https://github.com/franklixuefei>\n//                 Jessica Franco <https://github.com/Jessidhia>\n//                 Saransh Kataria <https://github.com/saranshkataria>\n//                 Kanitkorn Sujautra <https://github.com/lukyth>\n//                 Sebastian Silbermann <https://github.com/eps1lon>\n//                 Kyle Scully <https://github.com/zieka>\n//                 Cong Zhang <https://github.com/dancerphil>\n//                 Dimitri Mitropoulos <https://github.com/dimitropoulos>\n//                 JongChan Choi <https://github.com/disjukr>\n//                 Victor Magalhães <https://github.com/vhfmag>\n//                 Dale Tan <https://github.com/hellatan>\n// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped\n// TypeScript Version: 2.8\n\n// NOTE: Users of the `experimental` builds of React should add a reference\n// to 'react/experimental' in their project. See experimental.d.ts's top comment\n// for reference and documentation on how exactly to do it.\n\n/// <reference path=\"global.d.ts\" />\n\nimport * as CSS from 'csstype';\nimport * as PropTypes from 'prop-types';\n\ntype NativeAnimationEvent = AnimationEvent;\ntype NativeClipboardEvent = ClipboardEvent;\ntype NativeCompositionEvent = CompositionEvent;\ntype NativeDragEvent = DragEvent;\ntype NativeFocusEvent = FocusEvent;\ntype NativeKeyboardEvent = KeyboardEvent;\ntype NativeMouseEvent = MouseEvent;\ntype NativeTouchEvent = TouchEvent;\ntype NativePointerEvent = PointerEvent;\ntype NativeTransitionEvent = TransitionEvent;\ntype NativeUIEvent = UIEvent;\ntype NativeWheelEvent = WheelEvent;\ntype Booleanish = boolean | 'true' | 'false';\n\n/**\n * defined in scheduler/tracing\n */\ninterface SchedulerInteraction {\n    id: number;\n    name: string;\n    timestamp: number;\n}\n\n// tslint:disable-next-line:export-just-namespace\nexport = React;\nexport as namespace React;\n\ndeclare namespace React {\n    //\n    // React Elements\n    // ----------------------------------------------------------------------\n\n    type ElementType<P = any> =\n        {\n            [K in keyof JSX.IntrinsicElements]: P extends JSX.IntrinsicElements[K] ? K : never\n        }[keyof JSX.IntrinsicElements] |\n        ComponentType<P>;\n    /**\n     * @deprecated Please use `ElementType`\n     */\n    type ReactType<P = any> = ElementType<P>;\n    type ComponentType<P = {}> = ComponentClass<P> | FunctionComponent<P>;\n\n    type JSXElementConstructor<P> =\n        | ((props: P) => ReactElement | null)\n        | (new (props: P) => Component<P, any>);\n\n    interface RefObject<T> {\n        readonly current: T | null;\n    }\n    type RefCallback<T> = { bivarianceHack(instance: T | null): void }[\"bivarianceHack\"];\n    type Ref<T> = RefCallback<T> | RefObject<T> | null;\n    type LegacyRef<T> = string | Ref<T>;\n    /**\n     * Gets the instance type for a React element. The instance will be different for various component types:\n     *\n     * - React class components will be the class instance. So if you had `class Foo extends React.Component<{}> {}`\n     *   and used `React.ElementRef<typeof Foo>` then the type would be the instance of `Foo`.\n     * - React stateless functional components do not have a backing instance and so `React.ElementRef<typeof Bar>`\n     *   (when `Bar` is `function Bar() {}`) will give you the `undefined` type.\n     * - JSX intrinsics like `div` will give you their DOM instance. For `React.ElementRef<'div'>` that would be\n     *   `HTMLDivElement`. For `React.ElementRef<'input'>` that would be `HTMLInputElement`.\n     * - React stateless functional components that forward a `ref` will give you the `ElementRef` of the forwarded\n     *   to component.\n     *\n     * `C` must be the type _of_ a React component so you need to use typeof as in React.ElementRef<typeof MyComponent>.\n     *\n     * @todo In Flow, this works a little different with forwarded refs and the `AbstractComponent` that\n     *       `React.forwardRef()` returns.\n     */\n    type ElementRef<\n        C extends\n            | ForwardRefExoticComponent<any>\n            | { new (props: any): Component<any> }\n            | ((props: any, context?: any) => ReactElement | null)\n            | keyof JSX.IntrinsicElements\n    > =\n        // need to check first if `ref` is a valid prop for ts@3.0\n        // otherwise it will infer `{}` instead of `never`\n        \"ref\" extends keyof ComponentPropsWithRef<C>\n            ? NonNullable<ComponentPropsWithRef<C>[\"ref\"]> extends Ref<\n                infer Instance\n            >\n                ? Instance\n                : never\n            : never;\n\n    type ComponentState = any;\n\n    type Key = string | number;\n\n    /**\n     * @internal You shouldn't need to use this type since you never see these attributes\n     * inside your component or have to validate them.\n     */\n    interface Attributes {\n        key?: Key | null;\n    }\n    interface RefAttributes<T> extends Attributes {\n        ref?: Ref<T>;\n    }\n    interface ClassAttributes<T> extends Attributes {\n        ref?: LegacyRef<T>;\n    }\n\n    interface ReactElement<P = any, T extends string | JSXElementConstructor<any> = string | JSXElementConstructor<any>> {\n        type: T;\n        props: P;\n        key: Key | null;\n    }\n\n    interface ReactComponentElement<\n        T extends keyof JSX.IntrinsicElements | JSXElementConstructor<any>,\n        P = Pick<ComponentProps<T>, Exclude<keyof ComponentProps<T>, 'key' | 'ref'>>\n    > extends ReactElement<P, Exclude<T, number>> { }\n\n    /**\n     * @deprecated Please use `FunctionComponentElement`\n     */\n    type SFCElement<P> = FunctionComponentElement<P>;\n\n    interface FunctionComponentElement<P> extends ReactElement<P, FunctionComponent<P>> {\n        ref?: 'ref' extends keyof P ? P extends { ref?: infer R } ? R : never : never;\n    }\n\n    type CElement<P, T extends Component<P, ComponentState>> = ComponentElement<P, T>;\n    interface ComponentElement<P, T extends Component<P, ComponentState>> extends ReactElement<P, ComponentClass<P>> {\n        ref?: LegacyRef<T>;\n    }\n\n    type ClassicElement<P> = CElement<P, ClassicComponent<P, ComponentState>>;\n\n    // string fallback for custom web-components\n    interface DOMElement<P extends HTMLAttributes<T> | SVGAttributes<T>, T extends Element> extends ReactElement<P, string> {\n        ref: LegacyRef<T>;\n    }\n\n    // ReactHTML for ReactHTMLElement\n    // tslint:disable-next-line:no-empty-interface\n    interface ReactHTMLElement<T extends HTMLElement> extends DetailedReactHTMLElement<AllHTMLAttributes<T>, T> { }\n\n    interface DetailedReactHTMLElement<P extends HTMLAttributes<T>, T extends HTMLElement> extends DOMElement<P, T> {\n        type: keyof ReactHTML;\n    }\n\n    // ReactSVG for ReactSVGElement\n    interface ReactSVGElement extends DOMElement<SVGAttributes<SVGElement>, SVGElement> {\n        type: keyof ReactSVG;\n    }\n\n    interface ReactPortal extends ReactElement {\n        key: Key | null;\n        children: ReactNode;\n    }\n\n    //\n    // Factories\n    // ----------------------------------------------------------------------\n\n    type Factory<P> = (props?: Attributes & P, ...children: ReactNode[]) => ReactElement<P>;\n\n    /**\n     * @deprecated Please use `FunctionComponentFactory`\n     */\n    type SFCFactory<P> = FunctionComponentFactory<P>;\n\n    type FunctionComponentFactory<P> = (props?: Attributes & P, ...children: ReactNode[]) => FunctionComponentElement<P>;\n\n    type ComponentFactory<P, T extends Component<P, ComponentState>> =\n        (props?: ClassAttributes<T> & P, ...children: ReactNode[]) => CElement<P, T>;\n\n    type CFactory<P, T extends Component<P, ComponentState>> = ComponentFactory<P, T>;\n    type ClassicFactory<P> = CFactory<P, ClassicComponent<P, ComponentState>>;\n\n    type DOMFactory<P extends DOMAttributes<T>, T extends Element> =\n        (props?: ClassAttributes<T> & P | null, ...children: ReactNode[]) => DOMElement<P, T>;\n\n    // tslint:disable-next-line:no-empty-interface\n    interface HTMLFactory<T extends HTMLElement> extends DetailedHTMLFactory<AllHTMLAttributes<T>, T> {}\n\n    interface DetailedHTMLFactory<P extends HTMLAttributes<T>, T extends HTMLElement> extends DOMFactory<P, T> {\n        (props?: ClassAttributes<T> & P | null, ...children: ReactNode[]): DetailedReactHTMLElement<P, T>;\n    }\n\n    interface SVGFactory extends DOMFactory<SVGAttributes<SVGElement>, SVGElement> {\n        (props?: ClassAttributes<SVGElement> & SVGAttributes<SVGElement> | null, ...children: ReactNode[]): ReactSVGElement;\n    }\n\n    //\n    // React Nodes\n    // http://facebook.github.io/react/docs/glossary.html\n    // ----------------------------------------------------------------------\n\n    type ReactText = string | number;\n    type ReactChild = ReactElement | ReactText;\n\n    interface ReactNodeArray extends Array<ReactNode> {}\n    type ReactFragment = {} | ReactNodeArray;\n    type ReactNode = ReactChild | ReactFragment | ReactPortal | boolean | null | undefined;\n\n    //\n    // Top Level API\n    // ----------------------------------------------------------------------\n\n    // DOM Elements\n    function createFactory<T extends HTMLElement>(\n        type: keyof ReactHTML): HTMLFactory<T>;\n    function createFactory(\n        type: keyof ReactSVG): SVGFactory;\n    function createFactory<P extends DOMAttributes<T>, T extends Element>(\n        type: string): DOMFactory<P, T>;\n\n    // Custom components\n    function createFactory<P>(type: FunctionComponent<P>): FunctionComponentFactory<P>;\n    function createFactory<P>(\n        type: ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>): CFactory<P, ClassicComponent<P, ComponentState>>;\n    function createFactory<P, T extends Component<P, ComponentState>, C extends ComponentClass<P>>(\n        type: ClassType<P, T, C>): CFactory<P, T>;\n    function createFactory<P>(type: ComponentClass<P>): Factory<P>;\n\n    // DOM Elements\n    // TODO: generalize this to everything in `keyof ReactHTML`, not just \"input\"\n    function createElement(\n        type: \"input\",\n        props?: InputHTMLAttributes<HTMLInputElement> & ClassAttributes<HTMLInputElement> | null,\n        ...children: ReactNode[]): DetailedReactHTMLElement<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\n    function createElement<P extends HTMLAttributes<T>, T extends HTMLElement>(\n        type: keyof ReactHTML,\n        props?: ClassAttributes<T> & P | null,\n        ...children: ReactNode[]): DetailedReactHTMLElement<P, T>;\n    function createElement<P extends SVGAttributes<T>, T extends SVGElement>(\n        type: keyof ReactSVG,\n        props?: ClassAttributes<T> & P | null,\n        ...children: ReactNode[]): ReactSVGElement;\n    function createElement<P extends DOMAttributes<T>, T extends Element>(\n        type: string,\n        props?: ClassAttributes<T> & P | null,\n        ...children: ReactNode[]): DOMElement<P, T>;\n\n    // Custom components\n\n    function createElement<P extends {}>(\n        type: FunctionComponent<P>,\n        props?: Attributes & P | null,\n        ...children: ReactNode[]): FunctionComponentElement<P>;\n    function createElement<P extends {}>(\n        type: ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>,\n        props?: ClassAttributes<ClassicComponent<P, ComponentState>> & P | null,\n        ...children: ReactNode[]): CElement<P, ClassicComponent<P, ComponentState>>;\n    function createElement<P extends {}, T extends Component<P, ComponentState>, C extends ComponentClass<P>>(\n        type: ClassType<P, T, C>,\n        props?: ClassAttributes<T> & P | null,\n        ...children: ReactNode[]): CElement<P, T>;\n    function createElement<P extends {}>(\n        type: FunctionComponent<P> | ComponentClass<P> | string,\n        props?: Attributes & P | null,\n        ...children: ReactNode[]): ReactElement<P>;\n\n    // DOM Elements\n    // ReactHTMLElement\n    function cloneElement<P extends HTMLAttributes<T>, T extends HTMLElement>(\n        element: DetailedReactHTMLElement<P, T>,\n        props?: P,\n        ...children: ReactNode[]): DetailedReactHTMLElement<P, T>;\n    // ReactHTMLElement, less specific\n    function cloneElement<P extends HTMLAttributes<T>, T extends HTMLElement>(\n        element: ReactHTMLElement<T>,\n        props?: P,\n        ...children: ReactNode[]): ReactHTMLElement<T>;\n    // SVGElement\n    function cloneElement<P extends SVGAttributes<T>, T extends SVGElement>(\n        element: ReactSVGElement,\n        props?: P,\n        ...children: ReactNode[]): ReactSVGElement;\n    // DOM Element (has to be the last, because type checking stops at first overload that fits)\n    function cloneElement<P extends DOMAttributes<T>, T extends Element>(\n        element: DOMElement<P, T>,\n        props?: DOMAttributes<T> & P,\n        ...children: ReactNode[]): DOMElement<P, T>;\n\n    // Custom components\n    function cloneElement<P>(\n        element: FunctionComponentElement<P>,\n        props?: Partial<P> & Attributes,\n        ...children: ReactNode[]): FunctionComponentElement<P>;\n    function cloneElement<P, T extends Component<P, ComponentState>>(\n        element: CElement<P, T>,\n        props?: Partial<P> & ClassAttributes<T>,\n        ...children: ReactNode[]): CElement<P, T>;\n    function cloneElement<P>(\n        element: ReactElement<P>,\n        props?: Partial<P> & Attributes,\n        ...children: ReactNode[]): ReactElement<P>;\n\n    // Context via RenderProps\n    interface ProviderProps<T> {\n        value: T;\n        children?: ReactNode;\n    }\n\n    interface ConsumerProps<T> {\n        children: (value: T) => ReactNode;\n    }\n\n    // TODO: similar to how Fragment is actually a symbol, the values returned from createContext,\n    // forwardRef and memo are actually objects that are treated specially by the renderer; see:\n    // https://github.com/facebook/react/blob/v16.6.0/packages/react/src/ReactContext.js#L35-L48\n    // https://github.com/facebook/react/blob/v16.6.0/packages/react/src/forwardRef.js#L42-L45\n    // https://github.com/facebook/react/blob/v16.6.0/packages/react/src/memo.js#L27-L31\n    // However, we have no way of telling the JSX parser that it's a JSX element type or its props other than\n    // by pretending to be a normal component.\n    //\n    // We don't just use ComponentType or SFC types because you are not supposed to attach statics to this\n    // object, but rather to the original function.\n    interface ExoticComponent<P = {}> {\n        /**\n         * **NOTE**: Exotic components are not callable.\n         */\n        (props: P): (ReactElement|null);\n        readonly $$typeof: symbol;\n    }\n\n    interface NamedExoticComponent<P = {}> extends ExoticComponent<P> {\n        displayName?: string;\n    }\n\n    interface ProviderExoticComponent<P> extends ExoticComponent<P> {\n        propTypes?: WeakValidationMap<P>;\n    }\n\n    type ContextType<C extends Context<any>> = C extends Context<infer T> ? T : never;\n\n    // NOTE: only the Context object itself can get a displayName\n    // https://github.com/facebook/react-devtools/blob/e0b854e4c/backend/attachRendererFiber.js#L310-L325\n    type Provider<T> = ProviderExoticComponent<ProviderProps<T>>;\n    type Consumer<T> = ExoticComponent<ConsumerProps<T>>;\n    interface Context<T> {\n        Provider: Provider<T>;\n        Consumer: Consumer<T>;\n        displayName?: string;\n    }\n    function createContext<T>(\n        // If you thought this should be optional, see\n        // https://github.com/DefinitelyTyped/DefinitelyTyped/pull/24509#issuecomment-382213106\n        defaultValue: T,\n    ): Context<T>;\n\n    function isValidElement<P>(object: {} | null | undefined): object is ReactElement<P>;\n\n    const Children: ReactChildren;\n    const Fragment: ExoticComponent<{ children?: ReactNode }>;\n    const StrictMode: ExoticComponent<{ children?: ReactNode }>;\n\n    interface SuspenseProps {\n        children?: ReactNode;\n\n        /** A fallback react tree to show when a Suspense child (like React.lazy) suspends */\n        fallback: NonNullable<ReactNode>|null;\n    }\n    /**\n     * This feature is not yet available for server-side rendering.\n     * Suspense support will be added in a later release.\n     */\n    const Suspense: ExoticComponent<SuspenseProps>;\n    const version: string;\n\n    /**\n     * {@link https://github.com/bvaughn/rfcs/blob/profiler/text/0000-profiler.md#detailed-design | API}\n     */\n    type ProfilerOnRenderCallback = (\n        id: string,\n        phase: \"mount\" | \"update\",\n        actualDuration: number,\n        baseDuration: number,\n        startTime: number,\n        commitTime: number,\n        interactions: Set<SchedulerInteraction>,\n    ) => void;\n    interface ProfilerProps {\n        children?: ReactNode;\n        id: string;\n        onRender: ProfilerOnRenderCallback;\n    }\n\n    const Profiler: ExoticComponent<ProfilerProps>;\n\n    //\n    // Component API\n    // ----------------------------------------------------------------------\n\n    type ReactInstance = Component<any> | Element;\n\n    // Base component for plain JS classes\n    // tslint:disable-next-line:no-empty-interface\n    interface Component<P = {}, S = {}, SS = any> extends ComponentLifecycle<P, S, SS> { }\n    class Component<P, S> {\n        // tslint won't let me format the sample code in a way that vscode likes it :(\n        /**\n         * If set, `this.context` will be set at runtime to the current value of the given Context.\n         *\n         * Usage:\n         *\n         * ```ts\n         * type MyContext = number\n         * const Ctx = React.createContext<MyContext>(0)\n         *\n         * class Foo extends React.Component {\n         *   static contextType = Ctx\n         *   context!: React.ContextType<typeof Ctx>\n         *   render () {\n         *     return <>My context's value: {this.context}</>;\n         *   }\n         * }\n         * ```\n         *\n         * @see https://reactjs.org/docs/context.html#classcontexttype\n         */\n        static contextType?: Context<any>;\n\n        /**\n         * If using the new style context, re-declare this in your class to be the\n         * `React.ContextType` of your `static contextType`.\n         * Should be used with type annotation or static contextType.\n         *\n         * ```ts\n         * static contextType = MyContext\n         * // For TS pre-3.7:\n         * context!: React.ContextType<typeof MyContext>\n         * // For TS 3.7 and above:\n         * declare context: React.ContextType<typeof MyContext>\n         * ```\n         *\n         * @see https://reactjs.org/docs/context.html\n         */\n        // TODO (TypeScript 3.0): unknown\n        context: any;\n\n        constructor(props: Readonly<P> | P);\n        /**\n         * @deprecated\n         * @see https://reactjs.org/docs/legacy-context.html\n         */\n        constructor(props: P, context: any);\n\n        // We MUST keep setState() as a unified signature because it allows proper checking of the method return type.\n        // See: https://github.com/DefinitelyTyped/DefinitelyTyped/issues/18365#issuecomment-351013257\n        // Also, the ` | S` allows intellisense to not be dumbisense\n        setState<K extends keyof S>(\n            state: ((prevState: Readonly<S>, props: Readonly<P>) => (Pick<S, K> | S | null)) | (Pick<S, K> | S | null),\n            callback?: () => void\n        ): void;\n\n        forceUpdate(callback?: () => void): void;\n        render(): ReactNode;\n\n        // React.Props<T> is now deprecated, which means that the `children`\n        // property is not available on `P` by default, even though you can\n        // always pass children as variadic arguments to `createElement`.\n        // In the future, if we can define its call signature conditionally\n        // on the existence of `children` in `P`, then we should remove this.\n        readonly props: Readonly<P> & Readonly<{ children?: ReactNode }>;\n        state: Readonly<S>;\n        /**\n         * @deprecated\n         * https://reactjs.org/docs/refs-and-the-dom.html#legacy-api-string-refs\n         */\n        refs: {\n            [key: string]: ReactInstance\n        };\n    }\n\n    class PureComponent<P = {}, S = {}, SS = any> extends Component<P, S, SS> { }\n\n    interface ClassicComponent<P = {}, S = {}> extends Component<P, S> {\n        replaceState(nextState: S, callback?: () => void): void;\n        isMounted(): boolean;\n        getInitialState?(): S;\n    }\n\n    interface ChildContextProvider<CC> {\n        getChildContext(): CC;\n    }\n\n    //\n    // Class Interfaces\n    // ----------------------------------------------------------------------\n\n    /**\n     * @deprecated as of recent React versions, function components can no\n     * longer be considered 'stateless'. Please use `FunctionComponent` instead.\n     *\n     * @see [React Hooks](https://reactjs.org/docs/hooks-intro.html)\n     */\n    type SFC<P = {}> = FunctionComponent<P>;\n\n    /**\n     * @deprecated as of recent React versions, function components can no\n     * longer be considered 'stateless'. Please use `FunctionComponent` instead.\n     *\n     * @see [React Hooks](https://reactjs.org/docs/hooks-intro.html)\n     */\n    type StatelessComponent<P = {}> = FunctionComponent<P>;\n\n    type FC<P = {}> = FunctionComponent<P>;\n\n    interface FunctionComponent<P = {}> {\n        (props: PropsWithChildren<P>, context?: any): ReactElement<any, any> | null;\n        propTypes?: WeakValidationMap<P>;\n        contextTypes?: ValidationMap<any>;\n        defaultProps?: Partial<P>;\n        displayName?: string;\n    }\n\n    type VFC<P = {}> = VoidFunctionComponent<P>;\n\n    interface VoidFunctionComponent<P = {}> {\n        (props: P, context?: any): ReactElement<any, any> | null;\n        propTypes?: WeakValidationMap<P>;\n        contextTypes?: ValidationMap<any>;\n        defaultProps?: Partial<P>;\n        displayName?: string;\n    }\n\n    interface ForwardRefRenderFunction<T, P = {}> {\n        (props: PropsWithChildren<P>, ref: ((instance: T | null) => void) | MutableRefObject<T | null> | null): ReactElement | null;\n        displayName?: string;\n        // explicit rejected with `never` required due to\n        // https://github.com/microsoft/TypeScript/issues/36826\n        /**\n         * defaultProps are not supported on render functions\n         */\n        defaultProps?: never;\n        /**\n         * propTypes are not supported on render functions\n         */\n        propTypes?: never;\n    }\n\n    /**\n     * @deprecated Use ForwardRefRenderFunction. forwardRef doesn't accept a\n     *             \"real\" component.\n     */\n    interface RefForwardingComponent <T, P = {}> extends ForwardRefRenderFunction<T, P> {}\n\n    interface ComponentClass<P = {}, S = ComponentState> extends StaticLifecycle<P, S> {\n        new (props: P, context?: any): Component<P, S>;\n        propTypes?: WeakValidationMap<P>;\n        contextType?: Context<any>;\n        contextTypes?: ValidationMap<any>;\n        childContextTypes?: ValidationMap<any>;\n        defaultProps?: Partial<P>;\n        displayName?: string;\n    }\n\n    interface ClassicComponentClass<P = {}> extends ComponentClass<P> {\n        new (props: P, context?: any): ClassicComponent<P, ComponentState>;\n        getDefaultProps?(): P;\n    }\n\n    /**\n     * We use an intersection type to infer multiple type parameters from\n     * a single argument, which is useful for many top-level API defs.\n     * See https://github.com/Microsoft/TypeScript/issues/7234 for more info.\n     */\n    type ClassType<P, T extends Component<P, ComponentState>, C extends ComponentClass<P>> =\n        C &\n        (new (props: P, context?: any) => T);\n\n    //\n    // Component Specs and Lifecycle\n    // ----------------------------------------------------------------------\n\n    // This should actually be something like `Lifecycle<P, S> | DeprecatedLifecycle<P, S>`,\n    // as React will _not_ call the deprecated lifecycle methods if any of the new lifecycle\n    // methods are present.\n    interface ComponentLifecycle<P, S, SS = any> extends NewLifecycle<P, S, SS>, DeprecatedLifecycle<P, S> {\n        /**\n         * Called immediately after a component is mounted. Setting state here will trigger re-rendering.\n         */\n        componentDidMount?(): void;\n        /**\n         * Called to determine whether the change in props and state should trigger a re-render.\n         *\n         * `Component` always returns true.\n         * `PureComponent` implements a shallow comparison on props and state and returns true if any\n         * props or states have changed.\n         *\n         * If false is returned, `Component#render`, `componentWillUpdate`\n         * and `componentDidUpdate` will not be called.\n         */\n        shouldComponentUpdate?(nextProps: Readonly<P>, nextState: Readonly<S>, nextContext: any): boolean;\n        /**\n         * Called immediately before a component is destroyed. Perform any necessary cleanup in this method, such as\n         * cancelled network requests, or cleaning up any DOM elements created in `componentDidMount`.\n         */\n        componentWillUnmount?(): void;\n        /**\n         * Catches exceptions generated in descendant components. Unhandled exceptions will cause\n         * the entire component tree to unmount.\n         */\n        componentDidCatch?(error: Error, errorInfo: ErrorInfo): void;\n    }\n\n    // Unfortunately, we have no way of declaring that the component constructor must implement this\n    interface StaticLifecycle<P, S> {\n        getDerivedStateFromProps?: GetDerivedStateFromProps<P, S>;\n        getDerivedStateFromError?: GetDerivedStateFromError<P, S>;\n    }\n\n    type GetDerivedStateFromProps<P, S> =\n        /**\n         * Returns an update to a component's state based on its new props and old state.\n         *\n         * Note: its presence prevents any of the deprecated lifecycle methods from being invoked\n         */\n        (nextProps: Readonly<P>, prevState: S) => Partial<S> | null;\n\n    type GetDerivedStateFromError<P, S> =\n        /**\n         * This lifecycle is invoked after an error has been thrown by a descendant component.\n         * It receives the error that was thrown as a parameter and should return a value to update state.\n         *\n         * Note: its presence prevents any of the deprecated lifecycle methods from being invoked\n         */\n        (error: any) => Partial<S> | null;\n\n    // This should be \"infer SS\" but can't use it yet\n    interface NewLifecycle<P, S, SS> {\n        /**\n         * Runs before React applies the result of `render` to the document, and\n         * returns an object to be given to componentDidUpdate. Useful for saving\n         * things such as scroll position before `render` causes changes to it.\n         *\n         * Note: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\n         * lifecycle events from running.\n         */\n        getSnapshotBeforeUpdate?(prevProps: Readonly<P>, prevState: Readonly<S>): SS | null;\n        /**\n         * Called immediately after updating occurs. Not called for the initial render.\n         *\n         * The snapshot is only present if getSnapshotBeforeUpdate is present and returns non-null.\n         */\n        componentDidUpdate?(prevProps: Readonly<P>, prevState: Readonly<S>, snapshot?: SS): void;\n    }\n\n    interface DeprecatedLifecycle<P, S> {\n        /**\n         * Called immediately before mounting occurs, and before `Component#render`.\n         * Avoid introducing any side-effects or subscriptions in this method.\n         *\n         * Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\n         * prevents this from being invoked.\n         *\n         * @deprecated 16.3, use componentDidMount or the constructor instead; will stop working in React 17\n         * @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state\n         * @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n         */\n        componentWillMount?(): void;\n        /**\n         * Called immediately before mounting occurs, and before `Component#render`.\n         * Avoid introducing any side-effects or subscriptions in this method.\n         *\n         * This method will not stop working in React 17.\n         *\n         * Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\n         * prevents this from being invoked.\n         *\n         * @deprecated 16.3, use componentDidMount or the constructor instead\n         * @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state\n         * @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n         */\n        UNSAFE_componentWillMount?(): void;\n        /**\n         * Called when the component may be receiving new props.\n         * React may call this even if props have not changed, so be sure to compare new and existing\n         * props if you only want to handle changes.\n         *\n         * Calling `Component#setState` generally does not trigger this method.\n         *\n         * Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\n         * prevents this from being invoked.\n         *\n         * @deprecated 16.3, use static getDerivedStateFromProps instead; will stop working in React 17\n         * @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props\n         * @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n         */\n        componentWillReceiveProps?(nextProps: Readonly<P>, nextContext: any): void;\n        /**\n         * Called when the component may be receiving new props.\n         * React may call this even if props have not changed, so be sure to compare new and existing\n         * props if you only want to handle changes.\n         *\n         * Calling `Component#setState` generally does not trigger this method.\n         *\n         * This method will not stop working in React 17.\n         *\n         * Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\n         * prevents this from being invoked.\n         *\n         * @deprecated 16.3, use static getDerivedStateFromProps instead\n         * @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props\n         * @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n         */\n        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<P>, nextContext: any): void;\n        /**\n         * Called immediately before rendering when new props or state is received. Not called for the initial render.\n         *\n         * Note: You cannot call `Component#setState` here.\n         *\n         * Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\n         * prevents this from being invoked.\n         *\n         * @deprecated 16.3, use getSnapshotBeforeUpdate instead; will stop working in React 17\n         * @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update\n         * @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n         */\n        componentWillUpdate?(nextProps: Readonly<P>, nextState: Readonly<S>, nextContext: any): void;\n        /**\n         * Called immediately before rendering when new props or state is received. Not called for the initial render.\n         *\n         * Note: You cannot call `Component#setState` here.\n         *\n         * This method will not stop working in React 17.\n         *\n         * Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\n         * prevents this from being invoked.\n         *\n         * @deprecated 16.3, use getSnapshotBeforeUpdate instead\n         * @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update\n         * @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n         */\n        UNSAFE_componentWillUpdate?(nextProps: Readonly<P>, nextState: Readonly<S>, nextContext: any): void;\n    }\n\n    interface Mixin<P, S> extends ComponentLifecycle<P, S> {\n        mixins?: Array<Mixin<P, S>>;\n        statics?: {\n            [key: string]: any;\n        };\n\n        displayName?: string;\n        propTypes?: ValidationMap<any>;\n        contextTypes?: ValidationMap<any>;\n        childContextTypes?: ValidationMap<any>;\n\n        getDefaultProps?(): P;\n        getInitialState?(): S;\n    }\n\n    interface ComponentSpec<P, S> extends Mixin<P, S> {\n        render(): ReactNode;\n\n        [propertyName: string]: any;\n    }\n\n    function createRef<T>(): RefObject<T>;\n\n    // will show `ForwardRef(${Component.displayName || Component.name})` in devtools by default,\n    // but can be given its own specific name\n    interface ForwardRefExoticComponent<P> extends NamedExoticComponent<P> {\n        defaultProps?: Partial<P>;\n        propTypes?: WeakValidationMap<P>;\n    }\n\n    function forwardRef<T, P = {}>(render: ForwardRefRenderFunction<T, P>): ForwardRefExoticComponent<PropsWithoutRef<P> & RefAttributes<T>>;\n\n    /** Ensures that the props do not include ref at all */\n    type PropsWithoutRef<P> =\n        // Just Pick would be sufficient for this, but I'm trying to avoid unnecessary mapping over union types\n        // https://github.com/Microsoft/TypeScript/issues/28339\n        'ref' extends keyof P\n            ? Pick<P, Exclude<keyof P, 'ref'>>\n            : P;\n    /** Ensures that the props do not include string ref, which cannot be forwarded */\n    type PropsWithRef<P> =\n        // Just \"P extends { ref?: infer R }\" looks sufficient, but R will infer as {} if P is {}.\n        'ref' extends keyof P\n            ? P extends { ref?: infer R }\n                ? string extends R\n                    ? PropsWithoutRef<P> & { ref?: Exclude<R, string> }\n                    : P\n                : P\n            : P;\n\n    type PropsWithChildren<P> = P & { children?: ReactNode };\n\n    /**\n     * NOTE: prefer ComponentPropsWithRef, if the ref is forwarded,\n     * or ComponentPropsWithoutRef when refs are not supported.\n     */\n    type ComponentProps<T extends keyof JSX.IntrinsicElements | JSXElementConstructor<any>> =\n        T extends JSXElementConstructor<infer P>\n            ? P\n            : T extends keyof JSX.IntrinsicElements\n                ? JSX.IntrinsicElements[T]\n                : {};\n    type ComponentPropsWithRef<T extends ElementType> =\n        T extends ComponentClass<infer P>\n            ? PropsWithoutRef<P> & RefAttributes<InstanceType<T>>\n            : PropsWithRef<ComponentProps<T>>;\n    type ComponentPropsWithoutRef<T extends ElementType> =\n        PropsWithoutRef<ComponentProps<T>>;\n\n    // will show `Memo(${Component.displayName || Component.name})` in devtools by default,\n    // but can be given its own specific name\n    type MemoExoticComponent<T extends ComponentType<any>> = NamedExoticComponent<ComponentPropsWithRef<T>> & {\n        readonly type: T;\n    };\n\n    function memo<P extends object>(\n        Component: SFC<P>,\n        propsAreEqual?: (prevProps: Readonly<PropsWithChildren<P>>, nextProps: Readonly<PropsWithChildren<P>>) => boolean\n    ): NamedExoticComponent<P>;\n    function memo<T extends ComponentType<any>>(\n        Component: T,\n        propsAreEqual?: (prevProps: Readonly<ComponentProps<T>>, nextProps: Readonly<ComponentProps<T>>) => boolean\n    ): MemoExoticComponent<T>;\n\n    type LazyExoticComponent<T extends ComponentType<any>> = ExoticComponent<ComponentPropsWithRef<T>> & {\n        readonly _result: T;\n    };\n\n    function lazy<T extends ComponentType<any>>(\n        factory: () => Promise<{ default: T }>\n    ): LazyExoticComponent<T>;\n\n    //\n    // React Hooks\n    // ----------------------------------------------------------------------\n\n    // based on the code in https://github.com/facebook/react/pull/13968\n\n    // Unlike the class component setState, the updates are not allowed to be partial\n    type SetStateAction<S> = S | ((prevState: S) => S);\n    // this technically does accept a second argument, but it's already under a deprecation warning\n    // and it's not even released so probably better to not define it.\n    type Dispatch<A> = (value: A) => void;\n    // Since action _can_ be undefined, dispatch may be called without any parameters.\n    type DispatchWithoutAction = () => void;\n    // Unlike redux, the actions _can_ be anything\n    type Reducer<S, A> = (prevState: S, action: A) => S;\n    // If useReducer accepts a reducer without action, dispatch may be called without any parameters.\n    type ReducerWithoutAction<S> = (prevState: S) => S;\n    // types used to try and prevent the compiler from reducing S\n    // to a supertype common with the second argument to useReducer()\n    type ReducerState<R extends Reducer<any, any>> = R extends Reducer<infer S, any> ? S : never;\n    type ReducerAction<R extends Reducer<any, any>> = R extends Reducer<any, infer A> ? A : never;\n    // The identity check is done with the SameValue algorithm (Object.is), which is stricter than ===\n    type ReducerStateWithoutAction<R extends ReducerWithoutAction<any>> =\n        R extends ReducerWithoutAction<infer S> ? S : never;\n    // TODO (TypeScript 3.0): ReadonlyArray<unknown>\n    type DependencyList = ReadonlyArray<any>;\n\n    // NOTE: callbacks are _only_ allowed to return either void, or a destructor.\n    // The destructor is itself only allowed to return void.\n    type EffectCallback = () => (void | (() => void | undefined));\n\n    interface MutableRefObject<T> {\n        current: T;\n    }\n\n    // This will technically work if you give a Consumer<T> or Provider<T> but it's deprecated and warns\n    /**\n     * Accepts a context object (the value returned from `React.createContext`) and returns the current\n     * context value, as given by the nearest context provider for the given context.\n     *\n     * @version 16.8.0\n     * @see https://reactjs.org/docs/hooks-reference.html#usecontext\n     */\n    function useContext<T>(context: Context<T>/*, (not public API) observedBits?: number|boolean */): T;\n    /**\n     * Returns a stateful value, and a function to update it.\n     *\n     * @version 16.8.0\n     * @see https://reactjs.org/docs/hooks-reference.html#usestate\n     */\n    function useState<S>(initialState: S | (() => S)): [S, Dispatch<SetStateAction<S>>];\n    // convenience overload when first argument is omitted\n    /**\n     * Returns a stateful value, and a function to update it.\n     *\n     * @version 16.8.0\n     * @see https://reactjs.org/docs/hooks-reference.html#usestate\n     */\n    function useState<S = undefined>(): [S | undefined, Dispatch<SetStateAction<S | undefined>>];\n    /**\n     * An alternative to `useState`.\n     *\n     * `useReducer` is usually preferable to `useState` when you have complex state logic that involves\n     * multiple sub-values. It also lets you optimize performance for components that trigger deep\n     * updates because you can pass `dispatch` down instead of callbacks.\n     *\n     * @version 16.8.0\n     * @see https://reactjs.org/docs/hooks-reference.html#usereducer\n     */\n    // overload where dispatch could accept 0 arguments.\n    function useReducer<R extends ReducerWithoutAction<any>, I>(\n        reducer: R,\n        initializerArg: I,\n        initializer: (arg: I) => ReducerStateWithoutAction<R>\n    ): [ReducerStateWithoutAction<R>, DispatchWithoutAction];\n    /**\n     * An alternative to `useState`.\n     *\n     * `useReducer` is usually preferable to `useState` when you have complex state logic that involves\n     * multiple sub-values. It also lets you optimize performance for components that trigger deep\n     * updates because you can pass `dispatch` down instead of callbacks.\n     *\n     * @version 16.8.0\n     * @see https://reactjs.org/docs/hooks-reference.html#usereducer\n     */\n    // overload where dispatch could accept 0 arguments.\n    function useReducer<R extends ReducerWithoutAction<any>>(\n        reducer: R,\n        initializerArg: ReducerStateWithoutAction<R>,\n        initializer?: undefined\n    ): [ReducerStateWithoutAction<R>, DispatchWithoutAction];\n    /**\n     * An alternative to `useState`.\n     *\n     * `useReducer` is usually preferable to `useState` when you have complex state logic that involves\n     * multiple sub-values. It also lets you optimize performance for components that trigger deep\n     * updates because you can pass `dispatch` down instead of callbacks.\n     *\n     * @version 16.8.0\n     * @see https://reactjs.org/docs/hooks-reference.html#usereducer\n     */\n    // overload where \"I\" may be a subset of ReducerState<R>; used to provide autocompletion.\n    // If \"I\" matches ReducerState<R> exactly then the last overload will allow initializer to be omitted.\n    // the last overload effectively behaves as if the identity function (x => x) is the initializer.\n    function useReducer<R extends Reducer<any, any>, I>(\n        reducer: R,\n        initializerArg: I & ReducerState<R>,\n        initializer: (arg: I & ReducerState<R>) => ReducerState<R>\n    ): [ReducerState<R>, Dispatch<ReducerAction<R>>];\n    /**\n     * An alternative to `useState`.\n     *\n     * `useReducer` is usually preferable to `useState` when you have complex state logic that involves\n     * multiple sub-values. It also lets you optimize performance for components that trigger deep\n     * updates because you can pass `dispatch` down instead of callbacks.\n     *\n     * @version 16.8.0\n     * @see https://reactjs.org/docs/hooks-reference.html#usereducer\n     */\n    // overload for free \"I\"; all goes as long as initializer converts it into \"ReducerState<R>\".\n    function useReducer<R extends Reducer<any, any>, I>(\n        reducer: R,\n        initializerArg: I,\n        initializer: (arg: I) => ReducerState<R>\n    ): [ReducerState<R>, Dispatch<ReducerAction<R>>];\n    /**\n     * An alternative to `useState`.\n     *\n     * `useReducer` is usually preferable to `useState` when you have complex state logic that involves\n     * multiple sub-values. It also lets you optimize performance for components that trigger deep\n     * updates because you can pass `dispatch` down instead of callbacks.\n     *\n     * @version 16.8.0\n     * @see https://reactjs.org/docs/hooks-reference.html#usereducer\n     */\n\n    // I'm not sure if I keep this 2-ary or if I make it (2,3)-ary; it's currently (2,3)-ary.\n    // The Flow types do have an overload for 3-ary invocation with undefined initializer.\n\n    // NOTE: without the ReducerState indirection, TypeScript would reduce S to be the most common\n    // supertype between the reducer's return type and the initialState (or the initializer's return type),\n    // which would prevent autocompletion from ever working.\n\n    // TODO: double-check if this weird overload logic is necessary. It is possible it's either a bug\n    // in older versions, or a regression in newer versions of the typescript completion service.\n    function useReducer<R extends Reducer<any, any>>(\n        reducer: R,\n        initialState: ReducerState<R>,\n        initializer?: undefined\n    ): [ReducerState<R>, Dispatch<ReducerAction<R>>];\n    /**\n     * `useRef` returns a mutable ref object whose `.current` property is initialized to the passed argument\n     * (`initialValue`). The returned object will persist for the full lifetime of the component.\n     *\n     * Note that `useRef()` is useful for more than the `ref` attribute. It’s handy for keeping any mutable\n     * value around similar to how you’d use instance fields in classes.\n     *\n     * @version 16.8.0\n     * @see https://reactjs.org/docs/hooks-reference.html#useref\n     */\n    // TODO (TypeScript 3.0): <T extends unknown>\n    function useRef<T>(initialValue: T): MutableRefObject<T>;\n    // convenience overload for refs given as a ref prop as they typically start with a null value\n    /**\n     * `useRef` returns a mutable ref object whose `.current` property is initialized to the passed argument\n     * (`initialValue`). The returned object will persist for the full lifetime of the component.\n     *\n     * Note that `useRef()` is useful for more than the `ref` attribute. It’s handy for keeping any mutable\n     * value around similar to how you’d use instance fields in classes.\n     *\n     * Usage note: if you need the result of useRef to be directly mutable, include `| null` in the type\n     * of the generic argument.\n     *\n     * @version 16.8.0\n     * @see https://reactjs.org/docs/hooks-reference.html#useref\n     */\n    // TODO (TypeScript 3.0): <T extends unknown>\n    function useRef<T>(initialValue: T|null): RefObject<T>;\n    // convenience overload for potentially undefined initialValue / call with 0 arguments\n    // has a default to stop it from defaulting to {} instead\n    /**\n     * `useRef` returns a mutable ref object whose `.current` property is initialized to the passed argument\n     * (`initialValue`). The returned object will persist for the full lifetime of the component.\n     *\n     * Note that `useRef()` is useful for more than the `ref` attribute. It’s handy for keeping any mutable\n     * value around similar to how you’d use instance fields in classes.\n     *\n     * @version 16.8.0\n     * @see https://reactjs.org/docs/hooks-reference.html#useref\n     */\n    // TODO (TypeScript 3.0): <T extends unknown>\n    function useRef<T = undefined>(): MutableRefObject<T | undefined>;\n    /**\n     * The signature is identical to `useEffect`, but it fires synchronously after all DOM mutations.\n     * Use this to read layout from the DOM and synchronously re-render. Updates scheduled inside\n     * `useLayoutEffect` will be flushed synchronously, before the browser has a chance to paint.\n     *\n     * Prefer the standard `useEffect` when possible to avoid blocking visual updates.\n     *\n     * If you’re migrating code from a class component, `useLayoutEffect` fires in the same phase as\n     * `componentDidMount` and `componentDidUpdate`.\n     *\n     * @version 16.8.0\n     * @see https://reactjs.org/docs/hooks-reference.html#uselayouteffect\n     */\n    function useLayoutEffect(effect: EffectCallback, deps?: DependencyList): void;\n    /**\n     * Accepts a function that contains imperative, possibly effectful code.\n     *\n     * @param effect Imperative function that can return a cleanup function\n     * @param deps If present, effect will only activate if the values in the list change.\n     *\n     * @version 16.8.0\n     * @see https://reactjs.org/docs/hooks-reference.html#useeffect\n     */\n    function useEffect(effect: EffectCallback, deps?: DependencyList): void;\n    // NOTE: this does not accept strings, but this will have to be fixed by removing strings from type Ref<T>\n    /**\n     * `useImperativeHandle` customizes the instance value that is exposed to parent components when using\n     * `ref`. As always, imperative code using refs should be avoided in most cases.\n     *\n     * `useImperativeHandle` should be used with `React.forwardRef`.\n     *\n     * @version 16.8.0\n     * @see https://reactjs.org/docs/hooks-reference.html#useimperativehandle\n     */\n    function useImperativeHandle<T, R extends T>(ref: Ref<T>|undefined, init: () => R, deps?: DependencyList): void;\n    // I made 'inputs' required here and in useMemo as there's no point to memoizing without the memoization key\n    // useCallback(X) is identical to just using X, useMemo(() => Y) is identical to just using Y.\n    /**\n     * `useCallback` will return a memoized version of the callback that only changes if one of the `inputs`\n     * has changed.\n     *\n     * @version 16.8.0\n     * @see https://reactjs.org/docs/hooks-reference.html#usecallback\n     */\n    // TODO (TypeScript 3.0): <T extends (...args: never[]) => unknown>\n    function useCallback<T extends (...args: any[]) => any>(callback: T, deps: DependencyList): T;\n    /**\n     * `useMemo` will only recompute the memoized value when one of the `deps` has changed.\n     *\n     * Usage note: if calling `useMemo` with a referentially stable function, also give it as the input in\n     * the second argument.\n     *\n     * ```ts\n     * function expensive () { ... }\n     *\n     * function Component () {\n     *   const expensiveResult = useMemo(expensive, [expensive])\n     *   return ...\n     * }\n     * ```\n     *\n     * @version 16.8.0\n     * @see https://reactjs.org/docs/hooks-reference.html#usememo\n     */\n    // allow undefined, but don't make it optional as that is very likely a mistake\n    function useMemo<T>(factory: () => T, deps: DependencyList | undefined): T;\n    /**\n     * `useDebugValue` can be used to display a label for custom hooks in React DevTools.\n     *\n     * NOTE: We don’t recommend adding debug values to every custom hook.\n     * It’s most valuable for custom hooks that are part of shared libraries.\n     *\n     * @version 16.8.0\n     * @see https://reactjs.org/docs/hooks-reference.html#usedebugvalue\n     */\n    // the name of the custom hook is itself derived from the function name at runtime:\n    // it's just the function name without the \"use\" prefix.\n    function useDebugValue<T>(value: T, format?: (value: T) => any): void;\n\n    //\n    // Event System\n    // ----------------------------------------------------------------------\n    // TODO: change any to unknown when moving to TS v3\n    interface BaseSyntheticEvent<E = object, C = any, T = any> {\n        nativeEvent: E;\n        currentTarget: C;\n        target: T;\n        bubbles: boolean;\n        cancelable: boolean;\n        defaultPrevented: boolean;\n        eventPhase: number;\n        isTrusted: boolean;\n        preventDefault(): void;\n        isDefaultPrevented(): boolean;\n        stopPropagation(): void;\n        isPropagationStopped(): boolean;\n        persist(): void;\n        timeStamp: number;\n        type: string;\n    }\n\n    /**\n     * currentTarget - a reference to the element on which the event listener is registered.\n     *\n     * target - a reference to the element from which the event was originally dispatched.\n     * This might be a child element to the element on which the event listener is registered.\n     * If you thought this should be `EventTarget & T`, see https://github.com/DefinitelyTyped/DefinitelyTyped/issues/11508#issuecomment-256045682\n     */\n    interface SyntheticEvent<T = Element, E = Event> extends BaseSyntheticEvent<E, EventTarget & T, EventTarget> {}\n\n    interface ClipboardEvent<T = Element> extends SyntheticEvent<T, NativeClipboardEvent> {\n        clipboardData: DataTransfer;\n    }\n\n    interface CompositionEvent<T = Element> extends SyntheticEvent<T, NativeCompositionEvent> {\n        data: string;\n    }\n\n    interface DragEvent<T = Element> extends MouseEvent<T, NativeDragEvent> {\n        dataTransfer: DataTransfer;\n    }\n\n    interface PointerEvent<T = Element> extends MouseEvent<T, NativePointerEvent> {\n        pointerId: number;\n        pressure: number;\n        tangentialPressure: number;\n        tiltX: number;\n        tiltY: number;\n        twist: number;\n        width: number;\n        height: number;\n        pointerType: 'mouse' | 'pen' | 'touch';\n        isPrimary: boolean;\n    }\n\n    interface FocusEvent<T = Element> extends SyntheticEvent<T, NativeFocusEvent> {\n        relatedTarget: EventTarget | null;\n        target: EventTarget & T;\n    }\n\n    // tslint:disable-next-line:no-empty-interface\n    interface FormEvent<T = Element> extends SyntheticEvent<T> {\n    }\n\n    interface InvalidEvent<T = Element> extends SyntheticEvent<T> {\n        target: EventTarget & T;\n    }\n\n    interface ChangeEvent<T = Element> extends SyntheticEvent<T> {\n        target: EventTarget & T;\n    }\n\n    interface KeyboardEvent<T = Element> extends SyntheticEvent<T, NativeKeyboardEvent> {\n        altKey: boolean;\n        /** @deprecated */\n        charCode: number;\n        ctrlKey: boolean;\n        /**\n         * See [DOM Level 3 Events spec](https://www.w3.org/TR/uievents-key/#keys-modifier). for a list of valid (case-sensitive) arguments to this method.\n         */\n        getModifierState(key: string): boolean;\n        /**\n         * See the [DOM Level 3 Events spec](https://www.w3.org/TR/uievents-key/#named-key-attribute-values). for possible values\n         */\n        key: string;\n        /** @deprecated */\n        keyCode: number;\n        locale: string;\n        location: number;\n        metaKey: boolean;\n        repeat: boolean;\n        shiftKey: boolean;\n        /** @deprecated */\n        which: number;\n    }\n\n    interface MouseEvent<T = Element, E = NativeMouseEvent> extends UIEvent<T, E> {\n        altKey: boolean;\n        button: number;\n        buttons: number;\n        clientX: number;\n        clientY: number;\n        ctrlKey: boolean;\n        /**\n         * See [DOM Level 3 Events spec](https://www.w3.org/TR/uievents-key/#keys-modifier). for a list of valid (case-sensitive) arguments to this method.\n         */\n        getModifierState(key: string): boolean;\n        metaKey: boolean;\n        movementX: number;\n        movementY: number;\n        pageX: number;\n        pageY: number;\n        relatedTarget: EventTarget | null;\n        screenX: number;\n        screenY: number;\n        shiftKey: boolean;\n    }\n\n    interface TouchEvent<T = Element> extends UIEvent<T, NativeTouchEvent> {\n        altKey: boolean;\n        changedTouches: TouchList;\n        ctrlKey: boolean;\n        /**\n         * See [DOM Level 3 Events spec](https://www.w3.org/TR/uievents-key/#keys-modifier). for a list of valid (case-sensitive) arguments to this method.\n         */\n        getModifierState(key: string): boolean;\n        metaKey: boolean;\n        shiftKey: boolean;\n        targetTouches: TouchList;\n        touches: TouchList;\n    }\n\n    interface UIEvent<T = Element, E = NativeUIEvent> extends SyntheticEvent<T, E> {\n        detail: number;\n        view: AbstractView;\n    }\n\n    interface WheelEvent<T = Element> extends MouseEvent<T, NativeWheelEvent> {\n        deltaMode: number;\n        deltaX: number;\n        deltaY: number;\n        deltaZ: number;\n    }\n\n    interface AnimationEvent<T = Element> extends SyntheticEvent<T, NativeAnimationEvent> {\n        animationName: string;\n        elapsedTime: number;\n        pseudoElement: string;\n    }\n\n    interface TransitionEvent<T = Element> extends SyntheticEvent<T, NativeTransitionEvent> {\n        elapsedTime: number;\n        propertyName: string;\n        pseudoElement: string;\n    }\n\n    //\n    // Event Handler Types\n    // ----------------------------------------------------------------------\n\n    type EventHandler<E extends SyntheticEvent<any>> = { bivarianceHack(event: E): void }[\"bivarianceHack\"];\n\n    type ReactEventHandler<T = Element> = EventHandler<SyntheticEvent<T>>;\n\n    type ClipboardEventHandler<T = Element> = EventHandler<ClipboardEvent<T>>;\n    type CompositionEventHandler<T = Element> = EventHandler<CompositionEvent<T>>;\n    type DragEventHandler<T = Element> = EventHandler<DragEvent<T>>;\n    type FocusEventHandler<T = Element> = EventHandler<FocusEvent<T>>;\n    type FormEventHandler<T = Element> = EventHandler<FormEvent<T>>;\n    type ChangeEventHandler<T = Element> = EventHandler<ChangeEvent<T>>;\n    type KeyboardEventHandler<T = Element> = EventHandler<KeyboardEvent<T>>;\n    type MouseEventHandler<T = Element> = EventHandler<MouseEvent<T>>;\n    type TouchEventHandler<T = Element> = EventHandler<TouchEvent<T>>;\n    type PointerEventHandler<T = Element> = EventHandler<PointerEvent<T>>;\n    type UIEventHandler<T = Element> = EventHandler<UIEvent<T>>;\n    type WheelEventHandler<T = Element> = EventHandler<WheelEvent<T>>;\n    type AnimationEventHandler<T = Element> = EventHandler<AnimationEvent<T>>;\n    type TransitionEventHandler<T = Element> = EventHandler<TransitionEvent<T>>;\n\n    //\n    // Props / DOM Attributes\n    // ----------------------------------------------------------------------\n\n    /**\n     * @deprecated. This was used to allow clients to pass `ref` and `key`\n     * to `createElement`, which is no longer necessary due to intersection\n     * types. If you need to declare a props object before passing it to\n     * `createElement` or a factory, use `ClassAttributes<T>`:\n     *\n     * ```ts\n     * var b: Button | null;\n     * var props: ButtonProps & ClassAttributes<Button> = {\n     *     ref: b => button = b, // ok!\n     *     label: \"I'm a Button\"\n     * };\n     * ```\n     */\n    interface Props<T> {\n        children?: ReactNode;\n        key?: Key;\n        ref?: LegacyRef<T>;\n    }\n\n    interface HTMLProps<T> extends AllHTMLAttributes<T>, ClassAttributes<T> {\n    }\n\n    type DetailedHTMLProps<E extends HTMLAttributes<T>, T> = ClassAttributes<T> & E;\n\n    interface SVGProps<T> extends SVGAttributes<T>, ClassAttributes<T> {\n    }\n\n    interface DOMAttributes<T> {\n        children?: ReactNode;\n        dangerouslySetInnerHTML?: {\n            __html: string;\n        };\n\n        // Clipboard Events\n        onCopy?: ClipboardEventHandler<T>;\n        onCopyCapture?: ClipboardEventHandler<T>;\n        onCut?: ClipboardEventHandler<T>;\n        onCutCapture?: ClipboardEventHandler<T>;\n        onPaste?: ClipboardEventHandler<T>;\n        onPasteCapture?: ClipboardEventHandler<T>;\n\n        // Composition Events\n        onCompositionEnd?: CompositionEventHandler<T>;\n        onCompositionEndCapture?: CompositionEventHandler<T>;\n        onCompositionStart?: CompositionEventHandler<T>;\n        onCompositionStartCapture?: CompositionEventHandler<T>;\n        onCompositionUpdate?: CompositionEventHandler<T>;\n        onCompositionUpdateCapture?: CompositionEventHandler<T>;\n\n        // Focus Events\n        onFocus?: FocusEventHandler<T>;\n        onFocusCapture?: FocusEventHandler<T>;\n        onBlur?: FocusEventHandler<T>;\n        onBlurCapture?: FocusEventHandler<T>;\n\n        // Form Events\n        onChange?: FormEventHandler<T>;\n        onChangeCapture?: FormEventHandler<T>;\n        onBeforeInput?: FormEventHandler<T>;\n        onBeforeInputCapture?: FormEventHandler<T>;\n        onInput?: FormEventHandler<T>;\n        onInputCapture?: FormEventHandler<T>;\n        onReset?: FormEventHandler<T>;\n        onResetCapture?: FormEventHandler<T>;\n        onSubmit?: FormEventHandler<T>;\n        onSubmitCapture?: FormEventHandler<T>;\n        onInvalid?: FormEventHandler<T>;\n        onInvalidCapture?: FormEventHandler<T>;\n\n        // Image Events\n        onLoad?: ReactEventHandler<T>;\n        onLoadCapture?: ReactEventHandler<T>;\n        onError?: ReactEventHandler<T>; // also a Media Event\n        onErrorCapture?: ReactEventHandler<T>; // also a Media Event\n\n        // Keyboard Events\n        onKeyDown?: KeyboardEventHandler<T>;\n        onKeyDownCapture?: KeyboardEventHandler<T>;\n        onKeyPress?: KeyboardEventHandler<T>;\n        onKeyPressCapture?: KeyboardEventHandler<T>;\n        onKeyUp?: KeyboardEventHandler<T>;\n        onKeyUpCapture?: KeyboardEventHandler<T>;\n\n        // Media Events\n        onAbort?: ReactEventHandler<T>;\n        onAbortCapture?: ReactEventHandler<T>;\n        onCanPlay?: ReactEventHandler<T>;\n        onCanPlayCapture?: ReactEventHandler<T>;\n        onCanPlayThrough?: ReactEventHandler<T>;\n        onCanPlayThroughCapture?: ReactEventHandler<T>;\n        onDurationChange?: ReactEventHandler<T>;\n        onDurationChangeCapture?: ReactEventHandler<T>;\n        onEmptied?: ReactEventHandler<T>;\n        onEmptiedCapture?: ReactEventHandler<T>;\n        onEncrypted?: ReactEventHandler<T>;\n        onEncryptedCapture?: ReactEventHandler<T>;\n        onEnded?: ReactEventHandler<T>;\n        onEndedCapture?: ReactEventHandler<T>;\n        onLoadedData?: ReactEventHandler<T>;\n        onLoadedDataCapture?: ReactEventHandler<T>;\n        onLoadedMetadata?: ReactEventHandler<T>;\n        onLoadedMetadataCapture?: ReactEventHandler<T>;\n        onLoadStart?: ReactEventHandler<T>;\n        onLoadStartCapture?: ReactEventHandler<T>;\n        onPause?: ReactEventHandler<T>;\n        onPauseCapture?: ReactEventHandler<T>;\n        onPlay?: ReactEventHandler<T>;\n        onPlayCapture?: ReactEventHandler<T>;\n        onPlaying?: ReactEventHandler<T>;\n        onPlayingCapture?: ReactEventHandler<T>;\n        onProgress?: ReactEventHandler<T>;\n        onProgressCapture?: ReactEventHandler<T>;\n        onRateChange?: ReactEventHandler<T>;\n        onRateChangeCapture?: ReactEventHandler<T>;\n        onSeeked?: ReactEventHandler<T>;\n        onSeekedCapture?: ReactEventHandler<T>;\n        onSeeking?: ReactEventHandler<T>;\n        onSeekingCapture?: ReactEventHandler<T>;\n        onStalled?: ReactEventHandler<T>;\n        onStalledCapture?: ReactEventHandler<T>;\n        onSuspend?: ReactEventHandler<T>;\n        onSuspendCapture?: ReactEventHandler<T>;\n        onTimeUpdate?: ReactEventHandler<T>;\n        onTimeUpdateCapture?: ReactEventHandler<T>;\n        onVolumeChange?: ReactEventHandler<T>;\n        onVolumeChangeCapture?: ReactEventHandler<T>;\n        onWaiting?: ReactEventHandler<T>;\n        onWaitingCapture?: ReactEventHandler<T>;\n\n        // MouseEvents\n        onAuxClick?: MouseEventHandler<T>;\n        onAuxClickCapture?: MouseEventHandler<T>;\n        onClick?: MouseEventHandler<T>;\n        onClickCapture?: MouseEventHandler<T>;\n        onContextMenu?: MouseEventHandler<T>;\n        onContextMenuCapture?: MouseEventHandler<T>;\n        onDoubleClick?: MouseEventHandler<T>;\n        onDoubleClickCapture?: MouseEventHandler<T>;\n        onDrag?: DragEventHandler<T>;\n        onDragCapture?: DragEventHandler<T>;\n        onDragEnd?: DragEventHandler<T>;\n        onDragEndCapture?: DragEventHandler<T>;\n        onDragEnter?: DragEventHandler<T>;\n        onDragEnterCapture?: DragEventHandler<T>;\n        onDragExit?: DragEventHandler<T>;\n        onDragExitCapture?: DragEventHandler<T>;\n        onDragLeave?: DragEventHandler<T>;\n        onDragLeaveCapture?: DragEventHandler<T>;\n        onDragOver?: DragEventHandler<T>;\n        onDragOverCapture?: DragEventHandler<T>;\n        onDragStart?: DragEventHandler<T>;\n        onDragStartCapture?: DragEventHandler<T>;\n        onDrop?: DragEventHandler<T>;\n        onDropCapture?: DragEventHandler<T>;\n        onMouseDown?: MouseEventHandler<T>;\n        onMouseDownCapture?: MouseEventHandler<T>;\n        onMouseEnter?: MouseEventHandler<T>;\n        onMouseLeave?: MouseEventHandler<T>;\n        onMouseMove?: MouseEventHandler<T>;\n        onMouseMoveCapture?: MouseEventHandler<T>;\n        onMouseOut?: MouseEventHandler<T>;\n        onMouseOutCapture?: MouseEventHandler<T>;\n        onMouseOver?: MouseEventHandler<T>;\n        onMouseOverCapture?: MouseEventHandler<T>;\n        onMouseUp?: MouseEventHandler<T>;\n        onMouseUpCapture?: MouseEventHandler<T>;\n\n        // Selection Events\n        onSelect?: ReactEventHandler<T>;\n        onSelectCapture?: ReactEventHandler<T>;\n\n        // Touch Events\n        onTouchCancel?: TouchEventHandler<T>;\n        onTouchCancelCapture?: TouchEventHandler<T>;\n        onTouchEnd?: TouchEventHandler<T>;\n        onTouchEndCapture?: TouchEventHandler<T>;\n        onTouchMove?: TouchEventHandler<T>;\n        onTouchMoveCapture?: TouchEventHandler<T>;\n        onTouchStart?: TouchEventHandler<T>;\n        onTouchStartCapture?: TouchEventHandler<T>;\n\n        // Pointer Events\n        onPointerDown?: PointerEventHandler<T>;\n        onPointerDownCapture?: PointerEventHandler<T>;\n        onPointerMove?: PointerEventHandler<T>;\n        onPointerMoveCapture?: PointerEventHandler<T>;\n        onPointerUp?: PointerEventHandler<T>;\n        onPointerUpCapture?: PointerEventHandler<T>;\n        onPointerCancel?: PointerEventHandler<T>;\n        onPointerCancelCapture?: PointerEventHandler<T>;\n        onPointerEnter?: PointerEventHandler<T>;\n        onPointerEnterCapture?: PointerEventHandler<T>;\n        onPointerLeave?: PointerEventHandler<T>;\n        onPointerLeaveCapture?: PointerEventHandler<T>;\n        onPointerOver?: PointerEventHandler<T>;\n        onPointerOverCapture?: PointerEventHandler<T>;\n        onPointerOut?: PointerEventHandler<T>;\n        onPointerOutCapture?: PointerEventHandler<T>;\n        onGotPointerCapture?: PointerEventHandler<T>;\n        onGotPointerCaptureCapture?: PointerEventHandler<T>;\n        onLostPointerCapture?: PointerEventHandler<T>;\n        onLostPointerCaptureCapture?: PointerEventHandler<T>;\n\n        // UI Events\n        onScroll?: UIEventHandler<T>;\n        onScrollCapture?: UIEventHandler<T>;\n\n        // Wheel Events\n        onWheel?: WheelEventHandler<T>;\n        onWheelCapture?: WheelEventHandler<T>;\n\n        // Animation Events\n        onAnimationStart?: AnimationEventHandler<T>;\n        onAnimationStartCapture?: AnimationEventHandler<T>;\n        onAnimationEnd?: AnimationEventHandler<T>;\n        onAnimationEndCapture?: AnimationEventHandler<T>;\n        onAnimationIteration?: AnimationEventHandler<T>;\n        onAnimationIterationCapture?: AnimationEventHandler<T>;\n\n        // Transition Events\n        onTransitionEnd?: TransitionEventHandler<T>;\n        onTransitionEndCapture?: TransitionEventHandler<T>;\n    }\n\n    export interface CSSProperties extends CSS.Properties<string | number> {\n        /**\n         * The index signature was removed to enable closed typing for style\n         * using CSSType. You're able to use type assertion or module augmentation\n         * to add properties or an index signature of your own.\n         *\n         * For examples and more information, visit:\n         * https://github.com/frenic/csstype#what-should-i-do-when-i-get-type-errors\n         */\n    }\n\n    // All the WAI-ARIA 1.1 attributes from https://www.w3.org/TR/wai-aria-1.1/\n    interface AriaAttributes {\n        /** Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application. */\n        'aria-activedescendant'?: string;\n        /** Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute. */\n        'aria-atomic'?: boolean | 'false' | 'true';\n        /**\n         * Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for an input and specifies how predictions would be\n         * presented if they are made.\n         */\n        'aria-autocomplete'?: 'none' | 'inline' | 'list' | 'both';\n        /** Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user. */\n        'aria-busy'?: boolean | 'false' | 'true';\n        /**\n         * Indicates the current \"checked\" state of checkboxes, radio buttons, and other widgets.\n         * @see aria-pressed @see aria-selected.\n         */\n        'aria-checked'?: boolean | 'false' | 'mixed' | 'true';\n        /**\n         * Defines the total number of columns in a table, grid, or treegrid.\n         * @see aria-colindex.\n         */\n        'aria-colcount'?: number;\n        /**\n         * Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid.\n         * @see aria-colcount @see aria-colspan.\n         */\n        'aria-colindex'?: number;\n        /**\n         * Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.\n         * @see aria-colindex @see aria-rowspan.\n         */\n        'aria-colspan'?: number;\n        /**\n         * Identifies the element (or elements) whose contents or presence are controlled by the current element.\n         * @see aria-owns.\n         */\n        'aria-controls'?: string;\n        /** Indicates the element that represents the current item within a container or set of related elements. */\n        'aria-current'?: boolean | 'false' | 'true' | 'page' | 'step' | 'location' | 'date' | 'time';\n        /**\n         * Identifies the element (or elements) that describes the object.\n         * @see aria-labelledby\n         */\n        'aria-describedby'?: string;\n        /**\n         * Identifies the element that provides a detailed, extended description for the object.\n         * @see aria-describedby.\n         */\n        'aria-details'?: string;\n        /**\n         * Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.\n         * @see aria-hidden @see aria-readonly.\n         */\n        'aria-disabled'?: boolean | 'false' | 'true';\n        /**\n         * Indicates what functions can be performed when a dragged object is released on the drop target.\n         * @deprecated in ARIA 1.1\n         */\n        'aria-dropeffect'?: 'none' | 'copy' | 'execute' | 'link' | 'move' | 'popup';\n        /**\n         * Identifies the element that provides an error message for the object.\n         * @see aria-invalid @see aria-describedby.\n         */\n        'aria-errormessage'?: string;\n        /** Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed. */\n        'aria-expanded'?: boolean | 'false' | 'true';\n        /**\n         * Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion,\n         * allows assistive technology to override the general default of reading in document source order.\n         */\n        'aria-flowto'?: string;\n        /**\n         * Indicates an element's \"grabbed\" state in a drag-and-drop operation.\n         * @deprecated in ARIA 1.1\n         */\n        'aria-grabbed'?: boolean | 'false' | 'true';\n        /** Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element. */\n        'aria-haspopup'?: boolean | 'false' | 'true' | 'menu' | 'listbox' | 'tree' | 'grid' | 'dialog';\n        /**\n         * Indicates whether the element is exposed to an accessibility API.\n         * @see aria-disabled.\n         */\n        'aria-hidden'?: boolean | 'false' | 'true';\n        /**\n         * Indicates the entered value does not conform to the format expected by the application.\n         * @see aria-errormessage.\n         */\n        'aria-invalid'?: boolean | 'false' | 'true' | 'grammar' | 'spelling';\n        /** Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element. */\n        'aria-keyshortcuts'?: string;\n        /**\n         * Defines a string value that labels the current element.\n         * @see aria-labelledby.\n         */\n        'aria-label'?: string;\n        /**\n         * Identifies the element (or elements) that labels the current element.\n         * @see aria-describedby.\n         */\n        'aria-labelledby'?: string;\n        /** Defines the hierarchical level of an element within a structure. */\n        'aria-level'?: number;\n        /** Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region. */\n        'aria-live'?: 'off' | 'assertive' | 'polite';\n        /** Indicates whether an element is modal when displayed. */\n        'aria-modal'?: boolean | 'false' | 'true';\n        /** Indicates whether a text box accepts multiple lines of input or only a single line. */\n        'aria-multiline'?: boolean | 'false' | 'true';\n        /** Indicates that the user may select more than one item from the current selectable descendants. */\n        'aria-multiselectable'?: boolean | 'false' | 'true';\n        /** Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous. */\n        'aria-orientation'?: 'horizontal' | 'vertical';\n        /**\n         * Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship\n         * between DOM elements where the DOM hierarchy cannot be used to represent the relationship.\n         * @see aria-controls.\n         */\n        'aria-owns'?: string;\n        /**\n         * Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.\n         * A hint could be a sample value or a brief description of the expected format.\n         */\n        'aria-placeholder'?: string;\n        /**\n         * Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\n         * @see aria-setsize.\n         */\n        'aria-posinset'?: number;\n        /**\n         * Indicates the current \"pressed\" state of toggle buttons.\n         * @see aria-checked @see aria-selected.\n         */\n        'aria-pressed'?: boolean | 'false' | 'mixed' | 'true';\n        /**\n         * Indicates that the element is not editable, but is otherwise operable.\n         * @see aria-disabled.\n         */\n        'aria-readonly'?: boolean | 'false' | 'true';\n        /**\n         * Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.\n         * @see aria-atomic.\n         */\n        'aria-relevant'?: 'additions' | 'additions removals' | 'additions text' | 'all' | 'removals' | 'removals additions' | 'removals text' | 'text' | 'text additions' | 'text removals';\n        /** Indicates that user input is required on the element before a form may be submitted. */\n        'aria-required'?: boolean | 'false' | 'true';\n        /** Defines a human-readable, author-localized description for the role of an element. */\n        'aria-roledescription'?: string;\n        /**\n         * Defines the total number of rows in a table, grid, or treegrid.\n         * @see aria-rowindex.\n         */\n        'aria-rowcount'?: number;\n        /**\n         * Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid.\n         * @see aria-rowcount @see aria-rowspan.\n         */\n        'aria-rowindex'?: number;\n        /**\n         * Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.\n         * @see aria-rowindex @see aria-colspan.\n         */\n        'aria-rowspan'?: number;\n        /**\n         * Indicates the current \"selected\" state of various widgets.\n         * @see aria-checked @see aria-pressed.\n         */\n        'aria-selected'?: boolean | 'false' | 'true';\n        /**\n         * Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\n         * @see aria-posinset.\n         */\n        'aria-setsize'?: number;\n        /** Indicates if items in a table or grid are sorted in ascending or descending order. */\n        'aria-sort'?: 'none' | 'ascending' | 'descending' | 'other';\n        /** Defines the maximum allowed value for a range widget. */\n        'aria-valuemax'?: number;\n        /** Defines the minimum allowed value for a range widget. */\n        'aria-valuemin'?: number;\n        /**\n         * Defines the current value for a range widget.\n         * @see aria-valuetext.\n         */\n        'aria-valuenow'?: number;\n        /** Defines the human readable text alternative of aria-valuenow for a range widget. */\n        'aria-valuetext'?: string;\n    }\n\n    interface HTMLAttributes<T> extends AriaAttributes, DOMAttributes<T> {\n        // React-specific Attributes\n        defaultChecked?: boolean;\n        defaultValue?: string | number | ReadonlyArray<string>;\n        suppressContentEditableWarning?: boolean;\n        suppressHydrationWarning?: boolean;\n\n        // Standard HTML Attributes\n        accessKey?: string;\n        className?: string;\n        contentEditable?: Booleanish | \"inherit\";\n        contextMenu?: string;\n        dir?: string;\n        draggable?: Booleanish;\n        hidden?: boolean;\n        id?: string;\n        lang?: string;\n        placeholder?: string;\n        slot?: string;\n        spellCheck?: Booleanish;\n        style?: CSSProperties;\n        tabIndex?: number;\n        title?: string;\n        translate?: 'yes' | 'no';\n\n        // Unknown\n        radioGroup?: string; // <command>, <menuitem>\n\n        // WAI-ARIA\n        role?: string;\n\n        // RDFa Attributes\n        about?: string;\n        datatype?: string;\n        inlist?: any;\n        prefix?: string;\n        property?: string;\n        resource?: string;\n        typeof?: string;\n        vocab?: string;\n\n        // Non-standard Attributes\n        autoCapitalize?: string;\n        autoCorrect?: string;\n        autoSave?: string;\n        color?: string;\n        itemProp?: string;\n        itemScope?: boolean;\n        itemType?: string;\n        itemID?: string;\n        itemRef?: string;\n        results?: number;\n        security?: string;\n        unselectable?: 'on' | 'off';\n\n        // Living Standard\n        /**\n         * Hints at the type of data that might be entered by the user while editing the element or its contents\n         * @see https://html.spec.whatwg.org/multipage/interaction.html#input-modalities:-the-inputmode-attribute\n         */\n        inputMode?: 'none' | 'text' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search';\n        /**\n         * Specify that a standard HTML element should behave like a defined custom built-in element\n         * @see https://html.spec.whatwg.org/multipage/custom-elements.html#attr-is\n         */\n        is?: string;\n    }\n\n    interface AllHTMLAttributes<T> extends HTMLAttributes<T> {\n        // Standard HTML Attributes\n        accept?: string;\n        acceptCharset?: string;\n        action?: string;\n        allowFullScreen?: boolean;\n        allowTransparency?: boolean;\n        alt?: string;\n        as?: string;\n        async?: boolean;\n        autoComplete?: string;\n        autoFocus?: boolean;\n        autoPlay?: boolean;\n        capture?: boolean | string;\n        cellPadding?: number | string;\n        cellSpacing?: number | string;\n        charSet?: string;\n        challenge?: string;\n        checked?: boolean;\n        cite?: string;\n        classID?: string;\n        cols?: number;\n        colSpan?: number;\n        content?: string;\n        controls?: boolean;\n        coords?: string;\n        crossOrigin?: string;\n        data?: string;\n        dateTime?: string;\n        default?: boolean;\n        defer?: boolean;\n        disabled?: boolean;\n        download?: any;\n        encType?: string;\n        form?: string;\n        formAction?: string;\n        formEncType?: string;\n        formMethod?: string;\n        formNoValidate?: boolean;\n        formTarget?: string;\n        frameBorder?: number | string;\n        headers?: string;\n        height?: number | string;\n        high?: number;\n        href?: string;\n        hrefLang?: string;\n        htmlFor?: string;\n        httpEquiv?: string;\n        integrity?: string;\n        keyParams?: string;\n        keyType?: string;\n        kind?: string;\n        label?: string;\n        list?: string;\n        loop?: boolean;\n        low?: number;\n        manifest?: string;\n        marginHeight?: number;\n        marginWidth?: number;\n        max?: number | string;\n        maxLength?: number;\n        media?: string;\n        mediaGroup?: string;\n        method?: string;\n        min?: number | string;\n        minLength?: number;\n        multiple?: boolean;\n        muted?: boolean;\n        name?: string;\n        nonce?: string;\n        noValidate?: boolean;\n        open?: boolean;\n        optimum?: number;\n        pattern?: string;\n        placeholder?: string;\n        playsInline?: boolean;\n        poster?: string;\n        preload?: string;\n        readOnly?: boolean;\n        rel?: string;\n        required?: boolean;\n        reversed?: boolean;\n        rows?: number;\n        rowSpan?: number;\n        sandbox?: string;\n        scope?: string;\n        scoped?: boolean;\n        scrolling?: string;\n        seamless?: boolean;\n        selected?: boolean;\n        shape?: string;\n        size?: number;\n        sizes?: string;\n        span?: number;\n        src?: string;\n        srcDoc?: string;\n        srcLang?: string;\n        srcSet?: string;\n        start?: number;\n        step?: number | string;\n        summary?: string;\n        target?: string;\n        type?: string;\n        useMap?: string;\n        value?: string | ReadonlyArray<string> | number;\n        width?: number | string;\n        wmode?: string;\n        wrap?: string;\n    }\n\n    type HTMLAttributeReferrerPolicy =\n        | ''\n        | 'no-referrer'\n        | 'no-referrer-when-downgrade'\n        | 'origin'\n        | 'origin-when-cross-origin'\n        | 'same-origin'\n        | 'strict-origin'\n        | 'strict-origin-when-cross-origin'\n        | 'unsafe-url';\n\n    interface AnchorHTMLAttributes<T> extends HTMLAttributes<T> {\n        download?: any;\n        href?: string;\n        hrefLang?: string;\n        media?: string;\n        ping?: string;\n        rel?: string;\n        target?: string;\n        type?: string;\n        referrerPolicy?: HTMLAttributeReferrerPolicy;\n    }\n\n    // tslint:disable-next-line:no-empty-interface\n    interface AudioHTMLAttributes<T> extends MediaHTMLAttributes<T> {}\n\n    interface AreaHTMLAttributes<T> extends HTMLAttributes<T> {\n        alt?: string;\n        coords?: string;\n        download?: any;\n        href?: string;\n        hrefLang?: string;\n        media?: string;\n        referrerPolicy?: HTMLAttributeReferrerPolicy;\n        rel?: string;\n        shape?: string;\n        target?: string;\n    }\n\n    interface BaseHTMLAttributes<T> extends HTMLAttributes<T> {\n        href?: string;\n        target?: string;\n    }\n\n    interface BlockquoteHTMLAttributes<T> extends HTMLAttributes<T> {\n        cite?: string;\n    }\n\n    interface ButtonHTMLAttributes<T> extends HTMLAttributes<T> {\n        autoFocus?: boolean;\n        disabled?: boolean;\n        form?: string;\n        formAction?: string;\n        formEncType?: string;\n        formMethod?: string;\n        formNoValidate?: boolean;\n        formTarget?: string;\n        name?: string;\n        type?: 'submit' | 'reset' | 'button';\n        value?: string | ReadonlyArray<string> | number;\n    }\n\n    interface CanvasHTMLAttributes<T> extends HTMLAttributes<T> {\n        height?: number | string;\n        width?: number | string;\n    }\n\n    interface ColHTMLAttributes<T> extends HTMLAttributes<T> {\n        span?: number;\n        width?: number | string;\n    }\n\n    interface ColgroupHTMLAttributes<T> extends HTMLAttributes<T> {\n        span?: number;\n    }\n\n    interface DataHTMLAttributes<T> extends HTMLAttributes<T> {\n        value?: string | ReadonlyArray<string> | number;\n    }\n\n    interface DetailsHTMLAttributes<T> extends HTMLAttributes<T> {\n        open?: boolean;\n        onToggle?: ReactEventHandler<T>;\n    }\n\n    interface DelHTMLAttributes<T> extends HTMLAttributes<T> {\n        cite?: string;\n        dateTime?: string;\n    }\n\n    interface DialogHTMLAttributes<T> extends HTMLAttributes<T> {\n        open?: boolean;\n    }\n\n    interface EmbedHTMLAttributes<T> extends HTMLAttributes<T> {\n        height?: number | string;\n        src?: string;\n        type?: string;\n        width?: number | string;\n    }\n\n    interface FieldsetHTMLAttributes<T> extends HTMLAttributes<T> {\n        disabled?: boolean;\n        form?: string;\n        name?: string;\n    }\n\n    interface FormHTMLAttributes<T> extends HTMLAttributes<T> {\n        acceptCharset?: string;\n        action?: string;\n        autoComplete?: string;\n        encType?: string;\n        method?: string;\n        name?: string;\n        noValidate?: boolean;\n        target?: string;\n    }\n\n    interface HtmlHTMLAttributes<T> extends HTMLAttributes<T> {\n        manifest?: string;\n    }\n\n    interface IframeHTMLAttributes<T> extends HTMLAttributes<T> {\n        allow?: string;\n        allowFullScreen?: boolean;\n        allowTransparency?: boolean;\n        /** @deprecated */\n        frameBorder?: number | string;\n        height?: number | string;\n        loading?: \"eager\" | \"lazy\";\n        /** @deprecated */\n        marginHeight?: number;\n        /** @deprecated */\n        marginWidth?: number;\n        name?: string;\n        referrerPolicy?: HTMLAttributeReferrerPolicy;\n        sandbox?: string;\n        /** @deprecated */\n        scrolling?: string;\n        seamless?: boolean;\n        src?: string;\n        srcDoc?: string;\n        width?: number | string;\n    }\n\n    interface ImgHTMLAttributes<T> extends HTMLAttributes<T> {\n        alt?: string;\n        crossOrigin?: \"anonymous\" | \"use-credentials\" | \"\";\n        decoding?: \"async\" | \"auto\" | \"sync\";\n        height?: number | string;\n        loading?: \"eager\" | \"lazy\";\n        referrerPolicy?: HTMLAttributeReferrerPolicy;\n        sizes?: string;\n        src?: string;\n        srcSet?: string;\n        useMap?: string;\n        width?: number | string;\n    }\n\n    interface InsHTMLAttributes<T> extends HTMLAttributes<T> {\n        cite?: string;\n        dateTime?: string;\n    }\n\n    interface InputHTMLAttributes<T> extends HTMLAttributes<T> {\n        accept?: string;\n        alt?: string;\n        autoComplete?: string;\n        autoFocus?: boolean;\n        capture?: boolean | string; // https://www.w3.org/TR/html-media-capture/#the-capture-attribute\n        checked?: boolean;\n        crossOrigin?: string;\n        disabled?: boolean;\n        form?: string;\n        formAction?: string;\n        formEncType?: string;\n        formMethod?: string;\n        formNoValidate?: boolean;\n        formTarget?: string;\n        height?: number | string;\n        list?: string;\n        max?: number | string;\n        maxLength?: number;\n        min?: number | string;\n        minLength?: number;\n        multiple?: boolean;\n        name?: string;\n        pattern?: string;\n        placeholder?: string;\n        readOnly?: boolean;\n        required?: boolean;\n        size?: number;\n        src?: string;\n        step?: number | string;\n        type?: string;\n        value?: string | ReadonlyArray<string> | number;\n        width?: number | string;\n\n        onChange?: ChangeEventHandler<T>;\n    }\n\n    interface KeygenHTMLAttributes<T> extends HTMLAttributes<T> {\n        autoFocus?: boolean;\n        challenge?: string;\n        disabled?: boolean;\n        form?: string;\n        keyType?: string;\n        keyParams?: string;\n        name?: string;\n    }\n\n    interface LabelHTMLAttributes<T> extends HTMLAttributes<T> {\n        form?: string;\n        htmlFor?: string;\n    }\n\n    interface LiHTMLAttributes<T> extends HTMLAttributes<T> {\n        value?: string | ReadonlyArray<string> | number;\n    }\n\n    interface LinkHTMLAttributes<T> extends HTMLAttributes<T> {\n        as?: string;\n        crossOrigin?: string;\n        href?: string;\n        hrefLang?: string;\n        integrity?: string;\n        media?: string;\n        referrerPolicy?: HTMLAttributeReferrerPolicy;\n        rel?: string;\n        sizes?: string;\n        type?: string;\n        charSet?: string;\n    }\n\n    interface MapHTMLAttributes<T> extends HTMLAttributes<T> {\n        name?: string;\n    }\n\n    interface MenuHTMLAttributes<T> extends HTMLAttributes<T> {\n        type?: string;\n    }\n\n    interface MediaHTMLAttributes<T> extends HTMLAttributes<T> {\n        autoPlay?: boolean;\n        controls?: boolean;\n        controlsList?: string;\n        crossOrigin?: string;\n        loop?: boolean;\n        mediaGroup?: string;\n        muted?: boolean;\n        playsInline?: boolean;\n        preload?: string;\n        src?: string;\n    }\n\n    interface MetaHTMLAttributes<T> extends HTMLAttributes<T> {\n        charSet?: string;\n        content?: string;\n        httpEquiv?: string;\n        name?: string;\n    }\n\n    interface MeterHTMLAttributes<T> extends HTMLAttributes<T> {\n        form?: string;\n        high?: number;\n        low?: number;\n        max?: number | string;\n        min?: number | string;\n        optimum?: number;\n        value?: string | ReadonlyArray<string> | number;\n    }\n\n    interface QuoteHTMLAttributes<T> extends HTMLAttributes<T> {\n        cite?: string;\n    }\n\n    interface ObjectHTMLAttributes<T> extends HTMLAttributes<T> {\n        classID?: string;\n        data?: string;\n        form?: string;\n        height?: number | string;\n        name?: string;\n        type?: string;\n        useMap?: string;\n        width?: number | string;\n        wmode?: string;\n    }\n\n    interface OlHTMLAttributes<T> extends HTMLAttributes<T> {\n        reversed?: boolean;\n        start?: number;\n        type?: '1' | 'a' | 'A' | 'i' | 'I';\n    }\n\n    interface OptgroupHTMLAttributes<T> extends HTMLAttributes<T> {\n        disabled?: boolean;\n        label?: string;\n    }\n\n    interface OptionHTMLAttributes<T> extends HTMLAttributes<T> {\n        disabled?: boolean;\n        label?: string;\n        selected?: boolean;\n        value?: string | ReadonlyArray<string> | number;\n    }\n\n    interface OutputHTMLAttributes<T> extends HTMLAttributes<T> {\n        form?: string;\n        htmlFor?: string;\n        name?: string;\n    }\n\n    interface ParamHTMLAttributes<T> extends HTMLAttributes<T> {\n        name?: string;\n        value?: string | ReadonlyArray<string> | number;\n    }\n\n    interface ProgressHTMLAttributes<T> extends HTMLAttributes<T> {\n        max?: number | string;\n        value?: string | ReadonlyArray<string> | number;\n    }\n\n    interface SlotHTMLAttributes<T> extends HTMLAttributes<T> {\n        name?: string;\n    }\n\n    interface ScriptHTMLAttributes<T> extends HTMLAttributes<T> {\n        async?: boolean;\n        /** @deprecated */\n        charSet?: string;\n        crossOrigin?: string;\n        defer?: boolean;\n        integrity?: string;\n        noModule?: boolean;\n        nonce?: string;\n        referrerPolicy?: HTMLAttributeReferrerPolicy;\n        src?: string;\n        type?: string;\n    }\n\n    interface SelectHTMLAttributes<T> extends HTMLAttributes<T> {\n        autoComplete?: string;\n        autoFocus?: boolean;\n        disabled?: boolean;\n        form?: string;\n        multiple?: boolean;\n        name?: string;\n        required?: boolean;\n        size?: number;\n        value?: string | ReadonlyArray<string> | number;\n        onChange?: ChangeEventHandler<T>;\n    }\n\n    interface SourceHTMLAttributes<T> extends HTMLAttributes<T> {\n        media?: string;\n        sizes?: string;\n        src?: string;\n        srcSet?: string;\n        type?: string;\n    }\n\n    interface StyleHTMLAttributes<T> extends HTMLAttributes<T> {\n        media?: string;\n        nonce?: string;\n        scoped?: boolean;\n        type?: string;\n    }\n\n    interface TableHTMLAttributes<T> extends HTMLAttributes<T> {\n        cellPadding?: number | string;\n        cellSpacing?: number | string;\n        summary?: string;\n        width?: number | string;\n    }\n\n    interface TextareaHTMLAttributes<T> extends HTMLAttributes<T> {\n        autoComplete?: string;\n        autoFocus?: boolean;\n        cols?: number;\n        dirName?: string;\n        disabled?: boolean;\n        form?: string;\n        maxLength?: number;\n        minLength?: number;\n        name?: string;\n        placeholder?: string;\n        readOnly?: boolean;\n        required?: boolean;\n        rows?: number;\n        value?: string | ReadonlyArray<string> | number;\n        wrap?: string;\n\n        onChange?: ChangeEventHandler<T>;\n    }\n\n    interface TdHTMLAttributes<T> extends HTMLAttributes<T> {\n        align?: \"left\" | \"center\" | \"right\" | \"justify\" | \"char\";\n        colSpan?: number;\n        headers?: string;\n        rowSpan?: number;\n        scope?: string;\n        abbr?: string;\n        height?: number | string;\n        width?: number | string;\n        valign?: \"top\" | \"middle\" | \"bottom\" | \"baseline\";\n    }\n\n    interface ThHTMLAttributes<T> extends HTMLAttributes<T> {\n        align?: \"left\" | \"center\" | \"right\" | \"justify\" | \"char\";\n        colSpan?: number;\n        headers?: string;\n        rowSpan?: number;\n        scope?: string;\n        abbr?: string;\n    }\n\n    interface TimeHTMLAttributes<T> extends HTMLAttributes<T> {\n        dateTime?: string;\n    }\n\n    interface TrackHTMLAttributes<T> extends HTMLAttributes<T> {\n        default?: boolean;\n        kind?: string;\n        label?: string;\n        src?: string;\n        srcLang?: string;\n    }\n\n    interface VideoHTMLAttributes<T> extends MediaHTMLAttributes<T> {\n        height?: number | string;\n        playsInline?: boolean;\n        poster?: string;\n        width?: number | string;\n        disablePictureInPicture?: boolean;\n    }\n\n    // this list is \"complete\" in that it contains every SVG attribute\n    // that React supports, but the types can be improved.\n    // Full list here: https://facebook.github.io/react/docs/dom-elements.html\n    //\n    // The three broad type categories are (in order of restrictiveness):\n    //   - \"number | string\"\n    //   - \"string\"\n    //   - union of string literals\n    interface SVGAttributes<T> extends AriaAttributes, DOMAttributes<T> {\n        // Attributes which also defined in HTMLAttributes\n        // See comment in SVGDOMPropertyConfig.js\n        className?: string;\n        color?: string;\n        height?: number | string;\n        id?: string;\n        lang?: string;\n        max?: number | string;\n        media?: string;\n        method?: string;\n        min?: number | string;\n        name?: string;\n        style?: CSSProperties;\n        target?: string;\n        type?: string;\n        width?: number | string;\n\n        // Other HTML properties supported by SVG elements in browsers\n        role?: string;\n        tabIndex?: number;\n        crossOrigin?: \"anonymous\" | \"use-credentials\" | \"\";\n\n        // SVG Specific attributes\n        accentHeight?: number | string;\n        accumulate?: \"none\" | \"sum\";\n        additive?: \"replace\" | \"sum\";\n        alignmentBaseline?: \"auto\" | \"baseline\" | \"before-edge\" | \"text-before-edge\" | \"middle\" | \"central\" | \"after-edge\" |\n        \"text-after-edge\" | \"ideographic\" | \"alphabetic\" | \"hanging\" | \"mathematical\" | \"inherit\";\n        allowReorder?: \"no\" | \"yes\";\n        alphabetic?: number | string;\n        amplitude?: number | string;\n        arabicForm?: \"initial\" | \"medial\" | \"terminal\" | \"isolated\";\n        ascent?: number | string;\n        attributeName?: string;\n        attributeType?: string;\n        autoReverse?: Booleanish;\n        azimuth?: number | string;\n        baseFrequency?: number | string;\n        baselineShift?: number | string;\n        baseProfile?: number | string;\n        bbox?: number | string;\n        begin?: number | string;\n        bias?: number | string;\n        by?: number | string;\n        calcMode?: number | string;\n        capHeight?: number | string;\n        clip?: number | string;\n        clipPath?: string;\n        clipPathUnits?: number | string;\n        clipRule?: number | string;\n        colorInterpolation?: number | string;\n        colorInterpolationFilters?: \"auto\" | \"sRGB\" | \"linearRGB\" | \"inherit\";\n        colorProfile?: number | string;\n        colorRendering?: number | string;\n        contentScriptType?: number | string;\n        contentStyleType?: number | string;\n        cursor?: number | string;\n        cx?: number | string;\n        cy?: number | string;\n        d?: string;\n        decelerate?: number | string;\n        descent?: number | string;\n        diffuseConstant?: number | string;\n        direction?: number | string;\n        display?: number | string;\n        divisor?: number | string;\n        dominantBaseline?: number | string;\n        dur?: number | string;\n        dx?: number | string;\n        dy?: number | string;\n        edgeMode?: number | string;\n        elevation?: number | string;\n        enableBackground?: number | string;\n        end?: number | string;\n        exponent?: number | string;\n        externalResourcesRequired?: Booleanish;\n        fill?: string;\n        fillOpacity?: number | string;\n        fillRule?: \"nonzero\" | \"evenodd\" | \"inherit\";\n        filter?: string;\n        filterRes?: number | string;\n        filterUnits?: number | string;\n        floodColor?: number | string;\n        floodOpacity?: number | string;\n        focusable?: Booleanish | \"auto\";\n        fontFamily?: string;\n        fontSize?: number | string;\n        fontSizeAdjust?: number | string;\n        fontStretch?: number | string;\n        fontStyle?: number | string;\n        fontVariant?: number | string;\n        fontWeight?: number | string;\n        format?: number | string;\n        from?: number | string;\n        fx?: number | string;\n        fy?: number | string;\n        g1?: number | string;\n        g2?: number | string;\n        glyphName?: number | string;\n        glyphOrientationHorizontal?: number | string;\n        glyphOrientationVertical?: number | string;\n        glyphRef?: number | string;\n        gradientTransform?: string;\n        gradientUnits?: string;\n        hanging?: number | string;\n        horizAdvX?: number | string;\n        horizOriginX?: number | string;\n        href?: string;\n        ideographic?: number | string;\n        imageRendering?: number | string;\n        in2?: number | string;\n        in?: string;\n        intercept?: number | string;\n        k1?: number | string;\n        k2?: number | string;\n        k3?: number | string;\n        k4?: number | string;\n        k?: number | string;\n        kernelMatrix?: number | string;\n        kernelUnitLength?: number | string;\n        kerning?: number | string;\n        keyPoints?: number | string;\n        keySplines?: number | string;\n        keyTimes?: number | string;\n        lengthAdjust?: number | string;\n        letterSpacing?: number | string;\n        lightingColor?: number | string;\n        limitingConeAngle?: number | string;\n        local?: number | string;\n        markerEnd?: string;\n        markerHeight?: number | string;\n        markerMid?: string;\n        markerStart?: string;\n        markerUnits?: number | string;\n        markerWidth?: number | string;\n        mask?: string;\n        maskContentUnits?: number | string;\n        maskUnits?: number | string;\n        mathematical?: number | string;\n        mode?: number | string;\n        numOctaves?: number | string;\n        offset?: number | string;\n        opacity?: number | string;\n        operator?: number | string;\n        order?: number | string;\n        orient?: number | string;\n        orientation?: number | string;\n        origin?: number | string;\n        overflow?: number | string;\n        overlinePosition?: number | string;\n        overlineThickness?: number | string;\n        paintOrder?: number | string;\n        panose1?: number | string;\n        path?: string;\n        pathLength?: number | string;\n        patternContentUnits?: string;\n        patternTransform?: number | string;\n        patternUnits?: string;\n        pointerEvents?: number | string;\n        points?: string;\n        pointsAtX?: number | string;\n        pointsAtY?: number | string;\n        pointsAtZ?: number | string;\n        preserveAlpha?: Booleanish;\n        preserveAspectRatio?: string;\n        primitiveUnits?: number | string;\n        r?: number | string;\n        radius?: number | string;\n        refX?: number | string;\n        refY?: number | string;\n        renderingIntent?: number | string;\n        repeatCount?: number | string;\n        repeatDur?: number | string;\n        requiredExtensions?: number | string;\n        requiredFeatures?: number | string;\n        restart?: number | string;\n        result?: string;\n        rotate?: number | string;\n        rx?: number | string;\n        ry?: number | string;\n        scale?: number | string;\n        seed?: number | string;\n        shapeRendering?: number | string;\n        slope?: number | string;\n        spacing?: number | string;\n        specularConstant?: number | string;\n        specularExponent?: number | string;\n        speed?: number | string;\n        spreadMethod?: string;\n        startOffset?: number | string;\n        stdDeviation?: number | string;\n        stemh?: number | string;\n        stemv?: number | string;\n        stitchTiles?: number | string;\n        stopColor?: string;\n        stopOpacity?: number | string;\n        strikethroughPosition?: number | string;\n        strikethroughThickness?: number | string;\n        string?: number | string;\n        stroke?: string;\n        strokeDasharray?: string | number;\n        strokeDashoffset?: string | number;\n        strokeLinecap?: \"butt\" | \"round\" | \"square\" | \"inherit\";\n        strokeLinejoin?: \"miter\" | \"round\" | \"bevel\" | \"inherit\";\n        strokeMiterlimit?: number | string;\n        strokeOpacity?: number | string;\n        strokeWidth?: number | string;\n        surfaceScale?: number | string;\n        systemLanguage?: number | string;\n        tableValues?: number | string;\n        targetX?: number | string;\n        targetY?: number | string;\n        textAnchor?: string;\n        textDecoration?: number | string;\n        textLength?: number | string;\n        textRendering?: number | string;\n        to?: number | string;\n        transform?: string;\n        u1?: number | string;\n        u2?: number | string;\n        underlinePosition?: number | string;\n        underlineThickness?: number | string;\n        unicode?: number | string;\n        unicodeBidi?: number | string;\n        unicodeRange?: number | string;\n        unitsPerEm?: number | string;\n        vAlphabetic?: number | string;\n        values?: string;\n        vectorEffect?: number | string;\n        version?: string;\n        vertAdvY?: number | string;\n        vertOriginX?: number | string;\n        vertOriginY?: number | string;\n        vHanging?: number | string;\n        vIdeographic?: number | string;\n        viewBox?: string;\n        viewTarget?: number | string;\n        visibility?: number | string;\n        vMathematical?: number | string;\n        widths?: number | string;\n        wordSpacing?: number | string;\n        writingMode?: number | string;\n        x1?: number | string;\n        x2?: number | string;\n        x?: number | string;\n        xChannelSelector?: string;\n        xHeight?: number | string;\n        xlinkActuate?: string;\n        xlinkArcrole?: string;\n        xlinkHref?: string;\n        xlinkRole?: string;\n        xlinkShow?: string;\n        xlinkTitle?: string;\n        xlinkType?: string;\n        xmlBase?: string;\n        xmlLang?: string;\n        xmlns?: string;\n        xmlnsXlink?: string;\n        xmlSpace?: string;\n        y1?: number | string;\n        y2?: number | string;\n        y?: number | string;\n        yChannelSelector?: string;\n        z?: number | string;\n        zoomAndPan?: string;\n    }\n\n    interface WebViewHTMLAttributes<T> extends HTMLAttributes<T> {\n        allowFullScreen?: boolean;\n        allowpopups?: boolean;\n        autoFocus?: boolean;\n        autosize?: boolean;\n        blinkfeatures?: string;\n        disableblinkfeatures?: string;\n        disableguestresize?: boolean;\n        disablewebsecurity?: boolean;\n        guestinstance?: string;\n        httpreferrer?: string;\n        nodeintegration?: boolean;\n        partition?: string;\n        plugins?: boolean;\n        preload?: string;\n        src?: string;\n        useragent?: string;\n        webpreferences?: string;\n    }\n\n    //\n    // React.DOM\n    // ----------------------------------------------------------------------\n\n    interface ReactHTML {\n        a: DetailedHTMLFactory<AnchorHTMLAttributes<HTMLAnchorElement>, HTMLAnchorElement>;\n        abbr: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        address: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        area: DetailedHTMLFactory<AreaHTMLAttributes<HTMLAreaElement>, HTMLAreaElement>;\n        article: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        aside: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        audio: DetailedHTMLFactory<AudioHTMLAttributes<HTMLAudioElement>, HTMLAudioElement>;\n        b: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        base: DetailedHTMLFactory<BaseHTMLAttributes<HTMLBaseElement>, HTMLBaseElement>;\n        bdi: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        bdo: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        big: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        blockquote: DetailedHTMLFactory<BlockquoteHTMLAttributes<HTMLElement>, HTMLElement>;\n        body: DetailedHTMLFactory<HTMLAttributes<HTMLBodyElement>, HTMLBodyElement>;\n        br: DetailedHTMLFactory<HTMLAttributes<HTMLBRElement>, HTMLBRElement>;\n        button: DetailedHTMLFactory<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;\n        canvas: DetailedHTMLFactory<CanvasHTMLAttributes<HTMLCanvasElement>, HTMLCanvasElement>;\n        caption: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        cite: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        code: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        col: DetailedHTMLFactory<ColHTMLAttributes<HTMLTableColElement>, HTMLTableColElement>;\n        colgroup: DetailedHTMLFactory<ColgroupHTMLAttributes<HTMLTableColElement>, HTMLTableColElement>;\n        data: DetailedHTMLFactory<DataHTMLAttributes<HTMLDataElement>, HTMLDataElement>;\n        datalist: DetailedHTMLFactory<HTMLAttributes<HTMLDataListElement>, HTMLDataListElement>;\n        dd: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        del: DetailedHTMLFactory<DelHTMLAttributes<HTMLElement>, HTMLElement>;\n        details: DetailedHTMLFactory<DetailsHTMLAttributes<HTMLElement>, HTMLElement>;\n        dfn: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        dialog: DetailedHTMLFactory<DialogHTMLAttributes<HTMLDialogElement>, HTMLDialogElement>;\n        div: DetailedHTMLFactory<HTMLAttributes<HTMLDivElement>, HTMLDivElement>;\n        dl: DetailedHTMLFactory<HTMLAttributes<HTMLDListElement>, HTMLDListElement>;\n        dt: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        em: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        embed: DetailedHTMLFactory<EmbedHTMLAttributes<HTMLEmbedElement>, HTMLEmbedElement>;\n        fieldset: DetailedHTMLFactory<FieldsetHTMLAttributes<HTMLFieldSetElement>, HTMLFieldSetElement>;\n        figcaption: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        figure: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        footer: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        form: DetailedHTMLFactory<FormHTMLAttributes<HTMLFormElement>, HTMLFormElement>;\n        h1: DetailedHTMLFactory<HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n        h2: DetailedHTMLFactory<HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n        h3: DetailedHTMLFactory<HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n        h4: DetailedHTMLFactory<HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n        h5: DetailedHTMLFactory<HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n        h6: DetailedHTMLFactory<HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n        head: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLHeadElement>;\n        header: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        hgroup: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        hr: DetailedHTMLFactory<HTMLAttributes<HTMLHRElement>, HTMLHRElement>;\n        html: DetailedHTMLFactory<HtmlHTMLAttributes<HTMLHtmlElement>, HTMLHtmlElement>;\n        i: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        iframe: DetailedHTMLFactory<IframeHTMLAttributes<HTMLIFrameElement>, HTMLIFrameElement>;\n        img: DetailedHTMLFactory<ImgHTMLAttributes<HTMLImageElement>, HTMLImageElement>;\n        input: DetailedHTMLFactory<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\n        ins: DetailedHTMLFactory<InsHTMLAttributes<HTMLModElement>, HTMLModElement>;\n        kbd: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        keygen: DetailedHTMLFactory<KeygenHTMLAttributes<HTMLElement>, HTMLElement>;\n        label: DetailedHTMLFactory<LabelHTMLAttributes<HTMLLabelElement>, HTMLLabelElement>;\n        legend: DetailedHTMLFactory<HTMLAttributes<HTMLLegendElement>, HTMLLegendElement>;\n        li: DetailedHTMLFactory<LiHTMLAttributes<HTMLLIElement>, HTMLLIElement>;\n        link: DetailedHTMLFactory<LinkHTMLAttributes<HTMLLinkElement>, HTMLLinkElement>;\n        main: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        map: DetailedHTMLFactory<MapHTMLAttributes<HTMLMapElement>, HTMLMapElement>;\n        mark: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        menu: DetailedHTMLFactory<MenuHTMLAttributes<HTMLElement>, HTMLElement>;\n        menuitem: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        meta: DetailedHTMLFactory<MetaHTMLAttributes<HTMLMetaElement>, HTMLMetaElement>;\n        meter: DetailedHTMLFactory<MeterHTMLAttributes<HTMLElement>, HTMLElement>;\n        nav: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        noscript: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        object: DetailedHTMLFactory<ObjectHTMLAttributes<HTMLObjectElement>, HTMLObjectElement>;\n        ol: DetailedHTMLFactory<OlHTMLAttributes<HTMLOListElement>, HTMLOListElement>;\n        optgroup: DetailedHTMLFactory<OptgroupHTMLAttributes<HTMLOptGroupElement>, HTMLOptGroupElement>;\n        option: DetailedHTMLFactory<OptionHTMLAttributes<HTMLOptionElement>, HTMLOptionElement>;\n        output: DetailedHTMLFactory<OutputHTMLAttributes<HTMLElement>, HTMLElement>;\n        p: DetailedHTMLFactory<HTMLAttributes<HTMLParagraphElement>, HTMLParagraphElement>;\n        param: DetailedHTMLFactory<ParamHTMLAttributes<HTMLParamElement>, HTMLParamElement>;\n        picture: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        pre: DetailedHTMLFactory<HTMLAttributes<HTMLPreElement>, HTMLPreElement>;\n        progress: DetailedHTMLFactory<ProgressHTMLAttributes<HTMLProgressElement>, HTMLProgressElement>;\n        q: DetailedHTMLFactory<QuoteHTMLAttributes<HTMLQuoteElement>, HTMLQuoteElement>;\n        rp: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        rt: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        ruby: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        s: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        samp: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        slot: DetailedHTMLFactory<SlotHTMLAttributes<HTMLSlotElement>, HTMLSlotElement>;\n        script: DetailedHTMLFactory<ScriptHTMLAttributes<HTMLScriptElement>, HTMLScriptElement>;\n        section: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        select: DetailedHTMLFactory<SelectHTMLAttributes<HTMLSelectElement>, HTMLSelectElement>;\n        small: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        source: DetailedHTMLFactory<SourceHTMLAttributes<HTMLSourceElement>, HTMLSourceElement>;\n        span: DetailedHTMLFactory<HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>;\n        strong: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        style: DetailedHTMLFactory<StyleHTMLAttributes<HTMLStyleElement>, HTMLStyleElement>;\n        sub: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        summary: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        sup: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        table: DetailedHTMLFactory<TableHTMLAttributes<HTMLTableElement>, HTMLTableElement>;\n        template: DetailedHTMLFactory<HTMLAttributes<HTMLTemplateElement>, HTMLTemplateElement>;\n        tbody: DetailedHTMLFactory<HTMLAttributes<HTMLTableSectionElement>, HTMLTableSectionElement>;\n        td: DetailedHTMLFactory<TdHTMLAttributes<HTMLTableDataCellElement>, HTMLTableDataCellElement>;\n        textarea: DetailedHTMLFactory<TextareaHTMLAttributes<HTMLTextAreaElement>, HTMLTextAreaElement>;\n        tfoot: DetailedHTMLFactory<HTMLAttributes<HTMLTableSectionElement>, HTMLTableSectionElement>;\n        th: DetailedHTMLFactory<ThHTMLAttributes<HTMLTableHeaderCellElement>, HTMLTableHeaderCellElement>;\n        thead: DetailedHTMLFactory<HTMLAttributes<HTMLTableSectionElement>, HTMLTableSectionElement>;\n        time: DetailedHTMLFactory<TimeHTMLAttributes<HTMLElement>, HTMLElement>;\n        title: DetailedHTMLFactory<HTMLAttributes<HTMLTitleElement>, HTMLTitleElement>;\n        tr: DetailedHTMLFactory<HTMLAttributes<HTMLTableRowElement>, HTMLTableRowElement>;\n        track: DetailedHTMLFactory<TrackHTMLAttributes<HTMLTrackElement>, HTMLTrackElement>;\n        u: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        ul: DetailedHTMLFactory<HTMLAttributes<HTMLUListElement>, HTMLUListElement>;\n        \"var\": DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        video: DetailedHTMLFactory<VideoHTMLAttributes<HTMLVideoElement>, HTMLVideoElement>;\n        wbr: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        webview: DetailedHTMLFactory<WebViewHTMLAttributes<HTMLWebViewElement>, HTMLWebViewElement>;\n    }\n\n    interface ReactSVG {\n        animate: SVGFactory;\n        circle: SVGFactory;\n        clipPath: SVGFactory;\n        defs: SVGFactory;\n        desc: SVGFactory;\n        ellipse: SVGFactory;\n        feBlend: SVGFactory;\n        feColorMatrix: SVGFactory;\n        feComponentTransfer: SVGFactory;\n        feComposite: SVGFactory;\n        feConvolveMatrix: SVGFactory;\n        feDiffuseLighting: SVGFactory;\n        feDisplacementMap: SVGFactory;\n        feDistantLight: SVGFactory;\n        feDropShadow: SVGFactory;\n        feFlood: SVGFactory;\n        feFuncA: SVGFactory;\n        feFuncB: SVGFactory;\n        feFuncG: SVGFactory;\n        feFuncR: SVGFactory;\n        feGaussianBlur: SVGFactory;\n        feImage: SVGFactory;\n        feMerge: SVGFactory;\n        feMergeNode: SVGFactory;\n        feMorphology: SVGFactory;\n        feOffset: SVGFactory;\n        fePointLight: SVGFactory;\n        feSpecularLighting: SVGFactory;\n        feSpotLight: SVGFactory;\n        feTile: SVGFactory;\n        feTurbulence: SVGFactory;\n        filter: SVGFactory;\n        foreignObject: SVGFactory;\n        g: SVGFactory;\n        image: SVGFactory;\n        line: SVGFactory;\n        linearGradient: SVGFactory;\n        marker: SVGFactory;\n        mask: SVGFactory;\n        metadata: SVGFactory;\n        path: SVGFactory;\n        pattern: SVGFactory;\n        polygon: SVGFactory;\n        polyline: SVGFactory;\n        radialGradient: SVGFactory;\n        rect: SVGFactory;\n        stop: SVGFactory;\n        svg: SVGFactory;\n        switch: SVGFactory;\n        symbol: SVGFactory;\n        text: SVGFactory;\n        textPath: SVGFactory;\n        tspan: SVGFactory;\n        use: SVGFactory;\n        view: SVGFactory;\n    }\n\n    interface ReactDOM extends ReactHTML, ReactSVG { }\n\n    //\n    // React.PropTypes\n    // ----------------------------------------------------------------------\n\n    type Validator<T> = PropTypes.Validator<T>;\n\n    type Requireable<T> = PropTypes.Requireable<T>;\n\n    type ValidationMap<T> = PropTypes.ValidationMap<T>;\n\n    type WeakValidationMap<T> = {\n        [K in keyof T]?: null extends T[K]\n            ? Validator<T[K] | null | undefined>\n            : undefined extends T[K]\n            ? Validator<T[K] | null | undefined>\n            : Validator<T[K]>\n    };\n\n    interface ReactPropTypes {\n        any: typeof PropTypes.any;\n        array: typeof PropTypes.array;\n        bool: typeof PropTypes.bool;\n        func: typeof PropTypes.func;\n        number: typeof PropTypes.number;\n        object: typeof PropTypes.object;\n        string: typeof PropTypes.string;\n        node: typeof PropTypes.node;\n        element: typeof PropTypes.element;\n        instanceOf: typeof PropTypes.instanceOf;\n        oneOf: typeof PropTypes.oneOf;\n        oneOfType: typeof PropTypes.oneOfType;\n        arrayOf: typeof PropTypes.arrayOf;\n        objectOf: typeof PropTypes.objectOf;\n        shape: typeof PropTypes.shape;\n        exact: typeof PropTypes.exact;\n    }\n\n    //\n    // React.Children\n    // ----------------------------------------------------------------------\n\n    interface ReactChildren {\n        map<T, C>(children: C | C[], fn: (child: C, index: number) => T):\n            C extends null | undefined ? C : Array<Exclude<T, boolean | null | undefined>>;\n        forEach<C>(children: C | C[], fn: (child: C, index: number) => void): void;\n        count(children: any): number;\n        only<C>(children: C): C extends any[] ? never : C;\n        toArray(children: ReactNode | ReactNode[]): Array<Exclude<ReactNode, boolean | null | undefined>>;\n    }\n\n    //\n    // Browser Interfaces\n    // https://github.com/nikeee/2048-typescript/blob/master/2048/js/touch.d.ts\n    // ----------------------------------------------------------------------\n\n    interface AbstractView {\n        styleMedia: StyleMedia;\n        document: Document;\n    }\n\n    interface Touch {\n        identifier: number;\n        target: EventTarget;\n        screenX: number;\n        screenY: number;\n        clientX: number;\n        clientY: number;\n        pageX: number;\n        pageY: number;\n    }\n\n    interface TouchList {\n        [index: number]: Touch;\n        length: number;\n        item(index: number): Touch;\n        identifiedTouch(identifier: number): Touch;\n    }\n\n    //\n    // Error Interfaces\n    // ----------------------------------------------------------------------\n    interface ErrorInfo {\n        /**\n         * Captures which component contained the exception, and its ancestors.\n         */\n        componentStack: string;\n    }\n}\n\n// naked 'any' type in a conditional type will short circuit and union both the then/else branches\n// so boolean is only resolved for T = any\ntype IsExactlyAny<T> = boolean extends (T extends never ? true : false) ? true : false;\n\ntype ExactlyAnyPropertyKeys<T> = { [K in keyof T]: IsExactlyAny<T[K]> extends true ? K : never }[keyof T];\ntype NotExactlyAnyPropertyKeys<T> = Exclude<keyof T, ExactlyAnyPropertyKeys<T>>;\n\n// Try to resolve ill-defined props like for JS users: props can be any, or sometimes objects with properties of type any\ntype MergePropTypes<P, T> =\n    // Distribute over P in case it is a union type\n    P extends any\n        // If props is type any, use propTypes definitions\n        ? IsExactlyAny<P> extends true ? T :\n            // If declared props have indexed properties, ignore inferred props entirely as keyof gets widened\n            string extends keyof P ? P :\n                // Prefer declared types which are not exactly any\n                & Pick<P, NotExactlyAnyPropertyKeys<P>>\n                // For props which are exactly any, use the type inferred from propTypes if present\n                & Pick<T, Exclude<keyof T, NotExactlyAnyPropertyKeys<P>>>\n                // Keep leftover props not specified in propTypes\n                & Pick<P, Exclude<keyof P, keyof T>>\n        : never;\n\n// Any prop that has a default prop becomes optional, but its type is unchanged\n// Undeclared default props are augmented into the resulting allowable attributes\n// If declared props have indexed properties, ignore default props entirely as keyof gets widened\n// Wrap in an outer-level conditional type to allow distribution over props that are unions\ntype Defaultize<P, D> = P extends any\n    ? string extends keyof P ? P :\n        & Pick<P, Exclude<keyof P, keyof D>>\n        & Partial<Pick<P, Extract<keyof P, keyof D>>>\n        & Partial<Pick<D, Exclude<keyof D, keyof P>>>\n    : never;\n\ntype ReactManagedAttributes<C, P> = C extends { propTypes: infer T; defaultProps: infer D; }\n    ? Defaultize<MergePropTypes<P, PropTypes.InferProps<T>>, D>\n    : C extends { propTypes: infer T; }\n        ? MergePropTypes<P, PropTypes.InferProps<T>>\n        : C extends { defaultProps: infer D; }\n            ? Defaultize<P, D>\n            : P;\n\ndeclare global {\n    namespace JSX {\n        // tslint:disable-next-line:no-empty-interface\n        interface Element extends React.ReactElement<any, any> { }\n        interface ElementClass extends React.Component<any> {\n            render(): React.ReactNode;\n        }\n        interface ElementAttributesProperty { props: {}; }\n        interface ElementChildrenAttribute { children: {}; }\n\n        // We can't recurse forever because `type` can't be self-referential;\n        // let's assume it's reasonable to do a single React.lazy() around a single React.memo() / vice-versa\n        type LibraryManagedAttributes<C, P> = C extends React.MemoExoticComponent<infer T> | React.LazyExoticComponent<infer T>\n            ? T extends React.MemoExoticComponent<infer U> | React.LazyExoticComponent<infer U>\n                ? ReactManagedAttributes<U, P>\n                : ReactManagedAttributes<T, P>\n            : ReactManagedAttributes<C, P>;\n\n        // tslint:disable-next-line:no-empty-interface\n        interface IntrinsicAttributes extends React.Attributes { }\n        // tslint:disable-next-line:no-empty-interface\n        interface IntrinsicClassAttributes<T> extends React.ClassAttributes<T> { }\n\n        interface IntrinsicElements {\n            // HTML\n            a: React.DetailedHTMLProps<React.AnchorHTMLAttributes<HTMLAnchorElement>, HTMLAnchorElement>;\n            abbr: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            address: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            area: React.DetailedHTMLProps<React.AreaHTMLAttributes<HTMLAreaElement>, HTMLAreaElement>;\n            article: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            aside: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            audio: React.DetailedHTMLProps<React.AudioHTMLAttributes<HTMLAudioElement>, HTMLAudioElement>;\n            b: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            base: React.DetailedHTMLProps<React.BaseHTMLAttributes<HTMLBaseElement>, HTMLBaseElement>;\n            bdi: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            bdo: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            big: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            blockquote: React.DetailedHTMLProps<React.BlockquoteHTMLAttributes<HTMLElement>, HTMLElement>;\n            body: React.DetailedHTMLProps<React.HTMLAttributes<HTMLBodyElement>, HTMLBodyElement>;\n            br: React.DetailedHTMLProps<React.HTMLAttributes<HTMLBRElement>, HTMLBRElement>;\n            button: React.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;\n            canvas: React.DetailedHTMLProps<React.CanvasHTMLAttributes<HTMLCanvasElement>, HTMLCanvasElement>;\n            caption: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            cite: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            code: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            col: React.DetailedHTMLProps<React.ColHTMLAttributes<HTMLTableColElement>, HTMLTableColElement>;\n            colgroup: React.DetailedHTMLProps<React.ColgroupHTMLAttributes<HTMLTableColElement>, HTMLTableColElement>;\n            data: React.DetailedHTMLProps<React.DataHTMLAttributes<HTMLDataElement>, HTMLDataElement>;\n            datalist: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDataListElement>, HTMLDataListElement>;\n            dd: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            del: React.DetailedHTMLProps<React.DelHTMLAttributes<HTMLElement>, HTMLElement>;\n            details: React.DetailedHTMLProps<React.DetailsHTMLAttributes<HTMLElement>, HTMLElement>;\n            dfn: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            dialog: React.DetailedHTMLProps<React.DialogHTMLAttributes<HTMLDialogElement>, HTMLDialogElement>;\n            div: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>;\n            dl: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDListElement>, HTMLDListElement>;\n            dt: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            em: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            embed: React.DetailedHTMLProps<React.EmbedHTMLAttributes<HTMLEmbedElement>, HTMLEmbedElement>;\n            fieldset: React.DetailedHTMLProps<React.FieldsetHTMLAttributes<HTMLFieldSetElement>, HTMLFieldSetElement>;\n            figcaption: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            figure: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            footer: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            form: React.DetailedHTMLProps<React.FormHTMLAttributes<HTMLFormElement>, HTMLFormElement>;\n            h1: React.DetailedHTMLProps<React.HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n            h2: React.DetailedHTMLProps<React.HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n            h3: React.DetailedHTMLProps<React.HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n            h4: React.DetailedHTMLProps<React.HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n            h5: React.DetailedHTMLProps<React.HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n            h6: React.DetailedHTMLProps<React.HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n            head: React.DetailedHTMLProps<React.HTMLAttributes<HTMLHeadElement>, HTMLHeadElement>;\n            header: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            hgroup: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            hr: React.DetailedHTMLProps<React.HTMLAttributes<HTMLHRElement>, HTMLHRElement>;\n            html: React.DetailedHTMLProps<React.HtmlHTMLAttributes<HTMLHtmlElement>, HTMLHtmlElement>;\n            i: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            iframe: React.DetailedHTMLProps<React.IframeHTMLAttributes<HTMLIFrameElement>, HTMLIFrameElement>;\n            img: React.DetailedHTMLProps<React.ImgHTMLAttributes<HTMLImageElement>, HTMLImageElement>;\n            input: React.DetailedHTMLProps<React.InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\n            ins: React.DetailedHTMLProps<React.InsHTMLAttributes<HTMLModElement>, HTMLModElement>;\n            kbd: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            keygen: React.DetailedHTMLProps<React.KeygenHTMLAttributes<HTMLElement>, HTMLElement>;\n            label: React.DetailedHTMLProps<React.LabelHTMLAttributes<HTMLLabelElement>, HTMLLabelElement>;\n            legend: React.DetailedHTMLProps<React.HTMLAttributes<HTMLLegendElement>, HTMLLegendElement>;\n            li: React.DetailedHTMLProps<React.LiHTMLAttributes<HTMLLIElement>, HTMLLIElement>;\n            link: React.DetailedHTMLProps<React.LinkHTMLAttributes<HTMLLinkElement>, HTMLLinkElement>;\n            main: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            map: React.DetailedHTMLProps<React.MapHTMLAttributes<HTMLMapElement>, HTMLMapElement>;\n            mark: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            menu: React.DetailedHTMLProps<React.MenuHTMLAttributes<HTMLElement>, HTMLElement>;\n            menuitem: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            meta: React.DetailedHTMLProps<React.MetaHTMLAttributes<HTMLMetaElement>, HTMLMetaElement>;\n            meter: React.DetailedHTMLProps<React.MeterHTMLAttributes<HTMLElement>, HTMLElement>;\n            nav: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            noindex: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            noscript: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            object: React.DetailedHTMLProps<React.ObjectHTMLAttributes<HTMLObjectElement>, HTMLObjectElement>;\n            ol: React.DetailedHTMLProps<React.OlHTMLAttributes<HTMLOListElement>, HTMLOListElement>;\n            optgroup: React.DetailedHTMLProps<React.OptgroupHTMLAttributes<HTMLOptGroupElement>, HTMLOptGroupElement>;\n            option: React.DetailedHTMLProps<React.OptionHTMLAttributes<HTMLOptionElement>, HTMLOptionElement>;\n            output: React.DetailedHTMLProps<React.OutputHTMLAttributes<HTMLElement>, HTMLElement>;\n            p: React.DetailedHTMLProps<React.HTMLAttributes<HTMLParagraphElement>, HTMLParagraphElement>;\n            param: React.DetailedHTMLProps<React.ParamHTMLAttributes<HTMLParamElement>, HTMLParamElement>;\n            picture: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            pre: React.DetailedHTMLProps<React.HTMLAttributes<HTMLPreElement>, HTMLPreElement>;\n            progress: React.DetailedHTMLProps<React.ProgressHTMLAttributes<HTMLProgressElement>, HTMLProgressElement>;\n            q: React.DetailedHTMLProps<React.QuoteHTMLAttributes<HTMLQuoteElement>, HTMLQuoteElement>;\n            rp: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            rt: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            ruby: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            s: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            samp: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            slot: React.DetailedHTMLProps<React.SlotHTMLAttributes<HTMLSlotElement>, HTMLSlotElement>;\n            script: React.DetailedHTMLProps<React.ScriptHTMLAttributes<HTMLScriptElement>, HTMLScriptElement>;\n            section: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            select: React.DetailedHTMLProps<React.SelectHTMLAttributes<HTMLSelectElement>, HTMLSelectElement>;\n            small: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            source: React.DetailedHTMLProps<React.SourceHTMLAttributes<HTMLSourceElement>, HTMLSourceElement>;\n            span: React.DetailedHTMLProps<React.HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>;\n            strong: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            style: React.DetailedHTMLProps<React.StyleHTMLAttributes<HTMLStyleElement>, HTMLStyleElement>;\n            sub: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            summary: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            sup: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            table: React.DetailedHTMLProps<React.TableHTMLAttributes<HTMLTableElement>, HTMLTableElement>;\n            template: React.DetailedHTMLProps<React.HTMLAttributes<HTMLTemplateElement>, HTMLTemplateElement>;\n            tbody: React.DetailedHTMLProps<React.HTMLAttributes<HTMLTableSectionElement>, HTMLTableSectionElement>;\n            td: React.DetailedHTMLProps<React.TdHTMLAttributes<HTMLTableDataCellElement>, HTMLTableDataCellElement>;\n            textarea: React.DetailedHTMLProps<React.TextareaHTMLAttributes<HTMLTextAreaElement>, HTMLTextAreaElement>;\n            tfoot: React.DetailedHTMLProps<React.HTMLAttributes<HTMLTableSectionElement>, HTMLTableSectionElement>;\n            th: React.DetailedHTMLProps<React.ThHTMLAttributes<HTMLTableHeaderCellElement>, HTMLTableHeaderCellElement>;\n            thead: React.DetailedHTMLProps<React.HTMLAttributes<HTMLTableSectionElement>, HTMLTableSectionElement>;\n            time: React.DetailedHTMLProps<React.TimeHTMLAttributes<HTMLElement>, HTMLElement>;\n            title: React.DetailedHTMLProps<React.HTMLAttributes<HTMLTitleElement>, HTMLTitleElement>;\n            tr: React.DetailedHTMLProps<React.HTMLAttributes<HTMLTableRowElement>, HTMLTableRowElement>;\n            track: React.DetailedHTMLProps<React.TrackHTMLAttributes<HTMLTrackElement>, HTMLTrackElement>;\n            u: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            ul: React.DetailedHTMLProps<React.HTMLAttributes<HTMLUListElement>, HTMLUListElement>;\n            \"var\": React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            video: React.DetailedHTMLProps<React.VideoHTMLAttributes<HTMLVideoElement>, HTMLVideoElement>;\n            wbr: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            webview: React.DetailedHTMLProps<React.WebViewHTMLAttributes<HTMLWebViewElement>, HTMLWebViewElement>;\n\n            // SVG\n            svg: React.SVGProps<SVGSVGElement>;\n\n            animate: React.SVGProps<SVGElement>; // TODO: It is SVGAnimateElement but is not in TypeScript's lib.dom.d.ts for now.\n            animateMotion: React.SVGProps<SVGElement>;\n            animateTransform: React.SVGProps<SVGElement>; // TODO: It is SVGAnimateTransformElement but is not in TypeScript's lib.dom.d.ts for now.\n            circle: React.SVGProps<SVGCircleElement>;\n            clipPath: React.SVGProps<SVGClipPathElement>;\n            defs: React.SVGProps<SVGDefsElement>;\n            desc: React.SVGProps<SVGDescElement>;\n            ellipse: React.SVGProps<SVGEllipseElement>;\n            feBlend: React.SVGProps<SVGFEBlendElement>;\n            feColorMatrix: React.SVGProps<SVGFEColorMatrixElement>;\n            feComponentTransfer: React.SVGProps<SVGFEComponentTransferElement>;\n            feComposite: React.SVGProps<SVGFECompositeElement>;\n            feConvolveMatrix: React.SVGProps<SVGFEConvolveMatrixElement>;\n            feDiffuseLighting: React.SVGProps<SVGFEDiffuseLightingElement>;\n            feDisplacementMap: React.SVGProps<SVGFEDisplacementMapElement>;\n            feDistantLight: React.SVGProps<SVGFEDistantLightElement>;\n            feDropShadow: React.SVGProps<SVGFEDropShadowElement>;\n            feFlood: React.SVGProps<SVGFEFloodElement>;\n            feFuncA: React.SVGProps<SVGFEFuncAElement>;\n            feFuncB: React.SVGProps<SVGFEFuncBElement>;\n            feFuncG: React.SVGProps<SVGFEFuncGElement>;\n            feFuncR: React.SVGProps<SVGFEFuncRElement>;\n            feGaussianBlur: React.SVGProps<SVGFEGaussianBlurElement>;\n            feImage: React.SVGProps<SVGFEImageElement>;\n            feMerge: React.SVGProps<SVGFEMergeElement>;\n            feMergeNode: React.SVGProps<SVGFEMergeNodeElement>;\n            feMorphology: React.SVGProps<SVGFEMorphologyElement>;\n            feOffset: React.SVGProps<SVGFEOffsetElement>;\n            fePointLight: React.SVGProps<SVGFEPointLightElement>;\n            feSpecularLighting: React.SVGProps<SVGFESpecularLightingElement>;\n            feSpotLight: React.SVGProps<SVGFESpotLightElement>;\n            feTile: React.SVGProps<SVGFETileElement>;\n            feTurbulence: React.SVGProps<SVGFETurbulenceElement>;\n            filter: React.SVGProps<SVGFilterElement>;\n            foreignObject: React.SVGProps<SVGForeignObjectElement>;\n            g: React.SVGProps<SVGGElement>;\n            image: React.SVGProps<SVGImageElement>;\n            line: React.SVGProps<SVGLineElement>;\n            linearGradient: React.SVGProps<SVGLinearGradientElement>;\n            marker: React.SVGProps<SVGMarkerElement>;\n            mask: React.SVGProps<SVGMaskElement>;\n            metadata: React.SVGProps<SVGMetadataElement>;\n            mpath: React.SVGProps<SVGElement>;\n            path: React.SVGProps<SVGPathElement>;\n            pattern: React.SVGProps<SVGPatternElement>;\n            polygon: React.SVGProps<SVGPolygonElement>;\n            polyline: React.SVGProps<SVGPolylineElement>;\n            radialGradient: React.SVGProps<SVGRadialGradientElement>;\n            rect: React.SVGProps<SVGRectElement>;\n            stop: React.SVGProps<SVGStopElement>;\n            switch: React.SVGProps<SVGSwitchElement>;\n            symbol: React.SVGProps<SVGSymbolElement>;\n            text: React.SVGProps<SVGTextElement>;\n            textPath: React.SVGProps<SVGTextPathElement>;\n            tspan: React.SVGProps<SVGTSpanElement>;\n            use: React.SVGProps<SVGUseElement>;\n            view: React.SVGProps<SVGViewElement>;\n        }\n    }\n}\n",
    "@types/react/global.d.ts": "/*\nReact projects that don't include the DOM library need these interfaces to compile.\nReact Native applications use React, but there is no DOM available. The JavaScript runtime\nis ES6/ES2015 only. These definitions allow such projects to compile with only `--lib ES6`.\n\nWarning: all of these interfaces are empty. If you want type definitions for various properties\n(such as HTMLInputElement.prototype.value), you need to add `--lib DOM` (via command line or tsconfig.json).\n*/\n\ninterface Event { }\ninterface AnimationEvent extends Event { }\ninterface ClipboardEvent extends Event { }\ninterface CompositionEvent extends Event { }\ninterface DragEvent extends Event { }\ninterface FocusEvent extends Event { }\ninterface KeyboardEvent extends Event { }\ninterface MouseEvent extends Event { }\ninterface TouchEvent extends Event { }\ninterface PointerEvent extends Event { }\ninterface TransitionEvent extends Event { }\ninterface UIEvent extends Event { }\ninterface WheelEvent extends Event { }\n\ninterface EventTarget { }\ninterface Document { }\ninterface DataTransfer { }\ninterface StyleMedia { }\n\ninterface Element { }\ninterface DocumentFragment { }\n\ninterface HTMLElement extends Element { }\ninterface HTMLAnchorElement extends HTMLElement { }\ninterface HTMLAreaElement extends HTMLElement { }\ninterface HTMLAudioElement extends HTMLElement { }\ninterface HTMLBaseElement extends HTMLElement { }\ninterface HTMLBodyElement extends HTMLElement { }\ninterface HTMLBRElement extends HTMLElement { }\ninterface HTMLButtonElement extends HTMLElement { }\ninterface HTMLCanvasElement extends HTMLElement { }\ninterface HTMLDataElement extends HTMLElement { }\ninterface HTMLDataListElement extends HTMLElement { }\ninterface HTMLDialogElement extends HTMLElement { }\ninterface HTMLDivElement extends HTMLElement { }\ninterface HTMLDListElement extends HTMLElement { }\ninterface HTMLEmbedElement extends HTMLElement { }\ninterface HTMLFieldSetElement extends HTMLElement { }\ninterface HTMLFormElement extends HTMLElement { }\ninterface HTMLHeadingElement extends HTMLElement { }\ninterface HTMLHeadElement extends HTMLElement { }\ninterface HTMLHRElement extends HTMLElement { }\ninterface HTMLHtmlElement extends HTMLElement { }\ninterface HTMLIFrameElement extends HTMLElement { }\ninterface HTMLImageElement extends HTMLElement { }\ninterface HTMLInputElement extends HTMLElement { }\ninterface HTMLModElement extends HTMLElement { }\ninterface HTMLLabelElement extends HTMLElement { }\ninterface HTMLLegendElement extends HTMLElement { }\ninterface HTMLLIElement extends HTMLElement { }\ninterface HTMLLinkElement extends HTMLElement { }\ninterface HTMLMapElement extends HTMLElement { }\ninterface HTMLMetaElement extends HTMLElement { }\ninterface HTMLObjectElement extends HTMLElement { }\ninterface HTMLOListElement extends HTMLElement { }\ninterface HTMLOptGroupElement extends HTMLElement { }\ninterface HTMLOptionElement extends HTMLElement { }\ninterface HTMLParagraphElement extends HTMLElement { }\ninterface HTMLParamElement extends HTMLElement { }\ninterface HTMLPreElement extends HTMLElement { }\ninterface HTMLProgressElement extends HTMLElement { }\ninterface HTMLQuoteElement extends HTMLElement { }\ninterface HTMLSlotElement extends HTMLElement { }\ninterface HTMLScriptElement extends HTMLElement { }\ninterface HTMLSelectElement extends HTMLElement { }\ninterface HTMLSourceElement extends HTMLElement { }\ninterface HTMLSpanElement extends HTMLElement { }\ninterface HTMLStyleElement extends HTMLElement { }\ninterface HTMLTableElement extends HTMLElement { }\ninterface HTMLTableColElement extends HTMLElement { }\ninterface HTMLTableDataCellElement extends HTMLElement { }\ninterface HTMLTableHeaderCellElement extends HTMLElement { }\ninterface HTMLTableRowElement extends HTMLElement { }\ninterface HTMLTableSectionElement extends HTMLElement { }\ninterface HTMLTemplateElement extends HTMLElement { }\ninterface HTMLTextAreaElement extends HTMLElement { }\ninterface HTMLTitleElement extends HTMLElement { }\ninterface HTMLTrackElement extends HTMLElement { }\ninterface HTMLUListElement extends HTMLElement { }\ninterface HTMLVideoElement extends HTMLElement { }\ninterface HTMLWebViewElement extends HTMLElement { }\n\ninterface SVGElement extends Element { }\ninterface SVGSVGElement extends SVGElement { }\ninterface SVGCircleElement extends SVGElement { }\ninterface SVGClipPathElement extends SVGElement { }\ninterface SVGDefsElement extends SVGElement { }\ninterface SVGDescElement extends SVGElement { }\ninterface SVGEllipseElement extends SVGElement { }\ninterface SVGFEBlendElement extends SVGElement { }\ninterface SVGFEColorMatrixElement extends SVGElement { }\ninterface SVGFEComponentTransferElement extends SVGElement { }\ninterface SVGFECompositeElement extends SVGElement { }\ninterface SVGFEConvolveMatrixElement extends SVGElement { }\ninterface SVGFEDiffuseLightingElement extends SVGElement { }\ninterface SVGFEDisplacementMapElement extends SVGElement { }\ninterface SVGFEDistantLightElement extends SVGElement { }\ninterface SVGFEDropShadowElement extends SVGElement { }\ninterface SVGFEFloodElement extends SVGElement { }\ninterface SVGFEFuncAElement extends SVGElement { }\ninterface SVGFEFuncBElement extends SVGElement { }\ninterface SVGFEFuncGElement extends SVGElement { }\ninterface SVGFEFuncRElement extends SVGElement { }\ninterface SVGFEGaussianBlurElement extends SVGElement { }\ninterface SVGFEImageElement extends SVGElement { }\ninterface SVGFEMergeElement extends SVGElement { }\ninterface SVGFEMergeNodeElement extends SVGElement { }\ninterface SVGFEMorphologyElement extends SVGElement { }\ninterface SVGFEOffsetElement extends SVGElement { }\ninterface SVGFEPointLightElement extends SVGElement { }\ninterface SVGFESpecularLightingElement extends SVGElement { }\ninterface SVGFESpotLightElement extends SVGElement { }\ninterface SVGFETileElement extends SVGElement { }\ninterface SVGFETurbulenceElement extends SVGElement { }\ninterface SVGFilterElement extends SVGElement { }\ninterface SVGForeignObjectElement extends SVGElement { }\ninterface SVGGElement extends SVGElement { }\ninterface SVGImageElement extends SVGElement { }\ninterface SVGLineElement extends SVGElement { }\ninterface SVGLinearGradientElement extends SVGElement { }\ninterface SVGMarkerElement extends SVGElement { }\ninterface SVGMaskElement extends SVGElement { }\ninterface SVGMetadataElement extends SVGElement { }\ninterface SVGPathElement extends SVGElement { }\ninterface SVGPatternElement extends SVGElement { }\ninterface SVGPolygonElement extends SVGElement { }\ninterface SVGPolylineElement extends SVGElement { }\ninterface SVGRadialGradientElement extends SVGElement { }\ninterface SVGRectElement extends SVGElement { }\ninterface SVGStopElement extends SVGElement { }\ninterface SVGSwitchElement extends SVGElement { }\ninterface SVGSymbolElement extends SVGElement { }\ninterface SVGTextElement extends SVGElement { }\ninterface SVGTextPathElement extends SVGElement { }\ninterface SVGTSpanElement extends SVGElement { }\ninterface SVGUseElement extends SVGElement { }\ninterface SVGViewElement extends SVGElement { }\n\ninterface Text { }\ninterface TouchList { }\ninterface WebGLRenderingContext { }\ninterface WebGL2RenderingContext { }\n",
    "@types/kea/index.d.ts": "import { AnyAction, Reducer, Middleware, compose, StoreEnhancer, Store } from 'redux';\nimport * as React from 'react';\nimport React__default, { ComponentType, FunctionComponent, Context as Context$1 } from 'react';\nimport { DefaultMemoizeOptions } from 'reselect';\n\ndeclare type AnyComponent = ComponentType | FunctionComponent;\r\ndeclare type KeyType = string | number | boolean;\r\ndeclare type PathType = KeyType[];\r\ndeclare type Selector = (state?: any, props?: any) => any;\r\ndeclare type Props = Record<string, any>;\r\ndeclare type PartialRecord<K extends keyof any, T> = Partial<Record<K, T>>;\r\ninterface Logic {\r\n    path: PathType;\r\n    pathString: string;\r\n    props: any;\r\n    key?: KeyType;\r\n    keyBuilder?: (props: any) => KeyType;\r\n    actionCreators: Record<string, any>;\r\n    actionKeys: Record<string, string>;\r\n    actionTypes: Record<string, string>;\r\n    actions: Record<string, any>;\r\n    cache: Record<string, any>;\r\n    connections: {\r\n        [pathString: string]: BuiltLogic;\r\n    };\r\n    defaults: Record<string, any>;\r\n    reducers: Record<string, any>;\r\n    reducer?: ReducerFunction<any>;\r\n    reducerOptions: Record<string, any>;\r\n    selector?: Selector;\r\n    selectors: Record<string, Selector>;\r\n    values: Record<string, any>;\r\n    events: {\r\n        beforeMount?: () => void;\r\n        afterMount?: () => void;\r\n        beforeUnmount?: () => void;\r\n        afterUnmount?: () => void;\r\n        propsChanged?: (props: any, oldProps: any) => void;\r\n    };\r\n    listeners?: Record<string, ListenerFunctionWrapper[]>;\r\n    sharedListeners?: Record<string, ListenerFunction>;\r\n    __keaTypeGenInternalSelectorTypes: Record<string, any>;\r\n    __keaTypeGenInternalReducerActions: Record<string, any>;\r\n    __keaTypeGenInternalExtraInput: Record<string, any>;\r\n}\r\ninterface BuiltLogicAdditions<LogicType extends Logic> {\r\n    _isKeaBuild: boolean;\r\n    mount: () => () => void;\r\n    unmount: () => void;\r\n    isMounted: () => boolean;\r\n    extend: <ExtendLogicType extends Logic = LogicType>(extendedInput: LogicInput<ExtendLogicType> | LogicInput<ExtendLogicType>[]) => LogicWrapper<ExtendLogicType>;\r\n    wrapper: LogicWrapper;\r\n}\r\ndeclare type BuiltLogic<LogicType extends Logic = Logic> = LogicType & BuiltLogicAdditions<LogicType>;\r\ninterface LogicWrapperAdditions<LogicType extends Logic> {\r\n    _isKea: boolean;\r\n    inputs: (LogicInput | LogicBuilder)[];\r\n    <T extends LogicType['props'] | AnyComponent>(props: T): T extends LogicType['props'] ? BuiltLogic<LogicType> : FunctionComponent;\r\n    (): BuiltLogic<LogicType>;\r\n    wrap: (Component: AnyComponent) => KeaComponent;\r\n    build: (props?: LogicType['props']) => BuiltLogic<LogicType>;\r\n    mount: () => () => void;\r\n    unmount: () => void;\r\n    isMounted: (props?: Record<string, any>) => boolean;\r\n    findMounted: (props?: Record<string, any>) => BuiltLogic<LogicType> | null;\r\n    extend: <ExtendLogicType extends Logic = LogicType>(extendedInput: LogicInput<ExtendLogicType>) => LogicWrapper<ExtendLogicType>;\r\n}\r\ndeclare type LogicWrapper<LogicType extends Logic = Logic> = LogicType & LogicWrapperAdditions<LogicType>;\r\ndeclare type LogicBuilder<L extends Logic = Logic> = (logic: BuiltLogic<L>) => void;\r\ndeclare type PayloadCreatorDefinition = true | ((...args: any[]) => any);\r\ndeclare type ActionDefinitions<LogicType extends Logic> = LogicType['actionCreators'] extends Record<string, any> ? Partial<{\r\n    [K in keyof LogicType['actionCreators']]: LogicType['actionCreators'][K] extends Function ? ReturnType<LogicType['actionCreators'][K]>['payload']['value'] extends true ? true : (...args: Parameters<LogicType['actionCreators'][K]>) => LogicType['actionCreators'][K]['payload'] : never;\r\n}> : Record<string, PayloadCreatorDefinition>;\r\ninterface KeaReduxAction extends AnyAction {\r\n    type: string;\r\n    payload?: any;\r\n}\r\ninterface KeaAction {\r\n    (...args: any[]): KeaReduxAction;\r\n    _isKeaAction: boolean;\r\n    toString(): string;\r\n}\r\ndeclare type ReducerActions<LogicType extends Logic, ReducerType> = LogicType['__keaTypeGenInternalReducerActions'] extends Record<string, never> ? {\r\n    [K in keyof LogicType['actionCreators']]?: (state: ReducerType, payload: ReturnType<LogicType['actionCreators'][K]>['payload']) => ReducerType;\r\n} : LogicType['__keaTypeGenInternalReducerActions'] extends Record<string, any> ? {\r\n    [K in keyof LogicType['actionCreators']]?: (state: ReducerType, payload: ReturnType<LogicType['actionCreators'][K]>['payload']) => ReducerType;\r\n} & {\r\n    [K in keyof LogicType['__keaTypeGenInternalReducerActions']]?: (state: ReducerType, payload: ReturnType<LogicType['__keaTypeGenInternalReducerActions'][K]>['payload']) => ReducerType;\r\n} : never;\r\ndeclare type ReducerDefault<Reducer extends () => any, P extends Props> = ReturnType<Reducer> | ((state: any, props: P) => ReturnType<Reducer>);\r\ndeclare type ReducerDefinitions<LogicType extends Logic> = {\r\n    [K in keyof LogicType['reducers']]?: [\r\n        ReducerDefault<LogicType['reducers'][K], LogicType['props']>,\r\n        Record<string, any>,\r\n        ReducerActions<LogicType, ReturnType<LogicType['reducers'][K]>>\r\n    ] | [\r\n        ReducerDefault<LogicType['reducers'][K], LogicType['props']>,\r\n        ReducerActions<LogicType, ReturnType<LogicType['reducers'][K]>>\r\n    ] | [ReducerDefault<LogicType['reducers'][K], LogicType['props']>] | ReducerActions<LogicType, ReturnType<LogicType['reducers'][K]>>;\r\n};\r\ndeclare type ReducerFunction<S = any> = (state: S, action: KeaReduxAction, fullState: any) => S;\r\ndeclare type SelectorTuple = [] | [Selector] | [Selector, Selector] | [Selector, Selector, Selector] | [Selector, Selector, Selector, Selector] | [Selector, Selector, Selector, Selector, Selector] | [Selector, Selector, Selector, Selector, Selector, Selector] | [Selector, Selector, Selector, Selector, Selector, Selector, Selector] | [Selector, Selector, Selector, Selector, Selector, Selector, Selector, Selector] | [Selector, Selector, Selector, Selector, Selector, Selector, Selector, Selector, Selector] | [Selector, Selector, Selector, Selector, Selector, Selector, Selector, Selector, Selector, Selector] | [Selector, Selector, Selector, Selector, Selector, Selector, Selector, Selector, Selector, Selector, Selector];\r\ndeclare type SelectorDefinition<Selectors, SelectorFunction extends any> = [(s: Selectors) => SelectorTuple, SelectorFunction] | [(s: Selectors) => SelectorTuple, SelectorFunction, DefaultMemoizeOptions];\r\ndeclare type SelectorDefinitions<LogicType extends Logic> = {\r\n    [K in keyof LogicType['__keaTypeGenInternalSelectorTypes']]?: SelectorDefinition<LogicType['selectors'], LogicType['__keaTypeGenInternalSelectorTypes'][K]>;\r\n} | {\r\n    [key: string]: SelectorDefinition<LogicType['selectors'], any>;\r\n};\r\ndeclare type BreakPointFunction = (() => void) & ((ms: number) => Promise<void>);\r\ndeclare type ListenerDefinitionsForRecord<A extends Record<string, (...args: any) => any>> = {\r\n    [K in keyof A]?: ListenerFunction<ReturnType<A[K]>> | ListenerFunction<ReturnType<A[K]>>[];\r\n};\r\ndeclare type ListenerDefinitions<LogicType extends Logic> = LogicType['__keaTypeGenInternalReducerActions'] extends Record<string, never> ? ListenerDefinitionsForRecord<LogicType['actionCreators']> : LogicType['__keaTypeGenInternalReducerActions'] extends Record<string, any> ? ListenerDefinitionsForRecord<LogicType['actionCreators']> & ListenerDefinitionsForRecord<LogicType['__keaTypeGenInternalReducerActions']> : never;\r\ndeclare type EventDefinitions<LogicType extends Logic> = {\r\n    beforeMount?: (() => void) | (() => void)[];\r\n    afterMount?: (() => void) | (() => void)[];\r\n    beforeUnmount?: (() => void) | (() => void)[];\r\n    afterUnmount?: (() => void) | (() => void)[];\r\n    propsChanged?: ((props: Logic['props'], oldProps: Logic['props']) => void) | ((props: Logic['props'], oldProps: Logic['props']) => void)[];\r\n};\r\ndeclare type ListenerFunction<A extends AnyAction = any> = (payload: A['payload'], breakpoint: BreakPointFunction, action: A, previousState: any) => void | Promise<void>;\r\ndeclare type ListenerFunctionWrapper = (action: any, previousState: any) => void;\r\ndeclare type SharedListenerDefinitions = Record<string, ListenerFunction>;\r\ndeclare type WindowValuesDefinitions<LogicType extends Logic> = Record<string, (window: Window) => any>;\r\ndeclare type LoaderFunctions<LogicType extends Logic, ReducerReturnType> = {\r\n    [K in keyof LogicType['actionCreators']]?: (payload: ReturnType<LogicType['actionCreators'][K]>['payload'], breakpoint: BreakPointFunction, action: ReturnType<LogicType['actionCreators'][K]>) => ReducerReturnType | Promise<ReducerReturnType>;\r\n};\r\ndeclare type LoaderDefinitions<LogicType extends Logic> = {\r\n    [K in keyof LogicType['reducers']]?: (LoaderFunctions<LogicType, ReturnType<LogicType['reducers'][K]>> | {\r\n        __default: ReturnType<LogicType['reducers'][K]>;\r\n    }) | [ReturnType<LogicType['reducers'][K]>, LoaderFunctions<LogicType, ReturnType<LogicType['reducers'][K]>>];\r\n};\r\ndeclare type ConnectDefinitions = BuiltLogic | LogicWrapper | (BuiltLogic | LogicWrapper)[] | {\r\n    logic?: (BuiltLogic | LogicWrapper)[];\r\n    values?: any[];\r\n    actions?: any[];\r\n};\r\ndeclare type LogicInput<LogicType extends Logic = Logic> = {\r\n    inherit?: LogicWrapper[];\r\n    extend?: LogicInput[];\r\n    key?: (props: LogicType['props']) => KeyType;\r\n    path?: PathType | ((key: KeyType) => PathType);\r\n    connect?: ConnectDefinitions | ((props: LogicType['props']) => ConnectDefinitions);\r\n    actions?: ActionDefinitions<LogicType> | ((logic: LogicType) => ActionDefinitions<LogicType>);\r\n    reducers?: ReducerDefinitions<LogicType> | ((logic: LogicType) => ReducerDefinitions<LogicType>);\r\n    selectors?: SelectorDefinitions<LogicType> | ((logic: LogicType) => SelectorDefinitions<LogicType>);\r\n    listeners?: ListenerDefinitions<LogicType> | ((logic: LogicType) => ListenerDefinitions<LogicType>);\r\n    sharedListeners?: SharedListenerDefinitions | ((logic: LogicType) => SharedListenerDefinitions);\r\n    events?: EventDefinitions<LogicType> | ((logic: LogicType) => EventDefinitions<LogicType>);\r\n    defaults?: ((logic: LogicType) => (state: any, props: LogicType['props']) => Record<string, any>) | ((logic: LogicType) => Record<string, any>) | Record<string, any>;\r\n    loaders?: LoaderDefinitions<LogicType> | ((logic: LogicType) => LoaderDefinitions<LogicType>);\r\n    windowValues?: WindowValuesDefinitions<LogicType> | ((logic: LogicType) => WindowValuesDefinitions<LogicType>);\r\n    urlToAction?: (logic: LogicType) => Record<string, (params: Record<string, string | undefined>, searchParams: Record<string, any>, hashParams: Record<string, any>, payload: {\r\n        method: 'PUSH' | 'REPLACE' | 'POP';\r\n        pathname: string;\r\n        search: string;\r\n        searchParams: Record<string, any>;\r\n        hash: string;\r\n        hashParams: Record<string, any>;\r\n        url: string;\r\n        initial?: boolean;\r\n    }, previousLocation: {\r\n        method: 'PUSH' | 'REPLACE' | 'POP' | null;\r\n        pathname: string;\r\n        search: string;\r\n        searchParams: Record<string, any>;\r\n        hash: string;\r\n        hashParams: Record<string, any>;\r\n        url: string;\r\n    }) => any>;\r\n    actionToUrl?: (logic: LogicType) => {\r\n        [K in keyof LogicType['actionCreators']]?: (payload: Record<string, any>) => void | string | [string] | [string, string | Record<string, any> | undefined] | [string, string | Record<string, any> | undefined, string | Record<string, any> | undefined] | [\r\n            string,\r\n            string | Record<string, any> | undefined,\r\n            string | Record<string, any> | undefined,\r\n            {\r\n                replace?: boolean;\r\n            }\r\n        ];\r\n    };\r\n    [key: string]: unknown;\r\n} & LogicType['__keaTypeGenInternalExtraInput'];\r\ninterface MakeLogicType<Values = Record<string, unknown>, Actions = Record<string, AnyFunction>, LogicProps = Props> extends Logic {\r\n    actionCreators: {\r\n        [ActionKey in keyof Actions]: Actions[ActionKey] extends AnyFunction ? ActionCreatorForPayloadBuilder<Actions[ActionKey]> : never;\r\n    };\r\n    actionKeys: Record<string, string>;\r\n    actionTypes: {\r\n        [ActionKey in keyof Actions]: string;\r\n    };\r\n    actions: {\r\n        [ActionKey in keyof Actions]: Actions[ActionKey] extends AnyFunction ? ActionForPayloadBuilder<Actions[ActionKey]> : never;\r\n    };\r\n    defaults: Values;\r\n    props: LogicProps;\r\n    reducer: ReducerFunction<Values>;\r\n    reducers: {\r\n        [Value in keyof Values]: ReducerFunction<Values[Value]>;\r\n    };\r\n    selector: (state: any, props: LogicProps) => Values;\r\n    selectors: {\r\n        [Value in keyof Values]: (state: any, props: LogicProps) => Values[Value];\r\n    };\r\n    values: Values;\r\n    __keaTypeGenInternalSelectorTypes: {\r\n        [K in keyof Values]: (...args: any) => Values[K];\r\n    };\r\n}\r\ndeclare type AnyFunction = (...args: any) => any;\r\ndeclare type ActionCreatorForPayloadBuilder<B extends AnyFunction> = (...args: Parameters<B>) => {\r\n    type: string;\r\n    payload: ReturnType<B>;\r\n};\r\ndeclare type ActionForPayloadBuilder<B extends AnyFunction> = (...args: Parameters<B>) => void;\r\ninterface CreateStoreOptions {\r\n    paths: string[];\r\n    reducers: Record<string, Reducer>;\r\n    preloadedState: Record<string, any> | undefined;\r\n    middleware: Middleware[];\r\n    compose: typeof compose;\r\n    enhancers: StoreEnhancer[];\r\n    plugins: KeaPlugin[];\r\n}\r\ninterface InternalContextOptions {\r\n    debug: boolean;\r\n    proxyFields: boolean;\r\n    flatDefaults: boolean;\r\n    attachStrategy: 'dispatch' | 'replace';\r\n    detachStrategy: 'dispatch' | 'replace' | 'persist';\r\n    defaultPath: string[];\r\n}\r\ninterface ContextOptions extends Partial<InternalContextOptions> {\r\n    plugins?: KeaPlugin[];\r\n    createStore?: boolean | Partial<CreateStoreOptions>;\r\n    defaults?: Record<string, any>;\r\n}\r\ninterface KeaComponent extends FunctionComponent {\r\n    _wrapper: LogicWrapper;\r\n    _wrappedComponent: AnyComponent;\r\n}\r\ninterface PluginEvents {\r\n    afterOpenContext?: (context: Context, options: ContextOptions) => void;\r\n    afterPlugin?: () => void;\r\n    beforeReduxStore?: (options: CreateStoreOptions) => void;\r\n    afterReduxStore?: (options: CreateStoreOptions, store: Store) => void;\r\n    beforeKea?: (input: LogicInput | LogicBuilder) => void;\r\n    beforeBuild?: (logic: BuiltLogic, inputs: (LogicInput | LogicBuilder)[]) => void;\r\n    beforeLogic?: (logic: BuiltLogic, input: LogicInput | LogicBuilder) => void;\r\n    afterLogic?: (logic: BuiltLogic, input: LogicInput | LogicBuilder) => void;\r\n    legacyBuild?: (logic: BuiltLogic, input: LogicInput) => void;\r\n    legacyBuildAfterConnect?: (logic: BuiltLogic, input: LogicInput) => void;\r\n    legacyBuildAfterDefaults?: (logic: BuiltLogic, input: LogicInput) => void;\r\n    afterBuild?: (logic: BuiltLogic, inputs: (LogicInput | LogicBuilder)[]) => void;\r\n    beforeMount?: (logic: BuiltLogic) => void;\r\n    afterMount?: (logic: BuiltLogic) => void;\r\n    beforeAttach?: (logic: BuiltLogic) => void;\r\n    afterAttach?: (logic: BuiltLogic) => void;\r\n    beforeUnmount?: (logic: BuiltLogic) => void;\r\n    afterUnmount?: (logic: BuiltLogic) => void;\r\n    beforeDetach?: (logic: BuiltLogic) => void;\r\n    afterDetach?: (logic: BuiltLogic) => void;\r\n    beforeWrap?: (wrapper: LogicWrapper, Klass: AnyComponent) => void;\r\n    afterWrap?: (wrapper: LogicWrapper, Klass: AnyComponent, Kea: KeaComponent) => void;\r\n    beforeRender?: (logic: BuiltLogic, props: Props) => void;\r\n    beforeCloseContext?: (context: Context) => void;\r\n}\r\ndeclare type PluginEventArrays = {\r\n    [K in keyof PluginEvents]: PluginEvents[K][];\r\n};\r\ninterface KeaPlugin {\r\n    name: string;\r\n    defaults?: () => Record<string, any>;\r\n    events?: PluginEvents;\r\n}\r\ninterface WrapperContext<L extends Logic = Logic> {\r\n    isBuilding: boolean;\r\n    keyBuilder: L['keyBuilder'];\r\n    builtLogics: Map<KeyType | undefined, BuiltLogic<L>>;\r\n}\r\ninterface Context {\r\n    contextId: string;\r\n    plugins: {\r\n        activated: KeaPlugin[];\r\n        events: PluginEventArrays;\r\n        logicFields: Record<string, string>;\r\n        contexts: Record<string, Record<string, any>>;\r\n    };\r\n    inputCounter: number;\r\n    reducerDefaults: Record<string, any> | undefined;\r\n    wrapperContexts: WeakMap<LogicWrapper, WrapperContext>;\r\n    buildHeap: Logic[];\r\n    mount: {\r\n        counter: Record<string, number>;\r\n        mounted: Record<string, BuiltLogic>;\r\n    };\r\n    react: {\r\n        contexts: WeakMap<LogicWrapper, Context$1<BuiltLogic | undefined>>;\r\n    };\r\n    reducers: {\r\n        tree: any;\r\n        roots: any;\r\n        redux: any;\r\n        whitelist: false | Record<string, boolean>;\r\n        combined: ReducerFunction | undefined;\r\n    };\r\n    store: Store;\r\n    __store: Store | undefined;\r\n    options: InternalContextOptions;\r\n}\n\ndeclare function isLogicWrapper(logic: any): logic is LogicWrapper;\r\ndeclare function isBuiltLogic(logic: any): logic is BuiltLogic;\r\ndeclare const shallowCompare: (obj1: Record<string, any>, obj2: Record<string, any>) => boolean;\n\ndeclare function actions<L extends Logic = Logic>(input: ActionDefinitions<L> | ((logic: L) => ActionDefinitions<L>)): LogicBuilder<L>;\r\ndeclare function createActionCreator(type: string, payloadCreator: PayloadCreatorDefinition): KeaAction;\n\ndeclare function connect<L extends Logic = Logic>(input: ConnectDefinitions | ((props: L['props']) => ConnectDefinitions)): LogicBuilder<L>;\r\ndeclare function addConnection(logic: Logic, otherLogic: Logic): void;\n\ndeclare function defaults<L extends Logic = Logic>(input: ((logic: L) => (state: any, props: L['props']) => Partial<{\r\n    [T in keyof L['values']]: L['values'][T];\r\n}>) | ((logic: L) => Partial<{\r\n    [T in keyof L['values']]: L['values'][T];\r\n}>) | Partial<{\r\n    [T in keyof L['values']]: L['values'][T];\r\n}>): LogicBuilder<L>;\n\ndeclare function events<L extends Logic = Logic>(input: EventDefinitions<L> | ((logic: L) => EventDefinitions<L>)): LogicBuilder<L>;\r\ndeclare function afterMount<L extends Logic = Logic>(input: (logic: L) => void): LogicBuilder<L>;\r\ndeclare function beforeUnmount<L extends Logic = Logic>(input: (logic: L) => void): LogicBuilder<L>;\r\ndeclare function propsChanged<L extends Logic = Logic>(input: (logic: L, oldProps: L['props']) => void): LogicBuilder<L>;\n\ndeclare const isBreakpoint: (error: Error) => boolean;\r\ndeclare function listeners<L extends Logic = Logic>(input: LogicInput<L>['listeners']): LogicBuilder<L>;\r\ndeclare function sharedListeners<L extends Logic = Logic>(input: LogicInput<L>['sharedListeners']): LogicBuilder<L>;\n\ndeclare function reducers<L extends Logic = Logic>(input: ReducerDefinitions<L> | ((logic: L) => ReducerDefinitions<L>)): LogicBuilder<L>;\n\ndeclare function selectors<L extends Logic = Logic>(input: SelectorDefinitions<L> | ((logic: L) => SelectorDefinitions<L>)): LogicBuilder<L>;\n\ndeclare function key<L extends Logic = Logic>(input: (props: L['props']) => KeyType): LogicBuilder<L>;\n\ndeclare function props<L extends Logic = Logic>(input: L['props']): LogicBuilder<L>;\n\ndeclare function path<L extends Logic = Logic>(input: PathType | ((key: KeyType) => PathType)): LogicBuilder<L>;\n\ndeclare const corePlugin: KeaPlugin;\n\ndeclare function kea<L extends Logic = Logic>(input: LogicInput<L> | (LogicBuilder<L> | LogicInput<L>)[]): LogicWrapper<L>;\n\ndeclare function useSelector(selector: Selector): any;\r\ndeclare function useValues<L extends Logic = Logic>(logic: BuiltLogic<L> | LogicWrapper<L>): L['values'];\r\ndeclare function useAllValues<L extends Logic = Logic>(logic: BuiltLogic<L> | LogicWrapper<L>): L['values'];\r\ndeclare function useActions<L extends Logic = Logic>(logic: BuiltLogic<L> | LogicWrapper<L>): L['actions'];\r\ndeclare function useMountedLogic<L extends Logic = Logic>(logic: BuiltLogic<L> | LogicWrapper<L>): BuiltLogic<L>;\r\ndeclare function batchChanges(callback: () => void): void;\n\ndeclare type BindPropsProps = {\r\n    logic: LogicWrapper;\r\n    props: LogicWrapper['props'];\r\n    children: React.ReactNode;\r\n};\r\ndeclare function BindLogic({ logic, props, children }: BindPropsProps): JSX.Element;\n\ndeclare function Provider({ children }: {\r\n    children: React__default.ReactNode;\r\n}): JSX.Element;\n\ndeclare function getContext(): Context;\r\ndeclare function openContext(options?: ContextOptions, initial?: boolean): Context;\r\ndeclare function closeContext(): void;\r\ndeclare function resetContext(options?: ContextOptions, initial?: boolean): Context;\r\ndeclare function getPluginContext<Context = Record<string, any>>(name: string): Context;\r\ndeclare function setPluginContext<Context = Record<string, any>>(name: string, pluginContext: Context): void;\n\ndeclare function createStore(opts?: {}): Store | void;\n\ndeclare function keaReducer(pathStart?: string): ReducerFunction;\n\ndeclare function activatePlugin(pluginToActivate: KeaPlugin | (() => KeaPlugin)): void;\n\ndeclare const ATTACH_REDUCER: \"@KEA/ATTACH_REDUCER\";\r\ndeclare const DETACH_REDUCER: \"@KEA/DETACH_REDUCER\";\n\nexport { ATTACH_REDUCER, ActionCreatorForPayloadBuilder, ActionDefinitions, ActionForPayloadBuilder, AnyComponent, AnyFunction, BindLogic, BreakPointFunction, BuiltLogic, BuiltLogicAdditions, ConnectDefinitions, Context, ContextOptions, CreateStoreOptions, DETACH_REDUCER, EventDefinitions, InternalContextOptions, KeaAction, KeaComponent, KeaPlugin, KeaReduxAction, KeyType, ListenerDefinitions, ListenerDefinitionsForRecord, ListenerFunction, ListenerFunctionWrapper, Logic, LogicBuilder, LogicInput, LogicWrapper, LogicWrapperAdditions, MakeLogicType, PartialRecord, PathType, PayloadCreatorDefinition, PluginEventArrays, PluginEvents, Props, Provider, ReducerActions, ReducerDefault, ReducerDefinitions, ReducerFunction, Selector, SelectorDefinition, SelectorDefinitions, SelectorTuple, SharedListenerDefinitions, WrapperContext, actions, activatePlugin, addConnection, afterMount, batchChanges, beforeUnmount, closeContext, connect, corePlugin, createActionCreator, createStore, defaults, events, getContext, getPluginContext, isBreakpoint, isBuiltLogic, isLogicWrapper, kea, keaReducer, key, listeners, openContext, path, props, propsChanged, reducers, resetContext, selectors, setPluginContext, shallowCompare, sharedListeners, useActions, useAllValues, useMountedLogic, useSelector, useValues };\n",
    "@posthog/apps-common/index.d.ts": "import * as antd_lib_checkbox_Group from 'antd/lib/checkbox/Group';\nimport React from 'react';\nimport { UploadFile } from 'antd/lib/upload/interface';\n\n/** Collaboration restriction level (which is a dashboard setting). Sync with DashboardPrivilegeLevel. */\ndeclare enum DashboardRestrictionLevel {\n    EveryoneInProjectCanEdit = 21,\n    OnlyCollaboratorsCanEdit = 37\n}\n/** Collaboration privilege level (which is a user property). Sync with DashboardRestrictionLevel. */\ndeclare enum DashboardPrivilegeLevel {\n    CanView = 21,\n    CanEdit = 37,\n    /** This is not a value that can be set in the DB – it's inferred. */\n    _ProjectAdmin = 888,\n    /** This is not a value that can be set in the DB – it's inferred. */\n    _Owner = 999\n}\ndeclare enum ShownAsValue {\n    VOLUME = \"Volume\",\n    STICKINESS = \"Stickiness\",\n    LIFECYCLE = \"Lifecycle\"\n}\ndeclare const RETENTION_RECURRING = \"retention_recurring\";\ndeclare const RETENTION_FIRST_TIME = \"retention_first_time\";\ndeclare const ENTITY_MATCH_TYPE = \"entities\";\ndeclare const PROPERTY_MATCH_TYPE = \"properties\";\ndeclare enum FunnelLayout {\n    horizontal = \"horizontal\",\n    vertical = \"vertical\"\n}\ndeclare const BIN_COUNT_AUTO = \"auto\";\n\ndeclare enum TaxonomicFilterGroupType {\n    Actions = \"actions\",\n    Cohorts = \"cohorts\",\n    CohortsWithAllUsers = \"cohorts_with_all\",\n    Elements = \"elements\",\n    Events = \"events\",\n    EventProperties = \"event_properties\",\n    NumericalEventProperties = \"numerical_event_properties\",\n    PersonProperties = \"person_properties\",\n    PageviewUrls = \"pageview_urls\",\n    Screens = \"screens\",\n    CustomEvents = \"custom_events\",\n    Wildcards = \"wildcard\",\n    GroupsPrefix = \"groups\",\n    Persons = \"persons\",\n    FeatureFlags = \"feature_flags\",\n    Insights = \"insights\",\n    Experiments = \"experiments\",\n    Plugins = \"plugins\",\n    Dashboards = \"dashboards\",\n    GroupNamesPrefix = \"name_groups\"\n}\n\ndeclare module 'react' {\n    function forwardRef<T, P>(render: (props: P, ref: React.Ref<T>) => React.ReactElement | null): (props: P & React.RefAttributes<T>) => React.ReactElement | null;\n}\n\ndeclare type BehavioralFilterType = BehavioralEventType | BehavioralCohortType | BehavioralLifecycleType;\ndeclare enum BehavioralFilterKey {\n    Behavioral = \"behavioral\",\n    Cohort = \"cohort\",\n    Person = \"person\"\n}\n\ndeclare enum LicensePlan {\n    Scale = \"scale\",\n    Enterprise = \"enterprise\"\n}\ninterface UserBaseType {\n    uuid: string;\n    distinct_id: string;\n    first_name: string;\n    email: string;\n}\ninterface UserBasicType extends UserBaseType {\n    id: number;\n}\ninterface ActionType {\n    count?: number;\n    created_at: string;\n    deleted?: boolean;\n    id: number;\n    is_calculating?: boolean;\n    last_calculated_at?: string;\n    name: string | null;\n    description?: string;\n    post_to_slack?: boolean;\n    slack_message_format?: string;\n    steps?: ActionStepType[];\n    created_by: UserBasicType | null;\n    tags?: string[];\n}\n/** Sync with plugin-server/src/types.ts */\ndeclare enum ActionStepUrlMatching {\n    Contains = \"contains\",\n    Regex = \"regex\",\n    Exact = \"exact\"\n}\ninterface ActionStepType {\n    event?: string;\n    href?: string | null;\n    id?: number;\n    name?: string;\n    properties?: AnyPropertyFilter[];\n    selector?: string | null;\n    tag_name?: string;\n    text?: string | null;\n    url?: string | null;\n    url_matching?: ActionStepUrlMatching;\n    isNew?: string;\n}\ninterface ElementType {\n    attr_class?: string[];\n    attr_id?: string;\n    attributes: Record<string, string>;\n    href: string;\n    nth_child: number;\n    nth_of_type: number;\n    order: number;\n    tag_name: string;\n    text?: string;\n}\ndeclare type PropertyFilterValue = string | number | (string | number)[] | null;\ninterface PropertyFilter {\n    key: string;\n    operator: PropertyOperator | null;\n    type: string;\n    value: PropertyFilterValue;\n    group_type_index?: number | null;\n}\ndeclare type EmptyPropertyFilter = Partial<PropertyFilter>;\ndeclare type AnyPropertyFilter = PropertyFilter | EmptyPropertyFilter;\n/** Sync with plugin-server/src/types.ts */\ndeclare enum PropertyOperator {\n    Exact = \"exact\",\n    IsNot = \"is_not\",\n    IContains = \"icontains\",\n    NotIContains = \"not_icontains\",\n    Regex = \"regex\",\n    NotRegex = \"not_regex\",\n    GreaterThan = \"gt\",\n    GreaterThanOrEqual = \"gte\",\n    LessThan = \"lt\",\n    LessThanOrEqual = \"lte\",\n    IsSet = \"is_set\",\n    IsNotSet = \"is_not_set\",\n    IsDateExact = \"is_date_exact\",\n    IsDateBefore = \"is_date_before\",\n    IsDateAfter = \"is_date_after\",\n    Between = \"between\",\n    NotBetween = \"not_between\",\n    Minimum = \"min\",\n    Maximum = \"max\"\n}\ndeclare type EntityType = 'actions' | 'events' | 'new_entity';\ninterface Entity {\n    id: string | number;\n    name: string;\n    custom_name?: string;\n    order: number;\n    type: EntityType;\n}\ndeclare type EntityFilter = {\n    type?: EntityType;\n    id: Entity['id'] | null;\n    name: string | null;\n    custom_name?: string;\n    index?: number;\n    order?: number;\n};\ninterface FunnelStepRangeEntityFilter {\n    funnel_from_step?: number;\n    funnel_to_step?: number;\n}\ninterface PersonType {\n    id?: number;\n    uuid?: string;\n    name?: string;\n    distinct_ids: string[];\n    properties: Record<string, any>;\n    created_at?: string;\n    is_identified?: boolean;\n}\ninterface MatchedRecordingEvents {\n    uuid: string;\n    window_id: string;\n    timestamp: string;\n}\ninterface MatchedRecording {\n    session_id: string;\n    events: MatchedRecordingEvents[];\n}\ninterface CommonActorType {\n    id?: string | number;\n    properties: Record<string, any>;\n    created_at?: string;\n    matched_recordings?: MatchedRecording[];\n}\ninterface PersonActorType extends CommonActorType {\n    type: 'person';\n    uuid?: string;\n    name?: string;\n    distinct_ids: string[];\n    is_identified: boolean;\n}\ninterface GroupActorType extends CommonActorType {\n    type: 'group';\n    group_key: string;\n    group_type_index: number;\n}\ndeclare type ActorType = PersonActorType | GroupActorType;\ninterface CohortGroupType {\n    id: string;\n    days?: string;\n    action_id?: number;\n    event_id?: string;\n    label?: string;\n    count?: number;\n    count_operator?: string;\n    properties?: AnyPropertyFilter[];\n    matchType: MatchType;\n    name?: string;\n}\ninterface CohortCriteriaType {\n    id: string;\n    key: string;\n    value: BehavioralFilterType;\n    type: BehavioralFilterKey;\n    operator?: PropertyOperator | null;\n    group_type_index?: number | null;\n    event_type?: TaxonomicFilterGroupType | null;\n    operator_value?: PropertyFilterValue;\n    time_value?: number | string | null;\n    time_interval?: TimeUnitType | null;\n    total_periods?: number | null;\n    min_periods?: number | null;\n    seq_event_type?: TaxonomicFilterGroupType | null;\n    seq_event?: string | number | null;\n    seq_time_value?: number | string | null;\n    seq_time_interval?: TimeUnitType | null;\n    negation?: boolean;\n    value_property?: string | null;\n}\ndeclare type EmptyCohortCriteriaType = Partial<CohortCriteriaType>;\ndeclare type AnyCohortCriteriaType = CohortCriteriaType | EmptyCohortCriteriaType;\ndeclare type MatchType = typeof ENTITY_MATCH_TYPE | typeof PROPERTY_MATCH_TYPE;\ninterface CohortType {\n    count?: number;\n    description?: string;\n    created_by?: UserBasicType | null;\n    created_at?: string;\n    deleted?: boolean;\n    id: number | 'new';\n    is_calculating?: boolean;\n    errors_calculating?: number;\n    last_calculation?: string;\n    is_static?: boolean;\n    name?: string;\n    csv?: UploadFile;\n    groups: CohortGroupType[];\n    filters: {\n        properties: CohortCriteriaGroupFilter;\n    };\n}\ndeclare type BinCountValue = number | typeof BIN_COUNT_AUTO;\ndeclare enum StepOrderValue {\n    STRICT = \"strict\",\n    UNORDERED = \"unordered\",\n    ORDERED = \"ordered\"\n}\ninterface EventType {\n    elements: ElementType[];\n    elements_hash: string | null;\n    elements_chain?: string | null;\n    id: number | string;\n    properties: Record<string, any>;\n    timestamp: string;\n    colonTimestamp?: string;\n    person?: Partial<PersonType> | null;\n    event: string;\n}\ndeclare type InsightShortId = string & {\n    readonly '': unique symbol;\n};\ndeclare enum InsightColor {\n    White = \"white\",\n    Black = \"black\",\n    Blue = \"blue\",\n    Green = \"green\",\n    Purple = \"purple\"\n}\ninterface DashboardTile {\n    result: any | null;\n    layouts: Record<string, any>;\n    color: InsightColor | null;\n    last_refresh: string | null;\n    filters: Partial<FilterType>;\n    filters_hash: string;\n}\ninterface InsightModel extends DashboardTile {\n    /** The unique key we use when communicating with the user, e.g. in URLs */\n    short_id: InsightShortId;\n    /** The primary key in the database, used as well in API endpoints */\n    id: number;\n    name: string;\n    derived_name?: string;\n    description?: string;\n    favorited?: boolean;\n    order: number | null;\n    deleted: boolean;\n    saved: boolean;\n    created_at: string;\n    created_by: UserBasicType | null;\n    refreshing: boolean;\n    is_sample: boolean;\n    dashboards: number[] | null;\n    updated_at: string;\n    tags?: string[];\n    last_modified_at: string;\n    last_modified_by: UserBasicType | null;\n    effective_restriction_level: DashboardRestrictionLevel;\n    effective_privilege_level: DashboardPrivilegeLevel;\n    timezone?: string;\n    /** Only used in the frontend to store the next breakdown url */\n    next?: string;\n}\ninterface DashboardType {\n    id: number;\n    name: string;\n    description: string;\n    pinned: boolean;\n    items: InsightModel[];\n    created_at: string;\n    created_by: UserBasicType | null;\n    is_shared: boolean;\n    share_token: string;\n    deleted: boolean;\n    filters: Record<string, any>;\n    creation_mode: 'default' | 'template' | 'duplicate';\n    restriction_level: DashboardRestrictionLevel;\n    effective_restriction_level: DashboardRestrictionLevel;\n    effective_privilege_level: DashboardPrivilegeLevel;\n    tags?: string[];\n    /** Purely local value to determine whether the dashboard should be highlighted, e.g. as a fresh duplicate. */\n    _highlight?: boolean;\n}\n/** Explicit dashboard collaborator, based on DashboardPrivilege. */\ninterface DashboardCollaboratorType {\n    id: string;\n    dashboard_id: DashboardType['id'];\n    user: UserBasicType;\n    level: DashboardPrivilegeLevel;\n    added_at: string;\n    updated_at: string;\n}\ndeclare enum PluginLogEntryType {\n    Debug = \"DEBUG\",\n    Log = \"LOG\",\n    Info = \"INFO\",\n    Warn = \"WARN\",\n    Error = \"ERROR\"\n}\ninterface PluginLogEntry {\n    id: string;\n    team_id: number;\n    plugin_id: number;\n    plugin_config_id: number;\n    timestamp: string;\n    type: PluginLogEntryType;\n    is_system: boolean;\n    message: string;\n    instance_id: string;\n}\ndeclare enum ChartDisplayType {\n    ActionsLineGraph = \"ActionsLineGraph\",\n    ActionsLineGraphCumulative = \"ActionsLineGraphCumulative\",\n    ActionsTable = \"ActionsTable\",\n    ActionsPie = \"ActionsPie\",\n    ActionsBar = \"ActionsBar\",\n    ActionsBarValue = \"ActionsBarValue\",\n    PathsViz = \"PathsViz\",\n    FunnelViz = \"FunnelViz\",\n    WorldMap = \"WorldMap\"\n}\ndeclare type BreakdownType = 'cohort' | 'person' | 'event' | 'group';\ndeclare type IntervalType = 'hour' | 'day' | 'week' | 'month';\ndeclare enum InsightType {\n    TRENDS = \"TRENDS\",\n    STICKINESS = \"STICKINESS\",\n    LIFECYCLE = \"LIFECYCLE\",\n    FUNNELS = \"FUNNELS\",\n    RETENTION = \"RETENTION\",\n    PATHS = \"PATHS\"\n}\ndeclare enum PathType {\n    PageView = \"$pageview\",\n    Screen = \"$screen\",\n    CustomEvent = \"custom_event\"\n}\ndeclare enum FunnelPathType {\n    before = \"funnel_path_before_step\",\n    between = \"funnel_path_between_steps\",\n    after = \"funnel_path_after_step\"\n}\ndeclare enum FunnelVizType {\n    Steps = \"steps\",\n    TimeToConvert = \"time_to_convert\",\n    Trends = \"trends\"\n}\ndeclare type RetentionType = typeof RETENTION_RECURRING | typeof RETENTION_FIRST_TIME;\ndeclare type BreakdownKeyType = string | number | (string | number)[] | null;\ninterface Breakdown {\n    property: string | number;\n    type: BreakdownType;\n}\ninterface FilterType {\n    insight?: InsightType;\n    display?: ChartDisplayType;\n    interval?: IntervalType;\n    smoothing_intervals?: number;\n    date_from?: string | null;\n    date_to?: string | null;\n    properties?: AnyPropertyFilter[] | PropertyGroupFilter;\n    events?: Record<string, any>[];\n    event?: string;\n    actions?: Record<string, any>[];\n    breakdown_type?: BreakdownType | null;\n    breakdown?: BreakdownKeyType;\n    breakdowns?: Breakdown[];\n    breakdown_value?: string | number;\n    breakdown_group_type_index?: number | null;\n    shown_as?: ShownAsValue;\n    session?: string;\n    period?: string;\n    retention_type?: RetentionType;\n    retention_reference?: 'total' | 'previous';\n    total_intervals?: number;\n    new_entity?: Record<string, any>[];\n    returning_entity?: Record<string, any>;\n    target_entity?: Record<string, any>;\n    path_type?: PathType;\n    include_event_types?: PathType[];\n    start_point?: string;\n    end_point?: string;\n    path_groupings?: string[];\n    stickiness_days?: number;\n    type?: EntityType;\n    entity_id?: string | number;\n    entity_type?: EntityType;\n    entity_math?: string;\n    people_day?: any;\n    people_action?: any;\n    formula?: any;\n    filter_test_accounts?: boolean;\n    from_dashboard?: boolean | number;\n    layout?: FunnelLayout;\n    funnel_step?: number;\n    entrance_period_start?: string;\n    drop_off?: boolean;\n    funnel_viz_type?: FunnelVizType;\n    funnel_from_step?: number;\n    funnel_to_step?: number;\n    funnel_step_breakdown?: string | number[] | number | null;\n    compare?: boolean;\n    bin_count?: BinCountValue;\n    funnel_window_interval_unit?: FunnelConversionWindowTimeUnit;\n    funnel_window_interval?: number | undefined;\n    funnel_order_type?: StepOrderValue;\n    exclusions?: FunnelStepRangeEntityFilter[];\n    exclude_events?: string[];\n    step_limit?: number;\n    path_start_key?: string;\n    path_end_key?: string;\n    path_dropoff_key?: string;\n    path_replacements?: boolean;\n    local_path_cleaning_filters?: Record<string, any>[];\n    funnel_filter?: Record<string, any>;\n    funnel_paths?: FunnelPathType;\n    edge_limit?: number | undefined;\n    min_edge_weight?: number | undefined;\n    max_edge_weight?: number | undefined;\n    funnel_correlation_person_entity?: Record<string, any>;\n    funnel_correlation_person_converted?: 'true' | 'false';\n    funnel_custom_steps?: number[];\n    aggregation_group_type_index?: number | undefined;\n    funnel_advanced?: boolean;\n    show_legend?: boolean;\n    hidden_legend_keys?: Record<string, boolean | undefined>;\n}\ninterface ActionFilter extends EntityFilter {\n    math?: string;\n    math_property?: string;\n    math_group_type_index?: number | null;\n    properties?: PropertyFilter[];\n    type: EntityType;\n}\ndeclare enum FunnelConversionWindowTimeUnit {\n    Minute = \"minute\",\n    Hour = \"hour\",\n    Day = \"day\",\n    Week = \"week\",\n    Month = \"month\"\n}\ninterface LicenseType {\n    id: number;\n    key: string;\n    plan: LicensePlan;\n    valid_until: string;\n    max_users: number | null;\n    created_at: string;\n}\ninterface EventDefinition {\n    id: string;\n    name: string;\n    description?: string;\n    tags?: string[];\n    volume_30_day: number | null;\n    query_usage_30_day: number | null;\n    owner?: UserBasicType | null;\n    created_at?: string;\n    last_seen_at?: string;\n    updated_at?: string;\n    updated_by?: UserBasicType | null;\n    verified?: boolean;\n    verified_at?: string;\n    verified_by?: string;\n}\ndeclare enum PropertyType {\n    DateTime = \"DateTime\",\n    String = \"String\",\n    Numeric = \"Numeric\",\n    Boolean = \"Boolean\"\n}\ninterface PropertyDefinition {\n    id: string;\n    name: string;\n    description?: string;\n    tags?: string[];\n    volume_30_day: number | null;\n    query_usage_30_day: number | null;\n    updated_at?: string;\n    updated_by?: UserBasicType | null;\n    is_numerical?: boolean;\n    is_event_property?: boolean;\n    property_type?: PropertyType;\n    created_at?: string;\n    last_seen_at?: string;\n    example?: string;\n}\ndeclare enum FilterLogicalOperator {\n    And = \"AND\",\n    Or = \"OR\"\n}\ninterface PropertyGroupFilter {\n    type: FilterLogicalOperator;\n    values: PropertyGroupFilterValue[];\n}\ninterface PropertyGroupFilterValue {\n    type: FilterLogicalOperator;\n    values: AnyPropertyFilter[];\n}\ninterface CohortCriteriaGroupFilter {\n    id?: string;\n    type: FilterLogicalOperator;\n    values: AnyCohortCriteriaType[] | CohortCriteriaGroupFilter[];\n}\ndeclare enum BehavioralEventType {\n    PerformEvent = \"performed_event\",\n    PerformMultipleEvents = \"performed_event_multiple\",\n    PerformSequenceEvents = \"performed_event_sequence\",\n    NotPerformedEvent = \"not_performed_event\",\n    NotPerformSequenceEvents = \"not_performed_event_sequence\",\n    HaveProperty = \"have_property\",\n    NotHaveProperty = \"not_have_property\"\n}\ndeclare enum BehavioralCohortType {\n    InCohort = \"in_cohort\",\n    NotInCohort = \"not_in_cohort\"\n}\ndeclare enum BehavioralLifecycleType {\n    PerformEventFirstTime = \"performed_event_first_time\",\n    PerformEventRegularly = \"performed_event_regularly\",\n    StopPerformEvent = \"stopped_performing_event\",\n    StartPerformEventAgain = \"restarted_performing_event\"\n}\ndeclare enum TimeUnitType {\n    Day = \"day\",\n    Week = \"week\",\n    Month = \"month\",\n    Year = \"year\"\n}\n\ninterface PersonFilters {\n    properties?: AnyPropertyFilter[];\n    search?: string;\n    cohort?: number;\n}\n\ninterface ActivityChange {\n    type: 'FeatureFlag' | 'Person' | 'Insight';\n    action: 'changed' | 'created' | 'deleted';\n    field?: string;\n    before?: string | Record<string, any> | boolean;\n    after?: string | Record<string, any> | boolean;\n}\ninterface PersonMerge {\n    type: 'Person';\n    source: PersonType[];\n    target: PersonType;\n}\ninterface ActivityLogDetail {\n    merge: PersonMerge | null;\n    changes: ActivityChange[] | null;\n    name: string | null;\n    short_id?: InsightShortId | null;\n}\ninterface ActivityUser {\n    email: string;\n    first_name: string;\n}\ndeclare enum ActivityScope {\n    FEATURE_FLAG = \"FeatureFlag\",\n    PERSON = \"Person\",\n    INSIGHT = \"Insight\"\n}\ninterface ActivityLogItem {\n    user: ActivityUser;\n    activity: string;\n    created_at: string;\n    scope: ActivityScope;\n    item_id?: string;\n    detail: ActivityLogDetail;\n}\ndeclare type Describer = (logItem: ActivityLogItem) => string | JSX.Element | null;\n\ninterface ActivityLogProps {\n    scope: ActivityScope;\n    id?: number;\n    describer?: Describer;\n    startingPage?: number;\n    caption?: string | JSX.Element;\n}\n\ninterface PeopleParamType {\n    action?: ActionFilter;\n    label: string;\n    date_to?: string | number;\n    date_from?: string | number;\n    breakdown_value?: string | number;\n    target_date?: number | string;\n    lifecycle_type?: string | number;\n}\n\ninterface PaginatedResponse<T> {\n    results: T[];\n    next?: string;\n    previous?: string;\n}\ninterface CountedPaginatedResponse extends PaginatedResponse<ActivityLogItem> {\n    total_count: number;\n}\n\ndeclare function AdHocInsight({ filters, style, }: {\n    filters: Partial<FilterType>;\n    style: React.CSSProperties;\n}): JSX.Element;\n\ndeclare const api: {\n    actions: {\n        get(actionId: number): Promise<ActionType>;\n        create(actionData: Partial<ActionType>, temporaryToken?: string | undefined): Promise<ActionType>;\n        update(actionId: number, actionData: Partial<ActionType>, temporaryToken?: string | undefined): Promise<ActionType>;\n        list(params?: string | undefined): Promise<PaginatedResponse<ActionType>>;\n        getPeople(peopleParams: PeopleParamType, filters: Partial<FilterType>, searchTerm?: string | undefined): Promise<PaginatedResponse<{\n            people: ActorType[];\n            count: number;\n        }>>;\n        getCount(actionId: number): Promise<number>;\n        determineDeleteEndpoint(): string;\n        determinePeopleCsvUrl(peopleParams: PeopleParamType, filters: Partial<FilterType>): string;\n    };\n    activity: {\n        list(activityLogProps: ActivityLogProps, page?: number, teamId?: number): Promise<CountedPaginatedResponse>;\n    };\n    exports: {\n        determineExportUrl(exportId: number, teamId?: number): string;\n    };\n    events: {\n        get(id: string | number, includePerson?: boolean, teamId?: number): Promise<EventType>;\n        list(filters: Partial<FilterType>, limit?: number, teamId?: number): Promise<PaginatedResponse<EventType[]>>;\n        determineListEndpoint(filters: Partial<FilterType>, limit?: number, teamId?: number): string;\n    };\n    eventDefinitions: {\n        get({ eventDefinitionId }: {\n            eventDefinitionId: string;\n        }): Promise<EventDefinition>;\n        update({ eventDefinitionId, eventDefinitionData, }: {\n            eventDefinitionId: string;\n            eventDefinitionData: Partial<Omit<EventDefinition, \"owner\"> & {\n                owner: number | null;\n            }>;\n        }): Promise<EventDefinition>;\n        list({ limit, teamId, ...params }: {\n            order_ids_first?: string[] | undefined;\n            excluded_ids?: string[] | undefined;\n            limit?: number | undefined;\n            offset?: number | undefined;\n            teamId?: number | undefined;\n        }): Promise<PaginatedResponse<EventDefinition>>;\n        determineListEndpoint({ limit, teamId, ...params }: {\n            order_ids_first?: string[] | undefined;\n            excluded_ids?: string[] | undefined;\n            limit?: number | undefined;\n            offset?: number | undefined;\n            teamId?: number | undefined;\n        }): string;\n    };\n    propertyDefinitions: {\n        get({ propertyDefinitionId, }: {\n            propertyDefinitionId: string;\n        }): Promise<PropertyDefinition>;\n        update({ propertyDefinitionId, propertyDefinitionData, }: {\n            propertyDefinitionId: string;\n            propertyDefinitionData: Partial<PropertyDefinition>;\n        }): Promise<PropertyDefinition>;\n        list({ limit, teamId, ...params }: {\n            event_names?: string[] | undefined;\n            order_ids_first?: string[] | undefined;\n            excluded_ids?: string[] | undefined;\n            excluded_properties?: string[] | undefined;\n            is_event_property?: boolean | undefined;\n            limit?: number | undefined;\n            offset?: number | undefined;\n            teamId?: number | undefined;\n        }): Promise<PaginatedResponse<PropertyDefinition>>;\n        determineListEndpoint({ limit, teamId, ...params }: {\n            event_names?: string[] | undefined;\n            order_ids_first?: string[] | undefined;\n            excluded_ids?: string[] | undefined;\n            excluded_properties?: string[] | undefined;\n            is_event_property?: boolean | undefined;\n            limit?: number | undefined;\n            offset?: number | undefined;\n            teamId?: number | undefined;\n        }): string;\n    };\n    cohorts: {\n        get(cohortId: number | \"new\"): Promise<CohortType>;\n        create(cohortData: Partial<CohortType>, filterParams?: string | undefined): Promise<CohortType>;\n        update(cohortId: number | \"new\", cohortData: Partial<CohortType>, filterParams?: string | undefined): Promise<CohortType>;\n        list(): Promise<PaginatedResponse<CohortType>>;\n        determineDeleteEndpoint(): string;\n    };\n    dashboards: {\n        collaborators: {\n            list(dashboardId: number): Promise<DashboardCollaboratorType[]>;\n            create(dashboardId: number, userUuid: string, level: DashboardPrivilegeLevel): Promise<DashboardCollaboratorType>;\n            delete(dashboardId: number, userUuid: string): Promise<void>;\n        };\n    };\n    person: {\n        determineCSVUrl(filters: PersonFilters): string;\n    };\n    pluginLogs: {\n        search(pluginConfigId: number, currentTeamId: number | null, searchTerm?: string | null, typeFilters?: antd_lib_checkbox_Group.CheckboxValueType[], trailingEntry?: PluginLogEntry | null, leadingEntry?: PluginLogEntry | null): Promise<PluginLogEntry[]>;\n    };\n    licenses: {\n        get(licenseId: number): Promise<LicenseType>;\n        list(): Promise<PaginatedResponse<LicenseType>>;\n        create(key: string): Promise<LicenseType>;\n        delete(licenseId: number): Promise<LicenseType>;\n    };\n    get(url: string, signal?: AbortSignal | undefined): Promise<any>;\n    update(url: string, data: any): Promise<any>;\n    create(url: string, data?: any): Promise<any>;\n    delete(url: string): Promise<any>;\n};\n\nexport { AdHocInsight, api };\n",
    "@posthog/lemon-ui/index.d.ts": "import React$1, { MouseEventHandler, ReactNode, HTMLProps } from 'react';\nimport { Placement } from '@popperjs/core';\nimport { ModalProps } from 'antd';\nimport { ToastOptions } from 'react-toastify';\n\ninterface LemonBubbleProps {\n    count?: number;\n    size?: 'small' | 'medium' | 'large';\n    position?: 'none' | 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right';\n    showZero?: boolean;\n}\n/** An icon-sized Bubble for displaying a count.\n *\n *  Numbers up to 9 are displayed in full, in integer form, with 9+ for higher values\n */\ndeclare function LemonBubble({ count, size, position, showZero, }: LemonBubbleProps): JSX.Element;\n\ndeclare module 'react' {\n    function forwardRef<T, P>(render: (props: P, ref: React$1.Ref<T>) => React$1.ReactElement | null): (props: P & React$1.RefAttributes<T>) => React$1.ReactElement | null;\n}\ninterface LemonRowPropsBase<T extends keyof JSX.IntrinsicElements> extends Omit<React$1.HTMLProps<JSX.IntrinsicElements[T]>, 'ref' | 'size'> {\n    /** If icon width is relaxed, width of icon box is set to auto. Default icon width is 1em  */\n    relaxedIconWidth?: boolean;\n    icon?: React$1.ReactElement | null;\n    /** HTML tag to render the row with. */\n    tag?: T;\n    status?: 'success' | 'warning' | 'danger' | 'highlighted' | 'muted';\n    /** Extended content, e.g. a description, to show in the lower button area. */\n    extendedContent?: React$1.ReactNode;\n    loading?: boolean;\n    /** Tooltip to display on hover. */\n    tooltip?: any;\n    /** Whether the row should take up the parent's full width. */\n    fullWidth?: boolean;\n    /** Whether the row's contents should be centered. */\n    center?: boolean;\n    /** Whether the element should be outlined with a standard border. */\n    outlined?: any;\n    /** Variation on sizes - default is medium. Small looks better inline with text. Large is a chunkier row.  */\n    size?: 'small' | 'medium' | 'large';\n    'data-attr'?: string;\n}\ninterface LemonRowProps<T extends keyof JSX.IntrinsicElements = 'div'> extends LemonRowPropsBase<T> {\n    sideIcon?: React$1.ReactElement | false | null;\n}\n/** Generic UI row component. Can be exploited as a button (see LemonButton) or just as a standard row of content.\n *\n * Do NOT use for general layout if you simply need flexbox though. In that case `display: flex` is much lighter.\n */\ndeclare const LemonRow: <T extends keyof JSX.IntrinsicElements = \"div\">(props: LemonRowProps<T> & React$1.RefAttributes<HTMLElement>) => React$1.ReactElement<any, string | React$1.JSXElementConstructor<any>> | null;\n\ninterface PopupProps {\n    visible?: boolean;\n    onClickOutside?: (event: Event) => void;\n    onClickInside?: MouseEventHandler<HTMLDivElement>;\n    /** Popover trigger element. */\n    children: React$1.ReactChild | ((props: {\n        setRef: (ref: HTMLElement | null) => void;\n    }) => JSX.Element);\n    /** Content of the overlay. */\n    overlay: React$1.ReactNode | React$1.ReactNode[];\n    /** Where the popover should start relative to children. */\n    placement?: Placement;\n    /** Where the popover should start relative to children if there's insufficient space for original placement. */\n    fallbackPlacements?: Placement[];\n    /** Whether the popover is actionable rather than just informative - actionable means a colored border. */\n    actionable?: boolean;\n    /** Whether the popover's width should be synced with the children's width. */\n    sameWidth?: boolean;\n    className?: string;\n    modifier?: Record<string, any>;\n}\n\ninterface LemonButtonPopup extends Omit<PopupProps, 'children'> {\n    closeOnClickInside?: boolean;\n}\ninterface LemonButtonPropsBase extends Omit<LemonRowPropsBase<'button'>, 'tag' | 'type' | 'ref'> {\n    ref?: React$1.Ref<HTMLButtonElement>;\n    type?: 'default' | 'alt' | 'primary' | 'secondary' | 'tertiary' | 'stealth' | 'highlighted';\n    htmlType?: LemonRowPropsBase<'button'>['type'];\n    /** Whether the button should have transparent background in its base state (i.e. non-hover). */\n    translucent?: boolean;\n    /** Whether hover style should be applied, signaling that the button is held active in some way. */\n    active?: boolean;\n    /** URL to link to. */\n    to?: string;\n}\ninterface LemonButtonProps extends LemonButtonPropsBase {\n    sideIcon?: React$1.ReactElement | null;\n    /** DEPRECATED: Use `LemonButtonWithPopup` instead. */\n    popup?: LemonButtonPopup;\n}\ndeclare const LemonButton: (props: LemonButtonProps & React$1.RefAttributes<HTMLButtonElement>) => React$1.ReactElement<any, string | React$1.JSXElementConstructor<any>> | null;\ndeclare type SideAction = Pick<LemonButtonProps, 'onClick' | 'popup' | 'to' | 'disabled' | 'icon' | 'type' | 'tooltip' | 'data-attr'>;\n/** A LemonButtonWithSideAction can't have a sideIcon - instead it has a clickable sideAction. */\ninterface LemonButtonWithSideActionProps extends LemonButtonPropsBase {\n    sideAction: SideAction;\n}\n/**\n * Styled button with a side action on the right.\n * We can't use `LemonRow`'s `sideIcon` prop because putting `onClick` on it clashes with the parent`s `onClick`.\n */\ndeclare function LemonButtonWithSideAction({ sideAction, children, ...buttonProps }: LemonButtonWithSideActionProps): JSX.Element;\ninterface LemonButtonWithPopupProps extends LemonButtonPropsBase {\n    popup: LemonButtonPopup;\n    sideIcon?: React$1.ReactElement | null;\n}\n/**\n * Styled button that opens a popup menu on click.\n * The difference vs. plain `LemonButton` is popup visibility being controlled internally, which is more convenient.\n */\ndeclare function LemonButtonWithPopup({ popup: { onClickOutside, onClickInside, closeOnClickInside, ...popupProps }, onClick, ...buttonProps }: LemonButtonWithPopupProps): JSX.Element;\n\ninterface LemonCheckboxProps {\n    checked?: boolean | 'indeterminate';\n    defaultChecked?: boolean;\n    disabled?: boolean;\n    onChange?: (event: React$1.ChangeEvent<HTMLInputElement>) => void;\n    label?: string | JSX.Element;\n    id?: string;\n    className?: string;\n    style?: React$1.CSSProperties;\n    /** @deprecated See https://github.com/PostHog/posthog/pull/9357#pullrequestreview-933783868. */\n    color?: string;\n    rowProps?: LemonRowProps<'div'>;\n}\ninterface BoxCSSProperties extends React$1.CSSProperties {\n    '--box-color': string;\n}\n/** `LemonRow`-based checkbox component for use in lists or forms.\n *\n * As opposed to switches, checkboxes don't always have to result in the change being applied immediately.\n * E.g. the change may only be applied when the user clicks \"Save\" in a form.\n */\ndeclare function LemonCheckbox({ checked, defaultChecked, disabled, onChange, label, id: rawId, className, color, rowProps, style, }: LemonCheckboxProps): JSX.Element;\n\ninterface LemonDividerProps {\n    /** Twice the default amount of margin. */\n    large?: boolean;\n    /** 3x the thickness of the line. */\n    thick?: boolean;\n    /** Whether the divider should be vertical (for separating left-to-right) instead of horizontal (top-to-bottom). */\n    vertical?: boolean;\n    /** Whether the divider should be a dashed line. */\n    dashed?: boolean;\n    style?: React$1.CSSProperties;\n}\n/** A separator, ideal for being sandwiched between `LemonRow`s.\n *\n * Horizontal by default but can be used in vertical form too.\n */\ndeclare function LemonDivider({ large, vertical, dashed, thick, style, }: LemonDividerProps): JSX.Element;\n\ninterface LemonInputProps extends Omit<React$1.InputHTMLAttributes<HTMLInputElement>, 'value' | 'defaultValue' | 'onChange' | 'prefix' | 'suffix'> {\n    ref?: React$1.Ref<HTMLInputElement>;\n    id?: string;\n    value?: string | number;\n    defaultValue?: string;\n    placeholder?: string;\n    onChange?: (newValue: string) => void;\n    onPressEnter?: (newValue: string) => void;\n    /** An embedded input has no border around it and no background. This way it blends better into other components. */\n    embedded?: boolean;\n    /** Whether there should be a clear icon to the right allowing you to reset the input. The `suffix` prop will be ignored if clearing is allowed. */\n    allowClear?: boolean;\n    /** Icon to prefix input field */\n    icon?: React$1.ReactElement | null;\n    /** Icon to suffix input field */\n    sideIcon?: React$1.ReactElement | null;\n    /** Whether input field is disabled */\n    disabled?: boolean;\n}\n/** A `LemonRow`-based `input` component for single-line text. */\ndeclare const LemonInput: (props: LemonInputProps & React$1.RefAttributes<HTMLInputElement>) => React$1.ReactElement<any, string | React$1.JSXElementConstructor<any>> | null;\n\ndeclare type LemonModalProps = React$1.PropsWithChildren<Omit<ModalProps, 'closeIcon'>>;\n/** A lightweight wrapper over Ant's Modal for matching Lemon style. */\ndeclare function LemonModal({ className, footer, width, ...modalProps }: LemonModalProps): JSX.Element;\n\ninterface LemonSelectOption {\n    label: string;\n    icon?: React$1.ReactElement;\n    disabled?: boolean;\n    'data-attr'?: string;\n}\ndeclare type LemonSelectOptions = Record<string | number, LemonSelectOption>;\ninterface LemonSelectProps<O extends LemonSelectOptions> extends Omit<LemonButtonWithPopupProps, 'popup' | 'icon' | 'value' | 'defaultValue' | 'onChange'> {\n    options: O;\n    value?: keyof O | null;\n    onChange?: (newValue: keyof O | null) => void;\n    dropdownMatchSelectWidth?: boolean;\n    allowClear?: boolean;\n}\ndeclare function LemonSelect<O extends LemonSelectOptions>({ value, onChange, options, placeholder, dropdownMatchSelectWidth, allowClear, ...buttonProps }: LemonSelectProps<O>): JSX.Element;\n\ninterface LemonSwitchProps extends Omit<LemonRowProps<'div'>, 'alt' | 'label' | 'onChange' | 'outlined'> {\n    onChange: (newChecked: boolean) => void;\n    checked: boolean;\n    label?: string | JSX.Element;\n    /** Whether the switch should use the alternative primary color. */\n    alt?: boolean;\n    /** Default switches are inline. Primary switches _with a label_ are wrapped in an outlined block. */\n    type?: 'default' | 'primary';\n}\n/** `LemonRow`-based switch component for boolean settings where the change is immediately applied.\n *\n * If part of a form, use `LemonCheckbox` instead.\n */\ndeclare function LemonSwitch({ id: rawId, onChange, checked, disabled, loading, label, alt, type, className, 'data-attr': dataAttr, ...rowProps }: LemonSwitchProps): JSX.Element;\n\n/** Sorting state. */\ninterface Sorting {\n    columnKey: string;\n    /** 1 means ascending, -1 means descending. */\n    order: 1 | -1;\n}\n\ninterface TableCellRepresentation {\n    children?: any;\n    props?: HTMLProps<HTMLTableCellElement>;\n}\ndeclare type TableCellRenderResult = TableCellRepresentation | ReactNode | JSX.Element | string | number | false | null | undefined;\ninterface LemonTableColumn<T extends Record<string, any>, D extends keyof T | undefined> {\n    title?: string | React.ReactNode;\n    key?: string;\n    dataIndex?: D;\n    render?: (dataValue: D extends keyof T ? T[D] : undefined, record: T, recordIndex: number) => TableCellRenderResult;\n    /** Sorting function. Set to `true` if using manual pagination, in which case you'll also have to provide `sorting` on the table. */\n    sorter?: ((a: T, b: T) => number) | true;\n    className?: string;\n    /** Column content alignment. Left by default. Set to right for numerical values (amounts, days ago etc.) */\n    align?: 'left' | 'right' | 'center';\n    /** TODO: Whether the column should be sticky when scrolling */\n    sticky?: boolean;\n    /** Set width. */\n    width?: string | number;\n}\ninterface LemonTableColumnGroup<T extends Record<string, any>> {\n    title?: string | React.ReactNode;\n    children: LemonTableColumn<T, keyof T | undefined>[];\n}\ndeclare type LemonTableColumns<T extends Record<string, any>> = LemonTableColumn<T, keyof T | undefined>[] | LemonTableColumnGroup<T>[];\ninterface ExpandableConfig<T extends Record<string, any>> {\n    /** Row expansion render function. */\n    expandedRowRender: (record: T, recordIndex: number) => any;\n    /**\n     * Function determining whether the row should be expandable:\n     * A positive value (like true or 1) means that the row is expandable.\n     * A zero (like 0 or false) means that the row isn't expandable.\n     * A negative value (like -1) means that the row isn't expandable and that also the expand button cell is skipped.\n     */\n    rowExpandable?: (record: T) => boolean | number;\n    /** Called when row is expanded */\n    onRowExpand?: (record: T) => void;\n    /** Called when row is collapsed */\n    onRowCollapse?: (record: T) => void;\n    /** Disable indentation */\n    noIndent?: boolean;\n    /**\n     * Callback that checks if a row expandable state should be overridden\n     * A positive value (like true or 1) means that the row is expanded.\n     * A zero (like 0 or false) means that the row is collapsed.\n     * A negative value (like -1) means that the row is uncontrolled.\n     */\n    isRowExpanded?: (record: T) => boolean | number;\n}\n\ninterface PaginationBase {\n    /** By default pagination is only shown when there are multiple pages, but will always be if this is `false`. */\n    hideOnSinglePage?: boolean;\n}\ninterface PaginationAuto extends PaginationBase {\n    controlled?: false;\n    /** Size of each page (except the last one which can be smaller). */\n    pageSize: number;\n}\ninterface PaginationManual extends PaginationBase {\n    controlled: true;\n    /** Size of each page (except the last one which can be smaller)/ */\n    pageSize?: number;\n    /** Page currently on display. */\n    currentPage?: number;\n    /** Total entry count for determining current position using `currentPage`. If not set, position is not shown. */\n    entryCount?: number;\n    /** Next page navigation handler. */\n    onForward?: () => void;\n    /** Previous page navigation handler. */\n    onBackward?: () => void;\n}\n\ninterface LemonTableProps<T extends Record<string, any>> {\n    /** Table ID that will also be used in pagination to add uniqueness to search params (page + order). */\n    id?: string;\n    columns: LemonTableColumns<T>;\n    dataSource: T[];\n    /** Which column to use for the row key, as an alternative to the default row index mechanism. */\n    rowKey?: keyof T | ((record: T) => string | number);\n    /** Class to append to each row. */\n    rowClassName?: string | ((record: T) => string | null);\n    /** Color to mark each row with. */\n    rowRibbonColor?: string | ((record: T) => string | null);\n    /** Status of each row. Defaults no status. */\n    rowStatus?: 'highlighted' | ((record: T) => 'highlighted' | null);\n    /** Function that for each row determines what props should its `tr` element have based on the row's record. */\n    onRow?: (record: T) => Omit<HTMLProps<HTMLTableRowElement>, 'key'>;\n    /** How tall should rows be. The default value is `\"middle\"`. */\n    size?: 'small' | 'middle';\n    /** An embedded table has no border around it and no background. This way it blends better into other components. */\n    embedded?: boolean;\n    loading?: boolean;\n    pagination?: PaginationAuto | PaginationManual;\n    expandable?: ExpandableConfig<T>;\n    /** Whether the header should be shown. The default value is `true`. */\n    showHeader?: boolean;\n    /** Whether header titles should be uppercased. The default value is `true`. */\n    uppercaseHeader?: boolean;\n    /**\n     * By default sorting goes: 0. unsorted > 1. ascending > 2. descending > GOTO 0 (loop).\n     * With sorting cancellation disabled, GOTO 0 is replaced by GOTO 1. */\n    disableSortingCancellation?: boolean;\n    /** Sorting order to start with. */\n    defaultSorting?: Sorting | null;\n    /** Controlled sort order. */\n    sorting?: Sorting | null;\n    /** Sorting change handler for controlled sort order. */\n    onSort?: (newSorting: Sorting | null) => void;\n    /** How many skeleton rows should be used for the empty loading state. The default value is 1. */\n    loadingSkeletonRows?: number;\n    /** What to show when there's no data. */\n    emptyState?: React$1.ReactNode;\n    /** What to describe the entries as, singular and plural. The default value is `['entry', 'entries']`. */\n    nouns?: [string, string];\n    className?: string;\n    style?: React$1.CSSProperties;\n    'data-attr'?: string;\n}\ndeclare function LemonTable<T extends Record<string, any>>({ id, columns: rawColumns, dataSource, rowKey, rowClassName, rowRibbonColor, rowStatus, onRow, size, embedded, loading, pagination, expandable, showHeader, uppercaseHeader, disableSortingCancellation, defaultSorting, sorting, onSort, loadingSkeletonRows, emptyState, nouns, className, style, 'data-attr': dataAttr, }: LemonTableProps<T>): JSX.Element;\n\ndeclare type LemonTagPropsType = 'warning' | 'danger' | 'success' | 'default';\ninterface LemonTagProps extends React$1.HTMLAttributes<HTMLDivElement> {\n    type?: LemonTagPropsType;\n    children: JSX.Element | string;\n    icon?: JSX.Element;\n}\ndeclare function LemonTag({ type, children, className, icon, ...props }: LemonTagProps): JSX.Element;\n\ninterface LemonTextAreaProps extends Omit<React$1.TextareaHTMLAttributes<HTMLTextAreaElement>, 'value' | 'defaultValue' | 'onChange' | 'prefix' | 'suffix'> {\n    ref?: React$1.Ref<HTMLTextAreaElement>;\n    id?: string;\n    value?: string;\n    defaultValue?: string;\n    placeholder?: string;\n    onChange?: (newValue: string) => void;\n    onPressEnter?: (newValue: string) => void;\n    /** An embedded input has no border around it and no background. This way it blends better into other components. */\n    embedded?: boolean;\n    /** Whether there should be a clear icon to the right allowing you to reset the input. The `suffix` prop will be ignored if clearing is allowed. */\n    allowClear?: boolean;\n    /** Icon to prefix input field */\n    icon?: React$1.ReactElement | null;\n    /** Icon to suffix input field */\n    sideIcon?: React$1.ReactElement | null;\n    /** Whether input field is disabled */\n    disabled?: boolean;\n}\n/** A `LemonRow`-based `textarea` component for multi-line text. */\ndeclare const LemonTextArea: (props: LemonTextAreaProps & React$1.RefAttributes<HTMLTextAreaElement>) => React$1.ReactElement<any, string | React$1.JSXElementConstructor<any>> | null;\n\ndeclare function ToastCloseButton({ closeToast }: {\n    closeToast?: () => void;\n}): JSX.Element;\ninterface ToastButton {\n    label: string;\n    action: () => void;\n}\ninterface ToastOptionsWithButton extends ToastOptions {\n    button?: ToastButton;\n}\ndeclare const GET_HELP_BUTTON: ToastButton;\ninterface ToastContentProps {\n    type: 'info' | 'success' | 'warning' | 'error';\n    message: string | JSX.Element;\n    button?: ToastButton;\n    id?: number | string;\n}\ndeclare function ToastContent({ type, message, button, id }: ToastContentProps): JSX.Element;\ndeclare const lemonToast: {\n    info(message: string | JSX.Element, { button, ...toastOptions }?: ToastOptionsWithButton): void;\n    success(message: string | JSX.Element, { button, ...toastOptions }?: ToastOptionsWithButton): void;\n    warning(message: string | JSX.Element, { button, ...toastOptions }?: ToastOptionsWithButton): void;\n    error(message: string | JSX.Element, { button, ...toastOptions }?: ToastOptionsWithButton): void;\n    dismiss(id?: string | number | undefined): void;\n};\n\ndeclare type RoutePart = string | Record<string, any>;\ninterface LinkProps extends React$1.HTMLProps<HTMLAnchorElement> {\n    to?: string | [string, RoutePart?, RoutePart?];\n    preventClick?: boolean;\n    tag?: string | React$1.FunctionComponentElement<any>;\n}\ndeclare function Link({ to, preventClick, tag, ...props }: LinkProps): JSX.Element;\n\nexport { BoxCSSProperties, GET_HELP_BUTTON, LemonBubble, LemonBubbleProps, LemonButton, LemonButtonPopup, LemonButtonProps, LemonButtonPropsBase, LemonButtonWithPopup, LemonButtonWithPopupProps, LemonButtonWithSideAction, LemonButtonWithSideActionProps, LemonCheckbox, LemonCheckboxProps, LemonDivider, LemonDividerProps, LemonInput, LemonInputProps, LemonModal, LemonModalProps, LemonRow, LemonRowProps, LemonRowPropsBase, LemonSelect, LemonSelectOption, LemonSelectOptions, LemonSelectProps, LemonSwitch, LemonSwitchProps, LemonTable, LemonTableProps, LemonTag, LemonTagPropsType, LemonTextArea, LemonTextAreaProps, Link, LinkProps, SideAction, ToastCloseButton, ToastContent, ToastContentProps, lemonToast };\n"
}
