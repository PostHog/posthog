{
    "react/index.d.ts": "// Type definitions for React 16.14\n// Project: http://facebook.github.io/react/\n// Definitions by: Asana <https://asana.com>\n// AssureSign <http://www.assuresign.com>\n// Microsoft <https://microsoft.com>\n// John Reilly <https://github.com/johnnyreilly>\n// Benoit Benezech <https://github.com/bbenezech>\n// Patricio Zavolinsky <https://github.com/pzavolinsky>\n// Digiguru <https://github.com/digiguru>\n// Eric Anderson <https://github.com/ericanderson>\n// Dovydas Navickas <https://github.com/DovydasNavickas>\n// Josh Rutherford <https://github.com/theruther4d>\n// Guilherme Hübner <https://github.com/guilhermehubner>\n// Ferdy Budhidharma <https://github.com/ferdaber>\n// Johann Rakotoharisoa <https://github.com/jrakotoharisoa>\n// Olivier Pascal <https://github.com/pascaloliv>\n// Martin Hochel <https://github.com/hotell>\n// Frank Li <https://github.com/franklixuefei>\n// Jessica Franco <https://github.com/Jessidhia>\n// Saransh Kataria <https://github.com/saranshkataria>\n// Kanitkorn Sujautra <https://github.com/lukyth>\n// Sebastian Silbermann <https://github.com/eps1lon>\n// Kyle Scully <https://github.com/zieka>\n// Cong Zhang <https://github.com/dancerphil>\n// Dimitri Mitropoulos <https://github.com/dimitropoulos>\n// JongChan Choi <https://github.com/disjukr>\n// Victor Magalhães <https://github.com/vhfmag>\n// Dale Tan <https://github.com/hellatan>\n// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped\n// TypeScript Version: 2.8\n\n// NOTE: Users of the `experimental` builds of React should add a reference\n// to 'react/experimental' in their project. See experimental.d.ts's top comment\n// for reference and documentation on how exactly to do it.\n\n/// <reference path=\"global.d.ts\" />\n\nimport * as CSS from 'csstype';\nimport * as PropTypes from 'prop-types';\n\ntype NativeAnimationEvent = AnimationEvent;\ntype NativeClipboardEvent = ClipboardEvent;\ntype NativeCompositionEvent = CompositionEvent;\ntype NativeDragEvent = DragEvent;\ntype NativeFocusEvent = FocusEvent;\ntype NativeKeyboardEvent = KeyboardEvent;\ntype NativeMouseEvent = MouseEvent;\ntype NativeTouchEvent = TouchEvent;\ntype NativePointerEvent = PointerEvent;\ntype NativeTransitionEvent = TransitionEvent;\ntype NativeUIEvent = UIEvent;\ntype NativeWheelEvent = WheelEvent;\ntype Booleanish = boolean | 'true' | 'false';\n\n/**\n* defined in scheduler/tracing\n*/\ninterface SchedulerInteraction {\nid: number;\nname: string;\ntimestamp: number;\n}\n\n// tslint:disable-next-line:export-just-namespace\nexport = React;\nexport as namespace React;\n\ndeclare namespace React {\n//\n// React Elements\n// ----------------------------------------------------------------------\n\ntype ElementType<P = any> =\n{\n[K in keyof JSX.IntrinsicElements]: P extends JSX.IntrinsicElements[K] ? K : never\n}[keyof JSX.IntrinsicElements] |\nComponentType<P>;\n/**\n* @deprecated Please use `ElementType`\n*/\ntype ReactType<P = any> = ElementType<P>;\ntype ComponentType<P = {}> = ComponentClass<P> | FunctionComponent<P>;\n\ntype JSXElementConstructor<P> =\n| ((props: P) => ReactElement | null)\n| (new (props: P) => Component<P, any>);\n\ninterface RefObject<T> {\nreadonly current: T | null;\n}\ntype RefCallback<T> = { bivarianceHack(instance: T | null): void }[\"bivarianceHack\"];\ntype Ref<T> = RefCallback<T> | RefObject<T> | null;\ntype LegacyRef<T> = string | Ref<T>;\n/**\n* Gets the instance type for a React element. The instance will be different for various component types:\n*\n* - React class components will be the class instance. So if you had `class Foo extends React.Component<{}> {}`\n*   and used `React.ElementRef<typeof Foo>` then the type would be the instance of `Foo`.\n* - React stateless functional components do not have a backing instance and so `React.ElementRef<typeof Bar>`\n*   (when `Bar` is `function Bar() {}`) will give you the `undefined` type.\n* - JSX intrinsics like `div` will give you their DOM instance. For `React.ElementRef<'div'>` that would be\n*   `HTMLDivElement`. For `React.ElementRef<'input'>` that would be `HTMLInputElement`.\n* - React stateless functional components that forward a `ref` will give you the `ElementRef` of the forwarded\n*   to component.\n*\n* `C` must be the type _of_ a React component so you need to use typeof as in React.ElementRef<typeof MyComponent>.\n*\n* @todo In Flow, this works a little different with forwarded refs and the `AbstractComponent` that\n*       `React.forwardRef()` returns.\n*/\ntype ElementRef<\nC extends\n| ForwardRefExoticComponent<any>\n| { new (props: any): Component<any> }\n| ((props: any, context?: any) => ReactElement | null)\n| keyof JSX.IntrinsicElements\n> =\n// need to check first if `ref` is a valid prop for ts@3.0\n// otherwise it will infer `{}` instead of `never`\n\"ref\" extends keyof ComponentPropsWithRef<C>\n? NonNullable<ComponentPropsWithRef<C>[\"ref\"]> extends Ref<\ninfer Instance\n>\n? Instance\n: never\n: never;\n\ntype ComponentState = any;\n\ntype Key = string | number;\n\n/**\n* @internal You shouldn't need to use this type since you never see these attributes\n* inside your component or have to validate them.\n*/\ninterface Attributes {\nkey?: Key | null;\n}\ninterface RefAttributes<T> extends Attributes {\nref?: Ref<T>;\n}\ninterface ClassAttributes<T> extends Attributes {\nref?: LegacyRef<T>;\n}\n\ninterface ReactElement<P = any, T extends string | JSXElementConstructor<any> = string | JSXElementConstructor<any>> {\ntype: T;\nprops: P;\nkey: Key | null;\n}\n\ninterface ReactComponentElement<\nT extends keyof JSX.IntrinsicElements | JSXElementConstructor<any>,\nP = Pick<ComponentProps<T>, Exclude<keyof ComponentProps<T>, 'key' | 'ref'>>\n> extends ReactElement<P, Exclude<T, number>> { }\n\n/**\n* @deprecated Please use `FunctionComponentElement`\n*/\ntype SFCElement<P> = FunctionComponentElement<P>;\n\ninterface FunctionComponentElement<P> extends ReactElement<P, FunctionComponent<P>> {\nref?: 'ref' extends keyof P ? P extends { ref?: infer R } ? R : never : never;\n}\n\ntype CElement<P, T extends Component<P, ComponentState>> = ComponentElement<P, T>;\ninterface ComponentElement<P, T extends Component<P, ComponentState>> extends ReactElement<P, ComponentClass<P>> {\nref?: LegacyRef<T>;\n}\n\ntype ClassicElement<P> = CElement<P, ClassicComponent<P, ComponentState>>;\n\n// string fallback for custom web-components\ninterface DOMElement<P extends HTMLAttributes<T> | SVGAttributes<T>, T extends Element> extends ReactElement<P, string> {\nref: LegacyRef<T>;\n}\n\n// ReactHTML for ReactHTMLElement\n// tslint:disable-next-line:no-empty-interface\ninterface ReactHTMLElement<T extends HTMLElement> extends DetailedReactHTMLElement<AllHTMLAttributes<T>, T> { }\n\ninterface DetailedReactHTMLElement<P extends HTMLAttributes<T>, T extends HTMLElement> extends DOMElement<P, T> {\ntype: keyof ReactHTML;\n}\n\n// ReactSVG for ReactSVGElement\ninterface ReactSVGElement extends DOMElement<SVGAttributes<SVGElement>, SVGElement> {\ntype: keyof ReactSVG;\n}\n\ninterface ReactPortal extends ReactElement {\nkey: Key | null;\nchildren: ReactNode;\n}\n\n//\n// Factories\n// ----------------------------------------------------------------------\n\ntype Factory<P> = (props?: Attributes & P, ...children: ReactNode[]) => ReactElement<P>;\n\n/**\n* @deprecated Please use `FunctionComponentFactory`\n*/\ntype SFCFactory<P> = FunctionComponentFactory<P>;\n\ntype FunctionComponentFactory<P> = (props?: Attributes & P, ...children: ReactNode[]) => FunctionComponentElement<P>;\n\ntype ComponentFactory<P, T extends Component<P, ComponentState>> =\n(props?: ClassAttributes<T> & P, ...children: ReactNode[]) => CElement<P, T>;\n\ntype CFactory<P, T extends Component<P, ComponentState>> = ComponentFactory<P, T>;\ntype ClassicFactory<P> = CFactory<P, ClassicComponent<P, ComponentState>>;\n\ntype DOMFactory<P extends DOMAttributes<T>, T extends Element> =\n(props?: ClassAttributes<T> & P | null, ...children: ReactNode[]) => DOMElement<P, T>;\n\n// tslint:disable-next-line:no-empty-interface\ninterface HTMLFactory<T extends HTMLElement> extends DetailedHTMLFactory<AllHTMLAttributes<T>, T> {}\n\ninterface DetailedHTMLFactory<P extends HTMLAttributes<T>, T extends HTMLElement> extends DOMFactory<P, T> {\n(props?: ClassAttributes<T> & P | null, ...children: ReactNode[]): DetailedReactHTMLElement<P, T>;\n}\n\ninterface SVGFactory extends DOMFactory<SVGAttributes<SVGElement>, SVGElement> {\n(props?: ClassAttributes<SVGElement> & SVGAttributes<SVGElement> | null, ...children: ReactNode[]): ReactSVGElement;\n}\n\n//\n// React Nodes\n// http://facebook.github.io/react/docs/glossary.html\n// ----------------------------------------------------------------------\n\ntype ReactText = string | number;\ntype ReactChild = ReactElement | ReactText;\n\ninterface ReactNodeArray extends Array<ReactNode> {}\ntype ReactFragment = {} | ReactNodeArray;\ntype ReactNode = ReactChild | ReactFragment | ReactPortal | boolean | null | undefined;\n\n//\n// Top Level API\n// ----------------------------------------------------------------------\n\n// DOM Elements\nfunction createFactory<T extends HTMLElement>(\ntype: keyof ReactHTML): HTMLFactory<T>;\nfunction createFactory(\ntype: keyof ReactSVG): SVGFactory;\nfunction createFactory<P extends DOMAttributes<T>, T extends Element>(\ntype: string): DOMFactory<P, T>;\n\n// Custom components\nfunction createFactory<P>(type: FunctionComponent<P>): FunctionComponentFactory<P>;\nfunction createFactory<P>(\ntype: ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>): CFactory<P, ClassicComponent<P, ComponentState>>;\nfunction createFactory<P, T extends Component<P, ComponentState>, C extends ComponentClass<P>>(\ntype: ClassType<P, T, C>): CFactory<P, T>;\nfunction createFactory<P>(type: ComponentClass<P>): Factory<P>;\n\n// DOM Elements\n// TODO: generalize this to everything in `keyof ReactHTML`, not just \"input\"\nfunction createElement(\ntype: \"input\",\nprops?: InputHTMLAttributes<HTMLInputElement> & ClassAttributes<HTMLInputElement> | null,\n...children: ReactNode[]): DetailedReactHTMLElement<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\nfunction createElement<P extends HTMLAttributes<T>, T extends HTMLElement>(\ntype: keyof ReactHTML,\nprops?: ClassAttributes<T> & P | null,\n...children: ReactNode[]): DetailedReactHTMLElement<P, T>;\nfunction createElement<P extends SVGAttributes<T>, T extends SVGElement>(\ntype: keyof ReactSVG,\nprops?: ClassAttributes<T> & P | null,\n...children: ReactNode[]): ReactSVGElement;\nfunction createElement<P extends DOMAttributes<T>, T extends Element>(\ntype: string,\nprops?: ClassAttributes<T> & P | null,\n...children: ReactNode[]): DOMElement<P, T>;\n\n// Custom components\n\nfunction createElement<P extends {}>(\ntype: FunctionComponent<P>,\nprops?: Attributes & P | null,\n...children: ReactNode[]): FunctionComponentElement<P>;\nfunction createElement<P extends {}>(\ntype: ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>,\nprops?: ClassAttributes<ClassicComponent<P, ComponentState>> & P | null,\n...children: ReactNode[]): CElement<P, ClassicComponent<P, ComponentState>>;\nfunction createElement<P extends {}, T extends Component<P, ComponentState>, C extends ComponentClass<P>>(\ntype: ClassType<P, T, C>,\nprops?: ClassAttributes<T> & P | null,\n...children: ReactNode[]): CElement<P, T>;\nfunction createElement<P extends {}>(\ntype: FunctionComponent<P> | ComponentClass<P> | string,\nprops?: Attributes & P | null,\n...children: ReactNode[]): ReactElement<P>;\n\n// DOM Elements\n// ReactHTMLElement\nfunction cloneElement<P extends HTMLAttributes<T>, T extends HTMLElement>(\nelement: DetailedReactHTMLElement<P, T>,\nprops?: P,\n...children: ReactNode[]): DetailedReactHTMLElement<P, T>;\n// ReactHTMLElement, less specific\nfunction cloneElement<P extends HTMLAttributes<T>, T extends HTMLElement>(\nelement: ReactHTMLElement<T>,\nprops?: P,\n...children: ReactNode[]): ReactHTMLElement<T>;\n// SVGElement\nfunction cloneElement<P extends SVGAttributes<T>, T extends SVGElement>(\nelement: ReactSVGElement,\nprops?: P,\n...children: ReactNode[]): ReactSVGElement;\n// DOM Element (has to be the last, because type checking stops at first overload that fits)\nfunction cloneElement<P extends DOMAttributes<T>, T extends Element>(\nelement: DOMElement<P, T>,\nprops?: DOMAttributes<T> & P,\n...children: ReactNode[]): DOMElement<P, T>;\n\n// Custom components\nfunction cloneElement<P>(\nelement: FunctionComponentElement<P>,\nprops?: Partial<P> & Attributes,\n...children: ReactNode[]): FunctionComponentElement<P>;\nfunction cloneElement<P, T extends Component<P, ComponentState>>(\nelement: CElement<P, T>,\nprops?: Partial<P> & ClassAttributes<T>,\n...children: ReactNode[]): CElement<P, T>;\nfunction cloneElement<P>(\nelement: ReactElement<P>,\nprops?: Partial<P> & Attributes,\n...children: ReactNode[]): ReactElement<P>;\n\n// Context via RenderProps\ninterface ProviderProps<T> {\nvalue: T;\nchildren?: ReactNode;\n}\n\ninterface ConsumerProps<T> {\nchildren: (value: T) => ReactNode;\n}\n\n// TODO: similar to how Fragment is actually a symbol, the values returned from createContext,\n// forwardRef and memo are actually objects that are treated specially by the renderer; see:\n// https://github.com/facebook/react/blob/v16.6.0/packages/react/src/ReactContext.js#L35-L48\n// https://github.com/facebook/react/blob/v16.6.0/packages/react/src/forwardRef.js#L42-L45\n// https://github.com/facebook/react/blob/v16.6.0/packages/react/src/memo.js#L27-L31\n// However, we have no way of telling the JSX parser that it's a JSX element type or its props other than\n// by pretending to be a normal component.\n//\n// We don't just use ComponentType or SFC types because you are not supposed to attach statics to this\n// object, but rather to the original function.\ninterface ExoticComponent<P = {}> {\n/**\n* **NOTE**: Exotic components are not callable.\n*/\n(props: P): (ReactElement|null);\nreadonly $$typeof: symbol;\n}\n\ninterface NamedExoticComponent<P = {}> extends ExoticComponent<P> {\ndisplayName?: string;\n}\n\ninterface ProviderExoticComponent<P> extends ExoticComponent<P> {\npropTypes?: WeakValidationMap<P>;\n}\n\ntype ContextType<C extends Context<any>> = C extends Context<infer T> ? T : never;\n\n// NOTE: only the Context object itself can get a displayName\n// https://github.com/facebook/react-devtools/blob/e0b854e4c/backend/attachRendererFiber.js#L310-L325\ntype Provider<T> = ProviderExoticComponent<ProviderProps<T>>;\ntype Consumer<T> = ExoticComponent<ConsumerProps<T>>;\ninterface Context<T> {\nProvider: Provider<T>;\nConsumer: Consumer<T>;\ndisplayName?: string;\n}\nfunction createContext<T>(\n// If you thought this should be optional, see\n// https://github.com/DefinitelyTyped/DefinitelyTyped/pull/24509#issuecomment-382213106\ndefaultValue: T,\n): Context<T>;\n\nfunction isValidElement<P>(object: {} | null | undefined): object is ReactElement<P>;\n\nconst Children: ReactChildren;\nconst Fragment: ExoticComponent<{ children?: ReactNode }>;\nconst StrictMode: ExoticComponent<{ children?: ReactNode }>;\n\ninterface SuspenseProps {\nchildren?: ReactNode;\n\n/** A fallback react tree to show when a Suspense child (like React.lazy) suspends */\nfallback: NonNullable<ReactNode>|null;\n}\n/**\n* This feature is not yet available for server-side rendering.\n* Suspense support will be added in a later release.\n*/\nconst Suspense: ExoticComponent<SuspenseProps>;\nconst version: string;\n\n/**\n* {@link https://github.com/bvaughn/rfcs/blob/profiler/text/0000-profiler.md#detailed-design | API}\n*/\ntype ProfilerOnRenderCallback = (\nid: string,\nphase: \"mount\" | \"update\",\nactualDuration: number,\nbaseDuration: number,\nstartTime: number,\ncommitTime: number,\ninteractions: Set<SchedulerInteraction>,\n) => void;\ninterface ProfilerProps {\nchildren?: ReactNode;\nid: string;\nonRender: ProfilerOnRenderCallback;\n}\n\nconst Profiler: ExoticComponent<ProfilerProps>;\n\n//\n// Component API\n// ----------------------------------------------------------------------\n\ntype ReactInstance = Component<any> | Element;\n\n// Base component for plain JS classes\n// tslint:disable-next-line:no-empty-interface\ninterface Component<P = {}, S = {}, SS = any> extends ComponentLifecycle<P, S, SS> { }\nclass Component<P, S> {\n// tslint won't let me format the sample code in a way that vscode likes it :(\n/**\n* If set, `this.context` will be set at runtime to the current value of the given Context.\n*\n* Usage:\n*\n* ```ts\n* type MyContext = number\n* const Ctx = React.createContext<MyContext>(0)\n*\n* class Foo extends React.Component {\n*   static contextType = Ctx\n*   context!: React.ContextType<typeof Ctx>\n*   render () {\n*     return <>My context's value: {this.context}</>;\n*   }\n* }\n* ```\n*\n* @see https://reactjs.org/docs/context.html#classcontexttype\n*/\nstatic contextType?: Context<any>;\n\n/**\n* If using the new style context, re-declare this in your class to be the\n* `React.ContextType` of your `static contextType`.\n* Should be used with type annotation or static contextType.\n*\n* ```ts\n* static contextType = MyContext\n* // For TS pre-3.7:\n* context!: React.ContextType<typeof MyContext>\n* // For TS 3.7 and above:\n* declare context: React.ContextType<typeof MyContext>\n* ```\n*\n* @see https://reactjs.org/docs/context.html\n*/\n// TODO (TypeScript 3.0): unknown\ncontext: any;\n\nconstructor(props: Readonly<P> | P);\n/**\n* @deprecated\n* @see https://reactjs.org/docs/legacy-context.html\n*/\nconstructor(props: P, context: any);\n\n// We MUST keep setState() as a unified signature because it allows proper checking of the method return type.\n// See: https://github.com/DefinitelyTyped/DefinitelyTyped/issues/18365#issuecomment-351013257\n// Also, the ` | S` allows intellisense to not be dumbisense\nsetState<K extends keyof S>(\nstate: ((prevState: Readonly<S>, props: Readonly<P>) => (Pick<S, K> | S | null)) | (Pick<S, K> | S | null),\ncallback?: () => void\n): void;\n\nforceUpdate(callback?: () => void): void;\nrender(): ReactNode;\n\n// React.Props<T> is now deprecated, which means that the `children`\n// property is not available on `P` by default, even though you can\n// always pass children as variadic arguments to `createElement`.\n// In the future, if we can define its call signature conditionally\n// on the existence of `children` in `P`, then we should remove this.\nreadonly props: Readonly<P> & Readonly<{ children?: ReactNode }>;\nstate: Readonly<S>;\n/**\n* @deprecated\n* https://reactjs.org/docs/refs-and-the-dom.html#legacy-api-string-refs\n*/\nrefs: {\n[key: string]: ReactInstance\n};\n}\n\nclass PureComponent<P = {}, S = {}, SS = any> extends Component<P, S, SS> { }\n\ninterface ClassicComponent<P = {}, S = {}> extends Component<P, S> {\nreplaceState(nextState: S, callback?: () => void): void;\nisMounted(): boolean;\ngetInitialState?(): S;\n}\n\ninterface ChildContextProvider<CC> {\ngetChildContext(): CC;\n}\n\n//\n// Class Interfaces\n// ----------------------------------------------------------------------\n\n/**\n* @deprecated as of recent React versions, function components can no\n* longer be considered 'stateless'. Please use `FunctionComponent` instead.\n*\n* @see [React Hooks](https://reactjs.org/docs/hooks-intro.html)\n*/\ntype SFC<P = {}> = FunctionComponent<P>;\n\n/**\n* @deprecated as of recent React versions, function components can no\n* longer be considered 'stateless'. Please use `FunctionComponent` instead.\n*\n* @see [React Hooks](https://reactjs.org/docs/hooks-intro.html)\n*/\ntype StatelessComponent<P = {}> = FunctionComponent<P>;\n\ntype FC<P = {}> = FunctionComponent<P>;\n\ninterface FunctionComponent<P = {}> {\n(props: PropsWithChildren<P>, context?: any): ReactElement<any, any> | null;\npropTypes?: WeakValidationMap<P>;\ncontextTypes?: ValidationMap<any>;\ndefaultProps?: Partial<P>;\ndisplayName?: string;\n}\n\ntype VFC<P = {}> = VoidFunctionComponent<P>;\n\ninterface VoidFunctionComponent<P = {}> {\n(props: P, context?: any): ReactElement<any, any> | null;\npropTypes?: WeakValidationMap<P>;\ncontextTypes?: ValidationMap<any>;\ndefaultProps?: Partial<P>;\ndisplayName?: string;\n}\n\ninterface ForwardRefRenderFunction<T, P = {}> {\n(props: PropsWithChildren<P>, ref: ((instance: T | null) => void) | MutableRefObject<T | null> | null): ReactElement | null;\ndisplayName?: string;\n// explicit rejected with `never` required due to\n// https://github.com/microsoft/TypeScript/issues/36826\n/**\n* defaultProps are not supported on render functions\n*/\ndefaultProps?: never;\n/**\n* propTypes are not supported on render functions\n*/\npropTypes?: never;\n}\n\n/**\n* @deprecated Use ForwardRefRenderFunction. forwardRef doesn't accept a\n*             \"real\" component.\n*/\ninterface RefForwardingComponent <T, P = {}> extends ForwardRefRenderFunction<T, P> {}\n\ninterface ComponentClass<P = {}, S = ComponentState> extends StaticLifecycle<P, S> {\nnew (props: P, context?: any): Component<P, S>;\npropTypes?: WeakValidationMap<P>;\ncontextType?: Context<any>;\ncontextTypes?: ValidationMap<any>;\nchildContextTypes?: ValidationMap<any>;\ndefaultProps?: Partial<P>;\ndisplayName?: string;\n}\n\ninterface ClassicComponentClass<P = {}> extends ComponentClass<P> {\nnew (props: P, context?: any): ClassicComponent<P, ComponentState>;\ngetDefaultProps?(): P;\n}\n\n/**\n* We use an intersection type to infer multiple type parameters from\n* a single argument, which is useful for many top-level API defs.\n* See https://github.com/Microsoft/TypeScript/issues/7234 for more info.\n*/\ntype ClassType<P, T extends Component<P, ComponentState>, C extends ComponentClass<P>> =\nC &\n(new (props: P, context?: any) => T);\n\n//\n// Component Specs and Lifecycle\n// ----------------------------------------------------------------------\n\n// This should actually be something like `Lifecycle<P, S> | DeprecatedLifecycle<P, S>`,\n// as React will _not_ call the deprecated lifecycle methods if any of the new lifecycle\n// methods are present.\ninterface ComponentLifecycle<P, S, SS = any> extends NewLifecycle<P, S, SS>, DeprecatedLifecycle<P, S> {\n/**\n* Called immediately after a component is mounted. Setting state here will trigger re-rendering.\n*/\ncomponentDidMount?(): void;\n/**\n* Called to determine whether the change in props and state should trigger a re-render.\n*\n* `Component` always returns true.\n* `PureComponent` implements a shallow comparison on props and state and returns true if any\n* props or states have changed.\n*\n* If false is returned, `Component#render`, `componentWillUpdate`\n* and `componentDidUpdate` will not be called.\n*/\nshouldComponentUpdate?(nextProps: Readonly<P>, nextState: Readonly<S>, nextContext: any): boolean;\n/**\n* Called immediately before a component is destroyed. Perform any necessary cleanup in this method, such as\n* cancelled network requests, or cleaning up any DOM elements created in `componentDidMount`.\n*/\ncomponentWillUnmount?(): void;\n/**\n* Catches exceptions generated in descendant components. Unhandled exceptions will cause\n* the entire component tree to unmount.\n*/\ncomponentDidCatch?(error: Error, errorInfo: ErrorInfo): void;\n}\n\n// Unfortunately, we have no way of declaring that the component constructor must implement this\ninterface StaticLifecycle<P, S> {\ngetDerivedStateFromProps?: GetDerivedStateFromProps<P, S>;\ngetDerivedStateFromError?: GetDerivedStateFromError<P, S>;\n}\n\ntype GetDerivedStateFromProps<P, S> =\n/**\n* Returns an update to a component's state based on its new props and old state.\n*\n* Note: its presence prevents any of the deprecated lifecycle methods from being invoked\n*/\n(nextProps: Readonly<P>, prevState: S) => Partial<S> | null;\n\ntype GetDerivedStateFromError<P, S> =\n/**\n* This lifecycle is invoked after an error has been thrown by a descendant component.\n* It receives the error that was thrown as a parameter and should return a value to update state.\n*\n* Note: its presence prevents any of the deprecated lifecycle methods from being invoked\n*/\n(error: any) => Partial<S> | null;\n\n// This should be \"infer SS\" but can't use it yet\ninterface NewLifecycle<P, S, SS> {\n/**\n* Runs before React applies the result of `render` to the document, and\n* returns an object to be given to componentDidUpdate. Useful for saving\n* things such as scroll position before `render` causes changes to it.\n*\n* Note: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\n* lifecycle events from running.\n*/\ngetSnapshotBeforeUpdate?(prevProps: Readonly<P>, prevState: Readonly<S>): SS | null;\n/**\n* Called immediately after updating occurs. Not called for the initial render.\n*\n* The snapshot is only present if getSnapshotBeforeUpdate is present and returns non-null.\n*/\ncomponentDidUpdate?(prevProps: Readonly<P>, prevState: Readonly<S>, snapshot?: SS): void;\n}\n\ninterface DeprecatedLifecycle<P, S> {\n/**\n* Called immediately before mounting occurs, and before `Component#render`.\n* Avoid introducing any side-effects or subscriptions in this method.\n*\n* Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\n* prevents this from being invoked.\n*\n* @deprecated 16.3, use componentDidMount or the constructor instead; will stop working in React 17\n* @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state\n* @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n*/\ncomponentWillMount?(): void;\n/**\n* Called immediately before mounting occurs, and before `Component#render`.\n* Avoid introducing any side-effects or subscriptions in this method.\n*\n* This method will not stop working in React 17.\n*\n* Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\n* prevents this from being invoked.\n*\n* @deprecated 16.3, use componentDidMount or the constructor instead\n* @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state\n* @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n*/\nUNSAFE_componentWillMount?(): void;\n/**\n* Called when the component may be receiving new props.\n* React may call this even if props have not changed, so be sure to compare new and existing\n* props if you only want to handle changes.\n*\n* Calling `Component#setState` generally does not trigger this method.\n*\n* Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\n* prevents this from being invoked.\n*\n* @deprecated 16.3, use static getDerivedStateFromProps instead; will stop working in React 17\n* @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props\n* @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n*/\ncomponentWillReceiveProps?(nextProps: Readonly<P>, nextContext: any): void;\n/**\n* Called when the component may be receiving new props.\n* React may call this even if props have not changed, so be sure to compare new and existing\n* props if you only want to handle changes.\n*\n* Calling `Component#setState` generally does not trigger this method.\n*\n* This method will not stop working in React 17.\n*\n* Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\n* prevents this from being invoked.\n*\n* @deprecated 16.3, use static getDerivedStateFromProps instead\n* @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props\n* @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n*/\nUNSAFE_componentWillReceiveProps?(nextProps: Readonly<P>, nextContext: any): void;\n/**\n* Called immediately before rendering when new props or state is received. Not called for the initial render.\n*\n* Note: You cannot call `Component#setState` here.\n*\n* Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\n* prevents this from being invoked.\n*\n* @deprecated 16.3, use getSnapshotBeforeUpdate instead; will stop working in React 17\n* @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update\n* @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n*/\ncomponentWillUpdate?(nextProps: Readonly<P>, nextState: Readonly<S>, nextContext: any): void;\n/**\n* Called immediately before rendering when new props or state is received. Not called for the initial render.\n*\n* Note: You cannot call `Component#setState` here.\n*\n* This method will not stop working in React 17.\n*\n* Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\n* prevents this from being invoked.\n*\n* @deprecated 16.3, use getSnapshotBeforeUpdate instead\n* @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update\n* @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n*/\nUNSAFE_componentWillUpdate?(nextProps: Readonly<P>, nextState: Readonly<S>, nextContext: any): void;\n}\n\ninterface Mixin<P, S> extends ComponentLifecycle<P, S> {\nmixins?: Array<Mixin<P, S>>;\nstatics?: {\n[key: string]: any;\n};\n\ndisplayName?: string;\npropTypes?: ValidationMap<any>;\ncontextTypes?: ValidationMap<any>;\nchildContextTypes?: ValidationMap<any>;\n\ngetDefaultProps?(): P;\ngetInitialState?(): S;\n}\n\ninterface ComponentSpec<P, S> extends Mixin<P, S> {\nrender(): ReactNode;\n\n[propertyName: string]: any;\n}\n\nfunction createRef<T>(): RefObject<T>;\n\n// will show `ForwardRef(${Component.displayName || Component.name})` in devtools by default,\n// but can be given its own specific name\ninterface ForwardRefExoticComponent<P> extends NamedExoticComponent<P> {\ndefaultProps?: Partial<P>;\npropTypes?: WeakValidationMap<P>;\n}\n\nfunction forwardRef<T, P = {}>(render: ForwardRefRenderFunction<T, P>): ForwardRefExoticComponent<PropsWithoutRef<P> & RefAttributes<T>>;\n\n/** Ensures that the props do not include ref at all */\ntype PropsWithoutRef<P> =\n// Just Pick would be sufficient for this, but I'm trying to avoid unnecessary mapping over union types\n// https://github.com/Microsoft/TypeScript/issues/28339\n'ref' extends keyof P\n? Pick<P, Exclude<keyof P, 'ref'>>\n: P;\n/** Ensures that the props do not include string ref, which cannot be forwarded */\ntype PropsWithRef<P> =\n// Just \"P extends { ref?: infer R }\" looks sufficient, but R will infer as {} if P is {}.\n'ref' extends keyof P\n? P extends { ref?: infer R }\n? string extends R\n? PropsWithoutRef<P> & { ref?: Exclude<R, string> }\n: P\n: P\n: P;\n\ntype PropsWithChildren<P> = P & { children?: ReactNode };\n\n/**\n* NOTE: prefer ComponentPropsWithRef, if the ref is forwarded,\n* or ComponentPropsWithoutRef when refs are not supported.\n*/\ntype ComponentProps<T extends keyof JSX.IntrinsicElements | JSXElementConstructor<any>> =\nT extends JSXElementConstructor<infer P>\n? P\n: T extends keyof JSX.IntrinsicElements\n? JSX.IntrinsicElements[T]\n: {};\ntype ComponentPropsWithRef<T extends ElementType> =\nT extends ComponentClass<infer P>\n? PropsWithoutRef<P> & RefAttributes<InstanceType<T>>\n: PropsWithRef<ComponentProps<T>>;\ntype ComponentPropsWithoutRef<T extends ElementType> =\nPropsWithoutRef<ComponentProps<T>>;\n\n// will show `Memo(${Component.displayName || Component.name})` in devtools by default,\n// but can be given its own specific name\ntype MemoExoticComponent<T extends ComponentType<any>> = NamedExoticComponent<ComponentPropsWithRef<T>> & {\nreadonly type: T;\n};\n\nfunction memo<P extends object>(\nComponent: SFC<P>,\npropsAreEqual?: (prevProps: Readonly<PropsWithChildren<P>>, nextProps: Readonly<PropsWithChildren<P>>) => boolean\n): NamedExoticComponent<P>;\nfunction memo<T extends ComponentType<any>>(\nComponent: T,\npropsAreEqual?: (prevProps: Readonly<ComponentProps<T>>, nextProps: Readonly<ComponentProps<T>>) => boolean\n): MemoExoticComponent<T>;\n\ntype LazyExoticComponent<T extends ComponentType<any>> = ExoticComponent<ComponentPropsWithRef<T>> & {\nreadonly _result: T;\n};\n\nfunction lazy<T extends ComponentType<any>>(\nfactory: () => Promise<{ default: T }>\n): LazyExoticComponent<T>;\n\n//\n// React Hooks\n// ----------------------------------------------------------------------\n\n// based on the code in https://github.com/facebook/react/pull/13968\n\n// Unlike the class component setState, the updates are not allowed to be partial\ntype SetStateAction<S> = S | ((prevState: S) => S);\n// this technically does accept a second argument, but it's already under a deprecation warning\n// and it's not even released so probably better to not define it.\ntype Dispatch<A> = (value: A) => void;\n// Since action _can_ be undefined, dispatch may be called without any parameters.\ntype DispatchWithoutAction = () => void;\n// Unlike redux, the actions _can_ be anything\ntype Reducer<S, A> = (prevState: S, action: A) => S;\n// If useReducer accepts a reducer without action, dispatch may be called without any parameters.\ntype ReducerWithoutAction<S> = (prevState: S) => S;\n// types used to try and prevent the compiler from reducing S\n// to a supertype common with the second argument to useReducer()\ntype ReducerState<R extends Reducer<any, any>> = R extends Reducer<infer S, any> ? S : never;\ntype ReducerAction<R extends Reducer<any, any>> = R extends Reducer<any, infer A> ? A : never;\n// The identity check is done with the SameValue algorithm (Object.is), which is stricter than ===\ntype ReducerStateWithoutAction<R extends ReducerWithoutAction<any>> =\nR extends ReducerWithoutAction<infer S> ? S : never;\n// TODO (TypeScript 3.0): ReadonlyArray<unknown>\ntype DependencyList = ReadonlyArray<any>;\n\n// NOTE: callbacks are _only_ allowed to return either void, or a destructor.\n// The destructor is itself only allowed to return void.\ntype EffectCallback = () => (void | (() => void | undefined));\n\ninterface MutableRefObject<T> {\ncurrent: T;\n}\n\n// This will technically work if you give a Consumer<T> or Provider<T> but it's deprecated and warns\n/**\n* Accepts a context object (the value returned from `React.createContext`) and returns the current\n* context value, as given by the nearest context provider for the given context.\n*\n* @version 16.8.0\n* @see https://reactjs.org/docs/hooks-reference.html#usecontext\n*/\nfunction useContext<T>(context: Context<T>/*, (not public API) observedBits?: number|boolean */): T;\n/**\n* Returns a stateful value, and a function to update it.\n*\n* @version 16.8.0\n* @see https://reactjs.org/docs/hooks-reference.html#usestate\n*/\nfunction useState<S>(initialState: S | (() => S)): [S, Dispatch<SetStateAction<S>>];\n// convenience overload when first argument is omitted\n/**\n* Returns a stateful value, and a function to update it.\n*\n* @version 16.8.0\n* @see https://reactjs.org/docs/hooks-reference.html#usestate\n*/\nfunction useState<S = undefined>(): [S | undefined, Dispatch<SetStateAction<S | undefined>>];\n/**\n* An alternative to `useState`.\n*\n* `useReducer` is usually preferable to `useState` when you have complex state logic that involves\n* multiple sub-values. It also lets you optimize performance for components that trigger deep\n* updates because you can pass `dispatch` down instead of callbacks.\n*\n* @version 16.8.0\n* @see https://reactjs.org/docs/hooks-reference.html#usereducer\n*/\n// overload where dispatch could accept 0 arguments.\nfunction useReducer<R extends ReducerWithoutAction<any>, I>(\nreducer: R,\ninitializerArg: I,\ninitializer: (arg: I) => ReducerStateWithoutAction<R>\n): [ReducerStateWithoutAction<R>, DispatchWithoutAction];\n/**\n* An alternative to `useState`.\n*\n* `useReducer` is usually preferable to `useState` when you have complex state logic that involves\n* multiple sub-values. It also lets you optimize performance for components that trigger deep\n* updates because you can pass `dispatch` down instead of callbacks.\n*\n* @version 16.8.0\n* @see https://reactjs.org/docs/hooks-reference.html#usereducer\n*/\n// overload where dispatch could accept 0 arguments.\nfunction useReducer<R extends ReducerWithoutAction<any>>(\nreducer: R,\ninitializerArg: ReducerStateWithoutAction<R>,\ninitializer?: undefined\n): [ReducerStateWithoutAction<R>, DispatchWithoutAction];\n/**\n* An alternative to `useState`.\n*\n* `useReducer` is usually preferable to `useState` when you have complex state logic that involves\n* multiple sub-values. It also lets you optimize performance for components that trigger deep\n* updates because you can pass `dispatch` down instead of callbacks.\n*\n* @version 16.8.0\n* @see https://reactjs.org/docs/hooks-reference.html#usereducer\n*/\n// overload where \"I\" may be a subset of ReducerState<R>; used to provide autocompletion.\n// If \"I\" matches ReducerState<R> exactly then the last overload will allow initializer to be omitted.\n// the last overload effectively behaves as if the identity function (x => x) is the initializer.\nfunction useReducer<R extends Reducer<any, any>, I>(\nreducer: R,\ninitializerArg: I & ReducerState<R>,\ninitializer: (arg: I & ReducerState<R>) => ReducerState<R>\n): [ReducerState<R>, Dispatch<ReducerAction<R>>];\n/**\n* An alternative to `useState`.\n*\n* `useReducer` is usually preferable to `useState` when you have complex state logic that involves\n* multiple sub-values. It also lets you optimize performance for components that trigger deep\n* updates because you can pass `dispatch` down instead of callbacks.\n*\n* @version 16.8.0\n* @see https://reactjs.org/docs/hooks-reference.html#usereducer\n*/\n// overload for free \"I\"; all goes as long as initializer converts it into \"ReducerState<R>\".\nfunction useReducer<R extends Reducer<any, any>, I>(\nreducer: R,\ninitializerArg: I,\ninitializer: (arg: I) => ReducerState<R>\n): [ReducerState<R>, Dispatch<ReducerAction<R>>];\n/**\n* An alternative to `useState`.\n*\n* `useReducer` is usually preferable to `useState` when you have complex state logic that involves\n* multiple sub-values. It also lets you optimize performance for components that trigger deep\n* updates because you can pass `dispatch` down instead of callbacks.\n*\n* @version 16.8.0\n* @see https://reactjs.org/docs/hooks-reference.html#usereducer\n*/\n\n// I'm not sure if I keep this 2-ary or if I make it (2,3)-ary; it's currently (2,3)-ary.\n// The Flow types do have an overload for 3-ary invocation with undefined initializer.\n\n// NOTE: without the ReducerState indirection, TypeScript would reduce S to be the most common\n// supertype between the reducer's return type and the initialState (or the initializer's return type),\n// which would prevent autocompletion from ever working.\n\n// TODO: double-check if this weird overload logic is necessary. It is possible it's either a bug\n// in older versions, or a regression in newer versions of the typescript completion service.\nfunction useReducer<R extends Reducer<any, any>>(\nreducer: R,\ninitialState: ReducerState<R>,\ninitializer?: undefined\n): [ReducerState<R>, Dispatch<ReducerAction<R>>];\n/**\n* `useRef` returns a mutable ref object whose `.current` property is initialized to the passed argument\n* (`initialValue`). The returned object will persist for the full lifetime of the component.\n*\n* Note that `useRef()` is useful for more than the `ref` attribute. It’s handy for keeping any mutable\n* value around similar to how you’d use instance fields in classes.\n*\n* @version 16.8.0\n* @see https://reactjs.org/docs/hooks-reference.html#useref\n*/\n// TODO (TypeScript 3.0): <T extends unknown>\nfunction useRef<T>(initialValue: T): MutableRefObject<T>;\n// convenience overload for refs given as a ref prop as they typically start with a null value\n/**\n* `useRef` returns a mutable ref object whose `.current` property is initialized to the passed argument\n* (`initialValue`). The returned object will persist for the full lifetime of the component.\n*\n* Note that `useRef()` is useful for more than the `ref` attribute. It’s handy for keeping any mutable\n* value around similar to how you’d use instance fields in classes.\n*\n* Usage note: if you need the result of useRef to be directly mutable, include `| null` in the type\n* of the generic argument.\n*\n* @version 16.8.0\n* @see https://reactjs.org/docs/hooks-reference.html#useref\n*/\n// TODO (TypeScript 3.0): <T extends unknown>\nfunction useRef<T>(initialValue: T|null): RefObject<T>;\n// convenience overload for potentially undefined initialValue / call with 0 arguments\n// has a default to stop it from defaulting to {} instead\n/**\n* `useRef` returns a mutable ref object whose `.current` property is initialized to the passed argument\n* (`initialValue`). The returned object will persist for the full lifetime of the component.\n*\n* Note that `useRef()` is useful for more than the `ref` attribute. It’s handy for keeping any mutable\n* value around similar to how you’d use instance fields in classes.\n*\n* @version 16.8.0\n* @see https://reactjs.org/docs/hooks-reference.html#useref\n*/\n// TODO (TypeScript 3.0): <T extends unknown>\nfunction useRef<T = undefined>(): MutableRefObject<T | undefined>;\n/**\n* The signature is identical to `useEffect`, but it fires synchronously after all DOM mutations.\n* Use this to read layout from the DOM and synchronously re-render. Updates scheduled inside\n* `useLayoutEffect` will be flushed synchronously, before the browser has a chance to paint.\n*\n* Prefer the standard `useEffect` when possible to avoid blocking visual updates.\n*\n* If you’re migrating code from a class component, `useLayoutEffect` fires in the same phase as\n* `componentDidMount` and `componentDidUpdate`.\n*\n* @version 16.8.0\n* @see https://reactjs.org/docs/hooks-reference.html#uselayouteffect\n*/\nfunction useLayoutEffect(effect: EffectCallback, deps?: DependencyList): void;\n/**\n* Accepts a function that contains imperative, possibly effectful code.\n*\n* @param effect Imperative function that can return a cleanup function\n* @param deps If present, effect will only activate if the values in the list change.\n*\n* @version 16.8.0\n* @see https://reactjs.org/docs/hooks-reference.html#useeffect\n*/\nfunction useEffect(effect: EffectCallback, deps?: DependencyList): void;\n// NOTE: this does not accept strings, but this will have to be fixed by removing strings from type Ref<T>\n/**\n* `useImperativeHandle` customizes the instance value that is exposed to parent components when using\n* `ref`. As always, imperative code using refs should be avoided in most cases.\n*\n* `useImperativeHandle` should be used with `React.forwardRef`.\n*\n* @version 16.8.0\n* @see https://reactjs.org/docs/hooks-reference.html#useimperativehandle\n*/\nfunction useImperativeHandle<T, R extends T>(ref: Ref<T>|undefined, init: () => R, deps?: DependencyList): void;\n// I made 'inputs' required here and in useMemo as there's no point to memoizing without the memoization key\n// useCallback(X) is identical to just using X, useMemo(() => Y) is identical to just using Y.\n/**\n* `useCallback` will return a memoized version of the callback that only changes if one of the `inputs`\n* has changed.\n*\n* @version 16.8.0\n* @see https://reactjs.org/docs/hooks-reference.html#usecallback\n*/\n// TODO (TypeScript 3.0): <T extends (...args: never[]) => unknown>\nfunction useCallback<T extends (...args: any[]) => any>(callback: T, deps: DependencyList): T;\n/**\n* `useMemo` will only recompute the memoized value when one of the `deps` has changed.\n*\n* Usage note: if calling `useMemo` with a referentially stable function, also give it as the input in\n* the second argument.\n*\n* ```ts\n* function expensive () { ... }\n*\n* function Component () {\n*   const expensiveResult = useMemo(expensive, [expensive])\n*   return ...\n* }\n* ```\n*\n* @version 16.8.0\n* @see https://reactjs.org/docs/hooks-reference.html#usememo\n*/\n// allow undefined, but don't make it optional as that is very likely a mistake\nfunction useMemo<T>(factory: () => T, deps: DependencyList | undefined): T;\n/**\n* `useDebugValue` can be used to display a label for custom hooks in React DevTools.\n*\n* NOTE: We don’t recommend adding debug values to every custom hook.\n* It’s most valuable for custom hooks that are part of shared libraries.\n*\n* @version 16.8.0\n* @see https://reactjs.org/docs/hooks-reference.html#usedebugvalue\n*/\n// the name of the custom hook is itself derived from the function name at runtime:\n// it's just the function name without the \"use\" prefix.\nfunction useDebugValue<T>(value: T, format?: (value: T) => any): void;\n\n//\n// Event System\n// ----------------------------------------------------------------------\n// TODO: change any to unknown when moving to TS v3\ninterface BaseSyntheticEvent<E = object, C = any, T = any> {\nnativeEvent: E;\ncurrentTarget: C;\ntarget: T;\nbubbles: boolean;\ncancelable: boolean;\ndefaultPrevented: boolean;\neventPhase: number;\nisTrusted: boolean;\npreventDefault(): void;\nisDefaultPrevented(): boolean;\nstopPropagation(): void;\nisPropagationStopped(): boolean;\npersist(): void;\ntimeStamp: number;\ntype: string;\n}\n\n/**\n* currentTarget - a reference to the element on which the event listener is registered.\n*\n* target - a reference to the element from which the event was originally dispatched.\n* This might be a child element to the element on which the event listener is registered.\n* If you thought this should be `EventTarget & T`, see https://github.com/DefinitelyTyped/DefinitelyTyped/issues/11508#issuecomment-256045682\n*/\ninterface SyntheticEvent<T = Element, E = Event> extends BaseSyntheticEvent<E, EventTarget & T, EventTarget> {}\n\ninterface ClipboardEvent<T = Element> extends SyntheticEvent<T, NativeClipboardEvent> {\nclipboardData: DataTransfer;\n}\n\ninterface CompositionEvent<T = Element> extends SyntheticEvent<T, NativeCompositionEvent> {\ndata: string;\n}\n\ninterface DragEvent<T = Element> extends MouseEvent<T, NativeDragEvent> {\ndataTransfer: DataTransfer;\n}\n\ninterface PointerEvent<T = Element> extends MouseEvent<T, NativePointerEvent> {\npointerId: number;\npressure: number;\ntangentialPressure: number;\ntiltX: number;\ntiltY: number;\ntwist: number;\nwidth: number;\nheight: number;\npointerType: 'mouse' | 'pen' | 'touch';\nisPrimary: boolean;\n}\n\ninterface FocusEvent<T = Element> extends SyntheticEvent<T, NativeFocusEvent> {\nrelatedTarget: EventTarget | null;\ntarget: EventTarget & T;\n}\n\n// tslint:disable-next-line:no-empty-interface\ninterface FormEvent<T = Element> extends SyntheticEvent<T> {\n}\n\ninterface InvalidEvent<T = Element> extends SyntheticEvent<T> {\ntarget: EventTarget & T;\n}\n\ninterface ChangeEvent<T = Element> extends SyntheticEvent<T> {\ntarget: EventTarget & T;\n}\n\ninterface KeyboardEvent<T = Element> extends SyntheticEvent<T, NativeKeyboardEvent> {\naltKey: boolean;\n/** @deprecated */\ncharCode: number;\nctrlKey: boolean;\n/**\n* See [DOM Level 3 Events spec](https://www.w3.org/TR/uievents-key/#keys-modifier). for a list of valid (case-sensitive) arguments to this method.\n*/\ngetModifierState(key: string): boolean;\n/**\n* See the [DOM Level 3 Events spec](https://www.w3.org/TR/uievents-key/#named-key-attribute-values). for possible values\n*/\nkey: string;\n/** @deprecated */\nkeyCode: number;\nlocale: string;\nlocation: number;\nmetaKey: boolean;\nrepeat: boolean;\nshiftKey: boolean;\n/** @deprecated */\nwhich: number;\n}\n\ninterface MouseEvent<T = Element, E = NativeMouseEvent> extends UIEvent<T, E> {\naltKey: boolean;\nbutton: number;\nbuttons: number;\nclientX: number;\nclientY: number;\nctrlKey: boolean;\n/**\n* See [DOM Level 3 Events spec](https://www.w3.org/TR/uievents-key/#keys-modifier). for a list of valid (case-sensitive) arguments to this method.\n*/\ngetModifierState(key: string): boolean;\nmetaKey: boolean;\nmovementX: number;\nmovementY: number;\npageX: number;\npageY: number;\nrelatedTarget: EventTarget | null;\nscreenX: number;\nscreenY: number;\nshiftKey: boolean;\n}\n\ninterface TouchEvent<T = Element> extends UIEvent<T, NativeTouchEvent> {\naltKey: boolean;\nchangedTouches: TouchList;\nctrlKey: boolean;\n/**\n* See [DOM Level 3 Events spec](https://www.w3.org/TR/uievents-key/#keys-modifier). for a list of valid (case-sensitive) arguments to this method.\n*/\ngetModifierState(key: string): boolean;\nmetaKey: boolean;\nshiftKey: boolean;\ntargetTouches: TouchList;\ntouches: TouchList;\n}\n\ninterface UIEvent<T = Element, E = NativeUIEvent> extends SyntheticEvent<T, E> {\ndetail: number;\nview: AbstractView;\n}\n\ninterface WheelEvent<T = Element> extends MouseEvent<T, NativeWheelEvent> {\ndeltaMode: number;\ndeltaX: number;\ndeltaY: number;\ndeltaZ: number;\n}\n\ninterface AnimationEvent<T = Element> extends SyntheticEvent<T, NativeAnimationEvent> {\nanimationName: string;\nelapsedTime: number;\npseudoElement: string;\n}\n\ninterface TransitionEvent<T = Element> extends SyntheticEvent<T, NativeTransitionEvent> {\nelapsedTime: number;\npropertyName: string;\npseudoElement: string;\n}\n\n//\n// Event Handler Types\n// ----------------------------------------------------------------------\n\ntype EventHandler<E extends SyntheticEvent<any>> = { bivarianceHack(event: E): void }[\"bivarianceHack\"];\n\ntype ReactEventHandler<T = Element> = EventHandler<SyntheticEvent<T>>;\n\ntype ClipboardEventHandler<T = Element> = EventHandler<ClipboardEvent<T>>;\ntype CompositionEventHandler<T = Element> = EventHandler<CompositionEvent<T>>;\ntype DragEventHandler<T = Element> = EventHandler<DragEvent<T>>;\ntype FocusEventHandler<T = Element> = EventHandler<FocusEvent<T>>;\ntype FormEventHandler<T = Element> = EventHandler<FormEvent<T>>;\ntype ChangeEventHandler<T = Element> = EventHandler<ChangeEvent<T>>;\ntype KeyboardEventHandler<T = Element> = EventHandler<KeyboardEvent<T>>;\ntype MouseEventHandler<T = Element> = EventHandler<MouseEvent<T>>;\ntype TouchEventHandler<T = Element> = EventHandler<TouchEvent<T>>;\ntype PointerEventHandler<T = Element> = EventHandler<PointerEvent<T>>;\ntype UIEventHandler<T = Element> = EventHandler<UIEvent<T>>;\ntype WheelEventHandler<T = Element> = EventHandler<WheelEvent<T>>;\ntype AnimationEventHandler<T = Element> = EventHandler<AnimationEvent<T>>;\ntype TransitionEventHandler<T = Element> = EventHandler<TransitionEvent<T>>;\n\n//\n// Props / DOM Attributes\n// ----------------------------------------------------------------------\n\n/**\n* @deprecated. This was used to allow clients to pass `ref` and `key`\n* to `createElement`, which is no longer necessary due to intersection\n* types. If you need to declare a props object before passing it to\n* `createElement` or a factory, use `ClassAttributes<T>`:\n*\n* ```ts\n* var b: Button | null;\n* var props: ButtonProps & ClassAttributes<Button> = {\n*     ref: b => button = b, // ok!\n*     label: \"I'm a Button\"\n* };\n* ```\n*/\ninterface Props<T> {\nchildren?: ReactNode;\nkey?: Key;\nref?: LegacyRef<T>;\n}\n\ninterface HTMLProps<T> extends AllHTMLAttributes<T>, ClassAttributes<T> {\n}\n\ntype DetailedHTMLProps<E extends HTMLAttributes<T>, T> = ClassAttributes<T> & E;\n\ninterface SVGProps<T> extends SVGAttributes<T>, ClassAttributes<T> {\n}\n\ninterface DOMAttributes<T> {\nchildren?: ReactNode;\ndangerouslySetInnerHTML?: {\n__html: string;\n};\n\n// Clipboard Events\nonCopy?: ClipboardEventHandler<T>;\nonCopyCapture?: ClipboardEventHandler<T>;\nonCut?: ClipboardEventHandler<T>;\nonCutCapture?: ClipboardEventHandler<T>;\nonPaste?: ClipboardEventHandler<T>;\nonPasteCapture?: ClipboardEventHandler<T>;\n\n// Composition Events\nonCompositionEnd?: CompositionEventHandler<T>;\nonCompositionEndCapture?: CompositionEventHandler<T>;\nonCompositionStart?: CompositionEventHandler<T>;\nonCompositionStartCapture?: CompositionEventHandler<T>;\nonCompositionUpdate?: CompositionEventHandler<T>;\nonCompositionUpdateCapture?: CompositionEventHandler<T>;\n\n// Focus Events\nonFocus?: FocusEventHandler<T>;\nonFocusCapture?: FocusEventHandler<T>;\nonBlur?: FocusEventHandler<T>;\nonBlurCapture?: FocusEventHandler<T>;\n\n// Form Events\nonChange?: FormEventHandler<T>;\nonChangeCapture?: FormEventHandler<T>;\nonBeforeInput?: FormEventHandler<T>;\nonBeforeInputCapture?: FormEventHandler<T>;\nonInput?: FormEventHandler<T>;\nonInputCapture?: FormEventHandler<T>;\nonReset?: FormEventHandler<T>;\nonResetCapture?: FormEventHandler<T>;\nonSubmit?: FormEventHandler<T>;\nonSubmitCapture?: FormEventHandler<T>;\nonInvalid?: FormEventHandler<T>;\nonInvalidCapture?: FormEventHandler<T>;\n\n// Image Events\nonLoad?: ReactEventHandler<T>;\nonLoadCapture?: ReactEventHandler<T>;\nonError?: ReactEventHandler<T>; // also a Media Event\nonErrorCapture?: ReactEventHandler<T>; // also a Media Event\n\n// Keyboard Events\nonKeyDown?: KeyboardEventHandler<T>;\nonKeyDownCapture?: KeyboardEventHandler<T>;\nonKeyPress?: KeyboardEventHandler<T>;\nonKeyPressCapture?: KeyboardEventHandler<T>;\nonKeyUp?: KeyboardEventHandler<T>;\nonKeyUpCapture?: KeyboardEventHandler<T>;\n\n// Media Events\nonAbort?: ReactEventHandler<T>;\nonAbortCapture?: ReactEventHandler<T>;\nonCanPlay?: ReactEventHandler<T>;\nonCanPlayCapture?: ReactEventHandler<T>;\nonCanPlayThrough?: ReactEventHandler<T>;\nonCanPlayThroughCapture?: ReactEventHandler<T>;\nonDurationChange?: ReactEventHandler<T>;\nonDurationChangeCapture?: ReactEventHandler<T>;\nonEmptied?: ReactEventHandler<T>;\nonEmptiedCapture?: ReactEventHandler<T>;\nonEncrypted?: ReactEventHandler<T>;\nonEncryptedCapture?: ReactEventHandler<T>;\nonEnded?: ReactEventHandler<T>;\nonEndedCapture?: ReactEventHandler<T>;\nonLoadedData?: ReactEventHandler<T>;\nonLoadedDataCapture?: ReactEventHandler<T>;\nonLoadedMetadata?: ReactEventHandler<T>;\nonLoadedMetadataCapture?: ReactEventHandler<T>;\nonLoadStart?: ReactEventHandler<T>;\nonLoadStartCapture?: ReactEventHandler<T>;\nonPause?: ReactEventHandler<T>;\nonPauseCapture?: ReactEventHandler<T>;\nonPlay?: ReactEventHandler<T>;\nonPlayCapture?: ReactEventHandler<T>;\nonPlaying?: ReactEventHandler<T>;\nonPlayingCapture?: ReactEventHandler<T>;\nonProgress?: ReactEventHandler<T>;\nonProgressCapture?: ReactEventHandler<T>;\nonRateChange?: ReactEventHandler<T>;\nonRateChangeCapture?: ReactEventHandler<T>;\nonSeeked?: ReactEventHandler<T>;\nonSeekedCapture?: ReactEventHandler<T>;\nonSeeking?: ReactEventHandler<T>;\nonSeekingCapture?: ReactEventHandler<T>;\nonStalled?: ReactEventHandler<T>;\nonStalledCapture?: ReactEventHandler<T>;\nonSuspend?: ReactEventHandler<T>;\nonSuspendCapture?: ReactEventHandler<T>;\nonTimeUpdate?: ReactEventHandler<T>;\nonTimeUpdateCapture?: ReactEventHandler<T>;\nonVolumeChange?: ReactEventHandler<T>;\nonVolumeChangeCapture?: ReactEventHandler<T>;\nonWaiting?: ReactEventHandler<T>;\nonWaitingCapture?: ReactEventHandler<T>;\n\n// MouseEvents\nonAuxClick?: MouseEventHandler<T>;\nonAuxClickCapture?: MouseEventHandler<T>;\nonClick?: MouseEventHandler<T>;\nonClickCapture?: MouseEventHandler<T>;\nonContextMenu?: MouseEventHandler<T>;\nonContextMenuCapture?: MouseEventHandler<T>;\nonDoubleClick?: MouseEventHandler<T>;\nonDoubleClickCapture?: MouseEventHandler<T>;\nonDrag?: DragEventHandler<T>;\nonDragCapture?: DragEventHandler<T>;\nonDragEnd?: DragEventHandler<T>;\nonDragEndCapture?: DragEventHandler<T>;\nonDragEnter?: DragEventHandler<T>;\nonDragEnterCapture?: DragEventHandler<T>;\nonDragExit?: DragEventHandler<T>;\nonDragExitCapture?: DragEventHandler<T>;\nonDragLeave?: DragEventHandler<T>;\nonDragLeaveCapture?: DragEventHandler<T>;\nonDragOver?: DragEventHandler<T>;\nonDragOverCapture?: DragEventHandler<T>;\nonDragStart?: DragEventHandler<T>;\nonDragStartCapture?: DragEventHandler<T>;\nonDrop?: DragEventHandler<T>;\nonDropCapture?: DragEventHandler<T>;\nonMouseDown?: MouseEventHandler<T>;\nonMouseDownCapture?: MouseEventHandler<T>;\nonMouseEnter?: MouseEventHandler<T>;\nonMouseLeave?: MouseEventHandler<T>;\nonMouseMove?: MouseEventHandler<T>;\nonMouseMoveCapture?: MouseEventHandler<T>;\nonMouseOut?: MouseEventHandler<T>;\nonMouseOutCapture?: MouseEventHandler<T>;\nonMouseOver?: MouseEventHandler<T>;\nonMouseOverCapture?: MouseEventHandler<T>;\nonMouseUp?: MouseEventHandler<T>;\nonMouseUpCapture?: MouseEventHandler<T>;\n\n// Selection Events\nonSelect?: ReactEventHandler<T>;\nonSelectCapture?: ReactEventHandler<T>;\n\n// Touch Events\nonTouchCancel?: TouchEventHandler<T>;\nonTouchCancelCapture?: TouchEventHandler<T>;\nonTouchEnd?: TouchEventHandler<T>;\nonTouchEndCapture?: TouchEventHandler<T>;\nonTouchMove?: TouchEventHandler<T>;\nonTouchMoveCapture?: TouchEventHandler<T>;\nonTouchStart?: TouchEventHandler<T>;\nonTouchStartCapture?: TouchEventHandler<T>;\n\n// Pointer Events\nonPointerDown?: PointerEventHandler<T>;\nonPointerDownCapture?: PointerEventHandler<T>;\nonPointerMove?: PointerEventHandler<T>;\nonPointerMoveCapture?: PointerEventHandler<T>;\nonPointerUp?: PointerEventHandler<T>;\nonPointerUpCapture?: PointerEventHandler<T>;\nonPointerCancel?: PointerEventHandler<T>;\nonPointerCancelCapture?: PointerEventHandler<T>;\nonPointerEnter?: PointerEventHandler<T>;\nonPointerEnterCapture?: PointerEventHandler<T>;\nonPointerLeave?: PointerEventHandler<T>;\nonPointerLeaveCapture?: PointerEventHandler<T>;\nonPointerOver?: PointerEventHandler<T>;\nonPointerOverCapture?: PointerEventHandler<T>;\nonPointerOut?: PointerEventHandler<T>;\nonPointerOutCapture?: PointerEventHandler<T>;\nonGotPointerCapture?: PointerEventHandler<T>;\nonGotPointerCaptureCapture?: PointerEventHandler<T>;\nonLostPointerCapture?: PointerEventHandler<T>;\nonLostPointerCaptureCapture?: PointerEventHandler<T>;\n\n// UI Events\nonScroll?: UIEventHandler<T>;\nonScrollCapture?: UIEventHandler<T>;\n\n// Wheel Events\nonWheel?: WheelEventHandler<T>;\nonWheelCapture?: WheelEventHandler<T>;\n\n// Animation Events\nonAnimationStart?: AnimationEventHandler<T>;\nonAnimationStartCapture?: AnimationEventHandler<T>;\nonAnimationEnd?: AnimationEventHandler<T>;\nonAnimationEndCapture?: AnimationEventHandler<T>;\nonAnimationIteration?: AnimationEventHandler<T>;\nonAnimationIterationCapture?: AnimationEventHandler<T>;\n\n// Transition Events\nonTransitionEnd?: TransitionEventHandler<T>;\nonTransitionEndCapture?: TransitionEventHandler<T>;\n}\n\nexport interface CSSProperties extends CSS.Properties<string | number> {\n/**\n* The index signature was removed to enable closed typing for style\n* using CSSType. You're able to use type assertion or module augmentation\n* to add properties or an index signature of your own.\n*\n* For examples and more information, visit:\n* https://github.com/frenic/csstype#what-should-i-do-when-i-get-type-errors\n*/\n}\n\n// All the WAI-ARIA 1.1 attributes from https://www.w3.org/TR/wai-aria-1.1/\ninterface AriaAttributes {\n/** Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application. */\n'aria-activedescendant'?: string;\n/** Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute. */\n'aria-atomic'?: boolean | 'false' | 'true';\n/**\n* Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for an input and specifies how predictions would be\n* presented if they are made.\n*/\n'aria-autocomplete'?: 'none' | 'inline' | 'list' | 'both';\n/** Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user. */\n'aria-busy'?: boolean | 'false' | 'true';\n/**\n* Indicates the current \"checked\" state of checkboxes, radio buttons, and other widgets.\n* @see aria-pressed @see aria-selected.\n*/\n'aria-checked'?: boolean | 'false' | 'mixed' | 'true';\n/**\n* Defines the total number of columns in a table, grid, or treegrid.\n* @see aria-colindex.\n*/\n'aria-colcount'?: number;\n/**\n* Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid.\n* @see aria-colcount @see aria-colspan.\n*/\n'aria-colindex'?: number;\n/**\n* Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.\n* @see aria-colindex @see aria-rowspan.\n*/\n'aria-colspan'?: number;\n/**\n* Identifies the element (or elements) whose contents or presence are controlled by the current element.\n* @see aria-owns.\n*/\n'aria-controls'?: string;\n/** Indicates the element that represents the current item within a container or set of related elements. */\n'aria-current'?: boolean | 'false' | 'true' | 'page' | 'step' | 'location' | 'date' | 'time';\n/**\n* Identifies the element (or elements) that describes the object.\n* @see aria-labelledby\n*/\n'aria-describedby'?: string;\n/**\n* Identifies the element that provides a detailed, extended description for the object.\n* @see aria-describedby.\n*/\n'aria-details'?: string;\n/**\n* Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.\n* @see aria-hidden @see aria-readonly.\n*/\n'aria-disabled'?: boolean | 'false' | 'true';\n/**\n* Indicates what functions can be performed when a dragged object is released on the drop target.\n* @deprecated in ARIA 1.1\n*/\n'aria-dropeffect'?: 'none' | 'copy' | 'execute' | 'link' | 'move' | 'popup';\n/**\n* Identifies the element that provides an error message for the object.\n* @see aria-invalid @see aria-describedby.\n*/\n'aria-errormessage'?: string;\n/** Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed. */\n'aria-expanded'?: boolean | 'false' | 'true';\n/**\n* Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion,\n* allows assistive technology to override the general default of reading in document source order.\n*/\n'aria-flowto'?: string;\n/**\n* Indicates an element's \"grabbed\" state in a drag-and-drop operation.\n* @deprecated in ARIA 1.1\n*/\n'aria-grabbed'?: boolean | 'false' | 'true';\n/** Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element. */\n'aria-haspopup'?: boolean | 'false' | 'true' | 'menu' | 'listbox' | 'tree' | 'grid' | 'dialog';\n/**\n* Indicates whether the element is exposed to an accessibility API.\n* @see aria-disabled.\n*/\n'aria-hidden'?: boolean | 'false' | 'true';\n/**\n* Indicates the entered value does not conform to the format expected by the application.\n* @see aria-errormessage.\n*/\n'aria-invalid'?: boolean | 'false' | 'true' | 'grammar' | 'spelling';\n/** Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element. */\n'aria-keyshortcuts'?: string;\n/**\n* Defines a string value that labels the current element.\n* @see aria-labelledby.\n*/\n'aria-label'?: string;\n/**\n* Identifies the element (or elements) that labels the current element.\n* @see aria-describedby.\n*/\n'aria-labelledby'?: string;\n/** Defines the hierarchical level of an element within a structure. */\n'aria-level'?: number;\n/** Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region. */\n'aria-live'?: 'off' | 'assertive' | 'polite';\n/** Indicates whether an element is modal when displayed. */\n'aria-modal'?: boolean | 'false' | 'true';\n/** Indicates whether a text box accepts multiple lines of input or only a single line. */\n'aria-multiline'?: boolean | 'false' | 'true';\n/** Indicates that the user may select more than one item from the current selectable descendants. */\n'aria-multiselectable'?: boolean | 'false' | 'true';\n/** Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous. */\n'aria-orientation'?: 'horizontal' | 'vertical';\n/**\n* Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship\n* between DOM elements where the DOM hierarchy cannot be used to represent the relationship.\n* @see aria-controls.\n*/\n'aria-owns'?: string;\n/**\n* Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.\n* A hint could be a sample value or a brief description of the expected format.\n*/\n'aria-placeholder'?: string;\n/**\n* Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\n* @see aria-setsize.\n*/\n'aria-posinset'?: number;\n/**\n* Indicates the current \"pressed\" state of toggle buttons.\n* @see aria-checked @see aria-selected.\n*/\n'aria-pressed'?: boolean | 'false' | 'mixed' | 'true';\n/**\n* Indicates that the element is not editable, but is otherwise operable.\n* @see aria-disabled.\n*/\n'aria-readonly'?: boolean | 'false' | 'true';\n/**\n* Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.\n* @see aria-atomic.\n*/\n'aria-relevant'?: 'additions' | 'additions removals' | 'additions text' | 'all' | 'removals' | 'removals additions' | 'removals text' | 'text' | 'text additions' | 'text removals';\n/** Indicates that user input is required on the element before a form may be submitted. */\n'aria-required'?: boolean | 'false' | 'true';\n/** Defines a human-readable, author-localized description for the role of an element. */\n'aria-roledescription'?: string;\n/**\n* Defines the total number of rows in a table, grid, or treegrid.\n* @see aria-rowindex.\n*/\n'aria-rowcount'?: number;\n/**\n* Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid.\n* @see aria-rowcount @see aria-rowspan.\n*/\n'aria-rowindex'?: number;\n/**\n* Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.\n* @see aria-rowindex @see aria-colspan.\n*/\n'aria-rowspan'?: number;\n/**\n* Indicates the current \"selected\" state of various widgets.\n* @see aria-checked @see aria-pressed.\n*/\n'aria-selected'?: boolean | 'false' | 'true';\n/**\n* Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\n* @see aria-posinset.\n*/\n'aria-setsize'?: number;\n/** Indicates if items in a table or grid are sorted in ascending or descending order. */\n'aria-sort'?: 'none' | 'ascending' | 'descending' | 'other';\n/** Defines the maximum allowed value for a range widget. */\n'aria-valuemax'?: number;\n/** Defines the minimum allowed value for a range widget. */\n'aria-valuemin'?: number;\n/**\n* Defines the current value for a range widget.\n* @see aria-valuetext.\n*/\n'aria-valuenow'?: number;\n/** Defines the human readable text alternative of aria-valuenow for a range widget. */\n'aria-valuetext'?: string;\n}\n\ninterface HTMLAttributes<T> extends AriaAttributes, DOMAttributes<T> {\n// React-specific Attributes\ndefaultChecked?: boolean;\ndefaultValue?: string | number | ReadonlyArray<string>;\nsuppressContentEditableWarning?: boolean;\nsuppressHydrationWarning?: boolean;\n\n// Standard HTML Attributes\naccessKey?: string;\nclassName?: string;\ncontentEditable?: Booleanish | \"inherit\";\ncontextMenu?: string;\ndir?: string;\ndraggable?: Booleanish;\nhidden?: boolean;\nid?: string;\nlang?: string;\nplaceholder?: string;\nslot?: string;\nspellCheck?: Booleanish;\nstyle?: CSSProperties;\ntabIndex?: number;\ntitle?: string;\ntranslate?: 'yes' | 'no';\n\n// Unknown\nradioGroup?: string; // <command>, <menuitem>\n\n// WAI-ARIA\nrole?: string;\n\n// RDFa Attributes\nabout?: string;\ndatatype?: string;\ninlist?: any;\nprefix?: string;\nproperty?: string;\nresource?: string;\ntypeof?: string;\nvocab?: string;\n\n// Non-standard Attributes\nautoCapitalize?: string;\nautoCorrect?: string;\nautoSave?: string;\ncolor?: string;\nitemProp?: string;\nitemScope?: boolean;\nitemType?: string;\nitemID?: string;\nitemRef?: string;\nresults?: number;\nsecurity?: string;\nunselectable?: 'on' | 'off';\n\n// Living Standard\n/**\n* Hints at the type of data that might be entered by the user while editing the element or its contents\n* @see https://html.spec.whatwg.org/multipage/interaction.html#input-modalities:-the-inputmode-attribute\n*/\ninputMode?: 'none' | 'text' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search';\n/**\n* Specify that a standard HTML element should behave like a defined custom built-in element\n* @see https://html.spec.whatwg.org/multipage/custom-elements.html#attr-is\n*/\nis?: string;\n}\n\ninterface AllHTMLAttributes<T> extends HTMLAttributes<T> {\n// Standard HTML Attributes\naccept?: string;\nacceptCharset?: string;\naction?: string;\nallowFullScreen?: boolean;\nallowTransparency?: boolean;\nalt?: string;\nas?: string;\nasync?: boolean;\nautoComplete?: string;\nautoFocus?: boolean;\nautoPlay?: boolean;\ncapture?: boolean | string;\ncellPadding?: number | string;\ncellSpacing?: number | string;\ncharSet?: string;\nchallenge?: string;\nchecked?: boolean;\ncite?: string;\nclassID?: string;\ncols?: number;\ncolSpan?: number;\ncontent?: string;\ncontrols?: boolean;\ncoords?: string;\ncrossOrigin?: string;\ndata?: string;\ndateTime?: string;\ndefault?: boolean;\ndefer?: boolean;\ndisabled?: boolean;\ndownload?: any;\nencType?: string;\nform?: string;\nformAction?: string;\nformEncType?: string;\nformMethod?: string;\nformNoValidate?: boolean;\nformTarget?: string;\nframeBorder?: number | string;\nheaders?: string;\nheight?: number | string;\nhigh?: number;\nhref?: string;\nhrefLang?: string;\nhtmlFor?: string;\nhttpEquiv?: string;\nintegrity?: string;\nkeyParams?: string;\nkeyType?: string;\nkind?: string;\nlabel?: string;\nlist?: string;\nloop?: boolean;\nlow?: number;\nmanifest?: string;\nmarginHeight?: number;\nmarginWidth?: number;\nmax?: number | string;\nmaxLength?: number;\nmedia?: string;\nmediaGroup?: string;\nmethod?: string;\nmin?: number | string;\nminLength?: number;\nmultiple?: boolean;\nmuted?: boolean;\nname?: string;\nnonce?: string;\nnoValidate?: boolean;\nopen?: boolean;\noptimum?: number;\npattern?: string;\nplaceholder?: string;\nplaysInline?: boolean;\nposter?: string;\npreload?: string;\nreadOnly?: boolean;\nrel?: string;\nrequired?: boolean;\nreversed?: boolean;\nrows?: number;\nrowSpan?: number;\nsandbox?: string;\nscope?: string;\nscoped?: boolean;\nscrolling?: string;\nseamless?: boolean;\nselected?: boolean;\nshape?: string;\nsize?: number;\nsizes?: string;\nspan?: number;\nsrc?: string;\nsrcDoc?: string;\nsrcLang?: string;\nsrcSet?: string;\nstart?: number;\nstep?: number | string;\nsummary?: string;\ntarget?: string;\ntype?: string;\nuseMap?: string;\nvalue?: string | ReadonlyArray<string> | number;\nwidth?: number | string;\nwmode?: string;\nwrap?: string;\n}\n\ntype HTMLAttributeReferrerPolicy =\n| ''\n| 'no-referrer'\n| 'no-referrer-when-downgrade'\n| 'origin'\n| 'origin-when-cross-origin'\n| 'same-origin'\n| 'strict-origin'\n| 'strict-origin-when-cross-origin'\n| 'unsafe-url';\n\ninterface AnchorHTMLAttributes<T> extends HTMLAttributes<T> {\ndownload?: any;\nhref?: string;\nhrefLang?: string;\nmedia?: string;\nping?: string;\nrel?: string;\ntarget?: string;\ntype?: string;\nreferrerPolicy?: HTMLAttributeReferrerPolicy;\n}\n\n// tslint:disable-next-line:no-empty-interface\ninterface AudioHTMLAttributes<T> extends MediaHTMLAttributes<T> {}\n\ninterface AreaHTMLAttributes<T> extends HTMLAttributes<T> {\nalt?: string;\ncoords?: string;\ndownload?: any;\nhref?: string;\nhrefLang?: string;\nmedia?: string;\nreferrerPolicy?: HTMLAttributeReferrerPolicy;\nrel?: string;\nshape?: string;\ntarget?: string;\n}\n\ninterface BaseHTMLAttributes<T> extends HTMLAttributes<T> {\nhref?: string;\ntarget?: string;\n}\n\ninterface BlockquoteHTMLAttributes<T> extends HTMLAttributes<T> {\ncite?: string;\n}\n\ninterface ButtonHTMLAttributes<T> extends HTMLAttributes<T> {\nautoFocus?: boolean;\ndisabled?: boolean;\nform?: string;\nformAction?: string;\nformEncType?: string;\nformMethod?: string;\nformNoValidate?: boolean;\nformTarget?: string;\nname?: string;\ntype?: 'submit' | 'reset' | 'button';\nvalue?: string | ReadonlyArray<string> | number;\n}\n\ninterface CanvasHTMLAttributes<T> extends HTMLAttributes<T> {\nheight?: number | string;\nwidth?: number | string;\n}\n\ninterface ColHTMLAttributes<T> extends HTMLAttributes<T> {\nspan?: number;\nwidth?: number | string;\n}\n\ninterface ColgroupHTMLAttributes<T> extends HTMLAttributes<T> {\nspan?: number;\n}\n\ninterface DataHTMLAttributes<T> extends HTMLAttributes<T> {\nvalue?: string | ReadonlyArray<string> | number;\n}\n\ninterface DetailsHTMLAttributes<T> extends HTMLAttributes<T> {\nopen?: boolean;\nonToggle?: ReactEventHandler<T>;\n}\n\ninterface DelHTMLAttributes<T> extends HTMLAttributes<T> {\ncite?: string;\ndateTime?: string;\n}\n\ninterface DialogHTMLAttributes<T> extends HTMLAttributes<T> {\nopen?: boolean;\n}\n\ninterface EmbedHTMLAttributes<T> extends HTMLAttributes<T> {\nheight?: number | string;\nsrc?: string;\ntype?: string;\nwidth?: number | string;\n}\n\ninterface FieldsetHTMLAttributes<T> extends HTMLAttributes<T> {\ndisabled?: boolean;\nform?: string;\nname?: string;\n}\n\ninterface FormHTMLAttributes<T> extends HTMLAttributes<T> {\nacceptCharset?: string;\naction?: string;\nautoComplete?: string;\nencType?: string;\nmethod?: string;\nname?: string;\nnoValidate?: boolean;\ntarget?: string;\n}\n\ninterface HtmlHTMLAttributes<T> extends HTMLAttributes<T> {\nmanifest?: string;\n}\n\ninterface IframeHTMLAttributes<T> extends HTMLAttributes<T> {\nallow?: string;\nallowFullScreen?: boolean;\nallowTransparency?: boolean;\n/** @deprecated */\nframeBorder?: number | string;\nheight?: number | string;\nloading?: \"eager\" | \"lazy\";\n/** @deprecated */\nmarginHeight?: number;\n/** @deprecated */\nmarginWidth?: number;\nname?: string;\nreferrerPolicy?: HTMLAttributeReferrerPolicy;\nsandbox?: string;\n/** @deprecated */\nscrolling?: string;\nseamless?: boolean;\nsrc?: string;\nsrcDoc?: string;\nwidth?: number | string;\n}\n\ninterface ImgHTMLAttributes<T> extends HTMLAttributes<T> {\nalt?: string;\ncrossOrigin?: \"anonymous\" | \"use-credentials\" | \"\";\ndecoding?: \"async\" | \"auto\" | \"sync\";\nheight?: number | string;\nloading?: \"eager\" | \"lazy\";\nreferrerPolicy?: HTMLAttributeReferrerPolicy;\nsizes?: string;\nsrc?: string;\nsrcSet?: string;\nuseMap?: string;\nwidth?: number | string;\n}\n\ninterface InsHTMLAttributes<T> extends HTMLAttributes<T> {\ncite?: string;\ndateTime?: string;\n}\n\ninterface InputHTMLAttributes<T> extends HTMLAttributes<T> {\naccept?: string;\nalt?: string;\nautoComplete?: string;\nautoFocus?: boolean;\ncapture?: boolean | string; // https://www.w3.org/TR/html-media-capture/#the-capture-attribute\nchecked?: boolean;\ncrossOrigin?: string;\ndisabled?: boolean;\nform?: string;\nformAction?: string;\nformEncType?: string;\nformMethod?: string;\nformNoValidate?: boolean;\nformTarget?: string;\nheight?: number | string;\nlist?: string;\nmax?: number | string;\nmaxLength?: number;\nmin?: number | string;\nminLength?: number;\nmultiple?: boolean;\nname?: string;\npattern?: string;\nplaceholder?: string;\nreadOnly?: boolean;\nrequired?: boolean;\nsize?: number;\nsrc?: string;\nstep?: number | string;\ntype?: string;\nvalue?: string | ReadonlyArray<string> | number;\nwidth?: number | string;\n\nonChange?: ChangeEventHandler<T>;\n}\n\ninterface KeygenHTMLAttributes<T> extends HTMLAttributes<T> {\nautoFocus?: boolean;\nchallenge?: string;\ndisabled?: boolean;\nform?: string;\nkeyType?: string;\nkeyParams?: string;\nname?: string;\n}\n\ninterface LabelHTMLAttributes<T> extends HTMLAttributes<T> {\nform?: string;\nhtmlFor?: string;\n}\n\ninterface LiHTMLAttributes<T> extends HTMLAttributes<T> {\nvalue?: string | ReadonlyArray<string> | number;\n}\n\ninterface LinkHTMLAttributes<T> extends HTMLAttributes<T> {\nas?: string;\ncrossOrigin?: string;\nhref?: string;\nhrefLang?: string;\nintegrity?: string;\nmedia?: string;\nreferrerPolicy?: HTMLAttributeReferrerPolicy;\nrel?: string;\nsizes?: string;\ntype?: string;\ncharSet?: string;\n}\n\ninterface MapHTMLAttributes<T> extends HTMLAttributes<T> {\nname?: string;\n}\n\ninterface MenuHTMLAttributes<T> extends HTMLAttributes<T> {\ntype?: string;\n}\n\ninterface MediaHTMLAttributes<T> extends HTMLAttributes<T> {\nautoPlay?: boolean;\ncontrols?: boolean;\ncontrolsList?: string;\ncrossOrigin?: string;\nloop?: boolean;\nmediaGroup?: string;\nmuted?: boolean;\nplaysInline?: boolean;\npreload?: string;\nsrc?: string;\n}\n\ninterface MetaHTMLAttributes<T> extends HTMLAttributes<T> {\ncharSet?: string;\ncontent?: string;\nhttpEquiv?: string;\nname?: string;\n}\n\ninterface MeterHTMLAttributes<T> extends HTMLAttributes<T> {\nform?: string;\nhigh?: number;\nlow?: number;\nmax?: number | string;\nmin?: number | string;\noptimum?: number;\nvalue?: string | ReadonlyArray<string> | number;\n}\n\ninterface QuoteHTMLAttributes<T> extends HTMLAttributes<T> {\ncite?: string;\n}\n\ninterface ObjectHTMLAttributes<T> extends HTMLAttributes<T> {\nclassID?: string;\ndata?: string;\nform?: string;\nheight?: number | string;\nname?: string;\ntype?: string;\nuseMap?: string;\nwidth?: number | string;\nwmode?: string;\n}\n\ninterface OlHTMLAttributes<T> extends HTMLAttributes<T> {\nreversed?: boolean;\nstart?: number;\ntype?: '1' | 'a' | 'A' | 'i' | 'I';\n}\n\ninterface OptgroupHTMLAttributes<T> extends HTMLAttributes<T> {\ndisabled?: boolean;\nlabel?: string;\n}\n\ninterface OptionHTMLAttributes<T> extends HTMLAttributes<T> {\ndisabled?: boolean;\nlabel?: string;\nselected?: boolean;\nvalue?: string | ReadonlyArray<string> | number;\n}\n\ninterface OutputHTMLAttributes<T> extends HTMLAttributes<T> {\nform?: string;\nhtmlFor?: string;\nname?: string;\n}\n\ninterface ParamHTMLAttributes<T> extends HTMLAttributes<T> {\nname?: string;\nvalue?: string | ReadonlyArray<string> | number;\n}\n\ninterface ProgressHTMLAttributes<T> extends HTMLAttributes<T> {\nmax?: number | string;\nvalue?: string | ReadonlyArray<string> | number;\n}\n\ninterface SlotHTMLAttributes<T> extends HTMLAttributes<T> {\nname?: string;\n}\n\ninterface ScriptHTMLAttributes<T> extends HTMLAttributes<T> {\nasync?: boolean;\n/** @deprecated */\ncharSet?: string;\ncrossOrigin?: string;\ndefer?: boolean;\nintegrity?: string;\nnoModule?: boolean;\nnonce?: string;\nreferrerPolicy?: HTMLAttributeReferrerPolicy;\nsrc?: string;\ntype?: string;\n}\n\ninterface SelectHTMLAttributes<T> extends HTMLAttributes<T> {\nautoComplete?: string;\nautoFocus?: boolean;\ndisabled?: boolean;\nform?: string;\nmultiple?: boolean;\nname?: string;\nrequired?: boolean;\nsize?: number;\nvalue?: string | ReadonlyArray<string> | number;\nonChange?: ChangeEventHandler<T>;\n}\n\ninterface SourceHTMLAttributes<T> extends HTMLAttributes<T> {\nmedia?: string;\nsizes?: string;\nsrc?: string;\nsrcSet?: string;\ntype?: string;\n}\n\ninterface StyleHTMLAttributes<T> extends HTMLAttributes<T> {\nmedia?: string;\nnonce?: string;\nscoped?: boolean;\ntype?: string;\n}\n\ninterface TableHTMLAttributes<T> extends HTMLAttributes<T> {\ncellPadding?: number | string;\ncellSpacing?: number | string;\nsummary?: string;\nwidth?: number | string;\n}\n\ninterface TextareaHTMLAttributes<T> extends HTMLAttributes<T> {\nautoComplete?: string;\nautoFocus?: boolean;\ncols?: number;\ndirName?: string;\ndisabled?: boolean;\nform?: string;\nmaxLength?: number;\nminLength?: number;\nname?: string;\nplaceholder?: string;\nreadOnly?: boolean;\nrequired?: boolean;\nrows?: number;\nvalue?: string | ReadonlyArray<string> | number;\nwrap?: string;\n\nonChange?: ChangeEventHandler<T>;\n}\n\ninterface TdHTMLAttributes<T> extends HTMLAttributes<T> {\nalign?: \"left\" | \"center\" | \"right\" | \"justify\" | \"char\";\ncolSpan?: number;\nheaders?: string;\nrowSpan?: number;\nscope?: string;\nabbr?: string;\nheight?: number | string;\nwidth?: number | string;\nvalign?: \"top\" | \"middle\" | \"bottom\" | \"baseline\";\n}\n\ninterface ThHTMLAttributes<T> extends HTMLAttributes<T> {\nalign?: \"left\" | \"center\" | \"right\" | \"justify\" | \"char\";\ncolSpan?: number;\nheaders?: string;\nrowSpan?: number;\nscope?: string;\nabbr?: string;\n}\n\ninterface TimeHTMLAttributes<T> extends HTMLAttributes<T> {\ndateTime?: string;\n}\n\ninterface TrackHTMLAttributes<T> extends HTMLAttributes<T> {\ndefault?: boolean;\nkind?: string;\nlabel?: string;\nsrc?: string;\nsrcLang?: string;\n}\n\ninterface VideoHTMLAttributes<T> extends MediaHTMLAttributes<T> {\nheight?: number | string;\nplaysInline?: boolean;\nposter?: string;\nwidth?: number | string;\ndisablePictureInPicture?: boolean;\n}\n\n// this list is \"complete\" in that it contains every SVG attribute\n// that React supports, but the types can be improved.\n// Full list here: https://facebook.github.io/react/docs/dom-elements.html\n//\n// The three broad type categories are (in order of restrictiveness):\n//   - \"number | string\"\n//   - \"string\"\n//   - union of string literals\ninterface SVGAttributes<T> extends AriaAttributes, DOMAttributes<T> {\n// Attributes which also defined in HTMLAttributes\n// See comment in SVGDOMPropertyConfig.js\nclassName?: string;\ncolor?: string;\nheight?: number | string;\nid?: string;\nlang?: string;\nmax?: number | string;\nmedia?: string;\nmethod?: string;\nmin?: number | string;\nname?: string;\nstyle?: CSSProperties;\ntarget?: string;\ntype?: string;\nwidth?: number | string;\n\n// Other HTML properties supported by SVG elements in browsers\nrole?: string;\ntabIndex?: number;\ncrossOrigin?: \"anonymous\" | \"use-credentials\" | \"\";\n\n// SVG Specific attributes\naccentHeight?: number | string;\naccumulate?: \"none\" | \"sum\";\nadditive?: \"replace\" | \"sum\";\nalignmentBaseline?: \"auto\" | \"baseline\" | \"before-edge\" | \"text-before-edge\" | \"middle\" | \"central\" | \"after-edge\" |\n\"text-after-edge\" | \"ideographic\" | \"alphabetic\" | \"hanging\" | \"mathematical\" | \"inherit\";\nallowReorder?: \"no\" | \"yes\";\nalphabetic?: number | string;\namplitude?: number | string;\narabicForm?: \"initial\" | \"medial\" | \"terminal\" | \"isolated\";\nascent?: number | string;\nattributeName?: string;\nattributeType?: string;\nautoReverse?: Booleanish;\nazimuth?: number | string;\nbaseFrequency?: number | string;\nbaselineShift?: number | string;\nbaseProfile?: number | string;\nbbox?: number | string;\nbegin?: number | string;\nbias?: number | string;\nby?: number | string;\ncalcMode?: number | string;\ncapHeight?: number | string;\nclip?: number | string;\nclipPath?: string;\nclipPathUnits?: number | string;\nclipRule?: number | string;\ncolorInterpolation?: number | string;\ncolorInterpolationFilters?: \"auto\" | \"sRGB\" | \"linearRGB\" | \"inherit\";\ncolorProfile?: number | string;\ncolorRendering?: number | string;\ncontentScriptType?: number | string;\ncontentStyleType?: number | string;\ncursor?: number | string;\ncx?: number | string;\ncy?: number | string;\nd?: string;\ndecelerate?: number | string;\ndescent?: number | string;\ndiffuseConstant?: number | string;\ndirection?: number | string;\ndisplay?: number | string;\ndivisor?: number | string;\ndominantBaseline?: number | string;\ndur?: number | string;\ndx?: number | string;\ndy?: number | string;\nedgeMode?: number | string;\nelevation?: number | string;\nenableBackground?: number | string;\nend?: number | string;\nexponent?: number | string;\nexternalResourcesRequired?: Booleanish;\nfill?: string;\nfillOpacity?: number | string;\nfillRule?: \"nonzero\" | \"evenodd\" | \"inherit\";\nfilter?: string;\nfilterRes?: number | string;\nfilterUnits?: number | string;\nfloodColor?: number | string;\nfloodOpacity?: number | string;\nfocusable?: Booleanish | \"auto\";\nfontFamily?: string;\nfontSize?: number | string;\nfontSizeAdjust?: number | string;\nfontStretch?: number | string;\nfontStyle?: number | string;\nfontVariant?: number | string;\nfontWeight?: number | string;\nformat?: number | string;\nfrom?: number | string;\nfx?: number | string;\nfy?: number | string;\ng1?: number | string;\ng2?: number | string;\nglyphName?: number | string;\nglyphOrientationHorizontal?: number | string;\nglyphOrientationVertical?: number | string;\nglyphRef?: number | string;\ngradientTransform?: string;\ngradientUnits?: string;\nhanging?: number | string;\nhorizAdvX?: number | string;\nhorizOriginX?: number | string;\nhref?: string;\nideographic?: number | string;\nimageRendering?: number | string;\nin2?: number | string;\nin?: string;\nintercept?: number | string;\nk1?: number | string;\nk2?: number | string;\nk3?: number | string;\nk4?: number | string;\nk?: number | string;\nkernelMatrix?: number | string;\nkernelUnitLength?: number | string;\nkerning?: number | string;\nkeyPoints?: number | string;\nkeySplines?: number | string;\nkeyTimes?: number | string;\nlengthAdjust?: number | string;\nletterSpacing?: number | string;\nlightingColor?: number | string;\nlimitingConeAngle?: number | string;\nlocal?: number | string;\nmarkerEnd?: string;\nmarkerHeight?: number | string;\nmarkerMid?: string;\nmarkerStart?: string;\nmarkerUnits?: number | string;\nmarkerWidth?: number | string;\nmask?: string;\nmaskContentUnits?: number | string;\nmaskUnits?: number | string;\nmathematical?: number | string;\nmode?: number | string;\nnumOctaves?: number | string;\noffset?: number | string;\nopacity?: number | string;\noperator?: number | string;\norder?: number | string;\norient?: number | string;\norientation?: number | string;\norigin?: number | string;\noverflow?: number | string;\noverlinePosition?: number | string;\noverlineThickness?: number | string;\npaintOrder?: number | string;\npanose1?: number | string;\npath?: string;\npathLength?: number | string;\npatternContentUnits?: string;\npatternTransform?: number | string;\npatternUnits?: string;\npointerEvents?: number | string;\npoints?: string;\npointsAtX?: number | string;\npointsAtY?: number | string;\npointsAtZ?: number | string;\npreserveAlpha?: Booleanish;\npreserveAspectRatio?: string;\nprimitiveUnits?: number | string;\nr?: number | string;\nradius?: number | string;\nrefX?: number | string;\nrefY?: number | string;\nrenderingIntent?: number | string;\nrepeatCount?: number | string;\nrepeatDur?: number | string;\nrequiredExtensions?: number | string;\nrequiredFeatures?: number | string;\nrestart?: number | string;\nresult?: string;\nrotate?: number | string;\nrx?: number | string;\nry?: number | string;\nscale?: number | string;\nseed?: number | string;\nshapeRendering?: number | string;\nslope?: number | string;\nspacing?: number | string;\nspecularConstant?: number | string;\nspecularExponent?: number | string;\nspeed?: number | string;\nspreadMethod?: string;\nstartOffset?: number | string;\nstdDeviation?: number | string;\nstemh?: number | string;\nstemv?: number | string;\nstitchTiles?: number | string;\nstopColor?: string;\nstopOpacity?: number | string;\nstrikethroughPosition?: number | string;\nstrikethroughThickness?: number | string;\nstring?: number | string;\nstroke?: string;\nstrokeDasharray?: string | number;\nstrokeDashoffset?: string | number;\nstrokeLinecap?: \"butt\" | \"round\" | \"square\" | \"inherit\";\nstrokeLinejoin?: \"miter\" | \"round\" | \"bevel\" | \"inherit\";\nstrokeMiterlimit?: number | string;\nstrokeOpacity?: number | string;\nstrokeWidth?: number | string;\nsurfaceScale?: number | string;\nsystemLanguage?: number | string;\ntableValues?: number | string;\ntargetX?: number | string;\ntargetY?: number | string;\ntextAnchor?: string;\ntextDecoration?: number | string;\ntextLength?: number | string;\ntextRendering?: number | string;\nto?: number | string;\ntransform?: string;\nu1?: number | string;\nu2?: number | string;\nunderlinePosition?: number | string;\nunderlineThickness?: number | string;\nunicode?: number | string;\nunicodeBidi?: number | string;\nunicodeRange?: number | string;\nunitsPerEm?: number | string;\nvAlphabetic?: number | string;\nvalues?: string;\nvectorEffect?: number | string;\nversion?: string;\nvertAdvY?: number | string;\nvertOriginX?: number | string;\nvertOriginY?: number | string;\nvHanging?: number | string;\nvIdeographic?: number | string;\nviewBox?: string;\nviewTarget?: number | string;\nvisibility?: number | string;\nvMathematical?: number | string;\nwidths?: number | string;\nwordSpacing?: number | string;\nwritingMode?: number | string;\nx1?: number | string;\nx2?: number | string;\nx?: number | string;\nxChannelSelector?: string;\nxHeight?: number | string;\nxlinkActuate?: string;\nxlinkArcrole?: string;\nxlinkHref?: string;\nxlinkRole?: string;\nxlinkShow?: string;\nxlinkTitle?: string;\nxlinkType?: string;\nxmlBase?: string;\nxmlLang?: string;\nxmlns?: string;\nxmlnsXlink?: string;\nxmlSpace?: string;\ny1?: number | string;\ny2?: number | string;\ny?: number | string;\nyChannelSelector?: string;\nz?: number | string;\nzoomAndPan?: string;\n}\n\ninterface WebViewHTMLAttributes<T> extends HTMLAttributes<T> {\nallowFullScreen?: boolean;\nallowpopups?: boolean;\nautoFocus?: boolean;\nautosize?: boolean;\nblinkfeatures?: string;\ndisableblinkfeatures?: string;\ndisableguestresize?: boolean;\ndisablewebsecurity?: boolean;\nguestinstance?: string;\nhttpreferrer?: string;\nnodeintegration?: boolean;\npartition?: string;\nplugins?: boolean;\npreload?: string;\nsrc?: string;\nuseragent?: string;\nwebpreferences?: string;\n}\n\n//\n// React.DOM\n// ----------------------------------------------------------------------\n\ninterface ReactHTML {\na: DetailedHTMLFactory<AnchorHTMLAttributes<HTMLAnchorElement>, HTMLAnchorElement>;\nabbr: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\naddress: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\narea: DetailedHTMLFactory<AreaHTMLAttributes<HTMLAreaElement>, HTMLAreaElement>;\narticle: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\naside: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\naudio: DetailedHTMLFactory<AudioHTMLAttributes<HTMLAudioElement>, HTMLAudioElement>;\nb: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\nbase: DetailedHTMLFactory<BaseHTMLAttributes<HTMLBaseElement>, HTMLBaseElement>;\nbdi: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\nbdo: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\nbig: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\nblockquote: DetailedHTMLFactory<BlockquoteHTMLAttributes<HTMLElement>, HTMLElement>;\nbody: DetailedHTMLFactory<HTMLAttributes<HTMLBodyElement>, HTMLBodyElement>;\nbr: DetailedHTMLFactory<HTMLAttributes<HTMLBRElement>, HTMLBRElement>;\nbutton: DetailedHTMLFactory<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;\ncanvas: DetailedHTMLFactory<CanvasHTMLAttributes<HTMLCanvasElement>, HTMLCanvasElement>;\ncaption: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\ncite: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\ncode: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\ncol: DetailedHTMLFactory<ColHTMLAttributes<HTMLTableColElement>, HTMLTableColElement>;\ncolgroup: DetailedHTMLFactory<ColgroupHTMLAttributes<HTMLTableColElement>, HTMLTableColElement>;\ndata: DetailedHTMLFactory<DataHTMLAttributes<HTMLDataElement>, HTMLDataElement>;\ndatalist: DetailedHTMLFactory<HTMLAttributes<HTMLDataListElement>, HTMLDataListElement>;\ndd: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\ndel: DetailedHTMLFactory<DelHTMLAttributes<HTMLElement>, HTMLElement>;\ndetails: DetailedHTMLFactory<DetailsHTMLAttributes<HTMLElement>, HTMLElement>;\ndfn: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\ndialog: DetailedHTMLFactory<DialogHTMLAttributes<HTMLDialogElement>, HTMLDialogElement>;\ndiv: DetailedHTMLFactory<HTMLAttributes<HTMLDivElement>, HTMLDivElement>;\ndl: DetailedHTMLFactory<HTMLAttributes<HTMLDListElement>, HTMLDListElement>;\ndt: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\nem: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\nembed: DetailedHTMLFactory<EmbedHTMLAttributes<HTMLEmbedElement>, HTMLEmbedElement>;\nfieldset: DetailedHTMLFactory<FieldsetHTMLAttributes<HTMLFieldSetElement>, HTMLFieldSetElement>;\nfigcaption: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\nfigure: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\nfooter: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\nform: DetailedHTMLFactory<FormHTMLAttributes<HTMLFormElement>, HTMLFormElement>;\nh1: DetailedHTMLFactory<HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\nh2: DetailedHTMLFactory<HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\nh3: DetailedHTMLFactory<HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\nh4: DetailedHTMLFactory<HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\nh5: DetailedHTMLFactory<HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\nh6: DetailedHTMLFactory<HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\nhead: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLHeadElement>;\nheader: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\nhgroup: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\nhr: DetailedHTMLFactory<HTMLAttributes<HTMLHRElement>, HTMLHRElement>;\nhtml: DetailedHTMLFactory<HtmlHTMLAttributes<HTMLHtmlElement>, HTMLHtmlElement>;\ni: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\niframe: DetailedHTMLFactory<IframeHTMLAttributes<HTMLIFrameElement>, HTMLIFrameElement>;\nimg: DetailedHTMLFactory<ImgHTMLAttributes<HTMLImageElement>, HTMLImageElement>;\ninput: DetailedHTMLFactory<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\nins: DetailedHTMLFactory<InsHTMLAttributes<HTMLModElement>, HTMLModElement>;\nkbd: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\nkeygen: DetailedHTMLFactory<KeygenHTMLAttributes<HTMLElement>, HTMLElement>;\nlabel: DetailedHTMLFactory<LabelHTMLAttributes<HTMLLabelElement>, HTMLLabelElement>;\nlegend: DetailedHTMLFactory<HTMLAttributes<HTMLLegendElement>, HTMLLegendElement>;\nli: DetailedHTMLFactory<LiHTMLAttributes<HTMLLIElement>, HTMLLIElement>;\nlink: DetailedHTMLFactory<LinkHTMLAttributes<HTMLLinkElement>, HTMLLinkElement>;\nmain: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\nmap: DetailedHTMLFactory<MapHTMLAttributes<HTMLMapElement>, HTMLMapElement>;\nmark: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\nmenu: DetailedHTMLFactory<MenuHTMLAttributes<HTMLElement>, HTMLElement>;\nmenuitem: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\nmeta: DetailedHTMLFactory<MetaHTMLAttributes<HTMLMetaElement>, HTMLMetaElement>;\nmeter: DetailedHTMLFactory<MeterHTMLAttributes<HTMLElement>, HTMLElement>;\nnav: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\nnoscript: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\nobject: DetailedHTMLFactory<ObjectHTMLAttributes<HTMLObjectElement>, HTMLObjectElement>;\nol: DetailedHTMLFactory<OlHTMLAttributes<HTMLOListElement>, HTMLOListElement>;\noptgroup: DetailedHTMLFactory<OptgroupHTMLAttributes<HTMLOptGroupElement>, HTMLOptGroupElement>;\noption: DetailedHTMLFactory<OptionHTMLAttributes<HTMLOptionElement>, HTMLOptionElement>;\noutput: DetailedHTMLFactory<OutputHTMLAttributes<HTMLElement>, HTMLElement>;\np: DetailedHTMLFactory<HTMLAttributes<HTMLParagraphElement>, HTMLParagraphElement>;\nparam: DetailedHTMLFactory<ParamHTMLAttributes<HTMLParamElement>, HTMLParamElement>;\npicture: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\npre: DetailedHTMLFactory<HTMLAttributes<HTMLPreElement>, HTMLPreElement>;\nprogress: DetailedHTMLFactory<ProgressHTMLAttributes<HTMLProgressElement>, HTMLProgressElement>;\nq: DetailedHTMLFactory<QuoteHTMLAttributes<HTMLQuoteElement>, HTMLQuoteElement>;\nrp: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\nrt: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\nruby: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\ns: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\nsamp: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\nslot: DetailedHTMLFactory<SlotHTMLAttributes<HTMLSlotElement>, HTMLSlotElement>;\nscript: DetailedHTMLFactory<ScriptHTMLAttributes<HTMLScriptElement>, HTMLScriptElement>;\nsection: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\nselect: DetailedHTMLFactory<SelectHTMLAttributes<HTMLSelectElement>, HTMLSelectElement>;\nsmall: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\nsource: DetailedHTMLFactory<SourceHTMLAttributes<HTMLSourceElement>, HTMLSourceElement>;\nspan: DetailedHTMLFactory<HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>;\nstrong: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\nstyle: DetailedHTMLFactory<StyleHTMLAttributes<HTMLStyleElement>, HTMLStyleElement>;\nsub: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\nsummary: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\nsup: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\ntable: DetailedHTMLFactory<TableHTMLAttributes<HTMLTableElement>, HTMLTableElement>;\ntemplate: DetailedHTMLFactory<HTMLAttributes<HTMLTemplateElement>, HTMLTemplateElement>;\ntbody: DetailedHTMLFactory<HTMLAttributes<HTMLTableSectionElement>, HTMLTableSectionElement>;\ntd: DetailedHTMLFactory<TdHTMLAttributes<HTMLTableDataCellElement>, HTMLTableDataCellElement>;\ntextarea: DetailedHTMLFactory<TextareaHTMLAttributes<HTMLTextAreaElement>, HTMLTextAreaElement>;\ntfoot: DetailedHTMLFactory<HTMLAttributes<HTMLTableSectionElement>, HTMLTableSectionElement>;\nth: DetailedHTMLFactory<ThHTMLAttributes<HTMLTableHeaderCellElement>, HTMLTableHeaderCellElement>;\nthead: DetailedHTMLFactory<HTMLAttributes<HTMLTableSectionElement>, HTMLTableSectionElement>;\ntime: DetailedHTMLFactory<TimeHTMLAttributes<HTMLElement>, HTMLElement>;\ntitle: DetailedHTMLFactory<HTMLAttributes<HTMLTitleElement>, HTMLTitleElement>;\ntr: DetailedHTMLFactory<HTMLAttributes<HTMLTableRowElement>, HTMLTableRowElement>;\ntrack: DetailedHTMLFactory<TrackHTMLAttributes<HTMLTrackElement>, HTMLTrackElement>;\nu: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\nul: DetailedHTMLFactory<HTMLAttributes<HTMLUListElement>, HTMLUListElement>;\n\"var\": DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\nvideo: DetailedHTMLFactory<VideoHTMLAttributes<HTMLVideoElement>, HTMLVideoElement>;\nwbr: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\nwebview: DetailedHTMLFactory<WebViewHTMLAttributes<HTMLWebViewElement>, HTMLWebViewElement>;\n}\n\ninterface ReactSVG {\nanimate: SVGFactory;\ncircle: SVGFactory;\nclipPath: SVGFactory;\ndefs: SVGFactory;\ndesc: SVGFactory;\nellipse: SVGFactory;\nfeBlend: SVGFactory;\nfeColorMatrix: SVGFactory;\nfeComponentTransfer: SVGFactory;\nfeComposite: SVGFactory;\nfeConvolveMatrix: SVGFactory;\nfeDiffuseLighting: SVGFactory;\nfeDisplacementMap: SVGFactory;\nfeDistantLight: SVGFactory;\nfeDropShadow: SVGFactory;\nfeFlood: SVGFactory;\nfeFuncA: SVGFactory;\nfeFuncB: SVGFactory;\nfeFuncG: SVGFactory;\nfeFuncR: SVGFactory;\nfeGaussianBlur: SVGFactory;\nfeImage: SVGFactory;\nfeMerge: SVGFactory;\nfeMergeNode: SVGFactory;\nfeMorphology: SVGFactory;\nfeOffset: SVGFactory;\nfePointLight: SVGFactory;\nfeSpecularLighting: SVGFactory;\nfeSpotLight: SVGFactory;\nfeTile: SVGFactory;\nfeTurbulence: SVGFactory;\nfilter: SVGFactory;\nforeignObject: SVGFactory;\ng: SVGFactory;\nimage: SVGFactory;\nline: SVGFactory;\nlinearGradient: SVGFactory;\nmarker: SVGFactory;\nmask: SVGFactory;\nmetadata: SVGFactory;\npath: SVGFactory;\npattern: SVGFactory;\npolygon: SVGFactory;\npolyline: SVGFactory;\nradialGradient: SVGFactory;\nrect: SVGFactory;\nstop: SVGFactory;\nsvg: SVGFactory;\nswitch: SVGFactory;\nsymbol: SVGFactory;\ntext: SVGFactory;\ntextPath: SVGFactory;\ntspan: SVGFactory;\nuse: SVGFactory;\nview: SVGFactory;\n}\n\ninterface ReactDOM extends ReactHTML, ReactSVG { }\n\n//\n// React.PropTypes\n// ----------------------------------------------------------------------\n\ntype Validator<T> = PropTypes.Validator<T>;\n\ntype Requireable<T> = PropTypes.Requireable<T>;\n\ntype ValidationMap<T> = PropTypes.ValidationMap<T>;\n\ntype WeakValidationMap<T> = {\n[K in keyof T]?: null extends T[K]\n? Validator<T[K] | null | undefined>\n: undefined extends T[K]\n? Validator<T[K] | null | undefined>\n: Validator<T[K]>\n};\n\ninterface ReactPropTypes {\nany: typeof PropTypes.any;\narray: typeof PropTypes.array;\nbool: typeof PropTypes.bool;\nfunc: typeof PropTypes.func;\nnumber: typeof PropTypes.number;\nobject: typeof PropTypes.object;\nstring: typeof PropTypes.string;\nnode: typeof PropTypes.node;\nelement: typeof PropTypes.element;\ninstanceOf: typeof PropTypes.instanceOf;\noneOf: typeof PropTypes.oneOf;\noneOfType: typeof PropTypes.oneOfType;\narrayOf: typeof PropTypes.arrayOf;\nobjectOf: typeof PropTypes.objectOf;\nshape: typeof PropTypes.shape;\nexact: typeof PropTypes.exact;\n}\n\n//\n// React.Children\n// ----------------------------------------------------------------------\n\ninterface ReactChildren {\nmap<T, C>(children: C | C[], fn: (child: C, index: number) => T):\nC extends null | undefined ? C : Array<Exclude<T, boolean | null | undefined>>;\nforEach<C>(children: C | C[], fn: (child: C, index: number) => void): void;\ncount(children: any): number;\nonly<C>(children: C): C extends any[] ? never : C;\ntoArray(children: ReactNode | ReactNode[]): Array<Exclude<ReactNode, boolean | null | undefined>>;\n}\n\n//\n// Browser Interfaces\n// https://github.com/nikeee/2048-typescript/blob/master/2048/js/touch.d.ts\n// ----------------------------------------------------------------------\n\ninterface AbstractView {\nstyleMedia: StyleMedia;\ndocument: Document;\n}\n\ninterface Touch {\nidentifier: number;\ntarget: EventTarget;\nscreenX: number;\nscreenY: number;\nclientX: number;\nclientY: number;\npageX: number;\npageY: number;\n}\n\ninterface TouchList {\n[index: number]: Touch;\nlength: number;\nitem(index: number): Touch;\nidentifiedTouch(identifier: number): Touch;\n}\n\n//\n// Error Interfaces\n// ----------------------------------------------------------------------\ninterface ErrorInfo {\n/**\n* Captures which component contained the exception, and its ancestors.\n*/\ncomponentStack: string;\n}\n}\n\n// naked 'any' type in a conditional type will short circuit and union both the then/else branches\n// so boolean is only resolved for T = any\ntype IsExactlyAny<T> = boolean extends (T extends never ? true : false) ? true : false;\n\ntype ExactlyAnyPropertyKeys<T> = { [K in keyof T]: IsExactlyAny<T[K]> extends true ? K : never }[keyof T];\ntype NotExactlyAnyPropertyKeys<T> = Exclude<keyof T, ExactlyAnyPropertyKeys<T>>;\n\n// Try to resolve ill-defined props like for JS users: props can be any, or sometimes objects with properties of type any\ntype MergePropTypes<P, T> =\n// Distribute over P in case it is a union type\nP extends any\n// If props is type any, use propTypes definitions\n? IsExactlyAny<P> extends true ? T :\n// If declared props have indexed properties, ignore inferred props entirely as keyof gets widened\nstring extends keyof P ? P :\n// Prefer declared types which are not exactly any\n& Pick<P, NotExactlyAnyPropertyKeys<P>>\n// For props which are exactly any, use the type inferred from propTypes if present\n& Pick<T, Exclude<keyof T, NotExactlyAnyPropertyKeys<P>>>\n// Keep leftover props not specified in propTypes\n& Pick<P, Exclude<keyof P, keyof T>>\n: never;\n\n// Any prop that has a default prop becomes optional, but its type is unchanged\n// Undeclared default props are augmented into the resulting allowable attributes\n// If declared props have indexed properties, ignore default props entirely as keyof gets widened\n// Wrap in an outer-level conditional type to allow distribution over props that are unions\ntype Defaultize<P, D> = P extends any\n? string extends keyof P ? P :\n& Pick<P, Exclude<keyof P, keyof D>>\n& Partial<Pick<P, Extract<keyof P, keyof D>>>\n& Partial<Pick<D, Exclude<keyof D, keyof P>>>\n: never;\n\ntype ReactManagedAttributes<C, P> = C extends { propTypes: infer T; defaultProps: infer D; }\n? Defaultize<MergePropTypes<P, PropTypes.InferProps<T>>, D>\n: C extends { propTypes: infer T; }\n? MergePropTypes<P, PropTypes.InferProps<T>>\n: C extends { defaultProps: infer D; }\n? Defaultize<P, D>\n: P;\n\ndeclare global {\nnamespace JSX {\n// tslint:disable-next-line:no-empty-interface\ninterface Element extends React.ReactElement<any, any> { }\ninterface ElementClass extends React.Component<any> {\nrender(): React.ReactNode;\n}\ninterface ElementAttributesProperty { props: {}; }\ninterface ElementChildrenAttribute { children: {}; }\n\n// We can't recurse forever because `type` can't be self-referential;\n// let's assume it's reasonable to do a single React.lazy() around a single React.memo() / vice-versa\ntype LibraryManagedAttributes<C, P> = C extends React.MemoExoticComponent<infer T> | React.LazyExoticComponent<infer T>\n? T extends React.MemoExoticComponent<infer U> | React.LazyExoticComponent<infer U>\n? ReactManagedAttributes<U, P>\n: ReactManagedAttributes<T, P>\n: ReactManagedAttributes<C, P>;\n\n// tslint:disable-next-line:no-empty-interface\ninterface IntrinsicAttributes extends React.Attributes { }\n// tslint:disable-next-line:no-empty-interface\ninterface IntrinsicClassAttributes<T> extends React.ClassAttributes<T> { }\n\ninterface IntrinsicElements {\n// HTML\na: React.DetailedHTMLProps<React.AnchorHTMLAttributes<HTMLAnchorElement>, HTMLAnchorElement>;\nabbr: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\naddress: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\narea: React.DetailedHTMLProps<React.AreaHTMLAttributes<HTMLAreaElement>, HTMLAreaElement>;\narticle: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\naside: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\naudio: React.DetailedHTMLProps<React.AudioHTMLAttributes<HTMLAudioElement>, HTMLAudioElement>;\nb: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\nbase: React.DetailedHTMLProps<React.BaseHTMLAttributes<HTMLBaseElement>, HTMLBaseElement>;\nbdi: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\nbdo: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\nbig: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\nblockquote: React.DetailedHTMLProps<React.BlockquoteHTMLAttributes<HTMLElement>, HTMLElement>;\nbody: React.DetailedHTMLProps<React.HTMLAttributes<HTMLBodyElement>, HTMLBodyElement>;\nbr: React.DetailedHTMLProps<React.HTMLAttributes<HTMLBRElement>, HTMLBRElement>;\nbutton: React.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;\ncanvas: React.DetailedHTMLProps<React.CanvasHTMLAttributes<HTMLCanvasElement>, HTMLCanvasElement>;\ncaption: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\ncite: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\ncode: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\ncol: React.DetailedHTMLProps<React.ColHTMLAttributes<HTMLTableColElement>, HTMLTableColElement>;\ncolgroup: React.DetailedHTMLProps<React.ColgroupHTMLAttributes<HTMLTableColElement>, HTMLTableColElement>;\ndata: React.DetailedHTMLProps<React.DataHTMLAttributes<HTMLDataElement>, HTMLDataElement>;\ndatalist: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDataListElement>, HTMLDataListElement>;\ndd: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\ndel: React.DetailedHTMLProps<React.DelHTMLAttributes<HTMLElement>, HTMLElement>;\ndetails: React.DetailedHTMLProps<React.DetailsHTMLAttributes<HTMLElement>, HTMLElement>;\ndfn: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\ndialog: React.DetailedHTMLProps<React.DialogHTMLAttributes<HTMLDialogElement>, HTMLDialogElement>;\ndiv: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>;\ndl: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDListElement>, HTMLDListElement>;\ndt: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\nem: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\nembed: React.DetailedHTMLProps<React.EmbedHTMLAttributes<HTMLEmbedElement>, HTMLEmbedElement>;\nfieldset: React.DetailedHTMLProps<React.FieldsetHTMLAttributes<HTMLFieldSetElement>, HTMLFieldSetElement>;\nfigcaption: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\nfigure: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\nfooter: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\nform: React.DetailedHTMLProps<React.FormHTMLAttributes<HTMLFormElement>, HTMLFormElement>;\nh1: React.DetailedHTMLProps<React.HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\nh2: React.DetailedHTMLProps<React.HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\nh3: React.DetailedHTMLProps<React.HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\nh4: React.DetailedHTMLProps<React.HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\nh5: React.DetailedHTMLProps<React.HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\nh6: React.DetailedHTMLProps<React.HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\nhead: React.DetailedHTMLProps<React.HTMLAttributes<HTMLHeadElement>, HTMLHeadElement>;\nheader: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\nhgroup: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\nhr: React.DetailedHTMLProps<React.HTMLAttributes<HTMLHRElement>, HTMLHRElement>;\nhtml: React.DetailedHTMLProps<React.HtmlHTMLAttributes<HTMLHtmlElement>, HTMLHtmlElement>;\ni: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\niframe: React.DetailedHTMLProps<React.IframeHTMLAttributes<HTMLIFrameElement>, HTMLIFrameElement>;\nimg: React.DetailedHTMLProps<React.ImgHTMLAttributes<HTMLImageElement>, HTMLImageElement>;\ninput: React.DetailedHTMLProps<React.InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\nins: React.DetailedHTMLProps<React.InsHTMLAttributes<HTMLModElement>, HTMLModElement>;\nkbd: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\nkeygen: React.DetailedHTMLProps<React.KeygenHTMLAttributes<HTMLElement>, HTMLElement>;\nlabel: React.DetailedHTMLProps<React.LabelHTMLAttributes<HTMLLabelElement>, HTMLLabelElement>;\nlegend: React.DetailedHTMLProps<React.HTMLAttributes<HTMLLegendElement>, HTMLLegendElement>;\nli: React.DetailedHTMLProps<React.LiHTMLAttributes<HTMLLIElement>, HTMLLIElement>;\nlink: React.DetailedHTMLProps<React.LinkHTMLAttributes<HTMLLinkElement>, HTMLLinkElement>;\nmain: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\nmap: React.DetailedHTMLProps<React.MapHTMLAttributes<HTMLMapElement>, HTMLMapElement>;\nmark: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\nmenu: React.DetailedHTMLProps<React.MenuHTMLAttributes<HTMLElement>, HTMLElement>;\nmenuitem: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\nmeta: React.DetailedHTMLProps<React.MetaHTMLAttributes<HTMLMetaElement>, HTMLMetaElement>;\nmeter: React.DetailedHTMLProps<React.MeterHTMLAttributes<HTMLElement>, HTMLElement>;\nnav: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\nnoindex: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\nnoscript: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\nobject: React.DetailedHTMLProps<React.ObjectHTMLAttributes<HTMLObjectElement>, HTMLObjectElement>;\nol: React.DetailedHTMLProps<React.OlHTMLAttributes<HTMLOListElement>, HTMLOListElement>;\noptgroup: React.DetailedHTMLProps<React.OptgroupHTMLAttributes<HTMLOptGroupElement>, HTMLOptGroupElement>;\noption: React.DetailedHTMLProps<React.OptionHTMLAttributes<HTMLOptionElement>, HTMLOptionElement>;\noutput: React.DetailedHTMLProps<React.OutputHTMLAttributes<HTMLElement>, HTMLElement>;\np: React.DetailedHTMLProps<React.HTMLAttributes<HTMLParagraphElement>, HTMLParagraphElement>;\nparam: React.DetailedHTMLProps<React.ParamHTMLAttributes<HTMLParamElement>, HTMLParamElement>;\npicture: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\npre: React.DetailedHTMLProps<React.HTMLAttributes<HTMLPreElement>, HTMLPreElement>;\nprogress: React.DetailedHTMLProps<React.ProgressHTMLAttributes<HTMLProgressElement>, HTMLProgressElement>;\nq: React.DetailedHTMLProps<React.QuoteHTMLAttributes<HTMLQuoteElement>, HTMLQuoteElement>;\nrp: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\nrt: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\nruby: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\ns: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\nsamp: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\nslot: React.DetailedHTMLProps<React.SlotHTMLAttributes<HTMLSlotElement>, HTMLSlotElement>;\nscript: React.DetailedHTMLProps<React.ScriptHTMLAttributes<HTMLScriptElement>, HTMLScriptElement>;\nsection: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\nselect: React.DetailedHTMLProps<React.SelectHTMLAttributes<HTMLSelectElement>, HTMLSelectElement>;\nsmall: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\nsource: React.DetailedHTMLProps<React.SourceHTMLAttributes<HTMLSourceElement>, HTMLSourceElement>;\nspan: React.DetailedHTMLProps<React.HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>;\nstrong: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\nstyle: React.DetailedHTMLProps<React.StyleHTMLAttributes<HTMLStyleElement>, HTMLStyleElement>;\nsub: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\nsummary: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\nsup: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\ntable: React.DetailedHTMLProps<React.TableHTMLAttributes<HTMLTableElement>, HTMLTableElement>;\ntemplate: React.DetailedHTMLProps<React.HTMLAttributes<HTMLTemplateElement>, HTMLTemplateElement>;\ntbody: React.DetailedHTMLProps<React.HTMLAttributes<HTMLTableSectionElement>, HTMLTableSectionElement>;\ntd: React.DetailedHTMLProps<React.TdHTMLAttributes<HTMLTableDataCellElement>, HTMLTableDataCellElement>;\ntextarea: React.DetailedHTMLProps<React.TextareaHTMLAttributes<HTMLTextAreaElement>, HTMLTextAreaElement>;\ntfoot: React.DetailedHTMLProps<React.HTMLAttributes<HTMLTableSectionElement>, HTMLTableSectionElement>;\nth: React.DetailedHTMLProps<React.ThHTMLAttributes<HTMLTableHeaderCellElement>, HTMLTableHeaderCellElement>;\nthead: React.DetailedHTMLProps<React.HTMLAttributes<HTMLTableSectionElement>, HTMLTableSectionElement>;\ntime: React.DetailedHTMLProps<React.TimeHTMLAttributes<HTMLElement>, HTMLElement>;\ntitle: React.DetailedHTMLProps<React.HTMLAttributes<HTMLTitleElement>, HTMLTitleElement>;\ntr: React.DetailedHTMLProps<React.HTMLAttributes<HTMLTableRowElement>, HTMLTableRowElement>;\ntrack: React.DetailedHTMLProps<React.TrackHTMLAttributes<HTMLTrackElement>, HTMLTrackElement>;\nu: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\nul: React.DetailedHTMLProps<React.HTMLAttributes<HTMLUListElement>, HTMLUListElement>;\n\"var\": React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\nvideo: React.DetailedHTMLProps<React.VideoHTMLAttributes<HTMLVideoElement>, HTMLVideoElement>;\nwbr: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\nwebview: React.DetailedHTMLProps<React.WebViewHTMLAttributes<HTMLWebViewElement>, HTMLWebViewElement>;\n\n// SVG\nsvg: React.SVGProps<SVGSVGElement>;\n\nanimate: React.SVGProps<SVGElement>; // TODO: It is SVGAnimateElement but is not in TypeScript's lib.dom.d.ts for now.\nanimateMotion: React.SVGProps<SVGElement>;\nanimateTransform: React.SVGProps<SVGElement>; // TODO: It is SVGAnimateTransformElement but is not in TypeScript's lib.dom.d.ts for now.\ncircle: React.SVGProps<SVGCircleElement>;\nclipPath: React.SVGProps<SVGClipPathElement>;\ndefs: React.SVGProps<SVGDefsElement>;\ndesc: React.SVGProps<SVGDescElement>;\nellipse: React.SVGProps<SVGEllipseElement>;\nfeBlend: React.SVGProps<SVGFEBlendElement>;\nfeColorMatrix: React.SVGProps<SVGFEColorMatrixElement>;\nfeComponentTransfer: React.SVGProps<SVGFEComponentTransferElement>;\nfeComposite: React.SVGProps<SVGFECompositeElement>;\nfeConvolveMatrix: React.SVGProps<SVGFEConvolveMatrixElement>;\nfeDiffuseLighting: React.SVGProps<SVGFEDiffuseLightingElement>;\nfeDisplacementMap: React.SVGProps<SVGFEDisplacementMapElement>;\nfeDistantLight: React.SVGProps<SVGFEDistantLightElement>;\nfeDropShadow: React.SVGProps<SVGFEDropShadowElement>;\nfeFlood: React.SVGProps<SVGFEFloodElement>;\nfeFuncA: React.SVGProps<SVGFEFuncAElement>;\nfeFuncB: React.SVGProps<SVGFEFuncBElement>;\nfeFuncG: React.SVGProps<SVGFEFuncGElement>;\nfeFuncR: React.SVGProps<SVGFEFuncRElement>;\nfeGaussianBlur: React.SVGProps<SVGFEGaussianBlurElement>;\nfeImage: React.SVGProps<SVGFEImageElement>;\nfeMerge: React.SVGProps<SVGFEMergeElement>;\nfeMergeNode: React.SVGProps<SVGFEMergeNodeElement>;\nfeMorphology: React.SVGProps<SVGFEMorphologyElement>;\nfeOffset: React.SVGProps<SVGFEOffsetElement>;\nfePointLight: React.SVGProps<SVGFEPointLightElement>;\nfeSpecularLighting: React.SVGProps<SVGFESpecularLightingElement>;\nfeSpotLight: React.SVGProps<SVGFESpotLightElement>;\nfeTile: React.SVGProps<SVGFETileElement>;\nfeTurbulence: React.SVGProps<SVGFETurbulenceElement>;\nfilter: React.SVGProps<SVGFilterElement>;\nforeignObject: React.SVGProps<SVGForeignObjectElement>;\ng: React.SVGProps<SVGGElement>;\nimage: React.SVGProps<SVGImageElement>;\nline: React.SVGProps<SVGLineElement>;\nlinearGradient: React.SVGProps<SVGLinearGradientElement>;\nmarker: React.SVGProps<SVGMarkerElement>;\nmask: React.SVGProps<SVGMaskElement>;\nmetadata: React.SVGProps<SVGMetadataElement>;\nmpath: React.SVGProps<SVGElement>;\npath: React.SVGProps<SVGPathElement>;\npattern: React.SVGProps<SVGPatternElement>;\npolygon: React.SVGProps<SVGPolygonElement>;\npolyline: React.SVGProps<SVGPolylineElement>;\nradialGradient: React.SVGProps<SVGRadialGradientElement>;\nrect: React.SVGProps<SVGRectElement>;\nstop: React.SVGProps<SVGStopElement>;\nswitch: React.SVGProps<SVGSwitchElement>;\nsymbol: React.SVGProps<SVGSymbolElement>;\ntext: React.SVGProps<SVGTextElement>;\ntextPath: React.SVGProps<SVGTextPathElement>;\ntspan: React.SVGProps<SVGTSpanElement>;\nuse: React.SVGProps<SVGUseElement>;\nview: React.SVGProps<SVGViewElement>;\n}\n}\n}\n",
    "react/global.d.ts": "/*\nReact projects that don't include the DOM library need these interfaces to compile.\nReact Native applications use React, but there is no DOM available. The JavaScript runtime\nis ES6/ES2015 only. These definitions allow such projects to compile with only `--lib ES6`.\n\nWarning: all of these interfaces are empty. If you want type definitions for various properties\n(such as HTMLInputElement.prototype.value), you need to add `--lib DOM` (via command line or tsconfig.json).\n*/\n\ninterface Event { }\ninterface AnimationEvent extends Event { }\ninterface ClipboardEvent extends Event { }\ninterface CompositionEvent extends Event { }\ninterface DragEvent extends Event { }\ninterface FocusEvent extends Event { }\ninterface KeyboardEvent extends Event { }\ninterface MouseEvent extends Event { }\ninterface TouchEvent extends Event { }\ninterface PointerEvent extends Event { }\ninterface TransitionEvent extends Event { }\ninterface UIEvent extends Event { }\ninterface WheelEvent extends Event { }\n\ninterface EventTarget { }\ninterface Document { }\ninterface DataTransfer { }\ninterface StyleMedia { }\n\ninterface Element { }\ninterface DocumentFragment { }\n\ninterface HTMLElement extends Element { }\ninterface HTMLAnchorElement extends HTMLElement { }\ninterface HTMLAreaElement extends HTMLElement { }\ninterface HTMLAudioElement extends HTMLElement { }\ninterface HTMLBaseElement extends HTMLElement { }\ninterface HTMLBodyElement extends HTMLElement { }\ninterface HTMLBRElement extends HTMLElement { }\ninterface HTMLButtonElement extends HTMLElement { }\ninterface HTMLCanvasElement extends HTMLElement { }\ninterface HTMLDataElement extends HTMLElement { }\ninterface HTMLDataListElement extends HTMLElement { }\ninterface HTMLDialogElement extends HTMLElement { }\ninterface HTMLDivElement extends HTMLElement { }\ninterface HTMLDListElement extends HTMLElement { }\ninterface HTMLEmbedElement extends HTMLElement { }\ninterface HTMLFieldSetElement extends HTMLElement { }\ninterface HTMLFormElement extends HTMLElement { }\ninterface HTMLHeadingElement extends HTMLElement { }\ninterface HTMLHeadElement extends HTMLElement { }\ninterface HTMLHRElement extends HTMLElement { }\ninterface HTMLHtmlElement extends HTMLElement { }\ninterface HTMLIFrameElement extends HTMLElement { }\ninterface HTMLImageElement extends HTMLElement { }\ninterface HTMLInputElement extends HTMLElement { }\ninterface HTMLModElement extends HTMLElement { }\ninterface HTMLLabelElement extends HTMLElement { }\ninterface HTMLLegendElement extends HTMLElement { }\ninterface HTMLLIElement extends HTMLElement { }\ninterface HTMLLinkElement extends HTMLElement { }\ninterface HTMLMapElement extends HTMLElement { }\ninterface HTMLMetaElement extends HTMLElement { }\ninterface HTMLObjectElement extends HTMLElement { }\ninterface HTMLOListElement extends HTMLElement { }\ninterface HTMLOptGroupElement extends HTMLElement { }\ninterface HTMLOptionElement extends HTMLElement { }\ninterface HTMLParagraphElement extends HTMLElement { }\ninterface HTMLParamElement extends HTMLElement { }\ninterface HTMLPreElement extends HTMLElement { }\ninterface HTMLProgressElement extends HTMLElement { }\ninterface HTMLQuoteElement extends HTMLElement { }\ninterface HTMLSlotElement extends HTMLElement { }\ninterface HTMLScriptElement extends HTMLElement { }\ninterface HTMLSelectElement extends HTMLElement { }\ninterface HTMLSourceElement extends HTMLElement { }\ninterface HTMLSpanElement extends HTMLElement { }\ninterface HTMLStyleElement extends HTMLElement { }\ninterface HTMLTableElement extends HTMLElement { }\ninterface HTMLTableColElement extends HTMLElement { }\ninterface HTMLTableDataCellElement extends HTMLElement { }\ninterface HTMLTableHeaderCellElement extends HTMLElement { }\ninterface HTMLTableRowElement extends HTMLElement { }\ninterface HTMLTableSectionElement extends HTMLElement { }\ninterface HTMLTemplateElement extends HTMLElement { }\ninterface HTMLTextAreaElement extends HTMLElement { }\ninterface HTMLTitleElement extends HTMLElement { }\ninterface HTMLTrackElement extends HTMLElement { }\ninterface HTMLUListElement extends HTMLElement { }\ninterface HTMLVideoElement extends HTMLElement { }\ninterface HTMLWebViewElement extends HTMLElement { }\n\ninterface SVGElement extends Element { }\ninterface SVGSVGElement extends SVGElement { }\ninterface SVGCircleElement extends SVGElement { }\ninterface SVGClipPathElement extends SVGElement { }\ninterface SVGDefsElement extends SVGElement { }\ninterface SVGDescElement extends SVGElement { }\ninterface SVGEllipseElement extends SVGElement { }\ninterface SVGFEBlendElement extends SVGElement { }\ninterface SVGFEColorMatrixElement extends SVGElement { }\ninterface SVGFEComponentTransferElement extends SVGElement { }\ninterface SVGFECompositeElement extends SVGElement { }\ninterface SVGFEConvolveMatrixElement extends SVGElement { }\ninterface SVGFEDiffuseLightingElement extends SVGElement { }\ninterface SVGFEDisplacementMapElement extends SVGElement { }\ninterface SVGFEDistantLightElement extends SVGElement { }\ninterface SVGFEDropShadowElement extends SVGElement { }\ninterface SVGFEFloodElement extends SVGElement { }\ninterface SVGFEFuncAElement extends SVGElement { }\ninterface SVGFEFuncBElement extends SVGElement { }\ninterface SVGFEFuncGElement extends SVGElement { }\ninterface SVGFEFuncRElement extends SVGElement { }\ninterface SVGFEGaussianBlurElement extends SVGElement { }\ninterface SVGFEImageElement extends SVGElement { }\ninterface SVGFEMergeElement extends SVGElement { }\ninterface SVGFEMergeNodeElement extends SVGElement { }\ninterface SVGFEMorphologyElement extends SVGElement { }\ninterface SVGFEOffsetElement extends SVGElement { }\ninterface SVGFEPointLightElement extends SVGElement { }\ninterface SVGFESpecularLightingElement extends SVGElement { }\ninterface SVGFESpotLightElement extends SVGElement { }\ninterface SVGFETileElement extends SVGElement { }\ninterface SVGFETurbulenceElement extends SVGElement { }\ninterface SVGFilterElement extends SVGElement { }\ninterface SVGForeignObjectElement extends SVGElement { }\ninterface SVGGElement extends SVGElement { }\ninterface SVGImageElement extends SVGElement { }\ninterface SVGLineElement extends SVGElement { }\ninterface SVGLinearGradientElement extends SVGElement { }\ninterface SVGMarkerElement extends SVGElement { }\ninterface SVGMaskElement extends SVGElement { }\ninterface SVGMetadataElement extends SVGElement { }\ninterface SVGPathElement extends SVGElement { }\ninterface SVGPatternElement extends SVGElement { }\ninterface SVGPolygonElement extends SVGElement { }\ninterface SVGPolylineElement extends SVGElement { }\ninterface SVGRadialGradientElement extends SVGElement { }\ninterface SVGRectElement extends SVGElement { }\ninterface SVGStopElement extends SVGElement { }\ninterface SVGSwitchElement extends SVGElement { }\ninterface SVGSymbolElement extends SVGElement { }\ninterface SVGTextElement extends SVGElement { }\ninterface SVGTextPathElement extends SVGElement { }\ninterface SVGTSpanElement extends SVGElement { }\ninterface SVGUseElement extends SVGElement { }\ninterface SVGViewElement extends SVGElement { }\n\ninterface Text { }\ninterface TouchList { }\ninterface WebGLRenderingContext { }\ninterface WebGL2RenderingContext { }\n"
}
