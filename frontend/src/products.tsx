/* eslint @typescript-eslint/explicit-module-boundary-types: 0 */
// Generated by @posthog/esbuilder/utils.mjs, based on product folder manifests under products/*/manifest.tsx
// The imports are preserved between builds, so please update if any are missing or extra.

import {
    IconChat,
    IconCursor,
    IconDashboard,
    IconExternal,
    IconFlask,
    IconGraph,
    IconMessage,
    IconNotebook,
    IconPeople,
    IconRewindPlay,
    IconRocket,
    IconToggle,
} from '@posthog/icons'
import { combineUrl } from 'kea-router'
import type { AlertType } from 'lib/components/Alerts/types'
import { FEATURE_FLAGS, INSIGHT_VISUAL_ORDER, PRODUCT_VISUAL_ORDER } from 'lib/constants'
import { toParams } from 'lib/utils'
import type { Params } from 'scenes/sceneTypes'
import type { SurveysTabs } from 'scenes/surveys/surveysLogic'
import { urls } from 'scenes/urls'

import {
    ExperimentFunnelsQuery,
    ExperimentTrendsQuery,
    FileSystemImport,
    HogQLFilters,
    HogQLVariable,
    Node,
    NodeKind,
} from '~/queries/schema/schema-general'

import { isDataTableNode, isDataVisualizationNode, isHogQLQuery } from './queries/utils'
import { ActionType, DashboardType, InsightShortId, InsightType, RecordingUniversalFilters, ReplayTabs } from './types'

/** This const is auto-generated, as is the whole file */
export const productScenes: Record<string, () => Promise<any>> = {
    EarlyAccessFeatures: () => import('../../products/early_access_features/frontend/EarlyAccessFeatures'),
    EarlyAccessFeature: () => import('../../products/early_access_features/frontend/EarlyAccessFeature'),
    Game368Hedgehogs: () => import('../../products/games/368Hedgehogs/368Hedgehogs'),
    Links: () => import('../../products/links/frontend/LinksScene'),
    Link: () => import('../../products/links/frontend/LinkScene'),
    LLMObservability: () => import('../../products/llm_observability/frontend/LLMObservabilityScene'),
    LLMObservabilityTrace: () => import('../../products/llm_observability/frontend/LLMObservabilityTraceScene'),
    LLMObservabilityUsers: () => import('../../products/llm_observability/frontend/LLMObservabilityUsers'),
    LLMObservabilityPlayground: () =>
        import('../../products/llm_observability/frontend/LLMObservabilityPlaygroundScene'),
    Logs: () => import('../../products/logs/frontend/LogsScene'),
    MessagingCampaigns: () => import('../../products/messaging/frontend/Campaigns'),
    MessagingBroadcasts: () => import('../../products/messaging/frontend/Broadcasts'),
    MessagingLibrary: () => import('../../products/messaging/frontend/library/MessageLibrary'),
    MessagingLibraryTemplate: () => import('../../products/messaging/frontend/library/MessageTemplate'),
    RevenueAnalytics: () => import('../../products/revenue_analytics/frontend/RevenueAnalyticsScene'),
    UserInterviews: () => import('../../products/user_interviews/frontend/UserInterviews'),
    UserInterview: () => import('../../products/user_interviews/frontend/UserInterview'),
}

/** This const is auto-generated, as is the whole file */
export const productRoutes: Record<string, [string, string]> = {
    '/early_access_features': ['EarlyAccessFeatures', 'earlyAccessFeatures'],
    '/early_access_features/:id': ['EarlyAccessFeature', 'earlyAccessFeature'],
    '/games/368hedgehogs': ['Game368Hedgehogs', 'game368Hedgehogs'],
    '/links': ['Links', 'links'],
    '/link/:id': ['Link', 'link'],
    '/llm-observability': ['LLMObservability', 'llmObservability'],
    '/llm-observability/dashboard': ['LLMObservability', 'llmObservabilityDashboard'],
    '/llm-observability/generations': ['LLMObservability', 'llmObservabilityGenerations'],
    '/llm-observability/traces': ['LLMObservability', 'llmObservabilityTraces'],
    '/llm-observability/traces/:id': ['LLMObservabilityTrace', 'llmObservability'],
    '/llm-observability/users': ['LLMObservability', 'llmObservabilityUsers'],
    '/llm-observability/playground': ['LLMObservability', 'llmObservabilityPlayground'],
    '/logs': ['Logs', 'logs'],
    '/messaging/campaigns': ['MessagingCampaigns', 'messagingCampaigns'],
    '/messaging/campaigns/:id': ['MessagingCampaigns', 'messagingCampaign'],
    '/messaging/campaigns/new': ['MessagingCampaigns', 'messagingCampaignNew'],
    '/messaging/broadcasts': ['MessagingBroadcasts', 'messagingBroadcasts'],
    '/messaging/broadcasts/:id': ['MessagingBroadcasts', 'messagingBroadcast'],
    '/messaging/broadcasts/new': ['MessagingBroadcasts', 'messagingBroadcastNew'],
    '/messaging/library': ['MessagingLibrary', 'messagingLibrary'],
    '/messaging/library/templates/:id': ['MessagingLibraryTemplate', 'messagingLibraryTemplate'],
    '/messaging/library/templates/new': ['MessagingLibraryTemplate', 'messagingLibraryTemplate'],
    '/messaging/library/templates/new?messageId=:messageId': [
        'MessagingLibraryTemplate',
        'messagingLibraryTemplateFromMessage',
    ],
    '/revenue_analytics': ['RevenueAnalytics', 'revenueAnalytics'],
    '/user_interviews': ['UserInterviews', 'userInterviews'],
    '/user_interviews/:id': ['UserInterview', 'userInterview'],
}

/** This const is auto-generated, as is the whole file */
export const productRedirects: Record<
    string,
    string | ((params: Params, searchParams: Params, hashParams: Params) => string)
> = { '/messaging': '/messaging/broadcasts' }

/** This const is auto-generated, as is the whole file */
export const productConfiguration: Record<string, any> = {
    EarlyAccessFeatures: {
        name: 'Early access features',
        projectBased: true,
        defaultDocsPath: '/docs/feature-flags/early-access-feature-management',
        activityScope: 'EarlyAccessFeature',
    },
    EarlyAccessFeature: {
        name: 'Early access feature',
        projectBased: true,
        defaultDocsPath: '/docs/feature-flags/early-access-feature-management',
        activityScope: 'EarlyAccessFeature',
    },
    Game368Hedgehogs: { name: '368Hedgehogs', projectBased: true, activityScope: 'Games' },
    Links: { name: 'Links', projectBased: true, defaultDocsPath: '/docs/link-tracking', activityScope: 'Link' },
    Link: { name: 'Link', projectBased: true, defaultDocsPath: '/docs/link-tracking', activityScope: 'Link' },
    LLMObservability: {
        projectBased: true,
        name: 'LLM observability',
        activityScope: 'LLMObservability',
        layout: 'app-container',
        defaultDocsPath: '/docs/ai-engineering/observability',
    },
    LLMObservabilityTrace: {
        projectBased: true,
        name: 'LLM observability trace',
        activityScope: 'LLMObservability',
        layout: 'app-container',
        defaultDocsPath: '/docs/ai-engineering/observability',
    },
    LLMObservabilityUsers: {
        projectBased: true,
        name: 'LLM observability users',
        activityScope: 'LLMObservability',
        layout: 'app-container',
        defaultDocsPath: '/docs/ai-engineering/observability',
    },
    LLMObservabilityPlayground: {
        projectBased: true,
        name: 'LLM playground',
        activityScope: 'LLMObservability',
        layout: 'app-container',
        defaultDocsPath: '/docs/ai-engineering/observability',
    },
    Logs: { projectBased: true, name: 'Logs', activityScope: 'Logs', layout: 'app-container' },
    MessagingCampaigns: { name: 'Messaging', projectBased: true },
    MessagingBroadcasts: { name: 'Messaging', projectBased: true },
    MessagingLibrary: { name: 'Messaging', projectBased: true },
    MessagingLibraryTemplate: { name: 'Messaging', projectBased: true },
    RevenueAnalytics: {
        name: 'Revenue Analytics',
        projectBased: true,
        defaultDocsPath: '/docs/web-analytics/revenue-analytics',
        activityScope: 'RevenueAnalytics',
    },
    UserInterviews: { name: 'User interviews', projectBased: true, activityScope: 'UserInterview' },
    UserInterview: { name: 'User interview', projectBased: true, activityScope: 'UserInterview' },
}

/** This const is auto-generated, as is the whole file */
export const productUrls = {
    createAction: (): string => `/data-management/actions/new`,
    duplicateAction: (action: ActionType | null): string => {
        const queryParams = action ? `?copy=${encodeURIComponent(JSON.stringify(action))}` : ''
        return `/data-management/actions/new/${queryParams}`
    },
    action: (id: string | number): string => `/data-management/actions/${id}`,
    actions: (): string => '/data-management/actions',
    cohort: (id: string | number): string => `/cohorts/${id}`,
    cohorts: (): string => '/cohorts',
    dashboards: (): string => '/dashboard',
    dashboard: (id: string | number, highlightInsightId?: string): string =>
        combineUrl(`/dashboard/${id}`, highlightInsightId ? { highlightInsightId } : {}).url,
    dashboardTextTile: (id: string | number, textTileId: string | number): string =>
        `${urls.dashboard(id)}/text-tiles/${textTileId}`,
    dashboardSharing: (id: string | number): string => `/dashboard/${id}/sharing`,
    dashboardSubscriptions: (id: string | number): string => `/dashboard/${id}/subscriptions`,
    dashboardSubscription: (id: string | number, subscriptionId: string): string =>
        `/dashboard/${id}/subscriptions/${subscriptionId}`,
    sharedDashboard: (shareToken: string): string => `/shared_dashboard/${shareToken}`,
    earlyAccessFeatures: (): string => '/early_access_features',
    earlyAccessFeature: (id: string): string => `/early_access_features/${id}`,
    experiment: (
        id: string | number,
        formMode?: string | null,
        options?: {
            metric?: ExperimentTrendsQuery | ExperimentFunnelsQuery
            name?: string
        }
    ): string => {
        const baseUrl = formMode ? `/experiments/${id}/${formMode}` : `/experiments/${id}`
        return `${baseUrl}${options ? `?${toParams(options)}` : ''}`
    },
    experiments: (): string => '/experiments',
    experimentsSharedMetrics: (): string => '/experiments/shared-metrics',
    experimentsSharedMetric: (id: string | number, action?: string): string =>
        action ? `/experiments/shared-metrics/${id}/${action}` : `/experiments/shared-metrics/${id}`,
    featureFlags: (tab?: string): string => `/feature_flags${tab ? `?tab=${tab}` : ''}`,
    featureFlag: (id: string | number): string => `/feature_flags/${id}`,
    featureFlagDuplicate: (sourceId: number | string | null): string => `/feature_flags/new?sourceId=${sourceId}`,
    game368hedgehogs: (): string => `/games/368hedgehogs`,
    groups: (groupTypeIndex: string | number): string => `/groups/${groupTypeIndex}`,
    group: (groupTypeIndex: string | number, groupKey: string, encode: boolean = true, tab?: string | null): string =>
        `/groups/${groupTypeIndex}/${encode ? encodeURIComponent(groupKey) : groupKey}${tab ? `/${tab}` : ''}`,
    links: (): string => '/links',
    link: (id: string): string => `/links/${id}`,
    llmObservabilityDashboard: (): string => '/llm-observability',
    llmObservabilityGenerations: (): string => '/llm-observability/generations',
    llmObservabilityTraces: (): string => '/llm-observability/traces',
    llmObservabilityTrace: (
        id: string,
        params?: {
            event?: string
            timestamp?: string
        }
    ): string => {
        const queryParams = new URLSearchParams(params)
        const stringifiedParams = queryParams.toString()
        return `/llm-observability/traces/${id}${stringifiedParams ? `?${stringifiedParams}` : ''}`
    },
    llmObservabilityUsers: (): string => '/llm-observability/users',
    llmObservabilityPlayground: (): string => '/llm-observability/playground',
    logs: (): string => '/logs',
    messagingCampaigns: (): string => '/messaging/campaigns',
    messagingCampaign: (id?: string): string => `/messaging/campaigns/${id}`,
    messagingCampaignNew: (): string => '/messaging/campaigns/new',
    messagingBroadcasts: (): string => '/messaging/broadcasts',
    messagingBroadcast: (id?: string): string => `/messaging/broadcasts/${id}`,
    messagingBroadcastNew: (): string => '/messaging/broadcasts/new',
    messagingLibrary: (): string => '/messaging/library',
    messagingLibraryMessage: (id: string): string => `/messaging/library/messages/${id}`,
    messagingLibraryTemplate: (id?: string): string => `/messaging/library/templates/${id}`,
    messagingLibraryTemplateNew: (): string => '/messaging/library/templates/new',
    messagingLibraryTemplateFromMessage: (id?: string): string => `/messaging/library/templates/new?messageId=${id}`,
    notebooks: (): string => '/notebooks',
    notebook: (shortId: string): string => `/notebooks/${shortId}`,
    canvas: (): string => `/canvas`,
    personByDistinctId: (id: string, encode: boolean = true): string =>
        encode ? `/person/${encodeURIComponent(id)}` : `/person/${id}`,
    personByUUID: (uuid: string, encode: boolean = true): string =>
        encode ? `/persons/${encodeURIComponent(uuid)}` : `/persons/${uuid}`,
    persons: (): string => '/persons',
    insights: (): string => '/insights',
    insightNew: ({
        type,
        dashboardId,
        query,
    }: {
        type?: InsightType
        dashboardId?: DashboardType['id'] | null
        query?: Node
    } = {}): string => {
        if (isHogQLQuery(query)) {
            return urls.sqlEditor(query.query)
        }
        if ((isDataVisualizationNode(query) || isDataTableNode(query)) && isHogQLQuery(query.source)) {
            return urls.sqlEditor(query.source.query)
        }
        return combineUrl('/insights/new', dashboardId ? { dashboard: dashboardId } : {}, {
            ...(type ? { insight: type } : {}),
            ...(query ? { q: typeof query === 'string' ? query : JSON.stringify(query) } : {}),
        }).url
    },
    insightNewHogQL: ({ query, filters }: { query: string; filters?: HogQLFilters }): string =>
        urls.insightNew({
            query: { kind: NodeKind.DataTableNode, source: { kind: 'HogQLQuery', query, filters } } as any,
        }),
    insightEdit: (id: InsightShortId): string => `/insights/${id}/edit`,
    insightView: (
        id: InsightShortId,
        dashboardId?: number,
        variablesOverride?: Record<string, HogQLVariable>
    ): string => {
        const params = [
            { param: 'dashboard', value: dashboardId },
            { param: 'variables_override', value: variablesOverride },
        ]
            .filter((n) => Boolean(n.value))
            .map((n) => `${n.param}=${encodeURIComponent(JSON.stringify(n.value))}`)
            .join('&')
        return `/insights/${id}${params.length ? `?${params}` : ''}`
    },
    insightSubcriptions: (id: InsightShortId): string => `/insights/${id}/subscriptions`,
    insightSubcription: (id: InsightShortId, subscriptionId: string): string =>
        `/insights/${id}/subscriptions/${subscriptionId}`,
    insightSharing: (id: InsightShortId): string => `/insights/${id}/sharing`,
    savedInsights: (tab?: string): string => `/insights${tab ? `?tab=${tab}` : ''}`,
    insightAlerts: (insightShortId: InsightShortId): string => `/insights/${insightShortId}/alerts`,
    insightAlert: (insightShortId: InsightShortId, alertId: AlertType['id']): string =>
        `/insights/${insightShortId}/alerts?alert_id=${alertId}`,
    alert: (alertId: string): string => `/insights?tab=alerts&alert_id=${alertId}`,
    alerts: (): string => `/insights?tab=alerts`,
    replay: (
        tab?: ReplayTabs,
        filters?: Partial<RecordingUniversalFilters>,
        sessionRecordingId?: string,
        order?: string
    ): string =>
        combineUrl(tab ? `/replay/${tab}` : '/replay/home', {
            ...(filters ? { filters } : {}),
            ...(sessionRecordingId ? { sessionRecordingId } : {}),
            ...(order ? { order } : {}),
        }).url,
    replayPlaylist: (id: string): string => `/replay/playlists/${id}`,
    replaySingle: (id: string): string => `/replay/${id}`,
    replayFilePlayback: (): string => '/replay/file-playback',
    replaySettings: (sectionId?: string): string => `/replay/settings${sectionId ? `?sectionId=${sectionId}` : ''}`,
    revenueAnalytics: (): string => '/revenue_analytics',
    surveys: (tab?: SurveysTabs): string => `/surveys${tab ? `?tab=${tab}` : ''}`,
    survey: (id: string): string => `/surveys/${id}`,
    surveyTemplates: (): string => '/survey_templates',
    userInterviews: (): string => '/user_interviews',
    userInterview: (id: string): string => `/user_interviews/${id}`,
    webAnalytics: (): string => `/web`,
    webAnalyticsWebVitals: (): string => `/web/web-vitals`,
    webAnalyticsPageReports: (): string => `/web/page-reports`,
    webAnalyticsMarketing: (): string => `/web/marketing`,
}

/** This const is auto-generated, as is the whole file */
export const fileSystemTypes = {
    action: { name: 'Action', icon: <IconCursor />, href: (ref: string) => urls.action(ref), filterKey: 'action' },
    cohort: { name: 'Cohort', icon: <IconPeople />, href: (ref: string) => urls.cohort(ref), filterKey: 'cohort' },
    dashboard: {
        name: 'Dashboard',
        icon: <IconDashboard />,
        href: (ref: string) => urls.dashboard(ref),
        iconColor: ['var(--product-dashboards-light)'],
        filterKey: 'dashboard',
    },
    early_access_feature: {
        name: 'Early access feature',
        icon: <IconRocket />,
        href: (ref: string) => urls.earlyAccessFeature(ref),
        iconColor: ['var(--product-early-access-features-light)', 'var(--product-early-access-features-dark)'],
        filterKey: 'early_access_feature',
    },
    experiment: {
        name: 'Experiment',
        icon: <IconFlask />,
        href: (ref: string) => urls.experiment(ref),
        iconColor: ['var(--product-experiments-light)'],
        filterKey: 'experiment',
    },
    feature_flag: {
        name: 'Feature flag',
        icon: <IconToggle />,
        href: (ref: string) => urls.featureFlag(ref),
        iconColor: ['var(--product-feature-flags-light)'],
        filterKey: 'feature_flag',
    },
    'hog_function/broadcast': {
        name: 'Broadcast',
        icon: <IconCursor />,
        href: (ref: string) => urls.messagingBroadcast(ref),
        iconColor: ['var(--product-messaging-light)'],
        filterKey: 'broadcast',
        flag: FEATURE_FLAGS.MESSAGING,
    },
    'hog_function/campaign': {
        name: 'Campaign',
        icon: <IconCursor />,
        href: (ref: string) => urls.messagingCampaign(ref),
        iconColor: ['var(--product-messaging-light)'],
        filterKey: 'campaign',
        flag: FEATURE_FLAGS.MESSAGING_AUTOMATION,
    },
    insight: {
        name: 'Insight',
        icon: <IconGraph />,
        href: (ref: string) => urls.insightView(ref as InsightShortId),
        iconColor: ['var(--product-product-analytics-light)'],
        filterKey: 'insight',
    },
    link: {
        name: 'Link',
        icon: <IconExternal />,
        href: (ref: string) => urls.link(ref),
        iconColor: ['var(--product-links-light)'],
        filterKey: 'link',
        flag: FEATURE_FLAGS.LINKS,
    },
    notebook: {
        name: 'Notebook',
        icon: <IconNotebook />,
        href: (ref: string) => urls.notebook(ref),
        iconColor: ['var(--product-notebooks-light)'],
        filterKey: 'notebook',
    },
    session_recording_playlist: {
        name: 'Replay playlist',
        icon: <IconRewindPlay />,
        href: (ref: string) => urls.replayPlaylist(ref),
        iconColor: ['var(--product-session-replay-light)', 'var(--product-session-replay-dark)'],
        filterKey: 'session_recording_playlist',
    },
    survey: {
        name: 'Survey',
        icon: <IconMessage />,
        href: (ref: string) => urls.survey(ref),
        iconColor: ['var(--product-surveys-light)'],
        filterKey: 'survey',
    },
    user_interview: {
        name: 'User interview',
        icon: <IconChat />,
        href: (ref: string) => urls.userInterview(ref),
        iconColor: ['var(--product-user-interviews-light)'],
        filterKey: 'user_interview',
        flag: FEATURE_FLAGS.USER_INTERVIEWS,
    },
}

/** This const is auto-generated, as is the whole file */
export const getTreeItemsNew = (): FileSystemImport[] => [
    { type: 'action', path: 'Action', href: urls.createAction() },
    {
        path: `Broadcast`,
        type: 'hog_function/broadcast',
        href: urls.messagingBroadcastNew(),
        flag: FEATURE_FLAGS.MESSAGING,
    },
    {
        path: `Campaign`,
        type: 'hog_function/campaign',
        href: urls.messagingCampaignNew(),
        flag: FEATURE_FLAGS.MESSAGING_AUTOMATION,
    },
    { path: `Cohort`, type: 'cohort', href: urls.cohort('new') },
    { path: `Dashboard`, type: 'dashboard', href: urls.dashboards() + '#newDashboard=modal' },
    { path: `Early access feature`, type: 'early_access_feature', href: urls.earlyAccessFeature('new') },
    { path: `Experiment`, type: 'experiment', href: urls.experiment('new') },
    { path: `Feature flag`, type: 'feature_flag', href: urls.featureFlag('new') },
    {
        path: `Insight/Calendar Heatmap`,
        type: 'insight',
        href: urls.insightNew({ type: InsightType.CALENDAR_HEATMAP }),
        iconType: 'insightHogQL',
        visualOrder: INSIGHT_VISUAL_ORDER.calendarHeatmap,
    },
    {
        path: `Insight/Funnel`,
        type: 'insight',
        href: urls.insightNew({ type: InsightType.FUNNELS }),
        iconType: 'insightFunnel',
        visualOrder: INSIGHT_VISUAL_ORDER.funnel,
    },
    {
        path: `Insight/Lifecycle`,
        type: 'insight',
        href: urls.insightNew({ type: InsightType.LIFECYCLE }),
        iconType: 'insightLifecycle',
        visualOrder: INSIGHT_VISUAL_ORDER.lifecycle,
    },
    {
        path: `Insight/Retention`,
        type: 'insight',
        href: urls.insightNew({ type: InsightType.RETENTION }),
        iconType: 'insightRetention',
        visualOrder: INSIGHT_VISUAL_ORDER.retention,
    },
    {
        path: `Insight/Stickiness`,
        type: 'insight',
        href: urls.insightNew({ type: InsightType.STICKINESS }),
        iconType: 'insightStickiness',
        visualOrder: INSIGHT_VISUAL_ORDER.stickiness,
    },
    {
        path: `Insight/Trends`,
        type: 'insight',
        href: urls.insightNew({ type: InsightType.TRENDS }),
        iconType: 'insightTrends',
        visualOrder: INSIGHT_VISUAL_ORDER.trends,
    },
    {
        path: `Insight/User paths`,
        type: 'insight',
        href: urls.insightNew({ type: InsightType.PATHS }),
        iconType: 'insightUserPaths',
        visualOrder: INSIGHT_VISUAL_ORDER.paths,
    },
    { path: `Link`, type: 'link', href: urls.link('new'), flag: FEATURE_FLAGS.LINKS },
    { path: `Notebook`, type: 'notebook', href: urls.notebook('new') },
    { path: `Replay playlist`, type: 'session_recording_playlist', href: urls.replayPlaylist('new') },
    { path: `Survey`, type: 'survey', href: urls.survey('new') },
]

/** This const is auto-generated, as is the whole file */
export const getTreeItemsProducts = (): FileSystemImport[] => [
    {
        path: 'Broadcasts',
        href: urls.messagingBroadcasts(),
        type: 'hog_function/broadcast',
        visualOrder: PRODUCT_VISUAL_ORDER.messaging,
        tags: ['alpha'],
        flag: FEATURE_FLAGS.MESSAGING,
    },
    {
        path: 'Campaigns',
        href: urls.messagingCampaigns(),
        type: 'hog_function/campaign',
        visualOrder: PRODUCT_VISUAL_ORDER.messaging,
        tags: ['alpha'],
        flag: FEATURE_FLAGS.MESSAGING_AUTOMATION,
    },
    {
        path: 'Early access features',
        type: 'early_access_feature',
        href: urls.earlyAccessFeatures(),
        visualOrder: PRODUCT_VISUAL_ORDER.earlyAccessFeatures,
    },
    {
        path: `Experiments`,
        type: 'experiment',
        href: urls.experiments(),
        visualOrder: PRODUCT_VISUAL_ORDER.experiments,
    },
    {
        path: `Feature flags`,
        type: 'feature_flag',
        href: urls.featureFlags(),
        visualOrder: PRODUCT_VISUAL_ORDER.featureFlags,
    },
    {
        path: 'LLM observability',
        iconType: 'ai',
        href: urls.llmObservabilityDashboard(),
        flag: FEATURE_FLAGS.LLM_OBSERVABILITY,
        visualOrder: PRODUCT_VISUAL_ORDER.llmObservability,
        tags: ['beta'],
    },
    {
        path: 'Links',
        type: 'link',
        href: urls.links(),
        flag: FEATURE_FLAGS.LINKS,
        visualOrder: PRODUCT_VISUAL_ORDER.links,
        tags: ['alpha'],
    },
    {
        path: 'Logs',
        iconType: 'live',
        href: urls.logs(),
        flag: FEATURE_FLAGS.LOGS,
        visualOrder: PRODUCT_VISUAL_ORDER.logs,
        tags: ['alpha'],
    },
    {
        path: 'Product analytics',
        type: 'insight',
        href: urls.insights(),
        visualOrder: PRODUCT_VISUAL_ORDER.productAnalytics,
    },
    {
        path: 'Revenue analytics',
        iconType: 'piggyBank',
        href: urls.revenueAnalytics(),
        visualOrder: PRODUCT_VISUAL_ORDER.revenueAnalytics,
        tags: ['beta'],
    },
    {
        path: 'Session replay',
        href: urls.replay(ReplayTabs.Home),
        type: 'session_recording_playlist',
        visualOrder: PRODUCT_VISUAL_ORDER.sessionReplay,
    },
    { path: 'Surveys', type: 'survey', href: urls.surveys(), visualOrder: PRODUCT_VISUAL_ORDER.surveys },
    {
        path: 'User interviews',
        href: urls.userInterviews(),
        type: 'user_interview',
        visualOrder: PRODUCT_VISUAL_ORDER.userInterviews,
        tags: ['alpha'],
    },
    {
        path: 'Web analytics',
        iconType: 'pieChart',
        href: urls.webAnalytics(),
        visualOrder: PRODUCT_VISUAL_ORDER.webAnalytics,
    },
]

/** This const is auto-generated, as is the whole file */
export const getTreeItemsGames = (): FileSystemImport[] => [{ path: '368 Hedgehogs', href: urls.game368hedgehogs() }]

/** This const is auto-generated, as is the whole file */
export const getTreeItemsDataManagement = (): FileSystemImport[] => [
    { path: 'Actions', iconType: 'rocket', href: urls.actions() },
    { path: 'Revenue settings', iconType: 'handMoney', href: urls.revenueSettings() },
]
