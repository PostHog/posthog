# serializer version: 1
# name: TestMarketingAnalyticsTableQueryRunnerBusiness.test_comprehensive_marketing_analytics_basic
  '''
  
  SELECT
      campaign_costs.campaign AS Campaign,
      campaign_costs.source AS Source,
      round(campaign_costs.total_cost, 2) AS `Total Cost`,
      round(campaign_costs.total_clicks, 0) AS `Total Clicks`,
      round(campaign_costs.total_impressions, 0) AS `Total Impressions`,
      round(divide(campaign_costs.total_cost, nullif(campaign_costs.total_clicks, 0)), 2) AS `Cost per Click`,
      round(multiply(divide(campaign_costs.total_clicks, nullif(campaign_costs.total_impressions, 0)), 100), 2) AS CTR
  
  FROM
      (
  SELECT
          campaign,
          source,
          sum(cost) AS total_cost,
          sum(clicks) AS total_clicks,
          sum(impressions) AS total_impressions
      
  FROM
          (
  SELECT
              toString(campaign1) AS campaign,
              toString(source1) AS source,
              toFloat(coalesce(impressions1, 0)) AS impressions,
              toFloat(coalesce(clicks1, 0)) AS clicks,
              toFloat(coalesce(spend1, 0)) AS cost
          
  FROM
              `bigquery.posthog_test.posthog_test_facebook_ads_table` AS posthog_test_facebook_ads_table
          
  WHERE
              and(greaterOrEquals(toDateTime(date1), toDateTime('2024-11-01 00:00:00')), lessOrEquals(toDateTime(date1), toDateTime('2024-11-30 23:59:59'))))
      
  GROUP BY
          campaign,
          source) AS campaign_costs
  ORDER BY
      2 DESC
  
  LIMIT 101
  OFFSET 0
  '''
# ---
# name: TestMarketingAnalyticsTableQueryRunnerBusiness.test_conversion_goal_basic_setup
  '''
  
  SELECT
      campaign_costs.campaign AS Campaign,
      campaign_costs.source AS Source,
      round(campaign_costs.total_cost, 2) AS `Total Cost`,
      round(campaign_costs.total_clicks, 0) AS `Total Clicks`,
      round(campaign_costs.total_impressions, 0) AS `Total Impressions`,
      round(divide(campaign_costs.total_cost, nullif(campaign_costs.total_clicks, 0)), 2) AS `Cost per Click`,
      round(multiply(divide(campaign_costs.total_clicks, nullif(campaign_costs.total_impressions, 0)), 100), 2) AS CTR,
      cg_0.conversion_0 AS `Sign Up Conversions`,
      round(divide(campaign_costs.total_cost, nullif(cg_0.conversion_0, 0)), 2) AS `Cost per Sign Up Conversions`
  
  FROM
      (
  SELECT
          campaign,
          source,
          sum(cost) AS total_cost,
          sum(clicks) AS total_clicks,
          sum(impressions) AS total_impressions
      
  FROM
          (
  SELECT
              toString(campaign1) AS campaign,
              toString(source1) AS source,
              toFloat(coalesce(impressions1, 0)) AS impressions,
              toFloat(coalesce(clicks1, 0)) AS clicks,
              toFloat(convertCurrency('USD', 'USD', toFloat(coalesce(spend1, 0)))) AS cost
          
  FROM
              `bigquery.posthog_test.posthog_test_facebook_ads_table` AS posthog_test_facebook_ads_table
          
  WHERE
              and(greaterOrEquals(toDateTime(date1), toDateTime('2024-01-01 00:00:00')), lessOrEquals(toDateTime(date1), toDateTime('2024-12-31 23:59:59'))))
      
  GROUP BY
          campaign,
          source) AS campaign_costs
      LEFT JOIN (
  SELECT
          if(notEmpty(campaign_name), campaign_name, 'organic') AS campaign,
          if(notEmpty(source_name), source_name, 'organic') AS source,
          count() AS conversion_0
      
  FROM
          (
  SELECT
              person_id,
              if(notEmpty(conversion_campaign), conversion_campaign, if(notEmpty(fallback_campaign), fallback_campaign, '')) AS campaign_name,
              if(notEmpty(conversion_source), conversion_source, if(notEmpty(fallback_source), fallback_source, '')) AS source_name,
              1 AS conversion_value
          
  FROM
              (
  SELECT
                  person_id,
                  conversion_timestamps[i] AS conversion_time,
                  conversion_math_values[i] AS conversion_math_value,
                  conversion_campaigns[i] AS conversion_campaign,
                  conversion_sources[i] AS conversion_source,
                  arrayMax(arrayFilter(x -> and(lessOrEquals(x, conversion_timestamps[i]), greaterOrEquals(x, minus(conversion_timestamps[i], 31536000))), utm_timestamps)) AS last_utm_timestamp,
                  if(isNotNull(last_utm_timestamp), utm_campaigns[indexOf(utm_timestamps, last_utm_timestamp)], '') AS fallback_campaign,
                  if(isNotNull(last_utm_timestamp), utm_sources[indexOf(utm_timestamps, last_utm_timestamp)], '') AS fallback_source
              
  FROM
                  (
  SELECT
                      events.person_id,
                      arrayFilter(x -> greater(x, 0), groupArray(if(equals(event, 'test_event'), toUnixTimestamp(events.timestamp), 0))) AS conversion_timestamps,
                      arrayFilter(x -> greater(x, 0), groupArray(if(equals(event, 'test_event'), toFloat(1), 0))) AS conversion_math_values,
                      arrayFilter(x -> notEmpty(toString(x)), groupArray(if(equals(event, 'test_event'), toString(ifNull(events.properties.utm_campaign, '')), ''))) AS conversion_campaigns,
                      arrayFilter(x -> notEmpty(toString(x)), groupArray(if(equals(event, 'test_event'), toString(ifNull(events.properties.utm_source, '')), ''))) AS conversion_sources,
                      arrayFilter(x -> greater(x, 0), groupArray(if(and(equals(events.event, '$pageview'), notEmpty(toString(ifNull(events.properties.utm_campaign, ''))), notEmpty(toString(ifNull(events.properties.utm_source, '')))), toUnixTimestamp(events.timestamp), 0))) AS utm_timestamps,
                      arrayFilter(x -> notEmpty(x), groupArray(if(and(equals(events.event, '$pageview'), notEmpty(toString(ifNull(events.properties.utm_campaign, ''))), notEmpty(toString(ifNull(events.properties.utm_source, '')))), toString(ifNull(events.properties.utm_campaign, '')), ''))) AS utm_campaigns,
                      arrayFilter(x -> notEmpty(x), groupArray(if(and(equals(events.event, '$pageview'), notEmpty(toString(ifNull(events.properties.utm_campaign, ''))), notEmpty(toString(ifNull(events.properties.utm_source, '')))), toString(ifNull(events.properties.utm_source, '')), ''))) AS utm_sources
                  
  FROM
                      events
                  
  WHERE
                      or(and(equals(event, 'test_event'), greaterOrEquals(events.timestamp, toDateTime('2024-01-01 00:00:00')), lessOrEquals(events.timestamp, toDateTime('2024-12-31 23:59:59'))), and(equals(events.event, '$pageview'), notEmpty(toString(ifNull(events.properties.utm_campaign, ''))), notEmpty(toString(ifNull(events.properties.utm_source, ''))), greaterOrEquals(events.timestamp, minus(toDateTime('2024-01-01 00:00:00'), toIntervalSecond(31536000))), lessOrEquals(events.timestamp, toDateTime('2024-12-31 23:59:59'))))
                  
  GROUP BY
                      events.person_id
                  
  HAVING
                      greater(length(conversion_timestamps), 0))
              ARRAY JOIN arrayEnumerate(conversion_timestamps) AS i)) AS attributed_conversions
      
  GROUP BY
          campaign,
          source) AS cg_0 ON and(equals(campaign_costs.campaign, cg_0.campaign), equals(campaign_costs.source, cg_0.source))
  ORDER BY
      campaign_costs.total_cost DESC
  
  LIMIT 101
  OFFSET 0
  '''
# ---
# name: TestMarketingAnalyticsTableQueryRunnerBusiness.test_facebook_ads_single_source_execution
  '''
  
  SELECT
      campaign_costs.campaign AS Campaign,
      campaign_costs.source AS Source,
      round(campaign_costs.total_cost, 2) AS `Total Cost`,
      round(campaign_costs.total_clicks, 0) AS `Total Clicks`,
      round(campaign_costs.total_impressions, 0) AS `Total Impressions`,
      round(divide(campaign_costs.total_cost, nullif(campaign_costs.total_clicks, 0)), 2) AS `Cost per Click`,
      round(multiply(divide(campaign_costs.total_clicks, nullif(campaign_costs.total_impressions, 0)), 100), 2) AS CTR
  
  FROM
      (
  SELECT
          campaign,
          source,
          sum(cost) AS total_cost,
          sum(clicks) AS total_clicks,
          sum(impressions) AS total_impressions
      
  FROM
          (
  SELECT
              toString(campaign1) AS campaign,
              toString(source1) AS source,
              toFloat(coalesce(impressions1, 0)) AS impressions,
              toFloat(coalesce(clicks1, 0)) AS clicks,
              toFloat(coalesce(spend1, 0)) AS cost
          
  FROM
              `bigquery.posthog_test.posthog_test_facebook_ads_table` AS posthog_test_facebook_ads_table
          
  WHERE
              and(greaterOrEquals(toDateTime(date1), toDateTime('2024-01-01 00:00:00')), lessOrEquals(toDateTime(date1), toDateTime('2024-12-31 23:59:59'))))
      
  GROUP BY
          campaign,
          source) AS campaign_costs
  ORDER BY
      campaign_costs.total_cost DESC
  
  LIMIT 101
  OFFSET 0
  '''
# ---
# name: TestMarketingAnalyticsTableQueryRunnerBusiness.test_facebook_only_multi_source_execution
  '''
  
  SELECT
      campaign_costs.campaign AS Campaign,
      campaign_costs.source AS Source,
      round(campaign_costs.total_cost, 2) AS `Total Cost`,
      round(campaign_costs.total_clicks, 0) AS `Total Clicks`,
      round(campaign_costs.total_impressions, 0) AS `Total Impressions`,
      round(divide(campaign_costs.total_cost, nullif(campaign_costs.total_clicks, 0)), 2) AS `Cost per Click`,
      round(multiply(divide(campaign_costs.total_clicks, nullif(campaign_costs.total_impressions, 0)), 100), 2) AS CTR
  
  FROM
      (
  SELECT
          campaign,
          source,
          sum(cost) AS total_cost,
          sum(clicks) AS total_clicks,
          sum(impressions) AS total_impressions
      
  FROM
          (
  SELECT
              toString(campaign1) AS campaign,
              toString(source1) AS source,
              toFloat(coalesce(impressions1, 0)) AS impressions,
              toFloat(coalesce(clicks1, 0)) AS clicks,
              toFloat(convertCurrency('USD', 'USD', toFloat(coalesce(spend1, 0)))) AS cost
          
  FROM
              `bigquery.posthog_test.posthog_test_facebook_ads_table` AS posthog_test_facebook_ads_table
          
  WHERE
              and(greaterOrEquals(toDateTime(date1), toDateTime('2024-01-01 00:00:00')), lessOrEquals(toDateTime(date1), toDateTime('2024-12-31 23:59:59'))))
      
  GROUP BY
          campaign,
          source) AS campaign_costs
  ORDER BY
      campaign_costs.total_cost DESC
  
  LIMIT 101
  OFFSET 0
  '''
# ---
# name: TestMarketingAnalyticsTableQueryRunnerBusiness.test_multi_source_business_metrics_validation
  '''
  
  SELECT
      campaign_costs.campaign AS Campaign,
      campaign_costs.source AS Source,
      round(campaign_costs.total_cost, 2) AS `Total Cost`,
      round(campaign_costs.total_clicks, 0) AS `Total Clicks`,
      round(campaign_costs.total_impressions, 0) AS `Total Impressions`,
      round(divide(campaign_costs.total_cost, nullif(campaign_costs.total_clicks, 0)), 2) AS `Cost per Click`,
      round(multiply(divide(campaign_costs.total_clicks, nullif(campaign_costs.total_impressions, 0)), 100), 2) AS CTR
  
  FROM
      (
  SELECT
          campaign,
          source,
          sum(cost) AS total_cost,
          sum(clicks) AS total_clicks,
          sum(impressions) AS total_impressions
      
  FROM
          (
  SELECT
              toString(campaign1) AS campaign,
              toString(source1) AS source,
              toFloat(coalesce(impressions1, 0)) AS impressions,
              toFloat(coalesce(clicks1, 0)) AS clicks,
              toFloat(convertCurrency('USD', 'USD', toFloat(coalesce(spend1, 0)))) AS cost
          
  FROM
              `bigquery.posthog_test.posthog_test_facebook_ads_table` AS posthog_test_facebook_ads_table
          
  WHERE
              and(greaterOrEquals(toDateTime(date1), toDateTime('2024-01-01 00:00:00')), lessOrEquals(toDateTime(date1), toDateTime('2024-12-31 23:59:59')))
          UNION ALL
          
  SELECT
              toString(campaign2) AS campaign,
              toString(source2) AS source,
              toFloat(coalesce(impressions2, 0)) AS impressions,
              toFloat(coalesce(clicks2, 0)) AS clicks,
              toFloat(convertCurrency('USD', 'USD', toFloat(coalesce(spend2, 0)))) AS cost
          
  FROM
              `bigquery.posthog_test.posthog_test_tiktok_ads_table` AS posthog_test_tiktok_ads_table
          
  WHERE
              and(greaterOrEquals(toDateTime(date2), toDateTime('2024-01-01 00:00:00')), lessOrEquals(toDateTime(date2), toDateTime('2024-12-31 23:59:59')))
          UNION ALL
          
  SELECT
              toString(campaign3) AS campaign,
              toString(source3) AS source,
              toFloat(coalesce(impressions3, 0)) AS impressions,
              toFloat(coalesce(clicks3, 0)) AS clicks,
              toFloat(convertCurrency('USD', 'USD', toFloat(coalesce(spend3, 0)))) AS cost
          
  FROM
              `bigquery.posthog_test.posthog_test_linkedin_ads_table` AS posthog_test_linkedin_ads_table
          
  WHERE
              and(greaterOrEquals(toDateTime(date3), toDateTime('2024-01-01 00:00:00')), lessOrEquals(toDateTime(date3), toDateTime('2024-12-31 23:59:59'))))
      
  GROUP BY
          campaign,
          source) AS campaign_costs
  ORDER BY
      campaign_costs.total_cost DESC
  
  LIMIT 101
  OFFSET 0
  '''
# ---
