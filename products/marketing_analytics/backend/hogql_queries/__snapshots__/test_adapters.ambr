# serializer version: 1
# name: TestMarketingAnalyticsAdapters.test_azure_adapter_query_generation
  '''
  
  SELECT toString(campaign_name) AS campaign, toString(`'Azure'`) AS source, toFloat(coalesce(impressions, 0)) AS impressions, toFloat(coalesce(clicks, 0)) AS clicks, toFloat(convertCurrency('\'USD\'', 'USD', toFloat(coalesce(spend, 0)))) AS cost 
  FROM azure_table 
  WHERE and(greaterOrEquals(toDateTime(report_date), toDateTime('2024-01-01 00:00:00')), lessOrEquals(toDateTime(report_date), toDateTime('2024-12-31 23:59:59')))
  '''
# ---
# name: TestMarketingAnalyticsAdapters.test_cloudflare_r2_adapter_query_generation
  '''
  
  SELECT toString(campaign_name) AS campaign, toString(`'Cloudflare'`) AS source, toFloat(coalesce(impressions, 0)) AS impressions, toFloat(coalesce(clicks, 0)) AS clicks, toFloat(convertCurrency('\'USD\'', 'USD', toFloat(coalesce(spend, 0)))) AS cost 
  FROM cloudflare_table 
  WHERE and(greaterOrEquals(toDateTime(report_date), toDateTime('2024-01-01 00:00:00')), lessOrEquals(toDateTime(report_date), toDateTime('2024-12-31 23:59:59')))
  '''
# ---
# name: TestMarketingAnalyticsAdapters.test_currency_conversion_handling
  '''
  
  SELECT toString(campaign_name) AS campaign, toString(`'Facebook'`) AS source, toFloat(coalesce(impressions, 0)) AS impressions, toFloat(coalesce(clicks, 0)) AS clicks, toFloat(convertCurrency('spend_currency', 'USD', toFloat(coalesce(spend_amount, 0)))) AS cost 
  FROM currency_test_table 
  WHERE and(greaterOrEquals(toDateTime(date), toDateTime('2024-01-01 00:00:00')), lessOrEquals(toDateTime(date), toDateTime('2024-12-31 23:59:59')))
  '''
# ---
# name: TestMarketingAnalyticsAdapters.test_facebook_ads_query_generation
  '''
  
  SELECT toString(campaign_name) AS campaign, toString(`'Facebook'`) AS source, toFloat(coalesce(impressions, 0)) AS impressions, toFloat(coalesce(clicks, 0)) AS clicks, toFloat(convertCurrency('\'USD\'', 'USD', toFloat(coalesce(spend_usd, 0)))) AS cost 
  FROM facebook_table 
  WHERE and(greaterOrEquals(toDateTime(report_date), toDateTime('2024-01-01 00:00:00')), lessOrEquals(toDateTime(report_date), toDateTime('2024-12-31 23:59:59')))
  '''
# ---
# name: TestMarketingAnalyticsAdapters.test_google_ads_query_generation
  '''
  
  SELECT toString(google_campaign.campaign_name) AS campaign, toString('google') AS source, toFloat(SUM(google_stats.metrics_impressions)) AS impressions, toFloat(SUM(google_stats.metrics_clicks)) AS clicks, toFloat(divide(SUM(google_stats.metrics_cost_micros), 1000000)) AS cost 
  FROM google_campaign LEFT JOIN google_stats ON equals(google_campaign.campaign_id, google_stats.campaign_id) 
  WHERE and(greaterOrEquals(toDateTime(google_stats.segments_date), toDateTime('2024-01-01 00:00:00')), lessOrEquals(toDateTime(google_stats.segments_date), toDateTime('2024-12-31 23:59:59'))) 
  GROUP BY toString(google_campaign.campaign_name)
  '''
# ---
# name: TestMarketingAnalyticsAdapters.test_linkedin_ads_query_generation
  '''
  
  SELECT toString(campaign_name) AS campaign, toString(`'LinkedIn'`) AS source, toFloat(coalesce(impressions, 0)) AS impressions, toFloat(coalesce(clicks, 0)) AS clicks, toFloat(convertCurrency('\'USD\'', 'USD', toFloat(coalesce(spend, 0)))) AS cost 
  FROM linkedin_table 
  WHERE and(greaterOrEquals(toDateTime(report_date), toDateTime('2024-01-01 00:00:00')), lessOrEquals(toDateTime(report_date), toDateTime('2024-12-31 23:59:59')))
  '''
# ---
# name: TestMarketingAnalyticsAdapters.test_tiktok_ads_query_generation
  '''
  
  SELECT toString(campaign_name) AS campaign, toString(`'TikTok'`) AS source, toFloat(coalesce(impressions, 0)) AS impressions, toFloat(coalesce(clicks, 0)) AS clicks, toFloat(convertCurrency('\'USD\'', 'USD', toFloat(coalesce(spend, 0)))) AS cost 
  FROM tiktok_table 
  WHERE and(greaterOrEquals(toDateTime(report_date), toDateTime('2024-01-01 00:00:00')), lessOrEquals(toDateTime(report_date), toDateTime('2024-12-31 23:59:59')))
  '''
# ---
# name: TestMarketingAnalyticsAdapters.test_union_query_compatibility
  '''
  
  SELECT campaign AS campaign, source AS source, impressions AS impressions, clicks AS clicks, cost AS cost 
  FROM (
  SELECT toString(campaign_id) AS campaign, toString(`'Facebook'`) AS source, toFloat(coalesce(impressions, 0)) AS impressions, toFloat(coalesce(clicks, 0)) AS clicks, toFloat(convertCurrency('currency', 'USD', toFloat(coalesce(spend, 0)))) AS cost 
  FROM facebook_table 
  WHERE and(greaterOrEquals(toDateTime(date), toDateTime('2024-01-01 00:00:00')), lessOrEquals(toDateTime(date), toDateTime('2024-12-31 23:59:59'))) UNION ALL 
  SELECT toString(campaign_name) AS campaign, toString(`'TikTok'`) AS source, toFloat(coalesce(impressions, 0)) AS impressions, toFloat(coalesce(clicks, 0)) AS clicks, toFloat(convertCurrency('currency', 'USD', toFloat(coalesce(spend, 0)))) AS cost 
  FROM tiktok_table 
  WHERE and(greaterOrEquals(toDateTime(date), toDateTime('2024-01-01 00:00:00')), lessOrEquals(toDateTime(date), toDateTime('2024-12-31 23:59:59')))) AS all_marketing_data
  '''
# ---
