# serializer version: 1
# name: TestMarketingAnalyticsTableQueryRunnerCompare.test_comprehensive_marketing_analytics_basic
  '''
  
  SELECT
      campaign_costs.campaign AS Campaign,
      campaign_costs.source AS Source,
      round(campaign_costs.total_cost, 2) AS Cost,
      round(campaign_costs.total_clicks, 0) AS Clicks,
      round(campaign_costs.total_impressions, 0) AS Impressions,
      round(divide(campaign_costs.total_cost, nullif(campaign_costs.total_clicks, 0)), 2) AS CPC,
      round(multiply(divide(campaign_costs.total_clicks, nullif(campaign_costs.total_impressions, 0)), 100), 2) AS CTR
  
  FROM
      (
  SELECT
          campaign,
          source,
          sum(cost) AS total_cost,
          sum(clicks) AS total_clicks,
          sum(impressions) AS total_impressions
      
  FROM
          (
  SELECT
              toString(campaign1) AS campaign,
              toString(source1) AS source,
              toFloat(coalesce(impressions1, 0)) AS impressions,
              toFloat(coalesce(clicks1, 0)) AS clicks,
              toFloat(coalesce(spend1, 0)) AS cost
          
  FROM
              `bigquery.posthog_test.posthog_test_facebook_ads_table` AS posthog_test_facebook_ads_table
          
  WHERE
              and(greaterOrEquals(toDateTime(date1), toDateTime('2024-11-01 00:00:00')), lessOrEquals(toDateTime(date1), toDateTime('2024-11-30 23:59:59'))))
      
  GROUP BY
          campaign,
          source) AS campaign_costs
  
  LIMIT 101
  OFFSET 0
  '''
# ---
# name: TestMarketingAnalyticsTableQueryRunnerCompare.test_conversion_goal_basic_setup
  '''
  
  SELECT
      tuple(current_period.Campaign, previous_period.Campaign) AS Campaign,
      tuple(current_period.Source, previous_period.Source) AS Source,
      tuple(current_period.Cost, previous_period.Cost) AS Cost,
      tuple(current_period.Clicks, previous_period.Clicks) AS Clicks,
      tuple(current_period.Impressions, previous_period.Impressions) AS Impressions,
      tuple(current_period.CPC, previous_period.CPC) AS CPC,
      tuple(current_period.CTR, previous_period.CTR) AS CTR,
      tuple(current_period.`Sign Up Conversions`, previous_period.`Sign Up Conversions`) AS `Sign Up Conversions`,
      tuple(current_period.`Cost per Sign Up Conversions`, previous_period.`Cost per Sign Up Conversions`) AS `Cost per Sign Up Conversions`
  
  FROM
      (
  SELECT
          campaign_costs.campaign AS Campaign,
          campaign_costs.source AS Source,
          round(campaign_costs.total_cost, 2) AS Cost,
          round(campaign_costs.total_clicks, 0) AS Clicks,
          round(campaign_costs.total_impressions, 0) AS Impressions,
          round(divide(campaign_costs.total_cost, nullif(campaign_costs.total_clicks, 0)), 2) AS CPC,
          round(multiply(divide(campaign_costs.total_clicks, nullif(campaign_costs.total_impressions, 0)), 100), 2) AS CTR,
          cg_0.conversion_0 AS `Sign Up Conversions`,
          round(divide(campaign_costs.total_cost, nullif(cg_0.conversion_0, 0)), 2) AS `Cost per Sign Up Conversions`
      
  FROM
          (
  SELECT
              campaign,
              source,
              sum(cost) AS total_cost,
              sum(clicks) AS total_clicks,
              sum(impressions) AS total_impressions
          
  FROM
              (
  SELECT
                  toString(campaign1) AS campaign,
                  toString(source1) AS source,
                  toFloat(coalesce(impressions1, 0)) AS impressions,
                  toFloat(coalesce(clicks1, 0)) AS clicks,
                  toFloat(convertCurrency('USD', 'USD', toFloat(coalesce(spend1, 0)))) AS cost
              
  FROM
                  `bigquery.posthog_test.posthog_test_facebook_ads_table` AS posthog_test_facebook_ads_table
              
  WHERE
                  and(greaterOrEquals(toDateTime(date1), toDateTime('2024-11-01 00:00:00')), lessOrEquals(toDateTime(date1), toDateTime('2024-12-31 23:59:59'))))
          
  GROUP BY
              campaign,
              source) AS campaign_costs
          LEFT JOIN (
  SELECT
              if(notEmpty(campaign_name), campaign_name, 'organic') AS campaign,
              if(notEmpty(source_name), source_name, 'organic') AS source,
              count() AS conversion_0
          
  FROM
              (
  SELECT
                  person_id,
                  if(notEmpty(conversion_campaign), conversion_campaign, if(notEmpty(fallback_campaign), fallback_campaign, '')) AS campaign_name,
                  if(notEmpty(conversion_source), conversion_source, if(notEmpty(fallback_source), fallback_source, '')) AS source_name,
                  1 AS conversion_value
              
  FROM
                  (
  SELECT
                      person_id,
                      conversion_timestamps[i] AS conversion_time,
                      conversion_math_values[i] AS conversion_math_value,
                      conversion_campaigns[i] AS conversion_campaign,
                      conversion_sources[i] AS conversion_source,
                      arrayMax(arrayFilter(x -> and(lessOrEquals(x, conversion_timestamps[i]), greaterOrEquals(x, minus(conversion_timestamps[i], 31536000))), utm_timestamps)) AS last_utm_timestamp,
                      if(isNotNull(last_utm_timestamp), utm_campaigns[indexOf(utm_timestamps, last_utm_timestamp)], '') AS fallback_campaign,
                      if(isNotNull(last_utm_timestamp), utm_sources[indexOf(utm_timestamps, last_utm_timestamp)], '') AS fallback_source
                  
  FROM
                      (
  SELECT
                          events.person_id,
                          arrayFilter(x -> greater(x, 0), groupArray(if(equals(event, 'test_event'), toUnixTimestamp(events.timestamp), 0))) AS conversion_timestamps,
                          arrayFilter(x -> greater(x, 0), groupArray(if(equals(event, 'test_event'), toFloat(1), 0))) AS conversion_math_values,
                          arrayFilter(x -> notEmpty(toString(x)), groupArray(if(equals(event, 'test_event'), toString(ifNull(events.properties.utm_campaign, '')), ''))) AS conversion_campaigns,
                          arrayFilter(x -> notEmpty(toString(x)), groupArray(if(equals(event, 'test_event'), toString(ifNull(events.properties.utm_source, '')), ''))) AS conversion_sources,
                          arrayFilter(x -> greater(x, 0), groupArray(if(and(equals(events.event, '$pageview'), notEmpty(toString(ifNull(events.properties.utm_campaign, ''))), notEmpty(toString(ifNull(events.properties.utm_source, '')))), toUnixTimestamp(events.timestamp), 0))) AS utm_timestamps,
                          arrayFilter(x -> notEmpty(x), groupArray(if(and(equals(events.event, '$pageview'), notEmpty(toString(ifNull(events.properties.utm_campaign, ''))), notEmpty(toString(ifNull(events.properties.utm_source, '')))), toString(ifNull(events.properties.utm_campaign, '')), ''))) AS utm_campaigns,
                          arrayFilter(x -> notEmpty(x), groupArray(if(and(equals(events.event, '$pageview'), notEmpty(toString(ifNull(events.properties.utm_campaign, ''))), notEmpty(toString(ifNull(events.properties.utm_source, '')))), toString(ifNull(events.properties.utm_source, '')), ''))) AS utm_sources
                      
  FROM
                          events
                      
  WHERE
                          or(and(equals(event, 'test_event'), greaterOrEquals(events.timestamp, toDateTime('2024-11-01 00:00:00')), lessOrEquals(events.timestamp, toDateTime('2024-12-31 23:59:59'))), and(equals(events.event, '$pageview'), notEmpty(toString(ifNull(events.properties.utm_campaign, ''))), notEmpty(toString(ifNull(events.properties.utm_source, ''))), greaterOrEquals(events.timestamp, minus(toDateTime('2024-11-01 00:00:00'), toIntervalSecond(31536000))), lessOrEquals(events.timestamp, toDateTime('2024-12-31 23:59:59'))))
                      
  GROUP BY
                          events.person_id
                      
  HAVING
                          greater(length(conversion_timestamps), 0))
                  ARRAY JOIN arrayEnumerate(conversion_timestamps) AS i)) AS attributed_conversions
          
  GROUP BY
              campaign,
              source) AS cg_0 ON and(equals(campaign_costs.campaign, cg_0.campaign), equals(campaign_costs.source, cg_0.source))) AS current_period
      LEFT JOIN (
  SELECT
          campaign_costs.campaign AS Campaign,
          campaign_costs.source AS Source,
          round(campaign_costs.total_cost, 2) AS Cost,
          round(campaign_costs.total_clicks, 0) AS Clicks,
          round(campaign_costs.total_impressions, 0) AS Impressions,
          round(divide(campaign_costs.total_cost, nullif(campaign_costs.total_clicks, 0)), 2) AS CPC,
          round(multiply(divide(campaign_costs.total_clicks, nullif(campaign_costs.total_impressions, 0)), 100), 2) AS CTR,
          cg_0.conversion_0 AS `Sign Up Conversions`,
          round(divide(campaign_costs.total_cost, nullif(cg_0.conversion_0, 0)), 2) AS `Cost per Sign Up Conversions`
      
  FROM
          (
  SELECT
              campaign,
              source,
              sum(cost) AS total_cost,
              sum(clicks) AS total_clicks,
              sum(impressions) AS total_impressions
          
  FROM
              (
  SELECT
                  toString(campaign1) AS campaign,
                  toString(source1) AS source,
                  toFloat(coalesce(impressions1, 0)) AS impressions,
                  toFloat(coalesce(clicks1, 0)) AS clicks,
                  toFloat(convertCurrency('USD', 'USD', toFloat(coalesce(spend1, 0)))) AS cost
              
  FROM
                  `bigquery.posthog_test.posthog_test_facebook_ads_table` AS posthog_test_facebook_ads_table
              
  WHERE
                  and(greaterOrEquals(toDateTime(date1), toDateTime('2024-09-01 00:00:00')), lessOrEquals(toDateTime(date1), toDateTime('2024-10-31 23:59:59'))))
          
  GROUP BY
              campaign,
              source) AS campaign_costs
          LEFT JOIN (
  SELECT
              if(notEmpty(campaign_name), campaign_name, 'organic') AS campaign,
              if(notEmpty(source_name), source_name, 'organic') AS source,
              count() AS conversion_0
          
  FROM
              (
  SELECT
                  person_id,
                  if(notEmpty(conversion_campaign), conversion_campaign, if(notEmpty(fallback_campaign), fallback_campaign, '')) AS campaign_name,
                  if(notEmpty(conversion_source), conversion_source, if(notEmpty(fallback_source), fallback_source, '')) AS source_name,
                  1 AS conversion_value
              
  FROM
                  (
  SELECT
                      person_id,
                      conversion_timestamps[i] AS conversion_time,
                      conversion_math_values[i] AS conversion_math_value,
                      conversion_campaigns[i] AS conversion_campaign,
                      conversion_sources[i] AS conversion_source,
                      arrayMax(arrayFilter(x -> and(lessOrEquals(x, conversion_timestamps[i]), greaterOrEquals(x, minus(conversion_timestamps[i], 31536000))), utm_timestamps)) AS last_utm_timestamp,
                      if(isNotNull(last_utm_timestamp), utm_campaigns[indexOf(utm_timestamps, last_utm_timestamp)], '') AS fallback_campaign,
                      if(isNotNull(last_utm_timestamp), utm_sources[indexOf(utm_timestamps, last_utm_timestamp)], '') AS fallback_source
                  
  FROM
                      (
  SELECT
                          events.person_id,
                          arrayFilter(x -> greater(x, 0), groupArray(if(equals(event, 'test_event'), toUnixTimestamp(events.timestamp), 0))) AS conversion_timestamps,
                          arrayFilter(x -> greater(x, 0), groupArray(if(equals(event, 'test_event'), toFloat(1), 0))) AS conversion_math_values,
                          arrayFilter(x -> notEmpty(toString(x)), groupArray(if(equals(event, 'test_event'), toString(ifNull(events.properties.utm_campaign, '')), ''))) AS conversion_campaigns,
                          arrayFilter(x -> notEmpty(toString(x)), groupArray(if(equals(event, 'test_event'), toString(ifNull(events.properties.utm_source, '')), ''))) AS conversion_sources,
                          arrayFilter(x -> greater(x, 0), groupArray(if(and(equals(events.event, '$pageview'), notEmpty(toString(ifNull(events.properties.utm_campaign, ''))), notEmpty(toString(ifNull(events.properties.utm_source, '')))), toUnixTimestamp(events.timestamp), 0))) AS utm_timestamps,
                          arrayFilter(x -> notEmpty(x), groupArray(if(and(equals(events.event, '$pageview'), notEmpty(toString(ifNull(events.properties.utm_campaign, ''))), notEmpty(toString(ifNull(events.properties.utm_source, '')))), toString(ifNull(events.properties.utm_campaign, '')), ''))) AS utm_campaigns,
                          arrayFilter(x -> notEmpty(x), groupArray(if(and(equals(events.event, '$pageview'), notEmpty(toString(ifNull(events.properties.utm_campaign, ''))), notEmpty(toString(ifNull(events.properties.utm_source, '')))), toString(ifNull(events.properties.utm_source, '')), ''))) AS utm_sources
                      
  FROM
                          events
                      
  WHERE
                          or(and(equals(event, 'test_event'), greaterOrEquals(events.timestamp, toDateTime('2024-09-01 00:00:00')), lessOrEquals(events.timestamp, toDateTime('2024-10-31 23:59:59'))), and(equals(events.event, '$pageview'), notEmpty(toString(ifNull(events.properties.utm_campaign, ''))), notEmpty(toString(ifNull(events.properties.utm_source, ''))), greaterOrEquals(events.timestamp, minus(toDateTime('2024-09-01 00:00:00'), toIntervalSecond(31536000))), lessOrEquals(events.timestamp, toDateTime('2024-10-31 23:59:59'))))
                      
  GROUP BY
                          events.person_id
                      
  HAVING
                          greater(length(conversion_timestamps), 0))
                  ARRAY JOIN arrayEnumerate(conversion_timestamps) AS i)) AS attributed_conversions
          
  GROUP BY
              campaign,
              source) AS cg_0 ON and(equals(campaign_costs.campaign, cg_0.campaign), equals(campaign_costs.source, cg_0.source))) AS previous_period ON and(equals(current_period.Campaign, previous_period.Campaign), equals(current_period.Source, previous_period.Source))
  ORDER BY
      Cost DESC
  
  LIMIT 101
  OFFSET 0
  '''
# ---
# name: TestMarketingAnalyticsTableQueryRunnerCompare.test_multi_source_business_metrics_validation_with_compare
  dict({
    'query': '''
      
      SELECT
          tuple(current_period.Campaign, previous_period.Campaign) AS Campaign,
          tuple(current_period.Source, previous_period.Source) AS Source,
          tuple(current_period.Cost, previous_period.Cost) AS Cost,
          tuple(current_period.Clicks, previous_period.Clicks) AS Clicks,
          tuple(current_period.Impressions, previous_period.Impressions) AS Impressions,
          tuple(current_period.CPC, previous_period.CPC) AS CPC,
          tuple(current_period.CTR, previous_period.CTR) AS CTR
      
      FROM
          (
      SELECT
              campaign_costs.campaign AS Campaign,
              campaign_costs.source AS Source,
              round(campaign_costs.total_cost, 2) AS Cost,
              round(campaign_costs.total_clicks, 0) AS Clicks,
              round(campaign_costs.total_impressions, 0) AS Impressions,
              round(divide(campaign_costs.total_cost, nullif(campaign_costs.total_clicks, 0)), 2) AS CPC,
              round(multiply(divide(campaign_costs.total_clicks, nullif(campaign_costs.total_impressions, 0)), 100), 2) AS CTR
          
      FROM
              (
      SELECT
                  campaign,
                  source,
                  sum(cost) AS total_cost,
                  sum(clicks) AS total_clicks,
                  sum(impressions) AS total_impressions
              
      FROM
                  (
      SELECT
                      toString(campaign1) AS campaign,
                      toString(source1) AS source,
                      toFloat(coalesce(impressions1, 0)) AS impressions,
                      toFloat(coalesce(clicks1, 0)) AS clicks,
                      toFloat(convertCurrency('USD', 'USD', toFloat(coalesce(spend1, 0)))) AS cost
                  
      FROM
                      `bigquery.posthog_test.posthog_test_facebook_ads_table` AS posthog_test_facebook_ads_table
                  
      WHERE
                      and(greaterOrEquals(toDateTime(date1), toDateTime('2024-11-01 00:00:00')), lessOrEquals(toDateTime(date1), toDateTime('2024-12-31 23:59:59')))
                  UNION ALL
                  
      SELECT
                      toString(campaign2) AS campaign,
                      toString(source2) AS source,
                      toFloat(coalesce(impressions2, 0)) AS impressions,
                      toFloat(coalesce(clicks2, 0)) AS clicks,
                      toFloat(convertCurrency('USD', 'USD', toFloat(coalesce(spend2, 0)))) AS cost
                  
      FROM
                      `bigquery.posthog_test.posthog_test_tiktok_ads_table` AS posthog_test_tiktok_ads_table
                  
      WHERE
                      and(greaterOrEquals(toDateTime(date2), toDateTime('2024-11-01 00:00:00')), lessOrEquals(toDateTime(date2), toDateTime('2024-12-31 23:59:59')))
                  UNION ALL
                  
      SELECT
                      toString(campaign3) AS campaign,
                      toString(source3) AS source,
                      toFloat(coalesce(impressions3, 0)) AS impressions,
                      toFloat(coalesce(clicks3, 0)) AS clicks,
                      toFloat(convertCurrency('USD', 'USD', toFloat(coalesce(spend3, 0)))) AS cost
                  
      FROM
                      `bigquery.posthog_test.posthog_test_linkedin_ads_table` AS posthog_test_linkedin_ads_table
                  
      WHERE
                      and(greaterOrEquals(toDateTime(date3), toDateTime('2024-11-01 00:00:00')), lessOrEquals(toDateTime(date3), toDateTime('2024-12-31 23:59:59'))))
              
      GROUP BY
                  campaign,
                  source) AS campaign_costs) AS current_period
          LEFT JOIN (
      SELECT
              campaign_costs.campaign AS Campaign,
              campaign_costs.source AS Source,
              round(campaign_costs.total_cost, 2) AS Cost,
              round(campaign_costs.total_clicks, 0) AS Clicks,
              round(campaign_costs.total_impressions, 0) AS Impressions,
              round(divide(campaign_costs.total_cost, nullif(campaign_costs.total_clicks, 0)), 2) AS CPC,
              round(multiply(divide(campaign_costs.total_clicks, nullif(campaign_costs.total_impressions, 0)), 100), 2) AS CTR
          
      FROM
              (
      SELECT
                  campaign,
                  source,
                  sum(cost) AS total_cost,
                  sum(clicks) AS total_clicks,
                  sum(impressions) AS total_impressions
              
      FROM
                  (
      SELECT
                      toString(campaign1) AS campaign,
                      toString(source1) AS source,
                      toFloat(coalesce(impressions1, 0)) AS impressions,
                      toFloat(coalesce(clicks1, 0)) AS clicks,
                      toFloat(convertCurrency('USD', 'USD', toFloat(coalesce(spend1, 0)))) AS cost
                  
      FROM
                      `bigquery.posthog_test.posthog_test_facebook_ads_table` AS posthog_test_facebook_ads_table
                  
      WHERE
                      and(greaterOrEquals(toDateTime(date1), toDateTime('2024-09-01 00:00:00')), lessOrEquals(toDateTime(date1), toDateTime('2024-10-31 23:59:59')))
                  UNION ALL
                  
      SELECT
                      toString(campaign2) AS campaign,
                      toString(source2) AS source,
                      toFloat(coalesce(impressions2, 0)) AS impressions,
                      toFloat(coalesce(clicks2, 0)) AS clicks,
                      toFloat(convertCurrency('USD', 'USD', toFloat(coalesce(spend2, 0)))) AS cost
                  
      FROM
                      `bigquery.posthog_test.posthog_test_tiktok_ads_table` AS posthog_test_tiktok_ads_table
                  
      WHERE
                      and(greaterOrEquals(toDateTime(date2), toDateTime('2024-09-01 00:00:00')), lessOrEquals(toDateTime(date2), toDateTime('2024-10-31 23:59:59')))
                  UNION ALL
                  
      SELECT
                      toString(campaign3) AS campaign,
                      toString(source3) AS source,
                      toFloat(coalesce(impressions3, 0)) AS impressions,
                      toFloat(coalesce(clicks3, 0)) AS clicks,
                      toFloat(convertCurrency('USD', 'USD', toFloat(coalesce(spend3, 0)))) AS cost
                  
      FROM
                      `bigquery.posthog_test.posthog_test_linkedin_ads_table` AS posthog_test_linkedin_ads_table
                  
      WHERE
                      and(greaterOrEquals(toDateTime(date3), toDateTime('2024-09-01 00:00:00')), lessOrEquals(toDateTime(date3), toDateTime('2024-10-31 23:59:59'))))
              
      GROUP BY
                  campaign,
                  source) AS campaign_costs) AS previous_period ON and(equals(current_period.Campaign, previous_period.Campaign), equals(current_period.Source, previous_period.Source))
      ORDER BY
          Cost DESC
      
      LIMIT 101
      OFFSET 0
    ''',
    'response': list([
      list([
        MarketingAnalyticsItem(changeFromPreviousPct=None, hasComparison=True, isIncreaseBad=False, key='Campaign', kind=<WebAnalyticsItemKind.UNIT: 'unit'>, previous='', value='Test-Brand-Campaign-EMEA'),
        MarketingAnalyticsItem(changeFromPreviousPct=None, hasComparison=True, isIncreaseBad=False, key='Source', kind=<WebAnalyticsItemKind.UNIT: 'unit'>, previous='', value='TikTok Ads'),
        MarketingAnalyticsItem(changeFromPreviousPct=None, hasComparison=True, isIncreaseBad=True, key='Cost', kind=<WebAnalyticsItemKind.CURRENCY: 'currency'>, previous=None, value=47.21),
        MarketingAnalyticsItem(changeFromPreviousPct=None, hasComparison=True, isIncreaseBad=False, key='Clicks', kind=<WebAnalyticsItemKind.UNIT: 'unit'>, previous=None, value=118.0),
        MarketingAnalyticsItem(changeFromPreviousPct=None, hasComparison=True, isIncreaseBad=False, key='Impressions', kind=<WebAnalyticsItemKind.UNIT: 'unit'>, previous=None, value=324.0),
        MarketingAnalyticsItem(changeFromPreviousPct=None, hasComparison=True, isIncreaseBad=True, key='CPC', kind=<WebAnalyticsItemKind.CURRENCY: 'currency'>, previous=None, value=0.4),
        MarketingAnalyticsItem(changeFromPreviousPct=None, hasComparison=True, isIncreaseBad=False, key='CTR', kind=<WebAnalyticsItemKind.PERCENTAGE: 'percentage'>, previous=None, value=36.42),
      ]),
      list([
        MarketingAnalyticsItem(changeFromPreviousPct=None, hasComparison=True, isIncreaseBad=False, key='Campaign', kind=<WebAnalyticsItemKind.UNIT: 'unit'>, previous='', value='Test-Competitors-AMER'),
        MarketingAnalyticsItem(changeFromPreviousPct=None, hasComparison=True, isIncreaseBad=False, key='Source', kind=<WebAnalyticsItemKind.UNIT: 'unit'>, previous='', value='TikTok Ads'),
        MarketingAnalyticsItem(changeFromPreviousPct=None, hasComparison=True, isIncreaseBad=True, key='Cost', kind=<WebAnalyticsItemKind.CURRENCY: 'currency'>, previous=None, value=38.92),
        MarketingAnalyticsItem(changeFromPreviousPct=None, hasComparison=True, isIncreaseBad=False, key='Clicks', kind=<WebAnalyticsItemKind.UNIT: 'unit'>, previous=None, value=1.0),
        MarketingAnalyticsItem(changeFromPreviousPct=None, hasComparison=True, isIncreaseBad=False, key='Impressions', kind=<WebAnalyticsItemKind.UNIT: 'unit'>, previous=None, value=48.0),
        MarketingAnalyticsItem(changeFromPreviousPct=None, hasComparison=True, isIncreaseBad=True, key='CPC', kind=<WebAnalyticsItemKind.CURRENCY: 'currency'>, previous=None, value=38.92),
        MarketingAnalyticsItem(changeFromPreviousPct=None, hasComparison=True, isIncreaseBad=False, key='CTR', kind=<WebAnalyticsItemKind.PERCENTAGE: 'percentage'>, previous=None, value=2.08),
      ]),
      list([
        MarketingAnalyticsItem(changeFromPreviousPct=None, hasComparison=True, isIncreaseBad=False, key='Campaign', kind=<WebAnalyticsItemKind.UNIT: 'unit'>, previous='TechFlow-Prospecting-AMER-Traffic-Technical-Static-Analytics-Aug-2024', value='TechFlow-Prospecting-AMER-Traffic-Technical-Static-Analytics-Aug-2024'),
        MarketingAnalyticsItem(changeFromPreviousPct=None, hasComparison=True, isIncreaseBad=False, key='Source', kind=<WebAnalyticsItemKind.UNIT: 'unit'>, previous='LinkedIn Ads', value='LinkedIn Ads'),
        MarketingAnalyticsItem(changeFromPreviousPct=31.0, hasComparison=True, isIncreaseBad=True, key='Cost', kind=<WebAnalyticsItemKind.CURRENCY: 'currency'>, previous=24.42, value=31.92),
        MarketingAnalyticsItem(changeFromPreviousPct=0.0, hasComparison=True, isIncreaseBad=False, key='Clicks', kind=<WebAnalyticsItemKind.UNIT: 'unit'>, previous=4.0, value=4.0),
        MarketingAnalyticsItem(changeFromPreviousPct=-40.0, hasComparison=True, isIncreaseBad=False, key='Impressions', kind=<WebAnalyticsItemKind.UNIT: 'unit'>, previous=2649.0, value=1581.0),
        MarketingAnalyticsItem(changeFromPreviousPct=31.0, hasComparison=True, isIncreaseBad=True, key='CPC', kind=<WebAnalyticsItemKind.CURRENCY: 'currency'>, previous=6.1, value=7.98),
        MarketingAnalyticsItem(changeFromPreviousPct=67.0, hasComparison=True, isIncreaseBad=False, key='CTR', kind=<WebAnalyticsItemKind.PERCENTAGE: 'percentage'>, previous=0.15, value=0.25),
      ]),
      list([
        MarketingAnalyticsItem(changeFromPreviousPct=None, hasComparison=True, isIncreaseBad=False, key='Campaign', kind=<WebAnalyticsItemKind.UNIT: 'unit'>, previous='', value='TechFlow-Prospecting-AMER-Traffic-ProductDev-Static-Analytics-Aug-2024'),
        MarketingAnalyticsItem(changeFromPreviousPct=None, hasComparison=True, isIncreaseBad=False, key='Source', kind=<WebAnalyticsItemKind.UNIT: 'unit'>, previous='', value='LinkedIn Ads'),
        MarketingAnalyticsItem(changeFromPreviousPct=None, hasComparison=True, isIncreaseBad=True, key='Cost', kind=<WebAnalyticsItemKind.CURRENCY: 'currency'>, previous=None, value=23.12),
        MarketingAnalyticsItem(changeFromPreviousPct=None, hasComparison=True, isIncreaseBad=False, key='Clicks', kind=<WebAnalyticsItemKind.UNIT: 'unit'>, previous=None, value=4.0),
        MarketingAnalyticsItem(changeFromPreviousPct=None, hasComparison=True, isIncreaseBad=False, key='Impressions', kind=<WebAnalyticsItemKind.UNIT: 'unit'>, previous=None, value=1171.0),
        MarketingAnalyticsItem(changeFromPreviousPct=None, hasComparison=True, isIncreaseBad=True, key='CPC', kind=<WebAnalyticsItemKind.CURRENCY: 'currency'>, previous=None, value=5.78),
        MarketingAnalyticsItem(changeFromPreviousPct=None, hasComparison=True, isIncreaseBad=False, key='CTR', kind=<WebAnalyticsItemKind.PERCENTAGE: 'percentage'>, previous=None, value=0.34),
      ]),
      list([
        MarketingAnalyticsItem(changeFromPreviousPct=None, hasComparison=True, isIncreaseBad=False, key='Campaign', kind=<WebAnalyticsItemKind.UNIT: 'unit'>, previous='', value='TechFlow-Prospecting-AMER-Traffic-ProductDev-Static-Comparison-Oct-2024'),
        MarketingAnalyticsItem(changeFromPreviousPct=None, hasComparison=True, isIncreaseBad=False, key='Source', kind=<WebAnalyticsItemKind.UNIT: 'unit'>, previous='', value='LinkedIn Ads'),
        MarketingAnalyticsItem(changeFromPreviousPct=None, hasComparison=True, isIncreaseBad=True, key='Cost', kind=<WebAnalyticsItemKind.CURRENCY: 'currency'>, previous=None, value=13.49),
        MarketingAnalyticsItem(changeFromPreviousPct=None, hasComparison=True, isIncreaseBad=False, key='Clicks', kind=<WebAnalyticsItemKind.UNIT: 'unit'>, previous=None, value=3.0),
        MarketingAnalyticsItem(changeFromPreviousPct=None, hasComparison=True, isIncreaseBad=False, key='Impressions', kind=<WebAnalyticsItemKind.UNIT: 'unit'>, previous=None, value=420.0),
        MarketingAnalyticsItem(changeFromPreviousPct=None, hasComparison=True, isIncreaseBad=True, key='CPC', kind=<WebAnalyticsItemKind.CURRENCY: 'currency'>, previous=None, value=4.5),
        MarketingAnalyticsItem(changeFromPreviousPct=None, hasComparison=True, isIncreaseBad=False, key='CTR', kind=<WebAnalyticsItemKind.PERCENTAGE: 'percentage'>, previous=None, value=0.71),
      ]),
      list([
        MarketingAnalyticsItem(changeFromPreviousPct=None, hasComparison=True, isIncreaseBad=False, key='Campaign', kind=<WebAnalyticsItemKind.UNIT: 'unit'>, previous='', value='TechFlow-Prospecting-AMER-Traffic-Leadership-Static-Analytics-Aug-2024'),
        MarketingAnalyticsItem(changeFromPreviousPct=None, hasComparison=True, isIncreaseBad=False, key='Source', kind=<WebAnalyticsItemKind.UNIT: 'unit'>, previous='', value='LinkedIn Ads'),
        MarketingAnalyticsItem(changeFromPreviousPct=None, hasComparison=True, isIncreaseBad=True, key='Cost', kind=<WebAnalyticsItemKind.CURRENCY: 'currency'>, previous=None, value=10.25),
        MarketingAnalyticsItem(changeFromPreviousPct=None, hasComparison=True, isIncreaseBad=False, key='Clicks', kind=<WebAnalyticsItemKind.UNIT: 'unit'>, previous=None, value=2.0),
        MarketingAnalyticsItem(changeFromPreviousPct=None, hasComparison=True, isIncreaseBad=False, key='Impressions', kind=<WebAnalyticsItemKind.UNIT: 'unit'>, previous=None, value=616.0),
        MarketingAnalyticsItem(changeFromPreviousPct=None, hasComparison=True, isIncreaseBad=True, key='CPC', kind=<WebAnalyticsItemKind.CURRENCY: 'currency'>, previous=None, value=5.12),
        MarketingAnalyticsItem(changeFromPreviousPct=None, hasComparison=True, isIncreaseBad=False, key='CTR', kind=<WebAnalyticsItemKind.PERCENTAGE: 'percentage'>, previous=None, value=0.32),
      ]),
      list([
        MarketingAnalyticsItem(changeFromPreviousPct=None, hasComparison=True, isIncreaseBad=False, key='Campaign', kind=<WebAnalyticsItemKind.UNIT: 'unit'>, previous='', value='Test-Experimentation-AMER'),
        MarketingAnalyticsItem(changeFromPreviousPct=None, hasComparison=True, isIncreaseBad=False, key='Source', kind=<WebAnalyticsItemKind.UNIT: 'unit'>, previous='', value='TikTok Ads'),
        MarketingAnalyticsItem(changeFromPreviousPct=None, hasComparison=True, isIncreaseBad=True, key='Cost', kind=<WebAnalyticsItemKind.CURRENCY: 'currency'>, previous=None, value=7.43),
        MarketingAnalyticsItem(changeFromPreviousPct=None, hasComparison=True, isIncreaseBad=False, key='Clicks', kind=<WebAnalyticsItemKind.UNIT: 'unit'>, previous=None, value=1.0),
        MarketingAnalyticsItem(changeFromPreviousPct=None, hasComparison=True, isIncreaseBad=False, key='Impressions', kind=<WebAnalyticsItemKind.UNIT: 'unit'>, previous=None, value=11.0),
        MarketingAnalyticsItem(changeFromPreviousPct=None, hasComparison=True, isIncreaseBad=True, key='CPC', kind=<WebAnalyticsItemKind.CURRENCY: 'currency'>, previous=None, value=7.43),
        MarketingAnalyticsItem(changeFromPreviousPct=None, hasComparison=True, isIncreaseBad=False, key='CTR', kind=<WebAnalyticsItemKind.PERCENTAGE: 'percentage'>, previous=None, value=9.09),
      ]),
      list([
        MarketingAnalyticsItem(changeFromPreviousPct=None, hasComparison=True, isIncreaseBad=False, key='Campaign', kind=<WebAnalyticsItemKind.UNIT: 'unit'>, previous='TestCorp-Search-EMEA-Analytics-Tools', value='TestCorp-Search-EMEA-Analytics-Tools'),
        MarketingAnalyticsItem(changeFromPreviousPct=None, hasComparison=True, isIncreaseBad=False, key='Source', kind=<WebAnalyticsItemKind.UNIT: 'unit'>, previous='Facebook Ads', value='Facebook Ads'),
        MarketingAnalyticsItem(changeFromPreviousPct=162.0, hasComparison=True, isIncreaseBad=True, key='Cost', kind=<WebAnalyticsItemKind.CURRENCY: 'currency'>, previous=2.63, value=6.88),
        MarketingAnalyticsItem(changeFromPreviousPct=50.0, hasComparison=True, isIncreaseBad=False, key='Clicks', kind=<WebAnalyticsItemKind.UNIT: 'unit'>, previous=2.0, value=3.0),
        MarketingAnalyticsItem(changeFromPreviousPct=2.0, hasComparison=True, isIncreaseBad=False, key='Impressions', kind=<WebAnalyticsItemKind.UNIT: 'unit'>, previous=164.0, value=168.0),
        MarketingAnalyticsItem(changeFromPreviousPct=73.0, hasComparison=True, isIncreaseBad=True, key='CPC', kind=<WebAnalyticsItemKind.CURRENCY: 'currency'>, previous=1.32, value=2.29),
        MarketingAnalyticsItem(changeFromPreviousPct=47.0, hasComparison=True, isIncreaseBad=False, key='CTR', kind=<WebAnalyticsItemKind.PERCENTAGE: 'percentage'>, previous=1.22, value=1.79),
      ]),
      list([
        MarketingAnalyticsItem(changeFromPreviousPct=None, hasComparison=True, isIncreaseBad=False, key='Campaign', kind=<WebAnalyticsItemKind.UNIT: 'unit'>, previous='Test-AB-Testing-AMER', value='Test-AB-Testing-AMER'),
        MarketingAnalyticsItem(changeFromPreviousPct=None, hasComparison=True, isIncreaseBad=False, key='Source', kind=<WebAnalyticsItemKind.UNIT: 'unit'>, previous='TikTok Ads', value='TikTok Ads'),
        MarketingAnalyticsItem(changeFromPreviousPct=-28.0, hasComparison=True, isIncreaseBad=True, key='Cost', kind=<WebAnalyticsItemKind.CURRENCY: 'currency'>, previous=8.67, value=6.28),
        MarketingAnalyticsItem(changeFromPreviousPct=0.0, hasComparison=True, isIncreaseBad=False, key='Clicks', kind=<WebAnalyticsItemKind.UNIT: 'unit'>, previous=2.0, value=2.0),
        MarketingAnalyticsItem(changeFromPreviousPct=171.0, hasComparison=True, isIncreaseBad=False, key='Impressions', kind=<WebAnalyticsItemKind.UNIT: 'unit'>, previous=28.0, value=76.0),
        MarketingAnalyticsItem(changeFromPreviousPct=-28.0, hasComparison=True, isIncreaseBad=True, key='CPC', kind=<WebAnalyticsItemKind.CURRENCY: 'currency'>, previous=4.34, value=3.14),
        MarketingAnalyticsItem(changeFromPreviousPct=-63.0, hasComparison=True, isIncreaseBad=False, key='CTR', kind=<WebAnalyticsItemKind.PERCENTAGE: 'percentage'>, previous=7.14, value=2.63),
      ]),
      list([
        MarketingAnalyticsItem(changeFromPreviousPct=None, hasComparison=True, isIncreaseBad=False, key='Campaign', kind=<WebAnalyticsItemKind.UNIT: 'unit'>, previous='', value='TechFlow-Prospecting-GroupB-Traffic-Engineering-Static-Dec-2024'),
        MarketingAnalyticsItem(changeFromPreviousPct=None, hasComparison=True, isIncreaseBad=False, key='Source', kind=<WebAnalyticsItemKind.UNIT: 'unit'>, previous='', value='LinkedIn Ads'),
        MarketingAnalyticsItem(changeFromPreviousPct=None, hasComparison=True, isIncreaseBad=True, key='Cost', kind=<WebAnalyticsItemKind.CURRENCY: 'currency'>, previous=None, value=4.13),
        MarketingAnalyticsItem(changeFromPreviousPct=None, hasComparison=True, isIncreaseBad=False, key='Clicks', kind=<WebAnalyticsItemKind.UNIT: 'unit'>, previous=None, value=1.0),
        MarketingAnalyticsItem(changeFromPreviousPct=None, hasComparison=True, isIncreaseBad=False, key='Impressions', kind=<WebAnalyticsItemKind.UNIT: 'unit'>, previous=None, value=312.0),
        MarketingAnalyticsItem(changeFromPreviousPct=None, hasComparison=True, isIncreaseBad=True, key='CPC', kind=<WebAnalyticsItemKind.CURRENCY: 'currency'>, previous=None, value=4.13),
        MarketingAnalyticsItem(changeFromPreviousPct=None, hasComparison=True, isIncreaseBad=False, key='CTR', kind=<WebAnalyticsItemKind.PERCENTAGE: 'percentage'>, previous=None, value=0.32),
      ]),
      list([
        MarketingAnalyticsItem(changeFromPreviousPct=None, hasComparison=True, isIncreaseBad=False, key='Campaign', kind=<WebAnalyticsItemKind.UNIT: 'unit'>, previous='', value='test_brand_campaign'),
        MarketingAnalyticsItem(changeFromPreviousPct=None, hasComparison=True, isIncreaseBad=False, key='Source', kind=<WebAnalyticsItemKind.UNIT: 'unit'>, previous='', value='Facebook Ads'),
        MarketingAnalyticsItem(changeFromPreviousPct=None, hasComparison=True, isIncreaseBad=True, key='Cost', kind=<WebAnalyticsItemKind.CURRENCY: 'currency'>, previous=None, value=3.43),
        MarketingAnalyticsItem(changeFromPreviousPct=None, hasComparison=True, isIncreaseBad=False, key='Clicks', kind=<WebAnalyticsItemKind.UNIT: 'unit'>, previous=None, value=2.0),
        MarketingAnalyticsItem(changeFromPreviousPct=None, hasComparison=True, isIncreaseBad=False, key='Impressions', kind=<WebAnalyticsItemKind.UNIT: 'unit'>, previous=None, value=731.0),
        MarketingAnalyticsItem(changeFromPreviousPct=None, hasComparison=True, isIncreaseBad=True, key='CPC', kind=<WebAnalyticsItemKind.CURRENCY: 'currency'>, previous=None, value=1.72),
        MarketingAnalyticsItem(changeFromPreviousPct=None, hasComparison=True, isIncreaseBad=False, key='CTR', kind=<WebAnalyticsItemKind.PERCENTAGE: 'percentage'>, previous=None, value=0.27),
      ]),
      list([
        MarketingAnalyticsItem(changeFromPreviousPct=None, hasComparison=True, isIncreaseBad=False, key='Campaign', kind=<WebAnalyticsItemKind.UNIT: 'unit'>, previous='TestCorp-Search-AMER-Analytics-Tools', value='TestCorp-Search-AMER-Analytics-Tools'),
        MarketingAnalyticsItem(changeFromPreviousPct=None, hasComparison=True, isIncreaseBad=False, key='Source', kind=<WebAnalyticsItemKind.UNIT: 'unit'>, previous='Facebook Ads', value='Facebook Ads'),
        MarketingAnalyticsItem(changeFromPreviousPct=34.0, hasComparison=True, isIncreaseBad=True, key='Cost', kind=<WebAnalyticsItemKind.CURRENCY: 'currency'>, previous=2.2, value=2.94),
        MarketingAnalyticsItem(changeFromPreviousPct=0.0, hasComparison=True, isIncreaseBad=False, key='Clicks', kind=<WebAnalyticsItemKind.UNIT: 'unit'>, previous=2.0, value=2.0),
        MarketingAnalyticsItem(changeFromPreviousPct=95.0, hasComparison=True, isIncreaseBad=False, key='Impressions', kind=<WebAnalyticsItemKind.UNIT: 'unit'>, previous=106.0, value=207.0),
        MarketingAnalyticsItem(changeFromPreviousPct=34.0, hasComparison=True, isIncreaseBad=True, key='CPC', kind=<WebAnalyticsItemKind.CURRENCY: 'currency'>, previous=1.1, value=1.47),
        MarketingAnalyticsItem(changeFromPreviousPct=-49.0, hasComparison=True, isIncreaseBad=False, key='CTR', kind=<WebAnalyticsItemKind.PERCENTAGE: 'percentage'>, previous=1.89, value=0.97),
      ]),
      list([
        MarketingAnalyticsItem(changeFromPreviousPct=None, hasComparison=True, isIncreaseBad=False, key='Campaign', kind=<WebAnalyticsItemKind.UNIT: 'unit'>, previous='', value='TechFlow-Prospecting-EMEA-Traffic-Technical-Static-Analytics-Aug-2024'),
        MarketingAnalyticsItem(changeFromPreviousPct=None, hasComparison=True, isIncreaseBad=False, key='Source', kind=<WebAnalyticsItemKind.UNIT: 'unit'>, previous='', value='LinkedIn Ads'),
        MarketingAnalyticsItem(changeFromPreviousPct=None, hasComparison=True, isIncreaseBad=True, key='Cost', kind=<WebAnalyticsItemKind.CURRENCY: 'currency'>, previous=None, value=1.28),
        MarketingAnalyticsItem(changeFromPreviousPct=None, hasComparison=True, isIncreaseBad=False, key='Clicks', kind=<WebAnalyticsItemKind.UNIT: 'unit'>, previous=None, value=2.0),
        MarketingAnalyticsItem(changeFromPreviousPct=None, hasComparison=True, isIncreaseBad=False, key='Impressions', kind=<WebAnalyticsItemKind.UNIT: 'unit'>, previous=None, value=238.0),
        MarketingAnalyticsItem(changeFromPreviousPct=None, hasComparison=True, isIncreaseBad=True, key='CPC', kind=<WebAnalyticsItemKind.CURRENCY: 'currency'>, previous=None, value=0.64),
        MarketingAnalyticsItem(changeFromPreviousPct=None, hasComparison=True, isIncreaseBad=False, key='CTR', kind=<WebAnalyticsItemKind.PERCENTAGE: 'percentage'>, previous=None, value=0.84),
      ]),
      list([
        MarketingAnalyticsItem(changeFromPreviousPct=None, hasComparison=True, isIncreaseBad=False, key='Campaign', kind=<WebAnalyticsItemKind.UNIT: 'unit'>, previous='', value='Test-Product-Analytics-EMEA'),
        MarketingAnalyticsItem(changeFromPreviousPct=None, hasComparison=True, isIncreaseBad=False, key='Source', kind=<WebAnalyticsItemKind.UNIT: 'unit'>, previous='', value='Facebook Ads'),
        MarketingAnalyticsItem(changeFromPreviousPct=None, hasComparison=True, isIncreaseBad=True, key='Cost', kind=<WebAnalyticsItemKind.CURRENCY: 'currency'>, previous=None, value=0.58),
        MarketingAnalyticsItem(changeFromPreviousPct=None, hasComparison=True, isIncreaseBad=False, key='Clicks', kind=<WebAnalyticsItemKind.UNIT: 'unit'>, previous=None, value=1.0),
        MarketingAnalyticsItem(changeFromPreviousPct=None, hasComparison=True, isIncreaseBad=False, key='Impressions', kind=<WebAnalyticsItemKind.UNIT: 'unit'>, previous=None, value=298.0),
        MarketingAnalyticsItem(changeFromPreviousPct=None, hasComparison=True, isIncreaseBad=True, key='CPC', kind=<WebAnalyticsItemKind.CURRENCY: 'currency'>, previous=None, value=0.58),
        MarketingAnalyticsItem(changeFromPreviousPct=None, hasComparison=True, isIncreaseBad=False, key='CTR', kind=<WebAnalyticsItemKind.PERCENTAGE: 'percentage'>, previous=None, value=0.34),
      ]),
      list([
        MarketingAnalyticsItem(changeFromPreviousPct=None, hasComparison=True, isIncreaseBad=False, key='Campaign', kind=<WebAnalyticsItemKind.UNIT: 'unit'>, previous='Test-Experimentation-EMEA', value='Test-Experimentation-EMEA'),
        MarketingAnalyticsItem(changeFromPreviousPct=None, hasComparison=True, isIncreaseBad=False, key='Source', kind=<WebAnalyticsItemKind.UNIT: 'unit'>, previous='TikTok Ads', value='TikTok Ads'),
        MarketingAnalyticsItem(changeFromPreviousPct=0.0, hasComparison=True, isIncreaseBad=True, key='Cost', kind=<WebAnalyticsItemKind.CURRENCY: 'currency'>, previous=0.0, value=0.0),
        MarketingAnalyticsItem(changeFromPreviousPct=0.0, hasComparison=True, isIncreaseBad=False, key='Clicks', kind=<WebAnalyticsItemKind.UNIT: 'unit'>, previous=0.0, value=0.0),
        MarketingAnalyticsItem(changeFromPreviousPct=-67.0, hasComparison=True, isIncreaseBad=False, key='Impressions', kind=<WebAnalyticsItemKind.UNIT: 'unit'>, previous=21.0, value=7.0),
        MarketingAnalyticsItem(changeFromPreviousPct=None, hasComparison=True, isIncreaseBad=True, key='CPC', kind=<WebAnalyticsItemKind.CURRENCY: 'currency'>, previous=None, value=None),
        MarketingAnalyticsItem(changeFromPreviousPct=0.0, hasComparison=True, isIncreaseBad=False, key='CTR', kind=<WebAnalyticsItemKind.PERCENTAGE: 'percentage'>, previous=0.0, value=0.0),
      ]),
      list([
        MarketingAnalyticsItem(changeFromPreviousPct=None, hasComparison=True, isIncreaseBad=False, key='Campaign', kind=<WebAnalyticsItemKind.UNIT: 'unit'>, previous='', value='Test-Session-Recording-AMER'),
        MarketingAnalyticsItem(changeFromPreviousPct=None, hasComparison=True, isIncreaseBad=False, key='Source', kind=<WebAnalyticsItemKind.UNIT: 'unit'>, previous='', value='TikTok Ads'),
        MarketingAnalyticsItem(changeFromPreviousPct=None, hasComparison=True, isIncreaseBad=True, key='Cost', kind=<WebAnalyticsItemKind.CURRENCY: 'currency'>, previous=None, value=0.0),
        MarketingAnalyticsItem(changeFromPreviousPct=None, hasComparison=True, isIncreaseBad=False, key='Clicks', kind=<WebAnalyticsItemKind.UNIT: 'unit'>, previous=None, value=0.0),
        MarketingAnalyticsItem(changeFromPreviousPct=None, hasComparison=True, isIncreaseBad=False, key='Impressions', kind=<WebAnalyticsItemKind.UNIT: 'unit'>, previous=None, value=5.0),
        MarketingAnalyticsItem(changeFromPreviousPct=None, hasComparison=True, isIncreaseBad=True, key='CPC', kind=<WebAnalyticsItemKind.CURRENCY: 'currency'>, previous=None, value=None),
        MarketingAnalyticsItem(changeFromPreviousPct=None, hasComparison=True, isIncreaseBad=False, key='CTR', kind=<WebAnalyticsItemKind.PERCENTAGE: 'percentage'>, previous=None, value=0.0),
      ]),
      list([
        MarketingAnalyticsItem(changeFromPreviousPct=None, hasComparison=True, isIncreaseBad=False, key='Campaign', kind=<WebAnalyticsItemKind.UNIT: 'unit'>, previous='', value='TestCorp-Search-EMEA-Mobile-Platform'),
        MarketingAnalyticsItem(changeFromPreviousPct=None, hasComparison=True, isIncreaseBad=False, key='Source', kind=<WebAnalyticsItemKind.UNIT: 'unit'>, previous='', value='TikTok Ads'),
        MarketingAnalyticsItem(changeFromPreviousPct=None, hasComparison=True, isIncreaseBad=True, key='Cost', kind=<WebAnalyticsItemKind.CURRENCY: 'currency'>, previous=None, value=0.0),
        MarketingAnalyticsItem(changeFromPreviousPct=None, hasComparison=True, isIncreaseBad=False, key='Clicks', kind=<WebAnalyticsItemKind.UNIT: 'unit'>, previous=None, value=0.0),
        MarketingAnalyticsItem(changeFromPreviousPct=None, hasComparison=True, isIncreaseBad=False, key='Impressions', kind=<WebAnalyticsItemKind.UNIT: 'unit'>, previous=None, value=13.0),
        MarketingAnalyticsItem(changeFromPreviousPct=None, hasComparison=True, isIncreaseBad=True, key='CPC', kind=<WebAnalyticsItemKind.CURRENCY: 'currency'>, previous=None, value=None),
        MarketingAnalyticsItem(changeFromPreviousPct=None, hasComparison=True, isIncreaseBad=False, key='CTR', kind=<WebAnalyticsItemKind.PERCENTAGE: 'percentage'>, previous=None, value=0.0),
      ]),
      list([
        MarketingAnalyticsItem(changeFromPreviousPct=None, hasComparison=True, isIncreaseBad=False, key='Campaign', kind=<WebAnalyticsItemKind.UNIT: 'unit'>, previous='', value='Test-Product-Analytics-AMER'),
        MarketingAnalyticsItem(changeFromPreviousPct=None, hasComparison=True, isIncreaseBad=False, key='Source', kind=<WebAnalyticsItemKind.UNIT: 'unit'>, previous='', value='Facebook Ads'),
        MarketingAnalyticsItem(changeFromPreviousPct=None, hasComparison=True, isIncreaseBad=True, key='Cost', kind=<WebAnalyticsItemKind.CURRENCY: 'currency'>, previous=None, value=0.0),
        MarketingAnalyticsItem(changeFromPreviousPct=None, hasComparison=True, isIncreaseBad=False, key='Clicks', kind=<WebAnalyticsItemKind.UNIT: 'unit'>, previous=None, value=0.0),
        MarketingAnalyticsItem(changeFromPreviousPct=None, hasComparison=True, isIncreaseBad=False, key='Impressions', kind=<WebAnalyticsItemKind.UNIT: 'unit'>, previous=None, value=2.0),
        MarketingAnalyticsItem(changeFromPreviousPct=None, hasComparison=True, isIncreaseBad=True, key='CPC', kind=<WebAnalyticsItemKind.CURRENCY: 'currency'>, previous=None, value=None),
        MarketingAnalyticsItem(changeFromPreviousPct=None, hasComparison=True, isIncreaseBad=False, key='CTR', kind=<WebAnalyticsItemKind.PERCENTAGE: 'percentage'>, previous=None, value=0.0),
      ]),
      list([
        MarketingAnalyticsItem(changeFromPreviousPct=None, hasComparison=True, isIncreaseBad=False, key='Campaign', kind=<WebAnalyticsItemKind.UNIT: 'unit'>, previous='', value='TechFlow-Prospecting-GroupB-Traffic-Leadership-Static-Dec-2024'),
        MarketingAnalyticsItem(changeFromPreviousPct=None, hasComparison=True, isIncreaseBad=False, key='Source', kind=<WebAnalyticsItemKind.UNIT: 'unit'>, previous='', value='LinkedIn Ads'),
        MarketingAnalyticsItem(changeFromPreviousPct=None, hasComparison=True, isIncreaseBad=True, key='Cost', kind=<WebAnalyticsItemKind.CURRENCY: 'currency'>, previous=None, value=0.0),
        MarketingAnalyticsItem(changeFromPreviousPct=None, hasComparison=True, isIncreaseBad=False, key='Clicks', kind=<WebAnalyticsItemKind.UNIT: 'unit'>, previous=None, value=0.0),
        MarketingAnalyticsItem(changeFromPreviousPct=None, hasComparison=True, isIncreaseBad=False, key='Impressions', kind=<WebAnalyticsItemKind.UNIT: 'unit'>, previous=None, value=257.0),
        MarketingAnalyticsItem(changeFromPreviousPct=None, hasComparison=True, isIncreaseBad=True, key='CPC', kind=<WebAnalyticsItemKind.CURRENCY: 'currency'>, previous=None, value=None),
        MarketingAnalyticsItem(changeFromPreviousPct=None, hasComparison=True, isIncreaseBad=False, key='CTR', kind=<WebAnalyticsItemKind.PERCENTAGE: 'percentage'>, previous=None, value=0.0),
      ]),
    ]),
  })
# ---
