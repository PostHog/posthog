# serializer version: 1
# name: TestConversionGoalProcessor.test_attribution_window_sql_structure_demo
  '''
  
  SELECT
      if(notEmpty(campaign_name), campaign_name, 'organic') AS campaign,
      if(notEmpty(source_name), source_name, 'organic') AS source,
      count() AS conversion_0
  
  FROM
      (
  SELECT
          person_id,
          if(notEmpty(conversion_campaign), conversion_campaign, if(notEmpty(fallback_campaign), fallback_campaign, '')) AS campaign_name,
          if(notEmpty(conversion_source), conversion_source, if(notEmpty(fallback_source), fallback_source, '')) AS source_name,
          1 AS conversion_value
      
  FROM
          (
  SELECT
              person_id,
              conversion_timestamps[i] AS conversion_time,
              conversion_math_values[i] AS conversion_math_value,
              conversion_campaigns[i] AS conversion_campaign,
              conversion_sources[i] AS conversion_source,
              arrayMax(arrayFilter(x -> and(lessOrEquals(x, conversion_timestamps[i]), greaterOrEquals(x, minus(conversion_timestamps[i], 15552000))), utm_timestamps)) AS last_utm_timestamp,
              if(isNotNull(last_utm_timestamp), utm_campaigns[indexOf(utm_timestamps, last_utm_timestamp)], '') AS fallback_campaign,
              if(isNotNull(last_utm_timestamp), utm_sources[indexOf(utm_timestamps, last_utm_timestamp)], '') AS fallback_source
          
  FROM
              (
  SELECT
                  events.person_id,
                  arrayFilter(x -> greater(x, 0), groupArray(if(equals(events.event, 'user signed up'), toUnixTimestamp(events.timestamp), 0))) AS conversion_timestamps,
                  arrayFilter(x -> greater(x, 0), groupArray(if(equals(events.event, 'user signed up'), toFloat(1), 0))) AS conversion_math_values,
                  arrayFilter(x -> notEmpty(toString(x)), groupArray(if(equals(events.event, 'user signed up'), toString(ifNull(events.properties.utm_campaign, '')), ''))) AS conversion_campaigns,
                  arrayFilter(x -> notEmpty(toString(x)), groupArray(if(equals(events.event, 'user signed up'), toString(ifNull(events.properties.utm_source, '')), ''))) AS conversion_sources,
                  arrayFilter(x -> greater(x, 0), groupArray(if(and(equals(events.event, '$pageview'), notEmpty(toString(ifNull(events.properties.utm_campaign, ''))), notEmpty(toString(ifNull(events.properties.utm_source, '')))), toUnixTimestamp(events.timestamp), 0))) AS utm_timestamps,
                  arrayFilter(x -> notEmpty(x), groupArray(if(and(equals(events.event, '$pageview'), notEmpty(toString(ifNull(events.properties.utm_campaign, ''))), notEmpty(toString(ifNull(events.properties.utm_source, '')))), toString(ifNull(events.properties.utm_campaign, '')), ''))) AS utm_campaigns,
                  arrayFilter(x -> notEmpty(x), groupArray(if(and(equals(events.event, '$pageview'), notEmpty(toString(ifNull(events.properties.utm_campaign, ''))), notEmpty(toString(ifNull(events.properties.utm_source, '')))), toString(ifNull(events.properties.utm_source, '')), ''))) AS utm_sources
              
  FROM
                  events
              
  WHERE
                  or(and(equals(events.event, 'user signed up'), greaterOrEquals(events.timestamp, toDateTime('2025-06-06')), lessOrEquals(events.timestamp, toDateTime('2025-07-07'))), and(equals(events.event, '$pageview'), notEmpty(toString(ifNull(events.properties.utm_campaign, ''))), notEmpty(toString(ifNull(events.properties.utm_source, ''))), greaterOrEquals(events.timestamp, minus(toDateTime('2025-06-06'), toIntervalSecond(15552000))), lessOrEquals(events.timestamp, toDateTime('2025-07-07'))))
              
  GROUP BY
                  events.person_id
              
  HAVING
                  greater(length(conversion_timestamps), 0))
          ARRAY JOIN arrayEnumerate(conversion_timestamps) AS i)) AS attributed_conversions
  
  GROUP BY
      campaign,
      source
  
  LIMIT 100
  '''
# ---
# name: TestConversionGoalProcessor.test_attribution_window_sql_structure_demo_zero_windows
  '''
  
  SELECT
      if(notEmpty(campaign_name), campaign_name, 'organic') AS campaign,
      if(notEmpty(source_name), source_name, 'organic') AS source,
      count() AS conversion_0
  
  FROM
      (
  SELECT
          person_id,
          if(notEmpty(conversion_campaign), conversion_campaign, if(notEmpty(fallback_campaign), fallback_campaign, '')) AS campaign_name,
          if(notEmpty(conversion_source), conversion_source, if(notEmpty(fallback_source), fallback_source, '')) AS source_name,
          1 AS conversion_value
      
  FROM
          (
  SELECT
              person_id,
              conversion_timestamps[i] AS conversion_time,
              conversion_math_values[i] AS conversion_math_value,
              conversion_campaigns[i] AS conversion_campaign,
              conversion_sources[i] AS conversion_source,
              arrayMax(arrayFilter(x -> and(lessOrEquals(x, conversion_timestamps[i]), greaterOrEquals(x, minus(conversion_timestamps[i], 15552000))), utm_timestamps)) AS last_utm_timestamp,
              if(isNotNull(last_utm_timestamp), utm_campaigns[indexOf(utm_timestamps, last_utm_timestamp)], '') AS fallback_campaign,
              if(isNotNull(last_utm_timestamp), utm_sources[indexOf(utm_timestamps, last_utm_timestamp)], '') AS fallback_source
          
  FROM
              (
  SELECT
                  events.person_id,
                  arrayFilter(x -> greater(x, 0), groupArray(if(equals(events.event, 'user signed up'), toUnixTimestamp(events.timestamp), 0))) AS conversion_timestamps,
                  arrayFilter(x -> greater(x, 0), groupArray(if(equals(events.event, 'user signed up'), toFloat(1), 0))) AS conversion_math_values,
                  arrayFilter(x -> notEmpty(toString(x)), groupArray(if(equals(events.event, 'user signed up'), toString(ifNull(events.properties.utm_campaign, '')), ''))) AS conversion_campaigns,
                  arrayFilter(x -> notEmpty(toString(x)), groupArray(if(equals(events.event, 'user signed up'), toString(ifNull(events.properties.utm_source, '')), ''))) AS conversion_sources,
                  arrayFilter(x -> greater(x, 0), groupArray(if(and(equals(events.event, '$pageview'), notEmpty(toString(ifNull(events.properties.utm_campaign, ''))), notEmpty(toString(ifNull(events.properties.utm_source, '')))), toUnixTimestamp(events.timestamp), 0))) AS utm_timestamps,
                  arrayFilter(x -> notEmpty(x), groupArray(if(and(equals(events.event, '$pageview'), notEmpty(toString(ifNull(events.properties.utm_campaign, ''))), notEmpty(toString(ifNull(events.properties.utm_source, '')))), toString(ifNull(events.properties.utm_campaign, '')), ''))) AS utm_campaigns,
                  arrayFilter(x -> notEmpty(x), groupArray(if(and(equals(events.event, '$pageview'), notEmpty(toString(ifNull(events.properties.utm_campaign, ''))), notEmpty(toString(ifNull(events.properties.utm_source, '')))), toString(ifNull(events.properties.utm_source, '')), ''))) AS utm_sources
              
  FROM
                  events
              
  WHERE
                  or(and(equals(events.event, 'user signed up'), greaterOrEquals(events.timestamp, toDateTime('2025-06-06')), lessOrEquals(events.timestamp, toDateTime('2025-07-07'))), and(equals(events.event, '$pageview'), notEmpty(toString(ifNull(events.properties.utm_campaign, ''))), notEmpty(toString(ifNull(events.properties.utm_source, ''))), greaterOrEquals(events.timestamp, minus(toDateTime('2025-06-06'), toIntervalSecond(15552000))), lessOrEquals(events.timestamp, toDateTime('2025-07-07'))))
              
  GROUP BY
                  events.person_id
              
  HAVING
                  greater(length(conversion_timestamps), 0))
          ARRAY JOIN arrayEnumerate(conversion_timestamps) AS i)) AS attributed_conversions
  
  GROUP BY
      campaign,
      source
  
  LIMIT 100
  '''
# ---
# name: TestConversionGoalProcessor.test_integration_actions_node_full_query_execution
  '''
  
  SELECT
      if(notEmpty(campaign_name), campaign_name, 'organic') AS campaign,
      if(notEmpty(source_name), source_name, 'organic') AS source,
      count() AS conversion_0
  
  FROM
      (
  SELECT
          person_id,
          if(notEmpty(conversion_campaign), conversion_campaign, if(notEmpty(fallback_campaign), fallback_campaign, '')) AS campaign_name,
          if(notEmpty(conversion_source), conversion_source, if(notEmpty(fallback_source), fallback_source, '')) AS source_name,
          1 AS conversion_value
      
  FROM
          (
  SELECT
              person_id,
              conversion_timestamps[i] AS conversion_time,
              conversion_math_values[i] AS conversion_math_value,
              conversion_campaigns[i] AS conversion_campaign,
              conversion_sources[i] AS conversion_source,
              arrayMax(arrayFilter(x -> and(lessOrEquals(x, conversion_timestamps[i]), greaterOrEquals(x, minus(conversion_timestamps[i], 31536000))), utm_timestamps)) AS last_utm_timestamp,
              if(isNotNull(last_utm_timestamp), utm_campaigns[indexOf(utm_timestamps, last_utm_timestamp)], '') AS fallback_campaign,
              if(isNotNull(last_utm_timestamp), utm_sources[indexOf(utm_timestamps, last_utm_timestamp)], '') AS fallback_source
          
  FROM
              (
  SELECT
                  events.person_id,
                  arrayFilter(x -> greater(x, 0), groupArray(if(equals(event, 'sign_up'), toUnixTimestamp(events.timestamp), 0))) AS conversion_timestamps,
                  arrayFilter(x -> greater(x, 0), groupArray(if(equals(event, 'sign_up'), toFloat(1), 0))) AS conversion_math_values,
                  arrayFilter(x -> notEmpty(toString(x)), groupArray(if(equals(event, 'sign_up'), toString(ifNull(events.properties.utm_campaign, '')), ''))) AS conversion_campaigns,
                  arrayFilter(x -> notEmpty(toString(x)), groupArray(if(equals(event, 'sign_up'), toString(ifNull(events.properties.utm_source, '')), ''))) AS conversion_sources,
                  arrayFilter(x -> greater(x, 0), groupArray(if(and(equals(events.event, '$pageview'), notEmpty(toString(ifNull(events.properties.utm_campaign, ''))), notEmpty(toString(ifNull(events.properties.utm_source, '')))), toUnixTimestamp(events.timestamp), 0))) AS utm_timestamps,
                  arrayFilter(x -> notEmpty(x), groupArray(if(and(equals(events.event, '$pageview'), notEmpty(toString(ifNull(events.properties.utm_campaign, ''))), notEmpty(toString(ifNull(events.properties.utm_source, '')))), toString(ifNull(events.properties.utm_campaign, '')), ''))) AS utm_campaigns,
                  arrayFilter(x -> notEmpty(x), groupArray(if(and(equals(events.event, '$pageview'), notEmpty(toString(ifNull(events.properties.utm_campaign, ''))), notEmpty(toString(ifNull(events.properties.utm_source, '')))), toString(ifNull(events.properties.utm_source, '')), ''))) AS utm_sources
              
  FROM
                  events
              
  WHERE
                  or(and(equals(event, 'sign_up'), greaterOrEquals(events.timestamp, toDateTime('2023-01-01'))), and(equals(events.event, '$pageview'), notEmpty(toString(ifNull(events.properties.utm_campaign, ''))), notEmpty(toString(ifNull(events.properties.utm_source, ''))), greaterOrEquals(events.timestamp, minus(toDateTime('2023-01-01'), toIntervalSecond(31536000)))))
              
  GROUP BY
                  events.person_id
              
  HAVING
                  greater(length(conversion_timestamps), 0))
          ARRAY JOIN arrayEnumerate(conversion_timestamps) AS i)) AS attributed_conversions
  
  GROUP BY
      campaign,
      source
  
  LIMIT 100
  '''
# ---
# name: TestConversionGoalProcessor.test_integration_actions_node_temporal_attribution_sql_validation
  '''
  
  SELECT
      if(notEmpty(campaign_name), campaign_name, 'organic') AS campaign,
      if(notEmpty(source_name), source_name, 'organic') AS source,
      count() AS conversion_0
  
  FROM
      (
  SELECT
          person_id,
          if(notEmpty(conversion_campaign), conversion_campaign, if(notEmpty(fallback_campaign), fallback_campaign, '')) AS campaign_name,
          if(notEmpty(conversion_source), conversion_source, if(notEmpty(fallback_source), fallback_source, '')) AS source_name,
          1 AS conversion_value
      
  FROM
          (
  SELECT
              person_id,
              conversion_timestamps[i] AS conversion_time,
              conversion_math_values[i] AS conversion_math_value,
              conversion_campaigns[i] AS conversion_campaign,
              conversion_sources[i] AS conversion_source,
              arrayMax(arrayFilter(x -> and(lessOrEquals(x, conversion_timestamps[i]), greaterOrEquals(x, minus(conversion_timestamps[i], 31536000))), utm_timestamps)) AS last_utm_timestamp,
              if(isNotNull(last_utm_timestamp), utm_campaigns[indexOf(utm_timestamps, last_utm_timestamp)], '') AS fallback_campaign,
              if(isNotNull(last_utm_timestamp), utm_sources[indexOf(utm_timestamps, last_utm_timestamp)], '') AS fallback_source
          
  FROM
              (
  SELECT
                  events.person_id,
                  arrayFilter(x -> greater(x, 0), groupArray(if(equals(event, 'sign_up'), toUnixTimestamp(events.timestamp), 0))) AS conversion_timestamps,
                  arrayFilter(x -> greater(x, 0), groupArray(if(equals(event, 'sign_up'), toFloat(1), 0))) AS conversion_math_values,
                  arrayFilter(x -> notEmpty(toString(x)), groupArray(if(equals(event, 'sign_up'), toString(ifNull(events.properties.utm_campaign, '')), ''))) AS conversion_campaigns,
                  arrayFilter(x -> notEmpty(toString(x)), groupArray(if(equals(event, 'sign_up'), toString(ifNull(events.properties.utm_source, '')), ''))) AS conversion_sources,
                  arrayFilter(x -> greater(x, 0), groupArray(if(and(equals(events.event, '$pageview'), notEmpty(toString(ifNull(events.properties.utm_campaign, ''))), notEmpty(toString(ifNull(events.properties.utm_source, '')))), toUnixTimestamp(events.timestamp), 0))) AS utm_timestamps,
                  arrayFilter(x -> notEmpty(x), groupArray(if(and(equals(events.event, '$pageview'), notEmpty(toString(ifNull(events.properties.utm_campaign, ''))), notEmpty(toString(ifNull(events.properties.utm_source, '')))), toString(ifNull(events.properties.utm_campaign, '')), ''))) AS utm_campaigns,
                  arrayFilter(x -> notEmpty(x), groupArray(if(and(equals(events.event, '$pageview'), notEmpty(toString(ifNull(events.properties.utm_campaign, ''))), notEmpty(toString(ifNull(events.properties.utm_source, '')))), toString(ifNull(events.properties.utm_source, '')), ''))) AS utm_sources
              
  FROM
                  events
              
  WHERE
                  or(and(equals(event, 'sign_up'), greaterOrEquals(events.timestamp, toDateTime('2023-05-01')), lessOrEquals(events.timestamp, toDateTime('2023-05-03'))), and(equals(events.event, '$pageview'), notEmpty(toString(ifNull(events.properties.utm_campaign, ''))), notEmpty(toString(ifNull(events.properties.utm_source, ''))), greaterOrEquals(events.timestamp, minus(toDateTime('2023-05-01'), toIntervalSecond(31536000))), lessOrEquals(events.timestamp, toDateTime('2023-05-03'))))
              
  GROUP BY
                  events.person_id
              
  HAVING
                  greater(length(conversion_timestamps), 0))
          ARRAY JOIN arrayEnumerate(conversion_timestamps) AS i)) AS attributed_conversions
  
  GROUP BY
      campaign,
      source
  
  LIMIT 100
  '''
# ---
# name: TestConversionGoalProcessor.test_integration_events_node_full_query_execution
  '''
  
  SELECT
      if(notEmpty(campaign_name), campaign_name, 'organic') AS campaign,
      if(notEmpty(source_name), source_name, 'organic') AS source,
      count() AS conversion_0
  
  FROM
      (
  SELECT
          person_id,
          if(notEmpty(conversion_campaign), conversion_campaign, if(notEmpty(fallback_campaign), fallback_campaign, '')) AS campaign_name,
          if(notEmpty(conversion_source), conversion_source, if(notEmpty(fallback_source), fallback_source, '')) AS source_name,
          1 AS conversion_value
      
  FROM
          (
  SELECT
              person_id,
              conversion_timestamps[i] AS conversion_time,
              conversion_math_values[i] AS conversion_math_value,
              conversion_campaigns[i] AS conversion_campaign,
              conversion_sources[i] AS conversion_source,
              arrayMax(arrayFilter(x -> and(lessOrEquals(x, conversion_timestamps[i]), greaterOrEquals(x, minus(conversion_timestamps[i], 31536000))), utm_timestamps)) AS last_utm_timestamp,
              if(isNotNull(last_utm_timestamp), utm_campaigns[indexOf(utm_timestamps, last_utm_timestamp)], '') AS fallback_campaign,
              if(isNotNull(last_utm_timestamp), utm_sources[indexOf(utm_timestamps, last_utm_timestamp)], '') AS fallback_source
          
  FROM
              (
  SELECT
                  events.person_id,
                  arrayFilter(x -> greater(x, 0), groupArray(if(equals(events.event, 'sign_up'), toUnixTimestamp(events.timestamp), 0))) AS conversion_timestamps,
                  arrayFilter(x -> greater(x, 0), groupArray(if(equals(events.event, 'sign_up'), toFloat(1), 0))) AS conversion_math_values,
                  arrayFilter(x -> notEmpty(toString(x)), groupArray(if(equals(events.event, 'sign_up'), toString(ifNull(events.properties.utm_campaign, '')), ''))) AS conversion_campaigns,
                  arrayFilter(x -> notEmpty(toString(x)), groupArray(if(equals(events.event, 'sign_up'), toString(ifNull(events.properties.utm_source, '')), ''))) AS conversion_sources,
                  arrayFilter(x -> greater(x, 0), groupArray(if(and(equals(events.event, '$pageview'), notEmpty(toString(ifNull(events.properties.utm_campaign, ''))), notEmpty(toString(ifNull(events.properties.utm_source, '')))), toUnixTimestamp(events.timestamp), 0))) AS utm_timestamps,
                  arrayFilter(x -> notEmpty(x), groupArray(if(and(equals(events.event, '$pageview'), notEmpty(toString(ifNull(events.properties.utm_campaign, ''))), notEmpty(toString(ifNull(events.properties.utm_source, '')))), toString(ifNull(events.properties.utm_campaign, '')), ''))) AS utm_campaigns,
                  arrayFilter(x -> notEmpty(x), groupArray(if(and(equals(events.event, '$pageview'), notEmpty(toString(ifNull(events.properties.utm_campaign, ''))), notEmpty(toString(ifNull(events.properties.utm_source, '')))), toString(ifNull(events.properties.utm_source, '')), ''))) AS utm_sources
              
  FROM
                  events
              
  WHERE
                  or(and(equals(events.event, 'sign_up'), greaterOrEquals(events.timestamp, toDateTime('2023-01-01'))), and(equals(events.event, '$pageview'), notEmpty(toString(ifNull(events.properties.utm_campaign, ''))), notEmpty(toString(ifNull(events.properties.utm_source, ''))), greaterOrEquals(events.timestamp, minus(toDateTime('2023-01-01'), toIntervalSecond(31536000)))))
              
  GROUP BY
                  events.person_id
              
  HAVING
                  greater(length(conversion_timestamps), 0))
          ARRAY JOIN arrayEnumerate(conversion_timestamps) AS i)) AS attributed_conversions
  
  GROUP BY
      campaign,
      source
  
  LIMIT 100
  '''
# ---
# name: TestConversionGoalProcessor.test_integration_multi_event_actions_temporal_attribution
  '''
  
  SELECT
      if(notEmpty(campaign_name), campaign_name, 'organic') AS campaign,
      if(notEmpty(source_name), source_name, 'organic') AS source,
      count() AS conversion_1
  
  FROM
      (
  SELECT
          person_id,
          if(notEmpty(conversion_campaign), conversion_campaign, if(notEmpty(fallback_campaign), fallback_campaign, '')) AS campaign_name,
          if(notEmpty(conversion_source), conversion_source, if(notEmpty(fallback_source), fallback_source, '')) AS source_name,
          1 AS conversion_value
      
  FROM
          (
  SELECT
              person_id,
              conversion_timestamps[i] AS conversion_time,
              conversion_math_values[i] AS conversion_math_value,
              conversion_campaigns[i] AS conversion_campaign,
              conversion_sources[i] AS conversion_source,
              arrayMax(arrayFilter(x -> and(lessOrEquals(x, conversion_timestamps[i]), greaterOrEquals(x, minus(conversion_timestamps[i], 31536000))), utm_timestamps)) AS last_utm_timestamp,
              if(isNotNull(last_utm_timestamp), utm_campaigns[indexOf(utm_timestamps, last_utm_timestamp)], '') AS fallback_campaign,
              if(isNotNull(last_utm_timestamp), utm_sources[indexOf(utm_timestamps, last_utm_timestamp)], '') AS fallback_source
          
  FROM
              (
  SELECT
                  events.person_id,
                  arrayFilter(x -> greater(x, 0), groupArray(if(or(equals(event, 'sign_up'), equals(event, 'activate_account')), toUnixTimestamp(events.timestamp), 0))) AS conversion_timestamps,
                  arrayFilter(x -> greater(x, 0), groupArray(if(or(equals(event, 'sign_up'), equals(event, 'activate_account')), toFloat(1), 0))) AS conversion_math_values,
                  arrayFilter(x -> notEmpty(toString(x)), groupArray(if(or(equals(event, 'sign_up'), equals(event, 'activate_account')), toString(ifNull(events.properties.utm_campaign, '')), ''))) AS conversion_campaigns,
                  arrayFilter(x -> notEmpty(toString(x)), groupArray(if(or(equals(event, 'sign_up'), equals(event, 'activate_account')), toString(ifNull(events.properties.utm_source, '')), ''))) AS conversion_sources,
                  arrayFilter(x -> greater(x, 0), groupArray(if(and(equals(events.event, '$pageview'), notEmpty(toString(ifNull(events.properties.utm_campaign, ''))), notEmpty(toString(ifNull(events.properties.utm_source, '')))), toUnixTimestamp(events.timestamp), 0))) AS utm_timestamps,
                  arrayFilter(x -> notEmpty(x), groupArray(if(and(equals(events.event, '$pageview'), notEmpty(toString(ifNull(events.properties.utm_campaign, ''))), notEmpty(toString(ifNull(events.properties.utm_source, '')))), toString(ifNull(events.properties.utm_campaign, '')), ''))) AS utm_campaigns,
                  arrayFilter(x -> notEmpty(x), groupArray(if(and(equals(events.event, '$pageview'), notEmpty(toString(ifNull(events.properties.utm_campaign, ''))), notEmpty(toString(ifNull(events.properties.utm_source, '')))), toString(ifNull(events.properties.utm_source, '')), ''))) AS utm_sources
              
  FROM
                  events
              
  WHERE
                  or(and(or(equals(event, 'sign_up'), equals(event, 'activate_account')), greaterOrEquals(events.timestamp, toDateTime('2023-06-01')), lessOrEquals(events.timestamp, toDateTime('2023-06-02'))), and(equals(events.event, '$pageview'), notEmpty(toString(ifNull(events.properties.utm_campaign, ''))), notEmpty(toString(ifNull(events.properties.utm_source, ''))), greaterOrEquals(events.timestamp, minus(toDateTime('2023-06-01'), toIntervalSecond(31536000))), lessOrEquals(events.timestamp, toDateTime('2023-06-02'))))
              
  GROUP BY
                  events.person_id
              
  HAVING
                  greater(length(conversion_timestamps), 0))
          ARRAY JOIN arrayEnumerate(conversion_timestamps) AS i)) AS attributed_conversions
  
  GROUP BY
      campaign,
      source
  
  LIMIT 100
  '''
# ---
# name: TestConversionGoalProcessor.test_integration_sum_math_full_query_execution
  '''
  
  SELECT
      if(notEmpty(campaign_name), campaign_name, 'organic') AS campaign,
      if(notEmpty(source_name), source_name, 'organic') AS source,
      sum(conversion_value) AS conversion_0
  
  FROM
      (
  SELECT
          person_id,
          if(notEmpty(conversion_campaign), conversion_campaign, if(notEmpty(fallback_campaign), fallback_campaign, '')) AS campaign_name,
          if(notEmpty(conversion_source), conversion_source, if(notEmpty(fallback_source), fallback_source, '')) AS source_name,
          toFloat(conversion_math_value) AS conversion_value
      
  FROM
          (
  SELECT
              person_id,
              conversion_timestamps[i] AS conversion_time,
              conversion_math_values[i] AS conversion_math_value,
              conversion_campaigns[i] AS conversion_campaign,
              conversion_sources[i] AS conversion_source,
              arrayMax(arrayFilter(x -> and(lessOrEquals(x, conversion_timestamps[i]), greaterOrEquals(x, minus(conversion_timestamps[i], 31536000))), utm_timestamps)) AS last_utm_timestamp,
              if(isNotNull(last_utm_timestamp), utm_campaigns[indexOf(utm_timestamps, last_utm_timestamp)], '') AS fallback_campaign,
              if(isNotNull(last_utm_timestamp), utm_sources[indexOf(utm_timestamps, last_utm_timestamp)], '') AS fallback_source
          
  FROM
              (
  SELECT
                  events.person_id,
                  arrayFilter(x -> greater(x, 0), groupArray(if(equals(events.event, 'purchase'), toUnixTimestamp(events.timestamp), 0))) AS conversion_timestamps,
                  arrayFilter(x -> greater(x, 0), groupArray(if(equals(events.event, 'purchase'), coalesce(toFloat(events.properties.revenue), 0.0), 0))) AS conversion_math_values,
                  arrayFilter(x -> notEmpty(toString(x)), groupArray(if(equals(events.event, 'purchase'), toString(ifNull(events.properties.utm_campaign, '')), ''))) AS conversion_campaigns,
                  arrayFilter(x -> notEmpty(toString(x)), groupArray(if(equals(events.event, 'purchase'), toString(ifNull(events.properties.utm_source, '')), ''))) AS conversion_sources,
                  arrayFilter(x -> greater(x, 0), groupArray(if(and(equals(events.event, '$pageview'), notEmpty(toString(ifNull(events.properties.utm_campaign, ''))), notEmpty(toString(ifNull(events.properties.utm_source, '')))), toUnixTimestamp(events.timestamp), 0))) AS utm_timestamps,
                  arrayFilter(x -> notEmpty(x), groupArray(if(and(equals(events.event, '$pageview'), notEmpty(toString(ifNull(events.properties.utm_campaign, ''))), notEmpty(toString(ifNull(events.properties.utm_source, '')))), toString(ifNull(events.properties.utm_campaign, '')), ''))) AS utm_campaigns,
                  arrayFilter(x -> notEmpty(x), groupArray(if(and(equals(events.event, '$pageview'), notEmpty(toString(ifNull(events.properties.utm_campaign, ''))), notEmpty(toString(ifNull(events.properties.utm_source, '')))), toString(ifNull(events.properties.utm_source, '')), ''))) AS utm_sources
              
  FROM
                  events
              
  WHERE
                  or(and(equals(events.event, 'purchase'), greaterOrEquals(events.timestamp, toDateTime('2023-01-01'))), and(equals(events.event, '$pageview'), notEmpty(toString(ifNull(events.properties.utm_campaign, ''))), notEmpty(toString(ifNull(events.properties.utm_source, ''))), greaterOrEquals(events.timestamp, minus(toDateTime('2023-01-01'), toIntervalSecond(31536000)))))
              
  GROUP BY
                  events.person_id
              
  HAVING
                  greater(length(conversion_timestamps), 0))
          ARRAY JOIN arrayEnumerate(conversion_timestamps) AS i)) AS attributed_conversions
  
  GROUP BY
      campaign,
      source
  
  LIMIT 100
  '''
# ---
# name: TestConversionGoalProcessor.test_temporal_attribution_multiple_touchpoints_first_touch
  '''
  
  SELECT
      if(notEmpty(campaign_name), campaign_name, 'organic') AS campaign,
      if(notEmpty(source_name), source_name, 'organic') AS source,
      count() AS conversion_0
  
  FROM
      (
  SELECT
          person_id,
          if(notEmpty(conversion_campaign), conversion_campaign, if(notEmpty(fallback_campaign), fallback_campaign, '')) AS campaign_name,
          if(notEmpty(conversion_source), conversion_source, if(notEmpty(fallback_source), fallback_source, '')) AS source_name,
          1 AS conversion_value
      
  FROM
          (
  SELECT
              person_id,
              conversion_timestamps[i] AS conversion_time,
              conversion_math_values[i] AS conversion_math_value,
              conversion_campaigns[i] AS conversion_campaign,
              conversion_sources[i] AS conversion_source,
              arrayMin(arrayFilter(x -> and(lessOrEquals(x, conversion_timestamps[i]), greaterOrEquals(x, minus(conversion_timestamps[i], 31536000))), utm_timestamps)) AS last_utm_timestamp,
              if(isNotNull(last_utm_timestamp), utm_campaigns[indexOf(utm_timestamps, last_utm_timestamp)], '') AS fallback_campaign,
              if(isNotNull(last_utm_timestamp), utm_sources[indexOf(utm_timestamps, last_utm_timestamp)], '') AS fallback_source
          
  FROM
              (
  SELECT
                  events.person_id,
                  arrayFilter(x -> greater(x, 0), groupArray(if(equals(events.event, 'purchase'), toUnixTimestamp(events.timestamp), 0))) AS conversion_timestamps,
                  arrayFilter(x -> greater(x, 0), groupArray(if(equals(events.event, 'purchase'), toFloat(1), 0))) AS conversion_math_values,
                  arrayFilter(x -> notEmpty(toString(x)), groupArray(if(equals(events.event, 'purchase'), toString(ifNull(events.properties.utm_campaign, '')), ''))) AS conversion_campaigns,
                  arrayFilter(x -> notEmpty(toString(x)), groupArray(if(equals(events.event, 'purchase'), toString(ifNull(events.properties.utm_source, '')), ''))) AS conversion_sources,
                  arrayFilter(x -> greater(x, 0), groupArray(if(and(equals(events.event, '$pageview'), notEmpty(toString(ifNull(events.properties.utm_campaign, ''))), notEmpty(toString(ifNull(events.properties.utm_source, '')))), toUnixTimestamp(events.timestamp), 0))) AS utm_timestamps,
                  arrayFilter(x -> notEmpty(x), groupArray(if(and(equals(events.event, '$pageview'), notEmpty(toString(ifNull(events.properties.utm_campaign, ''))), notEmpty(toString(ifNull(events.properties.utm_source, '')))), toString(ifNull(events.properties.utm_campaign, '')), ''))) AS utm_campaigns,
                  arrayFilter(x -> notEmpty(x), groupArray(if(and(equals(events.event, '$pageview'), notEmpty(toString(ifNull(events.properties.utm_campaign, ''))), notEmpty(toString(ifNull(events.properties.utm_source, '')))), toString(ifNull(events.properties.utm_source, '')), ''))) AS utm_sources
              
  FROM
                  events
              
  WHERE
                  or(and(equals(events.event, 'purchase'), greaterOrEquals(events.timestamp, toDateTime('2023-05-01'))), and(equals(events.event, '$pageview'), notEmpty(toString(ifNull(events.properties.utm_campaign, ''))), notEmpty(toString(ifNull(events.properties.utm_source, ''))), greaterOrEquals(events.timestamp, minus(toDateTime('2023-05-01'), toIntervalSecond(31536000)))))
              
  GROUP BY
                  events.person_id
              
  HAVING
                  greater(length(conversion_timestamps), 0))
          ARRAY JOIN arrayEnumerate(conversion_timestamps) AS i)) AS attributed_conversions
  
  GROUP BY
      campaign,
      source
  
  LIMIT 100
  '''
# ---
