# serializer version: 1
# name: TestConversionGoalProcessor.test_integration_actions_node_full_query_execution
  '''
  
  SELECT
      tupleElement(result_tuple, 1) AS campaign,
      tupleElement(result_tuple, 2) AS source,
      sum(toFloat(tupleElement(result_tuple, 3))) AS conversion_0
  
  FROM
      (
  SELECT
          person_id AS person_id,
          arrayMap(conversion_tuple -> tuple(if(notEmpty(tupleElement(conversion_tuple, 2)), tupleElement(conversion_tuple, 2), if(and(greater(length(utm_events), 0), greater(arrayLastIndex(utm_tuple -> lessOrEquals(tupleElement(utm_tuple, 1), tupleElement(conversion_tuple, 1)), utm_events), 0)), tupleElement(arrayElement(utm_events, arrayLastIndex(utm_tuple -> lessOrEquals(tupleElement(utm_tuple, 1), tupleElement(conversion_tuple, 1)), utm_events)), 2), 'organic')), if(notEmpty(tupleElement(conversion_tuple, 3)), tupleElement(conversion_tuple, 3), if(and(greater(length(utm_events), 0), greater(arrayLastIndex(utm_tuple -> lessOrEquals(tupleElement(utm_tuple, 1), tupleElement(conversion_tuple, 1)), utm_events), 0)), tupleElement(arrayElement(utm_events, arrayLastIndex(utm_tuple -> lessOrEquals(tupleElement(utm_tuple, 1), tupleElement(conversion_tuple, 1)), utm_events)), 3), 'organic')), tupleElement(conversion_tuple, 4)), conversion_events) AS attribution_results
      
  FROM
          (
  SELECT
              events.person_id AS person_id,
              groupArrayIf(tuple(events.timestamp, ifNull(toString(events.properties.utm_campaign), ''), ifNull(toString(events.properties.utm_source), ''), toString(1)), equals(event, 'sign_up')) AS conversion_events,
              arraySort(x -> tuple(tupleElement(x, 1), tupleElement(x, 2)), groupArrayIf(tuple(events.timestamp, ifNull(toString(events.properties.utm_campaign), ''), ifNull(toString(events.properties.utm_source), '')), and(equals(events.event, '$pageview'), isNotNull(events.properties.utm_campaign), isNotNull(events.properties.utm_source), notEquals(events.properties.utm_campaign, ''), notEquals(events.properties.utm_source, '')))) AS utm_events
          
  FROM
              events
          
  WHERE
              greaterOrEquals(timestamp, toDate('2023-01-01'))
          
  GROUP BY
              events.person_id
          
  HAVING
              greater(length(conversion_events), 0)) AS person_data) AS attribution_data
  ARRAY JOIN attribution_results AS result_tuple
  
  GROUP BY
      tupleElement(result_tuple, 1),
      tupleElement(result_tuple, 2)
  
  LIMIT 100
  '''
# ---
# name: TestConversionGoalProcessor.test_integration_events_node_full_query_execution
  '''
  
  SELECT
      tupleElement(result_tuple, 1) AS campaign,
      tupleElement(result_tuple, 2) AS source,
      sum(toFloat(tupleElement(result_tuple, 3))) AS conversion_0
  
  FROM
      (
  SELECT
          person_id AS person_id,
          arrayMap(conversion_tuple -> tuple(if(notEmpty(tupleElement(conversion_tuple, 2)), tupleElement(conversion_tuple, 2), if(and(greater(length(utm_events), 0), greater(arrayLastIndex(utm_tuple -> lessOrEquals(tupleElement(utm_tuple, 1), tupleElement(conversion_tuple, 1)), utm_events), 0)), tupleElement(arrayElement(utm_events, arrayLastIndex(utm_tuple -> lessOrEquals(tupleElement(utm_tuple, 1), tupleElement(conversion_tuple, 1)), utm_events)), 2), 'organic')), if(notEmpty(tupleElement(conversion_tuple, 3)), tupleElement(conversion_tuple, 3), if(and(greater(length(utm_events), 0), greater(arrayLastIndex(utm_tuple -> lessOrEquals(tupleElement(utm_tuple, 1), tupleElement(conversion_tuple, 1)), utm_events), 0)), tupleElement(arrayElement(utm_events, arrayLastIndex(utm_tuple -> lessOrEquals(tupleElement(utm_tuple, 1), tupleElement(conversion_tuple, 1)), utm_events)), 3), 'organic')), tupleElement(conversion_tuple, 4)), conversion_events) AS attribution_results
      
  FROM
          (
  SELECT
              events.person_id AS person_id,
              groupArrayIf(tuple(events.timestamp, ifNull(toString(events.properties.utm_campaign), ''), ifNull(toString(events.properties.utm_source), ''), toString(1)), equals(events.event, 'sign_up')) AS conversion_events,
              arraySort(x -> tuple(tupleElement(x, 1), tupleElement(x, 2)), groupArrayIf(tuple(events.timestamp, ifNull(toString(events.properties.utm_campaign), ''), ifNull(toString(events.properties.utm_source), '')), and(equals(events.event, '$pageview'), isNotNull(events.properties.utm_campaign), isNotNull(events.properties.utm_source), notEquals(events.properties.utm_campaign, ''), notEquals(events.properties.utm_source, '')))) AS utm_events
          
  FROM
              events
          
  WHERE
              greaterOrEquals(timestamp, toDate('2023-01-01'))
          
  GROUP BY
              events.person_id
          
  HAVING
              greater(length(conversion_events), 0)) AS person_data) AS attribution_data
  ARRAY JOIN attribution_results AS result_tuple
  
  GROUP BY
      tupleElement(result_tuple, 1),
      tupleElement(result_tuple, 2)
  
  LIMIT 100
  '''
# ---
# name: TestConversionGoalProcessor.test_integration_sum_math_full_query_execution
  '''
  
  SELECT
      tupleElement(result_tuple, 1) AS campaign,
      tupleElement(result_tuple, 2) AS source,
      sum(toFloat(tupleElement(result_tuple, 3))) AS conversion_0
  
  FROM
      (
  SELECT
          person_id AS person_id,
          arrayMap(conversion_tuple -> tuple(if(notEmpty(tupleElement(conversion_tuple, 2)), tupleElement(conversion_tuple, 2), if(and(greater(length(utm_events), 0), greater(arrayLastIndex(utm_tuple -> lessOrEquals(tupleElement(utm_tuple, 1), tupleElement(conversion_tuple, 1)), utm_events), 0)), tupleElement(arrayElement(utm_events, arrayLastIndex(utm_tuple -> lessOrEquals(tupleElement(utm_tuple, 1), tupleElement(conversion_tuple, 1)), utm_events)), 2), 'organic')), if(notEmpty(tupleElement(conversion_tuple, 3)), tupleElement(conversion_tuple, 3), if(and(greater(length(utm_events), 0), greater(arrayLastIndex(utm_tuple -> lessOrEquals(tupleElement(utm_tuple, 1), tupleElement(conversion_tuple, 1)), utm_events), 0)), tupleElement(arrayElement(utm_events, arrayLastIndex(utm_tuple -> lessOrEquals(tupleElement(utm_tuple, 1), tupleElement(conversion_tuple, 1)), utm_events)), 3), 'organic')), tupleElement(conversion_tuple, 4)), conversion_events) AS attribution_results
      
  FROM
          (
  SELECT
              events.person_id AS person_id,
              groupArrayIf(tuple(events.timestamp, ifNull(toString(events.properties.utm_campaign), ''), ifNull(toString(events.properties.utm_source), ''), toString(ifNull(events.properties.revenue, '0'))), equals(events.event, 'purchase')) AS conversion_events,
              arraySort(x -> tuple(tupleElement(x, 1), tupleElement(x, 2)), groupArrayIf(tuple(events.timestamp, ifNull(toString(events.properties.utm_campaign), ''), ifNull(toString(events.properties.utm_source), '')), and(equals(events.event, '$pageview'), isNotNull(events.properties.utm_campaign), isNotNull(events.properties.utm_source), notEquals(events.properties.utm_campaign, ''), notEquals(events.properties.utm_source, '')))) AS utm_events
          
  FROM
              events
          
  WHERE
              greaterOrEquals(timestamp, toDate('2023-01-01'))
          
  GROUP BY
              events.person_id
          
  HAVING
              greater(length(conversion_events), 0)) AS person_data) AS attribution_data
  ARRAY JOIN attribution_results AS result_tuple
  
  GROUP BY
      tupleElement(result_tuple, 1),
      tupleElement(result_tuple, 2)
  
  LIMIT 100
  '''
# ---
