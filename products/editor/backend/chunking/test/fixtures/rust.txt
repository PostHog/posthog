use std::sync::atomic::Ordering;

use reqwest::Url;
use serde::{Deserialize, Serialize};
use sha2::{Digest, Sha512};
use symbolic::sourcemapcache::{ScopeLookupResult, SourceLocation, SourcePosition};

use crate::{
    config::FRAME_CONTEXT_LINES,
    error::{Error, FrameError, JsResolveErr, UnhandledError},
    frames::{Context, ContextLine, Frame},
    metric_consts::{FRAME_NOT_RESOLVED, FRAME_RESOLVED},
    sanitize_string,
    symbol_store::{chunk_id::OrChunkId, sourcemap::OwnedSourceMapCache, SymbolCatalog},
};

// A minifed JS stack frame. Just the minimal information needed to lookup some
// sourcemap for it and produce a "real" stack frame.
#[derive(Debug, Clone, Deserialize, Serialize)]
pub struct RawJSFrame {
    #[serde(flatten)]
    pub location: Option<FrameLocation>, // Sometimes we get frames with no location information. We treat these as already resolved, or unminified
    #[serde(rename = "filename")]
    pub source_url: Option<String>, // The url the the script the frame was in was fetched from
    pub in_app: bool,
    #[serde(rename = "function")]
    pub fn_name: String,
    #[serde(alias = "chunkId", skip_serializing_if = "Option::is_none")]
    pub chunk_id: Option<String>,
}

#[derive(Debug, Clone, Deserialize, Serialize, Eq, PartialEq)]
pub struct FrameLocation {
    #[serde(rename = "lineno")]
    pub line: u32,
    #[serde(rename = "colno")]
    pub column: u32,
}

impl RawJSFrame {
    pub async fn resolve<C>(&self, team_id: i32, catalog: &C) -> Result<Frame, UnhandledError>
    where
        C: SymbolCatalog<OrChunkId<Url>, OwnedSourceMapCache>,
    {
        match self.resolve_impl(team_id, catalog).await {
            Ok(frame) => Ok(frame),
            Err(Error::ResolutionError(FrameError::JavaScript(e))) => {
                Ok(self.handle_resolution_error(e))
            }
            Err(Error::ResolutionError(FrameError::MissingChunkIdData(chunk_id))) => {
                Ok(self.handle_resolution_error(JsResolveErr::NoSourcemapUploaded(chunk_id)))
            }
            Err(Error::UnhandledError(e)) => Err(e),
            Err(Error::EventError(_)) => unreachable!(),
        }
    }

    async fn resolve_impl<C>(&self, team_id: i32, catalog: &C) -> Result<Frame, Error>
    where
        C: SymbolCatalog<OrChunkId<Url>, OwnedSourceMapCache>,
    {
        let Some(location) = &self.location else {
            return Ok(Frame::from(self)); // We're probably an unminified frame
        };

        let r = self.get_ref()?; // We need either a chunk ID or a source URL to resolve a frame

        let sourcemap = catalog.lookup(team_id, r).await?;
        let smc = sourcemap.get_smc();

        // Note: javascript stack frame lines are 1-indexed, so we have to subtract 1
        let Some(location) = smc.lookup(SourcePosition::new(location.line - 1, location.column))
        else {
            return Err(JsResolveErr::TokenNotFound(
                self.fn_name.clone(),
                location.line,
                location.column,
            )
            .into());
        };

        Ok(Frame::from((self, location)))
    }

    // JS frames can only handle JS resolution errors - errors at the network level
    pub fn handle_resolution_error(&self, e: JsResolveErr) -> Frame {
        // If we failed to resolve the frame, we mark it as "not resolved" and add the error message,
        // then return a Frame anyway, because frame handling is a best-effort thing.
        let Some(location) = &self.location else {
            return self.into();
        };
        (self, e, location).into()
    }

    fn get_ref(&self) -> Result<OrChunkId<Url>, JsResolveErr> {
        match (self.source_url().ok(), self.chunk_id.clone()) {
            (Some(url), Some(id)) => Ok(OrChunkId::both(url, id)),
            (Some(url), None) => Ok(OrChunkId::inner(url)),
            (None, Some(id)) => Ok(OrChunkId::chunk_id(id)),
            (None, None) => Err(JsResolveErr::NoUrlOrChunkId),
        }
    }

    pub fn symbol_set_ref(&self) -> Option<String> {
        // If we have a chunk ID for a frame, no matter where the data we save comes from, we save it with that
        // chunk id as the ref.
        self.get_ref().ok().map(|r| r.to_string())
    }

    fn source_url(&self) -> Result<Url, JsResolveErr> {
        // We can't resolve a frame without a source ref, and are forced
        // to assume this frame is not minified
        let Some(source_url) = &self.source_url else {
            return Err(JsResolveErr::NoSourceUrl);
        };

        // We outright reject relative URLs, or ones that are not HTTP
        if !source_url.starts_with("http://") && !source_url.starts_with("https://") {
            return Err(JsResolveErr::InvalidSourceUrl(source_url.clone()));
        }

        // TODO - we assume these are always absolute urls, and maybe should handle cases where
        // they aren't? We control this on the client side, and I'd prefer to enforce it here.

        // These urls can have a trailing line and column number, formatted like: http://example.com/path/to/file.js:1:2.
        // We need to strip that off to get the actual source url
        // If the last colon is after the last slash, remove it, under the assumption that it's a column number.
        // If there is no colon, or it's before the last slash, we assume the whole thing is a url,
        // with no trailing line and column numbers
        let last_colon = source_url.rfind(':');
        let last_slash = source_url.rfind('/');
        let useful = match (last_colon, last_slash) {
            (Some(colon), Some(slash)) if colon > slash => colon,
            _ => source_url.len(),
        };

        // We do this check one more time, to account for possible line number
        let source_url = &source_url[..useful];
        let last_colon = source_url.rfind(':');
        let last_slash = source_url.rfind('/');
        let useful = match (last_colon, last_slash) {
            (Some(colon), Some(slash)) if colon > slash => colon,
            _ => source_url.len(),
        };

        Url::parse(&source_url[..useful])
            .map_err(|_| JsResolveErr::InvalidSourceUrl(source_url.to_string()))
    }

    pub fn frame_id(&self) -> String {
        let mut hasher = Sha512::new();
        hasher.update(self.fn_name.as_bytes());
        if let Some(location) = &self.location {
            hasher.update(location.line.to_string().as_bytes());
            hasher.update(location.column.to_string().as_bytes());
        }
        hasher.update(
            self.source_url
                .as_ref()
                .unwrap_or(&"".to_string())
                .as_bytes(),
        );
        format!("{:x}", hasher.finalize())
    }
}
