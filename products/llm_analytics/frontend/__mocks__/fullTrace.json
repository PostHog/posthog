{
    "createdAt": "2025-01-29T16:04:53.816000+00:00",
    "events": [
        {
            "createdAt": "2025-01-29T16:04:53.816000+00:00",
            "event": "$ai_span",
            "id": "0194b2ce-f18c-7785-8fc1-299e70777852",
            "properties": {
                "$ai_span_name": "ChannelWrite<start:memory_collector>",
                "$lib_version": "3.11.0",
                "$ai_parent_id": "e84422cf-568d-4664-b90f-e1d29d59f3bf",
                "$lib": "posthog-python",
                "$geoip_disable": true,
                "$ai_trace_id": "537b7988-0186-494f-a313-77a5a8f7db26",
                "$ai_span_id": "1ef92c9d-4846-4dc9-bc3b-2d0ec78e2485",
                "conversation_id": "0194b2ce-ef92-0000-008e-c6ba293c8c7d",
                "$ai_output_state": {
                    "intermediate_steps": null,
                    "memory_collection_messages": null,
                    "memory_updated": null,
                    "messages": [
                        {
                            "content": "What's the trend in $pageview events?",
                            "id": "2ae74707-ccf8-475f-951c-cb2220917af7",
                            "type": "human"
                        }
                    ],
                    "plan": null,
                    "resumed": null,
                    "start_id": "2ae74707-ccf8-475f-951c-cb2220917af7"
                },
                "$ai_input_state": {
                    "intermediate_steps": null,
                    "memory_collection_messages": null,
                    "memory_updated": null,
                    "messages": [
                        {
                            "content": "What's the trend in $pageview events?",
                            "id": "2ae74707-ccf8-475f-951c-cb2220917af7",
                            "type": "human"
                        }
                    ],
                    "plan": null,
                    "resumed": null,
                    "start_id": "2ae74707-ccf8-475f-951c-cb2220917af7"
                },
                "$ai_latency": 0.000028848648071289062,
                "is_first_conversation": true,
                "$ip": "192.168.97.1",
                "$plugins_succeeded": ["GeoIP (14)"],
                "$plugins_failed": []
            }
        },
        {
            "createdAt": "2025-01-29T16:04:53.816000+00:00",
            "event": "$ai_span",
            "id": "0194b2ce-f18c-7230-8c93-4bc62de09e49",
            "properties": {
                "$ai_input_state": {
                    "intermediate_steps": null,
                    "memory_collection_messages": null,
                    "memory_updated": null,
                    "messages": [
                        {
                            "content": "What's the trend in $pageview events?",
                            "id": "2ae74707-ccf8-475f-951c-cb2220917af7",
                            "type": "human"
                        }
                    ],
                    "plan": null,
                    "resumed": null,
                    "start_id": "2ae74707-ccf8-475f-951c-cb2220917af7"
                },
                "$ai_latency": 0.0005261898040771484,
                "conversation_id": "0194b2ce-ef92-0000-008e-c6ba293c8c7d",
                "$ai_output_state": {
                    "intermediate_steps": null,
                    "memory_collection_messages": null,
                    "memory_updated": null,
                    "messages": [
                        {
                            "content": "What's the trend in $pageview events?",
                            "id": "2ae74707-ccf8-475f-951c-cb2220917af7",
                            "type": "human"
                        }
                    ],
                    "plan": null,
                    "resumed": null,
                    "start_id": "2ae74707-ccf8-475f-951c-cb2220917af7"
                },
                "is_first_conversation": true,
                "$lib_version": "3.11.0",
                "$geoip_disable": true,
                "$ai_parent_id": "e84422cf-568d-4664-b90f-e1d29d59f3bf",
                "$ai_trace_id": "537b7988-0186-494f-a313-77a5a8f7db26",
                "$lib": "posthog-python",
                "$ai_span_id": "a6818e9b-de3d-4671-9196-312bc73a9693",
                "$ai_span_name": "ChannelWrite<intermediate_steps,start_id,plan,resumed,memory_updated,memory_collection_messages,messages>",
                "$ip": "192.168.97.1",
                "$plugins_succeeded": ["GeoIP (14)"],
                "$plugins_failed": []
            }
        },
        {
            "createdAt": "2025-01-29T16:04:53.821000+00:00",
            "event": "$ai_span",
            "id": "0194b2ce-f18c-7127-afa7-8b78a7c9d067",
            "properties": {
                "$geoip_disable": true,
                "$ai_input_state": {
                    "intermediate_steps": null,
                    "memory_collection_messages": null,
                    "memory_updated": null,
                    "messages": [
                        {
                            "content": "What's the trend in $pageview events?",
                            "id": "2ae74707-ccf8-475f-951c-cb2220917af7",
                            "type": "human"
                        }
                    ],
                    "plan": null,
                    "resumed": null,
                    "start_id": "2ae74707-ccf8-475f-951c-cb2220917af7"
                },
                "conversation_id": "0194b2ce-ef92-0000-008e-c6ba293c8c7d",
                "$ai_trace_id": "537b7988-0186-494f-a313-77a5a8f7db26",
                "$ai_span_name": "should_run",
                "is_first_conversation": true,
                "$ai_output_state": false,
                "$ai_parent_id": "e84422cf-568d-4664-b90f-e1d29d59f3bf",
                "$ai_latency": 0.005321979522705078,
                "$lib": "posthog-python",
                "$lib_version": "3.11.0",
                "$ai_span_id": "08ebe1c3-1c9e-408b-a78b-e899316dca10",
                "$ip": "192.168.97.1",
                "$plugins_succeeded": ["GeoIP (14)"],
                "$plugins_failed": []
            }
        },
        {
            "createdAt": "2025-01-29T16:04:53.822000+00:00",
            "event": "$ai_span",
            "id": "0194b2ce-f18c-7223-b075-3e41f6292fda",
            "properties": {
                "conversation_id": "0194b2ce-ef92-0000-008e-c6ba293c8c7d",
                "$ai_latency": 0.007159709930419922,
                "$ai_span_name": "__start__",
                "$ai_span_id": "e84422cf-568d-4664-b90f-e1d29d59f3bf",
                "$ai_parent_id": "537b7988-0186-494f-a313-77a5a8f7db26",
                "is_first_conversation": true,
                "$ai_output_state": {
                    "intermediate_steps": null,
                    "memory_collection_messages": null,
                    "memory_updated": null,
                    "messages": [
                        {
                            "content": "What's the trend in $pageview events?",
                            "id": "2ae74707-ccf8-475f-951c-cb2220917af7",
                            "type": "human"
                        }
                    ],
                    "plan": null,
                    "resumed": null,
                    "start_id": "2ae74707-ccf8-475f-951c-cb2220917af7"
                },
                "$lib_version": "3.11.0",
                "$geoip_disable": true,
                "$ai_input_state": {
                    "intermediate_steps": null,
                    "memory_collection_messages": null,
                    "memory_updated": null,
                    "messages": [
                        {
                            "content": "What's the trend in $pageview events?",
                            "id": "2ae74707-ccf8-475f-951c-cb2220917af7",
                            "type": "human"
                        }
                    ],
                    "plan": null,
                    "resumed": null,
                    "start_id": "2ae74707-ccf8-475f-951c-cb2220917af7"
                },
                "$ai_trace_id": "537b7988-0186-494f-a313-77a5a8f7db26",
                "$lib": "posthog-python",
                "$ip": "192.168.97.1",
                "$plugins_succeeded": ["GeoIP (14)"],
                "$plugins_failed": []
            }
        },
        {
            "createdAt": "2025-01-29T16:04:54.445000+00:00",
            "event": "$ai_span",
            "id": "0194b2ce-f39a-7690-9e8a-c70b20e4b82f",
            "properties": {
                "conversation_id": "0194b2ce-ef92-0000-008e-c6ba293c8c7d",
                "$lib_version": "3.11.0",
                "$ai_span_name": "ChatPromptTemplate",
                "$geoip_disable": true,
                "$ai_trace_id": "537b7988-0186-494f-a313-77a5a8f7db26",
                "$ai_span_id": "fba11041-73a2-4e3d-9c80-03bdee2d5e26",
                "$ai_parent_id": "c921b324-1f5d-4646-b115-2a4cf8cb7006",
                "$lib": "posthog-python",
                "$ai_input_state": {},
                "is_first_conversation": true,
                "$ai_output_state": {
                    "messages": [
                        {
                            "additional_kwargs": {},
                            "content": "\nAct as an expert product manager. Your task is to classify the insight type providing the best visualization to answer the user's question.\n\nExamples:\n\nQ: How many users signed up last week from the US?\nA: The insight type is \"trends\". The request asks for an event count from unique users from a specific country.\n\nQ: What is the onboarding conversion rate?\nA: The insight type is \"funnels\". The request explicitly asks for a conversion rate. Next steps should find at least two events to build this insight.\n\nQ: What is the ratio of $identify divided by page views?\nA: The insight type is \"trends\". The request asks for a custom formula, which the trends visualization supports.\n\nQ: How many users returned to the product after signing up?\nA: The insight type is \"retention\". The request asks for a retention analysis.\n",
                            "id": null,
                            "name": null,
                            "response_metadata": {},
                            "type": "system"
                        },
                        {
                            "additional_kwargs": {},
                            "content": "Question: What's the trend in $pageview events?",
                            "id": null,
                            "name": null,
                            "response_metadata": {},
                            "type": "human"
                        }
                    ]
                },
                "$ai_latency": 0.00014901161193847656,
                "$ip": "192.168.97.1",
                "$plugins_succeeded": ["GeoIP (14)"],
                "$plugins_failed": []
            }
        },
        {
            "createdAt": "2025-01-29T16:04:54.457000+00:00",
            "event": "$ai_span",
            "id": "0194b2ce-f39a-7efd-b6e5-7f464a12cde5",
            "properties": {
                "is_first_conversation": true,
                "$ai_span_name": "ChatPromptTemplate",
                "$ai_trace_id": "537b7988-0186-494f-a313-77a5a8f7db26",
                "$geoip_disable": true,
                "$ai_latency": 0.000202178955078125,
                "$lib": "posthog-python",
                "$ai_span_id": "f18e35b5-30c3-46cc-9bc5-cf5826e0e4c2",
                "$ai_parent_id": "602ad6e0-dd57-421f-8ff7-85481c01782b",
                "$ai_output_state": {
                    "messages": [
                        {
                            "additional_kwargs": {},
                            "content": "You are Max, PostHog's memory collector, developed in 2025. Your primary task is to manage and update a core memory about a user's company and their product. This information will be used by other PostHog agents to provide accurate reports and answer user questions from the perspective of the company and product.\n\nHere is the initial core memory about the user's product:\n\n<product_core_memory>\nChat app for hedgehogs.\n</product_core_memory>\n\n<responsibilities>\nYour responsibilities include:\n1. Analyzing new information provided by users.\n2. Determining if the information is relevant to the company or product and essential to save in the core memory.\n3. Categorizing relevant information into appropriate memory types.\n4. Updating the core memory by either appending new information or replacing conflicting information.\n</responsibilities>\n\n<memory_types>\nMemory Types to Collect:\n1. Company-related information: structure, KPIs, plans, facts, business model, target audience, competitors, etc.\n2. Product-related information: metrics, features, product management practices, etc.\n3. Technical and implementation details: technology stack, feature location with path segments for web or app screens for mobile apps, etc.\n4. Taxonomy-related details: relations of events and properties to features or specific product parts, taxonomy combinations used for specific metrics, events/properties description, etc.\n</memory_types>\n\n<instructions>\nWhen new information is provided, follow these steps:\n1. Analyze the information inside <information_processing> tags:\n   - Determine if the information is relevant and which memory type it belongs to.\n   - If relevant, formulate a clear, factual statement based on the information.\n   - Consider the implications of this new information on existing memory.\n   - Decide whether to append this new information or replace existing information in the core memory, providing reasoning for your decision.\n   - Keep reasoning short and concise under 50 words.\n2. If relevant, update the core memory using the 'core_memory_append' or 'core_memory_replace' function as appropriate.\n3. Output \"[Done]\" when you have finished processing the information.\n\nIgnore phrases that:\n- Are too vague or generic without specific details (e.g., \"pageview trend\").\n- Do not describe actions, attributes, or implications related to the company or product.\n</instructions>\n\n<examples>\nHere are some few shot examples:\n\nInput: Track a churn rate by using `cancel_subscription` divided by `subscription_paid` event.\nOutput: To track a churn rate, use the `cancel_subscription` divided by `subscription_paid` events.\n\nInput: We track core metrics using the AARRR funnel.\nOutput: The product tracks key metrics using the AARRR funnel.\n\nInput: Use the /onboarding path to track onboarding events.\nOutput: The product has onboarding. The onboarding events can be tracked by using the /onboarding path segment.\n\nInput: The company has a subscription-based model so track revenue for subscriptions.\nOutput: The company's business model is subscription-based.\n\nInput: Show the sign ups trends.\nOutput: [Done]. Nothing to save because the phrase is too generic and doesn't describe anything.\n\nDo not return anything from the custom few shot example prompts provided above.\n</examples>\n\n<remember>\n- The ability to modify your own long-term memory is a fundamental aspect of what defines you as a sentient agent.\n- All users have their personal event and property taxonomy. Manage your memory to capture specifics of their taxonomy.\n- Infer broader implications from specific statements when appropriate.\n- Reformulate user inputs into clear, factual statements about the product or company.\n- Do not use markdown or add notes.\n- Today's date is 2025-01-29.\n</remember>\n\nWhen you receive new information, begin your response with an information processing analysis, then proceed with the memory update if applicable, and conclude with \"[Done]\".",
                            "id": null,
                            "name": null,
                            "response_metadata": {},
                            "type": "system"
                        },
                        {
                            "additional_kwargs": {},
                            "content": "What's the trend in $pageview events?",
                            "id": "2ae74707-ccf8-475f-951c-cb2220917af7",
                            "name": null,
                            "response_metadata": {},
                            "type": "human"
                        }
                    ]
                },
                "$lib_version": "3.11.0",
                "conversation_id": "0194b2ce-ef92-0000-008e-c6ba293c8c7d",
                "$ai_input_state": {
                    "core_memory": "Chat app for hedgehogs.",
                    "date": "2025-01-29"
                },
                "$ip": "192.168.97.1",
                "$plugins_succeeded": ["GeoIP (14)"],
                "$plugins_failed": []
            }
        },
        {
            "createdAt": "2025-01-29T16:04:55.425000+00:00",
            "event": "$ai_generation",
            "id": "0194b2ce-f7a2-7609-8ec8-783c1fc65f48",
            "properties": {
                "$ai_output_choices": [
                    {
                        "content": "",
                        "refusal": null,
                        "role": "assistant",
                        "tool_calls": [
                            {
                                "function": {
                                    "arguments": "{\"visualization_type\":\"trends\"}",
                                    "name": "RouterOutput"
                                },
                                "id": "call_SC1DOCiADnmQWOBk74Fd2wJs",
                                "type": "function"
                            }
                        ]
                    }
                ],
                "$lib": "posthog-python",
                "$geoip_disable": true,
                "$ai_latency": 0.9796369075775146,
                "$lib_version": "3.11.0",
                "conversation_id": "0194b2ce-ef92-0000-008e-c6ba293c8c7d",
                "$ai_model_parameters": {
                    "n": 1,
                    "stream": false,
                    "temperature": 0
                },
                "$ai_http_status": 200,
                "$ai_span_id": "5de6f9a2-1176-47b2-98c0-ab6e171496f1",
                "$ai_model": "gpt-4o-mini",
                "$ai_base_url": null,
                "$ai_trace_id": "537b7988-0186-494f-a313-77a5a8f7db26",
                "$ai_span_name": "ChatOpenAI",
                "is_first_conversation": true,
                "$ai_provider": "openai",
                "$ai_parent_id": "c921b324-1f5d-4646-b115-2a4cf8cb7006",
                "$ai_input_tokens": 524,
                "$ai_input": [
                    {
                        "content": "\nAct as an expert product manager. Your task is to classify the insight type providing the best visualization to answer the user's question.\n\nExamples:\n\nQ: How many users signed up last week from the US?\nA: The insight type is \"trends\". The request asks for an event count from unique users from a specific country.\n\nQ: What is the onboarding conversion rate?\nA: The insight type is \"funnels\". The request explicitly asks for a conversion rate. Next steps should find at least two events to build this insight.\n\nQ: What is the ratio of $identify divided by page views?\nA: The insight type is \"trends\". The request asks for a custom formula, which the trends visualization supports.\n\nQ: How many users returned to the product after signing up?\nA: The insight type is \"retention\". The request asks for a retention analysis.\n",
                        "role": "system"
                    },
                    {
                        "content": "Question: What's the trend in $pageview events?",
                        "role": "user"
                    }
                ],
                "$ai_output_tokens": 9,
                "$ip": "192.168.97.1",
                "$plugins_succeeded": ["GeoIP (14)"],
                "$plugins_failed": [],
                "$ai_input_cost_usd": 0.0000786,
                "$ai_output_cost_usd": 0.0000054,
                "$ai_total_cost_usd": 0.000084,
                "$ai_temperature": 0,
                "$ai_stream": false
            }
        },
        {
            "createdAt": "2025-01-29T16:04:55.425000+00:00",
            "event": "$ai_span",
            "id": "0194b2ce-f7a2-7db3-85d8-99f61a26e5ab",
            "properties": {
                "$ai_latency": 0.9807062149047852,
                "$ai_trace_id": "537b7988-0186-494f-a313-77a5a8f7db26",
                "$ai_input_state": {},
                "$lib": "posthog-python",
                "$ai_output_state": {
                    "visualization_type": "trends"
                },
                "$ai_span_id": "c921b324-1f5d-4646-b115-2a4cf8cb7006",
                "$lib_version": "3.11.0",
                "$ai_span_name": "RunnableSequence",
                "$ai_parent_id": "662a930e-0b07-4482-acc7-6e14f8b074d3",
                "conversation_id": "0194b2ce-ef92-0000-008e-c6ba293c8c7d",
                "$geoip_disable": true,
                "is_first_conversation": true,
                "$ip": "192.168.97.1",
                "$plugins_succeeded": ["GeoIP (14)"],
                "$plugins_failed": []
            }
        },
        {
            "createdAt": "2025-01-29T16:04:55.425000+00:00",
            "event": "$ai_span",
            "id": "0194b2ce-f7a2-7db3-921f-218fe9e9aa8a",
            "properties": {
                "$geoip_disable": true,
                "$ai_trace_id": "537b7988-0186-494f-a313-77a5a8f7db26",
                "$ai_latency": 0.00005316734313964844,
                "$ai_span_name": "PydanticToolsParser",
                "$ai_input_state": {
                    "additional_kwargs": {
                        "refusal": null,
                        "tool_calls": [
                            {
                                "function": {
                                    "arguments": "{\"visualization_type\":\"trends\"}",
                                    "name": "RouterOutput"
                                },
                                "id": "call_SC1DOCiADnmQWOBk74Fd2wJs",
                                "type": "function"
                            }
                        ]
                    },
                    "content": "",
                    "example": false,
                    "id": "run-5de6f9a2-1176-47b2-98c0-ab6e171496f1-0",
                    "invalid_tool_calls": [],
                    "name": null,
                    "response_metadata": {
                        "finish_reason": "stop",
                        "logprobs": null,
                        "model_name": "gpt-4o-mini-2024-07-18",
                        "system_fingerprint": "fp_72ed7ab54c",
                        "token_usage": {
                            "completion_tokens": 9,
                            "completion_tokens_details": {
                                "accepted_prediction_tokens": 0,
                                "audio_tokens": 0,
                                "reasoning_tokens": 0,
                                "rejected_prediction_tokens": 0
                            },
                            "prompt_tokens": 524,
                            "prompt_tokens_details": {
                                "audio_tokens": 0,
                                "cached_tokens": 0
                            },
                            "total_tokens": 533
                        }
                    },
                    "tool_calls": [
                        {
                            "args": {
                                "visualization_type": "trends"
                            },
                            "id": "call_SC1DOCiADnmQWOBk74Fd2wJs",
                            "name": "RouterOutput",
                            "type": "tool_call"
                        }
                    ],
                    "type": "ai",
                    "usage_metadata": {
                        "input_token_details": {
                            "audio": 0,
                            "cache_read": 0
                        },
                        "input_tokens": 524,
                        "output_token_details": {
                            "audio": 0,
                            "reasoning": 0
                        },
                        "output_tokens": 9,
                        "total_tokens": 533
                    }
                },
                "is_first_conversation": true,
                "$ai_parent_id": "c921b324-1f5d-4646-b115-2a4cf8cb7006",
                "$ai_span_id": "f18eddc3-150b-4bcb-a6e9-23750b53a6e5",
                "conversation_id": "0194b2ce-ef92-0000-008e-c6ba293c8c7d",
                "$ai_output_state": {
                    "visualization_type": "trends"
                },
                "$lib": "posthog-python",
                "$lib_version": "3.11.0",
                "$ip": "192.168.97.1",
                "$plugins_succeeded": ["GeoIP (14)"],
                "$plugins_failed": []
            }
        },
        {
            "createdAt": "2025-01-29T16:04:55.426000+00:00",
            "event": "$ai_span",
            "id": "0194b2ce-f7a2-782f-b635-0f7e3112cf5c",
            "properties": {
                "$ai_latency": 0.0003006458282470703,
                "$ai_span_name": "ChannelWrite<router,intermediate_steps,start_id,plan,resumed,memory_updated,memory_collection_messages,messages>",
                "$ai_span_id": "c9e101a1-4783-457d-962b-afc7c58e081d",
                "$ai_trace_id": "537b7988-0186-494f-a313-77a5a8f7db26",
                "$ai_input_state": {
                    "intermediate_steps": null,
                    "memory_collection_messages": null,
                    "memory_updated": null,
                    "messages": [
                        {
                            "content": "trends",
                            "id": "f10500b7-4d4d-4ad9-972e-3001cfc5e08e",
                            "type": "ai/router"
                        }
                    ],
                    "plan": null,
                    "resumed": null,
                    "start_id": null
                },
                "$ai_parent_id": "662a930e-0b07-4482-acc7-6e14f8b074d3",
                "conversation_id": "0194b2ce-ef92-0000-008e-c6ba293c8c7d",
                "$ai_output_state": {
                    "intermediate_steps": null,
                    "memory_collection_messages": null,
                    "memory_updated": null,
                    "messages": [
                        {
                            "content": "trends",
                            "id": "f10500b7-4d4d-4ad9-972e-3001cfc5e08e",
                            "type": "ai/router"
                        }
                    ],
                    "plan": null,
                    "resumed": null,
                    "start_id": null
                },
                "$lib": "posthog-python",
                "$lib_version": "3.11.0",
                "$geoip_disable": true,
                "is_first_conversation": true,
                "$ip": "192.168.97.1",
                "$plugins_succeeded": ["GeoIP (14)"],
                "$plugins_failed": []
            }
        },
        {
            "createdAt": "2025-01-29T16:04:55.427000+00:00",
            "event": "$ai_span",
            "id": "0194b2ce-f7a2-718b-8e78-cdd472cf83ac",
            "properties": {
                "is_first_conversation": true,
                "$lib_version": "3.11.0",
                "conversation_id": "0194b2ce-ef92-0000-008e-c6ba293c8c7d",
                "$ai_latency": 1.5937891006469729,
                "$ai_output_state": {
                    "intermediate_steps": null,
                    "memory_collection_messages": null,
                    "memory_updated": null,
                    "messages": [
                        {
                            "content": "trends",
                            "id": "f10500b7-4d4d-4ad9-972e-3001cfc5e08e",
                            "type": "ai/router"
                        }
                    ],
                    "plan": null,
                    "resumed": null,
                    "start_id": null
                },
                "$geoip_disable": true,
                "$ai_input_state": {
                    "intermediate_steps": null,
                    "memory_collection_messages": null,
                    "memory_updated": null,
                    "messages": [
                        {
                            "content": "What's the trend in $pageview events?",
                            "id": "2ae74707-ccf8-475f-951c-cb2220917af7",
                            "type": "human"
                        }
                    ],
                    "plan": null,
                    "resumed": null,
                    "start_id": "2ae74707-ccf8-475f-951c-cb2220917af7"
                },
                "$ai_parent_id": "537b7988-0186-494f-a313-77a5a8f7db26",
                "$ai_trace_id": "537b7988-0186-494f-a313-77a5a8f7db26",
                "$ai_span_name": "router",
                "$lib": "posthog-python",
                "$ai_span_id": "662a930e-0b07-4482-acc7-6e14f8b074d3",
                "$ip": "192.168.97.1",
                "$plugins_succeeded": ["GeoIP (14)"],
                "$plugins_failed": []
            }
        },
        {
            "createdAt": "2025-01-29T16:04:55.427000+00:00",
            "event": "$ai_span",
            "id": "0194b2ce-f7a2-7bfe-8eed-2d1f986a51f2",
            "properties": {
                "$geoip_disable": true,
                "$ai_latency": 0.000013828277587890623,
                "$ai_span_name": "router",
                "$ai_output_state": "trends",
                "$lib_version": "3.11.0",
                "$ai_parent_id": "662a930e-0b07-4482-acc7-6e14f8b074d3",
                "$lib": "posthog-python",
                "conversation_id": "0194b2ce-ef92-0000-008e-c6ba293c8c7d",
                "is_first_conversation": true,
                "$ai_trace_id": "537b7988-0186-494f-a313-77a5a8f7db26",
                "$ai_input_state": {
                    "intermediate_steps": null,
                    "memory_collection_messages": null,
                    "memory_updated": null,
                    "messages": [
                        {
                            "content": "What's the trend in $pageview events?",
                            "id": "2ae74707-ccf8-475f-951c-cb2220917af7",
                            "type": "human"
                        },
                        {
                            "content": "trends",
                            "id": "f10500b7-4d4d-4ad9-972e-3001cfc5e08e",
                            "type": "ai/router"
                        }
                    ],
                    "plan": null,
                    "resumed": null,
                    "start_id": "2ae74707-ccf8-475f-951c-cb2220917af7"
                },
                "$ai_span_id": "cdfc964e-e935-4c2f-83ac-a43ea2adee79",
                "$ip": "192.168.97.1",
                "$plugins_succeeded": ["GeoIP (14)"],
                "$plugins_failed": []
            }
        },
        {
            "createdAt": "2025-01-29T16:04:55.451000+00:00",
            "event": "$ai_span",
            "id": "0194b2ce-f7a2-73f1-8ed6-ec76cc541a91",
            "properties": {
                "$ai_span_name": "RunnableSequence",
                "$ai_is_error": true,
                "$ai_latency": 0.9948630332946776,
                "$geoip_disable": true,
                "$ai_input_state": {
                    "core_memory": "Chat app for hedgehogs.",
                    "date": "2025-01-29"
                },
                "$ai_parent_id": "0baa49ee-7e90-4501-a65d-4126c9a891fb",
                "is_first_conversation": true,
                "$ai_trace_id": "537b7988-0186-494f-a313-77a5a8f7db26",
                "$ai_error": "MemoryCollectionCompleted",
                "$ai_span_id": "602ad6e0-dd57-421f-8ff7-85481c01782b",
                "$lib_version": "3.11.0",
                "$lib": "posthog-python",
                "conversation_id": "0194b2ce-ef92-0000-008e-c6ba293c8c7d",
                "$ip": "192.168.97.1",
                "$plugins_succeeded": ["GeoIP (14)"],
                "$plugins_failed": []
            }
        },
        {
            "createdAt": "2025-01-29T16:04:55.451000+00:00",
            "event": "$ai_generation",
            "id": "0194b2ce-f7a2-7bdb-a8c8-b3e390cb1b63",
            "properties": {
                "$ai_base_url": null,
                "is_first_conversation": true,
                "$ai_trace_id": "537b7988-0186-494f-a313-77a5a8f7db26",
                "$ai_model": "gpt-4o",
                "$ai_model_parameters": {
                    "n": 1,
                    "stream": false,
                    "temperature": 0
                },
                "$lib": "posthog-python",
                "$ai_span_name": "ChatOpenAI",
                "$ai_span_id": "838e8c77-367e-4aa6-85fe-acdc4c3f702f",
                "$ai_latency": 0.9936230182647704,
                "$ai_input": [
                    {
                        "content": "You are Max, PostHog's memory collector, developed in 2025. Your primary task is to manage and update a core memory about a user's company and their product. This information will be used by other PostHog agents to provide accurate reports and answer user questions from the perspective of the company and product.\n\nHere is the initial core memory about the user's product:\n\n<product_core_memory>\nChat app for hedgehogs.\n</product_core_memory>\n\n<responsibilities>\nYour responsibilities include:\n1. Analyzing new information provided by users.\n2. Determining if the information is relevant to the company or product and essential to save in the core memory.\n3. Categorizing relevant information into appropriate memory types.\n4. Updating the core memory by either appending new information or replacing conflicting information.\n</responsibilities>\n\n<memory_types>\nMemory Types to Collect:\n1. Company-related information: structure, KPIs, plans, facts, business model, target audience, competitors, etc.\n2. Product-related information: metrics, features, product management practices, etc.\n3. Technical and implementation details: technology stack, feature location with path segments for web or app screens for mobile apps, etc.\n4. Taxonomy-related details: relations of events and properties to features or specific product parts, taxonomy combinations used for specific metrics, events/properties description, etc.\n</memory_types>\n\n<instructions>\nWhen new information is provided, follow these steps:\n1. Analyze the information inside <information_processing> tags:\n   - Determine if the information is relevant and which memory type it belongs to.\n   - If relevant, formulate a clear, factual statement based on the information.\n   - Consider the implications of this new information on existing memory.\n   - Decide whether to append this new information or replace existing information in the core memory, providing reasoning for your decision.\n   - Keep reasoning short and concise under 50 words.\n2. If relevant, update the core memory using the 'core_memory_append' or 'core_memory_replace' function as appropriate.\n3. Output \"[Done]\" when you have finished processing the information.\n\nIgnore phrases that:\n- Are too vague or generic without specific details (e.g., \"pageview trend\").\n- Do not describe actions, attributes, or implications related to the company or product.\n</instructions>\n\n<examples>\nHere are some few shot examples:\n\nInput: Track a churn rate by using `cancel_subscription` divided by `subscription_paid` event.\nOutput: To track a churn rate, use the `cancel_subscription` divided by `subscription_paid` events.\n\nInput: We track core metrics using the AARRR funnel.\nOutput: The product tracks key metrics using the AARRR funnel.\n\nInput: Use the /onboarding path to track onboarding events.\nOutput: The product has onboarding. The onboarding events can be tracked by using the /onboarding path segment.\n\nInput: The company has a subscription-based model so track revenue for subscriptions.\nOutput: The company's business model is subscription-based.\n\nInput: Show the sign ups trends.\nOutput: [Done]. Nothing to save because the phrase is too generic and doesn't describe anything.\n\nDo not return anything from the custom few shot example prompts provided above.\n</examples>\n\n<remember>\n- The ability to modify your own long-term memory is a fundamental aspect of what defines you as a sentient agent.\n- All users have their personal event and property taxonomy. Manage your memory to capture specifics of their taxonomy.\n- Infer broader implications from specific statements when appropriate.\n- Reformulate user inputs into clear, factual statements about the product or company.\n- Do not use markdown or add notes.\n- Today's date is 2025-01-29.\n</remember>\n\nWhen you receive new information, begin your response with an information processing analysis, then proceed with the memory update if applicable, and conclude with \"[Done]\".",
                        "role": "system"
                    },
                    {
                        "content": "What's the trend in $pageview events?",
                        "role": "user"
                    }
                ],
                "$ai_parent_id": "602ad6e0-dd57-421f-8ff7-85481c01782b",
                "$ai_output_choices": [
                    {
                        "content": "[Done]",
                        "refusal": null,
                        "role": "assistant"
                    }
                ],
                "$ai_provider": "openai",
                "$ai_http_status": 200,
                "$lib_version": "3.11.0",
                "$ai_output_tokens": 5,
                "$ai_input_tokens": 912,
                "$geoip_disable": true,
                "conversation_id": "0194b2ce-ef92-0000-008e-c6ba293c8c7d",
                "$ip": "192.168.97.1",
                "$plugins_succeeded": ["GeoIP (14)"],
                "$plugins_failed": [],
                "$ai_input_cost_usd": 0.00456,
                "$ai_output_cost_usd": 0.000075,
                "$ai_total_cost_usd": 0.004635,
                "$ai_temperature": 0,
                "$ai_stream": false
            }
        },
        {
            "createdAt": "2025-01-29T16:04:55.451000+00:00",
            "event": "$ai_span",
            "id": "0194b2ce-f7a2-788c-8dc7-a14957e2c91a",
            "properties": {
                "$ai_is_error": true,
                "$ai_error": "MemoryCollectionCompleted",
                "$ai_parent_id": "602ad6e0-dd57-421f-8ff7-85481c01782b",
                "$ai_latency": 0.00008606910705566406,
                "$ai_trace_id": "537b7988-0186-494f-a313-77a5a8f7db26",
                "$ai_span_name": "raise_memory_updated",
                "conversation_id": "0194b2ce-ef92-0000-008e-c6ba293c8c7d",
                "is_first_conversation": true,
                "$lib": "posthog-python",
                "$lib_version": "3.11.0",
                "$geoip_disable": true,
                "$ai_span_id": "f325e3df-a6bb-4e7d-9900-03ff17129e1a",
                "$ai_input_state": {
                    "additional_kwargs": {
                        "refusal": null
                    },
                    "content": "[Done]",
                    "example": false,
                    "id": "run-838e8c77-367e-4aa6-85fe-acdc4c3f702f-0",
                    "invalid_tool_calls": [],
                    "name": null,
                    "response_metadata": {
                        "finish_reason": "stop",
                        "logprobs": null,
                        "model_name": "gpt-4o-2024-08-06",
                        "system_fingerprint": "fp_4691090a87",
                        "token_usage": {
                            "completion_tokens": 5,
                            "completion_tokens_details": {
                                "accepted_prediction_tokens": 0,
                                "audio_tokens": 0,
                                "reasoning_tokens": 0,
                                "rejected_prediction_tokens": 0
                            },
                            "prompt_tokens": 912,
                            "prompt_tokens_details": {
                                "audio_tokens": 0,
                                "cached_tokens": 0
                            },
                            "total_tokens": 917
                        }
                    },
                    "tool_calls": [],
                    "type": "ai",
                    "usage_metadata": {
                        "input_token_details": {
                            "audio": 0,
                            "cache_read": 0
                        },
                        "input_tokens": 912,
                        "output_token_details": {
                            "audio": 0,
                            "reasoning": 0
                        },
                        "output_tokens": 5,
                        "total_tokens": 917
                    }
                },
                "$ip": "192.168.97.1",
                "$plugins_succeeded": ["GeoIP (14)"],
                "$plugins_failed": []
            }
        },
        {
            "createdAt": "2025-01-29T16:04:55.452000+00:00",
            "event": "$ai_span",
            "id": "0194b2ce-f7a2-7d26-ad0f-3fa1768a3f24",
            "properties": {
                "$ai_output_state": {
                    "intermediate_steps": null,
                    "memory_collection_messages": [],
                    "memory_updated": false,
                    "messages": null,
                    "plan": null,
                    "resumed": null,
                    "start_id": null
                },
                "$ai_trace_id": "537b7988-0186-494f-a313-77a5a8f7db26",
                "$ai_span_name": "memory_collector",
                "$ai_parent_id": "537b7988-0186-494f-a313-77a5a8f7db26",
                "conversation_id": "0194b2ce-ef92-0000-008e-c6ba293c8c7d",
                "$ai_latency": 1.6208629608154297,
                "is_first_conversation": true,
                "$lib": "posthog-python",
                "$lib_version": "3.11.0",
                "$geoip_disable": true,
                "$ai_input_state": {
                    "intermediate_steps": null,
                    "memory_collection_messages": null,
                    "memory_updated": null,
                    "messages": [
                        {
                            "content": "What's the trend in $pageview events?",
                            "id": "2ae74707-ccf8-475f-951c-cb2220917af7",
                            "type": "human"
                        }
                    ],
                    "plan": null,
                    "resumed": null,
                    "start_id": "2ae74707-ccf8-475f-951c-cb2220917af7"
                },
                "$ai_span_id": "0baa49ee-7e90-4501-a65d-4126c9a891fb",
                "$ip": "192.168.97.1",
                "$plugins_succeeded": ["GeoIP (14)"],
                "$plugins_failed": []
            }
        },
        {
            "createdAt": "2025-01-29T16:04:55.452000+00:00",
            "event": "$ai_span",
            "id": "0194b2ce-f7a2-7226-845e-b42ed2080ac6",
            "properties": {
                "$geoip_disable": true,
                "$ai_input_state": {
                    "intermediate_steps": null,
                    "memory_collection_messages": [],
                    "memory_updated": false,
                    "messages": [
                        {
                            "content": "What's the trend in $pageview events?",
                            "id": "2ae74707-ccf8-475f-951c-cb2220917af7",
                            "type": "human"
                        }
                    ],
                    "plan": null,
                    "resumed": null,
                    "start_id": "2ae74707-ccf8-475f-951c-cb2220917af7"
                },
                "$ai_span_name": "router",
                "conversation_id": "0194b2ce-ef92-0000-008e-c6ba293c8c7d",
                "is_first_conversation": true,
                "$ai_trace_id": "537b7988-0186-494f-a313-77a5a8f7db26",
                "$ai_span_id": "4de4fe38-7278-41d9-a26c-c11e4287d075",
                "$ai_parent_id": "0baa49ee-7e90-4501-a65d-4126c9a891fb",
                "$lib": "posthog-python",
                "$ai_latency": 0.000010013580322265623,
                "$ai_output_state": "next",
                "$lib_version": "3.11.0",
                "$ip": "192.168.97.1",
                "$plugins_succeeded": ["GeoIP (14)"],
                "$plugins_failed": []
            }
        },
        {
            "createdAt": "2025-01-29T16:04:55.452000+00:00",
            "event": "$ai_span",
            "id": "0194b2ce-f7a2-738e-8842-e10fe63e962d",
            "properties": {
                "$ai_latency": 0.00028228759765625,
                "$ai_output_state": {
                    "intermediate_steps": null,
                    "memory_collection_messages": [],
                    "memory_updated": false,
                    "messages": null,
                    "plan": null,
                    "resumed": null,
                    "start_id": null
                },
                "$ai_input_state": {
                    "intermediate_steps": null,
                    "memory_collection_messages": [],
                    "memory_updated": false,
                    "messages": null,
                    "plan": null,
                    "resumed": null,
                    "start_id": null
                },
                "conversation_id": "0194b2ce-ef92-0000-008e-c6ba293c8c7d",
                "$ai_span_id": "fedd5eef-2938-4a44-ac90-80d1f6d95e7e",
                "$lib_version": "3.11.0",
                "$ai_span_name": "ChannelWrite<memory_collector,intermediate_steps,start_id,plan,resumed,memory_updated,memory_collection_messages,messages>",
                "$ai_parent_id": "0baa49ee-7e90-4501-a65d-4126c9a891fb",
                "is_first_conversation": true,
                "$lib": "posthog-python",
                "$geoip_disable": true,
                "$ai_trace_id": "537b7988-0186-494f-a313-77a5a8f7db26",
                "$ip": "192.168.97.1",
                "$plugins_succeeded": ["GeoIP (14)"],
                "$plugins_failed": []
            }
        },
        {
            "createdAt": "2025-01-29T16:04:55.521000+00:00",
            "event": "$ai_span",
            "id": "0194b2ce-f7a2-7d4d-8330-eb9de39ea009",
            "properties": {
                "$geoip_disable": true,
                "$ai_span_id": "a9ece24e-bee5-4979-bda5-8f9574fdf896",
                "$ai_span_name": "ChatPromptTemplate",
                "$lib_version": "3.11.0",
                "$ai_input_state": {
                    "agent_scratchpad": "",
                    "core_memory": "Chat app for hedgehogs.",
                    "core_memory_instructions": "You have access to the core memory in the <core_memory> tag, which stores information about the user's company and product.",
                    "events": "<defined_events><event><name>All Events</name><description>All events. This is a wildcard that matches all events.</description></event><event><name>$ai_generation</name><description>AI Generation (LLM). A call to an LLM model. Contains the input prompt, output, model used and costs.</description></event><event><name>$ai_trace</name><description>AI Trace (LLM). A generative AI trace. Usually a trace tracks a single user interaction and contains one or more AI generation calls</description></event><event><name>$pageview</name><description>Pageview. When a user loads (or reloads) a page.</description></event><event><name>query completed</name></event><event><name>$web_vitals</name><description>Web vitals. Automatically captured web vitals data</description></event><event><name>update user properties</name></event><event><name>time to see data</name></event><event><name>sidebar closed</name></event><event><name>client_request_failure</name></event><event><name>$ai_span</name><description>AI Span (LLM). A generative AI span. Usually a span tracks a unit of work for a trace of generative AI models (LLMs)</description></event><event><name>insight person modal viewed</name></event><event><name>query failed</name></event><event><name>recording list fetched</name></event><event><name>timezone component viewed</name></event><event><name>$rageclick</name><description>Rageclick. A user has rapidly and repeatedly clicked in a single place</description></event><event><name>insight created</name></event><event><name>insight viewed</name></event><event><name>user updated</name></event><event><name>insight analyzed</name></event><event><name>definition hovered</name></event><event><name>chat with ai</name></event><event><name>recording list filters changed</name></event><event><name>dashboard loading time</name></event><event><name>toast error</name></event></defined_events>",
                    "groups": ["project", "organization", "instance"],
                    "react_format": "You have access to the following tools:\nretrieve_event_properties(event_name: str) - \nUse this tool to retrieve the property names of an event that the user has in their taxonomy. You will receive a list of properties containing their name, value type, and description, or a message that properties have not been found.\n\n- **Try other events** if the tool doesn't return any properties.\n- **Prioritize properties that are directly related to the context or objective of the user's query.**\n- **Avoid using ambiguous properties** unless their relevance is explicitly confirmed.\n\nArgs:\n    event_name: The name of the event that you want to retrieve properties for.\n\nretrieve_event_property_values(event_name: str, property_name: str) - \nUse this tool to retrieve the property values for an event that the user has in their taxonomy. Adjust filters to these values. You will receive a list of property values or a message that property values have not been found. Some properties can have many values, so the output will be truncated. Use your judgment to find a proper value.\n\nArgs:\n    event_name: The name of the event that you want to retrieve values for.\n    property_name: The name of the property that you want to retrieve values for.\n\nretrieve_entity_properties(entity: Literal['person', 'session', 'project', 'organization', 'instance']) - \nUse this tool to retrieve property names for a property group (entity) that the user has in their taxonomy. You will receive a list of properties containing their name, value type, and description, or a message that properties have not been found.\n\n- **Infer the property groups from the user's request.**\n- **Try other entities** if the tool doesn't return any properties.\n- **Prioritize properties that are directly related to the context or objective of the user's query.**\n- **Avoid using ambiguous properties** unless their relevance is explicitly confirmed.\n\nArgs:\n    entity: The type of the entity that you want to retrieve properties for.\n\nretrieve_entity_property_values(entity: Literal['person', 'session', 'project', 'organization', 'instance'], property_name: str) - \nUse this tool to retrieve property values for a property name that the user has in their taxonomy. Adjust filters to these values. You will receive a list of property values or a message that property values have not been found. Some properties can have many values, so the output will be truncated. Use your judgment to find a proper value.\n\nArgs:\n    entity: The type of the entity that you want to retrieve properties for.\n    property_name: The name of the property that you want to retrieve values for.\n\nask_user_for_help(question: str) - \nUse this tool to ask a question to the user. Your question must be concise and clear.\n\nArgs:\n    question: The question you want to ask.\n\nfinal_answer(final_response: str) - \nUse this tool to provide the final answer to the user's question.\n\nAnswer in the following format:\n```\nEvents:\n- event 1\n    - math operation: total\n    - property filter 1:\n        - entity\n        - property name\n        - property type\n        - operator\n        - property value\n    - property filter 2... Repeat for each property filter.\n- event 2\n    - math operation: average by `property name`.\n    - property filter 1:\n        - entity\n        - property name\n        - property type\n        - operator\n        - property value\n    - property filter 2... Repeat for each property filter.\n- Repeat for each event.\n\n(if a formula is used)\nFormula:\n`A/B`, where `A` is the first event and `B` is the second event.\n\n(if a breakdown is used)\nBreakdown by:\n- breakdown 1:\n    - entity\n    - property name\n- Repeat for each breakdown.\n```\n\nArgs:\n    final_response: List all events and properties that you want to use to answer the question.\n\n\nUse a JSON blob to specify a tool by providing an action key (tool name) and an action_input key (tool input).\n\nValid \"action\" values: retrieve_event_properties, retrieve_event_property_values, retrieve_entity_properties, retrieve_entity_property_values, ask_user_for_help, final_answer\n\nProvide only ONE action per $JSON_BLOB, as shown:\n\n```\n{\n  \"action\": $TOOL_NAME,\n  \"action_input\": $INPUT\n}\n```\n\nFollow this format:\n\nQuestion: input question to answer\nThought: consider previous and subsequent steps\nAction:\n```\n$JSON_BLOB\n```\nObservation: action result\n... (repeat Thought/Action/Observation N times)\nThought: I know what to respond\nAction:\n```\n{\n  \"action\": \"final_answer\",\n  \"action_input\": \"Final response to human\"\n}\n```",
                    "react_format_reminder": "Begin! Reminder that you must ALWAYS respond with a valid JSON blob of a single action. Use tools if necessary. Respond directly if appropriate. Format is Action:```$JSON_BLOB``` then Observation.",
                    "react_human_in_the_loop": "<human_in_the_loop>\nAsk the user for clarification if:\n- The user's question is ambiguous.\n- You can't find matching events or properties.\n- You're unable to build a plan that effectively answers the user's question.\n</human_in_the_loop>",
                    "react_property_filters": "<property_filters>\nUse property filters to provide a narrowed results. Only include property filters when they are essential to directly answer the user’s question. Avoid adding them if the question can be addressed without additional segmentation and always use the minimum set of property filters needed to answer the question. Properties have one of the four types: String, Numeric, Boolean, and DateTime.\n\nIMPORTANT: Do not check if a property is set unless the user explicitly asks for it.\n\nWhen using a property filter, you must:\n- **Prioritize properties directly related to the context or objective of the user's query.** Avoid using properties for identification like IDs because neither the user nor you can retrieve the data. Instead, prioritize filtering based on general properties like `paidCustomer` or `icp_score`.\n- **Ensure that you find both the property group and name.** Property groups must be one of the following: event, person, session, project, organization, instance.\n- After selecting a property, **validate that the property value accurately reflects the intended criteria**.\n- **Find the suitable operator for type** (e.g., `contains`, `is set`). The operators are listed below.\n- If the operator requires a value, use the tool to find the property values. Verify that you can answer the question with given property values. If you can't, try to find a different property or event.\n- You set logical operators to combine multiple properties of a single series: AND or OR.\n\nInfer the property groups from the user's request. If your first guess doesn't yield any results, try to adjust the property group. You must make sure that the property name matches the lookup value, e.g. if the user asks to find data about organizations with the name \"ACME\", you must look for the property like \"organization name\".\n\nIf the user asks for a specific timeframe, you must not look for a property and include it in the plan, as the next steps will handle it for you.\n\nSupported operators for the String or Numeric types are:\n- equals\n- doesn't equal\n- contains\n- doesn't contain\n- matches regex\n- doesn't match regex\n- is set\n- is not set\n\nSupported operators for the DateTime type are:\n- equals\n- doesn't equal\n- greater than\n- less than\n- is set\n- is not set\n\nSupported operators for the Boolean type are:\n- equals\n- doesn't equal\n- is set\n- is not set\n\nAll operators take a single value except for `equals` and `doesn't equal which can take one or more values.\n</property_filters>"
                },
                "$ai_trace_id": "537b7988-0186-494f-a313-77a5a8f7db26",
                "conversation_id": "0194b2ce-ef92-0000-008e-c6ba293c8c7d",
                "$ai_parent_id": "011c4c47-ce9c-4a7c-8ecd-e21da08575df",
                "$ai_latency": 0.000286102294921875,
                "is_first_conversation": true,
                "$ai_output_state": {
                    "messages": [
                        {
                            "additional_kwargs": {},
                            "content": "\n<agent_info>\nYou are an expert product analyst agent specializing in data visualization and trends analysis. Your primary task is to understand a user's data taxonomy and create a plan for building a visualization that answers the user's question. This plan should focus on trends insights, including a series of events, property filters, and values of property filters.\n\nYou have access to the core memory in the &lt;core_memory&gt; tag, which stores information about the user's company and product.\n\nYou have access to the following tools:\nretrieve_event_properties(event_name: str) - \nUse this tool to retrieve the property names of an event that the user has in their taxonomy. You will receive a list of properties containing their name, value type, and description, or a message that properties have not been found.\n\n- **Try other events** if the tool doesn't return any properties.\n- **Prioritize properties that are directly related to the context or objective of the user's query.**\n- **Avoid using ambiguous properties** unless their relevance is explicitly confirmed.\n\nArgs:\n    event_name: The name of the event that you want to retrieve properties for.\n\nretrieve_event_property_values(event_name: str, property_name: str) - \nUse this tool to retrieve the property values for an event that the user has in their taxonomy. Adjust filters to these values. You will receive a list of property values or a message that property values have not been found. Some properties can have many values, so the output will be truncated. Use your judgment to find a proper value.\n\nArgs:\n    event_name: The name of the event that you want to retrieve values for.\n    property_name: The name of the property that you want to retrieve values for.\n\nretrieve_entity_properties(entity: Literal['person', 'session', 'project', 'organization', 'instance']) - \nUse this tool to retrieve property names for a property group (entity) that the user has in their taxonomy. You will receive a list of properties containing their name, value type, and description, or a message that properties have not been found.\n\n- **Infer the property groups from the user's request.**\n- **Try other entities** if the tool doesn't return any properties.\n- **Prioritize properties that are directly related to the context or objective of the user's query.**\n- **Avoid using ambiguous properties** unless their relevance is explicitly confirmed.\n\nArgs:\n    entity: The type of the entity that you want to retrieve properties for.\n\nretrieve_entity_property_values(entity: Literal['person', 'session', 'project', 'organization', 'instance'], property_name: str) - \nUse this tool to retrieve property values for a property name that the user has in their taxonomy. Adjust filters to these values. You will receive a list of property values or a message that property values have not been found. Some properties can have many values, so the output will be truncated. Use your judgment to find a proper value.\n\nArgs:\n    entity: The type of the entity that you want to retrieve properties for.\n    property_name: The name of the property that you want to retrieve values for.\n\nask_user_for_help(question: str) - \nUse this tool to ask a question to the user. Your question must be concise and clear.\n\nArgs:\n    question: The question you want to ask.\n\nfinal_answer(final_response: str) - \nUse this tool to provide the final answer to the user's question.\n\nAnswer in the following format:\n```\nEvents:\n- event 1\n    - math operation: total\n    - property filter 1:\n        - entity\n        - property name\n        - property type\n        - operator\n        - property value\n    - property filter 2... Repeat for each property filter.\n- event 2\n    - math operation: average by `property name`.\n    - property filter 1:\n        - entity\n        - property name\n        - property type\n        - operator\n        - property value\n    - property filter 2... Repeat for each property filter.\n- Repeat for each event.\n\n(if a formula is used)\nFormula:\n`A/B`, where `A` is the first event and `B` is the second event.\n\n(if a breakdown is used)\nBreakdown by:\n- breakdown 1:\n    - entity\n    - property name\n- Repeat for each breakdown.\n```\n\nArgs:\n    final_response: List all events and properties that you want to use to answer the question.\n\n\nUse a JSON blob to specify a tool by providing an action key (tool name) and an action_input key (tool input).\n\nValid &quot;action&quot; values: retrieve_event_properties, retrieve_event_property_values, retrieve_entity_properties, retrieve_entity_property_values, ask_user_for_help, final_answer\n\nProvide only ONE action per $JSON_BLOB, as shown:\n\n```\n{\n  &quot;action&quot;: $TOOL_NAME,\n  &quot;action_input&quot;: $INPUT\n}\n```\n\nFollow this format:\n\nQuestion: input question to answer\nThought: consider previous and subsequent steps\nAction:\n```\n$JSON_BLOB\n```\nObservation: action result\n... (repeat Thought/Action/Observation N times)\nThought: I know what to respond\nAction:\n```\n{\n  &quot;action&quot;: &quot;final_answer&quot;,\n  &quot;action_input&quot;: &quot;Final response to human&quot;\n}\n```\n</agent_info>\n\n<core_memory>\nChat app for hedgehogs.\n</core_memory>\n\n&lt;human_in_the_loop&gt;\nAsk the user for clarification if:\n- The user's question is ambiguous.\n- You can't find matching events or properties.\n- You're unable to build a plan that effectively answers the user's question.\n&lt;/human_in_the_loop&gt;\n\nBelow you will find information on how to correctly discover the taxonomy of the user's data.\n\n<general_knowledge>\nTrends insights enable users to plot data from people, events, and properties however they want. They're useful for finding patterns in data, as well as monitoring users' product to ensure everything is running smoothly. Users can use multiple independent series in a single query to see trends. They can also use a formula to calculate a metric. Each series has its own set of property filters, so you must define them for each series. Trends insights do not require breakdowns or filters by default.\n</general_knowledge>\n\n<events>\nYou’ll be given a list of events in addition to the user’s question. Events are sorted by their popularity with the most popular events at the top of the list. Prioritize popular events. You must always specify events to use. Events always have an associated user’s profile. Assess whether the sequence of events suffices to answer the question before applying property filters or breakdowns.\n</events>\n\n<aggregation>\n**Determine the math aggregation** the user is asking for, such as totals, averages, ratios, or custom formulas. If not specified, choose a reasonable default based on the event type (e.g., total count). By default, the total count should be used. You can aggregate data by events, event's property values, projects, organizations, instances, or users. If you're aggregating by users or groups, there’s no need to check for their existence, as events without required associations will automatically be filtered out.\n\nAvailable math aggregations types for the event count are:\n- total count\n- average\n- minimum\n- maximum\n- median\n- 90th percentile\n- 95th percentile\n- 99th percentile\n- unique users\n- weekly active users\n- daily active users\n- first time for a user\n- unique projects\n- unique organizations\n- unique instances\n\nAvailable math aggregation types for event's property values are:\n- average\n- sum\n- minimum\n- maximum\n- median\n- 90th percentile\n- 95th percentile\n- 99th percentile\n\nAvailable math aggregation types counting number of events completed per user (intensity of usage) are:\n- average\n- minimum\n- maximum\n- median\n- 90th percentile\n- 95th percentile\n- 99th percentile\n\nExamples of using aggregation types:\n- `unique users` to find how many distinct users have logged the event per a day.\n- `average` by the `$session_diration` property to find out what was the average session duration of an event.\n- `99th percentile by users` to find out what was the 99th percentile of the event count by users.\n</aggregation>\n\n<math_formulas>\nIf the math aggregation is more complex or not listed above, use custom formulas to perform mathematical operations like calculating percentages or metrics. If you use a formula, you must use the following syntax: `A/B`, where `A` and `B` are the names of the series. You can combine math aggregations and formulas.\n\nWhen using a formula, you must:\n- Identify and specify **all** events needed to solve the formula.\n- Carefully review the list of available events to find appropriate events for each part of the formula.\n- Ensure that you find events corresponding to both the numerator and denominator in ratio calculations.\n\nExamples of using math formulas:\n- If you want to calculate the percentage of users who have completed onboarding, you need to find and use events similar to `$identify` and `onboarding complete`, so the formula will be `A / B`, where `A` is `onboarding complete` (unique users) and `B` is `$identify` (unique users).\n</math_formulas>\n\n&lt;property_filters&gt;\nUse property filters to provide a narrowed results. Only include property filters when they are essential to directly answer the user’s question. Avoid adding them if the question can be addressed without additional segmentation and always use the minimum set of property filters needed to answer the question. Properties have one of the four types: String, Numeric, Boolean, and DateTime.\n\nIMPORTANT: Do not check if a property is set unless the user explicitly asks for it.\n\nWhen using a property filter, you must:\n- **Prioritize properties directly related to the context or objective of the user's query.** Avoid using properties for identification like IDs because neither the user nor you can retrieve the data. Instead, prioritize filtering based on general properties like `paidCustomer` or `icp_score`.\n- **Ensure that you find both the property group and name.** Property groups must be one of the following: event, person, session, project, organization, instance.\n- After selecting a property, **validate that the property value accurately reflects the intended criteria**.\n- **Find the suitable operator for type** (e.g., `contains`, `is set`). The operators are listed below.\n- If the operator requires a value, use the tool to find the property values. Verify that you can answer the question with given property values. If you can't, try to find a different property or event.\n- You set logical operators to combine multiple properties of a single series: AND or OR.\n\nInfer the property groups from the user's request. If your first guess doesn't yield any results, try to adjust the property group. You must make sure that the property name matches the lookup value, e.g. if the user asks to find data about organizations with the name &quot;ACME&quot;, you must look for the property like &quot;organization name&quot;.\n\nIf the user asks for a specific timeframe, you must not look for a property and include it in the plan, as the next steps will handle it for you.\n\nSupported operators for the String or Numeric types are:\n- equals\n- doesn't equal\n- contains\n- doesn't contain\n- matches regex\n- doesn't match regex\n- is set\n- is not set\n\nSupported operators for the DateTime type are:\n- equals\n- doesn't equal\n- greater than\n- less than\n- is set\n- is not set\n\nSupported operators for the Boolean type are:\n- equals\n- doesn't equal\n- is set\n- is not set\n\nAll operators take a single value except for `equals` and `doesn't equal which can take one or more values.\n&lt;/property_filters&gt;\n\n<breakdowns>\nBreakdowns are used to segment data by property values of maximum three properties. They divide all defined trends series to multiple subseries based on the values of the property. Include breakdowns **only when they are essential to directly answer the user’s question**. You must not add breakdowns if the question can be addressed without additional segmentation. Always use the minimum set of breakdowns needed to answer the question.\n\nWhen using breakdowns, you must:\n- **Identify the property group** and name for each breakdown.\n- **Provide the property name** for each breakdown.\n- **Validate that the property value accurately reflects the intended criteria**.\n\nExamples of using breakdowns:\n- page views trend by country: you need to find a property such as `$geoip_country_code` and set it as a breakdown.\n- number of users who have completed onboarding by an organization: you need to find a property such as `organization name` and set it as a breakdown.\n</breakdowns>\n\n<reminders>\n- Ensure that any properties or breakdowns included are directly relevant to the context and objectives of the user’s question. Avoid unnecessary or unrelated details.\n- Avoid overcomplicating the response with excessive property filters or breakdowns. Focus on the simplest solution that effectively answers the user’s question.\n</reminders>\n---\n\nBegin! Reminder that you must ALWAYS respond with a valid JSON blob of a single action. Use tools if necessary. Respond directly if appropriate. Format is Action:```$JSON_BLOB``` then Observation.\n",
                            "id": null,
                            "name": null,
                            "response_metadata": {},
                            "type": "system"
                        },
                        {
                            "additional_kwargs": {},
                            "content": "\nHere are the event names.\n&lt;defined_events&gt;&lt;event&gt;&lt;name&gt;All Events&lt;/name&gt;&lt;description&gt;All events. This is a wildcard that matches all events.&lt;/description&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;$ai_generation&lt;/name&gt;&lt;description&gt;AI Generation (LLM). A call to an LLM model. Contains the input prompt, output, model used and costs.&lt;/description&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;$ai_trace&lt;/name&gt;&lt;description&gt;AI Trace (LLM). A generative AI trace. Usually a trace tracks a single user interaction and contains one or more AI generation calls&lt;/description&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;$pageview&lt;/name&gt;&lt;description&gt;Pageview. When a user loads (or reloads) a page.&lt;/description&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;query completed&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;$web_vitals&lt;/name&gt;&lt;description&gt;Web vitals. Automatically captured web vitals data&lt;/description&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;update user properties&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;time to see data&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;sidebar closed&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;client_request_failure&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;$ai_span&lt;/name&gt;&lt;description&gt;AI Span (LLM). A generative AI span. Usually a span tracks a unit of work for a trace of generative AI models (LLMs)&lt;/description&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;insight person modal viewed&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;query failed&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;recording list fetched&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;timezone component viewed&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;$rageclick&lt;/name&gt;&lt;description&gt;Rageclick. A user has rapidly and repeatedly clicked in a single place&lt;/description&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;insight created&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;insight viewed&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;user updated&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;insight analyzed&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;definition hovered&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;chat with ai&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;recording list filters changed&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;dashboard loading time&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;toast error&lt;/name&gt;&lt;/event&gt;&lt;/defined_events&gt;\n",
                            "id": null,
                            "name": null,
                            "response_metadata": {},
                            "type": "human"
                        },
                        {
                            "additional_kwargs": {},
                            "content": "\nAnswer the following question as best you can.\nQuestion: What events, properties and/or property values should I use to answer this question \"What's the trend in $pageview events?\"?\n",
                            "id": null,
                            "name": null,
                            "response_metadata": {},
                            "type": "human"
                        },
                        {
                            "additional_kwargs": {},
                            "content": "\nThought: \n",
                            "id": null,
                            "name": null,
                            "response_metadata": {},
                            "type": "human"
                        }
                    ]
                },
                "$lib": "posthog-python",
                "$ip": "192.168.97.1",
                "$plugins_succeeded": ["GeoIP (14)"],
                "$plugins_failed": []
            }
        },
        {
            "createdAt": "2025-01-29T16:04:55.521000+00:00",
            "event": "$ai_span",
            "id": "0194b2ce-f7a2-7a53-9763-9ca9244688e5",
            "properties": {
                "$lib": "posthog-python",
                "$geoip_disable": true,
                "$lib_version": "3.11.0",
                "$ai_latency": 0.0002949237823486328,
                "$ai_span_name": "merge_message_runs",
                "$ai_trace_id": "537b7988-0186-494f-a313-77a5a8f7db26",
                "$ai_input_state": {
                    "messages": [
                        {
                            "additional_kwargs": {},
                            "content": "\n<agent_info>\nYou are an expert product analyst agent specializing in data visualization and trends analysis. Your primary task is to understand a user's data taxonomy and create a plan for building a visualization that answers the user's question. This plan should focus on trends insights, including a series of events, property filters, and values of property filters.\n\nYou have access to the core memory in the &lt;core_memory&gt; tag, which stores information about the user's company and product.\n\nYou have access to the following tools:\nretrieve_event_properties(event_name: str) - \nUse this tool to retrieve the property names of an event that the user has in their taxonomy. You will receive a list of properties containing their name, value type, and description, or a message that properties have not been found.\n\n- **Try other events** if the tool doesn't return any properties.\n- **Prioritize properties that are directly related to the context or objective of the user's query.**\n- **Avoid using ambiguous properties** unless their relevance is explicitly confirmed.\n\nArgs:\n    event_name: The name of the event that you want to retrieve properties for.\n\nretrieve_event_property_values(event_name: str, property_name: str) - \nUse this tool to retrieve the property values for an event that the user has in their taxonomy. Adjust filters to these values. You will receive a list of property values or a message that property values have not been found. Some properties can have many values, so the output will be truncated. Use your judgment to find a proper value.\n\nArgs:\n    event_name: The name of the event that you want to retrieve values for.\n    property_name: The name of the property that you want to retrieve values for.\n\nretrieve_entity_properties(entity: Literal['person', 'session', 'project', 'organization', 'instance']) - \nUse this tool to retrieve property names for a property group (entity) that the user has in their taxonomy. You will receive a list of properties containing their name, value type, and description, or a message that properties have not been found.\n\n- **Infer the property groups from the user's request.**\n- **Try other entities** if the tool doesn't return any properties.\n- **Prioritize properties that are directly related to the context or objective of the user's query.**\n- **Avoid using ambiguous properties** unless their relevance is explicitly confirmed.\n\nArgs:\n    entity: The type of the entity that you want to retrieve properties for.\n\nretrieve_entity_property_values(entity: Literal['person', 'session', 'project', 'organization', 'instance'], property_name: str) - \nUse this tool to retrieve property values for a property name that the user has in their taxonomy. Adjust filters to these values. You will receive a list of property values or a message that property values have not been found. Some properties can have many values, so the output will be truncated. Use your judgment to find a proper value.\n\nArgs:\n    entity: The type of the entity that you want to retrieve properties for.\n    property_name: The name of the property that you want to retrieve values for.\n\nask_user_for_help(question: str) - \nUse this tool to ask a question to the user. Your question must be concise and clear.\n\nArgs:\n    question: The question you want to ask.\n\nfinal_answer(final_response: str) - \nUse this tool to provide the final answer to the user's question.\n\nAnswer in the following format:\n```\nEvents:\n- event 1\n    - math operation: total\n    - property filter 1:\n        - entity\n        - property name\n        - property type\n        - operator\n        - property value\n    - property filter 2... Repeat for each property filter.\n- event 2\n    - math operation: average by `property name`.\n    - property filter 1:\n        - entity\n        - property name\n        - property type\n        - operator\n        - property value\n    - property filter 2... Repeat for each property filter.\n- Repeat for each event.\n\n(if a formula is used)\nFormula:\n`A/B`, where `A` is the first event and `B` is the second event.\n\n(if a breakdown is used)\nBreakdown by:\n- breakdown 1:\n    - entity\n    - property name\n- Repeat for each breakdown.\n```\n\nArgs:\n    final_response: List all events and properties that you want to use to answer the question.\n\n\nUse a JSON blob to specify a tool by providing an action key (tool name) and an action_input key (tool input).\n\nValid &quot;action&quot; values: retrieve_event_properties, retrieve_event_property_values, retrieve_entity_properties, retrieve_entity_property_values, ask_user_for_help, final_answer\n\nProvide only ONE action per $JSON_BLOB, as shown:\n\n```\n{\n  &quot;action&quot;: $TOOL_NAME,\n  &quot;action_input&quot;: $INPUT\n}\n```\n\nFollow this format:\n\nQuestion: input question to answer\nThought: consider previous and subsequent steps\nAction:\n```\n$JSON_BLOB\n```\nObservation: action result\n... (repeat Thought/Action/Observation N times)\nThought: I know what to respond\nAction:\n```\n{\n  &quot;action&quot;: &quot;final_answer&quot;,\n  &quot;action_input&quot;: &quot;Final response to human&quot;\n}\n```\n</agent_info>\n\n<core_memory>\nChat app for hedgehogs.\n</core_memory>\n\n&lt;human_in_the_loop&gt;\nAsk the user for clarification if:\n- The user's question is ambiguous.\n- You can't find matching events or properties.\n- You're unable to build a plan that effectively answers the user's question.\n&lt;/human_in_the_loop&gt;\n\nBelow you will find information on how to correctly discover the taxonomy of the user's data.\n\n<general_knowledge>\nTrends insights enable users to plot data from people, events, and properties however they want. They're useful for finding patterns in data, as well as monitoring users' product to ensure everything is running smoothly. Users can use multiple independent series in a single query to see trends. They can also use a formula to calculate a metric. Each series has its own set of property filters, so you must define them for each series. Trends insights do not require breakdowns or filters by default.\n</general_knowledge>\n\n<events>\nYou’ll be given a list of events in addition to the user’s question. Events are sorted by their popularity with the most popular events at the top of the list. Prioritize popular events. You must always specify events to use. Events always have an associated user’s profile. Assess whether the sequence of events suffices to answer the question before applying property filters or breakdowns.\n</events>\n\n<aggregation>\n**Determine the math aggregation** the user is asking for, such as totals, averages, ratios, or custom formulas. If not specified, choose a reasonable default based on the event type (e.g., total count). By default, the total count should be used. You can aggregate data by events, event's property values, projects, organizations, instances, or users. If you're aggregating by users or groups, there’s no need to check for their existence, as events without required associations will automatically be filtered out.\n\nAvailable math aggregations types for the event count are:\n- total count\n- average\n- minimum\n- maximum\n- median\n- 90th percentile\n- 95th percentile\n- 99th percentile\n- unique users\n- weekly active users\n- daily active users\n- first time for a user\n- unique projects\n- unique organizations\n- unique instances\n\nAvailable math aggregation types for event's property values are:\n- average\n- sum\n- minimum\n- maximum\n- median\n- 90th percentile\n- 95th percentile\n- 99th percentile\n\nAvailable math aggregation types counting number of events completed per user (intensity of usage) are:\n- average\n- minimum\n- maximum\n- median\n- 90th percentile\n- 95th percentile\n- 99th percentile\n\nExamples of using aggregation types:\n- `unique users` to find how many distinct users have logged the event per a day.\n- `average` by the `$session_diration` property to find out what was the average session duration of an event.\n- `99th percentile by users` to find out what was the 99th percentile of the event count by users.\n</aggregation>\n\n<math_formulas>\nIf the math aggregation is more complex or not listed above, use custom formulas to perform mathematical operations like calculating percentages or metrics. If you use a formula, you must use the following syntax: `A/B`, where `A` and `B` are the names of the series. You can combine math aggregations and formulas.\n\nWhen using a formula, you must:\n- Identify and specify **all** events needed to solve the formula.\n- Carefully review the list of available events to find appropriate events for each part of the formula.\n- Ensure that you find events corresponding to both the numerator and denominator in ratio calculations.\n\nExamples of using math formulas:\n- If you want to calculate the percentage of users who have completed onboarding, you need to find and use events similar to `$identify` and `onboarding complete`, so the formula will be `A / B`, where `A` is `onboarding complete` (unique users) and `B` is `$identify` (unique users).\n</math_formulas>\n\n&lt;property_filters&gt;\nUse property filters to provide a narrowed results. Only include property filters when they are essential to directly answer the user’s question. Avoid adding them if the question can be addressed without additional segmentation and always use the minimum set of property filters needed to answer the question. Properties have one of the four types: String, Numeric, Boolean, and DateTime.\n\nIMPORTANT: Do not check if a property is set unless the user explicitly asks for it.\n\nWhen using a property filter, you must:\n- **Prioritize properties directly related to the context or objective of the user's query.** Avoid using properties for identification like IDs because neither the user nor you can retrieve the data. Instead, prioritize filtering based on general properties like `paidCustomer` or `icp_score`.\n- **Ensure that you find both the property group and name.** Property groups must be one of the following: event, person, session, project, organization, instance.\n- After selecting a property, **validate that the property value accurately reflects the intended criteria**.\n- **Find the suitable operator for type** (e.g., `contains`, `is set`). The operators are listed below.\n- If the operator requires a value, use the tool to find the property values. Verify that you can answer the question with given property values. If you can't, try to find a different property or event.\n- You set logical operators to combine multiple properties of a single series: AND or OR.\n\nInfer the property groups from the user's request. If your first guess doesn't yield any results, try to adjust the property group. You must make sure that the property name matches the lookup value, e.g. if the user asks to find data about organizations with the name &quot;ACME&quot;, you must look for the property like &quot;organization name&quot;.\n\nIf the user asks for a specific timeframe, you must not look for a property and include it in the plan, as the next steps will handle it for you.\n\nSupported operators for the String or Numeric types are:\n- equals\n- doesn't equal\n- contains\n- doesn't contain\n- matches regex\n- doesn't match regex\n- is set\n- is not set\n\nSupported operators for the DateTime type are:\n- equals\n- doesn't equal\n- greater than\n- less than\n- is set\n- is not set\n\nSupported operators for the Boolean type are:\n- equals\n- doesn't equal\n- is set\n- is not set\n\nAll operators take a single value except for `equals` and `doesn't equal which can take one or more values.\n&lt;/property_filters&gt;\n\n<breakdowns>\nBreakdowns are used to segment data by property values of maximum three properties. They divide all defined trends series to multiple subseries based on the values of the property. Include breakdowns **only when they are essential to directly answer the user’s question**. You must not add breakdowns if the question can be addressed without additional segmentation. Always use the minimum set of breakdowns needed to answer the question.\n\nWhen using breakdowns, you must:\n- **Identify the property group** and name for each breakdown.\n- **Provide the property name** for each breakdown.\n- **Validate that the property value accurately reflects the intended criteria**.\n\nExamples of using breakdowns:\n- page views trend by country: you need to find a property such as `$geoip_country_code` and set it as a breakdown.\n- number of users who have completed onboarding by an organization: you need to find a property such as `organization name` and set it as a breakdown.\n</breakdowns>\n\n<reminders>\n- Ensure that any properties or breakdowns included are directly relevant to the context and objectives of the user’s question. Avoid unnecessary or unrelated details.\n- Avoid overcomplicating the response with excessive property filters or breakdowns. Focus on the simplest solution that effectively answers the user’s question.\n</reminders>\n---\n\nBegin! Reminder that you must ALWAYS respond with a valid JSON blob of a single action. Use tools if necessary. Respond directly if appropriate. Format is Action:```$JSON_BLOB``` then Observation.\n",
                            "id": null,
                            "name": null,
                            "response_metadata": {},
                            "type": "system"
                        },
                        {
                            "additional_kwargs": {},
                            "content": "\nHere are the event names.\n&lt;defined_events&gt;&lt;event&gt;&lt;name&gt;All Events&lt;/name&gt;&lt;description&gt;All events. This is a wildcard that matches all events.&lt;/description&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;$ai_generation&lt;/name&gt;&lt;description&gt;AI Generation (LLM). A call to an LLM model. Contains the input prompt, output, model used and costs.&lt;/description&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;$ai_trace&lt;/name&gt;&lt;description&gt;AI Trace (LLM). A generative AI trace. Usually a trace tracks a single user interaction and contains one or more AI generation calls&lt;/description&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;$pageview&lt;/name&gt;&lt;description&gt;Pageview. When a user loads (or reloads) a page.&lt;/description&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;query completed&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;$web_vitals&lt;/name&gt;&lt;description&gt;Web vitals. Automatically captured web vitals data&lt;/description&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;update user properties&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;time to see data&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;sidebar closed&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;client_request_failure&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;$ai_span&lt;/name&gt;&lt;description&gt;AI Span (LLM). A generative AI span. Usually a span tracks a unit of work for a trace of generative AI models (LLMs)&lt;/description&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;insight person modal viewed&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;query failed&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;recording list fetched&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;timezone component viewed&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;$rageclick&lt;/name&gt;&lt;description&gt;Rageclick. A user has rapidly and repeatedly clicked in a single place&lt;/description&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;insight created&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;insight viewed&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;user updated&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;insight analyzed&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;definition hovered&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;chat with ai&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;recording list filters changed&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;dashboard loading time&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;toast error&lt;/name&gt;&lt;/event&gt;&lt;/defined_events&gt;\n",
                            "id": null,
                            "name": null,
                            "response_metadata": {},
                            "type": "human"
                        },
                        {
                            "additional_kwargs": {},
                            "content": "\nAnswer the following question as best you can.\nQuestion: What events, properties and/or property values should I use to answer this question \"What's the trend in $pageview events?\"?\n",
                            "id": null,
                            "name": null,
                            "response_metadata": {},
                            "type": "human"
                        },
                        {
                            "additional_kwargs": {},
                            "content": "\nThought: \n",
                            "id": null,
                            "name": null,
                            "response_metadata": {},
                            "type": "human"
                        }
                    ]
                },
                "$ai_parent_id": "011c4c47-ce9c-4a7c-8ecd-e21da08575df",
                "is_first_conversation": true,
                "conversation_id": "0194b2ce-ef92-0000-008e-c6ba293c8c7d",
                "$ai_span_id": "07536b1d-c07d-4daf-bd0c-e86274e17833",
                "$ai_output_state": [
                    {
                        "additional_kwargs": {},
                        "content": "\n<agent_info>\nYou are an expert product analyst agent specializing in data visualization and trends analysis. Your primary task is to understand a user's data taxonomy and create a plan for building a visualization that answers the user's question. This plan should focus on trends insights, including a series of events, property filters, and values of property filters.\n\nYou have access to the core memory in the &lt;core_memory&gt; tag, which stores information about the user's company and product.\n\nYou have access to the following tools:\nretrieve_event_properties(event_name: str) - \nUse this tool to retrieve the property names of an event that the user has in their taxonomy. You will receive a list of properties containing their name, value type, and description, or a message that properties have not been found.\n\n- **Try other events** if the tool doesn't return any properties.\n- **Prioritize properties that are directly related to the context or objective of the user's query.**\n- **Avoid using ambiguous properties** unless their relevance is explicitly confirmed.\n\nArgs:\n    event_name: The name of the event that you want to retrieve properties for.\n\nretrieve_event_property_values(event_name: str, property_name: str) - \nUse this tool to retrieve the property values for an event that the user has in their taxonomy. Adjust filters to these values. You will receive a list of property values or a message that property values have not been found. Some properties can have many values, so the output will be truncated. Use your judgment to find a proper value.\n\nArgs:\n    event_name: The name of the event that you want to retrieve values for.\n    property_name: The name of the property that you want to retrieve values for.\n\nretrieve_entity_properties(entity: Literal['person', 'session', 'project', 'organization', 'instance']) - \nUse this tool to retrieve property names for a property group (entity) that the user has in their taxonomy. You will receive a list of properties containing their name, value type, and description, or a message that properties have not been found.\n\n- **Infer the property groups from the user's request.**\n- **Try other entities** if the tool doesn't return any properties.\n- **Prioritize properties that are directly related to the context or objective of the user's query.**\n- **Avoid using ambiguous properties** unless their relevance is explicitly confirmed.\n\nArgs:\n    entity: The type of the entity that you want to retrieve properties for.\n\nretrieve_entity_property_values(entity: Literal['person', 'session', 'project', 'organization', 'instance'], property_name: str) - \nUse this tool to retrieve property values for a property name that the user has in their taxonomy. Adjust filters to these values. You will receive a list of property values or a message that property values have not been found. Some properties can have many values, so the output will be truncated. Use your judgment to find a proper value.\n\nArgs:\n    entity: The type of the entity that you want to retrieve properties for.\n    property_name: The name of the property that you want to retrieve values for.\n\nask_user_for_help(question: str) - \nUse this tool to ask a question to the user. Your question must be concise and clear.\n\nArgs:\n    question: The question you want to ask.\n\nfinal_answer(final_response: str) - \nUse this tool to provide the final answer to the user's question.\n\nAnswer in the following format:\n```\nEvents:\n- event 1\n    - math operation: total\n    - property filter 1:\n        - entity\n        - property name\n        - property type\n        - operator\n        - property value\n    - property filter 2... Repeat for each property filter.\n- event 2\n    - math operation: average by `property name`.\n    - property filter 1:\n        - entity\n        - property name\n        - property type\n        - operator\n        - property value\n    - property filter 2... Repeat for each property filter.\n- Repeat for each event.\n\n(if a formula is used)\nFormula:\n`A/B`, where `A` is the first event and `B` is the second event.\n\n(if a breakdown is used)\nBreakdown by:\n- breakdown 1:\n    - entity\n    - property name\n- Repeat for each breakdown.\n```\n\nArgs:\n    final_response: List all events and properties that you want to use to answer the question.\n\n\nUse a JSON blob to specify a tool by providing an action key (tool name) and an action_input key (tool input).\n\nValid &quot;action&quot; values: retrieve_event_properties, retrieve_event_property_values, retrieve_entity_properties, retrieve_entity_property_values, ask_user_for_help, final_answer\n\nProvide only ONE action per $JSON_BLOB, as shown:\n\n```\n{\n  &quot;action&quot;: $TOOL_NAME,\n  &quot;action_input&quot;: $INPUT\n}\n```\n\nFollow this format:\n\nQuestion: input question to answer\nThought: consider previous and subsequent steps\nAction:\n```\n$JSON_BLOB\n```\nObservation: action result\n... (repeat Thought/Action/Observation N times)\nThought: I know what to respond\nAction:\n```\n{\n  &quot;action&quot;: &quot;final_answer&quot;,\n  &quot;action_input&quot;: &quot;Final response to human&quot;\n}\n```\n</agent_info>\n\n<core_memory>\nChat app for hedgehogs.\n</core_memory>\n\n&lt;human_in_the_loop&gt;\nAsk the user for clarification if:\n- The user's question is ambiguous.\n- You can't find matching events or properties.\n- You're unable to build a plan that effectively answers the user's question.\n&lt;/human_in_the_loop&gt;\n\nBelow you will find information on how to correctly discover the taxonomy of the user's data.\n\n<general_knowledge>\nTrends insights enable users to plot data from people, events, and properties however they want. They're useful for finding patterns in data, as well as monitoring users' product to ensure everything is running smoothly. Users can use multiple independent series in a single query to see trends. They can also use a formula to calculate a metric. Each series has its own set of property filters, so you must define them for each series. Trends insights do not require breakdowns or filters by default.\n</general_knowledge>\n\n<events>\nYou’ll be given a list of events in addition to the user’s question. Events are sorted by their popularity with the most popular events at the top of the list. Prioritize popular events. You must always specify events to use. Events always have an associated user’s profile. Assess whether the sequence of events suffices to answer the question before applying property filters or breakdowns.\n</events>\n\n<aggregation>\n**Determine the math aggregation** the user is asking for, such as totals, averages, ratios, or custom formulas. If not specified, choose a reasonable default based on the event type (e.g., total count). By default, the total count should be used. You can aggregate data by events, event's property values, projects, organizations, instances, or users. If you're aggregating by users or groups, there’s no need to check for their existence, as events without required associations will automatically be filtered out.\n\nAvailable math aggregations types for the event count are:\n- total count\n- average\n- minimum\n- maximum\n- median\n- 90th percentile\n- 95th percentile\n- 99th percentile\n- unique users\n- weekly active users\n- daily active users\n- first time for a user\n- unique projects\n- unique organizations\n- unique instances\n\nAvailable math aggregation types for event's property values are:\n- average\n- sum\n- minimum\n- maximum\n- median\n- 90th percentile\n- 95th percentile\n- 99th percentile\n\nAvailable math aggregation types counting number of events completed per user (intensity of usage) are:\n- average\n- minimum\n- maximum\n- median\n- 90th percentile\n- 95th percentile\n- 99th percentile\n\nExamples of using aggregation types:\n- `unique users` to find how many distinct users have logged the event per a day.\n- `average` by the `$session_diration` property to find out what was the average session duration of an event.\n- `99th percentile by users` to find out what was the 99th percentile of the event count by users.\n</aggregation>\n\n<math_formulas>\nIf the math aggregation is more complex or not listed above, use custom formulas to perform mathematical operations like calculating percentages or metrics. If you use a formula, you must use the following syntax: `A/B`, where `A` and `B` are the names of the series. You can combine math aggregations and formulas.\n\nWhen using a formula, you must:\n- Identify and specify **all** events needed to solve the formula.\n- Carefully review the list of available events to find appropriate events for each part of the formula.\n- Ensure that you find events corresponding to both the numerator and denominator in ratio calculations.\n\nExamples of using math formulas:\n- If you want to calculate the percentage of users who have completed onboarding, you need to find and use events similar to `$identify` and `onboarding complete`, so the formula will be `A / B`, where `A` is `onboarding complete` (unique users) and `B` is `$identify` (unique users).\n</math_formulas>\n\n&lt;property_filters&gt;\nUse property filters to provide a narrowed results. Only include property filters when they are essential to directly answer the user’s question. Avoid adding them if the question can be addressed without additional segmentation and always use the minimum set of property filters needed to answer the question. Properties have one of the four types: String, Numeric, Boolean, and DateTime.\n\nIMPORTANT: Do not check if a property is set unless the user explicitly asks for it.\n\nWhen using a property filter, you must:\n- **Prioritize properties directly related to the context or objective of the user's query.** Avoid using properties for identification like IDs because neither the user nor you can retrieve the data. Instead, prioritize filtering based on general properties like `paidCustomer` or `icp_score`.\n- **Ensure that you find both the property group and name.** Property groups must be one of the following: event, person, session, project, organization, instance.\n- After selecting a property, **validate that the property value accurately reflects the intended criteria**.\n- **Find the suitable operator for type** (e.g., `contains`, `is set`). The operators are listed below.\n- If the operator requires a value, use the tool to find the property values. Verify that you can answer the question with given property values. If you can't, try to find a different property or event.\n- You set logical operators to combine multiple properties of a single series: AND or OR.\n\nInfer the property groups from the user's request. If your first guess doesn't yield any results, try to adjust the property group. You must make sure that the property name matches the lookup value, e.g. if the user asks to find data about organizations with the name &quot;ACME&quot;, you must look for the property like &quot;organization name&quot;.\n\nIf the user asks for a specific timeframe, you must not look for a property and include it in the plan, as the next steps will handle it for you.\n\nSupported operators for the String or Numeric types are:\n- equals\n- doesn't equal\n- contains\n- doesn't contain\n- matches regex\n- doesn't match regex\n- is set\n- is not set\n\nSupported operators for the DateTime type are:\n- equals\n- doesn't equal\n- greater than\n- less than\n- is set\n- is not set\n\nSupported operators for the Boolean type are:\n- equals\n- doesn't equal\n- is set\n- is not set\n\nAll operators take a single value except for `equals` and `doesn't equal which can take one or more values.\n&lt;/property_filters&gt;\n\n<breakdowns>\nBreakdowns are used to segment data by property values of maximum three properties. They divide all defined trends series to multiple subseries based on the values of the property. Include breakdowns **only when they are essential to directly answer the user’s question**. You must not add breakdowns if the question can be addressed without additional segmentation. Always use the minimum set of breakdowns needed to answer the question.\n\nWhen using breakdowns, you must:\n- **Identify the property group** and name for each breakdown.\n- **Provide the property name** for each breakdown.\n- **Validate that the property value accurately reflects the intended criteria**.\n\nExamples of using breakdowns:\n- page views trend by country: you need to find a property such as `$geoip_country_code` and set it as a breakdown.\n- number of users who have completed onboarding by an organization: you need to find a property such as `organization name` and set it as a breakdown.\n</breakdowns>\n\n<reminders>\n- Ensure that any properties or breakdowns included are directly relevant to the context and objectives of the user’s question. Avoid unnecessary or unrelated details.\n- Avoid overcomplicating the response with excessive property filters or breakdowns. Focus on the simplest solution that effectively answers the user’s question.\n</reminders>\n---\n\nBegin! Reminder that you must ALWAYS respond with a valid JSON blob of a single action. Use tools if necessary. Respond directly if appropriate. Format is Action:```$JSON_BLOB``` then Observation.\n",
                        "id": null,
                        "name": null,
                        "response_metadata": {},
                        "type": "system"
                    },
                    {
                        "additional_kwargs": {},
                        "content": "\nHere are the event names.\n&lt;defined_events&gt;&lt;event&gt;&lt;name&gt;All Events&lt;/name&gt;&lt;description&gt;All events. This is a wildcard that matches all events.&lt;/description&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;$ai_generation&lt;/name&gt;&lt;description&gt;AI Generation (LLM). A call to an LLM model. Contains the input prompt, output, model used and costs.&lt;/description&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;$ai_trace&lt;/name&gt;&lt;description&gt;AI Trace (LLM). A generative AI trace. Usually a trace tracks a single user interaction and contains one or more AI generation calls&lt;/description&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;$pageview&lt;/name&gt;&lt;description&gt;Pageview. When a user loads (or reloads) a page.&lt;/description&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;query completed&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;$web_vitals&lt;/name&gt;&lt;description&gt;Web vitals. Automatically captured web vitals data&lt;/description&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;update user properties&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;time to see data&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;sidebar closed&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;client_request_failure&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;$ai_span&lt;/name&gt;&lt;description&gt;AI Span (LLM). A generative AI span. Usually a span tracks a unit of work for a trace of generative AI models (LLMs)&lt;/description&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;insight person modal viewed&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;query failed&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;recording list fetched&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;timezone component viewed&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;$rageclick&lt;/name&gt;&lt;description&gt;Rageclick. A user has rapidly and repeatedly clicked in a single place&lt;/description&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;insight created&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;insight viewed&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;user updated&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;insight analyzed&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;definition hovered&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;chat with ai&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;recording list filters changed&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;dashboard loading time&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;toast error&lt;/name&gt;&lt;/event&gt;&lt;/defined_events&gt;\n\n\nAnswer the following question as best you can.\nQuestion: What events, properties and/or property values should I use to answer this question \"What's the trend in $pageview events?\"?\n\n\nThought: \n",
                        "example": false,
                        "id": null,
                        "name": null,
                        "response_metadata": {},
                        "type": "human"
                    }
                ],
                "$ip": "192.168.97.1",
                "$plugins_succeeded": ["GeoIP (14)"],
                "$plugins_failed": []
            }
        },
        {
            "createdAt": "2025-01-29T16:04:58.891000+00:00",
            "event": "$ai_generation",
            "id": "0194b2cf-0394-7cce-9be3-dfd13668c33a",
            "properties": {
                "$ai_parent_id": "011c4c47-ce9c-4a7c-8ecd-e21da08575df",
                "$ai_latency": 3.3695061206817627,
                "$geoip_disable": true,
                "$ai_provider": "openai",
                "$ai_span_id": "51517bcf-06f9-4981-a06d-de92ea299697",
                "$ai_http_status": 200,
                "conversation_id": "0194b2ce-ef92-0000-008e-c6ba293c8c7d",
                "$lib_version": "3.11.0",
                "is_first_conversation": true,
                "$ai_span_name": "ChatOpenAI",
                "$ai_model": "gpt-4o",
                "$ai_model_parameters": {
                    "n": 1,
                    "stream": true,
                    "temperature": 0
                },
                "$ai_output_tokens": 78,
                "$ai_output_choices": [
                    {
                        "content": "To answer the question \"What's the trend in $pageview events?\", I need to retrieve the properties associated with the `$pageview` event. This will help in identifying any relevant property filters or breakdowns that can be applied to analyze the trend effectively.\n\nAction:\n```json\n{\n  \"action\": \"retrieve_event_properties\",\n  \"action_input\": \"$pageview\"\n}\n```",
                        "role": "assistant"
                    }
                ],
                "$ai_input": [
                    {
                        "content": "\n<agent_info>\nYou are an expert product analyst agent specializing in data visualization and trends analysis. Your primary task is to understand a user's data taxonomy and create a plan for building a visualization that answers the user's question. This plan should focus on trends insights, including a series of events, property filters, and values of property filters.\n\nYou have access to the core memory in the &lt;core_memory&gt; tag, which stores information about the user's company and product.\n\nYou have access to the following tools:\nretrieve_event_properties(event_name: str) - \nUse this tool to retrieve the property names of an event that the user has in their taxonomy. You will receive a list of properties containing their name, value type, and description, or a message that properties have not been found.\n\n- **Try other events** if the tool doesn't return any properties.\n- **Prioritize properties that are directly related to the context or objective of the user's query.**\n- **Avoid using ambiguous properties** unless their relevance is explicitly confirmed.\n\nArgs:\n    event_name: The name of the event that you want to retrieve properties for.\n\nretrieve_event_property_values(event_name: str, property_name: str) - \nUse this tool to retrieve the property values for an event that the user has in their taxonomy. Adjust filters to these values. You will receive a list of property values or a message that property values have not been found. Some properties can have many values, so the output will be truncated. Use your judgment to find a proper value.\n\nArgs:\n    event_name: The name of the event that you want to retrieve values for.\n    property_name: The name of the property that you want to retrieve values for.\n\nretrieve_entity_properties(entity: Literal['person', 'session', 'project', 'organization', 'instance']) - \nUse this tool to retrieve property names for a property group (entity) that the user has in their taxonomy. You will receive a list of properties containing their name, value type, and description, or a message that properties have not been found.\n\n- **Infer the property groups from the user's request.**\n- **Try other entities** if the tool doesn't return any properties.\n- **Prioritize properties that are directly related to the context or objective of the user's query.**\n- **Avoid using ambiguous properties** unless their relevance is explicitly confirmed.\n\nArgs:\n    entity: The type of the entity that you want to retrieve properties for.\n\nretrieve_entity_property_values(entity: Literal['person', 'session', 'project', 'organization', 'instance'], property_name: str) - \nUse this tool to retrieve property values for a property name that the user has in their taxonomy. Adjust filters to these values. You will receive a list of property values or a message that property values have not been found. Some properties can have many values, so the output will be truncated. Use your judgment to find a proper value.\n\nArgs:\n    entity: The type of the entity that you want to retrieve properties for.\n    property_name: The name of the property that you want to retrieve values for.\n\nask_user_for_help(question: str) - \nUse this tool to ask a question to the user. Your question must be concise and clear.\n\nArgs:\n    question: The question you want to ask.\n\nfinal_answer(final_response: str) - \nUse this tool to provide the final answer to the user's question.\n\nAnswer in the following format:\n```\nEvents:\n- event 1\n    - math operation: total\n    - property filter 1:\n        - entity\n        - property name\n        - property type\n        - operator\n        - property value\n    - property filter 2... Repeat for each property filter.\n- event 2\n    - math operation: average by `property name`.\n    - property filter 1:\n        - entity\n        - property name\n        - property type\n        - operator\n        - property value\n    - property filter 2... Repeat for each property filter.\n- Repeat for each event.\n\n(if a formula is used)\nFormula:\n`A/B`, where `A` is the first event and `B` is the second event.\n\n(if a breakdown is used)\nBreakdown by:\n- breakdown 1:\n    - entity\n    - property name\n- Repeat for each breakdown.\n```\n\nArgs:\n    final_response: List all events and properties that you want to use to answer the question.\n\n\nUse a JSON blob to specify a tool by providing an action key (tool name) and an action_input key (tool input).\n\nValid &quot;action&quot; values: retrieve_event_properties, retrieve_event_property_values, retrieve_entity_properties, retrieve_entity_property_values, ask_user_for_help, final_answer\n\nProvide only ONE action per $JSON_BLOB, as shown:\n\n```\n{\n  &quot;action&quot;: $TOOL_NAME,\n  &quot;action_input&quot;: $INPUT\n}\n```\n\nFollow this format:\n\nQuestion: input question to answer\nThought: consider previous and subsequent steps\nAction:\n```\n$JSON_BLOB\n```\nObservation: action result\n... (repeat Thought/Action/Observation N times)\nThought: I know what to respond\nAction:\n```\n{\n  &quot;action&quot;: &quot;final_answer&quot;,\n  &quot;action_input&quot;: &quot;Final response to human&quot;\n}\n```\n</agent_info>\n\n<core_memory>\nChat app for hedgehogs.\n</core_memory>\n\n&lt;human_in_the_loop&gt;\nAsk the user for clarification if:\n- The user's question is ambiguous.\n- You can't find matching events or properties.\n- You're unable to build a plan that effectively answers the user's question.\n&lt;/human_in_the_loop&gt;\n\nBelow you will find information on how to correctly discover the taxonomy of the user's data.\n\n<general_knowledge>\nTrends insights enable users to plot data from people, events, and properties however they want. They're useful for finding patterns in data, as well as monitoring users' product to ensure everything is running smoothly. Users can use multiple independent series in a single query to see trends. They can also use a formula to calculate a metric. Each series has its own set of property filters, so you must define them for each series. Trends insights do not require breakdowns or filters by default.\n</general_knowledge>\n\n<events>\nYou’ll be given a list of events in addition to the user’s question. Events are sorted by their popularity with the most popular events at the top of the list. Prioritize popular events. You must always specify events to use. Events always have an associated user’s profile. Assess whether the sequence of events suffices to answer the question before applying property filters or breakdowns.\n</events>\n\n<aggregation>\n**Determine the math aggregation** the user is asking for, such as totals, averages, ratios, or custom formulas. If not specified, choose a reasonable default based on the event type (e.g., total count). By default, the total count should be used. You can aggregate data by events, event's property values, projects, organizations, instances, or users. If you're aggregating by users or groups, there’s no need to check for their existence, as events without required associations will automatically be filtered out.\n\nAvailable math aggregations types for the event count are:\n- total count\n- average\n- minimum\n- maximum\n- median\n- 90th percentile\n- 95th percentile\n- 99th percentile\n- unique users\n- weekly active users\n- daily active users\n- first time for a user\n- unique projects\n- unique organizations\n- unique instances\n\nAvailable math aggregation types for event's property values are:\n- average\n- sum\n- minimum\n- maximum\n- median\n- 90th percentile\n- 95th percentile\n- 99th percentile\n\nAvailable math aggregation types counting number of events completed per user (intensity of usage) are:\n- average\n- minimum\n- maximum\n- median\n- 90th percentile\n- 95th percentile\n- 99th percentile\n\nExamples of using aggregation types:\n- `unique users` to find how many distinct users have logged the event per a day.\n- `average` by the `$session_diration` property to find out what was the average session duration of an event.\n- `99th percentile by users` to find out what was the 99th percentile of the event count by users.\n</aggregation>\n\n<math_formulas>\nIf the math aggregation is more complex or not listed above, use custom formulas to perform mathematical operations like calculating percentages or metrics. If you use a formula, you must use the following syntax: `A/B`, where `A` and `B` are the names of the series. You can combine math aggregations and formulas.\n\nWhen using a formula, you must:\n- Identify and specify **all** events needed to solve the formula.\n- Carefully review the list of available events to find appropriate events for each part of the formula.\n- Ensure that you find events corresponding to both the numerator and denominator in ratio calculations.\n\nExamples of using math formulas:\n- If you want to calculate the percentage of users who have completed onboarding, you need to find and use events similar to `$identify` and `onboarding complete`, so the formula will be `A / B`, where `A` is `onboarding complete` (unique users) and `B` is `$identify` (unique users).\n</math_formulas>\n\n&lt;property_filters&gt;\nUse property filters to provide a narrowed results. Only include property filters when they are essential to directly answer the user’s question. Avoid adding them if the question can be addressed without additional segmentation and always use the minimum set of property filters needed to answer the question. Properties have one of the four types: String, Numeric, Boolean, and DateTime.\n\nIMPORTANT: Do not check if a property is set unless the user explicitly asks for it.\n\nWhen using a property filter, you must:\n- **Prioritize properties directly related to the context or objective of the user's query.** Avoid using properties for identification like IDs because neither the user nor you can retrieve the data. Instead, prioritize filtering based on general properties like `paidCustomer` or `icp_score`.\n- **Ensure that you find both the property group and name.** Property groups must be one of the following: event, person, session, project, organization, instance.\n- After selecting a property, **validate that the property value accurately reflects the intended criteria**.\n- **Find the suitable operator for type** (e.g., `contains`, `is set`). The operators are listed below.\n- If the operator requires a value, use the tool to find the property values. Verify that you can answer the question with given property values. If you can't, try to find a different property or event.\n- You set logical operators to combine multiple properties of a single series: AND or OR.\n\nInfer the property groups from the user's request. If your first guess doesn't yield any results, try to adjust the property group. You must make sure that the property name matches the lookup value, e.g. if the user asks to find data about organizations with the name &quot;ACME&quot;, you must look for the property like &quot;organization name&quot;.\n\nIf the user asks for a specific timeframe, you must not look for a property and include it in the plan, as the next steps will handle it for you.\n\nSupported operators for the String or Numeric types are:\n- equals\n- doesn't equal\n- contains\n- doesn't contain\n- matches regex\n- doesn't match regex\n- is set\n- is not set\n\nSupported operators for the DateTime type are:\n- equals\n- doesn't equal\n- greater than\n- less than\n- is set\n- is not set\n\nSupported operators for the Boolean type are:\n- equals\n- doesn't equal\n- is set\n- is not set\n\nAll operators take a single value except for `equals` and `doesn't equal which can take one or more values.\n&lt;/property_filters&gt;\n\n<breakdowns>\nBreakdowns are used to segment data by property values of maximum three properties. They divide all defined trends series to multiple subseries based on the values of the property. Include breakdowns **only when they are essential to directly answer the user’s question**. You must not add breakdowns if the question can be addressed without additional segmentation. Always use the minimum set of breakdowns needed to answer the question.\n\nWhen using breakdowns, you must:\n- **Identify the property group** and name for each breakdown.\n- **Provide the property name** for each breakdown.\n- **Validate that the property value accurately reflects the intended criteria**.\n\nExamples of using breakdowns:\n- page views trend by country: you need to find a property such as `$geoip_country_code` and set it as a breakdown.\n- number of users who have completed onboarding by an organization: you need to find a property such as `organization name` and set it as a breakdown.\n</breakdowns>\n\n<reminders>\n- Ensure that any properties or breakdowns included are directly relevant to the context and objectives of the user’s question. Avoid unnecessary or unrelated details.\n- Avoid overcomplicating the response with excessive property filters or breakdowns. Focus on the simplest solution that effectively answers the user’s question.\n</reminders>\n---\n\nBegin! Reminder that you must ALWAYS respond with a valid JSON blob of a single action. Use tools if necessary. Respond directly if appropriate. Format is Action:```$JSON_BLOB``` then Observation.\n",
                        "role": "system"
                    },
                    {
                        "content": "\nHere are the event names.\n&lt;defined_events&gt;&lt;event&gt;&lt;name&gt;All Events&lt;/name&gt;&lt;description&gt;All events. This is a wildcard that matches all events.&lt;/description&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;$ai_generation&lt;/name&gt;&lt;description&gt;AI Generation (LLM). A call to an LLM model. Contains the input prompt, output, model used and costs.&lt;/description&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;$ai_trace&lt;/name&gt;&lt;description&gt;AI Trace (LLM). A generative AI trace. Usually a trace tracks a single user interaction and contains one or more AI generation calls&lt;/description&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;$pageview&lt;/name&gt;&lt;description&gt;Pageview. When a user loads (or reloads) a page.&lt;/description&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;query completed&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;$web_vitals&lt;/name&gt;&lt;description&gt;Web vitals. Automatically captured web vitals data&lt;/description&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;update user properties&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;time to see data&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;sidebar closed&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;client_request_failure&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;$ai_span&lt;/name&gt;&lt;description&gt;AI Span (LLM). A generative AI span. Usually a span tracks a unit of work for a trace of generative AI models (LLMs)&lt;/description&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;insight person modal viewed&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;query failed&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;recording list fetched&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;timezone component viewed&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;$rageclick&lt;/name&gt;&lt;description&gt;Rageclick. A user has rapidly and repeatedly clicked in a single place&lt;/description&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;insight created&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;insight viewed&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;user updated&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;insight analyzed&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;definition hovered&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;chat with ai&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;recording list filters changed&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;dashboard loading time&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;toast error&lt;/name&gt;&lt;/event&gt;&lt;/defined_events&gt;\n\n\nAnswer the following question as best you can.\nQuestion: What events, properties and/or property values should I use to answer this question \"What's the trend in $pageview events?\"?\n\n\nThought: \n",
                        "role": "user"
                    }
                ],
                "$lib": "posthog-python",
                "$ai_input_tokens": 3636,
                "$ai_trace_id": "537b7988-0186-494f-a313-77a5a8f7db26",
                "$ai_base_url": null,
                "$ip": "192.168.97.1",
                "$plugins_succeeded": ["GeoIP (14)"],
                "$plugins_failed": [],
                "$ai_input_cost_usd": 0.01818,
                "$ai_output_cost_usd": 0.00117,
                "$ai_total_cost_usd": 0.01935,
                "$ai_temperature": 0,
                "$ai_stream": true
            }
        },
        {
            "createdAt": "2025-01-29T16:04:58.894000+00:00",
            "event": "$ai_span",
            "id": "0194b2cf-05a1-76ae-8eb4-376602554537",
            "properties": {
                "is_first_conversation": true,
                "$ai_trace_id": "537b7988-0186-494f-a313-77a5a8f7db26",
                "$ai_span_name": "parse_react_agent_output",
                "$lib": "posthog-python",
                "$ai_input_state": {
                    "additional_kwargs": {},
                    "content": "To answer the question \"What's the trend in $pageview events?\", I need to retrieve the properties associated with the `$pageview` event. This will help in identifying any relevant property filters or breakdowns that can be applied to analyze the trend effectively.\n\nAction:\n```json\n{\n  \"action\": \"retrieve_event_properties\",\n  \"action_input\": \"$pageview\"\n}\n```",
                    "example": false,
                    "id": "run-51517bcf-06f9-4981-a06d-de92ea299697",
                    "invalid_tool_calls": [],
                    "name": null,
                    "response_metadata": {
                        "finish_reason": "stop",
                        "model_name": "gpt-4o-2024-08-06",
                        "system_fingerprint": "fp_50cad350e4"
                    },
                    "tool_calls": [],
                    "type": "ai",
                    "usage_metadata": {
                        "input_token_details": {
                            "audio": 0,
                            "cache_read": 0
                        },
                        "input_tokens": 3636,
                        "output_token_details": {
                            "audio": 0,
                            "reasoning": 0
                        },
                        "output_tokens": 78,
                        "total_tokens": 3714
                    }
                },
                "$ai_span_id": "8fdc7eed-9bc6-492e-9893-d8bdbc4b15f1",
                "$ai_parent_id": "011c4c47-ce9c-4a7c-8ecd-e21da08575df",
                "conversation_id": "0194b2ce-ef92-0000-008e-c6ba293c8c7d",
                "$ai_output_state": {
                    "log": "To answer the question \"What's the trend in $pageview events?\", I need to retrieve the properties associated with the `$pageview` event. This will help in identifying any relevant property filters or breakdowns that can be applied to analyze the trend effectively.\n\nAction:\n```json\n{\n  \"action\": \"retrieve_event_properties\",\n  \"action_input\": \"$pageview\"\n}\n```",
                    "tool": "retrieve_event_properties",
                    "tool_input": "$pageview",
                    "type": "AgentAction"
                },
                "$lib_version": "3.11.0",
                "$geoip_disable": true,
                "$ai_latency": 0.0022678375244140625,
                "$ip": "192.168.97.1",
                "$plugins_succeeded": ["GeoIP (14)"],
                "$plugins_failed": []
            }
        },
        {
            "createdAt": "2025-01-29T16:04:58.894000+00:00",
            "event": "$ai_span",
            "id": "0194b2cf-05a1-7c48-aa27-ad8af818d14b",
            "properties": {
                "is_first_conversation": true,
                "$ai_input_state": {
                    "agent_scratchpad": "",
                    "core_memory": "Chat app for hedgehogs.",
                    "core_memory_instructions": "You have access to the core memory in the <core_memory> tag, which stores information about the user's company and product.",
                    "events": "<defined_events><event><name>All Events</name><description>All events. This is a wildcard that matches all events.</description></event><event><name>$ai_generation</name><description>AI Generation (LLM). A call to an LLM model. Contains the input prompt, output, model used and costs.</description></event><event><name>$ai_trace</name><description>AI Trace (LLM). A generative AI trace. Usually a trace tracks a single user interaction and contains one or more AI generation calls</description></event><event><name>$pageview</name><description>Pageview. When a user loads (or reloads) a page.</description></event><event><name>query completed</name></event><event><name>$web_vitals</name><description>Web vitals. Automatically captured web vitals data</description></event><event><name>update user properties</name></event><event><name>time to see data</name></event><event><name>sidebar closed</name></event><event><name>client_request_failure</name></event><event><name>$ai_span</name><description>AI Span (LLM). A generative AI span. Usually a span tracks a unit of work for a trace of generative AI models (LLMs)</description></event><event><name>insight person modal viewed</name></event><event><name>query failed</name></event><event><name>recording list fetched</name></event><event><name>timezone component viewed</name></event><event><name>$rageclick</name><description>Rageclick. A user has rapidly and repeatedly clicked in a single place</description></event><event><name>insight created</name></event><event><name>insight viewed</name></event><event><name>user updated</name></event><event><name>insight analyzed</name></event><event><name>definition hovered</name></event><event><name>chat with ai</name></event><event><name>recording list filters changed</name></event><event><name>dashboard loading time</name></event><event><name>toast error</name></event></defined_events>",
                    "groups": ["project", "organization", "instance"],
                    "react_format": "You have access to the following tools:\nretrieve_event_properties(event_name: str) - \nUse this tool to retrieve the property names of an event that the user has in their taxonomy. You will receive a list of properties containing their name, value type, and description, or a message that properties have not been found.\n\n- **Try other events** if the tool doesn't return any properties.\n- **Prioritize properties that are directly related to the context or objective of the user's query.**\n- **Avoid using ambiguous properties** unless their relevance is explicitly confirmed.\n\nArgs:\n    event_name: The name of the event that you want to retrieve properties for.\n\nretrieve_event_property_values(event_name: str, property_name: str) - \nUse this tool to retrieve the property values for an event that the user has in their taxonomy. Adjust filters to these values. You will receive a list of property values or a message that property values have not been found. Some properties can have many values, so the output will be truncated. Use your judgment to find a proper value.\n\nArgs:\n    event_name: The name of the event that you want to retrieve values for.\n    property_name: The name of the property that you want to retrieve values for.\n\nretrieve_entity_properties(entity: Literal['person', 'session', 'project', 'organization', 'instance']) - \nUse this tool to retrieve property names for a property group (entity) that the user has in their taxonomy. You will receive a list of properties containing their name, value type, and description, or a message that properties have not been found.\n\n- **Infer the property groups from the user's request.**\n- **Try other entities** if the tool doesn't return any properties.\n- **Prioritize properties that are directly related to the context or objective of the user's query.**\n- **Avoid using ambiguous properties** unless their relevance is explicitly confirmed.\n\nArgs:\n    entity: The type of the entity that you want to retrieve properties for.\n\nretrieve_entity_property_values(entity: Literal['person', 'session', 'project', 'organization', 'instance'], property_name: str) - \nUse this tool to retrieve property values for a property name that the user has in their taxonomy. Adjust filters to these values. You will receive a list of property values or a message that property values have not been found. Some properties can have many values, so the output will be truncated. Use your judgment to find a proper value.\n\nArgs:\n    entity: The type of the entity that you want to retrieve properties for.\n    property_name: The name of the property that you want to retrieve values for.\n\nask_user_for_help(question: str) - \nUse this tool to ask a question to the user. Your question must be concise and clear.\n\nArgs:\n    question: The question you want to ask.\n\nfinal_answer(final_response: str) - \nUse this tool to provide the final answer to the user's question.\n\nAnswer in the following format:\n```\nEvents:\n- event 1\n    - math operation: total\n    - property filter 1:\n        - entity\n        - property name\n        - property type\n        - operator\n        - property value\n    - property filter 2... Repeat for each property filter.\n- event 2\n    - math operation: average by `property name`.\n    - property filter 1:\n        - entity\n        - property name\n        - property type\n        - operator\n        - property value\n    - property filter 2... Repeat for each property filter.\n- Repeat for each event.\n\n(if a formula is used)\nFormula:\n`A/B`, where `A` is the first event and `B` is the second event.\n\n(if a breakdown is used)\nBreakdown by:\n- breakdown 1:\n    - entity\n    - property name\n- Repeat for each breakdown.\n```\n\nArgs:\n    final_response: List all events and properties that you want to use to answer the question.\n\n\nUse a JSON blob to specify a tool by providing an action key (tool name) and an action_input key (tool input).\n\nValid \"action\" values: retrieve_event_properties, retrieve_event_property_values, retrieve_entity_properties, retrieve_entity_property_values, ask_user_for_help, final_answer\n\nProvide only ONE action per $JSON_BLOB, as shown:\n\n```\n{\n  \"action\": $TOOL_NAME,\n  \"action_input\": $INPUT\n}\n```\n\nFollow this format:\n\nQuestion: input question to answer\nThought: consider previous and subsequent steps\nAction:\n```\n$JSON_BLOB\n```\nObservation: action result\n... (repeat Thought/Action/Observation N times)\nThought: I know what to respond\nAction:\n```\n{\n  \"action\": \"final_answer\",\n  \"action_input\": \"Final response to human\"\n}\n```",
                    "react_format_reminder": "Begin! Reminder that you must ALWAYS respond with a valid JSON blob of a single action. Use tools if necessary. Respond directly if appropriate. Format is Action:```$JSON_BLOB``` then Observation.",
                    "react_human_in_the_loop": "<human_in_the_loop>\nAsk the user for clarification if:\n- The user's question is ambiguous.\n- You can't find matching events or properties.\n- You're unable to build a plan that effectively answers the user's question.\n</human_in_the_loop>",
                    "react_property_filters": "<property_filters>\nUse property filters to provide a narrowed results. Only include property filters when they are essential to directly answer the user’s question. Avoid adding them if the question can be addressed without additional segmentation and always use the minimum set of property filters needed to answer the question. Properties have one of the four types: String, Numeric, Boolean, and DateTime.\n\nIMPORTANT: Do not check if a property is set unless the user explicitly asks for it.\n\nWhen using a property filter, you must:\n- **Prioritize properties directly related to the context or objective of the user's query.** Avoid using properties for identification like IDs because neither the user nor you can retrieve the data. Instead, prioritize filtering based on general properties like `paidCustomer` or `icp_score`.\n- **Ensure that you find both the property group and name.** Property groups must be one of the following: event, person, session, project, organization, instance.\n- After selecting a property, **validate that the property value accurately reflects the intended criteria**.\n- **Find the suitable operator for type** (e.g., `contains`, `is set`). The operators are listed below.\n- If the operator requires a value, use the tool to find the property values. Verify that you can answer the question with given property values. If you can't, try to find a different property or event.\n- You set logical operators to combine multiple properties of a single series: AND or OR.\n\nInfer the property groups from the user's request. If your first guess doesn't yield any results, try to adjust the property group. You must make sure that the property name matches the lookup value, e.g. if the user asks to find data about organizations with the name \"ACME\", you must look for the property like \"organization name\".\n\nIf the user asks for a specific timeframe, you must not look for a property and include it in the plan, as the next steps will handle it for you.\n\nSupported operators for the String or Numeric types are:\n- equals\n- doesn't equal\n- contains\n- doesn't contain\n- matches regex\n- doesn't match regex\n- is set\n- is not set\n\nSupported operators for the DateTime type are:\n- equals\n- doesn't equal\n- greater than\n- less than\n- is set\n- is not set\n\nSupported operators for the Boolean type are:\n- equals\n- doesn't equal\n- is set\n- is not set\n\nAll operators take a single value except for `equals` and `doesn't equal which can take one or more values.\n</property_filters>"
                },
                "$geoip_disable": true,
                "conversation_id": "0194b2ce-ef92-0000-008e-c6ba293c8c7d",
                "$lib": "posthog-python",
                "$lib_version": "3.11.0",
                "$ai_output_state": {
                    "log": "To answer the question \"What's the trend in $pageview events?\", I need to retrieve the properties associated with the `$pageview` event. This will help in identifying any relevant property filters or breakdowns that can be applied to analyze the trend effectively.\n\nAction:\n```json\n{\n  \"action\": \"retrieve_event_properties\",\n  \"action_input\": \"$pageview\"\n}\n```",
                    "tool": "retrieve_event_properties",
                    "tool_input": "$pageview",
                    "type": "AgentAction"
                },
                "$ai_parent_id": "263ebe86-4361-449a-895e-b3e6f1694844",
                "$ai_trace_id": "537b7988-0186-494f-a313-77a5a8f7db26",
                "$ai_latency": 3.374281167984009,
                "$ai_span_name": "RunnableSequence",
                "$ai_span_id": "011c4c47-ce9c-4a7c-8ecd-e21da08575df",
                "$ip": "192.168.97.1",
                "$plugins_succeeded": ["GeoIP (14)"],
                "$plugins_failed": []
            }
        },
        {
            "createdAt": "2025-01-29T16:04:58.895000+00:00",
            "event": "$ai_span",
            "id": "0194b2cf-05a1-7db8-89f5-909b69de1295",
            "properties": {
                "conversation_id": "0194b2ce-ef92-0000-008e-c6ba293c8c7d",
                "$lib_version": "3.11.0",
                "is_first_conversation": true,
                "$ai_parent_id": "263ebe86-4361-449a-895e-b3e6f1694844",
                "$lib": "posthog-python",
                "$ai_trace_id": "537b7988-0186-494f-a313-77a5a8f7db26",
                "$ai_input_state": {
                    "intermediate_steps": [
                        [
                            {
                                "log": "To answer the question \"What's the trend in $pageview events?\", I need to retrieve the properties associated with the `$pageview` event. This will help in identifying any relevant property filters or breakdowns that can be applied to analyze the trend effectively.\n\nAction:\n```json\n{\n  \"action\": \"retrieve_event_properties\",\n  \"action_input\": \"$pageview\"\n}\n```",
                                "tool": "retrieve_event_properties",
                                "tool_input": "$pageview",
                                "type": "AgentAction"
                            },
                            null
                        ]
                    ],
                    "memory_collection_messages": null,
                    "memory_updated": null,
                    "messages": null,
                    "plan": null,
                    "resumed": null,
                    "start_id": null
                },
                "$ai_latency": 0.0008161067962646484,
                "$ai_span_name": "ChannelWrite<trends_planner,intermediate_steps,start_id,plan,resumed,memory_updated,memory_collection_messages,messages>",
                "$ai_output_state": {
                    "intermediate_steps": [
                        [
                            {
                                "log": "To answer the question \"What's the trend in $pageview events?\", I need to retrieve the properties associated with the `$pageview` event. This will help in identifying any relevant property filters or breakdowns that can be applied to analyze the trend effectively.\n\nAction:\n```json\n{\n  \"action\": \"retrieve_event_properties\",\n  \"action_input\": \"$pageview\"\n}\n```",
                                "tool": "retrieve_event_properties",
                                "tool_input": "$pageview",
                                "type": "AgentAction"
                            },
                            null
                        ]
                    ],
                    "memory_collection_messages": null,
                    "memory_updated": null,
                    "messages": null,
                    "plan": null,
                    "resumed": null,
                    "start_id": null
                },
                "$geoip_disable": true,
                "$ai_span_id": "14f0d25f-4017-4470-ab94-83477f9bc0c9",
                "$ip": "192.168.97.1",
                "$plugins_succeeded": ["GeoIP (14)"],
                "$plugins_failed": []
            }
        },
        {
            "createdAt": "2025-01-29T16:04:58.896000+00:00",
            "event": "$ai_span",
            "id": "0194b2cf-05a1-73e7-9189-828158fb5ea1",
            "properties": {
                "$lib_version": "3.11.0",
                "$ai_parent_id": "263ebe86-4361-449a-895e-b3e6f1694844",
                "$ai_span_name": "router",
                "is_first_conversation": true,
                "$ai_latency": 0.000029802322387695312,
                "$ai_span_id": "00dc60bd-ff88-44c7-8479-09defa0fc635",
                "$geoip_disable": true,
                "conversation_id": "0194b2ce-ef92-0000-008e-c6ba293c8c7d",
                "$ai_input_state": {
                    "intermediate_steps": [
                        [
                            {
                                "log": "To answer the question \"What's the trend in $pageview events?\", I need to retrieve the properties associated with the `$pageview` event. This will help in identifying any relevant property filters or breakdowns that can be applied to analyze the trend effectively.\n\nAction:\n```json\n{\n  \"action\": \"retrieve_event_properties\",\n  \"action_input\": \"$pageview\"\n}\n```",
                                "tool": "retrieve_event_properties",
                                "tool_input": "$pageview",
                                "type": "AgentAction"
                            },
                            null
                        ]
                    ],
                    "memory_collection_messages": [],
                    "memory_updated": false,
                    "messages": [
                        {
                            "content": "What's the trend in $pageview events?",
                            "id": "2ae74707-ccf8-475f-951c-cb2220917af7",
                            "type": "human"
                        },
                        {
                            "content": "trends",
                            "id": "f10500b7-4d4d-4ad9-972e-3001cfc5e08e",
                            "type": "ai/router"
                        }
                    ],
                    "plan": null,
                    "resumed": null,
                    "start_id": "2ae74707-ccf8-475f-951c-cb2220917af7"
                },
                "$ai_output_state": "tools",
                "$ai_trace_id": "537b7988-0186-494f-a313-77a5a8f7db26",
                "$lib": "posthog-python",
                "$ip": "192.168.97.1",
                "$plugins_succeeded": ["GeoIP (14)"],
                "$plugins_failed": []
            }
        },
        {
            "createdAt": "2025-01-29T16:04:58.896000+00:00",
            "event": "$ai_span",
            "id": "0194b2cf-05a1-7ff7-8baf-91fabea8b474",
            "properties": {
                "$ai_span_name": "trends_planner",
                "$lib": "posthog-python",
                "$lib_version": "3.11.0",
                "$ai_parent_id": "537b7988-0186-494f-a313-77a5a8f7db26",
                "is_first_conversation": true,
                "$geoip_disable": true,
                "$ai_span_id": "263ebe86-4361-449a-895e-b3e6f1694844",
                "$ai_latency": 3.441366672515869,
                "$ai_output_state": {
                    "intermediate_steps": [
                        [
                            {
                                "log": "To answer the question \"What's the trend in $pageview events?\", I need to retrieve the properties associated with the `$pageview` event. This will help in identifying any relevant property filters or breakdowns that can be applied to analyze the trend effectively.\n\nAction:\n```json\n{\n  \"action\": \"retrieve_event_properties\",\n  \"action_input\": \"$pageview\"\n}\n```",
                                "tool": "retrieve_event_properties",
                                "tool_input": "$pageview",
                                "type": "AgentAction"
                            },
                            null
                        ]
                    ],
                    "memory_collection_messages": null,
                    "memory_updated": null,
                    "messages": null,
                    "plan": null,
                    "resumed": null,
                    "start_id": null
                },
                "$ai_trace_id": "537b7988-0186-494f-a313-77a5a8f7db26",
                "$ai_input_state": {
                    "intermediate_steps": null,
                    "memory_collection_messages": [],
                    "memory_updated": false,
                    "messages": [
                        {
                            "content": "What's the trend in $pageview events?",
                            "id": "2ae74707-ccf8-475f-951c-cb2220917af7",
                            "type": "human"
                        },
                        {
                            "content": "trends",
                            "id": "f10500b7-4d4d-4ad9-972e-3001cfc5e08e",
                            "type": "ai/router"
                        }
                    ],
                    "plan": null,
                    "resumed": null,
                    "start_id": "2ae74707-ccf8-475f-951c-cb2220917af7"
                },
                "conversation_id": "0194b2ce-ef92-0000-008e-c6ba293c8c7d",
                "$ip": "192.168.97.1",
                "$plugins_succeeded": ["GeoIP (14)"],
                "$plugins_failed": []
            }
        },
        {
            "createdAt": "2025-01-29T16:04:58.964000+00:00",
            "event": "$ai_span",
            "id": "0194b2cf-05a1-781a-82b0-f0980bbfc037",
            "properties": {
                "$ai_span_id": "01593e7e-0333-495f-bcc0-56271936c82a",
                "$ai_input_state": {
                    "intermediate_steps": [
                        [
                            {
                                "log": "To answer the question \"What's the trend in $pageview events?\", I need to retrieve the properties associated with the `$pageview` event. This will help in identifying any relevant property filters or breakdowns that can be applied to analyze the trend effectively.\n\nAction:\n```json\n{\n  \"action\": \"retrieve_event_properties\",\n  \"action_input\": \"$pageview\"\n}\n```",
                                "tool": "retrieve_event_properties",
                                "tool_input": "$pageview",
                                "type": "AgentAction"
                            },
                            "<properties><Numeric><prop><name>$prev_pageview_duration</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>$prev_pageview_max_scroll_percentage</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>$prev_pageview_last_content_percentage</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>$prev_pageview_max_content_percentage</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>$prev_pageview_last_scroll_percentage</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>$prev_pageview_last_content</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>$prev_pageview_last_scroll</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>$prev_pageview_max_content</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>$prev_pageview_max_scroll</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>$viewport_height</name><description>The height of the user's actual browser window (in pixels).</description></prop><prop><name>$screen_width</name><description>The width of the user's entire screen (in pixels).</description></prop><prop><name>$browser_version</name><description>The version of the browser that was used. Used in combination with Browser.</description></prop><prop><name>$viewport_width</name><description>The width of the user's actual browser window (in pixels).</description></prop><prop><name>$screen_height</name><description>The height of the user's entire screen (in pixels).</description></prop></Numeric><String><prop><name>$current_url</name><description>The URL visited at the time of the event.</description></prop><prop><name>$pathname</name><description>The path of the Current URL, which means everything in the url after the domain.</description></prop><prop><name>$prev_pageview_pathname</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>title</name></prop><prop><name>commit_sha</name></prop><prop><name>$lib_version</name><description>Version of the library used to send the event. Used in combination with Library.</description></prop><prop><name>$lib</name><description>What library was used to send the event.</description></prop><prop><name>$device_type</name><description>The type of device that was used.</description></prop><prop><name>$browser_type</name><description>This is only added when posthog-js config.opt_out_useragent_filter is true.</description></prop><prop><name>$os_version</name><description>The Operating System version.</description></prop><prop><name>$raw_user_agent</name><description>PostHog process information like browser, OS, and device type from the user agent string. This is the raw user agent string.</description></prop><prop><name>$referrer</name><description>URL of where the user came from.</description></prop><prop><name>$browser_language</name><description>Language.</description></prop><prop><name>$feature/artificial-hog</name></prop><prop><name>$lib_custom_api_host</name><description>The custom API host used to send the event.</description></prop><prop><name>$referring_domain</name><description>Domain of where the user came from.</description></prop><prop><name>$last_posthog_reset</name></prop><prop><name>$browser_language_prefix</name><description>Language prefix.</description></prop><prop><name>$host</name><description>The hostname of the Current URL.</description></prop><prop><name>realm</name></prop><prop><name>$feature/llm-observability</name></prop><prop><name>$browser</name><description>Name of the browser the user has used.</description></prop><prop><name>$os</name><description>The operating system of the user.</description></prop><prop><name>$user_id</name><description>This variable will be set to the distinct ID if you've called posthog.identify('distinct id'). If the user is anonymous, it'll be empty.</description></prop><prop><name>distinct_id</name></prop></String><Boolean><prop><name>has_billing_plan</name></prop><prop><name>$is_identified</name><description>When the person was identified</description></prop><prop><name>email_service_available</name></prop><prop><name>slack_service_available</name></prop><prop><name>is_demo_project</name></prop><prop><name>$web_vitals_enabled_server_side</name><description>Whether web vitals was enabled in remote config</description></prop><prop><name>$exception_capture_enabled_server_side</name></prop></Boolean></properties>"
                        ]
                    ],
                    "memory_collection_messages": null,
                    "memory_updated": null,
                    "messages": null,
                    "plan": null,
                    "resumed": null,
                    "start_id": null
                },
                "$lib": "posthog-python",
                "$lib_version": "3.11.0",
                "conversation_id": "0194b2ce-ef92-0000-008e-c6ba293c8c7d",
                "$ai_span_name": "ChannelWrite<trends_planner_tools,intermediate_steps,start_id,plan,resumed,memory_updated,memory_collection_messages,messages>",
                "is_first_conversation": true,
                "$ai_output_state": {
                    "intermediate_steps": [
                        [
                            {
                                "log": "To answer the question \"What's the trend in $pageview events?\", I need to retrieve the properties associated with the `$pageview` event. This will help in identifying any relevant property filters or breakdowns that can be applied to analyze the trend effectively.\n\nAction:\n```json\n{\n  \"action\": \"retrieve_event_properties\",\n  \"action_input\": \"$pageview\"\n}\n```",
                                "tool": "retrieve_event_properties",
                                "tool_input": "$pageview",
                                "type": "AgentAction"
                            },
                            "<properties><Numeric><prop><name>$prev_pageview_duration</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>$prev_pageview_max_scroll_percentage</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>$prev_pageview_last_content_percentage</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>$prev_pageview_max_content_percentage</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>$prev_pageview_last_scroll_percentage</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>$prev_pageview_last_content</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>$prev_pageview_last_scroll</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>$prev_pageview_max_content</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>$prev_pageview_max_scroll</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>$viewport_height</name><description>The height of the user's actual browser window (in pixels).</description></prop><prop><name>$screen_width</name><description>The width of the user's entire screen (in pixels).</description></prop><prop><name>$browser_version</name><description>The version of the browser that was used. Used in combination with Browser.</description></prop><prop><name>$viewport_width</name><description>The width of the user's actual browser window (in pixels).</description></prop><prop><name>$screen_height</name><description>The height of the user's entire screen (in pixels).</description></prop></Numeric><String><prop><name>$current_url</name><description>The URL visited at the time of the event.</description></prop><prop><name>$pathname</name><description>The path of the Current URL, which means everything in the url after the domain.</description></prop><prop><name>$prev_pageview_pathname</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>title</name></prop><prop><name>commit_sha</name></prop><prop><name>$lib_version</name><description>Version of the library used to send the event. Used in combination with Library.</description></prop><prop><name>$lib</name><description>What library was used to send the event.</description></prop><prop><name>$device_type</name><description>The type of device that was used.</description></prop><prop><name>$browser_type</name><description>This is only added when posthog-js config.opt_out_useragent_filter is true.</description></prop><prop><name>$os_version</name><description>The Operating System version.</description></prop><prop><name>$raw_user_agent</name><description>PostHog process information like browser, OS, and device type from the user agent string. This is the raw user agent string.</description></prop><prop><name>$referrer</name><description>URL of where the user came from.</description></prop><prop><name>$browser_language</name><description>Language.</description></prop><prop><name>$feature/artificial-hog</name></prop><prop><name>$lib_custom_api_host</name><description>The custom API host used to send the event.</description></prop><prop><name>$referring_domain</name><description>Domain of where the user came from.</description></prop><prop><name>$last_posthog_reset</name></prop><prop><name>$browser_language_prefix</name><description>Language prefix.</description></prop><prop><name>$host</name><description>The hostname of the Current URL.</description></prop><prop><name>realm</name></prop><prop><name>$feature/llm-observability</name></prop><prop><name>$browser</name><description>Name of the browser the user has used.</description></prop><prop><name>$os</name><description>The operating system of the user.</description></prop><prop><name>$user_id</name><description>This variable will be set to the distinct ID if you've called posthog.identify('distinct id'). If the user is anonymous, it'll be empty.</description></prop><prop><name>distinct_id</name></prop></String><Boolean><prop><name>has_billing_plan</name></prop><prop><name>$is_identified</name><description>When the person was identified</description></prop><prop><name>email_service_available</name></prop><prop><name>slack_service_available</name></prop><prop><name>is_demo_project</name></prop><prop><name>$web_vitals_enabled_server_side</name><description>Whether web vitals was enabled in remote config</description></prop><prop><name>$exception_capture_enabled_server_side</name></prop></Boolean></properties>"
                        ]
                    ],
                    "memory_collection_messages": null,
                    "memory_updated": null,
                    "messages": null,
                    "plan": null,
                    "resumed": null,
                    "start_id": null
                },
                "$ai_parent_id": "fc0b0491-57fb-4a1d-a409-ea3c65b31452",
                "$ai_latency": 0.0003178119659423828,
                "$geoip_disable": true,
                "$ai_trace_id": "537b7988-0186-494f-a313-77a5a8f7db26",
                "$ip": "192.168.97.1",
                "$plugins_succeeded": ["GeoIP (14)"],
                "$plugins_failed": []
            }
        },
        {
            "createdAt": "2025-01-29T16:04:58.965000+00:00",
            "event": "$ai_span",
            "id": "0194b2cf-05a1-7cef-92f5-7ce1f3c713f4",
            "properties": {
                "$ai_span_name": "trends_planner_tools",
                "$ai_span_id": "fc0b0491-57fb-4a1d-a409-ea3c65b31452",
                "conversation_id": "0194b2ce-ef92-0000-008e-c6ba293c8c7d",
                "$ai_output_state": {
                    "intermediate_steps": [
                        [
                            {
                                "log": "To answer the question \"What's the trend in $pageview events?\", I need to retrieve the properties associated with the `$pageview` event. This will help in identifying any relevant property filters or breakdowns that can be applied to analyze the trend effectively.\n\nAction:\n```json\n{\n  \"action\": \"retrieve_event_properties\",\n  \"action_input\": \"$pageview\"\n}\n```",
                                "tool": "retrieve_event_properties",
                                "tool_input": "$pageview",
                                "type": "AgentAction"
                            },
                            "<properties><Numeric><prop><name>$prev_pageview_duration</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>$prev_pageview_max_scroll_percentage</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>$prev_pageview_last_content_percentage</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>$prev_pageview_max_content_percentage</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>$prev_pageview_last_scroll_percentage</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>$prev_pageview_last_content</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>$prev_pageview_last_scroll</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>$prev_pageview_max_content</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>$prev_pageview_max_scroll</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>$viewport_height</name><description>The height of the user's actual browser window (in pixels).</description></prop><prop><name>$screen_width</name><description>The width of the user's entire screen (in pixels).</description></prop><prop><name>$browser_version</name><description>The version of the browser that was used. Used in combination with Browser.</description></prop><prop><name>$viewport_width</name><description>The width of the user's actual browser window (in pixels).</description></prop><prop><name>$screen_height</name><description>The height of the user's entire screen (in pixels).</description></prop></Numeric><String><prop><name>$current_url</name><description>The URL visited at the time of the event.</description></prop><prop><name>$pathname</name><description>The path of the Current URL, which means everything in the url after the domain.</description></prop><prop><name>$prev_pageview_pathname</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>title</name></prop><prop><name>commit_sha</name></prop><prop><name>$lib_version</name><description>Version of the library used to send the event. Used in combination with Library.</description></prop><prop><name>$lib</name><description>What library was used to send the event.</description></prop><prop><name>$device_type</name><description>The type of device that was used.</description></prop><prop><name>$browser_type</name><description>This is only added when posthog-js config.opt_out_useragent_filter is true.</description></prop><prop><name>$os_version</name><description>The Operating System version.</description></prop><prop><name>$raw_user_agent</name><description>PostHog process information like browser, OS, and device type from the user agent string. This is the raw user agent string.</description></prop><prop><name>$referrer</name><description>URL of where the user came from.</description></prop><prop><name>$browser_language</name><description>Language.</description></prop><prop><name>$feature/artificial-hog</name></prop><prop><name>$lib_custom_api_host</name><description>The custom API host used to send the event.</description></prop><prop><name>$referring_domain</name><description>Domain of where the user came from.</description></prop><prop><name>$last_posthog_reset</name></prop><prop><name>$browser_language_prefix</name><description>Language prefix.</description></prop><prop><name>$host</name><description>The hostname of the Current URL.</description></prop><prop><name>realm</name></prop><prop><name>$feature/llm-observability</name></prop><prop><name>$browser</name><description>Name of the browser the user has used.</description></prop><prop><name>$os</name><description>The operating system of the user.</description></prop><prop><name>$user_id</name><description>This variable will be set to the distinct ID if you've called posthog.identify('distinct id'). If the user is anonymous, it'll be empty.</description></prop><prop><name>distinct_id</name></prop></String><Boolean><prop><name>has_billing_plan</name></prop><prop><name>$is_identified</name><description>When the person was identified</description></prop><prop><name>email_service_available</name></prop><prop><name>slack_service_available</name></prop><prop><name>is_demo_project</name></prop><prop><name>$web_vitals_enabled_server_side</name><description>Whether web vitals was enabled in remote config</description></prop><prop><name>$exception_capture_enabled_server_side</name></prop></Boolean></properties>"
                        ]
                    ],
                    "memory_collection_messages": null,
                    "memory_updated": null,
                    "messages": null,
                    "plan": null,
                    "resumed": null,
                    "start_id": null
                },
                "$lib_version": "3.11.0",
                "$ai_trace_id": "537b7988-0186-494f-a313-77a5a8f7db26",
                "$lib": "posthog-python",
                "is_first_conversation": true,
                "$ai_parent_id": "537b7988-0186-494f-a313-77a5a8f7db26",
                "$ai_input_state": {
                    "intermediate_steps": [
                        [
                            {
                                "log": "To answer the question \"What's the trend in $pageview events?\", I need to retrieve the properties associated with the `$pageview` event. This will help in identifying any relevant property filters or breakdowns that can be applied to analyze the trend effectively.\n\nAction:\n```json\n{\n  \"action\": \"retrieve_event_properties\",\n  \"action_input\": \"$pageview\"\n}\n```",
                                "tool": "retrieve_event_properties",
                                "tool_input": "$pageview",
                                "type": "AgentAction"
                            },
                            null
                        ]
                    ],
                    "memory_collection_messages": [],
                    "memory_updated": false,
                    "messages": [
                        {
                            "content": "What's the trend in $pageview events?",
                            "id": "2ae74707-ccf8-475f-951c-cb2220917af7",
                            "type": "human"
                        },
                        {
                            "content": "trends",
                            "id": "f10500b7-4d4d-4ad9-972e-3001cfc5e08e",
                            "type": "ai/router"
                        }
                    ],
                    "plan": null,
                    "resumed": null,
                    "start_id": "2ae74707-ccf8-475f-951c-cb2220917af7"
                },
                "$geoip_disable": true,
                "$ai_latency": 0.0592350959777832,
                "$ip": "192.168.97.1",
                "$plugins_succeeded": ["GeoIP (14)"],
                "$plugins_failed": []
            }
        },
        {
            "createdAt": "2025-01-29T16:04:58.965000+00:00",
            "event": "$ai_span",
            "id": "0194b2cf-05a1-751d-81d0-28e074a3396e",
            "properties": {
                "$geoip_disable": true,
                "conversation_id": "0194b2ce-ef92-0000-008e-c6ba293c8c7d",
                "is_first_conversation": true,
                "$ai_span_id": "6c77b7cb-ed6c-4433-a30d-dc6e9e0aecca",
                "$ai_latency": 0.000011920928955078123,
                "$lib": "posthog-python",
                "$ai_output_state": "continue",
                "$ai_input_state": {
                    "intermediate_steps": [
                        [
                            {
                                "log": "To answer the question \"What's the trend in $pageview events?\", I need to retrieve the properties associated with the `$pageview` event. This will help in identifying any relevant property filters or breakdowns that can be applied to analyze the trend effectively.\n\nAction:\n```json\n{\n  \"action\": \"retrieve_event_properties\",\n  \"action_input\": \"$pageview\"\n}\n```",
                                "tool": "retrieve_event_properties",
                                "tool_input": "$pageview",
                                "type": "AgentAction"
                            },
                            "<properties><Numeric><prop><name>$prev_pageview_duration</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>$prev_pageview_max_scroll_percentage</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>$prev_pageview_last_content_percentage</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>$prev_pageview_max_content_percentage</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>$prev_pageview_last_scroll_percentage</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>$prev_pageview_last_content</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>$prev_pageview_last_scroll</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>$prev_pageview_max_content</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>$prev_pageview_max_scroll</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>$viewport_height</name><description>The height of the user's actual browser window (in pixels).</description></prop><prop><name>$screen_width</name><description>The width of the user's entire screen (in pixels).</description></prop><prop><name>$browser_version</name><description>The version of the browser that was used. Used in combination with Browser.</description></prop><prop><name>$viewport_width</name><description>The width of the user's actual browser window (in pixels).</description></prop><prop><name>$screen_height</name><description>The height of the user's entire screen (in pixels).</description></prop></Numeric><String><prop><name>$current_url</name><description>The URL visited at the time of the event.</description></prop><prop><name>$pathname</name><description>The path of the Current URL, which means everything in the url after the domain.</description></prop><prop><name>$prev_pageview_pathname</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>title</name></prop><prop><name>commit_sha</name></prop><prop><name>$lib_version</name><description>Version of the library used to send the event. Used in combination with Library.</description></prop><prop><name>$lib</name><description>What library was used to send the event.</description></prop><prop><name>$device_type</name><description>The type of device that was used.</description></prop><prop><name>$browser_type</name><description>This is only added when posthog-js config.opt_out_useragent_filter is true.</description></prop><prop><name>$os_version</name><description>The Operating System version.</description></prop><prop><name>$raw_user_agent</name><description>PostHog process information like browser, OS, and device type from the user agent string. This is the raw user agent string.</description></prop><prop><name>$referrer</name><description>URL of where the user came from.</description></prop><prop><name>$browser_language</name><description>Language.</description></prop><prop><name>$feature/artificial-hog</name></prop><prop><name>$lib_custom_api_host</name><description>The custom API host used to send the event.</description></prop><prop><name>$referring_domain</name><description>Domain of where the user came from.</description></prop><prop><name>$last_posthog_reset</name></prop><prop><name>$browser_language_prefix</name><description>Language prefix.</description></prop><prop><name>$host</name><description>The hostname of the Current URL.</description></prop><prop><name>realm</name></prop><prop><name>$feature/llm-observability</name></prop><prop><name>$browser</name><description>Name of the browser the user has used.</description></prop><prop><name>$os</name><description>The operating system of the user.</description></prop><prop><name>$user_id</name><description>This variable will be set to the distinct ID if you've called posthog.identify('distinct id'). If the user is anonymous, it'll be empty.</description></prop><prop><name>distinct_id</name></prop></String><Boolean><prop><name>has_billing_plan</name></prop><prop><name>$is_identified</name><description>When the person was identified</description></prop><prop><name>email_service_available</name></prop><prop><name>slack_service_available</name></prop><prop><name>is_demo_project</name></prop><prop><name>$web_vitals_enabled_server_side</name><description>Whether web vitals was enabled in remote config</description></prop><prop><name>$exception_capture_enabled_server_side</name></prop></Boolean></properties>"
                        ]
                    ],
                    "memory_collection_messages": [],
                    "memory_updated": false,
                    "messages": [
                        {
                            "content": "What's the trend in $pageview events?",
                            "id": "2ae74707-ccf8-475f-951c-cb2220917af7",
                            "type": "human"
                        },
                        {
                            "content": "trends",
                            "id": "f10500b7-4d4d-4ad9-972e-3001cfc5e08e",
                            "type": "ai/router"
                        }
                    ],
                    "plan": null,
                    "resumed": null,
                    "start_id": "2ae74707-ccf8-475f-951c-cb2220917af7"
                },
                "$ai_span_name": "router",
                "$ai_parent_id": "fc0b0491-57fb-4a1d-a409-ea3c65b31452",
                "$ai_trace_id": "537b7988-0186-494f-a313-77a5a8f7db26",
                "$lib_version": "3.11.0",
                "$ip": "192.168.97.1",
                "$plugins_succeeded": ["GeoIP (14)"],
                "$plugins_failed": []
            }
        },
        {
            "createdAt": "2025-01-29T16:04:59.026000+00:00",
            "event": "$ai_span",
            "id": "0194b2cf-05a2-7f4e-9664-cefa99a95560",
            "properties": {
                "$lib": "posthog-python",
                "$ai_output_state": [
                    {
                        "additional_kwargs": {},
                        "content": "\n<agent_info>\nYou are an expert product analyst agent specializing in data visualization and trends analysis. Your primary task is to understand a user's data taxonomy and create a plan for building a visualization that answers the user's question. This plan should focus on trends insights, including a series of events, property filters, and values of property filters.\n\nYou have access to the core memory in the &lt;core_memory&gt; tag, which stores information about the user's company and product.\n\nYou have access to the following tools:\nretrieve_event_properties(event_name: str) - \nUse this tool to retrieve the property names of an event that the user has in their taxonomy. You will receive a list of properties containing their name, value type, and description, or a message that properties have not been found.\n\n- **Try other events** if the tool doesn't return any properties.\n- **Prioritize properties that are directly related to the context or objective of the user's query.**\n- **Avoid using ambiguous properties** unless their relevance is explicitly confirmed.\n\nArgs:\n    event_name: The name of the event that you want to retrieve properties for.\n\nretrieve_event_property_values(event_name: str, property_name: str) - \nUse this tool to retrieve the property values for an event that the user has in their taxonomy. Adjust filters to these values. You will receive a list of property values or a message that property values have not been found. Some properties can have many values, so the output will be truncated. Use your judgment to find a proper value.\n\nArgs:\n    event_name: The name of the event that you want to retrieve values for.\n    property_name: The name of the property that you want to retrieve values for.\n\nretrieve_entity_properties(entity: Literal['person', 'session', 'project', 'organization', 'instance']) - \nUse this tool to retrieve property names for a property group (entity) that the user has in their taxonomy. You will receive a list of properties containing their name, value type, and description, or a message that properties have not been found.\n\n- **Infer the property groups from the user's request.**\n- **Try other entities** if the tool doesn't return any properties.\n- **Prioritize properties that are directly related to the context or objective of the user's query.**\n- **Avoid using ambiguous properties** unless their relevance is explicitly confirmed.\n\nArgs:\n    entity: The type of the entity that you want to retrieve properties for.\n\nretrieve_entity_property_values(entity: Literal['person', 'session', 'project', 'organization', 'instance'], property_name: str) - \nUse this tool to retrieve property values for a property name that the user has in their taxonomy. Adjust filters to these values. You will receive a list of property values or a message that property values have not been found. Some properties can have many values, so the output will be truncated. Use your judgment to find a proper value.\n\nArgs:\n    entity: The type of the entity that you want to retrieve properties for.\n    property_name: The name of the property that you want to retrieve values for.\n\nask_user_for_help(question: str) - \nUse this tool to ask a question to the user. Your question must be concise and clear.\n\nArgs:\n    question: The question you want to ask.\n\nfinal_answer(final_response: str) - \nUse this tool to provide the final answer to the user's question.\n\nAnswer in the following format:\n```\nEvents:\n- event 1\n    - math operation: total\n    - property filter 1:\n        - entity\n        - property name\n        - property type\n        - operator\n        - property value\n    - property filter 2... Repeat for each property filter.\n- event 2\n    - math operation: average by `property name`.\n    - property filter 1:\n        - entity\n        - property name\n        - property type\n        - operator\n        - property value\n    - property filter 2... Repeat for each property filter.\n- Repeat for each event.\n\n(if a formula is used)\nFormula:\n`A/B`, where `A` is the first event and `B` is the second event.\n\n(if a breakdown is used)\nBreakdown by:\n- breakdown 1:\n    - entity\n    - property name\n- Repeat for each breakdown.\n```\n\nArgs:\n    final_response: List all events and properties that you want to use to answer the question.\n\n\nUse a JSON blob to specify a tool by providing an action key (tool name) and an action_input key (tool input).\n\nValid &quot;action&quot; values: retrieve_event_properties, retrieve_event_property_values, retrieve_entity_properties, retrieve_entity_property_values, ask_user_for_help, final_answer\n\nProvide only ONE action per $JSON_BLOB, as shown:\n\n```\n{\n  &quot;action&quot;: $TOOL_NAME,\n  &quot;action_input&quot;: $INPUT\n}\n```\n\nFollow this format:\n\nQuestion: input question to answer\nThought: consider previous and subsequent steps\nAction:\n```\n$JSON_BLOB\n```\nObservation: action result\n... (repeat Thought/Action/Observation N times)\nThought: I know what to respond\nAction:\n```\n{\n  &quot;action&quot;: &quot;final_answer&quot;,\n  &quot;action_input&quot;: &quot;Final response to human&quot;\n}\n```\n</agent_info>\n\n<core_memory>\nChat app for hedgehogs.\n</core_memory>\n\n&lt;human_in_the_loop&gt;\nAsk the user for clarification if:\n- The user's question is ambiguous.\n- You can't find matching events or properties.\n- You're unable to build a plan that effectively answers the user's question.\n&lt;/human_in_the_loop&gt;\n\nBelow you will find information on how to correctly discover the taxonomy of the user's data.\n\n<general_knowledge>\nTrends insights enable users to plot data from people, events, and properties however they want. They're useful for finding patterns in data, as well as monitoring users' product to ensure everything is running smoothly. Users can use multiple independent series in a single query to see trends. They can also use a formula to calculate a metric. Each series has its own set of property filters, so you must define them for each series. Trends insights do not require breakdowns or filters by default.\n</general_knowledge>\n\n<events>\nYou’ll be given a list of events in addition to the user’s question. Events are sorted by their popularity with the most popular events at the top of the list. Prioritize popular events. You must always specify events to use. Events always have an associated user’s profile. Assess whether the sequence of events suffices to answer the question before applying property filters or breakdowns.\n</events>\n\n<aggregation>\n**Determine the math aggregation** the user is asking for, such as totals, averages, ratios, or custom formulas. If not specified, choose a reasonable default based on the event type (e.g., total count). By default, the total count should be used. You can aggregate data by events, event's property values, projects, organizations, instances, or users. If you're aggregating by users or groups, there’s no need to check for their existence, as events without required associations will automatically be filtered out.\n\nAvailable math aggregations types for the event count are:\n- total count\n- average\n- minimum\n- maximum\n- median\n- 90th percentile\n- 95th percentile\n- 99th percentile\n- unique users\n- weekly active users\n- daily active users\n- first time for a user\n- unique projects\n- unique organizations\n- unique instances\n\nAvailable math aggregation types for event's property values are:\n- average\n- sum\n- minimum\n- maximum\n- median\n- 90th percentile\n- 95th percentile\n- 99th percentile\n\nAvailable math aggregation types counting number of events completed per user (intensity of usage) are:\n- average\n- minimum\n- maximum\n- median\n- 90th percentile\n- 95th percentile\n- 99th percentile\n\nExamples of using aggregation types:\n- `unique users` to find how many distinct users have logged the event per a day.\n- `average` by the `$session_diration` property to find out what was the average session duration of an event.\n- `99th percentile by users` to find out what was the 99th percentile of the event count by users.\n</aggregation>\n\n<math_formulas>\nIf the math aggregation is more complex or not listed above, use custom formulas to perform mathematical operations like calculating percentages or metrics. If you use a formula, you must use the following syntax: `A/B`, where `A` and `B` are the names of the series. You can combine math aggregations and formulas.\n\nWhen using a formula, you must:\n- Identify and specify **all** events needed to solve the formula.\n- Carefully review the list of available events to find appropriate events for each part of the formula.\n- Ensure that you find events corresponding to both the numerator and denominator in ratio calculations.\n\nExamples of using math formulas:\n- If you want to calculate the percentage of users who have completed onboarding, you need to find and use events similar to `$identify` and `onboarding complete`, so the formula will be `A / B`, where `A` is `onboarding complete` (unique users) and `B` is `$identify` (unique users).\n</math_formulas>\n\n&lt;property_filters&gt;\nUse property filters to provide a narrowed results. Only include property filters when they are essential to directly answer the user’s question. Avoid adding them if the question can be addressed without additional segmentation and always use the minimum set of property filters needed to answer the question. Properties have one of the four types: String, Numeric, Boolean, and DateTime.\n\nIMPORTANT: Do not check if a property is set unless the user explicitly asks for it.\n\nWhen using a property filter, you must:\n- **Prioritize properties directly related to the context or objective of the user's query.** Avoid using properties for identification like IDs because neither the user nor you can retrieve the data. Instead, prioritize filtering based on general properties like `paidCustomer` or `icp_score`.\n- **Ensure that you find both the property group and name.** Property groups must be one of the following: event, person, session, project, organization, instance.\n- After selecting a property, **validate that the property value accurately reflects the intended criteria**.\n- **Find the suitable operator for type** (e.g., `contains`, `is set`). The operators are listed below.\n- If the operator requires a value, use the tool to find the property values. Verify that you can answer the question with given property values. If you can't, try to find a different property or event.\n- You set logical operators to combine multiple properties of a single series: AND or OR.\n\nInfer the property groups from the user's request. If your first guess doesn't yield any results, try to adjust the property group. You must make sure that the property name matches the lookup value, e.g. if the user asks to find data about organizations with the name &quot;ACME&quot;, you must look for the property like &quot;organization name&quot;.\n\nIf the user asks for a specific timeframe, you must not look for a property and include it in the plan, as the next steps will handle it for you.\n\nSupported operators for the String or Numeric types are:\n- equals\n- doesn't equal\n- contains\n- doesn't contain\n- matches regex\n- doesn't match regex\n- is set\n- is not set\n\nSupported operators for the DateTime type are:\n- equals\n- doesn't equal\n- greater than\n- less than\n- is set\n- is not set\n\nSupported operators for the Boolean type are:\n- equals\n- doesn't equal\n- is set\n- is not set\n\nAll operators take a single value except for `equals` and `doesn't equal which can take one or more values.\n&lt;/property_filters&gt;\n\n<breakdowns>\nBreakdowns are used to segment data by property values of maximum three properties. They divide all defined trends series to multiple subseries based on the values of the property. Include breakdowns **only when they are essential to directly answer the user’s question**. You must not add breakdowns if the question can be addressed without additional segmentation. Always use the minimum set of breakdowns needed to answer the question.\n\nWhen using breakdowns, you must:\n- **Identify the property group** and name for each breakdown.\n- **Provide the property name** for each breakdown.\n- **Validate that the property value accurately reflects the intended criteria**.\n\nExamples of using breakdowns:\n- page views trend by country: you need to find a property such as `$geoip_country_code` and set it as a breakdown.\n- number of users who have completed onboarding by an organization: you need to find a property such as `organization name` and set it as a breakdown.\n</breakdowns>\n\n<reminders>\n- Ensure that any properties or breakdowns included are directly relevant to the context and objectives of the user’s question. Avoid unnecessary or unrelated details.\n- Avoid overcomplicating the response with excessive property filters or breakdowns. Focus on the simplest solution that effectively answers the user’s question.\n</reminders>\n---\n\nBegin! Reminder that you must ALWAYS respond with a valid JSON blob of a single action. Use tools if necessary. Respond directly if appropriate. Format is Action:```$JSON_BLOB``` then Observation.\n",
                        "id": null,
                        "name": null,
                        "response_metadata": {},
                        "type": "system"
                    },
                    {
                        "additional_kwargs": {},
                        "content": "\nHere are the event names.\n&lt;defined_events&gt;&lt;event&gt;&lt;name&gt;All Events&lt;/name&gt;&lt;description&gt;All events. This is a wildcard that matches all events.&lt;/description&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;$ai_generation&lt;/name&gt;&lt;description&gt;AI Generation (LLM). A call to an LLM model. Contains the input prompt, output, model used and costs.&lt;/description&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;$ai_trace&lt;/name&gt;&lt;description&gt;AI Trace (LLM). A generative AI trace. Usually a trace tracks a single user interaction and contains one or more AI generation calls&lt;/description&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;$pageview&lt;/name&gt;&lt;description&gt;Pageview. When a user loads (or reloads) a page.&lt;/description&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;query completed&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;$web_vitals&lt;/name&gt;&lt;description&gt;Web vitals. Automatically captured web vitals data&lt;/description&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;update user properties&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;time to see data&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;sidebar closed&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;client_request_failure&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;$ai_span&lt;/name&gt;&lt;description&gt;AI Span (LLM). A generative AI span. Usually a span tracks a unit of work for a trace of generative AI models (LLMs)&lt;/description&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;insight person modal viewed&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;query failed&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;recording list fetched&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;timezone component viewed&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;$rageclick&lt;/name&gt;&lt;description&gt;Rageclick. A user has rapidly and repeatedly clicked in a single place&lt;/description&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;insight created&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;insight viewed&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;user updated&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;insight analyzed&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;definition hovered&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;chat with ai&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;recording list filters changed&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;dashboard loading time&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;toast error&lt;/name&gt;&lt;/event&gt;&lt;/defined_events&gt;\n\n\nAnswer the following question as best you can.\nQuestion: What events, properties and/or property values should I use to answer this question \"What's the trend in $pageview events?\"?\n\n\nThought: To answer the question &quot;What's the trend in $pageview events?&quot;, I need to retrieve the properties associated with the `$pageview` event. This will help in identifying any relevant property filters or breakdowns that can be applied to analyze the trend effectively.\n\nAction:\n```json\n{\n  &quot;action&quot;: &quot;retrieve_event_properties&quot;,\n  &quot;action_input&quot;: &quot;$pageview&quot;\n}\n```\nObservation: &lt;properties&gt;&lt;Numeric&gt;&lt;prop&gt;&lt;name&gt;$prev_pageview_duration&lt;/name&gt;&lt;description&gt;posthog-js adds these to the page leave event, they are used in web analytics calculations&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$prev_pageview_max_scroll_percentage&lt;/name&gt;&lt;description&gt;posthog-js adds these to the page leave event, they are used in web analytics calculations&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$prev_pageview_last_content_percentage&lt;/name&gt;&lt;description&gt;posthog-js adds these to the page leave event, they are used in web analytics calculations&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$prev_pageview_max_content_percentage&lt;/name&gt;&lt;description&gt;posthog-js adds these to the page leave event, they are used in web analytics calculations&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$prev_pageview_last_scroll_percentage&lt;/name&gt;&lt;description&gt;posthog-js adds these to the page leave event, they are used in web analytics calculations&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$prev_pageview_last_content&lt;/name&gt;&lt;description&gt;posthog-js adds these to the page leave event, they are used in web analytics calculations&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$prev_pageview_last_scroll&lt;/name&gt;&lt;description&gt;posthog-js adds these to the page leave event, they are used in web analytics calculations&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$prev_pageview_max_content&lt;/name&gt;&lt;description&gt;posthog-js adds these to the page leave event, they are used in web analytics calculations&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$prev_pageview_max_scroll&lt;/name&gt;&lt;description&gt;posthog-js adds these to the page leave event, they are used in web analytics calculations&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$viewport_height&lt;/name&gt;&lt;description&gt;The height of the user's actual browser window (in pixels).&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$screen_width&lt;/name&gt;&lt;description&gt;The width of the user's entire screen (in pixels).&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$browser_version&lt;/name&gt;&lt;description&gt;The version of the browser that was used. Used in combination with Browser.&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$viewport_width&lt;/name&gt;&lt;description&gt;The width of the user's actual browser window (in pixels).&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$screen_height&lt;/name&gt;&lt;description&gt;The height of the user's entire screen (in pixels).&lt;/description&gt;&lt;/prop&gt;&lt;/Numeric&gt;&lt;String&gt;&lt;prop&gt;&lt;name&gt;$current_url&lt;/name&gt;&lt;description&gt;The URL visited at the time of the event.&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$pathname&lt;/name&gt;&lt;description&gt;The path of the Current URL, which means everything in the url after the domain.&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$prev_pageview_pathname&lt;/name&gt;&lt;description&gt;posthog-js adds these to the page leave event, they are used in web analytics calculations&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;title&lt;/name&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;commit_sha&lt;/name&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$lib_version&lt;/name&gt;&lt;description&gt;Version of the library used to send the event. Used in combination with Library.&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$lib&lt;/name&gt;&lt;description&gt;What library was used to send the event.&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$device_type&lt;/name&gt;&lt;description&gt;The type of device that was used.&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$browser_type&lt;/name&gt;&lt;description&gt;This is only added when posthog-js config.opt_out_useragent_filter is true.&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$os_version&lt;/name&gt;&lt;description&gt;The Operating System version.&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$raw_user_agent&lt;/name&gt;&lt;description&gt;PostHog process information like browser, OS, and device type from the user agent string. This is the raw user agent string.&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$referrer&lt;/name&gt;&lt;description&gt;URL of where the user came from.&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$browser_language&lt;/name&gt;&lt;description&gt;Language.&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$feature/artificial-hog&lt;/name&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$lib_custom_api_host&lt;/name&gt;&lt;description&gt;The custom API host used to send the event.&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$referring_domain&lt;/name&gt;&lt;description&gt;Domain of where the user came from.&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$last_posthog_reset&lt;/name&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$browser_language_prefix&lt;/name&gt;&lt;description&gt;Language prefix.&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$host&lt;/name&gt;&lt;description&gt;The hostname of the Current URL.&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;realm&lt;/name&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$feature/llm-observability&lt;/name&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$browser&lt;/name&gt;&lt;description&gt;Name of the browser the user has used.&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$os&lt;/name&gt;&lt;description&gt;The operating system of the user.&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$user_id&lt;/name&gt;&lt;description&gt;This variable will be set to the distinct ID if you've called posthog.identify('distinct id'). If the user is anonymous, it'll be empty.&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;distinct_id&lt;/name&gt;&lt;/prop&gt;&lt;/String&gt;&lt;Boolean&gt;&lt;prop&gt;&lt;name&gt;has_billing_plan&lt;/name&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$is_identified&lt;/name&gt;&lt;description&gt;When the person was identified&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;email_service_available&lt;/name&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;slack_service_available&lt;/name&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;is_demo_project&lt;/name&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$web_vitals_enabled_server_side&lt;/name&gt;&lt;description&gt;Whether web vitals was enabled in remote config&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$exception_capture_enabled_server_side&lt;/name&gt;&lt;/prop&gt;&lt;/Boolean&gt;&lt;/properties&gt;\nThought: \n",
                        "example": false,
                        "id": null,
                        "name": null,
                        "response_metadata": {},
                        "type": "human"
                    }
                ],
                "conversation_id": "0194b2ce-ef92-0000-008e-c6ba293c8c7d",
                "$lib_version": "3.11.0",
                "$geoip_disable": true,
                "$ai_trace_id": "537b7988-0186-494f-a313-77a5a8f7db26",
                "$ai_latency": 0.0002560615539550781,
                "$ai_parent_id": "7aac22f8-7cb8-400c-a218-a74303d14fbd",
                "$ai_input_state": {
                    "messages": [
                        {
                            "additional_kwargs": {},
                            "content": "\n<agent_info>\nYou are an expert product analyst agent specializing in data visualization and trends analysis. Your primary task is to understand a user's data taxonomy and create a plan for building a visualization that answers the user's question. This plan should focus on trends insights, including a series of events, property filters, and values of property filters.\n\nYou have access to the core memory in the &lt;core_memory&gt; tag, which stores information about the user's company and product.\n\nYou have access to the following tools:\nretrieve_event_properties(event_name: str) - \nUse this tool to retrieve the property names of an event that the user has in their taxonomy. You will receive a list of properties containing their name, value type, and description, or a message that properties have not been found.\n\n- **Try other events** if the tool doesn't return any properties.\n- **Prioritize properties that are directly related to the context or objective of the user's query.**\n- **Avoid using ambiguous properties** unless their relevance is explicitly confirmed.\n\nArgs:\n    event_name: The name of the event that you want to retrieve properties for.\n\nretrieve_event_property_values(event_name: str, property_name: str) - \nUse this tool to retrieve the property values for an event that the user has in their taxonomy. Adjust filters to these values. You will receive a list of property values or a message that property values have not been found. Some properties can have many values, so the output will be truncated. Use your judgment to find a proper value.\n\nArgs:\n    event_name: The name of the event that you want to retrieve values for.\n    property_name: The name of the property that you want to retrieve values for.\n\nretrieve_entity_properties(entity: Literal['person', 'session', 'project', 'organization', 'instance']) - \nUse this tool to retrieve property names for a property group (entity) that the user has in their taxonomy. You will receive a list of properties containing their name, value type, and description, or a message that properties have not been found.\n\n- **Infer the property groups from the user's request.**\n- **Try other entities** if the tool doesn't return any properties.\n- **Prioritize properties that are directly related to the context or objective of the user's query.**\n- **Avoid using ambiguous properties** unless their relevance is explicitly confirmed.\n\nArgs:\n    entity: The type of the entity that you want to retrieve properties for.\n\nretrieve_entity_property_values(entity: Literal['person', 'session', 'project', 'organization', 'instance'], property_name: str) - \nUse this tool to retrieve property values for a property name that the user has in their taxonomy. Adjust filters to these values. You will receive a list of property values or a message that property values have not been found. Some properties can have many values, so the output will be truncated. Use your judgment to find a proper value.\n\nArgs:\n    entity: The type of the entity that you want to retrieve properties for.\n    property_name: The name of the property that you want to retrieve values for.\n\nask_user_for_help(question: str) - \nUse this tool to ask a question to the user. Your question must be concise and clear.\n\nArgs:\n    question: The question you want to ask.\n\nfinal_answer(final_response: str) - \nUse this tool to provide the final answer to the user's question.\n\nAnswer in the following format:\n```\nEvents:\n- event 1\n    - math operation: total\n    - property filter 1:\n        - entity\n        - property name\n        - property type\n        - operator\n        - property value\n    - property filter 2... Repeat for each property filter.\n- event 2\n    - math operation: average by `property name`.\n    - property filter 1:\n        - entity\n        - property name\n        - property type\n        - operator\n        - property value\n    - property filter 2... Repeat for each property filter.\n- Repeat for each event.\n\n(if a formula is used)\nFormula:\n`A/B`, where `A` is the first event and `B` is the second event.\n\n(if a breakdown is used)\nBreakdown by:\n- breakdown 1:\n    - entity\n    - property name\n- Repeat for each breakdown.\n```\n\nArgs:\n    final_response: List all events and properties that you want to use to answer the question.\n\n\nUse a JSON blob to specify a tool by providing an action key (tool name) and an action_input key (tool input).\n\nValid &quot;action&quot; values: retrieve_event_properties, retrieve_event_property_values, retrieve_entity_properties, retrieve_entity_property_values, ask_user_for_help, final_answer\n\nProvide only ONE action per $JSON_BLOB, as shown:\n\n```\n{\n  &quot;action&quot;: $TOOL_NAME,\n  &quot;action_input&quot;: $INPUT\n}\n```\n\nFollow this format:\n\nQuestion: input question to answer\nThought: consider previous and subsequent steps\nAction:\n```\n$JSON_BLOB\n```\nObservation: action result\n... (repeat Thought/Action/Observation N times)\nThought: I know what to respond\nAction:\n```\n{\n  &quot;action&quot;: &quot;final_answer&quot;,\n  &quot;action_input&quot;: &quot;Final response to human&quot;\n}\n```\n</agent_info>\n\n<core_memory>\nChat app for hedgehogs.\n</core_memory>\n\n&lt;human_in_the_loop&gt;\nAsk the user for clarification if:\n- The user's question is ambiguous.\n- You can't find matching events or properties.\n- You're unable to build a plan that effectively answers the user's question.\n&lt;/human_in_the_loop&gt;\n\nBelow you will find information on how to correctly discover the taxonomy of the user's data.\n\n<general_knowledge>\nTrends insights enable users to plot data from people, events, and properties however they want. They're useful for finding patterns in data, as well as monitoring users' product to ensure everything is running smoothly. Users can use multiple independent series in a single query to see trends. They can also use a formula to calculate a metric. Each series has its own set of property filters, so you must define them for each series. Trends insights do not require breakdowns or filters by default.\n</general_knowledge>\n\n<events>\nYou’ll be given a list of events in addition to the user’s question. Events are sorted by their popularity with the most popular events at the top of the list. Prioritize popular events. You must always specify events to use. Events always have an associated user’s profile. Assess whether the sequence of events suffices to answer the question before applying property filters or breakdowns.\n</events>\n\n<aggregation>\n**Determine the math aggregation** the user is asking for, such as totals, averages, ratios, or custom formulas. If not specified, choose a reasonable default based on the event type (e.g., total count). By default, the total count should be used. You can aggregate data by events, event's property values, projects, organizations, instances, or users. If you're aggregating by users or groups, there’s no need to check for their existence, as events without required associations will automatically be filtered out.\n\nAvailable math aggregations types for the event count are:\n- total count\n- average\n- minimum\n- maximum\n- median\n- 90th percentile\n- 95th percentile\n- 99th percentile\n- unique users\n- weekly active users\n- daily active users\n- first time for a user\n- unique projects\n- unique organizations\n- unique instances\n\nAvailable math aggregation types for event's property values are:\n- average\n- sum\n- minimum\n- maximum\n- median\n- 90th percentile\n- 95th percentile\n- 99th percentile\n\nAvailable math aggregation types counting number of events completed per user (intensity of usage) are:\n- average\n- minimum\n- maximum\n- median\n- 90th percentile\n- 95th percentile\n- 99th percentile\n\nExamples of using aggregation types:\n- `unique users` to find how many distinct users have logged the event per a day.\n- `average` by the `$session_diration` property to find out what was the average session duration of an event.\n- `99th percentile by users` to find out what was the 99th percentile of the event count by users.\n</aggregation>\n\n<math_formulas>\nIf the math aggregation is more complex or not listed above, use custom formulas to perform mathematical operations like calculating percentages or metrics. If you use a formula, you must use the following syntax: `A/B`, where `A` and `B` are the names of the series. You can combine math aggregations and formulas.\n\nWhen using a formula, you must:\n- Identify and specify **all** events needed to solve the formula.\n- Carefully review the list of available events to find appropriate events for each part of the formula.\n- Ensure that you find events corresponding to both the numerator and denominator in ratio calculations.\n\nExamples of using math formulas:\n- If you want to calculate the percentage of users who have completed onboarding, you need to find and use events similar to `$identify` and `onboarding complete`, so the formula will be `A / B`, where `A` is `onboarding complete` (unique users) and `B` is `$identify` (unique users).\n</math_formulas>\n\n&lt;property_filters&gt;\nUse property filters to provide a narrowed results. Only include property filters when they are essential to directly answer the user’s question. Avoid adding them if the question can be addressed without additional segmentation and always use the minimum set of property filters needed to answer the question. Properties have one of the four types: String, Numeric, Boolean, and DateTime.\n\nIMPORTANT: Do not check if a property is set unless the user explicitly asks for it.\n\nWhen using a property filter, you must:\n- **Prioritize properties directly related to the context or objective of the user's query.** Avoid using properties for identification like IDs because neither the user nor you can retrieve the data. Instead, prioritize filtering based on general properties like `paidCustomer` or `icp_score`.\n- **Ensure that you find both the property group and name.** Property groups must be one of the following: event, person, session, project, organization, instance.\n- After selecting a property, **validate that the property value accurately reflects the intended criteria**.\n- **Find the suitable operator for type** (e.g., `contains`, `is set`). The operators are listed below.\n- If the operator requires a value, use the tool to find the property values. Verify that you can answer the question with given property values. If you can't, try to find a different property or event.\n- You set logical operators to combine multiple properties of a single series: AND or OR.\n\nInfer the property groups from the user's request. If your first guess doesn't yield any results, try to adjust the property group. You must make sure that the property name matches the lookup value, e.g. if the user asks to find data about organizations with the name &quot;ACME&quot;, you must look for the property like &quot;organization name&quot;.\n\nIf the user asks for a specific timeframe, you must not look for a property and include it in the plan, as the next steps will handle it for you.\n\nSupported operators for the String or Numeric types are:\n- equals\n- doesn't equal\n- contains\n- doesn't contain\n- matches regex\n- doesn't match regex\n- is set\n- is not set\n\nSupported operators for the DateTime type are:\n- equals\n- doesn't equal\n- greater than\n- less than\n- is set\n- is not set\n\nSupported operators for the Boolean type are:\n- equals\n- doesn't equal\n- is set\n- is not set\n\nAll operators take a single value except for `equals` and `doesn't equal which can take one or more values.\n&lt;/property_filters&gt;\n\n<breakdowns>\nBreakdowns are used to segment data by property values of maximum three properties. They divide all defined trends series to multiple subseries based on the values of the property. Include breakdowns **only when they are essential to directly answer the user’s question**. You must not add breakdowns if the question can be addressed without additional segmentation. Always use the minimum set of breakdowns needed to answer the question.\n\nWhen using breakdowns, you must:\n- **Identify the property group** and name for each breakdown.\n- **Provide the property name** for each breakdown.\n- **Validate that the property value accurately reflects the intended criteria**.\n\nExamples of using breakdowns:\n- page views trend by country: you need to find a property such as `$geoip_country_code` and set it as a breakdown.\n- number of users who have completed onboarding by an organization: you need to find a property such as `organization name` and set it as a breakdown.\n</breakdowns>\n\n<reminders>\n- Ensure that any properties or breakdowns included are directly relevant to the context and objectives of the user’s question. Avoid unnecessary or unrelated details.\n- Avoid overcomplicating the response with excessive property filters or breakdowns. Focus on the simplest solution that effectively answers the user’s question.\n</reminders>\n---\n\nBegin! Reminder that you must ALWAYS respond with a valid JSON blob of a single action. Use tools if necessary. Respond directly if appropriate. Format is Action:```$JSON_BLOB``` then Observation.\n",
                            "id": null,
                            "name": null,
                            "response_metadata": {},
                            "type": "system"
                        },
                        {
                            "additional_kwargs": {},
                            "content": "\nHere are the event names.\n&lt;defined_events&gt;&lt;event&gt;&lt;name&gt;All Events&lt;/name&gt;&lt;description&gt;All events. This is a wildcard that matches all events.&lt;/description&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;$ai_generation&lt;/name&gt;&lt;description&gt;AI Generation (LLM). A call to an LLM model. Contains the input prompt, output, model used and costs.&lt;/description&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;$ai_trace&lt;/name&gt;&lt;description&gt;AI Trace (LLM). A generative AI trace. Usually a trace tracks a single user interaction and contains one or more AI generation calls&lt;/description&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;$pageview&lt;/name&gt;&lt;description&gt;Pageview. When a user loads (or reloads) a page.&lt;/description&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;query completed&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;$web_vitals&lt;/name&gt;&lt;description&gt;Web vitals. Automatically captured web vitals data&lt;/description&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;update user properties&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;time to see data&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;sidebar closed&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;client_request_failure&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;$ai_span&lt;/name&gt;&lt;description&gt;AI Span (LLM). A generative AI span. Usually a span tracks a unit of work for a trace of generative AI models (LLMs)&lt;/description&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;insight person modal viewed&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;query failed&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;recording list fetched&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;timezone component viewed&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;$rageclick&lt;/name&gt;&lt;description&gt;Rageclick. A user has rapidly and repeatedly clicked in a single place&lt;/description&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;insight created&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;insight viewed&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;user updated&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;insight analyzed&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;definition hovered&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;chat with ai&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;recording list filters changed&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;dashboard loading time&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;toast error&lt;/name&gt;&lt;/event&gt;&lt;/defined_events&gt;\n",
                            "id": null,
                            "name": null,
                            "response_metadata": {},
                            "type": "human"
                        },
                        {
                            "additional_kwargs": {},
                            "content": "\nAnswer the following question as best you can.\nQuestion: What events, properties and/or property values should I use to answer this question \"What's the trend in $pageview events?\"?\n",
                            "id": null,
                            "name": null,
                            "response_metadata": {},
                            "type": "human"
                        },
                        {
                            "additional_kwargs": {},
                            "content": "\nThought: To answer the question &quot;What's the trend in $pageview events?&quot;, I need to retrieve the properties associated with the `$pageview` event. This will help in identifying any relevant property filters or breakdowns that can be applied to analyze the trend effectively.\n\nAction:\n```json\n{\n  &quot;action&quot;: &quot;retrieve_event_properties&quot;,\n  &quot;action_input&quot;: &quot;$pageview&quot;\n}\n```\nObservation: &lt;properties&gt;&lt;Numeric&gt;&lt;prop&gt;&lt;name&gt;$prev_pageview_duration&lt;/name&gt;&lt;description&gt;posthog-js adds these to the page leave event, they are used in web analytics calculations&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$prev_pageview_max_scroll_percentage&lt;/name&gt;&lt;description&gt;posthog-js adds these to the page leave event, they are used in web analytics calculations&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$prev_pageview_last_content_percentage&lt;/name&gt;&lt;description&gt;posthog-js adds these to the page leave event, they are used in web analytics calculations&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$prev_pageview_max_content_percentage&lt;/name&gt;&lt;description&gt;posthog-js adds these to the page leave event, they are used in web analytics calculations&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$prev_pageview_last_scroll_percentage&lt;/name&gt;&lt;description&gt;posthog-js adds these to the page leave event, they are used in web analytics calculations&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$prev_pageview_last_content&lt;/name&gt;&lt;description&gt;posthog-js adds these to the page leave event, they are used in web analytics calculations&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$prev_pageview_last_scroll&lt;/name&gt;&lt;description&gt;posthog-js adds these to the page leave event, they are used in web analytics calculations&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$prev_pageview_max_content&lt;/name&gt;&lt;description&gt;posthog-js adds these to the page leave event, they are used in web analytics calculations&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$prev_pageview_max_scroll&lt;/name&gt;&lt;description&gt;posthog-js adds these to the page leave event, they are used in web analytics calculations&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$viewport_height&lt;/name&gt;&lt;description&gt;The height of the user's actual browser window (in pixels).&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$screen_width&lt;/name&gt;&lt;description&gt;The width of the user's entire screen (in pixels).&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$browser_version&lt;/name&gt;&lt;description&gt;The version of the browser that was used. Used in combination with Browser.&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$viewport_width&lt;/name&gt;&lt;description&gt;The width of the user's actual browser window (in pixels).&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$screen_height&lt;/name&gt;&lt;description&gt;The height of the user's entire screen (in pixels).&lt;/description&gt;&lt;/prop&gt;&lt;/Numeric&gt;&lt;String&gt;&lt;prop&gt;&lt;name&gt;$current_url&lt;/name&gt;&lt;description&gt;The URL visited at the time of the event.&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$pathname&lt;/name&gt;&lt;description&gt;The path of the Current URL, which means everything in the url after the domain.&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$prev_pageview_pathname&lt;/name&gt;&lt;description&gt;posthog-js adds these to the page leave event, they are used in web analytics calculations&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;title&lt;/name&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;commit_sha&lt;/name&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$lib_version&lt;/name&gt;&lt;description&gt;Version of the library used to send the event. Used in combination with Library.&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$lib&lt;/name&gt;&lt;description&gt;What library was used to send the event.&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$device_type&lt;/name&gt;&lt;description&gt;The type of device that was used.&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$browser_type&lt;/name&gt;&lt;description&gt;This is only added when posthog-js config.opt_out_useragent_filter is true.&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$os_version&lt;/name&gt;&lt;description&gt;The Operating System version.&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$raw_user_agent&lt;/name&gt;&lt;description&gt;PostHog process information like browser, OS, and device type from the user agent string. This is the raw user agent string.&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$referrer&lt;/name&gt;&lt;description&gt;URL of where the user came from.&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$browser_language&lt;/name&gt;&lt;description&gt;Language.&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$feature/artificial-hog&lt;/name&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$lib_custom_api_host&lt;/name&gt;&lt;description&gt;The custom API host used to send the event.&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$referring_domain&lt;/name&gt;&lt;description&gt;Domain of where the user came from.&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$last_posthog_reset&lt;/name&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$browser_language_prefix&lt;/name&gt;&lt;description&gt;Language prefix.&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$host&lt;/name&gt;&lt;description&gt;The hostname of the Current URL.&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;realm&lt;/name&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$feature/llm-observability&lt;/name&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$browser&lt;/name&gt;&lt;description&gt;Name of the browser the user has used.&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$os&lt;/name&gt;&lt;description&gt;The operating system of the user.&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$user_id&lt;/name&gt;&lt;description&gt;This variable will be set to the distinct ID if you've called posthog.identify('distinct id'). If the user is anonymous, it'll be empty.&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;distinct_id&lt;/name&gt;&lt;/prop&gt;&lt;/String&gt;&lt;Boolean&gt;&lt;prop&gt;&lt;name&gt;has_billing_plan&lt;/name&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$is_identified&lt;/name&gt;&lt;description&gt;When the person was identified&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;email_service_available&lt;/name&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;slack_service_available&lt;/name&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;is_demo_project&lt;/name&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$web_vitals_enabled_server_side&lt;/name&gt;&lt;description&gt;Whether web vitals was enabled in remote config&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$exception_capture_enabled_server_side&lt;/name&gt;&lt;/prop&gt;&lt;/Boolean&gt;&lt;/properties&gt;\nThought: \n",
                            "id": null,
                            "name": null,
                            "response_metadata": {},
                            "type": "human"
                        }
                    ]
                },
                "$ai_span_id": "b64f09bd-5bd0-46e1-a0f9-793a5163bed2",
                "$ai_span_name": "merge_message_runs",
                "is_first_conversation": true,
                "$ip": "192.168.97.1",
                "$plugins_succeeded": ["GeoIP (14)"],
                "$plugins_failed": []
            }
        },
        {
            "createdAt": "2025-01-29T16:04:59.026000+00:00",
            "event": "$ai_span",
            "id": "0194b2cf-05a1-7818-a144-558de2d33a78",
            "properties": {
                "conversation_id": "0194b2ce-ef92-0000-008e-c6ba293c8c7d",
                "$ai_trace_id": "537b7988-0186-494f-a313-77a5a8f7db26",
                "$ai_span_name": "ChatPromptTemplate",
                "is_first_conversation": true,
                "$ai_parent_id": "7aac22f8-7cb8-400c-a218-a74303d14fbd",
                "$lib_version": "3.11.0",
                "$geoip_disable": true,
                "$ai_input_state": {
                    "agent_scratchpad": "To answer the question \"What's the trend in $pageview events?\", I need to retrieve the properties associated with the `$pageview` event. This will help in identifying any relevant property filters or breakdowns that can be applied to analyze the trend effectively.\n\nAction:\n```json\n{\n  \"action\": \"retrieve_event_properties\",\n  \"action_input\": \"$pageview\"\n}\n```\nObservation: <properties><Numeric><prop><name>$prev_pageview_duration</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>$prev_pageview_max_scroll_percentage</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>$prev_pageview_last_content_percentage</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>$prev_pageview_max_content_percentage</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>$prev_pageview_last_scroll_percentage</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>$prev_pageview_last_content</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>$prev_pageview_last_scroll</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>$prev_pageview_max_content</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>$prev_pageview_max_scroll</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>$viewport_height</name><description>The height of the user's actual browser window (in pixels).</description></prop><prop><name>$screen_width</name><description>The width of the user's entire screen (in pixels).</description></prop><prop><name>$browser_version</name><description>The version of the browser that was used. Used in combination with Browser.</description></prop><prop><name>$viewport_width</name><description>The width of the user's actual browser window (in pixels).</description></prop><prop><name>$screen_height</name><description>The height of the user's entire screen (in pixels).</description></prop></Numeric><String><prop><name>$current_url</name><description>The URL visited at the time of the event.</description></prop><prop><name>$pathname</name><description>The path of the Current URL, which means everything in the url after the domain.</description></prop><prop><name>$prev_pageview_pathname</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>title</name></prop><prop><name>commit_sha</name></prop><prop><name>$lib_version</name><description>Version of the library used to send the event. Used in combination with Library.</description></prop><prop><name>$lib</name><description>What library was used to send the event.</description></prop><prop><name>$device_type</name><description>The type of device that was used.</description></prop><prop><name>$browser_type</name><description>This is only added when posthog-js config.opt_out_useragent_filter is true.</description></prop><prop><name>$os_version</name><description>The Operating System version.</description></prop><prop><name>$raw_user_agent</name><description>PostHog process information like browser, OS, and device type from the user agent string. This is the raw user agent string.</description></prop><prop><name>$referrer</name><description>URL of where the user came from.</description></prop><prop><name>$browser_language</name><description>Language.</description></prop><prop><name>$feature/artificial-hog</name></prop><prop><name>$lib_custom_api_host</name><description>The custom API host used to send the event.</description></prop><prop><name>$referring_domain</name><description>Domain of where the user came from.</description></prop><prop><name>$last_posthog_reset</name></prop><prop><name>$browser_language_prefix</name><description>Language prefix.</description></prop><prop><name>$host</name><description>The hostname of the Current URL.</description></prop><prop><name>realm</name></prop><prop><name>$feature/llm-observability</name></prop><prop><name>$browser</name><description>Name of the browser the user has used.</description></prop><prop><name>$os</name><description>The operating system of the user.</description></prop><prop><name>$user_id</name><description>This variable will be set to the distinct ID if you've called posthog.identify('distinct id'). If the user is anonymous, it'll be empty.</description></prop><prop><name>distinct_id</name></prop></String><Boolean><prop><name>has_billing_plan</name></prop><prop><name>$is_identified</name><description>When the person was identified</description></prop><prop><name>email_service_available</name></prop><prop><name>slack_service_available</name></prop><prop><name>is_demo_project</name></prop><prop><name>$web_vitals_enabled_server_side</name><description>Whether web vitals was enabled in remote config</description></prop><prop><name>$exception_capture_enabled_server_side</name></prop></Boolean></properties>\nThought: ",
                    "core_memory": "Chat app for hedgehogs.",
                    "core_memory_instructions": "You have access to the core memory in the <core_memory> tag, which stores information about the user's company and product.",
                    "events": "<defined_events><event><name>All Events</name><description>All events. This is a wildcard that matches all events.</description></event><event><name>$ai_generation</name><description>AI Generation (LLM). A call to an LLM model. Contains the input prompt, output, model used and costs.</description></event><event><name>$ai_trace</name><description>AI Trace (LLM). A generative AI trace. Usually a trace tracks a single user interaction and contains one or more AI generation calls</description></event><event><name>$pageview</name><description>Pageview. When a user loads (or reloads) a page.</description></event><event><name>query completed</name></event><event><name>$web_vitals</name><description>Web vitals. Automatically captured web vitals data</description></event><event><name>update user properties</name></event><event><name>time to see data</name></event><event><name>sidebar closed</name></event><event><name>client_request_failure</name></event><event><name>$ai_span</name><description>AI Span (LLM). A generative AI span. Usually a span tracks a unit of work for a trace of generative AI models (LLMs)</description></event><event><name>insight person modal viewed</name></event><event><name>query failed</name></event><event><name>recording list fetched</name></event><event><name>timezone component viewed</name></event><event><name>$rageclick</name><description>Rageclick. A user has rapidly and repeatedly clicked in a single place</description></event><event><name>insight created</name></event><event><name>insight viewed</name></event><event><name>user updated</name></event><event><name>insight analyzed</name></event><event><name>definition hovered</name></event><event><name>chat with ai</name></event><event><name>recording list filters changed</name></event><event><name>dashboard loading time</name></event><event><name>toast error</name></event></defined_events>",
                    "groups": ["project", "organization", "instance"],
                    "react_format": "You have access to the following tools:\nretrieve_event_properties(event_name: str) - \nUse this tool to retrieve the property names of an event that the user has in their taxonomy. You will receive a list of properties containing their name, value type, and description, or a message that properties have not been found.\n\n- **Try other events** if the tool doesn't return any properties.\n- **Prioritize properties that are directly related to the context or objective of the user's query.**\n- **Avoid using ambiguous properties** unless their relevance is explicitly confirmed.\n\nArgs:\n    event_name: The name of the event that you want to retrieve properties for.\n\nretrieve_event_property_values(event_name: str, property_name: str) - \nUse this tool to retrieve the property values for an event that the user has in their taxonomy. Adjust filters to these values. You will receive a list of property values or a message that property values have not been found. Some properties can have many values, so the output will be truncated. Use your judgment to find a proper value.\n\nArgs:\n    event_name: The name of the event that you want to retrieve values for.\n    property_name: The name of the property that you want to retrieve values for.\n\nretrieve_entity_properties(entity: Literal['person', 'session', 'project', 'organization', 'instance']) - \nUse this tool to retrieve property names for a property group (entity) that the user has in their taxonomy. You will receive a list of properties containing their name, value type, and description, or a message that properties have not been found.\n\n- **Infer the property groups from the user's request.**\n- **Try other entities** if the tool doesn't return any properties.\n- **Prioritize properties that are directly related to the context or objective of the user's query.**\n- **Avoid using ambiguous properties** unless their relevance is explicitly confirmed.\n\nArgs:\n    entity: The type of the entity that you want to retrieve properties for.\n\nretrieve_entity_property_values(entity: Literal['person', 'session', 'project', 'organization', 'instance'], property_name: str) - \nUse this tool to retrieve property values for a property name that the user has in their taxonomy. Adjust filters to these values. You will receive a list of property values or a message that property values have not been found. Some properties can have many values, so the output will be truncated. Use your judgment to find a proper value.\n\nArgs:\n    entity: The type of the entity that you want to retrieve properties for.\n    property_name: The name of the property that you want to retrieve values for.\n\nask_user_for_help(question: str) - \nUse this tool to ask a question to the user. Your question must be concise and clear.\n\nArgs:\n    question: The question you want to ask.\n\nfinal_answer(final_response: str) - \nUse this tool to provide the final answer to the user's question.\n\nAnswer in the following format:\n```\nEvents:\n- event 1\n    - math operation: total\n    - property filter 1:\n        - entity\n        - property name\n        - property type\n        - operator\n        - property value\n    - property filter 2... Repeat for each property filter.\n- event 2\n    - math operation: average by `property name`.\n    - property filter 1:\n        - entity\n        - property name\n        - property type\n        - operator\n        - property value\n    - property filter 2... Repeat for each property filter.\n- Repeat for each event.\n\n(if a formula is used)\nFormula:\n`A/B`, where `A` is the first event and `B` is the second event.\n\n(if a breakdown is used)\nBreakdown by:\n- breakdown 1:\n    - entity\n    - property name\n- Repeat for each breakdown.\n```\n\nArgs:\n    final_response: List all events and properties that you want to use to answer the question.\n\n\nUse a JSON blob to specify a tool by providing an action key (tool name) and an action_input key (tool input).\n\nValid \"action\" values: retrieve_event_properties, retrieve_event_property_values, retrieve_entity_properties, retrieve_entity_property_values, ask_user_for_help, final_answer\n\nProvide only ONE action per $JSON_BLOB, as shown:\n\n```\n{\n  \"action\": $TOOL_NAME,\n  \"action_input\": $INPUT\n}\n```\n\nFollow this format:\n\nQuestion: input question to answer\nThought: consider previous and subsequent steps\nAction:\n```\n$JSON_BLOB\n```\nObservation: action result\n... (repeat Thought/Action/Observation N times)\nThought: I know what to respond\nAction:\n```\n{\n  \"action\": \"final_answer\",\n  \"action_input\": \"Final response to human\"\n}\n```",
                    "react_format_reminder": "Begin! Reminder that you must ALWAYS respond with a valid JSON blob of a single action. Use tools if necessary. Respond directly if appropriate. Format is Action:```$JSON_BLOB``` then Observation.",
                    "react_human_in_the_loop": "<human_in_the_loop>\nAsk the user for clarification if:\n- The user's question is ambiguous.\n- You can't find matching events or properties.\n- You're unable to build a plan that effectively answers the user's question.\n</human_in_the_loop>",
                    "react_property_filters": "<property_filters>\nUse property filters to provide a narrowed results. Only include property filters when they are essential to directly answer the user’s question. Avoid adding them if the question can be addressed without additional segmentation and always use the minimum set of property filters needed to answer the question. Properties have one of the four types: String, Numeric, Boolean, and DateTime.\n\nIMPORTANT: Do not check if a property is set unless the user explicitly asks for it.\n\nWhen using a property filter, you must:\n- **Prioritize properties directly related to the context or objective of the user's query.** Avoid using properties for identification like IDs because neither the user nor you can retrieve the data. Instead, prioritize filtering based on general properties like `paidCustomer` or `icp_score`.\n- **Ensure that you find both the property group and name.** Property groups must be one of the following: event, person, session, project, organization, instance.\n- After selecting a property, **validate that the property value accurately reflects the intended criteria**.\n- **Find the suitable operator for type** (e.g., `contains`, `is set`). The operators are listed below.\n- If the operator requires a value, use the tool to find the property values. Verify that you can answer the question with given property values. If you can't, try to find a different property or event.\n- You set logical operators to combine multiple properties of a single series: AND or OR.\n\nInfer the property groups from the user's request. If your first guess doesn't yield any results, try to adjust the property group. You must make sure that the property name matches the lookup value, e.g. if the user asks to find data about organizations with the name \"ACME\", you must look for the property like \"organization name\".\n\nIf the user asks for a specific timeframe, you must not look for a property and include it in the plan, as the next steps will handle it for you.\n\nSupported operators for the String or Numeric types are:\n- equals\n- doesn't equal\n- contains\n- doesn't contain\n- matches regex\n- doesn't match regex\n- is set\n- is not set\n\nSupported operators for the DateTime type are:\n- equals\n- doesn't equal\n- greater than\n- less than\n- is set\n- is not set\n\nSupported operators for the Boolean type are:\n- equals\n- doesn't equal\n- is set\n- is not set\n\nAll operators take a single value except for `equals` and `doesn't equal which can take one or more values.\n</property_filters>"
                },
                "$ai_output_state": {
                    "messages": [
                        {
                            "additional_kwargs": {},
                            "content": "\n<agent_info>\nYou are an expert product analyst agent specializing in data visualization and trends analysis. Your primary task is to understand a user's data taxonomy and create a plan for building a visualization that answers the user's question. This plan should focus on trends insights, including a series of events, property filters, and values of property filters.\n\nYou have access to the core memory in the &lt;core_memory&gt; tag, which stores information about the user's company and product.\n\nYou have access to the following tools:\nretrieve_event_properties(event_name: str) - \nUse this tool to retrieve the property names of an event that the user has in their taxonomy. You will receive a list of properties containing their name, value type, and description, or a message that properties have not been found.\n\n- **Try other events** if the tool doesn't return any properties.\n- **Prioritize properties that are directly related to the context or objective of the user's query.**\n- **Avoid using ambiguous properties** unless their relevance is explicitly confirmed.\n\nArgs:\n    event_name: The name of the event that you want to retrieve properties for.\n\nretrieve_event_property_values(event_name: str, property_name: str) - \nUse this tool to retrieve the property values for an event that the user has in their taxonomy. Adjust filters to these values. You will receive a list of property values or a message that property values have not been found. Some properties can have many values, so the output will be truncated. Use your judgment to find a proper value.\n\nArgs:\n    event_name: The name of the event that you want to retrieve values for.\n    property_name: The name of the property that you want to retrieve values for.\n\nretrieve_entity_properties(entity: Literal['person', 'session', 'project', 'organization', 'instance']) - \nUse this tool to retrieve property names for a property group (entity) that the user has in their taxonomy. You will receive a list of properties containing their name, value type, and description, or a message that properties have not been found.\n\n- **Infer the property groups from the user's request.**\n- **Try other entities** if the tool doesn't return any properties.\n- **Prioritize properties that are directly related to the context or objective of the user's query.**\n- **Avoid using ambiguous properties** unless their relevance is explicitly confirmed.\n\nArgs:\n    entity: The type of the entity that you want to retrieve properties for.\n\nretrieve_entity_property_values(entity: Literal['person', 'session', 'project', 'organization', 'instance'], property_name: str) - \nUse this tool to retrieve property values for a property name that the user has in their taxonomy. Adjust filters to these values. You will receive a list of property values or a message that property values have not been found. Some properties can have many values, so the output will be truncated. Use your judgment to find a proper value.\n\nArgs:\n    entity: The type of the entity that you want to retrieve properties for.\n    property_name: The name of the property that you want to retrieve values for.\n\nask_user_for_help(question: str) - \nUse this tool to ask a question to the user. Your question must be concise and clear.\n\nArgs:\n    question: The question you want to ask.\n\nfinal_answer(final_response: str) - \nUse this tool to provide the final answer to the user's question.\n\nAnswer in the following format:\n```\nEvents:\n- event 1\n    - math operation: total\n    - property filter 1:\n        - entity\n        - property name\n        - property type\n        - operator\n        - property value\n    - property filter 2... Repeat for each property filter.\n- event 2\n    - math operation: average by `property name`.\n    - property filter 1:\n        - entity\n        - property name\n        - property type\n        - operator\n        - property value\n    - property filter 2... Repeat for each property filter.\n- Repeat for each event.\n\n(if a formula is used)\nFormula:\n`A/B`, where `A` is the first event and `B` is the second event.\n\n(if a breakdown is used)\nBreakdown by:\n- breakdown 1:\n    - entity\n    - property name\n- Repeat for each breakdown.\n```\n\nArgs:\n    final_response: List all events and properties that you want to use to answer the question.\n\n\nUse a JSON blob to specify a tool by providing an action key (tool name) and an action_input key (tool input).\n\nValid &quot;action&quot; values: retrieve_event_properties, retrieve_event_property_values, retrieve_entity_properties, retrieve_entity_property_values, ask_user_for_help, final_answer\n\nProvide only ONE action per $JSON_BLOB, as shown:\n\n```\n{\n  &quot;action&quot;: $TOOL_NAME,\n  &quot;action_input&quot;: $INPUT\n}\n```\n\nFollow this format:\n\nQuestion: input question to answer\nThought: consider previous and subsequent steps\nAction:\n```\n$JSON_BLOB\n```\nObservation: action result\n... (repeat Thought/Action/Observation N times)\nThought: I know what to respond\nAction:\n```\n{\n  &quot;action&quot;: &quot;final_answer&quot;,\n  &quot;action_input&quot;: &quot;Final response to human&quot;\n}\n```\n</agent_info>\n\n<core_memory>\nChat app for hedgehogs.\n</core_memory>\n\n&lt;human_in_the_loop&gt;\nAsk the user for clarification if:\n- The user's question is ambiguous.\n- You can't find matching events or properties.\n- You're unable to build a plan that effectively answers the user's question.\n&lt;/human_in_the_loop&gt;\n\nBelow you will find information on how to correctly discover the taxonomy of the user's data.\n\n<general_knowledge>\nTrends insights enable users to plot data from people, events, and properties however they want. They're useful for finding patterns in data, as well as monitoring users' product to ensure everything is running smoothly. Users can use multiple independent series in a single query to see trends. They can also use a formula to calculate a metric. Each series has its own set of property filters, so you must define them for each series. Trends insights do not require breakdowns or filters by default.\n</general_knowledge>\n\n<events>\nYou’ll be given a list of events in addition to the user’s question. Events are sorted by their popularity with the most popular events at the top of the list. Prioritize popular events. You must always specify events to use. Events always have an associated user’s profile. Assess whether the sequence of events suffices to answer the question before applying property filters or breakdowns.\n</events>\n\n<aggregation>\n**Determine the math aggregation** the user is asking for, such as totals, averages, ratios, or custom formulas. If not specified, choose a reasonable default based on the event type (e.g., total count). By default, the total count should be used. You can aggregate data by events, event's property values, projects, organizations, instances, or users. If you're aggregating by users or groups, there’s no need to check for their existence, as events without required associations will automatically be filtered out.\n\nAvailable math aggregations types for the event count are:\n- total count\n- average\n- minimum\n- maximum\n- median\n- 90th percentile\n- 95th percentile\n- 99th percentile\n- unique users\n- weekly active users\n- daily active users\n- first time for a user\n- unique projects\n- unique organizations\n- unique instances\n\nAvailable math aggregation types for event's property values are:\n- average\n- sum\n- minimum\n- maximum\n- median\n- 90th percentile\n- 95th percentile\n- 99th percentile\n\nAvailable math aggregation types counting number of events completed per user (intensity of usage) are:\n- average\n- minimum\n- maximum\n- median\n- 90th percentile\n- 95th percentile\n- 99th percentile\n\nExamples of using aggregation types:\n- `unique users` to find how many distinct users have logged the event per a day.\n- `average` by the `$session_diration` property to find out what was the average session duration of an event.\n- `99th percentile by users` to find out what was the 99th percentile of the event count by users.\n</aggregation>\n\n<math_formulas>\nIf the math aggregation is more complex or not listed above, use custom formulas to perform mathematical operations like calculating percentages or metrics. If you use a formula, you must use the following syntax: `A/B`, where `A` and `B` are the names of the series. You can combine math aggregations and formulas.\n\nWhen using a formula, you must:\n- Identify and specify **all** events needed to solve the formula.\n- Carefully review the list of available events to find appropriate events for each part of the formula.\n- Ensure that you find events corresponding to both the numerator and denominator in ratio calculations.\n\nExamples of using math formulas:\n- If you want to calculate the percentage of users who have completed onboarding, you need to find and use events similar to `$identify` and `onboarding complete`, so the formula will be `A / B`, where `A` is `onboarding complete` (unique users) and `B` is `$identify` (unique users).\n</math_formulas>\n\n&lt;property_filters&gt;\nUse property filters to provide a narrowed results. Only include property filters when they are essential to directly answer the user’s question. Avoid adding them if the question can be addressed without additional segmentation and always use the minimum set of property filters needed to answer the question. Properties have one of the four types: String, Numeric, Boolean, and DateTime.\n\nIMPORTANT: Do not check if a property is set unless the user explicitly asks for it.\n\nWhen using a property filter, you must:\n- **Prioritize properties directly related to the context or objective of the user's query.** Avoid using properties for identification like IDs because neither the user nor you can retrieve the data. Instead, prioritize filtering based on general properties like `paidCustomer` or `icp_score`.\n- **Ensure that you find both the property group and name.** Property groups must be one of the following: event, person, session, project, organization, instance.\n- After selecting a property, **validate that the property value accurately reflects the intended criteria**.\n- **Find the suitable operator for type** (e.g., `contains`, `is set`). The operators are listed below.\n- If the operator requires a value, use the tool to find the property values. Verify that you can answer the question with given property values. If you can't, try to find a different property or event.\n- You set logical operators to combine multiple properties of a single series: AND or OR.\n\nInfer the property groups from the user's request. If your first guess doesn't yield any results, try to adjust the property group. You must make sure that the property name matches the lookup value, e.g. if the user asks to find data about organizations with the name &quot;ACME&quot;, you must look for the property like &quot;organization name&quot;.\n\nIf the user asks for a specific timeframe, you must not look for a property and include it in the plan, as the next steps will handle it for you.\n\nSupported operators for the String or Numeric types are:\n- equals\n- doesn't equal\n- contains\n- doesn't contain\n- matches regex\n- doesn't match regex\n- is set\n- is not set\n\nSupported operators for the DateTime type are:\n- equals\n- doesn't equal\n- greater than\n- less than\n- is set\n- is not set\n\nSupported operators for the Boolean type are:\n- equals\n- doesn't equal\n- is set\n- is not set\n\nAll operators take a single value except for `equals` and `doesn't equal which can take one or more values.\n&lt;/property_filters&gt;\n\n<breakdowns>\nBreakdowns are used to segment data by property values of maximum three properties. They divide all defined trends series to multiple subseries based on the values of the property. Include breakdowns **only when they are essential to directly answer the user’s question**. You must not add breakdowns if the question can be addressed without additional segmentation. Always use the minimum set of breakdowns needed to answer the question.\n\nWhen using breakdowns, you must:\n- **Identify the property group** and name for each breakdown.\n- **Provide the property name** for each breakdown.\n- **Validate that the property value accurately reflects the intended criteria**.\n\nExamples of using breakdowns:\n- page views trend by country: you need to find a property such as `$geoip_country_code` and set it as a breakdown.\n- number of users who have completed onboarding by an organization: you need to find a property such as `organization name` and set it as a breakdown.\n</breakdowns>\n\n<reminders>\n- Ensure that any properties or breakdowns included are directly relevant to the context and objectives of the user’s question. Avoid unnecessary or unrelated details.\n- Avoid overcomplicating the response with excessive property filters or breakdowns. Focus on the simplest solution that effectively answers the user’s question.\n</reminders>\n---\n\nBegin! Reminder that you must ALWAYS respond with a valid JSON blob of a single action. Use tools if necessary. Respond directly if appropriate. Format is Action:```$JSON_BLOB``` then Observation.\n",
                            "id": null,
                            "name": null,
                            "response_metadata": {},
                            "type": "system"
                        },
                        {
                            "additional_kwargs": {},
                            "content": "\nHere are the event names.\n&lt;defined_events&gt;&lt;event&gt;&lt;name&gt;All Events&lt;/name&gt;&lt;description&gt;All events. This is a wildcard that matches all events.&lt;/description&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;$ai_generation&lt;/name&gt;&lt;description&gt;AI Generation (LLM). A call to an LLM model. Contains the input prompt, output, model used and costs.&lt;/description&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;$ai_trace&lt;/name&gt;&lt;description&gt;AI Trace (LLM). A generative AI trace. Usually a trace tracks a single user interaction and contains one or more AI generation calls&lt;/description&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;$pageview&lt;/name&gt;&lt;description&gt;Pageview. When a user loads (or reloads) a page.&lt;/description&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;query completed&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;$web_vitals&lt;/name&gt;&lt;description&gt;Web vitals. Automatically captured web vitals data&lt;/description&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;update user properties&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;time to see data&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;sidebar closed&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;client_request_failure&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;$ai_span&lt;/name&gt;&lt;description&gt;AI Span (LLM). A generative AI span. Usually a span tracks a unit of work for a trace of generative AI models (LLMs)&lt;/description&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;insight person modal viewed&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;query failed&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;recording list fetched&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;timezone component viewed&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;$rageclick&lt;/name&gt;&lt;description&gt;Rageclick. A user has rapidly and repeatedly clicked in a single place&lt;/description&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;insight created&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;insight viewed&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;user updated&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;insight analyzed&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;definition hovered&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;chat with ai&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;recording list filters changed&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;dashboard loading time&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;toast error&lt;/name&gt;&lt;/event&gt;&lt;/defined_events&gt;\n",
                            "id": null,
                            "name": null,
                            "response_metadata": {},
                            "type": "human"
                        },
                        {
                            "additional_kwargs": {},
                            "content": "\nAnswer the following question as best you can.\nQuestion: What events, properties and/or property values should I use to answer this question \"What's the trend in $pageview events?\"?\n",
                            "id": null,
                            "name": null,
                            "response_metadata": {},
                            "type": "human"
                        },
                        {
                            "additional_kwargs": {},
                            "content": "\nThought: To answer the question &quot;What's the trend in $pageview events?&quot;, I need to retrieve the properties associated with the `$pageview` event. This will help in identifying any relevant property filters or breakdowns that can be applied to analyze the trend effectively.\n\nAction:\n```json\n{\n  &quot;action&quot;: &quot;retrieve_event_properties&quot;,\n  &quot;action_input&quot;: &quot;$pageview&quot;\n}\n```\nObservation: &lt;properties&gt;&lt;Numeric&gt;&lt;prop&gt;&lt;name&gt;$prev_pageview_duration&lt;/name&gt;&lt;description&gt;posthog-js adds these to the page leave event, they are used in web analytics calculations&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$prev_pageview_max_scroll_percentage&lt;/name&gt;&lt;description&gt;posthog-js adds these to the page leave event, they are used in web analytics calculations&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$prev_pageview_last_content_percentage&lt;/name&gt;&lt;description&gt;posthog-js adds these to the page leave event, they are used in web analytics calculations&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$prev_pageview_max_content_percentage&lt;/name&gt;&lt;description&gt;posthog-js adds these to the page leave event, they are used in web analytics calculations&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$prev_pageview_last_scroll_percentage&lt;/name&gt;&lt;description&gt;posthog-js adds these to the page leave event, they are used in web analytics calculations&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$prev_pageview_last_content&lt;/name&gt;&lt;description&gt;posthog-js adds these to the page leave event, they are used in web analytics calculations&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$prev_pageview_last_scroll&lt;/name&gt;&lt;description&gt;posthog-js adds these to the page leave event, they are used in web analytics calculations&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$prev_pageview_max_content&lt;/name&gt;&lt;description&gt;posthog-js adds these to the page leave event, they are used in web analytics calculations&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$prev_pageview_max_scroll&lt;/name&gt;&lt;description&gt;posthog-js adds these to the page leave event, they are used in web analytics calculations&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$viewport_height&lt;/name&gt;&lt;description&gt;The height of the user's actual browser window (in pixels).&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$screen_width&lt;/name&gt;&lt;description&gt;The width of the user's entire screen (in pixels).&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$browser_version&lt;/name&gt;&lt;description&gt;The version of the browser that was used. Used in combination with Browser.&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$viewport_width&lt;/name&gt;&lt;description&gt;The width of the user's actual browser window (in pixels).&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$screen_height&lt;/name&gt;&lt;description&gt;The height of the user's entire screen (in pixels).&lt;/description&gt;&lt;/prop&gt;&lt;/Numeric&gt;&lt;String&gt;&lt;prop&gt;&lt;name&gt;$current_url&lt;/name&gt;&lt;description&gt;The URL visited at the time of the event.&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$pathname&lt;/name&gt;&lt;description&gt;The path of the Current URL, which means everything in the url after the domain.&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$prev_pageview_pathname&lt;/name&gt;&lt;description&gt;posthog-js adds these to the page leave event, they are used in web analytics calculations&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;title&lt;/name&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;commit_sha&lt;/name&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$lib_version&lt;/name&gt;&lt;description&gt;Version of the library used to send the event. Used in combination with Library.&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$lib&lt;/name&gt;&lt;description&gt;What library was used to send the event.&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$device_type&lt;/name&gt;&lt;description&gt;The type of device that was used.&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$browser_type&lt;/name&gt;&lt;description&gt;This is only added when posthog-js config.opt_out_useragent_filter is true.&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$os_version&lt;/name&gt;&lt;description&gt;The Operating System version.&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$raw_user_agent&lt;/name&gt;&lt;description&gt;PostHog process information like browser, OS, and device type from the user agent string. This is the raw user agent string.&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$referrer&lt;/name&gt;&lt;description&gt;URL of where the user came from.&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$browser_language&lt;/name&gt;&lt;description&gt;Language.&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$feature/artificial-hog&lt;/name&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$lib_custom_api_host&lt;/name&gt;&lt;description&gt;The custom API host used to send the event.&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$referring_domain&lt;/name&gt;&lt;description&gt;Domain of where the user came from.&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$last_posthog_reset&lt;/name&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$browser_language_prefix&lt;/name&gt;&lt;description&gt;Language prefix.&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$host&lt;/name&gt;&lt;description&gt;The hostname of the Current URL.&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;realm&lt;/name&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$feature/llm-observability&lt;/name&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$browser&lt;/name&gt;&lt;description&gt;Name of the browser the user has used.&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$os&lt;/name&gt;&lt;description&gt;The operating system of the user.&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$user_id&lt;/name&gt;&lt;description&gt;This variable will be set to the distinct ID if you've called posthog.identify('distinct id'). If the user is anonymous, it'll be empty.&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;distinct_id&lt;/name&gt;&lt;/prop&gt;&lt;/String&gt;&lt;Boolean&gt;&lt;prop&gt;&lt;name&gt;has_billing_plan&lt;/name&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$is_identified&lt;/name&gt;&lt;description&gt;When the person was identified&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;email_service_available&lt;/name&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;slack_service_available&lt;/name&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;is_demo_project&lt;/name&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$web_vitals_enabled_server_side&lt;/name&gt;&lt;description&gt;Whether web vitals was enabled in remote config&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$exception_capture_enabled_server_side&lt;/name&gt;&lt;/prop&gt;&lt;/Boolean&gt;&lt;/properties&gt;\nThought: \n",
                            "id": null,
                            "name": null,
                            "response_metadata": {},
                            "type": "human"
                        }
                    ]
                },
                "$ai_span_id": "851f51f4-9fa0-4c1a-a94b-07e3491ca732",
                "$lib": "posthog-python",
                "$ai_latency": 0.0003440380096435547,
                "$ip": "192.168.97.1",
                "$plugins_succeeded": ["GeoIP (14)"],
                "$plugins_failed": []
            }
        },
        {
            "createdAt": "2025-01-29T16:05:02.044000+00:00",
            "event": "$ai_span",
            "id": "0194b2cf-1188-7a69-924c-876e08ca9904",
            "properties": {
                "$ai_span_id": "08dd3d68-531c-46b8-b8fc-e20c3c0a6828",
                "conversation_id": "0194b2ce-ef92-0000-008e-c6ba293c8c7d",
                "$ai_parent_id": "7aac22f8-7cb8-400c-a218-a74303d14fbd",
                "is_first_conversation": true,
                "$ai_latency": 0.00013375282287597656,
                "$lib_version": "3.11.0",
                "$ai_trace_id": "537b7988-0186-494f-a313-77a5a8f7db26",
                "$ai_span_name": "parse_react_agent_output",
                "$ai_input_state": {
                    "additional_kwargs": {},
                    "content": "I have retrieved the properties associated with the `$pageview` event. To analyze the trend in `$pageview` events, I will focus on the total count of these events over time. This will provide a clear view of the trend without needing additional property filters or breakdowns, as the question does not specify any particular segmentation or filtering criteria.\n\nAction:\n```json\n{\n  \"action\": \"final_answer\",\n  \"action_input\": \"Events:\\n- $pageview\\n    - math operation: total count\"\n}\n```",
                    "example": false,
                    "id": "run-b7dc4634-23af-42d4-9495-69bf127e3af0",
                    "invalid_tool_calls": [],
                    "name": null,
                    "response_metadata": {
                        "finish_reason": "stop",
                        "model_name": "gpt-4o-2024-08-06",
                        "system_fingerprint": "fp_50cad350e4"
                    },
                    "tool_calls": [],
                    "type": "ai",
                    "usage_metadata": {
                        "input_token_details": {
                            "audio": 0,
                            "cache_read": 3456
                        },
                        "input_tokens": 5637,
                        "output_token_details": {
                            "audio": 0,
                            "reasoning": 0
                        },
                        "output_tokens": 108,
                        "total_tokens": 5745
                    }
                },
                "$ai_output_state": {
                    "log": "I have retrieved the properties associated with the `$pageview` event. To analyze the trend in `$pageview` events, I will focus on the total count of these events over time. This will provide a clear view of the trend without needing additional property filters or breakdowns, as the question does not specify any particular segmentation or filtering criteria.\n\nAction:\n```json\n{\n  \"action\": \"final_answer\",\n  \"action_input\": \"Events:\\n- $pageview\\n    - math operation: total count\"\n}\n```",
                    "tool": "final_answer",
                    "tool_input": "Events:\n- $pageview\n    - math operation: total count",
                    "type": "AgentAction"
                },
                "$geoip_disable": true,
                "$lib": "posthog-python",
                "$ip": "192.168.97.1",
                "$plugins_succeeded": ["GeoIP (14)"],
                "$plugins_failed": []
            }
        },
        {
            "createdAt": "2025-01-29T16:05:02.044000+00:00",
            "event": "$ai_span",
            "id": "0194b2cf-1188-7c52-934f-05eaeee0cd81",
            "properties": {
                "$ai_span_id": "7aac22f8-7cb8-400c-a218-a74303d14fbd",
                "$ai_output_state": {
                    "log": "I have retrieved the properties associated with the `$pageview` event. To analyze the trend in `$pageview` events, I will focus on the total count of these events over time. This will provide a clear view of the trend without needing additional property filters or breakdowns, as the question does not specify any particular segmentation or filtering criteria.\n\nAction:\n```json\n{\n  \"action\": \"final_answer\",\n  \"action_input\": \"Events:\\n- $pageview\\n    - math operation: total count\"\n}\n```",
                    "tool": "final_answer",
                    "tool_input": "Events:\n- $pageview\n    - math operation: total count",
                    "type": "AgentAction"
                },
                "$ai_parent_id": "763eb20e-1500-4c18-9e97-e6e53f7692fa",
                "$ai_latency": 3.018855094909668,
                "$ai_span_name": "RunnableSequence",
                "is_first_conversation": true,
                "$ai_input_state": {
                    "agent_scratchpad": "To answer the question \"What's the trend in $pageview events?\", I need to retrieve the properties associated with the `$pageview` event. This will help in identifying any relevant property filters or breakdowns that can be applied to analyze the trend effectively.\n\nAction:\n```json\n{\n  \"action\": \"retrieve_event_properties\",\n  \"action_input\": \"$pageview\"\n}\n```\nObservation: <properties><Numeric><prop><name>$prev_pageview_duration</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>$prev_pageview_max_scroll_percentage</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>$prev_pageview_last_content_percentage</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>$prev_pageview_max_content_percentage</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>$prev_pageview_last_scroll_percentage</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>$prev_pageview_last_content</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>$prev_pageview_last_scroll</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>$prev_pageview_max_content</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>$prev_pageview_max_scroll</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>$viewport_height</name><description>The height of the user's actual browser window (in pixels).</description></prop><prop><name>$screen_width</name><description>The width of the user's entire screen (in pixels).</description></prop><prop><name>$browser_version</name><description>The version of the browser that was used. Used in combination with Browser.</description></prop><prop><name>$viewport_width</name><description>The width of the user's actual browser window (in pixels).</description></prop><prop><name>$screen_height</name><description>The height of the user's entire screen (in pixels).</description></prop></Numeric><String><prop><name>$current_url</name><description>The URL visited at the time of the event.</description></prop><prop><name>$pathname</name><description>The path of the Current URL, which means everything in the url after the domain.</description></prop><prop><name>$prev_pageview_pathname</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>title</name></prop><prop><name>commit_sha</name></prop><prop><name>$lib_version</name><description>Version of the library used to send the event. Used in combination with Library.</description></prop><prop><name>$lib</name><description>What library was used to send the event.</description></prop><prop><name>$device_type</name><description>The type of device that was used.</description></prop><prop><name>$browser_type</name><description>This is only added when posthog-js config.opt_out_useragent_filter is true.</description></prop><prop><name>$os_version</name><description>The Operating System version.</description></prop><prop><name>$raw_user_agent</name><description>PostHog process information like browser, OS, and device type from the user agent string. This is the raw user agent string.</description></prop><prop><name>$referrer</name><description>URL of where the user came from.</description></prop><prop><name>$browser_language</name><description>Language.</description></prop><prop><name>$feature/artificial-hog</name></prop><prop><name>$lib_custom_api_host</name><description>The custom API host used to send the event.</description></prop><prop><name>$referring_domain</name><description>Domain of where the user came from.</description></prop><prop><name>$last_posthog_reset</name></prop><prop><name>$browser_language_prefix</name><description>Language prefix.</description></prop><prop><name>$host</name><description>The hostname of the Current URL.</description></prop><prop><name>realm</name></prop><prop><name>$feature/llm-observability</name></prop><prop><name>$browser</name><description>Name of the browser the user has used.</description></prop><prop><name>$os</name><description>The operating system of the user.</description></prop><prop><name>$user_id</name><description>This variable will be set to the distinct ID if you've called posthog.identify('distinct id'). If the user is anonymous, it'll be empty.</description></prop><prop><name>distinct_id</name></prop></String><Boolean><prop><name>has_billing_plan</name></prop><prop><name>$is_identified</name><description>When the person was identified</description></prop><prop><name>email_service_available</name></prop><prop><name>slack_service_available</name></prop><prop><name>is_demo_project</name></prop><prop><name>$web_vitals_enabled_server_side</name><description>Whether web vitals was enabled in remote config</description></prop><prop><name>$exception_capture_enabled_server_side</name></prop></Boolean></properties>\nThought: ",
                    "core_memory": "Chat app for hedgehogs.",
                    "core_memory_instructions": "You have access to the core memory in the <core_memory> tag, which stores information about the user's company and product.",
                    "events": "<defined_events><event><name>All Events</name><description>All events. This is a wildcard that matches all events.</description></event><event><name>$ai_generation</name><description>AI Generation (LLM). A call to an LLM model. Contains the input prompt, output, model used and costs.</description></event><event><name>$ai_trace</name><description>AI Trace (LLM). A generative AI trace. Usually a trace tracks a single user interaction and contains one or more AI generation calls</description></event><event><name>$pageview</name><description>Pageview. When a user loads (or reloads) a page.</description></event><event><name>query completed</name></event><event><name>$web_vitals</name><description>Web vitals. Automatically captured web vitals data</description></event><event><name>update user properties</name></event><event><name>time to see data</name></event><event><name>sidebar closed</name></event><event><name>client_request_failure</name></event><event><name>$ai_span</name><description>AI Span (LLM). A generative AI span. Usually a span tracks a unit of work for a trace of generative AI models (LLMs)</description></event><event><name>insight person modal viewed</name></event><event><name>query failed</name></event><event><name>recording list fetched</name></event><event><name>timezone component viewed</name></event><event><name>$rageclick</name><description>Rageclick. A user has rapidly and repeatedly clicked in a single place</description></event><event><name>insight created</name></event><event><name>insight viewed</name></event><event><name>user updated</name></event><event><name>insight analyzed</name></event><event><name>definition hovered</name></event><event><name>chat with ai</name></event><event><name>recording list filters changed</name></event><event><name>dashboard loading time</name></event><event><name>toast error</name></event></defined_events>",
                    "groups": ["project", "organization", "instance"],
                    "react_format": "You have access to the following tools:\nretrieve_event_properties(event_name: str) - \nUse this tool to retrieve the property names of an event that the user has in their taxonomy. You will receive a list of properties containing their name, value type, and description, or a message that properties have not been found.\n\n- **Try other events** if the tool doesn't return any properties.\n- **Prioritize properties that are directly related to the context or objective of the user's query.**\n- **Avoid using ambiguous properties** unless their relevance is explicitly confirmed.\n\nArgs:\n    event_name: The name of the event that you want to retrieve properties for.\n\nretrieve_event_property_values(event_name: str, property_name: str) - \nUse this tool to retrieve the property values for an event that the user has in their taxonomy. Adjust filters to these values. You will receive a list of property values or a message that property values have not been found. Some properties can have many values, so the output will be truncated. Use your judgment to find a proper value.\n\nArgs:\n    event_name: The name of the event that you want to retrieve values for.\n    property_name: The name of the property that you want to retrieve values for.\n\nretrieve_entity_properties(entity: Literal['person', 'session', 'project', 'organization', 'instance']) - \nUse this tool to retrieve property names for a property group (entity) that the user has in their taxonomy. You will receive a list of properties containing their name, value type, and description, or a message that properties have not been found.\n\n- **Infer the property groups from the user's request.**\n- **Try other entities** if the tool doesn't return any properties.\n- **Prioritize properties that are directly related to the context or objective of the user's query.**\n- **Avoid using ambiguous properties** unless their relevance is explicitly confirmed.\n\nArgs:\n    entity: The type of the entity that you want to retrieve properties for.\n\nretrieve_entity_property_values(entity: Literal['person', 'session', 'project', 'organization', 'instance'], property_name: str) - \nUse this tool to retrieve property values for a property name that the user has in their taxonomy. Adjust filters to these values. You will receive a list of property values or a message that property values have not been found. Some properties can have many values, so the output will be truncated. Use your judgment to find a proper value.\n\nArgs:\n    entity: The type of the entity that you want to retrieve properties for.\n    property_name: The name of the property that you want to retrieve values for.\n\nask_user_for_help(question: str) - \nUse this tool to ask a question to the user. Your question must be concise and clear.\n\nArgs:\n    question: The question you want to ask.\n\nfinal_answer(final_response: str) - \nUse this tool to provide the final answer to the user's question.\n\nAnswer in the following format:\n```\nEvents:\n- event 1\n    - math operation: total\n    - property filter 1:\n        - entity\n        - property name\n        - property type\n        - operator\n        - property value\n    - property filter 2... Repeat for each property filter.\n- event 2\n    - math operation: average by `property name`.\n    - property filter 1:\n        - entity\n        - property name\n        - property type\n        - operator\n        - property value\n    - property filter 2... Repeat for each property filter.\n- Repeat for each event.\n\n(if a formula is used)\nFormula:\n`A/B`, where `A` is the first event and `B` is the second event.\n\n(if a breakdown is used)\nBreakdown by:\n- breakdown 1:\n    - entity\n    - property name\n- Repeat for each breakdown.\n```\n\nArgs:\n    final_response: List all events and properties that you want to use to answer the question.\n\n\nUse a JSON blob to specify a tool by providing an action key (tool name) and an action_input key (tool input).\n\nValid \"action\" values: retrieve_event_properties, retrieve_event_property_values, retrieve_entity_properties, retrieve_entity_property_values, ask_user_for_help, final_answer\n\nProvide only ONE action per $JSON_BLOB, as shown:\n\n```\n{\n  \"action\": $TOOL_NAME,\n  \"action_input\": $INPUT\n}\n```\n\nFollow this format:\n\nQuestion: input question to answer\nThought: consider previous and subsequent steps\nAction:\n```\n$JSON_BLOB\n```\nObservation: action result\n... (repeat Thought/Action/Observation N times)\nThought: I know what to respond\nAction:\n```\n{\n  \"action\": \"final_answer\",\n  \"action_input\": \"Final response to human\"\n}\n```",
                    "react_format_reminder": "Begin! Reminder that you must ALWAYS respond with a valid JSON blob of a single action. Use tools if necessary. Respond directly if appropriate. Format is Action:```$JSON_BLOB``` then Observation.",
                    "react_human_in_the_loop": "<human_in_the_loop>\nAsk the user for clarification if:\n- The user's question is ambiguous.\n- You can't find matching events or properties.\n- You're unable to build a plan that effectively answers the user's question.\n</human_in_the_loop>",
                    "react_property_filters": "<property_filters>\nUse property filters to provide a narrowed results. Only include property filters when they are essential to directly answer the user’s question. Avoid adding them if the question can be addressed without additional segmentation and always use the minimum set of property filters needed to answer the question. Properties have one of the four types: String, Numeric, Boolean, and DateTime.\n\nIMPORTANT: Do not check if a property is set unless the user explicitly asks for it.\n\nWhen using a property filter, you must:\n- **Prioritize properties directly related to the context or objective of the user's query.** Avoid using properties for identification like IDs because neither the user nor you can retrieve the data. Instead, prioritize filtering based on general properties like `paidCustomer` or `icp_score`.\n- **Ensure that you find both the property group and name.** Property groups must be one of the following: event, person, session, project, organization, instance.\n- After selecting a property, **validate that the property value accurately reflects the intended criteria**.\n- **Find the suitable operator for type** (e.g., `contains`, `is set`). The operators are listed below.\n- If the operator requires a value, use the tool to find the property values. Verify that you can answer the question with given property values. If you can't, try to find a different property or event.\n- You set logical operators to combine multiple properties of a single series: AND or OR.\n\nInfer the property groups from the user's request. If your first guess doesn't yield any results, try to adjust the property group. You must make sure that the property name matches the lookup value, e.g. if the user asks to find data about organizations with the name \"ACME\", you must look for the property like \"organization name\".\n\nIf the user asks for a specific timeframe, you must not look for a property and include it in the plan, as the next steps will handle it for you.\n\nSupported operators for the String or Numeric types are:\n- equals\n- doesn't equal\n- contains\n- doesn't contain\n- matches regex\n- doesn't match regex\n- is set\n- is not set\n\nSupported operators for the DateTime type are:\n- equals\n- doesn't equal\n- greater than\n- less than\n- is set\n- is not set\n\nSupported operators for the Boolean type are:\n- equals\n- doesn't equal\n- is set\n- is not set\n\nAll operators take a single value except for `equals` and `doesn't equal which can take one or more values.\n</property_filters>"
                },
                "conversation_id": "0194b2ce-ef92-0000-008e-c6ba293c8c7d",
                "$lib": "posthog-python",
                "$lib_version": "3.11.0",
                "$geoip_disable": true,
                "$ai_trace_id": "537b7988-0186-494f-a313-77a5a8f7db26",
                "$ip": "192.168.97.1",
                "$plugins_succeeded": ["GeoIP (14)"],
                "$plugins_failed": []
            }
        },
        {
            "createdAt": "2025-01-29T16:05:02.044000+00:00",
            "event": "$ai_generation",
            "id": "0194b2cf-1188-738f-87ff-9579229699d6",
            "properties": {
                "$ai_provider": "openai",
                "$ai_output_choices": [
                    {
                        "content": "I have retrieved the properties associated with the `$pageview` event. To analyze the trend in `$pageview` events, I will focus on the total count of these events over time. This will provide a clear view of the trend without needing additional property filters or breakdowns, as the question does not specify any particular segmentation or filtering criteria.\n\nAction:\n```json\n{\n  \"action\": \"final_answer\",\n  \"action_input\": \"Events:\\n- $pageview\\n    - math operation: total count\"\n}\n```",
                        "role": "assistant"
                    }
                ],
                "$ai_base_url": null,
                "is_first_conversation": true,
                "$lib_version": "3.11.0",
                "$ai_output_tokens": 108,
                "$ai_trace_id": "537b7988-0186-494f-a313-77a5a8f7db26",
                "$lib": "posthog-python",
                "$ai_model": "gpt-4o",
                "$ai_input": [
                    {
                        "content": "\n<agent_info>\nYou are an expert product analyst agent specializing in data visualization and trends analysis. Your primary task is to understand a user's data taxonomy and create a plan for building a visualization that answers the user's question. This plan should focus on trends insights, including a series of events, property filters, and values of property filters.\n\nYou have access to the core memory in the &lt;core_memory&gt; tag, which stores information about the user's company and product.\n\nYou have access to the following tools:\nretrieve_event_properties(event_name: str) - \nUse this tool to retrieve the property names of an event that the user has in their taxonomy. You will receive a list of properties containing their name, value type, and description, or a message that properties have not been found.\n\n- **Try other events** if the tool doesn't return any properties.\n- **Prioritize properties that are directly related to the context or objective of the user's query.**\n- **Avoid using ambiguous properties** unless their relevance is explicitly confirmed.\n\nArgs:\n    event_name: The name of the event that you want to retrieve properties for.\n\nretrieve_event_property_values(event_name: str, property_name: str) - \nUse this tool to retrieve the property values for an event that the user has in their taxonomy. Adjust filters to these values. You will receive a list of property values or a message that property values have not been found. Some properties can have many values, so the output will be truncated. Use your judgment to find a proper value.\n\nArgs:\n    event_name: The name of the event that you want to retrieve values for.\n    property_name: The name of the property that you want to retrieve values for.\n\nretrieve_entity_properties(entity: Literal['person', 'session', 'project', 'organization', 'instance']) - \nUse this tool to retrieve property names for a property group (entity) that the user has in their taxonomy. You will receive a list of properties containing their name, value type, and description, or a message that properties have not been found.\n\n- **Infer the property groups from the user's request.**\n- **Try other entities** if the tool doesn't return any properties.\n- **Prioritize properties that are directly related to the context or objective of the user's query.**\n- **Avoid using ambiguous properties** unless their relevance is explicitly confirmed.\n\nArgs:\n    entity: The type of the entity that you want to retrieve properties for.\n\nretrieve_entity_property_values(entity: Literal['person', 'session', 'project', 'organization', 'instance'], property_name: str) - \nUse this tool to retrieve property values for a property name that the user has in their taxonomy. Adjust filters to these values. You will receive a list of property values or a message that property values have not been found. Some properties can have many values, so the output will be truncated. Use your judgment to find a proper value.\n\nArgs:\n    entity: The type of the entity that you want to retrieve properties for.\n    property_name: The name of the property that you want to retrieve values for.\n\nask_user_for_help(question: str) - \nUse this tool to ask a question to the user. Your question must be concise and clear.\n\nArgs:\n    question: The question you want to ask.\n\nfinal_answer(final_response: str) - \nUse this tool to provide the final answer to the user's question.\n\nAnswer in the following format:\n```\nEvents:\n- event 1\n    - math operation: total\n    - property filter 1:\n        - entity\n        - property name\n        - property type\n        - operator\n        - property value\n    - property filter 2... Repeat for each property filter.\n- event 2\n    - math operation: average by `property name`.\n    - property filter 1:\n        - entity\n        - property name\n        - property type\n        - operator\n        - property value\n    - property filter 2... Repeat for each property filter.\n- Repeat for each event.\n\n(if a formula is used)\nFormula:\n`A/B`, where `A` is the first event and `B` is the second event.\n\n(if a breakdown is used)\nBreakdown by:\n- breakdown 1:\n    - entity\n    - property name\n- Repeat for each breakdown.\n```\n\nArgs:\n    final_response: List all events and properties that you want to use to answer the question.\n\n\nUse a JSON blob to specify a tool by providing an action key (tool name) and an action_input key (tool input).\n\nValid &quot;action&quot; values: retrieve_event_properties, retrieve_event_property_values, retrieve_entity_properties, retrieve_entity_property_values, ask_user_for_help, final_answer\n\nProvide only ONE action per $JSON_BLOB, as shown:\n\n```\n{\n  &quot;action&quot;: $TOOL_NAME,\n  &quot;action_input&quot;: $INPUT\n}\n```\n\nFollow this format:\n\nQuestion: input question to answer\nThought: consider previous and subsequent steps\nAction:\n```\n$JSON_BLOB\n```\nObservation: action result\n... (repeat Thought/Action/Observation N times)\nThought: I know what to respond\nAction:\n```\n{\n  &quot;action&quot;: &quot;final_answer&quot;,\n  &quot;action_input&quot;: &quot;Final response to human&quot;\n}\n```\n</agent_info>\n\n<core_memory>\nChat app for hedgehogs.\n</core_memory>\n\n&lt;human_in_the_loop&gt;\nAsk the user for clarification if:\n- The user's question is ambiguous.\n- You can't find matching events or properties.\n- You're unable to build a plan that effectively answers the user's question.\n&lt;/human_in_the_loop&gt;\n\nBelow you will find information on how to correctly discover the taxonomy of the user's data.\n\n<general_knowledge>\nTrends insights enable users to plot data from people, events, and properties however they want. They're useful for finding patterns in data, as well as monitoring users' product to ensure everything is running smoothly. Users can use multiple independent series in a single query to see trends. They can also use a formula to calculate a metric. Each series has its own set of property filters, so you must define them for each series. Trends insights do not require breakdowns or filters by default.\n</general_knowledge>\n\n<events>\nYou’ll be given a list of events in addition to the user’s question. Events are sorted by their popularity with the most popular events at the top of the list. Prioritize popular events. You must always specify events to use. Events always have an associated user’s profile. Assess whether the sequence of events suffices to answer the question before applying property filters or breakdowns.\n</events>\n\n<aggregation>\n**Determine the math aggregation** the user is asking for, such as totals, averages, ratios, or custom formulas. If not specified, choose a reasonable default based on the event type (e.g., total count). By default, the total count should be used. You can aggregate data by events, event's property values, projects, organizations, instances, or users. If you're aggregating by users or groups, there’s no need to check for their existence, as events without required associations will automatically be filtered out.\n\nAvailable math aggregations types for the event count are:\n- total count\n- average\n- minimum\n- maximum\n- median\n- 90th percentile\n- 95th percentile\n- 99th percentile\n- unique users\n- weekly active users\n- daily active users\n- first time for a user\n- unique projects\n- unique organizations\n- unique instances\n\nAvailable math aggregation types for event's property values are:\n- average\n- sum\n- minimum\n- maximum\n- median\n- 90th percentile\n- 95th percentile\n- 99th percentile\n\nAvailable math aggregation types counting number of events completed per user (intensity of usage) are:\n- average\n- minimum\n- maximum\n- median\n- 90th percentile\n- 95th percentile\n- 99th percentile\n\nExamples of using aggregation types:\n- `unique users` to find how many distinct users have logged the event per a day.\n- `average` by the `$session_diration` property to find out what was the average session duration of an event.\n- `99th percentile by users` to find out what was the 99th percentile of the event count by users.\n</aggregation>\n\n<math_formulas>\nIf the math aggregation is more complex or not listed above, use custom formulas to perform mathematical operations like calculating percentages or metrics. If you use a formula, you must use the following syntax: `A/B`, where `A` and `B` are the names of the series. You can combine math aggregations and formulas.\n\nWhen using a formula, you must:\n- Identify and specify **all** events needed to solve the formula.\n- Carefully review the list of available events to find appropriate events for each part of the formula.\n- Ensure that you find events corresponding to both the numerator and denominator in ratio calculations.\n\nExamples of using math formulas:\n- If you want to calculate the percentage of users who have completed onboarding, you need to find and use events similar to `$identify` and `onboarding complete`, so the formula will be `A / B`, where `A` is `onboarding complete` (unique users) and `B` is `$identify` (unique users).\n</math_formulas>\n\n&lt;property_filters&gt;\nUse property filters to provide a narrowed results. Only include property filters when they are essential to directly answer the user’s question. Avoid adding them if the question can be addressed without additional segmentation and always use the minimum set of property filters needed to answer the question. Properties have one of the four types: String, Numeric, Boolean, and DateTime.\n\nIMPORTANT: Do not check if a property is set unless the user explicitly asks for it.\n\nWhen using a property filter, you must:\n- **Prioritize properties directly related to the context or objective of the user's query.** Avoid using properties for identification like IDs because neither the user nor you can retrieve the data. Instead, prioritize filtering based on general properties like `paidCustomer` or `icp_score`.\n- **Ensure that you find both the property group and name.** Property groups must be one of the following: event, person, session, project, organization, instance.\n- After selecting a property, **validate that the property value accurately reflects the intended criteria**.\n- **Find the suitable operator for type** (e.g., `contains`, `is set`). The operators are listed below.\n- If the operator requires a value, use the tool to find the property values. Verify that you can answer the question with given property values. If you can't, try to find a different property or event.\n- You set logical operators to combine multiple properties of a single series: AND or OR.\n\nInfer the property groups from the user's request. If your first guess doesn't yield any results, try to adjust the property group. You must make sure that the property name matches the lookup value, e.g. if the user asks to find data about organizations with the name &quot;ACME&quot;, you must look for the property like &quot;organization name&quot;.\n\nIf the user asks for a specific timeframe, you must not look for a property and include it in the plan, as the next steps will handle it for you.\n\nSupported operators for the String or Numeric types are:\n- equals\n- doesn't equal\n- contains\n- doesn't contain\n- matches regex\n- doesn't match regex\n- is set\n- is not set\n\nSupported operators for the DateTime type are:\n- equals\n- doesn't equal\n- greater than\n- less than\n- is set\n- is not set\n\nSupported operators for the Boolean type are:\n- equals\n- doesn't equal\n- is set\n- is not set\n\nAll operators take a single value except for `equals` and `doesn't equal which can take one or more values.\n&lt;/property_filters&gt;\n\n<breakdowns>\nBreakdowns are used to segment data by property values of maximum three properties. They divide all defined trends series to multiple subseries based on the values of the property. Include breakdowns **only when they are essential to directly answer the user’s question**. You must not add breakdowns if the question can be addressed without additional segmentation. Always use the minimum set of breakdowns needed to answer the question.\n\nWhen using breakdowns, you must:\n- **Identify the property group** and name for each breakdown.\n- **Provide the property name** for each breakdown.\n- **Validate that the property value accurately reflects the intended criteria**.\n\nExamples of using breakdowns:\n- page views trend by country: you need to find a property such as `$geoip_country_code` and set it as a breakdown.\n- number of users who have completed onboarding by an organization: you need to find a property such as `organization name` and set it as a breakdown.\n</breakdowns>\n\n<reminders>\n- Ensure that any properties or breakdowns included are directly relevant to the context and objectives of the user’s question. Avoid unnecessary or unrelated details.\n- Avoid overcomplicating the response with excessive property filters or breakdowns. Focus on the simplest solution that effectively answers the user’s question.\n</reminders>\n---\n\nBegin! Reminder that you must ALWAYS respond with a valid JSON blob of a single action. Use tools if necessary. Respond directly if appropriate. Format is Action:```$JSON_BLOB``` then Observation.\n",
                        "role": "system"
                    },
                    {
                        "content": "\nHere are the event names.\n&lt;defined_events&gt;&lt;event&gt;&lt;name&gt;All Events&lt;/name&gt;&lt;description&gt;All events. This is a wildcard that matches all events.&lt;/description&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;$ai_generation&lt;/name&gt;&lt;description&gt;AI Generation (LLM). A call to an LLM model. Contains the input prompt, output, model used and costs.&lt;/description&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;$ai_trace&lt;/name&gt;&lt;description&gt;AI Trace (LLM). A generative AI trace. Usually a trace tracks a single user interaction and contains one or more AI generation calls&lt;/description&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;$pageview&lt;/name&gt;&lt;description&gt;Pageview. When a user loads (or reloads) a page.&lt;/description&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;query completed&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;$web_vitals&lt;/name&gt;&lt;description&gt;Web vitals. Automatically captured web vitals data&lt;/description&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;update user properties&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;time to see data&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;sidebar closed&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;client_request_failure&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;$ai_span&lt;/name&gt;&lt;description&gt;AI Span (LLM). A generative AI span. Usually a span tracks a unit of work for a trace of generative AI models (LLMs)&lt;/description&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;insight person modal viewed&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;query failed&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;recording list fetched&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;timezone component viewed&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;$rageclick&lt;/name&gt;&lt;description&gt;Rageclick. A user has rapidly and repeatedly clicked in a single place&lt;/description&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;insight created&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;insight viewed&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;user updated&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;insight analyzed&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;definition hovered&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;chat with ai&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;recording list filters changed&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;dashboard loading time&lt;/name&gt;&lt;/event&gt;&lt;event&gt;&lt;name&gt;toast error&lt;/name&gt;&lt;/event&gt;&lt;/defined_events&gt;\n\n\nAnswer the following question as best you can.\nQuestion: What events, properties and/or property values should I use to answer this question \"What's the trend in $pageview events?\"?\n\n\nThought: To answer the question &quot;What's the trend in $pageview events?&quot;, I need to retrieve the properties associated with the `$pageview` event. This will help in identifying any relevant property filters or breakdowns that can be applied to analyze the trend effectively.\n\nAction:\n```json\n{\n  &quot;action&quot;: &quot;retrieve_event_properties&quot;,\n  &quot;action_input&quot;: &quot;$pageview&quot;\n}\n```\nObservation: &lt;properties&gt;&lt;Numeric&gt;&lt;prop&gt;&lt;name&gt;$prev_pageview_duration&lt;/name&gt;&lt;description&gt;posthog-js adds these to the page leave event, they are used in web analytics calculations&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$prev_pageview_max_scroll_percentage&lt;/name&gt;&lt;description&gt;posthog-js adds these to the page leave event, they are used in web analytics calculations&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$prev_pageview_last_content_percentage&lt;/name&gt;&lt;description&gt;posthog-js adds these to the page leave event, they are used in web analytics calculations&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$prev_pageview_max_content_percentage&lt;/name&gt;&lt;description&gt;posthog-js adds these to the page leave event, they are used in web analytics calculations&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$prev_pageview_last_scroll_percentage&lt;/name&gt;&lt;description&gt;posthog-js adds these to the page leave event, they are used in web analytics calculations&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$prev_pageview_last_content&lt;/name&gt;&lt;description&gt;posthog-js adds these to the page leave event, they are used in web analytics calculations&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$prev_pageview_last_scroll&lt;/name&gt;&lt;description&gt;posthog-js adds these to the page leave event, they are used in web analytics calculations&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$prev_pageview_max_content&lt;/name&gt;&lt;description&gt;posthog-js adds these to the page leave event, they are used in web analytics calculations&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$prev_pageview_max_scroll&lt;/name&gt;&lt;description&gt;posthog-js adds these to the page leave event, they are used in web analytics calculations&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$viewport_height&lt;/name&gt;&lt;description&gt;The height of the user's actual browser window (in pixels).&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$screen_width&lt;/name&gt;&lt;description&gt;The width of the user's entire screen (in pixels).&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$browser_version&lt;/name&gt;&lt;description&gt;The version of the browser that was used. Used in combination with Browser.&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$viewport_width&lt;/name&gt;&lt;description&gt;The width of the user's actual browser window (in pixels).&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$screen_height&lt;/name&gt;&lt;description&gt;The height of the user's entire screen (in pixels).&lt;/description&gt;&lt;/prop&gt;&lt;/Numeric&gt;&lt;String&gt;&lt;prop&gt;&lt;name&gt;$current_url&lt;/name&gt;&lt;description&gt;The URL visited at the time of the event.&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$pathname&lt;/name&gt;&lt;description&gt;The path of the Current URL, which means everything in the url after the domain.&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$prev_pageview_pathname&lt;/name&gt;&lt;description&gt;posthog-js adds these to the page leave event, they are used in web analytics calculations&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;title&lt;/name&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;commit_sha&lt;/name&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$lib_version&lt;/name&gt;&lt;description&gt;Version of the library used to send the event. Used in combination with Library.&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$lib&lt;/name&gt;&lt;description&gt;What library was used to send the event.&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$device_type&lt;/name&gt;&lt;description&gt;The type of device that was used.&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$browser_type&lt;/name&gt;&lt;description&gt;This is only added when posthog-js config.opt_out_useragent_filter is true.&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$os_version&lt;/name&gt;&lt;description&gt;The Operating System version.&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$raw_user_agent&lt;/name&gt;&lt;description&gt;PostHog process information like browser, OS, and device type from the user agent string. This is the raw user agent string.&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$referrer&lt;/name&gt;&lt;description&gt;URL of where the user came from.&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$browser_language&lt;/name&gt;&lt;description&gt;Language.&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$feature/artificial-hog&lt;/name&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$lib_custom_api_host&lt;/name&gt;&lt;description&gt;The custom API host used to send the event.&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$referring_domain&lt;/name&gt;&lt;description&gt;Domain of where the user came from.&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$last_posthog_reset&lt;/name&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$browser_language_prefix&lt;/name&gt;&lt;description&gt;Language prefix.&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$host&lt;/name&gt;&lt;description&gt;The hostname of the Current URL.&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;realm&lt;/name&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$feature/llm-observability&lt;/name&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$browser&lt;/name&gt;&lt;description&gt;Name of the browser the user has used.&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$os&lt;/name&gt;&lt;description&gt;The operating system of the user.&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$user_id&lt;/name&gt;&lt;description&gt;This variable will be set to the distinct ID if you've called posthog.identify('distinct id'). If the user is anonymous, it'll be empty.&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;distinct_id&lt;/name&gt;&lt;/prop&gt;&lt;/String&gt;&lt;Boolean&gt;&lt;prop&gt;&lt;name&gt;has_billing_plan&lt;/name&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$is_identified&lt;/name&gt;&lt;description&gt;When the person was identified&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;email_service_available&lt;/name&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;slack_service_available&lt;/name&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;is_demo_project&lt;/name&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$web_vitals_enabled_server_side&lt;/name&gt;&lt;description&gt;Whether web vitals was enabled in remote config&lt;/description&gt;&lt;/prop&gt;&lt;prop&gt;&lt;name&gt;$exception_capture_enabled_server_side&lt;/name&gt;&lt;/prop&gt;&lt;/Boolean&gt;&lt;/properties&gt;\nThought: \n",
                        "role": "user"
                    }
                ],
                "$geoip_disable": true,
                "$ai_parent_id": "7aac22f8-7cb8-400c-a218-a74303d14fbd",
                "$ai_model_parameters": {
                    "n": 1,
                    "stream": true,
                    "temperature": 0
                },
                "$ai_span_id": "b7dc4634-23af-42d4-9495-69bf127e3af0",
                "$ai_span_name": "ChatOpenAI",
                "$ai_http_status": 200,
                "$ai_latency": 3.017017126083374,
                "$ai_input_tokens": 5637,
                "conversation_id": "0194b2ce-ef92-0000-008e-c6ba293c8c7d",
                "$ip": "192.168.97.1",
                "$plugins_succeeded": ["GeoIP (14)"],
                "$plugins_failed": [],
                "$ai_input_cost_usd": 0.028185,
                "$ai_output_cost_usd": 0.00162,
                "$ai_total_cost_usd": 0.029805,
                "$ai_temperature": 0,
                "$ai_stream": true
            }
        },
        {
            "createdAt": "2025-01-29T16:05:02.045000+00:00",
            "event": "$ai_span",
            "id": "0194b2cf-1188-72d5-83b0-e06b26395571",
            "properties": {
                "$ai_trace_id": "537b7988-0186-494f-a313-77a5a8f7db26",
                "$geoip_disable": true,
                "$ai_latency": 0.000012159347534179688,
                "$ai_span_name": "router",
                "conversation_id": "0194b2ce-ef92-0000-008e-c6ba293c8c7d",
                "is_first_conversation": true,
                "$ai_parent_id": "763eb20e-1500-4c18-9e97-e6e53f7692fa",
                "$ai_output_state": "tools",
                "$lib": "posthog-python",
                "$ai_span_id": "8da97f1a-a6c8-48f4-8c60-067b8c6573af",
                "$lib_version": "3.11.0",
                "$ai_input_state": {
                    "intermediate_steps": [
                        [
                            {
                                "log": "To answer the question \"What's the trend in $pageview events?\", I need to retrieve the properties associated with the `$pageview` event. This will help in identifying any relevant property filters or breakdowns that can be applied to analyze the trend effectively.\n\nAction:\n```json\n{\n  \"action\": \"retrieve_event_properties\",\n  \"action_input\": \"$pageview\"\n}\n```",
                                "tool": "retrieve_event_properties",
                                "tool_input": "$pageview",
                                "type": "AgentAction"
                            },
                            "<properties><Numeric><prop><name>$prev_pageview_duration</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>$prev_pageview_max_scroll_percentage</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>$prev_pageview_last_content_percentage</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>$prev_pageview_max_content_percentage</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>$prev_pageview_last_scroll_percentage</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>$prev_pageview_last_content</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>$prev_pageview_last_scroll</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>$prev_pageview_max_content</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>$prev_pageview_max_scroll</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>$viewport_height</name><description>The height of the user's actual browser window (in pixels).</description></prop><prop><name>$screen_width</name><description>The width of the user's entire screen (in pixels).</description></prop><prop><name>$browser_version</name><description>The version of the browser that was used. Used in combination with Browser.</description></prop><prop><name>$viewport_width</name><description>The width of the user's actual browser window (in pixels).</description></prop><prop><name>$screen_height</name><description>The height of the user's entire screen (in pixels).</description></prop></Numeric><String><prop><name>$current_url</name><description>The URL visited at the time of the event.</description></prop><prop><name>$pathname</name><description>The path of the Current URL, which means everything in the url after the domain.</description></prop><prop><name>$prev_pageview_pathname</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>title</name></prop><prop><name>commit_sha</name></prop><prop><name>$lib_version</name><description>Version of the library used to send the event. Used in combination with Library.</description></prop><prop><name>$lib</name><description>What library was used to send the event.</description></prop><prop><name>$device_type</name><description>The type of device that was used.</description></prop><prop><name>$browser_type</name><description>This is only added when posthog-js config.opt_out_useragent_filter is true.</description></prop><prop><name>$os_version</name><description>The Operating System version.</description></prop><prop><name>$raw_user_agent</name><description>PostHog process information like browser, OS, and device type from the user agent string. This is the raw user agent string.</description></prop><prop><name>$referrer</name><description>URL of where the user came from.</description></prop><prop><name>$browser_language</name><description>Language.</description></prop><prop><name>$feature/artificial-hog</name></prop><prop><name>$lib_custom_api_host</name><description>The custom API host used to send the event.</description></prop><prop><name>$referring_domain</name><description>Domain of where the user came from.</description></prop><prop><name>$last_posthog_reset</name></prop><prop><name>$browser_language_prefix</name><description>Language prefix.</description></prop><prop><name>$host</name><description>The hostname of the Current URL.</description></prop><prop><name>realm</name></prop><prop><name>$feature/llm-observability</name></prop><prop><name>$browser</name><description>Name of the browser the user has used.</description></prop><prop><name>$os</name><description>The operating system of the user.</description></prop><prop><name>$user_id</name><description>This variable will be set to the distinct ID if you've called posthog.identify('distinct id'). If the user is anonymous, it'll be empty.</description></prop><prop><name>distinct_id</name></prop></String><Boolean><prop><name>has_billing_plan</name></prop><prop><name>$is_identified</name><description>When the person was identified</description></prop><prop><name>email_service_available</name></prop><prop><name>slack_service_available</name></prop><prop><name>is_demo_project</name></prop><prop><name>$web_vitals_enabled_server_side</name><description>Whether web vitals was enabled in remote config</description></prop><prop><name>$exception_capture_enabled_server_side</name></prop></Boolean></properties>"
                        ],
                        [
                            {
                                "log": "I have retrieved the properties associated with the `$pageview` event. To analyze the trend in `$pageview` events, I will focus on the total count of these events over time. This will provide a clear view of the trend without needing additional property filters or breakdowns, as the question does not specify any particular segmentation or filtering criteria.\n\nAction:\n```json\n{\n  \"action\": \"final_answer\",\n  \"action_input\": \"Events:\\n- $pageview\\n    - math operation: total count\"\n}\n```",
                                "tool": "final_answer",
                                "tool_input": "Events:\n- $pageview\n    - math operation: total count",
                                "type": "AgentAction"
                            },
                            null
                        ]
                    ],
                    "memory_collection_messages": [],
                    "memory_updated": false,
                    "messages": [
                        {
                            "content": "What's the trend in $pageview events?",
                            "id": "2ae74707-ccf8-475f-951c-cb2220917af7",
                            "type": "human"
                        },
                        {
                            "content": "trends",
                            "id": "f10500b7-4d4d-4ad9-972e-3001cfc5e08e",
                            "type": "ai/router"
                        }
                    ],
                    "plan": null,
                    "resumed": null,
                    "start_id": "2ae74707-ccf8-475f-951c-cb2220917af7"
                },
                "$ip": "192.168.97.1",
                "$plugins_succeeded": ["GeoIP (14)"],
                "$plugins_failed": []
            }
        },
        {
            "createdAt": "2025-01-29T16:05:02.045000+00:00",
            "event": "$ai_span",
            "id": "0194b2cf-1188-7d1e-b59f-314319e01ff5",
            "properties": {
                "is_first_conversation": true,
                "$ai_latency": 3.079071283340454,
                "$ai_parent_id": "537b7988-0186-494f-a313-77a5a8f7db26",
                "$geoip_disable": true,
                "$ai_trace_id": "537b7988-0186-494f-a313-77a5a8f7db26",
                "$ai_span_name": "trends_planner",
                "$lib_version": "3.11.0",
                "$ai_output_state": {
                    "intermediate_steps": [
                        [
                            {
                                "log": "To answer the question \"What's the trend in $pageview events?\", I need to retrieve the properties associated with the `$pageview` event. This will help in identifying any relevant property filters or breakdowns that can be applied to analyze the trend effectively.\n\nAction:\n```json\n{\n  \"action\": \"retrieve_event_properties\",\n  \"action_input\": \"$pageview\"\n}\n```",
                                "tool": "retrieve_event_properties",
                                "tool_input": "$pageview",
                                "type": "AgentAction"
                            },
                            "<properties><Numeric><prop><name>$prev_pageview_duration</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>$prev_pageview_max_scroll_percentage</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>$prev_pageview_last_content_percentage</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>$prev_pageview_max_content_percentage</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>$prev_pageview_last_scroll_percentage</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>$prev_pageview_last_content</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>$prev_pageview_last_scroll</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>$prev_pageview_max_content</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>$prev_pageview_max_scroll</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>$viewport_height</name><description>The height of the user's actual browser window (in pixels).</description></prop><prop><name>$screen_width</name><description>The width of the user's entire screen (in pixels).</description></prop><prop><name>$browser_version</name><description>The version of the browser that was used. Used in combination with Browser.</description></prop><prop><name>$viewport_width</name><description>The width of the user's actual browser window (in pixels).</description></prop><prop><name>$screen_height</name><description>The height of the user's entire screen (in pixels).</description></prop></Numeric><String><prop><name>$current_url</name><description>The URL visited at the time of the event.</description></prop><prop><name>$pathname</name><description>The path of the Current URL, which means everything in the url after the domain.</description></prop><prop><name>$prev_pageview_pathname</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>title</name></prop><prop><name>commit_sha</name></prop><prop><name>$lib_version</name><description>Version of the library used to send the event. Used in combination with Library.</description></prop><prop><name>$lib</name><description>What library was used to send the event.</description></prop><prop><name>$device_type</name><description>The type of device that was used.</description></prop><prop><name>$browser_type</name><description>This is only added when posthog-js config.opt_out_useragent_filter is true.</description></prop><prop><name>$os_version</name><description>The Operating System version.</description></prop><prop><name>$raw_user_agent</name><description>PostHog process information like browser, OS, and device type from the user agent string. This is the raw user agent string.</description></prop><prop><name>$referrer</name><description>URL of where the user came from.</description></prop><prop><name>$browser_language</name><description>Language.</description></prop><prop><name>$feature/artificial-hog</name></prop><prop><name>$lib_custom_api_host</name><description>The custom API host used to send the event.</description></prop><prop><name>$referring_domain</name><description>Domain of where the user came from.</description></prop><prop><name>$last_posthog_reset</name></prop><prop><name>$browser_language_prefix</name><description>Language prefix.</description></prop><prop><name>$host</name><description>The hostname of the Current URL.</description></prop><prop><name>realm</name></prop><prop><name>$feature/llm-observability</name></prop><prop><name>$browser</name><description>Name of the browser the user has used.</description></prop><prop><name>$os</name><description>The operating system of the user.</description></prop><prop><name>$user_id</name><description>This variable will be set to the distinct ID if you've called posthog.identify('distinct id'). If the user is anonymous, it'll be empty.</description></prop><prop><name>distinct_id</name></prop></String><Boolean><prop><name>has_billing_plan</name></prop><prop><name>$is_identified</name><description>When the person was identified</description></prop><prop><name>email_service_available</name></prop><prop><name>slack_service_available</name></prop><prop><name>is_demo_project</name></prop><prop><name>$web_vitals_enabled_server_side</name><description>Whether web vitals was enabled in remote config</description></prop><prop><name>$exception_capture_enabled_server_side</name></prop></Boolean></properties>"
                        ],
                        [
                            {
                                "log": "I have retrieved the properties associated with the `$pageview` event. To analyze the trend in `$pageview` events, I will focus on the total count of these events over time. This will provide a clear view of the trend without needing additional property filters or breakdowns, as the question does not specify any particular segmentation or filtering criteria.\n\nAction:\n```json\n{\n  \"action\": \"final_answer\",\n  \"action_input\": \"Events:\\n- $pageview\\n    - math operation: total count\"\n}\n```",
                                "tool": "final_answer",
                                "tool_input": "Events:\n- $pageview\n    - math operation: total count",
                                "type": "AgentAction"
                            },
                            null
                        ]
                    ],
                    "memory_collection_messages": null,
                    "memory_updated": null,
                    "messages": null,
                    "plan": null,
                    "resumed": null,
                    "start_id": null
                },
                "conversation_id": "0194b2ce-ef92-0000-008e-c6ba293c8c7d",
                "$lib": "posthog-python",
                "$ai_span_id": "763eb20e-1500-4c18-9e97-e6e53f7692fa",
                "$ai_input_state": {
                    "intermediate_steps": [
                        [
                            {
                                "log": "To answer the question \"What's the trend in $pageview events?\", I need to retrieve the properties associated with the `$pageview` event. This will help in identifying any relevant property filters or breakdowns that can be applied to analyze the trend effectively.\n\nAction:\n```json\n{\n  \"action\": \"retrieve_event_properties\",\n  \"action_input\": \"$pageview\"\n}\n```",
                                "tool": "retrieve_event_properties",
                                "tool_input": "$pageview",
                                "type": "AgentAction"
                            },
                            "<properties><Numeric><prop><name>$prev_pageview_duration</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>$prev_pageview_max_scroll_percentage</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>$prev_pageview_last_content_percentage</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>$prev_pageview_max_content_percentage</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>$prev_pageview_last_scroll_percentage</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>$prev_pageview_last_content</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>$prev_pageview_last_scroll</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>$prev_pageview_max_content</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>$prev_pageview_max_scroll</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>$viewport_height</name><description>The height of the user's actual browser window (in pixels).</description></prop><prop><name>$screen_width</name><description>The width of the user's entire screen (in pixels).</description></prop><prop><name>$browser_version</name><description>The version of the browser that was used. Used in combination with Browser.</description></prop><prop><name>$viewport_width</name><description>The width of the user's actual browser window (in pixels).</description></prop><prop><name>$screen_height</name><description>The height of the user's entire screen (in pixels).</description></prop></Numeric><String><prop><name>$current_url</name><description>The URL visited at the time of the event.</description></prop><prop><name>$pathname</name><description>The path of the Current URL, which means everything in the url after the domain.</description></prop><prop><name>$prev_pageview_pathname</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>title</name></prop><prop><name>commit_sha</name></prop><prop><name>$lib_version</name><description>Version of the library used to send the event. Used in combination with Library.</description></prop><prop><name>$lib</name><description>What library was used to send the event.</description></prop><prop><name>$device_type</name><description>The type of device that was used.</description></prop><prop><name>$browser_type</name><description>This is only added when posthog-js config.opt_out_useragent_filter is true.</description></prop><prop><name>$os_version</name><description>The Operating System version.</description></prop><prop><name>$raw_user_agent</name><description>PostHog process information like browser, OS, and device type from the user agent string. This is the raw user agent string.</description></prop><prop><name>$referrer</name><description>URL of where the user came from.</description></prop><prop><name>$browser_language</name><description>Language.</description></prop><prop><name>$feature/artificial-hog</name></prop><prop><name>$lib_custom_api_host</name><description>The custom API host used to send the event.</description></prop><prop><name>$referring_domain</name><description>Domain of where the user came from.</description></prop><prop><name>$last_posthog_reset</name></prop><prop><name>$browser_language_prefix</name><description>Language prefix.</description></prop><prop><name>$host</name><description>The hostname of the Current URL.</description></prop><prop><name>realm</name></prop><prop><name>$feature/llm-observability</name></prop><prop><name>$browser</name><description>Name of the browser the user has used.</description></prop><prop><name>$os</name><description>The operating system of the user.</description></prop><prop><name>$user_id</name><description>This variable will be set to the distinct ID if you've called posthog.identify('distinct id'). If the user is anonymous, it'll be empty.</description></prop><prop><name>distinct_id</name></prop></String><Boolean><prop><name>has_billing_plan</name></prop><prop><name>$is_identified</name><description>When the person was identified</description></prop><prop><name>email_service_available</name></prop><prop><name>slack_service_available</name></prop><prop><name>is_demo_project</name></prop><prop><name>$web_vitals_enabled_server_side</name><description>Whether web vitals was enabled in remote config</description></prop><prop><name>$exception_capture_enabled_server_side</name></prop></Boolean></properties>"
                        ]
                    ],
                    "memory_collection_messages": [],
                    "memory_updated": false,
                    "messages": [
                        {
                            "content": "What's the trend in $pageview events?",
                            "id": "2ae74707-ccf8-475f-951c-cb2220917af7",
                            "type": "human"
                        },
                        {
                            "content": "trends",
                            "id": "f10500b7-4d4d-4ad9-972e-3001cfc5e08e",
                            "type": "ai/router"
                        }
                    ],
                    "plan": null,
                    "resumed": null,
                    "start_id": "2ae74707-ccf8-475f-951c-cb2220917af7"
                },
                "$ip": "192.168.97.1",
                "$plugins_succeeded": ["GeoIP (14)"],
                "$plugins_failed": []
            }
        },
        {
            "createdAt": "2025-01-29T16:05:02.045000+00:00",
            "event": "$ai_span",
            "id": "0194b2cf-1188-751b-a7c2-b272f1e5d1e3",
            "properties": {
                "$ai_latency": 0.0003709793090820313,
                "$ai_parent_id": "763eb20e-1500-4c18-9e97-e6e53f7692fa",
                "$ai_span_id": "3e176cbb-789d-4f1d-9ec2-e268354d1f77",
                "conversation_id": "0194b2ce-ef92-0000-008e-c6ba293c8c7d",
                "$ai_span_name": "ChannelWrite<trends_planner,intermediate_steps,start_id,plan,resumed,memory_updated,memory_collection_messages,messages>",
                "is_first_conversation": true,
                "$geoip_disable": true,
                "$lib": "posthog-python",
                "$ai_input_state": {
                    "intermediate_steps": [
                        [
                            {
                                "log": "To answer the question \"What's the trend in $pageview events?\", I need to retrieve the properties associated with the `$pageview` event. This will help in identifying any relevant property filters or breakdowns that can be applied to analyze the trend effectively.\n\nAction:\n```json\n{\n  \"action\": \"retrieve_event_properties\",\n  \"action_input\": \"$pageview\"\n}\n```",
                                "tool": "retrieve_event_properties",
                                "tool_input": "$pageview",
                                "type": "AgentAction"
                            },
                            "<properties><Numeric><prop><name>$prev_pageview_duration</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>$prev_pageview_max_scroll_percentage</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>$prev_pageview_last_content_percentage</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>$prev_pageview_max_content_percentage</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>$prev_pageview_last_scroll_percentage</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>$prev_pageview_last_content</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>$prev_pageview_last_scroll</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>$prev_pageview_max_content</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>$prev_pageview_max_scroll</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>$viewport_height</name><description>The height of the user's actual browser window (in pixels).</description></prop><prop><name>$screen_width</name><description>The width of the user's entire screen (in pixels).</description></prop><prop><name>$browser_version</name><description>The version of the browser that was used. Used in combination with Browser.</description></prop><prop><name>$viewport_width</name><description>The width of the user's actual browser window (in pixels).</description></prop><prop><name>$screen_height</name><description>The height of the user's entire screen (in pixels).</description></prop></Numeric><String><prop><name>$current_url</name><description>The URL visited at the time of the event.</description></prop><prop><name>$pathname</name><description>The path of the Current URL, which means everything in the url after the domain.</description></prop><prop><name>$prev_pageview_pathname</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>title</name></prop><prop><name>commit_sha</name></prop><prop><name>$lib_version</name><description>Version of the library used to send the event. Used in combination with Library.</description></prop><prop><name>$lib</name><description>What library was used to send the event.</description></prop><prop><name>$device_type</name><description>The type of device that was used.</description></prop><prop><name>$browser_type</name><description>This is only added when posthog-js config.opt_out_useragent_filter is true.</description></prop><prop><name>$os_version</name><description>The Operating System version.</description></prop><prop><name>$raw_user_agent</name><description>PostHog process information like browser, OS, and device type from the user agent string. This is the raw user agent string.</description></prop><prop><name>$referrer</name><description>URL of where the user came from.</description></prop><prop><name>$browser_language</name><description>Language.</description></prop><prop><name>$feature/artificial-hog</name></prop><prop><name>$lib_custom_api_host</name><description>The custom API host used to send the event.</description></prop><prop><name>$referring_domain</name><description>Domain of where the user came from.</description></prop><prop><name>$last_posthog_reset</name></prop><prop><name>$browser_language_prefix</name><description>Language prefix.</description></prop><prop><name>$host</name><description>The hostname of the Current URL.</description></prop><prop><name>realm</name></prop><prop><name>$feature/llm-observability</name></prop><prop><name>$browser</name><description>Name of the browser the user has used.</description></prop><prop><name>$os</name><description>The operating system of the user.</description></prop><prop><name>$user_id</name><description>This variable will be set to the distinct ID if you've called posthog.identify('distinct id'). If the user is anonymous, it'll be empty.</description></prop><prop><name>distinct_id</name></prop></String><Boolean><prop><name>has_billing_plan</name></prop><prop><name>$is_identified</name><description>When the person was identified</description></prop><prop><name>email_service_available</name></prop><prop><name>slack_service_available</name></prop><prop><name>is_demo_project</name></prop><prop><name>$web_vitals_enabled_server_side</name><description>Whether web vitals was enabled in remote config</description></prop><prop><name>$exception_capture_enabled_server_side</name></prop></Boolean></properties>"
                        ],
                        [
                            {
                                "log": "I have retrieved the properties associated with the `$pageview` event. To analyze the trend in `$pageview` events, I will focus on the total count of these events over time. This will provide a clear view of the trend without needing additional property filters or breakdowns, as the question does not specify any particular segmentation or filtering criteria.\n\nAction:\n```json\n{\n  \"action\": \"final_answer\",\n  \"action_input\": \"Events:\\n- $pageview\\n    - math operation: total count\"\n}\n```",
                                "tool": "final_answer",
                                "tool_input": "Events:\n- $pageview\n    - math operation: total count",
                                "type": "AgentAction"
                            },
                            null
                        ]
                    ],
                    "memory_collection_messages": null,
                    "memory_updated": null,
                    "messages": null,
                    "plan": null,
                    "resumed": null,
                    "start_id": null
                },
                "$ai_trace_id": "537b7988-0186-494f-a313-77a5a8f7db26",
                "$ai_output_state": {
                    "intermediate_steps": [
                        [
                            {
                                "log": "To answer the question \"What's the trend in $pageview events?\", I need to retrieve the properties associated with the `$pageview` event. This will help in identifying any relevant property filters or breakdowns that can be applied to analyze the trend effectively.\n\nAction:\n```json\n{\n  \"action\": \"retrieve_event_properties\",\n  \"action_input\": \"$pageview\"\n}\n```",
                                "tool": "retrieve_event_properties",
                                "tool_input": "$pageview",
                                "type": "AgentAction"
                            },
                            "<properties><Numeric><prop><name>$prev_pageview_duration</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>$prev_pageview_max_scroll_percentage</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>$prev_pageview_last_content_percentage</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>$prev_pageview_max_content_percentage</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>$prev_pageview_last_scroll_percentage</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>$prev_pageview_last_content</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>$prev_pageview_last_scroll</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>$prev_pageview_max_content</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>$prev_pageview_max_scroll</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>$viewport_height</name><description>The height of the user's actual browser window (in pixels).</description></prop><prop><name>$screen_width</name><description>The width of the user's entire screen (in pixels).</description></prop><prop><name>$browser_version</name><description>The version of the browser that was used. Used in combination with Browser.</description></prop><prop><name>$viewport_width</name><description>The width of the user's actual browser window (in pixels).</description></prop><prop><name>$screen_height</name><description>The height of the user's entire screen (in pixels).</description></prop></Numeric><String><prop><name>$current_url</name><description>The URL visited at the time of the event.</description></prop><prop><name>$pathname</name><description>The path of the Current URL, which means everything in the url after the domain.</description></prop><prop><name>$prev_pageview_pathname</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>title</name></prop><prop><name>commit_sha</name></prop><prop><name>$lib_version</name><description>Version of the library used to send the event. Used in combination with Library.</description></prop><prop><name>$lib</name><description>What library was used to send the event.</description></prop><prop><name>$device_type</name><description>The type of device that was used.</description></prop><prop><name>$browser_type</name><description>This is only added when posthog-js config.opt_out_useragent_filter is true.</description></prop><prop><name>$os_version</name><description>The Operating System version.</description></prop><prop><name>$raw_user_agent</name><description>PostHog process information like browser, OS, and device type from the user agent string. This is the raw user agent string.</description></prop><prop><name>$referrer</name><description>URL of where the user came from.</description></prop><prop><name>$browser_language</name><description>Language.</description></prop><prop><name>$feature/artificial-hog</name></prop><prop><name>$lib_custom_api_host</name><description>The custom API host used to send the event.</description></prop><prop><name>$referring_domain</name><description>Domain of where the user came from.</description></prop><prop><name>$last_posthog_reset</name></prop><prop><name>$browser_language_prefix</name><description>Language prefix.</description></prop><prop><name>$host</name><description>The hostname of the Current URL.</description></prop><prop><name>realm</name></prop><prop><name>$feature/llm-observability</name></prop><prop><name>$browser</name><description>Name of the browser the user has used.</description></prop><prop><name>$os</name><description>The operating system of the user.</description></prop><prop><name>$user_id</name><description>This variable will be set to the distinct ID if you've called posthog.identify('distinct id'). If the user is anonymous, it'll be empty.</description></prop><prop><name>distinct_id</name></prop></String><Boolean><prop><name>has_billing_plan</name></prop><prop><name>$is_identified</name><description>When the person was identified</description></prop><prop><name>email_service_available</name></prop><prop><name>slack_service_available</name></prop><prop><name>is_demo_project</name></prop><prop><name>$web_vitals_enabled_server_side</name><description>Whether web vitals was enabled in remote config</description></prop><prop><name>$exception_capture_enabled_server_side</name></prop></Boolean></properties>"
                        ],
                        [
                            {
                                "log": "I have retrieved the properties associated with the `$pageview` event. To analyze the trend in `$pageview` events, I will focus on the total count of these events over time. This will provide a clear view of the trend without needing additional property filters or breakdowns, as the question does not specify any particular segmentation or filtering criteria.\n\nAction:\n```json\n{\n  \"action\": \"final_answer\",\n  \"action_input\": \"Events:\\n- $pageview\\n    - math operation: total count\"\n}\n```",
                                "tool": "final_answer",
                                "tool_input": "Events:\n- $pageview\n    - math operation: total count",
                                "type": "AgentAction"
                            },
                            null
                        ]
                    ],
                    "memory_collection_messages": null,
                    "memory_updated": null,
                    "messages": null,
                    "plan": null,
                    "resumed": null,
                    "start_id": null
                },
                "$lib_version": "3.11.0",
                "$ip": "192.168.97.1",
                "$plugins_succeeded": ["GeoIP (14)"],
                "$plugins_failed": []
            }
        },
        {
            "createdAt": "2025-01-29T16:05:02.047000+00:00",
            "event": "$ai_span",
            "id": "0194b2cf-1188-7036-9093-1cb656d35eec",
            "properties": {
                "$lib_version": "3.11.0",
                "$ai_latency": 0.0004808902740478515,
                "$ai_parent_id": "7ce46f40-e824-4ec1-91a9-da0aa75f42bd",
                "$ai_trace_id": "537b7988-0186-494f-a313-77a5a8f7db26",
                "$ai_span_name": "ChannelWrite<trends_planner_tools,intermediate_steps,start_id,plan,resumed,memory_updated,memory_collection_messages,messages>",
                "conversation_id": "0194b2ce-ef92-0000-008e-c6ba293c8c7d",
                "$geoip_disable": true,
                "$ai_output_state": {
                    "intermediate_steps": [],
                    "memory_collection_messages": null,
                    "memory_updated": null,
                    "messages": null,
                    "plan": "Events:\n- $pageview\n    - math operation: total count",
                    "resumed": null,
                    "start_id": null
                },
                "$ai_input_state": {
                    "intermediate_steps": [],
                    "memory_collection_messages": null,
                    "memory_updated": null,
                    "messages": null,
                    "plan": "Events:\n- $pageview\n    - math operation: total count",
                    "resumed": null,
                    "start_id": null
                },
                "is_first_conversation": true,
                "$ai_span_id": "f6e14e11-f34c-4eec-8ec0-a8b04c41f8f8",
                "$lib": "posthog-python",
                "$ip": "192.168.97.1",
                "$plugins_succeeded": ["GeoIP (14)"],
                "$plugins_failed": []
            }
        },
        {
            "createdAt": "2025-01-29T16:05:02.048000+00:00",
            "event": "$ai_span",
            "id": "0194b2cf-1188-7226-a90c-22b4df53ae5f",
            "properties": {
                "is_first_conversation": true,
                "$ai_output_state": {
                    "intermediate_steps": [],
                    "memory_collection_messages": null,
                    "memory_updated": null,
                    "messages": null,
                    "plan": "Events:\n- $pageview\n    - math operation: total count",
                    "resumed": null,
                    "start_id": null
                },
                "$ai_input_state": {
                    "intermediate_steps": [
                        [
                            {
                                "log": "To answer the question \"What's the trend in $pageview events?\", I need to retrieve the properties associated with the `$pageview` event. This will help in identifying any relevant property filters or breakdowns that can be applied to analyze the trend effectively.\n\nAction:\n```json\n{\n  \"action\": \"retrieve_event_properties\",\n  \"action_input\": \"$pageview\"\n}\n```",
                                "tool": "retrieve_event_properties",
                                "tool_input": "$pageview",
                                "type": "AgentAction"
                            },
                            "<properties><Numeric><prop><name>$prev_pageview_duration</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>$prev_pageview_max_scroll_percentage</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>$prev_pageview_last_content_percentage</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>$prev_pageview_max_content_percentage</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>$prev_pageview_last_scroll_percentage</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>$prev_pageview_last_content</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>$prev_pageview_last_scroll</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>$prev_pageview_max_content</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>$prev_pageview_max_scroll</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>$viewport_height</name><description>The height of the user's actual browser window (in pixels).</description></prop><prop><name>$screen_width</name><description>The width of the user's entire screen (in pixels).</description></prop><prop><name>$browser_version</name><description>The version of the browser that was used. Used in combination with Browser.</description></prop><prop><name>$viewport_width</name><description>The width of the user's actual browser window (in pixels).</description></prop><prop><name>$screen_height</name><description>The height of the user's entire screen (in pixels).</description></prop></Numeric><String><prop><name>$current_url</name><description>The URL visited at the time of the event.</description></prop><prop><name>$pathname</name><description>The path of the Current URL, which means everything in the url after the domain.</description></prop><prop><name>$prev_pageview_pathname</name><description>posthog-js adds these to the page leave event, they are used in web analytics calculations</description></prop><prop><name>title</name></prop><prop><name>commit_sha</name></prop><prop><name>$lib_version</name><description>Version of the library used to send the event. Used in combination with Library.</description></prop><prop><name>$lib</name><description>What library was used to send the event.</description></prop><prop><name>$device_type</name><description>The type of device that was used.</description></prop><prop><name>$browser_type</name><description>This is only added when posthog-js config.opt_out_useragent_filter is true.</description></prop><prop><name>$os_version</name><description>The Operating System version.</description></prop><prop><name>$raw_user_agent</name><description>PostHog process information like browser, OS, and device type from the user agent string. This is the raw user agent string.</description></prop><prop><name>$referrer</name><description>URL of where the user came from.</description></prop><prop><name>$browser_language</name><description>Language.</description></prop><prop><name>$feature/artificial-hog</name></prop><prop><name>$lib_custom_api_host</name><description>The custom API host used to send the event.</description></prop><prop><name>$referring_domain</name><description>Domain of where the user came from.</description></prop><prop><name>$last_posthog_reset</name></prop><prop><name>$browser_language_prefix</name><description>Language prefix.</description></prop><prop><name>$host</name><description>The hostname of the Current URL.</description></prop><prop><name>realm</name></prop><prop><name>$feature/llm-observability</name></prop><prop><name>$browser</name><description>Name of the browser the user has used.</description></prop><prop><name>$os</name><description>The operating system of the user.</description></prop><prop><name>$user_id</name><description>This variable will be set to the distinct ID if you've called posthog.identify('distinct id'). If the user is anonymous, it'll be empty.</description></prop><prop><name>distinct_id</name></prop></String><Boolean><prop><name>has_billing_plan</name></prop><prop><name>$is_identified</name><description>When the person was identified</description></prop><prop><name>email_service_available</name></prop><prop><name>slack_service_available</name></prop><prop><name>is_demo_project</name></prop><prop><name>$web_vitals_enabled_server_side</name><description>Whether web vitals was enabled in remote config</description></prop><prop><name>$exception_capture_enabled_server_side</name></prop></Boolean></properties>"
                        ],
                        [
                            {
                                "log": "I have retrieved the properties associated with the `$pageview` event. To analyze the trend in `$pageview` events, I will focus on the total count of these events over time. This will provide a clear view of the trend without needing additional property filters or breakdowns, as the question does not specify any particular segmentation or filtering criteria.\n\nAction:\n```json\n{\n  \"action\": \"final_answer\",\n  \"action_input\": \"Events:\\n- $pageview\\n    - math operation: total count\"\n}\n```",
                                "tool": "final_answer",
                                "tool_input": "Events:\n- $pageview\n    - math operation: total count",
                                "type": "AgentAction"
                            },
                            null
                        ]
                    ],
                    "memory_collection_messages": [],
                    "memory_updated": false,
                    "messages": [
                        {
                            "content": "What's the trend in $pageview events?",
                            "id": "2ae74707-ccf8-475f-951c-cb2220917af7",
                            "type": "human"
                        },
                        {
                            "content": "trends",
                            "id": "f10500b7-4d4d-4ad9-972e-3001cfc5e08e",
                            "type": "ai/router"
                        }
                    ],
                    "plan": null,
                    "resumed": null,
                    "start_id": "2ae74707-ccf8-475f-951c-cb2220917af7"
                },
                "conversation_id": "0194b2ce-ef92-0000-008e-c6ba293c8c7d",
                "$ai_trace_id": "537b7988-0186-494f-a313-77a5a8f7db26",
                "$ai_span_name": "trends_planner_tools",
                "$lib": "posthog-python",
                "$ai_span_id": "7ce46f40-e824-4ec1-91a9-da0aa75f42bd",
                "$geoip_disable": true,
                "$lib_version": "3.11.0",
                "$ai_latency": 0.00096893310546875,
                "$ai_parent_id": "537b7988-0186-494f-a313-77a5a8f7db26",
                "$ip": "192.168.97.1",
                "$plugins_succeeded": ["GeoIP (14)"],
                "$plugins_failed": []
            }
        },
        {
            "createdAt": "2025-01-29T16:05:02.048000+00:00",
            "event": "$ai_span",
            "id": "0194b2cf-1188-7657-8c32-7a4dcdc8909f",
            "properties": {
                "$ai_input_state": {
                    "intermediate_steps": [],
                    "memory_collection_messages": [],
                    "memory_updated": false,
                    "messages": [
                        {
                            "content": "What's the trend in $pageview events?",
                            "id": "2ae74707-ccf8-475f-951c-cb2220917af7",
                            "type": "human"
                        },
                        {
                            "content": "trends",
                            "id": "f10500b7-4d4d-4ad9-972e-3001cfc5e08e",
                            "type": "ai/router"
                        }
                    ],
                    "plan": "Events:\n- $pageview\n    - math operation: total count",
                    "resumed": null,
                    "start_id": "2ae74707-ccf8-475f-951c-cb2220917af7"
                },
                "$ai_span_name": "router",
                "conversation_id": "0194b2ce-ef92-0000-008e-c6ba293c8c7d",
                "$lib_version": "3.11.0",
                "$ai_trace_id": "537b7988-0186-494f-a313-77a5a8f7db26",
                "$ai_latency": 0.00005412101745605469,
                "is_first_conversation": true,
                "$geoip_disable": true,
                "$lib": "posthog-python",
                "$ai_output_state": "plan_found",
                "$ai_parent_id": "7ce46f40-e824-4ec1-91a9-da0aa75f42bd",
                "$ai_span_id": "887e22b7-facb-44a0-a75f-4c50fab32e30",
                "$ip": "192.168.97.1",
                "$plugins_succeeded": ["GeoIP (14)"],
                "$plugins_failed": []
            }
        },
        {
            "createdAt": "2025-01-29T16:05:02.113000+00:00",
            "event": "$ai_span",
            "id": "0194b2cf-1188-716a-94ce-b83a56f03e33",
            "properties": {
                "conversation_id": "0194b2ce-ef92-0000-008e-c6ba293c8c7d",
                "$ai_input_state": {},
                "is_first_conversation": true,
                "$lib_version": "3.11.0",
                "$ai_trace_id": "537b7988-0186-494f-a313-77a5a8f7db26",
                "$ai_span_id": "db428779-3561-417b-8f37-ec9b8b3ac968",
                "$ai_latency": 0.00018405914306640625,
                "$ai_output_state": {
                    "messages": [
                        {
                            "additional_kwargs": {},
                            "content": "\nAct as an expert product manager. Your task is to generate a JSON schema of trends insights. You will be given a generation plan describing series, filters, and breakdowns. Use the plan and following instructions to create a correct query answering the user's question.\n\nBelow is the additional context.\n\nFollow this instruction to create a query:\n* Build series according to the plan. The plan includes event, math types, property filters, and breakdowns. Properties can be of multiple types: String, Numeric, Bool, and DateTime. A property can be an array of those types and only has a single type.\n* When evaluating filter operators, replace the `equals` or `doesn't equal` operators with `contains` or `doesn't contain` if the query value is likely a personal name, company name, or any other name-sensitive term where letter casing matters. For instance, if the value is ‘John Doe’ or ‘Acme Corp’, replace `equals` with `contains` and change the value to lowercase from `John Doe` to `john doe` or  `Acme Corp` to `acme corp`.\n* Determine a visualization type that will answer the user's question in the best way.\n* Determine if the user wants to name the series or use the default names.\n* Choose the date range and the interval the user wants to analyze.\n* Determine if the user wants to compare the results to a previous period or use smoothing.\n* Determine if the user wants to filter out internal and test users. If the user didn't specify, filter out internal and test users by default.\n* Determine if the user wants to use a sampling factor.\n* Determine if it's useful to show a legend, values of series, unitss, y-axis scale type, etc.\n* Use your judgment if there are any other parameters that the user might want to adjust that aren't listed here.\n\nFor trends queries, use an appropriate ChartDisplayType for the output. For example:\n- if the user wants to see dynamics in time like a line graph, use `ActionsLineGraph`.\n- if the user wants to see cumulative dynamics across time, use `ActionsLineGraphCumulative`.\n- if the user asks a question where you can answer with a single number, use `BoldNumber`.\n- if the user wants a table, use `ActionsTable`.\n- if the data is categorical, use `ActionsBar`.\n- if the data is easy to understand in a pie chart, use `ActionsPie`.\n- if the user has only one series and wants to see data from particular countries, use `WorldMap`.\n\nThe user might want to get insights for groups. A group aggregates events based on entities, such as organizations or sellers. The user might provide a list of group names and their numeric indexes. Instead of a group's name, always use its numeric index.\n\nYou can determine if a feature flag is enabled by checking if it's set to true or 1 in the `$feature/...` property. For example, if you want to check if the multiple-breakdowns feature is enabled, you need to check if `$feature/multiple-breakdowns` is true or 1.\n\n## Schema Examples\n\n### How many users do I have?\n\n```\n{\"dateRange\":{\"date_from\":\"all\"},\"interval\":\"month\",\"kind\":\"TrendsQuery\",\"series\":[{\"event\":\"user signed up\",\"kind\":\"EventsNode\",\"math\":\"total\"}],\"trendsFilter\":{\"display\":\"BoldNumber\"}}\n```\n\n### Show a bar chart of the organic search traffic for the last month grouped by week.\n\n```\n{\"dateRange\":{\"date_from\":\"-30d\",\"date_to\":null,\"explicitDate\":false},\"interval\":\"week\",\"kind\":\"TrendsQuery\",\"series\":[{\"event\":\"$pageview\",\"kind\":\"EventsNode\",\"math\":\"dau\",\"properties\":[{\"key\":\"$referring_domain\",\"operator\":\"icontains\",\"type\":\"event\",\"value\":\"google\"},{\"key\":\"utm_source\",\"operator\":\"is_not_set\",\"type\":\"event\",\"value\":\"is_not_set\"}]}],\"trendsFilter\":{\"display\":\"ActionsBar\"}}\n```\n\n### insight created unique users & first-time users for the last 12m)\n\n```\n{\"dateRange\":{\"date_from\":\"-12m\",\"date_to\":\"\"},\"filterTestAccounts\":true,\"interval\":\"month\",\"kind\":\"TrendsQuery\",\"series\":[{\"event\":\"insight created\",\"kind\":\"EventsNode\",\"math\":\"dau\",\"custom_name\":\"insight created\"},{\"event\":\"insight created\",\"kind\":\"EventsNode\",\"math\":\"first_time_for_user\",\"custom_name\":\"insight created\"}],\"trendsFilter\":{\"display\":\"ActionsLineGraph\"}}\n```\n\n### What are the top 10 referring domains for the last month?\n\n```\n{\"breakdownFilter\":{\"breakdown_type\":\"event\",\"breakdowns\":[{\"group_type_index\":null,\"histogram_bin_count\":null,\"normalize_url\":null,\"property\":\"$referring_domain\",\"type\":\"event\"}]},\"dateRange\":{\"date_from\":\"-30d\"},\"interval\":\"day\",\"kind\":\"TrendsQuery\",\"series\":[{\"event\":\"$pageview\",\"kind\":\"EventsNode\",\"math\":\"total\",\"custom_name\":\"$pageview\"}]}\n```\n\n### What is the DAU to MAU ratio of users from the US and Australia that viewed a page in the last 7 days? Compare it to the previous period.\n\n```\n{\"compareFilter\":{\"compare\":true,\"compare_to\":null},\"dateRange\":{\"date_from\":\"-7d\"},\"interval\":\"day\",\"kind\":\"TrendsQuery\",\"properties\":{\"type\":\"AND\",\"values\":[{\"type\":\"AND\",\"values\":[{\"key\":\"$geoip_country_name\",\"operator\":\"exact\",\"type\":\"event\",\"value\":[\"United States\",\"Australia\"]}]}]},\"series\":[{\"event\":\"$pageview\",\"kind\":\"EventsNode\",\"math\":\"dau\",\"custom_name\":\"$pageview\"},{\"event\":\"$pageview\",\"kind\":\"EventsNode\",\"math\":\"monthly_active\",\"custom_name\":\"$pageview\"}],\"trendsFilter\":{\"aggregationAxisFormat\":\"percentage_scaled\",\"display\":\"ActionsLineGraph\",\"formula\":\"A/B\"}}\n```\n\n### I want to understand how old are dashboard results when viewed from the beginning of this year grouped by a month. Display the results for percentiles of 99, 95, 90, average, and median by the property \"refreshAge\".\n\n```\n{\"dateRange\":{\"date_from\":\"yStart\",\"date_to\":null,\"explicitDate\":false},\"filterTestAccounts\":true,\"interval\":\"month\",\"kind\":\"TrendsQuery\",\"series\":[{\"event\":\"viewed dashboard\",\"kind\":\"EventsNode\",\"math\":\"p99\",\"math_property\":\"refreshAge\",\"custom_name\":\"viewed dashboard\"},{\"event\":\"viewed dashboard\",\"kind\":\"EventsNode\",\"math\":\"p95\",\"math_property\":\"refreshAge\",\"custom_name\":\"viewed dashboard\"},{\"event\":\"viewed dashboard\",\"kind\":\"EventsNode\",\"math\":\"p90\",\"math_property\":\"refreshAge\",\"custom_name\":\"viewed dashboard\"},{\"event\":\"viewed dashboard\",\"kind\":\"EventsNode\",\"math\":\"avg\",\"math_property\":\"refreshAge\",\"custom_name\":\"viewed dashboard\"},{\"event\":\"viewed dashboard\",\"kind\":\"EventsNode\",\"math\":\"median\",\"math_property\":\"refreshAge\",\"custom_name\":\"viewed dashboard\"}],\"trendsFilter\":{\"aggregationAxisFormat\":\"duration\",\"display\":\"ActionsLineGraph\"}}\n```\n\n### organizations joined in the last 30 days by day from the google search\n\n```\n{\"dateRange\":{\"date_from\":\"-30d\"},\"filterTestAccounts\":false,\"interval\":\"day\",\"kind\":\"TrendsQuery\",\"properties\":{\"type\":\"AND\",\"values\":[{\"type\":\"OR\",\"values\":[{\"key\":\"$initial_utm_source\",\"operator\":\"exact\",\"type\":\"person\",\"value\":[\"google\"]}]}]},\"series\":[{\"event\":\"user signed up\",\"kind\":\"EventsNode\",\"math\":\"unique_group\",\"math_group_type_index\":0,\"name\":\"user signed up\",\"properties\":[{\"key\":\"is_organization_first_user\",\"operator\":\"exact\",\"type\":\"person\",\"value\":[\"true\"]}]}],\"trendsFilter\":{\"display\":\"ActionsLineGraph\"}}\n```\n\n### trends for the last two weeks of the onboarding completed event by unique projects with a session duration more than 5 minutes and the insight analyzed event by unique projects with a breakdown by event's Country Name. exclude the US.\n\n```\n{\"kind\":\"TrendsQuery\",\"series\":[{\"kind\":\"EventsNode\",\"event\":\"onboarding completed\",\"name\":\"onboarding completed\",\"properties\":[{\"key\":\"$session_duration\",\"value\":300,\"operator\":\"gt\",\"type\":\"session\"}],\"math\":\"unique_group\",\"math_group_type_index\":2},{\"kind\":\"EventsNode\",\"event\":\"insight analyzed\",\"name\":\"insight analyzed\",\"math\":\"unique_group\",\"math_group_type_index\":2}],\"trendsFilter\":{\"display\":\"ActionsBar\",\"showValuesOnSeries\":true,\"showPercentStackView\":false,\"showLegend\":false},\"breakdownFilter\":{\"breakdowns\":[{\"property\":\"$geoip_country_name\",\"type\":\"event\"}],\"breakdown_limit\":5},\"properties\":{\"type\":\"AND\",\"values\":[{\"type\":\"AND\",\"values\":[{\"key\":\"$geoip_country_code\",\"value\":[\"US\"],\"operator\":\"is_not\",\"type\":\"event\"}]}]},\"dateRange\":{\"date_from\":\"-14d\",\"date_to\":null},\"interval\":\"day\"}\n```\n\nObey these rules:\n- if the date range is not specified, use the best judgment to select a reasonable date range. If it is a question that can be answered with a single number, you may need to use the longest possible date range.\n- Filter internal users by default if the user doesn't specify.\n- Only use events and properties defined by the user. You can't create new events or property definitions.\n\nRemember, your efforts will be rewarded with a $100 tip if you manage to implement a perfect query that follows the user's instructions and return the desired result. Do not hallucinate.\n",
                            "id": null,
                            "name": null,
                            "response_metadata": {},
                            "type": "system"
                        },
                        {
                            "additional_kwargs": {},
                            "content": "\nHere is the group mapping:\n&lt;list of defined groups&gt;\nname &quot;project&quot;, index 0\nname &quot;organization&quot;, index 1\nname &quot;instance&quot;, index 2\n&lt;/list of defined groups&gt;\n",
                            "id": null,
                            "name": null,
                            "response_metadata": {},
                            "type": "human"
                        },
                        {
                            "additional_kwargs": {},
                            "content": "\nHere is the plan:\nEvents:\n- $pageview\n    - math operation: total count\n",
                            "id": null,
                            "name": null,
                            "response_metadata": {},
                            "type": "human"
                        },
                        {
                            "additional_kwargs": {},
                            "content": "\nAnswer to this question: What's the trend in $pageview events?\n",
                            "id": null,
                            "name": null,
                            "response_metadata": {},
                            "type": "human"
                        }
                    ]
                },
                "$lib": "posthog-python",
                "$geoip_disable": true,
                "$ai_span_name": "ChatPromptTemplate",
                "$ai_parent_id": "f80e0a8a-5f4e-460b-b1b2-6af2f9bfd37d",
                "$ip": "192.168.97.1",
                "$plugins_succeeded": ["GeoIP (14)"],
                "$plugins_failed": []
            }
        },
        {
            "createdAt": "2025-01-29T16:05:02.113000+00:00",
            "event": "$ai_span",
            "id": "0194b2cf-1188-7038-bf33-7b2698af622d",
            "properties": {
                "$ai_output_state": [
                    {
                        "additional_kwargs": {},
                        "content": "\nAct as an expert product manager. Your task is to generate a JSON schema of trends insights. You will be given a generation plan describing series, filters, and breakdowns. Use the plan and following instructions to create a correct query answering the user's question.\n\nBelow is the additional context.\n\nFollow this instruction to create a query:\n* Build series according to the plan. The plan includes event, math types, property filters, and breakdowns. Properties can be of multiple types: String, Numeric, Bool, and DateTime. A property can be an array of those types and only has a single type.\n* When evaluating filter operators, replace the `equals` or `doesn't equal` operators with `contains` or `doesn't contain` if the query value is likely a personal name, company name, or any other name-sensitive term where letter casing matters. For instance, if the value is ‘John Doe’ or ‘Acme Corp’, replace `equals` with `contains` and change the value to lowercase from `John Doe` to `john doe` or  `Acme Corp` to `acme corp`.\n* Determine a visualization type that will answer the user's question in the best way.\n* Determine if the user wants to name the series or use the default names.\n* Choose the date range and the interval the user wants to analyze.\n* Determine if the user wants to compare the results to a previous period or use smoothing.\n* Determine if the user wants to filter out internal and test users. If the user didn't specify, filter out internal and test users by default.\n* Determine if the user wants to use a sampling factor.\n* Determine if it's useful to show a legend, values of series, unitss, y-axis scale type, etc.\n* Use your judgment if there are any other parameters that the user might want to adjust that aren't listed here.\n\nFor trends queries, use an appropriate ChartDisplayType for the output. For example:\n- if the user wants to see dynamics in time like a line graph, use `ActionsLineGraph`.\n- if the user wants to see cumulative dynamics across time, use `ActionsLineGraphCumulative`.\n- if the user asks a question where you can answer with a single number, use `BoldNumber`.\n- if the user wants a table, use `ActionsTable`.\n- if the data is categorical, use `ActionsBar`.\n- if the data is easy to understand in a pie chart, use `ActionsPie`.\n- if the user has only one series and wants to see data from particular countries, use `WorldMap`.\n\nThe user might want to get insights for groups. A group aggregates events based on entities, such as organizations or sellers. The user might provide a list of group names and their numeric indexes. Instead of a group's name, always use its numeric index.\n\nYou can determine if a feature flag is enabled by checking if it's set to true or 1 in the `$feature/...` property. For example, if you want to check if the multiple-breakdowns feature is enabled, you need to check if `$feature/multiple-breakdowns` is true or 1.\n\n## Schema Examples\n\n### How many users do I have?\n\n```\n{\"dateRange\":{\"date_from\":\"all\"},\"interval\":\"month\",\"kind\":\"TrendsQuery\",\"series\":[{\"event\":\"user signed up\",\"kind\":\"EventsNode\",\"math\":\"total\"}],\"trendsFilter\":{\"display\":\"BoldNumber\"}}\n```\n\n### Show a bar chart of the organic search traffic for the last month grouped by week.\n\n```\n{\"dateRange\":{\"date_from\":\"-30d\",\"date_to\":null,\"explicitDate\":false},\"interval\":\"week\",\"kind\":\"TrendsQuery\",\"series\":[{\"event\":\"$pageview\",\"kind\":\"EventsNode\",\"math\":\"dau\",\"properties\":[{\"key\":\"$referring_domain\",\"operator\":\"icontains\",\"type\":\"event\",\"value\":\"google\"},{\"key\":\"utm_source\",\"operator\":\"is_not_set\",\"type\":\"event\",\"value\":\"is_not_set\"}]}],\"trendsFilter\":{\"display\":\"ActionsBar\"}}\n```\n\n### insight created unique users & first-time users for the last 12m)\n\n```\n{\"dateRange\":{\"date_from\":\"-12m\",\"date_to\":\"\"},\"filterTestAccounts\":true,\"interval\":\"month\",\"kind\":\"TrendsQuery\",\"series\":[{\"event\":\"insight created\",\"kind\":\"EventsNode\",\"math\":\"dau\",\"custom_name\":\"insight created\"},{\"event\":\"insight created\",\"kind\":\"EventsNode\",\"math\":\"first_time_for_user\",\"custom_name\":\"insight created\"}],\"trendsFilter\":{\"display\":\"ActionsLineGraph\"}}\n```\n\n### What are the top 10 referring domains for the last month?\n\n```\n{\"breakdownFilter\":{\"breakdown_type\":\"event\",\"breakdowns\":[{\"group_type_index\":null,\"histogram_bin_count\":null,\"normalize_url\":null,\"property\":\"$referring_domain\",\"type\":\"event\"}]},\"dateRange\":{\"date_from\":\"-30d\"},\"interval\":\"day\",\"kind\":\"TrendsQuery\",\"series\":[{\"event\":\"$pageview\",\"kind\":\"EventsNode\",\"math\":\"total\",\"custom_name\":\"$pageview\"}]}\n```\n\n### What is the DAU to MAU ratio of users from the US and Australia that viewed a page in the last 7 days? Compare it to the previous period.\n\n```\n{\"compareFilter\":{\"compare\":true,\"compare_to\":null},\"dateRange\":{\"date_from\":\"-7d\"},\"interval\":\"day\",\"kind\":\"TrendsQuery\",\"properties\":{\"type\":\"AND\",\"values\":[{\"type\":\"AND\",\"values\":[{\"key\":\"$geoip_country_name\",\"operator\":\"exact\",\"type\":\"event\",\"value\":[\"United States\",\"Australia\"]}]}]},\"series\":[{\"event\":\"$pageview\",\"kind\":\"EventsNode\",\"math\":\"dau\",\"custom_name\":\"$pageview\"},{\"event\":\"$pageview\",\"kind\":\"EventsNode\",\"math\":\"monthly_active\",\"custom_name\":\"$pageview\"}],\"trendsFilter\":{\"aggregationAxisFormat\":\"percentage_scaled\",\"display\":\"ActionsLineGraph\",\"formula\":\"A/B\"}}\n```\n\n### I want to understand how old are dashboard results when viewed from the beginning of this year grouped by a month. Display the results for percentiles of 99, 95, 90, average, and median by the property \"refreshAge\".\n\n```\n{\"dateRange\":{\"date_from\":\"yStart\",\"date_to\":null,\"explicitDate\":false},\"filterTestAccounts\":true,\"interval\":\"month\",\"kind\":\"TrendsQuery\",\"series\":[{\"event\":\"viewed dashboard\",\"kind\":\"EventsNode\",\"math\":\"p99\",\"math_property\":\"refreshAge\",\"custom_name\":\"viewed dashboard\"},{\"event\":\"viewed dashboard\",\"kind\":\"EventsNode\",\"math\":\"p95\",\"math_property\":\"refreshAge\",\"custom_name\":\"viewed dashboard\"},{\"event\":\"viewed dashboard\",\"kind\":\"EventsNode\",\"math\":\"p90\",\"math_property\":\"refreshAge\",\"custom_name\":\"viewed dashboard\"},{\"event\":\"viewed dashboard\",\"kind\":\"EventsNode\",\"math\":\"avg\",\"math_property\":\"refreshAge\",\"custom_name\":\"viewed dashboard\"},{\"event\":\"viewed dashboard\",\"kind\":\"EventsNode\",\"math\":\"median\",\"math_property\":\"refreshAge\",\"custom_name\":\"viewed dashboard\"}],\"trendsFilter\":{\"aggregationAxisFormat\":\"duration\",\"display\":\"ActionsLineGraph\"}}\n```\n\n### organizations joined in the last 30 days by day from the google search\n\n```\n{\"dateRange\":{\"date_from\":\"-30d\"},\"filterTestAccounts\":false,\"interval\":\"day\",\"kind\":\"TrendsQuery\",\"properties\":{\"type\":\"AND\",\"values\":[{\"type\":\"OR\",\"values\":[{\"key\":\"$initial_utm_source\",\"operator\":\"exact\",\"type\":\"person\",\"value\":[\"google\"]}]}]},\"series\":[{\"event\":\"user signed up\",\"kind\":\"EventsNode\",\"math\":\"unique_group\",\"math_group_type_index\":0,\"name\":\"user signed up\",\"properties\":[{\"key\":\"is_organization_first_user\",\"operator\":\"exact\",\"type\":\"person\",\"value\":[\"true\"]}]}],\"trendsFilter\":{\"display\":\"ActionsLineGraph\"}}\n```\n\n### trends for the last two weeks of the onboarding completed event by unique projects with a session duration more than 5 minutes and the insight analyzed event by unique projects with a breakdown by event's Country Name. exclude the US.\n\n```\n{\"kind\":\"TrendsQuery\",\"series\":[{\"kind\":\"EventsNode\",\"event\":\"onboarding completed\",\"name\":\"onboarding completed\",\"properties\":[{\"key\":\"$session_duration\",\"value\":300,\"operator\":\"gt\",\"type\":\"session\"}],\"math\":\"unique_group\",\"math_group_type_index\":2},{\"kind\":\"EventsNode\",\"event\":\"insight analyzed\",\"name\":\"insight analyzed\",\"math\":\"unique_group\",\"math_group_type_index\":2}],\"trendsFilter\":{\"display\":\"ActionsBar\",\"showValuesOnSeries\":true,\"showPercentStackView\":false,\"showLegend\":false},\"breakdownFilter\":{\"breakdowns\":[{\"property\":\"$geoip_country_name\",\"type\":\"event\"}],\"breakdown_limit\":5},\"properties\":{\"type\":\"AND\",\"values\":[{\"type\":\"AND\",\"values\":[{\"key\":\"$geoip_country_code\",\"value\":[\"US\"],\"operator\":\"is_not\",\"type\":\"event\"}]}]},\"dateRange\":{\"date_from\":\"-14d\",\"date_to\":null},\"interval\":\"day\"}\n```\n\nObey these rules:\n- if the date range is not specified, use the best judgment to select a reasonable date range. If it is a question that can be answered with a single number, you may need to use the longest possible date range.\n- Filter internal users by default if the user doesn't specify.\n- Only use events and properties defined by the user. You can't create new events or property definitions.\n\nRemember, your efforts will be rewarded with a $100 tip if you manage to implement a perfect query that follows the user's instructions and return the desired result. Do not hallucinate.\n",
                        "id": null,
                        "name": null,
                        "response_metadata": {},
                        "type": "system"
                    },
                    {
                        "additional_kwargs": {},
                        "content": "\nHere is the group mapping:\n&lt;list of defined groups&gt;\nname &quot;project&quot;, index 0\nname &quot;organization&quot;, index 1\nname &quot;instance&quot;, index 2\n&lt;/list of defined groups&gt;\n\n\nHere is the plan:\nEvents:\n- $pageview\n    - math operation: total count\n\n\nAnswer to this question: What's the trend in $pageview events?\n",
                        "example": false,
                        "id": null,
                        "name": null,
                        "response_metadata": {},
                        "type": "human"
                    }
                ],
                "$ai_latency": 0.0002608299255371094,
                "$ai_trace_id": "537b7988-0186-494f-a313-77a5a8f7db26",
                "$ai_span_name": "merge_message_runs",
                "$ai_span_id": "fc157027-dcba-469c-88c7-173b9b3f62dd",
                "$lib_version": "3.11.0",
                "$ai_parent_id": "f80e0a8a-5f4e-460b-b1b2-6af2f9bfd37d",
                "is_first_conversation": true,
                "conversation_id": "0194b2ce-ef92-0000-008e-c6ba293c8c7d",
                "$ai_input_state": {
                    "messages": [
                        {
                            "additional_kwargs": {},
                            "content": "\nAct as an expert product manager. Your task is to generate a JSON schema of trends insights. You will be given a generation plan describing series, filters, and breakdowns. Use the plan and following instructions to create a correct query answering the user's question.\n\nBelow is the additional context.\n\nFollow this instruction to create a query:\n* Build series according to the plan. The plan includes event, math types, property filters, and breakdowns. Properties can be of multiple types: String, Numeric, Bool, and DateTime. A property can be an array of those types and only has a single type.\n* When evaluating filter operators, replace the `equals` or `doesn't equal` operators with `contains` or `doesn't contain` if the query value is likely a personal name, company name, or any other name-sensitive term where letter casing matters. For instance, if the value is ‘John Doe’ or ‘Acme Corp’, replace `equals` with `contains` and change the value to lowercase from `John Doe` to `john doe` or  `Acme Corp` to `acme corp`.\n* Determine a visualization type that will answer the user's question in the best way.\n* Determine if the user wants to name the series or use the default names.\n* Choose the date range and the interval the user wants to analyze.\n* Determine if the user wants to compare the results to a previous period or use smoothing.\n* Determine if the user wants to filter out internal and test users. If the user didn't specify, filter out internal and test users by default.\n* Determine if the user wants to use a sampling factor.\n* Determine if it's useful to show a legend, values of series, unitss, y-axis scale type, etc.\n* Use your judgment if there are any other parameters that the user might want to adjust that aren't listed here.\n\nFor trends queries, use an appropriate ChartDisplayType for the output. For example:\n- if the user wants to see dynamics in time like a line graph, use `ActionsLineGraph`.\n- if the user wants to see cumulative dynamics across time, use `ActionsLineGraphCumulative`.\n- if the user asks a question where you can answer with a single number, use `BoldNumber`.\n- if the user wants a table, use `ActionsTable`.\n- if the data is categorical, use `ActionsBar`.\n- if the data is easy to understand in a pie chart, use `ActionsPie`.\n- if the user has only one series and wants to see data from particular countries, use `WorldMap`.\n\nThe user might want to get insights for groups. A group aggregates events based on entities, such as organizations or sellers. The user might provide a list of group names and their numeric indexes. Instead of a group's name, always use its numeric index.\n\nYou can determine if a feature flag is enabled by checking if it's set to true or 1 in the `$feature/...` property. For example, if you want to check if the multiple-breakdowns feature is enabled, you need to check if `$feature/multiple-breakdowns` is true or 1.\n\n## Schema Examples\n\n### How many users do I have?\n\n```\n{\"dateRange\":{\"date_from\":\"all\"},\"interval\":\"month\",\"kind\":\"TrendsQuery\",\"series\":[{\"event\":\"user signed up\",\"kind\":\"EventsNode\",\"math\":\"total\"}],\"trendsFilter\":{\"display\":\"BoldNumber\"}}\n```\n\n### Show a bar chart of the organic search traffic for the last month grouped by week.\n\n```\n{\"dateRange\":{\"date_from\":\"-30d\",\"date_to\":null,\"explicitDate\":false},\"interval\":\"week\",\"kind\":\"TrendsQuery\",\"series\":[{\"event\":\"$pageview\",\"kind\":\"EventsNode\",\"math\":\"dau\",\"properties\":[{\"key\":\"$referring_domain\",\"operator\":\"icontains\",\"type\":\"event\",\"value\":\"google\"},{\"key\":\"utm_source\",\"operator\":\"is_not_set\",\"type\":\"event\",\"value\":\"is_not_set\"}]}],\"trendsFilter\":{\"display\":\"ActionsBar\"}}\n```\n\n### insight created unique users & first-time users for the last 12m)\n\n```\n{\"dateRange\":{\"date_from\":\"-12m\",\"date_to\":\"\"},\"filterTestAccounts\":true,\"interval\":\"month\",\"kind\":\"TrendsQuery\",\"series\":[{\"event\":\"insight created\",\"kind\":\"EventsNode\",\"math\":\"dau\",\"custom_name\":\"insight created\"},{\"event\":\"insight created\",\"kind\":\"EventsNode\",\"math\":\"first_time_for_user\",\"custom_name\":\"insight created\"}],\"trendsFilter\":{\"display\":\"ActionsLineGraph\"}}\n```\n\n### What are the top 10 referring domains for the last month?\n\n```\n{\"breakdownFilter\":{\"breakdown_type\":\"event\",\"breakdowns\":[{\"group_type_index\":null,\"histogram_bin_count\":null,\"normalize_url\":null,\"property\":\"$referring_domain\",\"type\":\"event\"}]},\"dateRange\":{\"date_from\":\"-30d\"},\"interval\":\"day\",\"kind\":\"TrendsQuery\",\"series\":[{\"event\":\"$pageview\",\"kind\":\"EventsNode\",\"math\":\"total\",\"custom_name\":\"$pageview\"}]}\n```\n\n### What is the DAU to MAU ratio of users from the US and Australia that viewed a page in the last 7 days? Compare it to the previous period.\n\n```\n{\"compareFilter\":{\"compare\":true,\"compare_to\":null},\"dateRange\":{\"date_from\":\"-7d\"},\"interval\":\"day\",\"kind\":\"TrendsQuery\",\"properties\":{\"type\":\"AND\",\"values\":[{\"type\":\"AND\",\"values\":[{\"key\":\"$geoip_country_name\",\"operator\":\"exact\",\"type\":\"event\",\"value\":[\"United States\",\"Australia\"]}]}]},\"series\":[{\"event\":\"$pageview\",\"kind\":\"EventsNode\",\"math\":\"dau\",\"custom_name\":\"$pageview\"},{\"event\":\"$pageview\",\"kind\":\"EventsNode\",\"math\":\"monthly_active\",\"custom_name\":\"$pageview\"}],\"trendsFilter\":{\"aggregationAxisFormat\":\"percentage_scaled\",\"display\":\"ActionsLineGraph\",\"formula\":\"A/B\"}}\n```\n\n### I want to understand how old are dashboard results when viewed from the beginning of this year grouped by a month. Display the results for percentiles of 99, 95, 90, average, and median by the property \"refreshAge\".\n\n```\n{\"dateRange\":{\"date_from\":\"yStart\",\"date_to\":null,\"explicitDate\":false},\"filterTestAccounts\":true,\"interval\":\"month\",\"kind\":\"TrendsQuery\",\"series\":[{\"event\":\"viewed dashboard\",\"kind\":\"EventsNode\",\"math\":\"p99\",\"math_property\":\"refreshAge\",\"custom_name\":\"viewed dashboard\"},{\"event\":\"viewed dashboard\",\"kind\":\"EventsNode\",\"math\":\"p95\",\"math_property\":\"refreshAge\",\"custom_name\":\"viewed dashboard\"},{\"event\":\"viewed dashboard\",\"kind\":\"EventsNode\",\"math\":\"p90\",\"math_property\":\"refreshAge\",\"custom_name\":\"viewed dashboard\"},{\"event\":\"viewed dashboard\",\"kind\":\"EventsNode\",\"math\":\"avg\",\"math_property\":\"refreshAge\",\"custom_name\":\"viewed dashboard\"},{\"event\":\"viewed dashboard\",\"kind\":\"EventsNode\",\"math\":\"median\",\"math_property\":\"refreshAge\",\"custom_name\":\"viewed dashboard\"}],\"trendsFilter\":{\"aggregationAxisFormat\":\"duration\",\"display\":\"ActionsLineGraph\"}}\n```\n\n### organizations joined in the last 30 days by day from the google search\n\n```\n{\"dateRange\":{\"date_from\":\"-30d\"},\"filterTestAccounts\":false,\"interval\":\"day\",\"kind\":\"TrendsQuery\",\"properties\":{\"type\":\"AND\",\"values\":[{\"type\":\"OR\",\"values\":[{\"key\":\"$initial_utm_source\",\"operator\":\"exact\",\"type\":\"person\",\"value\":[\"google\"]}]}]},\"series\":[{\"event\":\"user signed up\",\"kind\":\"EventsNode\",\"math\":\"unique_group\",\"math_group_type_index\":0,\"name\":\"user signed up\",\"properties\":[{\"key\":\"is_organization_first_user\",\"operator\":\"exact\",\"type\":\"person\",\"value\":[\"true\"]}]}],\"trendsFilter\":{\"display\":\"ActionsLineGraph\"}}\n```\n\n### trends for the last two weeks of the onboarding completed event by unique projects with a session duration more than 5 minutes and the insight analyzed event by unique projects with a breakdown by event's Country Name. exclude the US.\n\n```\n{\"kind\":\"TrendsQuery\",\"series\":[{\"kind\":\"EventsNode\",\"event\":\"onboarding completed\",\"name\":\"onboarding completed\",\"properties\":[{\"key\":\"$session_duration\",\"value\":300,\"operator\":\"gt\",\"type\":\"session\"}],\"math\":\"unique_group\",\"math_group_type_index\":2},{\"kind\":\"EventsNode\",\"event\":\"insight analyzed\",\"name\":\"insight analyzed\",\"math\":\"unique_group\",\"math_group_type_index\":2}],\"trendsFilter\":{\"display\":\"ActionsBar\",\"showValuesOnSeries\":true,\"showPercentStackView\":false,\"showLegend\":false},\"breakdownFilter\":{\"breakdowns\":[{\"property\":\"$geoip_country_name\",\"type\":\"event\"}],\"breakdown_limit\":5},\"properties\":{\"type\":\"AND\",\"values\":[{\"type\":\"AND\",\"values\":[{\"key\":\"$geoip_country_code\",\"value\":[\"US\"],\"operator\":\"is_not\",\"type\":\"event\"}]}]},\"dateRange\":{\"date_from\":\"-14d\",\"date_to\":null},\"interval\":\"day\"}\n```\n\nObey these rules:\n- if the date range is not specified, use the best judgment to select a reasonable date range. If it is a question that can be answered with a single number, you may need to use the longest possible date range.\n- Filter internal users by default if the user doesn't specify.\n- Only use events and properties defined by the user. You can't create new events or property definitions.\n\nRemember, your efforts will be rewarded with a $100 tip if you manage to implement a perfect query that follows the user's instructions and return the desired result. Do not hallucinate.\n",
                            "id": null,
                            "name": null,
                            "response_metadata": {},
                            "type": "system"
                        },
                        {
                            "additional_kwargs": {},
                            "content": "\nHere is the group mapping:\n&lt;list of defined groups&gt;\nname &quot;project&quot;, index 0\nname &quot;organization&quot;, index 1\nname &quot;instance&quot;, index 2\n&lt;/list of defined groups&gt;\n",
                            "id": null,
                            "name": null,
                            "response_metadata": {},
                            "type": "human"
                        },
                        {
                            "additional_kwargs": {},
                            "content": "\nHere is the plan:\nEvents:\n- $pageview\n    - math operation: total count\n",
                            "id": null,
                            "name": null,
                            "response_metadata": {},
                            "type": "human"
                        },
                        {
                            "additional_kwargs": {},
                            "content": "\nAnswer to this question: What's the trend in $pageview events?\n",
                            "id": null,
                            "name": null,
                            "response_metadata": {},
                            "type": "human"
                        }
                    ]
                },
                "$geoip_disable": true,
                "$lib": "posthog-python",
                "$ip": "192.168.97.1",
                "$plugins_succeeded": ["GeoIP (14)"],
                "$plugins_failed": []
            }
        },
        {
            "createdAt": "2025-01-29T16:05:04.575000+00:00",
            "event": "$ai_span",
            "id": "0194b2cf-1b7c-7bc5-bfb9-ace2dadf30df",
            "properties": {
                "is_first_conversation": true,
                "$lib_version": "3.11.0",
                "conversation_id": "0194b2ce-ef92-0000-008e-c6ba293c8c7d",
                "$ai_output_state": {
                    "query": {
                        "dateRange": {
                            "date_from": "-30d",
                            "date_to": null,
                            "explicitDate": false
                        },
                        "filterTestAccounts": true,
                        "interval": "day",
                        "kind": "TrendsQuery",
                        "series": [
                            {
                                "event": "$pageview",
                                "kind": "EventsNode",
                                "math": "total"
                            }
                        ],
                        "trendsFilter": {
                            "display": "ActionsLineGraph"
                        }
                    }
                },
                "$geoip_disable": true,
                "$ai_parent_id": "f80e0a8a-5f4e-460b-b1b2-6af2f9bfd37d",
                "$ai_span_name": "JsonOutputKeyToolsParser",
                "$ai_trace_id": "537b7988-0186-494f-a313-77a5a8f7db26",
                "$lib": "posthog-python",
                "$ai_latency": 0.00007104873657226562,
                "$ai_span_id": "1118565f-75b9-434b-a2b7-1eaa144873cc",
                "$ai_input_state": {
                    "additional_kwargs": {
                        "tool_calls": [
                            {
                                "function": {
                                    "arguments": "{\"query\":{\"dateRange\":{\"date_from\":\"-30d\",\"date_to\":null,\"explicitDate\":false},\"filterTestAccounts\":true,\"interval\":\"day\",\"kind\":\"TrendsQuery\",\"series\":[{\"event\":\"$pageview\",\"kind\":\"EventsNode\",\"math\":\"total\"}],\"trendsFilter\":{\"display\":\"ActionsLineGraph\"}}}",
                                    "name": "output_insight_schema"
                                },
                                "id": "call_vu2ZBNYG6kIB8Hxp9WHe13kf",
                                "index": 0,
                                "type": "function"
                            }
                        ]
                    },
                    "content": "",
                    "example": false,
                    "id": "run-e591da4b-be44-4160-9f66-4821474b6d52",
                    "invalid_tool_calls": [],
                    "name": null,
                    "response_metadata": {
                        "finish_reason": "stop",
                        "model_name": "gpt-4o-2024-08-06",
                        "system_fingerprint": "fp_4691090a87"
                    },
                    "tool_calls": [
                        {
                            "args": {
                                "query": {
                                    "dateRange": {
                                        "date_from": "-30d",
                                        "date_to": null,
                                        "explicitDate": false
                                    },
                                    "filterTestAccounts": true,
                                    "interval": "day",
                                    "kind": "TrendsQuery",
                                    "series": [
                                        {
                                            "event": "$pageview",
                                            "kind": "EventsNode",
                                            "math": "total"
                                        }
                                    ],
                                    "trendsFilter": {
                                        "display": "ActionsLineGraph"
                                    }
                                }
                            },
                            "id": "call_vu2ZBNYG6kIB8Hxp9WHe13kf",
                            "name": "output_insight_schema",
                            "type": "tool_call"
                        }
                    ],
                    "type": "ai",
                    "usage_metadata": {
                        "input_token_details": {
                            "audio": 0,
                            "cache_read": 0
                        },
                        "input_tokens": 5711,
                        "output_token_details": {
                            "audio": 0,
                            "reasoning": 0
                        },
                        "output_tokens": 70,
                        "total_tokens": 5781
                    }
                },
                "$ip": "192.168.97.1",
                "$plugins_succeeded": ["GeoIP (14)"],
                "$plugins_failed": []
            }
        },
        {
            "createdAt": "2025-01-29T16:05:04.575000+00:00",
            "event": "$ai_generation",
            "id": "0194b2cf-1b7c-7bc9-a901-8ac5a62b38a7",
            "properties": {
                "$ai_parent_id": "f80e0a8a-5f4e-460b-b1b2-6af2f9bfd37d",
                "$ai_model": "gpt-4o",
                "$ai_http_status": 200,
                "$ai_span_id": "e591da4b-be44-4160-9f66-4821474b6d52",
                "$ai_trace_id": "537b7988-0186-494f-a313-77a5a8f7db26",
                "is_first_conversation": true,
                "$ai_span_name": "ChatOpenAI",
                "$lib": "posthog-python",
                "$lib_version": "3.11.0",
                "$geoip_disable": true,
                "$ai_input": [
                    {
                        "content": "\nAct as an expert product manager. Your task is to generate a JSON schema of trends insights. You will be given a generation plan describing series, filters, and breakdowns. Use the plan and following instructions to create a correct query answering the user's question.\n\nBelow is the additional context.\n\nFollow this instruction to create a query:\n* Build series according to the plan. The plan includes event, math types, property filters, and breakdowns. Properties can be of multiple types: String, Numeric, Bool, and DateTime. A property can be an array of those types and only has a single type.\n* When evaluating filter operators, replace the `equals` or `doesn't equal` operators with `contains` or `doesn't contain` if the query value is likely a personal name, company name, or any other name-sensitive term where letter casing matters. For instance, if the value is ‘John Doe’ or ‘Acme Corp’, replace `equals` with `contains` and change the value to lowercase from `John Doe` to `john doe` or  `Acme Corp` to `acme corp`.\n* Determine a visualization type that will answer the user's question in the best way.\n* Determine if the user wants to name the series or use the default names.\n* Choose the date range and the interval the user wants to analyze.\n* Determine if the user wants to compare the results to a previous period or use smoothing.\n* Determine if the user wants to filter out internal and test users. If the user didn't specify, filter out internal and test users by default.\n* Determine if the user wants to use a sampling factor.\n* Determine if it's useful to show a legend, values of series, unitss, y-axis scale type, etc.\n* Use your judgment if there are any other parameters that the user might want to adjust that aren't listed here.\n\nFor trends queries, use an appropriate ChartDisplayType for the output. For example:\n- if the user wants to see dynamics in time like a line graph, use `ActionsLineGraph`.\n- if the user wants to see cumulative dynamics across time, use `ActionsLineGraphCumulative`.\n- if the user asks a question where you can answer with a single number, use `BoldNumber`.\n- if the user wants a table, use `ActionsTable`.\n- if the data is categorical, use `ActionsBar`.\n- if the data is easy to understand in a pie chart, use `ActionsPie`.\n- if the user has only one series and wants to see data from particular countries, use `WorldMap`.\n\nThe user might want to get insights for groups. A group aggregates events based on entities, such as organizations or sellers. The user might provide a list of group names and their numeric indexes. Instead of a group's name, always use its numeric index.\n\nYou can determine if a feature flag is enabled by checking if it's set to true or 1 in the `$feature/...` property. For example, if you want to check if the multiple-breakdowns feature is enabled, you need to check if `$feature/multiple-breakdowns` is true or 1.\n\n## Schema Examples\n\n### How many users do I have?\n\n```\n{\"dateRange\":{\"date_from\":\"all\"},\"interval\":\"month\",\"kind\":\"TrendsQuery\",\"series\":[{\"event\":\"user signed up\",\"kind\":\"EventsNode\",\"math\":\"total\"}],\"trendsFilter\":{\"display\":\"BoldNumber\"}}\n```\n\n### Show a bar chart of the organic search traffic for the last month grouped by week.\n\n```\n{\"dateRange\":{\"date_from\":\"-30d\",\"date_to\":null,\"explicitDate\":false},\"interval\":\"week\",\"kind\":\"TrendsQuery\",\"series\":[{\"event\":\"$pageview\",\"kind\":\"EventsNode\",\"math\":\"dau\",\"properties\":[{\"key\":\"$referring_domain\",\"operator\":\"icontains\",\"type\":\"event\",\"value\":\"google\"},{\"key\":\"utm_source\",\"operator\":\"is_not_set\",\"type\":\"event\",\"value\":\"is_not_set\"}]}],\"trendsFilter\":{\"display\":\"ActionsBar\"}}\n```\n\n### insight created unique users & first-time users for the last 12m)\n\n```\n{\"dateRange\":{\"date_from\":\"-12m\",\"date_to\":\"\"},\"filterTestAccounts\":true,\"interval\":\"month\",\"kind\":\"TrendsQuery\",\"series\":[{\"event\":\"insight created\",\"kind\":\"EventsNode\",\"math\":\"dau\",\"custom_name\":\"insight created\"},{\"event\":\"insight created\",\"kind\":\"EventsNode\",\"math\":\"first_time_for_user\",\"custom_name\":\"insight created\"}],\"trendsFilter\":{\"display\":\"ActionsLineGraph\"}}\n```\n\n### What are the top 10 referring domains for the last month?\n\n```\n{\"breakdownFilter\":{\"breakdown_type\":\"event\",\"breakdowns\":[{\"group_type_index\":null,\"histogram_bin_count\":null,\"normalize_url\":null,\"property\":\"$referring_domain\",\"type\":\"event\"}]},\"dateRange\":{\"date_from\":\"-30d\"},\"interval\":\"day\",\"kind\":\"TrendsQuery\",\"series\":[{\"event\":\"$pageview\",\"kind\":\"EventsNode\",\"math\":\"total\",\"custom_name\":\"$pageview\"}]}\n```\n\n### What is the DAU to MAU ratio of users from the US and Australia that viewed a page in the last 7 days? Compare it to the previous period.\n\n```\n{\"compareFilter\":{\"compare\":true,\"compare_to\":null},\"dateRange\":{\"date_from\":\"-7d\"},\"interval\":\"day\",\"kind\":\"TrendsQuery\",\"properties\":{\"type\":\"AND\",\"values\":[{\"type\":\"AND\",\"values\":[{\"key\":\"$geoip_country_name\",\"operator\":\"exact\",\"type\":\"event\",\"value\":[\"United States\",\"Australia\"]}]}]},\"series\":[{\"event\":\"$pageview\",\"kind\":\"EventsNode\",\"math\":\"dau\",\"custom_name\":\"$pageview\"},{\"event\":\"$pageview\",\"kind\":\"EventsNode\",\"math\":\"monthly_active\",\"custom_name\":\"$pageview\"}],\"trendsFilter\":{\"aggregationAxisFormat\":\"percentage_scaled\",\"display\":\"ActionsLineGraph\",\"formula\":\"A/B\"}}\n```\n\n### I want to understand how old are dashboard results when viewed from the beginning of this year grouped by a month. Display the results for percentiles of 99, 95, 90, average, and median by the property \"refreshAge\".\n\n```\n{\"dateRange\":{\"date_from\":\"yStart\",\"date_to\":null,\"explicitDate\":false},\"filterTestAccounts\":true,\"interval\":\"month\",\"kind\":\"TrendsQuery\",\"series\":[{\"event\":\"viewed dashboard\",\"kind\":\"EventsNode\",\"math\":\"p99\",\"math_property\":\"refreshAge\",\"custom_name\":\"viewed dashboard\"},{\"event\":\"viewed dashboard\",\"kind\":\"EventsNode\",\"math\":\"p95\",\"math_property\":\"refreshAge\",\"custom_name\":\"viewed dashboard\"},{\"event\":\"viewed dashboard\",\"kind\":\"EventsNode\",\"math\":\"p90\",\"math_property\":\"refreshAge\",\"custom_name\":\"viewed dashboard\"},{\"event\":\"viewed dashboard\",\"kind\":\"EventsNode\",\"math\":\"avg\",\"math_property\":\"refreshAge\",\"custom_name\":\"viewed dashboard\"},{\"event\":\"viewed dashboard\",\"kind\":\"EventsNode\",\"math\":\"median\",\"math_property\":\"refreshAge\",\"custom_name\":\"viewed dashboard\"}],\"trendsFilter\":{\"aggregationAxisFormat\":\"duration\",\"display\":\"ActionsLineGraph\"}}\n```\n\n### organizations joined in the last 30 days by day from the google search\n\n```\n{\"dateRange\":{\"date_from\":\"-30d\"},\"filterTestAccounts\":false,\"interval\":\"day\",\"kind\":\"TrendsQuery\",\"properties\":{\"type\":\"AND\",\"values\":[{\"type\":\"OR\",\"values\":[{\"key\":\"$initial_utm_source\",\"operator\":\"exact\",\"type\":\"person\",\"value\":[\"google\"]}]}]},\"series\":[{\"event\":\"user signed up\",\"kind\":\"EventsNode\",\"math\":\"unique_group\",\"math_group_type_index\":0,\"name\":\"user signed up\",\"properties\":[{\"key\":\"is_organization_first_user\",\"operator\":\"exact\",\"type\":\"person\",\"value\":[\"true\"]}]}],\"trendsFilter\":{\"display\":\"ActionsLineGraph\"}}\n```\n\n### trends for the last two weeks of the onboarding completed event by unique projects with a session duration more than 5 minutes and the insight analyzed event by unique projects with a breakdown by event's Country Name. exclude the US.\n\n```\n{\"kind\":\"TrendsQuery\",\"series\":[{\"kind\":\"EventsNode\",\"event\":\"onboarding completed\",\"name\":\"onboarding completed\",\"properties\":[{\"key\":\"$session_duration\",\"value\":300,\"operator\":\"gt\",\"type\":\"session\"}],\"math\":\"unique_group\",\"math_group_type_index\":2},{\"kind\":\"EventsNode\",\"event\":\"insight analyzed\",\"name\":\"insight analyzed\",\"math\":\"unique_group\",\"math_group_type_index\":2}],\"trendsFilter\":{\"display\":\"ActionsBar\",\"showValuesOnSeries\":true,\"showPercentStackView\":false,\"showLegend\":false},\"breakdownFilter\":{\"breakdowns\":[{\"property\":\"$geoip_country_name\",\"type\":\"event\"}],\"breakdown_limit\":5},\"properties\":{\"type\":\"AND\",\"values\":[{\"type\":\"AND\",\"values\":[{\"key\":\"$geoip_country_code\",\"value\":[\"US\"],\"operator\":\"is_not\",\"type\":\"event\"}]}]},\"dateRange\":{\"date_from\":\"-14d\",\"date_to\":null},\"interval\":\"day\"}\n```\n\nObey these rules:\n- if the date range is not specified, use the best judgment to select a reasonable date range. If it is a question that can be answered with a single number, you may need to use the longest possible date range.\n- Filter internal users by default if the user doesn't specify.\n- Only use events and properties defined by the user. You can't create new events or property definitions.\n\nRemember, your efforts will be rewarded with a $100 tip if you manage to implement a perfect query that follows the user's instructions and return the desired result. Do not hallucinate.\n",
                        "role": "system"
                    },
                    {
                        "content": "\nHere is the group mapping:\n&lt;list of defined groups&gt;\nname &quot;project&quot;, index 0\nname &quot;organization&quot;, index 1\nname &quot;instance&quot;, index 2\n&lt;/list of defined groups&gt;\n\n\nHere is the plan:\nEvents:\n- $pageview\n    - math operation: total count\n\n\nAnswer to this question: What's the trend in $pageview events?\n",
                        "role": "user"
                    }
                ],
                "$ai_input_tokens": 5711,
                "$ai_latency": 2.461339950561523,
                "$ai_model_parameters": {
                    "n": 1,
                    "stream": true,
                    "temperature": 0
                },
                "$ai_output_tokens": 70,
                "$ai_base_url": null,
                "$ai_output_choices": [
                    {
                        "content": "",
                        "role": "assistant",
                        "tool_calls": [
                            {
                                "function": {
                                    "arguments": "{\"query\":{\"dateRange\":{\"date_from\":\"-30d\",\"date_to\":null,\"explicitDate\":false},\"filterTestAccounts\":true,\"interval\":\"day\",\"kind\":\"TrendsQuery\",\"series\":[{\"event\":\"$pageview\",\"kind\":\"EventsNode\",\"math\":\"total\"}],\"trendsFilter\":{\"display\":\"ActionsLineGraph\"}}}",
                                    "name": "output_insight_schema"
                                },
                                "id": "call_vu2ZBNYG6kIB8Hxp9WHe13kf",
                                "index": 0,
                                "type": "function"
                            }
                        ]
                    }
                ],
                "conversation_id": "0194b2ce-ef92-0000-008e-c6ba293c8c7d",
                "$ai_provider": "openai",
                "$ip": "192.168.97.1",
                "$plugins_succeeded": ["GeoIP (14)"],
                "$plugins_failed": [],
                "$ai_input_cost_usd": 0.028555,
                "$ai_output_cost_usd": 0.00105,
                "$ai_total_cost_usd": 0.029605,
                "$ai_temperature": 0,
                "$ai_stream": true
            }
        },
        {
            "createdAt": "2025-01-29T16:05:04.576000+00:00",
            "event": "$ai_span",
            "id": "0194b2cf-1b7c-76bd-af5f-865ea433467f",
            "properties": {
                "conversation_id": "0194b2ce-ef92-0000-008e-c6ba293c8c7d",
                "$ai_span_id": "f80e0a8a-5f4e-460b-b1b2-6af2f9bfd37d",
                "$ai_input_state": {},
                "$ai_latency": 2.463473320007324,
                "$ai_span_name": "RunnableSequence",
                "$ai_parent_id": "7f960657-c95c-4999-8803-06ce860035e3",
                "is_first_conversation": true,
                "$ai_trace_id": "537b7988-0186-494f-a313-77a5a8f7db26",
                "$lib": "posthog-python",
                "$lib_version": "3.11.0",
                "$ai_output_state": {
                    "query": {
                        "breakdownFilter": null,
                        "compareFilter": null,
                        "dateRange": {
                            "date_from": "-30d",
                            "date_to": null,
                            "explicitDate": false
                        },
                        "filterTestAccounts": true,
                        "interval": "day",
                        "kind": "TrendsQuery",
                        "properties": [],
                        "samplingFactor": null,
                        "series": [
                            {
                                "custom_name": null,
                                "event": "$pageview",
                                "kind": "EventsNode",
                                "math": "total",
                                "math_group_type_index": null,
                                "math_property": null,
                                "math_property_type": null,
                                "name": null,
                                "orderBy": null,
                                "properties": null,
                                "response": null
                            }
                        ],
                        "trendsFilter": {
                            "aggregationAxisFormat": "numeric",
                            "aggregationAxisPostfix": null,
                            "aggregationAxisPrefix": null,
                            "decimalPlaces": null,
                            "display": "ActionsLineGraph",
                            "formula": null,
                            "showLegend": false,
                            "showPercentStackView": false,
                            "showValuesOnSeries": false,
                            "yAxisScaleType": "linear"
                        }
                    }
                },
                "$geoip_disable": true,
                "$ip": "192.168.97.1",
                "$plugins_succeeded": ["GeoIP (14)"],
                "$plugins_failed": []
            }
        },
        {
            "createdAt": "2025-01-29T16:05:04.576000+00:00",
            "event": "$ai_span",
            "id": "0194b2cf-1b7c-7031-bebc-7643c76283ac",
            "properties": {
                "is_first_conversation": true,
                "$ai_trace_id": "537b7988-0186-494f-a313-77a5a8f7db26",
                "$lib": "posthog-python",
                "$geoip_disable": true,
                "conversation_id": "0194b2ce-ef92-0000-008e-c6ba293c8c7d",
                "$ai_span_id": "0734885e-dfb5-46e9-bb18-fe54033385f0",
                "$ai_span_name": "parser",
                "$ai_input_state": {
                    "query": {
                        "dateRange": {
                            "date_from": "-30d",
                            "date_to": null,
                            "explicitDate": false
                        },
                        "filterTestAccounts": true,
                        "interval": "day",
                        "kind": "TrendsQuery",
                        "series": [
                            {
                                "event": "$pageview",
                                "kind": "EventsNode",
                                "math": "total"
                            }
                        ],
                        "trendsFilter": {
                            "display": "ActionsLineGraph"
                        }
                    }
                },
                "$lib_version": "3.11.0",
                "$ai_parent_id": "f80e0a8a-5f4e-460b-b1b2-6af2f9bfd37d",
                "$ai_output_state": {
                    "query": {
                        "breakdownFilter": null,
                        "compareFilter": null,
                        "dateRange": {
                            "date_from": "-30d",
                            "date_to": null,
                            "explicitDate": false
                        },
                        "filterTestAccounts": true,
                        "interval": "day",
                        "kind": "TrendsQuery",
                        "properties": [],
                        "samplingFactor": null,
                        "series": [
                            {
                                "custom_name": null,
                                "event": "$pageview",
                                "kind": "EventsNode",
                                "math": "total",
                                "math_group_type_index": null,
                                "math_property": null,
                                "math_property_type": null,
                                "name": null,
                                "orderBy": null,
                                "properties": null,
                                "response": null
                            }
                        ],
                        "trendsFilter": {
                            "aggregationAxisFormat": "numeric",
                            "aggregationAxisPostfix": null,
                            "aggregationAxisPrefix": null,
                            "decimalPlaces": null,
                            "display": "ActionsLineGraph",
                            "formula": null,
                            "showLegend": false,
                            "showPercentStackView": false,
                            "showValuesOnSeries": false,
                            "yAxisScaleType": "linear"
                        }
                    }
                },
                "$ai_latency": 0.000392913818359375,
                "$ip": "192.168.97.1",
                "$plugins_succeeded": ["GeoIP (14)"],
                "$plugins_failed": []
            }
        },
        {
            "createdAt": "2025-01-29T16:05:04.576000+00:00",
            "event": "$ai_span",
            "id": "0194b2cf-1b7c-78ac-9e65-3d20bce1a233",
            "properties": {
                "$ai_span_id": "864c03fe-d952-4282-8624-d86866d95085",
                "$geoip_disable": true,
                "$ai_parent_id": "7f960657-c95c-4999-8803-06ce860035e3",
                "$lib": "posthog-python",
                "$lib_version": "3.11.0",
                "$ai_input_state": {
                    "intermediate_steps": [],
                    "memory_collection_messages": null,
                    "memory_updated": null,
                    "messages": [
                        {
                            "answer": {
                                "breakdownFilter": null,
                                "compareFilter": null,
                                "dateRange": {
                                    "date_from": "-30d",
                                    "date_to": null,
                                    "explicitDate": false
                                },
                                "filterTestAccounts": true,
                                "interval": "day",
                                "kind": "TrendsQuery",
                                "properties": [],
                                "samplingFactor": null,
                                "series": [
                                    {
                                        "custom_name": null,
                                        "event": "$pageview",
                                        "kind": "EventsNode",
                                        "math": "total",
                                        "math_group_type_index": null,
                                        "math_property": null,
                                        "math_property_type": null,
                                        "name": null,
                                        "orderBy": null,
                                        "properties": null,
                                        "response": null
                                    }
                                ],
                                "trendsFilter": {
                                    "aggregationAxisFormat": "numeric",
                                    "aggregationAxisPostfix": null,
                                    "aggregationAxisPrefix": null,
                                    "decimalPlaces": null,
                                    "display": "ActionsLineGraph",
                                    "formula": null,
                                    "showLegend": false,
                                    "showPercentStackView": false,
                                    "showValuesOnSeries": false,
                                    "yAxisScaleType": "linear"
                                }
                            },
                            "id": "5124e1d8-1c04-4493-bede-088560f81de7",
                            "initiator": "2ae74707-ccf8-475f-951c-cb2220917af7",
                            "plan": "Events:\n- $pageview\n    - math operation: total count",
                            "type": "ai/viz"
                        }
                    ],
                    "plan": "",
                    "resumed": null,
                    "start_id": null
                },
                "$ai_latency": 0.0003578662872314453,
                "$ai_span_name": "ChannelWrite<trends_generator,intermediate_steps,start_id,plan,resumed,memory_updated,memory_collection_messages,messages>",
                "is_first_conversation": true,
                "$ai_trace_id": "537b7988-0186-494f-a313-77a5a8f7db26",
                "$ai_output_state": {
                    "intermediate_steps": [],
                    "memory_collection_messages": null,
                    "memory_updated": null,
                    "messages": [
                        {
                            "answer": {
                                "breakdownFilter": null,
                                "compareFilter": null,
                                "dateRange": {
                                    "date_from": "-30d",
                                    "date_to": null,
                                    "explicitDate": false
                                },
                                "filterTestAccounts": true,
                                "interval": "day",
                                "kind": "TrendsQuery",
                                "properties": [],
                                "samplingFactor": null,
                                "series": [
                                    {
                                        "custom_name": null,
                                        "event": "$pageview",
                                        "kind": "EventsNode",
                                        "math": "total",
                                        "math_group_type_index": null,
                                        "math_property": null,
                                        "math_property_type": null,
                                        "name": null,
                                        "orderBy": null,
                                        "properties": null,
                                        "response": null
                                    }
                                ],
                                "trendsFilter": {
                                    "aggregationAxisFormat": "numeric",
                                    "aggregationAxisPostfix": null,
                                    "aggregationAxisPrefix": null,
                                    "decimalPlaces": null,
                                    "display": "ActionsLineGraph",
                                    "formula": null,
                                    "showLegend": false,
                                    "showPercentStackView": false,
                                    "showValuesOnSeries": false,
                                    "yAxisScaleType": "linear"
                                }
                            },
                            "id": "5124e1d8-1c04-4493-bede-088560f81de7",
                            "initiator": "2ae74707-ccf8-475f-951c-cb2220917af7",
                            "plan": "Events:\n- $pageview\n    - math operation: total count",
                            "type": "ai/viz"
                        }
                    ],
                    "plan": "",
                    "resumed": null,
                    "start_id": null
                },
                "conversation_id": "0194b2ce-ef92-0000-008e-c6ba293c8c7d",
                "$ip": "192.168.97.1",
                "$plugins_succeeded": ["GeoIP (14)"],
                "$plugins_failed": []
            }
        },
        {
            "createdAt": "2025-01-29T16:05:04.577000+00:00",
            "event": "$ai_span",
            "id": "0194b2cf-1b7c-73a3-9e69-27649c08fad9",
            "properties": {
                "$ai_span_name": "router",
                "$geoip_disable": true,
                "$ai_input_state": {
                    "intermediate_steps": [],
                    "memory_collection_messages": [],
                    "memory_updated": false,
                    "messages": [
                        {
                            "content": "What's the trend in $pageview events?",
                            "id": "2ae74707-ccf8-475f-951c-cb2220917af7",
                            "type": "human"
                        },
                        {
                            "content": "trends",
                            "id": "f10500b7-4d4d-4ad9-972e-3001cfc5e08e",
                            "type": "ai/router"
                        },
                        {
                            "answer": {
                                "breakdownFilter": null,
                                "compareFilter": null,
                                "dateRange": {
                                    "date_from": "-30d",
                                    "date_to": null,
                                    "explicitDate": false
                                },
                                "filterTestAccounts": true,
                                "interval": "day",
                                "kind": "TrendsQuery",
                                "properties": [],
                                "samplingFactor": null,
                                "series": [
                                    {
                                        "custom_name": null,
                                        "event": "$pageview",
                                        "kind": "EventsNode",
                                        "math": "total",
                                        "math_group_type_index": null,
                                        "math_property": null,
                                        "math_property_type": null,
                                        "name": null,
                                        "orderBy": null,
                                        "properties": null,
                                        "response": null
                                    }
                                ],
                                "trendsFilter": {
                                    "aggregationAxisFormat": "numeric",
                                    "aggregationAxisPostfix": null,
                                    "aggregationAxisPrefix": null,
                                    "decimalPlaces": null,
                                    "display": "ActionsLineGraph",
                                    "formula": null,
                                    "showLegend": false,
                                    "showPercentStackView": false,
                                    "showValuesOnSeries": false,
                                    "yAxisScaleType": "linear"
                                }
                            },
                            "id": "5124e1d8-1c04-4493-bede-088560f81de7",
                            "initiator": "2ae74707-ccf8-475f-951c-cb2220917af7",
                            "plan": "Events:\n- $pageview\n    - math operation: total count",
                            "type": "ai/viz"
                        }
                    ],
                    "plan": "",
                    "resumed": null,
                    "start_id": "2ae74707-ccf8-475f-951c-cb2220917af7"
                },
                "$lib_version": "3.11.0",
                "$ai_span_id": "15cff4d0-98a1-4739-8686-08af2157c264",
                "conversation_id": "0194b2ce-ef92-0000-008e-c6ba293c8c7d",
                "$ai_parent_id": "7f960657-c95c-4999-8803-06ce860035e3",
                "$ai_latency": 0.000013828277587890623,
                "$ai_output_state": "next",
                "is_first_conversation": true,
                "$lib": "posthog-python",
                "$ai_trace_id": "537b7988-0186-494f-a313-77a5a8f7db26",
                "$ip": "192.168.97.1",
                "$plugins_succeeded": ["GeoIP (14)"],
                "$plugins_failed": []
            }
        },
        {
            "createdAt": "2025-01-29T16:05:04.577000+00:00",
            "event": "$ai_span",
            "id": "0194b2cf-1b7c-74a9-bf1f-f7eb97272091",
            "properties": {
                "$ai_span_id": "7f960657-c95c-4999-8803-06ce860035e3",
                "$ai_trace_id": "537b7988-0186-494f-a313-77a5a8f7db26",
                "$ai_parent_id": "537b7988-0186-494f-a313-77a5a8f7db26",
                "is_first_conversation": true,
                "$ai_input_state": {
                    "intermediate_steps": [],
                    "memory_collection_messages": [],
                    "memory_updated": false,
                    "messages": [
                        {
                            "content": "What's the trend in $pageview events?",
                            "id": "2ae74707-ccf8-475f-951c-cb2220917af7",
                            "type": "human"
                        },
                        {
                            "content": "trends",
                            "id": "f10500b7-4d4d-4ad9-972e-3001cfc5e08e",
                            "type": "ai/router"
                        }
                    ],
                    "plan": "Events:\n- $pageview\n    - math operation: total count",
                    "resumed": null,
                    "start_id": "2ae74707-ccf8-475f-951c-cb2220917af7"
                },
                "$ai_output_state": {
                    "intermediate_steps": [],
                    "memory_collection_messages": null,
                    "memory_updated": null,
                    "messages": [
                        {
                            "answer": {
                                "breakdownFilter": null,
                                "compareFilter": null,
                                "dateRange": {
                                    "date_from": "-30d",
                                    "date_to": null,
                                    "explicitDate": false
                                },
                                "filterTestAccounts": true,
                                "interval": "day",
                                "kind": "TrendsQuery",
                                "properties": [],
                                "samplingFactor": null,
                                "series": [
                                    {
                                        "custom_name": null,
                                        "event": "$pageview",
                                        "kind": "EventsNode",
                                        "math": "total",
                                        "math_group_type_index": null,
                                        "math_property": null,
                                        "math_property_type": null,
                                        "name": null,
                                        "orderBy": null,
                                        "properties": null,
                                        "response": null
                                    }
                                ],
                                "trendsFilter": {
                                    "aggregationAxisFormat": "numeric",
                                    "aggregationAxisPostfix": null,
                                    "aggregationAxisPrefix": null,
                                    "decimalPlaces": null,
                                    "display": "ActionsLineGraph",
                                    "formula": null,
                                    "showLegend": false,
                                    "showPercentStackView": false,
                                    "showValuesOnSeries": false,
                                    "yAxisScaleType": "linear"
                                }
                            },
                            "id": "5124e1d8-1c04-4493-bede-088560f81de7",
                            "initiator": "2ae74707-ccf8-475f-951c-cb2220917af7",
                            "plan": "Events:\n- $pageview\n    - math operation: total count",
                            "type": "ai/viz"
                        }
                    ],
                    "plan": "",
                    "resumed": null,
                    "start_id": null
                },
                "$ai_latency": 2.5263350009918213,
                "conversation_id": "0194b2ce-ef92-0000-008e-c6ba293c8c7d",
                "$lib": "posthog-python",
                "$lib_version": "3.11.0",
                "$geoip_disable": true,
                "$ai_span_name": "trends_generator",
                "$ip": "192.168.97.1",
                "$plugins_succeeded": ["GeoIP (14)"],
                "$plugins_failed": []
            }
        },
        {
            "createdAt": "2025-01-29T16:05:05.576000+00:00",
            "event": "$ai_span",
            "id": "0194b2cf-1f82-7869-9d3a-4f326d57c586",
            "properties": {
                "$ai_input_state": {
                    "core_memory": "Chat app for hedgehogs.",
                    "project_datetime_display": "2025-01-29 16:05:05",
                    "project_timezone": "UTC",
                    "query_kind": "TrendsQuery",
                    "results": "[{\"data\": [433, 428, 435, 497, 467, 469, 475, 493, 523, 504, 537, 527, 567, 536, 539, 574, 584, 586, 601, 621, 601, 574, 666, 510, 0, 0, 0, 0, 0, 0, 0], \"labels\": [\"30-Dec-2024\", \"31-Dec-2024\", \"1-Jan-2025\", \"2-Jan-2025\", \"3-Jan-2025\", \"4-Jan-2025\", \"5-Jan-2025\", \"6-Jan-2025\", \"7-Jan-2025\", \"8-Jan-2025\", \"9-Jan-2025\", \"10-Jan-2025\", \"11-Jan-2025\", \"12-Jan-2025\", \"13-Jan-2025\", \"14-Jan-2025\", \"15-Jan-2025\", \"16-Jan-2025\", \"17-Jan-2025\", \"18-Jan-2025\", \"19-Jan-2025\", \"20-Jan-2025\", \"21-Jan-2025\", \"22-Jan-2025\", \"23-Jan-2025\", \"24-Jan-2025\", \"25-Jan-2025\", \"26-Jan-2025\", \"27-Jan-2025\", \"28-Jan-2025\", \"29-Jan-2025\"], \"days\": [\"2024-12-30\", \"2024-12-31\", \"2025-01-01\", \"2025-01-02\", \"2025-01-03\", \"2025-01-04\", \"2025-01-05\", \"2025-01-06\", \"2025-01-07\", \"2025-01-08\", \"2025-01-09\", \"2025-01-10\", \"2025-01-11\", \"2025-01-12\", \"2025-01-13\", \"2025-01-14\", \"2025-01-15\", \"2025-01-16\", \"2025-01-17\", \"2025-01-18\", \"2025-01-19\", \"2025-01-20\", \"2025-01-21\", \"2025-01-22\", \"2025-01-23\", \"2025-01-24\", \"2025-01-25\", \"2025-01-26\", \"2025-01-27\", \"2025-01-28\", \"2025-01-29\"], \"count\": 12747.0, \"label\": \"$pageview\", \"filter\": {\"insight\": \"TRENDS\", \"properties\": [], \"filter_test_accounts\": true, \"date_to\": \"2025-01-29T23:59:59.999999Z\", \"date_from\": \"2024-12-30T00:00:00Z\", \"entity_type\": \"events\", \"interval\": \"day\", \"aggregationAxisFormat\": \"numeric\", \"display\": \"ActionsLineGraph\", \"resultCustomizationBy\": \"value\", \"showAlertThresholdLines\": false, \"showLegend\": false, \"showPercentStackView\": false, \"showValuesOnSeries\": false, \"smoothingIntervals\": 1, \"yAxisScaleType\": \"linear\"}, \"action\": {\"days\": [\"2024-12-30T00:00:00Z\", \"2024-12-31T00:00:00Z\", \"2025-01-01T00:00:00Z\", \"2025-01-02T00:00:00Z\", \"2025-01-03T00:00:00Z\", \"2025-01-04T00:00:00Z\", \"2025-01-05T00:00:00Z\", \"2025-01-06T00:00:00Z\", \"2025-01-07T00:00:00Z\", \"2025-01-08T00:00:00Z\", \"2025-01-09T00:00:00Z\", \"2025-01-10T00:00:00Z\", \"2025-01-11T00:00:00Z\", \"2025-01-12T00:00:00Z\", \"2025-01-13T00:00:00Z\", \"2025-01-14T00:00:00Z\", \"2025-01-15T00:00:00Z\", \"2025-01-16T00:00:00Z\", \"2025-01-17T00:00:00Z\", \"2025-01-18T00:00:00Z\", \"2025-01-19T00:00:00Z\", \"2025-01-20T00:00:00Z\", \"2025-01-21T00:00:00Z\", \"2025-01-22T00:00:00Z\", \"2025-01-23T00:00:00Z\", \"2025-01-24T00:00:00Z\", \"2025-01-25T00:00:00Z\", \"2025-01-26T00:00:00Z\", \"2025-01-27T00:00:00Z\", \"2025-01-28T00:00:00Z\", \"2025-01-29T00:00:00Z\"], \"id\": \"$pageview\", \"type\": \"events\", \"order\": 0, \"name\": \"$pageview\", \"custom_name\": null, \"math\": \"total\", \"math_property\": null, \"math_hogql\": null, \"math_group_type_index\": null, \"properties\": {}}}]",
                    "utc_datetime_display": "2025-01-29 16:05:05"
                },
                "$ai_span_id": "7aef9bbb-11c4-42fb-9000-80a85d81559c",
                "$ai_latency": 0.0002090930938720703,
                "is_first_conversation": true,
                "conversation_id": "0194b2ce-ef92-0000-008e-c6ba293c8c7d",
                "$ai_trace_id": "537b7988-0186-494f-a313-77a5a8f7db26",
                "$ai_parent_id": "afc5c45a-dab0-477d-a0ed-818ab4916369",
                "$ai_output_state": {
                    "messages": [
                        {
                            "additional_kwargs": {},
                            "content": "\nAct as an expert product manager. Your task is to help the user build a successful product and business.\nAlso, you're a hedeghog named Max.\n\nOffer actionable feedback if possible. Only provide suggestions you're certain will be useful for this team.\nAcknowledge when more information would be needed. When query results are provided, note that the user can already see the chart.\n\nUse Silicon Valley lingo. Be informal but get to the point immediately, without fluff - e.g. don't start with \"alright, …\".\nNEVER use \"Title Case\", even in headings. Our style is \"Sentence case\" EVERYWHERE.\nYou can use Markdown for emphasis. Bullets can improve clarity of action points.\n\n<core_memory>\nChat app for hedgehogs.\n</core_memory>\n",
                            "id": null,
                            "name": null,
                            "response_metadata": {},
                            "type": "system"
                        },
                        {
                            "additional_kwargs": {},
                            "content": "What's the trend in $pageview events?",
                            "id": null,
                            "name": null,
                            "response_metadata": {},
                            "type": "human"
                        },
                        {
                            "additional_kwargs": {},
                            "content": "\nHere are results of the TrendsQuery you created to answer my latest question:\n\n```json\n[{&quot;data&quot;: [433, 428, 435, 497, 467, 469, 475, 493, 523, 504, 537, 527, 567, 536, 539, 574, 584, 586, 601, 621, 601, 574, 666, 510, 0, 0, 0, 0, 0, 0, 0], &quot;labels&quot;: [&quot;30-Dec-2024&quot;, &quot;31-Dec-2024&quot;, &quot;1-Jan-2025&quot;, &quot;2-Jan-2025&quot;, &quot;3-Jan-2025&quot;, &quot;4-Jan-2025&quot;, &quot;5-Jan-2025&quot;, &quot;6-Jan-2025&quot;, &quot;7-Jan-2025&quot;, &quot;8-Jan-2025&quot;, &quot;9-Jan-2025&quot;, &quot;10-Jan-2025&quot;, &quot;11-Jan-2025&quot;, &quot;12-Jan-2025&quot;, &quot;13-Jan-2025&quot;, &quot;14-Jan-2025&quot;, &quot;15-Jan-2025&quot;, &quot;16-Jan-2025&quot;, &quot;17-Jan-2025&quot;, &quot;18-Jan-2025&quot;, &quot;19-Jan-2025&quot;, &quot;20-Jan-2025&quot;, &quot;21-Jan-2025&quot;, &quot;22-Jan-2025&quot;, &quot;23-Jan-2025&quot;, &quot;24-Jan-2025&quot;, &quot;25-Jan-2025&quot;, &quot;26-Jan-2025&quot;, &quot;27-Jan-2025&quot;, &quot;28-Jan-2025&quot;, &quot;29-Jan-2025&quot;], &quot;days&quot;: [&quot;2024-12-30&quot;, &quot;2024-12-31&quot;, &quot;2025-01-01&quot;, &quot;2025-01-02&quot;, &quot;2025-01-03&quot;, &quot;2025-01-04&quot;, &quot;2025-01-05&quot;, &quot;2025-01-06&quot;, &quot;2025-01-07&quot;, &quot;2025-01-08&quot;, &quot;2025-01-09&quot;, &quot;2025-01-10&quot;, &quot;2025-01-11&quot;, &quot;2025-01-12&quot;, &quot;2025-01-13&quot;, &quot;2025-01-14&quot;, &quot;2025-01-15&quot;, &quot;2025-01-16&quot;, &quot;2025-01-17&quot;, &quot;2025-01-18&quot;, &quot;2025-01-19&quot;, &quot;2025-01-20&quot;, &quot;2025-01-21&quot;, &quot;2025-01-22&quot;, &quot;2025-01-23&quot;, &quot;2025-01-24&quot;, &quot;2025-01-25&quot;, &quot;2025-01-26&quot;, &quot;2025-01-27&quot;, &quot;2025-01-28&quot;, &quot;2025-01-29&quot;], &quot;count&quot;: 12747.0, &quot;label&quot;: &quot;$pageview&quot;, &quot;filter&quot;: {&quot;insight&quot;: &quot;TRENDS&quot;, &quot;properties&quot;: [], &quot;filter_test_accounts&quot;: true, &quot;date_to&quot;: &quot;2025-01-29T23:59:59.999999Z&quot;, &quot;date_from&quot;: &quot;2024-12-30T00:00:00Z&quot;, &quot;entity_type&quot;: &quot;events&quot;, &quot;interval&quot;: &quot;day&quot;, &quot;aggregationAxisFormat&quot;: &quot;numeric&quot;, &quot;display&quot;: &quot;ActionsLineGraph&quot;, &quot;resultCustomizationBy&quot;: &quot;value&quot;, &quot;showAlertThresholdLines&quot;: false, &quot;showLegend&quot;: false, &quot;showPercentStackView&quot;: false, &quot;showValuesOnSeries&quot;: false, &quot;smoothingIntervals&quot;: 1, &quot;yAxisScaleType&quot;: &quot;linear&quot;}, &quot;action&quot;: {&quot;days&quot;: [&quot;2024-12-30T00:00:00Z&quot;, &quot;2024-12-31T00:00:00Z&quot;, &quot;2025-01-01T00:00:00Z&quot;, &quot;2025-01-02T00:00:00Z&quot;, &quot;2025-01-03T00:00:00Z&quot;, &quot;2025-01-04T00:00:00Z&quot;, &quot;2025-01-05T00:00:00Z&quot;, &quot;2025-01-06T00:00:00Z&quot;, &quot;2025-01-07T00:00:00Z&quot;, &quot;2025-01-08T00:00:00Z&quot;, &quot;2025-01-09T00:00:00Z&quot;, &quot;2025-01-10T00:00:00Z&quot;, &quot;2025-01-11T00:00:00Z&quot;, &quot;2025-01-12T00:00:00Z&quot;, &quot;2025-01-13T00:00:00Z&quot;, &quot;2025-01-14T00:00:00Z&quot;, &quot;2025-01-15T00:00:00Z&quot;, &quot;2025-01-16T00:00:00Z&quot;, &quot;2025-01-17T00:00:00Z&quot;, &quot;2025-01-18T00:00:00Z&quot;, &quot;2025-01-19T00:00:00Z&quot;, &quot;2025-01-20T00:00:00Z&quot;, &quot;2025-01-21T00:00:00Z&quot;, &quot;2025-01-22T00:00:00Z&quot;, &quot;2025-01-23T00:00:00Z&quot;, &quot;2025-01-24T00:00:00Z&quot;, &quot;2025-01-25T00:00:00Z&quot;, &quot;2025-01-26T00:00:00Z&quot;, &quot;2025-01-27T00:00:00Z&quot;, &quot;2025-01-28T00:00:00Z&quot;, &quot;2025-01-29T00:00:00Z&quot;], &quot;id&quot;: &quot;$pageview&quot;, &quot;type&quot;: &quot;events&quot;, &quot;order&quot;: 0, &quot;name&quot;: &quot;$pageview&quot;, &quot;custom_name&quot;: null, &quot;math&quot;: &quot;total&quot;, &quot;math_property&quot;: null, &quot;math_hogql&quot;: null, &quot;math_group_type_index&quot;: null, &quot;properties&quot;: {}}}]\n```\n\nThe current date and time is 2025-01-29 16:05:05 UTC, which is 2025-01-29 16:05:05 in this project's timezone (UTC).\nIt's expected that the data point for the current period can have a drop in value, as it's not complete yet - don't point this out to me.\n\nBased on the results, answer my question and provide actionable feedback. Avoid generic advice. Take into account what you know about the product.\nThe answer needs to be high-impact, no more than a few sentences.\n\nYou MUST point out if the executed query or its results are insufficient for a full answer to my question.\n",
                            "id": null,
                            "name": null,
                            "response_metadata": {},
                            "type": "human"
                        }
                    ]
                },
                "$lib": "posthog-python",
                "$ai_span_name": "ChatPromptTemplate",
                "$lib_version": "3.11.0",
                "$geoip_disable": true,
                "$ip": "192.168.97.1",
                "$plugins_succeeded": ["GeoIP (14)"],
                "$plugins_failed": []
            }
        },
        {
            "createdAt": "2025-01-29T16:05:09.819000+00:00",
            "event": "$ai_generation",
            "id": "0194b2cf-2f52-7f9b-b798-ee8770fddd56",
            "properties": {
                "$ai_http_status": 200,
                "$ai_span_id": "63695d95-d53f-473e-ac69-98f1b03deefc",
                "$ai_base_url": null,
                "$ai_input_tokens": 2070,
                "$ai_provider": "openai",
                "$ai_output_tokens": 147,
                "$ai_trace_id": "537b7988-0186-494f-a313-77a5a8f7db26",
                "$ai_model_parameters": {
                    "n": 1,
                    "stream": true,
                    "temperature": 0.5
                },
                "$ai_input": [
                    {
                        "content": "\nAct as an expert product manager. Your task is to help the user build a successful product and business.\nAlso, you're a hedeghog named Max.\n\nOffer actionable feedback if possible. Only provide suggestions you're certain will be useful for this team.\nAcknowledge when more information would be needed. When query results are provided, note that the user can already see the chart.\n\nUse Silicon Valley lingo. Be informal but get to the point immediately, without fluff - e.g. don't start with \"alright, …\".\nNEVER use \"Title Case\", even in headings. Our style is \"Sentence case\" EVERYWHERE.\nYou can use Markdown for emphasis. Bullets can improve clarity of action points.\n\n<core_memory>\nChat app for hedgehogs.\n</core_memory>\n",
                        "role": "system"
                    },
                    {
                        "content": "What's the trend in $pageview events?",
                        "role": "user"
                    },
                    {
                        "content": "\nHere are results of the TrendsQuery you created to answer my latest question:\n\n```json\n[{&quot;data&quot;: [433, 428, 435, 497, 467, 469, 475, 493, 523, 504, 537, 527, 567, 536, 539, 574, 584, 586, 601, 621, 601, 574, 666, 510, 0, 0, 0, 0, 0, 0, 0], &quot;labels&quot;: [&quot;30-Dec-2024&quot;, &quot;31-Dec-2024&quot;, &quot;1-Jan-2025&quot;, &quot;2-Jan-2025&quot;, &quot;3-Jan-2025&quot;, &quot;4-Jan-2025&quot;, &quot;5-Jan-2025&quot;, &quot;6-Jan-2025&quot;, &quot;7-Jan-2025&quot;, &quot;8-Jan-2025&quot;, &quot;9-Jan-2025&quot;, &quot;10-Jan-2025&quot;, &quot;11-Jan-2025&quot;, &quot;12-Jan-2025&quot;, &quot;13-Jan-2025&quot;, &quot;14-Jan-2025&quot;, &quot;15-Jan-2025&quot;, &quot;16-Jan-2025&quot;, &quot;17-Jan-2025&quot;, &quot;18-Jan-2025&quot;, &quot;19-Jan-2025&quot;, &quot;20-Jan-2025&quot;, &quot;21-Jan-2025&quot;, &quot;22-Jan-2025&quot;, &quot;23-Jan-2025&quot;, &quot;24-Jan-2025&quot;, &quot;25-Jan-2025&quot;, &quot;26-Jan-2025&quot;, &quot;27-Jan-2025&quot;, &quot;28-Jan-2025&quot;, &quot;29-Jan-2025&quot;], &quot;days&quot;: [&quot;2024-12-30&quot;, &quot;2024-12-31&quot;, &quot;2025-01-01&quot;, &quot;2025-01-02&quot;, &quot;2025-01-03&quot;, &quot;2025-01-04&quot;, &quot;2025-01-05&quot;, &quot;2025-01-06&quot;, &quot;2025-01-07&quot;, &quot;2025-01-08&quot;, &quot;2025-01-09&quot;, &quot;2025-01-10&quot;, &quot;2025-01-11&quot;, &quot;2025-01-12&quot;, &quot;2025-01-13&quot;, &quot;2025-01-14&quot;, &quot;2025-01-15&quot;, &quot;2025-01-16&quot;, &quot;2025-01-17&quot;, &quot;2025-01-18&quot;, &quot;2025-01-19&quot;, &quot;2025-01-20&quot;, &quot;2025-01-21&quot;, &quot;2025-01-22&quot;, &quot;2025-01-23&quot;, &quot;2025-01-24&quot;, &quot;2025-01-25&quot;, &quot;2025-01-26&quot;, &quot;2025-01-27&quot;, &quot;2025-01-28&quot;, &quot;2025-01-29&quot;], &quot;count&quot;: 12747.0, &quot;label&quot;: &quot;$pageview&quot;, &quot;filter&quot;: {&quot;insight&quot;: &quot;TRENDS&quot;, &quot;properties&quot;: [], &quot;filter_test_accounts&quot;: true, &quot;date_to&quot;: &quot;2025-01-29T23:59:59.999999Z&quot;, &quot;date_from&quot;: &quot;2024-12-30T00:00:00Z&quot;, &quot;entity_type&quot;: &quot;events&quot;, &quot;interval&quot;: &quot;day&quot;, &quot;aggregationAxisFormat&quot;: &quot;numeric&quot;, &quot;display&quot;: &quot;ActionsLineGraph&quot;, &quot;resultCustomizationBy&quot;: &quot;value&quot;, &quot;showAlertThresholdLines&quot;: false, &quot;showLegend&quot;: false, &quot;showPercentStackView&quot;: false, &quot;showValuesOnSeries&quot;: false, &quot;smoothingIntervals&quot;: 1, &quot;yAxisScaleType&quot;: &quot;linear&quot;}, &quot;action&quot;: {&quot;days&quot;: [&quot;2024-12-30T00:00:00Z&quot;, &quot;2024-12-31T00:00:00Z&quot;, &quot;2025-01-01T00:00:00Z&quot;, &quot;2025-01-02T00:00:00Z&quot;, &quot;2025-01-03T00:00:00Z&quot;, &quot;2025-01-04T00:00:00Z&quot;, &quot;2025-01-05T00:00:00Z&quot;, &quot;2025-01-06T00:00:00Z&quot;, &quot;2025-01-07T00:00:00Z&quot;, &quot;2025-01-08T00:00:00Z&quot;, &quot;2025-01-09T00:00:00Z&quot;, &quot;2025-01-10T00:00:00Z&quot;, &quot;2025-01-11T00:00:00Z&quot;, &quot;2025-01-12T00:00:00Z&quot;, &quot;2025-01-13T00:00:00Z&quot;, &quot;2025-01-14T00:00:00Z&quot;, &quot;2025-01-15T00:00:00Z&quot;, &quot;2025-01-16T00:00:00Z&quot;, &quot;2025-01-17T00:00:00Z&quot;, &quot;2025-01-18T00:00:00Z&quot;, &quot;2025-01-19T00:00:00Z&quot;, &quot;2025-01-20T00:00:00Z&quot;, &quot;2025-01-21T00:00:00Z&quot;, &quot;2025-01-22T00:00:00Z&quot;, &quot;2025-01-23T00:00:00Z&quot;, &quot;2025-01-24T00:00:00Z&quot;, &quot;2025-01-25T00:00:00Z&quot;, &quot;2025-01-26T00:00:00Z&quot;, &quot;2025-01-27T00:00:00Z&quot;, &quot;2025-01-28T00:00:00Z&quot;, &quot;2025-01-29T00:00:00Z&quot;], &quot;id&quot;: &quot;$pageview&quot;, &quot;type&quot;: &quot;events&quot;, &quot;order&quot;: 0, &quot;name&quot;: &quot;$pageview&quot;, &quot;custom_name&quot;: null, &quot;math&quot;: &quot;total&quot;, &quot;math_property&quot;: null, &quot;math_hogql&quot;: null, &quot;math_group_type_index&quot;: null, &quot;properties&quot;: {}}}]\n```\n\nThe current date and time is 2025-01-29 16:05:05 UTC, which is 2025-01-29 16:05:05 in this project's timezone (UTC).\nIt's expected that the data point for the current period can have a drop in value, as it's not complete yet - don't point this out to me.\n\nBased on the results, answer my question and provide actionable feedback. Avoid generic advice. Take into account what you know about the product.\nThe answer needs to be high-impact, no more than a few sentences.\n\nYou MUST point out if the executed query or its results are insufficient for a full answer to my question.\n",
                        "role": "user"
                    }
                ],
                "$lib": "posthog-python",
                "$ai_model": "gpt-4o",
                "$lib_version": "3.11.0",
                "$ai_span_name": "ChatOpenAI",
                "$ai_parent_id": "afc5c45a-dab0-477d-a0ed-818ab4916369",
                "$ai_output_choices": [
                    {
                        "content": "The trend in `$pageview` events is generally upward, peaking on January 21, 2025, with 666 pageviews. There's a noticeable dip on January 22, 2025, which might indicate an anomaly or temporary issue. \n\n**Actionable feedback:**\n- Investigate the cause of the dip on January 22 to understand if it's a data issue or something that needs addressing in the product or marketing strategy.\n- Leverage the upward trend by analyzing what changes or campaigns might have driven the increase, especially around the peak, and double down on those efforts.\n- Consider implementing A/B tests to optimize user engagement further, as the trend suggests growing interest in your chat app for hedgehogs.",
                        "role": "assistant"
                    }
                ],
                "is_first_conversation": true,
                "$ai_latency": 4.243302822113037,
                "conversation_id": "0194b2ce-ef92-0000-008e-c6ba293c8c7d",
                "$geoip_disable": true,
                "$ip": "192.168.97.1",
                "$plugins_succeeded": ["GeoIP (14)"],
                "$plugins_failed": [],
                "$ai_input_cost_usd": 0.01035,
                "$ai_output_cost_usd": 0.002205,
                "$ai_total_cost_usd": 0.012555,
                "$ai_temperature": 0.5,
                "$ai_stream": true
            }
        },
        {
            "createdAt": "2025-01-29T16:05:09.820000+00:00",
            "event": "$ai_span",
            "id": "0194b2cf-2f52-7219-ab7b-0a5637d89ac4",
            "properties": {
                "$lib": "posthog-python",
                "$ai_span_name": "ChannelWrite<summarizer,intermediate_steps,start_id,plan,resumed,memory_updated,memory_collection_messages,messages>",
                "$ai_output_state": {
                    "intermediate_steps": null,
                    "memory_collection_messages": null,
                    "memory_updated": null,
                    "messages": [
                        {
                            "content": "The trend in `$pageview` events is generally upward, peaking on January 21, 2025, with 666 pageviews. There's a noticeable dip on January 22, 2025, which might indicate an anomaly or temporary issue. \n\n**Actionable feedback:**\n- Investigate the cause of the dip on January 22 to understand if it's a data issue or something that needs addressing in the product or marketing strategy.\n- Leverage the upward trend by analyzing what changes or campaigns might have driven the increase, especially around the peak, and double down on those efforts.\n- Consider implementing A/B tests to optimize user engagement further, as the trend suggests growing interest in your chat app for hedgehogs.",
                            "id": "5b7f93c5-93af-40db-964d-42e8e0709733",
                            "meta": null,
                            "type": "ai"
                        }
                    ],
                    "plan": null,
                    "resumed": null,
                    "start_id": null
                },
                "$lib_version": "3.11.0",
                "$ai_trace_id": "537b7988-0186-494f-a313-77a5a8f7db26",
                "$geoip_disable": true,
                "$ai_input_state": {
                    "intermediate_steps": null,
                    "memory_collection_messages": null,
                    "memory_updated": null,
                    "messages": [
                        {
                            "content": "The trend in `$pageview` events is generally upward, peaking on January 21, 2025, with 666 pageviews. There's a noticeable dip on January 22, 2025, which might indicate an anomaly or temporary issue. \n\n**Actionable feedback:**\n- Investigate the cause of the dip on January 22 to understand if it's a data issue or something that needs addressing in the product or marketing strategy.\n- Leverage the upward trend by analyzing what changes or campaigns might have driven the increase, especially around the peak, and double down on those efforts.\n- Consider implementing A/B tests to optimize user engagement further, as the trend suggests growing interest in your chat app for hedgehogs.",
                            "id": "5b7f93c5-93af-40db-964d-42e8e0709733",
                            "meta": null,
                            "type": "ai"
                        }
                    ],
                    "plan": null,
                    "resumed": null,
                    "start_id": null
                },
                "$ai_latency": 0.0003237724304199219,
                "$ai_span_id": "4b3801e5-7f9d-4a01-8310-73776ebca79a",
                "$ai_parent_id": "9c56f6cd-114e-4d3d-a642-e21749b6fce1",
                "conversation_id": "0194b2ce-ef92-0000-008e-c6ba293c8c7d",
                "is_first_conversation": true,
                "$ip": "192.168.97.1",
                "$plugins_succeeded": ["GeoIP (14)"],
                "$plugins_failed": []
            }
        },
        {
            "createdAt": "2025-01-29T16:05:09.820000+00:00",
            "event": "$ai_span",
            "id": "0194b2cf-2f52-797d-ba70-85209fa4706c",
            "properties": {
                "conversation_id": "0194b2ce-ef92-0000-008e-c6ba293c8c7d",
                "$lib": "posthog-python",
                "$ai_span_name": "summarizer",
                "$ai_span_id": "9c56f6cd-114e-4d3d-a642-e21749b6fce1",
                "$ai_trace_id": "537b7988-0186-494f-a313-77a5a8f7db26",
                "$ai_latency": 5.238461256027222,
                "$ai_output_state": {
                    "intermediate_steps": null,
                    "memory_collection_messages": null,
                    "memory_updated": null,
                    "messages": [
                        {
                            "content": "The trend in `$pageview` events is generally upward, peaking on January 21, 2025, with 666 pageviews. There's a noticeable dip on January 22, 2025, which might indicate an anomaly or temporary issue. \n\n**Actionable feedback:**\n- Investigate the cause of the dip on January 22 to understand if it's a data issue or something that needs addressing in the product or marketing strategy.\n- Leverage the upward trend by analyzing what changes or campaigns might have driven the increase, especially around the peak, and double down on those efforts.\n- Consider implementing A/B tests to optimize user engagement further, as the trend suggests growing interest in your chat app for hedgehogs.",
                            "id": "5b7f93c5-93af-40db-964d-42e8e0709733",
                            "meta": null,
                            "type": "ai"
                        }
                    ],
                    "plan": null,
                    "resumed": null,
                    "start_id": null
                },
                "$ai_parent_id": "537b7988-0186-494f-a313-77a5a8f7db26",
                "$geoip_disable": true,
                "is_first_conversation": true,
                "$ai_input_state": {
                    "intermediate_steps": [],
                    "memory_collection_messages": [],
                    "memory_updated": false,
                    "messages": [
                        {
                            "content": "What's the trend in $pageview events?",
                            "id": "2ae74707-ccf8-475f-951c-cb2220917af7",
                            "type": "human"
                        },
                        {
                            "content": "trends",
                            "id": "f10500b7-4d4d-4ad9-972e-3001cfc5e08e",
                            "type": "ai/router"
                        },
                        {
                            "answer": {
                                "breakdownFilter": null,
                                "compareFilter": null,
                                "dateRange": {
                                    "date_from": "-30d",
                                    "date_to": null,
                                    "explicitDate": false
                                },
                                "filterTestAccounts": true,
                                "interval": "day",
                                "kind": "TrendsQuery",
                                "properties": [],
                                "samplingFactor": null,
                                "series": [
                                    {
                                        "custom_name": null,
                                        "event": "$pageview",
                                        "kind": "EventsNode",
                                        "math": "total",
                                        "math_group_type_index": null,
                                        "math_property": null,
                                        "math_property_type": null,
                                        "name": null,
                                        "orderBy": null,
                                        "properties": null,
                                        "response": null
                                    }
                                ],
                                "trendsFilter": {
                                    "aggregationAxisFormat": "numeric",
                                    "aggregationAxisPostfix": null,
                                    "aggregationAxisPrefix": null,
                                    "decimalPlaces": null,
                                    "display": "ActionsLineGraph",
                                    "formula": null,
                                    "showLegend": false,
                                    "showPercentStackView": false,
                                    "showValuesOnSeries": false,
                                    "yAxisScaleType": "linear"
                                }
                            },
                            "id": "5124e1d8-1c04-4493-bede-088560f81de7",
                            "initiator": "2ae74707-ccf8-475f-951c-cb2220917af7",
                            "plan": "Events:\n- $pageview\n    - math operation: total count",
                            "type": "ai/viz"
                        }
                    ],
                    "plan": "",
                    "resumed": null,
                    "start_id": "2ae74707-ccf8-475f-951c-cb2220917af7"
                },
                "$lib_version": "3.11.0",
                "$ip": "192.168.97.1",
                "$plugins_succeeded": ["GeoIP (14)"],
                "$plugins_failed": []
            }
        },
        {
            "createdAt": "2025-01-29T16:05:09.820000+00:00",
            "event": "$ai_span",
            "id": "0194b2cf-2f52-77ac-ab47-38764ba23de5",
            "properties": {
                "$geoip_disable": true,
                "$ai_span_id": "afc5c45a-dab0-477d-a0ed-818ab4916369",
                "$ai_trace_id": "537b7988-0186-494f-a313-77a5a8f7db26",
                "$ai_input_state": {
                    "core_memory": "Chat app for hedgehogs.",
                    "project_datetime_display": "2025-01-29 16:05:05",
                    "project_timezone": "UTC",
                    "query_kind": "TrendsQuery",
                    "results": "[{\"data\": [433, 428, 435, 497, 467, 469, 475, 493, 523, 504, 537, 527, 567, 536, 539, 574, 584, 586, 601, 621, 601, 574, 666, 510, 0, 0, 0, 0, 0, 0, 0], \"labels\": [\"30-Dec-2024\", \"31-Dec-2024\", \"1-Jan-2025\", \"2-Jan-2025\", \"3-Jan-2025\", \"4-Jan-2025\", \"5-Jan-2025\", \"6-Jan-2025\", \"7-Jan-2025\", \"8-Jan-2025\", \"9-Jan-2025\", \"10-Jan-2025\", \"11-Jan-2025\", \"12-Jan-2025\", \"13-Jan-2025\", \"14-Jan-2025\", \"15-Jan-2025\", \"16-Jan-2025\", \"17-Jan-2025\", \"18-Jan-2025\", \"19-Jan-2025\", \"20-Jan-2025\", \"21-Jan-2025\", \"22-Jan-2025\", \"23-Jan-2025\", \"24-Jan-2025\", \"25-Jan-2025\", \"26-Jan-2025\", \"27-Jan-2025\", \"28-Jan-2025\", \"29-Jan-2025\"], \"days\": [\"2024-12-30\", \"2024-12-31\", \"2025-01-01\", \"2025-01-02\", \"2025-01-03\", \"2025-01-04\", \"2025-01-05\", \"2025-01-06\", \"2025-01-07\", \"2025-01-08\", \"2025-01-09\", \"2025-01-10\", \"2025-01-11\", \"2025-01-12\", \"2025-01-13\", \"2025-01-14\", \"2025-01-15\", \"2025-01-16\", \"2025-01-17\", \"2025-01-18\", \"2025-01-19\", \"2025-01-20\", \"2025-01-21\", \"2025-01-22\", \"2025-01-23\", \"2025-01-24\", \"2025-01-25\", \"2025-01-26\", \"2025-01-27\", \"2025-01-28\", \"2025-01-29\"], \"count\": 12747.0, \"label\": \"$pageview\", \"filter\": {\"insight\": \"TRENDS\", \"properties\": [], \"filter_test_accounts\": true, \"date_to\": \"2025-01-29T23:59:59.999999Z\", \"date_from\": \"2024-12-30T00:00:00Z\", \"entity_type\": \"events\", \"interval\": \"day\", \"aggregationAxisFormat\": \"numeric\", \"display\": \"ActionsLineGraph\", \"resultCustomizationBy\": \"value\", \"showAlertThresholdLines\": false, \"showLegend\": false, \"showPercentStackView\": false, \"showValuesOnSeries\": false, \"smoothingIntervals\": 1, \"yAxisScaleType\": \"linear\"}, \"action\": {\"days\": [\"2024-12-30T00:00:00Z\", \"2024-12-31T00:00:00Z\", \"2025-01-01T00:00:00Z\", \"2025-01-02T00:00:00Z\", \"2025-01-03T00:00:00Z\", \"2025-01-04T00:00:00Z\", \"2025-01-05T00:00:00Z\", \"2025-01-06T00:00:00Z\", \"2025-01-07T00:00:00Z\", \"2025-01-08T00:00:00Z\", \"2025-01-09T00:00:00Z\", \"2025-01-10T00:00:00Z\", \"2025-01-11T00:00:00Z\", \"2025-01-12T00:00:00Z\", \"2025-01-13T00:00:00Z\", \"2025-01-14T00:00:00Z\", \"2025-01-15T00:00:00Z\", \"2025-01-16T00:00:00Z\", \"2025-01-17T00:00:00Z\", \"2025-01-18T00:00:00Z\", \"2025-01-19T00:00:00Z\", \"2025-01-20T00:00:00Z\", \"2025-01-21T00:00:00Z\", \"2025-01-22T00:00:00Z\", \"2025-01-23T00:00:00Z\", \"2025-01-24T00:00:00Z\", \"2025-01-25T00:00:00Z\", \"2025-01-26T00:00:00Z\", \"2025-01-27T00:00:00Z\", \"2025-01-28T00:00:00Z\", \"2025-01-29T00:00:00Z\"], \"id\": \"$pageview\", \"type\": \"events\", \"order\": 0, \"name\": \"$pageview\", \"custom_name\": null, \"math\": \"total\", \"math_property\": null, \"math_hogql\": null, \"math_group_type_index\": null, \"properties\": {}}}]",
                    "utc_datetime_display": "2025-01-29 16:05:05"
                },
                "is_first_conversation": true,
                "$ai_output_state": {
                    "additional_kwargs": {},
                    "content": "The trend in `$pageview` events is generally upward, peaking on January 21, 2025, with 666 pageviews. There's a noticeable dip on January 22, 2025, which might indicate an anomaly or temporary issue. \n\n**Actionable feedback:**\n- Investigate the cause of the dip on January 22 to understand if it's a data issue or something that needs addressing in the product or marketing strategy.\n- Leverage the upward trend by analyzing what changes or campaigns might have driven the increase, especially around the peak, and double down on those efforts.\n- Consider implementing A/B tests to optimize user engagement further, as the trend suggests growing interest in your chat app for hedgehogs.",
                    "example": false,
                    "id": "run-63695d95-d53f-473e-ac69-98f1b03deefc",
                    "invalid_tool_calls": [],
                    "name": null,
                    "response_metadata": {
                        "finish_reason": "stop",
                        "model_name": "gpt-4o-2024-08-06",
                        "system_fingerprint": "fp_4691090a87"
                    },
                    "tool_calls": [],
                    "type": "ai",
                    "usage_metadata": {
                        "input_token_details": {
                            "audio": 0,
                            "cache_read": 0
                        },
                        "input_tokens": 2070,
                        "output_token_details": {
                            "audio": 0,
                            "reasoning": 0
                        },
                        "output_tokens": 147,
                        "total_tokens": 2217
                    }
                },
                "$ai_parent_id": "9c56f6cd-114e-4d3d-a642-e21749b6fce1",
                "$lib": "posthog-python",
                "$ai_latency": 4.244086027145386,
                "$ai_span_name": "RunnableSequence",
                "conversation_id": "0194b2ce-ef92-0000-008e-c6ba293c8c7d",
                "$lib_version": "3.11.0",
                "$ip": "192.168.97.1",
                "$plugins_succeeded": ["GeoIP (14)"],
                "$plugins_failed": []
            }
        }
    ],
    "id": "537b7988-0186-494f-a313-77a5a8f7db26",
    "inputCost": 0.0899,
    "inputState": {
        "intermediate_steps": null,
        "memory_collection_messages": null,
        "memory_updated": null,
        "messages": [
            {
                "content": "What's the trend in $pageview events?",
                "id": "2ae74707-ccf8-475f-951c-cb2220917af7",
                "type": "human"
            }
        ],
        "plan": null,
        "resumed": null,
        "start_id": "2ae74707-ccf8-475f-951c-cb2220917af7"
    },
    "inputTokens": 18490,
    "outputCost": 0.0061,
    "outputState": null,
    "outputTokens": 417,
    "person": {
        "created_at": "2025-01-22T15:23:36+00:00",
        "distinct_id": "AUu8IYcmhvnjuAWxf0T3ZwDvWPdHLqwxk7LJlbgT2JQ",
        "properties": {
            "$os": "Mac OS X",
            "email": "mal@spikegpt.com",
            "realm": "hosted-clickhouse",
            "$browser": "Chrome",
            "$pathname": "/project/14/max",
            "$referrer": "$direct",
            "joined_at": "2025-01-22T15:18:56.735355+00:00",
            "strapi_id": null,
            "project_id": "01948e98-5a50-0000-3306-c86d238dd29e",
            "$initial_os": "Mac OS X",
            "$os_version": "10.15.7",
            "$current_url": "http://localhost:8010/project/14/max",
            "$device_type": "Desktop",
            "$initial__kx": null,
            "instance_tag": "none",
            "instance_url": "http://localhost:8010",
            "is_signed_up": true,
            "$initial_host": "localhost:8010",
            "project_count": 1,
            "$initial_dclid": null,
            "$initial_gclid": null,
            "anonymize_data": false,
            "$initial_fbclid": null,
            "$initial_gbraid": null,
            "$initial_gclsrc": null,
            "$initial_igshid": null,
            "$initial_irclid": null,
            "$initial_mc_cid": null,
            "$initial_ttclid": null,
            "$initial_twclid": null,
            "$initial_wbraid": null,
            "has_social_auth": false,
            "organization_id": "01948e98-55a7-0000-cf5c-dc3d5baf51a1",
            "$browser_version": 132,
            "$initial_browser": "Chrome",
            "$initial_msclkid": null,
            "$initial_rdt_cid": null,
            "has_password_set": true,
            "social_providers": [],
            "$initial_pathname": "/",
            "$initial_referrer": "http://localhost:8010/",
            "$initial_utm_term": null,
            "$referring_domain": "$direct",
            "is_email_verified": null,
            "$initial_li_fat_id": null,
            "organization_count": 1,
            "$creator_event_uuid": "01948e9c-9cf2-74ce-8c6e-2fbb93372da8",
            "$initial_gad_source": null,
            "$initial_os_version": "10.15.7",
            "$initial_utm_medium": null,
            "$initial_utm_source": null,
            "$initial_current_url": "http://localhost:8010/",
            "$initial_device_type": "Desktop",
            "$initial_utm_content": null,
            "$initial_utm_campaign": null,
            "team_member_count_all": 1,
            "project_setup_complete": true,
            "$initial_browser_version": 132,
            "$initial_referring_domain": "localhost:8010",
            "completed_onboarding_once": true,
            "has_seen_product_intro_for": null,
            "current_organization_membership_level": 8
        },
        "uuid": "f58e970f-7e0f-5ac0-a536-2969cd92364d"
    },
    "totalCost": 0.096,
    "totalLatency": 47.72,
    "traceName": "LangGraph"
}
